Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Completes),Outward issue link (Completes),Inward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Outward issue link (Regression),Outward issue link (Regression),Inward issue link (Required),Inward issue link (Testing),Outward issue link (Testing),Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Language),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Possible memory leak in org.apache.camel.impl.console.EventConsole,CAMEL-18844,13515746,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,rgala,rgala,27/Dec/22 14:29,30/Jan/23 08:59,13/Jul/23 08:33,29/Dec/22 08:23,3.20.0,,,,3.20.1,3.21.0,4.0.0,4.0-M1,,camel-core,,,,,0,,,"Today I have upgraded from 3.18.4 to 3.20.0 and did tests under heavy load as usual. After processing of approximately 3 millions of exchanges JVM's heap usage reached 4GB and it ran out of memory. I analyzed a dump in Eclipse MAT and it showed the following:
{noformat}
One instance of org.apache.camel.spring.boot.SpringBootCamelContext loaded by org.apache.catalina.loader.ParallelWebappClassLoader @ 0x700b5adb0 occupies 3 276 629 016 (97,38%) bytes. The memory is accumulated in one instance of java.lang.Object[], loaded by <system class loader>, which occupies 3 276 529 992 (97,38%) bytes.Keywordsorg.apache.camel.spring.boot.SpringBootCamelContextorg.apache.catalina.loader.ParallelWebappClassLoader @ 0x700b5adb0java.lang.Object[]{noformat}
I discovered that the *java.util.ArrayDeque* instance in *org.apache.camel.impl.console.EventConsole* instance (most probably the exchangeEvents one) contains references to over 12 millions of various org.apache.camel.impl.event.* objects, like {*}ExchangeCreatedEvent{*}, *ExchangeSentEvent* etc.

I will investigate this further, but it looks like the poll method on ArrayDeque does not do something as expected or is used in a wrong way:)

 ",,davsclaus,rgala,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18847,,,,,,,,"28/Dec/22 17:05;davsclaus;camel-console-3.20.1-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/13054198/camel-console-3.20.1-SNAPSHOT.jar",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Dec 29 08:23:39 UTC 2022,,,,,,,,,,,"0|z1eeko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Dec/22 14:39;davsclaus;Thanks for reporting;;;","27/Dec/22 14:41;davsclaus;What JDK version are you using;;;","27/Dec/22 14:46;rgala;I tried on below versions and it behaves exactly the same way on each of them:
{noformat}
java version ""11.0.17"" 2022-10-18 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.17+10-LTS-269)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.17+10-LTS-269, mixed mode){noformat}
and
{noformat}
java version ""11.0.16"" 2022-07-19 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.16+11-LTS-199)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.16+11-LTS-199, mixed mode)
{noformat};;;","27/Dec/22 14:53;rgala;Shouldn't this be synchronized?
{code:java}
if (exchangeEvents.size() >= capacity) {
    exchangeEvents.poll();
} {code}
I maye be wrong but it looks like this poll call was made to prevent the queue size from exceeding value of initial capacity (default 25). Because it's not synchronized, the add method is called more often then the poll one.

 ;;;","27/Dec/22 14:53;davsclaus;Its a bit strange as the event console only keep last 25 always for me, and old exchange instances becomes unreachable and GC can claim them.
You can try also to not include camel-console in your app, then its not present.;;;","27/Dec/22 14:59;rgala;I don't think the ArrayDeque keeps only the last 25 added elements, it grows constantly when needed;;;","27/Dec/22 15:07;davsclaus;Yes you are right that in case of high concurrent load, then more can be added than polled. I am working on fixing this.;;;","27/Dec/22 15:23;davsclaus;Okay I have pushed a fix;;;","27/Dec/22 15:27;davsclaus;I attached a build JAR for camel-console to this JIRA you can use to test with 3.20.0 release.;;;","28/Dec/22 07:10;rgala;I think there is a bug in the code. You do poll from exchangeEvents queue in case of RouteEvent and others :) This is what I see after decompiling attached JAR, in Github it looks OK.;;;","28/Dec/22 09:04;davsclaus;Ah yeah my bad, I did a fix and re-uploaded a new JAR;;;","28/Dec/22 09:31;rgala;Thank you. I tested with the provided JAR. The good news is that it does not leak anymore, the bad news is that performance has degraded :( Threads are mostly waiting for obtaining locks:


{noformat}
""Camel (camel-1) thread #356 - jt400://***MASKED**** - Thread t@547
   java.lang.Thread.State: WAITING
        at jdk.internal.misc.Unsafe.park(Native Method)
        - parking to wait for <364e961d> (a java.util.concurrent.locks.ReentrantLock$FairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:917)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1240)
        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:267)
        at java.util.concurrent.ArrayBlockingQueue.offer(ArrayBlockingQueue.java:341)
        at org.apache.camel.impl.console.EventConsole$ConsoleEventNotifier.notify(EventConsole.java:174)
        at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:1514)
        at org.apache.camel.support.EventHelper.notifyExchangeAsyncProcessingStartedEvent(EventHelper.java:1502)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:174)
        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:818)
        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:726)
        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
        at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:165)
        at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392)
        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
        at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
        at org.apache.camel.component.jt400.Jt400DataQueueConsumer.poll(Jt400DataQueueConsumer.java:60)
        at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202)
        at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.lang.Thread.run(Thread.java:834){noformat};;;","28/Dec/22 12:58;davsclaus;Thanks for testing.

I have attached a new JAR that is faster (do not use locks). Can you test this JAR and report back, thanks.;;;","28/Dec/22 13:14;rgala;Tried it and it looks like there is no performance impact at all, which is awesome. However, I got hundreds of errors like below:


{noformat}
2022-12-28 14:07:19.560 [Camel (camel-1) thread #152 - jt400://***MASKED***] WARN  org.apache.camel.support.EventHelper.doNotifyEvent:1516 - Error notifying event 2939D080E649AA6-00000000000010D4 exchange sending to: direct://***MASKED***. This exception will be ignored.
java.lang.ArrayIndexOutOfBoundsException: Index 25 out of bounds for length 25
    at org.apache.camel.impl.console.EventConsole$ConsoleEventNotifier.notify(EventConsole.java:188)
    at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:1514)
    at org.apache.camel.support.EventHelper.notifyExchangeSending(EventHelper.java:942)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:143)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:818)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:726)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:165)
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392)
    at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
    at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
    at org.apache.camel.component.jt400.Jt400DataQueueConsumer.poll(Jt400DataQueueConsumer.java:60)
    at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202)
    at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116)
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
    at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
    at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
    at java.base/java.lang.Thread.run(Thread.java:834) {noformat}
or
{noformat}
2022-12-28 14:07:23.122 [Camel (camel-1) thread #193 - jt400://***MASKED***] WARN  org.apache.camel.support.EventHelper.doNotifyEvent:1516 - Error notifying event 2939D080E649AA6-0000000000004B48. This exception will be ignored.
java.lang.ArrayIndexOutOfBoundsException: null{noformat};;;","28/Dec/22 17:06;davsclaus;Thanks.

I should have tested it too under high load, but since you are on top of it then lets try again.
I have attached a new JAR that uses atomic counters from JDK (keep an eye on thread contention).;;;","29/Dec/22 07:29;rgala;Thanks.

This one seems perfect. No warnings in log and performance seems unaffected.;;;","29/Dec/22 08:23;davsclaus;Thanks for testing;;;",,,,,,,,,
camel-as2 failed to serve signed requests when compression is done before signing,CAMEL-18842,13515432,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,yasserzamani,yasserzamani,yasserzamani,25/Dec/22 06:05,30/Jan/23 08:59,13/Jul/23 08:34,25/Dec/22 08:25,,,,,3.18.5,3.20.1,3.21.0,4.0.0,4.0-M1,camel-as2,,,,,0,pull-request-available,,"Both compression before and after signature are allowed according to the RFC:

[https://datatracker.ietf.org/doc/html/rfc5402/#section-3]

but currently Camel-AS2 server is only able to serve those requests which compression is done after signature.",,davsclaus,yasserzamani,,,,,,,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,,Sun Dec 25 08:25:55 UTC 2022,,,,,,,Patch Available,,,,"0|z1ecnk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Dec/22 08:25;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka: producer idempotence is not enabled by default,CAMEL-18841,13515383,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,eandre,eandre,23/Dec/22 14:16,30/Jan/23 08:59,13/Jul/23 08:34,02/Jan/23 09:41,3.18.4,,,,3.20.1,3.21.0,4.0.0,4.0-M1,,camel-kafka,,,,,0,,,"Kafka enables idempotence on the producer by default but camel-kafka does not (see the first bullet point [here|https://kafka.apache.org/32/documentation.html#upgrade_320_notable]). As far as I can tell, aligning the following props would fix this:
||camel-kafka prop name||Kafka value||camel-kafka value||
|*retries*|[MAX_INT|https://kafka.apache.org/32/documentation.html#producerconfigs_retries]|[0|https://camel.apache.org/components/3.18.x/kafka-component.html#_component_option_retries]|
|*enableIdempotence* |[true|https://kafka.apache.org/32/documentation.html#producerconfigs_enable.idempotence]|[false|https://camel.apache.org/components/3.18.x/kafka-component.html#_component_option_enableIdempotence]|
|*requestRequiredAcks* |[all|https://kafka.apache.org/32/documentation.html#producerconfigs_acks]|[1|https://camel.apache.org/components/3.18.x/kafka-component.html#_endpoint_query_option_requestRequiredAcks]|

 ",,davsclaus,eandre,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jan 02 09:28:57 UTC 2023,,,,,,,,,,,"0|z1ecco:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/Jan/23 09:28;davsclaus;https://kafka.apache.org/32/documentation.html#upgrade_320_notable
Idempotence for the producer is enabled by default if no conflicting configurations are set. In 3.0.0 and 3.1.0, a bug prevented this default from being applied, which meant that idempotence remained disabled unless the user had explicitly set enable.idempotence to true (See KAFKA-13598for more details). This issue was fixed and the default is properly applied in 3.0.1, 3.1.1, and 3.2.0.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - HTTP broken followRedirection ,CAMEL-18840,13515367,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,akvel,akvel,23/Dec/22 12:09,30/Jan/23 08:59,13/Jul/23 08:34,27/Dec/22 11:24,3.20.0,,,,3.20.1,3.21.0,4.0.0,4.0-M1,,camel-http,,,,,0,camel-http,,"Look like in 3.20.0 broken functionallity for disable follow redirections (HTTP 300-399 statuses) by set automatic-retries-disabled. Now need also set *RedirectHandlingDisabled*

 

Here simple example:
{code:java}
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.http.HttpComponent;
import org.apache.camel.impl.DefaultCamelContext;

import static org.apache.camel.builder.endpoint.StaticEndpointBuilders.http;

class Scratch {
    public static void main(String[] args) throws Exception {
        //1
        CamelContext context1 = createContext(8080);
        var httpComponent1 = context1.getComponent(""http"", HttpComponent.class);
        httpComponent1.setFollowRedirects(false);
        context1.start();

        var response1 = context1.createProducerTemplate().requestBody(""direct:http"", """");
        //Redirect to Apache Camel Page without any errors
        System.out.println(response1);


        //2
        CamelContext context2 = createContext(8081);
        var httpComponent2 = context2.getComponent(""http"", HttpComponent.class);
        httpComponent2.setFollowRedirects(false);
        httpComponent2.setAutomaticRetriesDisabled(true);
        context2.start();
        var response2 = context2.createProducerTemplate().requestBody(""direct:http"", """");
        //Redirect to Apache Camel Page without any errors
        System.out.println(response2);

        //3
        CamelContext context3 = createContext(8082);
        var httpComponent3 = context3.getComponent(""http"", HttpComponent.class);
        httpComponent3.setFollowRedirects(false);
        httpComponent3.setAutomaticRetriesDisabled(true);
        httpComponent3.setRedirectHandlingDisabled(true);
        context3.start();
        var response3 = context3.createProducerTemplate().requestBody(""direct:http"", """");
        //work as expected - error throws
        System.out.println(response3);

    }

    private static CamelContext createContext(int port) throws Exception {
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() {
                restConfiguration().component(""jetty"").host(""localhost"").port(port);
                rest().get(""test303"").to(""direct:addLocation"");
                from(""direct:addLocation"")
                        .setHeader(""Location"", constant(""https://camel.apache.org""))
                        .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(303));

                from(""direct:http"")
                        .setHeader(Exchange.HTTP_METHOD, constant(""GET""))
                        .to(http(""localhost:"" + port + ""/test303"")
                                .bridgeEndpoint(true)
                                .throwExceptionOnFailure(true)
                                .advanced()
                                .okStatusCodeRange(""200-299""))
                        .convertBodyTo(String.class);
            }
        });
        return context;
    }
} {code}
 
 * In version 3.11.1 exaption throws on 2 step with setAutomaticRetriesDisabled  (for run it - need remove setFollowRedirects)

 * In version 3.20.0 exaption throws  {*}only on 3 step{*}.

 

Please fix it or add description of this new behavior to your documentaions.

Also I don't understan how to use option *camel.component.http.follow-redirects* because seems it does not works as expected ""Whether to the HTTP request should follow redirects.""",,akvel,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-16262,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,English,Tue Dec 27 11:21:26 UTC 2022,,,,,,,,,,,"0|z1ec94:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Dec/22 18:14;davsclaus;It looks like it was a mistake in older Camel versions that has been fixed for 3.20 onwards
https://github.com/apache/camel/commit/f99c22e53559abe20f60ef37b663cd672fe95add

;;;","27/Dec/22 09:13;akvel;[~davsclaus]  I do not think that it fiex in 3.20, because follow-redirects and automatic-retries-disabled param does not works as expected{*}{*};;;","27/Dec/22 10:50;davsclaus;No its how the http client works (its that client that handles the redirect handling - not Camel), you need to enable both of them as in #3

;;;","27/Dec/22 11:21;davsclaus;However I agree that its not as intuitive, so we can make it better so if followRedirect=true then it will follow, and if followRedirect=false, then it will not. Then you do not have to tweak these other advanced options.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-core-processor: OnCompletionProcessor#onFailure callback fires more than once,CAMEL-18835,13515236,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,22/Dec/22 13:24,24/Dec/22 16:16,13/Jul/23 08:34,24/Dec/22 16:16,3.20.0,,,,3.14.8,3.18.5,3.20.1,,,camel-core-processor,,,,,0,,,,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-12-22 13:24:02.0,,,,,,,,,,,"0|z1ebgo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - StringQuoteHelper should remove quotes for single element,CAMEL-18834,13515219,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,davsclaus,davsclaus,22/Dec/22 11:12,16/May/23 07:03,13/Jul/23 08:34,22/Dec/22 17:24,3.20.0,,,,3.18.7,3.20.1,3.21.0,4.0.0,4.0-M1,camel-core,,,,,0,,,"Reported via
https://github.com/apache/camel/pull/8936

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-12-22 11:12:12.0,,,,,,,,,,,"0|z1ebcw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ahc component crashes when a traffic starts too early,CAMEL-18816,13513624,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,kmackowiak,kmackowiak,14/Dec/22 15:38,15/Dec/22 17:26,13/Jul/23 08:34,15/Dec/22 17:26,3.18.4,,,,3.18.5,,,,,camel-ahc,,,,,0,,,"Unfortunately it looks that when traffic to camel-ahc component starts to early it crashes with an exception:
{code:java}
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: ahc://http://localhost:59729/foo.
Reason: java.lang.IllegalArgumentException: AsyncHttpClient must be specified on: ahc://http://localhost:59729/foo
   at org.apache.camel.support.cache.DefaultProducerCache.acquireProducer(DefaultProducerCache.java:164)
   at org.apache.camel.processor.RecipientListProcessor.doCreateProcessorExchangePairs(RecipientListProcessor.java:270)
   at org.apache.camel.processor.RecipientListProcessor.createProcessorExchangePairs(RecipientListProcessor.java:246)
   at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:295)
   at org.apache.camel.processor.RecipientList.process(RecipientList.java:175)
   at org.apache.camel.processor.Pipeline$PipelineTask.run(Pipeline.java:106)
   at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:189)
   at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:61)
   at org.apache.camel.processor.Pipeline.process(Pipeline.java:182)
   at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:399)
   at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:210)
   at org.apache.camel.component.timer.TimerConsumer$2.run(TimerConsumer.java:118)
   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
   at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: AsyncHttpClient must be specified on: ahc://http://localhost:59729/foo
   at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:176)
   at org.apache.camel.component.ahc.AhcEndpoint.createProducer(AhcEndpoint.java:94)
   at org.apache.camel.support.DefaultEndpoint.createAsyncProducer(DefaultEndpoint.java:200)
   at org.apache.camel.support.cache.ServicePool$SinglePool.acquire(ServicePool.java:237)
   at org.apache.camel.support.cache.ServicePool$SinglePool.acquire(ServicePool.java:216)
   at org.apache.camel.support.cache.ServicePool.acquire(ServicePool.java:112)
   at org.apache.camel.support.cache.ProducerServicePool.acquire(ProducerServicePool.java:28)
   at org.apache.camel.support.cache.DefaultProducerCache.acquireProducer(DefaultProducerCache.java:149)
   ... 14 common frames omitted
{code}

It causes that all traffic to camel-ahc endpoint is failing. It happens in my application for routes that take messages from JMS queue and sent it to HTTP (using camel-ahc component).

Here is a test that reproduces a problem:
{code:java}
public class AhcRecipientListTest extends BaseAhcTest {

    @Test
    public void testRecipientListCalledBeforeComponentStarted() throws Exception {
        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello"");

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""timer://foo?delay=-1&?repeatCount=1"")
                    .recipientList(constant(getAhcEndpointUri()))
                    .to(""mock:result"");

                from(getTestServerEndpointUri())
                    .transform(constant(""Hello""));
            }
        };
    }
} {code}

I've prepared a patch with another 2 tests and a possible bugfix. The bugfix is based on a solution from HttpEnpoint/HttpProducer.

The bug was discovered in version 3.18.4, but it looks that it was present for a long time.",,davsclaus,kmackowiak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Dec/22 15:29;kmackowiak;camel-ahc-bug.patch;https://issues.apache.org/jira/secure/attachment/13053884/camel-ahc-bug.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Dec 15 17:26:21 UTC 2022,,,,,,,Patch Available,,,,"0|z1e1o0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Dec/22 16:20;davsclaus;camel-ahc is deprecated and removed in newer Camel versions, but we can patch the 3.18.x;;;","14/Dec/22 16:21;davsclaus;I wonder if you can send the patch as github PR against the 3.18.x branch;;;","15/Dec/22 11:17;kmackowiak;Of course. I've send it as a PR [https://github.com/apache/camel/pull/8907];;;","15/Dec/22 17:26;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,
camel-ldap - InvalidSearchFilterException: invalid attribute description,CAMEL-18811,13513457,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chrissh,chrissh,13/Dec/22 17:00,03/Jan/23 18:20,13/Jul/23 08:34,14/Dec/22 10:11,3.14.7,3.18.4,,,3.14.8,3.18.5,3.20.0,,,camel-ldap,,,,,0,,,"We updated to camel 3.18.4 and this broke camel-ldap, running against ActiveDirectory.

Filter string is ""(CN=USERID)"". In 3.18.4, this gets escaped to ""\28CN=USERID\29"" (changed by CAMEL-18696), which does not return a result, but instead throws this exception:
{code:java}
javax.naming.directory.InvalidSearchFilterException: invalid attribute description; remaining name 'OU=Std,OU=User,OU=ORG,DC=ad,DC=example,DC=com'
        at java.naming/com.sun.jndi.ldap.Filter.encodeSimpleFilter(Unknown Source)
        at java.naming/com.sun.jndi.ldap.Filter.encodeFilter(Unknown Source)
        at java.naming/com.sun.jndi.ldap.Filter.encodeFilterString(Unknown Source)
        at java.naming/com.sun.jndi.ldap.LdapClient.search(Unknown Source)
        at java.naming/com.sun.jndi.ldap.LdapCtx.doSearch(Unknown Source)
        at java.naming/com.sun.jndi.ldap.LdapCtx.searchAux(Unknown Source)
        at java.naming/com.sun.jndi.ldap.LdapCtx.c_search(Unknown Source)
        at java.naming/com.sun.jndi.toolkit.ctx.ComponentDirContext.p_search(Unknown Source)
        at java.naming/com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(Unknown Source)
        at java.naming/com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.search(Unknown Source)
        at java.naming/javax.naming.directory.InitialDirContext.search(Unknown Source)
        at org.apache.camel.component.ldap.LdapProducer.simpleSearch(LdapProducer.java:129)
        at org.apache.camel.component.ldap.LdapProducer.process(LdapProducer.java:83)
{code}
The same filter string used to work fine in 3.18.1","linux, jdk11, camel-main, camel-ldap, ActiveDirectory",acosentino,chrissh,davsclaus,,,,,,,,,,,,,,,,,,,,,CAMEL-18696,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 03 18:17:15 UTC 2023,,,,,,,,,,,"0|z1e0n4:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"13/Dec/22 18:13;davsclaus;Try with camel-spring-ldap.
Otherwise try to see if you can alter the code or try something and test on your end. ;;;","13/Dec/22 21:23;chrissh;We updated to 3.18.4 with the intention to fix [CVE-2022-45046|https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45046], which is a blocker to our release. I have not looked into camel-spring-ldap, yet, and may not be able to do so before January.;;;","14/Dec/22 14:16;davsclaus;The CVE turned out to be a false alarm, so you can keep using the old version. We are in process of retracting the CVE;;;","03/Jan/23 15:53;chrissh;On a sidenote, the CVE retraction process seems somewhat slow and unreliable to me. We migrated to 3.20.0, and yet, that version of camel-ldap was again flagged as vulnerable to the CVE, with a criticality that - once again - broke our build.;;;","03/Jan/23 15:59;acosentino;We cannot control the process of retraction. It needs to be propagated from Mitre to subsystem I guess, but we don't have visibility on that.;;;","03/Jan/23 18:17;davsclaus;3.20.0 is not affected at all - whether or not the CVE is retracted, as it was not released before the CVE was public.

However it may be that this CVE database says 3.19.0 is affected and the 3rd item does not have an upper bound, meaning that it may think that 3.20, 3.21, 3.22 etc are all affected.
https://nvd.nist.gov/vuln/detail/CVE-2022-45046#match-8689567;;;",,,,,,,,,,,,,,,,,,,,
camel-core-model: RouteDefinitionHelper should resolve the intercepted from URI which is configured with property placeholder,CAMEL-18809,13513194,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,12/Dec/22 13:38,14/Dec/22 07:44,13/Jul/23 08:34,14/Dec/22 07:44,3.18.4,,,,3.18.5,3.20.0,,,,camel-core-model,,,,,0,,,,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-12-12 13:38:54.0,,,,,,,,,,,"0|z1dz0o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-yaml-dsl - Using method call in filter EIP not working,CAMEL-18807,13511072,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Dec/22 13:48,09/Dec/22 14:01,13/Jul/23 08:34,09/Dec/22 14:01,3.18.4,,,,3.18.5,3.20.0,,,,camel-core,camel-yaml-dsl,,,,0,,,https://github.com/apache/camel-karavan/issues/553,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-12-09 13:48:17.0,,,,,,,,,,,"0|z1dlx4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-telegram: bug while unregistreing webhook with autoregister=true  ,CAMEL-18805,13510460,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zbendhiba,zbendhiba,zbendhiba,07/Dec/22 15:54,12/Dec/22 13:01,13/Jul/23 08:34,12/Dec/22 13:01,3.18.4,3.19.0,,,3.20.0,,,,,camel-telegram,,,,,0,,,"The telegram API has been updated and we must use deleteWebhook instead of setWebhook https://core.telegram.org/bots/api#deletewebhook

 ",,davsclaus,zbendhiba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Dec 12 08:32:27 UTC 2022,,,,,,,,,,,"0|z1di54:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Dec/22 18:34;davsclaus;Backported to 3.18.x;;;","08/Dec/22 08:45;zbendhiba;Many thanks [~davsclaus]  for backporting to 3.18.x

 ;;;","12/Dec/22 08:32;davsclaus;The backport for 3.18.x was not easily possible as the code has changed too much since, so we need to find out if we can backport in another way, and if not then skip it for 3.18.x;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-kafka: kafka consumer stops in case of an authentication issue,CAMEL-18796,13509964,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,lb,lb,05/Dec/22 21:10,13/Dec/22 08:04,13/Jul/23 08:34,13/Dec/22 08:04,3.18.0,3.19.0,,,3.18.5,3.20.0,,,,camel-kafka,,,,,0,,,"I'm running in a strange behavior of the camle-kafka component in case of a glitch/temporary authentication issue. Assuming we have the following code:

{code:java}
//usr/bin/env jbang ""$0"" ""$@"" ; exit $?
//
//DEPS io.quarkus.platform:quarkus-camel-bom:2.14.2.Final@pom
//DEPS org.apache.camel.quarkus:camel-quarkus-kafka
//DEPS org.apache.camel.quarkus:camel-quarkus-log
//DEPS org.apache.camel.quarkus:camel-quarkus-direct
//
//JAVAC_OPTIONS -parameters
//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager
//

import org.apache.camel.ExtendedCamelContext;
import org.apache.camel.builder.endpoint.EndpointRouteBuilder;

public class ck extends EndpointRouteBuilder {

    @Override
    public void configure() throws Exception {
        getCamelContext().adapt(ExtendedCamelContext.class)
            .setErrorHandlerFactory(
                deadLetterChannel(""direct:dlq"")
            );

        var kafka = kafka(""demo"")
            .brokers(""{{test.kafka.broker}}"")
            .autoOffsetReset(""earliest"")
            .securityProtocol(""SASL_SSL"")  
            .saslMechanism(""PLAIN"")
            .saslJaasConfig(""org.apache.kafka.common.security.plain.PlainLoginModule required username='{{test.kafka.username}}' password='{{test.kafka.password}}';"");      

        from(""direct:dlq"")
            .to(""log:dlq?showAll=true&multiline=true"");

        from(kafka)
            .to(""log:kafka?showAll=true&multiline=true"");
    }
}
{code}

What this route is doing is:
1. set-up a global error handler (send to a DLQ)
2. poll data from a kafka topic

If for some reason there is a glitch in the authentication machinery, then the KafkaConsumer thread is terminated and no more poll/reconnection attempt are made.

{code}
2022-12-05 21:52:48,728 DEBUG [org.apa.cam.com.kaf.con.sup.KafkaRecordProcessorFacade] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Last poll on thread demo-Thread 0 resulted on 0 records to process
2022-12-05 21:52:53,729 DEBUG [org.apa.cam.com.kaf.con.sup.KafkaRecordProcessorFacade] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Last poll on thread demo-Thread 0 resulted on 0 records to process
2022-12-05 21:52:58,730 DEBUG [org.apa.cam.com.kaf.con.sup.KafkaRecordProcessorFacade] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Last poll on thread demo-Thread 0 resulted on 0 records to process
2022-12-05 21:53:03,731 DEBUG [org.apa.cam.com.kaf.con.sup.KafkaRecordProcessorFacade] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Last poll on thread demo-Thread 0 resulted on 0 records to process
2022-12-05 21:53:08,732 DEBUG [org.apa.cam.com.kaf.con.sup.KafkaRecordProcessorFacade] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Last poll on thread demo-Thread 0 resulted on 0 records to process
2022-12-05 21:53:09,598 INFO  [org.apa.kaf.com.net.Selector] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-9fc21222-980b-4dd7-8e2b-0a228a4f3fe5-1, groupId=9fc21222-980b-4dd7-8e2b-0a228a4f3fe5] Failed re-authentication with broker-0-lb-cos-ce---l--votu-g----ig.bf2.kafka.rhcloud.com/34.247.249.77 (channelId=2147483647) (Authentication failed: credentials for user could not be verified)
2022-12-05 21:53:09,602 ERROR [org.apa.kaf.cli.NetworkClient] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-9fc21222-980b-4dd7-8e2b-0a228a4f3fe5-1, groupId=9fc21222-980b-4dd7-8e2b-0a228a4f3fe5] Connection to node 2147483647 (broker-0-lb-cos-ce---l--votu-g----ig.bf2.kafka.rhcloud.com/34.247.249.77:443) failed authentication due to: Authentication failed: credentials for user could not be verified
2022-12-05 21:53:09,605 WARN  [org.apa.cam.com.kaf.KafkaFetchRecords] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Exception org.apache.kafka.common.errors.SaslAuthenticationException caught by thread demo-Thread 0 while polling topic demo from kafka: Authentication failed: credentials for user could not be verified: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified

2022-12-05 21:53:09,609 WARN  [org.apa.cam.com.kaf.con.err.BridgeErrorStrategy] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Deferring processing to the exception handler based on polling exception strategy
2022-12-05 21:53:09,624 DEBUG [org.apa.cam.pro.err.DeadLetterChannel] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Failed delivery for (MessageId: 386B9AF6D607152-0000000000000000 on ExchangeId: 386B9AF6D607152-0000000000000000). On delivery attempt: 0 caught: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified
2022-12-05 21:53:09,628 DEBUG [org.apa.cam.pro.SendProcessor] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) >>>> direct://dlq Exchange[386B9AF6D607152-0000000000000000]
2022-12-05 21:53:09,628 DEBUG [org.apa.cam.pro.SendProcessor] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) >>>> log://dlq?multiline=true&showAll=true Exchange[386B9AF6D607152-0000000000000000]
2022-12-05 21:53:09,629 INFO  [dlq] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Exchange[
  Id: 386B9AF6D607152-0000000000000000
  ExchangePattern: InOnly
  Properties: {CamelErrorHandlerBridge=true, CamelExceptionCaught=org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified, CamelFailureRouteId=route2, CamelFatalFallbackErrorHandler=[route2], CamelToEndpoint=log://dlq?multiline=true&showAll=true}
  Headers: {}
  BodyType: null
  Body: [Body is null]
  CaughtExceptionType: org.apache.kafka.common.errors.SaslAuthenticationException  CaughtExceptionMessage: Authentication failed: credentials for user could not be verified  StackTrace: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified

]
2022-12-05 21:53:09,635 INFO  [org.apa.cam.com.kaf.con.err.SeekUtil] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Consumer seeking to next offset 1 to continue polling next message from topic demo on partition 0
2022-12-05 21:53:09,636 DEBUG [org.apa.cam.com.kaf.KafkaFetchRecords] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Closing consumer demo-Thread 0
2022-12-05 21:53:09,636 DEBUG [org.apa.cam.com.kaf.con.sup.PartitionAssignmentListener] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) onPartitionsRevoked: demo-Thread 0 from demo
2022-12-05 21:53:09,643 INFO  [org.apa.cam.com.kaf.KafkaFetchRecords] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Terminating KafkaConsumer thread demo-Thread 0 receiving from topic demo
{code}
 
However according to the documentation, if the pollOnError is set to ERROR_HANDLER as in this case (it is the default), the strategy should use Camel’s error handler to process the exception, and afterwards continue to poll next message but this does not seems to be the case.

This seems to be somehow related to:
- https://issues.apache.org/jira/browse/CAMEL-17424
- https://github.com/apache/camel/commit/55df049a96fd8f52265ef7e7a0cc9ca5a28ab6b3

",,davsclaus,lb,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Dec 12 18:56:12 UTC 2022,,,,,,,,,,,"0|z1df34:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Dec/22 21:11;lb;/cc [~orpiske];;;","05/Dec/22 21:15;orpiske;Thanks Luca, I will take a look;;;","05/Dec/22 21:58;lb;I observed that another strange behavior happens if the pollOnError option is set to RECONNECT, as in such case, only a single reconnect attempt is performed then the consumer is essentially idle and no more reconnect attempt are made:

{code:java}
//usr/bin/env jbang ""$0"" ""$@"" ; exit $?
//
//DEPS io.quarkus.platform:quarkus-camel-bom:2.14.2.Final@pom
//DEPS org.apache.camel.quarkus:camel-quarkus-kafka
//DEPS org.apache.camel.quarkus:camel-quarkus-log
//DEPS org.apache.camel.quarkus:camel-quarkus-direct
//DEPS org.apache.camel.quarkus:camel-quarkus-microprofile-health
//
//JAVAC_OPTIONS -parameters
//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager
//

import org.apache.camel.ExtendedCamelContext;
import org.apache.camel.builder.endpoint.EndpointRouteBuilder;

public class ck extends EndpointRouteBuilder {
    @Override
    public void configure() throws Exception {
        var kafka = kafka(""demo"")
            .brokers(""{{test.kafka.broker}}"")
            .autoOffsetReset(""earliest"")
            .securityProtocol(""SASL_SSL"")  
            .pollOnError(""RECONNECT"")
            .saslMechanism(""PLAIN"")
            .saslJaasConfig(""org.apache.kafka.common.security.plain.PlainLoginModule required username='{{test.kafka.username}}' password='{{test.kafka.password}}';"");      

        from(kafka)
            .to(""log:kafka?showAll=true&multiline=true"");
    }
}
{code}

As result is

{code}
2022-12-05 22:50:44,012 INFO  [org.apa.kaf.com.net.Selector] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] Failed re-authentication with broker-0-lb-cos-ce---l--votu-g----ig.bf2.kafka.rhcloud.com/34.247.249.77 (channelId=2147483647) (Authentication failed: credentials for user could not be verified)
2022-12-05 22:50:44,014 ERROR [org.apa.kaf.cli.NetworkClient] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] Connection to node 2147483647 (broker-0-lb-cos-ce---l--votu-g----ig.bf2.kafka.rhcloud.com/34.247.249.77:443) failed authentication due to: Authentication failed: credentials for user could not be verified
2022-12-05 22:50:44,017 WARN  [org.apa.kaf.cli.con.int.ConsumerCoordinator] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] Asynchronous auto-commit of offsets {demo-0=OffsetAndMetadata{offset=0, leaderEpoch=null, metadata=''}} failed: Authentication failed: credentials for user could not be verified
2022-12-05 22:50:44,016 ERROR [org.apa.kaf.cli.con.int.ConsumerCoordinator] (kafka-coordinator-heartbeat-thread | e5368aa3-6d4f-4081-bd1e-bf58dca40a06) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] An authentication error occurred in the heartbeat thread: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified

2022-12-05 22:50:44,262 WARN  [org.apa.cam.com.kaf.KafkaFetchRecords] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Exception org.apache.kafka.common.errors.SaslAuthenticationException caught by thread demo-Thread 0 while polling topic demo from kafka: Authentication failed: credentials for user could not be verified: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified

2022-12-05 22:50:44,262 WARN  [org.apa.cam.com.kaf.con.err.ReconnectErrorStrategy] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Requesting the consumer to re-connect on the next run based on polling exception strategy
2022-12-05 22:50:44,263 DEBUG [org.apa.cam.com.kaf.KafkaFetchRecords] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) Closing consumer demo-Thread 0
2022-12-05 22:50:44,263 DEBUG [org.apa.cam.com.kaf.con.sup.PartitionAssignmentListener] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) onPartitionsRevoked: demo-Thread 0 from demo
2022-12-05 22:50:45,953 INFO  [org.apa.kaf.com.net.Selector] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] Failed authentication with broker-0-lb-cos-ce---l--votu-g----ig.bf2.kafka.rhcloud.com/34.247.249.77 (channelId=2147483647) (Authentication failed: credentials for user could not be verified)
2022-12-05 22:50:45,954 ERROR [org.apa.kaf.cli.NetworkClient] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] Connection to node 2147483647 (broker-0-lb-cos-ce---l--votu-g----ig.bf2.kafka.rhcloud.com/34.247.249.77:443) failed authentication due to: Authentication failed: credentials for user could not be verified
2022-12-05 22:50:45,955 ERROR [org.apa.kaf.cli.con.KafkaConsumer] (Camel (camel-1) thread #1 - KafkaConsumer[demo]) [Consumer clientId=consumer-e5368aa3-6d4f-4081-bd1e-bf58dca40a06-1, groupId=e5368aa3-6d4f-4081-bd1e-bf58dca40a06] Failed to close coordinator: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed: credentials for user could not be verified
{code}

And no more entries in the log;;;","12/Dec/22 18:31;davsclaus;Is there more work to this?;;;","12/Dec/22 18:56;orpiske;I was waiting for a feedback from Luca, but I think we can close this and reopen if there's any problem.;;;",,,,,,,,,,,,,,,,,,,,,
camel-kafka: consumer not being closed during shutdown,CAMEL-18795,13509880,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,05/Dec/22 13:50,07/Dec/22 09:17,13/Jul/23 08:34,07/Dec/22 09:17,3.18.4,3.19.0,,,3.18.5,3.20.0,,,,camel-kafka,,,,,0,,,"Quoting a user report on the chat:


""I have faced with the issue that org.apache.kafka.clients.consumer.Consumer is never closed during an app shutdown, I use camel 3.18.3. 
It looks that it might happened after these [changes|https://github.com/apache/camel/pull/8095/files]. I don't have this issue on camel 3.18.0
Maybe it's expected that consumer should be closed [here|https://github.com/apache/camel/blob/main/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaFetchRecords.java#L374], but it looks that default pollExceptionStrategies don't return false from canContinue during an app shutdown. ""

 

This is caused as unintended side-effect of CAMEL-17947.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17947,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Dec 07 09:16:51 UTC 2022,,,,,,,,,,,"0|z1dekg:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"05/Dec/22 13:51;orpiske;Probably the easiest / safest way is reverting the fix for 17947 as it seemed to affect only the tests.;;;","07/Dec/22 09:16;orpiske;Backported with https://github.com/apache/camel/pull/8850;;;",,,,,,,,,,,,,,,,,,,,,,,,
Apache camel http component HTTP_PATH header not working with toD,CAMEL-18782,13507819,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,landal79,landal79,01/Dec/22 10:52,04/Dec/22 09:09,13/Jul/23 08:34,01/Dec/22 13:16,3.18.3,3.19.0,,,3.18.5,3.20.0,,,,camel-http,,,,,0,,,"I tried to make work the example in camel toD eip documentation page
{code:java}
from(""direct:login"")
.setHeader(Exchange.HTTP_PATH, simple(""/login""))
.setHeader(Exchange.HTTP_QUERY, simple(""userid=${header.userName}""))
.toD(""http:myloginserver:8080"")
.removeHeader(Exchange.HTTP_PATH)
.removeHeader(Exchange.HTTP_QUERY); {code}

but the header Exchange.HTTP_PATH is not used, so as result the following url is called:
{code:java}
http://myloginserver:8080?userid=xxx {code}
and not
{code:java}
http://myloginserver:8080/login?userid=xxx{code}

I debugged the code I found that the issue could be in the class org.apache.camel.http.base.HttpSendDynamicAware in the method createPreProcessor at line 96. 
In this method the url in toD is parsed and the path is an empty string """", and it's not checked if the Exchange.HTTP_PATH is set. 
I'm upgrading from camel 3.11.x and it used to work, but in that version there isn't the class HttpSendDynamicAware.

Is this the expected behavior?

Is there a way to make it work without changing the code?

Thanks",,davsclaus,landal79,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Dec 01 13:16:09 UTC 2022,,,,,,,,,,,"0|z1d1uw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Dec/22 10:54;davsclaus;Yes turn off toD optimization which you can do directly in that toD().xxxx;;;","01/Dec/22 11:29;landal79;Thanks for the quick answer [~davsclaus] ;;;","01/Dec/22 13:16;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,
Sqs2Consumer message extended causing rejected execution exception when used with threads EIP,CAMEL-18780,13507787,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,smox,smox,smox,01/Dec/22 09:20,30/Jan/23 08:59,13/Jul/23 08:34,15/Jan/23 12:55,3.19.0,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,camel-aws2,,,,,0,,,"The message extension feature of the Sqs2Consumer can cause rejected execution exceptions such as:

{noformat}
2022-11-30 16:43:51.958 logLevel=WARN 10 --- [xxx] logger=o.a.c.component.aws2.sqs.Sqs2Consumer    : Failed polling endpoint: aws2-sqs://arn:aws:sqs:eu-west-1:xxxxxxx:some_queue?delay=3000&extendMessageVisibility=true&greedy=true&visibilityTimeout=60&waitTimeSeconds=10. Will try again at next poll. Caused by: [java.util.concurrent.RejectedExecutionException - Task rejected due queue size limit reached]

java.util.concurrent.RejectedExecutionException: Task rejected due queue size limit reached
	at org.apache.camel.util.concurrent.SizedScheduledExecutorService.scheduleAtFixedRate(SizedScheduledExecutorService.java:92) ~[camel-util-3.18.2.jar:3.18.2]
	at org.apache.camel.component.aws2.sqs.Sqs2Consumer.processBatch(Sqs2Consumer.java:183) ~[camel-aws2-sqs-3.18.2.jar:3.18.2]
	at org.apache.camel.component.aws2.sqs.Sqs2Consumer.poll(Sqs2Consumer.java:121) ~[camel-aws2-sqs-3.18.2.jar:3.18.2]
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202) ~[camel-support-3.18.2.jar:3.18.2]
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116) ~[camel-support-3.18.2.jar:3.18.2]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]
{noformat}

The consumer is configured with a default ThreadPoolPofile, and thus has a maxQueueSize of 1000.

The message extender is running in its own scheduled executor which is instantiated within Sqs2Consumer:

{code:java}
this.scheduledExecutor = getEndpoint().getCamelContext().getExecutorServiceManager()
                    .newSingleThreadScheduledExecutor(this, ""SqsTimeoutExtender"");
{code}

Thus, also using the default thread pool profile, and thus a maxQueueSize of 1000.

A slowdown of processing the extending tasks can lead to this inner queue being filled, causing the exceptions to be thrown (quickly flooding the logs).

Possible solutions that I can think of would be to set the maxQueueSize of the SqsTimeoutExtender to 2x of the consumer thread pool or set the maxQueueSize to unbound (-1). 

The latter might be acceptable tasks are cancelled upon completing and thus cannot grow unbound.

I can contribute a PR, but would need some guidance as to which solution our be preferable.",,davsclaus,nickorfas,smox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jan 15 12:55:17 UTC 2023,,,,,,,,,,,"0|z1d1ns:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Dec/22 09:43;davsclaus;You should generally not have unbounded thread pools as they can go unnoticed and eat up memory.
What happens if you have a longer outage and the extender keeps growing?

Maybe the consumer should have a limit of max inflight tasks so if the extender is hitting a limit then the consumer will not consume new messages until the task pool has more free room.;;;","01/Dec/22 10:41;smox;I believe this limit is defined by the thread pool profile of the consumer already today -  maxQueueSize of the thread pool profile?

If we define the max queue size on the consumer to something higher than default and fill the workqueue, to more than default max queue size, then this bug would also be triggered. The case we have now though is that both executors use the default.

I would thus suggest to always set the extender to a higher maxQueueSize than the consumer - maybe it only need to be maxQueueSize of the consumer + max number of thread of the consumer as they have the policy of CallerRuns..

Thus a default message extend executor would be instantiated with 1020 work queue?;;;","01/Dec/22 10:55;davsclaus;Yeah the last is a good idea (and +1 just to be safe) ;);;;","01/Dec/22 12:28;davsclaus;Simon, can you send a PR with a suggested fix;;;","01/Dec/22 12:50;smox;I'm attempting to reproduce this in a test case.. so far without success;;;","01/Dec/22 14:02;smox;I have hacked together a test case which exposes the problem... and it is actually worse than first expected as it completely blocks the consumer once the maxQueueSize is reached for the extender. This is also what we saw in production though we believed it to be processing very slowly.

If I increase the maxQueueSize as suggested, then it doesn't block. I have to increase it to the max queue size of the route + max pool size + 1 (the +1 is needed in case the main route thread processes the task (due to CallerRuns policy).

The test case right now looks this:



{code:java}
package org.apache.camel.component.aws2.sqs;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

import org.apache.camel.BindToRegistry;
import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit5.CamelTestSupport;
import org.junit.jupiter.api.Test;

import software.amazon.awssdk.services.sqs.model.Message;
import software.amazon.awssdk.utils.Md5Utils;

public class SqsConsumerMessageExtendTest extends CamelTestSupport {

	@EndpointInject(""mock:result"")
	private MockEndpoint mock;

	@Test
	void messageExtendShouldSurvive() throws Exception {
		var start = LocalDateTime.now();
		mock.expectedMessageCount(20);
		MockEndpoint.assertIsSatisfied(context, 30, TimeUnit.SECONDS);
		var end = LocalDateTime.now();

		System.out.println(""Running time was: "" + Duration.between(start, end));
	}

	@BindToRegistry(""amazonSQSClient"")
	public AmazonSQSClientMock addClient() {

		AmazonSQSClientMock clientMock = new AmazonSQSClientMock();

		// add 20 messages
		for (int counter = 0; counter < 20; counter++) {
			Message.Builder message = Message.builder();
			String body = ""Message "" + counter;
			message.body(body);
			message.md5OfBody(Md5Utils.md5AsBase64(body.getBytes()));
			message.messageId(""id"" + counter);
			message.receiptHandle(""handle"" + counter);

			clientMock.messages.add(message.build());
		}

		return clientMock;
	}

	@Override
	protected RouteBuilder createRouteBuilder() {
		final int visibilityTimeout = 2;
		final int taskProcessingTime = 3;
		return new RouteBuilder() {
			@Override
			public void configure() {
				from(""aws2-sqs://MyQueue?amazonSQSClient=#amazonSQSClient&maxMessagesPerPoll=1&visibilityTimeout="" + visibilityTimeout
						+ ""&extendMessageVisibility=true"").threads(1, 4, ""route"").maxQueueSize(10).process(exchange -> {
							TimeUnit.SECONDS.sleep(taskProcessingTime);
							System.out.println(Thread.currentThread().getName() + "": "" + exchange.getIn().getBody(String.class));
						}).to(""mock:result"");
			}
		};
	}
}

{code}

and modified Sqs2Consumer:

{code:java}
@Override
	protected void doStart() throws Exception {
		// start scheduler first
		if (getConfiguration().isExtendMessageVisibility() && scheduledExecutor == null) {
			ThreadPoolProfile profile = new ThreadPoolProfile(""SqsTimeoutExtender"");
			profile.setPoolSize(1);
			profile.setAllowCoreThreadTimeOut(false);
			int maxQueueSize = 10; // TODO how to find this number?
			int routeMaxPoolSize = 4; // TODO how to find this number?
			// the maximum number of pending tasks, +1 for the consumer thread which has CallerRuns policy
			profile.setMaxQueueSize(maxQueueSize + routeMaxPoolSize + 1);
			this.scheduledExecutor = getEndpoint().getCamelContext()
					.getExecutorServiceManager()
					.newScheduledThreadPool(this, ""SqsTimeoutExtender"", profile);
			// this.scheduledExecutor = getEndpoint().getCamelContext()
			// .getExecutorServiceManager()
			// .newSingleThreadScheduledExecutor(this, ""SqsTimeoutExtender"");
		}
{code}

I have left the timeouts large in the test case for now as I have been testing with generous debugging enable in order to understand what was happening. The test case can be adjusted. 

To set back to current behavior, then the line:

{code:java}
profile.setMaxQueueSize(maxQueueSize + routeMaxPoolSize + 1);
{code}

.. can be adjusted to just:
{code:java}
profile.setMaxQueueSize(maxQueueSize);
{code}

Any idea how to get these values?:

{code:java}
int maxQueueSize = 10; // TODO how to find this number?
int routeMaxPoolSize = 4; // TODO how to find this number?
{code}

;;;","01/Dec/22 14:13;smox;It seem to only occur when processing the messages async ( with threads());;;","06/Dec/22 08:30;smox;We ended up adjusting the maxQueueSize of the route pool to something lower than 1000.

Having a 1000 messages, potentially all having to be extended via a single thread wasn't the best idea in the first place. We now have the consumers set with a max queue size of 100-500 instead. This leaves plenty of tasks available for the extender to not end up blocking...

I don't mind contributing an actual PR for fixing the problem - but I don't know what the proper solution would be. At least this ticket will serve as a reference for others who end up facing this issue.;;;","08/Dec/22 17:14;davsclaus;Yeah this happens when using threads that allows so many inflight exchanges to happend that are consumed from SQS. In normal use-cases then this is not happening. So limiting Threads EIP is always a good idea. We may consider reducing Threads EIP to < 1000 task queue as its not optimal to have 1000 pending inflights in-memory, when instead its better to have good flow-control of your consumers.

;;;","08/Dec/22 17:15;davsclaus;However for a SQS fix today then it may be better to make its task queue = default size + 20 to have some slack;;;","08/Dec/22 17:18;davsclaus;Another approach is to add a new API in ExecutorServiceManager to have an API for background worker jobs (like SQS extender) that has a higher task queue than by default, so it would automatic be x2 and therefore cannot run out of space.;;;","15/Jan/23 12:55;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,
camel-jbang - Export to quarkus on windows generate wrong GAVs in pom.xml,CAMEL-18778,13507460,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Nov/22 12:54,01/Dec/22 09:53,13/Jul/23 08:34,01/Dec/22 09:53,3.19.0,,,,3.20.0,,,,,camel-jbang,,,,,0,,,Reported in the community,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-30 12:54:37.0,,,,,,,,,,,"0|z1czn4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs - Fix HdfsNormalFileHandler to handle temporary file path correctly,CAMEL-18776,13507451,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,sekikn,sekikn,sekikn,30/Nov/22 11:57,29/Mar/23 23:15,13/Jul/23 08:34,30/Nov/22 17:08,,,,,3.14.7,3.18.5,3.20.0,,,camel-hdfs,,,,,0,,,"Currently, HDFS consumer doesn't seem to work with normal files.

Given the following file on HDFS,

{code}
$ hdfs dfs -ls /tmp/input
Found 1 items
-rw-r--r--   3 sekikn supergroup          4 2022-11-30 20:40 /tmp/input/foo.txt
$ hdfs dfs -cat /tmp/input/foo.txt
bar
{code}

I tried to run the following route so as to copy normal files from HDFS to local filesystem.

{code}
$ cat put.java 
import org.apache.camel.builder.RouteBuilder;

public class put extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from(""hdfs:192.168.2.2:9000/tmp/input/?repeatCount=1"").log(""${body}"");
    }
}
{code}

But I came across the following error.

{code}
$ camel run put.java 

...

2022-11-30 20:46:25.151  WARN 2718863 --- [9000/tmp/input/] apache.camel.component.hdfs.HdfsConsumer : Failed polling endpoint: hdfs://192.168.2.2:9000/tmp/input/?repeatCount=1. Will try again at next poll. Caused by: [org.apache.camel.RuntimeCamelException - java.io.FileNotFoundException: /tmp/foo.txt.opened5427239805734101292.hdfs/foo.txt.opened (Not a directory)]
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /tmp/foo.txt.opened5427239805734101292.hdfs/foo.txt.opened (Not a directory)
	at org.apache.camel.component.hdfs.HdfsNormalFileHandler.createInputStream(HdfsNormalFileHandler.java:98) ~[camel-hdfs-3.19.0.jar:3.19.0]
	at org.apache.camel.component.hdfs.HdfsNormalFileHandler.createInputStream(HdfsNormalFileHandler.java:38) ~[camel-hdfs-3.19.0.jar:3.19.0]
	at org.apache.camel.component.hdfs.HdfsFileType.createInputStream(HdfsFileType.java:46) ~[camel-hdfs-3.19.0.jar:3.19.0]
	at org.apache.camel.component.hdfs.HdfsInputStream.createInputStream(HdfsInputStream.java:71) ~[camel-hdfs-3.19.0.jar:3.19.0]
	at org.apache.camel.component.hdfs.HdfsConsumer.asHdfsFile(HdfsConsumer.java:246) ~[camel-hdfs-3.19.0.jar:3.19.0]

...

Caused by: java.io.FileNotFoundException: /tmp/foo.txt.opened5427239805734101292.hdfs/foo.txt.opened (Not a directory)
	at java.io.FileInputStream.open0(Native Method) ~[?:?]
	at java.io.FileInputStream.open(FileInputStream.java:219) ~[?:?]
	at java.io.FileInputStream.<init>(FileInputStream.java:157) ~[?:?]
	at org.apache.camel.component.hdfs.HdfsNormalFileHandler.createInputStream(HdfsNormalFileHandler.java:94) ~[camel-hdfs-3.19.0.jar:3.19.0]
	... 27 more
{code}

Temporary file was correctly created as follows, but HdfsNormalFileHandler seems to have mistaken its path. The correct one is ""/tmp/foo.txt.opened5427239805734101292.hdfs"", but there's unnecessary trailing string ""/foo.txt.opened"" in the log above.

{code}
$ ls /tmp/foo.txt*
/tmp/foo.txt.opened5427239805734101292.hdfs
$ cat /tmp/foo.txt.opened5427239805734101292.hdfs 
bar
{code}",,davsclaus,sekikn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Nov 30 13:22:55 UTC 2022,,,,,,,,,,,"0|z1czl4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Nov/22 11:59;davsclaus;What version of Camel do you use;;;","30/Nov/22 13:03;sekikn;I used 3.19.0, but I'm sure the same problem occurs on the main branch too.
{{HdfsNormalFileHandler.getHdfsFileToTmpFile}} should return {{outputDest}} as temporary file's path, but wrongly returns {{new File(outputDest, fileName)}} here.
https://github.com/apache/camel/blob/main/components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsNormalFileHandler.java#L179;;;","30/Nov/22 13:06;davsclaus;Okay you are welcome to send a PR;;;","30/Nov/22 13:22;davsclaus;We should backport to 3.18 and maybe also 3.14 LTSs;;;",,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Run from gist can lead to JMX ObjectName issue,CAMEL-18772,13507258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Nov/22 12:47,29/Nov/22 13:00,13/Jul/23 08:34,29/Nov/22 13:00,,,,,3.20.0,,,,,camel-jbang,,,,,0,,,"camel run https://gist.github.com/mikoskinen/71ce1d1ba5b5d7b690a4ec12af20e8ec


Caused by: javax.management.MalformedObjectNameException: Could not create ObjectName from: org.apache.camel:context=mikoskinen:71ce1d1ba5b5d7b690a4ec12af20e8ec:d1e2b85a4d32bd88ec49cada0dbee719f5055530:Integration,type=context,name=""mikoskinen:71ce1d1ba5b5d7b690a4ec12af20e8ec:d1e2b85a4d32bd88ec49cada0dbee719f5055530:Integration"". Reason: javax.management.MalformedObjectNameException: Invalid character ':' in value part of property",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-29 12:47:09.0,,,,,,,,,,,"0|z1cye8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-support: background tasks without maxDuration are reeschedulable,CAMEL-18766,13506256,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,28/Nov/22 12:24,02/Dec/22 09:16,13/Jul/23 08:34,02/Dec/22 09:16,3.18.3,3.19.0,,,3.18.5,3.20.0,,,,camel-core,,,,,0,,,"This comes as a report from Michal Lück in a thread in Zulip chat: 

??""... I might have discovered an issue with the camel smpp component. It seems that if the producer never had a valid connection, it tries maxReconnect times to establish the connection but if those retries fail the BackgroundTask is looping and never returning. (similar behavior as in https://issues.apache.org/jira/browse/CAMEL-17472) ??
??I created a little example project to demonstrate my problem: [https://github.com/thuri/smpp-test""|https://github.com/thuri/smpp-test]??

Subsequently explained as: 

??"" ... I think the Problem is actually in the BackgroundTask class.??

??If the Budget for the task is created without maxDuration but with maxIterations, the scheduled task will never be canceled and run forever. It will only execute the actual delegate method (booleanSupplier) exactly maxIteration times but the task is still rescheduled doing nothing but logging a warning that the Budget has been consumed completely ..."" ??",,davsclaus,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Nov 29 08:37:39 UTC 2022,,,,,,,,,,,"0|z1cs7s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Nov/22 18:43;davsclaus;If this can be backported to 3.18.x then lets target 3.18.5;;;","29/Nov/22 08:37;orpiske;[~davsclaus] yeah, I think 3.18.5 should be fine for this.;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-core - templatedRoute builder from Java cannot use templates from other DSLs,CAMEL-18764,13506114,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Nov/22 13:08,16/Dec/22 09:21,13/Jul/23 08:34,28/Nov/22 18:42,3.19.0,,,,3.20.0,,,,,camel-core,,,,,0,,,"Adding this to camel-example-routestemplate-xml

{code}
package org.apache.camel.example;

import org.apache.camel.builder.RouteBuilder;

public class MyRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        templatedRoute(""myTemplate"")
                .parameter(""name"", ""Jack"")
                .parameter(""greeting"", ""Hello from Java"");
    }
}
{code}

Should make the templatedRoute able to use the template that is defined in XML.

",,davsclaus,nfilotto,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18683,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Nov 29 09:57:29 UTC 2022,,,,,,,,,,,"0|z1crco:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Nov/22 09:57;nfilotto;The second part of the fix https://github.com/apache/camel/pull/8794;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-yaml-dsl - Intercept is not added in the route definition.,CAMEL-18755,13505790,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Nov/22 15:45,25/Nov/22 12:21,13/Jul/23 08:34,25/Nov/22 12:21,3.18.3,3.19.0,,,3.18.4,3.20.0,,,,camel-yaml-dsl,,,,,0,,,Like CAMEL-18753 but we may also need a fix when you use route interceptors,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18753,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-24 15:45:24.0,,,,,,,,,,,"0|z1cpco:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-yaml-dsl - OnCompletion is not added in the route definition.,CAMEL-18753,13505749,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,bmarc,bmarc,24/Nov/22 12:23,24/Nov/22 15:45,13/Jul/23 08:34,24/Nov/22 15:42,3.18.3,3.19.0,,,3.18.4,3.20.0,,,,camel-yaml-dsl,,,,,0,,,"When creating a YAML-dsl route the OnCompletion definition is not injected in the Routes OnCompletion.

E.G.
{code:yaml}
                - on-completion:
                    steps:
                      - transform:
                          constant: ""Processed""
                      - to: ""mock:on-success""  
                - from:
                    uri: ""direct:start""
                    steps:
                      - to: ""mock:end""
{code}

In this case the on-completion is not called.",,bmarc,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18755,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-24 12:23:01.0,,,,,,,,,,,"0|z1cp3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-elastisearch-starter - Spring Boot clash with json-api dependency,CAMEL-18750,13505693,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Nov/22 06:51,24/Nov/22 07:08,13/Jul/23 08:34,24/Nov/22 07:08,3.19.0,,,,3.20.0,,,,,camel-elasticsearch,camel-spring-boot-starters,,,,0,,,"SB manages a set of dependencies and bring in

jakarta.json:jakarta.json-api:jar:1.1.6

But ES requires v2 of this library, so we must force it to use that version",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Nov 24 07:08:27 UTC 2022,,,,,,,,,,,"0|z1cor4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Nov/22 07:02;davsclaus;This is not possible due to SB 2.7.x is managing and overriding this json-api to be v1.

Camel end users that use camel-elasticsearch-starter must then put v2 as dependency in their own pom.xml to override this.
We cannot do this automatic from Camel Spring Boot.
;;;","24/Nov/22 07:08;davsclaus;I have added a note in the docs about this. Spring Boot v3 is upgraded to ES 8.x so this should work better there out of the box.
https://github.com/apache/camel/commit/01f559487d520ff6694db8d6fc7ef3e81d1b8fdd
;;;",,,,,,,,,,,,,,,,,,,,,,,,
ZipAggregationStrategy loses onCompletion,CAMEL-18739,13504817,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,AlexanderLex,AlexanderLex,21/Nov/22 12:52,14/Dec/22 18:00,13/Jul/23 08:34,14/Dec/22 18:00,3.19.0,,,,3.20.0,,,,,camel-zipfile,,,,,0,,,"We are facing an issue where we end up with stale files in the temp directory (on Windows: C:\Users\...\AppData\Local\Temp). This stops our application from running.

 

Problem description:

When using ""Split Definition"" with ""ZipAggregationStrategy"", we try to aggregate multiple parts in one zip archive. Our Code does exactly that and works fine, but it misses the step to delete the temporaly created archive (created automactly) in the temp directory after completion.

 

We would expect that the completion of the route does the deletion.

 

Having a look in into the code, we saw that the ""ZipAggregationStrategy"" does have a ""DeleteZipFileOnCompletion"", which does exactly that. The ""OnCompletion"" is also added to the exchange. However,  the deletion is never executed, due to a copy of the subexchange to the original exchange (losing the previously added onComplete)

 

Attached you can find code to reproduce the issue.

 ",,AlexanderLex,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Nov/22 12:59;AlexanderLex;zipaggregator-oncomplete.zip;https://issues.apache.org/jira/secure/attachment/13052933/zipaggregator-oncomplete.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Dec 14 18:00:55 UTC 2022,,,,,,,,,,,"0|z1cjcg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Nov/22 12:56;davsclaus;Can you attach the reproducer as tar or zip (not 7z);;;","21/Nov/22 13:08;AlexanderLex;Maybe it helps to add:

 

// must copy results at this point
if (subExchange != null) {
    if (stoppedOnException) {
        // if we stopped due an exception then only propagate the exception
        original.setException(subExchange.getException());
    } else {
        // copy the current result to original so it will contain this result of this eip
        ExchangeHelper.copyResults(original, subExchange);
        *subExchange.adapt(ExtendedExchange.class).handoverCompletions(original);*
    }
}

 

to

MulticastProcessor.java

 ;;;","29/Nov/22 16:16;AlexanderLex;Added a PR:

 

https://github.com/apache/camel/pull/8795;;;","14/Dec/22 17:55;davsclaus;Did the same fix for camel-tarfile;;;","14/Dec/22 18:00;davsclaus;Thanks for reporting and the PR and unit test;;;",,,,,,,,,,,,,,,,,,,,,
[camel-kamelet] parameter substitution does not work in bean instantiation when constructor or factory method is used ,CAMEL-18737,13504800,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ldemasi,ldemasi,ldemasi,21/Nov/22 11:16,02/Dec/22 14:44,13/Jul/23 08:34,02/Dec/22 12:24,3.19.0,,,,3.18.5,3.20.0,,,,camel-core,camel-kamelet,,,,0,,,"When trying to instantiate a bean using the constructor like this:
{code:java}
spec:
  template:
    beans:
      - name: myBean
        type: '#class:com.mycompany.MyBean({{propA}}, {{propb}})'
{code}
property substitution does not happen.",,ldemasi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-21 11:16:28.0,,,,,,,,,,,"0|z1cj8o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate schema/cxfEndpoint.xsd resource in camel-cxf-spring-rest and camel-cxf-spring-soap jars,CAMEL-18736,13504787,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,daveroa,daveroa,21/Nov/22 10:07,21/Nov/22 19:15,13/Jul/23 08:34,21/Nov/22 19:15,3.18.3,,,,3.18.4,3.20.0,,,,came-cxf,,,,,0,,,"We have a project that depends on both camel-cxf-spring-rest.jar and camel-cxf-spring-soap.jar. These both ship with identically named *schema/cxfEndpoint.xsd* resources:

[https://github.com/apache/camel/blob/main/components/camel-cxf/camel-cxf-spring-rest/src/main/resources/schema/cxfEndpoint.xsd]

[https://github.com/apache/camel/blob/main/components/camel-cxf/camel-cxf-spring-soap/src/main/resources/schema/cxfEndpoint.xsd]

which are referenced in spring.schema files:

[https://github.com/apache/camel/blob/main/components/camel-cxf/camel-cxf-spring-rest/src/main/resources/META-INF/spring.schemas]

[https://github.com/apache/camel/blob/main/components/camel-cxf/camel-cxf-spring-soap/src/main/resources/META-INF/spring.schemas]

 

However as the classpath resource *schema/cxfEndpoint.xsd* is duplicated in both modules we get issues when both dependencies are added to the application such as:

{{Caused by: org.xml.sax.SAXParseException: TargetNamespace.1: Expecting namespace 'http://camel.apache.org/schema/cxf/jaxws', but the target namespace of the schema document is 'http://camel.apache.org/schema/cxf/jaxrs'.}}
{{    at java.xml/com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:204)}}

i.e. the jaxws spring.schemas file has loaded the jaxrs schema.

Could the xsd's be renamed to be unique (eg *schema/cxfJaxwsEndpoint.xsd*  and *schema/cxfJaxrsEndpoint.xsd* ) and the respective spring.schema files updated to avoid this classpath conflict?


This issue is blocking our upgrade from 3.16.x to 3.18.x

 

 

 

 

 

 ",,daveroa,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Nov 21 19:15:58 UTC 2022,,,,,,,,,,,"0|z1cj5s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Nov/22 10:25;davsclaus;How do you run Camel;;;","21/Nov/22 10:27;daveroa;It's run inside a spring boot application - hosting both soap and rest services;;;","21/Nov/22 10:29;davsclaus;Thanks for reporting, can you maybe send a PR with the renames for us to review. ;;;","21/Nov/22 10:30;daveroa;Will do;;;","21/Nov/22 17:31;daveroa;I have raised the following PR for this: https://github.com/apache/camel/pull/8753;;;","21/Nov/22 19:15;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,
camel-report-maven-plugin - Class missing when generating the route coverage report,CAMEL-18730,13503741,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nfilotto,nfilotto,nfilotto,19/Nov/22 11:43,21/Nov/22 10:10,13/Jul/23 08:34,19/Nov/22 13:40,3.18.3,3.19.0,,,3.14.7,3.18.4,3.20.0,,,,,,,,0,,,"After generating the route coverage of the tests, if we launch the maven command {{mvn camel-report:route-coverage}}, the plugin fails with the next error:

{noformat}
[ERROR] Failed to execute goal org.apache.camel:camel-report-maven-plugin:3.20.0-SNAPSHOT:route-coverage (default-cli) on project camel-example-main: Execution default-cli of goal org.apache.camel:camel-report-maven-plugin:3.20.0-SNAPSHOT:route-coverage failed: A required class was missing while executing org.apache.camel:camel-report-maven-plugin:3.20.0-SNAPSHOT:route-coverage: edu/emory/mathcs/backport/java/util/Collections
[ERROR] -----------------------------------------------------
[ERROR] realm =    plugin>org.apache.camel:camel-report-maven-plugin:3.20.0-SNAPSHOT
[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy
[ERROR] urls[0] = file:/Users/foo/.m2/repository/org/apache/camel/camel-report-maven-plugin/3.20.0-SNAPSHOT/camel-report-maven-plugin-3.20.0-SNAPSHOT.jar
[ERROR] urls[1] = file:/Users/foo/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar
[ERROR] urls[2] = file:/Users/foo/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar
[ERROR] urls[3] = file:/Users/foo/.m2/repository/org/apache/httpcomponents/httpcore/4.4.15/httpcore-4.4.15.jar
[ERROR] urls[4] = file:/Users/foo/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar
[ERROR] urls[5] = file:/Users/foo/.m2/repository/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.jar
[ERROR] urls[6] = file:/Users/foo/.m2/repository/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.jar
[ERROR] urls[7] = file:/Users/foo/.m2/repository/org/apache/commons/commons-exec/1.3/commons-exec-1.3.jar
[ERROR] urls[8] = file:/Users/foo/.m2/repository/org/apache/maven/plugin-tools/maven-plugin-annotations/3.6.4/maven-plugin-annotations-3.6.4.jar
[ERROR] urls[9] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core/3.20.0-SNAPSHOT/camel-core-3.20.0-SNAPSHOT.jar
[ERROR] urls[10] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core-engine/3.20.0-SNAPSHOT/camel-core-engine-3.20.0-SNAPSHOT.jar
[ERROR] urls[11] = file:/Users/foo/.m2/repository/org/apache/camel/camel-api/3.20.0-SNAPSHOT/camel-api-3.20.0-SNAPSHOT.jar
[ERROR] urls[12] = file:/Users/foo/.m2/repository/org/apache/camel/camel-base-engine/3.20.0-SNAPSHOT/camel-base-engine-3.20.0-SNAPSHOT.jar
[ERROR] urls[13] = file:/Users/foo/.m2/repository/org/apache/camel/camel-base/3.20.0-SNAPSHOT/camel-base-3.20.0-SNAPSHOT.jar
[ERROR] urls[14] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core-reifier/3.20.0-SNAPSHOT/camel-core-reifier-3.20.0-SNAPSHOT.jar
[ERROR] urls[15] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core-processor/3.20.0-SNAPSHOT/camel-core-processor-3.20.0-SNAPSHOT.jar
[ERROR] urls[16] = file:/Users/foo/.m2/repository/org/apache/camel/camel-management-api/3.20.0-SNAPSHOT/camel-management-api-3.20.0-SNAPSHOT.jar
[ERROR] urls[17] = file:/Users/foo/.m2/repository/org/apache/camel/camel-support/3.20.0-SNAPSHOT/camel-support-3.20.0-SNAPSHOT.jar
[ERROR] urls[18] = file:/Users/foo/.m2/repository/org/apache/camel/camel-util/3.20.0-SNAPSHOT/camel-util-3.20.0-SNAPSHOT.jar
[ERROR] urls[19] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core-languages/3.20.0-SNAPSHOT/camel-core-languages-3.20.0-SNAPSHOT.jar
[ERROR] urls[20] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core-model/3.20.0-SNAPSHOT/camel-core-model-3.20.0-SNAPSHOT.jar
[ERROR] urls[21] = file:/Users/foo/.m2/repository/org/apache/camel/camel-bean/3.20.0-SNAPSHOT/camel-bean-3.20.0-SNAPSHOT.jar
[ERROR] urls[22] = file:/Users/foo/.m2/repository/org/apache/camel/camel-browse/3.20.0-SNAPSHOT/camel-browse-3.20.0-SNAPSHOT.jar
[ERROR] urls[23] = file:/Users/foo/.m2/repository/org/apache/camel/camel-cluster/3.20.0-SNAPSHOT/camel-cluster-3.20.0-SNAPSHOT.jar
[ERROR] urls[24] = file:/Users/foo/.m2/repository/org/apache/camel/camel-controlbus/3.20.0-SNAPSHOT/camel-controlbus-3.20.0-SNAPSHOT.jar
[ERROR] urls[25] = file:/Users/foo/.m2/repository/org/apache/camel/camel-dataformat/3.20.0-SNAPSHOT/camel-dataformat-3.20.0-SNAPSHOT.jar
[ERROR] urls[26] = file:/Users/foo/.m2/repository/org/apache/camel/camel-dataset/3.20.0-SNAPSHOT/camel-dataset-3.20.0-SNAPSHOT.jar
[ERROR] urls[27] = file:/Users/foo/.m2/repository/org/apache/camel/camel-direct/3.20.0-SNAPSHOT/camel-direct-3.20.0-SNAPSHOT.jar
[ERROR] urls[28] = file:/Users/foo/.m2/repository/org/apache/camel/camel-directvm/3.20.0-SNAPSHOT/camel-directvm-3.20.0-SNAPSHOT.jar
[ERROR] urls[29] = file:/Users/foo/.m2/repository/org/apache/camel/camel-file/3.20.0-SNAPSHOT/camel-file-3.20.0-SNAPSHOT.jar
[ERROR] urls[30] = file:/Users/foo/.m2/repository/org/apache/camel/camel-health/3.20.0-SNAPSHOT/camel-health-3.20.0-SNAPSHOT.jar
[ERROR] urls[31] = file:/Users/foo/.m2/repository/org/apache/camel/camel-language/3.20.0-SNAPSHOT/camel-language-3.20.0-SNAPSHOT.jar
[ERROR] urls[32] = file:/Users/foo/.m2/repository/org/apache/camel/camel-log/3.20.0-SNAPSHOT/camel-log-3.20.0-SNAPSHOT.jar
[ERROR] urls[33] = file:/Users/foo/.m2/repository/org/apache/camel/camel-mock/3.20.0-SNAPSHOT/camel-mock-3.20.0-SNAPSHOT.jar
[ERROR] urls[34] = file:/Users/foo/.m2/repository/org/apache/camel/camel-ref/3.20.0-SNAPSHOT/camel-ref-3.20.0-SNAPSHOT.jar
[ERROR] urls[35] = file:/Users/foo/.m2/repository/org/apache/camel/camel-rest/3.20.0-SNAPSHOT/camel-rest-3.20.0-SNAPSHOT.jar
[ERROR] urls[36] = file:/Users/foo/.m2/repository/org/apache/camel/camel-saga/3.20.0-SNAPSHOT/camel-saga-3.20.0-SNAPSHOT.jar
[ERROR] urls[37] = file:/Users/foo/.m2/repository/org/apache/camel/camel-scheduler/3.20.0-SNAPSHOT/camel-scheduler-3.20.0-SNAPSHOT.jar
[ERROR] urls[38] = file:/Users/foo/.m2/repository/org/apache/camel/camel-seda/3.20.0-SNAPSHOT/camel-seda-3.20.0-SNAPSHOT.jar
[ERROR] urls[39] = file:/Users/foo/.m2/repository/org/apache/camel/camel-stub/3.20.0-SNAPSHOT/camel-stub-3.20.0-SNAPSHOT.jar
[ERROR] urls[40] = file:/Users/foo/.m2/repository/org/apache/camel/camel-timer/3.20.0-SNAPSHOT/camel-timer-3.20.0-SNAPSHOT.jar
[ERROR] urls[41] = file:/Users/foo/.m2/repository/org/apache/camel/camel-validator/3.20.0-SNAPSHOT/camel-validator-3.20.0-SNAPSHOT.jar
[ERROR] urls[42] = file:/Users/foo/.m2/repository/org/apache/camel/camel-vm/3.20.0-SNAPSHOT/camel-vm-3.20.0-SNAPSHOT.jar
[ERROR] urls[43] = file:/Users/foo/.m2/repository/org/apache/camel/camel-xpath/3.20.0-SNAPSHOT/camel-xpath-3.20.0-SNAPSHOT.jar
[ERROR] urls[44] = file:/Users/foo/.m2/repository/org/apache/camel/camel-xslt/3.20.0-SNAPSHOT/camel-xslt-3.20.0-SNAPSHOT.jar
[ERROR] urls[45] = file:/Users/foo/.m2/repository/org/apache/camel/camel-xml-jaxb/3.20.0-SNAPSHOT/camel-xml-jaxb-3.20.0-SNAPSHOT.jar
[ERROR] urls[46] = file:/Users/foo/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.jar
[ERROR] urls[47] = file:/Users/foo/.m2/repository/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2.jar
[ERROR] urls[48] = file:/Users/foo/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0/jaxb-core-2.3.0.jar
[ERROR] urls[49] = file:/Users/foo/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.3/jaxb-impl-2.3.3.jar
[ERROR] urls[50] = file:/Users/foo/.m2/repository/com/sun/activation/jakarta.activation/1.2.2/jakarta.activation-1.2.2.jar
[ERROR] urls[51] = file:/Users/foo/.m2/repository/org/apache/camel/camel-xml-jaxp/3.20.0-SNAPSHOT/camel-xml-jaxp-3.20.0-SNAPSHOT.jar
[ERROR] urls[52] = file:/Users/foo/.m2/repository/org/apache/camel/camel-xml-io-util/3.20.0-SNAPSHOT/camel-xml-io-util-3.20.0-SNAPSHOT.jar
[ERROR] urls[53] = file:/Users/foo/.m2/repository/org/apache/camel/camel-catalog/3.20.0-SNAPSHOT/camel-catalog-3.20.0-SNAPSHOT.jar
[ERROR] urls[54] = file:/Users/foo/.m2/repository/org/apache/camel/camel-core-catalog/3.20.0-SNAPSHOT/camel-core-catalog-3.20.0-SNAPSHOT.jar
[ERROR] urls[55] = file:/Users/foo/.m2/repository/org/apache/camel/camel-util-json/3.20.0-SNAPSHOT/camel-util-json-3.20.0-SNAPSHOT.jar
[ERROR] urls[56] = file:/Users/foo/.m2/repository/org/apache/camel/camel-tooling-model/3.20.0-SNAPSHOT/camel-tooling-model-3.20.0-SNAPSHOT.jar
[ERROR] urls[57] = file:/Users/foo/.m2/repository/org/apache/camel/camel-catalog-lucene/3.20.0-SNAPSHOT/camel-catalog-lucene-3.20.0-SNAPSHOT.jar
[ERROR] urls[58] = file:/Users/foo/.m2/repository/org/apache/lucene/lucene-core/8.11.1/lucene-core-8.11.1.jar
[ERROR] urls[59] = file:/Users/foo/.m2/repository/org/apache/lucene/lucene-suggest/8.11.1/lucene-suggest-8.11.1.jar
[ERROR] urls[60] = file:/Users/foo/.m2/repository/org/apache/lucene/lucene-analyzers-common/8.11.1/lucene-analyzers-common-8.11.1.jar
[ERROR] urls[61] = file:/Users/foo/.m2/repository/org/apache/camel/camel-catalog-maven/3.20.0-SNAPSHOT/camel-catalog-maven-3.20.0-SNAPSHOT.jar
[ERROR] urls[62] = file:/Users/foo/.m2/repository/org/codehaus/groovy/groovy/3.0.12/groovy-3.0.12.jar
[ERROR] urls[63] = file:/Users/foo/.m2/repository/org/apache/ivy/ivy/2.5.1/ivy-2.5.1.jar
[ERROR] urls[64] = file:/Users/foo/.m2/repository/org/apache/camel/camel-allcomponents/3.20.0-SNAPSHOT/camel-allcomponents-3.20.0-SNAPSHOT.pom
[ERROR] urls[65] = file:/Users/foo/.m2/repository/org/apache/camel/camel-route-parser/3.20.0-SNAPSHOT/camel-route-parser-3.20.0-SNAPSHOT.jar
[ERROR] urls[66] = file:/Users/foo/.m2/repository/org/apache/camel/camel-tooling-util/3.20.0-SNAPSHOT/camel-tooling-util-3.20.0-SNAPSHOT.jar
[ERROR] urls[67] = file:/Users/foo/.m2/repository/org/jboss/forge/roaster/roaster-api/2.26.0.Final/roaster-api-2.26.0.Final.jar
[ERROR] urls[68] = file:/Users/foo/.m2/repository/org/jboss/forge/roaster/roaster-jdt/2.26.0.Final/roaster-jdt-2.26.0.Final.jar
[ERROR] Number of foreign imports: 1
[ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]]
[ERROR] 
[ERROR] -----------------------------------------------------
[ERROR] : edu.emory.mathcs.backport.java.util.Collections
[ERROR] -> [Help 1]
[ERROR] 

{noformat}
",,nfilotto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Nov 21 10:10:54 UTC 2022,,,,,,,,,,,"0|z1ccps:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Nov/22 11:48;nfilotto;The corresponding PR https://github.com/apache/camel/pull/8731;;;","21/Nov/22 09:53;nfilotto;The version 3.14.7 doesn't exist yet, if someone could add it to the JIRA project and add it to the list of the fix versions of this ticket, it would be great. Thx in advance;;;","21/Nov/22 10:10;nfilotto;Thx [~davsclaus];;;",,,,,,,,,,,,,,,,,,,,,,,
Elasticsearch rest and Elasticsearch Java component name clash ,CAMEL-18728,13503663,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,lboutros,lboutros,18/Nov/22 16:45,19/Nov/22 18:31,13/Jul/23 08:34,19/Nov/22 18:31,3.19.0,,,,3.20.0,,,,,camel-endpointdsl,,,,,0,,,"Currently we cannot use the new Elasticsearch component in the Endpoint DSL because there is a component name clash.

We need to update the old deprecated component class name in order to let the build process generate the correct catalog descriptor and the needed classes and function in the dsl code.",,lboutros,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-18 16:45:43.0,,,,,,,,,,,"0|z1cc8o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel AWS2 S3 doesn't handle metadata correctly,CAMEL-18722,13502337,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,henka-rl,henka-rl,14/Nov/22 18:20,22/Nov/22 07:06,13/Jul/23 08:34,22/Nov/22 07:06,3.18.2,3.18.3,,,3.18.4,3.20.0,,,,camel-aws2,,,,,0,,,When storing files to AWS S3 metadata like Content-Disposition isn't handled correctly by the camel-aws2-s3 component. It should be stored as 'Content-Disposition' but is stored as 'x-amz-meta-content-disposition'. Content-Type is stored as both 'Content-Type' and 'x-amz-meta-content-type'. ,,acosentino,henka-rl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Nov 14 18:38:51 UTC 2022,,,,,,,,,,,"0|z1c42w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Nov/22 18:38;acosentino;I'll have a look. If you want to open a PR please do.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Adding the dependency of camel-quarkus-core creates two entries in exported POM.xml,CAMEL-18719,13501831,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,msharma,msharma,14/Nov/22 02:40,22/Nov/22 08:28,13/Jul/23 08:34,22/Nov/22 08:28,3.20.0,,,,3.20.0,,,,,camel-jbang,,,,,0,,,"{code:java}
 jbang --debug --verbose -Dcamel.jbang.version=3.20.0-SNAPSHOT ../CamelJBang.java  export --deps=org.apache.camel.quarkus:camel-quarkus-core:2.13.0 {code}
The above command created an exported project with pom.xml with two camel-quarkus dependency.
{code:java}
    <dependencies>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-platform-http</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-microprofile-health</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-core</artifactId>
            <version>2.13.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-direct</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel.quarkus</groupId>
            <artifactId>camel-quarkus-yaml-dsl</artifactId>
        </dependency>
        <dependency>
            <groupId></groupId>
            <artifactId>null</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies> {code}",,davsclaus,msharma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Nov 22 08:28:12 UTC 2022,,,,,,,,,,,"0|z1c0yo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Nov/22 02:42;msharma;I am working on it.;;;","22/Nov/22 08:28;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka: investigate offset not increasing,CAMEL-18717,13501185,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,12/Nov/22 08:02,24/Nov/22 10:26,13/Jul/23 08:34,24/Nov/22 10:26,3.18.3,3.19.0,,,3.18.4,3.20.0,,,,camel-kafka,,,,,0,,,"Quoting the report from an user on the users mailing list:

 

??Hi All,??

??I'm upgrading Camel from 3.16 to 3.17 and found a problem that OffsetRepository didn't get update after manual commit.??
??It is a Spring boot project and MemoryStateRepository as follows.??

??        @Bean??
??        public MemoryStateRepository offsetRepo() {??
??                MemoryStateRepository stateRepository = new MemoryStateRepository();??
??                stateRepository.setState(topic + ""/0"", """");??
??                return stateRepository;??
??        }??

??Here is the method I use when commit:??

??        private void commitOffsetToKafka(Exchange exchange) {??
??                KafkaManualCommit manual = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);??
??                manual.commit();??
??        }??

??Here is my Kafka endpoint??

??kafka:integration_test _topic?brokers=[127.0.0.1:41478|http://127.0.0.1:41478/]&autoCommitEnable=false&allowManualCommit=true&seekTo=beginning&maxPollRecords=2&groupId=ANE&autoOffsetReset=earliest&offsetRepository=#offsetRepo&kafkaManualCommitFactory=#class:org.apache.camel.component.kafka.consumer.DefaultKafkaManualCommitFactory??

??It is working fine in 3.16. When DefaultkafkaManualSyncCommit.commit() is invoked. The offsetRepository.setState() get invoked so the offset increased.??
??However, in 3.17, DefaultkafkaManualSyncCommit.commit() doesn't have a reference to offsetRepository so the offset in offsetRepository won't get increased.??

??Is this a bug or there is a different way to get the offset after committing. Could you please suggest what I should do to test if the offset get increased after manual commit???

 

This happened even after upgrading to Camel 3.18.3 as requested on the thread.

 

This needs to be investigated further.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Nov 24 10:25:51 UTC 2022,,,,,,,,,,,"0|z1bwz4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Nov/22 10:25;orpiske;Backported to 3.18 with https://github.com/apache/camel/pull/8757.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Loop processor interrupted when Camel engine shutdown,CAMEL-18713,13501098,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,holubec.petr,holubec.petr,11/Nov/22 11:41,04/Dec/22 12:18,13/Jul/23 08:34,04/Dec/22 12:18,3.14.4,3.14.6,3.18.2,,3.14.7,3.18.5,3.20.0,,,camel-core,,,,,0,,,"*Description*

I have a route constructed approximately like this:
{code:java}
processDefinition
  .process { ex -> // setup repeating }
  .loopDoWhile(RepeatingPredicate())
  .process { ex -> // prepare iteration }
  .process { ex -> // do work }
  .process { ex -> // finish iteration }
  .end()
  .process { ex -> // clean up repeating }
{code}
The route does some setup and then starts iterating - let's say 10 iterations when ""the work"" takes 10 seconds to complete.

Then, in the middle of processing (let's say during 5th iteration), I request Camel engine to shutdown with infinite timeout:
{code:java}
context.shutdownStrategy.timeout = Long.MAX_VALUE
context.stop(){code}
But the Camel engine will shutdown immediately because it is not able to correctly detect current inflight requests.

*Additional Info*

More specifically, the {{ShutdownTask}} class tries to [get inflight requests| https://github.com/apache/camel/blob/ca8b653c50b0ee32a522455635fbc4c7564c5972/core/camel-base-engine/src/main/java/org/apache/camel/impl/engine/DefaultShutdownStrategy.java#L674]:
 * _InflightRepository_ returns 1 which is correct number
 * but iterating over services returns negative number at the end
-> so the condition {{size > 0}} is false which means no inflight requests

When going deeper, the {{LoopProcessor}} classes are the ones which return negative numbers of inflight requests.
Looks like the {{taskCount}} is not initialized because [{{expression}} is null|https://github.com/apache/camel/blob/fb44d321a0dd0e5190565f0bb15e73fc0f14ef3d/core/camel-core-processor/src/main/java/org/apache/camel/processor/LoopProcessor.java#L127] which means it's value is 0 but [decremented several times|https://github.com/apache/camel/blob/fb44d321a0dd0e5190565f0bb15e73fc0f14ef3d/core/camel-core-processor/src/main/java/org/apache/camel/processor/LoopProcessor.java#L153]
which will cause negative numbers to return.","* occurred on Windows 11
 * tried with Camel versions {{{}3.14.4{}}}, {{3.14.6}} and {{3.18.2}}
 * route starts using {{scheduler://}}

 ",holubec.petr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-11 11:41:55.0,,,,,,,,,,,"0|z1bwfs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenAPI Schema references not generating correctly ,CAMEL-18711,13500986,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,iliya.gr,iliya.gr,10/Nov/22 22:36,11/Nov/22 10:19,13/Jul/23 08:34,11/Nov/22 10:05,3.14.6,3.18.3,3.19.0,,3.18.4,3.20.0,,,,camel-openapi-java,,,,,0,,,"References to schema definitions are not generating correctly when classes defined in RestDefiniton _type_ and _outType_ have _@Schema(name = ""..."")_ annotation. Older camel-swagger-java component doesn't have this issue.

Generated references contains full class name of defined class while schemas contains short names from annotations.

Also generated x-className extension of such classes doesn't contain class name but contain short name from annotation. 

see: https://issues.apache.org/jira/browse/CAMEL-15503",,davsclaus,iliya.gr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Nov 11 10:19:49 UTC 2022,,,,,,,,,,,"0|z1bvqw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Nov/22 10:05;davsclaus;Thanks for reporting and the PR;;;","11/Nov/22 10:19;iliya.gr;Can You please add this fix to 3.14?;;;",,,,,,,,,,,,,,,,,,,,,,,,
components - Headers metadata is not included for components extending another component,CAMEL-18704,13500716,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,davsclaus,davsclaus,09/Nov/22 14:22,16/Nov/22 10:48,13/Jul/23 08:34,16/Nov/22 10:48,3.18.0,,,,3.20.0,,,,,build system,,,,,0,,,"The camel-activemq component does not have a headers in the JAR and in the website docs. This is because it extends camel-jms, that has the headers.

https://camel.apache.org/components/3.18.x/activemq-component.html#_endpoint_options

https://camel.apache.org/components/3.18.x/jms-component.html#_message_headers

There are other components that extend like ftp <- file, and jsch <- file etc.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Nov 09 14:25:27 UTC 2022,,,,,,,,,,,"0|z1bu34:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Nov/22 14:25;davsclaus;The maven plugin that generates the json files have logic for this for. the endpoint options, so maybe something can be done similar for headers;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang generates package name with special symbols,CAMEL-18690,13495570,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,04/Nov/22 14:34,05/Nov/22 14:30,13/Jul/23 08:34,05/Nov/22 14:30,3.18.2,,,,3.18.4,3.20.0,,,,camel-jbang,,,,,0,,,"if I have the following property in `application.properties`:
{code:java}
camel.jbang.gav=org.camel.karavan.demo:hello-world:1.0.0
{code}

then camel-jbang generates the following java code

{code:java}
package org.camel.karavan.demo.hello-world;
...
{code}

imho camel-jbang should generate package name according to https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html",,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-11-04 14:34:33.0,,,,,,,,,,,"0|z1ayc8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Context reload doesn't update properties when using EndpointDSL,CAMEL-18689,13495560,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mbergsma,mbergsma,04/Nov/22 13:51,07/Nov/22 10:38,13/Jul/23 08:34,07/Nov/22 10:38,3.19.0,,,,3.20.0,,,,,camel-endpointdsl,,,,,0,,,"My project is using the {*}DefaultContextReloadStrategy{*}.

On a property change a method is called that triggers the *onReload* method as described in the documentation
{code:java}
ContextReloadStrategy reload = this.camelContext.hasService(ContextReloadStrategy.class);
if (reload != null) {
    // trigger reload
    reload.onReload(this);
} {code}
 

I currently have two routes running with endpoints that use a property:
{code:java}
from(timer(""testTimer"").period(property(""timer.delay"")))
        .routeId(""test-timer-route"")
        .log(""Timer delay: {{timer.delay}}"");

from(""timer://testTimer2?period={{timer.delay}}"")
        .routeId(""test2-timer-route"")
        .log(""Timer delay: {{timer.delay}}""); {code}
After the reload only the second route now uses the updated *timer.delay* property value in its endpoint.

In both routes the log statement does use the updated property value.

 

Logs of the reload:
{code:java}
2022-11-04 14:41:02.770  INFO 992 --- [TaskScheduler-1] o.a.c.s.DefaultContextReloadStrategy     : Reloading CamelContext (camel-1) triggered by: org.company.software.integration.impl.SoftwareIntegrationAutoConfiguration$$EnhancerBySpringCGLIB$$2bbdb778@7abe9dda
2022-11-04 14:41:02.771 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.engine.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 45 seconds)
2022-11-04 14:41:02.773 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.BaseExecutorServiceManager     : Created new ThreadPool for source: org.apache.camel.impl.engine.DefaultShutdownStrategy@7e0c88e3 with name: ShutdownTask. -> org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@6bf850e7[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0][ShutdownTask]
2022-11-04 14:41:02.774 DEBUG 992 --- [ - ShutdownTask] o.a.c.i.engine.DefaultShutdownStrategy   : There are 1 routes to shutdown
2022-11-04 14:41:02.776 DEBUG 992 --- [ - ShutdownTask] o.a.c.i.engine.DefaultShutdownStrategy   : Route: test2-timer-route suspended and shutdown deferred, was consuming from: timer://testTimer2
2022-11-04 14:41:02.776 DEBUG 992 --- [ - ShutdownTask] o.apache.camel.support.DefaultConsumer   : Stopping consumer: Consumer[timer://testTimer2?period=10000]
2022-11-04 14:41:02.777 DEBUG 992 --- [ - ShutdownTask] o.a.c.i.engine.DefaultShutdownStrategy   : Route: test2-timer-route shutdown complete, was consuming from: timer://testTimer2
2022-11-04 14:41:02.777 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.engine.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 6ms
2022-11-04 14:41:02.778 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=TimerConsumer(0x238d27ef)
2022-11-04 14:41:02.778 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log2""
2022-11-04 14:41:02.779 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Stopped test2-timer-route (timer://testTimer2)
2022-11-04 14:41:02.779 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.engine.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 45 seconds)
2022-11-04 14:41:02.779 DEBUG 992 --- [ - ShutdownTask] o.a.c.i.engine.DefaultShutdownStrategy   : There are 1 routes to shutdown
2022-11-04 14:41:02.780 DEBUG 992 --- [ - ShutdownTask] o.a.c.i.engine.DefaultShutdownStrategy   : Route: test-timer-route suspended and shutdown deferred, was consuming from: timer://testTimer
2022-11-04 14:41:02.780 DEBUG 992 --- [ - ShutdownTask] o.apache.camel.support.DefaultConsumer   : Stopping consumer: Consumer[timer://testTimer?period=10000]
2022-11-04 14:41:02.781 DEBUG 992 --- [ - ShutdownTask] o.a.c.i.engine.DefaultShutdownStrategy   : Route: test-timer-route shutdown complete, was consuming from: timer://testTimer
2022-11-04 14:41:02.781 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.engine.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 1ms
2022-11-04 14:41:02.781 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=TimerConsumer(0x3514df8d)
2022-11-04 14:41:02.781 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log1""
2022-11-04 14:41:02.781 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Stopped test-timer-route (timer://testTimer)
2022-11-04 14:41:02.782 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Routes stopped (stopped:2)
2022-11-04 14:41:02.782 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   :     Stopped test2-timer-route (timer://testTimer2)
2022-11-04 14:41:02.782 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   :     Stopped test-timer-route (timer://testTimer)
2022-11-04 14:41:02.782 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultConsumer   : Shutting down consumer: Consumer[timer://testTimer?period=10000]
2022-11-04 14:41:02.783 DEBUG 992 --- [TaskScheduler-1] o.a.camel.support.TimerListenerManager   : Removed TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@6768dc74
2022-11-04 14:41:02.784 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""test-timer-route""
2022-11-04 14:41:02.784 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Shutdown test-timer-route (timer://testTimer)
2022-11-04 14:41:02.784 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Removing: timer://testTimer?period=10000 which was only in use by route: test-timer-route
2022-11-04 14:41:02.784 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""timer://testTimer\?period=10000""
2022-11-04 14:41:02.784 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultConsumer   : Shutting down consumer: Consumer[timer://testTimer2?period=10000]
2022-11-04 14:41:02.785 DEBUG 992 --- [TaskScheduler-1] o.a.camel.support.TimerListenerManager   : Removed TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@31dbca5d
2022-11-04 14:41:02.785 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""test2-timer-route""
2022-11-04 14:41:02.785 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Shutdown test2-timer-route (timer://testTimer2)
2022-11-04 14:41:02.785 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Removing: timer://testTimer2?period=10000 which was only in use by route: test2-timer-route
2022-11-04 14:41:02.785 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""timer://testTimer2\?period=10000""
2022-11-04 14:41:02.786 DEBUG 992 --- [TaskScheduler-1] org.apache.camel.support.ResolverHelper  : Found ProcessorFactory: org.apache.camel.processor.DefaultProcessorFactory via: META-INF/services/org/apache/camel/processor-factory
2022-11-04 14:41:02.786 DEBUG 992 --- [TaskScheduler-1] org.apache.camel.support.ResolverHelper  : Detected and using ProcessorFactory: org.apache.camel.processor.DefaultProcessorFactory@46806dcc
2022-11-04 14:41:02.787 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Resolved text: Timer delay: {{timer.delay}} -> Timer delay: 5000
2022-11-04 14:41:02.787 DEBUG 992 --- [TaskScheduler-1] org.apache.camel.reifier.LogReifier      : LogName is not configured, using route id as logName: test-timer-route
2022-11-04 14:41:02.787 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Warming up route id: test-timer-route having autoStartup=true
2022-11-04 14:41:02.789 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log1""
2022-11-04 14:41:02.790 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""test-timer-route""
2022-11-04 14:41:02.791 DEBUG 992 --- [TaskScheduler-1] o.a.camel.support.TimerListenerManager   : Added TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@6cb632c8
2022-11-04 14:41:02.791 DEBUG 992 --- [TaskScheduler-1] o.a.c.m.JmxManagementLifecycleStrategy   : Load performance statistics disabled
2022-11-04 14:41:02.791 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Route: test-timer-route >>> Route[timer://testTimer?period=10000 -> null]
2022-11-04 14:41:02.791 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Starting consumer (order: 1002) on route: test-timer-route
2022-11-04 14:41:02.792 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=TimerConsumer(0x1826e547)
2022-11-04 14:41:02.792 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultConsumer   : Build consumer: Consumer[timer://testTimer?period=10000]
2022-11-04 14:41:02.793 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultConsumer   : Starting consumer: Consumer[timer://testTimer?period=10000]
2022-11-04 14:41:02.793 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Route: test-timer-route started and consuming from: timer://testTimer
2022-11-04 14:41:02.793 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Resolved text: timer://testTimer2?period={{timer.delay}} -> timer://testTimer2?period=5000
2022-11-04 14:41:02.794 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultComponent  : Creating endpoint uri=[timer://testTimer2?period=5000], path=[testTimer2]
2022-11-04 14:41:02.794 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : timer://testTimer2?period=5000 converted to endpoint: timer://testTimer2?period=5000 by component: org.apache.camel.component.timer.TimerComponent@28d1b2f
2022-11-04 14:41:02.795 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""timer://testTimer2\?period=5000""
2022-11-04 14:41:02.796 DEBUG 992 --- [TaskScheduler-1] o.a.c.impl.engine.AbstractCamelContext   : Resolved text: Timer delay: {{timer.delay}} -> Timer delay: 5000
2022-11-04 14:41:02.796 DEBUG 992 --- [TaskScheduler-1] org.apache.camel.reifier.LogReifier      : LogName is not configured, using route id as logName: test2-timer-route
2022-11-04 14:41:02.797 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Warming up route id: test2-timer-route having autoStartup=true
2022-11-04 14:41:02.798 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log2""
2022-11-04 14:41:02.800 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""test2-timer-route""
2022-11-04 14:41:02.800 DEBUG 992 --- [TaskScheduler-1] o.a.camel.support.TimerListenerManager   : Added TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@7fe67e41
2022-11-04 14:41:02.800 DEBUG 992 --- [TaskScheduler-1] o.a.c.m.JmxManagementLifecycleStrategy   : Load performance statistics disabled
2022-11-04 14:41:02.800 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Route: test2-timer-route >>> Route[timer://testTimer2?period=5000 -> null]
2022-11-04 14:41:02.800 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Starting consumer (order: 1003) on route: test2-timer-route
2022-11-04 14:41:02.801 DEBUG 992 --- [TaskScheduler-1] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=TimerConsumer(0x1b5dd42a)
2022-11-04 14:41:02.801 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultConsumer   : Build consumer: Consumer[timer://testTimer2?period=5000]
2022-11-04 14:41:02.801 DEBUG 992 --- [TaskScheduler-1] o.apache.camel.support.DefaultConsumer   : Starting consumer: Consumer[timer://testTimer2?period=5000]
2022-11-04 14:41:02.801 DEBUG 992 --- [TaskScheduler-1] o.a.c.i.e.InternalRouteStartupManager    : Route: test2-timer-route started and consuming from: timer://testTimer2 {code}
 
 
 

 ",,davsclaus,mbergsma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Nov 07 10:38:02 UTC 2022,,,,,,,,,,,"0|z1aya0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Nov/22 19:27;davsclaus;Can you try as I suspect its property(""xxx"") that needs some special code to support this reloading 

{code}
from(timer(""testTimer"").period(""{{timer.delay}}""))
        .routeId(""test-timer-route"")
        .log(""Timer delay: {{timer.delay}}"");
{code};;;","07/Nov/22 08:24;mbergsma;I have tried the different route, but it did not make a difference.;;;","07/Nov/22 10:38;davsclaus;Thanks for reporting and with a sample route;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-kafka: kafka component is not fully resumable,CAMEL-18688,13495551,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,04/Nov/22 13:31,09/Nov/22 15:46,13/Jul/23 08:34,09/Nov/22 15:46,3.18.3,3.19.0,,,3.20.0,,,,,camel-kafka,camel-resume-api,,,,0,,,"Trying to use a resume adapter with Kafka results in the following error:
{code:java}
2022-11-04 14:19:52,061 [ble-route-auto]] WARN  KafkaFetchRecords              - Error subscribing org.apache.kafka.clients.consumer.KafkaConsumer due to: Cannot cast org.apache.camel.support.resume.ResumeActionAwareAdapter to org.apache.
camel.component.kafka.consumer.support.KafkaConsumerResumeAdapter
java.lang.ClassCastException: Cannot cast org.apache.camel.support.resume.ResumeActionAwareAdapter to org.apache.camel.component.kafka.consumer.support.KafkaConsumerResumeAdapter
{code}
 ",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Nov 09 15:46:38 UTC 2022,,,,,,,,,,,"0|z1ay80:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Nov/22 15:46;orpiske;Fixed with the linked PR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Jbang does not add camel-openapi-java component when required,CAMEL-18676,13494349,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,02/Nov/22 15:02,05/Nov/22 21:32,13/Jul/23 08:34,05/Nov/22 21:32,3.18.3,,,,3.18.4,3.20.0,,,,camel-jbang,,,,,0,,,"The following yaml:
{code:java}
- route:
    from:
      uri: direct:greeting
      steps:
        - log:
            message: ${headers}
        - setBody:
            expression:
              simple:
                expression: ${header.name} says hi
        - log:
            message: $body}
    id: greeting
- rest:
    get:
      - path: /greeting/{name}
        to: direct:greeting
    apiDocs: true
- restConfiguration:
    component: platform-http
    apiContextPath: /api
    contextPath: /rest
{code}

fails to run with an exception:

{code:java}
org.apache.camel.FailedToStartRouteException: Failed to start route route1 because of null
        at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123)
        at org.apache.camel.impl.engine.InternalRouteStartupManager.doWarmUpRoutes(InternalRouteStartupManager.java:306)
        at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:189)
        at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:147)
        at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3365)
        at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:3033)
        at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2988)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
        at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2649)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
        at org.apache.camel.main.KameletMain.doStart(KameletMain.java:237)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
        at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:579)
        at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:208)
        at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:73)
        at picocli.CommandLine.executeUserObject(CommandLine.java:1953)
        at picocli.CommandLine.access$1300(CommandLine.java:145)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2358)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2352)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2314)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2179)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2316)
        at picocli.CommandLine.execute(CommandLine.java:2078)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:47)
        at main.CamelJBang.main(CamelJBang.java:36)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: Cannot find RestApiProcessorFactory in Registry or classpath (such as the camel-openapi-java component)
{code}
",,davsclaus,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Nov 05 21:32:52 UTC 2022,,,,,,,,,,,"0|z1aqsw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Nov/22 21:32;davsclaus;You can use --deps=camel-openapi-java as a workaround;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel  OpenTelemtery instrumentation does not make spans current,CAMEL-18661,13492600,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,Molkova,Molkova,27/Oct/22 21:06,27/Dec/22 19:56,13/Jul/23 08:34,16/Dec/22 08:31,3.19.0,,,,3.20.0,,,,,camel-opentelemetry,,,,,1,,,"I have the following application:

 
{code:java}
@Component
public class SourceRoute extends EndpointRouteBuilder {
    private static final String cs = ""..."";
    @Override
    public void configure() {

       from(timer(""tick"").period(1000).repeatCount(1))
                .log(""Timer triggered"")
                .setBody(simple(""hello""))
                .to(azureServicebus(""testme"").
                        serviceBusType(""topic"").
                        connectionString(cs));
    }
} {code}
 

And I run it with [OpenTelemtery Java agent|https://github.com/open-telemetry/opentelemetry-java-instrumentation/].

Camel creates ""tick"" and ""testme"" spans.
ServiceBus SDK is instrumented too and it creates it's own spans.

h2. Actual behavior:

Spans created by ServiceBus SDK are unrelated to Camel spans. I.e. ServiceBus spans and Camel spans are in different traces (check out the attached screenshot).

h2. Expected behavior:

Camel ""testme"" span is a parent of ServiceBus spans:
* tick
** testme
*** ServiceBus.message
*** ServiceBus.send

h2. Investigation

If I look into the OTel instrumentation code (and debug my application). I can see that OTel span starts here

https://github.com/apache/camel/blob/1175c2666821457dcb6cf0921f4076508459341a/components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/OpenTelemetryTracer.java#L92

and then is 'activated' here 

https://github.com/apache/camel/blob/main/components/camel-tracing/src/main/java/org/apache/camel/tracing/Tracer.java#L248


But the activation code only puts trace_id and span_id on MDC.

The proposal for Camel is to make OpenTelemtery span active (using Span.makeCurrent()).
This is the only way underlying traces can be correlated to Camel spans.

{code:java}
try (Scope s = span.makeCurrent()) {
   // wrap processing, but always clean up the scope to avoid leaks
} {code}

OTel instrumentation will take care of propagating this context anywhere else.


","any, functional issue",bvahdat,davsclaus,Molkova,traskstalnaker,,,,,,,,,,,,,,,,,,,,,CAMEL-18845,,,,,,,,,,"27/Oct/22 20:54;Molkova;camel_and_service_bus.png;https://issues.apache.org/jira/secure/attachment/13051525/camel_and_service_bus.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Dec 19 19:46:31 UTC 2022,,,,,,,,,,,"0|z1ag1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Oct/22 05:02;davsclaus;Thanks for reporting, if you can then you are welcome to send your suggested fix as a PR against main branch;;;","11/Nov/22 22:58;Molkova;[~davsclaus] I prototyped some changes here [https://github.com/apache/camel/pull/8713,] but it's not as trivial as I expected (for async calls), and I would appreciate any guidance on the approach I've done in the PR or alternatives. Thanks!;;;","16/Dec/22 08:31;davsclaus;Thanks for reporting and the excellent work on fixing/improving this;;;","16/Dec/22 09:27;bvahdat;Should we look into backporting this for the upcoming {{3.18.5}} LTS release?;;;","16/Dec/22 09:36;davsclaus;No its a bit too invasive in the core (not isolated to opentelemetry only);;;","16/Dec/22 12:22;bvahdat;Please review: https://github.com/apache/camel/pull/8911;;;","19/Dec/22 19:46;bvahdat;Hi [~Molkova] 

As per conversation [here|https://github.com/apache/camel/pull/8911#issuecomment-1355233167] just to let you know that the flaky test has popped up on Jenkins build as well:

https://ci-builds.apache.org/job/Camel/job/Camel%20JDK11%20Build%20(S390x)/job/main/409/testReport/junit/org.apache.camel.opentelemetry/CurrentSpanTest/testContextDoesNotLeak/
 
{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[1E6AD74DFFAFE6E-000000000000000A]
	at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:45)
	at org.apache.camel.support.AbstractExchange.setException(AbstractExchange.java:597)
	at org.apache.camel.support.DefaultExchange.setException(DefaultExchange.java:27)
	at org.apache.camel.processor.MulticastProcessor$MulticastTask.aggregate(MulticastProcessor.java:445)
	at org.apache.camel.processor.MulticastProcessor$MulticastReactiveTask.lambda$run$0(MulticastProcessor.java:570)
	at org.apache.camel.AsyncCallback.run(AsyncCallback.java:44)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:54)
	at org.apache.camel.processor.MulticastProcessor.lambda$schedule$1(MulticastProcessor.java:336)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.opentest4j.AssertionFailedError: expected: <false> but was: <true>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertFalse.failNotFalse(AssertFalse.java:63)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:36)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:31)
	at org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:228)
	at org.apache.camel.opentelemetry.CurrentSpanTest$1.lambda$configure$0(CurrentSpanTest.java:221)
	at org.apache.camel.AggregationStrategy.aggregate(AggregationStrategy.java:86)
	at org.apache.camel.processor.MulticastProcessor.doAggregateInternal(MulticastProcessor.java:882)
	at org.apache.camel.processor.MulticastProcessor.doAggregateSync(MulticastProcessor.java:863)
	at org.apache.camel.processor.MulticastProcessor.doAggregate(MulticastProcessor.java:848)
	at org.apache.camel.processor.MulticastProcessor$MulticastTask.aggregate(MulticastProcessor.java:439)
	... 10 more
{code};;;",,,,,,,,,,,,,,,,,,,
camel-jbang - Loading dynamic JARs should load EndpointUriFactory,CAMEL-18657,13492102,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Oct/22 18:49,27/Oct/22 08:49,13/Jul/23 08:34,27/Oct/22 08:49,3.18.2,3.19.0,,,3.18.4,3.20.0,,,,camel-jbang,,,,,0,,,"Reported on chat
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/mixing.20to.20and.20toD",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-10-26 18:49:17.0,,,,,,,,,,,"0|z1aczc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-git always merge at master branch,CAMEL-18656,13491893,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,gilvansfilho,gilvansfilho,26/Oct/22 15:34,28/Oct/22 14:26,13/Jul/23 08:34,28/Oct/22 14:26,3.18.3,3.19.0,,,3.18.4,3.20.0,,,,camel-git,,,,,0,,,"[Merge operations|[https://github.com/apache/camel/blob/main/components/camel-git/src/main/java/org/apache/camel/component/git/producer/GitProducer.java#L511]] always is done at _master_ branch.

Once default branch name can be whatever user needs and _master_ is being replaced by _main_ in many repo this could led to problems. That way camel-git needs to allow user especify a targetBranch and, if this are no set, get default branch from user configs.",,davsclaus,gilvansfilho,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Oct 27 15:45:36 UTC 2022,,,,,,,,,,,"0|z1abow:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Oct/22 15:53;orpiske;I discussed about this issue with [~gilvansfilho] and he proposed to write the fix. I am assigning this to me so I can track and backport this.;;;","27/Oct/22 12:38;gilvansfilho;That [PR|https://github.com/apache/camel/pull/8639] address this.;;;","27/Oct/22 12:53;davsclaus;Thanks, so we need to backport this to 3.18.x branch. You are welcome to send a PR for that;;;","27/Oct/22 15:14;gilvansfilho;Ok. I will do that.;;;","27/Oct/22 15:45;gilvansfilho;Done.
Backport PR [here|https://github.com/apache/camel/pull/8641];;;",,,,,,,,,,,,,,,,,,,,,
Google-bigquery: ResolveEndpointFailedException because of the bug in configuration class,CAMEL-18648,13491228,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,25/Oct/22 07:41,08/Dec/22 15:32,13/Jul/23 08:34,08/Dec/22 15:32,3.20.0,,,,3.20.0,,,,,camel-google-bigquery,,,,,0,,,"Some recent changes to the class `GoogleBigQueryConfiguration` causes `ArrayIndexOutOfBoundsException` for endpoint urls containing 3 parts (i.e. `google-bigquery://test-project:google_bigquery_test_dataset:google_bigquery_table_for_partitioning?connectionFactory=#connectionFactory`)

Simple test covering this should be added.",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-10-25 07:41:21.0,,,,,,,,,,,"0|z1a7lc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Python not available in the Java DSL,CAMEL-18641,13489556,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,skin27,skin27,23/Oct/22 18:01,24/Oct/22 10:47,13/Jul/23 08:34,24/Oct/22 10:47,3.19.0,,,,3.20.0,,,,,,,,,,0,,," 
Since the last release (3.19.0) Camel supports Python experimentally. That's great.
 
I like to test it out, here are some things I noticed.
 
1) In IntelliJ it doesn't seem to recognize ""python"" in the Java DSL yet (is it part of the DSL model?) For example:
{code:java}
 .choice()
.when(python(""myexpression"")).to(""mock:endpoint"")
{code}

or

 
{code:java}
.setBody().python(""myexpresson""){code}
 
isn't allowed. Other languages are recognized and Intellij points to 3.19.0.
 
2) Examples
 
Would be nice if some examples were added to the documentation:
 
[https://camel.apache.org/components/next/languages/python-language.html]
 
For me, and I think for most users, it's hard to find out how to use it.


3) Version
 
It's unclear what Python version is used. It's based on Jython. The latest version of Jython is 2.7.3. Does that mean Python 2.x is used, or can we use Python 3 syntax?

 4) Jira

The component ""camel-python"" is not selectable.
 

BTW: Another minor thing I noticed (not specifically related to Python) is that version 3.19.0 is at the moment not available as select on the documentation page. So I could only see the python documentation in 'next'.
 ",,davsclaus,skin27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Oct 24 10:30:31 UTC 2022,,,,,,,,,,,"0|z19xa0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Oct/22 10:30;davsclaus;You can use language(""python"", ""xxxx"");;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka: Kafka resume throws null pointer exception if no partition offset exists,CAMEL-18627,13487126,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,orpiske,geek.rupam,geek.rupam,19/Oct/22 16:22,20/Oct/22 09:14,13/Jul/23 08:34,20/Oct/22 09:14,3.18.2,3.19.0,,,3.18.3,3.20.0,,,,camel-kafka,,,,,0,,," 

In the updateTaskState() method, if the consumer is resumed and it had no previously stored offset details,  then it throws a null pointer exception when it tries to retrieve ((OffsetAndMetadata) v).offset() information

 
{code:java}
     private void updateTaskState() {
    switch (state) {
      case PAUSE_REQUESTED:
        LOG.info(""Pausing the consumer as a response to a pause request"");
        consumer.pause(consumer.assignment());
        state = State.PAUSED;
        break;
      case RESUME_REQUESTED:
        LOG.info(""Resuming the consumer as a response to a resume request"");
        if (consumer.committed(consumer.assignment()) != null) {
          consumer.committed(consumer.assignment()).forEach((k, v) -> {
                final TopicPartition tp = ((TopicPartition) k);
                LOG.info(""Resuming from offset {} for the topic {}  with partition {}"",
                    ((OffsetAndMetadata) v).offset(), tp.topic(), tp.partition());

                consumer.seek(tp, ((OffsetAndMetadata) v).offset());
              }
          );
        }

        consumer.resume(consumer.assignment());
        state = State.RUNNING;
        break;
      default:
        break;
    } }
 {{code}
 

 ",,geek.rupam,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Oct 19 16:57:51 UTC 2022,,,,,,,,,,,"0|z19ibk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Oct/22 16:24;orpiske;[~geek.rupam] thanks for the report. -Can you provide the stack trace, please?-

 

Ok, stack trace not needed after the updated description. 

Are you planning to send a PR for this one as well [~geek.rupam]? Please, feel free to do so! We might still have time to squeeze it in 3.18.3 ...;;;","19/Oct/22 16:57;geek.rupam;yes. I plan to send the PR  a little later today;;;","19/Oct/22 16:57;orpiske;Perfect. Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Should load custom type converters when adding new JARs,CAMEL-18624,13487015,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Oct/22 07:38,20/Oct/22 09:05,13/Jul/23 08:34,20/Oct/22 09:05,3.18.2,,,,3.18.3,3.20.0,,,,camel-jbang,,,,,0,,,"This route does not log the file content

{code}
- route:
    from:
      uri: file:demodir?probeContentType=true&noop=true
      steps:
        - to: log:info?showFiles=true
{code}

You can use --deps=camel:file as workaround",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-10-19 07:38:47.0,,,,,,,,,,,"0|z19hmw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stream closed for onException with useOriginalMessage,CAMEL-18619,13486860,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alvinkwekel@gmail.com,alvinkwekel@gmail.com,18/Oct/22 14:51,26/Mar/23 12:54,13/Jul/23 08:34,26/Mar/23 12:54,3.18.0,3.18.1,3.18.2,,3.21.0,4.0.0,4.0-M3,,,camel-core,,,,,1,,,"I seems that using onException().useOriginalMessage() with a stream input will always result in a closed stream. Uncached streams are closed upon reading and cached stream are since 3.18 also closed when converted.

""Converter for InputStream to byte[] should close stream""
https://issues.apache.org/jira/browse/CAMEL-18226

When there is for example an .unmarshal().json() step in the route, and the exchange fails after this step, the original stream is closed and can't be used in the onException block.

To demo the behavior I've created a simple example project: https://github.com/alvinkwekel/camel-steam-exception-example/tree/main/src/main/java/com/example/camel",,alvinkwekel@gmail.com,bmarcj,davsclaus,Edwardkuenen,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18226,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Mar 26 08:08:19 UTC 2023,,,,,,,,,,,"0|z19gqw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Mar/23 08:08;davsclaus;Okay its not really as much that IOConverter close that input stream, but that when using original message, then we should have stream cached the message body, so its re-readable (eg like the stream caching).
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Some health checks are hidden when running withg supervised controller enabled,CAMEL-18617,13486836,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,18/Oct/22 12:38,24/Oct/22 10:38,13/Jul/23 08:34,21/Oct/22 07:03,3.18.2,3.19.0,,,3.20.0,,,,,camel-health,camel-microprofile-health,,,,0,,,"As follow up of https://issues.apache.org/jira/browse/CAMEL-18483, when enabling the supervise route controller, some heath checks are not included.

With the supervisor disabled, we can see a camel-kafka check:

{code:json}
{
    ""checks"": [
        {
            ""name"": ""camel-routes"",
            ""status"": ""UP""
        },
        {
            ""name"": ""camel-kafka"",
            ""status"": ""UP""
        },
        {
            ""data"": {
                ""check.kind"": ""READINESS"",
                ""context.name"": ""camel-q"",
                ""context.status"": ""Started"",
                ""context.version"": ""3.18.3-SNAPSHOT""
            },
            ""name"": ""context"",
            ""status"": ""UP""
        },
        {
            ""name"": ""camel-consumers"",
            ""status"": ""UP""
        }
    ],
    ""status"": ""UP""
}
{code}

However with the supervisor enabled, the camel-kafka check is not reported:

{code:json}
{
    ""checks"": [
        {
            ""name"": ""camel-routes"",
            ""status"": ""UP""
        },
        {
            ""data"": {
                ""check.kind"": ""READINESS"",
                ""context.name"": ""camel-q"",
                ""context.status"": ""Started"",
                ""context.version"": ""3.18.3-SNAPSHOT""
            },
            ""name"": ""context"",
            ""status"": ""UP""
        },
        {
            ""name"": ""camel-consumers"",
            ""status"": ""UP""
        }
    ],
    ""status"": ""UP""
}
{code}",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Oct 20 10:54:36 UTC 2022,,,,,,,,,,,"0|z19glk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"18/Oct/22 12:39;lb;/cc [~jamesnetherton];;;","19/Oct/22 09:06;davsclaus;we likely need a registry in the core for these dynamic components that adds custom checks on the fly. Then there is 1 registry to go to that has all the checks.;;;","20/Oct/22 07:47;lb;[~davsclaus] I can try to have a look, would be a ComponentHealthCheckRepositoy be the right name ?;;;","20/Oct/22 07:49;davsclaus;Yeah that is a good name as it gives room to have whatever a component has as custom health checks in there;;;","20/Oct/22 10:54;davsclaus;Also camel-spring-boot has that health check auto configuration so you need to add the new option there too;;;",,,,,,,,,,,,,,,,,,,,,
Getting Route for a RouteConfiguration is null when doing manual route loading,CAMEL-18614,13486420,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,skin27,skin27,15/Oct/22 06:31,28/Oct/22 07:45,13/Jul/23 08:34,28/Oct/22 07:41,3.18.2,,,,3.18.4,3.20.0,,,,camel-core,,,,,0,,,"I load the routeConfiguration like this:

 
{code:java}
loader = extendedCamelContext.getRoutesLoader();
loader.loadRoutes(resource);{code}
{color:#cc7832}
{color:#172b4d}On a later moment, I like to remove or update the routeConfiguration, but I first want to check if it's already loaded. To do this, I try to get the route:
{color}
{color}

 
{code:java}
List<Route> routes = context.getRoutes(); 
 
//or

Route route = context.getRoute(id);
{code}
 

{color:#172b4d}The route for the routeConfiguration is null and it's also not in the list. However when I would load it again it says ""RouteConfiguration ID already exists"".{color}

 

 

 ","Version: Camel 3.18.2

JDK: 11 (Temurin)",davsclaus,skin27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Oct/22 12:42;skin27;FlowLoader.java;https://issues.apache.org/jira/secure/attachment/13051026/FlowLoader.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Oct 28 07:45:35 UTC 2022,,,,,,,,,,,"0|z19e14:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Oct/22 08:00;davsclaus;Can you add some more code to reproduce this - or some unit test etc;;;","17/Oct/22 13:00;skin27;I attached the complete Class (RouteBuilder) that loads the routes, routeConfiguration and templatedRoutes. 

BTW: My initial idea to have an XML, something like

<camel id=""1234"">

        <routes>

        </routes>

        <routeConfigurations>

        </routeConfiguration>

        <templatedRoutes>

        </templateRoutes>       

        <dataFormats>

        </dataFormats>

        <!-- etc -->

</camel>

 

And then

 
{code:java}
loader.loadOrUpdate(String xml);{code}

Maybe the above will be available when this issues is solved:

https://issues.apache.org/jira/browse/CAMEL-18189

 

------------

Until now, because the above use case isn't possible, I load them one by one with the routeLoader. 

I want to use ""context.getRoute(""id"")"" to check if I need to use the load or update method. However this doesn't seems to cover all use cases. For example routeconfigurations doesn't work. This also seems to be the case when the route failes to load. On loading it again, the id is already loaded.

 

 ;;;","28/Oct/22 07:45;davsclaus;You need to use updateRoutes when updating;;;",,,,,,,,,,,,,,,,,,,,,,,
Inconsistency in JsonPath component causes problems with databinding,CAMEL-18612,13486331,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rnetuka,rnetuka,rnetuka,14/Oct/22 12:52,20/Oct/22 13:52,13/Jul/23 08:34,20/Oct/22 12:58,,,,,3.18.3,3.20.0,,,,camel-jsonpath,,,,,0,,,"Inconsistent treatment of jsonpath expression result causes problems with data binding. When jsonpath evaluates to an array element, this piece of code threats it as a single object, making it impossible to bind to an array of objects.

 
{code:java}
(singleElement && !resultIsCollection) {
    result = ((List) result).get(0);
    ...
}{code}
 

 

Steps to reproduce:
 # Create this Camel route 
{code:java}
from(""file:work/"")
        .routeId(""file-route"")
        .to(""direct:transform"");

from(""direct:transform"")
        .routeId(""direct-transform"")
        .streamCaching()
        .log(""Before jsonpath transformation >>> ${body}"")
        .setBody().jsonpath(""$.d.results"", String.class)
        .log(""After jsonpath transformation >>> ${body}"")
        .process(exchange -> {
            log.info(""Before Jackson deserialization"");

            String testResponse = exchange.getMessage().getBody(String.class);
            objectMapper.readValue(testResponse, TestResultsInfo[].class);

            log.info(""After Jackson deserialization"");
        })
        .to(""mock:test"");{code}

 # Use the _single-item-array.json_ file from the attachment
 # Try to bind the message body to these classes
{code:java}
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public static class TestResultsInfo {

    String resultText;
    @JsonProperty(value = ""AddressInfo"")
    TestAddressInfo addressInfo;

}

@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public static class TestAddressInfo {

    @JsonProperty(value = ""City"")
    String city;
    @JsonProperty(value = ""State"")
    String street;

}{code}

It will fail because it's not possible to bind it to _TestResultsInfo[]._ If you add a second element to the array (or use _multiple-item-array.json_ file instead), it will work fine.",,davsclaus,rnetuka,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11796,,,,,,,,"14/Oct/22 12:53;rnetuka;multiple-item-array.json;https://issues.apache.org/jira/secure/attachment/13050943/multiple-item-array.json","14/Oct/22 12:53;rnetuka;single-item-array.json;https://issues.apache.org/jira/secure/attachment/13050944/single-item-array.json",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Oct 20 10:47:11 UTC 2022,,,,,,,,,,,"0|z19dhc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Oct/22 10:59;davsclaus;Why do you convert the result to a String when its an array type? When you convert to String then the JDK will convert the List to a string by calling toString, which does a string dump that happens to look like json but it is not.

In the PR unit test the result is:

[{category=programming, author=Claus Ibsen,Jonathan Anstey, title=Camel in Action, price=39.99, isbn=978-193-518-236-8}]

;;;","17/Oct/22 11:09;davsclaus;I think the conversion to String is not correct as its not json string, but a JDK toString from a List. So instead you can change test as follows

{code}
        Object books = getMockEndpoint(""mock:books"").getReceivedExchanges().get(0).getIn().getBody();

        ObjectMapper objectMapper = new ObjectMapper();
        // convert the result to valid Json string
        String json = objectMapper.writeValueAsString(books);
        // and convert json to pojo via jackson
        Book[] result = objectMapper.readValue(json, Book[].class);

        Book[] expected = new Book[] { new Book(""programming"", ""Claus Ibsen,Jonathan Anstey"", ""Camel in Action"", ""39.99"", ""978-193-518-236-8"") };
        assertArrayEquals(expected, result);
{code}

And in the route you do

{code}
      <transform>
        <jsonpath>$.store.book</jsonpath>
      </transform>
{code}

Then its more correct;;;","17/Oct/22 12:39;rnetuka;[~davsclaus] ""Why do you convert the result to a String when its an array type?"" Because that's the use case that's failing. If you use returnType=String to get a Json string a then try to bind it with Jackson-databind.

Note: if you don't specify any return type, it will work because it will fall into an else branch

 

With the databind, it's more visible there is a fault, but you can check it even without it:

assertTrue(books.startsWith(""[""));

 

The suggested code doesn't help. The bug is reproducable only when a resultType is specified as String.

 

When combined with camel-jackson, there is a _JacksonTypeConverters_ that kicks in and returns the json string. Unfortunately, it seems it can't be used in the unit test, since it's an independant component.

 

 ;;;","17/Oct/22 14:13;rnetuka;[~davsclaus] Also, I think the following code might also fix the issue:
{code:java}
boolean resultIsCollection = Collection.class.isAssignableFrom(this.resultType);
boolean singleElement = result instanceof List && ((List)result).size() == 1;
if (singleElement && !resultIsCollection && !(resultType==String.class)) {
    result = ((List)result).get(0);
    LOG.trace(""Unwrapping result: {} from single element List before converting to: {}"", result, this.resultType);
} {code}
Note the added {*}&& !(resultType==String.class){*}. Just tell me, if you prefer this solution.

 

I still think the code above smells. A single-element list is still a list and shouldn't be returned as a member of itself.;;;","18/Oct/22 08:46;davsclaus;I think the code is used when you use jsonpath to filter, where you then filter and have 1 element as the result List(size 1), and want to grab it as X type instead of List(size 1)<X>.
;;;","18/Oct/22 12:01;davsclaus;Yeah its a bit of hack with the list unwrap if size == 1.

I think we should not do this by default, but add a new option on camel-jsonpath, so end users can turn back the old behaviour in case of backwards compatible.
However to find a good name for such option is ""hard"".

unwrapSingleArray=true|false

;;;","18/Oct/22 14:29;rnetuka;I agree with the new option solution. This will fix the issue while maintaining backwards compatibility (if the option is enabled).

 

PR: https://github.com/apache/camel/pull/8571;;;","19/Oct/22 16:30;davsclaus;[~rnetuka] can you send a PR to update the upgrade guide at
https://github.com/apache/camel/blob/main/docs/user-manual/modules/ROOT/pages/camel-3x-upgrade-guide-3_20.adoc

We can then take that and also put in the 3.18 guide and mention that this is for Camel 3.18.3 onwards.;;;","20/Oct/22 10:47;davsclaus;This is the last ticket for 3.18.x, would you be able to send a PR today;;;",,,,,,,,,,,,,,,,,
camel-karaf - CNFE when using camel-blueprint,CAMEL-18611,13486293,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,nfilotto,nfilotto,nfilotto,14/Oct/22 09:10,14/Oct/22 12:06,13/Jul/23 08:34,14/Oct/22 12:06,3.19.0,,,,3.20.0,,,,,camel-blueprint,camel-karaf,,,,0,,,"When we try to deploy on Karaf some routes defined in a blueprint configuration file, we end up with an error of type:

 
{noformat}
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize bean .camelBlueprint.factory.camel-1
 at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:593) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:703) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:666) ~[!/:1.10.3]
 at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81) ~[!/:1.10.3]
 at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
 at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:338) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:152) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:809) ~[!/:1.10.3]
 at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:1127) ~[?:?]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:573) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:417) [!/:1.10.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:298) [!/:1.10.3]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
 at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
 at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106) [!/:1.10.3]
 at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:45) [!/:1.10.3]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
 at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
 at java.lang.Thread.run(Thread.java:829) [?:?]
Caused by: java.lang.NoClassDefFoundError: org/apache/camel/vault/VaultConfiguration
 at org.apache.camel.impl.engine.AbstractCamelContext.<init>(AbstractCamelContext.java:255) ~[?:?]
 at org.apache.camel.impl.engine.SimpleCamelContext.<init>(SimpleCamelContext.java:123) ~[?:?]
 at org.apache.camel.impl.DefaultCamelContext.<init>(DefaultCamelContext.java:144) ~[?:?]
 at org.apache.camel.blueprint.BlueprintCamelContext.<init>(BlueprintCamelContext.java:59) ~[?:?]
 at org.apache.camel.blueprint.CamelContextFactoryBean.createContext(CamelContextFactoryBean.java:290) ~[?:?]
 at org.apache.camel.blueprint.CamelContextFactoryBean.getContext(CamelContextFactoryBean.java:273) ~[?:?]
 at org.apache.camel.blueprint.CamelContextFactoryBean.getContext(CamelContextFactoryBean.java:94) ~[?:?]
 at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.getContext(AbstractCamelContextFactoryBean.java:983) ~[?:?]
 at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:246) ~[?:?]
 at org.apache.camel.blueprint.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:399) ~[?:?]
 at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
 at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
 at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
 at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
 at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:337) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:835) ~[!/:1.10.3]
 at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:591) ~[!/:1.10.3]
 ... 23 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.vault.VaultConfiguration not found by org.apache.camel.camel-main [607]
 at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1585) ~[?:?]
 at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:79) ~[?:?]
 at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1970) ~[?:?]
 at java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?]
 at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1352) ~[?:?]
{noformat}
 ",,davsclaus,nfilotto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Oct 14 10:43:43 UTC 2022,,,,,,,,,,,"0|z19d8w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Oct/22 09:22;nfilotto;After a deeper investigation, it is due to a split packages issue, indeed since the changes made for CAMEL-18491, the package {{org.apache.camel.vault}} can be found in {{camel-api}} as expected but also in {{camel-main}}. Unfortunately, Karaf affects {{camel-main}} to the package {{org.apache.camel.vault}}  such that we end up with a ClassNotFoundException when it tries to find the class {{org.apache.camel.vault.VaultConfiguration}}.;;;","14/Oct/22 09:27;nfilotto;[~davsclaus] Since the problem is due to the generated configurers, as fix, I would like to propose a way to modify the output package in the corresponding maven plugin, WDYT? or do you see another way to fix it?;;;","14/Oct/22 10:24;davsclaus;Yeah you can already do this with <class>x=y</class>. See in camel-core-engine.

Then you can generate the output in the org.apache.camel.main package so there is no split package.;;;","14/Oct/22 10:27;nfilotto;Nice, thx for the info. Let me create a PR for that;;;","14/Oct/22 10:43;nfilotto;The corresponding PR https://github.com/apache/camel/pull/8551;;;",,,,,,,,,,,,,,,,,,,,,
Camel-Jbang: When using aws-ddb-sink Kamelet dependency are not resolved,CAMEL-18603,13485647,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acosentino,acosentino,11/Oct/22 11:43,12/Oct/22 13:53,13/Jul/23 08:34,12/Oct/22 13:53,3.19.0,,,,3.18.3,3.20.0,,,,camel-jbang,,,,,0,,,"If you have a route like:

{code:java}
# camel-k: dependency=mvn:software.amazon.awssdk:dynamodb:2.17.290
- route:
    from:
      uri: ""kamelet:kafka-not-secured-source""
      parameters:
        bootstrapServers: localhost:9092
        topic: ddb-topic
      steps:
        - to: 
            uri: ""kamelet:aws-ddb-sink""
            parameters:
              accessKey: access
              secretKey: sec
              region: reg
              table: ""test""
{code}


Then camel-jbang will fail with

{code:java}
Caused by: java.lang.ClassNotFoundException: software.amazon.awssdk.services.dynamodb.model.AttributeValue
    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
    ... 44 more
{code}

the command is: jbang run --fresh -Dcamel.jbang.version=3.19.0 camel@apache/camel run kafka-source-ddb.yaml

This will fail with 3.20.0-SNAPSHOT too and by using --deps from cli
",,acosentino,davsclaus,ggrzybek,nfilotto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Oct 12 13:28:30 UTC 2022,,,,,,,,,,,"0|z199ag:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Oct/22 15:04;ggrzybek;The problem is that there are two classloaders involved:
* one is the app classloader containing JARs being part of {{-classpath}} prepared by JBang itself - this involves all transitive dependencies of the {{DEPS}} specified in {{dsl/camel-jbang/camel-jbang-main/dist/CamelJBang.java}}
* the other one is {{org.apache.camel.main.download.DependencyDownloaderClassLoader}} prepared for the camel context created for {{jbang run camel@camel run}} command.

camel-kamelet-utils was not seeing the amazonsdk jars, because of two different classloaders.

When I removed {{org.apache.camel.kamelets:camel-kamelets-utils}} from {{main.CamelJBang}} and added it to the route itself:
{code:yaml}
# camel-k: dependency=mvn:software.amazon.awssdk:dynamodb:2.17.290
# camel-k: dependency=mvn:org.apache.camel.kamelets:camel-kamelets-utils:0.9.0
- route:
    from:
      uri: ""kamelet:kafka-not-secured-source""
...
{code}

everything worked fine.;;;","11/Oct/22 15:17;nfilotto;[~ggrzybek] Can't you just add an archive with all your files or add your files in a github repository and propose the link?;;;","11/Oct/22 15:49;ggrzybek;If {{camel-aws2-ddb}} wasn't a provided dependency of camel-kamelets-utils:
{code:xml}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-aws2-ddb</artifactId>
    <scope>provided</scope>
</dependency>
{code}

it'd work as well, because JBang itself would add it to AppClassPath together with {{software.amazon.awssdk:dynamodb}}.;;;","11/Oct/22 15:52;ggrzybek;[~nfilotto] sorry for the mess - it was mistaken (https://www.getdroidtips.com/logitech-g502-right-left-click-not-holding/) drag&drop of entire folder into Jira - a chance 1 in a million, but just happened...
I created CAMEL-18606, moved the attachments there (because it was hard to remove one by one). Please delete CAMEL-18606 (cc: [~davsclaus], [~acosentino]).;;;","11/Oct/22 19:40;davsclaus;Ah thanks, yeah we should move camel-kamelets-util out of the pom.xml, and then automatic include it when kamelets are in use
https://github.com/apache/camel/blob/main/dsl/camel-kamelet-main/src/main/java/org/apache/camel/main/download/DependencyDownloaderKamelet.java;;;","12/Oct/22 13:28;davsclaus;Thanks [~ggrzybek] I have now a fix in the works;;;",,,,,,,,,,,,,,,,,,,,
camel-master: NPE when taking the leadership,CAMEL-18594,13484770,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,06/Oct/22 13:45,06/Oct/22 15:09,13/Jul/23 08:34,06/Oct/22 15:09,3.19.0,,,,3.20.0,,,,,camel-master,camel-resume-api,,,,0,,,Recent Resume API changes have caused the master component to throw a NPE when taking the leadership. This was reported by a user on this comment: https://github.com/apache/camel/pull/8046#issuecomment-1269870831,,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-10-06 13:45:31.0,,,,,,,,,,,"0|z193x4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in org.apache.camel.http.common.DefaultHttpBinding.java,CAMEL-18589,13484705,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,prabhupraveen,prabhupraveen,06/Oct/22 06:53,09/Oct/22 09:25,13/Jul/23 08:34,09/Oct/22 09:25,,,,,3.18.3,3.20.0,,,,camel-http-common,,,,,0,,,"The readHeaders() method in DefaultHttpBinding class has a bug. The loop ""while (names.hasMoreElements()"" iterates over all the header names in a http request, and the statement ""String value = request.getHeader(name);"" ends up reading only one header of the given name. Underlying http request object created by implementations like jetty use Set<String> internally to return unique names for the request.getHeaderNames(), hence if there are multiple headers with same name (e.g. Cookie), then this ends up in creating only a single entry in the exchange headers. I think this can be fixed by calling getHeaders(name) method on the request object rather than the getHeader(name) and then enumerate over the returned values and set a list of headers of the same name.",,davsclaus,prabhupraveen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Oct/22 05:42;prabhupraveen;patchfile.txt;https://issues.apache.org/jira/secure/attachment/13050176/patchfile.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Oct 09 05:43:15 UTC 2022,,,,,,,,,,,"0|z193io:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Oct/22 03:36;davsclaus;You are welcome to send a PR;;;","09/Oct/22 05:43;prabhupraveen;Attached a patch file.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Kafka consumer on any exception should repoll records after the committed offset,CAMEL-18588,13484689,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,geek.rupam,geek.rupam,06/Oct/22 03:27,12/Oct/22 16:20,13/Jul/23 08:34,12/Oct/22 16:20,3.18.0,,,,3.18.3,3.20.0,,,,camel-kafka,,,,,0,,,"In Camel-Kafka , if max poll records is set to more than 1 and breakOnFirstError is set to TRUE, then on any exception thrown on the first message in the batch will cause the KafkaConsumer to start repolling from zero offset because partitionLastOffset is -1 for the first message



{code:java}
  private boolean processException(
            Exchange exchange, TopicPartition partition, long partitionLastOffset,
            ExceptionHandler exceptionHandler) {

        // processing failed due to an unhandled exception, what should we do
        if (configuration.isBreakOnFirstError()) {
            // we are failing and we should break out
            if (LOG.isWarnEnabled()) {
                LOG.warn(""Error during processing {} from topic: {}"", exchange, partition.topic(), exchange.getException());
                LOG.warn(""Will seek consumer to offset {} and start polling again."", partitionLastOffset);
            }

            // force commit, so we resume on next poll where we failed
            commitManager.forceCommit(partition, partitionLastOffset);

            // continue to next partition
            return true;
        } else {
            // will handle/log the exception and then continue to next
            exceptionHandler.handleException(""Error during processing"", exchange, exchange.getException());
        }

        return false;
    }
{code}
",,geek.rupam,klease78,orpiske,,,,,,,,,,,,,,,,CAMEL-18587,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Oct 11 07:21:04 UTC 2022,,,,,,,,,,,"0|z193f4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Oct/22 16:07;klease78;[~geek.rupam] I think the changes made for CAMEL-18350 should fix this.;;;","10/Oct/22 18:19;geek.rupam;CAMEL-18350 doesn't safeguard against the case when the Kafka consumer restarted after a few commits and fails at the first message in a poll ;;;","11/Oct/22 07:21;orpiske;[~geek.rupam] thank you for the fix! I assigned the ticket to me - as your profile on Jira is not yet available for ticket assignment. I'll eval and, if needed, backport this to 3.18 codebase.;;;",,,,,,,,,,,,,,,,,,,,,,,
Kafka Consumer closes on any exception if breakOnFirstError is set to TRUE,CAMEL-18587,13484688,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,geek.rupam,geek.rupam,06/Oct/22 03:23,12/Oct/22 16:20,13/Jul/23 08:34,12/Oct/22 16:20,3.18.0,,,,3.18.3,3.20.0,,,,camel-kafka,,,,,0,,,"In KafkaFetchRecords' startPolling method , if breakOnErrorHit is true, the KafkaConsumer closes instead of pausing.

 
{code:java}
while (isKafkaConsumerRunnableAndNotStopped() && isConnected() && pollExceptionStrategy.canContinue()) {
ConsumerRecords<Object, Object> allRecords = consumer.poll(pollDuration);
if (consumerListener != null) {
if (!consumerListener.afterConsume(consumer)) {
continue;
}
}

ProcessingResult result = recordProcessorFacade.processPolledRecords(allRecords, lastResult);

if (result.isBreakOnErrorHit()) {
LOG.debug(""We hit an error ... setting flags to force reconnect"");
// force re-connect
setReconnect(true);
setConnected(false);
} else {
lastResult = result;
}

updateTaskState();
}{code}",,geek.rupam,orpiske,,,,,,,,,,,,,,,,CAMEL-18588,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Oct 12 16:20:40 UTC 2022,,,,,,,,,,,"0|z193ew:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Oct/22 06:32;orpiske;[~geek.rupam] thank you for the fix! I assigned the ticket to me - as your profile on Jira is not yet available for ticket assignment. I'll eval and, if needed, backport this to 3.18 codebase.;;;","12/Oct/22 16:20;orpiske;Closing as they should have been fixed now.;;;",,,,,,,,,,,,,,,,,,,,,,,,
[camel-minio] deleteObjects operation does not delete multiple objects,CAMEL-18583,13484477,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ldemasi,ldemasi,ldemasi,04/Oct/22 17:03,05/Oct/22 12:30,13/Jul/23 08:34,05/Oct/22 11:28,3.18.2,3.19.0,,,3.18.3,3.20.0,,,,camel-minio,,,,,0,,,"The bug is in the org.apache.camel.component.minio.MinioProducer.deleteObjects() method.
Minio API performs deletion lazily, deleteObjects request is performed while iterating through the result object.
[https://min.io/docs/minio/linux/developers/java/API.html#removeobjects-removeobjectsargs-args]
{quote}
_Removes multiple objects lazily. Its required to iterate the returned Iterable to perform removal._
{quote}",,ldemasi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Oct 05 12:30:09 UTC 2022,,,,,,,,,,,"0|z19248:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Oct/22 12:30;ldemasi;Pull Requests:

{*}3.18-x{*}:  [https://github.com/apache/camel/pull/8484]

{*}main{*}:    https://github.com/apache/camel/pull/8483;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Missing osgi import for CxfUtils in camel-cxf-rest,CAMEL-18579,13484252,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,globalbus,globalbus,03/Oct/22 13:16,05/Oct/22 18:00,13/Jul/23 08:34,05/Oct/22 18:00,3.18.2,3.19.0,,,3.18.3,3.20.0,,,,camel-cxfrs,osgi,,,,0,,,"CxfRsConsumer class has a direct dependency to CxfUtils (from another bundle). Osgi import to package org.apache.camel.component.cxf.util is now explicity disabled, so if CxfUtils is called, that cause ClassNotFoundException from runtime.

It's easy reproducable, probably on all versions containing camel-cxf-rest bundle (after CAMEL-9627).

After fault on rest endpoint, outFaultObserver is called and that cause runtime ClassNotFoundException on osgi environments.

Example stacktrace:
{noformat}
java.lang.NoClassDefFoundError: org/apache/camel/component/cxf/util/CxfUtils
        at org.apache.camel.component.cxf.jaxrs.CxfRsConsumer.lambda$createServer$0(CxfRsConsumer.java:65) ~[?:?]
        at org.apache.cxf.phase.PhaseInterceptorChain.wrapExceptionAsFault(PhaseInterceptorChain.java:373) ~[?:?]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:331) ~[?:?]
        at org.apache.cxf.interceptor.security.JAASLoginInterceptor$1.run(JAASLoginInterceptor.java:159) ~[?:?]
        at org.apache.cxf.interceptor.security.JAASLoginInterceptor$1.run(JAASLoginInterceptor.java:152) ~[?:?]
        at java.security.AccessController.doPrivileged(AccessController.java:399) ~[?:?]
        at javax.security.auth.Subject.doAs(Subject.java:376) ~[?:?]
        at org.apache.cxf.interceptor.security.JAASLoginInterceptor.handleMessage(JAASLoginInterceptor.java:152) ~[?:?]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307) ~[?:?]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121) ~[?:?]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:265) ~[?:?]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:234) ~[?:?]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208) ~[?:?]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160) ~[?:?]
        at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:225) ~[?:?]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:304) ~[?:?]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:217) ~[?:?]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:517) ~[?:?]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:279) ~[?:?]
        at org.ops4j.pax.web.service.spi.servlet.OsgiInitializedServlet.service(OsgiInitializedServlet.java:74) ~[?:?]
        at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1450) ~[?:?]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:799) ~[?:?]
        at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1656) ~[?:?]
        at org.ops4j.pax.web.service.spi.servlet.OsgiFilterChain.doFilter(OsgiFilterChain.java:100) ~[?:?]
        at org.ops4j.pax.web.service.jetty.internal.PaxWebServletHandler.doHandle(PaxWebServletHandler.java:310) ~[?:?]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) ~[?:?]
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:600) ~[?:?]
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127) ~[?:?]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235) ~[?:?]
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624) ~[?:?]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233) ~[?:?]
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1440) ~[?:?]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188) ~[?:?]
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:505) ~[?:?]
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594) ~[?:?]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186) ~[?:?]
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1355) ~[?:?]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ~[?:?]
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:234) ~[?:?]
        at org.ops4j.pax.web.service.jetty.internal.PrioritizedHandlerCollection.handle(PrioritizedHandlerCollection.java:96) ~[?:?]{noformat}
 

Fix - not tested yet, but removing explict import removal from pom.xml should be enough (line containing !org.apache.camel.component.cxf.util)",,davsclaus,globalbus,,,,,,,,,,,,,,,,,,,,,CAMEL-18563,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Oct 05 18:00:34 UTC 2022,,,,,,,,,,,"0|z190q8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Oct/22 11:36;davsclaus;Can you send a PR with your suggested fix;;;","04/Oct/22 12:40;globalbus;sure. 
[https://github.com/apache/camel/pull/8465]

temporal solution that works, is to add Fragment bundle with missing import.
{code:java}
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: bundle-camel-fix
Bundle-SymbolicName: com.company.bundle-camel-fix.1.0.0
Bundle-Version: 1.0.0
Fragment-Host: org.apache.camel.camel-cxf-rest
Import-Package: org.apache.camel.component.cxf.util{code}
 ;;;","05/Oct/22 18:00;davsclaus;Fixed by PR
https://github.com/apache/camel/pull/8465;;;",,,,,,,,,,,,,,,,,,,,,,,
kamelets - JSon Property value can't finish with }},CAMEL-18576,13484227,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,MarcoMartins,MarcoMartins,03/Oct/22 10:28,13/Oct/22 08:56,13/Jul/23 08:34,13/Oct/22 07:54,,,,,3.20.0,,,,,camel-core,,,,,0,,,"Hi, I'm using Quarkus Camel 2.12.3.Final with YAML DSL and Kamelets and I have a problem passing a JSON value through URI as a query parameter when trying to use the [elasticsearch-search-source|https://github.com/apache/camel-kamelets/blob/main/kamelets/elasticsearch-search-source.kamelet.yaml] with a basic query:
{code:json}
{""query"":{""match_all"":{}}} {code}
Example on the YAML DSL:
 * Scenario 1
{code:yaml}
query: '{""query"":{""match_all"":{}}}'{code}
Gives
{noformat}
java.lang.IllegalArgumentException: Missing {{ from the text: {""query"":{""match_all"":{}}}
{noformat}

 * Scenario 2
{code:yaml}
query: '{{myQuery}}'{code}
Gives
{noformat}
java.lang.IllegalArgumentException: Missing {{ from the text: {""query"":{""match_all"":{}}}
{noformat}

 * Scenario 3
{code:yaml}
query: '#property:myQuery'{code}
Gives
{noformat}
java.lang.IllegalArgumentException: Property with key myQuery not found by properties component
{noformat}
But using debug I've checked that the above exception occurs due to the same
{noformat}
java.lang.IllegalArgumentException: Missing {{ from the text: {""query"":{""match_all"":{}}}
{noformat}

 * Scenario 4
I've also tried to change the Kamelet YAML definition to use the RAW value directly
{code:yaml}
- set-body: 
  constant: ""RAW({{myQuery}})""{code}
With the same result
{noformat}
java.lang.IllegalArgumentException: Missing {{ from the text: {""query"":{""match_all"":{}}}
{noformat}

I have a workaround if I add spaces in JSON like below it works in scenarios 1 and 2.
{code:json}
{ ""query"": { ""match_all"": { } } } {code}
My point is, why do I have to change the JSON value to adapt to the Camel parser? Also, there also might exist some other use case where the value can't be changed.

Why don't you simply have a function that does not try to resolve properties as placeholders recursively? For example:
{code:yaml}
query: '{{raw:myQuery}}'{code}
Or with a default value
{code:yaml}
query: '{{raw:myQuery:{""query"":{""match_all"":{}}}}}'{code}
Or at least have a way to escape curly brackets.",,davsclaus,MarcoMartins,nfilotto,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18600,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Oct 13 07:54:43 UTC 2022,,,,,,,,,,,"0|z190ko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Oct/22 07:17;davsclaus;Can you paste your route where you use this;;;","10/Oct/22 07:19;davsclaus;Ah okay, so its the property placeholder that assumes it was a {{ }} pair, where you have no end pair.;;;","10/Oct/22 14:15;davsclaus;I have reproduced this. So its because of using kamelets where the query is passed in as {{ }} placeholder, and that it has json that have }} as well, and the property placeholder performs nested placeholder (eg a placeholder has also a placeholder, recursive).

So we need to ""think"" to find a better way.;;;","10/Oct/22 16:59;MarcoMartins;Yeah, it is because of the placeholder recursivity feature together with the JSON having }} in its body, which, gets the Camel parser confused trying to find the beginning of a placeholder that does not exist.

Thank you for your availability.;;;","11/Oct/22 09:10;davsclaus;You can turn off nested on the properties component, but we need to find a better out of the box way for kamelets;;;","11/Oct/22 09:49;MarcoMartins;Can you give me an example of how I could turn off the nested on configuration option? I can't find any reference to this in [ELASTICSEARCH REST|https://camel.apache.org/components/3.18.x/elasticsearch-rest-component.html], [PropertiesComponent|https://camel.apache.org/components/3.18.x/properties-component.html] documentation nor do I see any obvious property analyzing the [ElasticsearchComponent.java|https://github.com/apache/camel/blob/main/components/camel-elasticsearch-rest/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchComponent.java] itself.;;;","11/Oct/22 09:55;davsclaus;See the linked JIRA, and its a new feature in 3.20;;;","11/Oct/22 14:20;MarcoMartins;Thank you, I did look into the changes, and I think I've found a discrepancy in one of the commits. On the one that added the new configuration to the documentation *camel.component.properties.nested-placeholder* mention that the default value is {*}false{*}, although, in  [PropertiesComponent.java|https://github.com/apache/camel/blob/main/core/camel-base/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java] the default value is *true* 
{code:java}
private boolean nestedPlaceholder = true; {code}
which makes sense for using old library version behavior as default. 
 ;;;","11/Oct/22 18:06;nfilotto;[~davsclaus] I proposed in this PR [https://github.com/apache/camel/pull/8521] a fix based on an escape character (backslash) WDYT? 

 

PS: Sorry to work on your ticket, initially, I just wanted to test an idea. ;;;","12/Oct/22 13:09;davsclaus;Nicolas, that look good for users that can edit their input and escape the JSon input.

But for out of the box, we should ideally have a way.
I have run a full test with nested placeholder disabled and we do not use it very much - only in some special tests for camel-jasypt.

I have also not seen real world use-cases with nested placeholders. Its only when you may go very fine grained and have a placeholder for hostname, and another for port, and then have a 3rd where you concat them together.

But lets keep this open for a while and think about if we can have a nicer solution out of the box - but even then this problem is only when you have double {{ and }} which ought to be more rare for even JSon payloads. 

[~MarcoMartins] do you see the double `{{` used more often in your ES queries ?;;;","12/Oct/22 13:41;MarcoMartins;[~davsclaus] I don't see the `{{` pattern appear often on ES queries since they're JSON payloads and JSON can't have two `{{`, although, they could appear as a field value to be searched. 

This issue occurred without the \{{ since Camel was looking for }} pattern which occurs very often in JSON, and if found it would consider that it was a property placeholder and when looking for the beginning of the ""false property"" it would not find it since there was no `{{`.;;;","12/Oct/22 13:48;nfilotto;[~davsclaus] Should I revert the fix that I proposed?;;;","12/Oct/22 13:55;davsclaus;Nicolas, no its actually a good new functionality that end users can escape property placeholder values to make them literal values and not the begin or end markers;;;","13/Oct/22 05:19;davsclaus;1
We could introduce {{myKey?nested=false}} as a way to turn off nested for a specific placeholder. 

2
We can also relax the {{ }} check on level 2+ since its the value of the placeholder that cannot always be assumed to be another placeholder
;;;","13/Oct/22 07:54;davsclaus;Okay so the best we can do for now is

a) allow to turn of nested placeholder globally
b) allow escaping property values
c) turn of nested on specific placeholder
;;;",,,,,,,,,,,
camel-http - ToD optimized context-path with spaces problem,CAMEL-18544,13482887,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Sep/22 07:17,26/Sep/22 09:05,13/Jul/23 08:34,23/Sep/22 08:25,3.18.2,,,,3.14.6,3.18.3,3.19.0,,,camel-http,,,,,0,,,https://github.com/apache/camel/pull/8396,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-09-23 07:17:58.0,,,,,,,,,,,"0|z18sew:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel box cannot authorize,CAMEL-18530,13482355,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,Federico Mariani,tveskrna,tveskrna,20/Sep/22 10:45,22/Sep/22 08:03,13/Jul/23 08:34,21/Sep/22 07:52,,,,,3.14.6,3.18.3,3.19.0,,,camel-box,,,,,0,,,"Box API changed and camel-box cannot parse the request token. See the error in box-api file attached. Tests in previous versions were working but now failed. 


{code:java}
2022-09-09 13:31:57,575 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.18.1 (camel-1) is starting
2022-09-09 13:31:58,452 ERROR [org.apa.cam.imp.eng.AbstractCamelContext] (main) Error starting CamelContext (camel-1) due to exception thrown: Failed to start component box because of Box API connection failed: Error authorizing application: Can not parse request token.: org.apache.camel.FailedToStartComponentException: Failed to start component box because of Box API connection failed: Error authorizing application: Can not parse request token.
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3272)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:3033)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2988)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2649)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
	at org.apache.camel.quarkus.main.CamelMain.doStart(CamelMain.java:94)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
	at org.apache.camel.quarkus.main.CamelMain.startEngine(CamelMain.java:140)
	at org.apache.camel.quarkus.main.CamelMainRuntime.start(CamelMainRuntime.java:49)
	at org.apache.camel.quarkus.core.CamelBootstrapRecorder.start(CamelBootstrapRecorder.java:45)
	at io.quarkus.deployment.steps.CamelBootstrapProcessor$boot173480958.deploy_0(Unknown Source)
	at io.quarkus.deployment.steps.CamelBootstrapProcessor$boot173480958.deploy(Unknown Source)
	at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)
	at io.quarkus.runtime.Application.start(Application.java:101)
	at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:110)
	at io.quarkus.runtime.Quarkus.run(Quarkus.java:67)
	at io.quarkus.runtime.Quarkus.run(Quarkus.java:41)
	at io.quarkus.runtime.Quarkus.run(Quarkus.java:120)
	at io.quarkus.runner.GeneratedMain.main(Unknown Source)
Caused by: org.apache.camel.RuntimeCamelException: Box API connection failed: Error authorizing application: Can not parse request token.
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:178)
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:72)
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:91)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:113)
	at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3667)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3270)
	... 19 more
Caused by: java.lang.IllegalArgumentException: Error authorizing application: Can not parse request token.
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:150)
	... 25 more
{code}
",,acosentino,llowinge,tveskrna,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Sep/22 10:43;tveskrna;box-api;https://issues.apache.org/jira/secure/attachment/13049515/box-api",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Sep 20 11:15:41 UTC 2022,,,,,,,,,,,"0|z18p68:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Sep/22 10:52;acosentino;The error is from Fuse and this is upstream camel please test and report with latest 3.18.2 release;;;","20/Sep/22 11:09;acosentino;That's a link in VPN, please remove it.;;;","20/Sep/22 11:15;tveskrna;Sorry, error posted in description. Comment with private link removed;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-health - health check for not automatically started routes should always be up,CAMEL-18514,13481673,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,steven.durrenmath,steven.durrenmath,15/Sep/22 09:52,16/Sep/22 05:28,13/Jul/23 08:34,16/Sep/22 05:28,3.18.2,,,,3.18.3,3.19.0,,,,camel-health,,,,,0,,,"Routes that are not automatically started should always be up as they are externally managed. Negation is missing in the following condition, which currently leads to dead code:

[https://github.com/apache/camel/blob/main/core/camel-health/src/main/java/org/apache/camel/impl/health/RouteHealthCheck.java#L66]",,davsclaus,steven.durrenmath,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Sep 16 05:28:09 UTC 2022,,,,,,,,,,,"0|z18kzs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Sep/22 11:26;davsclaus;You are welcome to send a PR to fix this;;;","15/Sep/22 21:39;steven.durrenmath;[~davsclaus] PR submitted: https://github.com/apache/camel/pull/8384;;;","16/Sep/22 05:28;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - camel bind may not work with --local-kamelet-dir,CAMEL-18510,13481620,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Sep/22 05:07,15/Sep/22 08:47,13/Jul/23 08:34,15/Sep/22 08:47,3.18.2,,,,3.18.3,3.19.0,,,,camel-jbang,,,,,0,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Sep 15 05:30:10 UTC 2022,,,,,,,,,,,"0|z18ko0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Sep/22 05:08;davsclaus;Also it should be possible to use current dir as local kamelet dir;;;","15/Sep/22 05:08;davsclaus;camel init my-sink.kamelet.yaml
camel bind timer-source my-sink mybinding.yaml --local-kamelet-dir=.;;;","15/Sep/22 05:30;davsclaus;TODO: camel init kamelet should support sink vs source *DONE*
TODO: --local-kamelet-dir to support multiple dirs *DONE*
TODO: --local-kamelet-dir to support current dir or relative dirs *DONE*;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Reset statistics can cause JMX inflight counter to be negative,CAMEL-18490,13480848,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Sep/22 11:39,10/Sep/22 11:41,13/Jul/23 08:34,10/Sep/22 11:41,,,,,3.14.6,3.18.3,3.19.0,,,camel-core,jmx,,,,0,,,"{code}
  PID   NAME  CAMEL            PLATFORM  READY  STATUS   RELOAD   AGE   ROUTE  MSG/S  TOTAL  FAIL  INFLIGHT  SINCE-LAST
 88183  foo   3.19.0-SNAPSHOT  JBang      1/1   Running       1  1m59s    1/1   7.97    538     0        -1     0s/0s/-
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Sep 10 11:41:53 UTC 2022,,,,,,,,,,,"0|z18fxc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Sep/22 11:41;davsclaus;It was a general problem in JMX statistics in camel.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-file - Exclusive rename should handle windows locking the file,CAMEL-18489,13480846,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Sep/22 11:23,09/Sep/22 11:31,13/Jul/23 08:34,09/Sep/22 11:31,3.18.0,,,,3.18.3,3.19.0,,,,camel-file,,,,,0,,,https://github.com/apache/camel/pull/8335,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-09-09 11:23:02.0,,,,,,,,,,,"0|z18fww:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-microprofile-health: Routes and consumers health checks are not registered if routes are supervised,CAMEL-18483,13480604,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,08/Sep/22 08:38,08/Sep/22 16:29,13/Jul/23 08:34,08/Sep/22 16:29,3.18.1,3.18.2,,,3.18.3,3.19.0,,,,camel-microprofile-health,,,,,0,,,"Some more detail here:

https://github.com/apache/camel-quarkus/issues/3989

Due to how CamelMicroProfileHealthCheckRegistry figures out whether it should register the HealthCheckRespository checks it misses ones for routes & consumers if SupervisingRouteController is in use.",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-09-08 08:38:21.0,,,,,,,,,,,"0|z18efs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Knative component : CloudEvents have wrong time format,CAMEL-18473,13480402,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zbendhiba,zbendhiba,zbendhiba,07/Sep/22 07:19,07/Sep/22 12:47,13/Jul/23 08:34,07/Sep/22 12:47,3.18.1,,,,3.18.3,3.19.0,,,,camel-knative,,,,,0,,," 

When trying camel knative component with InMemory channels, we can't see the bug because this one doesn't validate the event.

Outside of this use case when the event is validated on knative, it seems that the time has wrong DateFormat. 

For instance, if using the component with a broker, we can't produce an event with camel-knative, and this is the log in knative environment :

 
{code:java}
{""level"":""warn"",""ts"":""2022-09-06T14:35:10.587Z"",""logger"":""mt_broker_ingress"",""caller"":""ingress/ingress_handler.go:137"",""msg"":""failed to extract event from request"",""error"":""invalid value for time: \""22022-08-31T12:00:33.253+02:00\""""} {code}
This is the valid DateFormat, according to [CloudEvents spec|[https://github.com/cloudevents/spec]]

 
{code:java}
 ""time"" : ""2018-04-05T17:31:00Z"", {code}
This corresponds in the Java DateTimeFormatter class to [#ISO_INSTANT].

However, in camel-knative producer uses [#ISO_OFFSET_DATE_TIME]

 

 

 ",,zbendhiba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-09-07 07:19:19.0,,,,,,,,,,,"0|z18d80:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-pubsub: com.google.api.gax.rpc.AsyncTaskException: Asynchronous task failed with real account,CAMEL-18447,13479613,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,01/Sep/22 08:05,05/Nov/22 10:00,13/Jul/23 08:34,05/Nov/22 10:00,3.18.2,3.19.0,,,3.18.4,3.20.0,,,,camel-google-pubsub,,,,,0,,,"During fixation of [https://github.com/apache/camel-quarkus/issues/4062] I noticed regular exceptions shown only with real account (not with emulater):

 
{code:java}
Suppressed: com.google.api.gax.rpc.AsyncTaskException: Asynchronous task failed		at com.google.api.gax.rpc.ApiExceptions.callAndTranslateApiException(ApiExceptions.java:57)		at com.google.api.gax.rpc.UnaryCallable.call(UnaryCallable.java:112) {code}
Exception shows that some connections is closed during the acking mechanism. It should be fixed. (To reproduce issue run i.e. run test from CQ with real account GooglePubsubTest#pubsubTopicProduceConsume)",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-09-01 08:05:27.0,,,,,,,,,,,"0|z188e8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-caffeine - Caffeine-cache query parameter action does not work,CAMEL-18444,13479379,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,30/Aug/22 22:44,31/Aug/22 13:33,13/Jul/23 08:34,31/Aug/22 13:32,3.18.1,,,,3.18.2,3.19.0,,,,camel-caffeine,,,,,0,,,"Caffeine-cache example using headers works fine:
{code:java}
        from(""timer:test2"")
                .setBody(constant(""VALUE_1""))
                .setHeader(""CamelCaffeineAction"", constant(""PUT""))
                .to(""caffeine-cache://cache?key=1"")
                .setBody(constant(""VALUE_2""))
                .setHeader(""CamelCaffeineAction"", constant(""GET""))
                .to(""caffeine-cache://cache?key=1"")
                .log(""Result2: ${body}, ${header.CamelCaffeineActionHasResult}"");
{code}

Same code using query parameter action does not work:
{code:java}
        from(""timer:test1"")
                .setBody(constant(""VALUE_1""))
                .to(""caffeine-cache://cache?action=PUT&key=1"")
                .setBody(constant(""VALUE_2""))
                .to(""caffeine-cache://cache?key=1&action=GET"")
                .log(""Result1: ${body}, ${header.CamelCaffeineActionHasResult}"");
{code}
",,acosentino,davsclaus,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18445,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Aug 31 12:05:31 UTC 2022,,,,,,,,,,,"0|z18700:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"31/Aug/22 05:54;acosentino;You need to bind the cache ""cache"" to the registry, otherwise in the GET action a cache named ""cache"" will be re-instantiated from scratch.;;;","31/Aug/22 05:57;acosentino;In the example with the header it is working just because the endpoint it is the same ""caffeine-cache://cache?key=1"", in that case the endpoint will be re-used. In the case of invoking action the endpoint will be different between first and second invocation, so you'll have a new ""cache"" cache and the GET won't return any result.;;;","31/Aug/22 07:31;davsclaus;We should make this work the same, so ""cache"" is not private per endpoint, but we use the component to track caches - this is how we do it in seda and other components.;;;","31/Aug/22 12:05;marat.gubaidullin@gmail.com;Expression support would be also great
{code:java}
caffeine-cache://${header.cache}?key=${header.key}&action=GET&value=${header.value}
{code};;;",,,,,,,,,,,,,,,,,,,,,,
Problem using AdviceWith on routes with try-catch-finally,CAMEL-18443,13479326,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,larshk,larshk,30/Aug/22 14:43,01/Sep/22 07:37,13/Jul/23 08:34,01/Sep/22 05:32,3.18.1,,,,3.18.2,3.19.0,,,,camel-test,,,,,0,,,"When upgrading to 3.18.1 I see a problem with some of my project's existing tests that break. I've isolated the problem to tests that use AdviceWith on routes that make use of try-catch-finally.

Here is a test that succeeds in 3.18.0 but fails in 3.18.1:
{code:java}
import static org.apache.camel.builder.AdviceWith.adviceWith;

import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit5.CamelTestSupport;
import org.junit.jupiter.api.Test;

public class TryCatchFinallyTest extends CamelTestSupport {

  @Test
  public void tryCatchFinallyUsingAdviceWith() throws Exception {
    adviceWith(context, ""my-route"", a ->
        a.weaveById(""replace-me"")
            .replace()
            .to(""mock:replaced"")
    );

    context.start();
  }
  
  @Override
  public boolean isUseAdviceWith() {
    return true;
  }
  
  @Override
  protected RoutesBuilder createRouteBuilder() {
    return new RouteBuilder() {
      @Override
      public void configure() {
        from(""direct:start"")
            .routeId(""my-route"")
            .doTry()
              .log(""try"")
              .to(""mock:replace-me"").id(""replace-me"")
            .doCatch(Exception.class)
              .log(""catch"")
            .doFinally()
              .log(""finally"")
            .end();
      }
    };
  }
  
} {code}
The stack trace:
{noformat}
Failed to create route my-route at: >>> DoTry[[Log[try], To[mock:replaced], DoCatch[ [class java.lang.Exception] -> [Log[catch]]], DoFinally[[Log[finally]]]]] <<< in route: Route(my-route)[From[direct:start] -> [DoTry[[Log[try], To[m... because of Multiple finally clauses added: DoFinally[[Log[finally]]] and DoFinally[[Log[finally]]]
org.apache.camel.FailedToCreateRouteException: Failed to create route my-route at: >>> DoTry[[Log[try], To[mock:replaced], DoCatch[ [class java.lang.Exception] -> [Log[catch]]], DoFinally[[Log[finally]]]]] <<< in route: Route(my-route)[From[direct:start] -> [DoTry[[Log[try], To[m... because of Multiple finally clauses added: DoFinally[[Log[finally]]] and DoFinally[[Log[finally]]]
    at app//org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:240)
    at app//org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:74)
    at app//org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49)
    at app//org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:862)
    at app//org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:750)
    at app//org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2947)
    at app//org.apache.camel.support.service.BaseService.init(BaseService.java:83)
    at app//org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2630)
    at app//org.apache.camel.support.service.BaseService.start(BaseService.java:111)
    at app//org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2649)
    at app//org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
    at app//TryCatchFinallyTest.tryCatchFinallyUsingAdviceWith(TryCatchFinallyTest.java:18)
    at java.base@11.0.16/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base@11.0.16/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at java.base@11.0.16/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base@11.0.16/java.lang.reflect.Method.invoke(Method.java:566)
    at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
    at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
    at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
    at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
    at app//org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
    at app//org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
    at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
    at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
    at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
    at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
    at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    at java.base@11.0.16/java.util.ArrayList.forEach(ArrayList.java:1541)
    at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    at java.base@11.0.16/java.util.ArrayList.forEach(ArrayList.java:1541)
    at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
    at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
    at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
    at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
    at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
    at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    at java.base@11.0.16/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base@11.0.16/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at java.base@11.0.16/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base@11.0.16/java.lang.reflect.Method.invoke(Method.java:566)
    at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
    at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
    at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
    at com.sun.proxy.$Proxy2.stop(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
    at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
    at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
    at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
    at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
    at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
Caused by: java.lang.IllegalArgumentException: Multiple finally clauses added: DoFinally[[Log[finally]]] and DoFinally[[Log[finally]]]
    at org.apache.camel.model.TryDefinition.checkInitialized(TryDefinition.java:225)
    at org.apache.camel.model.TryDefinition.preCreateProcessor(TryDefinition.java:207)
    at org.apache.camel.reifier.ProcessorReifier.preCreateProcessor(ProcessorReifier.java:870)
    at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:838)
    at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:588)
    at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:236)
    ... 94 more
{noformat}
The test succeeds if I skip using AdviceWith.

I see there was a change to the TryDefinition class in 3.18.1 (CAMEL-18288) but I'm not sure that's the cause.",,davsclaus,larshk,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18446,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Sep 01 05:13:40 UTC 2022,,,,,,,,,,,"0|z186og:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"01/Sep/22 05:13;davsclaus;Thanks for reporting and providing unit test sample.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-github - Github commit consumer does not work,CAMEL-18442,13479325,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,30/Aug/22 14:39,31/Aug/22 10:56,13/Jul/23 08:34,31/Aug/22 10:56,3.18.1,,,,3.18.2,3.19.0,,,,camel-github,,,,,0,,,"Try to execute github commit polling
{code:java}
        from(""github://commit/main?"" +
                ""repoOwner=YOUR_OWNER"" +
                ""&repoName=YOUR_REPO"" +
                ""&delay=5000"" +
                ""&startingSha=last"" +
                ""&sendEmptyMessageWhenIdle=true"" +
                ""&oauthToken=YOUR_TOKEN"")
                .log(""${body}"");
{code}

Commit something to repo. As the result you'll have `null`.

In case `startingSha=beginning` all previous commits retrieved but new commits won't be pulled.
",,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18439,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-30 14:39:50.0,,,,,,,,,,,"0|z186o8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-github - Consumer that polls commits crashed when repository has more than 100 commits,CAMEL-18439,13479187,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,29/Aug/22 22:25,31/Aug/22 07:40,13/Jul/23 08:34,30/Aug/22 11:12,3.18.1,,,,3.18.2,3.19.0,,,,camel-github,,,,,0,,,"Following code:
{code:java}
        from(""github://commit/main?"" +
                ""repoOwner=apache"" +
                ""&repoName=camel-karavan"" +
                ""&oauthToken=YOUR_TOKEN"")
                .log(""${body}"");
{code}

Throws
{code:java}
java.lang.IllegalStateException: Queue full
        at java.base/java.util.AbstractQueue.add(AbstractQueue.java:98)
        at java.base/java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:326)
        at org.apache.camel.component.github.consumer.CommitConsumer.doStart(CommitConsumer.java:80)
{code}

here
https://github.com/apache/camel/blob/884c7eae744bfe8bf074751ef2863dbf6729ed0c/components/camel-github/src/main/java/org/apache/camel/component/github/consumer/CommitConsumer.java#L80

because of queue size = 100

{code:java}
private final Queue<String> commitHashes = new ArrayBlockingQueue<>(100);
{code}
",,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18442,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-29 22:25:41.0,,,,,,,,,,,"0|z185ts:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - RAW values should be kept as-s,CAMEL-18435,13478982,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Aug/22 19:54,02/Sep/22 06:58,13/Jul/23 08:34,29/Aug/22 09:07,3.18.1,,,,3.18.2,3.19.0,,,,camel-core,,,,,0,,,"Due to CAMEL-8649

Then RAW(xxxx) will replace % with %25 which it should not do, as we should ensure that RAW values are kept as-is.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8649,CAMEL-18418,,CAMEL-18436,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-28 19:54:27.0,,,,,,,,,,,"0|z184kg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-yaml-dsl - Unsupported field: routeConfigurationId,CAMEL-18433,13478883,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,26/Aug/22 21:28,27/Aug/22 19:17,13/Jul/23 08:34,27/Aug/22 19:16,3.18.1,,,,3.18.2,3.19.0,,,,camel-yaml-dsl,,,,,0,,,"The following YAML fails  
{code:java}
- route:
    from:
      uri: kamelet:timer-source
      steps:
        - log:
            message: ${body}
    id: routeId
    routeConfigurationId: xxxx
{code}

Error:

{code:java}
// Some comments here
Unsupported field: routeConfigurationId
 in file:route-id.yaml, line 2, column 5:
        from:
        ^

        at org.apache.camel.dsl.yaml.deserializers.RouteDefinitionDeserializer.setProperties(RouteDefinitionDeserializer.java:96)
        at org.apache.camel.dsl.yaml.deserializers.RouteDefinitionDeserializer.setProperties(RouteDefinitionDeserializer.java:33)
        at org.apache.camel.dsl.yaml.common.YamlDeserializerBase.construct(YamlDeserializerBase.java:65)
        at org.apache.camel.dsl.yaml.common.YamlDeserializationContext$2.construct(YamlDeserializationContext.java:215)
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader$1.configuration(YamlRoutesBuilderLoader.java:229)
        at org.apache.camel.builder.RouteConfigurationBuilder.addRouteConfigurationsToCamelContext(RouteConfigurationBuilder.java:77)
        at org.apache.camel.impl.engine.AbstractCamelContext.addRoutesConfigurations(AbstractCamelContext.java:1187)
{code}

Field is defined in the schema:
https://github.com/apache/camel/blob/a0f8a615a2e794267e8a8f075aa110ec4bcf0e74/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/schema/camelYamlDsl.json#L2337",,davsclaus,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Aug 27 19:17:09 UTC 2022,,,,,,,,,,,"0|z183yg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Aug/22 19:17;davsclaus;Thanks I found some camelCase vs kebab-case in a few other EIPs - corrected all of them now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
DockerConfiguration malformerd UriPath for variable operation,CAMEL-18432,13478814,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,gjed,gjed,26/Aug/22 11:58,08/Nov/22 14:00,13/Jul/23 08:34,30/Aug/22 09:22,3.14.5,3.17.0,3.18.1,,3.14.6,3.18.2,3.19.0,,,camel-docker,,,,,0,,,"In DockerConfiguration.java, the enums passed to the UriPath annotation for the private variable operation is malformed: in the string concatenation are missing commans on the new lines.

Furthermore, the following three operations are missing: networkconnect,networkcreate,networkremove.

 

Functionally it works, but the Eclipse IDE and the documentation on the official site report errors

 ","IDE: eclipse

OS: linux Debian 11

Camel 3.17.0",davsclaus,gjed,orpiske,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,"26/Aug/22 11:57;gjed;Screenshot from 2022-08-26 13-56-37.png;https://issues.apache.org/jira/secure/attachment/13048635/Screenshot+from+2022-08-26+13-56-37.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Nov 08 14:00:14 UTC 2022,,,,,,,,,,,"0|z183j4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Aug/22 15:57;orpiske;I suspect we might need to cherry-pick this one into 3.14 (I haven't verified it) and 3.18;;;","26/Aug/22 15:57;orpiske;Assigning to me, so I'll look at it next week.;;;","30/Aug/22 09:22;orpiske;Backported to 3.14 and 3.18 branches. Closing ...;;;","07/Nov/22 21:10;gjed;I updated camel to the 3.18.2, eclipse is still highliting me the same error.
The 'enums' values in the @UriPath of the DockerConfiguration class seem to be formatted properly. What am i missing?

 ;;;","08/Nov/22 14:00;davsclaus;The eclipse plugin likely need to upgrade Camel too;;;",,,,,,,,,,,,,,,,,,,,,
Camel Debezium with Postgres on Spring Boot doesn't work,CAMEL-18427,13478384,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,michael992,michael992,24/Aug/22 10:20,01/Dec/22 13:18,13/Jul/23 08:34,06/Sep/22 07:33,3.13.0,3.18.1,,,3.18.3,3.19.0,,,,camel-debezium,,,,,0,,,"From camel 3.13.0 Camel Debezium simply not working is work perfectly with camel older than 3.13.0

(related to this ticket i think https://issues.apache.org/jira/browse/CAMEL-17135)

here the code
{code:java}
    @Override
    public void configure() throws Exception {
        String DATABASE_READER = ""debezium-postgres:localhost?""
                + ""databaseHostname=localhost""
                + ""&databasePort=5432""
                + ""&databaseUser=postgres""
                + ""&databasePassword=test""
                + ""&databaseDbname=test""
                + ""&databaseServerName=localhost""
                + ""&schemaWhitelist=public""
                + ""&tableWhitelist=public.*""
                + ""&offsetStorageFileName=/tmp/offset-file-1.dat""
                + ""&offsetFlushIntervalMs=10000""
                + ""&pluginName=pgoutput"";
        from(DATABASE_READER)
                .routeId(""debeziumPGRoute"")
                .log(""Response : ${body}"");
    }
{code}
!image-2022-08-24-12-12-27-542.png|width=949,height=240!

I check this [changelog|https://camel.apache.org/releases/release-3.13.0/]
!image-2022-08-24-12-19-55-853.png|width=803,height=402!

the pom file
{code:java}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-debezium-postgres</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.camel.springboot</groupId>
    <artifactId>camel-debezium-postgres-starter</artifactId>
</dependency>{code}","Jdk 17

Windows 10

Spring boot",davsclaus,michael992,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17135,,,,,,,,"02/Sep/22 10:02;michael992;camel-debezium-postgres.zip;https://issues.apache.org/jira/secure/attachment/13048905/camel-debezium-postgres.zip","24/Aug/22 10:12;michael992;image-2022-08-24-12-12-27-542.png;https://issues.apache.org/jira/secure/attachment/13048495/image-2022-08-24-12-12-27-542.png","24/Aug/22 10:19;michael992;image-2022-08-24-12-19-55-853.png;https://issues.apache.org/jira/secure/attachment/13048494/image-2022-08-24-12-19-55-853.png","07/Sep/22 06:53;michael992;image-2022-09-07-08-53-06-942.png;https://issues.apache.org/jira/secure/attachment/13049038/image-2022-09-07-08-53-06-942.png",,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,java,Wed Sep 07 06:53:37 UTC 2022,,,,,,,,,,,"0|z180vs:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"02/Sep/22 07:02;davsclaus;Can you put together a sample project as a .zip or put on github we can use to try this, thanks;;;","02/Sep/22 10:02;michael992;[~davsclaus] Yeah it's happen we i add this dependency
{code:java}
<dependency>
<groupId>org.apache.camel.springboot</groupId>
<artifactId>camel-debezium-postgres-starter</artifactId>
<version>3.18.1</version>
</dependency> {code}
[^camel-debezium-postgres.zip];;;","02/Sep/22 11:23;michael992;[~davsclaus] there is also other bug this is not taken into account on the latest camel version
{code:java}
.append(""&timePrecisionMode=connect""){code};;;","06/Sep/22 05:36;davsclaus;The null is logged by DBZ itself and its not a very descriptive log what is wrong. At first try your sample project does configure DBZ engine with the values from the URI is that is correct.;;;","06/Sep/22 05:38;davsclaus;java.lang.ClassNotFoundException: io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy;;;","06/Sep/22 05:45;davsclaus;Okay so its a DBZ issue not reporting a better error why it fails
https://issues.redhat.com/browse/DBZ-5583

You need to add that class to the classpath, so its maybe some DBZ dependency to be added;;;","06/Sep/22 07:20;davsclaus;You can make it work by setting

.append(""&offsetCommitPolicy=io.debezium.engine.spi.OffsetCommitPolicy$PeriodicCommitOffsetPolicy"");;;","06/Sep/22 07:33;davsclaus;Okay the class was moved so adjusting Camel;;;","06/Sep/22 07:35;davsclaus;What do you mean by
.append(""&timePrecisionMode=connect"")

;;;","06/Sep/22 08:30;michael992;Hello [~davsclaus] i mean the parameter *timePrecisionMode*  is not taken into account on the latest camel version when i use it the timestamp still remain as timestamp instead of being formatted to date;;;","06/Sep/22 10:13;davsclaus;The engine is configured with

2022-09-06 12:13:25.287  INFO 22746 --- [ebeziumConsumer] i.d.connector.common.BaseSourceTask      :    time.precision.mode = connect;;;","07/Sep/22 06:53;michael992;Yeah maybe i don't known camel documentation don't say that  !image-2022-09-07-08-53-06-942.png|width=620,height=281!

By the way with previous camel version is was working not now;;;",,,,,,,,,,,,,,
camel-jbang - Dependency downloaded issue with camel-aws-s3,CAMEL-18424,13478373,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Aug/22 09:21,24/Aug/22 09:26,13/Jul/23 08:34,24/Aug/22 09:26,3.18.1,,,,3.18.2,3.19.0,,,,camel-jbang,,,,,0,,,"This needed dependency is not added to the classpath
mvn:software.amazon.awssdk:utils:2.17.258

The issue is that jbang mistakenly see it as already on classpath",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-24 09:21:02.0,,,,,,,,,,,"0|z180tc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Adding route dynamic leak bootstraps,CAMEL-18421,13478255,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Aug/22 16:55,20/Oct/22 09:10,13/Jul/23 08:34,23/Aug/22 17:09,3.14.5,3.18.1,,,3.14.6,3.18.2,3.19.0,,,camel-core,,,,,0,,,"Reported on chat
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Memory.20leak.20in.20DefaultCamelContext",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-23 16:55:04.0,,,,,,,,,,,"0|z1803c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aws-s3-sink Kamelet returns 403,CAMEL-18418,13477992,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,bruno.meseguer,bruno.meseguer,22/Aug/22 11:26,02/Sep/22 12:37,13/Jul/23 08:34,02/Sep/22 12:37,3.18.0,,,,3.18.2,3.19.0,,,,camel-kamelet,,,,,0,,,"The Kamelet `aws-s3-sink` returns 403 against a ceph based S3 service.

It seems to be related to the accessKey and secretKey parameters resolution.

A workaround that works is to edit the original Kamelet and hardcode the accessKey and secretKey in the aws2-s3 Camel component.

 ","The problem has been reproduced using an OpenShift Data Foundation instance deployed in an OpenShift 4.10 environment.

Find attached a compressed file containing the sample code to reproduce the problem. Note the same code using the Camel component instead of Kamelet works well.

 ",bruno.meseguer,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18435,,,,,,,,"22/Aug/22 11:26;bruno.meseguer;issue.tar.gz;https://issues.apache.org/jira/secure/attachment/13048392/issue.tar.gz",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Sep 02 12:37:28 UTC 2022,,,,,,,,,,,"0|z17yi0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Sep/22 17:18;bruno.meseguer;This issue is important, it may affect other kamelets?

It doesn't seem to be S3 related... (sorry the title is unfortunate)

The default Kamelet's producer definition hits the problem, but the following workaround works well:
{code:java}
      # Temporary workaround that works is:
      - to:
          uri: ""aws2-s3:{{bucketNameOrArn}}?\
            accessKey={{?accessKey}}&\
            secretKey={{?secretKey}}&\
            region={{region}}&\
            autoCreateBucket={{autoCreateBucket}}&\
            uriEndpointOverride={{?uriEndpointOverride}}&\
            overrideEndpoint={{?overrideEndpoint}}&\
            keyName={{?keyName}}&\
            useDefaultCredentialsProvider={{useDefaultCredentialsProvider}}""{code};;;","02/Sep/22 06:58;davsclaus;Can you try with 3.19 SNAPSHOT;;;","02/Sep/22 08:50;bruno.meseguer;Yes... I just tested now with Camel JBang using 3.19.0-SNAPSHOT and it seems it is behaving well... it accepted the accesskey/secretkey and completed the S3 operation as expected.

 

Thanks [~davsclaus] ;;;","02/Sep/22 12:37;davsclaus;Great the RAW fix was backported for 3.18.2;;;",,,,,,,,,,,,,,,,,,,,,,
camel-bean: MethodNotFoundException when using OSGi service reference,CAMEL-18411,13477566,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,AWeickel,AWeickel,19/Aug/22 09:18,23/Aug/22 04:44,13/Jul/23 08:34,23/Aug/22 04:44,3.14.3,,,,3.14.6,,,,,camel-karaf,,,,,0,,,"We are using Camel 3.14.x and get a MethodNotFoundException when we try to call a method via OSGi service reference. Exactly the same issue as described in https://issues.apache.org/jira/browse/CAMEL-15793.

 

It works with 3.7.0 and stopped working with 3.11.0 probably due to the following change: [https://github.com/apache/camel/commit/164f63eae7f0364604f0e796764544467829e7a7]

And works again with 3.17.0 probably due to the change for CAMEL-17844. Will this fix also be available for 3.14.x?",,AWeickel,davsclaus,lichtin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Aug 22 16:22:26 UTC 2022,,,,,,,,,,,"0|z17vvk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Aug/22 09:24;davsclaus;You are welcome to dive into and send a PR with a suggested fix for 3.14.x branch. ;;;","22/Aug/22 16:22;AWeickel;[https://github.com/apache/camel/pull/8206];;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-karaf - Camel-file ResumeAware,CAMEL-18405,13477432,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,RemyT,RemyT,18/Aug/22 12:51,05/Sep/22 07:23,13/Jul/23 08:34,05/Sep/22 06:50,3.18.1,,,,3.18.2,,,,,,,,,,0,,,"Unable to start application with routes listening for files.

java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/apache/camel/resume/ResumeAware
    at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:?]
    at java.util.concurrent.FutureTask.get(FutureTask.java:191) ~[?:?]
    at java.util.concurrent.AbstractExecutorService.doInvokeAny(AbstractExecutorService.java:199) ~[?:?]
    at java.util.concurrent.AbstractExecutorService.invokeAny(AbstractExecutorService.java:230) ~[?:?]
    at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper$4.call(ScheduledExecutorServiceWrapper.java:185) ~[?:?]
    at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper$15.call(ScheduledExecutorServiceWrapper.java:446) ~[?:?]
    at org.apache.aries.blueprint.utils.threading.RWLock.runReadOperation(RWLock.java:33) ~[?:?]
    at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.runUnlessShutdown(ScheduledExecutorServiceWrapper.java:443) ~[?:?]
    at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.invokeAny(ScheduledExecutorServiceWrapper.java:180) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher.callListener(BlueprintEventDispatcher.java:195) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher.callListeners(BlueprintEventDispatcher.java:178) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher.blueprintEvent(BlueprintEventDispatcher.java:133) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:447) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:298) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:335) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:288) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:284) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:274) ~[?:?]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) ~[?:?]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) ~[?:?]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) ~[?:?]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) ~[?:?]
    at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) ~[?:?]
    at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1180) ~[?:?]
    at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) ~[?:?]
    at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) ~[?:?]
    at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4817) ~[?:?]
    at org.apache.felix.framework.Felix.startBundle(Felix.java:2336) ~[?:?]
    at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) ~[?:?]
    at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) ~[?:?]
    at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165) ~[?:?]
    at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1160) ~[?:?]
    at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1041) ~[?:?]
    at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1069) ~[?:?]
    at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:1004) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
    at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: java.lang.NoClassDefFoundError: org/apache/camel/resume/ResumeAware
    at java.lang.ClassLoader.defineClass1(Native Method) ~[?:?]
    at java.lang.ClassLoader.defineClass(ClassLoader.java:1016) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClass(BundleWiringImpl.java:2312) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClassParallel(BundleWiringImpl.java:2130) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2064) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1533) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:78) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1950) ~[?:?]
    at java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[?:?]
    at org.apache.camel.component.file.FileComponent.buildFileEndpoint(FileComponent.java:62) ~[?:?]
    at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:58) ~[?:?]
    at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:38) ~[?:?]
    at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:171) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:951) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:867) ~[?:?]
    at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:58) ~[?:?]
    at org.apache.camel.reifier.AbstractReifier.resolveEndpoint(AbstractReifier.java:191) ~[?:?]
    at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:94) ~[?:?]
    at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:74) ~[?:?]
    at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[?:?]
    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:862) ~[?:?]
    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:750) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2947) ~[?:?]
    at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2630) ~[?:?]
    at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2649) ~[?:?]
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262) ~[?:?]
    at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:241) ~[?:?]
    at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:283) ~[?:?]
    at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:188) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:197) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:195) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) ~[?:?]
    ... 3 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.resume.ResumeAware not found by org.apache.camel.camel-file [81]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1565) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:78) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1950) ~[?:?]
    at java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[?:?]
    at java.lang.ClassLoader.defineClass1(Native Method) ~[?:?]
    at java.lang.ClassLoader.defineClass(ClassLoader.java:1016) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClass(BundleWiringImpl.java:2312) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.defineClassParallel(BundleWiringImpl.java:2130) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2064) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1533) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:78) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1950) ~[?:?]
    at java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[?:?]
    at org.apache.camel.component.file.FileComponent.buildFileEndpoint(FileComponent.java:62) ~[?:?]
    at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:58) ~[?:?]
    at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:38) ~[?:?]
    at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:171) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:951) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:867) ~[?:?]
    at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:58) ~[?:?]
    at org.apache.camel.reifier.AbstractReifier.resolveEndpoint(AbstractReifier.java:191) ~[?:?]
    at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:94) ~[?:?]
    at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:74) ~[?:?]
    at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[?:?]
    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:862) ~[?:?]
    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:750) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2947) ~[?:?]
    at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2630) ~[?:?]
    at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[?:?]
    at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2649) ~[?:?]
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262) ~[?:?]
    at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:241) ~[?:?]
    at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:283) ~[?:?]
    at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:188) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:197) ~[?:?]
    at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:195) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]
    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) ~[?:?]
    ... 3 more",,acosentino,davsclaus,gjed,jtt77777@gmail.com,RemyT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,CAMEL-18274,,,,,,,,,,,9223372036854775807,,,,Mon Sep 05 07:23:10 UTC 2022,,,,,,,,,,,"0|z17v1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"18/Aug/22 14:01;davsclaus;Could be some osgi bundle mixed version problems or what the f....

Can you do a clean empty karaf and install camel 3.8.1 only and try your camel app there.;;;","19/Aug/22 21:03;jtt77777@gmail.com;I also see this with a clean install.

The manifest for the camel-file bundle has the below for import-package

It imports org.apache.camel.resume.cache and org.apache.camel.support.resume packages,  but not org.apache.camel.resume. Instead org.apache.camel.resume is in the manifest as Private-Package:

Import-Package: org.apache.camel;
version=""[3.18,3.19)"",org.apache.camel.cluster;
version=""[3.18,3.19)"",org.apache.camel.resume.cache;
version=""[3.18,3.19)"",org.apache.camel.spi;
version=""[3.18,3.19)"",org.apache.camel.spi.annotations;
version=""[3.18,3.19)"",org.apache.camel.support;
version=""[3.18,3.19)"",org.apache.camel.support.cluster;
version=""[3.18,3.19)"",org.apache.camel.support.component;
version=""[3.18,3.19)"",org.apache.camel.support.processor.idempotent;
version=""[3.18,3.19)"",org.apache.camel.support.resume;
version=""[3.18,3.19)"",org.apache.camel.support.service;
version=""[3.18,3.19)"",org.apache.camel.util;
version=""[3.18,3.19)"",java.io,java.lang,java.lang.invoke,java.net,java.nio,java.nio.channels,java.nio.charset,java.nio.file,java.nio.file.attribute,java.util,java.util.concurrent,java.util.concurrent.locks,java.util.function,java.util.regex,java.util.stream,org.slf4j;
version=""[1.7,2)""

Private-Package: org.apache.camel.resume;;;","20/Aug/22 06:08;davsclaus;Are you sure you use 3.18.1 and not 3.18.0;;;","20/Aug/22 11:11;jtt77777@gmail.com;Yes.

 

karaf@root()> list -t 0 org.apache.camel.* 
START LEVEL 100 , List Threshold: 0
 ID | State  | Lvl | Version | Name
----+--------+-----+---------+------------------------------------------------
202 | Active |  50 | 3.18.1  | camel-api
203 | Active |  50 | 3.18.1  | camel-attachments
204 | Active |  50 | 3.18.1  | camel-base
205 | Active |  50 | 3.18.1  | camel-base-engine
206 | Active |  50 | 3.18.1  | camel-bean
. . .
224 | Active |  50 | 3.18.1  | camel-directvm
225 | Active |  50 | 3.18.1  | camel-file;;;","20/Aug/22 11:21;jtt77777@gmail.com;I'll point out that it works ( resolves classes in org.apache.camel.resume package)  by setting camel-file bundle to dynamic-import in karaf.

 

karaf@root()> dynamic-import org.apache.camel.camel-file
Enabling dynamic imports on bundle org.apache.camel.camel-file [225];;;","22/Aug/22 09:59;RemyT;karaf@root()> list -t 0 org.apache.camel.* 

 80 │ Active │  50 │ 3.18.1  │ camel-directvm
 81 │ Active │  50 │ 3.18.1  │ camel-file
 82 │ Active │  50 │ 3.18.1  │ camel-health;;;","22/Aug/22 10:00;RemyT;karaf@root()> dynamic-import org.apache.camel.camel-file
Enabling dynamic imports on bundle org.apache.camel.camel-file [81];;;","22/Aug/22 10:22;RemyT;it seems to be good with dynamic;;;","28/Aug/22 19:28;davsclaus;We have corrected this 3.19 onwards. So had to come up with a different fix in 3.18.x with a search/replace to fix the osgi manifest.mf file.;;;","30/Aug/22 06:08;RemyT;So what can we do or modify to have a working version? ;;;","01/Sep/22 15:14;RemyT;Hello,
We have changed the manifest file.

Our manifest in bundle contain the line as mentionned in [commit|https://github.com/apache/camel/commit/159beeb85c9fcc7547c15a41acd8386fc16c5e77#diff-e3281f84bec82da1a03295ec0dee2bfb4e28215a81f1d6a0cbc054c8b8079542]
""Private-Package: !*""

We have the same error:

Caused by: java.lang.ClassNotFoundException: org.apache.camel.resume.ResumeAware not found by org.apache.camel.camel-file [81] ;;;","01/Sep/22 16:42;davsclaus;Wait for the release or use the dynamic thingy. Camel 3.19 has reworked the resume thingy so its loaded in a better way;;;","02/Sep/22 07:36;RemyT; 
The fix on 3.18.2 seems not good.
 
3.19 is not LTS, we have to stay in 3.18.x;;;","04/Sep/22 09:29;davsclaus;Okay it required one more fix;;;","05/Sep/22 06:39;RemyT;So it's not fixed why did you close the issue and mark fixed?
What is the date of release?
We saw september for the release, can we have more details about the planning?
Can we have more details on the resolution of this issue?
Regards,;;;","05/Sep/22 06:51;acosentino;It's resolved because the fix is in place. We don't wait for the release to come out for moving issues to resolved state. We resolve them before and we track the version containing the fix.;;;","05/Sep/22 07:23;davsclaus;You can find details in all the commits, just look at github in the 3.18.x branch;;;",,,,,,,,,
camel-sql - NullPointer exception for DBMaker PreparedStatement,CAMEL-18399,13477122,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,alexandre.zanelatto,alexandre.zanelatto,16/Aug/22 20:32,17/Aug/22 07:35,13/Jul/23 08:34,17/Aug/22 07:35,,,,,3.14.6,3.18.2,3.19.0,,,camel-sql,,,,,0,,,"I'm using the SQL component to connect to my DBMaker database, but the DBMaker PreparedStatement return null on getParameterMetaData causing a nulllpointer
{code:java}
ava.lang.NullPointerException: null
    at org.apache.camel.component.sql.SqlProducer.populateStatement(SqlProducer.java:248)
    at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:150)
    at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
    at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:685)
    at org.apache.camel.component.sql.SqlProducer.processInternal(SqlProducer.java:145)
    at org.apache.camel.component.sql.SqlProducer.process(SqlProducer.java:132)
    at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66)
    at org.apache.camel.processor.SendDynamicProcessor.lambda$process$0(SendDynamicProcessor.java:197)
    at org.apache.camel.support.cache.DefaultProducerCache.doInAsyncProducer(DefaultProducerCache.java:327)
    at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:182)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.redeliver(RedeliveryErrorHandler.java:887)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:189)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:61)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:184)
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:399)
    at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
    at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
    at org.apache.camel.http.common.CamelServlet.doExecute(CamelServlet.java:319)
    at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:214)
    at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:130)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
    at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96) {code}",,alexandre.zanelatto,davsclaus,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Aug 17 07:35:08 UTC 2022,,,,,,,,,,,"0|z17t5c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Aug/22 07:35;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NotifyBuilder.matches returns always true in conjunction with NotifyBuilderMatcher usage,CAMEL-18396,13476809,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,MartinFrei,MartinFrei,15/Aug/22 11:36,17/Aug/22 11:04,13/Jul/23 08:34,17/Aug/22 11:04,3.18.1,,,,3.18.2,3.19.0,,,,camel-core,camel-test,,,,0,,,"Take the following test as example:

[https://github.com/apache/camel/blob/camel-3.18.1/core/camel-core/src/test/java/org/apache/camel/builder/NotifyBuilderTest.java#L703]

And change the line to:

{{mock.expectedBodiesReceivedInAnyOrder(""XXXXX"", ""Bye World"", ""Hi World"");}}

The test would still pass.

 

 ",,davsclaus,MartinFrei,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Aug 16 18:36:32 UTC 2022,,,,,,,,,,,"0|z17r7s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Aug/22 18:36;davsclaus;Its because its using the ...InAnyOrder which wont work with the notify builder. If you use the ones that are not inAnyOrder. then it works

This requires some extra work to trigger assertion checks at some other stages to make the matcher output its result correctly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CXF-Consumer does not start,CAMEL-18394,13476790,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,devflo,devflo,15/Aug/22 09:51,15/Aug/22 17:05,13/Jul/23 08:34,15/Aug/22 17:05,3.18.1,,,,3.18.2,3.19.0,,,,camel-cxf,camel-spring-boot,,,,0,,,"After upgrading from Camel 3.17.0 to 3.18.1
My SOAP CXF Webserivce doesn´t start.
It logs 
org.apache.cxf.endpoint.ServerImpl | Setting the server's publish address to be /goiSoap, but when I go to localhost:8080/services it says ""No services have been found.""
My Rest CXFRS Webservice are working

I´m using Spring Boot to run my Camel routes.",,davsclaus,devflo,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Aug 15 15:25:51 UTC 2022,,,,,,,,,,,"0|z17r3s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Aug/22 10:17;davsclaus;Can you put a sample project to reproduce this somewhere on github, or attach as zip to this ticket;;;","15/Aug/22 11:48;devflo;I´ve created a sample project here: [https://github.com/DevFlorian/camel-cxf-springboot-example]
It works with Camel 3.17.0 but fails with Camel 3.18.1;;;","15/Aug/22 12:43;davsclaus;Make sure you follow the 3.18 upgrade guide on camel-cxf changes;;;","15/Aug/22 12:54;devflo;I did. I´ve switched from {{camel-cxf-starter}} to {{camel-cxf-soap-starter}};;;","15/Aug/22 15:03;davsclaus;[~ffang] I wonder if you have a moment sometime to look into this example;;;","15/Aug/22 15:25;ffang;Sure [~davsclaus];;;",,,,,,,,,,,,,,,,,,,,
Camel-bigquery: NPE if select * is requested,CAMEL-18393,13476782,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,15/Aug/22 09:07,15/Aug/22 17:23,13/Jul/23 08:34,15/Aug/22 17:22,3.18.1,3.19.0,,,3.18.2,3.19.0,,,,camel-google-bigquery,,,,,0,,,"Recent change of the component brought some  problems:

*  If _select * from_ query is executed then it causes NPE. 
{code}
	Caused by: java.lang.NullPointerException
		at org.apache.camel.component.google.bigquery.sql.GoogleBigQuerySQLProducer.executeSQL(GoogleBigQuerySQLProducer.java:111)
		at org.apache.camel.component.google.bigquery.sql.GoogleBigQuerySQLProducer.process(GoogleBigQuerySQLProducer.java:82)
		at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66)

{code}
* Another problem is that the result of the producer for `select` queries should be the _totalRows_ from the result. 

Code causing the troubles is https://github.com/apache/camel/commit/bdd495048da891a2e856a116355e9ca6b6f58c72#diff-fd3f8e800c602d7167e9cdbfb4d6af42e1e6223d05eae2242b9c5b14703862ffR111-R116
",,davsclaus,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Aug 15 17:23:17 UTC 2022,,,,,,,,,,,"0|z17r20:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Aug/22 17:23;davsclaus;Thanks I backported to 3.18.x branch also;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - HttpSendDynamicAware not optimizing for url without slashes,CAMEL-18391,13476670,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Aug/22 18:57,14/Aug/22 15:03,13/Jul/23 08:34,13/Aug/22 18:57,3.14.0,3.18.0,,,3.14.5,3.18.2,3.19.0,,,camel-http,,,,,0,,,"Reported on chat and PR 
https://github.com/apache/camel/pull/8156",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-13 18:57:35.0,,,,,,,,,,,"0|z17qd4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-tarfile: TarAggregationStrategy throws error when first message is empty,CAMEL-18387,13476397,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,chbecker,chbecker,11/Aug/22 14:22,16/Aug/22 09:44,13/Jul/23 08:34,16/Aug/22 09:42,3.18.1,,,,3.14.6,3.18.2,3.19.0,,,camel-tarfile,,,,,0,,,"TarAggregationStrategy will skip empty messages, but if the _first_ message is empty it will throw an error ""java.io.IOException: Cannot create temp file: "" on the next non-empty message.

I added a test case to reproduce this.",,chbecker,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Aug/22 14:22;chbecker;TarAggregationStrategyEmptyFirstFileTest.java;https://issues.apache.org/jira/secure/attachment/13048022/TarAggregationStrategyEmptyFirstFileTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Aug 16 09:42:44 UTC 2022,,,,,,,,,,,"0|z17ooo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Aug/22 14:35;chbecker;PS: The behavior with only one empty message is also strange: In my test the aggregate will be an empty String object instead of an empty File.

 ;;;","11/Aug/22 14:36;chbecker;The following patch should fix the issue
{code:java}
diff --git a/components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java b/components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java
index 78c05bde6d8..3afc43b79ca 100644
--- a/components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java
+++ b/components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java
@@ -172,9 +172,6 @@ public class TarAggregationStrategy implements AggregationStrategy {
                             ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class)
                             : newExchange.getIn().getMessageId();
                     addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);
-                    GenericFile<File> genericFile = FileConsumer.asGenericFile(
-                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);
-                    genericFile.bindToExchange(answer);
                 }
             } catch (Exception e) {
                 throw new GenericFileOperationFailedException(e.getMessage(), e);
@@ -189,14 +186,13 @@ public class TarAggregationStrategy implements AggregationStrategy {
                             ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class)
                             : newExchange.getIn().getMessageId();
                     addEntryToTar(tarFile, entryName, buffer, buffer.length);
-                    GenericFile<File> genericFile = FileConsumer.asGenericFile(
-                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);
-                    genericFile.bindToExchange(answer);
                 }
             } catch (Exception e) {
                 throw new GenericFileOperationFailedException(e.getMessage(), e);
             }
         }
+        GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);
+        genericFile.bindToExchange(answer);
         return answer;
     }
 {code};;;","11/Aug/22 14:40;davsclaus;You are welcome to send the patch as a PR;;;","16/Aug/22 07:14;chbecker;Created pull request [https://github.com/apache/camel/pull/8166] for main branch;;;","16/Aug/22 09:42;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,
camel-mail: attachments with empty fileName,CAMEL-18379,13476204,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rvigniel,rvigniel,10/Aug/22 15:44,11/Aug/22 12:21,13/Jul/23 08:34,11/Aug/22 12:20,2.24.3,3.18.0,,,3.14.5,3.18.2,3.19.0,,,camel-mail,,,,,0,,,"camel-mail cannot consume mails having attachment with empty fileName, for example :



------=_Part_16671_1906075314.1659698158276
Content-Type: image/png; name=""""
Content-Disposition: inline; filename=""""

...

 

this mail produces the following error:
Caused by: java.lang.IllegalArgumentException: name must be specified and not empty
at org.apache.camel.util.StringHelper.notEmpty(StringHelper.java:335) ~[!/:2.24.3]
at org.apache.camel.component.mail.DelegatingDataSource.<init>(DelegatingDataSource.java:35) ~[!/:2.24.3]

...

proposition: implement same behavior as attachment with no fileName, ie attachment is ignored.

 

workaround: use mapMailMessage=false option on camel source endpoint, so email is polled without error.

then, in a Processor, on exchange object, overload binding class with custom ""MailBinding"" before reading attachments:
exchange.setProperty(Exchange.BINDING,new NoInlineMailBinding());

 

 ","camel 2.24.3 on karaf 4.2.7, openjdk 11.0.15",davsclaus,rvigniel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Aug/22 09:54;rvigniel;test-camel-mail-inline.zip;https://issues.apache.org/jira/secure/attachment/13048015/test-camel-mail-inline.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Aug 11 12:02:43 UTC 2022,,,,,,,,,,,"0|z17ni0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Aug/22 15:48;davsclaus;Camel 2.x is EOL try with Camel 3 first;;;","11/Aug/22 09:55;rvigniel;tested with camel 3.18.0, same behavior ( see test case attached );;;","11/Aug/22 11:18;davsclaus;Thanks for the test case. And what do you think should happen when the file has no name? Should a special name be assigned or the attachment skipped?;;;","11/Aug/22 12:02;rvigniel;current implementaton already skips if fileName is null, so I suggest having the same behavior when fileName is empty.

 

with more refactoring, the component could support attachments with no name, and multiple attachments with same name. but it would not fit with current camel Message interface, where attachments are named.  ( Map<String,Attachment> );;;",,,,,,,,,,,,,,,,,,,,,,
camel-jpa producer does not reuse existing EntityManager in transaction and create its own one,CAMEL-18377,13476090,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,10/Aug/22 06:12,17/Aug/22 02:13,13/Jul/23 08:34,17/Aug/22 02:13,3.18.0,,,,3.18.2,3.19.0,,,,camel-jpa,,,,,0,,,"camel-jpa producer does not reuse  the existing EntityManager in transaction and create its own one.

This happens when JpaTransactionManager is used. It creates an EntityManager for transactions in the doBegin() method.
So there will be two EntityManagers and two connections even if there is only one route for the jpa producer.",,davsclaus,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Aug 17 01:35:57 UTC 2022,,,,,,,,,,,"0|z17mt4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Aug/22 10:00;davsclaus;Can you backport to 3.18.x branch;;;","17/Aug/22 01:35;zhfeng;yeah, I will backport it.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Property description for FromDefinition is missing in camelYamlDsl.json ,CAMEL-18375,13475987,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,09/Aug/22 14:28,10/Aug/22 07:18,13/Jul/23 08:34,10/Aug/22 07:18,3.18.0,3.18.1,,,3.18.2,3.19.0,,,,camel-yaml-dsl,,,,,0,,,"Property *description* for FromDefinition is missing in camelYamlDsl.json 

https://github.com/apache/camel/blob/58fb2d562be96322188eefd895fad5def88a4eb9/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/schema/camelYamlDsl.json#L905",,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-09 14:28:39.0,,,,,,,,,,,"0|z17m6o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-resume-api: file component is not loading the cache,CAMEL-18371,13475957,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,09/Aug/22 12:14,10/Aug/22 16:27,13/Jul/23 08:34,10/Aug/22 16:27,3.18.0,3.19.0,,,3.18.2,3.19.0,,,,camel-file,camel-resume-api,,,,0,,,Refreshing data from a resume strategy does not fill the cache when using a file component.,,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Aug 10 16:27:37 UTC 2022,,,,,,,,,,,"0|z17m00:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Aug/22 16:27;orpiske;Fixed with the linked PRs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Bidning properties to route template local beans do not honor RAW(),CAMEL-18370,13475955,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,09/Aug/22 12:09,31/Aug/22 04:29,13/Jul/23 08:34,11/Aug/22 09:52,3.18.0,,,,3.18.2,3.19.0,,,,camel-core,camel-kamelet,,,,0,,,"Assuming we have a kamelet where the route template is defined as:

{code:yaml}
  template:
    beans:
      - name: local-salesforce
        type: ""#class:org.apache.camel.component.salesforce.SalesforceComponent""
        properties:
          clientId: ""{{clientId}}""
          clientSecret: ""{{clientSecret}}""
          userName: ""{{userName}}""
          password: ""{{password}}""
          loginUrl: ""{{loginUrl}}""
    from:
      uri: kamelet:source
      steps:
        - to:
            uri: ""{{local-salesforce}}:createSObject""
            parameters:
              sObjectName: ""{{sObjectName}}""
              rawPayload: ""true""
              format: ""JSON""
{code}

Where we define the _userName_ as something like _foo+bar@acme.com_.
With such parameter, the login would fail as the parameter would become  _foo bar@acme.com_ in the component (as the parameter is taken from the kamelet uri hence, it gets decoded).

An attempt to fix that is to use RAW, as example _userName: ""RAW{{userName}}""_ but this also would fail the login as the parameter would become _RAW(foo bar@acme.com)_ in the component.

",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,CAMEL-16403,,CAMEL-18385,,,,,,,,"11/Aug/22 07:21;davsclaus;Screenshot 2022-08-11 at 09.21.09.png;https://issues.apache.org/jira/secure/attachment/13048002/Screenshot+2022-08-11+at+09.21.09.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Aug 11 09:52:38 UTC 2022,,,,,,,,,,,"0|z17lzk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Aug/22 07:21;davsclaus;I have reproduced this with help from jbang

;;;","11/Aug/22 08:48;davsclaus;I can make this work with RAW but it requires that we start to use RAW more consistently for username/password in the templates.

This route works with a the above salesforce kamelet. The password that salesforce receives is as-is typed with the + sign
{code}
# camel-k: language=yaml
# camel-k: property=myUsername=foo+bar@acme.com

# Write your routes here, for example:
- from:
    uri: ""timer:foo""
    parameters:
      period: ""1000""
    steps:
      - setBody:
          constant: ""Hello Camel from yaml""
      - to:
          uri: ""kamelet:mysf""
          parameters: 
            sObjectName: ""com.foo.MyObject""
            clientId: ""123""
            clientSecret: ""bbb""
            userName: ""RAW({{myUsername}})""
            password: ""tiger""
            loginUrl: ""https://login.salesforce.com""
{code};;;","11/Aug/22 08:56;davsclaus;With CAMEL-16403 we could also automatic detect which parameter names that matches a sensitive key, then we could automatic have safe RAW() so end users do not need to think about this. Otherwise its safer to mark all of that with RAW();;;","11/Aug/22 09:52;davsclaus;[~lb] you need to use RAW() in the route (as above) then it works now with this fix.
The kamelet should not use RAW() but stay as-is;;;",,,,,,,,,,,,,,,,,,,,,,
camel-resume-api: kafka resume strategy fails to fetch the first batch,CAMEL-18362,13475696,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,08/Aug/22 09:15,10/Aug/22 16:27,13/Jul/23 08:34,10/Aug/22 16:27,3.18.0,3.19.0,,,3.18.2,3.19.0,,,,camel-kafka,camel-resume-api,,,,0,,,"When running the fileset example, we can notice that the first batch that it tries to fetch fail and it comes empty. This causes the code process duplicate records.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Aug 10 16:27:25 UTC 2022,,,,,,,,,,,"0|z17ke0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Aug/22 16:27;orpiske;Fixed with the linked PRs;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Export --fresh with property placeholder using dash may fail,CAMEL-18360,13475650,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Aug/22 05:00,08/Aug/22 10:36,13/Jul/23 08:34,08/Aug/22 10:35,3.18.1,,,,3.18.2,3.19.0,,,,camel-jbang,,,,,0,,,"~/workspace/deleteme/app ❯ camel export --runtime=quarkus --gav=com.foo:acme:1.0 --directory=code --fresh
Generating fresh run data
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> SetBody[constant{Hello {{my-name}} from yaml}] <<< in route: Route(route1)[From[timer:yaml?period=1000] -> [SetBody[const... because of Property with key [my-name] not found in properties from text: Hello {{my-name}} from yaml",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-08-08 05:00:44.0,,,,,,,,,,,"0|z17k4w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP component overwrites basic authentication credentials with proxy authentication ,CAMEL-18355,13475303,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,klease78,OHolzma,OHolzma,05/Aug/22 07:00,26/Aug/22 09:33,13/Jul/23 08:34,26/Aug/22 09:33,3.18.0,,,,3.18.2,3.19.0,,,,camel-http,,,,,0,,,"We use HTTP endpoints with basic authentication (params {{authUsername}}, {{authPassword}}) via a proxy that requires proxy authentication (params {{proxyAuthUsername}}, {{proxyAuthPassword}}). 

But basic authentication fails. In debug logs we see that basic authentication header is using proxy credentials. ",,davsclaus,klease78,OHolzma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Aug 26 09:33:50 UTC 2022,,,,,,,,,,,"0|z17i00:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Aug/22 07:10;OHolzma;I think 
* {{ProxyHttpClientConfigurer}} needs to set the proxy credentials for the auth scope of the proxy {{HttpHost}} instead of {{AuthScope.ANY}}
* and it must add new credential to a potentially existing {{credentialsProvider}} of {{clientBuilder}}; currently {{ProxyHttpClientConfigurer}} overwrites the {{credentialsProvider}} of {{clientBuilder}} provided by {{BasicAuthenticationHttpClientConfigurer}};;;","05/Aug/22 07:48;davsclaus;You are welcome to work on a PR as you can then also test the code changes in your system;;;","22/Aug/22 13:08;klease78;[~OHolzma] If you aren't planning to submit a PR for this, I can propose one based on  your analysis.;;;","22/Aug/22 17:37;OHolzma;[~klease78] please feel free to create a fix. I'm happy support ;;;","24/Aug/22 10:09;klease78;I have submitted the PR if you want to try it out. I added a unit test which reproduced the issue and which works after the change.;;;","26/Aug/22 04:38;davsclaus;Can you backport this to 3.18.x branch;;;","26/Aug/22 09:33;klease78;Backported to 3.18.x;;;",,,,,,,,,,,,,,,,,,,
"camel-kafka: enabling ""breakOnFirstError"" causes camel to reconsume all records on error",CAMEL-18350,13475171,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,eandre,eandre,04/Aug/22 13:04,29/Sep/22 15:41,13/Jul/23 08:34,29/Sep/22 15:41,3.18.0,,,,3.14.6,3.18.3,3.20.0,,,camel-kafka,,,,,0,,,"{*}Reproducing{*}:
 * Configure camel kafka consumer with with ""breakOnFirstError"" = ""true""
 * Produce a series of records to kafka record consumed by application
 * Ensure offset is commited
 * Produce more records
 * Trigger an error when processing one of the records

*Expected behavior:*
 * Application should only reconsume records after the last committed offset

*Actual behavior:*
 * Application reconsumes all records on topic

Whether the erroneous behavior is triggered seem to be dependent on the offset the failing exchange has internally in the series of records in the poll. 

 

I've created a project on github with a failing test that reproduces the issue: [https://github.com/espeandr/camel-kafka-incorrectly-reconsumes-entire-topic-demo]. I haven't been able to find a pattern to which ""message offset"" in the poll causes the error. In the test I've reproduced the error by forcing a max poll size as this simplifies the test setup. The issue is also reproducible without overriding maxPollSize.

I suspect that offset = 0 is committed when breaking out in the erroneous cases.",,davsclaus,eandre,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Sep 29 06:17:02 UTC 2022,,,,,,,,,,,"0|z17h6o:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"27/Sep/22 09:27;eandre;I think this bug is somewhat critical. It renders the only technique I know of for approximating ""exactly once"" useless. As stated in the description, it will cause redelivery of all records on topics in case of an error, which probably is pretty critical for users who have applied an exactly once technique.

Here is a post on stackoverflow demonstrating that this technique probably is used by more than me:
[https://stackoverflow.com/questions/61621755/how-to-implement-exactly-once-kafka-consumer-using-apache-kafka];;;","28/Sep/22 06:54;davsclaus;thanks for the test case, you are welcome to try to find a fix and send a PR. What happens if you set maxPollRecords to > 1 ?;;;","28/Sep/22 08:53;eandre;Just had an incident where this error occurred in a running application. We first tried increasing the ""maxPollRecords"" and then enabling autocomit, but the application still went back to the earliest offset each time an error occurred. I suspect that ""breakOnFirstError"" = ""true"" is all that is needed to trigger this behavior.

I'll see if I'm able to update the test case to reproduce this behavior and confirm my suspicion.;;;","28/Sep/22 11:59;eandre;I've confirmed my suspicion. breakOnFirstError = true may cause this on its own. However, it also seems to be dependent on which offset in the series of polled records the error occurs. I've updated the issue title, description, and test to clarify.;;;","28/Sep/22 13:06;klease78;I started to look into it and it appears that setting the autoCommit to false is forcing Camel to use a no-op commit manager (which is *not* what is written in the documentation) so in fact the offset is not correctly preserved:
{code:java}
2022-09-27 23:33:48.308 DEBUG   --- [mer[test_topic]] o.a.c.c.kafka.consumer.CommitManagers    : Allowing manual commit management
2022-09-27 23:33:48.308 DEBUG   --- [mer[test_topic]] o.a.c.c.kafka.consumer.CommitManagers    : Using an NO-OP commit manager for manual commit management{code}
So I tried explicitly setting a commit manager, like so:
{code:java}
.advanced()
 .kafkaManualCommitFactory(new org.apache.camel.component.kafka.consumer.DefaultKafkaManualCommitFactory())
{code}
After this it doesn't reconsume the messages before the failing one, but it seems only to consume the one after the failure. That's when using maxPollRecords(1). Without that, the test works, becaue the logs show that it is then seeking to offset 3 after the error and not -1.

So there is something strange with the offset handling, as you found  too.;;;","28/Sep/22 13:15;eandre;Seems like you're onto somthing. To clarify, this happens regardless of autoCommit true or false. In my test case autoCommit is true/default (I updated this earlier today).;;;","28/Sep/22 14:51;klease78;The problem is related to the number of messages polled at one time. In fact, the offset of the ""lastResult"" is always set to -1 on the first message in a batch of polled messages. If the error occurs on this message, then the offset for restarting is set to -1 which causes all messages to be reread.

As you observed in your test, using 1, 2 or 4 as the polling size will cause the fifth message to be the first in a set of polled message which causes the incorrect behavior.

As I'm not familiar with camel-kafka, I don't yet have a suggestion for setting the correct offset for ""lastResult"" in the method KafkaRecordProcessorFacade.processPolledRecords().;;;","28/Sep/22 15:40;klease78;I proposed a solution which makes your test work and doesn't break any others; let's see what the team thinks.;;;","29/Sep/22 06:17;eandre;Great, thank you! Hoping the fix is included in next release;;;",,,,,,,,,,,,,,,,,
camel-test-infra: instances are not properly singleton,CAMEL-18347,13475069,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,04/Aug/22 09:22,05/Aug/22 13:16,13/Jul/23 08:34,05/Aug/22 13:16,3.18.0,3.19.0,,,3.18.2,3.19.0,,,,camel-test-infra-arangodb,camel-test-infra-hbase,camel-test-infra-kafka,camel-test-infra-mongodb,,0,,,"Despite being advertised as singleton, the test infra still create multiple instances of the services. This can slow down test execution and use more resources than necessary.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Aug 05 13:16:07 UTC 2022,,,,,,,,,,,"0|z17gk0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Aug/22 13:16;orpiske;Fixed with the linked PRs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
IMAP MailConsumer NullPointerException due CAMEL-16180,CAMEL-18338,13474816,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fibyflo,fibyflo,03/Aug/22 06:34,08/Aug/22 08:09,13/Jul/23 08:34,03/Aug/22 10:12,3.18.0,,,,3.18.1,3.19.0,,,,camel-mail,,,,,0,,,"{{{}2022-08-03 02:57:31.059  WARN 1 --- [Camel (ValuemationCustomerMailboxApplication) thread #7 - imaps://outlook.office365.com:993] o.a.camel.component.mail.MailConsumer    : Error opening mail fol{}}}{{{}der due to GSI5 BAD User is authenticated but not connected.. Will re-create connection on next poll{}}}

This leads to disconnect(). disconnect sets folder to null, which leads to NullPointerExceptions afterwards:

{{2022-08-03 02:57:31.073 ERROR 1 --- [Camel (ValuemationCustomerMailboxApplication) thread #7 - imaps://outlook.office365.com:993] o.a.c.p.e.DefaultErrorHandler            : Failed delivery for (MessageId: 61974526595AC2A-0000000000000006 on ExchangeId: 61974526595AC2A-0000000000000006). Exhausted after delivery attempt: 0 caught: null}}
{{{}Message History (source location and message history is disabled){}}}{{{}---------------------------------------------------------------------------------------------------------------------------------------{}}}{{{}Source                                   ID                             Processor                                          Elapsed (ms){}}}{{                                         Custom:XXX. from[imaps://outlook.office365.com:993?bridgeError            3}}{{        ...}}{{                                         Escalation Route/setHeader1    setHeader[EscalationSender]                               0}}
{{{}Stacktrace{}}}{{{}---------------------------------------------------------------------------------------------------------------------------------------{}}}
{{java.lang.NullPointerException: null}}{{        at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:162) ~[camel-mail-3.18.0.jar!/:3.18.0]}}{{        at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202) ~[camel-support-3.18.0.jar!/:3.18.0]}}{{        at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116) ~[camel-support-3.18.0.jar!/:3.18.0]}}{{        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]}}{{        at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]}}{{        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]}}{{        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]}}{{        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]}}{{        at java.base/java.lang.Thread.run(Thread.java:829) ~[na:na]}}
{{2022-08-03 02:57:31.074 ERROR 1 --- [Camel (ValuemationCustomerMailboxApplication) thread #7 - imaps://outlook.office365.com:993] o.a.c.p.FatalFallbackErrorHandler        : Exception occurred while trying to handle previously thrown exception on exchangeId: 61974526595AC2A-0000000000000006 using: [null].}}

 

{{2022-08-03 02:57:31.081 ERROR 1 --- [Camel (ValuemationCustomerMailboxApplication) thread #7 - imaps://outlook.office365.com:993] o.a.c.p.e.DefaultErrorHandler            : Failed delivery for (MessageId: 61974526595AC2A-0000000000000007 on ExchangeId: 61974526595AC2A-0000000000000007). Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException. Processed by failure processor: FatalFallbackErrorHandler[null]}}
{{{}Message History (source location and message history is disabled){}}}{{{}---------------------------------------------------------------------------------------------------------------------------------------{}}}{{{}Source                                   ID                             Processor                                          Elapsed (ms){}}}{{                                         Custom:TTITSupport@forstinger. from[imaps://outlook.office365.com:993?bridgeError            3}}
{{{}Stacktrace{}}}{{{}---------------------------------------------------------------------------------------------------------------------------------------{}}}
{{java.lang.NullPointerException: null}}{{        at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:189) ~[camel-mail-3.18.0.jar!/:3.18.0]}}{{        at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202) ~[camel-support-3.18.0.jar!/:3.18.0]}}{{        at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116) ~[camel-support-3.18.0.jar!/:3.18.0]}}{{        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]}}{{        at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]}}{{        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]}}{{        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]}}{{        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]}}{{        at java.base/java.lang.Thread.run(Thread.java:829) ~[na:na]}}",,davsclaus,fibyflo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Aug 08 08:09:48 UTC 2022,,,,,,,,,,,"0|z17f08:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Aug/22 06:45;fibyflo;[~davsclaus] issue is related with commit e02cb28f4b797561ce2b7580206ca26037dd86a7.

After disconnect folder is null and polling is done anyway which leads to NullPointerException.

I'm not sure whether the intention was to re-create the connection in this catch or to exit poll and reopen connection with next poll (comment vs logging).

{{        try {}}
{{            if (!folder.isOpen()) {}}
{{                folder.open(Folder.READ_WRITE);}}
{{            }}}
{{        } catch (MessagingException e) {}}
{{            // some kind of connectivity error, so lets re-create connection}}
{{            String msg = ""Error opening mail folder due to "" + e.getMessage() + "". Will re-create connection on next poll."";}}
{{            LOG.warn(msg);}}
{{            if (LOG.isDebugEnabled()) {}}
{{                LOG.debug(msg, e);}}
{{            }}}
{{            disconnect();}}
{{        }}};;;","03/Aug/22 06:45;davsclaus;Are you working on a fix as a PR ?;;;","03/Aug/22 08:00;fibyflo;No, I'm not having enough knowledge about the camel architecture;;;","03/Aug/22 10:12;davsclaus;Thanks for reporting;;;","08/Aug/22 07:55;fibyflo;Is there a release date for 3.18.1?;;;","08/Aug/22 08:09;davsclaus;its on VOTE so end of this week / start of next;;;",,,,,,,,,,,,,,,,,,,,
camel-spring-xml - <endpoint> bean added via beans.xml are parsed twice,CAMEL-18331,13474531,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ldemasi,Federico Mariani,Federico Mariani,01/Aug/22 13:01,03/Aug/22 05:04,13/Jul/23 08:34,03/Aug/22 05:04,3.14.4,3.18.0,3.19.0,,3.14.5,3.18.1,3.19.0,,,camel-spring,camel-spring-boot,,,,0,,,"By declaring an endpoint inside a camel context and using it via the ref: component. 
The application attached does not run and fail with the following error:
{code:java}
***************************
APPLICATION FAILED TO START
***************************

Description:

The bean 'foo' could not be registered. A bean with that name has already been defined and overriding is disabled.

Action:

Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true {code}

I noticed that
https://github.com/apache/camel/blob/05595854aadb81ccb408c1ca8c3c28c4dc835ec3/components/camel-spring-xml/src/main/java/org/apache/camel/spring/xml/handler/CamelNamespaceHandler.java#L748 <- adds the bean into the camel-context

and https://github.com/apache/camel/blob/05595854aadb81ccb408c1ca8c3c28c4dc835ec3/components/camel-spring-xml/src/main/java/org/apache/camel/spring/xml/handler/CamelNamespaceHandler.java#L757 <- add the bean again into the camel-context, therefore the duplicate bean",,davsclaus,Federico Mariani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Aug/22 13:00;Federico Mariani;ref_reproducer.zip;https://issues.apache.org/jira/secure/attachment/13047485/ref_reproducer.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Aug 03 05:04:34 UTC 2022,,,,,,,,,,,"0|z17d8w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Aug/22 05:04;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RouteConfiguration with RouteTemplate doesn't work,CAMEL-18328,13474384,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,rhuanrcoha,skin27,skin27,31/Jul/22 11:59,08/Aug/22 14:23,13/Jul/23 08:34,07/Aug/22 08:43,3.18.0,,,,3.18.2,3.19.0,,,,camel-core,,,,,0,,,"I have loaded a routeConfiguration:


{code:java}
<routeConfiguration id=""myError"">
            <onException>
               <exception>java.lang.Exception</exception>
               <handled>
                  <constant>true</constant>
               </handled>
               <redeliveryPolicy maximumRedeliveries=""0"" redeliveryDelay=""5000""/>
               <setExchangePattern pattern=""InOnly""/>
               <to uri=""log:myError?showAll=true&amp;multiline=true""/>
            </onException>
         </routeConfiguration>{code}

I have a RouteTemplate:
{code:java}
         routeTemplate(""myTemplate"")
                 .templateParameter(""in"")
                 .templateParameter(""out"")
                 .from(""{{in}}"")
                     .routeConfigurationId(""myError"")
                     .to(""{{out}}"");{code}

But this routeConfigurationId doesn't seem to take effect. When calling the routeConfigurationId directly from a route is works.

Can you reproduce this?

BTW: What I try to achieve:


{code:java}
         routeTemplate(""myTemplate"")
                 .templateParameter(""routeconfiguration_id"",""defaultErrorHandler"")
                 .templateParameter(""in"")
                 .templateParameter(""out"")
                 .from(""{{in}}"")
                     .routeConfigurationId(""{{routeconfiguration_id}}"")
                     .to(""{{out}}"");{code}
Thus adding the routeConfigurationID through a templateParameter.",,davsclaus,rhuanrcoha,skin27,,,,,,,,,,,,,,,,,,,,CAMEL-18262,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Aug 08 14:23:29 UTC 2022,,,,,,,,,,,"0|z17ccg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"31/Jul/22 12:45;davsclaus;I think there was a ticket about this and fixed for next release(s);;;","31/Jul/22 12:45;skin27;Some additional information:

1) I load everything (routes / routetemplates / routeconfiguration) with the roadLoader.

2) I have camel-xml-io on my classpath

3) Test parameters creating the route from template

""in"" parameter is [file://C:/messages/in|file:///C:/messages/in?autoCreate=false&directoryMustExist=true]
""out"" parameter is [file://C:/messages/directorydoesnotexist?autoCreate=false&amp;directoryMustExist=true|file:///C:/messages/directorydoesnotexist?autoCreate=false&directoryMustExist=true]

As a sidenote:

The routeConfiguration works when referencing the routeConfiguration from a normal route (not a route template). This however also only works as long as I don't have camel-xml-jaxb on my classpath (See https://issues.apache.org/jira/browse/CAMEL-17953).

Unfortunately because I need to remove the camel-xml-jaxb the route XML dumper doesn't work anymore. (See https://issues.apache.org/jira/browse/CAMEL-18305)

 ;;;","31/Jul/22 12:47;davsclaus;You can test and try the 3.18.1-SNAPSHOT from ASF snapshot repo
https://repository.apache.org/snapshots/;;;","31/Jul/22 12:47;skin27;Nice, will it also be in the LTS release (3.18.1)? Couldn't find that, do you accidently know the ticketnumber?

 

[Edit]Thanks you were faster;;;","31/Jul/22 12:49;davsclaus;Ah we have a problem with publishing 3.18.1 SNAPSHOTS so you can either build from source or try 3.19.0-SNAPSHOT.

We are working on getting 3.18.1 SNAPSHOT to be published too, but that may take a while to get sorted. There is a mail on dev mailing list about it;;;","31/Jul/22 13:34;skin27;I tested it with 3.19.0-SNAPSHOT

1) I can confirm that it works when routeConfiguration is hardcoded:
{code:java}
routeTemplate(""myTemplate"")
.templateParameter(""in"")
.templateParameter(""out"")
.from(""{{in}}"")
.routeConfigurationId(""myErrorHandler"")
.to(""{{out}}"");
{code}
 

 

2) I doesn't however work from a templateParameter:
{code:java}
routeTemplate(""myTemplate"") 
   .templateParameter(""in"") 
   .templateParameter(""out"")
   .templateParameter(""myErrorHandlerID"")
   .from(""{{in}}"")
   .routeConfigurationId(""{{myErrorHandlerID}}"")
   .to(""{{out}}"");

{code}

The second use case is what I like to do, because I have several routeConfigurations and they are chosen by the user.

BTW: The same counts for ""routeId"". It doesn't work with a templateParameter. There of course you can workaround it by setting the routeId together with the templateId. I thought however that both use cases would work. (both for routeId and routeConfigurationId).;;;","31/Jul/22 13:51;rhuanrcoha;Hi, I`m checking it. ;;;","31/Jul/22 14:23;rhuanrcoha;Yes, I`m able to reproduce it. The Template is not translating the parameter and the RouteDefinition is created with the wrong value. I`ll work on it.;;;","31/Jul/22 15:36;skin27;Nice, when it's in the 3.19.0-SNAPSHOT I will retest it.

Note: I'll be on holiday from 02/08;;;","05/Aug/22 05:44;rhuanrcoha;Hi, I`ll send a PR soon. ;;;","08/Aug/22 07:21;davsclaus;[~rhuanrcoha] thanks for the help I have granted your jira user karma to self assign tickets;;;","08/Aug/22 14:23;rhuanrcoha;Thank you [~davsclaus] ;;;",,,,,,,,,,,,,,
camel-core - Exception during preparing exchange task can block thread,CAMEL-18324,13474146,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/22 08:07,29/Jul/22 09:03,13/Jul/23 08:34,29/Jul/22 09:03,3.14.4,3.18.0,,,3.14.5,3.18.1,3.19.0,,,camel-core,,,,,0,,,"Reported in CAMEL-18270 but this is a general problem in the routing engine.
",,davsclaus,fibyflo,,,,,,,,,,,,,,,,,,,CAMEL-18270,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-29 08:07:22.0,,,,,,,,,,,"0|z17avs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Jbang export copy properties erroneously,CAMEL-18322,13474043,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,28/Jul/22 15:59,30/Jul/22 08:23,13/Jul/23 08:34,30/Jul/22 08:23,3.18.0,,,,3.18.1,3.19.0,,,,camel-jbang,,,,,0,,,"jbang -Dcamel.jbang.version=3.18.0 camel@apache/camel export

for application.properties
{code:java}
camel.jbang.project-id=use-case-1
camel.jbang.project-name=use-case-1
camel.jbang.project-description=Salesforce  to ServiceNow
camel.jbang.gav=org.camel.karavan.demo:use-case-1:1.0.0
camel.jbang.runtime=quarkus
camel.jbang.quarkusVersion=2.11.1.Final
camel.jbang.dependencies=mvn:io.quarkus:quarkus-container-image-jib,mvn:org.apache.camel.quarkus:camel-quarkus-microprofile-health,mvn:io.quarkus:quarkus-openshift,mvn:org.apache.camel:camel-salesforce:3.18.0
camel.health.enabled=true
camel.health.exposure-level=full
quarkus.kubernetes-client.trust-certs=true
quarkus.container-image.builder=jib
quarkus.container-image.group=karavan
quarkus.container-image.name=use-case-1
quarkus.openshift.route.expose=false
quarkus.openshift.part-of=use-case-1
quarkus.openshift.replicas=1
{code}

creates quarkus project with the following application.properties

{code:java}
camel.health.enabled=true
camel.health.exposureLevel=full
quarkus.kubernetesClient.trustCerts=true
quarkus.containerImage.builder=jib
quarkus.containerImage.group=karavan
quarkus.containerImage.name=use-case-1
quarkus.openshift.route.expose=false
quarkus.openshift.partOf=use-case-1
quarkus.openshift.replicas=1
camel.main.sourceLocationEnabled=true
camel.main.tracing=false
{code}

Some properties are missing and some of them converted from kebab based to camel based and this not supported by Quarkus",,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-28 15:59:11.0,,,,,,,,,,,"0|z17a8w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mybatis - Should support using Map message body as-is for insert/update,CAMEL-18321,13474036,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Jul/22 15:18,28/Jul/22 15:24,13/Jul/23 08:34,28/Jul/22 15:24,3.14.4,3.18.0,,,3.14.5,3.18.1,3.19.0,,,camel-mybatis,,,,,0,,,"This used to work in 2.x.

Reported in user mailing list",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-28 15:18:46.0,,,,,,,,,,,"0|z17a7c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Supervising route controller should not eager warmup routes,CAMEL-18319,13474010,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Jul/22 13:47,28/Jul/22 14:43,13/Jul/23 08:34,28/Jul/22 14:43,3.14.4,3.18.0,,,3.14.5,3.18.1,3.19.0,,,camel-core,,,,,0,,,When using supervised route controller then Camel should not warmup routes during its normal startup procedure. They need to be under control by the supervising so any errors there is controlled and can be rescheduled to try again.,,davsclaus,,,,,,,,,,,,,,,,,,,,CAMEL-18318,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-28 13:47:18.0,,,,,,,,,,,"0|z17a1k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Global SSL Context Params Force SSL for All HTTP Connections ,CAMEL-18310,13473733,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ralfsteppacher,ralfsteppacher,27/Jul/22 09:15,27/Jul/22 14:28,13/Jul/23 08:34,27/Jul/22 14:28,3.18.0,,,,3.18.1,3.19.0,,,,camel-http,,,,,0,,,"When setting the property {{camel.component.http.use-global-ssl-context-parameters=true}} all plaintext http connection attempts fail because a {{SSLConnectionSocketFactory}} is used. E.g. this will fail:

{code:java}
to(http(""localhost:9090/test""))
{code}

with the following stacktrace:

{noformat}
javax.net.ssl.SSLException: Unsupported or unrecognized SSL message
    at java.base/sun.security.ssl.SSLSocketInputRecord.handleUnknownRecord(SSLSocketInputRecord.java:451) ~[na:na]
    at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:175) ~[na:na]
    at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:110) ~[na:na]
    at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1369) ~[na:na]
    at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1278) ~[na:na]
    at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:401) ~[na:na]
    at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:373) ~[na:na]
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:436) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:384) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:376) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:393) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:72) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.13.jar:4.5.13]
    at org.apache.camel.component.http.HttpProducer.executeMethod(HttpProducer.java:445) ~[camel-http-3.18.0.jar:3.18.0]
    at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:273) ~[camel-http-3.18.0.jar:3.18.0]
    at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.SendDynamicProcessor.lambda$process$0(SendDynamicProcessor.java:197) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.support.cache.DefaultProducerCache.doInAsyncProducer(DefaultProducerCache.java:327) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:182) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:812) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:720) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:189) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:61) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:184) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:399) ~[camel-base-engine-3.18.0.jar:3.18.0]
{noformat}

SSL settings should only apply to endpoints using the {{https}} protocol scheme, not to endpoints using the {{http}} protocol scheme.",,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-27 09:15:49.0,,,,,,,,,,,"0|z178c0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Google storage component does not set metadata appropriately,CAMEL-18300,13473406,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fieldbradley,fieldbradley,25/Jul/22 22:04,28/Feb/23 18:07,13/Jul/23 08:34,26/Jul/22 11:26,3.18.0,,,,3.18.1,3.19.0,,,,camel-google-storage,,,,,0,,,"The [docs|https://camel.apache.org/components/3.18.x/google-storage-component.html#_configuring_component_options] indicate that the CamelGoogleCloudStorageContentType header sets the content type of the object. However, this is not the case. The GoogleCloudStorageProducer class does set metadata, but it does so using the setMetadata method of BlobInfo, which only sets custom metadata. So setting the header like so:

.setHeader('CamelGoogleCloudStorageContentType', constant('text/plain'))

results in a blob stored with the attached metadata, where the Content-Type is the default application/octet-stream, and the Custom Metadata includes that set on the header.",,fieldbradley,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Jul/22 22:03;fieldbradley;Screen Shot 2022-07-25 at 6.03.25 PM.png;https://issues.apache.org/jira/secure/attachment/13047192/Screen+Shot+2022-07-25+at+6.03.25+PM.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-25 22:04:32.0,,,,,,,,,,,"0|z176bc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xslt-saxon: XsltAggregationStrategyTest fails with removing the log definition,CAMEL-18289,13472817,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,22/Jul/22 03:27,26/Jul/22 09:45,13/Jul/23 08:34,26/Jul/22 09:41,3.18.0,,,,3.18.1,3.19.0,,,,camel-core,,,,,0,,,"When removing the log in the route just like
{code:java}
from(""file:src/test/resources/org/apache/camel/util/toolbox?noop=true&sortBy=file:name&antInclude=*.xml"")
        .routeId(""route1"").noAutoStartup()
        .aggregate(new XsltSaxonAggregationStrategy(""org/apache/camel/util/toolbox/aggregate.xsl""))
        .constant(true)
        .completionFromBatchConsumer()
        //.log(""after aggregate body: ${body}"")
        .to(""mock:transformed"");
{code}

The test is failing with
{noformat}
[ERROR] org.apache.camel.component.xslt.saxon.XsltAggregationStrategyTest.testXsltAggregationDefaultProperty  Time elapsed: 1.044 s  <<< FAILURE!
java.lang.AssertionError: mock://transformed Body of message: 0. Expected: <<?xml version=""1.0"" encoding=""UTF-8""?><item>ABC</item>> but was: <<?xml version=""1.0"" encoding=""UTF-8""?><item>AB</item>>
{noformat}

It seems that it is missing the last one content.",,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-22 03:27:40.0,,,,,,,,,,,"0|z172oo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
YAML DSL DoTry does not work ,CAMEL-18288,13472755,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,21/Jul/22 18:36,27/Jul/22 13:13,13/Jul/23 08:34,27/Jul/22 13:13,3.18.0,,,,3.18.1,3.19.0,,,,camel-jbang,camel-yaml-dsl,,,,3,,,"The following two routes expected to work the same way:
{code:java}
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.language.GroovyExpression;

public class Test extends RouteBuilder {
    @Override
    public void configure() throws Exception {

        from(""timer:demo"")
                .doTry()
                    .setBody(new GroovyExpression(""100/10""))
                .doCatch(ArithmeticException.class)
                    .log(""Exception"")
                .doFinally()
                    .log(""${body}"");    
    }
}
{code}
{code:java}
 - route:
    from:
      uri: timer:demo
      steps:
        - doTry:
            steps:
              - setBody:
                  expression:
                    groovy:
                      expression: 1000 / 0
            doCatch:
              - steps:
                  - log:
                      message: Exception
                exception:
                  - java.lang.ArithmeticException
            doFinally:
                steps:
                  - log:
                      message: ${body} 
{code}

However Java version works fine, but YAML version does not catch exception and does not execute doFinally",,ashishgidh,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,CAMEL-18312,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-21 18:36:16.0,,,,,,,,,,,"0|z172aw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Camel Spring Boot] camel-lra-starter needs camel-servlet-starter to work,CAMEL-18286,13472486,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mcarlett,mcarlett,20/Jul/22 13:55,27/Jul/22 13:50,13/Jul/23 08:34,27/Jul/22 13:50,3.18.0,,,,3.18.1,3.19.0,,,,camel-spring-boot,camel-spring-boot-starters,,,,0,,,"Despite the [documentation|https://camel.apache.org/components/latest/eips/saga-eip.html#_using_the_lra_saga_service_in_spring_boot] says that the necessary dependencies are _camel-lra-starter_ and {_}camel-undertow-starter{_}, _camel-servlet-starter_ dependecy is necessary to make the saga works as expected.

To reproduce the error:

1) start Narayana LRA Coordinator on port 8888
{code:bash}
docker run --network host -e QUARKUS_HTTP_PORT=8888 -e LOG_LEVEL=INFO --rm docker.io/jbosstm/lra-coordinator:latest
{code}
2) start attached application
{code:bash}
mvn spring-boot:run
{code}
 
looking at the transactions at [http://localhost:8888/lra-coordinator/] we will see that all the transactions will be in ""Closing"" status, I expected no transactions here (all completed/compensated)

The issue is that the REST endpoint are not exposed by the [camel-lra component|https://github.com/apache/camel/blob/main/components/camel-lra/src/main/java/org/apache/camel/service/lra/LRASagaRoutes.java#L45-L61] so the LRA cannot be completed by the LRA Coordinator (it is possible to see WARN log in the container log)

The workaround is adding camel-servlet-starter dependency

3) start application with the dependency:
{code:bash}
mvn spring-boot:run -Pworkaround
{code}
now there are no ""Closing"" transactions at [http://localhost:8888/lra-coordinator/]",,davsclaus,mcarlett,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Jul/22 14:02;mcarlett;saga-lra.zip;https://issues.apache.org/jira/secure/attachment/13047028/saga-lra.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jul 27 13:50:56 UTC 2022,,,,,,,,,,,"0|z170n4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Jul/22 13:10;davsclaus;You are welcome to send a PR against main branch for camel-spring-boot to add the dependency in the pom.xml for the starter;;;","27/Jul/22 13:50;davsclaus;Thanks for reporting and with reproducer;;;",,,,,,,,,,,,,,,,,,,,,,,,
"When run 3.18.0 with Spring Boot, received java.io.FileNotFoundException: class path resource [.class] cannot be opened because it does not exist",CAMEL-18279,13472348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bocamel,bocamel,19/Jul/22 21:53,25/Jul/22 13:16,13/Jul/23 08:34,25/Jul/22 13:15,3.18.0,,,,3.18.1,3.19.0,,,,came-cxf,,,,,0,,,"After upgrading a springboot application to Camel 3.18.0, received the following exception during startup (Spring AutoConfiguration):

java.io.FileNotFoundException: class path resource [.class] cannot be opened because it does not exist

It is most likely related to a camel cxf class.  A breakpoint in Spring AutoConfigurationSorter.java shows that the list of camel classNames to be configured contains an empty class name ("""") between org.apache.camel.component.cxf.jaxrs.springboot.CxfRsComponentConverter and org.apache.camel.component.cxf.jaxws.springboot.CxfComponentAutoConfiguration.  See the attached screenshots.

!screenshot-camel.png!

Here is the stacktrace:

java.lang.IllegalStateException: Unable to read meta-data for class 
    at org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass.getAnnotationMetadata(AutoConfigurationSorter.java:237) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass.getOrder(AutoConfigurationSorter.java:208) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass.access$000(AutoConfigurationSorter.java:154) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at org.springframework.boot.autoconfigure.AutoConfigurationSorter.lambda$getInPriorityOrder$0(AutoConfigurationSorter.java:64) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at java.util.TimSort.countRunAndMakeAscending(TimSort.java:355) ~[?:?]
    at java.util.TimSort.sort(TimSort.java:234) ~[?:?]
    at java.util.Arrays.sort(Arrays.java:1515) ~[?:?]
    at java.util.ArrayList.sort(ArrayList.java:1750) ~[?:?]
    at org.springframework.boot.autoconfigure.AutoConfigurationSorter.getInPriorityOrder(AutoConfigurationSorter.java:62) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationGroup.sortAutoConfigurations(AutoConfigurationImportSelector.java:474) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationGroup.selectImports(AutoConfigurationImportSelector.java:459) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGrouping.getImports(ConfigurationClassParser.java:882) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports(ConfigurationClassParser.java:809) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process(ConfigurationClassParser.java:780) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:193) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:331) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564) ~[spring-context-5.3.21.jar:5.3.21]
    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:308) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.boot.SpringApplication$run.call(Unknown Source) ~[?:?]
    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47) ~[groovy-3.0.10.jar:3.0.10]
    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125) ~[groovy-3.0.10.jar:3.0.10]
    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:148) ~[groovy-3.0.10.jar:3.0.10]
    at com.pci.custebalite.Application.main(Application.groovy:46) ~[classes!/:?]
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
    at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
    at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49) ~[custebalite-thin-6.2.0.100-SNAPSHOT.jar:?]
    at org.springframework.boot.loader.Launcher.launch(Launcher.java:108) ~[custebalite-thin-6.2.0.100-SNAPSHOT.jar:?]
    at org.springframework.boot.loader.Launcher.launch(Launcher.java:58) ~[custebalite-thin-6.2.0.100-SNAPSHOT.jar:?]
    at org.springframework.boot.loader.PropertiesLauncher.main(PropertiesLauncher.java:467) ~[custebalite-thin-6.2.0.100-SNAPSHOT.jar:?]
Caused by: java.io.FileNotFoundException: class path resource [.class] cannot be opened because it does not exist
    at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:199) ~[spring-core-5.3.21.jar:5.3.21]
    at org.springframework.core.type.classreading.SimpleMetadataReader.getClassReader(SimpleMetadataReader.java:55) ~[spring-core-5.3.21.jar:5.3.21]
    at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:49) ~[spring-core-5.3.21.jar:5.3.21]
    at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:103) ~[spring-core-5.3.21.jar:5.3.21]
    at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:86) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:73) ~[spring-boot-2.7.1.jar:2.7.1]
    at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:81) ~[spring-core-5.3.21.jar:5.3.21]
    at org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass.getAnnotationMetadata(AutoConfigurationSorter.java:233) ~[spring-boot-autoconfigure-2.7.1.jar:2.7.1]
    ... 38 more
Caused by: java.io.FileNotFoundException: class path resource [.class] cannot be opened because it does not exist",,bocamel,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Jul/22 21:52;bocamel;screenshot-camel.png;https://issues.apache.org/jira/secure/attachment/13046986/screenshot-camel.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jul 25 13:15:42 UTC 2022,,,,,,,,,,,"0|z16zsg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Jul/22 12:12;bocamel;Further investigation showed that this must have been caused by the camel-cxf-rest-starter-3.18.0.jar/META-INF/spring.factories file.  The file contains:
{quote}org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.apache.camel.component.cxf.jaxrs.springboot.CxfRsComponentAutoConfiguration,\
org.apache.camel.component.cxf.jaxrs.springboot.CxfRsComponentConverter,\
{quote}
Either some classes are missing at the end, or there is the extra "",\"".   I tried to remove the "",\"", then I did not get the exception, but I got an error about ""attribute skipFaultLogging is not allowed for rsServer and rsClient"".

 ;;;","25/Jul/22 13:15;davsclaus;Thanks fixed that spring.factories file;;;",,,,,,,,,,,,,,,,,,,,,,,,
AdviceWith fails with Spring XML and several route cross cutting concerns,CAMEL-18278,13472122,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,graben,graben,18/Jul/22 17:05,25/Jul/22 12:49,13/Jul/23 08:34,25/Jul/22 12:31,3.14.4,3.18.0,,,3.18.1,3.19.0,,,,camel-core,,,,,0,,,Using Spring XML DSL to describe routes using several crosscutting concerns like onException and transaction at once fails if tests are trying to modify routes with adviceWith.,,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,,Mon Jul 25 12:37:05 UTC 2022,,,,,,,Patch Available,,,,"0|z16yeo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Jul/22 12:37;graben;[~davsclaus]: Possible to get it also into latest LTS?;;;",,,,,,,,,,,,,,,,,,,,,,,,,
onCompletion tasks don't get executed in a pipeline with several SEDA queues,CAMEL-18275,13471925,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,klease78,Gomoliako,Gomoliako,17/Jul/22 15:05,24/Dec/22 21:46,13/Jul/23 08:34,04/Aug/22 16:09,3.18.0,,,,3.19.0,,,,,came-core,,,,,1,,,"I stumbled upon a problem with not working {{onCompletion}} between the routes that pass a message over SEDA queues.

The route configuration is similar to this simplified version:

 
{code:java}
from(""direct:a"")
  .onCompletion().log(""a - done"").end()
  .to(""seda:b"");

from(""seda:b"")
  .onCompletion().log(""b - done"").end()
  .to(""seda:c"");

from(""seda:c"")
  .onCompletion().log(""c - done"").end()
  .to(""seda:d"");

from(""seda:d"")
  .onCompletion().log(""d - done"").end()
  .to(""mock:end""); {code}
 

With this configuration, I get only {{""d - done""}} logging.

I debugged the execution and noticed that the {{onCompletion}} handler from ""a"", ""b"", and ""c"" don't get executed because they are route-scoped and get attempted to be executed in the scope of the next route.

This happens because they get handed over from the initial exchange to an exchange prepared for the next route. It happens in the {{SedaProducer::addToQueue}} method with {{{}copy{}}}parameter defined as {{{}true{}}}, which makes the {{::prepareCopy}} method being called, which in its turn calls {{ExchangeHelper.createCorrelatedCopy}} with {{handover}} defined as {{{}true{}}}.

It seems to me like a bug, because looking at the routes configuration I'd expect different behavior: all the {{onCompletion}} tasks get executed reporting on routes finalization. Though maybe I'm missing something here, and if this is the case then I would appreciate you guys helping me to find out the missing details.

Here is a [unit test reproducing the problem|https://gist.github.com/Gems/7555776feae619ac71ed8d9dd9d4d33e].",,bvahdat,Gomoliako,jeremyross,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Dec 24 21:46:44 UTC 2022,,,,,,,,,,,"0|z16x6w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Jul/22 08:57;Gomoliako;I'd love to contribute and provide a PR with the solution, and I'd need some input.

In particular, I'd like to learn what was the design idea by making `SedaProducer` handing over competitions to the exchange cope passed to the SEDA route.;;;","19/Jul/22 14:36;klease78;[~Gomoliako] According to the [documentation|https://camel.apache.org/components/3.18.x/seda-component.html] you can change this behavior with the option *waitForTaskToComplete=always.*
This is handled in the [SedaProducer.|https://github.com/apache/camel/blob/bf06cd9533ebd0d3ed5472e4fd6bd6095f317339/components/camel-seda/src/main/java/org/apache/camel/component/seda/SedaProducer.java#L62-L66]

Using this option, all the messages in your onCompletion handlers are logged. But this is probably not what you want. I would agree that the completions should be executed in any case.

I believe the root cause is that the method UnitOfWork.afterRoute() finds no Synchronizations on the UnitOfWork so the onAfterRoute() method is not called for the Synchronizations (i.e. the completions) which were handed over and then removed from the original UoW. This method is what updates the property ExchangePropertyKey.ON_COMPLETION_ROUTE_IDS to remember all the routes which have been visited by the Exchange. If this contains all the route Ids, then the completion methods are all executed even when they are all called when the last route is completed.

I have an idea to address this, and will submit a PR for review by Camel gurus.

 ;;;","19/Jul/22 19:10;Gomoliako;Thank you for your response. I'll try the `waitForTaskToComplete` options and see if any of the corresponding behaviors suit the requirements I got.

I'd appreciate it if you share a link to the PR once you have it.;;;","24/Dec/22 16:27;bvahdat;Hi [~klease78] 

As I was back-porting CAMEL-18835 I noticed that this fix in not back-ported into the {{camel-3.18.x}} or {{camel-3.14.x}} LTS branches, but maybe that was on purpose?;;;","24/Dec/22 21:46;klease78;[~bvahdat] I suspect it was because no one suggested that it should be back-ported. Possibly also because the changes were in several different packages including a change in an interface.;;;",,,,,,,,,,,,,,,,,,,,,
OSGi - camel-file: ClassNotFoundException because of Private-Package,CAMEL-18274,13471871,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,borcsokj,borcsokj,16/Jul/22 10:19,28/Jul/22 08:30,13/Jul/23 08:34,28/Jul/22 08:30,3.18.0,,,,3.18.1,3.19.0,,,,camel-file,,,,,0,,,"Using camel-file component(3.18.0) in OSGi environment (Apache Karaf) throws ClassNotFoundException:
{noformat}
Caused by: java.lang.ClassNotFoundException: org.apache.camel.resume.ResumeAware not found by org.apache.camel.camel-file [46]

        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1591)

        at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:79)

        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1976)

        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)


{noformat}
The reason may be *org.apache.camel.resume* package is in Private-Package section of MANIFEST.MF in camel-file bundle (JAR file contains single configuration file: adapter.properties in this package) so exported package of camel-api bundle is hidden. I found that it has been changed since 3.17.x.",,borcsokj,davsclaus,,,,,,,,,,,,,,,,,,CAMEL-18299,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jul 25 13:04:56 UTC 2022,,,,,,,,,,,"0|z16wuw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Jul/22 13:04;davsclaus;Argh .. osgi bundle plugin generates wrong manifest :(;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[Camel Spring Boot Examples] Infinispan example cannot be built,CAMEL-18271,13471541,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,mcarlett,mcarlett,14/Jul/22 07:37,18/Jul/22 09:42,13/Jul/23 08:34,18/Jul/22 09:42,3.18.0,,,,3.19.0,,,,,camel-infinispan,examples,,,,0,,,"Since dependency _infinispan-core_ has been replaced with _infinispan-commons_ in the _camel-infinispan-common_ component ([commit|https://github.com/apache/camel/commit/f0d22792803a221a016092f606fe49c326f23492]), the artifact _org.apache.camel:camel-infinispan_ doesn't contain anymore the dependency _org.infinispan:infinispan-core_

maven dependency tree for 3.17.0-SNAPSHOT (starting from {_}org.apache.camel.springboot:camel-infinispan-starter{_})
{code:bash}
+- org.apache.camel.springboot:camel-infinispan-starter:jar:3.17.0-SNAPSHOT:compile
|  \- org.apache.camel:camel-infinispan:jar:3.17.0-SNAPSHOT:compile
|     +- org.apache.camel:camel-infinispan-common:jar:3.17.0-SNAPSHOT:compile
|     |  +- org.infinispan:infinispan-core:jar:12.1.11.Final:compile
|     |  |  +- org.jgroups:jgroups:jar:4.2.12.Final:compile
|     |  |  +- com.github.ben-manes.caffeine:caffeine:jar:2.9.3:compile
.....
{code}
maven dependency tree for 3.18.0 (starting from {_}org.apache.camel.springboot:camel-infinispan-starter{_})
{code:bash}
+- org.apache.camel.springboot:camel-infinispan-starter:jar:3.18.0:compile
|  \- org.apache.camel:camel-infinispan:jar:3.18.0:compile
|     +- org.apache.camel:camel-infinispan-common:jar:3.18.0:compile
|     |  +- org.infinispan:infinispan-commons:jar:13.0.10.Final:compile
|     |  |  +- com.github.ben-manes.caffeine:caffeine:jar:2.9.3:compile
.....
{code}
this change causes the [camel-example-spring-boot-infinispan|https://github.com/apache/camel-spring-boot-examples/tree/main/infinispan] compilation failure because of the usage of the class _org.infinispan.configuration.cache.CacheMode_ packaged into _infinispan-core_ dependency ([import|https://github.com/apache/camel-spring-boot-examples/blob/main/infinispan/src/main/java/org/apache/camel/example/springboot/infinispan/Application.java#L31])",,Federico Mariani,jamesnetherton,mcarlett,,,,,,,,,,,,,,CAMEL-18269,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jul 18 09:42:19 UTC 2022,,,,,,,,,,,"0|z16uts:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Jul/22 15:22;Federico Mariani;fyi [~jamesnetherton] [~vkasala] ;;;","18/Jul/22 09:42;jamesnetherton;Not sure we really want to be supporting embedded caches by default. The Camel component is just a client.

For now I've modified the example so that the cache configuration is done in the server side infinispan.xml.

https://github.com/apache/camel-spring-boot-examples/commit/473d2e47e8eea2f74702902022986cded8c9173e

If it turns out folks really want to work with embedded caches then they can add infinispan-core to their apps. Or we can reconsider adding it back as a direct dependency of the component.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"IMAP skipFailedMessage=true, but route blocked if mail is moved while download",CAMEL-18270,13471540,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fibyflo,fibyflo,14/Jul/22 07:35,29/Jul/22 08:32,13/Jul/23 08:34,29/Jul/22 08:07,3.18.0,,,,3.14.5,3.18.1,3.19.0,,,camel-mail,,,,,0,,," 

Our imap mail route on the production system gets blocked when someone or an other systems moves / deletes an email from the inbox, while the camel mail route is loading the mail. As we do not have full control on the mailboxes we enabled skipFailedMessage but the issue remains.

The following exception is written is the log, but the mail consumer is blocked. The issue can only be resolved by a restart of the service.
{code:java}
2022-07-14 09:17:28.714  WARN 5465 --- [fice365.com:993] o.a.c.i.engine.DefaultReactiveExecutor   : Error executing reactive work due to Error accessing headers due to: Cannot load header. This exception is ignored.
org.apache.camel.RuntimeCamelException: Error accessing headers due to: Cannot load header
    at org.apache.camel.component.mail.MailMessage.populateInitialHeaders(MailMessage.java:107) ~[camel-mail-3.18.0.jar:3.18.0]
    at org.apache.camel.support.DefaultMessage.createHeaders(DefaultMessage.java:331) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.support.DefaultMessage.hasHeaders(DefaultMessage.java:305) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.support.AbstractExchange.copy(AbstractExchange.java:140) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.support.DefaultExchange.copy(DefaultExchange.java:27) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.support.ExchangeHelper.createCopy(ExchangeHelper.java:322) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.defensiveCopyExchangeIfNeeded(RedeliveryErrorHandler.java:304) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.prepare(RedeliveryErrorHandler.java:680) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.PrototypeTaskFactory.acquire(PrototypeTaskFactory.java:29) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:210) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:399) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.Pipeline$PipelineTask.run(Pipeline.java:109) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:189) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:61) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:184) ~[camel-core-processor-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:399) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) ~[camel-base-engine-3.18.0.jar:3.18.0]
    at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.component.mail.MailConsumer.processExchange(MailConsumer.java:451) ~[camel-mail-3.18.0.jar:3.18.0]
    at org.apache.camel.component.mail.MailConsumer.processBatch(MailConsumer.java:260) ~[camel-mail-3.18.0.jar:3.18.0]
    at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:165) ~[camel-mail-3.18.0.jar:3.18.0]
    at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202) ~[camel-support-3.18.0.jar:3.18.0]
    at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116) ~[camel-support-3.18.0.jar:3.18.0]
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
    at java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305) ~[na:na]
    at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java) ~[na:na]
    at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
    at java.base/java.lang.Thread.run(Thread.java:829) ~[na:na]
Caused by: javax.mail.MessagingException: Cannot load header
    at com.sun.mail.imap.IMAPMessage.loadHeaders(IMAPMessage.java:1583) ~[jakarta.mail-1.6.5.jar:1.6.5]
    at com.sun.mail.imap.IMAPMessage.getAllHeaders(IMAPMessage.java:992) ~[jakarta.mail-1.6.5.jar:1.6.5]
    at org.apache.camel.component.mail.MailBinding.extractHeadersFromMail(MailBinding.java:649) ~[camel-mail-3.18.0.jar:3.18.0]
    at org.apache.camel.component.mail.MailMessage.populateInitialHeaders(MailMessage.java:104) ~[camel-mail-3.18.0.jar:3.18.0]
    ... 29 common frames omitted
{code}
 

I've reproduced the issue with a break point on MailConsumer.processExchange. When the process hits this break point, I've move the mail and the route was blocked.

I think the route blocks on DefaultAsyncProcessorAwaitManager.await Line 107, but I'm not sure about it.

The expected behavior for me with skipFailedMessage=true, would be an ERROR in the log and processing of the next mail.

Is this a bug or is there a workaround for this issue?

Maybe this is related with CAMEL-16829

 ",,davsclaus,fibyflo,,,,,,,,,,,,,,,,,,CAMEL-18324,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jul 29 08:07:55 UTC 2022,,,,,,,,,,,"0|z16utk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Jul/22 05:47;fibyflo;There was an other incident with same blocking outcome, the route was blocked and no new mails were processed . Camel 3.4 is also affected:

{{2022-07-18 16:21:24.762  WARN 1 --- [Camel (PROD) thread #1 - imaps://outlook.office365.com:993] o.a.c.i.engine.DefaultReactiveExecutor   : Error executing reactive work due to Error accessing headers due to: * BYE Jakarta Mail Exception: java.net.SocketTimeoutE}}
{{{}xception: Read timed out. This exception is ignored.{}}}{{{}org.apache.camel.RuntimeCamelException: Error accessing headers due to: * BYE Jakarta Mail Exception: java.net.SocketTimeoutException: Read timed out{}}}
{{        at org.apache.camel.component.mail.MailMessage.populateInitialHeaders(MailMessage.java:107) ~[camel-mail-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.DefaultMessage.createHeaders(DefaultMessage.java:310) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.DefaultMessage.hasHeaders(DefaultMessage.java:282) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.DefaultExchange.copy(DefaultExchange.java:129) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.ExchangeHelper.createCopy(ExchangeHelper.java:330) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.defensiveCopyExchangeIfNeeded(RedeliveryErrorHandler.java:266) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.<init>(RedeliveryErrorHandler.java:590) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:171) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.Pipeline$PipelineTask.run(Pipeline.java:90) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) ~[camel-base-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.component.mail.MailConsumer.processExchange(MailConsumer.java:431) ~[camel-mail-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.component.mail.MailConsumer.processBatch(MailConsumer.java:248) ~[camel-mail-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:161) ~[camel-mail-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106) ~[camel-support-3.4.6.jar!/:3.4.6]}}
{{        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]}}
{{        at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]}}
{{        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]}}
{{        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]}}
{{        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]}}
{{        at java.base/java.lang.Thread.run(Thread.java:829) ~[na:na]}}
{{Caused by: javax.mail.FolderClosedException: * BYE Jakarta Mail Exception: java.net.SocketTimeoutException: Read timed out}}
{{        at com.sun.mail.imap.IMAPMessage.loadHeaders(IMAPMessage.java:1575) ~[jakarta.mail-1.6.5.jar!/:1.6.5]}}
{{        at com.sun.mail.imap.IMAPMessage.getAllHeaders(IMAPMessage.java:992) ~[jakarta.mail-1.6.5.jar!/:1.6.5]}}
{{        at org.apache.camel.component.mail.MailBinding.extractHeadersFromMail(MailBinding.java:610) ~[camel-mail-3.4.6.jar!/:3.4.6]}}
{{        at org.apache.camel.component.mail.MailMessage.populateInitialHeaders(MailMessage.java:104) ~[camel-mail-3.4.6.jar!/:3.4.6]}}
{{        ... 26 common frames omitted}};;;","20/Jul/22 14:18;fibyflo;Hi [~davsclaus], 

I'm searching the camel code for possible workarounds for this issue and found https://issues.apache.org/jira/browse/CAMEL-16938 you worked on. So maybe you can help with my reported issue?

As far as I understand it by now, each mail is processed with a thread and if the RuntimeCamelException occurs, the route is blocked by waiting for the thread and does not process any new mails.

The issue seams located in DefaultReactiveExecutor.scheduleMain by catching the RuntimeCamelException without cleaning up the thread. Therefore this could also affect other camel components, not just mail.

My issue could be created by wrong mailserver handling or server side issues, but the blocking state of the route can't be right.

 ;;;","21/Jul/22 12:59;fibyflo;I was able to get the route working, with an small but not clean workaround, by rethrowing t:

{{try {}}
{{if (stats) {}}
{{executor.pendingTasks.decrement();}}
{{}}}
{{if (LOG.isTraceEnabled()) {}}
{{LOG.trace(""Worker #{} running: {}"", number, polled);}}
{{}}}
{{polled.run();}}
{{} catch (Throwable t) {}}
{{LOG.error(""Error executing reactive work due to {}. This exception is ignored."",}}
{{t.getMessage(), t);}}
{{throw t;}}
{{}}};;;","28/Jul/22 16:01;davsclaus;Thanks for reporting and the detailed analysis.

;;;","29/Jul/22 08:07;davsclaus;Thanks this will be fixed by the linked ticket;;;",,,,,,,,,,,,,,,,,,,,,
Can not use bean uri in xslt component,CAMEL-18266,13471155,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,12/Jul/22 08:11,12/Jul/22 12:21,13/Jul/23 08:34,12/Jul/22 12:21,3.18.0,,,,3.18.1,3.19.0,,,,camel-core,camel-xslt,,,,0,,,"It looks like there is a missing  bean schema in ResourceHelper.hasSchema(String uri). And 

XsltUriResolver falls back to use classpath schema.",,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-12 08:11:44.0,,,,,,,,,,,"0|z16sg8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Templated route exception handling not working,CAMEL-18262,13470766,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jvh,jvh,09/Jul/22 01:11,31/Jul/22 12:45,13/Jul/23 08:34,25/Jul/22 16:11,3.18.0,,,,3.18.1,3.19.0,,,,came-core,,,,,0,,,"Using Route Templates as described here in the Camel docs: [route-template, |https://camel.apache.org/manual/route-template.html]I cannot get any exception handling to work unless I define it within the class that is constructing the template itself.
Specifically,  trying to use global exception handling in the class that calls TemplatedRouteBuilder.builder() to build a route from my template. Expected exceptions are not caught.
And there is no .onException() method implementation to customize the handling that could be called in the list of fluent methods starting with TemplatedRouteBuilder.build().

I have already posted this, with my example code, in the Camel mailing list. Please have a look at the discussion here: [mail-archive|[https://lists.apache.org/thread/26kp2tpfbgj9mxpfdr106f36xyj51d7g]]

This is the hi-level description from that mail article:
{code:java}
Hi-level overview:
- 2 projects: 1 camel template base jar and 1 springboot camel application (that builds its route using the template from the other project).
- the base jar builds a route template
- the application jar builds a route using the template from the base jar
- the desire here is to do some extra customization in the application (at templated-route creation time) to setup extra exception handling that is not included in the base template.
- I have also tried to define global level exception handling using onException() in my application project's configure() method. But this is not catching anything either.
 {code}
There is a overview of the code in the mail article as well. But I also have a simplified single spring-boot test project with junit that I can provide if needed.","* Camel 3.18.0
 * Spring-boot 2.7.1
 * OpenJDK 11
 * Maven 3.5.0",davsclaus,jvh,rhuanrcoha,,,,,,,,,,,,,,,,,,,CAMEL-18328,,,,,,,,,,,,,"09/Jul/22 13:26;jvh;camel-template-so.7z;https://issues.apache.org/jira/secure/attachment/13046500/camel-template-so.7z","10/Jul/22 03:05;rhuanrcoha;camel-template-so.zip;https://issues.apache.org/jira/secure/attachment/13046502/camel-template-so.zip",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jul 25 16:11:19 UTC 2022,,,,,,,,,,,"0|z16q28:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Jul/22 03:45;rhuanrcoha;Hi,

Could you provide the sample reproducer you said? 

 

If you add the Custom Error Handler like below, is it working? Reading the scenario looks like the auto-discovery from spring-boot did not find the MyCustomErrorHandler. 

 
{code:java}
context.addRoutes(new MyCustomErrorHandler());{code};;;","09/Jul/22 13:38;jvh;Hi [~rhuanrcoha],
I've added a 7zip file with the sample code. This is a simplified version (single maven project) of what I described in the mail-archive article (two maven projects).
You can duplicate the problem in 2 different ways:
 * Run the RunRouteTest junit. This will mock out the route's file component and inject a test msg to show that the global exception handling is not invoked
 * Or just run the project via ""mvn spring-boot:run"" and copy a testfile into the input_directory in the project base directory. This will trigger the route to start. The testfile can have anything in it. A single line of text will suffice.

In either scenario, you'll see that the default rollback exception handling kicks in, and my handled(true) setup from L31, and the log on L32 are never executed from the class: CreateRoute.

Note: the reason for the exception is that the code is trying to send a REST POST to a REST API on port 9000 running on your localhost. (See the 2nd template parameter on L38 in the CreateRoute class).

I will also try out your suggestion for the custom error handler and let you know how that goes.;;;","09/Jul/22 14:27;jvh;Hi [~rhuanrcoha],
I've just tried your suggestion as shown below and it is also NOT working.
But if this is not exactly what you wanted to try - let me know.
Thanks,
{code:java}
   @Override
   public void configure() throws Exception {
      camelContext.addRoutes(new MyCustomErrorHandler());

      final String routeId = TemplatedRouteBuilder.builder(camelContext, ""route-template-1"")
            .routeId(""my-test-file-route"")
            .parameter(""input-directory-param-id"", ""input-directory"")
            .parameter(""rest-endpoint-id"", ""http://localhost:9000/TestSink/any-string"")
            .parameter(""route-id-param-id"", ""my-internal-route-id"")
            .add();
      log.info(""Route {} created from template"", routeId);
   }{code}
{code:java}
public class MyCustomErrorHandler implements RoutesBuilder {
   @Override
   public void addRoutesToCamelContext(final CamelContext context) throws Exception {
      context.addRoutes(new RouteBuilder() {
          @Override
          public void configure() throws Exception {
             onException(ConnectException.class)
             .handled(true)
             .log(LoggingLevel.ERROR, log, ""--> Exception: ${exception.message}, Delivery was NOT rolled back"")
             .end();
          }
      });
   }
   @Override
   public Set<String> updateRoutesToCamelContext(final CamelContext context) throws Exception {
       return null;
    }
}
{code};;;","09/Jul/22 17:40;rhuanrcoha;Hi,

The template does not use the routes configured inside the RouterBuilder. A way to configure it is by creating the RouteConfigurationBuilder as below.

 
{code:java}
@Component
public class MyCustomErrorHandler extends RouteConfigurationBuilder {
   @Override
   public void configuration() throws Exception {
       routeConfiguration(""my-error-handler"").
       onException(ConnectException.class)
      .handled(true)
      .log(LoggingLevel.ERROR, log, ""--> Exception: ${exception.message}, Delivery was NOT rolled back"");

     }
}{code}
Thus you configure it inside the template
{code:java}
routeTemplate(""route-template-1"")
.templateParameter(""input-directory-param-id"")
.templateParameter(""rest-endpoint-id"")
.templateParameter(""route-id-param-id"")

.from(""file:{{input-directory-param-id}}"")
.routeConfigurationId(""my-error-handler"")//He is the configuration. If needed you can use the template parameter.
.log(LoggingLevel.INFO, log, ""--> Read file: ${header.CamelFileName}"")
.to(""{{rest-endpoint-id}}"")
.id(""{{route-id-param-id}}"")
.log(LoggingLevel.INFO, log, ""--> File: ${header.CamelFileName} sent to rest-endpoint: {{rest-endpoint-id}}"");{code}
However, I have seen it has a bug and the template is not using the RouteConfigurationBuilder. I have found the root cause and I`ll send a PR soon to solve that. ;;;","10/Jul/22 03:05;rhuanrcoha;Hi,

I sent a PR to solve this issue. I`m sharing the sample updated with the RouteConfigurationBuilder. As soon as the PR is merged you can test.

 

[^camel-template-so.zip];;;","11/Jul/22 14:12;jvh;Thanks for clarifying the error handler implementation, and also fixing the bug :)

I've re-coded my custom error handler to follow your pattern, and have also used a template parameter to pass in the route configuration id for the error handler.

So, yes, as soon as the PR is merged, I can test this out.

Or let me know if there is a SNAPSHOT build somewhere that I could test with, rather than waiting for the release.;;;","16/Jul/22 12:51;rhuanrcoha;Hi [~jvh],

To test now the updates you can build this branch [https://github.com/rhuan080/camel/tree/CAMEL-18262.] The PR was approved and will be merged soon.;;;","25/Jul/22 16:11;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,
Memory Leak with MDCUnitOfWork,CAMEL-18255,13469690,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,rambichler,rambichler,01/Jul/22 15:51,29/Oct/22 06:43,13/Jul/23 08:34,18/Jul/22 08:18,3.14.1,3.17.0,,,3.14.6,3.18.4,3.19.0,,,camel-core,,,,,0,,,"We realized a sever memory leak in a standard route:

 

I reproduced it and made a simple MemoryAllocation Check.

Just for curiosity i made another test with:  ({color:#00875a}.errorhandler(no errorhandler){color}) and the memory leak does not occure.

 

Sample route to reproduce:

 

from(""scheduler:testScheduler?repeatCount=1"")

                .log(""Starting route test-route"")

                .process(exchange -> {

                    Iterator<String> infiniteIter = new Iterator<>() {

                        private int integer = 0;

 

                        @Override public boolean hasNext()

{                             return true;                         }

                        @Override public String next()

{                             return String.valueOf(integer++);                         }

                    };

                    exchange.getMessage().setBody(infiniteIter);

                })

                .split().body().streaming()

                    .log(""inside split: ${body}"")

                .end()

                .log(""test-route never finishes"");",,davsclaus,klease78,rambichler,rastislav.papp,,,,,,,,,,,,,,,,,,,CAMEL-16034,CAMEL-17153,,,,,,,,,,,"01/Jul/22 17:30;davsclaus;Screenshot 2022-07-01 at 19.30.44.png;https://issues.apache.org/jira/secure/attachment/13046165/Screenshot+2022-07-01+at+19.30.44.png","01/Jul/22 19:24;rambichler;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13046167/screenshot-1.png",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Oct 26 09:42:02 UTC 2022,,,,,,,,,,,"0|z16jig:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Jul/22 17:08;davsclaus;Can you maybe put together this as an unit test or something that is ready to try so we can more quickly jump on this;;;","01/Jul/22 17:30;davsclaus;I cannot reproduce any leak with your sample route above. The objects are allocated but can be GC so you can go down to < 30mb when GC kicks in.;;;","01/Jul/22 17:38;davsclaus;Running as unit test then there is some additonal overhead with the NotifyBuilder that comes out of the box with camel-core tests, but these objects are not leaking.;;;","01/Jul/22 19:20;rambichler;I have added a example project in github: [https://github.com/michael-salzburg/splitMemoryTest.git]

The issue is the mdc logging: 

{color:#FF0000}camel.springboot.use-mdc-logging=true{color}

Without: Memory Consumption around 100MB. with mdc-logging=true Consumption goes up till END. GC does not work.;;;","01/Jul/22 20:22;davsclaus;Thanks for spotting its MDC - MDC is low priority and candidate for deprecation and removal in the future.;;;","03/Jul/22 18:25;rambichler;Hi [~davsclaus] 

The issue is quite independent of MDC.

See my example in [https://github.com/michael-salzburg/splitMemoryTest.git]

 

I spend some time to analyse it further:

 

If you override the method of the DefaultUnitOfWork or MDCUnitOfWork and return {color:#de350b}true{color}: Then the Memory Leak occurs. 

@Override
public boolean isBeforeAfterProcess() {
{color:#de350b}return true; //like its set e.g. in MDCUnitOfWork{color}
}

 

The current MDCUnitOfWork returns true in this case.

But i wasn't able to analyse the impact in deep of this change, yet.

 

Btw. You mentioned MDC is low prio/candidate for dprecation: We use MDC logging of especially the breadcrumbId heavily in our system. That would have major impact in our environment.;;;","06/Jul/22 13:49;klease78;[~rambichler] The root of the problem seems to be in these lines: [CamelInternalProcessor.java#L405-L411|https://github.com/apache/camel/blob/8f94758145dd26e52b335da6765c46a9d0b95482/core/camel-base-engine/src/main/java/org/apache/camel/impl/engine/CamelInternalProcessor.java#L405-L411]

This puts a lambda to run the afterProcess method on the queue of the ReactiveExecutor. Each Exchange produced by the splitter is wrapped in a DefaultErrorHandler but there is already a DefaultErrorHandler wrapping the processor(s) following the split(). The ErrorHandler queues a SimpleTask using scheduleMain which backs up any other elements on the queue to a backup queue. The sequence is a bit difficult to follow but the end result is that the backed-up queue containing the lambda to run the MDCUnitOfWork.afterProcess() method is not run when the processing of the Exchange finishes but only when all Exchanges produced by the split() have been processed. Then they are all run, but in the reverse order in which they where added to the scheduler! This causes the memory leak.

The use of the scheduler to run afterProcess() was added back in CAMEL-17153 to resolve a problem caused by removing it in CAMEL-16034 (which is exactly the problem you are experiencing.)

I think it might work to invoke the uow.afterProcess() in the async callback itself, since that task is run at the correct point in the process, so I'm going to test this approach.;;;","06/Jul/22 14:12;rambichler;Great [~klease78] for this analysis. I got stucked in debugging at exactly your position.;;;","06/Jul/22 15:52;klease78;Unfortunately my idea fixes your issue but causes test failures, so I need to search for a better solution.;;;","26/Oct/22 09:42;rastislav.papp;[~davsclaus], [~klease78], could we get a fix for 3.14.x LTS?;;;",,,,,,,,,,,,,,,,
camel-kafka: idempotent repository may report incorrect number of messages,CAMEL-18253,13469588,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,orpiske,orpiske,01/Jul/22 07:55,01/Jul/22 11:32,13/Jul/23 08:34,01/Jul/22 11:32,3.14.4,3.17.0,,,3.14.5,3.18.0,,,,camel-kafka,,,,,0,,,"Any code that calls the (potentially) safe contains method on the Kafka idempotent repository may cause it to incorrectly report an additional number of duplicate messages because it uses incrementAndGet on the counter:

 

https://github.com/apache/camel/blob/camel-3.17.x/components/camel-kafka/src/main/java/org/apache/camel/processor/idempotent/kafka/KafkaIdempotentRepository.java#L375-L382",,davsclaus,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jul 01 10:41:23 UTC 2022,,,,,,,,,,,"0|z16ivs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Jul/22 10:40;davsclaus;Can you backport to 3.14.x branch;;;","01/Jul/22 10:41;orpiske;Yes I can. I am working on it.;;;",,,,,,,,,,,,,,,,,,,,,,,,
BridgeExceptionHandlerToErrorHandler with OnCompletion prevents processing Exception,CAMEL-18252,13469570,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,graben,graben,graben,01/Jul/22 06:32,01/Jul/22 16:57,13/Jul/23 08:34,01/Jul/22 16:57,3.17.0,,,,3.18.0,,,,,came-core,,,,,0,,,"Using BridgeExceptionHandlerToErrorHandler together with OnCompletion prevents to process the Exception because it temporarily gets removed from exchange and there is no other reference available. JavaDoc of OnCompletionProcessor mentions
{noformat}
the caused exception is stored as a property (Exchange.EXCEPTION_CAUGHT) on the exchange
{noformat}
Might be a possible solution to be set in BridgeExceptionHandlerToErrorHandler 

Small test case to verify, see log of missing Exception. (logging null value!)
",,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jul/22 06:31;graben;OnCompletionBridgeErrorHandler.java;https://issues.apache.org/jira/secure/attachment/13046130/OnCompletionBridgeErrorHandler.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-07-01 06:32:44.0,,,,,,,,,,,"0|z16irs:",9223372036854775807,Unit Test Broken,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When a Call to Salesforce timeouts then we have Exchange.HTTP_RESPONSE_CODE Exchange Header set as ""0""",CAMEL-18250,13469453,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,30/Jun/22 11:52,01/Jul/22 10:41,13/Jul/23 08:34,01/Jul/22 09:00,3.14.4,3.17.0,,,3.14.5,3.18.0,,,,camel-salesforce,,,,,0,,,"As because then there is an implicit 0 (as int) to ""0"" (as string) conversion happening.",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-06-30 11:52:03.0,,,,,,,,,,,"0|z16i1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Invalid ThreadName pattern,CAMEL-18232,13468520,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Jun/22 07:58,29/Jul/22 07:44,13/Jul/23 08:34,28/Jun/22 07:09,3.15.0,,,,3.18.0,,,,,camel-core,,,,,0,,,"On some JDK11 then it may be that the string replace does not seem to work as StringHelper.replaceAll we used in the past, that was removed in this commit
https://github.com/apache/camel/commit/8d900aba707710e60de40f4d5b60c2c2ddc270b3



Then you can see this kind of errors
{code}
│ 2022-06-27 07:56:40.833  INFO 1 --- [           main] e.camel.impl.engine.AbstractCamelContext : Apache Camel 3.18.0-SNAPSHOT (camel-1) shutdown in 111ms (uptime:282ms JVM-uptime:6s428ms)        │
│ Exception in thread ""main"" java.lang.IllegalArgumentException: Pattern is invalid: Camel (camel-1) thread ##counter# - #name# in resolved thread name: Camel (camel-1) thread ##counter# - timer:/ │
│     at org.apache.camel.util.concurrent.ThreadHelper.resolveThreadName(ThreadHelper.java:65)                                                                                                       │
│     at org.apache.camel.impl.engine.BaseExecutorServiceManager.resolveThreadName(BaseExecutorServiceManager.java:159)                                                                              │
│     at org.apache.camel.component.timer.TimerComponent.getTimer(TimerComponent.java:57)                                                                                                            │
│     at org.apache.camel.component.timer.TimerEndpoint.getTimer(TimerEndpoint.java:247)                                                                                                             │
│     at org.apache.camel.component.timer.TimerConsumer.onCamelContextStarted(TimerConsumer.java:149)                                                                                                │
│     at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:223)                                                                     │
│     at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:147)                                                                        │
│     at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3361)                                                                                              │
│     at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:3032)                                                                                            │
│     at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2987)                                                                                                   │
│     at org.apache.camel.support.service.BaseService.start(BaseService.java:119)                                                                                                                    │
│     at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2648)                                                                                                     │
│     at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)                                                                                                               │
│     at org.apache.camel.main.Main.doStart(Main.java:139)                                                                                                                                           │
│     at org.apache.camel.support.service.BaseService.start(BaseService.java:119)                                                                                                                    │
│     at org.apache.camel.main.MainSupport.run(MainSupport.java:89)                                                                                                                                  │
│     at org.apache.camel.main.MainCommandLineSupport.run(MainCommandLineSupport.java:221)                                                                                                           │
│     at com.foo.acme.CamelApplication.main(CamelApplication.java:9)
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jun 28 07:09:53 UTC 2022,,,,,,,,,,,"0|z16dkg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Jun/22 08:11;davsclaus; java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11.0.15+10, user.name=root, path.separator=:, os.version=5.10.47-linuxkit, java.runtime.name=OpenJDK Runtime Environment, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, java.vendor.version=Temurin-11.0.15+10, java.vendor.url.bug=https://github.com/adoptium/adoptium-support/issues, java.io.tmpdir=/tmp, java.version=11.0.15, user.dir=/, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.print.PSPrinterJob, sun.os.patch.level=unknown, java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib, java.vm.info=mixed mode, java.vendor=Eclipse Adoptium, java.vm.version=11.0.15+10, sun.io.unicode.encoding=UnicodeLittle, java.class.version=55.0};;;","27/Jun/22 11:47;davsclaus;Ah it may be that the runtime (amd64) is on different OS arch than the build (arm64);;;","27/Jun/22 11:55;davsclaus;Yes it was using jib to build then you can define the os arch for M1
{code}
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <to>
                        <image>com.foo/acme</image>
                    </to>
                    <from>
                        <platforms>
                            <platform>
                                <architecture>arm64</architecture>
                                <os>linux</os>
                            </platform>
                        </platforms>
                    </from>
                </configuration>
            </plugin>
{code}
;;;","27/Jun/22 17:16;davsclaus;Since it was a OS arch problem we could consider going back but keep a few improvements. However the committed code now works in both situations which make Camel work better overall ;);;;","28/Jun/22 07:09;davsclaus;Okay we are back to as before but are using replaceFirst that is fast.;;;",,,,,,,,,,,,,,,,,,,,,
camel-jira: components field is not updated,CAMEL-18218,13458662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,claudio4j,claudio4j,claudio4j,22/Jun/22 23:05,23/Jun/22 15:55,13/Jul/23 08:34,23/Jun/22 15:55,,,,,3.14.4,3.18.0,,,,camel-jira,,,,,0,,,"The ""components"" field of the issue is not set when adding or updating an issue.",,claudio4j,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jun 23 15:55:28 UTC 2022,,,,,,,,,,,"0|z14oq0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Jun/22 15:55;davsclaus;Thanks for reporting and the PRs;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Pooled exchanges in batch consumer may use an exchange concurrently,CAMEL-18210,13451344,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Jun/22 14:00,20/Jun/22 16:35,13/Jul/23 08:34,20/Jun/22 16:34,3.14.3,3.17.0,,,3.14.4,3.18.0,,,,camel-core,,,,,0,,,"A pooled exchange may mistakenly be added twice back into the pool, and then reused concurrently if a batch consumer have 2+ exchanges in a batch to process.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18187,CAMEL-18185,,,,"20/Jun/22 14:00;davsclaus;Screenshot 2022-06-20 at 10.08.51.png;https://issues.apache.org/jira/secure/attachment/13045314/Screenshot+2022-06-20+at+10.08.51.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-06-20 14:00:02.0,,,,,,,,,,,"0|z13fk8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mongodb-gridfs - initial delay is not configured correctly,CAMEL-18202,13450568,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,orpiske,orpiske,17/Jun/22 08:43,19/Jun/22 12:52,13/Jul/23 08:34,19/Jun/22 10:06,3.14.3,3.17.0,,,3.14.4,3.18.0,,,,camel-mongodb-gridfs,,,,,0,,,"The code seems to be incorrectly setting the initial delay:

 

[https://github.com/apache/camel/blob/camel-3.17.x/components/camel-mongodb-gridfs/src/main/java/org/apache/camel/component/mongodb/gridfs/GridFsEndpoint.java#L231-L236]

 

It is always set to the value of delay.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jun 19 10:06:36 UTC 2022,,,,,,,,,,,"0|z13bkg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Jun/22 10:06;orpiske;Fixed with the linked PRs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
slack: inconsistent message payload when batch ends,CAMEL-18187,13449595,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,11/Jun/22 08:52,20/Jun/22 16:34,13/Jul/23 08:34,20/Jun/22 16:34,3.14.3,,,,3.14.4,3.18.0,,,,camel-slack,,,,,0,,,"When polling multiple events from slack, there is an inconsistent of the payload generated for the exchange that complete the batch:

- This is an exchange part of the batch (CamelBatchComplete=false) and as it can be observed, the bodyType is com.slack.api.model.Message

{code}
10:47:28.470 INFO  [raw] (Camel (camel-1) thread #1 - slack://demo) Exchange[
  Id: B2F6BECBBE1B6C2-0000000000000001
  ExchangePattern: InOnly
  Properties: {camel.route.route1.B2F6BECBBE1B6C2-0000000000000001=io.smallrye.metrics.app.TimerImpl$Context@1bcda3c3, CamelBatchComplete=false, CamelBatchIndex=0, CamelBatchSize=2, CamelToEndpoint=log://raw?multiline=true&showAll=true, eventTimer:camel.exchange=io.smallrye.metrics.app.TimerImpl@7d791b4c, eventTimerContext:camel.exchange=io.smallrye.metrics.app.TimerImpl$Context@53f8d078}
  Headers: {}
  BodyType: com.slack.api.model.Message
  Body: Message(...)
]
{code}

- This is the exchange that closes the batch (CamelBatchComplete=true) and as it can be observed, the bodyType is byte[]:

{code}
10:47:28.477 INFO  [raw] (Camel (camel-1) thread #1 - slack://demo) Exchange[
  Id: B2F6BECBBE1B6C2-0000000000000001
  ExchangePattern: InOnly
  Properties: {camel.route.route1.B2F6BECBBE1B6C2-0000000000000001=io.smallrye.metrics.app.TimerImpl$Context@328e8fdf, CamelBatchComplete=true, CamelBatchIndex=1, CamelBatchSize=2, CamelToEndpoint=log://raw?multiline=true&showAll=true, eventTimer:camel.exchange=io.smallrye.metrics.app.TimerImpl@7d791b4c, eventTimerContext:camel.exchange=io.smallrye.metrics.app.TimerImpl$Context@53f8d078}
  Headers: {Content-Type=application/json, org.apache.kafka.clients.producer.RecordMetadata=[]}
  BodyType: byte[]
  Body: {""type"":""message"",""subtype"":""bot_message"", ... }
]

{code}",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18210,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jun 20 12:06:46 UTC 2022,,,,,,,,,,,"0|z135ko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Jun/22 09:15;lb;It seems to be related to exchange pooling as if *camel.main.exchange-factory* is set to *prototype*, then the problem disappear.;;;","20/Jun/22 07:48;davsclaus;Yeah there is something odd, I see an empty body with pooled exchanges

{code}
09:46:53.487 [Camel (camel-1) thread #3 - slack://test] INFO  sink - Exchange[Id: 3627EB01F7517B0-0000000000000003, ExchangePattern: InOnly, Properties: {CamelBatchComplete=false, CamelBatchIndex=0, CamelBatchSize=3, CamelToEndpoint=log://sink?showAll=true&showAllProperties=true}, Headers: {}, BodyType: com.slack.api.model.Message, Body: Message(type=message, subtype=null, team=T06MULGG5, channel=null, user=U06MWFG8N, username=null, text=2, blocks=[RichTextBlock(type=rich_text, elements=[RichTextSectionElement(type=rich_text_section, elements=[RichTextSectionElement.Text(type=text, text=2, style=null)])], blockId=O9Zln)], attachments=null, ts=1655711206.761289, threadTs=null, intro=false, starred=false, wibblr=false, pinnedTo=null, reactions=null, botId=null, botLink=null, displayAsBot=false, botProfile=null, icons=null, file=null, files=null, upload=false, parentUserId=null, inviter=null, clientMsgId=706da455-2a1d-4612-bf24-aeed3b3e1717, comment=null, topic=null, purpose=null, edited=null, unfurlLinks=false, unfurlMedia=false, threadBroadcast=false, locked=false, replies=null, replyCount=null, replyUsers=null, replyUsersCount=null, latestReply=null, subscribed=false, xFiles=null, hidden=false, lastRead=null, root=null, itemType=null, item=null)]
09:46:53.487 [Camel (camel-1) thread #3 - slack://test] INFO  sink - Exchange[Id: 3627EB01F7517B0-0000000000000004, ExchangePattern: InOnly, Properties: {CamelBatchComplete=false, CamelBatchIndex=1, CamelBatchSize=3, CamelToEndpoint=log://sink?showAll=true&showAllProperties=true}, Headers: {}, BodyType: null, Body: [Body is null]]
09:46:53.488 [Camel (camel-1) thread #3 - slack://test] INFO  sink - Exchange[Id: 3627EB01F7517B0-0000000000000005, ExchangePattern: InOnly, Properties: {CamelBatchComplete=true, CamelBatchIndex=2, CamelBatchSize=3, CamelToEndpoint=log://sink?showAll=true&showAllProperties=true}, Headers: {}, BodyType: com.slack.api.model.Message, Body: Message(type=message, subtype=null, team=T06MULGG5, channel=null, user=U06MWFG8N, username=null, text=3, blocks=[RichTextBlock(type=rich_text, elements=[RichTextSectionElement(type=rich_text_section, elements=[RichTextSectionElement.Text(type=text, text=3, style=null)])], blockId=uHEV)], attachments=null, ts=1655711208.197219, threadTs=null, intro=false, starred=false, wibblr=false, pinnedTo=null, reactions=null, botId=null, botLink=null, displayAsBot=false, botProfile=null, icons=null, file=null, files=null, upload=false, parentUserId=null, inviter=null, clientMsgId=1cdf4d24-94eb-4134-acc8-ea996d24b766, comment=null, topic=null, purpose=null, edited=null, unfurlLinks=false, unfurlMedia=false, threadBroadcast=false, locked=false, replies=null, replyCount=null, replyUsers=null, replyUsersCount=null, latestReply=null, subscribed=false, xFiles=null, hidden=false, lastRead=null, root=null, itemType=null, item=null)]
{code};;;","20/Jun/22 08:32;davsclaus;Okay so its some camel components in pooled mode that can trigger an exchange to be released twice, leading to the exchange being inserted into pool twice and hence its concurrently being used, and hence why we see this problem.

This is only for components that uses auto release = true;;;","20/Jun/22 12:06;davsclaus;Okay have a fix but it needs a bit better depending on kind of consumer (general vs batch);;;",,,,,,,,,,,,,,,,,,,,,,
slack: npe when processing batch messages,CAMEL-18185,13449570,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,10/Jun/22 23:10,20/Jun/22 16:35,13/Jul/23 08:34,20/Jun/22 16:35,,,,,3.14.4,3.18.0,,,,camel-core,camel-slack,,,,0,,,"Running a camel component to read from slack lead to the following error:

{code}
Exchange[854F138824ACA43-0000000000000003]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: null to the required type: java.io.InputStream with value null]
	at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:125)
	at org.apache.camel.support.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:58)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:812)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:720)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:193)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:64)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:184)
	at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:398)
	at org.apache.camel.component.slack.SlackConsumer.processBatch(SlackConsumer.java:133)
	at org.apache.camel.component.slack.SlackConsumer.poll(SlackConsumer.java:87)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: null to the required type: java.io.InputStream with value null
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:275)
	at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:123)
	... 17 more
{code}",,davsclaus,lb,rhuanrcoha,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18210,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jun 20 16:35:50 UTC 2022,,,,,,,,,,,"0|z135f4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Jun/22 23:19;rhuanrcoha;If possible, could you attach a simple reproducer of this issue?;;;","11/Jun/22 08:49;lb;I'm trying to create one but I was unable so far;;;","20/Jun/22 16:35;davsclaus;It due to that exchange pooling bug;;;",,,,,,,,,,,,,,,,,,,,,,,
The typeConverterExists attribute in camel-spring-xml has no effect,CAMEL-18160,13448007,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,klease78,klease78,01/Jun/22 21:16,02/Jun/22 05:54,13/Jul/23 08:34,02/Jun/22 05:54,3.17.0,,,,3.18.0,,,,,camel-spring,,,,,0,,,"The typeConverterExists attribute set on camelContext has no effect on custom type converters because it is set on the TypeConverterRegistry *after* the custom converters are registered.

This is demonstrated by the failing unit test in the related PR. The duplicate converter should override the initial one but it is ignored instead.",,davsclaus,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jun 02 05:54:24 UTC 2022,,,,,,,,,,,"0|z12vtc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/Jun/22 05:54;davsclaus;Thanks for the unit test - I fixed to setup this eager so the test passes now;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"camel-jms SendDynamicAware incorrectly parses destination if it starts with ""jms|activemq|etc://"" and doesn't have queue: or topic: prefix",CAMEL-18159,13447967,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ArtemSt,ArtemSt,01/Jun/22 15:41,04/Jun/22 07:20,13/Jul/23 08:34,04/Jun/22 07:20,3.14.3,,,,3.14.4,3.18.0,,,,camel-jms,,,,,0,,,"For route like:
{code:java}
from(""direct:startSlashed"")
  .toD(""activemq://${header.where}"");{code}
If we pass exchange with specified header _*where*_ any value, for example ""bar"" the jms endpoint will parse destination not as ""bar"", but as ""{*}//{*}bar"" and will send message to queue ""{*}//{*}bar"".

 

Test file (wich will be fall) is attached",,ArtemSt,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jun/22 15:40;ArtemSt;JmsToDSendDynamicTest.java;https://issues.apache.org/jira/secure/attachment/13044519/JmsToDSendDynamicTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Jun 04 07:20:14 UTC 2022,,,,,,,,,,,"0|z12vkg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Jun/22 19:43;davsclaus;This is potential in other like kafka, sjms, spring-rabbitmq etc that are also having this. Can you check these as well?;;;","01/Jun/22 19:46;davsclaus;PRs for the other components is welcome;;;","02/Jun/22 12:05;ArtemSt;Should I refer this issue in PR or create new one for other component?;;;","02/Jun/22 12:45;davsclaus;You can refer to this one and add a comment which components you have fixed;;;","04/Jun/22 07:20;davsclaus;Thanks for the help;;;",,,,,,,,,,,,,,,,,,,,,
"camel-jdbc - The settings provided by the query parameter ""parameters"" are ignored  when useHeadersAsParameters ",CAMEL-18157,13447712,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,andrea81,andrea81,31/May/22 14:16,01/Jun/22 04:37,13/Jul/23 08:34,01/Jun/22 04:37,3.14.3,,,,3.14.4,3.18.0,,,,camel-jdbc,,,,,1,,,"The settings provided by the query parameter ""parameters"" are ignored when *useHeadersAsParameters* is true.

Example:

jdbc:xxxxx?{*}useHeadersAsParameters=true{*}&statement.fetchSize=100&outputType=StreamList&resetAutoCommit=false

In this specific case *statement.fetchSize=100* will be ignored and all the rows will be fetched in memory for an sql query like this one:

SELECT * from MY-BIG-TABLE",,andrea81,davsclaus,gangel,rhuanrcoha,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jun 01 04:37:51 UTC 2022,,,,,,,,,,,"0|z12tzs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"31/May/22 15:04;gangel;It seems that processing huge tables may cause quickly OOM and high CPU rate in that case :(  ;;;","31/May/22 17:04;andrea81;I will do a pull request with the following changes in the JdbcProducer class:
{code:java}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.apache.camel.Exchange;
import org.apache.camel.ExtendedExchange;
import org.apache.camel.spi.Synchronization;
import org.apache.camel.support.DefaultProducer;
import org.apache.camel.support.PropertyBindingSupport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JdbcProducer extends DefaultProducer {

    private static final Logger LOG = LoggerFactory.getLogger(JdbcProducer.class);

    private final DataSource dataSource;
    private final ConnectionStrategy connectionStrategy;
    private final int readSize;
    private final Map<String, Object> parameters;

    public JdbcProducer(JdbcEndpoint endpoint, DataSource dataSource, ConnectionStrategy connectionStrategy,
                        int readSize, Map<String, Object> parameters) {
        super(endpoint);
        this.dataSource = dataSource;
        this.connectionStrategy = connectionStrategy;
        this.readSize = readSize;
        this.parameters = parameters;
    }

    @Override
    public JdbcEndpoint getEndpoint() {
        return (JdbcEndpoint) super.getEndpoint();
    }

    /**
     * Execute sql of exchange and set results on output
     */
    @Override
    public void process(Exchange exchange) throws Exception {
        if (getEndpoint().isResetAutoCommit()) {
            processingSqlBySettingAutoCommit(exchange);
        } else {
            processingSqlWithoutSettingAutoCommit(exchange);
        }
    }

    private void processingSqlBySettingAutoCommit(Exchange exchange) throws Exception {
        String sql = exchange.getIn().getBody(String.class);
        Connection conn = null;
        Boolean autoCommit = null;
        boolean shouldCloseResources = true;

        try {
            conn = connectionStrategy.getConnection(dataSource);
            autoCommit = conn.getAutoCommit();
            if (autoCommit) {
                conn.setAutoCommit(false);
            }

            shouldCloseResources = createAndExecuteSqlStatement(exchange, sql, conn);

            conn.commit();
        } catch (Exception e) {
            try {
                if (conn != null) {
                    conn.rollback();
                }
            } catch (Throwable sqle) {
                LOG.warn(""Error occurred during JDBC rollback. This exception will be ignored."", sqle);
            }
            throw e;
        } finally {
            if (shouldCloseResources) {
                resetAutoCommit(conn, autoCommit);
                closeQuietly(conn);
            }
        }
    }

    private void processingSqlWithoutSettingAutoCommit(Exchange exchange) throws Exception {
        String sql = exchange.getIn().getBody(String.class);
        Connection conn = null;
        boolean shouldCloseResources = true;

        try {
            conn = connectionStrategy.getConnection(dataSource);
            shouldCloseResources = createAndExecuteSqlStatement(exchange, sql, conn);
        } finally {
            if (shouldCloseResources && !connectionStrategy.isConnectionTransactional(conn, dataSource)) {
                closeQuietly(conn);
            }
        }
    }

    private boolean createAndExecuteSqlStatement(Exchange exchange, String sql, Connection conn) throws Exception {
        if (getEndpoint().isUseHeadersAsParameters()) {
            return doCreateAndExecuteSqlStatementWithHeaders(exchange, sql, conn);
        } else {
            return doCreateAndExecuteSqlStatement(exchange, sql, conn);
        }
    }

    private boolean doCreateAndExecuteSqlStatementWithHeaders(Exchange exchange, String sql, Connection conn) throws Exception {
        PreparedStatement ps = null;
        ResultSet rs = null;
        boolean shouldCloseResources = true;

        try {
            final String preparedQuery
                    = getEndpoint().getPrepareStatementStrategy().prepareQuery(sql, getEndpoint().isAllowNamedParameters());

            Boolean shouldRetrieveGeneratedKeys
                    = exchange.getIn().getHeader(JdbcConstants.JDBC_RETRIEVE_GENERATED_KEYS, false, Boolean.class);

            if (shouldRetrieveGeneratedKeys) {
                Object expectedGeneratedColumns = exchange.getIn().getHeader(JdbcConstants.JDBC_GENERATED_COLUMNS);
                if (expectedGeneratedColumns == null) {
                    ps = conn.prepareStatement(preparedQuery, Statement.RETURN_GENERATED_KEYS);
                } else if (expectedGeneratedColumns instanceof String[]) {
                    ps = conn.prepareStatement(preparedQuery, (String[]) expectedGeneratedColumns);
                } else if (expectedGeneratedColumns instanceof int[]) {
                    ps = conn.prepareStatement(preparedQuery, (int[]) expectedGeneratedColumns);
                } else {
                    throw new IllegalArgumentException(
                            ""Header specifying expected returning columns isn't an instance of String[] or int[] but ""
                                                       + expectedGeneratedColumns.getClass());
                }
            } else {
                ps = conn.prepareStatement(preparedQuery);
            }
            
            bindParameters(exchange, ps);

            //Check for statement paramters:

            int expectedCount = ps.getParameterMetaData().getParameterCount();

            if (expectedCount > 0) {
                Iterator<?> it = getEndpoint().getPrepareStatementStrategy()
                        .createPopulateIterator(sql, preparedQuery, expectedCount, exchange, exchange.getIn().getBody());
                getEndpoint().getPrepareStatementStrategy().populateStatement(ps, it, expectedCount);
            }

            LOG.debug(""Executing JDBC PreparedStatement: {}"", sql);

            boolean stmtExecutionResult = ps.execute();
            if (stmtExecutionResult) {
                rs = ps.getResultSet();
                shouldCloseResources = setResultSet(exchange, conn, rs);
            } else {
                int updateCount = ps.getUpdateCount();
                // and then set the new header
                exchange.getMessage().setHeader(JdbcConstants.JDBC_UPDATE_COUNT, updateCount);
            }

            if (shouldRetrieveGeneratedKeys) {
                setGeneratedKeys(exchange, conn, ps.getGeneratedKeys());
            }
        } finally {
            if (shouldCloseResources) {
                closeQuietly(rs);
                closeQuietly(ps);
            }
        }
        return shouldCloseResources;
    }

    private void bindParameters(Exchange exchange, Statement ps) {
        if (parameters != null && !parameters.isEmpty()) {
            Map<String, Object> copy = new HashMap<>(parameters);
            PropertyBindingSupport.bindProperties(exchange.getContext(), ps, copy);
        }
    }

    private boolean doCreateAndExecuteSqlStatement(Exchange exchange, String sql, Connection conn) throws Exception {

        ResultSet rs = null;
        boolean shouldCloseResources = true;

        try {
            // We might need to leave it open to allow post-processing of the result set. This is why we
            // are not using try-with-resources here.
            Statement stmt = conn.createStatement();

            bindParameters(exchange, stmt);

            LOG.debug(""Executing JDBC Statement: {}"", sql);

            Boolean shouldRetrieveGeneratedKeys
                    = exchange.getIn().getHeader(JdbcConstants.JDBC_RETRIEVE_GENERATED_KEYS, false, Boolean.class);

            boolean stmtExecutionResult;
            if (shouldRetrieveGeneratedKeys) {
                Object expectedGeneratedColumns = exchange.getIn().getHeader(JdbcConstants.JDBC_GENERATED_COLUMNS);
                if (expectedGeneratedColumns == null) {
                    stmtExecutionResult = stmt.execute(sql, Statement.RETURN_GENERATED_KEYS);
                } else if (expectedGeneratedColumns instanceof String[]) {
                    stmtExecutionResult = stmt.execute(sql, (String[]) expectedGeneratedColumns);
                } else if (expectedGeneratedColumns instanceof int[]) {
                    stmtExecutionResult = stmt.execute(sql, (int[]) expectedGeneratedColumns);
                } else {
                    throw new IllegalArgumentException(
                            ""Header specifying expected returning columns isn't an instance of String[] or int[] but ""
                                                       + expectedGeneratedColumns.getClass());
                }
            } else {
                stmtExecutionResult = stmt.execute(sql);
            }

            if (stmtExecutionResult) {
                rs = stmt.getResultSet();
                shouldCloseResources = setResultSet(exchange, conn, rs);
            } else {
                int updateCount = stmt.getUpdateCount();
                // and then set the new header
                exchange.getMessage().setHeader(JdbcConstants.JDBC_UPDATE_COUNT, updateCount);
            }

            if (shouldRetrieveGeneratedKeys) {
                setGeneratedKeys(exchange, conn, stmt.getGeneratedKeys());
            }
        } finally {
            if (shouldCloseResources) {
                closeQuietly(rs);
            }
        }
        return shouldCloseResources;
    }

    private void closeQuietly(ResultSet rs) {
        if (rs != null) {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
            } catch (Throwable sqle) {
                LOG.debug(""Error by closing result set"", sqle);
            }
        }
    }

    private void closeQuietly(Statement stmt) {
        if (stmt != null) {
            try {
                if (!stmt.isClosed()) {
                    stmt.close();
                }
            } catch (Throwable sqle) {
                LOG.debug(""Error by closing statement"", sqle);
            }
        }
    }

    private void resetAutoCommit(Connection con, Boolean autoCommit) {
        if (con != null && autoCommit != null) {
            try {
                con.setAutoCommit(autoCommit);
            } catch (Throwable sqle) {
                LOG.debug(""Error by resetting auto commit to its original value"", sqle);
            }
        }
    }

    private void closeQuietly(Connection con) {
        if (con != null) {
            try {
                if (!con.isClosed()) {
                    con.close();
                }
            } catch (Throwable sqle) {
                LOG.debug(""Error by closing connection"", sqle);
            }
        }
    }

    /**
     * Sets the generated if any to the Exchange in headers : - {@link JdbcConstants#JDBC_GENERATED_KEYS_ROW_COUNT} :
     * the row count of generated keys - {@link JdbcConstants#JDBC_GENERATED_KEYS_DATA} : the generated keys data
     *
     * @param exchange      The exchange where to store the generated keys
     * @param conn          Current JDBC connection
     * @param generatedKeys The result set containing the generated keys
     */
    protected void setGeneratedKeys(Exchange exchange, Connection conn, ResultSet generatedKeys) throws SQLException {
        if (generatedKeys != null) {
            ResultSetIterator iterator = new ResultSetIterator(
                    conn, generatedKeys, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics(),
                    getEndpoint().isUseGetBytesForBlob());
            List<Map<String, Object>> data = extractRows(iterator);

            exchange.getMessage().setHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT, data.size());
            exchange.getMessage().setHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA, data);
        }
    }

    /**
     * Sets the result from the ResultSet to the Exchange as its OUT body.
     *
     * @return whether to close resources
     */
    protected boolean setResultSet(Exchange exchange, Connection conn, ResultSet rs) throws SQLException {
        boolean answer = true;

        ResultSetIterator iterator = new ResultSetIterator(
                conn, rs, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics(), getEndpoint().isUseGetBytesForBlob());

        JdbcOutputType outputType = getEndpoint().getOutputType();
        exchange.getMessage().setHeader(JdbcConstants.JDBC_COLUMN_NAMES, iterator.getColumnNames());
        if (outputType == JdbcOutputType.StreamList) {
            exchange.getMessage()
                    .setBody(new StreamListIterator(
                            getEndpoint().getCamelContext(), getEndpoint().getOutputClass(), getEndpoint().getBeanRowMapper(),
                            iterator));
            exchange.adapt(ExtendedExchange.class).addOnCompletion(new ResultSetIteratorCompletion(iterator));
            // do not close resources as we are in streaming mode
            answer = false;
        } else if (outputType == JdbcOutputType.SelectList) {
            List<?> list = extractRows(iterator);
            exchange.getMessage().setHeader(JdbcConstants.JDBC_ROW_COUNT, list.size());
            exchange.getMessage().setBody(list);
        } else if (outputType == JdbcOutputType.SelectOne) {
            exchange.getMessage().setBody(extractSingleRow(iterator));
        }

        return answer;
    }

    @SuppressWarnings(""unchecked"")
    private List extractRows(ResultSetIterator iterator) throws SQLException {
        List result = new ArrayList();
        int maxRowCount = readSize == 0 ? Integer.MAX_VALUE : readSize;
        for (int i = 0; iterator.hasNext() && i < maxRowCount; i++) {
            Map<String, Object> row = iterator.next();
            Object value;
            if (getEndpoint().getOutputClass() != null) {
                value = JdbcHelper.newBeanInstance(getEndpoint().getCamelContext(), getEndpoint().getOutputClass(),
                        getEndpoint().getBeanRowMapper(), row);
            } else {
                value = row;
            }
            result.add(value);
        }
        return result;
    }

    private Object extractSingleRow(ResultSetIterator iterator) throws SQLException {
        if (!iterator.hasNext()) {
            return null;
        }

        Map<String, Object> row = iterator.next();
        if (iterator.hasNext()) {
            throw new SQLDataException(""Query result not unique for outputType=SelectOne."");
        } else if (getEndpoint().getOutputClass() != null) {
            return JdbcHelper.newBeanInstance(getEndpoint().getCamelContext(), getEndpoint().getOutputClass(),
                    getEndpoint().getBeanRowMapper(), row);
        } else if (row.size() == 1) {
            return row.values().iterator().next();
        } else {
            return row;
        }
    }

    private static final class ResultSetIteratorCompletion implements Synchronization {
        private final ResultSetIterator iterator;

        private ResultSetIteratorCompletion(ResultSetIterator iterator) {
            this.iterator = iterator;
        }

        @Override
        public void onComplete(Exchange exchange) {
            iterator.close();
            iterator.closeConnection();
        }

        @Override
        public void onFailure(Exchange exchange) {
            iterator.close();
            iterator.closeConnection();
        }
    }
}
 {code}
Has been introduced the common method:
{code:java}
private void bindParameters(Exchange exchange, Statement ps) {
    if (parameters != null && !parameters.isEmpty()) {
        Map<String, Object> copy = new HashMap<>(parameters);
        PropertyBindingSupport.bindProperties(exchange.getContext(), ps, copy);
    }
}{code}
to be used by:
 - *private boolean doCreateAndExecuteSqlStatementWithHeaders(Exchange exchange, String sql, Connection conn) throws Exception {*
 - *private boolean doCreateAndExecuteSqlStatement(Exchange exchange, String sql, Connection conn) throws Exception {*;;;","31/May/22 18:19;davsclaus;Yes you are welcome to send a PR against the main branch;;;","31/May/22 18:54;andrea81;[~davsclaus]:
Here my PR:
[https://github.com/apache/camel/pull/7701]

thanks for your time;;;","01/Jun/22 04:37;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,
camel-kafka - ssl.endpoint.identification.algorithm should be allowed to be an empty string,CAMEL-18146,13447065,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jbmehring,jbmehring,26/May/22 18:12,31/May/22 17:24,13/Jul/23 08:34,31/May/22 17:23,3.17.0,,,,3.18.0,,,,,camel-kafka,,,,,0,,,"This property was changed from being defaulted if null to being defaulted if null or empty in the 3.17 release. Currently the only way to disable server host name verification is to pass the Kafka consumer an empty string which is impossible after that change.

 

Relevant Code: https://github.com/apache/camel/blob/main/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java#L436

Relevant Docs: [https://docs.confluent.io/platform/current/kafka/authentication_ssl.html#optional-settings]

 

Solution is just to revert addPropertyIfNotEmpty to be addPropertyIfNotNull for this property.",,davsclaus,jbmehring,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue May 31 17:23:52 UTC 2022,,,,,,,,,,,"0|z12q2g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"31/May/22 17:23;davsclaus;You can now use ""none"" or ""false"" to disable this;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Run from clipboard does not work for java,CAMEL-18139,13446438,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/May/22 18:22,24/May/22 05:32,13/Jul/23 08:34,24/May/22 05:32,3.17.0,,,,3.18.0,,,,,camel-jbang,,,,,0,,,"2022-05-23 20:21:39.543  INFO 29065 --- [           main] org.apache.camel.main.DownloaderHelper   : Downloaded:  org.apache.camel:camel-java-joor-dsl:3.18.0-SNAPSHOT (took: 1s414ms)
org.joor.ReflectException: Compilation error: /generated-clipboard.java:4: error: class Hey is public, should be declared in a file named Hey.java
public class Hey extends org.apache.camel.builder.RouteBuilder {
       ^
1 error

	at org.apache.camel.dsl.java.joor.MultiCompile.compileUnit(MultiCompile.java:130)",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon May 23 18:23:10 UTC 2022,,,,,,,,,,,"0|z12m7c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/May/22 18:23;davsclaus;This is because the compiler expects the content to be in a file with the class name;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-mongodb - Cannot upsert in sharded collection,CAMEL-18137,13446254,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,Ozymandy,Ozymandy,22/May/22 19:27,24/May/22 07:52,13/Jul/23 08:34,24/May/22 07:52,3.17.0,,,,3.18.0,,,,,camel-mongodb,,,,,0,,,"According to official mongodb documentation sharded key should be specified while upserting:

https://www.mongodb.com/docs/manual/reference/method/db.collection.updateOne/
{code:java}
If you specify upsert: true on a sharded collection, you must include the full shard key in the filter. For additional db.collection.updateOne() behavior on a sharded collection, see Sharded Collections.{code}",,Ozymandy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-22 19:27:47.0,,,,,,,,,,,"0|z12l2g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Move-File Post Processing in (S)FTP not working if OutMessage is set,CAMEL-18130,13445817,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mash-sap,mash-sap,19/May/22 12:14,22/May/22 19:44,13/Jul/23 08:34,20/May/22 15:02,3.17.0,,,,3.18.0,,,,,camel-file,,,,,0,,,"When the last processor of a route sets a outMessage, the move-file post processing in (s)ftp adapter is not working.

 

I created following reproducer: [https://github.com/mash-sap/camelFTP] The evaluation of the expressions (i.e. file:onlyname) is looking in the inMessage of the exchange to evaluate the filename (link<[https://github.com/apache/camel/blob/main/core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java#L259]>). However, the properties of the files may get bound to the outMessage if there is one (link<[https://github.com/apache/camel/blob/camel-2.24.x/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java#L134]>). Therefore the evaluation is not working as expected. I'm not too familiar with the code, but one possible solution (for post-processing) could be, to always bind the file-properties to the in message. But maybe this is not valid for other use-cases and therefore parameterization is required: Link<[https://github.com/apache/camel/blob/camel-2.24.x/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java#L134]>",,davsclaus,mash-sap,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri May 20 14:48:44 UTC 2022,,,,,,,,,,,"0|z12idc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/May/22 12:18;mash-sap;PR created: [https://github.com/apache/camel/pull/7645];;;","19/May/22 13:19;davsclaus;The OUT message is deprecated, you should not use that;;;","19/May/22 13:34;mash-sap;Just for my understanding: Does it mean that in Camel 3.x there should never be a out message? Or are there some cases where having a out message is valid?;;;","19/May/22 13:35;siano;Hi Claus, sure out messages are deprecated, but several standard camel components (e.g. camel-cxf) still use out messages, so this issue will happen if one of these components is involved.;;;","20/May/22 14:48;davsclaus;No this only happens in rare cases like what you are doing in a custom processor - the routing engine deals with the IN vs OUT between its nodes.
However I am working on a cleaner fix than yours;;;",,,,,,,,,,,,,,,,,,,,,
camel-quickfix - lazy-create-engines option is not working,CAMEL-18129,13445811,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,aanpilov,aanpilov,19/May/22 11:16,19/May/22 13:38,13/Jul/23 08:34,19/May/22 13:38,3.15.0,3.16.0,,,3.18.0,,,,,camel-quickfix,,,,,0,,,"Hi!

I've attached simple test project for reproduce purposes.

When global option camel.component.quickfix.lazy-create-engines=true or endpoint option 

lazyCreateEngine=true, after starting CamelContext and route quickfix engine is not starting.

Example logs:
{code:java}
o.a.c.c.quickfixj.QuickfixjComponent     : QuickFIX/J engine: quickfix://session.cfg will start lazily
o.a.c.c.quickfixj.QuickfixjEngine        : Inferring log factory: quickfix.ScreenLogFactory
o.a.c.c.quickfixj.QuickfixjEngine        : Inferring message store factory: quickfix.MemoryStoreFactory
o.a.c.impl.engine.AbstractCamelContext   : Routes startup (total:1 started:1)
o.a.c.impl.engine.AbstractCamelContext   :     Started Test_Session (quickfix://session.cfg)
o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.16.0 (camel-1) started in 2s761ms (build:64ms init:256ms start:2s441ms)
c.m.t.camel.quickfix.test.Application    : Started Application in 6.947 seconds (JVM running for 7.558) {code}
Only manual restarting route (via JMX for example) forces quickfix engine to start.",,aanpilov,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/May/22 11:09;aanpilov;camel-quickfix-test.zip;https://issues.apache.org/jira/secure/attachment/13043920/camel-quickfix-test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.apache.org/jira/browse/CAMEL-17554,,,,,,,,,,9223372036854775807,,,,Thu May 19 13:38:21 UTC 2022,,,,,,,,,,,"0|z12ic0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/May/22 13:38;davsclaus;Thanks for the sample project to reproduce the issue;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Aws2-sqs: Operations PurgeQueue and DeleteQueue requires unnecessary header,CAMEL-18123,13445587,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jondruse,jondruse,jondruse,18/May/22 08:34,08/Jul/22 10:16,13/Jul/23 08:34,18/May/22 17:22,3.14.4,3.17.0,,,3.14.4,3.18.0,,,,camel-aws2,,,,,0,,,Both PurheQueu and DrleteQueue operations work only if header SQS_QUEUE_PREFIX is filled with any value. This header is not required at all (https://github.com/apache/camel/blob/64c1fbdf0c3dd130ce21a6e1cd0cd97c0d1e3473/components/camel-aws/camel-aws2-sqs/src/main/java/org/apache/camel/component/aws2/sqs/Sqs2Producer.java#L184),,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-18 08:34:01.0,,,,,,,,,,,"0|z12gy8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression in 3.4 in date formatting of Simple expression,CAMEL-18119,13445413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,antoine.dessaigne,antoine.dessaigne,17/May/22 11:56,18/May/22 07:23,13/Jul/23 08:34,17/May/22 19:38,3.4.0,,,,3.14.4,3.18.0,,,,camel-core,,,,,0,,,"Hello,

We use Joda time and we have custom Joda<>Java converters. For instance, you can convert Joda's {{ReadableInstant}} into Java's {{Date}}.

Since [this commit|https://github.com/apache/camel/commit/46f4c43315219dba429c0612bbff5b05ef2ec0ac] from CAMEL-15114, Simple expressions can no longer convert header object to a {{Date}} object, they can only handle {{Date}} and {{Long}} types.

I can provide a pull request but I see 2 ways of solving it and I don't know which one you prefer:
# revert to {{exchange.getIn().getHeader(key, Date.class)}} because there's a {{DateTimeConverter.toDate(Long value)}} converter if you have a {{Long}}
# keep the check on {{Date}} and {{Long}} types and then try to convert to {{Date}} and then fail if it cannot be converted

Thank you",,antoine.dessaigne,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue May 17 12:06:16 UTC 2022,,,,,,,,,,,"0|z12fvs:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"17/May/22 12:06;davsclaus;No 2;;;",,,,,,,,,,,,,,,,,,,,,,,,,
 camel-smpp - DeliverSM handle message payload optional parameter,CAMEL-18110,13444853,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,memas.kal,memas.kal,13/May/22 13:37,16/May/22 11:28,13/Jul/23 08:34,16/May/22 10:40,3.14.2,,,,3.14.4,3.18.0,,,,camel-smpp,,,,,0,,,"As per [https://smpp.org/SMPP_v3_4_Issue1_2.pdf], the optional parameter message_payload is used when:

!image-2022-05-13-16-24-24-522.png|width=486,height=364!

Even though DLRs, do not exceed this length, some vendors would chose to use this optional parameter instead.

The issue CAMEL-9356, tried to solve this but it did not succeed. Not sure if it's a regression, but the deliverSm.shortMessage is never null [1], but it's set to an empty byte array when the message payload optional parameter exists. Thus the message payload is never set as shown in the below snippet:

Snippet from SmppBinding.java
{code:java}
        String messagePayload = null;

        if (deliverSm.getShortMessage() == null && deliverSm.getOptionalParameters() != null) {
            List<OptionalParameter> oplist = Arrays.asList(deliverSm.getOptionalParameters());

            for (OptionalParameter optPara : oplist) {
                if (OptionalParameter.Tag.MESSAGE_PAYLOAD.code() == optPara.tag && OctetString.class
                        .isInstance(optPara)) {
                    messagePayload = ((OctetString) optPara).getValueAsString();
                    break;
                }
            }
        }
{code}
 

That being said I would not alter the null checks but I would add additional for the empty body (zero-length). I would like to do a PR for this bug and I would like it to be merged with camel *3.14.X* (LTS) which is the version I currently use. Should I do a PR based on this branch?

 [1]This is my conclusion after integration tests, using an implementation of jSMPP as the server. jSMPP would set the content to the empty message when sending the deliverSm.(org.jsmpp.DefaultPDUSender#checkShortMessage) .",,davsclaus,memas.kal,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/May/22 13:24;memas.kal;image-2022-05-13-16-24-24-522.png;https://issues.apache.org/jira/secure/attachment/13043620/image-2022-05-13-16-24-24-522.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon May 16 11:28:29 UTC 2022,,,,,,,,,,,"0|z12cgg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/May/22 14:44;davsclaus;Yes you can send a PR - you can do this against main or 3.14.x, then we can cherry-pick it aftetwards.;;;","16/May/22 10:40;davsclaus;Thanks for reporting and the PR.

Keep them coming;;;","16/May/22 10:56;memas.kal;Thank you for your quick response, [~davsclaus] .

 

Could you please cherry-pick them in the camel-3.14.x I had some issues with the maven plugins (v3.14.4-SNAPSHOT) which I was unable to download.;;;","16/May/22 11:23;davsclaus;This has been backported;;;","16/May/22 11:28;memas.kal;Great, thank you;;;",,,,,,,,,,,,,,,,,,,,,
camel-core - Pooled exchanges with netty-http/jetty/servlet can cause reference leaks,CAMEL-18101,13444549,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/May/22 08:35,12/May/22 08:56,13/Jul/23 08:34,12/May/22 08:56,3.14.3,3.16.0,,,3.14.4,3.17.0,,,,camel-core,,,,,0,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-18002,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-12 08:35:37.0,,,,,,,,,,,"0|z12akw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-karaf - Cannot load OSGi blueprint due to Resumable classloading hell,CAMEL-18100,13444486,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/May/22 19:49,20/May/22 11:40,13/Jul/23 08:34,12/May/22 07:39,3.17.0,,,,3.17.0,,,,,camel-osgi,karaf,,,,0,,,"java.lang.NoClassDefFoundError: org/apache/camel/resume/ResumeStrategy
	at java.lang.Class.getDeclaredMethods0(Native Method) ~[?:?]
	at java.lang.Class.privateGetDeclaredMethods(Class.java:3166) ~[?:?]
	at java.lang.Class.getDeclaredMethod(Class.java:2473) ~[?:?]
	at com.sun.xml.bind.v2.model.nav.ReflectionNavigator$10.run(ReflectionNavigator.java:595) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.nav.ReflectionNavigator$10.run(ReflectionNavigator.java:588) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:?]
	at com.sun.xml.bind.v2.model.nav.ReflectionNavigator.isOverriding(ReflectionNavigator.java:587) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.nav.ReflectionNavigator.isOverriding(ReflectionNavigator.java:34) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ClassInfoImpl.findGetterSetterProperties(ClassInfoImpl.java:943) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ClassInfoImpl.getProperties(ClassInfoImpl.java:283) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl.getProperties(RuntimeClassInfoImpl.java:156) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getClassInfo(ModelBuilder.java:231) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:73) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:54) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getClassInfo(ModelBuilder.java:197) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:68) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:54) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getTypeInfo(ModelBuilder.java:345) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.TypeRefImpl.calcRef(TypeRefImpl.java:66) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.TypeRefImpl.getTarget(TypeRefImpl.java:43) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeTypeRefImpl.getTarget(RuntimeTypeRefImpl.java:32) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeTypeRefImpl.getTarget(RuntimeTypeRefImpl.java:25) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl$1.get(ElementPropertyInfoImpl.java:48) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl$1.get(ElementPropertyInfoImpl.java:46) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at java.util.AbstractList$Itr.next(AbstractList.java:371) ~[?:?]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getClassInfo(ModelBuilder.java:245) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:73) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:54) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getClassInfo(ModelBuilder.java:197) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:68) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.getClassInfo(RuntimeModelBuilder.java:54) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getTypeInfo(ModelBuilder.java:345) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.model.impl.ModelBuilder.getTypeInfo(ModelBuilder.java:360) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:444) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:282) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:109) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl$JAXBContextBuilder.build(JAXBContextImpl.java:1142) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:141) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:265) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at com.sun.xml.bind.v2.JAXBContextFactory.createContext(JAXBContextFactory.java:48) ~[jaxb-runtime-2.3.3.jar:2.3.3]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:302) ~[jakarta.xml.bind-api-2.3.3.jar:2.3.3]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:478) ~[jakarta.xml.bind-api-2.3.3.jar:2.3.3]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:435) ~[jakarta.xml.bind-api-2.3.3.jar:2.3.3]
	at org.apache.camel.xml.jaxb.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:39) ~[?:?]
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:785) ~[?:?]
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:276) ~[?:?]
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parse(CamelNamespaceHandler.java:224) ~[?:?]
	at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1369) ~[!/:1.10.3]
	at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:427) ~[!/:1.10.3]
	at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:331) ~[!/:1.10.3]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:371) [!/:1.10.3]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:298) [!/:1.10.3]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:335) [!/:1.10.3]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:288) [!/:1.10.3]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:284) [!/:1.10.3]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:274) [!/:1.10.3]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [!/:1.10.3]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [!/:1.10.3]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [!/:1.10.3]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [!/:1.10.3]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [!/:1.10.3]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1180) [org.apache.felix.framework-6.0.5.jar:?]
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [org.apache.felix.framework-6.0.5.jar:?]
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [org.apache.felix.framework-6.0.5.jar:?]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4817) [org.apache.felix.framework-6.0.5.jar:?]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2336) [org.apache.felix.framework-6.0.5.jar:?]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [org.apache.felix.framework-6.0.5.jar:?]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundle(DirectoryWatcher.java:1260) [!/:3.7.4]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(DirectoryWatcher.java:1233) [!/:3.7.4]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.doProcess(DirectoryWatcher.java:520) [!/:3.7.4]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:365) [!/:3.7.4]
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:316) [!/:3.7.4]
Caused by: java.lang.ClassNotFoundException: org.apache.camel.resume.ResumeStrategy
	at java.net.URLClassLoader.findClass(URLClassLoader.java:476) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:589) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.doImplicitBootDelegation(BundleWiringImpl.java:1785) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.tryImplicitBootDelegation(BundleWiringImpl.java:1714) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.searchDynamicImports(BundleWiringImpl.java:1667) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1543) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:78) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1950) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1343) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1586) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1516) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:78) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1950) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?]",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 11 20:02:43 UTC 2022,,,,,,,,,,,"0|z12a6w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/May/22 20:02;davsclaus;Ah it looks like we have split/duplicate packages

org.apache.camel.resume                                │ 3.17.0          │ 59  │ org.apache.camel.camel-api
org.apache.camel.resume                                │ 3.17.0.SNAPSHOT │ 92  │ org.apache.camel.camel-support;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Health Check should report HTTP status codes for DOWN,CAMEL-18091,13444188,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/May/22 14:25,10/May/22 16:30,13/Jul/23 08:34,10/May/22 16:30,3.16.0,,,,3.17.0,,,,,camel-jbang,,,,,0,,,The message body contains the json data as UP or DOWN but we forgot to change the HTTP status code accordingly. Those are what monitoring tools use to check,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-10 14:25:26.0,,,,,,,,,,,"0|z128dk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - IllegalThreadStateException when trying to resume suspended Camel context,CAMEL-18089,13444147,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cebra,cebra,10/May/22 11:04,11/May/22 13:04,13/Jul/23 08:34,11/May/22 13:04,3.16.0,3.7.1,,,3.17.0,,,,,camel-spring-boot,,,,,0,,,"Resuming a suspended camel context results in an IllegalThreadStateException. 

When all routes and the context are started, calling camelContext.suspend(); or clicking 'Suspend' in hawtio will suspend the context and the routes, showing them as 'Suspended' in hawtio.

Then, calling camelContext.resume(); or clicking 'Start' on the Context in hawtio, will throw an IllegalThreadStateException and afterwards the context is in state 'stopped'. There seems to be no way to restart the context other than restarting the whole application. 

Tried this with our actual application:
 * Java 14.0.2
 * Camel 3.7.1
 * Spring Boot 2.4.2
 * Jolokia 1.6.2
 * hawtio 2.13.3

And also with a little test application with different dependency versions and only a simple test route, the result was the same.
 * Java 17.0.1 (also tried with 11.0.6 and 14.0.2, same result)
 * Camel 3.16.0
 * Spring Boot 2.6.6
 * Jolokia 1.7.1
 * hawtio 2.14.5

Stacktrace:

 
{code:java}
o.a.camel.support.service.BaseService    : Error while resuming service: SpringCamelContext(CamelTestContext) with spring id applicationjava.lang.IllegalThreadStateException: null
    at java.base/java.lang.Thread.start(Thread.java:793) ~[na:na]
    at org.apache.camel.spring.boot.CamelMainRunController.start(CamelMainRunController.java:40) ~[camel-spring-boot-3.16.0.jar:3.16.0]
    at org.apache.camel.spring.boot.CamelSpringBootApplicationListener$1.onCamelContextStarted(CamelSpringBootApplicationListener.java:148) ~[camel-spring-boot-3.16.0.jar:3.16.0]
    at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:196) ~[camel-base-engine-3.16.0.jar:3.16.0]
    at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:147) ~[camel-base-engine-3.16.0.jar:3.16.0]
    at org.apache.camel.impl.engine.AbstractCamelContext.doResume(AbstractCamelContext.java:2585) ~[camel-base-engine-3.16.0.jar:3.16.0]
    at org.apache.camel.support.service.BaseService.resume(BaseService.java:214) ~[camel-api-3.16.0.jar:3.16.0]
    at org.apache.camel.management.mbean.ManagedCamelContext.start(ManagedCamelContext.java:292) ~[camel-management-3.16.0.jar:3.16.0]
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
    at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
    at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:72) ~[na:na]
    at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source) ~[na:na]
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
    at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
    at java.base/sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:262) ~[na:na]
    at java.management/javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1178) ~[na:na]
    at java.base/java.security.AccessController.doPrivileged(AccessController.java:399) ~[na:na]
    at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86) ~[na:na]
    at java.management/javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1172) ~[na:na]
    at java.management/javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:1016) ~[na:na]
    at org.apache.camel.support.management.MixinRequiredModelMBean.invoke(MixinRequiredModelMBean.java:72) ~[camel-support-3.16.0.jar:3.16.0]
    at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:814) ~[na:na]
    at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:802) ~[na:na]
    at org.jolokia.handler.ExecHandler.doHandleRequest(ExecHandler.java:98) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.handler.ExecHandler.doHandleRequest(ExecHandler.java:40) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.handler.JsonRequestHandler.handleRequest(JsonRequestHandler.java:89) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.backend.MBeanServerExecutorLocal.handleRequest(MBeanServerExecutorLocal.java:109) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.backend.MBeanServerHandler.dispatchRequest(MBeanServerHandler.java:161) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.backend.LocalRequestDispatcher.dispatchRequest(LocalRequestDispatcher.java:99) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.backend.BackendManager.callRequestDispatcher(BackendManager.java:429) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.backend.BackendManager.handleRequest(BackendManager.java:158) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.http.HttpRequestHandler.executeRequest(HttpRequestHandler.java:197) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.http.HttpRequestHandler.handlePostRequest(HttpRequestHandler.java:131) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.http.AgentServlet$3.handleRequest(AgentServlet.java:493) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.http.AgentServlet.handleSecurely(AgentServlet.java:383) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.http.AgentServlet.handle(AgentServlet.java:354) ~[jolokia-core-1.7.1.jar:na]
    at org.jolokia.http.AgentServlet.doPost(AgentServlet.java:317) ~[jolokia-core-1.7.1.jar:na]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:681) ~[tomcat-embed-core-9.0.60.jar:4.0.FR]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:764) ~[tomcat-embed-core-9.0.60.jar:4.0.FR]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.18.jar:5.3.18]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.18.jar:5.3.18]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96) ~[spring-boot-actuator-2.6.6.jar:2.6.6]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.3.18.jar:5.3.18]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117) ~[spring-web-5.3.18.jar:5.3.18]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.60.jar:9.0.60]
    at java.base/java.lang.Thread.run(Thread.java:833) ~[na:na] {code}
Dependencies:

 
{code:java}
<properties>
    <java.version>17</java.version>
    <jolokia-core.version>1.7.1</jolokia-core.version>
    <camel-version>3.16.0</camel-version>
</properties>
<dependencies>
    <dependency>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>camel-spring-boot-starter</artifactId>
        <version>3.16.0</version>
    </dependency>    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>    
    <dependency>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>camel-file-starter</artifactId>
        <version>${camel-version}</version>
    </dependency>
    <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-management</artifactId>
        <version>${camel-version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
        <groupId>org.jolokia</groupId>
        <artifactId>jolokia-core</artifactId>
        <version>${jolokia-core.version}</version>
    </dependency>
</dependencies> {code}
The test route:

 
{code:java}
public class MyRouteBuilder extends RouteBuilder {    
    @Override
    public void configure() throws Exception {
        from(""file:src/data?noop=true"")
                .routeId(""ROUTE1"")
                .log(LoggingLevel.INFO, ""ROUTE1 entered"")
                .to(""file://target/test"");
    }
} {code}",,cebra,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 11 13:02:25 UTC 2022,,,,,,,,,,,"0|z1284g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/May/22 11:08;davsclaus;Can you try to reproduce this with the spring-boot example from
https://github.com/apache/camel-spring-boot-examples/tree/main/spring-boot

Then we can use that to reproduce more easily;;;","11/May/22 07:04;cebra;Thanks for your reply. 

I could not reproduce it with the example, so I compared it with our code. 

Turns out, we still had the property 
{code:java}
camel.springboot.main-run-controller=true{code}
set from back when we started the project. It seems we don't need that property anymore as we now have included the spring-boot-starter-web. 

When I remove that property, resuming the context works. ;;;","11/May/22 13:02;davsclaus;Thanks I have reproduced the little bug;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-aws2-sqs - Property messageHeaderExceededLimit doesn't work,CAMEL-18088,13444143,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,matejkom,matejkom,10/May/22 10:12,11/May/22 14:56,13/Jul/23 08:34,11/May/22 14:56,3.16.0,,,,3.17.0,,,,,camel-aws2,,,,,0,,,"Within CAMEL-17593 a new property `messageHeaderExceededLimit` was added for producer. By setting it we can either ignore too many headers (aws sqs can contain max 10 headers), warn or throw. However none of them is working as due to the code bug this new code is always ignored.

Please look at screenshot, taken in Sqs2Producer class

!image-2022-05-10-12-12-02-459.png!",,davsclaus,matejkom,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/May/22 10:12;matejkom;image-2022-05-10-12-12-02-459.png;https://issues.apache.org/jira/secure/attachment/13043461/image-2022-05-10-12-12-02-459.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 11 14:56:24 UTC 2022,,,,,,,,,,,"0|z1283k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/May/22 14:56;davsclaus;Thanks for reporting and showing where the bug is;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Run from gist with a kamelet cannot determine its file extension,CAMEL-18084,13443966,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/May/22 11:54,09/May/22 12:08,13/Jul/23 08:34,09/May/22 12:08,3.17.0,,,,3.17.0,,,,,camel-jbang,,,,,0,,,"The kamelet in this gist should be able to use with camel run
https://gist.github.com/davsclaus/a77f996ae186f349551eb545d04cef25",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-09 11:54:56.0,,,,,,,,,,,"0|z1271c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot set server side encryption SSE-S3 for S3 bucket,CAMEL-18064,13443471,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Makaque,Makaque,05/May/22 21:20,10/May/22 10:06,13/Jul/23 08:34,10/May/22 10:06,3.16.0,,,,3.17.0,,,,,camel-aws2,camel-endpointdsl,,,,0,,,"There's no working option to use Amazon S3 Managed Keys (SSE-S3).

From reading online, the http header x-amz-server-side-encription needs to be set.

Setting the header *CamelAwsS3ServerSideEncryption* to AES256 does not enable SSE and there doesn't appear to be an option to enable this type of encryption, even though the documentation states:
""Sets the server-side encryption algorithm when encrypting the object using *AWS-managed* {*}keys{*}. For example use AES256.""

 ",,Makaque,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-05 21:20:24.0,,,,,,,,,,,"0|z12408:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Using --deps for debug may store null as GAV version,CAMEL-18063,13443401,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/May/22 14:31,05/May/22 18:01,13/Jul/23 08:34,05/May/22 18:01,,,,,3.17.0,,,,,camel-jbang,,,,,0,,,"If you use the route debugger in vscode, then it stores the camel-debug without a version

dependency=mvn:org.apache.camel:camel-debug:null",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-05 14:31:20.0,,,,,,,,,,,"0|z123ko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Using --deps cannot download,CAMEL-18054,13443099,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/May/22 12:20,04/May/22 12:58,13/Jul/23 08:34,04/May/22 12:58,3.17.0,,,,3.17.0,,,,,camel-jbang,,,,,0,,,"{code}
2022-05-04 14:18:15.871  INFO 68644 --- [           main] org.apache.camel.main.MainSupport        : Using Java 11.0.13 with PID 68644. Started by davsclaus in /Users/davsclaus/workspace/camel-kamelets-examples/jbang/hello-java
java.lang.RuntimeException: No suitable ClassLoader found for grab
	at groovy.grape.GrapeIvy.chooseClassLoader(GrapeIvy.groovy:179)
	at groovy.grape.GrapeIvy.grab(GrapeIvy.groovy:249)
	at groovy.grape.GrapeIvy.grab(GrapeIvy.groovy:236)
	at groovy.grape.Grape.grab(Grape.java:153)
	at org.apache.camel.main.DownloaderHelper.downloadDependency(DownloaderHelper.java:71)
	at org.apache.camel.main.CommandLineDependencyDownloader.downloadDependencies(CommandLineDependencyDownloader.java:66)
	at org.apache.camel.main.CommandLineDependencyDownloader.doInit(CommandLineDependencyDownloader.java:47)
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
	at org.apache.camel.support.service.ServiceHelper.initService(ServiceHelper.java:84)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1553)
	at org.apache.camel.impl.engine.AbstractCamelContext.addService(AbstractCamelContext.java:1498)
	at org.apache.camel.impl.engine.AbstractCamelContext.addService(AbstractCamelContext.java:1493)
	at org.apache.camel.impl.engine.AbstractCamelContext.addService(AbstractCamelContext.java:1488)
	at org.apache.camel.main.KameletMain.createCamelContext(KameletMain.java:263)
	at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:399)
	at org.apache.camel.main.KameletMain.doInit(KameletMain.java:161)
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
	at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:505)
	at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:165)
	at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:65)
	at picocli.CommandLine.executeUserObject(CommandLine.java:1953)
	at picocli.CommandLine.access$1300(CommandLine.java:145)
	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2358)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2352)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2314)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2179)
	at picocli.CommandLine$RunLast.execute(CommandLine.java:2316)
	at picocli.CommandLine.execute(CommandLine.java:2078)
	at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:53)
	at main.CamelJBang.main(CamelJBang.java:37)
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-04 12:20:50.0,,,,,,,,,,,"0|z121pk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
openapi-rest-dsl-generator - Generates wrong yaml,CAMEL-18052,13443086,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/May/22 10:37,04/May/22 10:56,13/Jul/23 08:34,04/May/22 10:56,,,,,3.17.0,,,,,tooling,,,,,0,,,"When having a single operation per verb, then its not yaml generated as an array which the DSL model expects",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17819,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-05-04 10:37:06.0,,,,,,,,,,,"0|z121mo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Webhook - error to set Webhook URL,CAMEL-18049,13443002,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zbendhiba,zbendhiba,zbendhiba,03/May/22 17:12,07/Sep/22 07:44,13/Jul/23 08:34,07/Sep/22 07:44,,,,,3.18.2,3.19.0,,,,camel-webhook,,,,,0,,,"The method that is supposed to set the webhook URL seems trying to delete the webhook URL.

refering to this method : [https://github.com/apache/camel/blob/f7c953c790337322f9db3ec792a5410e3f6923cb/components/camel-telegram/src/main/java/org/apache/camel/component/telegram/service/TelegramServiceRestBotAPIAdapter.java#L184]

 

While trying to execute the Spring Boot webhook example here: [https://github.com/apache/camel-spring-boot-examples/tree/main/webhook :|https://github.com/apache/camel-spring-boot-examples/tree/main/webhook]

the API responds : 
{code:java}
WebhookResult{ok=true, result=true, description='Webhook is already deleted'} {code}",,zbendhiba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue May 03 17:13:40 UTC 2022,,,,,,,,,,,"0|z12140:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/May/22 17:13;zbendhiba;Investigating on this one;;;",,,,,,,,,,,,,,,,,,,,,,,,,
doCatch of a rollback only executes one line after doCatch and prune the rest of the route,CAMEL-18042,13442961,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yasserzamani,yasserzamani,03/May/22 13:10,06/Jun/22 10:19,13/Jul/23 08:34,06/Jun/22 10:19,3.16.0,,,,3.18.0,,,,,came-core,,,,,0,,,"I have following route (simplified)
{code:java}
        from(""quartz://MY_CTRL?cron=0+0/10+8-12+?+*+MON-FRI"").routeId(""MY_CTRL"").
                transacted(""PROPAGATION_NEVER"").
.
.
.
                doTry().
                to(""direct:MY_CSV"").
                doCatch(Throwable.class).
                log(""CSV generation or upload failed. So delete azure blob"").
                log(""blahblahblah"").
                end(); // end try

        from(""direct:MY_CSV"").routeId(""MY_CSV"").
                transacted().
.
.
.
                filter(body().isNotEqualTo(Boolean.TRUE)).
                rollback()
                stop().
                end().
.
.
.
{code}

that doesn't print {{blahblahblah}}. When I replace {{rolback()}} with {{throwException(new RuntimeException(""Failed to upload""))}} it does.",,davsclaus,rhuanrcoha,yasserzamani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Jun 04 10:16:17 UTC 2022,,,,,,,,,,,"0|z120uw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/May/22 13:23;davsclaus;You added `stop` which tells Camel to not continue routing, so the doFinally will stop too. ;;;","03/May/22 14:39;yasserzamani;[~davsclaus] Firstly I'm not talking about doFinally, but about doCatch. It's not the case anyway. Furthermore everyone rationally expects stopping the rest of the route when exception occurs, you're right, but I'm talking about the first route.

 

Sorry I think you haven't read description carefully please. Again, when I use {{throwException(new RuntimeException(""Failed to upload""))}} instead of {{rollback()}} in the second route, I see both logs in the first route (i.e. it doesn't stop in your words). But with {{rollback()}} I see only the first log. Trust me. I struggled a lot with it. In summary we can't catch the exception thrown by {{rolback()}} in Camel, because I don't know what Camel does internally but anyway it causes to execute only one step after doCatch and prunes the rest of the route.;;;","09/May/22 09:42;yasserzamani;[~davsclaus] I accidentally (because of another app another route) realized that looks like in new versions of Camel, doTry doCatch needs *two* {{.end()}} s! (it doesn't match Camel docs). That being said, when I add another {{.end() // end catch}} before last {{.end()}} in the first route above, it starts working with {{{}.rollback(){}}}!!!;;;","04/Jun/22 10:16;yasserzamani;So I faced the issue again. I'm sure that {{.doCatch}} doesn't work properly with {{.rollback}}.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty (producer) wrongly closes client channels,CAMEL-18027,13442260,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vincenzo.galluccio,vincenzo.galluccio,28/Apr/22 08:52,20/Jun/22 17:21,13/Jul/23 08:34,20/Jun/22 17:21,3.14.2,3.16.0,,,3.14.4,3.18.0,,,,camel-netty,,,,,0,,,"The Camel Netty component (NettyProducer) is wrongly closing TCP/IP client channels when the {{requestTimeout}} option is configured.

See logs:

 
{code:java}
2022-04-21 15:21:46.410  INFO 18420 --- [           main] o.a.c.component.netty.NettyComponent     : Creating shared NettyConsumerExecutorGroup with 17 threads
2022-04-21 15:21:46.683 DEBUG 18420 --- [           main] o.a.camel.component.netty.NettyProducer  : Created NettyProducer pool[maxTotal=1, minIdle=100, maxIdle=100, minEvictableIdleDuration=PT-0.001S] -> GenericObjectPool [maxTotal=1, blockWhenExhausted=true, maxWaitDuration=PT-0.001S, lifo=true, fairness=false, testOnCreate=false, testOnBorrow=true, testOnReturn=false, testWhileIdle=true, durationBetweenEvictionRuns=PT30S, numTestsPerEvictionRun=3, minEvictableIdleTimeDuration=PT-0.001S, softMinEvictableIdleTimeDuration=PT-0.001S, evictionPolicy=org.apache.commons.pool2.impl.DefaultEvictionPolicy@580d3612, closeLock=java.lang.Object@5b0039aa, closed=false, evictionLock=java.lang.Object@52bf5065, evictor=org.apache.commons.pool2.impl.BaseGenericObjectPool$Evictor@263cece5, evictionIterator=null, factoryClassLoader=java.lang.ref.WeakReference@1730f396, oname=org.apache.commons.pool2:type=GenericObjectPool,name=pool, creationStackTrace=java.lang.Exception
[...]
, borrowedCount=0, returnedCount=0, createdCount=0, destroyedCount=0, destroyedByEvictorCount=0, destroyedByBorrowValidationCount=0, activeTimes=StatsStore [[]], size=100, index=0], idleTimes=StatsStore [[]], size=100, index=0], waitTimes=StatsStore [[]], size=100, index=0], maxBorrowWaitDuration=PT0S, swallowedExceptionListener=null, factoryType=null, maxIdle=100, minIdle=0, factory=org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory@4d2745b3, allObjects={}, createCount=0, idleObjects=[], abandonedConfig=null]
2022-04-21 15:51:11.502 TRACE 18420 --- [roducerTemplate] o.a.camel.component.netty.NettyProducer  : Pool[active=0, idle=0]
2022-04-21 15:51:11.504 DEBUG 18420 --- [roducerTemplate] o.a.camel.component.netty.NettyProducer  : Created new TCP client bootstrap connecting to localhost:19001 with options: Bootstrap(BootstrapConfig(group: NioEventLoopGroup, channelFactory: ReflectiveChannelFactory(NioSocketChannel.class), options: {SO_KEEPALIVE=true, SO_REUSEADDR=true, TCP_NODELAY=true, CONNECT_TIMEOUT_MILLIS=2000}, handler: org.apache.camel.component.netty.DefaultClientInitializerFactory@624ce9ff, resolver: io.netty.resolver.DefaultAddressResolverGroup@6e4616a3))
2022-04-21 15:51:11.505 TRACE 18420 --- [roducerTemplate] o.a.camel.component.netty.NettyProducer  : Requested channel: AbstractBootstrap$PendingRegistrationPromise@270856c0(incomplete)
2022-04-21 15:51:11.505 TRACE 18420 --- [roducerTemplate] o.a.camel.component.netty.NettyProducer  : activateObject channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(incomplete)
2022-04-21 15:51:11.505 TRACE 18420 --- [roducerTemplate] o.a.camel.component.netty.NettyProducer  : Validating connecting channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(incomplete) -> true
2022-04-21 15:51:11.505 TRACE 18420 --- [roducerTemplate] o.a.camel.component.netty.NettyProducer  : Got channel request from pool AbstractBootstrap$PendingRegistrationPromise@270856c0(incomplete)
2022-04-21 15:51:11.509 DEBUG 18420 --- [ClientTCPWorker] .a.c.c.n.DefaultClientInitializerFactory : Client SSL handler configured and added to the ChannelPipeline: io.netty.handler.ssl.SslHandler@735dd507
2022-04-21 15:51:11.509 TRACE 18420 --- [ClientTCPWorker] .a.c.c.n.DefaultClientInitializerFactory : Using request timeout 5000 millis
2022-04-21 15:51:11.509 TRACE 18420 --- [ClientTCPWorker] .a.c.c.n.DefaultClientInitializerFactory : Created ChannelPipeline: DefaultChannelPipeline{(DefaultClientInitializerFactory#0 = org.apache.camel.component.netty.DefaultClientInitializerFactory), (ssl = io.netty.handler.ssl.SslHandler), (decoder-0 = io.netty.handler.codec.LengthFieldBasedFrameDecoder), (decoder-1 = util.SharableByteArrayDecoder), (encoder-0 = io.netty.handler.codec.LengthFieldPrepender), (encoder-1 = io.netty.handler.codec.bytes.ByteArrayEncoder), (timeout = io.netty.handler.timeout.ReadTimeoutHandler), (handler = org.apache.camel.component.netty.handlers.ClientChannelHandler)}
2022-04-21 15:51:11.511 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Channel open finished with AbstractBootstrap$PendingRegistrationPromise@270856c0(success)
2022-04-21 15:51:11.511 DEBUG 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Creating connector to address: localhost:19001
2022-04-21 15:51:11.511 DEBUG 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Channel: [id: 0x80278f7c, L:/127.0.0.1:61770 - R:localhost/127.0.0.1:19001] writing body: OMITTED
2022-04-21 15:51:11.517 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Channel open: [id: 0x80278f7c, L:/127.0.0.1:61770 - R:localhost/127.0.0.1:19001]
2022-04-21 15:51:11.637 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Operation complete DefaultChannelPromise@1835894c(success)
2022-04-21 15:51:11.642 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Message received: OMITTED
2022-04-21 15:51:11.642 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Removing timeout channel as we received message
2022-04-21 15:51:11.642 DEBUG 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Channel: [id: 0x80278f7c, L:/127.0.0.1:61770 - R:localhost/127.0.0.1:19001] received body: OMITTED
2022-04-21 15:51:11.643 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Putting channel back to pool [id: 0x80278f7c, L:/127.0.0.1:61770 - R:localhost/127.0.0.1:19001]
2022-04-21 15:51:11.643 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : passivateObject channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(success)
2022-04-21 15:51:11.645 DEBUG 18420 --- [nio-8087-exec-5] eHttpServletFilter$AsyncExceptionHandler : handling on complete for async event
2022-04-21 15:51:16.770 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : activateObject channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(success)
2022-04-21 15:51:16.771 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : reset the request timeout as we activate the channel
2022-04-21 15:51:16.771 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : Validating channel: [id: 0x80278f7c, L:/127.0.0.1:61770 - R:localhost/127.0.0.1:19001] -> true
2022-04-21 15:51:16.771 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : passivateObject channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(success)
2022-04-21 15:51:21.771 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Exception caught at Channel: [id: 0x80278f7c, L:/127.0.0.1:61770 - R:localhost/127.0.0.1:19001]
io.netty.handler.timeout.ReadTimeoutException: null
2022-04-21 15:51:21.772 DEBUG 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Closing channel as an exception was thrown from Netty
io.netty.handler.timeout.ReadTimeoutException: null
2022-04-21 15:51:21.772 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyHelper    : Channel closed: [id: 0x80278f7c, L:/127.0.0.1:61770 ! R:localhost/127.0.0.1:19001]
2022-04-21 15:51:21.773 TRACE 18420 --- [ClientTCPWorker] o.a.camel.component.netty.NettyProducer  : Channel closed: [id: 0x80278f7c, L:/127.0.0.1:61770 ! R:localhost/127.0.0.1:19001]
2022-04-21 15:51:46.773 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : activateObject channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(success)
2022-04-21 15:51:46.773 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : reset the request timeout as we activate the channel
2022-04-21 15:51:46.773 TRACE 18420 --- [ns-pool-evictor] o.a.camel.component.netty.NettyProducer  : Destroying channel request: AbstractBootstrap$PendingRegistrationPromise@270856c0(success)
{code}
 

The offending code seems to be: [https://github.com/apache/camel/blob/main/components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java]



 
{code:java}
        @Override
        public void activateObject(PooledObject<ChannelFuture> p) throws Exception {
            ChannelFuture channelFuture = p.getObject();
            LOG.trace(""activateObject channel request: {}"", channelFuture);
            if (channelFuture.isSuccess() && producer.getConfiguration().getRequestTimeout() > 0) {
                LOG.trace(""reset the request timeout as we activate the channel"");
                Channel channel = channelFuture.channel();
                ChannelHandler handler = channel.pipeline().get(""timeout"");
                if (handler == null) {
                    ChannelHandler timeout
                            = new ReadTimeoutHandler(producer.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);
                    channel.pipeline().addBefore(""handler"", ""timeout"", timeout);
                }
            }
        }
{code}
 ",,davsclaus,vincenzo.galluccio,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/camel-netty.20.28producer.29.20wrongly.20closes.20client.20channels/near/279684447,,,,,,,,,,9223372036854775807,,,,Mon Jun 20 17:18:30 UTC 2022,,,,,,,,,,,"0|z11wk0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/May/22 05:32;davsclaus;Why do you think its wrong - the timeout was hit and as such the channel can be regarded as invalid from the client point of view, and therefore is closed to avoid using a stale channel on next use.;;;","10/May/22 07:22;vincenzo.galluccio;Good morning Claus,

It is wrong because, as you can see from the logs (at 2022-04-21 15:51:11.642), the response is received on time, therefore the request timeout should not be hit and channel should not be closed. ;;;","20/Jun/22 17:18;davsclaus;Thanks for reporting I can see the problem and have a fix;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jt400 - Endpoint syntax is wrong in metadata,CAMEL-18015,13441865,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Apr/22 16:34,28/Apr/22 03:58,13/Jul/23 08:34,26/Apr/22 16:43,,,,,3.17.0,,,,,camel-jt400,,,,,0,,,"The syntax in the metadata is wrong, it should use that old as400 standard",,davsclaus,ThePrez,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Apr 28 03:58:30 UTC 2022,,,,,,,,,,,"0|z11u4o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Apr/22 03:58;ThePrez;Thanks!! 

[commit link for reference|https://github.com/apache/camel/commit/507017ec5b647ab57e3d6caa4972142eed70f17c];;;",,,,,,,,,,,,,,,,,,,,,,,,,
Simple Language: Invoke clone() method,CAMEL-17999,13440884,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sbrauns,sbrauns,21/Apr/22 09:31,04/Jun/22 13:28,13/Jul/23 08:34,04/Jun/22 13:28,3.14.2,,,,3.14.4,3.18.0,,,,camel-core,,,,,0,,,"I am getting an exception if the clone method is invoked on an object (which has an implemented clone method) via simple language:
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: clone() on null due to:
* org.apache.camel.component.bean.MethodNotFoundException: Method with name: clone() not found on bean ...

Example code:
...
.to(""language://simple:${body.clone()}"")
...
For full example see attachment:
InvokeCloneTest.java

Same code worked with Camel 2.X","Camel Version: 3.14.2
Windows 10
AdoptOpenJDK\jdk-8.0.265.01-hotspot and AdoptOpenJDK\jdk-11.0.8+10",davsclaus,sbrauns,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Apr/22 09:28;sbrauns;InvokeCloneTest.java;https://issues.apache.org/jira/secure/attachment/13042721/InvokeCloneTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Jun 04 13:28:13 UTC 2022,,,,,,,,,,,"0|z11o4g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Jun/22 13:28;davsclaus;Thanks for reporting and the unit test;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-microprofile-config: CamelMicroProfilePropertiesSource loadProperties cannot handle empty property values,CAMEL-17996,13440845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,21/Apr/22 06:43,21/Apr/22 08:39,13/Jul/23 08:34,21/Apr/22 08:39,3.17.0,,,,3.17.0,,,,,camel-microprofile-config,,,,,0,,,"Since CAMEL-17831 any routes in Camel Quarkus that contain property placeholders have started to fail.

https://github.com/apache/camel-quarkus/issues/3739

It seems that CamelMicroProfilePropertiesSource.loadProperties cannot deal with empty String properties as it treats the property lookup as mandatory.",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-04-21 06:43:44.0,,,,,,,,,,,"0|z11nvs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-starter - camel.component.netty.ssl-context-parameters does not work,CAMEL-17992,13440615,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,vincenzo.galluccio,vincenzo.galluccio,20/Apr/22 08:33,27/Apr/22 14:57,13/Jul/23 08:34,27/Apr/22 12:32,3.14.2,3.16.0,,,3.14.3,3.17.0,,,,camel-netty,camel-spring-boot-starters,,,,0,,,"Setting the *camel.component.netty.ssl-context-parameters* (camel-netty-starter) does not work. 

The application starts but then when I produce a message (NettyProducer), it fails because from what I can see in the logs the Channel has not been configured with SSL (SSLEngine not configured, Client SSL handler not configured).

If I use the query parameter instead: `{*}&ssl=true&sslContextParameters=#sslContextParameters{*}` it works just fine.

For reference, this is how I set the springboot properties:
{code:java}
camel.component.netty.ssl=true
camel.component.netty.ssl-context-parameters=#sslContextParameters
{code}
This is an example of how the Spring bean looks like:
{code:java}
@Bean(name = ""sslContextParameters"")
public SSLContextParameters getSSLContextParameters() {
// code omitted to keep it short
SSLContextParameters scp = new SSLContextParameters();
scp.setSecureSocketProtocol(""TLSv1.2"");
scp.setSecureSocketProtocols(sspp);
scp.setServerParameters(scsp);
scp.setClientParameters(sccp);
scp.setKeyManagers(kmp);
scp.setTrustManagers(tmp);
return scp;{code}",,davsclaus,klease78,vincenzo.galluccio,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/camel-netty-starter/near/279415875,,,,,,,,,,9223372036854775807,,,,Wed Apr 27 12:08:42 UTC 2022,,,,,,,,,,,"0|z11mhk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Apr/22 17:09;klease78;I analyzed this and found the cause. In fact the spring parameters are correctly set in the configuration on the NettyComponent. But then it calls NettyConfiguration.parseURI() and if this does not find ""ssl=true"" in the URI for the endpoint, it sets it to false, overriding the configuration. I'll push a fix.;;;","27/Apr/22 05:04;davsclaus;Karen, if you have time you are welcome to cherry-pick this to 3.14.x branch;;;","27/Apr/22 12:08;klease78;Sure, I'll do that.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: field values are not restored correctly after operation,CAMEL-17979,13440075,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jeremyross,jeremyross,17/Apr/22 22:03,17/Apr/22 22:05,13/Jul/23 08:34,17/Apr/22 22:05,3.16.0,,,,3.17.0,,,,,camel-salesforce,,,,,0,,,"E.g., camel clears the value of an external Id field prior to sending to salesforce (per salesforce API requirements). The field values are being restored *after* the callback is invoked, however it should be done prior to invoking the callback.",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-04-17 22:03:56.0,,,,,,,,,,,"0|z11jiw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Route watch reload will not start routes again if previous failed,CAMEL-17975,13439964,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Apr/22 17:14,16/Apr/22 19:28,13/Jul/23 08:34,16/Apr/22 19:27,,,,,3.17.0,,,,,camel-core,camel-jbang,,,,0,,,"If you run jbang in --reload mode and do an update that causes the routes to fail, such as invalid yaml routes etc, then after fixing it, the other routes is not started, as previous would have removed all the routes.

eg this happens when you have 2+ routes in separate files, eg foo.xml bar.xml, and then bar.xml fails, then foo.xml is not reloaded",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17974,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-04-16 17:14:39.0,,,,,,,,,,,"0|z11iug:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http - Infinite loop when setting retries,CAMEL-17949,13439226,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,memas.kal,memas.kal,12/Apr/22 14:58,01/Jun/22 13:28,13/Jul/23 08:34,01/Jun/22 07:41,3.14.2,,,,3.14.4,3.18.0,,,,camel-netty-http,,,,,0,,,"When setting re-deliveries in case of `NettyHttpOperationFailedException` it seems that the exchange is submitted back to netty's executor group without incrementing the attempts counter, resulting to an infinite loop. This example works as expected when using the `camel-http` component.

{code:java}
    onException(NettyHttpOperationFailedException.class)
        .maximumRedeliveries(2)
        .retryAttemptedLogLevel(LoggingLevel.WARN)
        .backOffMultiplier(5)
        .maximumRedeliveryDelay(500)
        .useExponentialBackOff()
        .handled(false);
{code}



{noformat}
12-04-2022 17:41:57[Test worker] [INFO ] o.a.camel.test.junit5.CamelTestSupport - Testing: retry_when_destination_fails_to_consume() (route.WebhooksRouteBuilderTest)
12-04-2022 17:41:57[Test worker] [INFO ] o.a.camel.test.junit5.CamelTestSupport - ********************************************************************************
12-04-2022 17:41:59[Test worker] [INFO ] o.a.camel.component.netty.NettyComponent - Creating shared NettyConsumerExecutorGroup with 25 threads
12-04-2022 17:41:59[Test worker] [INFO ] o.a.c.impl.engine.AbstractCamelContext - Routes startup (total:1 started:1)
12-04-2022 17:41:59[Test worker] [INFO ] o.a.c.impl.engine.AbstractCamelContext -     Started mo-webhook (direct://mo-queue)
12-04-2022 17:41:59[Test worker] [INFO ] o.a.c.impl.engine.AbstractCamelContext - Apache Camel 3.14.2 (camel-1) started in 450ms (build:116ms init:225ms start:109ms)
12-04-2022 17:42:02[Camel Thread #1 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 0 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:02[Camel Thread #2 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:03[Camel Thread #3 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:03[Camel Thread #4 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:04[Camel Thread #5 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:04[Camel Thread #6 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:05[Camel Thread #7 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:05[Camel Thread #8 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:06[Camel Thread #9 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:06[Camel Thread #10 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:07[Camel Thread #11 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
12-04-2022 17:42:07[Camel Thread #12 - NettyClientTCPWorker] [WARN ] o.a.c.p.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 0C03F6022475684-0000000000000000 on ExchangeId: 0C03F6022475684-0000000000000000). On delivery attempt: 1 caught: org.apache.camel.component.netty.http.NettyHttpOperationFailedException: Netty HTTP operation failed invoking null with statusCode: 500
{noformat}


",,davsclaus,klease78,memas.kal,orpiske,rhuanrcoha,,,,,,,,,,,,,,,,,,,,,,CAMEL-18158,,,,,,,,"02/May/22 19:39;memas.kal;netty-http-bug.zip;https://issues.apache.org/jira/secure/attachment/13043177/netty-http-bug.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jun 01 07:41:41 UTC 2022,,,,,,,,,,,"0|z11eao:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Apr/22 16:16;davsclaus;Are you able to build an unit test that reproduces this, and attach to this JIRA or send as github PR;;;","02/May/22 19:54;memas.kal;Hello [~davsclaus], I created a minimal example attached above, hope it helps. As I found out, the ""bug"" doesn't occur when using an InOut exchange pattern.;;;","30/May/22 00:00;rhuanrcoha;Hi,

I sent a PR that solve this issue. https://github.com/apache/camel/pull/7687;;;","30/May/22 16:35;rhuanrcoha;Should I assign this ticket to me? Any action here?;;;","31/May/22 07:29;orpiske;[~rhuanrcoha] I think you can assign the ticket to yourself if you are planning to work on it (as you have a PR opened for it already).;;;","31/May/22 07:33;davsclaus;Only contributors whom have done more work can assign tickets. Until then you just write a comment that you work on this.;;;","01/Jun/22 07:41;orpiske;Closing the ticket since the code was merged to main and back-ported to 3.14.x. Thanks to everyone that has contributed with code, reproducers and reviews to this ticket.

 

I also logged a future improvement to the solution in the ticket CAMEL-18158.;;;",,,,,,,,,,,,,,,,,,,
Race condition in MockEndpoint with PER_CLASS tests,CAMEL-17948,13439180,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,essobedo,essobedo,essobedo,12/Apr/22 12:35,14/Apr/22 09:39,13/Jul/23 08:34,14/Apr/22 09:39,3.16.0,,,,3.17.0,,,,,camel-mock,,,,,0,,,"While working on CAMEL-17945, I realized that the tests with the scope {{PER_CLASS}} leveraging the {{MockEndpoint}} to define their assertions can fail randomly because of a race condition issue. Indeed, with the current code, a message of a previous test method can potentially call the method {{countDown}} on the latch of the following test method causing unexpected behavior.",,davsclaus,essobedo,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17955,,,,,CAMEL-17945,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Apr 14 08:43:03 UTC 2022,,,,,,,,,,,"0|z11e0g:",9223372036854775807,Regression,Unit Test Broken,,,,,,,,,,,,,,,,,,,"12/Apr/22 12:53;essobedo;The related PR https://github.com/apache/camel/pull/7420;;;","12/Apr/22 16:15;davsclaus;This test in camel-core ThrottlingExceptionRoutePolicyTest is now failing. It may be that the test source code can be updated after this PR, or that its a fringe error. Its something about expecting the mock to be slower.;;;","12/Apr/22 16:48;essobedo;[~davsclaus] Are there other failing tests? Did you create a ticket for that? I will have a look to it;;;","12/Apr/22 16:50;davsclaus;No its the only test failing. No ticket created.;;;","13/Apr/22 08:25;essobedo;The PR of a second fix that limits the impact https://github.com/apache/camel/pull/7430;;;","13/Apr/22 15:36;davsclaus;False alarm, its fast again

[INFO] Camel :: Core ...................................... SUCCESS [03:48 min];;;","14/Apr/22 08:35;essobedo;One test is failing due to this change which is {{org.apache.camel.component.ahc.ws.WsProducerConsumerTest.testRestartServer}} more details  here https://ci-builds.apache.org/job/Camel/job/Apache%20Camel/job/main/247/testReport/;;;","14/Apr/22 08:43;essobedo;The fix for the regression https://github.com/apache/camel/pull/7448;;;",,,,,,,,,,,,,,,,,,
Quartz Scheduler - unscheduleTask should check if scheduler is clustered,CAMEL-17940,13438993,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,3Rf0,3Rf0,11/Apr/22 15:18,12/Apr/22 07:53,13/Jul/23 08:34,12/Apr/22 07:53,3.15.0,,,,3.11.7,3.14.3,3.17.0,,,camel-quartz,camel-quartz2,,,,0,,,"Hello everybody,

when we are in a clustered environment and we want use quartz scheduler to poll our directories, there is a wrong behaviour when a single node shutting down. In the class *QuartzScheduledPollConsumerScheduler* the method *unscheduleTask* does not perform the same checks that are done by the *doStop* method, causing the deletion of the triggers that should be used by the node still running.

 
{code:java}
@Override
public void unscheduleTask() {
    if (trigger != null) {
        LOG.debug(""Unscheduling trigger: {}"", trigger.getKey());
        try {
            quartzScheduler.unscheduleJob(trigger.getKey());
        } catch (SchedulerException e) {
            throw RuntimeCamelException.wrapRuntimeCamelException(e);
        }
    }
} {code}
{code:java}
@Override
protected void doStop() throws Exception {
    if (trigger != null && deleteJob) {
        boolean isClustered = quartzScheduler.getMetaData().isJobStoreClustered();
        if (!quartzScheduler.isShutdown() && !isClustered) {
            LOG.info(""Deleting job {}"", trigger.getKey());
            quartzScheduler.unscheduleJob(trigger.getKey());
        }
    }
} {code}
 

Thanks regards

Michele",,3Rf0,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Apr 12 07:53:53 UTC 2022,,,,,,,,,,,"0|z11cvc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Apr/22 16:08;davsclaus;Can you provide a github PR against main branch with a suggested fix, and it would be good if you had tested this fix in your clusterted environment.;;;","11/Apr/22 17:40;3Rf0;Hi Claus, 

I have created a Github PR, I hope that can be useful for you.

 

Regards,

Michele;;;","12/Apr/22 07:53;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Run from github issue with classpath resources,CAMEL-17927,13438428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Apr/22 16:15,11/Apr/22 17:52,13/Jul/23 08:34,11/Apr/22 17:52,3.16.0,,,,3.17.0,,,,,camel-jbang,,,,,0,,,"~/Downloads ❯ jbang camel@apache/camel run https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java                                                                       ✘ INT
[jbang] Resolving dependencies...
[jbang] Artifacts used for dependency management:
         org.apache.camel:camel-bom:pom:3.17.0-SNAPSHOT
[jbang] org.apache.camel:camel-jbang-core:jar:3.17.0-SNAPSHOT
         org.apache.camel.kamelets:camel-kamelets:jar:0.7.1
         org.apache.camel.kamelets:camel-kamelets-utils:jar:0.7.1
Done
[jbang] Dependencies resolved
[jbang] Building jar...
A new lock file was created, delete the file to stop running:
/Users/davsclaus/Downloads/./.run13545688403169638587.camel.lock
2022-04-07 18:15:06.002  INFO 72320 --- [           main] org.apache.camel.main.MainSupport        : Apache Camel (JBang) 3.17.0-SNAPSHOT is starting
2022-04-07 18:15:06.020  INFO 72320 --- [           main] org.apache.camel.main.MainSupport        : Additional files added to classpath: https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java
2022-04-07 18:15:06.125  INFO 72320 --- [           main] component.properties.PropertiesComponent : PropertiesComponent added custom PropertiesSource (factory): camel-dsl-modeline
java.lang.IllegalArgumentException: Unable to determine file extension for resource: classpath:
	at org.apache.camel.impl.engine.DefaultRoutesLoader.resolveRoutesBuilderLoader(DefaultRoutesLoader.java:200)
	at org.apache.camel.impl.engine.DefaultRoutesLoader.preParseRoute(DefaultRoutesLoader.java:137)
	at org.apache.camel.main.RoutesConfigurer.configureModeline(RoutesConfigurer.java:278)
	at org.apache.camel.main.BaseMainSupport.modelineRoutes(BaseMainSupport.java:510)
	at org.apache.camel.main.BaseMainSupport.autoconfigure(BaseMainSupport.java:390)
	at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:566)
	at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:395)
	at org.apache.camel.main.KameletMain.doInit(KameletMain.java:121)
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
	at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:348)
	at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:134)
	at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:47)
	at picocli.CommandLine.executeUserObject(CommandLine.java:1953)
	at picocli.CommandLine.access$1300(CommandLine.java:145)
	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2358)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2352)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2314)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2179)
	at picocli.CommandLine$RunLast.execute(CommandLine.java:2316)
	at picocli.CommandLine.execute(CommandLine.java:2078)
	at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:43)
	at main.CamelJBang.main(CamelJBang.java:37)",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-04-07 16:15:40.0,,,,,,,,,,,"0|z119ew:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-kafka: ""breakOnFirstError"" option is not respected",CAMEL-17925,13438389,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,eandre,eandre,07/Apr/22 12:11,28/Jun/22 07:43,13/Jul/23 08:34,28/Jun/22 07:43,3.12.0,3.14.2,3.15.0,3.16.0,3.18.0,,,,,camel-kafka,,,,,0,,,"*Description:*
Errors thrown in kafka-consumer routes with ""breakOnFirstError"" enabled does not trigger reprocessing in 3.12.0 and forward, as if option ""breakOnFirstError"" is not respected.

*Reproduction:*
 * Configure a route consuming from kafka with option ""breakOnFirstError"" enabled
 * Trigger an exception in route

*Expected result:*
 * Should break out, seek back to offset of the message that caused the failure and then reattempt to process the message (as per the [docs|[https://camel.apache.org/components/3.14.x/kafka-component.html]]: )

*Actual result:*
 * Consumer continuous to next message



*GitHub project reproducing the issue*

[https://github.com/espeandr/camel-kafka-break-on-error-demo]

Test-runs
3.16.0 (failing): [https://github.com/espeandr/camel-kafka-break-on-error-demo/runs/5886049034?check_suite_focus=true]
3.11.6 (succeeding): https://github.com/espeandr/camel-kafka-break-on-error-demo/runs/5886221956?check_suite_focus=true",,davsclaus,eandre,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jun 28 07:43:03 UTC 2022,,,,,,,,,,,"0|z11968:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"07/Apr/22 14:16;davsclaus;I wonder if you could put this up as a ready to run spring boot project on github so its quick for us to try,
or build as an integration test for camel-kafka so we can have it as a test case for the future - see existing tests how they are done.;;;","08/Apr/22 14:03;eandre;I've updated the description with a github spring boot project;;;","07/May/22 07:22;davsclaus;Cn you try with latest SNAPSHOT code or with 3.17 when its released as we keep improving camel-kafka;;;","11/May/22 06:21;eandre;I'm guessing 3.17.0-SNAPSHOT isn't released somewhere and readily available for testing? I will test when 3.17 is released, at least.;;;","19/May/22 12:30;eandre;Issue is still present in 3.17.0.;;;","27/Jun/22 17:18;klease78;A refactoring moved the handling of exceptions into the catch clause of the processor, but the error handler had already caught the exception. I have modified it to check if an exception is set on the Exchange which makes the test case contributed by [~eandre] work correctly.;;;","27/Jun/22 17:51;davsclaus;Can this be backported to 3.14.x branch ?;;;","27/Jun/22 18:25;klease78;Yes, it looks like the same code there.;;;","27/Jun/22 19:28;davsclaus;Okay you are welcome to backport;;;","28/Jun/22 07:36;klease78;For 3.14.x, modifying the exception handling code doesn't make test case work. It appears that the fetch position is not actually reset so the message isn't read again. I suspect it's related to the changes in the commit handling introduced in more recent versions but that is too complicated to backport, at least for me.;;;","28/Jun/22 07:43;davsclaus;Thanks for looking, lets keep this for 3.18 onwards.;;;",,,,,,,,,,,,,,,
[camel-web3j] Incorrect default value supplier for header MIX_DIGEST,CAMEL-17922,13438339,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,essobedo,essobedo,essobedo,07/Apr/22 09:34,07/Apr/22 12:44,13/Jul/23 08:34,07/Apr/22 12:44,3.16.0,,,,3.17.0,,,,,,,,,,0,,,The default value supplier of the header MIX_DIGEST is the value of the option _headerPowHash_ while we would rather expect _mixDigest_,,essobedo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Apr 07 09:38:57 UTC 2022,,,,,,,,,,,"0|z118v4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Apr/22 09:38;essobedo;The corresponding PR https://github.com/apache/camel/pull/7385;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms2 - preserveMessageQoS seems to not work as expected,CAMEL-17912,13438138,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lukymiv,lukymiv,06/Apr/22 10:00,12/Apr/22 17:32,13/Jul/23 08:34,12/Apr/22 17:04,3.11.6,3.14.2,,,3.11.7,3.14.3,3.17.0,,,,,,,,0,,,"In SJMS2 producer parameter preserveMessageQos doesn't work. Message arrives with default durability and priority values, not from headers

If the parameter _preserveMessageQos_  value is true, the values from the headers _JMSPriority, JMSDeliveryMode, and JMSExpiration_ are not set when the message is sent.

*Steps*

# Install and run Apache Artemis (user/password root/root)
# Create ANYCAST queue IN from console http://localhost:8161/console
# Send nondurable message with 0 priority in queue IN
# Run Sjms2MoveTest from sjms2Move maven project in attachment
# Check message in OUT queue

*Expected Behavior:*

Message nondurable and has 0 priority

*Received Behavior:*

Message durable and has 4 priority (default values)

 !CreateQueue.png!
 !SendMessage.png!
 !MessageIN.png! 
 !MessageOUT.png! 


 

","JDK 8

camel-version 3.14.2

",davsclaus,lukymiv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Apr/22 09:26;lukymiv;CreateQueue.png;https://issues.apache.org/jira/secure/attachment/13042067/CreateQueue.png","06/Apr/22 09:54;lukymiv;MessageIN.png;https://issues.apache.org/jira/secure/attachment/13042065/MessageIN.png","06/Apr/22 09:55;lukymiv;MessageOUT.png;https://issues.apache.org/jira/secure/attachment/13042064/MessageOUT.png","06/Apr/22 09:54;lukymiv;SendMessage.png;https://issues.apache.org/jira/secure/attachment/13042066/SendMessage.png","06/Apr/22 09:59;lukymiv;sjms2Move-1.rar;https://issues.apache.org/jira/secure/attachment/13042063/sjms2Move-1.rar",,5.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Apr 12 17:32:21 UTC 2022,,,,,,,,,,,"0|z117mo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Apr/22 14:18;davsclaus;Thanks for reporting and the good guide on how to reproduce

You are welcome to dive into the code and see if you can find the bug / suggestion where it is / and if possible an attempted fix. Github PRs is welcome;;;","12/Apr/22 17:32;lukymiv;Thanks for your reply, Сlaus. May I ask, how does this component camel-sjms2 differ from the usual camel-jms in the 3.x version, does it have any advantages over the camel-jms component? In the 2.x version, it had transaction batching, the producers count, its own thread pool, now it has been rewritten, this is not there.;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo2 : I/O Dispatcher threads leak,CAMEL-17911,13438122,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,klease78,twinkleshah,twinkleshah,06/Apr/22 09:10,23/Jun/22 07:28,13/Jul/23 08:34,21/Jun/22 18:31,3.16.0,,,,3.14.4,3.18.0,,,,camel-olingo2,,,,,0,,,"Discussion thread:

[https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/camel-olingo2.20.3A.20I.2FO.20Dispatcher.20threads.20leak]

 

Details:

While using camel-onlingo2 to read from ODataV2 endpoint in Java, the ""I/O Dispatcher"" threads are left running even after closing the camel context.

Camel version: 3.15.0/3.16.0
With camel version 2.24.1, the issue was not reproducible.

Attaching a demo project to show the issue. Run ODataReaderTest.java to reproduce the issue

[^CamelOData.zip]

-> With 3.15.0/3.16.0 version, there are 12 I/O Dispatcher threads which keeps running after every execution. So, every time the odata call is made the *number of left over threads are piling up. This is eating up the resources on the server.*
-> If camel version is changed to 2.24.1 ( build.gradle file, change value of camelVersion ), then with camel context stop, all the I/O Dispatcher threads are also closed. The same test case (ODataReaderTest) will pass with 2.24.1 version.

*Analysis:*
The below code is getting called twice for every execution and because of the IF condition multiple instances of Olingo2AppWrapper (apiProxy) are getting created.

[https://github.com/apache/camel/blob/camel-3.15.0/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java#L121]

And each of this instance creates 12 I/O Dispatcher threads. When camel context is closed only one of the instance of apiProxy ( the one which is created last) is closed, which leaves threads created by first instance as it is in RUNNING state.

With older version (2.24.1), only one instance of Olingo2AppWrapper (apiProxy) was getting created.

There is configuration variable defined in newer version which didn't exist in older version. This seems to be impacting the IF conditions and leading to multiple apiProxy instances.
Olingo2Configuration configuration;",,davsclaus,klease78,twinkleshah,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Apr/22 09:07;twinkleshah;CamelOData.zip;https://issues.apache.org/jira/secure/attachment/13042061/CamelOData.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jun 23 07:28:11 UTC 2022,,,,,,,,,,,"0|z117j4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Apr/22 14:19;davsclaus;Thanks for reporting and the reproducer. We are busy so it may take some time for us to take a look.

Community users is very welcome to take a look and help.
Also it would be good to know if there is a similar issues in olingo4 component.;;;","21/Jun/22 17:18;davsclaus;Karen do you think that your PR fixes this?;;;","21/Jun/22 17:41;klease78;Yes, I tried it with the example provided here. But I didn't convert that to a new test case.;;;","21/Jun/22 18:31;davsclaus;Thanks for fixing this;;;","23/Jun/22 07:06;twinkleshah;Hi [~davsclaus] ,

Any possibilities of putting this fix to 3.6.x  version?;;;","23/Jun/22 07:28;davsclaus;No 3.6 is a non LTS version - we never patch these. And its also EOL.;;;",,,,,,,,,,,,,,,,,,,,
camel-jms - InOut with reply-to-type shared - race condition,CAMEL-17910,13438102,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Apr/22 07:49,08/Apr/22 08:08,13/Jul/23 08:34,08/Apr/22 08:07,3.11.6,3.14.2,3.16.0,,3.11.7,3.14.3,3.17.0,,,camel-jms,,,,,1,,,"In org.apache.camel.component.jms.reply.MessageSelectorCreator we should use a local lock instance to ensure that get / timeout does not trigger concurrently that can render the dirty flag in wrong state, when under high load.

Also add fail-safe to the JMSCorrelationID returned so it cannot return an empty ID in the selector JMSCorrelationID=",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Apr 06 08:06:15 UTC 2022,,,,,,,,,,,"0|z117eo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Apr/22 08:06;davsclaus;In older Camel versions we use .size() > 0 which is not safe when using concurrency - but we changed to isEmpty that is safe.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-google-pubsub - concurrent access error on shutdown,CAMEL-17901,13437621,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,vpaturet,vpaturet,04/Apr/22 12:51,05/Apr/22 09:53,13/Jul/23 08:34,05/Apr/22 09:53,3.14.1,,,,3.14.3,3.17.0,,,,camel-google-pubsub,,,,,0,,,"We experience random errors when stopping a Camel application (Camel 3.14.1) that cause the application to hang forever and not release the Camel Master leadership:

 
{code:java}
Error stopping consumer while loosing leadership. This exception is ignored.. Caused by: [java.lang.NullPointerException - null] java.lang.NullPointerException: null
at java.base/java.util.LinkedList$ListItr.next(Unknown Source)
at java.base/java.lang.Iterable.forEach(Unknown Source)
at org.apache.camel.component.google.pubsub.GooglePubsubConsumer.doStop(GooglePubsubConsumer.java:85){code}",,davsclaus,vpaturet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Apr 05 09:53:24 UTC 2022,,,,,,,,,,,"0|z114i8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Apr/22 16:09;davsclaus;Can you send a PR for 3.14.x branch;;;","05/Apr/22 09:45;vpaturet;PR created: https://github.com/apache/camel/pull/7365;;;","05/Apr/22 09:53;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,
Guava is overriden to an older version in bigquery starter,CAMEL-17884,13436734,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,claudio4j,claudio4j,30/Mar/22 18:27,30/Mar/22 18:35,13/Jul/23 08:34,30/Mar/22 18:34,,,,,3.17.0,,,,,camel-spring-boot,,,,,0,,,"[camel-bigquery component declares dependency|https://github.com/apache/camel/blob/main/components/camel-google/camel-google-bigquery/pom.xml#L44] of com.google.guava:guava using google-cloud-guava-version property which is version 30.0-jre

However the [parent pom|https://github.com/apache/camel-spring-boot/blob/main/parent/pom.xml#L68] of camel-spring-boot overrides it with google-guava-version property which is an older version 20.0

See the dependency:tree of camel-google-bigquery-starter
{code}
mvn dependency:tree -f components-starter/camel-google-bigquery-starter/pom.xml |grep guava
[INFO] |  +- com.google.guava:guava:jar:20.0:compile
{code}

After the fix to use the google-cloud-guava-version property
{code}
mvn dependency:tree -f components-starter/camel-google-bigquery-starter/pom.xml |grep guava|grep google
[INFO] +- com.google.guava:guava:jar:30.0-jre:compile
{code}",,claudio4j,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-30 18:27:53.0,,,,,,,,,,,"0|z10zg0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: DTO template has bad import,CAMEL-17883,13436726,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jeremyross,jeremyross,jeremyross,30/Mar/22 17:35,30/Mar/22 18:26,13/Jul/23 08:34,30/Mar/22 18:26,3.16.0,,,,3.17.0,,,,,camel-salesforce,,,,,0,,,sobject-pojo.vm has an erroneous import: MultiSelectPicklistConverter,,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-30 17:35:50.0,,,,,,,,,,,"0|z10ze8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-main - NPE during stopping all routes,CAMEL-17867,13436309,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Mar/22 05:22,29/Mar/22 08:01,13/Jul/23 08:34,29/Mar/22 08:01,3.16.0,,,,3.17.0,,,,,camel-main,,,,,0,,,"2022-03-29 07:22:00.018  WARN 24335 --- [ownCamelContext] .apache.camel.main.MainLifecycleStrategy : Error during stopping all routes. This exception is ignored.
java.lang.NullPointerException: null
        at org.apache.camel.impl.engine.AbstractCamelContext.stopAllRoutes(AbstractCamelContext.java:1229) ~[camel-base-engine-3.16.0.jar:3.16.0]
        at org.apache.camel.impl.engine.InternalRouteController.stopAllRoutes(InternalRouteController.java:78) ~[camel-base-engine-3.16.0.jar:3.16.0]
        at org.apache.camel.impl.engine.DefaultRouteController.stopAllRoutes(DefaultRouteController.java:99) ~[camel-base-engine-3.16.0.jar:3.16.0]
        at org.apache.camel.main.MainDurationEventNotifier.stopTask(MainDurationEventNotifier.java:164) ~[camel-main-3.16.0.jar:3.16.0]
        at java.lang.Thread.run(Thread.java:829) ~[?:?]",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-29 05:22:57.0,,,,,,,,,,,"0|z10wts:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql: CamelSqlGeneratedKeyRows is not populated if already exists,CAMEL-17866,13436216,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,jeremyross,jeremyross,28/Mar/22 17:03,30/Mar/22 20:19,13/Jul/23 08:34,30/Mar/22 20:19,3.16.0,,,,3.17.0,,,,,camel-sql,,,,,0,,,"If the CamelSqlGeneratedKeyRows header already exists, subsequent operations will not overwrite with new values.",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-28 17:03:56.0,,,,,,,,,,,"0|z10wa0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-platform-http-vertx: CORS conflict in Camel REST,CAMEL-17865,13436187,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,28/Mar/22 14:34,29/Mar/22 00:48,13/Jul/23 08:34,29/Mar/22 00:48,3.16.0,,,,3.14.3,3.17.0,,,,camel-platform-http-vertx,,,,,0,,,"It response *400* when the rest define with *consumes* and CORS enabled.

 
{code:java}
restConfiguration().component(""platform-http"").enableCORS(true);

rest(""/rest"")
        .post()
        .consumes(""application/json"")
        .to(""direct:rest"");

from(""direct:rest"")
        .setBody(simple(""Hello ${body}"")); {code}",,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-28 14:34:22.0,,,,,,,,,,,"0|z10w3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Streaming  in Azure (Blob-Storage)  component not working ,CAMEL-17861,13436121,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,mueller110,mueller110,28/Mar/22 09:43,06/May/22 13:12,13/Jul/23 08:34,05/May/22 07:11,3.14.1,,,,3.17.0,,,,,camel-azure,,,,,0,,,"As described in the email conversation below we are having memory problems with the current implementation of the azure (blob storage component). 
Concretely the component does not stream properly!

_But looking at this stacktrace and the corresponding sourcecode it’s obvious that the whole stream is read to memory to check the total payload size (seems necessary for the azure client)_
As we transfer mass data with the azure component we consider this a major bug as we cannot use the azure-component as long as it does not stream properly. 

Thx and Regards Christian

Email History (camel user mailing list): 
*Response from Claus Ibsen:* 
What are the sources of those streams?
I wonder if we could enrich from the message some sort of total size header
into the camel blob producer, so it can tell the blob client the expected
length, so it does not read the stream itself to find out.
Also if you have the opportunity you are welcome to test with latest Camel
3.9.0 release, if its still a problem.
 
And you are welcome to create a JIRA as it would be great to have streaming
work well with azure, especially for blob as its supposed to be also big
blobs of data ;)

*initial question from Lukas Angerer:* 
We are transferring lots of data to the azure-storage with the azure-storage-blob component (version 3.7.0)
The Route itself is only working with streams to keep the memory overhead low, streamcaching is enabled.

But looking at this stacktrace and the corresponding sourcecode it’s obvious that the whole stream is read to memory to check the total payload size (seems necessary for the azure client)

 

Caused by: java.lang.OutOfMemoryError: Java heap space

            at org.apache.commons.io.output.AbstractByteArrayOutputStream.toByteArrayImpl(AbstractByteArrayOutputStream.java:366)

            at org.apache.commons.io.output.ByteArrayOutputStream.toByteArray(ByteArrayOutputStream.java:163)

            at org.apache.commons.io.IOUtils.toByteArray(IOUtils.java:2241)

            at org.apache.camel.component.azure.storage.blob.BlobUtils.getInputStreamLength(BlobUtils.java:37)

            at org.apache.camel.component.azure.storage.blob.BlobStreamAndLength.createBlobStreamAndLengthFromExchangeBody(BlobStreamAndLength.java:50)

            at org.apache.camel.component.azure.storage.blob.operations.BlobOperations.uploadBlockBlob(BlobOperations.java:181)

            at org.apache.camel.component.azure.storage.blob.BlobProducer.process(BlobProducer.java:86)

            at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66)

            at org.apache.camel.processor.SendDynamicProcessor.lambda$process$0(SendDynamicProcessor.java:195)

I was wondering if there is a better way to do this. Maybe a shortcut for the cached stream that just checks the size of the cache?

 ",,davsclaus,mueller110,ramu11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri May 06 12:33:19 UTC 2022,,,,,,,,,,,"0|z10vow:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Mar/22 12:21;davsclaus;Can you take a look at the aws components for its blob storage component (such as s3) - i think we have done some better streamining support there that can be good to compare with;;;","22/Apr/22 16:25;mueller110;Hi [~davsclaus], sry for my late response. 
Following your suggestion i checked the aws storage component! My suggestion is to determine the length of the stream like it is done in: 
[https://github.com/apache/camel/blob/abb1ad84fac520b00339533a2eafdeb901e22d87/components/camel-aws/camel-aws2-s3/src/main/java/org/apache/camel/component/aws2/s3/utils/AWS2S3Utils.java#L83]

is it ok if i create a pull request for that?;;;","25/Apr/22 09:16;davsclaus;Yes a PR is much welcome;;;","25/Apr/22 16:57;mueller110;[~davsclaus] fyi https://github.com/apache/camel/pull/7493;;;","06/May/22 12:30;mueller110;Hi [~davsclaus], i tested the solution and found out that it does not work for FileInputStreamCache
i created a new pullrequest that properly handels FileInputStreamCache as well 
[https://github.com/apache/camel/pull/7561/]
regards christian;;;","06/May/22 12:33;mueller110;ah sry. just saw that you already fixed that :)
i will close my pull request;;;",,,,,,,,,,,,,,,,,,,,
camel-smpp: Consumer sometimes tries to reconnect only once,CAMEL-17859,13436033,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,pascalschumacher,pascalschumacher,27/Mar/22 17:50,01/Dec/22 07:23,13/Jul/23 08:34,01/Dec/22 07:23,3.15.0,,,,3.18.3,3.19.0,,,,camel-smpp,,,,,0,,,"We have been running multiple applications using Camel SMPP with a consumer with lazy session creation for years without any problems.

Recently we observed that sometimes Camel 3.15.0 only tries to reconnect once.

Log:
{code}
Time - thread_name - logger_name - message
Mar 22, 2022 @ 01:16:59.798 - PDUReaderWorker-b333f18a - org.jsmpp.session.SMPPSession - Reading PDU session b333f18a in state BOUND_TX: Connection reset
Mar 22, 2022 @ 01:16:59.801 - EnquireLinkSender-b333f18a - org.jsmpp.session.AbstractSession - Response timeout on enquireLink
Mar 22, 2022 @ 01:16:59.801 - EnquireLinkSender-b333f18a - org.apache.camel.component.smpp.SmppProducer - Lost connection to: smpp://USER@HOST:PORT - trying to reconnect...
Mar 22, 2022 @ 01:16:59.824 - EnquireLinkSender-b333f18a - org.apache.camel.support.task.BackgroundTask - Interrupted while waiting for the repeatable task to execute: null
java.lang.InterruptedException: null
               at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(Unknown Source)
               at java.base/java.util.concurrent.CountDownLatch.await(Unknown Source)
               at org.apache.camel.support.task.BackgroundTask.waitForTaskCompletion(BackgroundTask.java:153)
               at org.apache.camel.support.task.BackgroundTask.run(BackgroundTask.java:144)
               at org.apache.camel.component.smpp.SmppProducer.reconnect(SmppProducer.java:197)
               at org.apache.camel.component.smpp.SmppProducer.lambda$new$0(SmppProducer.java:76)
               at org.apache.camel.component.smpp.SmppProducer$$Lambda$1087/0x000000002b4df3c8.onStateChange(Unknown Source)
               at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:85)
               at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
               at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:66)
               at org.jsmpp.session.AbstractSession.close(AbstractSession.java:257)
               at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:503)
Mar 22, 2022 @ 01:17:04.824 - Camel (camel-1) thread #3797 - smpp-producer-reconnect - org.apache.camel.component.smpp.SmppProducer - Trying to reconnect to smpp://USER@HOST:PORT
Mar 22, 2022 @ 01:17:04.833 - Camel (camel-1) thread #3797 - smpp-producer-reconnect - org.jsmpp.session.SMPPSession - Connected from port 59810 to /PORT:PORT
Mar 22, 2022 @ 01:17:04.834 - PDUReaderWorker-d0566380 - org.jsmpp.session.SMPPSession - Starting PDUReaderWorker
Mar 22, 2022 @ 01:17:04.844 - PDUReaderWorker-d0566380 - org.jsmpp.session.SMPPSession - Reading PDU session d0566380 in state OPEN: null
Mar 22, 2022 @ 01:17:04.845 - pool-58909-thread-1 - org.jsmpp.session.SMPPSession - Failed setting so_timeout for session timer
java.net.SocketException: Socket is closed
               at java.base/java.net.Socket.setSoTimeout(Unknown Source)
               at org.jsmpp.session.connection.socket.SocketConnection.setSoTimeout(SocketConnection.java:60)
               at org.jsmpp.session.SMPPSession$BoundSessionStateListener.onStateChange(SMPPSession.java:721)
               at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:85)
               at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
               at org.jsmpp.session.AbstractSessionContext.bound(AbstractSessionContext.java:49)
               at org.jsmpp.session.state.SMPPSessionOpen.processBindResp(SMPPSessionOpen.java:73)
               at org.jsmpp.session.PDUProcessTask.run(PDUProcessTask.java:62)
               at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
               at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
               at java.base/java.lang.Thread.run(Unknown Source)
Mar 22, 2022 @ 01:17:04.845 - pool-58909-thread-1 - org.jsmpp.session.SMPPSession - Changing processor degree to 1
Mar 22, 2022 @ 01:17:04.847 - Camel (camel-1) thread #3797 - smpp-producer-reconnect - org.jsmpp.session.SMPPSession - Receive negative bind response
Mar 22, 2022 @ 01:17:04.847 - PDUReaderWorker-d0566380 - org.apache.camel.component.smpp.SmppProducer - Lost connection to: smpp://USER@HOST:PORT - trying to reconnect...

[no further reconnects or anything related to smpp producing]

[almost seven hours later the application tries to produce the first sms (this and all further tries to produce fail):] 
org.apache.camel.processor.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: XZY on ExchangeId: XZY). Exhausted after delivery attempt: 1 caught: java.io.IOException: Lost connection to smpp://USER@HOST:PORT and yet not reconnected
{code}

The log of another instance showed the same behavior.

[~orpiske] I am not sure, but I think this may be another regression caused by CAMEL-17121 It would be great if you could have a look at this. Thank you very much!",,orpiske,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Dec 01 07:23:56 UTC 2022,,,,,,,,,,,"0|z10v5c:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"28/Mar/22 05:30;orpiske;Thanks for the heads up. I'll take a look.;;;","28/Mar/22 07:24;orpiske;I haven't been able to reproduce this one yet. If you have any additional details about your scenario (or maybe a reproducer?), that would be very helpful. 

 

I have been using the producer [reconnect test|https://github.com/apache/camel/blob/main/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/integration/SmppProducerReconnectManualIT.java] along with the options ""&lazySessionCreation=true&lazyStartProducer=true""  to do so.

 

Maybe something's missing on the test?

 ;;;","28/Mar/22 17:50;pascalschumacher;Thank you very much for locking into this! :)

I should have mentioned that we are only using {{lazySessionCreation}} (not {{{}lazyStartProducer{}}}).

I fear that the problem is more complex than the scenario tested by the reconnect test.

Sadly I do not have I reproducer.

In the logs I see multiple threads accessing {{{}SmppProducer{}}}. My best guess is that another thread must still hold the {{{}connectLock{}}}. Therefore {{connectLock.tryLock()}} in [https://github.com/apache/camel/blob/bc487f3f1645702e0ac9329bdb30b380a0380f7d/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java#L192] returns {{false}} for the {{PDUReaderWorker-d0566380}} thread and no {{reconnectTask}} is started.;;;","29/Mar/22 08:00;orpiske;[~pascalschumacher] that helps a lot, actually. I think your assessment could be correct.

 

If you are OK with it, I'd like to propose a two-step approach as I am unable to reproduce it: let me create a PR with some additional logs around that part (and others), and then I can create a fix for it. I'll do that later today and if you are able to test it, it would be awesome.;;;","29/Mar/22 18:05;pascalschumacher;[~orpiske] Thank you very much!

I do not know if I will be able to reproduce the problem in a test environment, but I will give it a try.;;;","05/Oct/22 09:02;orpiske;[~pascalschumacher] is this still an issue? I am wondering if the recent versions gave you more information about this?;;;","30/Nov/22 14:21;pascalschumacher;[~orpiske]  Sorry for the late reply. The issue did not reoccur. My guess it that it is still present, but a very a rare race condition (or did you or anybody else fix something I am not aware of?). As there has been no new information for a long time it is o.k. to close it. We can always reopen or create a new issue.;;;","01/Dec/22 07:22;orpiske;[~pascalschumacher] there were no other fixes I am aware of, so I guess it's a rare condition. I agree with closing the ticket for now ... In case it happens, we can reopen. 

Thanks for the update!;;;","01/Dec/22 07:23;orpiske;It may have been fixed as part of 3.18.x, so closing it for now.;;;",,,,,,,,,,,,,,,,,
camel-validator: remote xsd import not usable,CAMEL-17857,13435841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,Federico Mariani,Federico Mariani,Federico Mariani,25/Mar/22 14:25,28/Mar/22 08:09,13/Jul/23 08:34,28/Mar/22 07:22,3.16.0,,,,3.17.0,,,,,camel-validator,,,,,0,,,"camel-validator concat imports from xsd to the base endpoint, ex.
{code:java}
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""
            targetNamespace=""http://example.org/ord""
            xmlns=""http://example.org/ord""
            xmlns:prod=""http://example.org/prod"">
  <xs:include schemaLocation=""https://raw.githubusercontent.com/Croway/test-xsd/main/chapter04ord2.xsd""/>
  <xs:include schemaLocation=""https://raw.githubusercontent.com/Croway/test-xsd/main/chapter04cust.xsd""/>
  <xs:import namespace=""http://example.org/prod""
                 schemaLocation=""https://raw.githubusercontent.com/Croway/test-xsd/main/chapter04prod.xsd""/>
...
{code}
with a route like 
{code:java}
...
.toD(""validator:https://raw.githubusercontent.com/Croway/test-xsd/main/chapter04ord1.xsd"")
...
{code}
the validator component concat the base endpoint with the import one, for example: _https://raw.githubusercontent.com/Croway/test-xsd/main/https://raw.githubusercontent.com/Croway/test-xsd/main/chapter04prod.xsd _ and the following exception is thrown
{code}
Caused by: java.io.FileNotFoundException: https://raw.githubusercontent.com/Croway/test-xsd/main/https:/raw.githubusercontent.com/Croway/test-xsd/main/chapter04ord2.xsd
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1993)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1589)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:224)
	at org.apache.camel.impl.engine.DefaultResourceResolvers$HttpsResolver$1.getInputStream(DefaultResourceResolvers.java:202)
...
{code}",,davsclaus,Federico Mariani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Mar 28 08:09:43 UTC 2022,,,,,,,,,,,"0|z10tzc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Mar/22 10:32;davsclaus;Its bad practice IMHO to have remote XSD imports as that makes your app depedent on that remote service being online.;;;","28/Mar/22 08:09;Federico Mariani;I'm sorry I lost your comment, I agree with you, remote XSD import is not a good practice, but XSDs like [https://www.w3.org/2012/04/XMLSchema.xsd] use this feature, therefore I opened the PR.;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka: lock concurrency issue in the record fetcher,CAMEL-17850,13435574,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,24/Mar/22 13:17,25/Mar/22 11:14,13/Jul/23 08:34,25/Mar/22 11:14,,,,,3.17.0,,,,,camel-kafka,,,,,0,,,During stop the code tries to unlock the lock even if trying to lock it previously has failed (ie.: by failling a call to tryLock). This can cause the code to throw a IllegalMonitorStateException.,,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 25 11:14:42 UTC 2022,,,,,,,,,,,"0|z10scg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Mar/22 11:14;orpiske;Fixed with https://github.com/apache/camel/pull/7264;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka - DNS unresolvable bootstrap servers causes consumer to endless loop,CAMEL-17813,13434304,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Mar/22 08:40,18/Mar/22 17:23,13/Jul/23 08:34,17/Mar/22 17:40,,,,,3.16.0,,,,,camel-kafka,,,,,0,,,"2022-03-17 09:37:15.086  WARN 4825 --- [nsumer[parcels]] .camel.component.kafka.KafkaFetchRecords : Error creating org.apache.kafka.clients.consumer.KafkaConsumer due Failed to construct kafka consumer
org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:823) ~[kafka-clients-3.1.0.jar:?]
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:664) ~[kafka-clients-3.1.0.jar:?]
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:645) ~[kafka-clients-3.1.0.jar:?]
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:625) ~[kafka-clients-3.1.0.jar:?]
	at org.apache.camel.component.kafka.DefaultKafkaClientFactory.getConsumer(DefaultKafkaClientFactory.java:34) ~[camel-kafka-3.16.0-SNAPSHOT.jar:3.16.0-SNAPSHOT]
	at org.apache.camel.component.kafka.KafkaFetchRecords.createConsumer(KafkaFetchRecords.java:128) ~[camel-kafka-3.16.0-SNAPSHOT.jar:3.16.0-SNAPSHOT]
	at org.apache.camel.component.kafka.KafkaFetchRecords.run(KafkaFetchRecords.java:89) ~[camel-kafka-3.16.0-SNAPSHOT.jar:3.16.0-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]
	at java.lang.Thread.run(Thread.java:829) ~[?:?]
Caused by: org.apache.kafka.common.config.ConfigException: No resolvable bootstrap urls given in bootstrap.servers
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:89) ~[kafka-clients-3.1.0.jar:?]
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:48) ~[kafka-clients-3.1.0.jar:?]
	at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:730) ~[kafka-clients-3.1.0.jar:?]
	... 11 more",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-17 08:40:18.0,,,,,,,,,,,"0|z10kj4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka - Offsets resetting when another Camel node is shutdown,CAMEL-17798,13433830,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,rgala,rgala,15/Mar/22 09:34,16/Mar/22 06:30,13/Jul/23 08:34,16/Mar/22 06:30,3.15.0,,,,3.16.0,,,,,camel-kafka,,,,,0,,,"After upgrading to 3.15.0 we began to experience lots of situations where offsets on topics get reset when one of the JVMs running Camel gets shut down (Camel is shut down gracefully, we have at least 2 JVMs running in parallel that consume events from topics for the same consumer group). This is a problem when a topic contains millions of events because we need to retrieve all of them again. We have auto commit enabled and do not use any manual commit management.

This what gets logged on a running JVM when we shut down the other one:
{noformat}
2022-03-15 09:59:40.285 [Camel (camel-1) thread #17 - KafkaConsumer[*masked*]] INFO  org.apache.kafka.clients.consumer.internals.Fetcher.handleOffsetOutOfRange:1413 - [Consumer clientId=consumer-*masked*-40, groupId=*masked*] Fetch position FetchPosition{offset=0, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[*masked*:9093 (id: 2 rack: O66)], epoch=643}} is out of range for partition *masked*-3, resetting offset 

2022-03-15 09:59:40.519 [kafka-coordinator-heartbeat-thread | *masked*] INFO  org.apache.kafka.clients.consumer.internals.SubscriptionState.maybeSeekUnvalidated:398 - [Consumer clientId=consumer-*masked*-40, groupId=*masked*] Resetting offset for partition *masked*-3 to position FetchPosition{offset=2193522, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[*masked*:9093 (id: 2 rack: O66)], epoch=643}}.{noformat}
This does not occur on 3.14.2. I believe this may be related to commit manager introduced in 3.15.0, but I have not managed to confirm it yet.",,davsclaus,orpiske,rgala,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17802,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 16 06:30:46 UTC 2022,,,,,,,,,,,"0|z10hm8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Mar/22 10:53;rgala;I think I got it. It looks like the problem is in PartitionAssignmentListener's *onPartitionsRevoked* method that gets called when the other JVM is shut down:
{code:java}
            String offsetKey = serializeOffsetKey(partition);
            Long offset = lastProcessedOffset.get(offsetKey);
            if (offset == null) {
                offset = -1L;
            }
            try {
                // only commit offsets if the component has control
                if (configuration.getAutoCommitEnable()) {
                    if (stopping) {
                        commitManager.commitOffsetOnStop(partition, offset);
                    } else {
                        commitManager.commitOffset(partition, offset);
                    }

                }
{code}
When there were no message consumed from the topic (no new messages arrived since the consumer subscribed) the *offset* variable here is null because *lastProcessedOffset* map does not contain infomation about last processed offset for the partition . It is then set to -1 and passed to *commitManager.commitOffset(partition, offset)* method:

 
{code:java}
private void commitSync(TopicPartition partition, long partitionLastOffset) {
    long timeout = configuration.getCommitTimeoutMs();
    consumer.commitSync(
            Collections.singletonMap(partition, new OffsetAndMetadata(partitionLastOffset + 1)),
            Duration.ofMillis(timeout));
} {code}
which commits offset 0 for the partition causing all events to be received again.

 

I think that last commited offset for a consumer group and partition should be retrieved from Kafka somehow and assigned to *lastProcessedOffset* map upon subscription, or the commit should not happen at all when auto commit is enabled. Just let Kafka handle this and consumers should receive events that arrived since last auto commit.

 

Shouldn't the 
{code:java}
if (configuration.getAutoCommitEnable()) { {code}
be
{code:java}
if (!configuration.getAutoCommitEnable()) { {code}
instead ?;;;","15/Mar/22 12:37;davsclaus;Yeah I think that too

1) Dont commit if offset == -1
2) Only do this if auto commit is disabled

[~orpiske] any thoughts?;;;","15/Mar/22 12:55;orpiske;I think you all got the analysis correct. In short, I think we can try what Claus suggested (quotting):

 

""

1) Dont commit if offset == -1
2) Only do this if auto commit is disabled

""

 

I'll take a look at it this week - unless someone wants to go ahead and do the fix.;;;","15/Mar/22 13:33;rgala;I have made a pull request.

 

I am also wondering about this part of {*}CommitManagers{*}:
{code:java}
if (configuration.isAutoCommitEnable()) {
    if (""async"".equals(configuration.getAutoCommitOnStop())) {
        return new AsyncCommitManager(consumer, kafkaConsumer, threadId, printableTopic);
    } else if (""sync"".equals(configuration.getAutoCommitOnStop())) {
        return new SyncCommitManager(consumer, kafkaConsumer, threadId, printableTopic);
    } else if (""none"".equals(configuration.getAutoCommitOnStop())) {
        return new NoopCommitManager(consumer, kafkaConsumer, threadId, printableTopic);
    }
} {code}
Do we really need commit managers in case of auto commit?;;;","15/Mar/22 13:43;orpiske;Yes we do. We have to manage the *autoCommitOnStop*;;;","15/Mar/22 14:13;rgala;I think the commit is done automatically by Kafka client when the consumer is closed.;;;","15/Mar/22 14:17;orpiske;> I think the commit is done automatically by Kafka client when the consumer is closed.

 

That's certainly possible (but I wouldn't know for sure).

This could be a left-over from when Camel used older clients. If you get a chance, would you mind opening a ticket for us/me to investigate that, please?;;;","15/Mar/22 14:26;rgala;There you go - CAMEL-17802;;;","15/Mar/22 15:24;rgala;I managed to workaround the issue by setting {*}autoCommitOnStop=none{*}, thanks to this the commit manager does nothing now :);;;","15/Mar/22 15:45;rgala;I think that my today's change should be reconsidered cause it conflicts with the following CommitManager's part:


{code:java}
if (configuration.isAutoCommitEnable()) {
    if (""async"".equals(configuration.getAutoCommitOnStop())) {
        return new AsyncCommitManager(consumer, kafkaConsumer, threadId, printableTopic);
    } else if (""sync"".equals(configuration.getAutoCommitOnStop())) {
        return new SyncCommitManager(consumer, kafkaConsumer, threadId, printableTopic);
    } else if (""none"".equals(configuration.getAutoCommitOnStop())) {
        return new NoopCommitManager(consumer, kafkaConsumer, threadId, printableTopic);
    }
} {code}
because it will cause commit managers to never be used (at least not in {*}PartitionAssignmentListener{*}) in case of auto commit enabled and the *autoCommitOnStop* attribute will not work as designed anymore. I would leave only the -1 check for now until it is confirmed that we do not need manual commits at all when using auto commiting (CAMEL-17802).;;;","16/Mar/22 06:30;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,
camel-http: HttpSendDynamicAware parse uri incroectly if there are empty path and get parametrs in uri,CAMEL-17773,13433102,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ArtemSt,ArtemSt,10/Mar/22 12:56,10/Mar/22 14:37,13/Jul/23 08:34,10/Mar/22 14:37,3.14.0,,,,3.14.3,3.16.0,,,,camel-http,,,,,0,,,"There is a simple example from the http component documentation, but configured to use HttpSendDynamicAware:
{code:java}
from(""direct:start"")
   .toD(""http://oldhost?order=123&detail=short"");{code}
Sending exchange to a direct:start will return an exception:
{code:java}
Failed to resolve endpoint: http://http://oldhost due to: Failed to resolve endpoint: http://http://oldhost due to: The uri part is not configured correctly. You have duplicated the http(s) protocol.{code}
 

I belive, the core of the problem is how HttpSendDynamicAware parses uri. it's keeps scheme of uri if there is empty path. For example this test will not return the expected result:
{code:java}
@Test
public void testHttpsUndefinedPortParseUri() {
   this.httpSendDynamicAware.setScheme(""https"");
   DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost:80/"", null, null, null);
   String[] result = httpSendDynamicAware.parseUri(entry);
   assertEquals(""localhost"", result[0], ""Parse should not add port if https and not specified"");
}{code}
{code:java}
org.opentest4j.AssertionFailedError: Parse should not add port if https and not specified ==> 
Expected :localhost
Actual   :https://localhost:80/{code}
Both test classes are attached.",,ArtemSt,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Mar/22 12:53;ArtemSt;HttpProducerGetRequestTest.java;https://issues.apache.org/jira/secure/attachment/13040924/HttpProducerGetRequestTest.java","10/Mar/22 12:52;ArtemSt;HttpSendDynamicAwareWithEmptyPathTest.java;https://issues.apache.org/jira/secure/attachment/13040925/HttpSendDynamicAwareWithEmptyPathTest.java",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Mar 10 14:21:27 UTC 2022,,,,,,,,,,,"0|z10d5k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Mar/22 14:21;davsclaus;Thanks for reporting and providing unit tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cm-sms: Handle changed error message correctly,CAMEL-17768,13432810,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jondruse,jondruse,jondruse,09/Mar/22 08:52,09/Mar/22 15:21,13/Jul/23 08:34,09/Mar/22 15:21,3.16.0,,,,3.14.3,3.16.0,,,,camel-cm-sms,,,,,0,,,"Error message was changed in cm-sms. It can return an error message  _ERROR No or incorrect User node found_, which is ""translated"" as _UnknownErrorException_. It should be ""translated"" as _NoAccountFound...Exception_",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-09 08:52:34.0,,,,,,,,,,,"0|z10bcw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-csv - Empty header uri parameter interpreted as fixed column """"",CAMEL-17767,13432795,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,graben,graben,09/Mar/22 07:29,09/Mar/22 15:21,13/Jul/23 08:34,09/Mar/22 15:21,3.14.2,,,,3.14.3,3.16.0,,,,camel-csv,,,,,0,,,"Since the last ""big"" change to camel-csv in Camel 3.12.0 an empty header in uri like
{code:java}
<to uri=""dataformat:name:marshal?header=&delimiter=;""/>
{code}
is interpreted as fixed column empty String.

Maybe do empty String check while creating marshaler in ([Link|https://github.com/apache/camel/blob/2b28e5386b964f17562960402faece012aab03d5/components/camel-csv/src/main/java/org/apache/camel/dataformat/csv/CsvMarshaller.java#L62])",,davsclaus,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 09 10:04:02 UTC 2022,,,,,,,,,,,"0|z10b9k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Mar/22 08:23;davsclaus;What is the use case for setting header = blank;;;","09/Mar/22 09:17;graben;We use the marshaler in a dynamic endpoint (tod) where the fixed headers are calculated at runtime. In some cases, they are null to use dynamic columns.;;;","09/Mar/22 09:38;davsclaus;Ah okay, you are welcome to send a PR where we check for isNotEmpty instead of null check;;;","09/Mar/22 10:04;graben;PR is ready. I first thought about reuse method from ObjectHelper, but this class exists twice in package org.apache.camel.support and org.apache.camel.util. One was already in use! So did it manually. :);;;",,,,,,,,,,,,,,,,,,,,,,
Camel-quartz: endpoint enriches job detail with wrong type of data (should be String),CAMEL-17764,13432621,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,08/Mar/22 11:46,08/Mar/22 14:31,13/Jul/23 08:34,08/Mar/22 14:31,3.16.0,,,,3.14.3,3.16.0,,,,camel-quartz,,,,,0,,,"During implementation of tests for camel-quarkus's quartz extension ([issue|https://github.com/apache/camel-quarkus/issues/3579]) I hit an issue.

There is a code in QuartzEndpoint, which enriches `jobDetrail` , see [code|https://github.com/apache/camel/blob/main/components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java#L465-L467]. Unfortunatelly Quartz allows only `String` in this map - see [code|https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java#L3151-L3161]. Otherwise exception is thrown:
{code}
Caused by: java.io.IOException: JobDataMap values must be Strings when the 'useProperties' property is set.  Key of offending value: CamelQuartzTriggerSimpleRepeatInterval
{code}

Conversion of the values into String types solves the issue.",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-08 11:46:56.0,,,,,,,,,,,"0|z10a74:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test-infra: unable to define a custom Cassandra container,CAMEL-17761,13432605,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,08/Mar/22 10:09,08/Mar/22 16:05,13/Jul/23 08:34,08/Mar/22 16:05,,,,,3.14.3,3.16.0,,,,camel-test-infra,camel-test-infra-cassandra,,,,0,,,"The Cassandra container is using a fixed value for the container: https://github.com/apache/camel/blob/bbbaaf39687fa4ee4556b3e1dd42ad51a86570f1/test-infra/camel-test-infra-cassandra/src/test/java/org/apache/camel/test/infra/cassandra/services/CassandraLocalContainerService.java#L39

 

This prevents users from defining a custom container.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-03-08 10:09:58.0,,,,,,,,,,,"0|z10a3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-saga - LRASagaService does not proceed to completion or compensation routes,CAMEL-17751,13432177,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,vagpap,vagpap,05/Mar/22 15:45,06/Mar/22 18:14,13/Jul/23 08:34,06/Mar/22 18:14,3.14.1,,,,3.14.3,3.16.0,,,,,,,,,0,,,"When using LRASagaService for a saga, neither the completion or compensation routes are being triggered correctly.

 

The last version that the behaviour was correct seems to be v3.7.2

 

A project replicating the error can be found in [GitHub|https://github.com/vagpap/camel-lra-example/tree/camel-3.14.1]

The same project, with working v3.7.2, is located in branch 

[camel-3.7.2.|https://github.com/vagpap/camel-lra-example/tree/camel-3.14.1]

 

Narayana v5.12.x was used as the transaction manager in both versions.",,mcarlett,vagpap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Mar 05 15:56:22 UTC 2022,,,,,,,,,,,"0|z107h4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Mar/22 15:56;vagpap;When setting logging level to DEBUG, the following log entries were observed:

*v3.7.2*

{{2022-03-05 17:21:13.429 DEBUG 37992 --- [nio-8080-exec-3] o.a.coyote.http11.Http11InputBuffer      : Received [PUT /api/lra-participant/complete?Camel-Saga-Compensate=direct://sagaCompensated&Camel-Saga-Complete=direct://sagaCompleted HTTP/1.1}}
{{Content-Type: text/plain}}
{{Long-Running-Action: http://localhost:50000/lra-coordinator/0_ffffc0a80165_caf4_62236d7c_191}}
{{Long-Running-Action-Recovery: http://localhost:50000/lra-coordinator/recoveryhttp%3A%2F%2Flocalhost%3A50000%2Flra-coordinator%2F0_ffffc0a80165_caf4_62236d7c_191/0_ffffc0a80165_caf4_62236d7c_193}}
{{Content-Length: 0}}
{{Host: localhost:8080}}
{{Connection: Keep-Alive}}
{{{}User-Agent: Apache-HttpClient/4.5.12 (Java/11.0.7){}}}{{{}]{}}}
{{2022-03-05 17:21:13.430 DEBUG 37992 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Set query string encoding to UTF-8}}
{{2022-03-05 17:21:13.431 DEBUG 37992 --- [nio-8080-exec-3] o.a.c.authenticator.AuthenticatorBase    : Security checking request PUT /api/lra-participant/complete}}
{{2022-03-05 17:21:13.431 DEBUG 37992 --- [nio-8080-exec-3] org.apache.catalina.realm.RealmBase      :   No applicable constraints defined}}
{{2022-03-05 17:21:13.431 DEBUG 37992 --- [nio-8080-exec-3] o.a.c.authenticator.AuthenticatorBase    : Not subject to any constraint}}
{{2022-03-05 17:21:13.432 DEBUG 37992 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Set encoding to UTF-8}}
{{2022-03-05 17:21:13.433 DEBUG 37992 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Decoding query null UTF-8}}
{{2022-03-05 17:21:13.433 DEBUG 37992 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Start processing with input [Camel-Saga-Compensate=direct://sagaCompensated&Camel-Saga-Complete=direct://sagaCompleted]}}
{{2022-03-05 17:21:13.434 DEBUG 37992 --- [nio-8080-exec-3] o.a.camel.processor.FilterProcessor      : *Filter matches: true for exchange: Exchange[]*}}

 

{{*v3.14.2*}}

{{2022-03-05 17:50:41.563 DEBUG 43808 --- [nio-8080-exec-3] o.a.coyote.http11.Http11InputBuffer      : Received [PUT /api/lra-participant/complete?Camel-Saga-Compensate=direct://sagaCompensated&Camel-Saga-Complete=direct://sagaCompleted HTTP/1.1}}
{{Content-Type: text/plain}}
{{Long-Running-Action: http://localhost:50000/lra-coordinator/0_ffffc0a80165_caf4_62236d7c_1a7}}
{{Long-Running-Action-Recovery: http://localhost:50000/lra-coordinator/recoveryhttp%3A%2F%2Flocalhost%3A50000%2Flra-coordinator%2F0_ffffc0a80165_caf4_62236d7c_1a7/0_ffffc0a80165_caf4_62236d7c_1a9}}
{{Content-Length: 0}}
{{Host: localhost:8080}}
{{Connection: Keep-Alive}}
{{{}User-Agent: Apache-HttpClient/4.5.12 (Java/11.0.7){}}}{{{}]{}}}
{{2022-03-05 17:50:41.564 DEBUG 43808 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Set query string encoding to UTF-8}}
{{2022-03-05 17:50:41.564 DEBUG 43808 --- [nio-8080-exec-3] o.a.c.authenticator.AuthenticatorBase    : Security checking request PUT /api/lra-participant/complete}}
{{2022-03-05 17:50:41.565 DEBUG 43808 --- [nio-8080-exec-3] org.apache.catalina.realm.RealmBase      :   No applicable constraints defined}}
{{2022-03-05 17:50:41.566 DEBUG 43808 --- [nio-8080-exec-3] o.a.c.authenticator.AuthenticatorBase    : Not subject to any constraint}}
{{2022-03-05 17:50:41.567 DEBUG 43808 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Set encoding to UTF-8}}
{{2022-03-05 17:50:41.568 DEBUG 43808 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Decoding query null UTF-8}}
{{2022-03-05 17:50:41.568 DEBUG 43808 --- [nio-8080-exec-3] org.apache.tomcat.util.http.Parameters   : Start processing with input [Camel-Saga-Compensate=direct://sagaCompensated&Camel-Saga-Complete=direct://sagaCompleted]}}
{{2022-03-05 17:50:41.568 DEBUG 43808 --- [nio-8080-exec-3] o.a.camel.processor.FilterProcessor      : *Filter matches: false for exchange: Exchange[]*}}

 

In both of the cases, the predicate that the filter tried to match is

{{header(Camel-Saga-Complete) is not null}}

 

Narayana in both cases sends the following request:

{{PUT /api/lra-participant/complete?Camel-Saga-Compensate=direct://sagaCompensated&Camel-Saga-Complete=direct://sagaCompleted}}

 

It seems that the query parameters are not correctly parsed and added as headers in the exchange, thus the filter is failing to match. Header CamelHttpQuery contains correctly the values.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
SB actuator-http-metrics example fails,CAMEL-17744,13431959,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,04/Mar/22 11:22,04/Mar/22 11:34,13/Jul/23 08:34,04/Mar/22 11:34,,,,,,,,,,examples,,,,,0,,,"Running the example from scratch gives:
{code:java}
Caused by: java.lang.IllegalArgumentException: Cannot configure option [apiContextListing] with value [false] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [false] in Spring Boot registry
        at org.apache.camel.spring.boot.util.CamelPropertiesHelper.setCamelProperties(CamelPropertiesHelper.java:125) ~[camel-spring-boot-3.16.0-SNAPSHOT.jar:3.16.0-SNAPSHOT]
        at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration.configureRestConfigurationDefinition(RestConfigurationDefinitionAutoConfiguration.java:72) ~[camel-core-starter-3.16.0-SNAPSHOT.jar:3.16.0-SNAPSHOT]
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
        at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.3.16.jar:5.3.16]
        ... 37 common frames omitted
{code}",,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 04 11:34:06 UTC 2022,,,,,,,,,,,"0|z1064w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Mar/22 11:34;jpoth;Resolved with https://github.com/apache/camel-spring-boot/commit/07b410a73855b4ecced4de2bb675466bd53ec5d2;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Cannot load resources from nested jar inside spring boot fat jar,CAMEL-17738,13431597,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bradhgbst,bradhgbst,02/Mar/22 23:00,06/Mar/22 08:24,13/Jul/23 08:34,06/Mar/22 08:24,3.14.1,,,,3.14.3,3.16.0,,,,camel-spring-boot,,,,,0,,,"In camel 3.14.1 / spring boot 2.6.3 XML routes cannot be loaded from a nested jar.  I suspect earlier versions of both are also affected, but Camel 3.4.x + Spring Boot 2.3.x did load them ok.  

In this code from FatJarPackageScanResourceResolver, ""name"" is the nested jar name - it will end in .jar.  To traverse into the spring boot jar it would need to go into the second branch - the  ""else if""  - but it will always go into the first branch because it is a not a directory and the name does not end in .class.  

 
{code:java}
                String name = entry.getName();

                name = name.trim();
                if (!entry.isDirectory() && !name.endsWith("".class"")) {
                    name = cleanupSpringBootClassName(name);
                    // name is FQN so it must start with package name
                    if (name.startsWith(packageName)) {
                        entries.add(name);
                    }
                } else if (inspectNestedJars && !entry.isDirectory() && isSpringBootNestedJar(name)) {
                    String nestedUrl = urlPath + ""!/"" + name;
                    log.trace(""Inspecting nested jar: {}"", nestedUrl);

                    List<String> nestedEntries = doLoadImplementationsInJar(packageName, jarStream, nestedUrl, false, false);
                    entries.addAll(nestedEntries);
                }
{code}
 

I think this code was copied from the class resolver and name.endsWith("".class"") changed to !name.endswith("".class"") but it doesn't do what is needed.

 

Solution may be to swap the order of the if checks so that nested jars are found & traversed first.",,bradhgbst,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Mar 06 08:20:25 UTC 2022,,,,,,,,,,,"0|z103wg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Mar/22 06:04;davsclaus;Do you have a reproducer example you can attach here or put on github somewhere;;;","06/Mar/22 02:39;bradhgbst;Please try  [https://github.com/bradhgbst/camel-spring-boot-examples/tree/CAMEL-17738]

Changes were:
 * Change routes-configuration/pom.xml to create the spring boot fat jar with a different name (""exec"" classifier) and leave the original plain jar so it can be used as a library.
 * Add a new example subproject routes-configuration-nested.  It nests the plain jar created by routes-configuration.
 * Remove unrelated modules from the parent pom - I was having trouble getting it all to install.

 

From the parent project run ""mvn install"".  

The following things work fine - all routes are loaded and run:
 * Running ""mvn spring-boot:run"" from either of the subprojects (routes-configuration & routes-configuration-nested)
 * java -jar routes-configuration/target/camel-example-spring-boot-routes-configuration-3.16.0-SNAPSHOT-exec.jar

 
{code:java}
2022-03-06 12:22:10.925  INFO 14492 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Routes startup (total:3 started:3)
{code}
 

But what does not work is:
 * java -jar routes-configuration-nested/target/camel-example-spring-boot-routes-nested-3.16.0-SNAPSHOT.jar

For that one, the java route & error handler are loaded but nothing else.

 
{code:java}
2022-03-06 12:34:05.286  INFO 12568 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Routes startup (total:1 started:1)
{code}
 

Quite tricky to test when it is only when run from the jar that it fails.  Hope that helps!;;;","06/Mar/22 08:20;davsclaus;Thanks Brad for the reproducer, and the analysis and hint on checking nested first as that helps fix this bug;;;",,,,,,,,,,,,,,,,,,,,,,,
Connect failure : exception=java.lang.IllegalArgumentException: Buffering capacity 1048576 exceeded,CAMEL-17731,13431364,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ziauddin135,ziauddin135,01/Mar/22 20:45,02/Mar/22 18:35,13/Jul/23 08:34,02/Mar/22 18:26,3.11.1,,,,,,,,,camel-salesforce,,,,,0,,,"Hi All,

 

I am using CamelSalesforceSourceConnector kakfa connector and getting below error:-

~[2022-03-02 01:31:28,026] WARN Connect failure: \{failure={exception=java.lang.IllegalArgumentException: Buffering capacity 1048576 exceeded, message={clientId=1t911eix104cwghea2qe1aljljsl, channel=/meta/connect, id=59, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=59, successful=false} (org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper:174)~

~[2022-03-02 02:13:50,736] INFO Restarting on unexpected disconnect from Salesforce... (org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper:262)~

 

i have set bufer size of the connector  still i see same error:-

camel.component.salesforce.httpRequestBufferSize=24576

 

kindly help",,davsclaus,kinae,ziauddin135,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 02 18:26:38 UTC 2022,,,,,,,,,,,"0|z102h4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Mar/22 22:59;kinae;Looks like the httpRequestBufferSize is not the correct properties.

From a similar issue [https://github.com/forcedotcom/EMP-Connector/issues/60] : 
|Increase the maxBufferSize in the BayeuxParameters (make sure that the longPollingOptions includes that value keyed by 'maxMessageSize').|

Camel properties : *longPollingTransportProperties* 
[https://camel.apache.org/components/3.11.x/salesforce-component.html];;;","02/Mar/22 08:20;davsclaus;Can you create issues for camel-kafka-connector in its own issue tracker at
https://github.com/apache/camel-kafka-connector/issues;;;","02/Mar/22 09:29;ziauddin135;Hi [~kinae] ,

 

Thank you for responding! how to set longpollingTransportProperties to pick map in .properties file?   

i tried all but its not considering that property

~camel.component.salesforce.longPollingTransportProperties=""\{'maxMessageSize':'4194304'}""~

 

~Thanks~;;;","02/Mar/22 09:30;ziauddin135;Hi [~davsclaus] ,

 

I also posted some issues there but apologies i have not got any response yet. will copy this issue there as well 

 

Thanks ;;;","02/Mar/22 18:26;ziauddin135;Thank you [~kinae] ,

 

I have been able to increase buffer size and the error seems resolved. its not logging error in my logs :)

Just one query i am getting message from exchange which seems are not in sequence  (and there are no error in the logs) does it means i am losing messages somehow?

[2022-03-02 20:02:33,255] INFO Received Exchange 4FC158E150DA0E1-000000000001EACD with Message 4FC158E150DA0E1-000000000001EACD
[2022-03-02 20:02:33,258] INFO Received Exchange 4FC158E150DA0E1-000000000001EB10 with Message 4FC158E150DA0E1-000000000001EB10
[2022-03-02 20:02:33,258] INFO Received Exchange 4FC158E150DA0E1-000000000001EB16 with Message 4FC158E150DA0E1-000000000001EB16
[2022-03-02 20:02:33,259] INFO Received Exchange 4FC158E150DA0E1-000000000001EB1C with Message 4FC158E150DA0E1-000000000001EB1C
[2022-03-02 20:02:33,259] INFO Received Exchange 4FC158E150DA0E1-000000000001EB20 with Message 4FC158E150DA0E1-000000000001EB20
[2022-03-02 20:02:33,259] INFO Received Exchange 4FC158E150DA0E1-000000000001EB25 with Message 4FC158E150DA0E1-000000000001EB25
[2022-03-02 20:02:33,259] INFO Received Exchange 4FC158E150DA0E1-000000000001EB2B with Message 4FC158E150DA0E1-000000000001EB2B
[2022-03-02 20:02:33,259] INFO Received Exchange 4FC158E150DA0E1-000000000001EB2F with Message 4FC158E150DA0E1-000000000001EB2F
[2022-03-02 20:02:33,260] INFO Received Exchange 4FC158E150DA0E1-000000000001EB35 with Message 4FC158E150DA0E1-000000000001EB35
[2022-03-02 20:02:33,260] INFO Received Exchange 4FC158E150DA0E1-000000000001EB3C with Message 4FC158E150DA0E1-000000000001EB3C
[2022-03-02 20:02:33,260] INFO Received Exchange 4FC158E150DA0E1-000000000001EB41 with Message 4FC158E150DA0E1-000000000001EB41
[2022-03-02 20:02:33,261] INFO Received Exchange 4FC158E150DA0E1-000000000001EB49 with Message 4FC158E150DA0E1-000000000001EB49
[2022-03-02 20:02:33,262] INFO Received Exchange 4FC158E150DA0E1-000000000001EB50 with Message 4FC158E150DA0E1-000000000001EB50
[2022-03-02 20:02:33,262] INFO Received Exchange 4FC158E150DA0E1-000000000001EB56 with Message 4FC158E150DA0E1-000000000001EB56
[2022-03-02 20:02:33,262] INFO Received Exchange 4FC158E150DA0E1-000000000001EB5D with Message 4FC158E150DA0E1-000000000001EB5D
[2022-03-02 20:02:33,263] INFO Received Exchange 4FC158E150DA0E1-000000000001EB63 with Message 4FC158E150DA0E1-000000000001EB63
[2022-03-02 20:02:33,263] INFO Received Exchange 4FC158E150DA0E1-000000000001EB6B with Message 4FC158E150DA0E1-000000000001EB6B

 

 ;;;",,,,,,,,,,,,,,,,,,,,,
Camel-AWS Secret Manager Properties Source: if the subkey contains a default value the actual won't substitute correctly the secret,CAMEL-17730,13431343,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,01/Mar/22 18:22,02/Mar/22 07:26,13/Jul/23 08:34,02/Mar/22 07:15,,,,,3.16.0,,,,,,,,,,0,,,"If for example we have

{{aws:database/username:admin}}

The subkey will be username:admin, which won't work as substitution. We need to think about that case too.",,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 02 07:26:54 UTC 2022,,,,,,,,,,,"0|z102cg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Mar/22 20:15;davsclaus;Yeah you should check if the subkey also contains a colon, and if so its the default value.

Also it would be good if we can make it not fail if there is a default value, so you can run this standalone without any working AWS credentials/account etc.
;;;","02/Mar/22 07:15;acosentino;The behavior describe has been fixed. I'll do some tests about default and credentials;;;","02/Mar/22 07:26;acosentino;Created CAMEL-17732;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-ssh - Dynamic Header is not resolved in pollCommand using endpoint-dsl,CAMEL-17723,13430952,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jondruse,gnieser,gnieser,28/Feb/22 09:33,16/May/22 17:51,13/Jul/23 08:34,16/May/22 17:51,3.15.0,,,,3.18.0,,,,,camel-ssh,,,,,0,,,"Hello

I have been trying to add a dynamic argument to SSH command through a header. However the pollCommand parameter does not resolve it and issue the command as is.

Please see this Zulip discussion:

[https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Dynamic.20SSH.20command]

I also tried to create a UnitTest to replicate the issue, please see attached.

Best regards

 

 ",,davsclaus,gnieser,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Feb/22 09:31;gnieser;SshComponentProducerCommandTest.java;https://issues.apache.org/jira/secure/attachment/13040523/SshComponentProducerCommandTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 18 13:48:38 UTC 2022,,,,,,,,,,,"0|z0zzy0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Mar/22 09:49;jondruse;I went through the chat and the proposed test. 

Here is a code snippet from the test:
{code:java}
                from(""direct:ssh"")
                        .pollEnrich(""ssh://smx:smx@localhost:"" + port + ""?useFixedDelay=true&delay=40000&pollCommand=${in.header.CommandArg}%0A"")
                        .to(""mock:result""); 
{code}
Here is the relevant doc, which describes how it should work: [https://camel.netlify.app/components/latest/eips/pollEnrich-eip.html#_using_dynamic_uris]


The test misses *.simple(...)*

if test is changed (see below), it works as expected.
{code:java}
                from(""direct:ssh"")
                        .pollEnrich().simple(""ssh://smx:smx@localhost:"" + port + ""?useFixedDelay=true&delay=40000&pollCommand=${header.CommandArg}%0A"")
                        .to(""mock:result"");
{code}

[~gnieser] Does this explanation solve your problem?;;;","15/Mar/22 12:43;davsclaus;Jiri, can you try also with camel-endpointdsl, where you build the uri using the builder instead of a string uri;;;","18/Mar/22 09:35;jondruse;I'll verify it;;;","18/Mar/22 10:42;jondruse;I tested following route:

{code}
                from(""direct:ssh"")
                        .pollEnrich(
                                ssh(""localhost:"" + port).username(""smx"").password(""smx"")
                                        .useFixedDelay(true).delay(4000)
                                        .pollCommand(""${in.header.CommandArg}""))
                        .to(""mock:result"");
{code}

Result if failure: 
{code}
Expected :<test>
Actual   :<${in.header.CommandArg}>
{code}

I'll dig more into it and try to find a way of defining route to be working.;;;","18/Mar/22 13:25;jondruse;Hi [~davsclaus], I'm debugging the code and I found a reason of the wrong behavior, but I'm not sure how it should be fixed.

If the route below is used
{code:java}
                from(""direct:ssh"")
                        .pollEnrich(
                                ssh(""localhost:"" + port).username(""smx"").password(""smx"")
                                        .useFixedDelay(true).delay(4000)
                                        .pollCommand(""${header.CommandArg}""))
                        .to(""mock:result"");
{code}
SshEndpoint builder returns *encoded* uri ""ssh://localhost:40249?delay=4000&password=smx&pollCommand={*}%24%7Bheader.CommandArg%7D{*}&useFixedDelay=true&username=smx""

This uri is then evaluated as an expression in `ExpressionAdapter`, but because it is encoded, it is not evaluated correctly.

If the workaround is used (from my first omment, which fixes test to pass), then url entering `ExressionAdapter` is `ssh://smx:smx@localhost:43915?delay=4000&password=smx&pollCommand={*}${in.header.CommandArg}{*}&useFixedDelay=true` ad is resolved correctly.

I have several ideas, how to solve the problem. Following 2 approaches seem to be ""the safest ones"" (shouldn't broke other code - at least I hope)
 * value can be decoded before evaluation of the expression is triggered
 * evaluation of the expression can ""understand encoded strings"", which will make evaluation to be correct

In case you have an idea how this could be solved, please let me know. (I can fore example turn off encodidng for dsl builders, but it may cause problems - from my POV);;;","18/Mar/22 13:48;davsclaus;Jiri, great analysis

Yeah the endpoint-dsl is building up an URI string - and encoded as you say.

I wonder if the endpoint DSL builder needs for options that can be expression to expose this too

.pollCommand(""${header.CommandArg}""))

So you can do

.pollCommand(simple(""${header.CommandArg}"")))

Then its explicit that this is a simple expression.
But that requires to markup all these options that have this feature.

And it comes back to pollEnrich taking a string as input will evaluate that as simple today.
But when the string is build using endpoint-dsl, then its encoded as you analysis found out.

What we can maybe do is to have

    public Type pollEnrich(EndpointConsumerBuilder resourceUri) {
        return pollEnrich(new SimpleExpression(resourceUri.getUri()), -1, (String) null, false);
    }

Which is where this happens, we could have a getRawUri() (not encoded) on the endpoint-dsl builder methods.
Then we can likely fix this for pollEnrich and maybe a few other EIPs that does this ^^^^

;;;",,,,,,,,,,,,,,,,,,,,
Memory leak in DefaultCamelContext reported by Tomcat 10,CAMEL-17712,13430620,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tom_s4t,tom_s4t,25/Feb/22 07:50,31/Mar/22 14:19,13/Jul/23 08:34,31/Mar/22 10:43,3.14.1,,,,3.17.0,,,,,camel-core-engine,,,,,0,,,"Hello,
we are using Camel inside a Tomcat application. The application also supports reloading of the context.
Unfortunately, we are getting a memory leak report, e.g.
{code:java}
[Catalina-utility-1] org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web application [ROOT] created a ThreadLocal with key of type [java.lang.ThreadLocal.SuppliedThreadLocal] (value [java.lang.ThreadLocal$SuppliedThreadLocal@588bee00]) and a value of type [org.apache.camel.impl.DefaultCamelContext.OptionHolder] (value [org.apache.camel.impl.DefaultCamelContext$OptionHolder@1d5c4495]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.{code}
 

Looking at the code, the problem is within the java class DefaultCamelContext
[https://github.com/apache/camel/blob/main/core/camel-core-engine/src/main/java/org/apache/camel/impl/DefaultCamelContext.java]

It contains a class variable which is always instantiated with:
ThreadLocal<OptionHolder> OPTIONS = ThreadLocal.withInitial(OptionHolder::new);

This ThreadLocal is never cleaned up by OPTIONS.remove(), This should be added to the shutdown() or stop() handler maybe(?)
Some additional null checks would have to be implemented as well to make it safe.

 

Thanks,
Thomas","Apache Camel 3.14.1

Tomcat 10

Java 17",davsclaus,tom_s4t,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17588,,CAMEL-17785,CAMEL-17891,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Mar 31 14:19:10 UTC 2022,,,,,,,,,,,"0|z0zxw8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Mar/22 20:27;tom_s4t;Hello,

I tried the new version 3.14.2 but the memory leak is not fully fixed unfortunately.

Therefore I digged deeper into the problem and figured out the problem which lies a bit deeper than I tought.

The problem is when using ThreadLocal variables within CAMEL in multithreaded environments like application servers. The last fix only works in single threaded environments unfortunately.

*Background:*

Each thread in Java has a member variable or map ""threadlocals"" which stores the values which are managed by the Helper-Class ""ThreadLocal"", see:

[https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.base/share/classes/java/lang/Thread.java]

The Java-Class ThreadLocal therefore doesn't store any variable by itself but attaches every value to the current thread (within their threadlocals map).

*Reason for the memory leak:*

I explain the problem with the example of DefaultCamelContext:

The ThreadLocal variable was introduced there in version 3.9:

[https://github.com/apache/camel/blob/camel-3.9.x/core/camel-core-engine/src/main/java/org/apache/camel/impl/DefaultCamelContext.java]

When a multithreaded application server (e.g. Tomcat or glassfish) starts a CamelContext, the DefaultCamelContext.java stores via the ThreadLocal-class and member variable OPTIONS the values (OptionHolder) into the current worker thread. This worker thread might be e.g. the thread worker-1. Some http calls to the webserver might be processed with the thread worker-2. This thread gets it's own option values when working with the started CamelContext. This new options are again attached to the current thread, in this case attached to worker-2.
If the application is undeployed, this might be processed by worker-3 but worker-3 can't clean up the options of the DefaultCamelContext which are stored in other worker-threads. Therefore the worker-1 and worker-2 thread still hold references to the CAMEL objects and thus they won't get garbage collected.

*Further occurences:*

The same problem occurs in class DefaultReactiveExecutor.java.

When using ThreadLocal-classes, the worker-threads of the application server get ""polluted"" with Camel-classes and the instances stay in memory, even when the application is undeployed because the worker-thread of the applicatoin server are re-used for subsequent http requests across the hosted applications. Thus the worker threads hold references to Camel classes and can't be garbage collected.

*Possible solutions:*

I am not sure, why there is a need to use ThreadLocal class in the mentioned Camel classes because I see no reason that every (worker) thread should have their own set of camel options, camel workers etc. Maybe the ThreadLocal classes where just used to prevent multi-threaded issues?

I currently see two options to solve the problem:

1) Make sure the ThreadLocal values are cleaned up before the method exits (via remove() method). Even a get() will have the effect, that a default value gets attached to the current thread!

2) Replace the ThreadLocal variable with something else, if a per-thread variable is not needed.

I hope I could explain the complex problem well enough. If further information is needed, just drop a line. 

Thank you in advance! Thomas

 

 ;;;","31/Mar/22 04:43;davsclaus;Thanks for the deep analysis, but we cannot do #1 and will not replace it #2.

Its not a leak as the variables are stored as weak references so the JVM can unload the classes fine, its only tomcat as the app server that does this logging, and it happens for other java  framework and libraries - not only Camel.;;;","31/Mar/22 07:42;tom_s4t;Hello Claus,

sorry for reopening again.

We are currently using around 50 libraries and Camel is currently the only one which is reported for a memory leak. I can't confirm ""it happens for other java libraries"". Maybe there are others which we don't use and have this problem but it's not an argument for not fixing it in my point of view. 

The weak reference you mentioned referes to the reference betweek the variable/value and the thread. But the threads are from the webservers application pool and they remain after undeployment. Thus the weak reference doesn't help out in this case as the threads are still alive.

Please also take a look at the discussion there:
[https://stackoverflow.com/questions/17968803/threadlocal-memory-leak]

For the DefaultCamelContext, a public method to remove the ThreadLocal would already be enough.

For DefaultReactiveExecutor I am not sure how it's used. A public method in the interface ReactiveExecutor to cleanup the reference will help as well.

If your conclusion is, that you won't fix it it's ok. But I wanted to reply that it is indeed a leak because the weak reference is hold by the webservers worker thread which stays alive.

I could also provide a pull request for the cleanup methods, if it helps.

Thank you very much! Thomas

 ;;;","31/Mar/22 10:43;davsclaus;There is a camel-reactive-executor-tomcat in Camel 3.17 you can use that tracks and clear on unload.

And the options on camel context is now only using JDK classes and also cleared on shutdown;;;","31/Mar/22 13:56;davsclaus;Created a ticket to potential remove the need for OPTIONS as it's there for legacy reasons mostly.;;;","31/Mar/22 14:19;tom_s4t;Thank you very much! :)

I am waiting for the 3.17 release.;;;",,,,,,,,,,,,,,,,,,,,
camel-netty-starter - Unable to set camel.component.netty.decoders,CAMEL-17704,13430251,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vincenzo.galluccio,vincenzo.galluccio,23/Feb/22 15:48,28/Apr/22 19:21,13/Jul/23 08:34,01/Mar/22 15:12,3.14.1,,,,3.14.3,3.16.0,,,,camel-netty,camel-spring-boot-starters,,,,0,,,"When using {*}{{camel-netty-starter}}{*}, and I'm having issues with *{{camel.component.netty.decoders}}* property. I get the following error:
{code:java}
Failed to bind properties under 'camel.component.netty.decoders' to java.util.List<io.netty.channel.ChannelHandler>: No converter found capable of converting from type [java.lang.String] to type [java.util.List<io.netty.channel.ChannelHandler>]{code}
This is how I set the property:
{code:java}
camel.component.netty.decoders=#myDecoder{code}
{{When I use the _*decoders*_}} +query+ parameter it works fine:
{code:java}
netty:tcp://localhost:9999?decoders=#myDecoder{code}
 

PS: I assume the issue also affects *camel.component.netty.encoders* property",,davsclaus,vincenzo.galluccio,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/camel-netty-starter,,,,,,,,,,9223372036854775807,,,Java,Thu Apr 28 19:00:29 UTC 2022,,,,,,,,,,,"0|z0zvmo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Feb/22 15:41;davsclaus;Ah yeah its a limitation when using spring boot auto-configuration - standalone Camel can do this;;;","24/Feb/22 15:51;davsclaus;We can potentially change the type in camel-netty to String instead of List to make it easier configurable ;;;","28/Apr/22 08:48;vincenzo.galluccio;Hello,
Can this be fixed also on LTS 3.14.x ?;;;","28/Apr/22 19:00;davsclaus;Okay let me try that;;;",,,,,,,,,,,,,,,,,,,,,,
[camel-google-storage] Payload type File causes NPE on consumer,CAMEL-17702,13430237,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,Bican,Bican,23/Feb/22 14:41,25/Feb/22 06:04,13/Jul/23 08:34,24/Feb/22 18:04,3.11.0,,,,3.11.6,3.14.2,3.16.0,,,camel-google-drive,,,,,0,,,"When sending a file payload to google-storage consumer it causes Null Pointer Exception in GoogleCloudStorageProducer.processFile method.  
        if (obj instanceof File) {
            filePayload = (File) obj;
            is = new FileInputStream(filePayload);
        } else {
            is = exchange.getIn().getMandatoryBody(InputStream.class);
            baos = determineLengthInputStream(is);

 

baos is not initialized and causing NPE later on.

Test Case:
{code:java}
<route id=""CopyToGoogleCloudStorage"" streamCache=""true"">
  <from uri=""{{file-fromUri}}""/>
  <log message=""Found file: '${header[CamelFileNameOnly]}'""/>
      <log message=""Uploading to GCS file ${header.CamelFileNameOnly}""/>
      <!-- google-storage does not know File payload type and throws NPE -->
      <convertBodyTo type=""String""/> <-- comment this out to create NPE
      <toD uri=""google-storage://test?objectName=test.txt&amp;serviceAccountKey=classpath:keys/test.json""/>
  <log message=""Moved file: '${header.CamelFileNameOnly}'""/>
</route> {code}
 

 

 

 ",,Bican,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Feb 23 23:00:38 UTC 2022,,,,,,,,,,,"0|z0zvjk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Feb/22 23:00;klease78;[~Bican] Thanks for reporting this bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Configuring endpoint Map options with keys with dots have trimmed keys,CAMEL-17658,13428803,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,16/Feb/22 12:35,18/Feb/22 08:52,13/Jul/23 08:34,18/Feb/22 08:49,3.14.0,3.15.0,,,3.14.2,3.16.0,,,,camel-core,camel-debezium,,,,0,,,"If you add property `additionalProperties.database.connectionTimeZone=CET` into debezium component, it will apply only `&additionalProperties.database=CET`",,davsclaus,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Feb 18 08:50:37 UTC 2022,,,,,,,,,,,"0|z0zmrk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Feb/22 13:23;jondruse;I probably missed some other aspect of the problem, JUnit test confirms, that problem is not happening.;;;","16/Feb/22 13:46;jondruse;I'm reopening this issue, problem could be simulated via JUnit test (but it has to be test in a specialized debezium component - i.e. mysql);;;","16/Feb/22 15:03;jondruse;Issue was originally reported fr camel-quarkus as https://github.com/apache/camel-quarkus/issues/3488;;;","18/Feb/22 08:50;davsclaus;Thanks for reporting and the PR. I found out to add an unit test in camel-core that reproduced this, and polished the fix a bit. I also backported to 3.14.x LTS branch;;;",,,,,,,,,,,,,,,,,,,,,,
OpenTracing throw NPE using onCompletion definition,CAMEL-17655,13428776,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,yokopono,yokopono,16/Feb/22 10:53,16/Feb/22 13:20,13/Jul/23 08:34,16/Feb/22 13:20,3.14.1,,,,3.14.2,3.16.0,,,,camel-opentracing,,,,,0,,,"Hello! I am trying to use openTracing with kafka component. And find some strange behaviour when route have onCompletion definition. 

Pretty simple code example:
{code:java}
from(""kafka:someTopic"")
        .onCompletion()
            .process(exchange -> {
               // some code
            })
        .end()
.to(""log:"" + logger.getName() + ""?{{logging-params.error}}""); {code}
Another one:
{code:java}
from(""timer://foo?repeatCount=1"")
        .onCompletion()
            .process(exchange -> {                 
               // some code
             })
        .end()
.to(""log:"" + logger.getName() + ""?{{logging-params.error}}""); {code}
Stacktrace for example:
{code:java}
java.lang.NullPointerException: null
    at org.apache.camel.opentracing.TagProcessor.process(TagProcessor.java:55)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:471)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.executeFromQueue(DefaultReactiveExecutor.java:218)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.executeFromQueue(DefaultReactiveExecutor.java:82)
    at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:96)
    at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:85)
    at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
    at org.apache.camel.processor.OnCompletionProcessor.doProcess(OnCompletionProcessor.java:189)
    at org.apache.camel.processor.OnCompletionProcessor$OnCompletionSynchronizationAfterConsumer.onComplete(OnCompletionProcessor.java:318)
    at org.apache.camel.support.UnitOfWorkHelper.doneSynchronization(UnitOfWorkHelper.java:104)
    at org.apache.camel.support.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:93)
    at org.apache.camel.impl.engine.DefaultUnitOfWork.done(DefaultUnitOfWork.java:238)
    at org.apache.camel.support.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:61)
    at org.apache.camel.impl.engine.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:777)
    at org.apache.camel.impl.engine.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:712)
    at org.apache.camel.impl.engine.CamelInternalProcessor$AsyncAfterTask.done(CamelInternalProcessor.java:263)
    at org.apache.camel.AsyncCallback.run(AsyncCallback.java:44)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:187)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:64)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:184)
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:398)
    at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
    at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
    at org.apache.camel.component.kafka.consumer.support.KafkaRecordProcessor.processExchange(KafkaRecordProcessor.java:152)
    at org.apache.camel.component.kafka.KafkaFetchRecords.processRecord(KafkaFetchRecords.java:409)
    at org.apache.camel.component.kafka.KafkaFetchRecords.processPolledRecords(KafkaFetchRecords.java:361)
    at org.apache.camel.component.kafka.KafkaFetchRecords.startPolling(KafkaFetchRecords.java:182)
    at org.apache.camel.component.kafka.KafkaFetchRecords.run(KafkaFetchRecords.java:101)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745){code}
without using onCompletion definition everything is OK.",,davsclaus,yokopono,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Feb 16 13:20:36 UTC 2022,,,,,,,,,,,"0|z0zmlk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Feb/22 13:20;davsclaus;camel-opentracing is deprecated, you should considering using camel-opentelemtry;;;",,,,,,,,,,,,,,,,,,,,,,,,,
RouteWatcherReloadStrategy crashes on Windows or if pattern is not specified,CAMEL-17651,13428632,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,JPMoresmau,JPMoresmau,15/Feb/22 20:19,17/Feb/22 06:02,13/Jul/23 08:34,16/Feb/22 08:11,3.15.0,,,,3.16.0,,,,,camel-core,,,,,0,,,"On Windows, the FileFilter fails because we try to split the path using '/'.

If I don't set a pattern, it's set to null, and pattern.split(',') fails.

The doc states that the default pattern is \*.yaml,*.xml, so it should be possible not to set a pattern.",Windows,davsclaus,JPMoresmau,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Java,Wed Feb 16 08:11:57 UTC 2022,,,,,,,,,,,"0|z0zlq0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Feb/22 20:36;davsclaus;You are welcome to send a PR and test it on windows;;;","15/Feb/22 20:54;JPMoresmau;PR sent. Probably messed up the formatting as I don't understand how to pass formatting checks.;;;","16/Feb/22 08:11;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-openapi-jave and camel-swagger-java should have camel-rest dependency,CAMEL-17632,13427845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,ffang,ffang,10/Feb/22 17:34,10/Feb/22 17:37,13/Jul/23 08:34,10/Feb/22 17:37,3.16.0,,,,,,,,,camel-openapi-java,camel-swagger-java,,,,0,,,"Because camel-openapi-jave and camel-swagger-java are based on REST DSL.
Currently they have camel-rest dependency in test scope, but should have those in runtime",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-02-10 17:34:52.0,,,,,,,,,,,"0|z0zgvc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ref: only add the endpoint into camelContext when not exist,CAMEL-17618,13427253,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,ffang,ffang,08/Feb/22 17:21,14/Feb/22 02:27,13/Jul/23 08:34,12/Feb/22 07:21,3.15.0,,,,3.11.6,3.14.2,3.16.0,,,camel-core,,,,,0,,,"Currently camel-ref endpoint always adds the underlying endpoint like
getCamelContext().addEndpoint(getEndpoint().getEndpointUri(), endpoint);
We should check if it exists or not firstly like
        if (getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null) {
               getCamelContext().addEndpoint(getEndpoint().getEndpointUri(), endpoint);
       }

Because if we re-add the same endpoint, this endpoint actually will be stopped",,davsclaus,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Feb 12 07:21:55 UTC 2022,,,,,,,,,,,"0|z0zd8o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Feb/22 16:05;ffang;The previous fix cause a camel-cxf test failure
https://github.com/apache/camel/commit/d098225b259d3ff52990f9c68251aab0e013b960;;;","11/Feb/22 16:10;ffang;The previous check
getCamelContext().getEndpoint(getEndpoint().getEndpointUri())
may return an unexpected endpoint based on the getEndpoint().getEndpointUri() protocol scheme.For the CxfEndpoint, it starts with ""http://"",so getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) will automatically return a HttpEndpoint first, we need to revise the fix a bit like
{code}
    if (endpoint == null) {
             // endpoint is mandatory
             endpoint = CamelContextHelper.mandatoryLookup(getCamelContext(), name, Endpoint.class);
-            if (getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null) {
+            if (getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null
+                    || getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint) {
                 getCamelContext().addEndpoint(getEndpoint().getEndpointUri(), endpoint);
             }
         }
{code}
to add the expected endpoint referred by the RefEndpoint.

Will send another PR soon
;;;","12/Feb/22 07:21;davsclaus;Backported the next fix to older branches;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Race condition in AggregateProcessor with Jdbc Repository,CAMEL-17613,13426970,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,klease78,bbonnet,bbonnet,07/Feb/22 16:23,26/Apr/22 07:52,13/Jul/23 08:34,26/Apr/22 07:52,3.11.2,,,,3.17.0,,,,,camel-core,camel-sql,,,,0,,,"Hi,

using aggregate with a JdbcAggregationRepository, we are encountering a race condition that may leave a completed exchange in completed table even after that completed exchange has been sent. Unfortunately, that leads to duplicates since recovery task will eventually try and recover it.

Normally, when the exchange completes, it is deleted from repo exchange table and inserted into repo completed exchange table. Then exchange is sent and deleted from repo completed exchange table.

But, due to the fact those two actions are run by different threads (and in different transactions) that order may vary.

 

Here is a normal sequence : 

AggregateProcessor.doProcess
  doAggregation
    doAggregationComplete
      onCompletion
        JdbcAggregationRepository.remove : => INSERT ... INTO _completed  
  onSubmitCompletion  
    AggregateOnCompletion.onComplete   (via executorService)
      JdbcAggregationRepository.confirm  : => DELETE FROM _completed

With the use of executorService, confirm is run by another thread and may commit before remove commits. Eventually, when that occurs, one can check that DELETE statement returns 0 (number of deleted rows) instead of 1.

 ",,bbonnet,davsclaus,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Feb/22 13:24;bbonnet;CAMEL-17613-log.txt;https://issues.apache.org/jira/secure/attachment/13039879/CAMEL-17613-log.txt","11/Feb/22 16:37;klease78;Spring_jdbc_transactions.log;https://issues.apache.org/jira/secure/attachment/13039939/Spring_jdbc_transactions.log",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Apr 26 07:52:12 UTC 2022,,,,,,,,,,,"0|z0zbjc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"08/Feb/22 10:06;davsclaus;Oh that is a great analysis. ;;;","09/Feb/22 18:50;davsclaus;Are you able to to work on this, or provide an unit test / example to help reproduce this?

Also I wonder if we need some new API or something to aggregation repostiory to maybe ensure that work items for same exchange IDs are executed sequentially or something we can ensure that remove / confirm is executed in right order;;;","10/Feb/22 13:37;bbonnet;I could not isolate the issue in a unit test, but here is an execution log extract (I added some debug log after insert and delete statement):[^CAMEL-17613-log.txt]

According to log, INSERT occurs before DELETE, but when DELETE is executed, row is not yet visible. I wonder how it is possible :
 * transactions are run very close one with each other, probably using different JDBC connections. The DB (PostgreSQL) guarantees isolation, but I am not sure order is guaranteed too.
 * we are using XA transactions (with Atomikos as a transaction manager) and we have to check that it does not add asynchronee somewhere on commit path.

 ;;;","10/Feb/22 22:43;klease78;[~bbonnet] JdbcAggregationRepository uses a Spring TransactionTemplate which has ""default"" transaction isolation so it's not clear what level that provides.
Maybe you've set a specific value on the Atomikos manager or configured the DB itself.
I also noticed this in the Camel SQL component documentation which might be relevant if the JMS route is also transacted:
{quote}
JdbcAggregationRepository uses two distinct transaction templates from Spring-TX. One is read-only and one is used for read-write operations.
However, when using JdbcAggregationRepository within a route that itself uses <transacted /> and there’s common PlatformTransactionManager used, there may be a need to configure propagation behavior used by transaction templates inside JdbcAggregationRepository.
{quote};;;","11/Feb/22 08:19;bbonnet;[~klease78], isolation level  is implicitly set to PostgreSQL default isolation level : Read Committed. Propagation behaviour is explicitly set to PROPAGATION_REQUIRED.;;;","11/Feb/22 16:52;klease78;[~bbonnet] Thanks for the info. Maybe you could try debug logging at the level of the transaction manager to get an even finer-grained view of the issue. 
[^Spring_jdbc_transactions.log] shows the result in one of the unit tests which uses the built-in Spring DataSourceTransactionManager. According to the log, the transaction which deletes the exchange from the initial repo and inserts it in the completed repo is committed *before* the main thread continues to process the exchange so the behavior you see shouldn't occur.
But in this simple case, the transaction is initiated in the call to JdbcAggregationRepository.remove(). I'm not familiar with Atomikos or with JMS either but maybe if your transaction is initiated in the JMS handling and propagated to the remove() call, it is committed a bit later in the sequence which could explain why the inserted row isn't yet visible in the Aggregator-initiated transaction.;;;","05/Apr/22 13:43;bbonnet;Hi,

I have made a unit test that shows how transactions might execute in reverse order.

See [https://github.com/bonnetb/camel/tree/CAMEL-17613,]  (commit [https://github.com/bonnetb/camel/commit/4da7abe5543434cba48f3e0f7f0a1d7fdb160462]).

This test uses an Atomikos transaction manager and an XA datasource (H2). By extending Atomikos transaction manager, I added some delay at commit time for the transaction that should occur first. As a result, the other transaction (DELETE) occurs first and you may see an ERROR log ""DELETE statement did not return 1 but 0"".

I noticed you set 3.17.0 as fix version : have you already worked on a fix ?

 ;;;","05/Apr/22 13:49;davsclaus;No we just move the ticket forward - an unit test surely helps. You are welcome to dive in and see if you can come up with a suggest fix/improvement;;;","07/Apr/22 13:43;klease78;[~bbonnet] Many thanks for the test. I have finally understood how this can happen. Since the route is transacted, the commit does not actually happen in the methods in the JdbcAggregationRepository but in a task which is run on the main thread after the aggregate processor returns from its process() call. So it could happen that the thread started to  process the completed aggregation runs first and completes before the commit on the insert.

One idea is to slightly delay the start of the Aggregator thread, for example by using a ScheduledThreadPoolExecutor.

Another idea is to handle the non-deleted exchange in the RecoveryTask. It doesn't need to be redelivered but this could call the confirm() method again.

 ;;;","07/Apr/22 14:14;davsclaus;I wonder if we can house-keep the jdbc repo so we can handle that if a DELETE comes before INSERT then we do not need to execute the INSERT;;;","07/Apr/22 16:54;klease78;I don't think so. In fact the INSERT is already executed but the transaction is not committed, which is done in the TransactionErrorHandler. And the transaction also contains the DELETE from the main aggregation repository so we can't try to roll it back. But I think it is not so difficult to change the AggregateProcessor so it could retry the DELETE from the complete repository.;;;","26/Apr/22 07:52;klease78;[~bbonnet] I adapted your test a bit to remove the Atomix and JTA dependencies and still managed to reproduce and fix the issue with H2 as the database.;;;",,,,,,,,,,,,,,
camel-core - Problem with transacted routes,CAMEL-17609,13426859,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,TCke83,TCke83,07/Feb/22 07:19,04/Mar/22 08:37,13/Jul/23 08:34,04/Mar/22 08:36,3.14.1,,,,3.14.2,3.16.0,,,,came-core,,,,,3,,,"I'm working on an update of the camel library version used to the latest LTS release (3.14.1), but it seems to have broken my tests that are using transacted.

I have a simple test route which reads in a file, parses the content using bindy and sending the validated parts to a jms queue.
{code:java}
from(""inputFile:///temp/testing/input2/"")
    .autoStartup(true)
    .transacted()
    .unmarshal(format)
    .split(body())
        .to(""bean-validator:x"")
        .to(""direct:sendMessage2"")
    .end()
.end();

from(""direct:sendMessage2"")
    .convertBodyTo(String.class)
    .to(""jms://be.test.output"")
.end(); {code}
If one of the parts of the file doesn't pass the validation rules, the test expects to find no messages on the queue.

This used to work in camel-3.7.x, but now in camel 3.14.1 messages do appear on the queue, even when parts of the file failed the validation.

In the migration guide of 3.12 -> 3.13 is an entry about transactions, but it is not clear to me if this is related.

Upon further investigation the split() seems to cause the issue with the transactionality, if i put 2 posts to jms inline in the route and throw an exception before the second post the result is no messages on the queue.

Do i have to add something to the split to allow the transaction to propagate?",,Edwardkuenen,kinae,TCke83,,,,,,,,,,,,,,,,,CAMEL-17474,,,,,,,CAMEL-17474,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 04 08:36:14 UTC 2022,,,,,,,,,,,"0|z0zauo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Mar/22 23:25;kinae;Could be related to 

https://issues.apache.org/jira/browse/CAMEL-16103;;;","04/Mar/22 08:36;TCke83;Fixed with CAMEL-17474;;;",,,,,,,,,,,,,,,,,,,,,,,,
"camel-aws2-sqs - Camel converts Number.Boolean messageAttribute into string ""1"" or ""0"" instead of Boolean",CAMEL-17602,13426602,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,matejkom,matejkom,04/Feb/22 11:11,07/Mar/22 10:59,13/Jul/23 08:34,07/Mar/22 10:59,3.13.0,3.14.1,,,3.14.3,3.16.0,,,,camel-aws2,,,,,0,,,"Sqs2Producer turns Boolean header into messageAttribute with dataType=Number.Boolean, stringValue=""0"" or stringValue=""1""
!image-2022-02-04-12-07-27-282.png|width=505,height=103!


However Sqs2Consumer seems to incorrectly convert messageAttribute into header while constructing Exchange - instead of turning the ""1"" -> true, ""0"" -> false it leaves the values as ""1"", ""0"" strings. Shouldn't it convert it directly to Boolean (true, false)?
!image-2022-02-04-12-10-04-707.png|width=601,height=148!",,acosentino,davsclaus,klease78,matejkom,,,,,,,,,,,,,,,,,,,,,CAMEL-17593,,,,,,,,,,"04/Feb/22 11:07;matejkom;image-2022-02-04-12-07-27-282.png;https://issues.apache.org/jira/secure/attachment/13039664/image-2022-02-04-12-07-27-282.png","04/Feb/22 11:10;matejkom;image-2022-02-04-12-10-04-707.png;https://issues.apache.org/jira/secure/attachment/13039663/image-2022-02-04-12-10-04-707.png",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Feb 20 17:36:08 UTC 2022,,,,,,,,,,,"0|z0z99k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Feb/22 13:33;acosentino;You're welcome to work on a Pull request for this. Thanks;;;","05/Feb/22 08:42;davsclaus;It can also be other data types, eg Number.float and so on, so it appears the consumer should check the dataType in the translateValue method;;;","20/Feb/22 17:36;klease78;Just a note about the types such as Number.int from the [AWS documentation|#message-attribute-data-types]:]
{panel:title=Message attribute data types}
*Custom* – To create a custom data type, append a custom-type label to any data type. For example:
 * {{{}Number.byte{}}}, {{{}Number.short{}}}, {{{}Number.int{}}}, and {{Number.float}} can help distinguish between number types.

*Note*
Amazon SQS doesn't interpret, validate, or use the appended data.
{panel}
Based on this, there are no predefined values for different kinds of Number attributes and it would depend on the application producing the messages. Maybe it's still interesting to check for common data numeric types and boolean.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jdbc - JdbcProducer leaks PreparedStatement,CAMEL-17599,13426565,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamesnetherton,jamesnetherton,04/Feb/22 07:41,10/Apr/23 06:33,13/Jul/23 08:34,05/Feb/22 08:38,3.14.1,3.15.0,,,3.14.2,3.16.0,,,,camel-jdbc,,,,,0,,,"Originally reported on the a Quarkus Zulip thread:

https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/Camel.20JDBC.20leaks.20statement

There are 2 different execution paths in JdbcProducer. doCreateAndExecuteSqlStatementWithHeaders & doCreateAndExecuteSqlStatement.

doCreateAndExecuteSqlStatementWithHeaders does close the PreparedStatement:

https://github.com/apache/camel/blob/camel-3.14.1/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java#L185-L188

doCreateAndExecuteSqlStatement does not:

https://github.com/apache/camel/blob/camel-3.14.1/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java#L244-L246

This PR & commit suggests auto-closing is perhaps not desirable:

https://github.com/apache/camel/pull/6192

The code prior to Camel 3.12.x did close the PreparedStatement in the finally block, so maybe that should be restored.",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17032,CAMEL-19256,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Feb 04 07:42:35 UTC 2022,,,,,,,,,,,"0|z0z91k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Feb/22 07:42;jamesnetherton;For reference, there's a reproducer camel-quarkus project here:

https://bitbucket.org/turing85/quarkus-camel-jms/;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Try Catch WireTap OnPrepare ClassCastException,CAMEL-17594,13426393,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yasserzamani,yasserzamani,03/Feb/22 11:20,03/Feb/22 11:46,13/Jul/23 08:34,03/Feb/22 11:46,3.14.0,,,,3.14.2,3.16.0,,,,came-core,,,,,0,,,"issue when {{wireTap}} is inside a {{doCatch}}, and has {{.end()}}. Attached test run ends up in

{noformat}
java.lang.ClassCastException: class org.apache.camel.model.CatchDefinition cannot be cast to class org.apache.camel.model.TryDefinition
{noformat}

Removing {{.end()}} fixes issue but then it's confusing why exactly same {{wireTap}} inside {{doTry}} MUST have {{.end()}} and inside {{doCatch}} MUST NOT!",,davsclaus,yasserzamani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Feb/22 11:15;yasserzamani;TryCatchWireTapOnPrepareTest.java;https://issues.apache.org/jira/secure/attachment/13039628/TryCatchWireTapOnPrepareTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://github.com/apache/camel/pull/6852,,,,,,,,,,9223372036854775807,,,,Thu Feb 03 11:46:08 UTC 2022,,,,,,,,,,,"0|z0z7zc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Feb/22 11:46;davsclaus;You need to use endDoCatch to go back that is added in next releases;;;",,,,,,,,,,,,,,,,,,,,,,,,,
concurrentConsumers URI parameter not working with aws2-sqs endpoint,CAMEL-17592,13426357,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,arnaudlbcn,arnaudlbcn,03/Feb/22 09:06,03/Feb/22 17:02,13/Jul/23 08:34,03/Feb/22 17:02,3.13.0,,,,3.11.6,3.14.2,3.16.0,,,camel-aws,,,,,0,,,"The concurrentConsumers URI parameter is not taken into account by the endpoint.
We can reproduce the issue with the following prototype:

from(""aws2-sqs://queuexxx?concurrentConsumers=5&amazonSQSClient=#sqsClient&
waitTimeSeconds=20"")
.process(exchange -> {
     System.out.println(""Message received..."");
})
.process(exchange -> {
     try {
        Thread.sleep(5000);
     } catch (InterruptedException e) {
        e.printStackTrace();
     }});

With the above queue, if we send 3 messages, we have to wait
5 seconds to see the second message (""Message received..."") and 5 more
seconds to see the third one. The expected behavior is to see the 3 messages
consumed without delay since 3 threads will consume them in parallel.

Turning on the Camel logs it seems that the next polling is done only after
the Delete for the previous message is sent (which is with a delay of 5s).
The messages are read 1 by 1 (=1 message per polling) so the above behavior is not seen because the message are consumed together by one polling and continue in the same thread.

Note that, as commented by Narsi Reddy Nallamilli in the user mailing list, we obtain the expected behavior by adding a delay in the route as follow: 

from(""aws2-sqs://queuexxx?concurrentConsumers=5&amazonSQSClient=#sqsClient&
waitTimeSeconds=20"")
.delay(1L)
.process(exchange -> {
    System.out.println(""Message received..."");
})
.process(exchange -> {
    try {
       Thread.sleep(5000);
    } catch (InterruptedException e) {
       e.printStackTrace();
    }});","<dependency>
<groupId>org.apache.camel.springboot</groupId>
<artifactId>camel-aws2-sqs-starter</artifactId>
<version>3.13.0</version>
</dependency>",arnaudlbcn,davsclaus,narsi-nallamilli,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,java,Thu Feb 03 15:36:43 UTC 2022,,,,,,,,,,,"0|z0z7rc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Feb/22 12:44;narsi-nallamilli;[~arnaudlbcn] The expected behavior which you are seeking is changed with https://issues.apache.org/jira/browse/CAMEL-16383. 

By default the consumer creates a defaultScheduler with only one thread which is why  the messages are consumed serially. Before the change the scheduler thread are created based on concurrentConsumers attribute value, that is why it used to work.

You need to specify your own scheduler with 'scheduledExecutorService' as shown in  [https://camel.apache.org/components/3.7.x/aws2-sqs-component.html] with required pool size to work the way you want.

However I have tried this and it is not honoring the attribute. The issue is in [https://github.com/apache/camel/blob/main/components/camel-aws/camel-aws2-sqs/src/main/java/org/apache/camel/component/aws2/sqs/Sqs2Endpoint.java] where it creates the consumer with default schedule. It should consider the provided custom schedule if exists.

 
{code:java}
public Consumer createConsumer(Processor processor) throws Exception {
    Sqs2Consumer sqsConsumer = new Sqs2Consumer(this, processor);
    this.configureConsumer(sqsConsumer);
    sqsConsumer.setMaxMessagesPerPoll(this.maxMessagesPerPoll);
    DefaultScheduledPollConsumerScheduler scheduler = new DefaultScheduledPollConsumerScheduler(); {code}
 

 

[~davsclaus]  can you please have a look?;;;","03/Feb/22 15:08;davsclaus;Yeah that seems like something that can be improved;;;","03/Feb/22 15:36;davsclaus;There is a fix on main branch at
https://github.com/apache/camel/commit/599a3a0e2ab610e71dafe326965d697b8061db06

;;;",,,,,,,,,,,,,,,,,,,,,,,
OgnlHelper problem after merge,CAMEL-17591,13426342,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,r.groote@beinformed.com,r.groote@beinformed.com,03/Feb/22 07:49,07/Feb/22 06:24,13/Jul/23 08:34,06/Feb/22 10:14,,,,,3.16.0,,,,,camel-core,,,,,0,,,"Currently doing an migration from Apache Camel 2.25.x to 3.11.x and a simple expression using ognl is no longer working.

Below is an example expression
{code:java}
${body.replaceAll(""Bik (Ru)"",""bik_ru"").replaceAll(""a"",""b"") {code}
In the 2.25.x OgnlHelper.splitOgnl the above works because the 'parenthesisBracket' where detected with a boolean. In the 3.x code base the parenthesisBracket is detected using a int and the number of '(' and ')' are not the same. The reason that the brackets are not the same is because there are more or less brackets within the string being replaced.

It would be nice if the OgnlHelper would be capable of handling this situations.",,davsclaus,r.groote@beinformed.com,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13962,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Feb 07 06:24:02 UTC 2022,,,,,,,,,,,"0|z0z7o0:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"03/Feb/22 12:19;davsclaus;You are using replaceAll that is java regular expression, so you need to escape the input
https://github.com/apache/camel/commit/beff9bed4b6a4f0062926e1e6238f6f503596bcb

{code}
    public static void main(String[] args) {
        String s = ""Bik (Ru)"".replaceAll(""Bik \\(Ru\\)"", ""bik_ru"");
        System.out.println(s);
    }
{code}

Because 
{code}
""Bik (Ru)"" 
{code}

Is used as regular expression then ( and ) are used for group, to use their value as text then they must be escaped;;;","03/Feb/22 17:28;davsclaus;If you want a plain string replacement then use ""replace"" instead of ""replaceAll"";;;","04/Feb/22 07:10;r.groote@beinformed.com;Totally agree, but my customer uses the 'replaceAll' statement in the Spring DSL so i will inform them.

But looking at the code of the OgnlHelper (maybe i'am wrong) that will still not work because it count the number of parenthesis without checking if it's within a string value.

So when i do body.replace(""a"",""b"").replace(""(((("",""-"") it will still not result in two methods because of the number of '(' in the  


{code:java}
            if (j == 0 || j == 1 && ognl.charAt(i - 1) == '?'
                    || ch != '.' && ch != '?' && ch != ']') {
                sb.append(ch);
                // special if we are doing square bracket
                if (ch == '[' && parenthesisBracketCnt == 0) {
                    squareBracketCnt++;
                } else if (ch == '(') {
                    parenthesisBracketCnt++;
                } else if (ch == ')') {
                    parenthesisBracketCnt--;
                }
                j++; // advance {code};;;","04/Feb/22 07:31;r.groote@beinformed.com;{code:java}
	@Test
	public void simpleTest() {
		Exchange exchange = new DefaultExchange(new DefaultCamelContext());
		
		exchange.getIn().setBody(""some string with (( and ))))"");
		
		SimpleLanguage language = new SimpleLanguage();
		language.setCamelContext(new DefaultCamelContext());
		
		Expression createExpression = language.createExpression(""${body.replace(\""((\"",\""--\"").replace(\""))))\"",\""----\"")}"");
		String evaluate = createExpression.evaluate(exchange, String.class);
		
		System.out.println(evaluate);
		
		


		createExpression = language.createExpression(""${body.replace(\""e\"",\""a\"").replace(\""i\"",\""a\"")}"");
		evaluate = createExpression.evaluate(exchange, String.class);
		System.out.println(evaluate);


	} {code}
With the above code the first one result is 'some string with --).replace()))) and ))))'  and i would expect 'some string with –- and ----;;;","06/Feb/22 09:49;davsclaus;Yes it seems we should handle this better, thanks for the new test case.
CAMEL-13692 caused this problem.;;;","07/Feb/22 06:24;r.groote@beinformed.com;I've tested it and this works fine, thanx;;;",,,,,,,,,,,,,,,,,,,,
camel-core - Message DataType lost on exchange copy,CAMEL-17579,13425937,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,essobedo,essobedo,essobedo,01/Feb/22 09:19,02/Feb/22 13:35,13/Jul/23 08:34,02/Feb/22 08:09,3.14.1,3.15.0,,,3.14.2,3.16.0,,,,camel-core,,,,,0,,,"While working on the example [`transformer-demo`|[https://github.com/apache/camel-examples/tree/main/examples/transformer-demo],] I realized that it fails with the next error:

 

 
{code:java}
2022-01-31 10:46:43,910 [elClient.main()] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: 2BE86653B2ADF34-0000000000000002 on ExchangeId: 2BE86653B2ADF34-0000000000000002). Exhausted after delivery attempt: 1 caught: org.apache.camel.InvalidPayloadException: No body available of type: org.apache.camel.example.transformer.demo.Order but has value: {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} of type: java.lang.String on: Message. Caused by: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.transformer.demo.Order with value {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} due to javax.xml.bind.UnmarshalException: null. Exchange[2BE86653B2ADF34-0000000000000002]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.transformer.demo.Order with value {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} due to javax.xml.bind.UnmarshalException: null]
 
Message History (source location and message history is disabled)
---------------------------------------------------------------------------------------------------------------------------------------
Source                                   ID                             Processor                                          Elapsed (ms)
                                         json/json                      from[direct://json]                                          29
 ...
                                         java/wireTap1                  wireTap[direct:csv]                                           0
 
Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.InvalidPayloadException: No body available of type: org.apache.camel.example.transformer.demo.Order but has value: {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} of type: java.lang.String on: Message. Caused by: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.transformer.demo.Order with value {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} due to javax.xml.bind.UnmarshalException: null. Exchange[2BE86653B2ADF34-0000000000000002]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.transformer.demo.Order with value {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} due to javax.xml.bind.UnmarshalException: null]
 at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:125) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.processor.ContractAdvice.convertIfRequired(ContractAdvice.java:154) ~[camel-core-processor-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.processor.ContractAdvice.doTransform(ContractAdvice.java:134) ~[camel-core-processor-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.processor.ContractAdvice.before(ContractAdvice.java:69) ~[camel-core-processor-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:342) ~[camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:96) ~[camel-direct-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:172) ~[camel-core-processor-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:471) [camel-core-processor-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:187) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:64) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:184) [camel-core-processor-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:399) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:96) [camel-direct-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:214) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:111) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:108) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:199) [camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:137) [camel-base-engine-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.example.transformer.demo.client.CamelClient.main(CamelClient.java:84) [classes/:?]
 at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
 at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
 at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
 at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
 at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:282) [exec-maven-plugin-1.6.0.jar:?]
 at java.lang.Thread.run(Thread.java:829) [?:?]
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.transformer.demo.Order with value {""orderId"":""Order-JSON-0001"", ""itemId"":""MIZUYO-KAN"", ""quantity"":""16350""} due to javax.xml.bind.UnmarshalException: null
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:144) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverterLoader.lambda$registerFallbackConverters$0(FallbackTypeConverterLoader.java:44) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:101) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:516) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:356) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:272) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:123) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 ... 27 more
Caused by: javax.xml.bind.UnmarshalException
 at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:455) ~[jaxb-impl-2.3.3.jar:2.3.3]
 at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:387) ~[jaxb-impl-2.3.3.jar:2.3.3]
 at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:356) ~[jaxb-impl-2.3.3.jar:2.3.3]
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:298) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:199) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:129) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverterLoader.lambda$registerFallbackConverters$0(FallbackTypeConverterLoader.java:44) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:101) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:516) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:356) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:272) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:123) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 ... 27 more
Caused by: javax.xml.stream.XMLStreamException: ParseError at [row,col]:[1,1]
Message: Content is not allowed in prolog.
 at com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.next(XMLStreamReaderImpl.java:652) ~[?:?]
 at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:134) ~[jaxb-impl-2.3.3.jar:2.3.3]
 at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:385) ~[jaxb-impl-2.3.3.jar:2.3.3]
 at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:356) ~[jaxb-impl-2.3.3.jar:2.3.3]
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:298) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:199) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:129) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.converter.jaxb.FallbackTypeConverterLoader.lambda$registerFallbackConverters$0(FallbackTypeConverterLoader.java:44) ~[camel-jaxb-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:101) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:516) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:356) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:272) ~[camel-base-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
 at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:123) ~[camel-support-3.15.0-SNAPSHOT.jar:3.15.0-SNAPSHOT]
{code}
 

 

After a deeper investigation, it appears that it occurs because the datatype of the message is lost after been copied by the ProcessorValidatorsuch that it ends up trying to convert a json payload with the JAXB fallback type converter which fails with the previous error.",,essobedo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Feb 01 09:30:42 UTC 2022,,,,,,,,,,,"0|z0z56w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Feb/22 09:30;essobedo;A potential fix for it https://github.com/apache/camel/pull/6866;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Greedy flag causing consumer health check to fail,CAMEL-17577,13425912,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,graben,graben,01/Feb/22 07:16,01/Feb/22 18:05,13/Jul/23 08:34,01/Feb/22 17:41,3.14.1,3.15.0,,,3.14.2,3.16.0,,,,camel-core,,,,,0,,,"Polling consumer using greedy flag to immediately poll again for large size of messages available are causing consumer health checks to fail for a possibly ""long"" time. In an environment like a Kubernates cluster this could cause recurring pod restarts that might tighten the need to use greedy because of a growing size of messages needed to be polled.

The variable firstPoolDone (btw rename to first{*}Poll{*}Done) in ScheduledPollConsumer should also be set true if first greedy run has been finished.",,davsclaus,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Feb 01 18:05:33 UTC 2022,,,,,,,Patch Available,,,,"0|z0z51c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Feb/22 08:02;davsclaus;Do you work on a PR?;;;","01/Feb/22 08:07;graben;I could deliver one until noon CET, okay?;;;","01/Feb/22 08:16;davsclaus;Yes this is good, thanks;;;","01/Feb/22 17:41;davsclaus;Thanks for reporting and the PR;;;","01/Feb/22 17:42;davsclaus;You can turn off consumer health checks to use the same behavior as in previous camel releases;;;","01/Feb/22 18:05;graben;I know, but it's nice to have it on. :) Unfortunately, I have to disable consumer health checks completely because the colon needed (camel.health.config[consumer{*}:{*}abc].enabled=false) does not work well with yaml files in OpenShift ConfigMaps.;;;",,,,,,,,,,,,,,,,,,,,
camel-maven-plugin - mvn camel:run -Dcamel.logLevel=DEBUG,CAMEL-17570,13425651,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,30/Jan/22 13:01,03/Feb/22 14:40,13/Jul/23 08:34,03/Feb/22 14:40,3.15.0,,,,3.16.0,,,,,tooling,,,,,0,,,"It seems the logging level is always INFO, even if I do

mvn camel:run -Dcamel.logLevel=DEBUG",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Feb 03 13:12:24 UTC 2022,,,,,,,,,,,"0|z0z3gw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Jan/22 13:01;davsclaus;For example the main example;;;","03/Feb/22 12:57;davsclaus;Renamed logLevel to loggingLevel to not clash, as otherwise its always INFO as value;;;","03/Feb/22 13:12;davsclaus;This is harder as there is a LoggerContext in camel-maven-plugin and another in camel-main;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jms - JmsBinding not closing the InputStream,CAMEL-17565,13425485,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,zregvart,zregvart,28/Jan/22 21:30,29/Jan/22 08:36,13/Jul/23 08:34,29/Jan/22 08:36,,,,,3.11.6,3.14.2,3.16.0,,,camel-jms,,,,,0,,,"Seems that the InputStream obtained [here|https://github.com/apache/camel/blob/e5ed4509711c0f117ce9d1e6be59c24938d4bd1d/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java#L702] is not closed, which could lead to file descriptor leaks.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-28 21:30:15.0,,,,,,,,,,,"0|z0z2g0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: don't complain about missing credentials with lazy login,CAMEL-17558,13425215,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jeremyross,jeremyross,jeremyross,27/Jan/22 17:14,01/Mar/22 20:16,13/Jul/23 08:34,01/Mar/22 17:26,3.14.1,,,,3.14.2,3.16.0,,,,camel-salesforce,,,,,0,,,"When using lazy login, we shouldn't validate credentials at start up. Instead, give the application a chance to retrieve the credentials prior to invoking a salesforce operation.

Workaround is to provide bogus credentials at startup.",,davsclaus,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Mar 01 14:22:15 UTC 2022,,,,,,,,,,,"0|z0z0s8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Jan/22 06:23;davsclaus;Are you able to fix this today?;;;","01/Mar/22 14:22;jeremyross;Yeah I can work on it now.;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-springdoc-starter: throwing NPE when apiProperties is not set,CAMEL-17548,13424589,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,25/Jan/22 06:14,25/Jan/22 17:08,13/Jul/23 08:34,25/Jan/22 07:55,,,,,3.15.0,,,,,,,,,,0,,,,,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-25 06:14:34.0,,,,,,,,,,,"0|z0ywxc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel elasticsearch rest on spring boot - class not found error,CAMEL-17545,13424471,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,Federico Mariani,Federico Mariani,24/Jan/22 17:37,26/Jan/22 14:46,13/Jul/23 08:34,26/Jan/22 14:46,3.14.0,,,,3.15.0,,,,,camel-elasticsearch-rest,camel-spring-boot,,,,0,,,"When using {*}spring-boot-dependencies:2.6.1{*}, _camel-spring-boot-dependencies:3.14.0_ and the dependency _camel-elasticsearch-rest-starter_ I got the following error

_Caused by: java.lang.ClassNotFoundException: org.elasticsearch.common.CheckedConsumer_

I think that camel and spring boot use different elasticsearch versions, moreover if I use *spring-boot-dependencies:2.5.9* the component works as expected.",,Federico Mariani,ffang,mcarlett,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jan 26 14:24:11 UTC 2022,,,,,,,,,,,"0|z0yw80:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Jan/22 20:38;ffang;Hi [~Federico Mariani],

Thanks for reporting this.

I checked the [spring-boot-dependencies:2.6.1|https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.1/spring-boot-dependencies-2.6.1.pom], but the elasticsearch.version there is the same as it in camel 3.14.
{code}
<elasticsearch.version>7.15.2</elasticsearch.version>
{code}

Any chance you can append a reproducer project so that we can take a close look?

Thanks!
Freeman;;;","26/Jan/22 10:04;Federico Mariani;Hi [~ffang] 

I think this is the issue [https://repo1.maven.org/maven2/org/apache/camel/camel-elasticsearch-rest/3.14.0/camel-elasticsearch-rest-3.14.0.pom] as you can see camel-elasticsearch-rest (and spring starter) use version _<version>7.10.2</version>_;;;","26/Jan/22 14:24;ffang;Thanks [~Federico Mariani], that's it!

The version from spring-boot is managed to use, we may not be able to upgrade elasticsearch version in camel due to the [license restriction|https://www.elastic.co/pricing/faq/licensing]. I think we can explicitly add elasticsearch dependency in camel-elasticsearch-rest-starter so we can ensure the expected elasticsearch version is used.

Freeman;;;",,,,,,,,,,,,,,,,,,,,,,,
ServicePool.doStop hangs during shutdown,CAMEL-17536,13424058,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,krzysztofjamroz,krzysztofjamroz,21/Jan/22 16:38,24/Jan/22 16:00,13/Jul/23 08:34,23/Jan/22 08:45,3.14.0,,,,3.14.1,3.15.0,,,,camel-core,,,,,0,,,"Camel sometimes hangs (100% usage of 1 CPU) during shutdown. This occurs intermittently during integration testing. We use {{recipientList}} to perform some dynamic routing and many messages can be processed in parallel threads by {{recipientList}} and there are a few of them in different routes (this will be important in a moment).

Stack trace of stuck thread:
{noformat}
""SpringApplicationShutdownHook"" #18 prio=5 os_prio=0 cpu=1784989.37ms elapsed=1790.21s tid=0x00007f7a13520000 nid=0xa80 runnable  [0x00007f79a3af5000]
   java.lang.Thread.State: RUNNABLE
    at org.apache.camel.support.cache.ServicePool.stop(ServicePool.java:193)
    at org.apache.camel.support.cache.ServicePool$$Lambda$2274/0x000000084108fc40.accept(Unknown Source)
    at java.util.LinkedHashMap$LinkedValues.forEach(java.base@11.0.13/LinkedHashMap.java:608)
    at org.apache.camel.support.cache.ServicePool.doStop(ServicePool.java:181)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    - locked <0x00000000e3ece780> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.cache.DefaultProducerCache.doStop(DefaultProducerCache.java:399)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    - locked <0x00000000e3ece740> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:147)
    at org.apache.camel.processor.RecipientList.doStop(RecipientList.java:222)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    - locked <0x00000000e3ecdb00> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:165)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:147)
    at org.apache.camel.processor.Pipeline.doStop(Pipeline.java:226)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    - locked <0x00000000e3ecda48> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:147)
    at org.apache.camel.impl.engine.DefaultChannel.doStop(DefaultChannel.java:134)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    - locked <0x00000000e3eccde0> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.service.ServiceHelper.stopAndShutdownServices(ServiceHelper.java:257)
    at org.apache.camel.support.service.ServiceHelper.stopAndShutdownServices(ServiceHelper.java:215)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.doShutdown(RedeliveryErrorHandler.java:1665)
    at org.apache.camel.support.ChildServiceSupport.shutdown(ChildServiceSupport.java:113)
    - locked <0x00000000e3ecc1e8> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopAndShutdownService(ServiceHelper.java:233)
    at org.apache.camel.impl.engine.RouteService.stopChildServices(RouteService.java:409)
    at org.apache.camel.impl.engine.RouteService.doStop(RouteService.java:260)
    at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:86)
    - locked <0x00000000e40873a0> (a java.lang.Object)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.service.ServiceHelper.stopAndShutdownService(ServiceHelper.java:227)
    at org.apache.camel.impl.engine.AbstractCamelContext.shutdownServices(AbstractCamelContext.java:3559)
    at org.apache.camel.impl.engine.AbstractCamelContext.shutdownServices(AbstractCamelContext.java:3584)
    at org.apache.camel.impl.engine.AbstractCamelContext.doStop(AbstractCamelContext.java:3366)
    at org.apache.camel.spring.boot.SpringBootCamelContext.doStop(SpringBootCamelContext.java:61)
    - locked <0x00000000e221e658> (a org.apache.camel.spring.boot.SpringBootCamelContext)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    - locked <0x00000000e221e8a8> (a java.lang.Object)
    at org.apache.camel.impl.engine.AbstractCamelContext.stop(AbstractCamelContext.java:2640)
    at org.apache.camel.spring.SpringCamelContext.stop(SpringCamelContext.java:128)
    at org.springframework.context.support.DefaultLifecycleProcessor.doStop(DefaultLifecycleProcessor.java:247)
    at org.springframework.context.support.DefaultLifecycleProcessor.access$300(DefaultLifecycleProcessor.java:54)
    at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:373)
    at org.springframework.context.support.DefaultLifecycleProcessor.stopBeans(DefaultLifecycleProcessor.java:206)
    at org.springframework.context.support.DefaultLifecycleProcessor.onClose(DefaultLifecycleProcessor.java:129)
    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1067)
    at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1021)
    - locked <0x00000000e11e3868> (a java.lang.Object)
    at org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:137)
    at org.springframework.boot.SpringApplicationShutdownHook$$Lambda$2265/0x0000000841088440.accept(Unknown Source)
    at java.lang.Iterable.forEach(java.base@11.0.13/Iterable.java:75)
    at org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:106)
    at java.lang.Thread.run(java.base@11.0.13/Thread.java:829){noformat}
Deeper inspection of heap dump reveals that linked list in {{ServicePool.cache}} is corrupted and has a loop, which causes {{foreach}} to loop infinitely (see attached screenshot from heapdump analysis).

Access to {{ServicePool.cache}} is not synchronized even though {{LinkedHashMap}} is not thread-safe. There is at least one code path that can add to the cache it concurrently (and indeed in this seems to happen in our tests):
 # org.apache.camel.processor.MulticastProcessor.process(Exchange, AsyncCallback)
 # org.apache.camel.processor.RecipientListProcessor.createProcessorExchangePairs(Exchange)
 # org.apache.camel.processor.RecipientListProcessor.doCreateProcessorExchangePairs(Exchange, Object, List<ProcessorExchangePair>, int)
 # org.apache.camel.support.cache.DefaultProducerCache.acquireProducer(Endpoint)
 # org.apache.camel.support.cache.ServicePool.acquire(Endpoint)
 # org.apache.camel.support.cache.ServicePool.cache

There are also a few unsynchronized invocations of {{DefaultProducerCache.acquireProducer}} from other processors.

I am not sure if other usages of {{cache}} need to be synchronized, maybe Camel lifecycle provides enough serialization.
 
The simpliest solution is to wrap {{cache}} in {{Collections.synchronizedMap}} but this might have negative impact on performance.",,joeoconnor,krzysztofjamroz,,,,,,,,,,,,,,,,,,,,,,,CAMEL-16093,,CAMEL-17544,,,,,,,,"21/Jan/22 16:16;krzysztofjamroz;linkedhashmap corrupted.png;https://issues.apache.org/jira/secure/attachment/13039233/linkedhashmap+corrupted.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jan 21 19:19:41 UTC 2022,,,,,,,Patch Available,,,,"0|z0yto8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Jan/22 18:31;krzysztofjamroz;I created a fix [https://github.com/apache/camel/pull/6806|https://github.com/apache/camel/pull/6806]. 
{{Collections.synchronizedMap}} cannot be used because we would loose information if {{cache}} is {{LRUCache}}.;;;","21/Jan/22 19:19;krzysztofjamroz;Switch in Camel from Caffeine to DefaultLRUCache as default  (only?) cache in CAMEL-16093 makes the problem more likely ;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-boot-rest-openapi-springdoc generates incorrect api doc,CAMEL-17535,13424057,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,klease78,klease78,21/Jan/22 16:36,12/Feb/22 21:43,13/Jul/23 08:34,12/Feb/22 21:43,3.14.0,,,,3.16.0,,,,,,,,,,0,,,The example camel-example-spring-boot-rest-openapi-springdoc generates a swagger OpenAPI document which doesn't contain the correct context path. The Swagger UI isn't able to execute the operations because it doesn't include the /api in the path.,,davsclaus,klease78,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17139,,,,,,CAMEL-17491,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Feb 12 21:43:56 UTC 2022,,,,,,,,,,,"0|z0yto0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Jan/22 16:55;klease78;The workaround mentioned in CAMEL-17139:

 
{code:java}
springdoc:
    swagger-ui:
        url: ${camel.rest.context-path}${camel.rest.api-context-path}
{code}
does resolve the problem by working around the root cause.
The root cause is that the OpenAPI bean generated by SpringdocAutoConfiguration does not set the URL for the api doc, because it assumes Springdoc should set it. But Springdoc only uses its own context path (server.servlet.context-path) and does not append the camel.rest.context-path. 
Forcing the swagger-ui.url property to include both the Spring context-path (if any) and the Camel context-path will override the link to the generated API docs. In fact, this causes the Swagger UI to refer to the OpenAPI doc which is generated by the code in camel-openapi-java which correctly generates a relative URL. The incorrect doc generated by the Springdoc configuration is present but is not referenced from the SwaggerUI.
Ideally, the Camel springdoc starter component would generate the correct relative URL so that users are not obliged to use the workaround.
 ;;;","12/Feb/22 07:23;davsclaus;Is there more work for this ticket, or can it be resolved?;;;","12/Feb/22 21:43;klease78;The issue is resolved. It might be worth mentioning in the documentation for camel-springdoc that it only works using the ""servelet"" component for the REST configuration. I tried to make it work with jetty but with no success since using the camel-jetty-starter doesn't provide a ServletWebServerFactory bean for the Spring web context which is needed to serve the Swagger UI.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-fhir: the serverUrl configuration on camel-fhir endpoint shouldn't be ignored,CAMEL-17526,13423824,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,20/Jan/22 19:22,21/Jan/22 12:25,13/Jul/23 08:34,21/Jan/22 12:25,,,,,3.15.0,,,,,camel-fhir,,,,,0,,,"Currently it always uses the serverUrl configration from camel-fhir component level, if it's null from component level, then even we configure it correctly on the endpoint level, it is still ignored.

Our current ITests don't catch this error because always set serverUrl on the camel-fhir component AbstractFhirTestSupport",,davsclaus,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jan 21 12:24:52 UTC 2022,,,,,,,,,,,"0|z0ys88:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Jan/22 19:29;ffang;This [PR|https://github.com/apache/camel/pull/6796/commits/9bfac71d49ddb6825af6a68a52270a6280e8086f] addressed it.
Also revised FhirCreateIT test to expose this problem;;;","21/Jan/22 09:03;davsclaus;Should we backport this to 3.14.x ?;;;","21/Jan/22 12:24;ffang;Hi [~davsclaus],

3.14.x doesn't have this problem. But I will backport the test there.

Cheers
Freeman;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel loading of resources using ClassResolver API doesn't work in OSGi enviroments,CAMEL-17524,13423813,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ryeats,ryeats,20/Jan/22 18:04,22/Jan/22 17:29,13/Jul/23 08:34,22/Jan/22 08:31,3.14.0,,,,3.14.1,3.15.0,,,,osgi,,,,,0,,,"https://issues.apache.org/jira/browse/CAMEL-17116 changed how resources were loaded in several components the problem being that now they don't use the classloader of the class making the resource calls in OSGi environments. Its a simple change to call the method loadResourceAsStream(String name, ClassLoader loader) and passing in the calling classes class loader instead of loadResourceAsStream(String name).",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17116,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Jan 22 17:29:26 UTC 2022,,,,,,,,,,,"0|z0ys5s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Jan/22 09:04;davsclaus;You are welcome to send a PR;;;","21/Jan/22 09:26;davsclaus;camel-schematron fixed
camel-quartz already fixed
camel-jslt already fixed
camel-xmlsecurity fixed;;;","21/Jan/22 22:43;ryeats;Sorry, I would have put up a PR right when i wrote the ticket but it took me a while to get my development environment working for camel and everything good to build. I checked your fix and it looks like you missed ClassPathURIResolver.java  resource loading call so I went ahead and pushed an additional PR up with that fix and a couple other places that may have the same issue.;;;","21/Jan/22 22:44;ryeats;The fix that was originally applied did not fully resolve the issue.;;;","22/Jan/22 08:26;davsclaus;We do not support all components in OSGi such as jbpm etc so they should not be changed;;;","22/Jan/22 17:29;davsclaus;Ryan, thanks for the fixes. We had to rush this as we are building the 3.14.1 release later this weekend;;;",,,,,,,,,,,,,,,,,,,,
camel-spring-boot-examples：rest-jpa  is broken,CAMEL-17523,13423791,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,20/Jan/22 16:26,20/Jan/22 18:32,13/Jul/23 08:34,20/Jan/22 18:32,,,,,3.15.0,,,,,examples,,,,,0,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 20 16:32:26 UTC 2022,,,,,,,,,,,"0|z0ys0w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Jan/22 16:32;ffang;This [PR|https://github.com/apache/camel-spring-boot-examples/pull/45] fixed this up;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - httpClient parameters are not filtered out,CAMEL-17521,13423728,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Jan/22 11:01,21/Jan/22 12:03,13/Jul/23 08:34,21/Jan/22 12:03,3.11.5,3.14.0,,,3.11.6,3.14.1,3.15.0,,,camel-http,,,,,0,,,"When using httpClient.SocketTimeout=555555 then that gets included in the HTTP GET url that the client is sending to the server.

Reported on chat at
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/http.20query.20parameter/near/268668471",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17531,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jan 21 12:01:02 UTC 2022,,,,,,,,,,,"0|z0yrmw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Jan/22 12:01;davsclaus;We should source code generate known multi value options and their prefix, then we can use that in the send dynamic aware.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use square brackets in HTTP parameters,CAMEL-17520,13423704,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,squakez,squakez,20/Jan/22 09:32,20/Jan/22 19:21,13/Jul/23 08:34,20/Jan/22 19:21,3.12.0,,,,3.14.1,3.15.0,,,,camel-core,,,,,0,,,"It was reported on mailing list, there is some problem when trying to use square brackets as part of the URI params. I've run some expertiment with the RAW() function, but this is only applied to the value parameter, not the variable name (ie, _param=RAW(value)_).

As a reproducer, we may run this route (ie, via Camel K):

{code}
// camel-k: language=java

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.apache.camel.Exchange;

public class Test extends RouteBuilder {
  @Override
  public void configure() throws Exception {
      rest()
          .get(""/hello"")
          .param().name(""test[bogus]"").type(RestParamType.query).defaultValue(""false"").description(""Just for testing"").endParam()
          .to(""direct:hello"");

      from(""direct:hello"")
          .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain""))
          .setBody().simple(""${headers.test[bogus]}"");

      // Write your routes here, for example:
      from(""timer:java?period=3000"")
        .to(""http://localhost:8080/hello?test[bogus]=true"")
        .log(""${body}"");
  }
}
{code}

It will end up with error:

{code}
[1] Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http://localhost:8080/hello?test%5Bbogus%5D=true due to: Error binding property (test[bogus]=true) with name: test[bogus] on bean: http://localhost:8080/hello?test%5Bbogus%5D=true with value: true
[1]     at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:963)
[1]     at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:845)
[1]     at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123)
[1]     at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:43)
[1]     at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:36)
[1]     at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:838)
[1]     at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:579)
[1]     at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:236)
[1]     ... 31 more
[1] Caused by: org.apache.camel.PropertyBindingException: Error binding property (test[bogus]=true) with name: test[bogus] on bean: http://localhost:8080/hello?test%5Bbogus%5D=true with value: true
[1]     at org.apache.camel.support.PropertyBindingSupport.doSetPropertyValue(PropertyBindingSupport.java:476)
[1]     at org.apache.camel.support.PropertyBindingSupport.doBuildPropertyOgnlPath(PropertyBindingSupport.java:326)
[1]     at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:210)
[1]     at org.apache.camel.support.PropertyBindingSupport.access$100(PropertyBindingSupport.java:88)
[1]     at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:1789)
[1]     at org.apache.camel.support.DefaultEndpoint.setProperties(DefaultEndpoint.java:413)
[1]     at org.apache.camel.support.DefaultEndpoint.configureProperties(DefaultEndpoint.java:388)
[1]     at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:425)
[1]     at org.apache.camel.component.http.HttpComponent.createEndpoint(HttpComponent.java:377)
[1]     at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:171)
[1]     at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:929)
[1]     ... 38 more
[1] Caused by: java.lang.IllegalArgumentException: Cannot set property: test[bogus] as a Map because target bean has no setter method for the Map
[1]     at org.apache.camel.support.PropertyBindingSupport.setPropertyCollectionViaReflection(PropertyBindingSupport.java:523)
[1]     at org.apache.camel.support.PropertyBindingSupport.doSetPropertyValue(PropertyBindingSupport.java:453)
[1]     ... 48 more
{code}

Trying to apply the RAW() function on the parameter (ie, ?RAW(test[bogus])=true) does not convert the parameter, but create a new one called _RAW(test[bogus])_",,davsclaus,squakez,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 20 15:49:27 UTC 2022,,,,,,,,,,,"0|z0yrhk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Jan/22 15:49;davsclaus;Yeah so its because that filter parameter is not a known option on the endpoint - what we need to make sure in the core was that we know its lenient properties on HTTP endpoints and therefore should ignore that there is not a option called test on the endpoint. 

I have a pending fix

;;;",,,,,,,,,,,,,,,,,,,,,,,,,
BreadcrumbId MDC Value not set even MDCLogging is true during ErrorHandling Processor,CAMEL-17514,13423506,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rambichler,rambichler,19/Jan/22 12:45,17/Feb/22 16:25,13/Jul/23 08:34,22/Jan/22 17:54,3.13.0,3.14.0,,,3.14.1,3.15.0,,,,camel-core,,,,,0,,,"*Expected Behaviour:*

If UseMDCLogging=true and UseBreadcrumb=true is set then i expect then everywhere the MDC Value camel.breadcrumbId is set.

like it works in Camel Version < 3.12

*Reproducable* 
*Camel Version > 3.11*
 
Hint: If I use a custom UnitOfWorkFactory it works as expected. But I would assume that If MDCLogging is enabled then the DefaultUnitOfWork would handle this.
 
*Log without MDC camel.Breadcrumb:*
2022-01-19 12:01:00,335 INFO  [1 - timer://foo] route1                                   [route1 0141fbc5-bb47-4458-a982-1e6585109b8a] - Received exchange with breadcrumbID: 0141fbc5-bb47-4458-a982-1e6585109b8a
2022-01-19 12:01:00,337 INFO  [1 - timer://foo] c.t.a.r.h.HelloBreadcrumbRoute           [route1 0141fbc5-bb47-4458-a982-1e6585109b8a] - Process with bug
2022-01-19 12:01:00,338 INFO  [1 - timer://foo] c.t.a.r.h.OnExceptionProcessor           [{color:#FF0000}****breadcrumbMissing****{color}] - Some OnException process
2022-01-19 12:01:00,344 INFO  [1 - timer://foo] route2                                   [route2 {color:#FF0000}****breadcrumbMissing****{color}] - Deadletter receive
 
*Example:*
@Override
public void configure() throws Exception {

   getContext().setUseMDCLogging(true);
   getContext().setUseBreadcrumb(true);

   DeadLetterChannelBuilder errorHandlerBuilder = new DeadLetterChannelBuilder();
   errorHandlerBuilder.setDeadLetterUri(""direct:deadletterTest"");
   errorHandlerBuilder.setOnExceptionOccurred(onExceptionProcessor);
   errorHandler(errorHandlerBuilder);

   from(""timer://foo?fixedRate=true&period=10000"")
      .log(""Received exchange with breadcrumbID: ${in.headers.breadcrumbId}"")
      .process(exchange -> {
          throw new Exception(""Some Bug"");
      });

   from(""direct:deadletterTest"")
      .log(""Deadletter received ${body}"");
   }

 
*OnExceptionProcessor:*
@Component
public class OnExceptionProcessor implements Processor {

   private static final Logger LOG = LoggerFactory.getLogger(OnExceptionProcessor.class);

   @Override
   public void process(Exchange exchange) throws Exception {
      LOG.info(""Some OnException process"");
   }
}
 
 
 ",,davsclaus,rambichler,vandenbrink@zorgdomein.nl,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17676,CAMEL-17009,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Feb 07 14:04:32 UTC 2022,,,,,,,,,,,"0|z0yq9k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"22/Jan/22 09:08;davsclaus;Have a pending fix. Needs some polish and improvements to unit tests.;;;","07/Feb/22 14:04;vandenbrink@zorgdomein.nl;Hello [~davsclaus], I'm running into this issue as well, but the fix applied to 3.14.1 and 3.15.0 doesn't work for me. All MDC values are missing in the actual log output, the camel values (like breadcrumbId and routeId), but also values I add from my own code. I had to revert back to 3.11.5 to get it working again.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Spring boot actuator endpoint parameters issues,CAMEL-17511,13423377,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ncasaux,ncasaux,18/Jan/22 22:35,19/Jan/22 19:48,13/Jul/23 08:34,19/Jan/22 19:48,3.14.0,,,,3.14.1,3.15.0,,,,camel-spring-boot,,,,,0,,,"Hello,

Currently, the endpoints of the camelroutes Springboot actuator are partially working. Indeed, the ones with parameters are not working.

As a result, we can not query the endpoint which allows to get routes INFO or DETAIL, or to STOP/START a route. For example, we can not query
{code:java}
/actuator/camelroutes/hello/INFO{code}
which should returns infos about the ""hello"" route. We receive a HTTP 400 Bad request instead.

 

In the springboot doc, it says that for those parameters to work properly, the code should be compiled with ""-parameters"" arg (See [https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#actuator.endpoints.implementing-custom.input).]

I believe that camel-spring-boot is not compiled this way.

FYI, I had to change 
{code:java}
<maven.compiler.source>1.8</maven.compiler.source>
<maven.compiler.target>1.8</maven.compiler.target>{code}
Previous values were 1.7 for both.",,davsclaus,ncasaux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jan 19 19:47:11 UTC 2022,,,,,,,,,,,"0|z0ypgw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Jan/22 19:42;davsclaus;How do you make maven compiler plugin compile with ""-parameters"" ? their doc is vague;;;","19/Jan/22 19:46;davsclaus;Okay found it via their parent pom
https://search.maven.org/artifact/org.springframework.boot/spring-boot-starter-parent/2.6.2/pom;;;","19/Jan/22 19:47;davsclaus;Okay have a fix with
https://github.com/apache/camel-spring-boot/commit/e6dc657d4fede0278b59c21040f493ae923e0521;;;",,,,,,,,,,,,,,,,,,,,,,,
olingo4 should always look for a single entity when a predicate key is used,CAMEL-17506,13423079,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,damienb,damienb,17/Jan/22 14:51,18/Jan/22 18:20,13/Jul/23 08:34,18/Jan/22 18:20,2.25.2,3.14.0,,,3.14.1,3.15.0,,,,camel-olingo4,,,,,0,,,"In org.apache.camel.component.olingo4.api.impl.Olingo4AppImpl , the following snippet of code is used to decide wether we receive an entity or an entitySet on a read query with a keyPredicate:
{code:java}
List<UriParameter> keyPredicates = uriResourceEntitySet.getKeyPredicates();
// Check result type: single Entity or EntitySet based
// on key predicate detection
if (keyPredicates.size() == 1) {
  response = (T) odataReader.readEntity(content, getResourceContentType(uriInfo));
} else {
  response = (T) odataReader.readEntitySet(content, getResourceContentType(uriInfo));
} {code}
It assumes that if we have multiple parts in the key predicate, then we expect several entities in the response. But as we can see in [OData Version 4.01. Part 2: URL Conventions (oasis-open.org)|https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_KeyasSegmentConvention] 4.3.6 example 26, a key predicate with several parts is just that, a multi-part key predicate still adressing a single entity.",,damienb,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 18 18:20:22 UTC 2022,,,,,,,,,,,"0|z0ynmw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Jan/22 16:24;davsclaus;Tis code is from the creator of the component about the predicate.

The switch case is a entitySet so its a bit weird if the result is not a set.

;;;","17/Jan/22 17:31;damienb;In OData 4, when you query with a (primary) key predicate, you expect either a single entity or nothing. If some OData 4 servers reply with an entity set, then it's a misuse of the protocol.;;;","17/Jan/22 18:57;davsclaus;Okay, are you able to fix this by sending a PR against the main or 3.14.x branch;;;","18/Jan/22 08:47;damienb;I'll take the time yes.;;;","18/Jan/22 16:12;damienb;https://github.com/apache/camel/pull/6781;;;","18/Jan/22 18:20;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,
BridgeExceptionHandlerToErrorHandler broken with DefaultErrorHandler,CAMEL-17504,13423055,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,graben,graben,17/Jan/22 13:15,18/Jan/22 09:17,13/Jul/23 08:34,18/Jan/22 09:17,3.14.0,,,,3.14.1,3.15.0,,,,came-core,,,,,0,,,"Using BridgeExceptionHandlerToErrorHandler marks new Exchange as delivery exhausted
{code:java}
exchange.adapt(ExtendedExchange.class).setRedeliveryExhausted(true);
{code}
[Link to Code|https://github.com/apache/camel/blob/80b92e3624ae5db59a1a24a441f1b10b39eaa1a5/core/camel-support/src/main/java/org/apache/camel/support/BridgeExceptionHandlerToErrorHandler.java#L70]

but SimpleTask in RedeliveryErrorHandler must be not exhausted.
{code:java}
boolean failure = exchange.getException() != null
    && !ExchangeHelper.isFailureHandled(exchange)
    && !exchange.isRedeliveryExhausted();

if (failure) {
    // previous processing cause an exception
    handleException();
    onExceptionOccurred();
    prepareExchangeAfterFailure(exchange);
    // we do not support redelivery so continue callback
    AsyncCallback cb = callback;
    taskFactory.release(this);
    reactiveExecutor.schedule(cb);
}
{code}
[Link to Code|https://github.com/apache/camel/blob/d8999df46f5b0c4500b4a33c743a1527cd1d5cd0/core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java#L453]

Seems to be broken somewhere after 3.7.x",,davsclaus,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jan/22 18:56;graben;camel-bridge.zip;https://issues.apache.org/jira/secure/attachment/13038954/camel-bridge.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 18 09:17:09 UTC 2022,,,,,,,,,,,"0|z0ynhk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Jan/22 14:38;davsclaus;Do you have a real world use-case / example that is affected in a camel upgrade or something?;;;","17/Jan/22 18:58;graben;Sure, have a look into  [^camel-bridge.zip]. It still works with latest 3.7.x release but fails on 3.14.0. As you can see it polls multiple failure messages which are ""skipped"" by ErrorHandler and further processed.;;;","18/Jan/22 09:17;davsclaus;Thanks for reporting and the test case;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-ahc-ws - Unable to reconnect to Server after server reboot,CAMEL-17503,13422960,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,cgp,cgp,17/Jan/22 06:03,20/Jan/22 14:51,13/Jul/23 08:34,20/Jan/22 14:51,3.12.0,,,,3.11.6,3.14.1,3.15.0,,,camel-ahc-ws,,,,,0,,,Camel AHC-WS client unable to reconnect to Server whenever the server reboots. The reConnect() in WsEndpoint.java get called but is not calling the connect() function.,,cgp,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 20 14:51:44 UTC 2022,,,,,,,,,,,"0|z0ymwg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Jan/22 06:06;davsclaus;What version of Camel do you use, and can you make an example that can reproduce this issue?;;;","17/Jan/22 08:54;cgp;We are using Camel K 1.7.0 which is using Camel 3.12.0. Our server is private and the code below is the snippet of the client connecting to it
{code:java}
fromF(""ahc-wss://private-server-url&bridgeErrorHandler=true&sendMessageOnError=true"")
  .filter(exchange -> exchange.getIn().getBody() != null)
  .toF(""kafka:%s?brokers=%s&groupId=%s&bridgeErrorHandler=true"", kafkaTopic, kafkaBrokers, kafkaGroupId);{code};;;","17/Jan/22 11:08;davsclaus;You are welcome to attempt to fix this and send a PR;;;","19/Jan/22 10:22;cgp;Thanks, I will look into that;;;","20/Jan/22 14:51;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,
camel-core - FailedToCreateRouteException issue if route is very long and complex uris that cannot be sanitized,CAMEL-17501,13422920,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,songmingu,songmingu,16/Jan/22 16:14,17/Jan/22 22:46,13/Jul/23 08:34,17/Jan/22 11:08,3.7.5,,,,3.11.6,3.14.1,3.15.0,,,camel-core,,,,,0,,,"In my case, the route string is a bit complex and long.

So the sanitizeUri function was not finished and camel context was stuck.

How about cut the route string first, then check and sanitize string.

I think it is better way and improving performance.

Please check this and let me change this.
{code:java}
protected static String getRouteMessage(String route) {
    // ensure to sanitize uri's in the route so we do not show sensitive information such as passwords
    route = URISupport.sanitizeUri(route);

    // cut the route after 60 chars so it won't be too big in the message
    // users just need to be able to identify the route so they know where to look
    if (route.length() > 60) {
        return route.substring(0, 60) + ""..."";
    } else {
        return route;
    }
} {code}",,davsclaus,songmingu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jan/22 23:04;songmingu;sample_xml.txt;https://issues.apache.org/jira/secure/attachment/13038881/sample_xml.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jan 17 14:50:15 UTC 2022,,,,,,,,,,,"0|z0ymnk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Jan/22 18:22;davsclaus;Can you explain in more details what your problem was, what was not finished, and what was stuck;;;","16/Jan/22 23:11;songmingu;Ok, our project use camel xml format with spring boot. (camel-spring-boot-starter:3.7.5)

Please see the attachment ""sample_xml.txt"". (This xml has syntax errors.)

And I test as blow.

In processing addRouteDefinitions, URISupport.sanitizeUri() function was not finished in FailedToCreateRouteException.getRouteMessage().
{code:java}
ExtendedCamelContext extendedCamelContext = camelContext.adapt(ExtendedCamelContext.class);
ModelCamelContext modelCamelContext = camelContext.adapt(ModelCamelContext.class);

try {
    InputStream is = new ByteArrayInputStream(routeXml.getBytes(StandardCharsets.UTF_8));
    RoutesDefinition routes = (RoutesDefinition) extendedCamelContext.getXMLRoutesDefinitionLoader().loadRoutesDefinition(camelContext, is);

    camelContext.getShutdownStrategy().setTimeout(5);
    camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(true);
    camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(true);
    camelContext.setShutdownRunningTask(ShutdownRunningTask.CompleteCurrentTaskOnly);
    modelCamelContext.addRouteDefinitions(routes.getRoutes());
} catch (Exception exception) {
    exception.printStackTrace();
} {code};;;","17/Jan/22 14:33;songmingu;[~davsclaus] Our project use camel 3.7.5 version. Could you add to fix for 3.7.5 version?;;;","17/Jan/22 14:50;davsclaus;No Camel 3.7.x is EOL and not supported anymore;;;",,,,,,,,,,,,,,,,,,,,,,
camel-kafka: safe unsubscription should ignore safe exceptions,CAMEL-17493,13422781,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,14/Jan/22 17:31,18/Jan/22 12:56,13/Jul/23 08:34,18/Jan/22 12:56,,,,,3.14.1,3.15.0,,,,camel-kafka,,,,,0,,,"When unsubscribing from Kafka, the code passes to the handler any exception that it receives. However, for some scenarios (i.e.: when the consumer is closed) it should be safe to ignore it.

 

See: [https://github.com/apache/camel/pull/6751#issuecomment-1013109427]",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17489,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 18 12:56:13 UTC 2022,,,,,,,,,,,"0|z0ylsw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"18/Jan/22 12:56;orpiske;Fixed and backported.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CamelBeanPostProcessor fails if @Producer is used in EventNotifier,CAMEL-17492,13422756,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rambichler,rambichler,14/Jan/22 15:25,28/Jan/22 08:07,13/Jul/23 08:34,15/Jan/22 08:50,3.12.0,3.13.0,3.14.0,,3.14.1,3.15.0,,,,camel-core,camel-spring-boot,,,,0,,,"If you use a @Produce annotation in an EventNotifier Camel fails at startup.

*Reproducable with:* Custom EventNotifier in a plain Camel + Springboot Routebuilder.
I have reproduced it with the spring boot example: [https://github.com/apache/camel-spring-boot-examples/tree/main/spring-boot] and added the EventNotifier below.
 
Fails since Camel > 3.11
 
Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error post processing bean: testEventNotifier; nested exception is java.lang.NullPointerException
....
Caused by: org.springframework.beans.factory.BeanCreationException: Error post processing bean: testEventNotifier; nested exception is java.lang.NullPointerException
at org.apache.camel.spring.spi.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:160) ~[camel-spring-3.14.0.jar:3.14.0]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:440) ~[spring-beans-5.3.14.jar:5.3.14]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796) ~[spring-beans-5.3.14.jar:5.3.14]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620) ~[spring-beans-5.3.14.jar:5.3.14]
... 122 common frames omitted

 

 

*Example*

[https://github.com/apache/camel-spring-boot-examples/tree/main/spring-boot] and added the EventNotifier below.

{{TestEventNotifier.java}}

 

{{@Component}}
{{public class TestEventNotifier extends EventNotifierSupport {}}

{{   @Produce(""stream:out"")}}
{{   TestProducer producer;}}

{{   @Override}}
{{   public void notify(CamelEvent event) throws Exception {}}
{{      System.err.println(event);}}
{{      //producer.publish(""some notification"");}}
{{   }}}
{{}}}

{{---------------------------------------------------}}

{{TestProducer.java:}}

{{import org.apache.camel.InOnly;}}

{{@InOnly}}
{{public interface TestProducer {}}
{{   void publish(String event);}}
{{}}}

 ",,davsclaus,rambichler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jan 14 18:37:57 UTC 2022,,,,,,,,,,,"0|z0ylnc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Jan/22 17:27;davsclaus;Its *** spring that creates this class too soon, as camel context is not created first - the class is @component so spring decides the order they are created;;;","14/Jan/22 18:37;rambichler;[~davsclaus] i suppose so. But what change between 3.11 -> 3.12 leads to that. spring version is the same.;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-openapi-java - Operation paths are incorrect if contextPath is set,CAMEL-17491,13422751,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,klease78,jamesnetherton,jamesnetherton,14/Jan/22 14:44,21/Jan/22 16:37,13/Jul/23 08:34,21/Jan/22 16:37,3.13.0,3.14.0,,,3.15.0,,,,,camel-openapi-java,,,,,0,,,"Consider this REST configuration:

{code}
restConfiguration()
    .host(""localhost"")
    .apiHost(""localhost"")
    .contextPath(""/api"")
    .port(8080)
    .apiContextPath(""/api-docs"");


rest(""/service"")
    .get(""/testing"").description(""Test Service"")
    .outType(String.class)
    .route().setBody().constant(""Hello World"");
{code}

The 'paths' object in the generated OpenAPI document is incorrect. It should not have the '/api' context path prefix.

{code}
{
  ""openapi"" : ""3.0.2"",
  ""info"" : { },
  ""servers"" : [ {
    ""url"" : ""/api""
  } ],
  ""paths"" : {
    ""/api/service/testing"" : {
      ""get"" : {
        ""tags"" : [ ""/service"" ],
        ""responses"" : {
          ""200"" : { }
        },
        ""operationId"" : ""verb1"",
        ""summary"" : ""Test Service""
      }
    }
  },
  ""components"" : { },
  ""tags"" : [ {
    ""name"" : ""/service""
  } ]
}
{code}

The OpenAPI spec states: 

""Unless specified otherwise, all properties that are URLs MAY be relative references as defined by RFC3986. Relative references are resolved using the URLs defined in the Server Object as a Base URI."".

If you try to execute the service in the Swagger UI, then it tries to hit http://localhost:8080/api/api/service/testing (duplicate /api/api in the path).

Maybe the code we had before CAMEL-17063 was implemented was more correct?
",,davsclaus,jamesnetherton,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17535,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 20 18:53:25 UTC 2022,,,,,,,,,,,"0|z0ylm8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Jan/22 14:45;jamesnetherton;Originally reported here:

https://github.com/apache/camel-quarkus/issues/3457;;;","14/Jan/22 16:43;davsclaus;[~klease78] you have fixed before in openapi, wonder if you could take a look later?;;;","16/Jan/22 21:56;klease78;Sure, I think it must be similar to the other issue.;;;","17/Jan/22 17:26;klease78;[~davsclaus] I found that when I remove the context path from the operations in the generated swagger, the camel-spring-boot-examples/rest-openapi-springdoc is broken because the generated server URL doesn't include the ""/api"".

The main reason for this is the following comment in SpringdocAutoConfiguration.java:
{code:java}
// Note: do not copy servers, since we use the spring-boot configured setting{code}
So the configured context path is ignored.
Maybe there is some other way to specify it in the spring-boot configuration, but so far the only way I found is to add an annotation in the spring-boot Application.java:
{code:java}
@io.swagger.v3.oas.annotations.OpenAPIDefinition(
        servers = {@Server(url = ""http://localhost:8080/api"")}    
)
{code}
It seems to make more sense to use the information in the generated OpenAPI which uses the RestConfiguration instead of having to specify it separately. I tried this and it works. If the annotation is also present it overrides the values in the openapi servers configuration.
I also noticed that the BeanConfig passed to RestOpenApiReader.read() in SpringdocAutoConfiguration doesn't read the same values from the RestConfiguration as the code in the camel-openapi-java component, for example, it actually ignores the contextPath. I could fix this.

Any feedback?;;;","18/Jan/22 12:35;davsclaus;Thanks Karen for diving into this.

Yeah I think it makes sense to make the rest-dsl similar/consistent across runtimes, and that it primary uses the restConfiguration from Camel itself.
That annotation is from swagger and not spring boot so that would be general swagger, and so I think you are right that we can use it.

When you have fixes ready then send a PR then it helps review and also understand what we are doing better.
And also if we need to add a note to the 3.15 upgrade guide to alter users about changes when upgrading Camel.;;;","20/Jan/22 18:53;klease78;I created a PR for the change in camel-openapi-java. For the moment I didn't change the springdoc component.;;;",,,,,,,,,,,,,,,,,,,,
camel-kafka - Unsubscribing fails due to already closed consumer,CAMEL-17489,13422727,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,rgala,rgala,14/Jan/22 11:15,24/Jan/22 05:56,13/Jul/23 08:34,24/Jan/22 05:56,3.14.0,,,,3.14.1,3.15.0,,,,camel-kafka,,,,,0,,,"In {*}KafkaFetchRecords{*}, when an exception occurs inside *startPolling* method, the consumer is closed in finally block:
{code:java}
finally {
    lock.unlock();

    // only close if not retry
    if (!isRetrying()) {
        LOG.debug(""Closing consumer {}"", threadId);
        IOHelper.close(consumer);
    }
} {code}
 and then unsubscribing in *run* method fails with ""This consumer has already been closed""
{code:java}
LOG.info(""Terminating KafkaConsumer thread: {} receiving from topic: {}"", threadId, topicName);
safeUnsubscribe();
IOHelper.close(consumer); {code}",,davsclaus,orpiske,rgala,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17493,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jan 23 16:48:59 UTC 2022,,,,,,,,,,,"0|z0ylgw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Jan/22 11:24;davsclaus;Can you post the stractrace / error you see from the logs;;;","14/Jan/22 11:26;rgala;There you go:

 
{noformat}
2022-01-14 11:59:27.612 [Camel (camel-1) thread #778 - KafkaConsumer[***masked***]] WARN  org.apache.camel.component.kafka.KafkaConsumer.log:214 - Error unsubscribing ***masked***-Thread 0 from kafka topic ***masked***. Caused by: [java.lang.IllegalStateException - This consumer has already been closed.]
java.lang.IllegalStateException: This consumer has already been closed.
    at org.apache.kafka.clients.consumer.KafkaConsumer.acquireAndEnsureOpen(KafkaConsumer.java:2437)
    at org.apache.kafka.clients.consumer.KafkaConsumer.unsubscribe(KafkaConsumer.java:1062)
    at org.apache.camel.component.kafka.KafkaFetchRecords.safeUnsubscribe(KafkaFetchRecords.java:239)
    at org.apache.camel.component.kafka.KafkaFetchRecords.run(KafkaFetchRecords.java:105)
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
    at java.base/java.lang.Thread.run(Thread.java:834){noformat};;;","14/Jan/22 13:17;davsclaus;So with your PR then you do not see this exception anymore?

I think the safeUnsubscribe method should catch IllegalStateException and then catch
throw new IllegalStateException(""This consumer has already been closed."");
As that is what kafka throws on purpose.

And you cannot know if its closed already, as there are no method like isClosed();;;","14/Jan/22 13:41;rgala;My solution will only make sure the unsubscribe is called before a consumer instance is called so it will most probably not prevent the error from occuring. I think that to prevent this error from occuring a boolean variable should be created and set to true after a consumer has been closed. The variable would then be checked inside *safeUnsubscribe* to prevent calls to unsubscribe on an already closed consumer.

 

What I could also try is to introduce a check in *safeUnsubscribe* method that would check a result of *consumer.subscription()* and call unsubscribe only in a case where non empty set has been returned. I could also introduce a boolean variable that I would set to true after first call to unsubscribe to prevent multiple calls.

 

Let me know what you think and I'll make changes in the code :);;;","14/Jan/22 17:33;orpiske;FYI: I logged CAMEL-17493 for the safeUnsubscribe change.

 ;;;","23/Jan/22 16:47;davsclaus;Is there more work to do in this ticket?;;;","23/Jan/22 16:48;orpiske;[~davsclaus] no, we are done w/ this one. I also back-ported it to 3.14.x.;;;",,,,,,,,,,,,,,,,,,,
camel-karaf: verify goal error for karaf-maven-plugin,CAMEL-17487,13422606,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,13/Jan/22 18:52,13/Jan/22 22:08,13/Jul/23 08:34,13/Jan/22 18:57,,,,,3.15.0,,,,,karaf,,,,,0,,,"loads of error like
{code}
Error downloading wrap:file:/Users/ffang/.m2/repository/org/apache/activemq/activemq-osgi/5.16.3/activemq-osgi-5.16.3.jar$overwrite=merge&Import-Package=org.springframework.*;resolution:=optional;version=""[5,6)"",*;resolution:=optional
[ERROR] 	Error downloading wrap:file:/Users/ffang/.m2/repository/org/apache/activemq/activemq-osgi/5.16.3/activemq-osgi-5.16.3.jar$overwrite=merge&Import-Package=org.springframework.*;resolution:=optional;version=""[5,6)"",*;resolution:=optional
[ERROR] 	Error downloading wrap:file:/Users/ffang/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.5.9/zookeeper-jute-3.5.9.jar$Export-Package=org.apache.jute;version=3.5.9,org.apache.zookeeper.*;version=3.5.9
[ERROR] 	Error downloading wrap:file:/Users/ffang/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.5.9/zookeeper-jute-3.5.9.jar$Export-Package=org.apache.jute;version=3.5.9,org.apache.zookeeper.*;version=3.5.9
[ERROR] 	Error downloading wrap:file:/Users/ffang/.m2/repository/org/apache/zookeeper/zookeeper/3.5.9/zookeeper-3.5.9.jar$Export-Package=org.apache.zookeeper;version=3.5.9,org.apache.zookeeper.*;version=3.5.9
[ERROR] 	Error downloading wrap:file:/Users/ffang/.m2/repository/org/apache/zookeeper/zookeeper/3.5.9/zookeeper-3.5.9.jar$Export-Package=org.apache.zookeeper;version=3.5.9,org.apache.zookeeper.*;version=3.5.9
{code}",,ffang,,,,,,,,,,,,,,,,,,,,,,CAMEL-17381,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 13 19:00:05 UTC 2022,,,,,,,,,,,"0|z0ykq0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Jan/22 18:55;ffang;I was thinking this is something wrong in pax-url-wrap handler, but it turned out that this is caused by biz.aQute.bndlib version isn's correct, so that aQute.bnd.osgi.Constants in use doesn't have  the expected headers field
;;;","13/Jan/22 19:00;ffang;also fixed up camel-coap feature;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-core - ThrottlePermit compareTo cast to int causes issues,CAMEL-17486,13422591,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bmarc,bmarc,13/Jan/22 17:54,14/Jan/22 06:40,13/Jul/23 08:34,14/Jan/22 06:40,,,,,3.11.6,3.14.1,3.15.0,,,camel-core,,,,,0,,,"When a Throttler has not been used for longer than Integer#MAX_VALUE, casting the result of the ThrottlePermit comparison to an int causes a bit overflow.

Using a value comparison prevents this issue.
 
Current :
{code:java}
private static class ThrottlePermit implements Delayed {

    @Override
    public int compareTo(final Delayed o) {
        return (int) (getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS));
    }
}
{code}

Proposal :
{code:java}
private static class ThrottlePermit implements Delayed {

        @Override
        public int compareTo(final Delayed o) {
            return Long.compare(getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));
        }
}
{code}

Unit Test :
{code:java}
public class ThrottlerPermitTest {

    /**
     *   When a Throttler has not been used for longer than {@link java.lang.Integer#MAX_VALUE},
     *   casting the result of the {@link ThrottlePermit} comparison to an int causes a bit overflow.
     *   Using a value comparison prevents this issue.
     **/
    @Test
    public void testThrottlerPermitWithOldScheduledTime() {
        long timeMillis = System.currentTimeMillis();
        // 30 days in the past
        ThrottlePermit throttlePermitOld = new ThrottlePermit(timeMillis -2592000000L);
        // Now
        ThrottlePermit throttlePermitNow = new ThrottlePermit(timeMillis);
        ThrottlePermit throttlePermitNow2 = new ThrottlePermit(timeMillis);
        // Future
        ThrottlePermit throttlePermitFuture = new ThrottlePermit(timeMillis + 1000);

        assertEquals(-1, throttlePermitOld.compareTo(throttlePermitNow));
        assertEquals(0, throttlePermitNow.compareTo(throttlePermitNow2));
        assertEquals(1, throttlePermitFuture.compareTo(throttlePermitNow));
    }

    private final class ThrottlePermit implements Delayed {
        private volatile long scheduledTime;

        ThrottlePermit(final long delayMs) {
            setDelayMs(delayMs);
        }

        public void setDelayMs(final long delayMs) {
            this.scheduledTime = System.currentTimeMillis() + delayMs;
        }

        @Override
        public long getDelay(final TimeUnit unit) {
            return unit.convert(scheduledTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);
        }

        @Override
        public int compareTo(final Delayed o) {
            return Long.compare(getDelay(TimeUnit.MILLISECONDS), o.getDelay(TimeUnit.MILLISECONDS));
        }
    }
}
{code}",,bmarc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 13 18:05:28 UTC 2022,,,,,,,Patch Available,,,,"0|z0ykmo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Jan/22 18:05;bmarc;Change commit, In order to reproduce the edge case, the test extracts a copy of ThrottlePermit : 
https://github.com/hellhand/camel/commit/c53317091672fd049440e7397309be6f45958666;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel-JSLT: Currently it could only load resources from classpath,CAMEL-17485,13422533,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,13/Jan/22 13:29,17/Jan/22 11:40,13/Jul/23 08:34,17/Jan/22 11:40,3.14.0,,,,3.11.6,3.14.1,3.15.0,,,,,,,,0,,,"But the documentation is reporting that it is possible to load from file,http, bean etc.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-13 13:29:02.0,,,,,,,,,,,"0|z0yk9s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp: reconnection logic is not respecting the reconnectDelay,CAMEL-17477,13422234,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,12/Jan/22 12:44,13/Jan/22 16:04,13/Jul/23 08:34,13/Jan/22 16:04,3.14.0,3.15.0,,,3.14.1,3.15.0,,,,camel-smpp,,,,,0,,,The background task responsible for handling the re-connection logic does not use the reconnect delay setting.,,orpiske,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17472,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 13 16:04:14 UTC 2022,,,,,,,,,,,"0|z0yifk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Jan/22 12:44;orpiske;Added related issue.;;;","13/Jan/22 16:04;orpiske;The issue was fixed on both versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-core: deadlock with multicast in a transacted context,CAMEL-17474,13422049,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jeremyross,jeremyross,11/Jan/22 20:50,04/Mar/22 08:36,13/Jul/23 08:34,01/Mar/22 16:32,3.13.0,3.14.0,,,3.14.2,3.16.0,,,,camel-core,,,,,8,,,"Using a multicast with more than one child in a transacted context causes a deadlock. Reproducer here https://github.com/jeremyross/camel-transacted-multicast.
",,davsclaus,Edwardkuenen,jeremyross,jondruse,louisa.frison,TCke83,yasserzamani,zhfeng,,,,,,,,,,,,,CAMEL-17609,,,,CAMEL-17609,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Feb 28 03:23:22 UTC 2022,,,,,,,,,,,"0|z0yhao:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Jan/22 17:32;jeremyross;Looks like this was introduced in 3.13.0.;;;","19/Jan/22 10:33;jondruse;I've found the origin of the problem. It is caused by the commit [https://github.com/apache/camel/commit/961ad0e56e9331e71c386415ec67676e586ea629] (I was able to debug different behavior here: https://github.com/apache/camel/commit/961ad0e56e9331e71c386415ec67676e586ea629#diff-592328b1c35a306fa6ba3875f63b872de065e6d973ea89870d579bbab505cfadR214 )

 

[~davsclaus] From my POV it  makes sense, that deadlock is happening. As you can see route definition from the reproducer, multicast is calling twice the same endpoint
{code:java}
from(""direct:route2"").routeId(""r.route2"")
    .log(LoggingLevel.DEBUG, ""Entering route: ${routeId}"")
    .multicast()
        .to(""log:r.test"", ""log:r.test"")
    .end(); {code}
*If those endpoint are different, deadlock is not happening.*
I'd say, that transaction behaves correctly. Transaction blocks access to the same endpoints, which are used almost at the same time, which causes deadlock.
Error can be the fact, that it worked before 3.13.0
WDYT?
;;;","20/Jan/22 03:04;jeremyross;[~jondruse] I get the deadlock even if the multicast children are different endpoints. Updated the reproducer to reflect this.;;;","20/Jan/22 07:26;jondruse;[~jeremyross] You are right, it doesn't help top have different endpoints. (I probably simulated that case with the working camel version - so it showed false success).
*But the origin of the reason is still  the same as I wrote*.
Now I don't think that it is the right behavior. Deadlock is an issue, which shouldn't be there.  Following route shouldn't cause deadlock, but it causes.
{code}
            .multicast()
                .to(""log:r.test"", ""direct:r.test"")
            .end();
{code};;;","22/Jan/22 17:32;davsclaus;Sorry Jiri, I have not had time to look into this. Will try next week;;;","28/Jan/22 13:25;yasserzamani;Similar issue we've faced: https://github.com/apache/camel-quarkus/issues/3471

Not sure we're completely if it's Quarkus specific issue, or is introduced by Camel.;;;","28/Jan/22 14:14;jondruse;Thanks [~yasserzamani] for bringing CQ issue to our attention. I commented that issue, it should be possible to determine, whether it is related or not.;;;","11/Feb/22 16:00;zhfeng;Is there any update? I just added a camel test to reflect the CQ issue. https://github.com/zhfeng/apache-camel/blob/transacted_split/tests/camel-itest/src/test/java/org/apache/camel/itest/tx/JtaRouteTest.java

It hangs when running with  *RequiresNewJtaTransactionPolicy* but works with *SpringTransactionPolicy*. I thinks it might be releated to this issue and will keep investigating.;;;","14/Feb/22 13:16;jondruse;Hi [~zhfeng] , thanks for the test (based on CQ [issue|https://github.com/apache/camel-quarkus/issues/3471]). I'll try it and verify whether problem is caused by the same commit as this issue.

[~davsclaus] Do you have an idea, what could be wrong?;;;","14/Feb/22 14:17;jondruse;I tried to change following line https://github.com/apache/camel/blob/main/core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java#L214 into ` reactiveExecutor.scheduleSync(task);` and test `JtaRouteTest` is successful.

This confirms, that the error is the same. I'll try to investigate, but I'm not sure whether I would be able to find a fix, without [~davsclaus]'s help.;;;","14/Feb/22 15:28;zhfeng;Thanks [~jondruse] but I'm still wondering that why *SpringTransactionPolicy* is working. In camel-spring *without* the changes in RedeliveryErrorHandler, *TransactionErrorHandler* also extends *RedeliveryErrorHandler* and with 

{code:java}
protected void processByErrorHandler(final Exchange exchange) {
        awaitManager.process(new AsyncProcessorSupport() {
            @Override
            public boolean process(Exchange exchange, AsyncCallback callback) {
                return TransactionErrorHandler.super.process(exchange, callback);
            }
        }, exchange);
    }

{code}
;;;","14/Feb/22 16:01;jondruse;I agree that the fact, that *SpringTransactionPolicy* is working, does not make sense in the way, that problem is caused by the camel itself only.
I'm trying to simulate the problem with my custom policy -> just to find what is causing it exactly - but no success so far.;;;","14/Feb/22 16:33;davsclaus;Sorry but this problem is more hard-core where you need some quiet time to analyse. My family and myself is struck with covid so I dont have the energy to dive into this at the moment.;;;","15/Feb/22 07:25;jondruse;I'm sorry to hear about that. Fingers crossed that situation will improve soon.;;;","15/Feb/22 16:06;jondruse;[~zhfeng] I have a theory, what could be reason of this error. As you can see here: [https://github.com/apache/camel/blob/main/components/camel-jta/src/main/java/org/apache/camel/jta/TransactionErrorHandler.java#L91]
{code:java}
    @Override
    public void process(Exchange exchange) throws Exception {
        // we have to run this synchronously as a JTA Transaction does *not*
        // support using multiple threads to span a transaction
{code}
JtaTransactionErrorHandler has to be run synchronously. Unfortunately the change from [https://github.com/apache/camel/commit/961ad0e56e9331e71c386415ec67676e586ea629#diff-592328b1c35a306fa6ba3875f63b872de065e6d973ea89870d579bbab505cfadR214], which replaces ""reactiveExecutor.scheduleSync(task);"" with ""reactiveExecutor.scheduleQueue(task);"" changed synchronous executions to asynchronous. With that changed, jta/TransactionErrorHandler does not work correctly.

Quick fix is to revert back synchronous behavior, but I'm sure that it is not correct. Do you have an idea how this could be fixed?

 

I see a possibility to define synchronous executions in case that camel-jta transactions are used. I'm ot sure whether it will be p

At least this explains why spring transaction works (does not need synchronous executions)...;;;","16/Feb/22 02:14;zhfeng;[~davsclaus] I'm sorry to hear that and hope all of you will recovery very soon. [~jondruse] Thanks so much to investigate this and yeah, I think most codes of the jta TransactionErrorHandler was borrowed from the spring one just replace the spring transaction template. I will dive into this sychronous executions in TransactionErrorHandler to see if we can find a way to fix it.;;;","21/Feb/22 12:53;jondruse;Hi [~zhfeng] , 
I created a PR with my attempt to force synchronous behavior in case that JTA transaction is used - [https://github.com/apache/camel/pull/7004]

Do you have any success in solving this problem on the JTA side?;;;","21/Feb/22 15:26;zhfeng;Thanks [~jondruse] I added my comment on your PR and it looks like another solution with marking the exchange transacted in [JtaTransactionErrorHandler|https://github.com/zhfeng/apache-camel/blob/transacted_split/components/camel-jta/src/main/java/org/apache/camel/jta/JtaTransactionErrorHandler.java#L72-L83] 
;;;","23/Feb/22 12:54;davsclaus;[~zhfeng] would you backport this to 3.14.x LTS branch;;;","23/Feb/22 12:55;davsclaus;And that is the JTA fix, for spring boot then there is potentially still an issue.;;;","24/Feb/22 07:08;zhfeng;yeah, I've backport to 3.14.x;;;","24/Feb/22 10:21;zhfeng;[~davsclaus] hi, there is still an issue while backporing becasue no camel-cdi-jta in 3.14.x and it has to bind TransactionManager in JNDI context. I'm working on it.;;;","25/Feb/22 14:25;zhfeng;[~jeremyross] [~jondruse] I just found that if adding ""transacted()"" in route2, it works.

{code:java}
    from(""direct:route2"").routeId(""r.route2"")
            .log(LoggingLevel.DEBUG, ""Entering route: ${routeId}"")
            .transacted()
            .multicast()
                // 2 or more multicast children will deadlock after the last child
                .to(""log:r.test"", ""direct:route3"")
            .end();

{code}

So it looks like the exchange in the sub-routes is not trancated ?;;;","25/Feb/22 16:17;jeremyross;Sub-routes should automatically participate in the transacted context. If not, that's new behavior, likely a bug, and maybe the cause of this issue.;;;","25/Feb/22 16:40;zhfeng;[~davsclaus] I raise a fix with https://github.com/apache/camel/pull/7040. Please review it.;;;","28/Feb/22 03:23;zhfeng;[~jeremyross]  [~davsclaus] I don't think we have a behavior to propagate a transaction in the sub routes such as multicase EIP currently.;;;"
camel-github: startingSha=last doesn't work properly,CAMEL-17473,13422004,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,apilo,apilo,11/Jan/22 15:10,11/Jan/22 15:47,13/Jul/23 08:34,11/Jan/22 15:45,3.14.0,,,,3.14.1,3.15.0,,,,camel-github,,,,,0,,,"When *startingSha* is set to ""last"" the component does not start from the last commit.

The problem is related to the fact that the egit eclipse library returns the list of commits in order (from latest to oldest) but in the code the opposite is assumed: [here|https://github.com/apache/camel/blob/0e4f4923440c3ef34306595ab70447879bdab4e5/components/camel-github/src/main/java/org/apache/camel/component/github/consumer/CommitConsumer.java#L77]",,acosentino,apilo,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Jan/22 15:06;apilo;mypatch.patch;https://issues.apache.org/jira/secure/attachment/13038616/mypatch.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 11 15:47:46 UTC 2022,,,,,,,Patch Available,,,,"0|z0yh0o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Jan/22 15:45;davsclaus;Thanks for reporting and the patch;;;","11/Jan/22 15:47;acosentino;I think this is a duplicate of another issue i was working on. Thanks a lot Andrea for that patch! ;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp: Consumer reconnect no longer works after updating to 3.14.0,CAMEL-17472,13421997,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,pascalschumacher,pascalschumacher,11/Jan/22 14:42,13/Jan/22 16:26,13/Jul/23 08:34,13/Jan/22 16:04,3.14.0,,,,3.14.1,3.15.0,,,,camel-smpp,,,,,0,,,"We using camel-smpp with Spring Boot.

After updating the version from 3.13.0 to 3.14.0 reconnecting (at least for the consumer, do not know if the producer is also affected) does not seem to work anymore.

We use the default values for maxReconnect and initialReconnectDelay. We set reconnectDelay to 60000.

With version 3.13.0 and before camel tried to reconnect for a long time. With camel 3.14.0 there does not seem to be any reconnect attempts:

{code}
Jan 11, 2022 @ 04:20:11.499 - SmppConsumer - Lost connection to: smpp://XXX:YYY - trying to reconnect...
Jan 11, 2022 @ 04:20:16.516 - BackgroundTask - The task smpp-reconnect does not have more budget to continue running
Jan 11, 2022 @ 04:20:17.516 - BackgroundTask - The task smpp-reconnect does not have more budget to continue running
Jan 11, 2022 @ 04:20:18.516 - BackgroundTask - The task smpp-reconnect does not have more budget to continue running
Jan 11, 2022 @ 04:20:19.516 - BackgroundTask - The task smpp-reconnect does not have more budget to continue running
Jan 11, 2022 @ 04:20:20.516 - BackgroundTask - The task smpp-reconnect does not have more budget to continue running
Jan 11, 2022 @ 04:20:21.516 - BackgroundTask - The task smpp-reconnect does not have more budget to continue running
... (endless repeat of the last log message)
{code}

I guess this was caused by https://issues.apache.org/jira/browse/CAMEL-17121

 

 

 ",,davsclaus,orpiske,pascalschumacher,,,,,,,,,,,,,,,,,,,,,CAMEL-17121,,,CAMEL-17477,CAMEL-17482,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 13 16:04:52 UTC 2022,,,,,,,,,,,"0|z0ygz4:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"11/Jan/22 14:49;davsclaus;[~orpiske] ^^^;;;","11/Jan/22 15:33;orpiske;Thanks [~davsclaus], I'll take a look.;;;","11/Jan/22 16:17;orpiske;[~pascalschumacher] are you able to give it a try on this proposed fix, please? 

[https://github.com/apache/camel/pull/6722];;;","11/Jan/22 17:20;pascalschumacher;[~orpiske] Thank you very much for looking into this.

I tried your fix, but it does not seem to be enough to fix the issue.

With the fix i get:
{code:java}
2022-01-11 17:50:19.482  WARN 17128 --- [Sender-12511ac2] o.a.camel.component.smpp.SmppConsumer    : Lost connection to: smpp://XXX:YYYY - trying to reconnect...
2022-01-11 17:50:19.486  WARN 17128 --- [Sender-12511ac2] o.a.camel.support.task.BackgroundTask    : Interrupted while waiting for the repeatable task to execute
{code}
no further reconnection attempts/log messages.

For comparision the log with camel 3.13.0:
{code:java}
2022-01-11 18:14:29.203  WARN 13456 --- [Sender-56f2f152] o.a.camel.component.smpp.SmppConsumer    : Lost connection to: smpp://XXX:YYY - trying to reconnect...
2022-01-11 18:14:29.204  INFO 13456 --- [      Thread-36] o.a.camel.component.smpp.SmppConsumer    : Schedule reconnect after 5000 millis
2022-01-11 18:14:34.207  INFO 13456 --- [      Thread-36] o.a.camel.component.smpp.SmppConsumer    : Trying to reconnect to smpp://XXX:YYY - attempt #1
2022-01-11 18:14:34.218  WARN 13456 --- [      Thread-36] o.a.camel.component.smpp.SmppConsumer    : Failed to reconnect to smpp://XXX:YYY
2022-01-11 18:15:34.219  INFO 13456 --- [      Thread-36] o.a.camel.component.smpp.SmppConsumer    : Trying to reconnect to smpp://XXX:YYY - attempt #2
2022-01-11 18:15:34.254  INFO 13456 --- [      Thread-36] org.jsmpp.session.SMPPSession            : Connected from port 62124 to /XXX:YYY
2022-01-11 18:15:34.255  INFO 13456 --- [Worker-52477284] org.jsmpp.session.SMPPSession            : Starting PDUReaderWorker
2022-01-11 18:15:34.390  INFO 13456 --- [ool-10-thread-1] org.jsmpp.session.SMPPSession            : Changing processor degree to 1
2022-01-11 18:15:34.390  INFO 13456 --- [      Thread-36] org.jsmpp.bean.OptionalParameters        : Optional Parameter Tag class org.jsmpp.bean.OptionalParameter$Sc_interface_version not found
2022-01-11 18:15:34.391  INFO 13456 --- [      Thread-36] o.a.camel.component.smpp.SmppConsumer    : Reconnected to smpp://XXX:YYY
{code};;;","11/Jan/22 18:09;orpiske;Happy to help!

That's very strange. I have just tested the patch using the manual reconnect test and I got this:
{code:java}
2022-01-11 19:04:58,171 [main           ] DEBUG SmppConsumer                   - Connecting to: smpp://smppclient@localhost:2775...
2022-01-11 19:04:58,186 [main           ] INFO  SMPPSession                    - Connected from port 37744 to localhost/127.0.0.1:2775
2022-01-11 19:04:58,188 [Worker-fe0d7ef6] INFO  SMPPSession                    - Starting PDUReaderWorker
2022-01-11 19:05:08,139 [Worker-fe0d7ef6] INFO  SMPPSession                    - Reading PDU session fe0d7ef6 in state OPEN: null
2022-01-11 19:05:08,142 [Worker-fe0d7ef6] WARN  SmppConsumer                   - Lost connection to: smpp://smppclient@localhost:2775 - trying to reconnect...
2022-01-11 19:05:13,149 [ smpp-reconnect] INFO  SmppConsumer                   - Trying to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:13,152 [ smpp-reconnect] WARN  SmppConsumer                   - Failed to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:14,149 [ smpp-reconnect] INFO  SmppConsumer                   - Trying to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:14,150 [ smpp-reconnect] WARN  SmppConsumer                   - Failed to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:15,149 [ smpp-reconnect] INFO  SmppConsumer                   - Trying to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:15,150 [ smpp-reconnect] WARN  SmppConsumer                   - Failed to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:16,149 [ smpp-reconnect] INFO  SmppConsumer                   - Trying to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:16,150 [ smpp-reconnect] WARN  SmppConsumer                   - Failed to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:17,149 [ smpp-reconnect] INFO  SmppConsumer                   - Trying to reconnect to smpp://smppclient@localhost:2775
2022-01-11 19:05:17,149 [ smpp-reconnect] INFO  SMPPSession                    - Connected from port 37754 to localhost/127.0.0.1:2775
2022-01-11 19:05:17,150 [Worker-eca5d2f0] INFO  SMPPSession                    - Starting PDUReaderWorker
 
{code}
 

Is there something else I can do to reproduce the configuration you have?

 

1. [https://github.com/apache/camel/blob/main/components/camel-smpp/src/test/java/org/apache/camel/component/smpp/integration/SmppConsumerReconnectManualIT.java];;;","11/Jan/22 19:08;pascalschumacher;I use a remote smpp server for testing. To simulate a disconnect I cut the network connection.

latch.await() at [https://github.com/apache/camel/blob/main/core/camel-support/src/main/java/org/apache/camel/support/task/BackgroundTask.java#L154] throws an InterruptedException when I am testing. No idea why or how debug this further (the InterrupetException does not contain any useful information).

I guess it would work for me too if I were to use a local smpp server and shut it down to simulate disconnect.

 

Edit:

I set a breakpoint at the entry of Thread#interrupt. I hope this is the right stacktrace:
{code}
Daemon Thread [EnquireLinkSender-0a4b4b93] (Suspended (entry into method interrupt in Thread))	
	owns: SMPPSessionContext  (id=192)	
	Thread.interrupt() line: 988	
	ThreadPoolExecutor$Worker.interruptIfStarted() line: 670	
	RejectableScheduledThreadPoolExecutor(ThreadPoolExecutor).interruptWorkers() line: 769	
	RejectableScheduledThreadPoolExecutor(ThreadPoolExecutor).shutdownNow() line: 1417	
	RejectableScheduledThreadPoolExecutor(ScheduledThreadPoolExecutor).shutdownNow() line: 870	
	SizedScheduledExecutorService.shutdownNow() line: 241	
	BackgroundTask.waitForTaskCompletion(CountDownLatch, ScheduledExecutorService) line: 173	
	BackgroundTask.run(BooleanSupplier) line: 147	
	SmppConsumer.reconnect(long) line: 172	
	SmppConsumer.access$300(SmppConsumer, long) line: 48	
	SmppConsumer$1.onStateChange(SessionState, SessionState, Session) line: 76	
	SMPPSessionContext(AbstractSessionContext).fireStateChanged(SessionState, SessionState, Session) line: 85	
	SMPPSessionContext.changeState(SessionState) line: 61	
	SMPPSessionContext(AbstractSessionContext).close() line: 66	
	SMPPSession(AbstractSession).close() line: 257	
	AbstractSession$EnquireLinkSender.run() line: 503	
 {code};;;","11/Jan/22 19:40;orpiske;Thank you, that helps. While I go over this, I have updated the PR with more logging. This should give some additional hints. If you could take a moment to try that patch, it would be very helpful.;;;","11/Jan/22 19:44;orpiske;BTW: I think the timeout of the awaitTermination is too low and it is causing this, but I want to rule out another possibility first.;;;","12/Jan/22 09:53;pascalschumacher;Thanks, I test with the new pr later today.;;;","12/Jan/22 11:14;pascalschumacher;Log with the updated pull request:

{code}
2022-01-12 12:07:44.953  INFO 14452 --- [MSNotifications] o.a.camel.component.smpp.SmppConsumer    : Connected to: smpp://XXX:YYY
2022-01-12 12:09:04.145  INFO 14452 --- [Worker-1e061096] org.jsmpp.session.SMPPSession            : Reading PDU session 1e061096 in state BOUND_RX: Connection reset
2022-01-12 12:09:04.145 ERROR 14452 --- [Sender-1e061096] org.jsmpp.session.AbstractSession        : Response timeout on enquireLink

org.jsmpp.extra.ResponseTimeoutException: No response after waiting for 60000 millis when executing enquire_link with session 1e061096 and sequence_number 2
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:323)
	at org.jsmpp.session.AbstractSession.sendEnquireLink(AbstractSession.java:369)
	at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:500)
Caused by: org.jsmpp.extra.ResponseTimeoutException: No response after 60000 millis
	at org.jsmpp.extra.PendingResponse.waitDone(PendingResponse.java:118)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:317)
	... 2 common frames omitted

2022-01-12 12:09:04.146  WARN 14452 --- [Sender-1e061096] o.a.camel.component.smpp.SmppConsumer    : Lost connection to: smpp://XXX:YYY - trying to reconnect...
2022-01-12 12:09:04.150  WARN 14452 --- [Sender-1e061096] o.a.camel.support.task.BackgroundTask    : Interrupted while waiting for the repeatable task to execute: null

java.lang.InterruptedException: null
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1048)
	at java.base/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)
	at org.apache.camel.support.task.BackgroundTask.waitForTaskCompletion(BackgroundTask.java:154)
	at org.apache.camel.support.task.BackgroundTask.run(BackgroundTask.java:147)
	at org.apache.camel.component.smpp.SmppConsumer.reconnect(SmppConsumer.java:178)
	at org.apache.camel.component.smpp.SmppConsumer.access$300(SmppConsumer.java:48)
	at org.apache.camel.component.smpp.SmppConsumer$1.onStateChange(SmppConsumer.java:76)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:85)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:66)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:257)
	at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:503)
{code}

Edit:
I have been testing with the pull request applied on top of the camel-3.14.x branch.;;;","12/Jan/22 13:33;orpiske;Thanks. I am not sure if I nailed it yet, but I have pushed a few more changes.;;;","12/Jan/22 16:24;pascalschumacher;Thanks, with the new pull request I get:

{code}
2022-01-12 17:15:08.433  INFO 10968 --- [MSNotifications] o.a.camel.component.smpp.SmppConsumer    : Connected to: smpp://XXX:YYY
2022-01-12 17:16:27.633  INFO 10968 --- [Worker-3ad83cd4] org.jsmpp.session.SMPPSession            : Reading PDU session 3ad83cd4 in state BOUND_RX: Connection reset
2022-01-12 17:16:27.633 ERROR 10968 --- [Sender-3ad83cd4] org.jsmpp.session.AbstractSession        : Response timeout on enquireLink

org.jsmpp.extra.ResponseTimeoutException: No response after waiting for 60000 millis when executing enquire_link with session 3ad83cd4 and sequence_number 2
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:323)
	at org.jsmpp.session.AbstractSession.sendEnquireLink(AbstractSession.java:369)
	at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:500)
Caused by: org.jsmpp.extra.ResponseTimeoutException: No response after 60000 millis
	at org.jsmpp.extra.PendingResponse.waitDone(PendingResponse.java:118)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:317)
	... 2 common frames omitted

2022-01-12 17:16:27.633  WARN 10968 --- [Sender-3ad83cd4] o.a.camel.component.smpp.SmppConsumer    : Lost connection to: smpp://XXX:YYY - trying to reconnect...
2022-01-12 17:16:27.639  WARN 10968 --- [Sender-3ad83cd4] o.a.camel.support.task.BackgroundTask    : Interrupted while waiting for the repeatable task to execute: null

java.lang.InterruptedException: null
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1048)
	at java.base/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)
	at org.apache.camel.support.task.BackgroundTask.waitForTaskCompletion(BackgroundTask.java:155)
	at org.apache.camel.support.task.BackgroundTask.run(BackgroundTask.java:148)
	at org.apache.camel.component.smpp.SmppConsumer.reconnect(SmppConsumer.java:182)
	at org.apache.camel.component.smpp.SmppConsumer.access$300(SmppConsumer.java:48)
	at org.apache.camel.component.smpp.SmppConsumer$1.onStateChange(SmppConsumer.java:76)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:85)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:66)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:257)
	at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:503)
... no further tries to reconnect
{code}

It does not seem to improve the situation (at least for my test).;;;","12/Jan/22 16:28;orpiske;Thanks for double checking. I think I managed to reproduce the issue, so I am taking a closer look now.;;;","12/Jan/22 21:03;orpiske;I was able to reproduce the issue ... and with the latest set of changes, I think it's resolved. Can you, please, give it a try [~pascalschumacher] ?;;;","13/Jan/22 09:28;pascalschumacher;The latest changes fixed the reconnect:

{code}
2022-01-13 10:20:32.632  INFO 20744 --- [MSNotifications] o.a.camel.component.smpp.SmppConsumer    : Connected to: smpp://XXX:YYY
2022-01-13 10:21:51.833  INFO 20744 --- [Worker-cd2c6373] org.jsmpp.session.SMPPSession            : Reading PDU session cd2c6373 in state BOUND_RX: Connection reset
2022-01-13 10:21:51.833 ERROR 20744 --- [Sender-cd2c6373] org.jsmpp.session.AbstractSession        : Response timeout on enquireLink

org.jsmpp.extra.ResponseTimeoutException: No response after waiting for 60000 millis when executing enquire_link with session cd2c6373 and sequence_number 2
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:323)
	at org.jsmpp.session.AbstractSession.sendEnquireLink(AbstractSession.java:369)
	at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:500)
Caused by: org.jsmpp.extra.ResponseTimeoutException: No response after 60000 millis
	at org.jsmpp.extra.PendingResponse.waitDone(PendingResponse.java:118)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:317)
	... 2 common frames omitted

2022-01-13 10:21:51.834  WARN 20744 --- [Sender-cd2c6373] o.a.camel.component.smpp.SmppConsumer    : Lost connection to: smpp://XXX:YYY - trying to reconnect...
2022-01-13 10:21:51.840  WARN 20744 --- [Sender-cd2c6373] o.a.camel.support.task.BackgroundTask    : Interrupted while waiting for the repeatable task to execute: null

java.lang.InterruptedException: null
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1048)
	at java.base/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)
	at org.apache.camel.support.task.BackgroundTask.waitForTaskCompletion(BackgroundTask.java:153)
	at org.apache.camel.support.task.BackgroundTask.run(BackgroundTask.java:144)
	at org.apache.camel.component.smpp.SmppConsumer.reconnect(SmppConsumer.java:192)
	at org.apache.camel.component.smpp.SmppConsumer.access$300(SmppConsumer.java:51)
	at org.apache.camel.component.smpp.SmppConsumer$1.onStateChange(SmppConsumer.java:84)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:85)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:66)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:257)
	at org.jsmpp.session.AbstractSession$EnquireLinkSender.run(AbstractSession.java:503)

2022-01-13 10:21:56.841  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Trying to reconnect to smpp://XXX:YYY
2022-01-13 10:21:56.841  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Creating a new session to smpp://XXX:YYY
2022-01-13 10:21:56.851  WARN 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Failed to reconnect to smpp://XXX:YYY
2022-01-13 10:22:56.840  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Trying to reconnect to smpp://XXX:YYY
2022-01-13 10:22:56.840  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Creating a new session to smpp://XXX:YYY
2022-01-13 10:22:56.851  WARN 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Failed to reconnect to smpp://XXX:YYY
2022-01-13 10:23:56.842  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Trying to reconnect to smpp://XXX:YYY
2022-01-13 10:23:56.842  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Creating a new session to smpp://XXX:YYY
2022-01-13 10:23:56.880  INFO 20744 --- [sumer-reconnect] org.jsmpp.session.SMPPSession            : Connected from port 52797 to /XXX:YYY
2022-01-13 10:23:56.880  INFO 20744 --- [Worker-60a4e4c3] org.jsmpp.session.SMPPSession            : Starting PDUReaderWorker
2022-01-13 10:23:57.019  INFO 20744 --- [ool-22-thread-1] org.jsmpp.session.SMPPSession            : Changing processor degree to 1
2022-01-13 10:23:57.020  INFO 20744 --- [sumer-reconnect] org.jsmpp.bean.OptionalParameters        : Optional Parameter Tag class org.jsmpp.bean.OptionalParameter$Sc_interface_version not found
2022-01-13 10:23:57.020  INFO 20744 --- [sumer-reconnect] o.a.camel.component.smpp.SmppConsumer    : Reconnected to smpp://XXX:YYY
{code}

Thank you very much! :);;;","13/Jan/22 12:48;orpiske;Thank you as well. I'll cleanup the patch, fix one more issue I found and then merge it.;;;","13/Jan/22 16:04;orpiske;Closing, since it was fixed.;;;",,,,,,,,,
Snakeyaml: Use safe constructor where the default one has been used,CAMEL-17471,13421931,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,11/Jan/22 08:48,11/Jan/22 09:41,13/Jul/23 08:34,11/Jan/22 09:41,,,,,3.11.6,3.14.1,3.15.0,,,tooling,,,,,0,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-11 08:48:58.0,,,,,,,,,,,"0|z0ygkg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-openapi-java - Incorrect tags in openapi,CAMEL-17457,13421542,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,ncasaux,ncasaux,09/Jan/22 14:21,13/Jan/22 21:19,13/Jul/23 08:34,13/Jan/22 21:19,3.14.0,3.15.0,,,3.14.1,3.15.0,,,,camel-openapi-java,,,,,0,documentation,openapi,"Hello,

I'm using provided example: Spring Boot Example with Camel REST DSL and OpenApi ([https://github.com/apache/camel-spring-boot-examples/tree/main/rest-openapi-springdoc)]

I noticed that the generated tags are incorrect and contains some duplicate values, for example:
{code:java}
""/api/users"" : {
  ""get"" : {
    ""tags"" : [ ""/api/users/users"" ],
    ""responses"" : {
      ""200"" : {
        ""content"" : {
          ""application/json"" : {
            ""schema"" : {
              ""type"" : ""array"",
              ""items"" : {
                ""$ref"" : ""#/components/schemas/User""
              }
            }
          }
        },
        ""description"" : ""All users successfully returned""
      }
    },
    ""operationId"" : ""verb1"",
    ""summary"" : ""Find all users""
  }
}{code}
Note the value ""{{{}/api/users/users""{}}}

I tried to investigate in the source code of the component, and I found this line of code in class RestOpenApiReader:
{code:java}
// we need to group the operations within the same tag, so use the path as default if not configured
String opPath = OpenApiHelper.buildUrl(buildBasePath(camelContext, rest), getValue(camelContext, rest.getPath()));
String pathAsTag = getValue(camelContext, rest.getTag() != null ? rest.getTag() : opPath);{code}
I don't really understand the purpose of the opPath value, which contains the concatenation of ""/api/users"" and ""/users"". I guess it should be ""/api/users"" ?

It explains however why the pathAsTag value is consequently incorrect.

Hope it helps!",,davsclaus,klease78,ncasaux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 13 16:52:13 UTC 2022,,,,,,,,,,,"0|z0ye68:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Jan/22 06:08;davsclaus;Yeah it should be /api/users;;;","12/Jan/22 18:42;klease78;I suggest to change the generated tag so it would be just ""/users"" in this example. There is no way in the Camel Rest DSL to specify multiple tags and associate different operations to different tags, so it would make sense to use the main path specified in rest(path). Adding the context path (/api) doesn't add anything useful.;;;","13/Jan/22 15:39;davsclaus;Karen, yeah you are welcome to work on a PR;;;","13/Jan/22 16:52;klease78;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-undertow - Adds duplicate content-type,CAMEL-17454,13421461,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jan/22 09:23,13/Jan/22 10:14,13/Jul/23 08:34,13/Jan/22 10:14,3.14.0,,,,3.14.1,3.15.0,,,,camel-undertow,,,,,0,,,https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Duplicate.20Content-Type.20headers/near/267184902,,davsclaus,ramu11,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11028,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 13 10:10:17 UTC 2022,,,,,,,,,,,"0|z0ydo8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Jan/22 05:02;ramu11;[~davsclaus]  i have checked the camel-undertow code 
'DefaultUndertowHttpBinding' class has 2 methods  with same name 'populateCamelHeaders' with different method signatures


{code:java}
 @Override
    public void populateCamelHeaders(HttpServerExchange httpExchange, Map<String, Object> headersMap, Exchange exchange)
            throws Exception {
----------------------------------------------------------------------
 for (HttpString name : response.getResponseHeaders().getHeaderNames()) {
            // mapping the content-type
            //String name = httpName.toString();
            if (name.toString().toLowerCase(Locale.US).equals(""content-type"")) {
                name = ExchangeHeaders.CONTENT_TYPE;
            }

{code}


and


{code:java}
// 
  @Override
    public void populateCamelHeaders(HttpServerExchange httpExchange, Map<String, Object> headersMap, Exchange exchange)
            throws Exception {

  for (HttpString name : httpExchange.getRequestHeaders().getHeaderNames()) {
            // mapping the content-type
            //String name = httpName.toString();
            if (name.toString().toLowerCase(Locale.US).equals(""content-type"")) {
                name = ExchangeHeaders.CONTENT_TYPE;
            }
{code}


;;;jira-users","13/Jan/22 09:46;davsclaus;Thanks, yeah so its related to UndertowHelper.appendHeader that will if there is an existing header with the same key, make that into a list, and so we have duplicates;;;","13/Jan/22 10:10;davsclaus;Okay so it was a bit more tricky as this was only when using undertow with rest component, where it was filtering headers wrongly which cause the duplicate;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-util - URISupport#sanitizeUri sanitizes passwords incorrectly if remaining uri contains expression ${<expr>},CAMEL-17452,13421343,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,kalusn,kalusn,07/Jan/22 14:02,20/Jan/22 06:18,13/Jul/23 08:34,20/Jan/22 06:18,3.14.0,,,,3.14.1,3.15.0,,,,camel-core,,,,,0,,,"The following unit test demonstrates the problem with URISupport#sanitize:
{code:java}
    @Test
    public void testSanitizeUriWithRawPasswordAndSimpleExpression() {
        String uriPlain = ""http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"";
        String uriCurly = ""http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"";
        String expected = ""http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"";
        // ""http://foo?username=me&password=xxxxxx.tmp&anotherOption=true"" is the actual result
        assertEquals(expected, URISupport.sanitizeUri(uriPlain));
        assertEquals(expected, URISupport.sanitizeUri(uriCurly));
    }
{code}
The problem is that the SECRETS pattern in URISupport eagerly eats everything up until the ending of ${[file:name.noext|file:///name.noext]}.

It can be resolved by changing the regex-pattern, like so:
{code:java}
private static final Pattern SECRETS = Pattern.compile(
            ""([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW(([{][^}]*[}])|([(][^)]*[)]))|[^&]*)"",
            Pattern.CASE_INSENSITIVE);
{code}",,davsclaus,kalusn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 20 06:18:04 UTC 2022,,,,,,,,,,,"0|z0ycy0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"08/Jan/22 15:41;davsclaus;You are welcome to submit a PR;;;","20/Jan/22 06:18;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
Trigger start time for Quartz causes confusion with short trigger intervals,CAMEL-17446,13421108,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,klease78,klease78,klease78,06/Jan/22 16:21,21/Jan/22 16:52,13/Jul/23 08:34,21/Jan/22 16:52,3.13.0,,,,3.15.0,,,,,camel-quartz,,,,,0,,,"An issue reported on the users list shows that using trigger.repeatInterval=1200 causes the first 2 events to be fired sooner than expected after the scheduler is started.

This is due to the delay between creating the Quartz Trigger and when the scheduler is started.

Changing the log message to show the milliseconds in the trigger's next fire time would be helpful. In addition, it appears counter-intuitive that triggerStartDelay is ignored if positive, as shown in QuartzEndpoint.createTrigger() below:
{code:java}
if (getComponent().getScheduler().isStarted() || triggerStartDelay < 0) {
    triggerBuilder.startAt(new Date(System.currentTimeMillis() + triggerStartDelay));
}{code}
Is this intentional?",,davsclaus,klease78,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17133,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jan 10 18:34:51 UTC 2022,,,,,,,,,,,"0|z0ybhs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Jan/22 19:32;davsclaus;I think its something that can be added to the documentation, as there will always be ""such problem"". A quartz scheduler is not 100% accurate and fires exactly at 1200 millis between. 

Otherwise a big task would be to provisionally create triggers during bootstrap, and then after the scheduler is started, then schedule those provisional triggers to the scheduler. Then that problem is no longer.;;;","07/Jan/22 18:19;klease78;I'll look into updating the documentation. It's mainly an issue with short intervals which are perhaps not that common. In any case, I notice the first run of the trigger takes longer to launch (20 to 30 msec in the test case) than the remaining ones, so the first one always appears to be delayed.

Regarding the timestamp for the next fire time log, I see it depends on the actual logging implementation used; in the test case which uses log4j it is displaying the msec which helps to understand the issue. I'd suggest forcing the format when constructing the log message.

But is it normal not to set the triggerStartDelay when it's positive? The current code will only set it to some time in the past, likely causing several events to be generated immediately when the scheduler is started.;;;","09/Jan/22 08:41;davsclaus;About the < 0 then see CAMEL-17133
That idea is to simulate a ""fireNow"" by forcing a misfire
;;;","09/Jan/22 08:44;davsclaus;> Regarding the timestamp for the next fire time log, I see it depends on the actual logging implementation used; in the test case which uses log4j it is displaying the msec which helps to understand the issue. I'd suggest forcing the format when constructing the log message.

Yeah that is a good idea;;;","10/Jan/22 18:34;klease78;>That idea is to simulate a ""fireNow"" by forcing a misfire

Yes, I see that, and I see the documentation of the parameter related to the scheduler being started is consistent with the code.

But Quartz allows to set an explicit start and end time on a simple trigger, and this isn't possible in Camel. That could be done with trigger.startTime and trigger.endTime properties, where startTime would then override the triggerStartDelay and be applied even when the scheduler is not yet started.

For now I submitted a PR for the log message and the documentation for triggerParameters.;;;",,,,,,,,,,,,,,,,,,,,,
camel-health - Loading custom health-check from classpath scanning is not added to registry,CAMEL-17441,13421038,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Jan/22 09:44,06/Jan/22 09:45,13/Jul/23 08:34,06/Jan/22 09:45,3.14.0,,,,3.14.1,3.15.0,,,,camel-core,,,,,0,,,"We forgot to add the loaded HC

Its a feature that needs to be enabled, see the main-health example",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-06 09:44:02.0,,,,,,,,,,,"0|z0yb28:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz - Fires twice on first cron job when using startDelayed,CAMEL-17440,13420990,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Jan/22 06:25,06/Jan/22 08:49,13/Jul/23 08:34,06/Jan/22 08:49,3.14.0,,,,3.15.0,,,,,camel-quartz,,,,,0,,,"Looks like it fires twice on the first job, eg on startup

{code}
07:22:42.099 [DefaultQuartzScheduler-MyYamlCamel_Worker-2] INFO  my-route.yaml:24 - A Hello how are you?
07:22:42.099 [DefaultQuartzScheduler-MyYamlCamel_Worker-1] INFO  my-route.yaml:24 - A Hello how are you?
07:22:42.099 [DefaultQuartzScheduler-MyYamlCamel_Worker-2] INFO  my-route.yaml:26 - B Bye World
07:22:42.099 [DefaultQuartzScheduler-MyYamlCamel_Worker-1] INFO  my-route.yaml:26 - B Bye World
07:22:44.007 [DefaultQuartzScheduler-MyYamlCamel_Worker-3] INFO  my-route.yaml:24 - A Hello how are you?
07:22:44.007 [DefaultQuartzScheduler-MyYamlCamel_Worker-3] INFO  my-route.yaml:26 - B Bye World
{code}

This is from the main-yaml example where its supposed to run with a cron that triggers every 2nd second: 0/2 * * * * ?",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 06 08:47:15 UTC 2022,,,,,,,,,,,"0|z0yark:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Jan/22 07:15;davsclaus;Okay so this is because using 

camel.component.quartz.start-delayed-seconds = 3

then due to that delay then any jobs that was supposed to trigger is misfired and so in 3 sec then 1 task must be triggered that is misfired and then fired asap;;;","06/Jan/22 08:47;davsclaus;Okay removing the startDelayed option as it causes more pain.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel-aws2-sqs: Deadletter fails with sqs client from registry (could impact more components),CAMEL-17437,13420798,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,05/Jan/22 12:00,11/Jan/22 15:46,13/Jul/23 08:34,11/Jan/22 15:46,3.14.0,3.15.0,,,3.14.1,3.15.0,,,,camel-core,,,,,0,,,"I'm investigating an error on camel-quarkus ([https://github.com/apache/camel-quarkus/issues/3436)] and found that it is happening on camel itself. It affects probably more components, so I set ""camel-core"" as a component.

 

Here is a description:
 * aws2-sqs allows to use client from contex, which is autowired into the component
 * if deadletter is used (via RouteBuilder), endpoint is created immediately (even if context is not started yet) - see BuilderSupport l434 ([code|https://github.com/apache/camel/blob/main/core/camel-core-model/src/main/java/org/apache/camel/builder/BuilderSupport.java#L434])
 * Creation of component fails, because there is no client which could be autowired (see [code|https://github.com/apache/camel/blob/main/components/camel-aws/camel-aws2-sqs/src/main/java/org/apache/camel/component/aws2/sqs/Sqs2Component.java#L73])

 

I created junit reproducer in my fork - [https://github.com/JiriOndrusek/camel/commit/f8d294afae9c6919b19cb6ca6f7cec50570d6208]

 

 ",,davsclaus,jondruse,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17455,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jan 07 09:39:39 UTC 2022,,,,,,,,,,,"0|z0y9kw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Jan/22 12:01;jondruse;[~davsclaus] ([~acosentino] ) I assigned this issue to myself (I see it as a nice way of learning how those core processes work). But I understand that that you'd like to fix it by yourselve, in that case please reassign issue to yourselves.
If you agree with me looking into this, I'd appreciate any type of suggestion, you might have. Thank you in advance.;;;","05/Jan/22 12:21;jondruse;I'm adding a code for junit test in text form (in case that my commit is overwritten by accident)

```
public class SqsDeadletterWithClientRegistryLocalstackIT extends Aws2SQSBaseTest {

    @EndpointInject(""direct:start"")
    private ProducerTemplate template;

    @EndpointInject(""mock:result"")
    private MockEndpoint result;

    @Override
    protected CamelContext createCamelContext() throws Exception {
        CamelContext ctx = super.createCamelContext();
        AmazonSQSClientMock awsSQSClient = new AmazonSQSClientMock();


        Sqs2Component sqs = ctx.getComponent(""aws2-sqs"", Sqs2Component.class);

        //todo if those 2 lines are enabled, test is successful, becouse it will use client from context
        sqs.getConfiguration().setAmazonSQSClient(null);
        ctx.getRegistry().bind(""awsSQSClient"", awsSQSClient);

        return ctx;

    }

    @Test
    public void deadletter() throws Exception {
        result.expectedMessageCount(1);

        Exchange exchange = template.send(""direct:start"", ExchangePattern.InOnly, new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(""test1"");
            }
        });

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {

        //todo use generated query name for usage with real aws provider
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                errorHandler(deadLetterChannel(""aws2-sqs://deadletter?autoCreateQueue=true"")
                        .useOriginalMessage());

                from(""direct:start"").startupOrder(2).process(e -> {throw new IllegalStateException();}).toF(""aws2-sqs://%s?autoCreateQueue=true"", sharedNameGenerator.getName());

                from(""aws2-sqs://deadletter"").to(""mock:result"");
            }
        };
    }
}
```;;;","05/Jan/22 12:43;davsclaus;Jiri, you are surely welcome to work on this.;;;","05/Jan/22 12:45;davsclaus;Yeah the endpoint can likely be build at a late phase in the actual dead letter channel in an doInit or doStart phase etc.;;;","05/Jan/22 13:22;jondruse;Postponing creation to later phase should work, this was also my intention. I'll try to achieve this, thanks.;;;","07/Jan/22 09:39;jondruse;This issue could be closed after this reverting PR is merged (https://github.com/apache/camel/pull/6674), because error is not happening at all. Problem was caused by the flaw in the reproducer test (see https://github.com/apache/camel/pull/6674/files#diff-32c38baf67be071134dc969e3335ca18b722b02fc780365d77b833180028fa2fR40-L45). ;;;",,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Disabling health check for single route or consumer is not possible,CAMEL-17436,13420796,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karbi,karbi,05/Jan/22 11:40,05/Jan/22 13:17,13/Jul/23 08:34,05/Jan/22 13:16,3.14.0,,,,3.14.1,3.15.0,,,,camel-spring-boot,,,,,0,,,"I belive there are some bugs in CamelHealthCheckAutoConfiguration that prevents disabling health check on single route or consumer.

For example, configuration like this:

{{camel.health.config[consumer\:cron-delete-expired-tokens].parent=consumers}}
{{camel.health.config[consumer\:cron-delete-expired-tokens].enabled=false}}

causes disabling all consumers health checks.

Configuration like this:

{{camel.health.config[consumer\:cron-delete-expired-tokens].parent=routes}}
{{camel.health.config[consumer\:cron-delete-expired-tokens].enabled=false}}

disables all routes health checks.

Not setting parent causes NullPointerException in HealthCheckRegistry::resolveById().",,davsclaus,karbi,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17427,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jan 05 13:16:42 UTC 2022,,,,,,,,,,,"0|z0y9kg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Jan/22 11:46;karbi;I have made  [pull request|https://github.com/apache/camel-spring-boot/pull/428] with test and bugfix.;;;","05/Jan/22 13:16;davsclaus;Thanks for reporting and the PR.
I fixed the NPE by causing an error message about the parent must be set;;;",,,,,,,,,,,,,,,,,,,,,,,,
Rest endpoint query parameters not set on underlying endpoint,CAMEL-17430,13420622,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,henka-rl,henka-rl,04/Jan/22 16:47,05/Jan/22 06:14,13/Jul/23 08:34,05/Jan/22 06:14,3.13.0,3.14.0,,,3.14.1,3.15.0,,,,camel-rest-openapi,,,,,0,,,"After upgrading to 3.14.0 I got this error then calling an open api from a route:
{noformat}
Invalid url: /camel/api/v1/register. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: http://localhost:8093/s-smtp/v1/email?httpMethod=POST{noformat}
The endpoint used in the route looks like this:
{code:java}
.to(""s-smtp:SendEmail?authUsername={{api.client-id}}&authPassword={{api.client-secret}}&authenticationPreemptive=true&throwExceptionOnFailure=false&bridgeEndpoint=true"") {code}
After debugging I found that the cause of this is found on line 533 in RestOpenApiEndpoint:
{code:java}
// Add rest endpoint parameters
if (this.parameters != null && operation.getParameters() != null) {
    for (Map.Entry<String, Object> entry : this.parameters.entrySet()) {
        for (OasParameter param : operation.getParameters()) {
            // skip parameters that are part of the operation as path as otherwise
            // it will be duplicated as query parameter as well
            boolean clash = ""path"".equals(param.in) && entry.getKey().equals(param.getName());
            if (!clash) {
                nestedParameters.put(entry.getKey(), entry.getValue());
            }
        }
    }
} {code}
If the operation in question don't have any parameters this.parameters will never be added to the underlying endpoint.

Found this change in this commit:

https://github.com/apache/camel/commit/94847d8c4a84e39be31c38ca30a5f4a3575ece29#diff-f9d1965ec0771a782838b7a5c10c2e6e228fb6f4ce0776172488638a63d8a611R529",,henka-rl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-04 16:47:11.0,,,,,,,,,,,"0|z0y8i0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
microprofile healt checks: do not conflate camel checks,CAMEL-17426,13420566,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,lb,lb,04/Jan/22 10:48,18/Jan/22 17:09,13/Jul/23 08:34,18/Jan/22 17:09,,,,,3.15.0,,,,,camel-microprofile-health,,,,,0,,,"While running the [camel quarkus healt example|https://github.com/apache/camel-quarkus-examples/tree/main/health], I noticed that the health checks from camel are conflated so as example, the liveness block looks as follow:

{code:json}
{
    ""checks"": [
        {
            ""data"": {
                ""consumer:netty"": ""DOWN"",
                ""consumer:timer"": ""UP"",
                ""context"": ""UP"",
                ""context.name"": ""camel-7"",
                ""context.status"": ""Started"",
                ""context.version"": ""3.14.0"",
                ""failure.count"": ""0"",
                ""invocation.count"": ""5"",
                ""invocation.time"": ""2022-01-04T11:32:56.024411+01:00[Europe/Rome]"",
                ""route.context.name"": ""camel-7"",
                ""route.id"": ""netty"",
                ""route.status"": ""Stopped"",
                ""route:netty"": ""UP"",
                ""route:timer"": ""UP"",
                ""success.count"": ""5"",
                ""toolong"": ""UP""
            },
            ""name"": ""camel-readiness-checks"",
            ""status"": ""DOWN""
        }
    ],
    ""status"": ""DOWN""
}
{code}

As you may notice, there are inconsistencies, like, multiple routes are conflated and only the latest one appears: 

{code:json}
{
  ""route.id"": ""netty"",
  ""route.status"": ""Stopped"",
  ""route:netty"": ""UP"",
  ""route:timer"": ""UP""
}
{code}

The issue seems to be cause by the fact that the camel-microprofile-health component does not mirrors the checks from camel but instead it aggregate them (see [AbstractCamelMicroProfileHealthCheck.java|https://github.com/apache/camel/blob/main/components/camel-microprofile/camel-microprofile-health/src/main/java/org/apache/camel/microprofile/health/AbstractCamelMicroProfileHealthCheck.java]) 

SmallRye offers a sort of [registry|https://github.com/smallrye/smallrye-health/tree/main/implementation/src/main/java/io/smallrye/health/registry] so we should probably register the camel health checks to the SmallRye registry (this may have the side effect to make the camel-microprofile-health smallrye dependant)

In addition, it would be nice of SmallRye would allow to discovery registries",,antonin.stefanutti,davsclaus,jamesnetherton,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 11 09:48:59 UTC 2022,,,,,,,,,,,"0|z0y85k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Jan/22 10:48;lb;/cc [~davsclaus] [~jamesnetherton] what do you think ?;;;","04/Jan/22 15:00;lb;As alternative we could have a quarkus specific implementation;;;","05/Jan/22 11:30;jamesnetherton;We could perhaps have a custom Camel HealthCheckRegistry (extending DefaultHealthCheckRegistry) which intercepts the register and unregister events, and then does the same action on the SmallRye registry. WDYT?

I notice the SmallRye Health registry APIs are marked as experimental, so not sure if there's an element of risk if we decide to use them. 

Maybe it's not such a big deal if we made the component dependent on SmallRye Health. Seems we already made the fault tolerance component dependent on the SmallRye impl anyway.
;;;","05/Jan/22 11:45;lb;Yep that is one of the option I was thinking about.

Another alternative is to have two impl:
- a pure microprofile one, that for example either report UP or DOWN but in case of DOWN it just report the details of the first occurrence. 
- a smallrye one in which the Camel HealthCheckRegistry wraps the SmallRye registries as you suggested (but I'm not sure if it is worth haviong a separate component for smallrye);;;","05/Jan/22 13:36;jamesnetherton;Yeah maybe having another separate component is overkill. It depends on whether we really need to keep a generic solution based on the pure MP spec.

I'm thinking we should go with leveraging the SmallRye registries. The output produced by the health reporter is more intuitive and simpler to read compared to how it shows with the current aggregated way, where everything is grouped under 'camel-liveness-checks' & 'camel-readiness-checks'.

If we think this an acceptable way forwards, I could take a look at making the required modifications to the code.
;;;","05/Jan/22 13:38;lb;I'm +1 with that so if you have any spare time, please go ahead ;;;","05/Jan/22 13:39;davsclaus;+1 good plan;;;","06/Jan/22 10:32;jamesnetherton;One small issue I encountered is what happens if a Camel health check is enabled / disabled at runtime.

There's currently no way of knowing that the health check configuration was updated in order to add / remove it on the SmallRye registry.
;;;","10/Jan/22 09:47;lb;[~jamesnetherton] would be enough to return UNKNOWN for disabled checks ? 
;;;","10/Jan/22 09:48;lb;[~astefanutti] not sure but this change may affect the work you have done on camel;;;","10/Jan/22 11:36;jamesnetherton;[~lb] There is no UNKOWN status in MicroProfile Health unfortunately. I can propose that it's added though.

There is a 'check.enabled' metadata element added by Camel which will get propagated into the SmallRye health output. So that could be a way to determine that the health check is disabled and was not invoked and we leave the status as UP. Conceptually not 100% perfect, but I think it's probably acceptable initially.
;;;","10/Jan/22 11:53;lb;Agree, we could probably do something like

{code}
registry.enable(String id)
registry.disable(String id)
{code}

And delegate the actual implementation to the registry;;;","10/Jan/22 11:54;jamesnetherton;I guess it depends on how important supporting enabling / disabling checks at runtime is. Because if it's not critical, then we can just avoid adding the check to the SmallRye registries if it's disabled.
;;;","10/Jan/22 11:59;jamesnetherton;Also to clarify - SmallRye health currently has no concept of disabled health checks at runtime.;;;","10/Jan/22 12:04;lb;Yes, I don't recall the reason for enabled/disabled checks at runtime :) ;;;","11/Jan/22 09:12;antonin.stefanutti;[~lb] Camel K currently looks up for the check named {{camel-readiness-checks}}, and reads its status, as well as the presence of the {{.data[""error.message""]}}. The {{data}} is reported as is in the integration status, so it's more for consumers of the integration statuses that conflation is an issue. I haven't checked the type of the {{data}} field, but maybe it's possible to have a more structured form, that would avoid loosing information and maintain a bijection with the routes.;;;","11/Jan/22 09:26;lb;The data block should be Map<String, Object> so it could be possible to use a structured ""payload"", see https://github.com/eclipse/microprofile-health/blob/master/api/src/main/java/org/eclipse/microprofile/health/HealthCheckResponse.java#L53
However I think the issue may still be present as you may have a number of ""error.message"", like we may have one error per check, can we maybe translate the readiness error in conditions ?;;;","11/Jan/22 09:37;jamesnetherton;SmallRye health can only handle data values of types Boolean, Long & String so it's not really possible to structure the data.;;;","11/Jan/22 09:48;antonin.stefanutti;Right, I remember now and mapped the type to Golang accordingly: https://github.com/apache/camel-k/blob/27ea823b6997d8b1a4477944739b578e07b487f7/pkg/controller/integration/health.go#L47.

Yet it's polymorphism for primitive types, not object. That being said, it could be loosely structured, as it kinda is already, but improved to guarantee a bijection. 

For the {{error.message}}, it's only checked to move the integration to the {{Error}} phase. So there could be a message per route, and Camel K would move the integration in {{Error}} phase as soon as there is at least one error message.

Currently, Camel K passes the data as is. It would totally be possible to parse further these data into conditions for example, once that conflation issue is solved.;;;",,,,,,,
camel-quartz - OSGi compatibility is broken for loading resources from classloader,CAMEL-17425,13420459,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,fpapon,fpapon,03/Jan/22 19:59,05/Jan/22 13:20,13/Jul/23 08:34,05/Jan/22 13:19,3.13.0,3.14.0,,,3.14.1,3.15.0,,,,osgi,,,,,0,osgi,,"It seems like this commit broke the OSGi compatibility by loading resources from another classloader: 

[https://github.com/apache/camel/commit/11bd8012743868712904b449024344bcf8130d2b#diff-8514339d35970f5c1e68df154846a293656b9a482d332b7f4423755ba0d2b0f9] 

For example, when upgrading to Camel 3.14.0, we have this error when starting a quartz route endpoint: 

Caused by: java.lang.RuntimeException: org.quartz.SchedulerException: Quartz properties file not found in classpath: org/quartz/quartz.properties ",,davsclaus,fpapon,jansenj,lichtin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 04 09:41:16 UTC 2022,,,,,,,,,,,"0|z0y7i0:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"03/Jan/22 20:02;davsclaus;You are welcome to send a PR that uses the old code in the quartz component that the code commented also mentioned it was on purpose;;;","03/Jan/22 20:03;davsclaus;You can probably copy that quartz.properties from the quartz JAR and put it in your own bundle at that location to workaround;;;","04/Jan/22 09:41;fpapon;Ok, I will send a PR.

 ;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-kafka - Shutdown issues when attempting to consume from topic without authorization,CAMEL-17424,13420418,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,rgala,rgala,03/Jan/22 18:09,10/Jun/22 07:33,13/Jul/23 08:34,10/Jun/22 07:33,3.14.0,,,,3.18.0,,,,,camel-kafka,,,,,0,,,"Hello :)

Something has been introduced in 3.14.0 that causes long Camel shutdown when there has been an attempt to consume form a topic without necessary authorizations. The more consumers has been started the longer Camel takes to shut down.

Below is what is logged many times after a shutdown has been initiated (I masked some parts I did not want to share). In this case I consumed from two topics: *some-other-topic-that-consumer-was-authorized-to*  and *e2k-test-bledu.*
{noformat}
2022-01-03 18:27:05.032  WARN 25556 --- [rdReplaceEvent]] o.a.c.component.kafka.KafkaFetchRecords  : Exception org.apache.kafka.common.errors.TopicAuthorizationException caught while polling some-other-topic-that-consumer-was-authorized-to-Thread 0 from kafka topic some-other-topic-that-consumer-was-authorized-to at offset {}: Not authorized to access topics: [e2k-test-bledu]
2022-01-03 18:27:05.032  WARN 25556 --- [rdReplaceEvent]] o.a.c.component.kafka.KafkaFetchRecords  : Deferring processing to the exception handler based on polling exception strategy
2022-01-03 18:27:05.032  INFO 25556 --- [rdReplaceEvent]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-event2kafka_test3-12, groupId=event2kafka_test3] (Re-)joining group
2022-01-03 18:27:05.051  INFO 25556 --- [rdReplaceEvent]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-event2kafka_test3-12, groupId=event2kafka_test3] Successfully joined group with generation Generation{generationId=83, memberId='consumer-event2kafka_test3-12-74747411-96e8-4111-bab3-224cf754018f', protocol='range'}
2022-01-03 18:27:05.066  INFO 25556 --- [-PZOdmowaTrans]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-event2kafka_test3-13, groupId=event2kafka_test3] Requesting to re-join the group and trigger rebalance since the assignment metadata has changed from (***masked***)
2022-01-03 18:27:05.066  INFO 25556 --- [-PZOdmowaTrans]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-event2kafka_test3-13, groupId=event2kafka_test3] Requesting to re-join the group and trigger rebalance since the assignment metadata has changed from (***masked***)
2022-01-03 18:27:05.071  WARN 25556 --- [rdReplaceEvent]] org.apache.kafka.clients.NetworkClient   : [Consumer clientId=consumer-event2kafka_test3-12, groupId=event2kafka_test3] Error while fetching metadata with correlation id 133 : {e2k-test-bledu=TOPIC_AUTHORIZATION_FAILED}
2022-01-03 18:27:05.071 ERROR 25556 --- [rdReplaceEvent]] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-event2kafka_test3-12, groupId=event2kafka_test3] Topic authorization failed for topics [e2k-test-bledu]
2022-01-03 18:27:05.071  INFO 25556 --- [rdReplaceEvent]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-event2kafka_test3-12, groupId=event2kafka_test3] Rebalance failed.

org.apache.kafka.common.errors.TopicAuthorizationException: Not authorized to access topics: [e2k-test-bledu] {noformat}
My use case may be specific because I start a separate route for every topic I want to consume from (I do not want to have a shared consumer for all topics because I need different prameters for selected topics, like offset reset etc.). Currently I consume from 44 topics and the Camel takes like four minutes to shut down. ",,davsclaus,orpiske,rgala,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jun 10 07:33:14 UTC 2022,,,,,,,,,,,"0|z0y78w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Jan/22 18:20;rgala;Looks like this is more serious. I just noticed that lack of authorization to a single topic is preventing consumption from all other topics :( I had similar issue on 3.5.0 but it disappeared when I upgraded do 3.13.0 (unsure which version between 3.5.0 and 3.13.0 fixed this though).;;;","04/Jan/22 11:33;rgala;I debugged a bit and it looks like the issue may be related to the loop in *run* method of {*}KafkaFetchRecords{*}. Prior to 3.14.0 there was no loop and when an exception occured inside {*}{*}{*}startPolling{*} method, the run method exited and the thread ended. Now it keeps retrying all the time and failing due to lack of authorization which may have some impact on the shutdown process.

 

Also I noticed that when all consumers share the same consumer group id, authorization error is causing errors in *org.apache.kafka.clients.consumer.KafkaConsumer* instances that have nothing to do with the topic there are no authorizations to. Looks like internally Kafka client shares some components per consumer group and I think nothing can be done on Camel side about this :( Why did it not cause issues prior to 3.14.0 is because just before the *run* method ended the *safeUnsubscribe* was called.

 

I will try to solve this using custom *pollExceptionStrategy* to force consumer to stop when TopicAuthorizationException occured.;;;","04/Jun/22 08:28;davsclaus;Can you try with 3.17.0 as a lot of hardening et all has gone into camel-kafka;;;","06/Jun/22 06:28;rgala;It behaves differently on 3.17.0:

Af first call to 
{code:java}
ConsumerRecords<Object, Object> allRecords = consumer.poll(pollDuration); {code}
in KafkaFetchRecords class it fails with TopicAuthorizationException, but the default poll exception strategy tells it to just go on so it calls the above again but this time it does not fail anymore with TopicAuthorizationException, but it also does not fetch any records (the consumer is in some weird state after first poll attempt). It keeps trying to poll records like if there was no authorization issue at all. Luckily the Camel shutdown process is not affected by this.

I would like to implement my own poll exception strategy and just stop polling when TopicAuthorizationException occurs, but continue with all other exceptions, but as I pointed out in CAMEL-18142, it seems impossible now. I could store the exception during the call to
{code:java}
pollExceptionStrategy.handle(partitionLastOffset, e) {code}
and then use it in *canContinue()* method later on, but it is not a thread safe solution unless I use a ThreadLocal wrapper etc.;;;","06/Jun/22 08:20;davsclaus;[~orpiske] sounds a bit like we should maybe react differently on TopicAuthorizationException out of the box?;;;","06/Jun/22 08:40;orpiske;[~davsclaus] [~rgala]  I think we should handle this differently, indeed. I need to research and think a bit about this. I am considering whether it would be easier to issue a call between the subscription and the poll that would ensure the authentication happens, so we can try to avoid over-complicating the poll handling strategy. This is, of course, a very early thought. So please, do let me know your suggestions if you have any ...;;;","06/Jun/22 08:42;orpiske;BTW, I am assigning this one to me, but anyone interested in looking at it, please let me know as I have no ETA for looking at it just yet.;;;","06/Jun/22 13:30;rgala;I would return false from canContinue() of  BridgeErrorStrategy in case of this exception (or even all exceptions that extend KafkaException).;;;","06/Jun/22 13:34;orpiske;[~rgala] thanks. If I come up with a quick patch for that, are you able to test?;;;","06/Jun/22 13:36;rgala;If I manage to build Camel locally, then yes :);;;","07/Jun/22 08:37;orpiske;Hi, for now I worked on a quick fix based on your suggestion: [https://github.com/apache/camel/pull/7733]

 

I'd like to create a test case for it, but I don't have time right now. I'll keep the PR open for some time.;;;","10/Jun/22 07:33;orpiske;I added a quick fix based on [~rgala] 's suggestion. Please let me know or reopen the ticket in case it's still broken.

Thanks everyone for the review and suggestions.;;;",,,,,,,,,,,,,,
camel-core - Route configurations may not have source loc:line,CAMEL-17413,13420344,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Jan/22 09:36,03/Jan/22 10:34,13/Jul/23 08:34,03/Jan/22 10:34,3.15.0,,,,3.15.0,,,,,camel-core,,,,,0,,,https://camel.zulipchat.com/#narrow/stream/258729-camel-tooling/topic/Intellij.20plugin/near/266627532,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2022-01-03 09:36:11.0,,,,,,,,,,,"0|z0y6sg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
