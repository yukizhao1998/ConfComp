Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Blocked),Inward issue link (Blocked),Outward issue link (Blocked),Inward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Inward issue link (Child-Issue),Outward issue link (Child-Issue),Inward issue link (Completes),Outward issue link (Completes),Inward issue link (Container),Inward issue link (Dependent),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Inward issue link (Problem/Incident),Outward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Outward issue link (Regression),Outward issue link (Required),Outward issue link (Supercedes),Outward issue link (Testing),Inward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Authors),Custom field (Authors),Custom field (Authors),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Impacts),Custom field (Impacts),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Platform),Custom field (Platform),Custom field (Platform),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Reviewer),Custom field (Reviewers),Custom field (Reviewers),Custom field (Reviewers),Custom field (Reviewers),Custom field (Severity),Custom field (Severity),Custom field (Since Version),Custom field (Since Version),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Cannot run tests on Java 11 with coverage analysis,CASSANDRA-16365,13347270,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,22/Dec/20 06:11,19/Nov/21 06:52,13/Jul/23 08:39,28/Jan/21 22:44,4.0,4.0-rc1,,,,Build,,,,0,,,,"When running tests with coverage analysis on Java 11, we get the problem as follows:

{noformat}
[junit-timeout] FATAL ERROR in native method: processing of -javaagent failed, processJavaStart failed
[junit-timeout] Exception in thread ""main"" java.lang.reflect.InvocationTargetException
[junit-timeout] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
[junit-timeout] 	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:513)
[junit-timeout] 	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:525)
[junit-timeout] Caused by: java.lang.RuntimeException: Class java/util/UUID could not be instrumented.
[junit-timeout] 	at org.jacoco.agent.rt.internal_b0d6a23.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:139)
[junit-timeout] 	at org.jacoco.agent.rt.internal_b0d6a23.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:100)
[junit-timeout] 	at org.jacoco.agent.rt.internal_b0d6a23.PreMain.createRuntime(PreMain.java:55)
[junit-timeout] 	at org.jacoco.agent.rt.internal_b0d6a23.PreMain.premain(PreMain.java:47)
[junit-timeout] 	... 6 more
[junit-timeout] Caused by: java.lang.NoSuchFieldException: $jacocoAccess
[junit-timeout] 	at java.base/java.lang.Class.getField(Class.java:1999)
[junit-timeout] 	at org.jacoco.agent.rt.internal_b0d6a23.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:137)
[junit-timeout] 	... 9 more
[junit-timeout] *** java.lang.instrument ASSERTION FAILED ***: ""result"" with message agent load/premain call failed at src/java.instrument/share/native/libinstrument/JPLISAgent.c line: 422
{noformat}

It is caused by too old Jacoco which does seem to work well with Java 11. Upgrading Jacoco to the newest version 0.8.6 fixes the problem
",,e.dimitrova,jlewandowski,mck,,,,,,,,,"jacek-lewandowski opened a new pull request #861:
URL: https://github.com/apache/cassandra/pull/861


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Dec/20 06:28;githubbot;600","jacek-lewandowski closed pull request #861:
URL: https://github.com/apache/cassandra/pull/861


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Nov/21 06:52;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,CASSANDRA-16369,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16413,,,,,,,,,"24/Dec/20 13:27;mck;Screenshot 2020-12-24 at 14.23.13.png;https://issues.apache.org/jira/secure/attachment/13017616/Screenshot+2020-12-24+at+14.23.13.png","24/Dec/20 13:27;mck;Screenshot 2020-12-24 at 14.23.57.png;https://issues.apache.org/jira/secure/attachment/13017617/Screenshot+2020-12-24+at+14.23.57.png",,,,,,,,,,,,,2.0,jlewandowski,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jan 28 22:44:46 UTC 2021,,,,,,,All,,,,,,"0|z0lq7s:",9223372036854775807,,,,mck,,,,Low,,4.0-beta4,,,https://github.com/apache/cassandra/commit/0a9e129e10203e28b22c547bd7e56a51b29d1265,,,,,,,,,Run unit tests with code coverage analysis with Java 8 and Java 11,,,,,"24/Dec/20 13:36;mck;I've tested this locally and it looks good  💪🏽

I've also tested it in ci-cassandra.apache.org with this [patch|https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/tests_jacoco], and the jenkins [jacoco plugin|https://plugins.jenkins.io/jacoco/] enabled.

Those results are:
 - CI build: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test/149/
 - CI JaCoCo report: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test/149/jdk=jdk_1.8_latest,label=cassandra/jacoco/

The cassandra-builds patch is submitted as a separate jira: CASSANDRA-16369;;;","26/Dec/20 09:28;mck;[~jlewandowski], there are 8 broken unit tests now under jdk11 when run with jacoco.
https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/150/jdk=jdk_11_latest,label=cassandra/testReport/

Should they to be fixed as part of this ticket, or under a new ticket?;;;","26/Jan/21 22:40;e.dimitrova;Hey [~mck] and [~jlewandowski], thank you for the patch.

I was wondering what is your plan? Shall we commit this and open a new patch as [~mck] mentioned or there will more work done as part of this one.

Please let me know if I can help with something. :);;;","26/Jan/21 22:49;jlewandowski;Unfortunately, those tests are failing because Byteman fails to install its injections. It seem like Byteman is completely unusable with this new Jacoco version and Java 11. It works fine with Java 8 though. When I run with verbose logging, Byteman reported some problems regarding to ASM version which seemed to me dumb.

If you feel it is ok to fix those tests in a separate ticket I'm fine with that;;;","28/Jan/21 19:48;e.dimitrova;I just had a quick chat with [~mck] as I wasn't familiar with the details.

Moving the tests to another ticket sounds good to me, I just opened CASSANDRA-16413 to facilitate that work;;;","28/Jan/21 22:44;e.dimitrova;Committed [here|https://github.com/apache/cassandra/commit/0a9e129e10203e28b22c547bd7e56a51b29d1265]

Thank you [~jlewandowski] and [~mck];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSLFactory should initialize SSLContext before setting protocols,CASSANDRA-16362,13346675,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,emerkle826,emerkle826,17/Dec/20 22:36,25/Feb/21 10:10,13/Jul/23 08:39,03/Feb/21 03:16,4.0,4.0-rc1,,,,Tool/bulk load,,,,0,,,,"Trying to use sstableloader from the latest trunk produced the following Exception:

{quote}
Exception in thread ""main"" java.lang.RuntimeException: Could not create SSL Context.
	at org.apache.cassandra.tools.BulkLoader.buildSSLOptions(BulkLoader.java:261)
	at org.apache.cassandra.tools.BulkLoader.load(BulkLoader.java:64)
	at org.apache.cassandra.tools.BulkLoader.main(BulkLoader.java:49)
Caused by: java.io.IOException: Error creating/initializing the SSL Context
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:184)
	at org.apache.cassandra.tools.BulkLoader.buildSSLOptions(BulkLoader.java:257)
	... 2 more
Caused by: java.lang.IllegalStateException: SSLContext is not initialized
	at sun.security.ssl.SSLContextImpl.engineGetSocketFactory(SSLContextImpl.java:208)
	at javax.net.ssl.SSLContextSpi.getDefaultSocket(SSLContextSpi.java:158)
	at javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters(SSLContextSpi.java:184)
	at javax.net.ssl.SSLContext.getDefaultSSLParameters(SSLContext.java:435)
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:178)
	... 3 more
{quote}

I believe this is because of a change to SSLFactory for CASSANDRA-13325 here:

[https://github.com/apache/cassandra/commit/919a8964a83511d96766c3e53ba603e77bca626c#diff-0d569398cfd58566fc56bfb80c971a72afe3f392addc2df731a0b44baf29019eR177-R178]

 

I think the solution is to call {{ctx.init()}} before trying to call {{ctx.getDefaultSSLParameters()}}, essentialy swapping the two lines in the link above.",,adejanovski,dcapwell,djoshi,emerkle826,jmeredithco,,,,,,,"jonmeredith opened a new pull request #860:
URL: https://github.com/apache/cassandra/pull/860


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Dec/20 00:28;githubbot;600","jonmeredith commented on pull request #860:
URL: https://github.com/apache/cassandra/pull/860#issuecomment-754939243


   I've reworked the patch to remove the hard-coded list of protocols when the legacy ""TLS"" protocol is selected. Instead the protocol list is created from `SSLContext.getInstance(""TLS"")` directly during initialization.
   This does have the consequence of including SSLFactory as an import for `DatabaseDescriptor`, but I don't think that causes any significant issues.
   The stress tool also has the same issues as BulkLoader so I've also updated that to apply protocols correctly.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Jan/21 22:25;githubbot;600","dcapwell commented on a change in pull request #860:
URL: https://github.com/apache/cassandra/pull/860#discussion_r552254492



##########
File path: test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java
##########
@@ -154,7 +155,7 @@ public void testEncryptionOverride() throws Throwable
         check(pre + ""protocol"", ""[TLSv5]"");
 
         config.server_encryption_options = config.server_encryption_options.withProtocol(""TLS"");
-        check(pre + ""protocol"", ""[TLSv1.3, TLSv1.2, TLSv1.1, TLSv1]"");
+        check(pre + ""protocol"", ""["" + String.join("", "", SSLFactory.tlsInstanceProtocolSubstitution()) + ""]"");

Review comment:
       isn't this simpler?
   
   ```
   check(pre + ""protocol"", SSLFactory.tlsInstanceProtocolSubstitution()).toString());
   ```

##########
File path: src/java/org/apache/cassandra/tools/BulkLoader.java
##########
@@ -261,10 +268,22 @@ private static SSLOptions buildSSLOptions(EncryptionOptions clientEncryptionOpti
             throw new RuntimeException(""Could not create SSL Context."", e);
         }
 
-        return JdkSSLOptions.builder()
-                            .withSSLContext(sslContext)
-                            .withCipherSuites(clientEncryptionOptions.cipherSuitesArray())
-                            .build();
+        // Temporarily override newSSLEngine to set accepted protocols until it is added to JdkSSLOptions

Review comment:
       `s/JdkSSLOptions/RemoteEndpointAwareJdkSSLOptions/g`

##########
File path: test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java
##########
@@ -0,0 +1,105 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.Collections;
+
+import com.google.common.collect.ImmutableMap;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.tools.BulkLoader;
+import org.apache.cassandra.tools.ToolRunner;
+
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertTrue;
+
+
+public class SSTableLoaderEncryptionOptionsTest extends AbstractEncryptionOptionsImpl
+{
+    static Cluster cluster;

Review comment:
       nit: statics should be all caps

##########
File path: test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java
##########
@@ -0,0 +1,105 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.Collections;
+
+import com.google.common.collect.ImmutableMap;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.tools.BulkLoader;
+import org.apache.cassandra.tools.ToolRunner;
+
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertTrue;
+
+
+public class SSTableLoaderEncryptionOptionsTest extends AbstractEncryptionOptionsImpl
+{
+    static Cluster cluster;
+    static String nodes;
+    static int nativePort;
+    static int storagePort;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(1).withConfig(c -> {
+            c.with(Feature.NATIVE_PROTOCOL, Feature.NETWORK, Feature.GOSSIP); // need gossip to get hostid for java driver
+            c.set(""server_encryption_options"",
+                  ImmutableMap.builder().putAll(validKeystore)
+                              .put(""internode_encryption"", ""all"")
+                              .put(""optional"", false)
+                              .build());
+            c.set(""client_encryption_options"",
+                  ImmutableMap.builder().putAll(validKeystore)
+                              .put(""enabled"", true)
+                              .put(""optional"", false)
+                              .put(""accepted_protocols"", Collections.singletonList(""TLSv1.2""))
+                              .build());
+        }).start();
+        nodes = cluster.get(1).config().broadcastAddress().getHostString();
+        nativePort = cluster.get(1).callOnInstance(DatabaseDescriptor::getNativeTransportPort);
+        storagePort = cluster.get(1).callOnInstance(DatabaseDescriptor::getStoragePort);
+    }
+
+    @AfterClass
+    public static void tearDownCluster()
+    {
+        cluster.close();

Review comment:
       this could be null, so should add a null check (if setup fails this is null)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Jan/21 23:15;githubbot;600","jonmeredith commented on a change in pull request #860:
URL: https://github.com/apache/cassandra/pull/860#discussion_r552257310



##########
File path: test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java
##########
@@ -154,7 +155,7 @@ public void testEncryptionOverride() throws Throwable
         check(pre + ""protocol"", ""[TLSv5]"");
 
         config.server_encryption_options = config.server_encryption_options.withProtocol(""TLS"");
-        check(pre + ""protocol"", ""[TLSv1.3, TLSv1.2, TLSv1.1, TLSv1]"");
+        check(pre + ""protocol"", ""["" + String.join("", "", SSLFactory.tlsInstanceProtocolSubstitution()) + ""]"");

Review comment:
       Agreed, didn't think to try the default formatting.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Jan/21 23:21;githubbot;600","jonmeredith commented on a change in pull request #860:
URL: https://github.com/apache/cassandra/pull/860#discussion_r552258630



##########
File path: test/distributed/org/apache/cassandra/distributed/test/SSTableLoaderEncryptionOptionsTest.java
##########
@@ -0,0 +1,105 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.Collections;
+
+import com.google.common.collect.ImmutableMap;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.Feature;
+import org.apache.cassandra.tools.BulkLoader;
+import org.apache.cassandra.tools.ToolRunner;
+
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertTrue;
+
+
+public class SSTableLoaderEncryptionOptionsTest extends AbstractEncryptionOptionsImpl
+{
+    static Cluster cluster;
+    static String nodes;
+    static int nativePort;
+    static int storagePort;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(1).withConfig(c -> {
+            c.with(Feature.NATIVE_PROTOCOL, Feature.NETWORK, Feature.GOSSIP); // need gossip to get hostid for java driver
+            c.set(""server_encryption_options"",
+                  ImmutableMap.builder().putAll(validKeystore)
+                              .put(""internode_encryption"", ""all"")
+                              .put(""optional"", false)
+                              .build());
+            c.set(""client_encryption_options"",
+                  ImmutableMap.builder().putAll(validKeystore)
+                              .put(""enabled"", true)
+                              .put(""optional"", false)
+                              .put(""accepted_protocols"", Collections.singletonList(""TLSv1.2""))
+                              .build());
+        }).start();
+        nodes = cluster.get(1).config().broadcastAddress().getHostString();
+        nativePort = cluster.get(1).callOnInstance(DatabaseDescriptor::getNativeTransportPort);
+        storagePort = cluster.get(1).callOnInstance(DatabaseDescriptor::getStoragePort);
+    }
+
+    @AfterClass
+    public static void tearDownCluster()
+    {
+        cluster.close();

Review comment:
       ack




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Jan/21 23:25;githubbot;600","jonmeredith commented on pull request #860:
URL: https://github.com/apache/cassandra/pull/860#issuecomment-761238799


   Merged.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/21 22:53;githubbot;600","jonmeredith closed pull request #860:
URL: https://github.com/apache/cassandra/pull/860


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/21 22:53;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Code,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Feb 03 03:16:30 UTC 2021,,,,,,,All,,,,,,"0|z0lmjk:",9223372036854775807,,,,dcapwell,djoshi,,,Normal,,4.0-beta3,,,https://github.com/apache/cassandra/commit/7637acc3d762047f2a478855eb4d239b4f314cd8,,,,,,,,,Run through CircleCI,,,,,"18/Dec/20 15:33;jmeredithco;Sorry for breaking sstableloader with the change. I'll investigate today.;;;","19/Dec/20 00:29;jmeredithco;[PR|https://github.com/apache/cassandra/pull/860]
[Branch|https://github.com/jonmeredith/cassandra/tree/C16362]
[CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16362];;;","19/Dec/20 00:53;dcapwell;[~emerkle826] are you able to show the steps you did to hit this?;;;","19/Dec/20 01:07;dcapwell;replicated

{code}
Caused by: java.lang.IllegalStateException: SSLContextImpl is not initialized
	at sun.security.ssl.SSLContextImpl.engineGetSocketFactory(SSLContextImpl.java:177)
	at javax.net.ssl.SSLContextSpi.getDefaultSocket(SSLContextSpi.java:142)
	at javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters(SSLContextSpi.java:168)
	at javax.net.ssl.SSLContext.getDefaultSSLParameters(SSLContext.java:419)
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:178)
{code};;;","19/Dec/20 01:17;emerkle826;For reference, I stumbled across this running integration tests in the Medusa project for backup and restore. It was failing when run against trunk and trying to restore a snapshot with sstableloader. The test uses CCM to run Cassandra. If needed I could dig into the test setup and detail exactly what steps are done.

An easier test for me was to simply try this code:
{code:java}
    try {
      SSLContext ctx = SSLContext.getInstance(""TLS"");
      ctx.getDefaultSSLParameters();
      ctx.init(null, null, SecureRandom.getInstanceStrong());
    } catch (Exception e) {
      e.printStackTrace();
    }
{code}

It fails the same way. Calling {{ctx.init()}} before {{ctx.getDefaultSSLParameters()}} seems to not produce the ""not initialized"" error.
 ;;;","20/Dec/20 21:44;jmeredithco;[~emerkle826] Thanks for finding and reporting it. A good reminder that if you don't have a test you can't consider it working.

Setting the default SSL parameters does not work as the returned parameters are copies.

I've pushed up a test as this is the second time I've broken the sstableloader with SSL changes and modified the client setup to explicitly set the accepted protocols on the returned SSLEngine until the client can be modified to set it.;;;","22/Dec/20 09:04;adejanovski;Hi [~jmeredithco],

thanks for issuing a patch.
I tested it with Medusa's integration tests and now get the following error:

{noformat}
WARN  09:57:44,993 Failed to initialize a channel. Closing: [id: 0x61e6eef5]
java.lang.IllegalArgumentException: TLSv1.3
	at sun.security.ssl.ProtocolVersion.valueOf(ProtocolVersion.java:187)
	at sun.security.ssl.ProtocolList.convert(ProtocolList.java:84)
	at sun.security.ssl.ProtocolList.<init>(ProtocolList.java:52)
	at sun.security.ssl.SSLEngineImpl.setEnabledProtocols(SSLEngineImpl.java:2081)
	at org.apache.cassandra.tools.BulkLoader$1.newSSLEngine(BulkLoader.java:276)
	at com.datastax.driver.core.RemoteEndpointAwareJdkSSLOptions.newSSLHandler(RemoteEndpointAwareJdkSSLOptions.java:62)
	at com.datastax.driver.core.Connection$Initializer.initChannel(Connection.java:1700)
	at com.datastax.driver.core.Connection$Initializer.initChannel(Connection.java:1644)
	at com.datastax.shaded.netty.channel.ChannelInitializer.initChannel(ChannelInitializer.java:113)
	at com.datastax.shaded.netty.channel.ChannelInitializer.handlerAdded(ChannelInitializer.java:105)
	at com.datastax.shaded.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:593)
	at com.datastax.shaded.netty.channel.DefaultChannelPipeline.access$000(DefaultChannelPipeline.java:44)
	at com.datastax.shaded.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask.execute(DefaultChannelPipeline.java:1357)
	at com.datastax.shaded.netty.channel.DefaultChannelPipeline.callHandlerAddedForAllHandlers(DefaultChannelPipeline.java:1092)
	at com.datastax.shaded.netty.channel.DefaultChannelPipeline.invokeHandlerAddedIfNeeded(DefaultChannelPipeline.java:642)
	at com.datastax.shaded.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:456)
	at com.datastax.shaded.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:378)
	at com.datastax.shaded.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:428)
	at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:399)
	at com.datastax.shaded.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:464)
	at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131)
	at com.datastax.shaded.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
All host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.exceptions.TransportException: [localhost/127.0.0.1:9042] Cannot connect))
com.datastax.driver.core.exceptions.NoHostAvailableException: All host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.exceptions.TransportException: [localhost/127.0.0.1:9042] Cannot connect))
	at com.datastax.driver.core.ControlConnection.reconnectInternal(ControlConnection.java:268)
	at com.datastax.driver.core.ControlConnection.connect(ControlConnection.java:107)
	at com.datastax.driver.core.Cluster$Manager.negotiateProtocolVersionAndConnect(Cluster.java:1813)
	at com.datastax.driver.core.Cluster$Manager.init(Cluster.java:1726)
	at com.datastax.driver.core.Cluster.init(Cluster.java:214)
	at com.datastax.driver.core.Cluster.connectAsync(Cluster.java:387)
	at com.datastax.driver.core.Cluster.connectAsync(Cluster.java:366)
	at com.datastax.driver.core.Cluster.connect(Cluster.java:311)
	at org.apache.cassandra.utils.NativeSSTableLoaderClient.init(NativeSSTableLoaderClient.java:75)
	at org.apache.cassandra.io.sstable.SSTableLoader.stream(SSTableLoader.java:183)
	at org.apache.cassandra.tools.BulkLoader.load(BulkLoader.java:79)
	at org.apache.cassandra.tools.BulkLoader.main(BulkLoader.java:51)
{noformat}

Here's the sstableloader command that is being issued:

{noformat}
subprocess.CalledProcessError: Command '['/Users/adejanovski/.ccm/repository/githubCOLONjonmeredithSLASHC16362/bin/sstableloader', '-d', '127.0.0.1', '--conf-path', '/Users/adejanovski/.ccm/scenario11/node1/conf/cassandra.yaml', '--username', 'cassandra', '--password', 'cassandra', '--no-progress', '/tmp/medusa-restore-97ec3e11-426a-4924-8bc0-379e99ff2205/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627', '-ts', '/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks', '-tspw', 'truststorePass1', '-ks', '/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks', '-kspw', 'testdata1']'
{noformat}

Is there a problem with the default SSL protocol version? Should we enforce it when invoking sstableloader?
;;;","22/Dec/20 15:07;jmeredithco;Thanks for testing the patch. Looks like your JVM/configuration doesn't have TLSv1.3 enabled.

The problem comes back to SSLContext.getInstance argument is more of a protocol profile than a list of protocols, but Netty OpenSSL support requires an explicit list of accepted protocols, so the original generic {{TLS}} was converted to a default list and for backward compatibility and I included TLSv1.3 in there.

That list needs to be filtered by versions supported by the SSLEngine. I'll try and update the patch in the next day or so.;;;","05/Jan/21 22:24;jmeredithco;Apologies a couple of days became a couple of weeks.

I've reworked the patch to remove the hard-coded list of protocols when the legacy ""TLS"" protocol is selected. Instead the protocol list is created from \{{SSLContext.getInstance(""TLS"")}} directly during initialization.

This does have the consequence of including SSLFactory as an import for DatabaseDescriptor, but I don't think that causes any significant issues.

The stress tool also has the same issues as BulkLoader so I've also updated that to apply protocols correctly.;;;","05/Jan/21 23:16;dcapwell;+1 from me, only small nits in the PR;;;","06/Jan/21 00:41;djoshi;+1 lgtm.;;;","07/Jan/21 21:13;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16362-trunk-87BA7E88-24F7-4F84-A26B-3A7B781C9B57]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16362-trunk-87BA7E88-24F7-4F84-A26B-3A7B781C9B57]|[build|unknown]|
;;;","08/Jan/21 16:46;jmeredithco;[~adejanovski] would you be able to rerun the Medusa integration test to verify we've resolved the problem?;;;","08/Jan/21 16:48;adejanovski;Sure thing, I'll run a test ASAP.;;;","11/Jan/21 13:09;adejanovski;[~jmeredithco], it's now failing earlier in the process as I can't get the Python CQL driver to connect to Cassandra when encryption is turned on. I've tried using TLS 1.1 and TLS 1.2 with the same result...
Previously we were failing later in the process as we could connect using the Python driver but failed at using the sstableloader.

Any idea of what could be preventing us from connecting with TLS 1.1 and 1.2 when using the python driver?
Our implementation follows what's described in [this driver documentation page|https://docs.datastax.com/en/developer/python-driver/3.24/security/#ssl-configuration-examples].

;;;","11/Jan/21 17:20;dcapwell;If still an issue, reopening;;;","12/Jan/21 00:09;jmeredithco;[~adejanovski] sorry you're still having issues.

I'm not sure what the issue is with the python driver - as a work around you could try explicitly configuring tls1.1 and tls1.2 in the new accepted_protocols parameter.

I had a go at getting the medusa integration tests and also the python integration tests but wasn't able to get things working wit 3.11.7 before trying the 4.0 changes.

So I can reproduce, how are you running the tests and what OS / java version / python version are you using?;;;","20/Jan/21 17:09;jmeredithco;[~adejanovski] I've set up Medusa on a CentOS7 box and run the local integration tests and I'm not able to get a clean run before any of the recent SSL changes I've made (CASSANDRA-13325, CASSANDRA-16144, CASSANDRA-16362). {{cassandra-4.0-beta3}} is the release before the changes and that fails for me under {{scenario11}} as does {{cassandra-4.0-beta1}}, or dcabf7e2693534be62f70f9d08345562da2070ba (the commit before the internode messaging refactor CASSANDRA-15066).

The last official release I've had the test pass on is 3.11.9;;;","20/Jan/21 17:55;adejanovski;Hi [~jmeredithco], 

very sorry for not responding earlier, I'm heads down on 4.0 repair quality testing at the moment.
A colleague of mine is working on giving you steps to reproduce the issue with ccm and will comment here soon with the instructions.
For Medusa integration tests, there have been issues with the sstableloader test (scenario 11) which was fixed by CASSANDRA-16280.
I manage to get the scenario 11 passing with beta3:

{code:java}
(py36) adejanovski@mac-alex-2 cassandra-medusa % ./run_integration_tests.sh -t 11 --cassandra-version=4.0-beta3
...
...
  @11 @local
  Scenario Outline: Perform a backup, and restore it using the sstableloader -- @1.1 Local storage  # integration/features/integration_tests.feature:450
    Given I have a fresh ccm cluster ""with_client_encryption"" running named ""scenario11""            # features/steps/integration_steps.py:125
    Given I have a fresh ccm cluster ""with_client_encryption"" running named ""scenario11""            # features/steps/integration_steps.py:125 22.497s
    Given I am using ""local"" as storage provider in ccm cluster ""with_client_encryption""            # features/steps/integration_steps.py:235 0.052s
    When I create the ""test"" table in keyspace ""medusa""                                             # features/steps/integration_steps.py:511 0.122s
    When I load 100 rows in the ""medusa.test"" table                                                 # features/steps/integration_steps.py:534 0.192s
    When I run a ""ccm node1 nodetool flush"" command                                                 # features/steps/integration_steps.py:542 1.508s
    When I load 100 rows in the ""medusa.test"" table                                                 # features/steps/integration_steps.py:534 0.160s
    When I run a ""ccm node1 nodetool flush"" command                                                 # features/steps/integration_steps.py:542 1.445s
    When I perform a backup in ""full"" mode of the node named ""first_backup""                         # features/steps/integration_steps.py:547 3.208s
    Then I can see the backup named ""first_backup"" when I list the backups                          # features/steps/integration_steps.py:591 0.014s
    Then I can verify the backup named ""first_backup"" successfully                                  # features/steps/integration_steps.py:655 0.029s
    When I load 100 rows in the ""medusa.test"" table                                                 # features/steps/integration_steps.py:534 0.135s
    When I run a ""ccm node1 nodetool flush"" command                                                 # features/steps/integration_steps.py:542 1.373s
    Then I have 300 rows in the ""medusa.test"" table in ccm cluster ""with_client_encryption""         # features/steps/integration_steps.py:766 0.119s
    When I truncate the ""medusa.test"" table in ccm cluster ""with_client_encryption""                 # features/steps/integration_steps.py:1040 0.167s
    When I restore the backup named ""first_backup"" with the sstableloader                           # features/steps/integration_steps.py:734 20.214s
    Then I have 200 rows in the ""medusa.test"" table in ccm cluster ""with_client_encryption""         # features/steps/integration_steps.py:766 0.079s
...
...
1 feature passed, 0 failed, 0 skipped
1 scenario passed, 0 failed, 59 skipped
16 steps passed, 0 failed, 1039 skipped, 0 undefined
Took 0m51.312s
{code}

But it fails with beta4 due to the issue reported in this very ticket: 

{noformat}
./run_integration_tests.sh -t 11 --cassandra-version=4.0-beta4
...
...
  @11 @local
  Scenario Outline: Perform a backup, and restore it using the sstableloader -- @1.1 Local storage  # integration/features/integration_tests.feature:450
    Given I have a fresh ccm cluster ""with_client_encryption"" running named ""scenario11""            # features/steps/integration_steps.py:125
    Given I have a fresh ccm cluster ""with_client_encryption"" running named ""scenario11""            # features/steps/integration_steps.py:125 22.836s
    Given I am using ""local"" as storage provider in ccm cluster ""with_client_encryption""            # features/steps/integration_steps.py:235 0.053s
    When I create the ""test"" table in keyspace ""medusa""                                             # features/steps/integration_steps.py:511 0.113s
    When I load 100 rows in the ""medusa.test"" table                                                 # features/steps/integration_steps.py:534 0.229s
    When I run a ""ccm node1 nodetool flush"" command                                                 # features/steps/integration_steps.py:542 1.424s
    When I load 100 rows in the ""medusa.test"" table                                                 # features/steps/integration_steps.py:534 0.149s
    When I run a ""ccm node1 nodetool flush"" command                                                 # features/steps/integration_steps.py:542 1.208s
    When I perform a backup in ""full"" mode of the node named ""first_backup""                         # features/steps/integration_steps.py:547 2.832s
    Then I can see the backup named ""first_backup"" when I list the backups                          # features/steps/integration_steps.py:591 0.013s
    Then I can verify the backup named ""first_backup"" successfully                                  # features/steps/integration_steps.py:655 0.025s
    When I load 100 rows in the ""medusa.test"" table                                                 # features/steps/integration_steps.py:534 0.109s
    When I run a ""ccm node1 nodetool flush"" command                                                 # features/steps/integration_steps.py:542 1.213s
    Then I have 300 rows in the ""medusa.test"" table in ccm cluster ""with_client_encryption""         # features/steps/integration_steps.py:766 0.099s
    When I truncate the ""medusa.test"" table in ccm cluster ""with_client_encryption""                 # features/steps/integration_steps.py:1040 0.162s
    When I restore the backup named ""first_backup"" with the sstableloader                           # features/steps/integration_steps.py:734
Exception in thread ""main"" java.lang.RuntimeException: Could not create SSL Context.
	at org.apache.cassandra.tools.BulkLoader.buildSSLOptions(BulkLoader.java:261)
	at org.apache.cassandra.tools.BulkLoader.load(BulkLoader.java:64)
	at org.apache.cassandra.tools.BulkLoader.main(BulkLoader.java:49)
Caused by: java.io.IOException: Error creating/initializing the SSL Context
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:184)
	at org.apache.cassandra.tools.BulkLoader.buildSSLOptions(BulkLoader.java:257)
	... 2 more
Caused by: java.lang.IllegalStateException: SSLContextImpl is not initialized
	at sun.security.ssl.SSLContextImpl.engineGetSocketFactory(SSLContextImpl.java:172)
	at javax.net.ssl.SSLContextSpi.getDefaultSocket(SSLContextSpi.java:142)
	at javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters(SSLContextSpi.java:168)
	at javax.net.ssl.SSLContext.getDefaultSSLParameters(SSLContext.java:419)
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:178)
    When I restore the backup named ""first_backup"" with the sstableloader                           # features/steps/integration_steps.py:734 1.635s
      Traceback (most recent call last):
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/py36/lib/python3.6/site-packages/behave/model.py"", line 1329, in run
          match.run(runner.context)
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/py36/lib/python3.6/site-packages/behave/matchers.py"", line 98, in run
          self.func(context, *args, **kwargs)
        File ""features/steps/integration_steps.py"", line 746, in _i_restore_the_backup_named_with_sstableloader
          use_sstableloader=True,
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/medusa/restore_node.py"", line 53, in restore_node
          keyspaces, tables)
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/medusa/restore_node.py"", line 172, in restore_node_sstableloader
          invoke_sstableloader(config, download_dir, keep_auth, fqtns_to_restore, cassandra.storage_port)
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/medusa/restore_node.py"", line 219, in invoke_sstableloader
          output = subprocess.check_output(sstableloader_args)
        File ""/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/subprocess.py"", line 336, in check_output
          **kwargs).stdout
        File ""/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/subprocess.py"", line 418, in run
          output=stdout, stderr=stderr)
      subprocess.CalledProcessError: Command '['/Users/adejanovski/.ccm/repository/4.0-beta4/bin/sstableloader', '-d', '127.0.0.1', '--conf-path', '/Users/adejanovski/.ccm/scenario11/node1/conf/cassandra.yaml', '--username', 'cassandra', '--password', 'cassandra', '--no-progress', '/tmp/medusa-restore-a72a47c8-8776-4de4-9cc1-d5eea23cf434/medusa/test-b9d0a8705b4611eb8be0ede3aec9ec61', '-ts', '/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks', '-tspw', 'truststorePass1', '-ks', '/Users/adejanovski/projets/cassandra/thelastpickle/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks', '-kspw', 'testdata1']' returned non-zero exit status 1.
{noformat}

With trunk now, and since the changes from this ticket were committed, we fail earlier as we cannot connect anymore using the python driver: 

{noformat}
./run_integration_tests.sh -t 1 --cassandra-version=github:apache/trunk
..
..
..
  @11 @local
  Scenario Outline: Perform a backup, and restore it using the sstableloader -- @1.1 Local storage  # integration/features/integration_tests.feature:450
    Given I have a fresh ccm cluster ""with_client_encryption"" running named ""scenario11""            # features/steps/integration_steps.py:125
https://github.com/apache/cassandra.git github:apache/trunk
18:44:54,558 ccm INFO Fetching Cassandra updates...
18:44:55,978 ccm DEBUG Branch up to date, not pulling.
    Given I have a fresh ccm cluster ""with_client_encryption"" running named ""scenario11""            # features/steps/integration_steps.py:125 115.170s
    Given I am using ""local"" as storage provider in ccm cluster ""with_client_encryption""            # features/steps/integration_steps.py:235 0.046s
    When I create the ""test"" table in keyspace ""medusa""                                             # features/steps/integration_steps.py:511 0.001s
      Traceback (most recent call last):
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/py36/lib/python3.6/site-packages/behave/model.py"", line 1329, in run
          match.run(runner.context)
        File ""/Users/adejanovski/projets/cassandra/thelastpickle/py36/lib/python3.6/site-packages/behave/matchers.py"", line 98, in run
          self.func(context, *args, **kwargs)
        File ""features/steps/integration_steps.py"", line 515, in _i_create_the_whatever_table
          context.session.execute(keyspace.format(keyspace_name))
      AttributeError: 'NoneType' object has no attribute 'execute'
...
...
{noformat}

Using the ccm cluster generated by this last test, we tried to connect to it with the Python driver using both TLS1.1 and 1.2 without success.;;;","20/Jan/21 18:58;jmeredithco;Thanks for the extra info.  I just spotted a log message I missed about not being able to find sstableloader. When the CCM version is supplied as git:<sha> the {{config[""cassandra""][""sstableloader_bin""]}} is set incorrectly and it cannot find it. I'll keep trying.;;;","20/Jan/21 19:37;adejanovski;It's our fault actually. Please use the following branch of Medusa to be able to use forks as Cassandra base for the ccm clusters: https://github.com/thelastpickle/cassandra-medusa/tree/alex/CASSANDRA-16362

The master branch will only accept {{github:apache/...}} versions.;;;","20/Jan/21 20:32;jmeredithco;Using {{github/apache}} did the trick. I've been able to reproduce.

{code}
WARN  13:28:18,797 Small commitlog volume detected at '/home/jmeredith/.ccm/repository/githubCOLONapacheSLASHcassandra-4.0-beta4/bin/../data/commitlog'; setting commitlog_total_space_in_mb to 5119.  You can override this in cassandra.yaml
WARN  13:28:18,801 Only 13.610GiB free across all data volumes. Consider adding more capacity to your cluster or removing obsolete snapshots
Exception in thread ""main"" java.lang.RuntimeException: Could not create SSL Context.
	at org.apache.cassandra.tools.BulkLoader.buildSSLOptions(BulkLoader.java:261)
	at org.apache.cassandra.tools.BulkLoader.load(BulkLoader.java:64)
	at org.apache.cassandra.tools.BulkLoader.main(BulkLoader.java:49)
Caused by: java.io.IOException: Error creating/initializing the SSL Context
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:184)
	at org.apache.cassandra.tools.BulkLoader.buildSSLOptions(BulkLoader.java:257)
	... 2 more
Caused by: java.lang.IllegalStateException: SSLContextImpl is not initialized
	at sun.security.ssl.SSLContextImpl.engineGetSocketFactory(SSLContextImpl.java:172)
	at javax.net.ssl.SSLContextSpi.getDefaultSocket(SSLContextSpi.java:142)
	at javax.net.ssl.SSLContextSpi.engineGetDefaultSSLParameters(SSLContextSpi.java:168)
	at javax.net.ssl.SSLContext.getDefaultSSLParameters(SSLContext.java:419)
	at org.apache.cassandra.security.SSLFactory.createSSLContext(SSLFactory.java:178)
{code};;;","23/Jan/21 00:33;jmeredithco;In the end, it was a simple mistake, replacing the ""TLS"" with the {{getSupportedSSLParameters}} rather than the {{getDefaultSSLParameters}} as I had intended.

I also noticed that Netty always includes the SSLv2Hello pseudo-protocol as Netty claims it is not possible to disable it ([https://github.com/netty/netty/commit/7a39afd031accea9ee38653afbd58eb1c466deda#diff-d9520f8137242d465d6e625873bfad7b7e27fb10168c144236757d2ec1141b1dR205]).
 After a bit of reading, it seems like it is was historically used by Java clients to help negotiate the real protocol.

To avoid unnecessarily scaring people (and auditors) that SSLv2 is enabled when it is not I've added a filter for SSLv2Hello in the info level message, and log the full list at debug level.

I've pushed two new commits we can squash on merge that fix the Supported->Default bug, and filter out SSLv2Hello.

[https://github.com/jonmeredith/cassandra/tree/C16362-switch-to-default-options]

CircleCI https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16362-switch-to-default-options

 
To prove to myself that the protocols served match the configuration, I've run a combination of protocol settings and JVM versions and checked the testssl.sh and log output.
For each cluster name (made up of java version and protocol option configured) this lists the client encryption options, the log lines emitted and the protocol test section of the testssl.sh output.

{code:java}
=== Cluster /home/jmeredith/.ccm/c16362_11_0_9_11_2_ ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 15:08:45,259 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 15:08:45,259 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
INFO  [main] 2021-01-22 15:08:45,259 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      offered (deprecated)
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_11_0_9_11_2_TLS ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLS
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 15:13:06,715 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 15:13:06,715 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
INFO  [main] 2021-01-22 15:13:06,715 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      offered (deprecated)
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_11_0_9_11_2_TLSv1_2 ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLSv1.2
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 15:17:32,582 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 15:17:32,587 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1.2
INFO  [main] 2021-01-22 15:17:32,587 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1.2
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    not offered
 TLS 1.2    offered (OK)
 TLS 1.3    not offered and downgraded to a weaker protocol
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_11_0_9_11_2_TLSv1_3 ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLSv1.3
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 15:21:42,102 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 15:21:42,102 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1.3
INFO  [main] 2021-01-22 15:21:42,102 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    not offered
 TLS 1.2    not offered
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_161_2_b14_ ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:31:57,882 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:31:57,882 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
INFO  [main] 2021-01-22 14:31:57,882 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      offered (deprecated)
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_161_2_b14_TLS ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLS
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:36:27,957 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:36:27,957 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2
INFO  [main] 2021-01-22 14:36:27,957 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1, TLSv1.1, TLSv1.2
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      offered (deprecated)
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    not offered and downgraded to a weaker protocol
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_161_2_b14_TLSv1_2 ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLSv1.2
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:40:51,398 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:40:51,398 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1.2
INFO  [main] 2021-01-22 14:40:51,398 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1.2
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    not offered
 TLS 1.2    offered (OK)
 TLS 1.3    not offered and downgraded to a weaker protocol
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_161_2_b14_TLSv1_3 ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLSv1.3
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:45:04,453 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:45:04,453 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1.3
INFO  [main] 2021-01-22 14:45:04,454 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    not offered
 TLS 1.2    not offered
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_222_b10_ ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:50:21,956 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:50:21,957 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
INFO  [main] 2021-01-22 14:50:21,957 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      offered (deprecated)
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_222_b10_TLS ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLS
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:54:35,390 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:54:35,390 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2
INFO  [main] 2021-01-22 14:54:35,390 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1, TLSv1.1, TLSv1.2
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      offered (deprecated)
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    not offered and downgraded to a weaker protocol
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_222_b10_TLSv1_2 ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLSv1.2
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 14:58:48,919 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 14:58:48,919 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1.2
INFO  [main] 2021-01-22 14:58:48,920 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1.2
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    not offered
 TLS 1.2    offered (OK)
 TLS 1.3    not offered and downgraded to a weaker protocol
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered


=== Cluster /home/jmeredith/.ccm/c16362_1_8_0_222_b10_TLSv1_3 ===
client_encryption_options:
  algorithm: SunX509
  enabled: true
  keystore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/127.0.0.1.jks
  optional: false
  protocol: TLSv1.3
  require_client_auth: true
  store_type: JKS
  truststore: /home/jmeredith/cassandra-medusa/tests/resources/local_with_ssl/generic-server-truststore.jks
DEBUG [main] 2021-01-22 15:02:57,010 SSLFactory.java:517 - Native transport supported TLS protocols: SSLv2Hello, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3
DEBUG [main] 2021-01-22 15:02:57,010 SSLFactory.java:519 - Native transport unfiltered enabled TLS protocols: SSLv2Hello, TLSv1.3
INFO  [main] 2021-01-22 15:02:57,010 SSLFactory.java:521 - Native transport enabled TLS protocols: TLSv1.3
 Testing protocols via sockets except NPN+ALPN 

 SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    not offered
 TLS 1.2    not offered
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 not offered

{code};;;","25/Jan/21 14:33;adejanovski;Awesome findings [~jmeredithco]!

I managed to have the tests pass using your new branch on my laptop but they're still failing in CI for some odd reason: [https://github.com/thelastpickle/cassandra-medusa/runs/1762379270?check_suite_focus=true]

I'll investigate further to see where the problem lies specifically and update here.;;;","25/Jan/21 15:28;jmeredithco;Thanks for rechecking. Glad it's better locally.  Here's the patch I used on the integration tests to pick up my branch, but it's probably functionally the same as yours.

{code}
diff --git a/medusa/restore_node.py b/medusa/restore_node.py
index f867ef1..90133d6 100644
--- a/medusa/restore_node.py
+++ b/medusa/restore_node.py
@@ -190,8 +190,7 @@ def invoke_sstableloader(config, download_dir, keep_auth, fqtns_to_restore, stor
                     logging.debug('Restoring table {} with sstableloader...'.format(table))
                     cql_username = 'foo' if config.cassandra.cql_username is None else config.cassandra.cql_username
                     cql_password = 'foo' if config.cassandra.cql_password is None else config.cassandra.cql_password
-                    sstableloader_args = [config.cassandra.sstableloader_bin.replace(
-                                          ""github:apache/"", ""githubCOLONapacheSLASH""),
+                    sstableloader_args = [config.cassandra.sstableloader_bin,
                                           '-d', hostname_resolver.resolve_fqdn() if cassandra_is_ccm == 0
                                           else '127.0.0.1',
                                           '--conf-path', config.cassandra.config_file,
diff --git a/tests/integration/features/steps/integration_steps.py b/tests/integration/features/steps/integration_steps.py
index 8daf11f..c09628f 100644
--- a/tests/integration/features/steps/integration_steps.py
+++ b/tests/integration/features/steps/integration_steps.py
@@ -316,6 +316,7 @@ def i_am_using_storage_provider(context, storage_provider, client_encryption):
             ""transfer_max_bandwidth"": ""1MB/s""
         }
 
+    repository_version_path = context.cassandra_version.replace("":"",""COLON"").replace(""/"",""SLASH"")
     config[""cassandra""] = {
         ""is_ccm"": 1,
         ""stop_cmd"": ""ccm stop"",
@@ -331,7 +332,7 @@ def i_am_using_storage_provider(context, storage_provider, client_encryption):
             os.path.join(
                 ""~/.ccm"",
                 ""repository"",
-                context.cassandra_version,
+                repository_version_path,
                 ""bin"",
                 ""sstableloader"",
             )
{code};;;","27/Jan/21 17:12;jmeredithco;[~adejanovski] did you get a chance to check your CI system?;;;","27/Jan/21 17:47;adejanovski;It's still failing in CI and passing locally.

I don't have a clue why yet why it doesn't work there and GHA doesn't allow to SSH into the CI instances :(

It seems more like a problem with our CI rather than your patch as I get it to pass locally.
I'll spend some time on this issue tomorrow and update this ticket.;;;","27/Jan/21 18:23;jmeredithco;Thanks.  It might be interesting if CI works any better with the {{protocol: TLS}} entry omitted, skipping the new logic that tries to be backward compatible with what 3.0 would have done. If that works, then there may be more work to do on the patch.;;;","29/Jan/21 00:29;dcapwell;+1 from me.  ;;;","29/Jan/21 01:00;dcapwell;[~adejanovski] let us know what you find out;;;","29/Jan/21 07:10;adejanovski;Hey folks, sorry it took me a while to get to the bottom of it.

The issue we were having was due to the [storage port being changed in our integration tests|https://github.com/thelastpickle/cassandra-medusa/blob/master/tests/integration/features/steps/integration_steps.py#L151] which apparently was not making ccm happy with 4.0 as the nodes wouldn't find themselves as seeds.

I'm positive that [this worked in the past|https://github.com/thelastpickle/cassandra-medusa/runs/1449108534?check_suite_focus=true], so I have no clue why it suddenly started failing, nor why it would still pass locally on my laptop. There's definitely something fishy with the way some versions of ccm (I get lost between which branches do support 4.0 or not) deal with changing the storage port and how that impacts the seed list. 

But the good news is that as soon as I removed the storage port change, the [tests went green|https://github.com/thelastpickle/cassandra-medusa/runs/1789721180?check_suite_focus=true] using the C16362 branch (/)

+1 for merge and I'll set up CI properly again in Medusa to get tests running on trunk.

I'll try to investigate further the issue with CCM and the custom storage port. ;;;","29/Jan/21 13:31;adejanovski;Here's a [full green CI run|https://github.com/thelastpickle/cassandra-medusa/actions/runs/520478863] using the branch from this patch for 4.0.

I've tried with different TLS settings (PROTOCOL_TLSv1 and PROTOCOL_TLSv1_2) and it worked in both cases.;;;","29/Jan/21 15:10;jmeredithco;Great news.  Thanks for investigating.  I think that clears us to merge.;;;","29/Jan/21 19:44;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16362-trunk-3F712F89-75F7-4838-9D4D-DA95B07DC625]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16362-trunk-3F712F89-75F7-4838-9D4D-DA95B07DC625]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/348/]|
;;;","03/Feb/21 03:16;dcapwell;Committed https://github.com/apache/cassandra/commit/1b04702f351861e6fef8cf64fd26f65ec90e4c70;;;",,,,,,,,,,,,
DROP COMPACT STORAGE should invalidate prepared statements still using CompactTableMetadata,CASSANDRA-16361,13346668,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,17/Dec/20 21:45,04/Jun/21 10:17,13/Jul/23 08:39,18/Dec/20 17:07,4.0,4.0-beta4,,,,Legacy/CQL,,,,0,,,,"When we drop compact storage from a table, existing prepared statements continue to refer to an instance of {{CompactTableMetadata}}, rather than being invalidated so they can be assigned a new {{TableMetadata}} instance. There are perhaps some brute force ways to fix this, like bouncing the node, but that obviously sub-optimal.

One idea is to have {{TableMetadata#changeAffectsPreparedStatements()}} return true when we go from having to not having the DENSE flag. It should be pretty easy to validate a fix with a small addition to {{CompactTableTest}}.",,ifesdjeen,maedhroz,mck,,,,,,,,,"maedhroz opened a new pull request #858:
URL: https://github.com/apache/cassandra/pull/858


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 22:29;githubbot;600","ifesdjeen commented on a change in pull request #858:
URL: https://github.com/apache/cassandra/pull/858#discussion_r545701637



##########
File path: src/java/org/apache/cassandra/schema/TableMetadata.java
##########
@@ -558,7 +558,8 @@ boolean changeAffectsPreparedStatements(TableMetadata updated)
             || !regularAndStaticColumns.equals(updated.regularAndStaticColumns)
             || !indexes.equals(updated.indexes)
             || params.defaultTimeToLive != updated.params.defaultTimeToLive
-            || params.gcGraceSeconds != updated.params.gcGraceSeconds;
+            || params.gcGraceSeconds != updated.params.gcGraceSeconds
+            || flags.contains(Flag.DENSE) && !updated.flags.contains(Flag.DENSE);

Review comment:
       You could use `!Flag.isCQLTable(flags)` instead:  https://github.com/apache/cassandra/blob/61046b5c6836d86f38d238e3629074099a6a6545/src/java/org/apache/cassandra/schema/TableMetadata.java#L99




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 09:23;githubbot;600","michaelsembwever commented on a change in pull request #858:
URL: https://github.com/apache/cassandra/pull/858#discussion_r545710782



##########
File path: src/java/org/apache/cassandra/schema/TableMetadata.java
##########
@@ -558,7 +558,8 @@ boolean changeAffectsPreparedStatements(TableMetadata updated)
             || !regularAndStaticColumns.equals(updated.regularAndStaticColumns)
             || !indexes.equals(updated.indexes)
             || params.defaultTimeToLive != updated.params.defaultTimeToLive
-            || params.gcGraceSeconds != updated.params.gcGraceSeconds;
+            || params.gcGraceSeconds != updated.params.gcGraceSeconds
+            || flags.contains(Flag.DENSE) && !updated.flags.contains(Flag.DENSE);

Review comment:
       can we also put it in parenthesis for readability…
   
   ```suggestion
               || ( !isCQLTable(flags) && isCQLTable(updated.flags) );
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 09:33;githubbot;600","michaelsembwever commented on a change in pull request #858:
URL: https://github.com/apache/cassandra/pull/858#discussion_r545967750



##########
File path: src/java/org/apache/cassandra/cql3/QueryProcessor.java
##########
@@ -161,6 +161,12 @@ public static void clearPreparedStatements(boolean memoryOnly)
         if (!memoryOnly)
             SystemKeyspace.resetPreparedStatements();
     }
+    

Review comment:
       fyi: white-space here i had to remove. there was also three lines with trailing whitespace introduced in CompactTableTest, also fixed.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 17:06;githubbot;600","maedhroz closed pull request #858:
URL: https://github.com/apache/cassandra/pull/858


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 18:46;githubbot;600","maedhroz commented on pull request #858:
URL: https://github.com/apache/cassandra/pull/858#issuecomment-748254424


   Committed as https://github.com/apache/cassandra/commit/d9859d231f24781b7ebf4dd93bb4584fb4bc7538


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 18:46;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16217,CASSANDRA-16712,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Dec 18 17:07:54 UTC 2020,,,,,,,All,,,,,,"0|z0lmi0:",9223372036854775807,,,,ifesdjeen,mck,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/d9859d231f24781b7ebf4dd93bb4584fb4bc7538,,,,,,,,,a new test that verifies the contents of the prepared statement cache around the DROP COMPACT STORAGE logic,,,,,"17/Dec/20 22:31;maedhroz;patch: https://github.com/apache/cassandra/pull/858
CircleCI: https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-16361;;;","18/Dec/20 09:25;ifesdjeen;+1, with a minor comment on GH;;;","18/Dec/20 09:33;mck;+1;;;","18/Dec/20 15:16;maedhroz;[~mck] [~ifesdjeen] Thanks for the review! I've changed the one item you two mentioned on the PR, and I think we're ready to commit. Would either of you mind doing the honors?;;;","18/Dec/20 17:07;mck;Cleaned up some trailing whitespace, and added the CHANGES.txt entry.

Committed as [d9859d231f24781b7ebf4dd93bb4584fb4bc7538|https://github.com/apache/cassandra/commit/d9859d231f24781b7ebf4dd93bb4584fb4bc7538].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor Flakiness in ProxyHandlerConnectionsTest#testExpireSomeFromBatch,CASSANDRA-16358,13346423,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,maedhroz,maedhroz,16/Dec/20 19:29,24/Feb/21 05:58,13/Jul/23 08:39,18/Feb/21 23:20,4.0,4.0-rc1,,,,Test/unit,,,,0,,,,"This seems only to be failing in ci-cassandra, but it fails across cdc, compression, and normal configurations there. The only failure recent enough to be retained is here:

https://ci-cassandra.apache.org/job/Cassandra-devbranch/268/testReport/org.apache.cassandra.net/ProxyHandlerConnectionsTest/testExpireSomeFromBatch_compression_2/

{noformat}
org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSomeFromBatch-compression (from org.apache.cassandra.net.ProxyHandlerConnectionsTest-compression)

Error Message

Expired: 8, Arrived: 10

Stacktrace

junit.framework.AssertionFailedError: Expired: 8, Arrived: 10
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.waitForCondition(ProxyHandlerConnectionsTest.java:285)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.lambda$testExpireSomeFromBatch$23(ProxyHandlerConnectionsTest.java:210)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.doTestManual(ProxyHandlerConnectionsTest.java:378)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.testManual(ProxyHandlerConnectionsTest.java:337)
	at org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSomeFromBatch(ProxyHandlerConnectionsTest.java:169)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

Standard Output

DEBUG [main] 2020-12-15 20:36:43,018 InternalLoggerFactory.java:45 - Using SLF4J as the default logging framework
DEBUG [main] 2020-12-15 20:36:43,043 PlatformDependent0.java:417 - -Dio.netty.noUnsafe: false
DEBUG [main] 2020-12-15 20:36:43,044 PlatformDependent0.java:897 - Java version: 8
DEBUG [main] 2020-12-15 20:36:43,044 PlatformDependent0.java:130 - sun.misc.Unsafe.theUnsafe: available
DEBUG [main] 2020-12-15 20:36:43,045 PlatformDependent0.java:154 - sun.misc.Unsafe.copyMemory: available

...[truncated 394654 chars]...
ol$Initiate.maybeDecode(HandshakeProtocol.java:167)
	at org.apache.cassandra.net.InboundConnectionInitiator$Handler.initiate(InboundConnectionInitiator.java:242)
	at org.apache.cassandra.net.InboundConnectionInitiator$Handler.decode(InboundConnectionInitiator.java:235)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
	... 29 common frames omitted
{noformat}

There are a number of historical failures listed here, but the runs that produced them have not been retained:

https://ci-cassandra.apache.org/job/Cassandra-trunk/207/testReport/junit/org.apache.cassandra.net/ProxyHandlerConnectionsTest/",,adelapena,bereng,blerer,e.dimitrova,maedhroz,rocco.varela,,,,,,"bereng opened a new pull request #871:
URL: https://github.com/apache/cassandra/pull/871


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/21 09:20;githubbot;600","bereng commented on pull request #871:
URL: https://github.com/apache/cassandra/pull/871#issuecomment-762169727


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/191/workflows/53a009f8-1ec3-4710-8bac-60f797f7cbe7)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/191/workflows/8aded3e3-4ffc-48b9-a02f-c962f179ab12)
   
   The only failure seems unrelated


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/21 10:57;githubbot;600","bereng closed pull request #871:
URL: https://github.com/apache/cassandra/pull/871


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Feb/21 05:58;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Feb 18 23:20:37 UTC 2021,,,,,,,All,,,,,,"0|z0lkzk:",9223372036854775807,,,,adelapena,blerer,e.dimitrova,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/c0b58de334290590cb4d8d90751a6bd6c9139e33,,,,,,,,,See PR,,,,,"18/Jan/21 09:24;bereng;The test looks right. Most failures I could track down are half-way through completed the problem being it is a time sensitive test. That aligns to the flakiness that can be observed in heavily loaded envs such as ci-cass. I raised timeout for the time being. If that still causes issues then we'd have to look into refactoring the whole test and remove the time sensitiveness.;;;","18/Jan/21 18:39;adelapena;I haven't been able to reproduce the timeout neither locally nor in 100 runs of internal CI. Raising the timeout looks like a good solution to me, +1.;;;","19/Jan/21 10:34;blerer;Committed into trunk at c0b58de334290590cb4d8d90751a6bd6c9139e33;;;","21/Jan/21 23:06;e.dimitrova;Unfortunately,  I saw it again in the latest build:

https://jenkins-cm4.apache.org/job/Cassandra-trunk/244/testReport/junit/org.apache.cassandra.net/ProxyHandlerConnectionsTest/testExpireSomeFromBatch/;;;","25/Jan/21 12:56;adelapena;Indeed this is still failing with the same error, we should probably reopen this ticket. I'm running the test method in the multiplexer again ([here|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/683/]), this time with 500 runs. I'm also running the entire suite in the multiplexer ([here|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/684/]), to see if the reproduction depends on interactions.;;;","25/Jan/21 13:39;bereng;Let's reopen then. I am deep in another mysterious ticket. I can look at this one next. Thx! ;;;","26/Jan/21 12:14;adelapena;bq. I'm running the test method in the multiplexer again ([here|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/683/]), this time with 500 runs. I'm also running the entire suite in the multiplexer ([here|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/684/]), to see if the reproduction depends on interactions.
Of the aforementioned runs only the one running the entire {{ProxyHandlerConnectionsTest}} suite 100 times has reproduced the error once.;;;","27/Jan/21 05:18;bereng;Thanks for the info!;;;","29/Jan/21 16:43;rocco.varela;I was also able to reproduce this issue on an m4.xlarge with 4 cpus with 2 runners (as shown in the example above). I saw 10 failures out of 500 runs. I also noticed with 1 runner on this same instance type the issue did not appear.

 

With a m4.2xlarge with 8 cpus, running with 2 runners did not reproduce the issue. 

 

I may be stating the obvious, but there appears to be some sensitivity between the number of runners used for parallelizing the tests and the number of cpus available on the host.;;;","01/Feb/21 14:00;e.dimitrova;Rocco will not be working on this one more so I am moving it back to unassigned;;;","18/Feb/21 22:52;brandon.williams;There are a couple problems with this test.  The first is that if messages are dropped, which can often be expected, it results in an NPE that complicates further debugging.  The timeout for this test itself does not actually matter, since it is manipulating timing windows that it later assert results upon.  These all work in a perfect world, but inside the JVM need some relaxing to allow for the real world to get in the way. Patch [here|https://github.com/driftx/cassandra/tree/CASSANDRA-16358], [CI here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/388/], that addresses both of these.  After being able to reproduce the issue within hundreds of runs, I've had success in thousands with this.;;;","18/Feb/21 23:12;e.dimitrova;I trust you that you ran it 1000 times(I mean I ran it only a few times locally successfully  but I was not able to reproduce it before :( ), code-wise looks good to me. Thanks!;;;","18/Feb/21 23:20;brandon.williams;Committed in dfdb6e3d8ebd797bbda8bbe5e47b5228a9281839;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test incompletePropose - org.apache.cassandra.distributed.test.CASTest,CASSANDRA-16355,13346205,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,blerer,dcapwell,dcapwell,15/Dec/20 21:40,16/Mar/22 15:27,13/Jul/23 08:39,17/Feb/21 13:20,3.0.25,3.11.11,4.0,4.0-rc1,,Feature/Lightweight Transactions,Test/dtest/java,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/853/workflows/0766c0de-956e-4831-aa40-9303748a2708/jobs/5030

{code}
junit.framework.AssertionFailedError: Expected: [[1, 1, 2]]
Actual: []

	at org.apache.cassandra.distributed.shared.AssertUtils.fail(AssertUtils.java:193)
	at org.apache.cassandra.distributed.shared.AssertUtils.assertEquals(AssertUtils.java:163)
	at org.apache.cassandra.distributed.shared.AssertUtils.assertRows(AssertUtils.java:63)
	at org.apache.cassandra.distributed.test.CASTest.incompletePropose(CASTest.java:124)
{code}",,bereng,blerer,brandon.williams,dcapwell,e.dimitrova,mck,slebresne,,,,,"blerer opened a new pull request #901:
URL: https://github.com/apache/cassandra/pull/901


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Feb/21 12:40;githubbot;600","blerer opened a new pull request #902:
URL: https://github.com/apache/cassandra/pull/902


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Feb/21 12:43;githubbot;600","blerer opened a new pull request #903:
URL: https://github.com/apache/cassandra/pull/903


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Feb/21 13:39;githubbot;600","smiklosovic closed pull request #902:
URL: https://github.com/apache/cassandra/pull/902


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:22;githubbot;600","smiklosovic closed pull request #901:
URL: https://github.com/apache/cassandra/pull/901


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:26;githubbot;600","smiklosovic closed pull request #903:
URL: https://github.com/apache/cassandra/pull/903


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:27;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16317,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,blerer,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Feb 17 13:20:22 UTC 2021,,,,,,,All,,,,,,"0|z0ljn4:",9223372036854775807,,,,blerer,slebresne,,,Normal,,3.11.9,,,https://github.com/apache/cassandra/commit/df0216c345b0b03f1b394fe092667e5d6bcd2957,,,,,,,,,The test fix was checked through multiple runs. ,,,,,"15/Dec/20 21:41;dcapwell;didn't increase to critical as I don't know if this is a test issue or not, so hoping someone more familiar can validate and correct the state.;;;","17/Dec/20 21:57;e.dimitrova;Just saw it again today in CircleCI:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/545/workflows/f797bf58-b572-4d8c-831e-a61936d23624/jobs/3027;;;","19/Jan/21 08:33;bereng;Running the CAS test locally randomly fails for me in 3 different ways: this ticket, CASSANDRA-16317 [timeouts|https://issues.apache.org/jira/browse/CASSANDRA-16317?focusedCommentId=17267739&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17267739] or OOM. Proposing to address them all here.;;;","19/Jan/21 09:47;blerer;{quote}Proposing to address them all here.{quote}
It makes sense to me.
;;;","24/Jan/21 19:16;mck;ci-cassandra's [test page for CASTest|https://ci-cassandra.apache.org/job/Cassandra-trunk-jvm-dtest/lastCompletedBuild/jdk=jdk_1.8_latest,label=cassandra/testReport/org.apache.cassandra.distributed.test/CASTest/] is reporting flakiness at 37%.

h4. Searching nightlies.a.o

The logs for this test are archived at
{noformat}
https://nightlies.apache.org/cassandra/Cassandra-trunk-jvm-dtest/jdk=jdk_1.8_latest,label=cassandra/*/build/test/logs/org.apache.cassandra.distributed.test.CASTest/
{noformat}
for example, the following are the logs for the {{incompletePropose}} failures…
- https://nightlies.apache.org/cassandra/Cassandra-trunk-jvm-dtest/jdk=jdk_1.8_latest,label=cassandra/478/build/test/logs/org.apache.cassandra.distributed.test.CASTest/
- https://nightlies.apache.org/cassandra/Cassandra-trunk-jvm-dtest/jdk=jdk_1.8_latest,label=cassandra/476/build/test/logs/org.apache.cassandra.distributed.test.CASTest/

To search in the archives, we can do**…
{code}
# webdav mount https://nightlies.apache.org/cassandra/ to /Volumes/cassandra
cd /Volumes/cassandra

xzgrep ""name=\""CASTest\"""" Cassandra-trunk/*/TESTS-TestSuites.xml.xz
{code}
shows error (for the class) in builds:
- [Cassandra-trunk#197|https://nightlies.apache.org/cassandra/Cassandra-trunk/197]
- [Cassandra-trunk#202|https://nightlies.apache.org/cassandra/Cassandra-trunk/202]
- [Cassandra-trunk#212|https://nightlies.apache.org/cassandra/Cassandra-trunk/212]

Note, these are other test failures than {{incompletePropose}}.


**) The test xml for the jvm-dtest jobs, like [this|https://ci-cassandra.apache.org//job/Cassandra-trunk-jvm-dtest/jdk=jdk_1.8_latest,label=cassandra/lastSuccessfulBuild/artifact/build/test/output/], are not archived (yet) so the slower greps against the full pipeline xml test reports have to done.
;;;","16/Feb/21 11:16;blerer;I digged into the tests and it seems that the issue is that the timeouts are probably to low for the  CI environment. I noticed that the initial insert query is slower to reach the paxos logic that the following ones.

For the {{incompletePropose}} test, what is happening is that the initial insert timeout in the {{prepare}} round before this phase is actually completed on the node. Due to that the original update is never taken into account. The following update fail silently and the problem is caught by the {{SELECT}} query.
Another scenario that can happen is that the {{prepare}} round complete but the {{proposal}} one fail for the coordinator node due to a timeout. In this case the following update will found the prepared value and ensure that it is proposed and committed before applying the update. So in practice the test will succeed even if the executed scenario is not the expected one.

For the {{incompleteCommit}} test what is happening  is due to the extra work left by the original insert the update take longer than expected and timeout. 

 
 ;;;","16/Feb/21 13:41;blerer;|| Branch || CI ||
|[cassandra-3.0|https://github.com/apache/cassandra/pull/901]|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/103/workflows/98620a40-f8aa-48bd-b61e-e301a05c16ae]|
|[cassandra-3.11|https://github.com/apache/cassandra/pull/902]|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/106/workflows/11713aa2-d80e-4ddf-b760-c5128c26a460]|
|[trunk|https://github.com/apache/cassandra/pull/903]| [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/107/workflows/b39bd3e7-9029-440b-a50f-3c4f985a3b88], [j11|https://app.circleci.com/pipelines/github/blerer/cassandra/107/workflows/e9cc0ea1-c851-438b-aa13-608ced7ae28d]|;;;","16/Feb/21 15:28;slebresne;It sounds very plausible than 200ms is on the low end for CI, and [~blerer] explanations of why timeouts would lead to the failure seen on this ticket make sense.

So +1 for the patch raising the timeout. Maybe just a nit: I'd use the opportunity for moving the timeout value into a constant.

That said, it's a bit unfortunate the test failures don't surface more clearly that this is due to a timeout. The reason this happen, at least for `incompletePropose` and if I understand correctly, is that while the initial inserts timeout _before_ it was supposed to, the `catch` doesn't know that. So what about modifying `IMessageFilters.Filter` so that it counts the number of messages it drops? With that, we could check after that the first insert timeout that the filter was triggered. And if it wasn't, that would imply we timed out before we were supposed too (and we could have a message saying ""Hey, CI is slow again today"").

But I do understand this imply a change and subsequent release of the in-jvm dtest API, so I'd be fine committing the timeout bump now for the sake of cleaning up CI and have that ""improvement"" in a followup (or not at all, it's just a suggestion).
;;;","17/Feb/21 10:32;blerer;Created CASSANDRA-16454 to address the problem raised by [~slebresne].;;;","17/Feb/21 13:20;blerer;Committed into cassandra-3.0 at df0216c345b0b03f1b394fe092667e5d6bcd2957 and merged into cassandra-3.11 and trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
python dtest fails to talk to 2.2 using protocol 4 but cqlsh has no issue,CASSANDRA-16354,13346186,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,15/Dec/20 20:03,08/Jan/21 17:48,13/Jul/23 08:39,08/Jan/21 17:45,NA,,,,,CI,Test/dtest/python,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/850/workflows/79486fdd-06d0-4d04-aa32-0fa648182356/jobs/5019/artifacts

We see that upgrade tests which talk to 2.2 clusters fail with the following error

{code}
>   ???
E   cassandra.cluster.NoHostAvailable: ('Unable to connect to any servers', {'127.0.0.1:9042': DriverException('ProtocolError returned from server while using explicitly set client protocol_version 4',)})
{code}

For some reason, setting protocol version 4 causes 2.2 to fail, but this does not happen when using cqlsh (from trunk) 

{code}
./bin/cqlsh --protocol-version=4
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 2.2.20-SNAPSHOT | CQL spec 3.3.1 | Native protocol v4]
Use HELP for help.
{code}",,aholmber,dcapwell,Gerrrr,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16352,,CASSANDRA-16322,,,,,,CASSANDRA-16352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jan 08 17:46:06 UTC 2021,,,,,,,All,,,,,,"0|z0ljiw:",9223372036854775807,,,,dcapwell,samt,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/f235b00d07671dab745f2b82c7191db92fe365ae,,,,,,,,,"Run existing upgrade tests, and unit tests for the dynamic protocol cap.
No doc.",,,,,"15/Dec/20 20:06;dcapwell;Even though this is talking about 2.2, this was marked as 4.0 because it impacts CASSANDRA-16352, which is an upgrade test; this also seems to be the most common upgrade test issue (when running all tests ~700 failures are caused by this) which adds too much noise in the 3.x line to even justify running upgrade tests (so simple regressions may leak into a release).;;;","22/Dec/20 17:42;aholmber;The description mentions 2.2.0, but in my troubleshooting, the test was failing while [connecting to the upgraded 3.0 node|https://github.com/apache/cassandra-dtest/blob/f9c46ad462d894b3c08b3a547cdfc6ba21b49e53/upgrade_crc_check_chance_test.py#L84-L87]

3.0 and 3.11 have a [mechanism for capping max protocol in mixed version clusters|https://github.com/apache/cassandra/commit/0388d89e29393d0b1f50baa24848bc8cb0a7c9a3][1]. That's causing this 3.0 node to cap at v3, but our test code [explicitly sets an ""eager"" protocol version|https://github.com/apache/cassandra-dtest/blob/f9c46ad462d894b3c08b3a547cdfc6ba21b49e53/dtest_setup.py#L196-L197] (which I guess means the max version accepted by the server)[2]. I think the problem is that the server protocol limit is too restrictive, [saying v4 started at 3.0|https://github.com/apache/cassandra/commit/0388d89e29393d0b1f50baa24848bc8cb0a7c9a3#diff-8c91708612524a78630df197d99b921fe408e2aed26c7fe3f6f9e4365830ce51R32], when in fact it was finalized in 2.2. So the test is choosing a valid version but the server doesn't agree.

There is a self-contained remediation in setting an override system property:
https://github.com/aholmberg/cassandra-dtest/pull/2
Trunk ci run with this tweak:
https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16354

We might also relax this restriction on 3.0 and 3.11:
https://github.com/aholmberg/cassandra/pull/30
https://github.com/aholmberg/cassandra/pull/31


[1] The DS drivers have a similar mechanism themselves, so I'm not sure what the genesis of this was.
[2] It's unclear why we do that instead of letting the driver negotiate, but that is beside the point.;;;","22/Dec/20 20:33;aholmber;[~dcapwell] I'm a little confused as to why this was split out from CASSANDRA-16352. Is it just because it points to a more generalized problem? I only see the one test failing in the linked CI run.;;;","05/Jan/21 15:29;samt;[~aholmber] the reasons for distinguishing between protocol v4 implementations in C* versions 2.1/2.2 and 3.0 are described in CASSANDRA-15193. The paging state serialization format changed between 2.2 and 3.0 but this isn't versioned in the native protocol, so mixed version clusters could become unstable if requests with a paging state obtained from one version were sent to a node with a different version (e.g. client gets the first page from a 3.0 node and requests the next page from a 2.2 node).

The server-side cap was introduced as clients are often not controlled by the server admins. Restricting the versions which the server will permit to be negotiated means that a rolling upgrade can be performed in such a way as to ensure that the serialization issues are not encountered (it's a PITA, but this makes it possible).

I added the override you mentioned to \{{batch_test.py}} (though I don't recall exactly why that was necessary), but I think the upgrade tests were either disabled or in a state of perpetual failure at that time, so I missed it there. I'd prefer to add the override in tests rather making the suggested changes on the server side, as the entire point of the capping is to make 2.x -> 3.x upgrades safe, which this would subvert.

By default though, there should be no cap enforced. Do you know why during the test the 3.0 node is capping at v3?;;;","05/Jan/21 16:41;aholmber;Thanks. I wasn't aware of (or forgot) that subtlety on paging state between 2.2 and 3.0.

bq. I'd prefer to add the override in tests rather making the suggested changes on the server side

Fine by me. I think the dtest patch I posted above does that independent of the server patches. I think we have some other tests failing on this so I'll see if the same is applicable there.

I'm still wondering why the dtests try to set an ""eager"" protocol rather than letting the driver negotiate.

bq. By default though, there should be no cap enforced. Do you know why during the test the 3.0 node is capping at v3?

Hmm. After seeing the limiting happening and noticing the override property, I assumed that it was limiting by default. I'll have to go see if something is setting that in the tests.;;;","05/Jan/21 18:37;aholmber;bq. By default though, there should be no cap enforced.

The way it's written presently, the default is to return a [{{DynamicLimit}}|https://github.com/apache/cassandra/blob/a2aa78d7f4997be515c8e3d9a9795dc88a21c5d7/src/java/org/apache/cassandra/transport/ConfiguredLimit.java#L45]. When initializing a 3.0 node in a cluster with 2.2 nodes, the max version is [lowered|https://github.com/apache/cassandra/blob/a2aa78d7f4997be515c8e3d9a9795dc88a21c5d7/src/java/org/apache/cassandra/transport/ConfiguredLimit.java#L106-L114].;;;","08/Jan/21 01:45;dcapwell;[~samt] mind being a reviewer for this as you have more context?

bq. I'd prefer to add the override in tests rather making the suggested changes on the server side, as the entire point of the capping is to make 2.x -> 3.x upgrades safe, which this would subvert.

If the flag is enough for the test +1 from me, but don't know if this is a good thing in general (hoping sam can approve that part =D).

Sam, if you are +1 to the dtest patch I can run ci/merge.;;;","08/Jan/21 09:51;samt;bq. The way it's written presently, the default is to return a DynamicLimit. When initializing a 3.0 node in a cluster with 2.2 nodes, the max version is lowered.

oh, right yes. I was overlooking the fact that these are *upgrade* tests :P

bq. mind being a reviewer for this as you have more context?

No probs, I'll give it a look today
;;;","08/Jan/21 10:02;samt;+1 on the dtest change (which I think we'll need to duplicate for the actual upgrade tests for CASSANDRA-16347);;;","08/Jan/21 17:46;dcapwell;merged, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix client push notifications in protocol v5,CASSANDRA-16353,13346170,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,samt,samt,15/Dec/20 18:00,19/Jan/21 14:37,13/Jul/23 08:39,19/Jan/21 14:37,4.0,4.0-rc1,,,,Messaging/Client,,,,0,protocolv5,,,The changes to native protocol v5 in CASSANDRA-15299 broke the delivery of push notifications from server to client. This wasn't caught earlier as there weren't any unit or dtests which would exercise client notifications in a beta protocol version. Working on CASSANDRA-14973 to bring v5 out of beta exposed the regression.,,blerer,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Clients,,,Tue Jan 19 14:37:13 UTC 2021,,,,,,,All,,,,,,"0|z0ljfc:",9223372036854775807,,,,blerer,,,,Normal,,4.0-beta4,,,https://github.com/apache/cassandra/commit/c9d22583d22d566807e76fa10c65af29104ae16c,,,,,,,,,Add test coverage of client notifications for all supported protocol versions.,,,,,"15/Dec/20 18:04;samt;||branch||Circle CI||Apache CI||
|[16353-trunk|https://github.com/beobal/cassandra/tree/16353-trunk]|[circle|https://app.circleci.com/pipelines/github/beobal/cassandra?branch=16353-trunk]|[ci-cassandra|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/265/]|
;;;","19/Jan/21 12:50;blerer;I just found a small nit otherwise the patch looks good to me. +1;;;","19/Jan/21 14:37;samt;Thanks, committed to trunk with the nit addressed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Improve compaction param ""provide_overlapping_tombstones"" handling",CASSANDRA-16350,13345844,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bhouser,marcuse,marcuse,14/Dec/20 12:28,16/Mar/22 15:39,13/Jul/23 08:39,13/Apr/21 08:56,3.11.11,4.0,4.0-rc1,,,Local/Compaction,,,,0,,,,"We currently have no cqlsh autocompletion for {{provide_overlapping_tombstones}}. We should also improve the validation for the parameter given as it is currently quite unhelpful:

{code}
cqlsh:x> create table z (id int primary key, x int) with compaction = {'class': 'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones':'xyz'};
NoHostAvailable:
{code}

and an exception in the logs;
{code}
ERROR [Native-Transport-Requests-1] 2020-12-14 13:25:46,575 QueryMessage.java:121 - Unexpected error during query
java.lang.IllegalArgumentException: No enum constant org.apache.cassandra.schema.CompactionParams.TombstoneOption.XYZ
        at java.lang.Enum.valueOf(Enum.java:238)
        at org.apache.cassandra.schema.CompactionParams$TombstoneOption.valueOf(CompactionParams.java:59)
        at org.apache.cassandra.schema.CompactionParams.create(CompactionParams.java:98)
        at org.apache.cassandra.schema.CompactionParams.fromMap(CompactionParams.java:255)
        at org.apache.cassandra.cql3.statements.schema.TableAttributes.build(TableAttributes.java:98)
        at org.apache.cassandra.cql3.statements.schema.TableAttributes.validate(TableAttributes.java:58)
        at org.apache.cassandra.cql3.statements.schema.CreateTableStatement.builder(CreateTableStatement.java:145)
        at org.apache.cassandra.cql3.statements.schema.CreateTableStatement.apply(CreateTableStatement.java:104)
        at org.apache.cassandra.schema.Schema.transform(Schema.java:587)
        at org.apache.cassandra.schema.MigrationManager.lambda$announce$2(MigrationManager.java:221)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)

{code}",,bhouser,brandon.williams,marcuse,paulo,,,,,,,,"bhouse99 opened a new pull request #962:
URL: https://github.com/apache/cassandra/pull/962


   CASSANDRA-16350: Adds autocomplete, errors for provide_overlapping_tombstones
   
   Adds autocomplete in CQLSH and error handling for provide_overlapping_tombstones for a better user experience.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Apr/21 20:50;githubbot;600","smiklosovic closed pull request #962:
URL: https://github.com/apache/cassandra/pull/962


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:39;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16333,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bhouser,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 13 08:56:17 UTC 2021,,,,,,,All,,,,,,"0|z0lhew:",9223372036854775807,,,,marcuse,,,,Low,,3.10,,,https://github.com/apache/cassandra/commit/7152d40bb372398bd40db1f649e8d644f90fbb44,,,,,,,,,"Added tests against CQL Completion, as well as Java unit test of error message (and success).

Ran full suite of tests for pylib via cassandra-cqlsh-tests.sh (though not all passed for the 3.11 branch as is), was able to compare before and after patch and avoided failures (as well as my own changes succeeding).",,,,,"24/Mar/21 18:31;bhouser;Still actively working on this, primarily looking to see if I can create a lightweight test to verify the autocomplete options.   Will update with more progress as I make it.;;;","07/Apr/21 06:22;bhouser;Ok fixed and added tests.  Going to attach a patch after handling some paperwork on my end.;;;","09/Apr/21 20:38;bhouser;Approval and paperwork completed on my end.   

Having done a bit of a check, the fix version isn't set, but the first of the branches that I can find
provide_overlapping_tombstones
Is in 3.11, so I will set that version, and setup my PR against that.;;;","12/Apr/21 20:51;bhouser;Created pull request
[https://github.com/apache/cassandra/pull/962]

 ;;;","12/Apr/21 20:54;bhouser; 
|CASSANDRA-16350: Adds autocomplete, errors for provide_overlapping_tombstones
 
Adds autocomplete in CQLSH and error handling for provide_overlapping_tombstones for a better user experience.

|;;;","13/Apr/21 08:33;marcuse;pushed a few tiny changes: https://github.com/krummas/cassandra/commit/c54693bf21bd97a6bb806aae4fbec4b23584d607

running tests here:
https://app.circleci.com/pipelines/github/krummas/cassandra?branch=bhouse99-16350-trunk
https://app.circleci.com/pipelines/github/krummas/cassandra?branch=bhouse99-16350-3.11

will get this committed once the tests finish;;;","13/Apr/21 08:56;marcuse;and committed, thanks for the patch!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSTableLoader reports error when SSTable(s) do not have data for some nodes,CASSANDRA-16349,13345838,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,serban,serban,serban,14/Dec/20 12:07,27/May/22 19:24,13/Jul/23 08:39,25/Feb/22 21:14,4.0.4,4.1,4.1-alpha1,,,Tool/sstable,,,,0,,,,"Running SSTableLoader in verbose mode will show error(s) if there are node(s) that do not own any data from the SSTable(s). This can happen in at least 2 cases:
 # SSTableLoader is used to stream backups while keeping the same token ranges
 # SSTable(s) are created with CQLSSTableWriter to match token ranges (this can bring better performance by using ZeroCopy streaming)

Partial output of the SSTableLoader:
{quote}ERROR 02:47:47,842 [Stream #fa8e73b0-3da5-11eb-9c47-c5d27ae8fe47] Remote peer /127.0.0.4:7000 failed stream session.

ERROR 02:47:47,842 [Stream #fa8e73b0-3da5-11eb-9c47-c5d27ae8fe47] Remote peer /127.0.0.3:7000 failed stream session.

progress: [/127.0.0.4:7000]0:0/1 100% [/127.0.0.3:7000]0:0/1 100% [/127.0.0.2:7000]0:7/7 100% [/127.0.0.1:7000]0:7/7 100% total: 100% 0.000KiB/s (avg: 1.611KiB/s)

progress: [/127.0.0.4:7000]0:0/1 100% [/127.0.0.3:7000]0:0/1 100% [/127.0.0.2:7000]0:7/7 100% [/127.0.0.1:7000]0:7/7 100% total: 100% 0.000KiB/s (avg: 1.611KiB/s)

progress: [/127.0.0.4:7000]0:0/1 100% [/127.0.0.3:7000]0:0/1 100% [/127.0.0.2:7000]0:7/7 100% [/127.0.0.1:7000]0:7/7 100% total: 100% 0.000KiB/s (avg: 1.515KiB/s)

progress: [/127.0.0.4:7000]0:0/1 100% [/127.0.0.3:7000]0:0/1 100% [/127.0.0.2:7000]0:7/7 100% [/127.0.0.1:7000]0:7/7 100% total: 100% 0.000KiB/s (avg: 1.427KiB/s)
{quote}
 

Stack trace:
{quote}java.util.concurrent.ExecutionException: org.apache.cassandra.streaming.StreamException: Stream failed

at com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:552)

at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:533)

at org.apache.cassandra.tools.BulkLoader.load(BulkLoader.java:99)

at org.apache.cassandra.tools.BulkLoader.main(BulkLoader.java:49)

Caused by: org.apache.cassandra.streaming.StreamException: Stream failed

at org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onFailure(StreamEventJMXNotifier.java:88)

at com.google.common.util.concurrent.Futures$CallbackListener.run(Futures.java:1056)

at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:30)

at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1138)

at com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:958)

at com.google.common.util.concurrent.AbstractFuture.setException(AbstractFuture.java:748)

at org.apache.cassandra.streaming.StreamResultFuture.maybeComplete(StreamResultFuture.java:220)

at org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamResultFuture.java:196)

at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java:505)

at org.apache.cassandra.streaming.StreamSession.complete(StreamSession.java:819)

at org.apache.cassandra.streaming.StreamSession.messageReceived(StreamSession.java:595)

at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:189)

at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)

at java.base/java.lang.Thread.run(Thread.java:844)
{quote}
To reproduce create a cluster with ccm with more nodes than the RF, put some data into it copy a SSTable and stream it.

 

The error originates on the nodes, the following stack trace is shown in the logs:
{quote}java.lang.IllegalStateException: Stream hasn't been read yet

        at com.google.common.base.Preconditions.checkState(Preconditions.java:507)

        at org.apache.cassandra.db.streaming.CassandraIncomingFile.getSize(CassandraIncomingFile.java:96)

        at org.apache.cassandra.streaming.StreamSession.receive(StreamSession.java:789)

        at org.apache.cassandra.streaming.StreamSession.messageReceived(StreamSession.java:587)

        at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:189)

        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)

        at java.base/java.lang.Thread.run(Thread.java:844)
{quote}
 

An error is thrown due to stream size being read before any data was received. The solution would be not to stream this at all; SSTableLoader.java already looks into each SSTable to determine what parts of it will map to each node token ranges. ",,ascott,blerer,brandon.williams,e.dimitrova,frankgh,Gerrrr,jasonstack,Jean005,maedhroz,marcuse,serban,"serban21 opened a new pull request #851:
URL: https://github.com/apache/cassandra/pull/851


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Dec/20 14:39;githubbot;600","Gerrrr opened a new pull request #151:
URL: https://github.com/apache/cassandra-dtest/pull/151


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jul/21 14:22;githubbot;600","smiklosovic closed pull request #851:
URL: https://github.com/apache/cassandra/pull/851


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17211,,,,,,,,,,,,,,,,,,,,,,,0.0,Gerrrr,serban,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Mar 01 04:41:21 UTC 2022,,,,,,,All,,,,,,"0|z0lhdk:",9223372036854775807,,,,Gerrrr,jasonstack,marcuse,,Low,,4.0.0,,,https://github.com/apache/cassandra/commit/193d4ef3a79305d9f19e26012c0cd79ea79d54fd and  https://github.com/apache/cassandra/commit/a8b67e3dd92e6ca1a66a1be9b2d86961224653f5 DTest: https://github.com/apache/cassandra-dtest/commit/ce91388e533f402f076f24844,,,,,,,,,Not needed,,,,,"14/Dec/20 14:41;serban;PR available at https://github.com/apache/cassandra/pull/851;;;","14/Dec/20 22:34;brandon.williams;Could you add a test to cover this scenario?;;;","14/Dec/20 23:13;serban;I'm not sure. SSTableLoaderTest seems to use a single node, and this scenario would require at least 2 running nodes. I guess that would need a lot of refactoring. ;;;","15/Dec/20 08:55;blerer;You should be able to test that with a new in-jvm dtest. They are under {{test/distributed}}.
;;;","17/Jul/21 16:07;Gerrrr;*Short version of the review*
 * The bug is reproducible in 4.0+
 * The fix for SSTableLoader LGTM as a way to avoid useless streaming tasks
 * I added a python dtest for the issue
 * We should also fix the way streaming handles empty SSTables after CASSANDRA-14115

*Code and CI*
||branch||CI||
|[dtest|https://github.com/apache/cassandra-dtest/pull/151]| |
|[4.0 (baseline)|https://github.com/gerrrr/cassandra/tree/cassandra-4.0-16349-dtest]|[j8|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/188/workflows/27d68d7c-3ae8-4dcd-869b-d8bbd47157a4] [j11|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/188/workflows/844e33c6-1327-439d-980f-0112cf958829]|
|[SSTableLoader fix|https://github.com/apache/cassandra/compare/trunk...Gerrrr:16349-sstableloader-fix-4.0?expand=1]|[j8|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/189/workflows/2a308aa6-6ff6-4294-842a-6e691831c59f] [j11|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/189/workflows/c9729460-f035-49ab-873d-14f0cf6e2cc5]|
|[Streaming fix|https://github.com/apache/cassandra/compare/trunk...Gerrrr:16349-streaming-fix-4.0?expand=1]|[j8|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/193/workflows/3d4d2069-0dd5-4b86-9510-d3d140ed49bf] [j11|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/193/workflows/0738e555-aa9a-4367-9c77-96ff957147c5]|
|[Streaming fix + SSTableLoader fix|https://github.com/apache/cassandra/compare/trunk...Gerrrr:16349-streaming-sstableloader-4.0?expand=1]|[j8|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/194/workflows/a07f3909-987c-4ccc-8625-9166f74a7000] [j11|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/194/workflows/524e0774-ddd3-4d0d-b2d7-6d55d673a773]|

*Long version of the review*

I was able to reproduce the bug following the steps in the issue description in {{cassandra-4.0}} and {{trunk}}. The issue does not reproduce in the earlier versions. Given no changes in the SSTableLoader between {{3.11}} and {{trunk}}, it got me curious if the fix should be on the streaming side instead.

AFAIU the failing assertion ([link|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/streaming/CassandraIncomingFile.java#L96]) was introduced in CASSANDRA-14115 as a sanity check that the file's size is not accessed before it has been read. However, this assertion might be incorrect as the default state for the size is -1, and the intention is to verify that the value has been updated.

As an experiment, I changed the assertion in {{getSize}} and re-ran the test. Streaming tasks started to crash in [StreamReceiveTask#receive|https://github.com/apache/cassandra/blob/9cc7a0025d8b0859d8e9c947f6fdffd8455dd141/src/java/org/apache/cassandra/streaming/StreamReceiveTask.java#L87] to due [no open SSTable writers|https://github.com/apache/cassandra/blob/9cc7a0025d8b0859d8e9c947f6fdffd8455dd141/src/java/org/apache/cassandra/io/sstable/format/RangeAwareSSTableWriter.java#L168-L171].

In my opinion, this is a bug as C* could handle streaming empty SSTables in prior versions, so I created a patch that handles empty streams without throwing exceptions. Even though it works without Serban's SSTableLoader fix, we should include it to prevent SSTableLoader from doing unnecessary work.;;;","21/Aug/21 00:25;ascott;We got the same error ""Stream failed"" and ""Stream hasn't been read yet"" on the node.  We were doing sstableloader of snapshots from a DC with RF=3 and 6 nodes to a DC with RF=2 on 3 nodes (there's plenty of space).  It looks like it occurs at the same place/time.

I  found the commit for the patch and applied it and still got the same error, so the error we have is caused by something else?  Just adding that info here.  Should I submit a bug?  I can replicate it here on our site but do not know what all is involved in replicating it in general.  We are on  Cassandra 4.0.0

 

 ;;;","07/Sep/21 13:52;Gerrrr;Hey [~ascott],

Can you please try to reproduce the error with the *Streaming fix* patch I linked above? If you still can reproduce it, it'd help if you can attach relevant stack traces from the failing nodes.;;;","26/Oct/21 09:32;Gerrrr;[~bdeggleston], [~marcuse] Do you have cycles to review? [Streaming fix + SSTableLoader fix|https://github.com/apache/cassandra/compare/trunk...Gerrrr:16349-streaming-sstableloader-4.0?expand=1] from the comment above is the patch I think we should merge.;;;","26/Oct/21 10:34;marcuse;nit; brace-on-newline: {{if (sstableSections.isEmpty()) {}}

lgtm, +1;;;","27/Oct/21 08:23;Gerrrr;Thank you for a quick review [~marcuse]! I fixed the nit. 

AFAIU, with one +1 from a committer, the correct status for this issue is {{NEEDS COMMITTER}}; I will change it accordingly.;;;","27/Oct/21 13:30;e.dimitrova;I just pushed [Jenkins CI run|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1248/]

I can review it tomorrow if [~bdeggleston] or someone else doesn't get to it until then.;;;","28/Oct/21 21:56;e.dimitrova;New [Jenkins run| https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1252/] as I pushed with wrong image yesterday, I am sorry about that.

 ;;;","02/Nov/21 23:20;e.dimitrova;There is something very wrong with this CI run. 70 failures on 4.0 where we are currently at 18. 

I saw many of them failed with host unavailable, I suspect our CI might have been in bad shape...

I will rebase and push again;;;","03/Nov/21 00:01;e.dimitrova;Ok, this is actually trunk, not the 4.0 branch and it is not rebased since July.;;;","03/Nov/21 00:38;e.dimitrova;I think we need to mark the dtests to be since 3.0. Even if 2.2 is out of support, we still have it in CI and there might be third parties who still support it.

I can confirm that the test passes with 3.0 and 3.11 locally. 

As apparently a release happened somewhere around this work, I will backport the patch to 4.0 branch too. Still don't have time for proper review so I will post whatever I have time for and leave it to NEEDS COMMITTER status in case someone has cycles before me.

[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16349-streaming-sstableloader-4.0] | [dtest|https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/new/CASSANDRA-16349] | [Jenkins CI |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1260/];;;","03/Nov/21 16:48;e.dimitrova;[4.0|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16349-v4.0] | [Jenkins CI run|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1261/];;;","03/Nov/21 18:11;Gerrrr;Thank you for the review and running the tests [~e.dimitrova]! Tomorrow I will mark the dtest to run only since 3.0, rebase the patch against latest trunk and backport it to 4.0.;;;","03/Nov/21 18:22;e.dimitrova;[~Gerrrr] I already rebased and backported prior submitting the tests. Please check the links in my previous comments;;;","04/Nov/21 19:15;Gerrrr;I've rebased the dtest and added {{@since(""3.0"")}} to it.;;;","05/Jan/22 07:26;Gerrrr;[~e.dimitrova] Do you have spare cycles to review this patch?;;;","17/Feb/22 09:00;Jean005;Hi, do we have any idea when this could be fixed? My project is really stuck as I cannot load all my data with Cassandra 4. Is there any workaround which could allow me to continue? Thanks.;;;","17/Feb/22 17:27;frankgh;Looks good to me, +1;;;","17/Feb/22 20:42;Gerrrr;I've rebased the patch and the dtest. [~blerer] can you please review?

Links:
 * [patch|https://github.com/apache/cassandra/compare/trunk...Gerrrr:16349-streaming-sstableloader-4.0?expand=1]
 * [dtest|https://github.com/apache/cassandra-dtest/pull/151];;;","18/Feb/22 20:42;e.dimitrova;[~blerer] is not available these days, I pinged in Slack [~jasonstack] to ask if he might have a bit of time to check it but we are in totally different time zones so I haven't received a response yet. I promise to follow up no this work next week;;;","20/Feb/22 12:09;jasonstack;The patch looks good to me, [~serban][~Gerrrr] thanks for the fix.

Side note: `SSTableMultiWriter#getFilePointer` looks problematic.  In `RangeAwareMultiWriter`, it refers to current writer's file position. But in memtable logging, it's used as written data size.  For now, the logging is still correct because `RangeAwareMultiWriter` is  not used during flush.;;;","20/Feb/22 12:10;jasonstack;[~e.dimitrova] do we need a second reviewer?;;;","21/Feb/22 14:23;e.dimitrova;Thanks [~jasonstack] 

If [~marcuse] hasn't changed his opinion as it's been a while I think we only need green CI.

I can push CI later today for 4.0 and trunk while waiting for [~marcuse] 's confirmation.

(Trunk is failing at the moment because of some weekend commit, issues already addressed. I will push CI when they are solved so we can get this clean) ;;;","22/Feb/22 16:39;e.dimitrova;Jenkins CI runs submitted:

[4.0|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1443/], [trunk|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1444/];;;","23/Feb/22 14:23;e.dimitrova;There are a bunch of errors, especially on trunk but mostly due to Jenkins running out of space from what I saw. Maintenance is happening at the moment to fix the issue. I will restart the runs when Jenkins is back on track.;;;","23/Feb/22 20:12;e.dimitrova;Jenkins is back.

New Jenkins CI runs submitted:

[4.0|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1446/], [trunk|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1447/];;;","24/Feb/22 20:09;e.dimitrova;CI was aborted and I don't know by whom and why. I will do another check and if it doesn't go well again, I will fire Circle tonight;;;","24/Feb/22 20:10;e.dimitrova;[4.0|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1452/] , [trunk|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1453/];;;","24/Feb/22 23:04;e.dimitrova;Jenkins Is struggling, I just submitted CircleCI runs here:

[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...ekaterinadimitrova2:16349-4.0?expand=1] - [j8| https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1402/workflows/74775282-9a69-48f7-ae57-0f473b7c47e1], [j11| https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1402/workflows/5a72ba30-b91a-480a-88c6-583091cdbf07]
[trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:16349-trunk?expand=1] - [j8| https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1403/workflows/ca03d0bb-1815-4eae-af11-5b1e73832931], [j11| https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1403/workflows/07019567-d242-46e1-8efc-70221ac6b81f];;;","25/Feb/22 15:56;e.dimitrova;All tests look fine to me except Java 11 dtests. I suspect infra issue as we have 22 tests failing with this issue:
{code:java}
OSError: [Errno 98] Address already in use{code}
Restarted the J11 dtests [with vnodes|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1403/workflows/07019567-d242-46e1-8efc-70221ac6b81f/jobs/9220] and [no vnodes|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1403/workflows/07019567-d242-46e1-8efc-70221ac6b81f/jobs/9221];;;","25/Feb/22 18:34;e.dimitrova;Tests finished successfully. (only one failure that has associated open ticket already). [~marcuse] confirmed his approval of the patch offline. Starting commit soon.;;;","25/Feb/22 21:13;e.dimitrova;DTest committed:

To https://github.com/apache/cassandra-dtest.git

   [8396b643..ce91388e  trunk -> trunk|https://github.com/apache/cassandra-dtest/commit/ce91388e533f402f076f2484406d41bda8680316]

4.0 and trunk committed:
To https://github.com/apache/cassandra.git
   22a4ae16e4..a8b67e3dd9  cassandra-4.0 -> cassandra-4.0
   12e2c159f8..e40f8163af  trunk -> trunk

 ;;;","27/Feb/22 14:16;jasonstack;[~e.dimitrova] thank you!;;;","28/Feb/22 17:00;e.dimitrova;The new DTest failed on trunk as I forgot to add post-CASSANDRA-15234 warning exclusion to the test.
Warning is emitted in trunk/4.1 because of CASSANDRA-15234. We exploit the backward compatibility
framework with DTests instead of changing config in all old tests.
Patch [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/5fee61656a495931a4a6bf984677981622b4e205]

I ran the test successfully with all branches locally.

[~marcuse] , do you mind to review it, please?;;;","28/Feb/22 17:13;brandon.williams;dtest looks good to me, +1.;;;","28/Feb/22 17:19;marcuse;+1;;;","28/Feb/22 20:22;e.dimitrova;Committed, thanks!

To https://github.com/apache/cassandra-dtest.git

   [ce91388e..d95e6bd6| https://github.com/apache/cassandra-dtest/commit/d95e6bd6ba6f028a9ca657e53f67ffb87d8f9470]  trunk -> trunk;;;","01/Mar/22 04:14;maedhroz;It looks like the new dtest fails on trunk, given it's not expecting the YAML option name change warning from CASSANDRA-15234?

https://ci-cassandra.apache.org/job/Cassandra-trunk/976/testReport/dtest-novnode.sstable_generation_loading_test/TestSSTableGenerationAndLoading/test_sstableloader_empty_stream;;;","01/Mar/22 04:41;e.dimitrova;I am on the phone now but it seems you point to the run from a few days ago which triggered Markus to ping me and I made the commit to fix it earlier today. The test shouldn’t be failing anymore. ;;;",,,,
Fix upgrade python dtest upgrade_tests/upgrade_through_versions_test.py,CASSANDRA-16347,13345704,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,12/Dec/20 21:12,08/Jan/21 17:52,13/Jul/23 08:39,08/Jan/21 17:52,NA,,,,,CI,Test/dtest/python,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/846/workflows/bee81d86-f720-4fc2-b3e7-7ed19ec3c9f0/jobs/4988/tests

upgrade_tests/upgrade_through_versions_test.py seems to have a set of tests which fail with the following

{code}
>           raise RuntimeError(message)
E           RuntimeError: A subprocess has terminated early. Subprocess statuses: Process-1 (is_alive: True), Process-2 (is_alive: False), attempting to terminate remaining subprocesses now.

upgrade_tests/upgrade_through_versions_test.py:418: RuntimeError
{code}

The tests found to be failing were:
test_rolling_upgrade_with_internode_ssl
test_rolling_upgrade",,aholmber,dcapwell,,,,,,,,,,"aholmberg opened a new pull request #110:
URL: https://github.com/apache/cassandra-dtest/pull/110


   CASSANDRA-16347


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Jan/21 20:46;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,CASSANDRA-16322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jan 08 17:52:44 UTC 2021,,,,,,,All,,,,,,"0|z0lgjs:",9223372036854775807,,,,dcapwell,,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/d75f7e9ad25ab147113a107d0373af1cfa9a4e81,,,,,,,,,"existing upgrade dtest
no doc",,,,,"23/Dec/20 21:37;aholmber;I have a suspicion that we may be hitting the false protocol limit described in CASSANDRA-16354. It's just obscured because the data writer/checker subprocesses are eating it.;;;","05/Jan/21 20:47;aholmber;It was indeed the same problem. As discussed in CASSANDRA-16354, the preferred solution is to work around this in the test by setting a system property.

[small patch|https://github.com/apache/cassandra-dtest/pull/110]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16347]

;;;","08/Jan/21 01:46;dcapwell;cool, ill wait for [~samt] to review the other one (as I don't know if it makes sense), if so can merge this after.

Thanks for all the work [~aholmber]!;;;","08/Jan/21 17:52;dcapwell;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix upgrade python dtest test_crc_check_chance_upgrade - upgrade_crc_check_chance_test.TestCrcCheckChanceUpgrade,CASSANDRA-16346,13345622,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,dcapwell,dcapwell,12/Dec/20 02:12,15/Dec/20 17:37,13/Jul/23 08:39,15/Dec/20 17:37,NA,,,,,CI,Test/dtest/python,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/846/workflows/bee81d86-f720-4fc2-b3e7-7ed19ec3c9f0/jobs/4988/tests

test_crc_check_chance_upgrade - upgrade_crc_check_chance_test.TestCrcCheckChanceUpgrade

{code}
>       self.verify_old_crc_check_chance(node1)

upgrade_crc_check_chance_test.py:58: 
{code}

{code}
self = <upgrade_crc_check_chance_test.TestCrcCheckChanceUpgrade object at 0x7f2d1d3b4be0>
node = <ccmlib.node.Node object at 0x7f2d1d335a90>

    def verify_old_crc_check_chance(self, node):
        session = self.patient_exclusive_cql_connection(node)
        session.cluster.refresh_schema_metadata(0)
        meta = session.cluster.metadata.keyspaces['ks'].tables['cf1']
>       logger.debug(meta.options['compression_parameters'])
E       NameError: name 'logger' is not defined

upgrade_crc_check_chance_test.py:107: NameError
{code}",,dcapwell,Gerrrr,,,,,,,,,,"Gerrrr opened a new pull request #107:
URL: https://github.com/apache/cassandra-dtest/pull/107


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Dec/20 16:31;githubbot;600","dcapwell merged pull request #107:
URL: https://github.com/apache/cassandra-dtest/pull/107


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 17:37;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,CASSANDRA-16322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Gerrrr,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Dec 15 17:35:21 UTC 2020,,,,,,,All,,,,,,"0|z0lg1k:",9223372036854775807,,,,dcapwell,,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/781dbbc8e247fa19f33de6dd32ab3f7c01d8cf29,,,,,,,,,{{upgrade_crc_check_chance_test.py}} missed logger creation. PR -  https://github.com/apache/cassandra-dtest/pull/107,,,,,"14/Dec/20 17:06;dcapwell;patch LGTM, will test/commit after I merge CASSANDRA-16328 (speeds up the tests);;;","15/Dec/20 17:35;dcapwell;Thanks for the patch, the code now compiles!  https://app.circleci.com/pipelines/github/dcapwell/cassandra/850/workflows/79486fdd-06d0-4d04-aa32-0fa648182356/jobs/5019/tests

Will merge.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replica failure causes timeout on multi-DC write,CASSANDRA-16334,13345504,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,paulo,paulo,11/Dec/20 11:49,27/May/22 19:25,13/Jul/23 08:39,26/Oct/21 17:33,3.0.26,3.11.12,4.0.2,4.1,4.1-alpha1,Consistency/Coordination,Messaging/Internode,,,0,,,,"Inserting a mutation larger than {{max_mutation_size_in_kb}} correctly throws a write error on a single DC keyspace with RF=3:
{noformat}
cassandra.WriteFailure: Error from server: code=1500 [Replica(s) failed to execute write] message=""Operation failed - received 0 responses and 3 failures: UNKNOWN from /127.0.0.3:7000, UNKNOWN from /127.0.0.2:7000, UNKNOWN from /127.0.0.1:7000"" info={'consistency': 'LOCAL_ONE', 'required_responses': 1, 'received_responses': 0, 'failures': 3}
{noformat}
The same insert wrongly causes a timeout on a keyspace with 2 dcs (RF=3 each):
{noformat}
cassandra.WriteTimeout: Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=""Operation timed out - received only 0 responses."" info={'consistency': 'LOCAL_ONE', 'required_responses': 1, 'received_responses': 0}
{noformat}
Reproduction steps:
{noformat}
# Setup cluster
ccm create -n 3:3 test
for i in {1..6}; do echo 'max_mutation_size_in_kb: 1000' >> ~/.ccm/test/node$i/conf/cassandra.yaml; done
ccm start

# Create schema
ccm node1 cqlsh
CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};
CREATE TABLE test.test (key int PRIMARY KEY, val blob);
exit;

# Insert data
python
from cassandra.cluster import Cluster
cluster = Cluster()
session = cluster.connect('test')
blob = f = open(""2mbBlob"", ""rb"").read().hex()
session.execute(""INSERT INTO test (key, val) VALUES (1, textAsBlob('"" + blob + ""'))"")
{noformat}
Reproduced in 3.0, 3.11, 4.0, trunk.",,adelapena,brandon.williams,e.dimitrova,Gerrrr,paulo,,,,,,,"adelapena commented on a change in pull request #165:
URL: https://github.com/apache/cassandra-dtest/pull/165#discussion_r728128453



##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])
+        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_exclusive_cql_connection(node1)
+
+        session.execute(""CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};"")
+        session.execute(""CREATE TABLE test.test (key int PRIMARY KEY, val blob);"")
+
+        payload = '1' * 1024 * 256
+        statement = SimpleStatement(""""""
+            INSERT INTO test.test (key, val) VALUES (1, textAsBlob('{}'))
+            """""".format(payload), consistency_level=consistency_level)
+
+        with pytest.raises(WriteFailure) as cm:

Review comment:
       Nit: we don't use the `as cm` part.

##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])

Review comment:
       Do we need 3+3 nodes? I think we could use less nodes here to save some resources

##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])
+        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_exclusive_cql_connection(node1)
+
+        session.execute(""CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};"")
+        session.execute(""CREATE TABLE test.test (key int PRIMARY KEY, val blob);"")
+
+        payload = '1' * 1024 * 256
+        statement = SimpleStatement(""""""
+            INSERT INTO test.test (key, val) VALUES (1, textAsBlob('{}'))
+            """""".format(payload), consistency_level=consistency_level)
+
+        with pytest.raises(WriteFailure) as cm:
+            session.execute(statement)
+
+    def test_oversized_mutation_local_one(self):
+        self._test_oversized_mutation(ConsistencyLevel.LOCAL_ONE)
+
+    def test_oversized_mutation_one(self):

Review comment:
       Having a test per consistency level is nice and clear, but maybe we could combine both tests to use a single cluster and so save some resources, for example [this way](https://github.com/adelapena/cassandra-dtest/commit/19fb3e719d208fa286fa80f86567ddd99628d18b). This and the reduction of nodes make the test 3-4 times faster, at least locally. wdyt? 

##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])
+        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_exclusive_cql_connection(node1)
+
+        session.execute(""CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};"")
+        session.execute(""CREATE TABLE test.test (key int PRIMARY KEY, val blob);"")
+
+        payload = '1' * 1024 * 256
+        statement = SimpleStatement(""""""
+            INSERT INTO test.test (key, val) VALUES (1, textAsBlob('{}'))
+            """""".format(payload), consistency_level=consistency_level)
+
+        with pytest.raises(WriteFailure) as cm:
+            session.execute(statement)

Review comment:
       We could also check that no hints have been created after the failed write, for example using metrics [this way](https://github.com/adelapena/cassandra-dtest/commit/897c2c39b74c73111009ed71204ac9d2c73424f5).




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/21 14:40;githubbot;600","Gerrrr commented on pull request #165:
URL: https://github.com/apache/cassandra-dtest/pull/165#issuecomment-942545701


   I like all your suggestions; cherry-picked them into the PR.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/21 17:22;githubbot;600","Gerrrr edited a comment on pull request #165:
URL: https://github.com/apache/cassandra-dtest/pull/165#issuecomment-942545701


   I like both suggestions; cherry-picked them into the PR.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/21 17:22;githubbot;600","adelapena commented on a change in pull request #165:
URL: https://github.com/apache/cassandra-dtest/pull/165#discussion_r728128453



##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])
+        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_exclusive_cql_connection(node1)
+
+        session.execute(""CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};"")
+        session.execute(""CREATE TABLE test.test (key int PRIMARY KEY, val blob);"")
+
+        payload = '1' * 1024 * 256
+        statement = SimpleStatement(""""""
+            INSERT INTO test.test (key, val) VALUES (1, textAsBlob('{}'))
+            """""".format(payload), consistency_level=consistency_level)
+
+        with pytest.raises(WriteFailure) as cm:

Review comment:
       Nit: we don't use the `as cm` part.

##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])

Review comment:
       Do we need 3+3 nodes? I think we could use less nodes here to save some resources

##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])
+        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_exclusive_cql_connection(node1)
+
+        session.execute(""CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};"")
+        session.execute(""CREATE TABLE test.test (key int PRIMARY KEY, val blob);"")
+
+        payload = '1' * 1024 * 256
+        statement = SimpleStatement(""""""
+            INSERT INTO test.test (key, val) VALUES (1, textAsBlob('{}'))
+            """""".format(payload), consistency_level=consistency_level)
+
+        with pytest.raises(WriteFailure) as cm:
+            session.execute(statement)
+
+    def test_oversized_mutation_local_one(self):
+        self._test_oversized_mutation(ConsistencyLevel.LOCAL_ONE)
+
+    def test_oversized_mutation_one(self):

Review comment:
       Having a test per consistency level is nice and clear, but maybe we could combine both tests to use a single cluster and so save some resources, for example [this way](https://github.com/adelapena/cassandra-dtest/commit/19fb3e719d208fa286fa80f86567ddd99628d18b). This and the reduction of nodes make the test 3-4 times faster, at least locally. wdyt? 

##########
File path: write_failures_test.py
##########
@@ -228,3 +229,46 @@ def test_thrift(self):
                           thrift_types.ConsistencyLevel.ALL)
 
         client.transport.close()
+
+
+@since('3.0')
+class TestMultiDCWriteFailures(Tester):
+    @pytest.fixture(autouse=True)
+    def fixture_add_additional_log_patterns(self, fixture_dtest_setup):
+        fixture_dtest_setup.ignore_log_patterns = (
+            ""is too large for the maximum size of"",  # 3.0+
+            ""Encountered an oversized mutation"",     # 4.0+
+            ""ERROR WRITE_FAILURE"",     # Logged in DEBUG mode for write failures
+            ""MigrationStage""           # This occurs sometimes due to node down (because of restart)
+        )
+
+    def _test_oversized_mutation(self, consistency_level):
+        """"""
+        Test that multi-DC write failures return operation failed rather than a timeout.
+        @jira_ticket CASSANDRA-16334.
+        """"""
+
+        cluster = self.cluster
+        cluster.populate([3, 3])
+        cluster.set_configuration_options(values={'max_mutation_size_in_kb': 128})
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_exclusive_cql_connection(node1)
+
+        session.execute(""CREATE KEYSPACE test WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 3, 'dc2': 3};"")
+        session.execute(""CREATE TABLE test.test (key int PRIMARY KEY, val blob);"")
+
+        payload = '1' * 1024 * 256
+        statement = SimpleStatement(""""""
+            INSERT INTO test.test (key, val) VALUES (1, textAsBlob('{}'))
+            """""".format(payload), consistency_level=consistency_level)
+
+        with pytest.raises(WriteFailure) as cm:
+            session.execute(statement)

Review comment:
       We could also check that no hints have been created after the failed write, for example using metrics [this way](https://github.com/adelapena/cassandra-dtest/commit/897c2c39b74c73111009ed71204ac9d2c73424f5).




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/21 18:47;githubbot;600","Gerrrr edited a comment on pull request #165:
URL: https://github.com/apache/cassandra-dtest/pull/165#issuecomment-942545701


   I like both suggestions; cherry-picked them into the PR.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/21 18:55;githubbot;600","Gerrrr commented on pull request #165:
URL: https://github.com/apache/cassandra-dtest/pull/165#issuecomment-942545701


   I like all your suggestions; cherry-picked them into the PR.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/21 19:00;githubbot;600","smiklosovic closed pull request #1259:
URL: https://github.com/apache/cassandra/pull/1259


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 16:49;githubbot;600","smiklosovic closed pull request #1261:
URL: https://github.com/apache/cassandra/pull/1261


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 16:50;githubbot;600","smiklosovic closed pull request #1260:
URL: https://github.com/apache/cassandra/pull/1260


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 16:58;githubbot;600","smiklosovic closed pull request #1262:
URL: https://github.com/apache/cassandra/pull/1262


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 17:08;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17043,,,,,,,,,,,,,,,,0.0,Gerrrr,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Oct 26 17:32:37 UTC 2021,,,,,,,All,,,,,,"0|z0lfbc:",9223372036854775807,,,,adelapena,paulo,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/7f54fe02298b90e6152acc026384c033a96ce621,,,,,,,,,Added a dtest that covers both bugs causing replica failures to appear as timeouts.,,,,,"06/Oct/21 17:30;Gerrrr;This bug happens in the [AbstractWriteResponseHandler#onFailure|https://github.com/apache/cassandra/blob/2e2db4dc40c4935305b9a2d5d271580e96dabe42/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java#L252-L265]:

{code}
    @Override
    public void onFailure(InetAddressAndPort from, RequestFailureReason failureReason)
    {
        logger.trace(""Got failure from {}"", from);

        int n = waitingFor(from)
                ? failuresUpdater.incrementAndGet(this)
                : failures;

        failureReasonByEndpoint.put(from, failureReason);

        if (blockFor() + n > candidateReplicaCount())
            signal();
    }
{code}

In the reproduction steps, {{INSERT INTO TEST}} uses CL {{LOCAL_ONE}}. Accordingly, [DatacenterWriteResponseHandler#waitingFor|https://github.com/apache/cassandra/blob/2e2db4dc40c4935305b9a2d5d271580e96dabe42/src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java#L59-L63] only waits for the local nodes:

{code}
private final Predicate<InetAddressAndPort> waitingFor = InOurDcTester.endpoints();
....
@Override
protected boolean waitingFor(InetAddressAndPort from)
{
    return waitingFor.test(from);
}
{code}

[AbstractWriteResponseHandler#candidateReplicaCount()|https://github.com/apache/cassandra/blob/2e2db4dc40c4935305b9a2d5d271580e96dabe42/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java#L205-L213] in the condition above, however, counts live and down replicas in ALL DCs as valid candidates:

{code}
protected int candidateReplicaCount()
{
    return replicaPlan.liveAndDown().size();
}
{code}


As a result, even after all local nodes respond with {{FAILURE_RSP}}, the coordinator waits for responses from nodes in other DCs... but never counts them in.


There is more! Following the timeout or request failure, the coordinator creates hints for the nodes in other DCs which it will try to deliver forever.;;;","09/Oct/21 12:08;Gerrrr;I have described the root cause in the previous comment. Two distinct bugs make replica failures appear as timeouts, one for DC- local and -global consistency levels. Fixing the latter also resolves the ""zombie-hint"" issue I described at the end of the previous message.

The reason replica failure appears as a timeout in DC-local consistency level is that {{AbstractWriteResponseHandler}} counts nodes in all DCs as potential candidates to wait for. The fix is to wait only for the DC-local nodes.

The second bug that is responsible both for the ""zombie-hints"" and the timeout issue with global consistency levels is related to forwarding replica failures to the correct address. This patch makes replicas send request failures to the original coordinator rather than the DC-local one that forwarded them the message. Besides, in 3.0 and 3.11, I also added missing respond-on-failure flag to the forwarded messages.

Patches:

* [dtest|https://github.com/apache/cassandra-dtest/pull/165]
* [3.0|https://github.com/apache/cassandra/pull/1259]
* [3.11|https://github.com/apache/cassandra/pull/1260]
* [4.0|https://github.com/apache/cassandra/pull/1261]
* [trunk|https://github.com/apache/cassandra/pull/1262]

[~paulo] Can you please start the CI?;;;","12/Oct/21 18:27;adelapena;[~Gerrrr] here are CircleCI runs for the patches:
||branch||CI||
|3.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/999/workflows/e3c6d75c-8c2c-4193-abea-7c1f582e27ee]|
|3.11|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/997/workflows/c6696afa-d529-4bb8-9fae-2880985417d1]|
|4.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/996/workflows/f37daddc-baec-48fa-8384-db5d15ae55b2] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/996/workflows/ec9dc32a-55d0-4032-a437-0a75d193ee99]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/998/workflows/16728796-0e1b-4991-b579-e45a9dd39715] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/998/workflows/31dd24b9-2428-4142-8925-38f68007483f]|

They include 100 repeated runs for the new dtests. These runs are failing but I think that's because of a problem with the Circle environment since they work locally. I'll take a look at this.;;;","13/Oct/21 11:29;adelapena;Ok, the repeated dtest runs are failing because the MID resources config for Circle is using medium runners, while it should use large runners. Indeed, the test passes as part of the regular dtest jobs because those jobs correctly use large runners. I'll open a ticket for fixing this. In the meantime, I have manually set the right resource class and the repeated runs pass, as it was expected:
||branch||CI||
|3.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1006/workflows/4c3774df-f49a-4e0b-b1a4-9e5bfee06087]|
|3.11|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1005/workflows/cd497fac-1348-4736-8b0d-fccb4dbaacbe]|
|4.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1007/workflows/c54bf75a-8005-4843-a432-40487f77b435] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1007/workflows/8814397a-d3fe-41ab-bdb5-fa10ca021494]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1004/workflows/0fc6f761-4eb1-4f88-a281-cccf0c79cb48] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1004/workflows/97e60123-d1af-46d6-9973-654f14f7eb21]|;;;","14/Oct/21 00:04;adelapena;It seems that the new dtest failures in the above CI runs for 3.0 and 3.11 are caused by a NPE [here|https://github.com/Gerrrr/cassandra/blob/0cfe205c012605affb06d5a53edcd594e6682c76/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java#L125], where the {{consistencyLevel}} can be {{null}} in the new check for DC local.;;;","16/Oct/21 15:30;Gerrrr;Thank you for the review and running the CI [~adelapena]! I added the non-null check in 3.0 and 3.11 branches. The same check is not necessary in 4.0 onward, because BatchlogManager no longer passes null as a configured CL level.;;;","18/Oct/21 16:06;adelapena;Great, there is CI for the last changes, rebased and with some repeated runs for the new dtest:

||branch||CI||
|3.0 |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1064/workflows/5c44e8b5-6ff1-4e1c-a623-75478837d44b]|
|3.11 |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1063/workflows/1dde4581-cd2c-4550-90c4-355b1855c62f]|
|4.0 |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1065/workflows/31306cc0-b030-4a4e-8c8b-d70b110521c8] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1065/workflows/3182ca80-1892-4f95-a0c4-4109b3a48653]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1066/workflows/2b484995-2716-4d34-91ce-b6cc22a1adbb] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1066/workflows/9f0129b1-3a36-44fe-aa77-1eedf4d6e496];;;","18/Oct/21 16:42;adelapena;Oh, I forgot to increase the resource class for the multiplexer (CASSANDRA-17043), here are the right runs:

||branch||CI||
|3.0  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1070/workflows/2306fd16-704b-4fdf-ad79-c5f518ec2c11]|
|3.11 |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1068/workflows/8773d6d4-b5e4-41c2-8287-676b479060d9]|
|4.0  |[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1069/workflows/0321dc65-0e8c-48ce-a0c6-2d3752f04ca1] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1069/workflows/2e2e8434-cd67-4594-994f-5ac8dc245064]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1067/workflows/00415ca5-2c59-4b74-9c3d-8593ab66804c] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1067/workflows/ba5ea2b7-db21-442e-b973-1a563a97ea72]|;;;","22/Oct/21 12:35;paulo;LGTM, nice work!;;;","22/Oct/21 12:47;paulo;Setting the state back to ""Needs Comitter"" since [~adelapena] did not +1 explicitly yet, so I'm unsure if he finished review.;;;","26/Oct/21 12:19;adelapena;Here is another round of CI after rebase, just in case:
||branch||CI||
|3.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1079/workflows/d6923796-59d4-49d9-b240-d14dd57aa46b]|
|3.11|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1076/workflows/7e5eb711-9ec5-4ea7-9c8e-56aae8b5caff]|
|4.0|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1078/workflows/42870d8b-58fc-46c1-9d5b-953f4bcc695d] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1078/workflows/4571c5af-8539-45b6-8d59-1595f682aa4b]|
|trunk|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1077/workflows/057382c9-5526-4e11-9bac-1f23b8f6e659] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1077/workflows/0db4af4e-8419-4d26-a860-f215c7d67c38]|

The changes look good to me, and I'd say that the many test failures above are not related. I'll commit the changes in a bit.;;;","26/Oct/21 17:32;adelapena;Committed to 3.0 as [7f54fe02298b90e6152acc026384c033a96ce621|https://github.com/apache/cassandra/commit/7f54fe02298b90e6152acc026384c033a96ce621] and merged to [3.11|https://github.com/apache/cassandra/commit/c76a939c3eb9aa68abd0b892ab09bcbf09157e10], [4.0|https://github.com/apache/cassandra/commit/530bc914cdf28c9c10eb53e3614b16cb9da0787b] and [trunk|https://github.com/apache/cassandra/commit/37830770d1e54703c4b30a67c259b50317e3d4e3].

Dtest committed as [7c89cade286fa122bf347f9b8660370e57afb5fa|https://github.com/apache/cassandra-dtest/commit/7c89cade286fa122bf347f9b8660370e57afb5fa].

Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix upgrade python dtest test_static_columns_with_2i - upgrade_tests.cql_tests.TestCQLNodes,CASSANDRA-16332,13345397,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,10/Dec/20 22:30,05/Jan/21 17:44,13/Jul/23 08:39,19/Dec/20 00:51,NA,,,,,CI,Test/dtest/python,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/843/workflows/9545f259-0a61-4ba8-8dea-485a33136032/jobs/4964

{code}
            # We don't support that
>           assert_invalid(cursor, ""SELECT s FROM test WHERE v = 1"")

upgrade_tests/cql_tests.py:4137: 
{code}

{code}
>           assert False, ""Expecting query to raise an exception, but nothing was raised.""
E           AssertionError: Expecting query to raise an exception, but nothing was raised.

tools/assertions.py:63: AssertionError
{code}",,aholmber,dcapwell,maedhroz,,,,,,,,,"aholmberg opened a new pull request #109:
URL: https://github.com/apache/cassandra-dtest/pull/109


   CASSANDRA-16332


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 20:07;githubbot;600","dcapwell commented on a change in pull request #109:
URL: https://github.com/apache/cassandra-dtest/pull/109#discussion_r546057894



##########
File path: upgrade_tests/cql_tests.py
##########
@@ -4122,6 +4122,7 @@ def test_static_columns_with_2i(self):
 
         cursor.execute(""CREATE INDEX ON test(v)"")
 
+        from_ver = float(self.UPGRADE_PATH.starting_meta.family)

Review comment:
       can't family contain stuff like `x`?  should we use LooseVersion like we do in other tests?
   
   checking...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 19:49;githubbot;600","dcapwell commented on a change in pull request #109:
URL: https://github.com/apache/cassandra-dtest/pull/109#discussion_r546062947



##########
File path: upgrade_tests/cql_tests.py
##########
@@ -4122,6 +4122,7 @@ def test_static_columns_with_2i(self):
 
         cursor.execute(""CREATE INDEX ON test(v)"")
 
+        from_ver = float(self.UPGRADE_PATH.starting_meta.family)

Review comment:
       just checked, the following are current family versions
   
   ```
   family='2.1'
   family='3.0'
   family='3.11'
   family='trunk'
   ```
   
   so the last one would break as trunk isn't a valid float.  
   
   What we can do is the following
   
   after `self.prepare` do
   
   ```
   initial_version = self.cluster.version()
   ```
   
   then change the if check to
   
   ```
   if initial_version  > LooseVersion('3.0'):
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 20:00;githubbot;600","aholmberg commented on a change in pull request #109:
URL: https://github.com/apache/cassandra-dtest/pull/109#discussion_r546074978



##########
File path: upgrade_tests/cql_tests.py
##########
@@ -4122,6 +4122,7 @@ def test_static_columns_with_2i(self):
 
         cursor.execute(""CREATE INDEX ON test(v)"")
 
+        from_ver = float(self.UPGRADE_PATH.starting_meta.family)

Review comment:
       I can try that out. I didn't know any upgrade tests start with trunk. Is that a thing?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/20 20:28;githubbot;600","aholmberg closed pull request #109:
URL: https://github.com/apache/cassandra-dtest/pull/109


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Dec/20 16:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,CASSANDRA-16322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Dec 19 00:47:14 UTC 2020,,,,,,,All,,,,,,"0|z0lens:",9223372036854775807,,,,dcapwell,maedhroz,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/c1a59823ef1595a3918e5b476b286f81672eb2cb,,,,,,,,,CI,,,,,"10/Dec/20 22:55;dcapwell;speaking to [~maedhroz] this is a test bug.  We used to block querying only the static columns, but did allow select *... so the test validated we fail those type of queries, which  CASSANDRA-14242 reverted that restriction.

Given this, we should just fix the test to validate we return the correct rows, and for any older version which now starts failing... I am good with letting them fail =D;;;","17/Dec/20 20:08;aholmber;Is [this|https://github.com/apache/cassandra-dtest/pull/109] all you had in mind, [~dcapwell]?;;;","18/Dec/20 02:48;dcapwell;Yep, that sounds about it! Mind running CI and putting the JIRA in the correct state?  [~maedhroz] mind reviewing as well?;;;","18/Dec/20 14:30;aholmber;I ran it and was surprised to see it failing on 3.0, which I thought had CASSANDRA-14242. Will need to look into that, unless someone tells me that is expected.;;;","18/Dec/20 16:49;aholmber;Spoke with Andres, who cleared up my confusion. He said this would not be expected to work in 3.0, so the results are not surprising. Here was the ci run:
https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16332

My only question would be to ask if we think adding a version conditional around this assertion would be worth it.;;;","18/Dec/20 18:48;dcapwell;I have mixed feelings on this: 1) build won't be green as we test 3.0 -> trunk, 2) 3.0 should be failing as it shouldn't be rejecting (select * works, but not select static?)...

I feel that letting it fail is best as its shows an issue with 3.0. That, or maybe add @since(3.11)?;;;","18/Dec/20 19:03;aholmber;I was just thinking of adding a conditional in code (not annotation) since it's a known limitation/different behavior in 3.0 that we have no intention of changing. Seems like it would be nice to avoid that noise.

-If you think @since is sufficient, I'm good with that too.-
-edit: I'm actually not sure how @since works on upgrade tests when there is both a ""from"" and a ""to"" version.-
Just ran it and it does what you would want.;;;","18/Dec/20 19:44;aholmber;branch is updated with conditional. CI running again.;;;","18/Dec/20 19:47;dcapwell;spoke with Adam in slack; dumping context.

We talked about two options: @since(3.11) and if > 3.0 do the check.  At the end of our chat I think we settled on if > 3.0 do the check, the reasons were the following:

* since(3.11) blocks the other asserts from happening, without an audit (CASSANDRA-16321 still pending) we do not know if there is coverage for this feature, so better to still keep those asserts
* if > 3.0 do check, else do old check - I don't like this as I don't think we should be asserting the old behavior as I *feel* it was incorrect, so prefer tests to show what we *should* do, not what we *do*
* if > 3.0 do check - this seems like the best comprise as it has the best of both above without the two negatives listed.;;;","18/Dec/20 21:48;dcapwell;+1 from me.;;;","18/Dec/20 22:31;maedhroz;{noformat}
if initial_version > LooseVersion('3.11'):  # See CASSANDRA-16332. This fails with a known limitation on versions before 3.11 (CASSANDRA-14242)
    assert_all(cursor, ""SELECT s FROM test WHERE v = 1"", [[42], [42]])
{noformat}

Do we have a way to check that the version is >= 3.11.7? That would give us the most coverage, I suppose. Otherwise, LGTM.;;;","18/Dec/20 22:34;dcapwell;yes, LooseVersion('3.11.7') should be enough;;;","18/Dec/20 22:41;dcapwell;I went to check that 3.11 was upgraded in the tests before running and I saw the following

{code}
indev_3_11_x = VersionMeta(name='indev_3_11_x', family='3.11', variant='indev', version='github:apache/cassandra-3.11', min_proto_v=3, max_proto_v=4, java_versions=(8,))
current_3_11_x = VersionMeta(name='current_3_11_x', family='3.11', variant='current', version='github:apache/cassandra-3.11', min_proto_v=3, max_proto_v=4, java_versions=(8,))
{code}

indev and current are the same... =(. ill fix this in the patch as well.;;;","18/Dec/20 22:43;dcapwell;https://github.com/dcapwell/cassandra-dtest/tree/review/CASSANDRA-16332. changed to 3.11.9;;;","18/Dec/20 22:45;dcapwell;kicked off a build here: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci%2Ftrunk;;;","19/Dec/20 00:47;dcapwell;CI looks great! 22 failures now https://app.circleci.com/pipelines/github/dcapwell/cassandra/856/workflows/e1f1542d-22b6-441d-946a-19724a0e7f06/jobs/5073/tests

all versions passed the tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix upgrade python dtest test_keys_index_3_x_created - upgrade_tests.thrift_upgrade_test.TestUpgradeTo40,CASSANDRA-16331,13345396,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,10/Dec/20 22:26,11/Feb/21 12:43,13/Jul/23 08:39,08/Jan/21 01:24,NA,,,,,CI,Test/dtest/python,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/843/workflows/9545f259-0a61-4ba8-8dea-485a33136032/jobs/4964

{code}
test setup failure
file /home/cassandra/cassandra-dtest/upgrade_tests/thrift_upgrade_test.py, line 454
      def test_keys_index_3_x_created(self, from_version):
E       fixture 'from_version' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, dtest_config, fixture_dtest_cluster_name, fixture_dtest_create_cluster_func, fixture_dtest_setup, fixture_dtest_setup_overrides, fixture_log_test_name_and_date, fixture_logging_setup, fixture_maybe_skip_tests_requiring_novnodes, fixture_ported_to_in_jvm, fixture_since, fixture_skip_version, install_debugging_signal_handler, log_global_env_facts, monkeypatch, pytestconfig, record_property, record_xml_attribute, record_xml_property, recwarn, set_dtest_setup_on_function, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/cassandra/cassandra-dtest/upgrade_tests/thrift_upgrade_test.py:454
{code}",,aholmber,dcapwell,,,,,,,,,,"smiklosovic closed pull request #844:
URL: https://github.com/apache/cassandra/pull/844


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 12:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,CASSANDRA-16322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jan 08 01:24:11 UTC 2021,,,,,,,All,,,,,,"0|z0lenk:",9223372036854775807,,,,dcapwell,,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/b6ca1c75d233872a13d519a03d2e3ab6a321e20e,,,,,,,,,run existing ci,,,,,"05/Jan/21 22:29;aholmber;I think this was just an internal test method, pytest was finding the {{test_}} prefix and trying to run it as a test, treating the parameter as a fixture.

[patch|https://github.com/aholmberg/cassandra-dtest/pull/4/files]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16331];;;","08/Jan/21 00:51;dcapwell;+1;;;","08/Jan/21 01:24;dcapwell;committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
python upgrade tests include tests which are not impacted by the version under test,CASSANDRA-16328,13345358,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,10/Dec/20 18:34,21/Dec/20 08:52,13/Jul/23 08:39,14/Dec/20 18:22,4.0,4.0-beta4,,,,CI,Test/dtest/python,,,0,,,,"When we try to run the upgrade tests for trunk, we get tests such as upgrade_tests.cql_tests.TestCQLNodes2RF1_Upgrade_indev_2_2_x_To_indev_3_0_x to run, which do not include the trunk source.  Since these tests are costly and can be flaky, running the unneeded tests for a release increases the cost and can make it harder to see if any new failures.

See https://app.circleci.com/pipelines/github/dcapwell/cassandra/841/workflows/bcadf6e6-8d04-4010-8a47-99f7f9b5ac1d/jobs/4949/tests",,dcapwell,marcuse,mck,,,,,,,,,"dcapwell opened a new pull request #106:
URL: https://github.com/apache/cassandra-dtest/pull/106


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Dec/20 21:01;githubbot;600","dcapwell commented on a change in pull request #106:
URL: https://github.com/apache/cassandra-dtest/pull/106#discussion_r540495172



##########
File path: run_dtests.py
##########
@@ -104,6 +104,13 @@ def run(self, argv):
             logging.root.setLevel(logging.DEBUG)
             logger.setLevel(logging.DEBUG)
 
+            # cause logger to go to stdout

Review comment:
       while debugging I found that the logging logic here gets ignored, so added this so debugging actually works.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Dec/20 21:04;githubbot;600","dcapwell commented on a change in pull request #106:
URL: https://github.com/apache/cassandra-dtest/pull/106#discussion_r540495172



##########
File path: run_dtests.py
##########
@@ -104,6 +104,13 @@ def run(self, argv):
             logging.root.setLevel(logging.DEBUG)
             logger.setLevel(logging.DEBUG)
 
+            # cause logger to go to stdout

Review comment:
       while debugging I found that the logging logic here gets ignored, so added this so debugging actually works; its unrelated to this patch.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Dec/20 21:04;githubbot;600","dcapwell merged pull request #106:
URL: https://github.com/apache/cassandra-dtest/pull/106


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Dec/20 18:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,CASSANDRA-15588,,,,,,CASSANDRA-16329,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,mck,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Dec 14 18:35:26 UTC 2020,,,,,,,All,,,,,,"0|z0lef4:",9223372036854775807,,,,marcuse,mck,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/9dcd035ff6894bd135cce4fd2460ab72269ab970,,,,,,,,,CI,,,,,"10/Dec/20 20:46;dcapwell;Testing this out, current state

{code}
$ wc -l tests-only-no-static.txt
4447 tests-only-no-static.txt
{code}

With my current prototype

{code}
$ wc -l tests-only-no-static.txt
737 tests-only-no-static.txt
{code}

current issue I am trying to track down, why 3.0 -> trunk is getting filtered...

{code}
$ grep _trunk tests-only-no-static.txt  | grep -v 3_11
$
{code}

the issue isn't related to my patch as the current logic filters them...;;;","10/Dec/20 21:23;dcapwell;This patch also updates circle CI to no longer call RUN_STATIC_UPGRADE_MATRIX, as this actually had us test committed code, rather than the patched code (removing it will use the version provided when its ""family"" matches).;;;","10/Dec/20 21:39;dcapwell;The patch gets the tests to run within 22m 19s;;;","10/Dec/20 21:44;dcapwell;There are 8 tests failing!!!  I plan to tackle those in their own issues under CASSANDRA-15588;;;","11/Dec/20 11:34;mck;bq. … RUN_STATIC_UPGRADE_MATRIX … 

What is the purpose of this variable?
When would we want/need to use it?

If we have no use for it, can we just remove it altogether?


----

Here's the patch for the same in ci-cassandra.a.o in-sync 
 - cassandra-builds patch: https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/16328
 - example CI run: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest-upgrade/9/ 

When I look through the tests run I only see *indev_3_11_x_To_indev_trunk* tests. I would have thought we should be including all *indev_3_0_x_To_indev_trunk* as well?;;;","11/Dec/20 14:03;marcuse;bq. When I look through the tests run I only see indev_3_11_x_To_indev_trunk tests. I would have thought we should be including all indev_3_0_x_To_indev_trunk as well?

looks like we don't specify indev_3_0_x to trunk:

https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_manifest.py#L154

I'm +1 if adding indev_trunk there makes 3.0 -> trunk tests run;;;","11/Dec/20 19:39;dcapwell;{noformat}
… RUN_STATIC_UPGRADE_MATRIX … 
What is the purpose of this variable?
When would we want/need to use it?
{noformat}

Here is all the references I see

{code}
$ grep -r --exclude '*.pyc' RUN_STATIC_UPGRADE_MATRIX *
dtest.py:RUN_STATIC_UPGRADE_MATRIX = os.environ.get('RUN_STATIC_UPGRADE_MATRIX', '').lower() in ('yes', 'true')
upgrade_tests/paging_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, run_scenarios, MAJOR_VERSION_4
upgrade_tests/paging_test.py:        upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or spec['UPGRADE_PATH'].upgrade_meta.matches_current_env_version_family
upgrade_tests/thrift_upgrade_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, Tester
upgrade_tests/thrift_upgrade_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or spec['UPGRADE_PATH'].upgrade_meta.matches_current_env_version_family
upgrade_tests/upgrade_through_versions_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, Tester
upgrade_tests/upgrade_through_versions_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or version_metas[-1].matches_current_env_version_family
upgrade_tests/upgrade_through_versions_test.py:        if not RUN_STATIC_UPGRADE_MATRIX:
upgrade_tests/cql_tests.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, MAJOR_VERSION_4
upgrade_tests/cql_tests.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or spec['UPGRADE_PATH'].upgrade_meta.matches_current_env_version_family
upgrade_tests/regression_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX
upgrade_tests/regression_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or path.upgrade_meta.matches_current_env_version_family
upgrade_tests/upgrade_manifest.py:from dtest import RUN_STATIC_UPGRADE_MATRIX
upgrade_tests/upgrade_manifest.py:            if not (RUN_STATIC_UPGRADE_MATRIX or OVERRIDE_MANIFEST):
upgrade_tests/upgrade_udtfix_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, Tester
upgrade_tests/upgrade_udtfix_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or start_family_applies
{code}

For upgrade_tests/upgrade_manifest.py, its used as follows

{code}
        if not (RUN_STATIC_UPGRADE_MATRIX or OVERRIDE_MANIFEST):
                if destination_meta.matches_current_env_version_family:
                    # looks like this test should actually run in the current env, so let's set the final version to match the env exactly
                    oldmeta = destination_meta
                    newmeta = destination_meta.clone_with_local_env_version()
                    logger.debug(""{} appears applicable to current env. Overriding final test version from {} to {}"".format(path_name, oldmeta.version, newmeta.version))
                    destination_meta = newmeta
{code}

This is what I was talked about when saying only committed code gets tested, if RUN_STATIC_UPGRADE_MATRIX isn't defined (or is false) then we replace the destination (why not origin?) with the version provided to cassandra_dir if their ""family"" matches.  The other usages look to be used for filtering, so if RUN_STATIC_UPGRADE_MATRIX is defined, or the test version matches the cassandra_dir version then run.

I am not sure why it is this way, or why origin was excluded (changes to 3.11 will not be tested against trunk upgrades until committed).


bq. When I look through the tests run I only see indev_3_11_x_To_indev_trunk tests. I would have thought we should be including all indev_3_0_x_To_indev_trunk as well?

bq. looks like we don't specify indev_3_0_x to trunk:

I filed CASSANDRA-16329 to look closer into this. Marcus you are correct that 3.0 branch excludes trunk, but 3.0 release includes it (https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_manifest.py#L155)... yet 3.0 release isn't in the test output!

I was hoping to punt that issue into the other JIRA as I see that logging never triggers, and stdout debugging also doesn't show to screen, so root causing might take a bit more time.

bq. Here's the patch for the same in ci-cassandra.a.o in-sync

Thanks, was planning to file after review was happy with the change, ill update the links to include yours!;;;","11/Dec/20 19:44;dcapwell;According to git, the env variable was added in

{code}
Author: Russ Hatch <rhatch@datastax.com>
Date:   Fri Jul 22 11:06:41 2016 -0600

    default to env-relevant upgrade tests (#1095)
{code}

Comment would imply https://github.com/apache/cassandra-dtest/pull/1095 but that does not exist, so not sure if I can track down the context of this commit.

[~rhatch], do you remember and able to comment?;;;","11/Dec/20 21:24;dcapwell;Ok, I found out the root cause why 3.0 was missing

1) Marcus was right
2) python is dynamic and a small typo will break you... silently... =D
3) no option allowed 3.0 release -> trunk AND 3.0 branch -> trunk

With a change to fix both issues, and updating CI with a new flag, we now get

{code}
$ wc -l tests-only-no-static.txt
    1850 tests-only-no-static.txt
$ grep current_3_0_x_To_indev_trunk tests-only-no-static.txt | head -n 2
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_current_3_0_x_To_indev_trunk::test_static_cf
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_current_3_0_x_To_indev_trunk::test_large_collection_errors
$ grep indev_3_0_x_To_indev_trunk tests-only-no-static.txt | head -n 2
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_indev_3_0_x_To_indev_trunk::test_static_cf
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_indev_3_0_x_To_indev_trunk::test_large_collection_errors
{code};;;","11/Dec/20 23:13;mck;Solid write up [~dcapwell], immensely helpful to have all that written down.  ;;;","12/Dec/20 02:18;dcapwell;I have classified and bucketed the failing tests and opened a ticket for each test as a child of CASSANDRA-16322.  After upgrading the 3.0 version to .23 the amount of tests failing are ~30, but given the nature of the tests most are the same failure repeated over the different permutations.;;;","12/Dec/20 16:36;mck;+1 on the patches. 

It would be nice to remove {{RUN_STATIC_UPGRADE_MATRIX}}, which seems unneeded complexity and confusion. But it should probably be a separate ticket, and good to take some patience to find when/where its original use was.

cassandra-builds patch updated with {{`--upgrade-version-selection all`}} flag.
New ci-cassandra.a.o run at: https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest-upgrade/11/;;;","12/Dec/20 21:13;dcapwell;bq. But it should probably be a separate ticket, and good to take some patience to find when/where its original use was.

Agree, CASSANDRA-16348;;;","12/Dec/20 21:14;dcapwell;Glad to see jenkins and circle ci are similar with the changes, ~30 tests each.;;;","14/Dec/20 10:22;marcuse;+1;;;","14/Dec/20 17:03;dcapwell;Thanks for the review, will commit to C*, C*-dtest, and C*-builds today.

[~mck] my plan is dtest -> c* -> c*-builds; this make sense to you?;;;","14/Dec/20 17:45;mck;bq. my plan is dtest -> c* -> c*-builds; this make sense to you?

👍 

;;;","14/Dec/20 18:35;dcapwell;committed to all repos;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Circle CI python upgrade test build includes non-upgrade tests,CASSANDRA-16323,13345150,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,09/Dec/20 22:15,03/Jan/21 16:58,13/Jul/23 08:39,10/Dec/20 21:51,4.0,4.0-beta4,,,,CI,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/841/workflows/bcadf6e6-8d04-4010-8a47-99f7f9b5ac1d/jobs/4949/parallel-runs/23?filterBy=ALL

Jenkins uses the following for finding tests

{code}
export RUN_STATIC_UPGRADE_MATRIX=true
./run_dtests.py \
    --execute-upgrade-tests-only \
    --dtest-print-tests-only \
    --dtest-print-tests-output=${WORKSPACE}/test_list.txt \
    --cassandra-dir=$CASSANDRA_DIR
{code}

Where as circle ci uses

{code}
export RUN_STATIC_UPGRADE_MATRIX=true
./run_dtests.py \
    --execute-upgrade-tests \
    --dtest-print-tests-only \
    --dtest-print-tests-output=/tmp/all_dtest_tests_j8_upgradetests_without_vnodes_raw \
    --cassandra-dir=../cassandra
{code}

The difference here is that —execute-upgrade-tests-only will block non-upgrade tests, where —execute-upgrade-tests will include upgrade tests; for this reason non-upgrade tests are scheduled as part of the build.

Tests such as the following were found in the allow list: 
transient_replication_test.py::TestTransientReplicationSpeculativeQueries::test_custom_speculate
ttl_test.py::TestTTL::test_collection_set_ttl
auth_test.py::TestAuth::test_alter_ks_auth

many more were found",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15588,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Dec 10 21:02:11 UTC 2020,,,,,,,All,,,,,,"0|z0ld4w:",9223372036854775807,,,,brandon.williams,,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/ab9fcd7d105d199efb1cb9db3f5702b5ba0461cd,,,,,,,,,ci,,,,,"10/Dec/20 21:02;brandon.williams;LGTM, +1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memtable heap size is severely underestimated,CASSANDRA-16318,13345020,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,blambov,blambov,09/Dec/20 09:04,25/Feb/21 10:25,13/Jul/23 08:39,19/Jan/21 19:24,4.0,4.0-rc1,,,,Local/Memtable,,,,0,,,,"We seem to be estimating the size of the on-heap memtable metadata to be around half of what it actually is. For example, during a [read benchmark which writes 1 million single-long rows|https://github.com/blambov/cassandra/blob/memtable-heap/test/microbench/org/apache/cassandra/test/microbench/instance/ReadTestSmallPartitions.java] the memtable reports
{code}
1000000 ops, 58.174MiB serialized bytes, 385.284MiB (19%) on heap, 0.000KiB (0%) off-heap
{code}
while a heap dump taken at this point:
 !image-2020-12-09-10-57-21-994.png! 
lists an usage of about 666MB altogether.

Switching to {{offheap_objects}}, the reported numbers are
{code}
1000000 ops, 58.174MiB serialized bytes, 233.650MiB (12%) on heap, 53.406MiB (3%) off-heap
{code}
while actual heap usage:
 !image-2020-12-09-11-01-31-273.png! 
is about 442MB.

Looking at the code we definitely are not counting the {{AtomicBTreePartition.Holder}}, {{EncodingStats}}, liveness and deletion info objects associated with each partition, and most probably others.",,blambov,blerer,brandon.williams,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Dec/20 08:57;blambov;image-2020-12-09-10-57-21-994.png;https://issues.apache.org/jira/secure/attachment/13016755/image-2020-12-09-10-57-21-994.png","09/Dec/20 09:01;blambov;image-2020-12-09-11-01-31-273.png;https://issues.apache.org/jira/secure/attachment/13016754/image-2020-12-09-11-01-31-273.png",,,,,,,,,,,,,2.0,barnie,e.dimitrova,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jan 19 19:22:33 UTC 2021,,,,,,,All,,,,,,"0|z0lcc8:",9223372036854775807,,,,barnie,blerer,,,Normal,,4.0-beta4,,,https://github.com/apache/cassandra/commit/661f1aab171dc3ef16075f69581e88ad4a133fae,,,,,,,,,https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/545/workflows/f797bf58-b572-4d8c-831e-a61936d23624,,,,,"09/Dec/20 09:29;blambov;An easier way to get the actual usage is {{jmap -histo:live <pid>}}, e.g.
{code:java}
$ jmap -histo:live 10472

 num     #instances         #bytes  class name
----------------------------------------------
   1:       3000190      144009120  java.nio.HeapByteBuffer
   2:       2005596       48476360  [Ljava.lang.Object;
   3:       1000014       40000560  org.apache.cassandra.db.rows.BufferCell
   4:       1000012       32000384  org.apache.cassandra.db.rows.EncodingStats
   5:       1000002       32000064  org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder
   6:       1000002       32000064  org.apache.cassandra.db.rows.BTreeRow
   7:       1000001       32000032  org.apache.cassandra.db.partitions.AtomicBTreePartition
   8:          1597       25789448  [B
   9:       1000015       24008944  [Ljava.nio.ByteBuffer;
  10:       1000066       24001584  java.util.concurrent.ConcurrentSkipListMap$Node
  11:       1000010       24000240  org.apache.cassandra.dht.Murmur3Partitioner$LongToken
  12:       1000009       24000216  org.apache.cassandra.db.BufferDecoratedKey
  13:       1000002       24000048  org.apache.cassandra.db.LivenessInfo
  14:       1000000       24000000  org.apache.cassandra.db.BufferClustering
  15:        500098       12002352  java.util.concurrent.ConcurrentSkipListMap$Index
...{code};;;","14/Dec/20 20:48;blambov;This fix should not be applied to versions earlier than 4.0, because it will drastically change the flushing behaviour and may cause significant differences in performance.;;;","22/Dec/20 00:51;e.dimitrova;Patch [here |https://github.com/ekaterinadimitrova2/cassandra/pull/80]

CI run:  [Java 8  |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/545/workflows/f797bf58-b572-4d8c-831e-a61936d23624] and  [Java 11 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/545/workflows/6dbe4bca-b51d-473e-bfc4-1bbf6c4ff26d]

From the preliminary test I pushed looks like the issue was solved. I will check/publish full report of the microbench tests when I am back to the office on the 4th January. Pushed the patch here in case Branimir or anyone else wants to look at it in the meanwhile. 

 ;;;","04/Jan/21 20:05;e.dimitrova;Results from the [original test|https://github.com/blambov/cassandra/blob/memtable-heap/test/microbench/org/apache/cassandra/test/microbench/instance/ReadTestSmallPartitions.java], fixed reads:

Offheap_objects: 

 
{code:java}
 287.056MiB (16%) on-heap, 53.406MiB (3%) off-heap Writing Memtable-table_01@1665900061(58.174MiB serialized bytes, 1000000 ops, 16%/3% of on/off-heap limit), flushed range = (null, null]{code}
 

 Around 320mb actual size: 
{code:java}
num     #instances         #bytes  class name
----------------------------------------------
   1:       2006251       48510800  [Ljava.lang.Object;
   2:       1000012       32000384  org.apache.cassandra.db.rows.EncodingStats
   3:       1000002       32000064  org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder
   4:       1000002       32000064  org.apache.cassandra.db.rows.BTreeRow
   5:       1000001       32000032  org.apache.cassandra.db.partitions.AtomicBTreePartition
   6:       1000066       24001584  java.util.concurrent.ConcurrentSkipListMap$Node
   7:       1000014       24000336  org.apache.cassandra.db.rows.NativeCell
   8:       1000004       24000096  org.apache.cassandra.dht.Murmur3Partitioner$LongToken
   9:       1000002       24000048  org.apache.cassandra.db.LivenessInfo
  10:       1000001       24000024  org.apache.cassandra.db.NativeClustering
  11:       1000001       24000024  org.apache.cassandra.db.NativeDecoratedKey
  12:        500094       12002256  java.util.concurrent.ConcurrentSkipListMap$Index
{code}
 

 

 

 ;;;","16/Jan/21 18:23;e.dimitrova;Thank you [~blerer] and [~barnie] for your valuable input and feedback and thank you [~barnie] for adding an additional test, I believe now we are as close as possible to the reality. Unfortunately, [ColumnMetadata Is unmetered|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/ColumnMetadata.java#L39]
 The final(I hope?) version of the patch is available [here |https://github.com/ekaterinadimitrova2/cassandra/pull/80/commits/4f47d2bbd8cf5cca92cb147de09a4fd8ccb3be47]
 [Jenkins run|https://ci-cassandra.apache.org/job/Cassandra-devbranch/298/] shows one failure which seems as a not-related typo.

CircleCI shows no new failures.
 Java 8: There are a few in-jvm tests failures which are already investigated in another ticket and one which failed because of lack of resources.
 [Java 8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/586/workflows/41888c0c-54ba-4db3-860f-05e5a6aee884] [Java 11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/586/workflows/9f901b57-67d0-46d1-9392-8f59341474fc];;;","18/Jan/21 09:01;blerer;{quote}Unfortunately, ColumnMetadata Is unmetered{quote}

This is normal as {{ColumnMetadata}} instances are shared. They are always retrieved from the {{TableMetadata}}.

+1 for the patch. ;;;","19/Jan/21 17:28;e.dimitrova;Thank you [~blerer]

May I ask you or [~barnie] to commit it? He approved the GitHub pull request. I believe we have 3 +1s here but I can't commit neither in GitHub, nor in GitBox (INFRA ticket raised). Thank you in advance!;;;","19/Jan/21 19:22;e.dimitrova;The committer issue is solved. Patch committed [here|https://github.com/apache/cassandra/commit/661f1aab171dc3ef16075f69581e88ad4a133fae] with ninja fix of CHANGES.txt [here|https://github.com/apache/cassandra/commit/7214794e3f86b67d96371c78815c1ce03b3a5d6bhttps://github.com/apache/cassandra/commit/7214794e3f86b67d96371c78815c1ce03b3a5d6b]

Thank you all!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend the exclusion of replica filtering protection to other indices instead of just SASI,CASSANDRA-16311,13344050,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,stefan.miklosovic,stefan.miklosovic,stefan.miklosovic,03/Dec/20 16:09,21/Dec/20 08:53,13/Jul/23 08:39,11/Dec/20 18:40,3.0.24,3.11.10,4.0,4.0-beta4,,Feature/2i Index,Feature/SASI,,,1,,,,"There was a check introduced in CASSANDRA-8272 telling if an index is a SASI index and if it is, replica filtering protection was not triggered.

There might be other custom index implementations which also do not support filtering protection and they do not have to be SASI indices neccessarily, however it is not possible to exclude them.

 

PR trunk

[https://github.com/apache/cassandra/pull/844]

PR 3.11

[https://github.com/apache/cassandra/pull/847]

PR 3.0

https://github.com/apache/cassandra/pull/848

 ",,adelapena,blerer,jasonstack,maedhroz,stefan.miklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-8272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,stefan.miklosovic,,,,,,,,,,,,,,,,,,,,Semantic,Normal,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Dec 11 18:39:28 UTC 2020,,,,,,,All,,,,,,"0|z0l6d4:",9223372036854775807,,,,adelapena,jasonstack,,,,,3.0.21,,,https://github.com/apache/cassandra/commit/fa77676daa8e9726fd6ca96bb081cd288a21c200,,,,,,,,,Existing index tests should continue working.,,,,,"08/Dec/20 16:56;adelapena;[~maedhroz] [~jasonstack] I think we should include this in 4.0 as a bug fix for compatibility, wdyt? ;;;","08/Dec/20 17:21;maedhroz;[~adelapena] It was a simple oversight. We should definitely fix it for 4.0.;;;","08/Dec/20 18:23;adelapena;Agree. I'm including 3.0 and 3.11 as fix versions since they also include CASSANDRA-8272, probably the patch will be identical for the three branches. I haven't been able to change the ticket type from task to bug.;;;","08/Dec/20 18:29;stefan.miklosovic;I am sorry, me as author neither.;;;","08/Dec/20 19:19;brandon.williams;Sorry for the noise, but it definitely can't be changed, even as a project admin, in any state.;;;","08/Dec/20 19:48;adelapena;[~brandon.williams] thanks for trying.

[~jasonstack] will you have cycles to act as second reviewer?;;;","09/Dec/20 12:02;blerer;To go from {{Improvement}} to {{bug}}: {{More}} -> {{Move}} ;;;","09/Dec/20 12:45;adelapena;Thank you [~blerer];;;","10/Dec/20 02:10;jasonstack;the change looks good to me.;;;","10/Dec/20 12:42;adelapena;It looks good to me too. [~stefan.miklosovic] could you please provide PRs for 3.0 and 3.11 branches? These also include SRP.;;;","10/Dec/20 18:34;stefan.miklosovic;PRs for other branches added. I am running Jenkins tests.;;;","11/Dec/20 10:09;stefan.miklosovic;trunk Jenkins run https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/252/;;;","11/Dec/20 12:27;adelapena;[~stefan.miklosovic] thanks. I'm running a final CI round here:
||branch||utest||python-dtest||java-dtest||
|3.0|[129|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/129/]|[279|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/279/]|[124|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/124/]|
|3.11|[130|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/130/]|[280|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/280/]|[125|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/125/]|
|trunk|[131|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/131/]|[281|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/281/]|[126|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/126/]|

If it's ok with you I'll add the following to the JavaDoc of the new method during commit:
{code:java}
Replica filtering protection might need to run the query row filter in the coordinator to detect stale results. An index implementation will be compatible with this protection mechanism if it returns the same results for the row filter as CQL will return with {@code ALLOW FILTERING} and without using the index. This means that index implementations using custom query syntax or applying transformations to the indexed data won't support it.
See CASSANDRA-8272 for further details.
{code}
 ;;;","11/Dec/20 14:37;stefan.miklosovic;Please proceed. Thanks.;;;","11/Dec/20 18:39;adelapena;The tests failures above don't seem related to the changes.

Committed to {{cassandra-3.0}} as [fa77676daa8e9726fd6ca96bb081cd288a21c200|https://github.com/apache/cassandra/commit/fa77676daa8e9726fd6ca96bb081cd288a21c200] and merged up to [{{cassandra-3.11}}|https://github.com/apache/cassandra/commit/ae8981236ae06a5053775b7f55c8aeb77f8b9318] and [{{trunk}}|https://github.com/apache/cassandra/commit/8e61e216a67304482f4373fb8b53012a25404026].

Thanks for the patch and the review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GROUP BY queries with paging can return deleted data,CASSANDRA-16307,13343356,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,adelapena,adelapena,30/Nov/20 16:57,25/Feb/21 10:10,13/Jul/23 08:39,15/Feb/21 11:56,3.11.11,4.0,4.0-rc1,,,Consistency/Coordination,,,,1,,,,"{{GROUP BY}} queries using paging and CL>ONE/LOCAL_ONE. This dtest reproduces the problem:
{code:java}
try (Cluster cluster = init(Cluster.create(2)))
{
    cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (pk int, ck int, PRIMARY KEY (pk, ck))""));
    ICoordinator coordinator = cluster.coordinator(1);
    coordinator.execute(withKeyspace(""INSERT INTO %s.t (pk, ck) VALUES (0, 0)""), ConsistencyLevel.ALL);
    coordinator.execute(withKeyspace(""INSERT INTO %s.t (pk, ck) VALUES (1, 1)""), ConsistencyLevel.ALL);
    
    cluster.get(1).executeInternal(withKeyspace(""DELETE FROM %s.t WHERE pk=0 AND ck=0""));
    cluster.get(2).executeInternal(withKeyspace(""DELETE FROM %s.t WHERE pk=1 AND ck=1""));
    String query = withKeyspace(""SELECT * FROM %s.t GROUP BY pk"");
    Iterator<Object[]> rows = coordinator.executeWithPaging(query, ConsistencyLevel.ALL, 1);
    assertRows(Iterators.toArray(rows, Object[].class));
}
{code}
Using a 2-node cluster and RF=2, the test inserts two partitions in both nodes. Then it locally deletes each row in a separate node, so each node sees a different partition alive, but reconciliation should produce no alive partitions. However, a {{GROUP BY}} query using a page size of 1 wrongly returns one of the rows.

This has been detected during CASSANDRA-16180, and it is probably related to CASSANDRA-15459, which solved a similar problem for group-by queries with limit, instead of paging.",,adelapena,amorton,blerer,dcapwell,e.dimitrova,ifesdjeen,maedhroz,mck,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16427,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15459,,,,CASSANDRA-16180,,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Feb 15 11:56:33 UTC 2021,,,,,,,All,,,,,,"0|z0l22w:",9223372036854775807,,,,blerer,samt,,,Normal,,3.10,,,https://github.com/apache/cassandra/commit/7cddbd40ce6b326df533fd6d3c4131ef70b3b068,,,,,,,,,Tests included. Harry tests are under way.,,,,,"30/Nov/20 23:58;dcapwell;Any idea if this impacts 3.x as well?;;;","01/Dec/20 00:39;adelapena;[~dcapwell] Yes, it affects 3.11 and trunk, but not 3.0 because it doesn't have group-by queries.;;;","11/Jan/21 08:06;blerer;[~adelapena], [~maedhroz] I let my backlog grow to big. I will unassign myself from this ticket. I anybody has some available cycles he can feel free to pick it up.;;;","02/Feb/21 16:25;ifesdjeen;Good news: this is just an artifact of faulty pager in in-jvm dtests.

|[trunk patch|https://github.com/apache/cassandra/pull/884]|[CI|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=16307-trunk]|;;;","02/Feb/21 20:10;mck;ci-cassandra runs for [jvm-dtest|https://ci-cassandra.apache.org/job/Cassandra-devbranch-jvm-dtest/207/] and [jvm-dtest-upgrade|https://ci-cassandra.apache.org/job/Cassandra-devbranch-jvm-dtest-upgrade/205/]. (No idea if the latter was needed.);;;","02/Feb/21 20:42;adelapena;That's a nice finding! However I think that it only solves some of the problems with paging and {{GROUP BY}}. The test above was an attempt to simplify [the original tests|https://github.com/apache/cassandra/blob/16075ed5c7429b3dd30d1e894b20e3598b8b9a10/test/distributed/org/apache/cassandra/distributed/test/ShortReadProtectionTest.java#L301-L347] in CASSANDRA-16180 where we found the problem. I'm afraid that a test more faithful to the original still fails:
{code:java}
try (Cluster cluster = init(Cluster.create(2)))
{
    cluster.schemaChange(withKeyspace(""CREATE TABLE %s.t (pk int, ck int, PRIMARY KEY (pk, ck))""));

    cluster.get(1).executeInternal(withKeyspace(""INSERT INTO %s.t (pk, ck) VALUES (1, 1) USING TIMESTAMP 0""));
    cluster.get(1).executeInternal(withKeyspace(""DELETE FROM %s.t WHERE pk=0 AND ck=0""));
    cluster.get(1).executeInternal(withKeyspace(""INSERT INTO %s.t (pk, ck) VALUES (2, 2) USING TIMESTAMP 0""));

    cluster.get(2).executeInternal(withKeyspace(""DELETE FROM %s.t WHERE pk=1 AND ck=1""));
    cluster.get(2).executeInternal(withKeyspace(""INSERT INTO %s.t (pk, ck) VALUES (0, 0) USING TIMESTAMP 0""));
    cluster.get(2).executeInternal(withKeyspace(""DELETE FROM %s.t WHERE pk=2 AND ck=2""));

    String query = withKeyspace(""SELECT * FROM %s.t GROUP BY pk"");
    Iterator<Object[]> rows = cluster.coordinator(1).executeWithPaging(query, ConsistencyLevel.ALL, 1);
    assertRows(Iterators.toArray(rows, Object[].class));
}
{code}
Apparently this can also be reproduced with a Python dtest, suggesting that the problem is not only caused by in-jvm dtests:
{code:python}
cluster = self.cluster
cluster.populate(2).start()
node1, node2 = cluster.nodelist()

session = self.patient_exclusive_cql_connection(node1, consistency_level=ConsistencyLevel.ONE)
create_ks(session, 'ks', 2)
session.execute('CREATE TABLE ks.t (pk int, ck int, PRIMARY KEY (pk, ck))')

node2.stop()
session.execute('INSERT INTO ks.t (pk, ck) VALUES (1, 1) USING TIMESTAMP 0')
session.execute('DELETE FROM ks.t WHERE pk=0 AND ck=0')
session.execute('INSERT INTO ks.t (pk, ck) VALUES (2, 2) USING TIMESTAMP 0')
node2.start()

node1.stop()
session = self.patient_exclusive_cql_connection(node2, consistency_level=ConsistencyLevel.ONE)
session.execute('DELETE FROM ks.t WHERE pk=1 AND ck=1')
session.execute('INSERT INTO ks.t (pk, ck) VALUES (0, 0) USING TIMESTAMP 0')
session.execute('DELETE FROM ks.t WHERE pk=2 AND ck=2')
node1.start()

session = self.patient_exclusive_cql_connection(node1, consistency_level=ConsistencyLevel.ALL)
session.default_fetch_size = 1
assert_none(session, 'SELECT * FROM ks.t GROUP BY pk')
{code};;;","02/Feb/21 21:54;ifesdjeen;[~adelapena] thanks for elaborating. This looks like a separate problem. I'll open a separate jira for one of the bugs. I'm sure that testing/fixing the new problem will be much easier now when paging is working. ;;;","03/Feb/21 20:05;maedhroz;Just started to take a look at the trunk patch, but before I get too far, I see a failure for [CompactStorageUpgradeTest#compactStoragePagingTest |https://app.circleci.com/pipelines/github/ifesdjeen/cassandra/148/workflows/c586d0ab-7fa0-4c13-a6d1-c927bb55342a/jobs/3153] that looks new (and might be related, given it touches paging).;;;","04/Feb/21 18:13;adelapena;I've just confirmed that {{CompactStorageUpgradeTest#compactStoragePagingTest}} consistently fails with the patch, and it works by reverting it.;;;","04/Feb/21 18:48;ifesdjeen;[~maedhroz][~adelapena] I've fixed the test right away, just didn't expect the patch is going to get attention right away, and was focusing on fixing the real group by/paging/srp bug. The test failure in compact storage upgrade test is just a conseqeunce of the test not complying to {{Iterator}} interface and not calling {{hasNext}} before calling {{next}}. 

That said, I'm pretty close to the fix of the actual issue, just running some more Harry tests to verify the fix. It is caused by the fact that for group by, we're increasing data limit counters only after the next row was seen, which is why SRP thinks there's no need to try to fetch more contents.

UPD: I'll move the in-jvm dtest paging problem to a [CASSANDRA-16427], and will put [~maedhroz] and [~adelapena] as reviewers there. Thank you!;;;","08/Feb/21 08:34;ifesdjeen;The problem here turned out to be that the Group By pager incorrectly interacts with SRP. 

In short, we have multiple implementations of paging counters: one is regular CQL one and, the other is Group By. CQL one is counting rows as it sees them. Group By is counting rows its going to return (in other words, groups) only when it encounters the next group (or partition/data end).

The problem is that when issuing SRP, we rely on correctness of these counters. And if counter says that iterator couldn’t give enough data to exhaust limits, we’re not going to ask for more data. In case of regular counters it all works as expected, but with group by counters, we’ll say that we have seen 1 row less every time, and won’t issue SRP. In other words, if one of the nodes holds a row followed by the tombstone, current behaviour will prevent SRP from getting triggered and tombstone from being visible, since group will be unfinished, and it doesn’t make sense to ask the node for more data since it couldn’t even satisfy the current data limit.

A straightforward solution to this would have been to just start counting groups as we’re encountering them. However, here the problem is that if we say that we have a group as soon as we see the first row that belongs to it, internal pager will think that there’s no need to continue, since data limits are satisfied.

The patch is introducing a distinction between {{needsMoreContents}} (better name pending) and {{isDone}}. This allows us to know we need to fetch more rows in case we haven’t seen either end of data, or next row. I think we can even start counting groups right away instead of delaying counting till we see the next group to (potentially) simplify the logic, however I wanted to leave a larger refactoring to a separate patch.

|[trunk|https://github.com/apache/cassandra/compare/trunk...ifesdjeen:16307-trunk]|[CI|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=16307-trunk]|
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...ifesdjeen:16307-3.11]|[CI|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=16307-3.11]|;;;","08/Feb/21 12:35;samt;Looks good to me, assuming that you're planning to include the logic inversion patch on the 3.11 branch too. One minor nit is the naming of the new methods. They feel slightly off because counters/limits don't have content, so maybe a better options could be:

{{maybeUnderCounted / maybeUnderCountedForPartition}} or {{maybeShort / maybeShortForPartition}} ?;;;","11/Feb/21 13:18;ifesdjeen;[~samt] I've tried out a slightly different approach, suggested by [~blerer], which is to use {{command.isExhausted}}. Since it has a logic that checks whether or not the counter is exhausted (in other words, we've reached _either_ row limit, or group limit), it works for this case. Works for rows, since we count them as we see, and works for groups since we'll only count the group as soon as iterator is closed or we encounter the next group. One of the advantages of using this approach is that we will avoid an extra page request for cases when group limit coincides with row limit. Would you be able to take another look?;;;","12/Feb/21 08:24;blerer;The patches look good to me.  ;;;","12/Feb/21 15:07;samt;+1 LGTM too.;;;","15/Feb/21 11:56;ifesdjeen;Thank you for the review! 

Committed to 3.11 with [f258ae67516d53752c8d1f0a2576d72471ed427f|https://github.com/apache/cassandra/commit/f258ae67516d53752c8d1f0a2576d72471ed427f] and merged up to [trunk|https://github.com/apache/cassandra/commit/7cddbd40ce6b326df533fd6d3c4131ef70b3b068].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException: com.googlecode.concurrenttrees.radix.node.NodeFactory,CASSANDRA-16303,13342886,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,adriancole,adriancole,27/Nov/20 01:11,05/Apr/21 17:34,13/Jul/23 08:39,02/Jan/21 09:49,4.0,4.0-rc1,,,,Dependencies,,,,0,,,,"	If you look at the pom for cassandra-all 4.0.0-beta-3, you'll notice that concurrent-trees is in dependencyManagement, but not dependencies. This might be going unnoticed as sasi is disabled by default now, but it can lead to a ClassNotFoundException. I presume this was accidental",,dcapwell,eribeiro,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jan/21 09:19;mck;cassandra-all-4.0-beta5-SNAPSHOT.pom;https://issues.apache.org/jira/secure/attachment/13018003/cassandra-all-4.0-beta5-SNAPSHOT.pom","01/Jan/21 09:20;mck;cassandra-parent-4.0-beta5-SNAPSHOT.pom;https://issues.apache.org/jira/secure/attachment/13018010/cassandra-parent-4.0-beta5-SNAPSHOT.pom",,,,,,,,,,,,,2.0,mck,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,,Mon Apr 05 17:34:26 UTC 2021,,,,,,,All,,,,,,"0|z0kz6o:",9223372036854775807,,,,adriancole,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/401e933b7395892bf0356f88308f64b94be84601,,,,,,,,,manual,,,,,"01/Dec/20 21:36;dcapwell;marking as 4.0 beta to make sure its loaded properly fore the release.;;;","02/Dec/20 14:42;mck;git bisect shows e8b8a90336dfd7d8b3fe06d06fe6970ab3be5fa1 was the last commit to have it, and [4881d9c308ccd6b5ca70925bf6ebedb70e7705fc|https://github.com/apache/cassandra/commit/4881d9c308ccd6b5ca70925bf6ebedb70e7705fc#diff-766797f233c18114f9499750cf1ffbf3829aeea50283850619c01bd173132021L639] removed the dependency from the all-pom.

This looks to have happened because it was originally incorrectly [added|https://github.com/apache/cassandra/commit/72790dc8e34826b39ac696b03025ae6b7b6beb2b#diff-766797f233c18114f9499750cf1ffbf3829aeea50283850619c01bd173132021R572] in the thrift-pom.;;;","30/Dec/20 18:10;mck;Patch at https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_16303

We have no tests on this unfortunately, so any testing and verification [~adriancole] would be most welcome in the review process.;;;","01/Jan/21 01:29;adriancole;I spent some time fruitlessly trying to get something published to maven remote or local. Jitpack doesn't work as I guess it doesn't support maven builds. I tried locally, using JDK 1.8, and end up with this, which I've not the patience to figure out at the moment.

```
± |detached:remotes/origin/mck/trunk_16303 ✓| → ant mvn-install
--snip--
1) org.apache.maven:apache-maven:pom:3.0.3
  Path to dependency: 
  	1) org.apache.maven:super-pom:pom:2.0
  	2) org.apache.maven:apache-maven:pom:3.0.3
```

If you publish this commit to a remote maven repository, or have a command handy to wipe out this error, I'll try to get things going on verifying!;;;","01/Jan/21 09:14;mck;[~adriancole], looks like you are hitting CASSANDRA-16359. 
If you use the suggested settings.xml you should be then able to do {{`ant mvn-install`}}


I've also attached the two pom files from my {{`ant mvn-install`}};;;","01/Jan/21 11:28;adriancole;thanks, mick. I had moved my settings.xml out of the way to test something else :)

:shipit: I tested manually and with sasi enabled, no longer need the maven overrides.
;;;","02/Jan/21 09:49;mck;Committed as [401e933b7395892bf0356f88308f64b94be84601|https://github.com/apache/cassandra/commit/401e933b7395892bf0356f88308f64b94be84601].;;;","05/Apr/21 14:51;eribeiro;[~mck] Thanks for catching this and fixing it. Please, do you know when 4.0-rc1 will be available on Maven's central repo? ;;;","05/Apr/21 14:55;mck;We are hoping by the end of this week (note that the vote takes 3 days).;;;","05/Apr/21 17:34;eribeiro;Awesome! Thanks for the quick reply. :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HintsWriteThenReadTest & LongStreamingTest flaky,CASSANDRA-16302,13342553,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,25/Nov/20 08:34,30/Nov/20 12:26,13/Jul/23 08:39,30/Nov/20 11:18,4.0,,,,,Test/unit,,,,0,,,,"Flaky tests for the last [100%|https://ci-cassandra.apache.org/job/Cassandra-trunk/167/#showFailuresLink] runs",,bereng,blerer,,,,,,,,,,"bereng opened a new pull request #832:
URL: https://github.com/apache/cassandra/pull/832


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Nov/20 08:36;githubbot;600","bereng commented on pull request #832:
URL: https://github.com/apache/cassandra/pull/832#issuecomment-733553892


   At some point we switched to Array backed clusterings while the test was expecting ByteBuffers.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Nov/20 08:37;githubbot;600","bereng commented on pull request #832:
URL: https://github.com/apache/cassandra/pull/832#issuecomment-733631595


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/185/workflows/a9caeda6-e418-4207-9f7d-da1687a697c2)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/185/workflows/de503497-b4cb-47b7-943c-9f4c97011a71)
   
   The test that have been fixed only run on utetsts_long phase but including both full CI runs for completion.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Nov/20 10:53;githubbot;600","blerer commented on a change in pull request #832:
URL: https://github.com/apache/cassandra/pull/832#discussion_r531028541



##########
File path: src/java/org/apache/cassandra/db/commitlog/AbstractCommitLogSegmentManager.java
##########
@@ -506,7 +506,8 @@ public void awaitTermination() throws InterruptedException
         for (CommitLogSegment segment : activeSegments)
             segment.close();
 
-        bufferPool.emptyBufferPool();
+        if (bufferPool != null)
+            bufferPool.emptyBufferPool();

Review comment:
       I have not checked if `org.apache.cassandra.streaming.LongStreamingTest` also fail in 3.11 but we should probably backport that fix anyway.

##########
File path: test/long/org/apache/cassandra/hints/HintsWriteThenReadTest.java
##########
@@ -129,10 +130,10 @@ private void verifyHints(File directory, HintsDescriptor descriptor)
 
                     Row row = mutation.getPartitionUpdates().iterator().next().iterator().next();
                     assertEquals(1, Iterables.size(row.cells()));
-                    assertEquals(bytes(index), row.clustering().get(0));
+                    assertTrue(Arrays.equals(bytes(index).array(), (byte[]) row.clustering().get(0)));

Review comment:
       This test was broken by the changes in CASSANDRA-15393 which introduced the `ArrayClustering` type .
   If for some reason we switch to another Clustering that use ByteBuffers the test will fail again.
   Should we not use  something like:
   
   ```
   assertEquals(bytes(index), toByteBuffer(row.clustering().get(0)));
   ...
   private ByteBuffer toByteBuffer(Object obj)
   {
       if (obj instanceof ByteBuffer)
          return (ByteBuffer) obj;
   
       return ByteBuffer.wrap((byte[]) obj);
   }
   ```
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Nov/20 13:56;githubbot;600","bereng commented on a change in pull request #832:
URL: https://github.com/apache/cassandra/pull/832#discussion_r531386174



##########
File path: test/long/org/apache/cassandra/hints/HintsWriteThenReadTest.java
##########
@@ -129,10 +130,10 @@ private void verifyHints(File directory, HintsDescriptor descriptor)
 
                     Row row = mutation.getPartitionUpdates().iterator().next().iterator().next();
                     assertEquals(1, Iterables.size(row.cells()));
-                    assertEquals(bytes(index), row.clustering().get(0));
+                    assertTrue(Arrays.equals(bytes(index).array(), (byte[]) row.clustering().get(0)));

Review comment:
       sgtm +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Nov/20 05:13;githubbot;600","bereng commented on a change in pull request #832:
URL: https://github.com/apache/cassandra/pull/832#discussion_r531386600



##########
File path: src/java/org/apache/cassandra/db/commitlog/AbstractCommitLogSegmentManager.java
##########
@@ -506,7 +506,8 @@ public void awaitTermination() throws InterruptedException
         for (CommitLogSegment segment : activeSegments)
             segment.close();
 
-        bufferPool.emptyBufferPool();
+        if (bufferPool != null)
+            bufferPool.emptyBufferPool();

Review comment:
       Doesn't fail there, but I can indeed add it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Nov/20 05:15;githubbot;600","bereng opened a new pull request #839:
URL: https://github.com/apache/cassandra/pull/839


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Nov/20 05:32;githubbot;600","bereng commented on pull request #839:
URL: https://github.com/apache/cassandra/pull/839#issuecomment-734667709


   [CI](https://app.circleci.com/pipelines/github/bereng/cassandra?branch=CASSANDRA-16302-3.11)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Nov/20 06:25;githubbot;600","bereng commented on pull request #832:
URL: https://github.com/apache/cassandra/pull/832#issuecomment-734673766


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/186/workflows/a9fadaae-b6bc-4ffb-8220-fadf91cf52dd)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/186/workflows/bb13466d-cee2-4f86-8783-891e4e4a2d90)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Nov/20 06:44;githubbot;600","blerer closed pull request #832:
URL: https://github.com/apache/cassandra/pull/832


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Nov/20 11:15;githubbot;600","blerer commented on pull request #832:
URL: https://github.com/apache/cassandra/pull/832#issuecomment-735722476


   Committed manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Nov/20 11:15;githubbot;600","blerer closed pull request #839:
URL: https://github.com/apache/cassandra/pull/839


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Nov/20 11:15;githubbot;600","blerer commented on pull request #839:
URL: https://github.com/apache/cassandra/pull/839#issuecomment-735722697


   Committed manually


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Nov/20 11:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7200,,,0,7200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16299,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Nov 30 11:18:37 UTC 2020,,,,,,,All,,,,,,"0|z0kx54:",9223372036854775807,,,,blerer,,,,Normal,,4.0-beta3,,,https://github.com/apache/cassandra/commit/a7f50c9a693453d548bd464943fb0a3a620e9607,,,,,,,,,See PR,,,,,"30/Nov/20 11:18;blerer;Committed into 3.11 as a7f50c9a693453d548bd464943fb0a3a620e9607 and merged into trunk. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
upgrade from C* 3.11.9 to 4.0-beta3 fails if 3.11.9 is configured with OldNetworkTopologyStrategy,CASSANDRA-16301,13342502,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,blerer,zagol,zagol,25/Nov/20 03:08,03/Jan/21 16:58,13/Jul/23 08:39,26/Nov/20 13:08,4.0,4.0-beta4,,,,,,,,0,,,,"When we upgrade Cassandra from 3.11.9 to 4.0-beta3, if the old cluster (3.11.9) is configured with OldNetworkTopologyStrategy, 4.0-beta3 Cassandra fails to start with the following exception: 

 
{code:java}
ERROR [main] 2020-11-24 22:49:33,423 CassandraDaemon.java:278 - Error while loading schema:
org.apache.cassandra.exceptions.ConfigurationException: Unable to find replication strategy class 'org.apache.cassandra.locator.OldNetworkTopologyStrategy'
        at org.apache.cassandra.utils.FBUtilities.classForName(FBUtilities.java:720)
        at org.apache.cassandra.locator.AbstractReplicationStrategy.getClass(AbstractReplicationStrategy.java:422)
        at org.apache.cassandra.schema.ReplicationParams.fromMapWithDefaults(ReplicationParams.java:90)
        at org.apache.cassandra.schema.ReplicationParams.fromMap(ReplicationParams.java:82)
        at org.apache.cassandra.schema.KeyspaceParams.create(KeyspaceParams.java:64)
        at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspaceParams(SchemaKeyspace.java:971)
        at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspace(SchemaKeyspace.java:956)
        at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesWithout(SchemaKeyspace.java:949)
        at org.apache.cassandra.schema.SchemaKeyspace.fetchNonSystemKeyspaces(SchemaKeyspace.java:859)
        at org.apache.cassandra.schema.Schema.loadFromDisk(Schema.java:100)
        at org.apache.cassandra.schema.Schema.loadFromDisk(Schema.java:89)
        at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:274)
        at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:671)
        at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:795)
Caused by: java.lang.ClassNotFoundException: org.apache.cassandra.locator.OldNetworkTopologyStrategy
        at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:264)
        at org.apache.cassandra.utils.FBUtilities.classForName(FBUtilities.java:716)
        ... 13 common frames omitted
Exception (org.apache.cassandra.exceptions.ConfigurationException) encountered during startup: Unable to find replication strategy class 'org.apache.cassandra.locator.OldNetworkTopologyStrategy'{code}
 

 ",,blerer,flightc,zagol,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13990,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,blerer,,,,,,,,,,,,,,,,,,,,,Low Hanging Fruit,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Nov 26 13:08:48 UTC 2020,,,,,,,All,,,,,,"0|z0kwts:",9223372036854775807,,,,flightc,,,,,,4.0-alpha3,,,https://github.com/apache/cassandra/commit/47278ae3765fcf1532f20b0ade3f36f08a089630,,,,,,,,,The changes do not require additional tests.,,,,,"25/Nov/20 03:51;flightc;[~zagol] {{OldNetworkTopologyStrategy}} was removed in C* 4.0-alpha3 by CASSANDRA-13990. It hasn't been touched for 8 years and we recommend that you switch to {{NetworkTopologyStrategy}} for all your application keyspaces. Cheers!;;;","25/Nov/20 20:00;zagol;Thanks! [~flightc];;;","26/Nov/20 09:18;blerer;[~flightc] I had a quick look to CASSANDRA-13990. It does not seems that we mention anything in the NEWS.txt in the upgrade section. We could also provide an error message which is more user friendly.;;;","26/Nov/20 09:47;blerer;I pushed a patch to fix those things [here|https://github.com/apache/cassandra/pull/834] (CI results are [here|https://app.circleci.com/pipelines/github/blerer/cassandra/73/workflows/f92486d6-a133-4829-b05c-65eb359cad4e].

[~flightc] Tell me if it looks good to you.;;;","26/Nov/20 10:48;flightc;[~blerer] excellent suggestions and thanks for getting to them really quickly. I was about to do them but it's awesome that you already did.

If I may suggest adding {{CASSANDRA-13999}} to the {{NEWS.txt}} entry.

And what do you think about also adding the ticket in the exception message of {{AbstractReplicationStrategy}}? If not, maybe even as a comment. Cheers! 👍;;;","26/Nov/20 13:05;blerer;I added your suggestions. Thanks for the review. :-);;;","26/Nov/20 13:08;blerer;Committed into trunk at 47278ae3765fcf1532f20b0ade3f36f08a089630;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cassandra 2.2 doesn't satisfy Java 1.7 language level,CASSANDRA-16300,13342437,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,adelapena,adelapena,24/Nov/20 17:57,01/Aug/21 12:47,13/Jul/23 08:39,11/Dec/20 15:34,2.2.19,,,,,Build,,,,0,,,,"I think that 2.2 needs to satisfy Java 1.7 language level. However, there are a few places where newer syntax is used:
 * [MessagingService|https://github.com/apache/cassandra/blob/cassandra-2.2/src/java/org/apache/cassandra/net/MessagingService.java#L779]
 * [ExecutorUtils|https://github.com/apache/cassandra/blob/cassandra-2.2/src/java/org/apache/cassandra/utils/ExecutorUtils.java#L36-L47]
 * [Throwables|https://github.com/apache/cassandra/blob/cassandra-2.2/src/java/org/apache/cassandra/utils/Throwables.java#L36]
 * [YamlConfigurationLoader|https://github.com/apache/cassandra/blob/cassandra-2.2/src/java/org/apache/cassandra/config/YamlConfigurationLoader.java#L142]
 * [YamlConfigurationLoaderTest|https://github.com/apache/cassandra/blob/cassandra-2.2/test/unit/org/apache/cassandra/config/YamlConfigurationLoaderTest.java#L38]

If I'm right and we really need 1.7 language level we should fix those, which seems quite straightforward.",,adelapena,e.dimitrova,,,,,,,,,,"adelapena opened a new pull request #833:
URL: https://github.com/apache/cassandra/pull/833


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Nov/20 12:07;githubbot;600","adelapena closed pull request #833:
URL: https://github.com/apache/cassandra/pull/833


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/21 15:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15050,,,,,,,,,,,,,"04/Dec/20 10:59;adelapena;junitreport.zip;https://issues.apache.org/jira/secure/attachment/13016491/junitreport.zip",,,,,,,,,,,,,,1.0,adelapena,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Dec 11 15:32:36 UTC 2020,,,,,,,Java7,,,,,,"0|z0kwfc:",9223372036854775807,,,,aholmber,brandon.williams,e.dimitrova,,Normal,,2.2.19,,,https://github.com/apache/cassandra/commit/20d1f9a69c18bfd11607063ec16fd24d1c835b55,,,,,,,,,Verify that the code satisfies 1.7 language level,,,,,"25/Nov/20 12:21;adelapena;[CircleCI results|https://app.circleci.com/pipelines/github/adelapena/cassandra/142/workflows/8c40cd44-a18a-413f-8d9b-9f47a208acb9];;;","03/Dec/20 17:47;e.dimitrova;I know we don't have Java 7 CI infrastructure, but were unit tests run at least locally? ;;;","04/Dec/20 11:07;adelapena;[~e.dimitrova] Yes, I'm attaching a unit test run with source.version=1.7 and source.test.version=1.8. Locally in only find failures in {{SSTableRewriterTest}}, but I get the same failures with source.version=1.8 and without the patch, so I'm assuming it's caused by my environment.;;;","04/Dec/20 15:33;e.dimitrova;Thank you [~adelapena]! LGTM +1;;;","11/Dec/20 14:05;brandon.williams;LGTM +1;;;","11/Dec/20 15:32;adelapena;Thanks for the reviews. Committed to cassandra-2.2 as [20d1f9a69c18bfd11607063ec16fd24d1c835b55|https://github.com/apache/cassandra/commit/20d1f9a69c18bfd11607063ec16fd24d1c835b55] and merged up  discarding the changes in more recent branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nodetool unit testing,CASSANDRA-16298,13342319,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,bereng,bereng,24/Nov/20 09:49,24/Nov/20 09:53,13/Jul/23 08:39,24/Nov/20 09:53,,,,,,Test/unit,,,,0,,,,During CASSANDRA-15883 it was detected unit test coverage for this tool is minimal. We should add testing for all nodetool commands.,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16200,CASSANDRA-16227,CASSANDRA-16026,CASSANDRA-16230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,2020-11-24 09:49:15.0,,,,,,,All,,,,,,"0|z0kvp4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Join new node to cluster failing on C* version 4,CASSANDRA-16296,13341990,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,bereng,yakir.g,yakir.g,22/Nov/20 14:24,24/Feb/21 05:52,13/Jul/23 08:39,18/Feb/21 11:57,4.0,4.0-rc1,,,,Local/Startup and Shutdown,,,,0,,,,"Hi, i'm using cassandra 4.0-beta3,
Join new node failing,
Current status:
{code}
[root@rc801 ~]# nodetool status
Datacenter: V4CH
================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address      Load        Tokens  Owns (effective)  Host ID                               Rack
UN  1.1.1.1      356.55 KiB  128     ?                 92ae4c39-edb3-4e67-8623-b49fd8301b66  RAC1
UN  2.2.2.2      424.36 KiB  128     ?                 d80647a8-32b2-4a8f-8022-f5ae3ce8fbb2  RAC1

Datacenter: V4NJ
================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address      Load        Tokens  Owns (effective)  Host ID                               Rack
UN  3.3.3.3      322.97 KiB  128     ?                 0106ce0b-18be-4321-8247-843076ff42e6  RAC1
UN  4.4.4.4      297.6 KiB   128     ?                 d81e2b7d-9221-4b1b-86c8-e8956e3eec07  RAC1
UN  5.5.5.5      324.75 KiB  128     ?                 5dfbaf14-8310-4d64-b61a-9da0a7a8a620  RAC1
{code}

Error on new host (7.7.7.7):
{code}
INFO  [main] 2020-11-22 09:27:36,592 RangeStreamer.java:323 - Bootstrap: range Full(/7.7.7.7:7000,(-7734271291904743823,-7725025391901227341]) exists on Full(/1.1.1.1:7000,(-7734271291904743823,-7725025391901227341]) for keyspace system_traces
ERROR [main] 2020-11-22 09:27:36,609 CassandraDaemon.java:817 - Exception encountered during startup
java.lang.IllegalStateException: Multiple strict sources found for Full(/7.7.7.7:7000,(9208454697546654053,-9212763148842799409]), sources: [Full(/2.2.2.2:7000,(9189373804905478622,-9212763148842799409]), Full(/1.1.1.1:7000,(9189373804905478622,-9212763148842799409])]
        at org.apache.cassandra.dht.RangeStreamer.calculateRangesToFetchWithPreferredEndpoints(RangeStreamer.java:517)
        at org.apache.cassandra.dht.RangeStreamer.calculateRangesToFetchWithPreferredEndpoints(RangeStreamer.java:383)
        at org.apache.cassandra.dht.RangeStreamer.addRanges(RangeStreamer.java:320)
        at org.apache.cassandra.dht.BootStrapper.bootstrap(BootStrapper.java:81)
        at org.apache.cassandra.service.StorageService.startBootstrap(StorageService.java:1635)
        at org.apache.cassandra.service.StorageService.bootstrap(StorageService.java:1612)
        at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:931)
        at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:892)
        at org.apache.cassandra.service.StorageService.initServer(StorageService.java:699)
        at org.apache.cassandra.service.StorageService.initServer(StorageService.java:635)
        at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:407)
        at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:671)
        at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:795)
INFO  [StorageServiceShutdownHook] 2020-11-22 09:27:36,616 HintsService.java:220 - Paused hints dispatch
WARN  [StorageServiceShutdownHook] 2020-11-22 09:27:36,617 Gossiper.java:1849 - No local state, state is in silent shutdown, or node hasn't joined, not announcing shutdown
INFO  [StorageServiceShutdownHook] 2020-11-22 09:27:36,617 MessagingService.java:441 - Waiting for messaging service to quiesce
{code}

Errors on seed node:
{code}
INFO  [Messaging-EventLoop-3-37] 2020-11-22 09:26:54,121 InboundConnectionInitiator.java:459 - /7.7.7.7:7000(/7.7.7.7:45490)->/1.1.1.1:7000-URGENT_MESSAGES-f412b9ba messaging connection established, version = 12, framing = LZ4, encryption = disabled
INFO  [Messaging-EventLoop-3-40] 2020-11-22 09:26:54,157 OutboundConnection.java:1151 - /1.1.1.1:7000(/1.1.1.1:38678)->/7.7.7.7:7000-URGENT_MESSAGES-3b23f639 successfully connected, version = 12, framing = LZ4, encryption = disabled
INFO  [GossipStage:1] 2020-11-22 09:26:56,109 Gossiper.java:1248 - Node /7.7.7.7:7000 is now part of the cluster
INFO  [GossipStage:1] 2020-11-22 09:26:56,147 Gossiper.java:1206 - InetAddress /7.7.7.7:7000 is now UP
INFO  [Messaging-EventLoop-3-1] 2020-11-22 09:26:57,378 InboundConnectionInitiator.java:459 - /7.7.7.7:7000(/7.7.7.7:45504)->/1.1.1.1:7000-SMALL_MESSAGES-77c813d4 messaging connection established, version = 12, framing = LZ4, encryption = disabled
INFO  [Messaging-EventLoop-3-38] 2020-11-22 09:26:57,383 OutboundConnection.java:1151 - /1.1.1.1:7000(/1.1.1.1:38680)->/7.7.7.7:7000-SMALL_MESSAGES-e75eaaa2 successfully connected, version = 12, framing = LZ4, encryption = disabled
INFO  [Messaging-EventLoop-3-2] 2020-11-22 09:27:36,623 InboundConnectionInitiator.java:459 - /7.7.7.7:7000(/7.7.7.7:45534)->/1.1.1.1:7000-LARGE_MESSAGES-defc02dd messaging connection established, version = 12, framing = LZ4, encryption = disabled
INFO  [Messaging-EventLoop-3-40] 2020-11-22 09:27:37,151 NoSpamLogger.java:92 - /1.1.1.1:7000->/7.7.7.7:7000-URGENT_MESSAGES-[no-channel] failed to connect
io.netty.channel.AbstractChannel$AnnotatedConnectException: finishConnect(..) failed: Connection refused: /7.7.7.7:7000
Caused by: java.net.ConnectException: finishConnect(..) failed: Connection refused
        at io.netty.channel.unix.Errors.throwConnectException(Errors.java:124)
        at io.netty.channel.unix.Socket.finishConnect(Socket.java:243)
        at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.doFinishConnect(AbstractEpollChannel.java:672)
        at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:649)
        at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:529)
        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:465)
        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)
        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Thread.java:834)
INFO  [GossipStage:1] 2020-11-22 09:27:57,154 Gossiper.java:1224 - InetAddress /7.7.7.7:7000 is now DOWN
{code}

Looks that calculateRangesToFetchWithPreferredEndpoints added as part of ""Transient Replication"" https://github.com/apache/cassandra/commit/f7431b432875e334170ccdb19934d05545d2cebd

It's new fresh cluster without data and the join failing after few seconds. 

Thank you,
Yakir Gibraltar.",,adelapena,bereng,blerer,dcapwell,e.dimitrova,tomasz.lasica,yakir.g,,,,,"bereng opened a new pull request #870:
URL: https://github.com/apache/cassandra/pull/870


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/21 06:38;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-762165919


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/190/workflows/1aec1b7b-d977-456f-9aac-8b874f8d431b)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/190/workflows/a3899559-3e48-45d1-a4b3-68df60c6b0e5)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/21 10:52;githubbot;600","bereng edited a comment on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-762165919


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/190/workflows/1aec1b7b-d977-456f-9aac-8b874f8d431b)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/190/workflows/a3899559-3e48-45d1-a4b3-68df60c6b0e5)
   
   Failures seem unrelated and they all pass locally. Some are even know offenders such as CASTest


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jan/21 10:53;githubbot;600","bereng opened a new pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jan/21 08:59;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r564442977



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,20 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        int nodes = 0;
+
+        if (strat instanceof NetworkTopologyStrategy)

Review comment:
       We could add a `getReplicationFactor(dc)` to `SimpleStrategy` to collapse this further thx to inheritance. But that would mean `SimpleStrategy.getReplicationFactor(dc)` would have to compare the dc strings to match. That would go against `AbstractReplicationStrategy.getReplicationFactor()` notes stating this should be FAST. The extra string comparison is the problem so I opted for this solution. Happy to discuss.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jan/21 11:31;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-767484714


   - CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/198/workflows/fe4619b8-072b-4e8f-bb0f-b129059ba115)
   All good
   
   - CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/198/workflows/53624615-b928-4d56-8612-4d8f14c16639)
   Known dtest failures + a seemingly unrelated failure that passes locally


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jan/21 11:34;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r566614202



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([2, 2])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        node5 = Node('node5',
+                     cluster,
+                     True,
+                     ('127.0.0.5', 9160),
+                     ('127.0.0.5', 7000),
+                     '7500',
+                     '0',
+                     None,
+                     binary_interface=('127.0.0.5', 9042))
+        cluster.add(node5, is_seed=False, data_center=""dc1"")

Review comment:
       Once c14013 merges we should remove ""dc1"" here as a test for 14013 #justfyi




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 06:56;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r566614202



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([2, 2])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        node5 = Node('node5',
+                     cluster,
+                     True,
+                     ('127.0.0.5', 9160),
+                     ('127.0.0.5', 7000),
+                     '7500',
+                     '0',
+                     None,
+                     binary_interface=('127.0.0.5', 9042))
+        cluster.add(node5, is_seed=False, data_center=""dc1"")

Review comment:
       Once c16411 merges we should remove ""dc1"" here as a test for 14013 #justfyi




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 07:35;githubbot;600","tlasica commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r566628751



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([2, 2])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        node5 = Node('node5',

Review comment:
       nit: using parameter names would make it probably easier to read

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):

Review comment:
       is having multiple DCs essential for this problem?
   If so then maybe it should be reflected in the test name?
   
   

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([2, 2])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        node5 = Node('node5',
+                     cluster,
+                     True,
+                     ('127.0.0.5', 9160),
+                     ('127.0.0.5', 7000),
+                     '7500',
+                     '0',
+                     None,
+                     binary_interface=('127.0.0.5', 9042))
+        cluster.add(node5, is_seed=False, data_center=""dc1"")

Review comment:
       Probably too much, but
   should we add a failed read before / successful read after addition?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 07:45;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r566639928



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):

Review comment:
       Yep multi-dc is the key. I can change the name.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 08:01;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r566614202



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([2, 2])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        node5 = Node('node5',
+                     cluster,
+                     True,
+                     ('127.0.0.5', 9160),
+                     ('127.0.0.5', 7000),
+                     '7500',
+                     '0',
+                     None,
+                     binary_interface=('127.0.0.5', 9042))
+        cluster.add(node5, is_seed=False, data_center=""dc1"")

Review comment:
       Once c16411 merges we should remove ""dc1"" here as a test for 16411 #justfyi




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 08:02;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r566641002



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,28 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_RF_GT_Nodes_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([2, 2])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        node5 = Node('node5',
+                     cluster,
+                     True,
+                     ('127.0.0.5', 9160),
+                     ('127.0.0.5', 7000),
+                     '7500',
+                     '0',
+                     None,
+                     binary_interface=('127.0.0.5', 9042))
+        cluster.add(node5, is_seed=False, data_center=""dc1"")

Review comment:
       It won't hurt...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 08:04;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r566899298



##########
File path: src/java/org/apache/cassandra/dht/tokenallocator/TokenAllocation.java
##########
@@ -134,7 +134,7 @@ SummaryStatistics getAllocationRingOwnership(InetAddressAndPort endpoint)
 
     abstract class StrategyAdapter implements ReplicationStrategy<InetAddressAndPort>
     {
-        // return true iff the provided endpoint occurs in the same virtual token-ring we are allocating for
+        // return true if the provided endpoint occurs in the same virtual token-ring we are allocating for

Review comment:
       I think `iff` stands for ""if and only if"", is it not correct in the context?

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable
+    {
+        // NTS
+        ClientWarn.instance.captureWarnings();
+        execute(""CREATE KEYSPACE testABC WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 2 }"");
+        List<String> warnings = ClientWarn.instance.getWarnings();
+        warnings.removeIf(s -> !s.equals(""Your replication factor 2 for keyspace testabc is higher than the number of nodes 1 for datacenter datacenter1""));

Review comment:
       ```suggestion
           warnings.removeIf(s -> !s.equals(""Your replication factor 2 for keyspace testabc is higher than the number of nodes 1 for datacenter "" + DATA_CENTER));
   ```

##########
File path: src/java/org/apache/cassandra/locator/SimpleStrategy.java
##########
@@ -88,6 +92,18 @@ public void validateOptions() throws ConfigurationException
     {
         validateOptionsInternal(configOptions);
         validateReplicationFactor(configOptions.get(REPLICATION_FACTOR));
+
+        int nodeCount = StorageService.instance.getHostIdToEndpoint().size();
+        // nodeCount==0 on many tests
+        if (rf.fullReplicas > nodeCount && nodeCount!=0)

Review comment:
       ```suggestion
           if (rf.fullReplicas > nodeCount && nodeCount != 0)
   ```

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -46,6 +48,7 @@
 
     private final KeyspaceAttributes attrs;
     private final boolean ifNotExists;
+    private HashSet<String> clientWarnings = new HashSet<>();

Review comment:
       Nit: could be final
   ```suggestion
       private final HashSet<String> clientWarnings = new HashSet<>();
   ```

##########
File path: src/java/org/apache/cassandra/locator/TokenMetadata.java
##########
@@ -1331,6 +1331,23 @@ public EndpointsForToken getWriteEndpoints(Token token, String keyspaceName, End
         }
     }
 
+    /**
+     * @return a (stable copy, won't be modified) datacenter to Endpoint map for all the nodes in the cluster.
+     */
+    public ImmutableMultimap<String, InetAddressAndPort> getDC2AllEndpoints(IEndpointSnitch snitch)
+    {
+        ImmutableMultimap.Builder<String, InetAddressAndPort> dc2Nodesbuilder = ImmutableMultimap.builder();
+        HashSet<InetAddressAndPort> nodes = new HashSet<InetAddressAndPort>(getAllEndpoints());

Review comment:
       Why is the `Set` returned by `getAllEndpoints` encapsulated in another `Set`? Can we just iterate `getAllEndpoints`? Also wondering whether we could replace the entire method body by `Multimaps.index(getAllEndpoints(), snitch::getDatacenter)`.

##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,20 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        int nodes = 0;
+
+        if (strat instanceof NetworkTopologyStrategy)

Review comment:
       We could evaluate the `useStrictConsistency && tokens != null` part of the boolean expression at the beginning of the method, so in some cases wouldn't  need to compute `nodes`.  Alternatively, we could encapsulate the current calculation of `nodes` in a function, so it would be lazily called from the boolean expression.

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +59,9 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+      if (ClientWarn.instance.get() == null)
+          ClientWarn.instance.captureWarnings();

Review comment:
       Nit: misaligned 
   ```suggestion
           if (ClientWarn.instance.get() == null)
               ClientWarn.instance.captureWarnings();
   ```

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       Nice test :). Don't we need a call to `requireNetwork()` to make the client warnings work when the test is run isolated?

##########
File path: src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
##########
@@ -51,7 +51,6 @@
 {
     private static final Logger logger = LoggerFactory.getLogger(AbstractReplicationStrategy.class);
 
-    @VisibleForTesting

Review comment:
       I think `keyspaceName` could be protected




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 16:06;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r566935391



##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -81,7 +80,10 @@ public void testCreateKeyspaceTableWarning() throws IOException
             DatabaseDescriptor.setKeyspaceCountWarnThreshold(Schema.instance.getKeyspaces().size() + 1);
             query = new QueryMessage(String.format(createKeyspace, 2), QueryOptions.DEFAULT);
             resp = client.execute(query);
-            assertTrue(resp.getWarnings() == null || resp.getWarnings().isEmpty());
+            List<String> warns = resp.getWarnings();
+            if (warns != null)
+                warns.removeIf(s -> s.contains(""is higher than the number of nodes""));

Review comment:
       I understand that we still have warnings here despite of having a RF=1 because of the RF of `system_distributed` and `system_traces`. Indeed, when we run a single instance we always have warnings for those in the logs. I'm wondering whether it would make sense to not emit the warning for system keyspaces.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/21 16:19;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r567577707



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       There are other tests checking warnings without it and passing. But I noticed `ant jar test -Dtest.name=CreateTest -Dtest.methods=testCreateKeyspaceRFgtNodesWarns` & variation runs all tests or none, seems broken Did you manage to run it in isolation?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 05:49;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r567578756



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,20 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        int nodes = 0;
+
+        if (strat instanceof NetworkTopologyStrategy)

Review comment:
       I like that but I would spare creating a new function.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 05:54;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r567580982



##########
File path: src/java/org/apache/cassandra/locator/TokenMetadata.java
##########
@@ -1331,6 +1331,23 @@ public EndpointsForToken getWriteEndpoints(Token token, String keyspaceName, End
         }
     }
 
+    /**
+     * @return a (stable copy, won't be modified) datacenter to Endpoint map for all the nodes in the cluster.
+     */
+    public ImmutableMultimap<String, InetAddressAndPort> getDC2AllEndpoints(IEndpointSnitch snitch)
+    {
+        ImmutableMultimap.Builder<String, InetAddressAndPort> dc2Nodesbuilder = ImmutableMultimap.builder();
+        HashSet<InetAddressAndPort> nodes = new HashSet<InetAddressAndPort>(getAllEndpoints());

Review comment:
       +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 06:00;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r567800033



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       I can run that test alone with `ant testsome -Dtest.name=org.apache.cassandra.cql3.validation.operations.CreateTest -Dtest.methods=testCreateKeyspaceRFgtNodesWarns`. That produces a NPE while getting the warnings unless we call `requireNetwork()`. However, as you said there are other tests for warnings that pass without requiring network:
   ```
   ant testsome -Dtest.name=org.apache.cassandra.cql3.ViewTest -Dtest.methods=testClientWarningOnCreate
   ant testsome -Dtest.name=org.apache.cassandra.cql3.validation.entities.UFSecurityTest -Dtest.methods=testAmokUDF
   ant testsome -Dtest.name=org.apache.cassandra.index.sasi.SASICQLTest -Dtest.methods=testClientWarningOnCreate
   ```
   I'm not sure what is the reason for that difference, maybe it's related to where the call to `ClientWarn.instance.warn` is done?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 12:50;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r567806318



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)
+            {
+                ImmutableMultimap<String, InetAddressAndPort> dc2Nodes = metadata.getDC2AllEndpoints(snitch);
+
+                NetworkTopologyStrategy ntps = (NetworkTopologyStrategy) strat;
+                for (String dc : dc2Nodes.keySet())
+                    nodes += ntps.getReplicationFactor(dc).allReplicas > 0 ? dc2Nodes.get(dc).size() : 0;
+            }
+            else
+                nodes = metadata.getSizeOfAllEndpoints();
+    
+            res = res && nodes > strat.getReplicationFactor().allReplicas;

Review comment:
       The `&&` part seems redundant here, since `res` is always true when evaluating this line, as it's shown by an IDE warning. We could just use:
   ```java
   res = nodes > strat.getReplicationFactor().allReplicas;
   ```
   Or maybe we could just eagerly return `false` after evaluating `useStrictConsistency` and `token` at the beginning of the method, and so also reduce nesting?
   ```java
   if (!useStrictConsistency || tokens == null)
       return false;
   
   int nodes = 0;
   
   if (strat instanceof NetworkTopologyStrategy)
   {
       ImmutableMultimap<String, InetAddressAndPort> dc2Nodes = metadata.getDC2AllEndpoints(snitch);
       NetworkTopologyStrategy ntps = (NetworkTopologyStrategy) strat;
       for (String dc : dc2Nodes.keySet())
           nodes += ntps.getReplicationFactor(dc).allReplicas > 0 ? dc2Nodes.get(dc).size() : 0;
   }
   else
   {
       nodes = metadata.getSizeOfAllEndpoints();
   }
   
   return nodes > strat.getReplicationFactor().allReplicas;
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 13:00;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r567960545



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,33 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):

Review comment:
       We could add some brief docstring mentioning the purpose of the test and mentioning the related ticket(s) with `@jira_ticket`.

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,33 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")

Review comment:
       We could easily verify here that the log warnings are emitted in both nodes, since we don't check that in unit tests:
   ```python
   warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
   if cluster.version() >= '4.0':
       for node in cluster.nodelist():
           assert len(node.grep_log(warning)) == 3
   ```
   Then we could verify that the warning is not emitted for the third node, since we have reached cluster size that matched the RF:
   ```python
   if cluster.version() >= '4.0':
       assert len(node3.grep_log(warning)) == 0
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 16:29;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r567958712



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,33 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")

Review comment:
       We could easily verify here that the log warnings are emitted in both nodes, since we don't check that in unit tests:
   ```python
   warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
   if cluster.version() >= '4.0':
       for node in cluster.nodelist():
           assert len(node.grep_log(warning)) == 3
   ```
   Then we could verify that the warning is not emitted for the third node, since we have reached a cluster size that matches the RF:
   ```python
   if cluster.version() >= '4.0':
       assert len(node3.grep_log(warning)) == 0
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Feb/21 16:29;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r568326365



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)
+            {
+                ImmutableMultimap<String, InetAddressAndPort> dc2Nodes = metadata.getDC2AllEndpoints(snitch);
+
+                NetworkTopologyStrategy ntps = (NetworkTopologyStrategy) strat;
+                for (String dc : dc2Nodes.keySet())
+                    nodes += ntps.getReplicationFactor(dc).allReplicas > 0 ? dc2Nodes.get(dc).size() : 0;
+            }
+            else
+                nodes = metadata.getSizeOfAllEndpoints();
+    
+            res = res && nodes > strat.getReplicationFactor().allReplicas;

Review comment:
       I was thinking about branch prediction when writing that. Iirc from some training an early return disables it so accumulating the result to return at the end is preferable. You'd then want to keep `nodes` declaration inside the branch to spare that cost when possible as well.
   
   So I am removing the `res &&` bit indeed but the rest sgtm. Does it make sense or am I being too far reached? This is not in the hot path iiuc so we may want to favor readability :thinking: 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 05:09;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r568334795



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       Ok found it. Without the network the test sees 0 nodes and that has been short circuited. With the network we see the node and then the test passes. As the other tests don't rely on the number of nodes to generate a warning they pass without the network. Also I was using `test` instead of `testsome` ops!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 05:38;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r568339238



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,33 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")

Review comment:
       +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 05:52;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-771450797


   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/206/workflows/7920afca-6e11-4360-ad1b-dd8485a6d5f3): LGTM, unrelated or passes locally
   Ci [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/206/workflows/ae60d3e0-05af-45d5-b1a9-9fd38dc48308): LGTM


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 08:10;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r568556062



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,44 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    """"""
+    Test creating a KS with RF > N on multi DC doesn't break bootstrap
+    @jira_ticket CASSANDRA-16296 CASSANDRA16411
+    """"""
+    def test_rf_gt_nodes_multidc_should_succeed(self):

Review comment:
       Nit: I think doctring should be the first statement in the function's body. There is also a missed hyphen in the second ticket id:
   ```suggestion
       def test_rf_gt_nodes_multidc_should_succeed(self):
           """"""
           Test creating a KS with RF > N on multi DC doesn't break bootstrap
           @jira_ticket CASSANDRA-16296 CASSANDRA-16411
           """"""
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 12:17;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r568576743



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)
+            {
+                ImmutableMultimap<String, InetAddressAndPort> dc2Nodes = metadata.getDC2AllEndpoints(snitch);
+
+                NetworkTopologyStrategy ntps = (NetworkTopologyStrategy) strat;
+                for (String dc : dc2Nodes.keySet())
+                    nodes += ntps.getReplicationFactor(dc).allReplicas > 0 ? dc2Nodes.get(dc).size() : 0;
+            }
+            else
+                nodes = metadata.getSizeOfAllEndpoints();
+    
+            res = res && nodes > strat.getReplicationFactor().allReplicas;

Review comment:
       Since the function is not in the hot path I'd prefer readability (if the the early return is more readable, which is debatable), but I'm not against the current approach if you prefer it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 12:51;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r568577330



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       That makes sense, +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Feb/21 12:52;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r568326365



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)
+            {
+                ImmutableMultimap<String, InetAddressAndPort> dc2Nodes = metadata.getDC2AllEndpoints(snitch);
+
+                NetworkTopologyStrategy ntps = (NetworkTopologyStrategy) strat;
+                for (String dc : dc2Nodes.keySet())
+                    nodes += ntps.getReplicationFactor(dc).allReplicas > 0 ? dc2Nodes.get(dc).size() : 0;
+            }
+            else
+                nodes = metadata.getSizeOfAllEndpoints();
+    
+            res = res && nodes > strat.getReplicationFactor().allReplicas;

Review comment:
       I was thinking about branch prediction when writing that. Iirc from some training an early return disables it so accumulating the result to return at the end is preferable. You'd then want to keep `nodes` declaration inside the branch to spare that cost when possible as well.
   
   So I am removing the `res &&` bit indeed but the rest sgtm. Does it make sense or am I being too far reached? This is not in the hot path iiuc so we may want to favor readability :thinking: 

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       Ok found it. Without the network the test sees 0 nodes and that has been short circuited. With the network we see the node and then the test passes. As the other tests don't rely on the number of nodes to generate a warning they pass without the network. Also I was using `test` instead of `testsome` ops!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Feb/21 00:58;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r568339238



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,33 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")

Review comment:
       +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Feb/21 00:58;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-771450797


   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/206/workflows/7920afca-6e11-4360-ad1b-dd8485a6d5f3): LGTM, unrelated or passes locally
   Ci [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/206/workflows/ae60d3e0-05af-45d5-b1a9-9fd38dc48308): LGTM


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Feb/21 01:08;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r568556062



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,44 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    """"""
+    Test creating a KS with RF > N on multi DC doesn't break bootstrap
+    @jira_ticket CASSANDRA-16296 CASSANDRA16411
+    """"""
+    def test_rf_gt_nodes_multidc_should_succeed(self):

Review comment:
       Nit: I think doctring should be the first statement in the function's body. There is also a missed hyphen in the second ticket id:
   ```suggestion
       def test_rf_gt_nodes_multidc_should_succeed(self):
           """"""
           Test creating a KS with RF > N on multi DC doesn't break bootstrap
           @jira_ticket CASSANDRA-16296 CASSANDRA-16411
           """"""
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Feb/21 01:14;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r568576743



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)
+            {
+                ImmutableMultimap<String, InetAddressAndPort> dc2Nodes = metadata.getDC2AllEndpoints(snitch);
+
+                NetworkTopologyStrategy ntps = (NetworkTopologyStrategy) strat;
+                for (String dc : dc2Nodes.keySet())
+                    nodes += ntps.getReplicationFactor(dc).allReplicas > 0 ? dc2Nodes.get(dc).size() : 0;
+            }
+            else
+                nodes = metadata.getSizeOfAllEndpoints();
+    
+            res = res && nodes > strat.getReplicationFactor().allReplicas;

Review comment:
       Since the function is not in the hot path I'd prefer readability (if the the early return is more readable, which is debatable), but I'm not against the current approach if you prefer it.

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java
##########
@@ -365,6 +372,31 @@ public void testKeyspace() throws Throwable
         execute(""DROP KEYSPACE testXYZ"");
     }
 
+    /**
+     *  Test a warning is thrown on create keyspace with a RF > number of nodes.
+     */
+    @Test
+    public void testCreateKeyspaceRFgtNodesWarns() throws Throwable

Review comment:
       That makes sense, +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Feb/21 01:14;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773215704


   @adelapena I think the latest commit solves the sticky warning. I also expanded the unit test to more cases and added ALTER to it. Same on the dtest.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/21 10:50;githubbot;600","bereng edited a comment on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773215704


   @adelapena I think the latest commit solves the sticky warning. I also expanded the unit test to more cases and added ALTER to it. Same on the dtest.
   
   - CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/209/workflows/1b6a3737-d412-4fca-8953-6c02ba3dcb22)
   - CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/209/workflows/8f097f51-72c3-452e-9b3a-b403f47e76da)
   
   LGTM: Known offenders or pass locally.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/21 11:43;githubbot;600","bereng edited a comment on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773215704


   @adelapena I think the latest commit solves the sticky warning. I also expanded the unit test to more cases and added ALTER to it. Same on the dtest.
   
   - CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/209/workflows/1b6a3737-d412-4fca-8953-6c02ba3dcb22)
   - CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/209/workflows/8f097f51-72c3-452e-9b3a-b403f47e76da)
   
   LGTM: Known offenders or pass locally.
   
   We'd need a dtest run <4.0 for the newly added dtest. Maybe you can fire that easily on jenkins rather than going through the circle pain?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/21 11:44;githubbot;600","adelapena commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773256210


   > We'd need a dtest run <4.0 for the newly added dtest. Maybe you can fire that easily on jenkins rather than going through the circle pain?
   
   Running dtests on Jenkins:
   * [cassandra-2.2](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/366/)
   * [cassandra-3.0](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/367/)
   * [cassandra-3.11](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/368/)
   * [trunk](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/369/)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/21 12:01;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r570300307



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       I haven't been able to reproduce this. Is it the problem that the warnings are `null` if `requireNetwork` hasn't finished, or that there are other previous contents in them?

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       Nit: maybe we could name this using the `warnings` word, something like `previousNumWarnings`, or `previousWarningsSize`? Feel free to ignore if you don't agree.

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete
+
+        // NTS
+        ClientWarn.instance.captureWarnings();
+        execute(""CREATE KEYSPACE testABC WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 3 }"");

Review comment:
       Not a big deal, but we could use [`CQLTester#createKeyspace`](https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/cql3/CQLTester.java#L692) instead of `execute`, as it's done [here](https://github.com/adelapena/cassandra/commit/a42317a0e3ccf5d291b6629ee0c318298dcb994c) as an example. 
   
   The advantage of `createKeyspace` is that it reduces the likelihood of collisions with other tests using the same keyspace names (IIRC we have had problems with this in the past). Also, `CQLTester` conditionally [drops the keyspaces](https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/cql3/CQLTester.java#L344) created with `createKeyspace` after each test, so we wouldn't need the `DROP KEYSPACE` queries at the end of this tests. These drops will be executed even if the test fails, as if they were in a `finally` block, which is also an advantage.

##########
File path: src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
##########
@@ -299,6 +298,8 @@ public RangesAtEndpoint getPendingAddressRanges(TokenMetadata metadata, Collecti
 
     public abstract void validateOptions() throws ConfigurationException;
 
+    public abstract void maybeWarnOnOptions() throws ConfigurationException;

Review comment:
       Since the purpose of the method is just warn about stuff I guess it won't raise `ConfigurationException`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/21 15:25;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570340547



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+        warnings_total = 0

Review comment:
       Nit: this could be into the `if` block body. The same applies for the second initialization of `warnings_total` below.

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap

Review comment:
       Nit: now it's creating and altering a keyspace.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Feb/21 16:01;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r570744774



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       If you run:
   - Test class + no `requireNetwrok()`: pass
   - Test class + `requireNetwrok()`: fail unless you sleep
   - Test method + no `requireNetwrok()`: fail bc test sees 0 nodes and we short circuit that
   - Test method + `requireNetwrok()`: pass
   
   The problem being warnings goes to null as they get 'cleared'.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 06:20;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r570744774



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       If you run:
   - Test class + no `requireNetwrok()`: pass
   - Test class + `requireNetwrok()`: fail unless you sleep
   - Test method + no `requireNetwrok()`: fail bc test sees 0 nodes and we short circuit that
   - Test method + `requireNetwrok()`: pass
   
   The problem being warnings goes to null as they get 'cleared' unless you sleep.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 06:21;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570749825



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap

Review comment:
       The gist imo is about KS creation. The `Alter` bit is just operational commands you do to it after creation. It's relevant to the warnings logic but not to the main problem. Would you agree?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 06:36;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773830701


   Pushed latest review comments. Also the dtests runs for previous versions lgtm to _my untrained eye_ on previous versions runs. Wdyt @adelapena ?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 06:45;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r570744774



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       If you run:
   - Test class + no `requireNetwrok()`: pass
   - Test class + `requireNetwrok()`: fail unless you sleep
   - Test method + no `requireNetwrok()`: fail bc test sees 0 nodes and we short circuit that
   - Test method + `requireNetwrok()`: pass
   
   The problem being warnings goes to null as they get 'cleared'.

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       If you run:
   - Test class + no `requireNetwrok()`: pass
   - Test class + `requireNetwrok()`: fail unless you sleep
   - Test method + no `requireNetwrok()`: fail bc test sees 0 nodes and we short circuit that
   - Test method + `requireNetwrok()`: pass
   
   The problem being warnings goes to null as they get 'cleared' unless you sleep.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 09:48;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r570300307



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       I haven't been able to reproduce this. Is it the problem that the warnings are `null` if `requireNetwork` hasn't finished, or that there are other previous contents in them?

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       Nit: maybe we could name this using the `warnings` word, something like `previousNumWarnings`, or `previousWarningsSize`? Feel free to ignore if you don't agree.

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete
+
+        // NTS
+        ClientWarn.instance.captureWarnings();
+        execute(""CREATE KEYSPACE testABC WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 3 }"");

Review comment:
       Not a big deal, but we could use [`CQLTester#createKeyspace`](https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/cql3/CQLTester.java#L692) instead of `execute`, as it's done [here](https://github.com/adelapena/cassandra/commit/a42317a0e3ccf5d291b6629ee0c318298dcb994c) as an example. 
   
   The advantage of `createKeyspace` is that it reduces the likelihood of collisions with other tests using the same keyspace names (IIRC we have had problems with this in the past). Also, `CQLTester` conditionally [drops the keyspaces](https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/cql3/CQLTester.java#L344) created with `createKeyspace` after each test, so we wouldn't need the `DROP KEYSPACE` queries at the end of this tests. These drops will be executed even if the test fails, as if they were in a `finally` block, which is also an advantage.

##########
File path: src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
##########
@@ -299,6 +298,8 @@ public RangesAtEndpoint getPendingAddressRanges(TokenMetadata metadata, Collecti
 
     public abstract void validateOptions() throws ConfigurationException;
 
+    public abstract void maybeWarnOnOptions() throws ConfigurationException;

Review comment:
       Since the purpose of the method is just warn about stuff I guess it won't raise `ConfigurationException`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 09:50;githubbot;600","bereng edited a comment on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773215704






----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 09:52;githubbot;600","adelapena commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773256210


   > We'd need a dtest run <4.0 for the newly added dtest. Maybe you can fire that easily on jenkins rather than going through the circle pain?
   
   Running dtests on Jenkins:
   * [cassandra-2.2](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/366/)
   * [cassandra-3.0](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/367/)
   * [cassandra-3.11](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/368/)
   * [trunk](https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/369/)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 09:59;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-773215704






----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 10:05;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570749825



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap

Review comment:
       The gist imo is about KS creation. The `Alter` bit is just operational commands you do to it after creation. It's relevant to the warnings logic but not to the main problem. Would you agree?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 10:14;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570340547



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+        warnings_total = 0

Review comment:
       Nit: this could be into the `if` block body. The same applies for the second initialization of `warnings_total` below.

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap

Review comment:
       Nit: now it's creating and altering a keyspace.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 10:19;githubbot;600","tlasica commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570857344



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0

Review comment:
       ```
   warnings_total = sum([len(node.grep_log(warning) for node in cluster.node_list()])
   assert warnings_total == 1
   ```
   but actually what we would like to check is: ""warning on a dc1 node, and no warning on dc2 node""
   so maybe more explicit:
   ```
   assert len(node1.grep_log(warning)) == 1
   assert len(node2.grep_log(warning)) == 0
   ```

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+        warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0

Review comment:
       same here

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap

Review comment:
       so maybe rather then describing what test does we should describe what it validates?
   ""Test validating that a KS with RF > N on multi DC doesn not break a bootsrtap""

##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+        warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True);
+        if cluster.version() >= '4.0':
+            assert len(node3.grep_log(warning)) == 0

Review comment:
       this check for warning can be missed because number of nodes changed.
   so for example `of nodes 1` will not be found if the warning would be `of nodes 2` (as we added the node).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 10:35;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570920019



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0

Review comment:
       Good point, that makes more sense. Just note that the session created with `patient_cql_connection` can use any node as coordinator so doing the asserts that way would be flaky unless we also create the session with `patient_exclusive_cql_connection`. We can also put `warning` inside the `if` block since I think we are not going to reuse it:
   ```python
   node1, node2 = cluster.nodelist()
   session = self.patient_exclusive_cql_connection(node1)
   session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
   
   if cluster.version() >= '4.0':
       warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
       assert len(node1.grep_log(warning)) == 1
       assert len(node2.grep_log(warning)) == 0
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 12:01;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570921891



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+        warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True);
+        if cluster.version() >= '4.0':
+            assert len(node3.grep_log(warning)) == 0

Review comment:
       We could just mark the logs before adding the node and search in every node for a generic `'Your replication factor'` message, for example something like:
   ```python
   marks = map(lambda n: n.mark_log(), cluster.nodelist())
   
   # add node...
   
   if cluster.version() >= '4.0':
       warning = 'Your replication factor'
       for (node, mark) in zip(cluster.nodelist(), marks):
           assert len(node.grep_log(warning, from_mark=mark)) == 0
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 12:04;githubbot;600","adelapena commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r570930124



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,53 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap

Review comment:
       ""validating that a KS with RF > N..."" sounds good to me.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 12:20;githubbot;600","adelapena commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-774020406


   > Pushed latest review comments. Also the dtests runs for previous versions lgtm to my untrained eye on previous versions runs. Wdyt @adelapena ?
   
   Since we are only modifying trunk, I think the only dtest suitable to fail on previous branches due to the changes is the new `test_rf_gt_nodes_multidc_should_succeed`, and it seems it passes.
   
   > Would you be so kind again to run a full QA run on jenkins so we get some clear data please?
   
   Sure, running: https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch/367/
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/21 13:03;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r571792226



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0

Review comment:
       Oh I didn't know about the 'exclusive' cql connection gtk.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 05:41;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r571793946



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Test creating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        session = self.patient_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+        warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+        warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+
+        if cluster.version() >= '4.0':
+            warnings_total = 0
+            for node in cluster.nodelist():
+                warnings_total += len(node.grep_log(warning))
+            assert warnings_total == 1
+
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True);
+        if cluster.version() >= '4.0':
+            assert len(node3.grep_log(warning)) == 0

Review comment:
       Amended but I used a more particular substring for the check to avoid false matches.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 05:47;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-774913119


   So circle vs devbranch vs nightly failures don't seem to match so I am at a loss. But:
   - I will run circle again and see if I can get a more stable run
   - Devbranch seems to be failing on tests that also fail locally for trunk. So I guess devbranch also has 'known offenders'. I'd need @adelapena to confirm if he sees anything suspicious
   - I think that if circle and nightlies mostly match we should be ok
   
   Waiting for CI results


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 06:45;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-774949642


   Ok the latest run is more reasonable and all failures pass locally
   - Ci [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/212/workflows/efd048e3-51db-4b5f-913b-1a1a7d55d208)
   - CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/212/workflows/660ecbbc-6f8c-4812-a527-c77897e41243)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 07:57;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571853059



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       maybe we can introduce `ClientWarn::numWarnings()` method that would hide this null check and return 0 or size?

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       `numWarnings()` could be used here

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -75,8 +85,16 @@ public Keyspaces apply(Keyspaces schema)
             throw ire(""Unable to use given strategy class: LocalStrategy is reserved for internal use."");
 
         keyspace.params.validate(keyspaceName);
+        Keyspaces ksps = schema.withAddedOrUpdated(keyspace);
 
-        return schema.withAddedOrUpdated(keyspace);
+        if (ClientWarn.instance.getWarnings() != null)

Review comment:
       and here same pattern: `clientWanrings.addAll(ClientWarn.instance.getWarningsAfter(previousWarningsSize));`

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,59 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete
+
+        // NTS
+        ClientWarn.instance.captureWarnings();
+        String ks = createKeyspace(""CREATE KEYSPACE %s WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 3 }"");
+        List<String> warnings = ClientWarn.instance.getWarnings();
+        assertEquals(1, warnings.size());
+        Assertions.assertThat(warnings.get(0)).contains(""Your replication factor 3 for keyspace "" + ks + "" is higher than the number of nodes 1 for datacenter "" + DATA_CENTER);
+
+        ClientWarn.instance.captureWarnings();
+        execute(""CREATE TABLE "" + ks + "".t (k int PRIMARY KEY, v int)"");
+        warnings = ClientWarn.instance.getWarnings();
+        assertNull(warnings);
+
+        ClientWarn.instance.captureWarnings();

Review comment:
       with so many cases maybe we can extract some methods 
   ```
   private void expectCreateKeyspaceWarning(ddl, warning)
   {
       List<String> warnings = ClientWarn.instance.getWarnings();
      createKeyspace(ddl);
       assertEquals(1, warnings.size());
       Assertions.assertThat(warnings.get(0)).contains(warning);    
   }
   ```
   and
   ```
   private void expectNoWarning(...)
   ```
   so that test would become a list of checks?
   ```
   expectWarning(...)
   expectNoWarning(....)
   ```

##########
File path: src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
##########
@@ -302,6 +310,34 @@ public void validateOptions() throws ConfigurationException
         }
     }
 
+    @Override
+    public void maybeWarnOnOptions()
+    {
+        ImmutableMultimap<String, InetAddressAndPort> dcsNodes = StorageService.instance.getTokenMetadata().getDC2AllEndpoints(snitch);
+        for (Entry<String, String> e : this.configOptions.entrySet())
+        {
+            if (!SchemaConstants.isSystemKeyspace(keyspaceName))

Review comment:
       I think this system keyspace check should be outside of the loop, as int he loop it is causing reader to think why.

##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)

Review comment:
       Sorry, I am not sure what the conditions should be, just to make sure:
   DC1:3, DC2:3 with DC1 having 2 and DC2 having 6 nodes => res = True?
   
   Also the condition before change was `!=` and now it is `>`?
   

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -78,7 +82,14 @@ public Keyspaces apply(Keyspaces schema)
         validateNoRangeMovements();
         validateTransientReplication(keyspace.createReplicationStrategy(), newKeyspace.createReplicationStrategy());
 
-        return schema.withAddedOrUpdated(newKeyspace);
+        Keyspaces res = schema.withAddedOrUpdated(newKeyspace);
+        if (ClientWarn.instance.getWarnings() != null)

Review comment:
       with proposed earlier method this will be easier:
   
   ```
   int newSize = ClientWarn.instance.numWarnings();
   if (newSize > previousWarningSize)
   {
       clientWarnings.addAll(...)
   }
   ```
   but even better it can all be probably extraceted into some new `ClientWarn` method,
   that would return ""getWarningsAfter(previousWarningSize)"" and return some list or empty list
   depending on the conditions.
   
   Then this code would become simply:
   ```
   clientWarnings.addAll(ClientWarn.instance.getWarningsAfter(previousWarningSize));
   ```

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       so in this case maybe we should
   - poll until warnings are cleared, or
   - assert that warnings are cleared after this sleep.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 08:57;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571890058



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)

Review comment:
       I am not following your explanation sorry.
   
   In any case notice we're comparing the number of _replicating nodes_ (not nodes, but replicating nodes only) to the RF. So if you have 6 nodes but only 3 are _replicas_ you should behave as if there were only 3 nodes towards the RF, not 6 bc one dc is _not_ replicating i.e. Does it help?
   
   Yep method doc also points towards `>`  which makes sense to me. Idk why it was `!=`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:23;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571891628



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       The test already asserts there is only 1 warn and that's the right one correct?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:25;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571892316



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,59 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete
+
+        // NTS
+        ClientWarn.instance.captureWarnings();
+        String ks = createKeyspace(""CREATE KEYSPACE %s WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 3 }"");
+        List<String> warnings = ClientWarn.instance.getWarnings();
+        assertEquals(1, warnings.size());
+        Assertions.assertThat(warnings.get(0)).contains(""Your replication factor 3 for keyspace "" + ks + "" is higher than the number of nodes 1 for datacenter "" + DATA_CENTER);
+
+        ClientWarn.instance.captureWarnings();
+        execute(""CREATE TABLE "" + ks + "".t (k int PRIMARY KEY, v int)"");
+        warnings = ClientWarn.instance.getWarnings();
+        assertNull(warnings);
+
+        ClientWarn.instance.captureWarnings();

Review comment:
       +1 if it were a test class wide util, but being a small and single method... meh I see it as a nit imo.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:26;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571893503



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,59 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete
+
+        // NTS
+        ClientWarn.instance.captureWarnings();
+        String ks = createKeyspace(""CREATE KEYSPACE %s WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 3 }"");
+        List<String> warnings = ClientWarn.instance.getWarnings();
+        assertEquals(1, warnings.size());
+        Assertions.assertThat(warnings.get(0)).contains(""Your replication factor 3 for keyspace "" + ks + "" is higher than the number of nodes 1 for datacenter "" + DATA_CENTER);
+
+        ClientWarn.instance.captureWarnings();
+        execute(""CREATE TABLE "" + ks + "".t (k int PRIMARY KEY, v int)"");
+        warnings = ClientWarn.instance.getWarnings();
+        assertNull(warnings);
+
+        ClientWarn.instance.captureWarnings();

Review comment:
       up to you




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:28;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571894188



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       well, the difference is for a person debugging the failures:
   ""warnings are not cleared up in the beginning""
   vs
   ""1 was expected and got 2""
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:29;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571894188



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       well, the difference is for a person debugging the failures:
   ""expected 0 warnings at the start of the test""
   vs
   ""1 was expected and got 2""
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:30;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571894188



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       well, the difference is for a person debugging the failures:
   ""expected 0 warnings at the start of the test""
   vs
   ""1 was expected and got 2"" - after CREATE
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:31;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571896048



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -78,7 +82,14 @@ public Keyspaces apply(Keyspaces schema)
         validateNoRangeMovements();
         validateTransientReplication(keyspace.createReplicationStrategy(), newKeyspace.createReplicationStrategy());
 
-        return schema.withAddedOrUpdated(newKeyspace);
+        Keyspaces res = schema.withAddedOrUpdated(newKeyspace);
+        if (ClientWarn.instance.getWarnings() != null)

Review comment:
       I think this case is not a candidate to be generalized into the `ClientWarn`class. The problem comes from the underlying ThreadLocal and the many execution paths. Some execute on the same thread while others on a pool where that thread is not deterministic. Some will contain previous warnings and others don't. That's why some warnings accumulate and others clear. But that is particular to this specific scenario, hence the `clientWarnings()` on the API to pull warnings across threads. So I wouldn't generalize it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:32;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571898892



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       Yeah on the other hand you can argue you're loosing the semantics on a non-inited `ClientWarn` instance returning `0` instead of NPE-ing... :shrug: I'd say this is a nit? I am weary of touching such a class for such a specific usage and a nit :shrug: 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:36;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571900160



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)

Review comment:
       ok, so maybe I was not precise, feel free to ignore:
   if we have: NTS witrh RF = {DC1:3, DC2: 3} and we have cluster with N(DC1)=2, N(DC2)=6 then
   - nodes will be 8?
   - so res will be True?
   
   What is bit misleading in your explanation:
   > not 6 bc one dc is not replicating
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:39;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571900593



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       Will resolve depending on how we resolve the above. Resolving for now to keep this clear-ish

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -75,8 +85,16 @@ public Keyspaces apply(Keyspaces schema)
             throw ire(""Unable to use given strategy class: LocalStrategy is reserved for internal use."");
 
         keyspace.params.validate(keyspaceName);
+        Keyspaces ksps = schema.withAddedOrUpdated(keyspace);
 
-        return schema.withAddedOrUpdated(keyspace);
+        if (ClientWarn.instance.getWarnings() != null)

Review comment:
       Will resolve depending on how we resolve the above. Resolving for now to keep this clear-ish




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:39;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571900160



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)

Review comment:
       ok, so maybe I was not precise, feel free to ignore:
   if we have: NTS witrh RF = {DC1:3, DC2: 3} and we have cluster with N(DC1)=2, N(DC2)=6 then
   - nodes will be 8?
   - so res will be True?
   
   I think it fits the description ""nodes in the cluster is > # of replicas"". I just wanted to make sure.
   
   What is bit misleading in your explanation:
   > not 6 bc one dc is not replicating
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:40;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571902056



##########
File path: src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
##########
@@ -302,6 +310,34 @@ public void validateOptions() throws ConfigurationException
         }
     }
 
+    @Override
+    public void maybeWarnOnOptions()
+    {
+        ImmutableMultimap<String, InetAddressAndPort> dcsNodes = StorageService.instance.getTokenMetadata().getDC2AllEndpoints(snitch);
+        for (Entry<String, String> e : this.configOptions.entrySet())
+        {
+            if (!SchemaConstants.isSystemKeyspace(keyspaceName))

Review comment:
       Right. Left-over from a refactor where ks was indeed changing then but it isn't now.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:41;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571891628



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       The test already asserts there is only 1 warn and that's the right one correct?
   Edit: forgot about the poll. Warnings being clear doesn't mean `requireNetwrok()` completed right? They could be clear for a number of reasons. What we need are non async test framework methods (food for another ticket imo)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:47;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571909003



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -78,7 +82,14 @@ public Keyspaces apply(Keyspaces schema)
         validateNoRangeMovements();
         validateTransientReplication(keyspace.createReplicationStrategy(), newKeyspace.createReplicationStrategy());
 
-        return schema.withAddedOrUpdated(newKeyspace);
+        Keyspaces res = schema.withAddedOrUpdated(newKeyspace);
+        if (ClientWarn.instance.getWarnings() != null)

Review comment:
       fine




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:50;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571909262



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       up to you




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 09:51;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571922257



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       logic would not be lost:
   ```
   int previousWarningsSize = ClientWarn.instance.numWarnings();
   ```
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 10:10;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r571932755



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -353,9 +361,27 @@ public void addRanges(String keyspaceName, ReplicaCollection<?> replicas)
      */
     private boolean useStrictSourcesForRanges(AbstractReplicationStrategy strat)
     {
-        return useStrictConsistency
-                && tokens != null
-                && metadata.getSizeOfAllEndpoints() != strat.getReplicationFactor().allReplicas;
+        boolean res = useStrictConsistency && tokens != null;
+        
+        if (res)
+        {
+            int nodes = 0;
+
+            if (strat instanceof NetworkTopologyStrategy)

Review comment:
       Ok icwym now. You were talking DC:RF and DC:N on each side. Yes, nodes would be 8. And on DC1 you'd get a warning bd RF=3 but N=2.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Feb/21 10:25;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r572602851



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       I disagree here. A person debugging the test will be under the impression the poll guarantees the 0 warnings which is not true. A sleep signals a _best effort_ to workaround an async issue as in other tests. The 'expected 0 warnings at the start of the test' is implicit in the assert expecting only 1 warning.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Feb/21 05:26;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r572716115



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       up to you... best solution would be polling wait for zero.
    
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Feb/21 09:18;githubbot;600","tlasica commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r572717297



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       But to be honest: `sleep` is one of the most popular ways of introducing flickering in the tests.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Feb/21 09:20;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r572736795



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       It is indeed. It is an anti-pattern but still a workaround until the async behavior is fixed. Polling is plain wrong imo which is worst I would say. We have 2 bad options and we need to choose one :man_shrugging: 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Feb/21 09:47;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r572884430



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       Polling seems like a good way to avoid the test becoming flaky. However, I'm still unable to reproduce the failure when the current wait is absent. I have removed the wait [here](https://github.com/adelapena/cassandra/commits/CASSANDRA-16296-review-3) and run both the individual test and the entire suite/class in the multiplexer:
   * [method](https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/690/)
   * [class](https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/691/)
   
   It's 100 runs for the class and 200 runs for the method, without any failure. Running them locally a few dozen times doesn't produce any failure either.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Feb/21 13:31;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r572350596



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -17,7 +17,14 @@
  */
 package org.apache.cassandra.dht;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Properties;

Review comment:
       Unused import

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -75,8 +85,16 @@ public Keyspaces apply(Keyspaces schema)
             throw ire(""Unable to use given strategy class: LocalStrategy is reserved for internal use."");
 
         keyspace.params.validate(keyspaceName);
+        Keyspaces ksps = schema.withAddedOrUpdated(keyspace);

Review comment:
       nit: I would name this keyspaces

##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       I am also in favor to the polling. Less prone to flakiness even if it is not perfect

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -75,8 +85,16 @@ public Keyspaces apply(Keyspaces schema)
             throw ire(""Unable to use given strategy class: LocalStrategy is reserved for internal use."");
 
         keyspace.params.validate(keyspaceName);
+        Keyspaces ksps = schema.withAddedOrUpdated(keyspace);
 
-        return schema.withAddedOrUpdated(keyspace);
+        if (ClientWarn.instance.getWarnings() != null)

Review comment:
       Was the idea revised again? :-)

##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       nit: I was wondering what happened to this suggestion? I see similar one in AlterKeyspaceStatement and it seems reasonable to me and in fashion with the C* code style :-) 

##########
File path: src/java/org/apache/cassandra/locator/TokenMetadata.java
##########
@@ -1331,6 +1331,14 @@ public EndpointsForToken getWriteEndpoints(Token token, String keyspaceName, End
         }
     }
 
+    /**
+     * @return a (stable copy, won't be modified) datacenter to Endpoint map for all the nodes in the cluster.
+     */

Review comment:
       nit: I would probably say ""an unmodifiable Data Center to Endpoint map... ""
   Decided to mention it only as it will appear in the java doc, feel free to ignore :-) 
   

##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -72,7 +69,7 @@ public void testCreateKeyspaceTableWarning() throws IOException
 
         try (SimpleClient client = newSimpleClient(ProtocolVersion.CURRENT).connect(false))
         {
-            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'2'}"";
+            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'1'}"";

Review comment:
       Do we really want this change?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 04:29;githubbot;600","ekaterinadimitrova2 commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-776432142


   I left some small questions/comments, I want to test a bit more tomorrow


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 04:32;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573439927



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       PS I also didn't manage to reproduce the failure locally




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 04:37;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573472792



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       Hi,
   
   Thx Andres for multiplexing it but running the method individually won't repro the issue. I get it, sometimes, only if running the whole class. It failed only 1 out of 20 for me today whereas it used to fail every time some days ago...
   
   As I am failing to explain why the polling is wrong let me try to show it with code assuming `while(warns not empty) sleep(1)`;
   
   - Test method starts and 'requireNetwork()' is called
   - Polling loop sees 0 warns so doesn't sleep
   - Test runs CQL and a warning is generated
   - Some 'requireNetwork' async call clears warnings
   - Assert fails as it sees 0 warnings instead of 1
   
   Now we do the same without polling
   
   - Test method starts and 'requireNetwork()' is called
   - Sleep(1) + some 'requireNetwork' async call clears warnings hopefully within the sleep. This is the source of flakiness
   - Test runs CQL and a warning is generated
   - Assert succeeds
   
   The problem is that waiting for warns to be empty is _not_ what we need. We need to wait for warns to be stable (aka requireNetwork to have finished completely). Now you can tell me I should do instead a `do sleep(1) while(!warns.empty())` and then it will work. But what's the point in polling on a random variable? It's like polling for pears when you're waiting on apples. It's the sleep that makes things work, the poll does nothing but confuse the reader imo.
   
   This is the best I can explain it. If I am not managing to explain it let's just remove or poll (any of both won't sleep) and then we can fix it when/if it starts failing in CI.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 06:12;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573474113



##########
File path: src/java/org/apache/cassandra/locator/TokenMetadata.java
##########
@@ -1331,6 +1331,14 @@ public EndpointsForToken getWriteEndpoints(Token token, String keyspaceName, End
         }
     }
 
+    /**
+     * @return a (stable copy, won't be modified) datacenter to Endpoint map for all the nodes in the cluster.
+     */

Review comment:
       Mmmm I will leave this one as it is so it aligns with the other javadocs in the class.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 06:16;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573474592



##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -72,7 +69,7 @@ public void testCreateKeyspaceTableWarning() throws IOException
 
         try (SimpleClient client = newSimpleClient(ProtocolVersion.CURRENT).connect(false))
         {
-            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'2'}"";
+            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'1'}"";

Review comment:
       I'd say yes, bc otherwise you get the `RF>N` extra warnings that make the test fail.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 06:17;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573476760



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       I am -1 bc it would break the semantics of a non-inited `ClientWarn` instance being non functional until now. If we do that change some methods will fail and others will work when not the instance is not inited. In any case I have no hard opinion here. I can do it if you guys prefer it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 06:23;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573476760



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       I am -1 bc it would break the semantics of a non-inited `ClientWarn` instance being non functional until now. If we do that change some methods will fail and others will work when the instance is not inited. In any case I have no hard opinion here. I can do it if you guys prefer it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 06:24;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573649242



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -75,8 +85,16 @@ public Keyspaces apply(Keyspaces schema)
             throw ire(""Unable to use given strategy class: LocalStrategy is reserved for internal use."");
 
         keyspace.params.validate(keyspaceName);
+        Keyspaces ksps = schema.withAddedOrUpdated(keyspace);

Review comment:
       I would also prefer `keyspaces` instead on `ksps`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 11:23;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573750635



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -17,7 +17,14 @@
  */
 package org.apache.cassandra.dht;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Properties;

Review comment:
       I am confused, marked as resolved but the import is still here? 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 14:03;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573759185



##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -72,7 +69,7 @@ public void testCreateKeyspaceTableWarning() throws IOException
 
         try (SimpleClient client = newSimpleClient(ProtocolVersion.CURRENT).connect(false))
         {
-            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'2'}"";
+            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'1'}"";

Review comment:
       Then why don't we just change the assertions around the warnings? So we don't change the idea of the test but assert on the right flow - like 1 warning and it is that specific one




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 14:15;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573759185



##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -72,7 +69,7 @@ public void testCreateKeyspaceTableWarning() throws IOException
 
         try (SimpleClient client = newSimpleClient(ProtocolVersion.CURRENT).connect(false))
         {
-            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'2'}"";
+            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'1'}"";

Review comment:
       Then why don't we just change the assertions around the warnings? So we don't change the idea of the test but assert on the right flow - like 1 warning and it is that specific one and not others




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 14:15;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573762270



##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -72,7 +69,7 @@ public void testCreateKeyspaceTableWarning() throws IOException
 
         try (SimpleClient client = newSimpleClient(ProtocolVersion.CURRENT).connect(false))
         {
-            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'2'}"";
+            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'1'}"";

Review comment:
       I'd argue the test was having RF:2 erroneously. Would you agree or you prefer I alter the asserts?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 14:19;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r573763206



##########
File path: src/java/org/apache/cassandra/dht/RangeStreamer.java
##########
@@ -17,7 +17,14 @@
  */
 package org.apache.cassandra.dht;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Properties;

Review comment:
       I changed the code locally but haven't pushed yet. I'm waiting for other 2 loose ends to resolve and then I push everything.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 14:20;githubbot;600","adelapena commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574054070



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       > Thx Andres for multiplexing it but running the method individually won't repro the issue. I get it, sometimes, only if running the whole class. It failed only 1 out of 20 for me today whereas it used to fail every time some days ago...
   
   The jobs above also include [100 runs](https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/691/) for the whole class. [Here](https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/692/) and [here](https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/693/) are two more runs of the whole class with 200 repetitions each. That totals 500 runs of the whole class without a single failure, so I'd say that definitely we can't reproduce it with the multiplexer.
   
   Unfortunately testing this with CircleCI is not that easy, but I have seen a few full unit tests runs that pass without the sleep:
   * https://app.circleci.com/pipelines/github/adelapena/cassandra/175/workflows/3432945a-05bc-40b4-93cf-607b1ce6566c/jobs/1291
   * https://app.circleci.com/pipelines/github/adelapena/cassandra/175/workflows/4a879181-921a-47bf-8cd3-a886fbb99fa7/jobs/1297
   * https://app.circleci.com/pipelines/github/adelapena/cassandra/175/workflows/a39779a1-e059-4d5c-9563-3de78d9bd864/jobs/1303
   * https://app.circleci.com/pipelines/github/adelapena/cassandra/175/workflows/544a5037-0261-49d0-b5c1-9dfdfac09bc5/jobs/1311
   * https://app.circleci.com/pipelines/github/adelapena/cassandra/175/workflows/1c58b779-7d80-4e79-b7d7-1b73aecc62b8/jobs/1314
   
   I guess that the (in)famous poll, if needed, doesn't have to be for `!warns.empty` but for whatever signals that `requireNetwork` has finished and therefore it's safe to use. Said that, if we still think that the test can fail without the wait and we don't want to spend more time investigating what's the condition that signals the finalization of `requireNetwork` I think I can live with the current sleep.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/21 20:29;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574232389



##########
File path: src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
##########
@@ -302,6 +310,36 @@ public void validateOptions() throws ConfigurationException
         }
     }
 
+    @Override
+    public void maybeWarnOnOptions()
+    {
+        if (!SchemaConstants.isSystemKeyspace(keyspaceName))
+        {
+            ImmutableMultimap<String, InetAddressAndPort> dcsNodes = StorageService.instance.getTokenMetadata()
+                                                                                            .getDC2AllEndpoints(snitch);
+            for (Entry<String, String> e : this.configOptions.entrySet())
+            {
+
+                String dc = e.getKey();
+                ReplicationFactor rf = getReplicationFactor(dc);
+                int nodeCount = dcsNodes.get(dc).size();
+                // nodeCount==0 on many tests

Review comment:
       Can you explain, please? 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 03:28;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574235644



##########
File path: test/unit/org/apache/cassandra/schema/CreateTableValidationTest.java
##########
@@ -72,7 +69,7 @@ public void testCreateKeyspaceTableWarning() throws IOException
 
         try (SimpleClient client = newSimpleClient(ProtocolVersion.CURRENT).connect(false))
         {
-            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'2'}"";
+            String createKeyspace = ""CREATE KEYSPACE createkswarning%d WITH REPLICATION={'class':'org.apache.cassandra.locator.NetworkTopologyStrategy','datacenter1':'1'}"";

Review comment:
       I prefer not to change it and to show just the newly added warnings and changed behavior.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 03:42;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574236972



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       My previous comment in AlterKeyspaceStatement stays - let's then change a bit the naming. Thanks :-)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 03:48;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574238101



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       If we don't extract to numWarnings function, I think we need to change the naming a bit.
   Size of warnings is better to be changed by num/number. Proposal:
   `previousNumWarnings` and `newNumWarnings`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 03:51;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574238101



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/AlterKeyspaceStatement.java
##########
@@ -62,6 +63,9 @@ public AlterKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs)
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       I think we need to change the naming a bit.
   Size of warnings is better to be changed by num/number. Proposal:
   `previousNumWarnings` and `newNumWarnings`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 04:02;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r574248460



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Validating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        node2 = cluster.nodelist()[1]
+        session = self.patient_exclusive_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        marks = map(lambda n: n.mark_log(), cluster.nodelist())
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True)
+        if cluster.version() >= '4.0':
+            warning = 'is higher than the number of nodes'
+            for (node, mark) in zip(cluster.nodelist(), marks):
+                assert len(node.grep_log(warning, from_mark=mark)) == 0
+

Review comment:
       While testing, I observed that node3 gets flooded with those. (not part of this patch but made me wonder....):
   ```
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,370 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.1:7000 is down.
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,371 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.2:7000 is down.
   ```
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 04:43;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r574248460



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Validating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        node2 = cluster.nodelist()[1]
+        session = self.patient_exclusive_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        marks = map(lambda n: n.mark_log(), cluster.nodelist())
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True)
+        if cluster.version() >= '4.0':
+            warning = 'is higher than the number of nodes'
+            for (node, mark) in zip(cluster.nodelist(), marks):
+                assert len(node.grep_log(warning, from_mark=mark)) == 0
+

Review comment:
       While testing, I observed that node3 gets flooded with those. (not part of this patch but made me wonder....):
   ```
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,370 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.1:7000 is down.
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,371 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.2:7000 is down.
   ```
   /cc @adelapena @tlasica 
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 04:43;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r574248460



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Validating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        node2 = cluster.nodelist()[1]
+        session = self.patient_exclusive_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        marks = map(lambda n: n.mark_log(), cluster.nodelist())
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True)
+        if cluster.version() >= '4.0':
+            warning = 'is higher than the number of nodes'
+            for (node, mark) in zip(cluster.nodelist(), marks):
+                assert len(node.grep_log(warning, from_mark=mark)) == 0
+

Review comment:
       While testing, I observed that node3 gets flooded with a lot of those(not part of this patch but made me wonder....):
   ```
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,370 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.1:7000 is down.
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,371 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.2:7000 is down.
   ```
   /cc @adelapena @tlasica 
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 04:44;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r574248460



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Validating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        node2 = cluster.nodelist()[1]
+        session = self.patient_exclusive_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        marks = map(lambda n: n.mark_log(), cluster.nodelist())
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True)
+        if cluster.version() >= '4.0':
+            warning = 'is higher than the number of nodes'
+            for (node, mark) in zip(cluster.nodelist(), marks):
+                assert len(node.grep_log(warning, from_mark=mark)) == 0
+

Review comment:
       While testing, I observed that node3 gets flooded with a lot of those(not part of this patch but made me wonder why so many....):
   ```
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,370 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.1:7000 is down.
   WARN  [MigrationStage:1] 2021-02-10 23:32:53,371 MigrationCoordinator.java:429 - Can't send schema pull request: node /127.0.0.2:7000 is down.
   ```
   /cc @adelapena @tlasica 
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 04:45;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574266219



##########
File path: src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
##########
@@ -302,6 +310,36 @@ public void validateOptions() throws ConfigurationException
         }
     }
 
+    @Override
+    public void maybeWarnOnOptions()
+    {
+        if (!SchemaConstants.isSystemKeyspace(keyspaceName))
+        {
+            ImmutableMultimap<String, InetAddressAndPort> dcsNodes = StorageService.instance.getTokenMetadata()
+                                                                                            .getDC2AllEndpoints(snitch);
+            for (Entry<String, String> e : this.configOptions.entrySet())
+            {
+
+                String dc = e.getKey();
+                ReplicationFactor rf = getReplicationFactor(dc);
+                int nodeCount = dcsNodes.get(dc).size();
+                // nodeCount==0 on many tests

Review comment:
       Tests that don't set up a complete cluster with network, gossip, etc will return the number of available nodes as '0', which makes sense but only for a testing env where things are half-baked.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 06:01;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574270782



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java
##########
@@ -269,6 +276,63 @@ public void testCreateAlterKeyspaces() throws Throwable
                                   ""max_threshold"", ""32"")));
     }
 
+    @Test
+    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
+    {
+        requireNetwork();
+        Thread.sleep(1000); // Hack: requireNetwork() will clear warnings async so give some time to complete

Review comment:
       > doesn't have to be for !warns.emptybut for whatever signals that requireNetwork has finished
   
   That is _exactly_ the point I was trying to make. Thx for summarizing it. I am happy to either remove the Sleep or leave it. You guys let me know what you prefer.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 06:18;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574275407



##########
File path: src/java/org/apache/cassandra/cql3/statements/schema/CreateKeyspaceStatement.java
##########
@@ -56,6 +62,10 @@ public CreateKeyspaceStatement(String keyspaceName, KeyspaceAttributes attrs, bo
 
     public Keyspaces apply(Keyspaces schema)
     {
+        if (ClientWarn.instance.get() == null)
+            ClientWarn.instance.captureWarnings();
+        int previousWarningsSize = ClientWarn.instance.getWarnings() == null ? 0 : ClientWarn.instance.getWarnings().size();

Review comment:
       Added `numWarnings()`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 06:35;githubbot;600","bereng commented on a change in pull request #870:
URL: https://github.com/apache/cassandra/pull/870#discussion_r574275745



##########
File path: src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java
##########
@@ -302,6 +310,36 @@ public void validateOptions() throws ConfigurationException
         }
     }
 
+    @Override
+    public void maybeWarnOnOptions()
+    {
+        if (!SchemaConstants.isSystemKeyspace(keyspaceName))
+        {
+            ImmutableMultimap<String, InetAddressAndPort> dcsNodes = StorageService.instance.getTokenMetadata()
+                                                                                            .getDC2AllEndpoints(snitch);
+            for (Entry<String, String> e : this.configOptions.entrySet())
+            {
+
+                String dc = e.getKey();
+                ReplicationFactor rf = getReplicationFactor(dc);
+                int nodeCount = dcsNodes.get(dc).size();
+                // nodeCount==0 on many tests

Review comment:
       Btw that is why we require `requireNetwork()` on the newly added test in `AlterTest`. Otherwise the test sees 0 nodes and no warnings are generated.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 06:37;githubbot;600","bereng commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r574278761



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Validating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        node2 = cluster.nodelist()[1]
+        session = self.patient_exclusive_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        marks = map(lambda n: n.mark_log(), cluster.nodelist())
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True)
+        if cluster.version() >= '4.0':
+            warning = 'is higher than the number of nodes'
+            for (node, mark) in zip(cluster.nodelist(), marks):
+                assert len(node.grep_log(warning, from_mark=mark)) == 0
+

Review comment:
       Maybe we could use the no spam logger?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 06:47;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-777283675


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/214/workflows/72274821-ae12-4e27-b6fd-200ced9e3ae8)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/214/workflows/1502bc7a-877d-441f-99e8-f172959fe7df)
   
   CI LGTM


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 08:46;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#discussion_r574519926



##########
File path: bootstrap_test.py
##########
@@ -280,6 +280,55 @@ def test_consistent_range_movement_true_with_rf1_should_fail(self):
     def test_consistent_range_movement_false_with_rf1_should_succeed(self):
         self._bootstrap_test_with_replica_down(False, rf=1)
 
+    def test_rf_gt_nodes_multidc_should_succeed(self):
+        """"""
+        Validating a KS with RF > N on multi DC doesn't break bootstrap
+        @jira_ticket CASSANDRA-16296 CASSANDRA-16411
+        """"""
+        cluster = self.cluster
+        cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True')
+        cluster.populate([1, 1])
+        cluster.start()
+
+        node1 = cluster.nodelist()[0]
+        node2 = cluster.nodelist()[1]
+        session = self.patient_exclusive_cql_connection(node1)
+        session.execute(""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'}"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 3 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        session.execute(""ALTER KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '2'}"")
+        session.execute(""CREATE TABLE k.testgtrfmultidc (KEY text PRIMARY KEY)"")
+        session.execute(""INSERT INTO k.testgtrfmultidc (KEY) VALUES ('test_rf_gt_nodes_multidc_should_succeed')"")
+
+        if cluster.version() >= '4.0':
+            warning = 'Your replication factor 2 for keyspace k is higher than the number of nodes 1 for datacenter dc1'
+            assert len(node1.grep_log(warning)) == 1
+            assert len(node2.grep_log(warning)) == 0
+
+        marks = map(lambda n: n.mark_log(), cluster.nodelist())
+        node3 = Node(name='node3',
+                     cluster=cluster,
+                     auto_bootstrap=True,
+                     thrift_interface=('127.0.0.3', 9160),
+                     storage_interface=('127.0.0.3', 7000),
+                     jmx_port='7300',
+                     remote_debug_port='0',
+                     initial_token=None,
+                     binary_interface=('127.0.0.3', 9042))
+        cluster.add(node3, is_seed=False, data_center=""dc1"")
+        node3.start(wait_for_binary_proto=True)
+        if cluster.version() >= '4.0':
+            warning = 'is higher than the number of nodes'
+            for (node, mark) in zip(cluster.nodelist(), marks):
+                assert len(node.grep_log(warning, from_mark=mark)) == 0
+

Review comment:
       I was also wondering about that




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/21 13:57;githubbot;600","bereng commented on pull request #870:
URL: https://github.com/apache/cassandra/pull/870#issuecomment-778973509


   Squashed
   - CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/216/workflows/f479b643-7503-4d2d-adca-74ad048c7bed)
   - CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/216/workflows/9b0a1a6a-0dda-41b5-a52a-5e75b5b8e911)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/21 06:13;githubbot;600","michaelsembwever commented on pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117#issuecomment-782605719


   Merged with https://github.com/apache/cassandra-dtest/commit/493ddae492a9a9a47bc484a7dfa75ef86fd3d9b8


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/21 10:54;githubbot;600","michaelsembwever closed pull request #117:
URL: https://github.com/apache/cassandra-dtest/pull/117


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/21 10:54;githubbot;600","bereng closed pull request #870:
URL: https://github.com/apache/cassandra/pull/870


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Feb/21 05:52;githubbot;600",,0,70800,,,0,70800,,,,,,,,,CASSANDRA-16411,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-5953,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Feb 18 11:53:34 UTC 2021,,,,,,,All,,,,,,"0|z0ktoo:",9223372036854775807,,,,adelapena,e.dimitrova,tomasz.lasica,,Critical,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/87e4f31e30f6a89f1c17b5a9eb6406208e384d51 https://github.com/apache/cassandra-dtest/commit/493ddae492a9a9a47bc484a7dfa75ef86fd3d9b8,,,,,,,,,See PR,,,,,"24/Nov/20 16:09;yakir.g;Hi [~aweisberg], any ideas? ;;;","24/Nov/20 16:28;yakir.g;Update, we have found the root cause, we added a keyspace with RF=3 but we had only 2 nodes in DC and join the 3rd node failed.
I think that:
# Create keyspace should fail if RF>""number of nodes in DC"".
# The exception thrown wasn't clear.

ALTER the keyspace to RF=2 solved the issue.;;;","03/Dec/20 22:38;dcapwell;have you repeated the process on 3.x line? How did you ""join"" with the new node? Was this upgrading the cluster or creating a new one?;;;","03/Dec/20 22:43;yakir.g;Hi [~dcapwell] , 
""have you repeated the process on 3.x line? How did you ""join"" with the new node? ""
I tried to join few times from different hosts, all join failed, with simple ""systemctl start cassandra""
"" Was this upgrading the cluster or creating a new one?""
Fresh cluster of version 4 without any data.;;;","03/Dec/20 23:13;dcapwell;Thanks for the details!;;;","03/Dec/20 23:42;yakir.g;I just change the following keyspace from RF 3 to 2 on the DC that i tried to join and it's solved the issue:
{code}
CREATE KEYSPACE ks WITH replication = {'class': 'NetworkTopologyStrategy', 'V4C': '3', 'V4N': '3'}  AND durable_writes = true;
{code};;;","12/Jan/21 05:08;bereng;[~blerer] do you mind I take this one or do you have sthg in mind already?;;;","12/Jan/21 08:59;blerer;[~Bereng] Feel free to take it. I let my backlog grow to big :-);;;","12/Jan/21 14:42;brandon.williams;bq. Create keyspace should fail if RF>""number of nodes in DC"".

No, we allow this on purpose because some people like to create the keyspace first for whatever operational reasons.;;;","12/Jan/21 15:02;blerer;{quote} No, we allow this on purpose because some people like to create the keyspace first for whatever operational reasons. {quote}

What about firing a warning? I guess it does not hurt to warn the user.;;;","12/Jan/21 15:57;brandon.williams;bq. What about firing a warning?

+1.  It also won't fire very often, so quite benign.;;;","14/Jan/21 10:48;bereng;I added the warning but I haven't managed to repro:

A. Start node1:
{noformat}
bin/nodetool status
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load      Tokens  Owns (effective)  Host ID                               Rack 
UN  127.0.0.1  68.9 KiB  16      ?                 ccc4653e-14df-4688-a340-3564e344ddd9  rack1
{noformat}
B. Create a KS with RF > N:
{noformat}
[cqlsh 5.0.1 | Cassandra 4.0-beta5-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]
Use HELP for help.
cqlsh> CREATE KEYSPACE ks1 WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter1': '2'};

Warnings :
Your replication factor 2 is higher than the number of nodes 1 for datacenter: datacenter1
{noformat}
C. Start node2 and wait for the node to join
{noformat}
bin/nodetool status
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack 
UJ  127.0.0.2  83.11 KiB  16      ?                 6ed6685f-9d1f-4e6d-abb4-fba194bae37b  rack1
UN  127.0.0.1  74.01 KiB  16      ?                 ccc4653e-14df-4688-a340-3564e344ddd9  rack1


bin/nodetool status
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack 
UN  127.0.0.2  93.29 KiB  16      ?                 6ed6685f-9d1f-4e6d-abb4-fba194bae37b  rack1
UN  127.0.0.1  79.06 KiB  16      ?                 ccc4653e-14df-4688-a340-3564e344ddd9  rack1
{noformat}
D. Node2 does have a WARN in logs {{Your replication factor 2 is higher than the number of nodes 1 for datacenter: datacenter1}}.

E. Creating a new KS doesn't trigger the warning message:
{noformat}
cqlsh> CREATE KEYSPACE ks2 WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter1': '2'};
cqlsh> 
{noformat}

I am not being able to repro. These are 2 fresh nodes with no data and just calling 'bin/cassandra -f' to start them up.
Any help appreciated :-);;;","14/Jan/21 15:20;brandon.williams;bq. Node2 does have a WARN in logs

Why?  I'm not sure if all nodes should have a warning or just the one that received the creation request, but either way isn't it the second node?

;;;","14/Jan/21 16:40;bereng;Atm the warning is on the replication strategy options validation so every time that KS/strategy gets validated it triggers that warning. But we can change that. I'm more worried about reproducing the new node's failure to start.;;;","18/Jan/21 10:53;bereng;Lacking repro for the node failure to start I am moving into review the warn message bit.;;;","19/Jan/21 17:12;adelapena;[~Bereng] I think the failure adding the node can be reproduced using multiple datacenters and transient replication:
{code}
ccm create test --install-dir=$CASSANDRA_DIR
ccm populate -n 2:2
ccm start

cqlsh -e ""CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3/1'};""

ccm add node5 -i 127.0.0.5 -j 7500 -b -d dc1
ccm node5 start

# wait ~1m for gossip to settle and pending range setup
cat .ccm/test/node5/logs/system.log # contains errors
ccm node1 status # node5 hasn't joined
{code}
If this is a problem exclusive of transient replication we might consider not blocking 4.0 because of it, since transient replication is an experimental feature, wdyt?

As for the warning, I think it's a nice improvement, although I still have to review the PR.;;;","20/Jan/21 06:18;bereng;Mmm seems to repro on multi-dc even without transient replication, that's the bit I was missing. I am surprised this didn't come up earlier...:

{noformat}
cqlsh> CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3/1'};
ConfigurationException: Transient replication is not enabled on this node
cqlsh> CREATE KEYSPACE k WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : '3'};
cqlsh>

java.lang.IllegalStateException: Multiple strict sources found for Full(/127.0.0.5:7000,(5604327680958034513,-9223372036854775808]), sources: [Full(/127.0.0.1:7000,(100,-9223372036854775808]), Full(/127.0.0.2:7000,(100,-9223372036854775808])]
{noformat};;;","20/Jan/21 12:22;adelapena;Right, it seems that the problem was introduced with transient replication changes but it also happens on multi-DC without transient nodes and with transient replication disabled. I've confirmed that the problematic use case works in 3.11 and 3.0.;;;","20/Jan/21 16:25;bereng;I'm pinning it down atm at the strict consistency logic not being dc-aware. I hope to push sthg tomorrow or the next day.;;;","26/Jan/21 11:35;bereng;It's taken much longer than I expected due to ccm/dtests issues I've found I am planning opening a ticket for.;;;","01/Feb/21 05:14;bereng;Dropping a note for clarification to reviewers and [~edimitrova]. We neeed 16411 merged and then we can add 1 or 2 loc here to improve the the testing. But both are ready for review aside that minor.;;;","01/Feb/21 17:22;e.dimitrova;Thanks [~Bereng], as we talked, I think it is worth it to see both patches in a combined CI run. Thank you for all your efforts!;;;","02/Feb/21 08:26;bereng;[~e.dimitrova] as on CASSANDRA-16411 we decided for a different approach I added the utests there so we no longer need to consolidate them :-);;;","02/Feb/21 15:45;adelapena;The fix (and test) for the problem when joining a new node looks good to me, +1.

Regarding the client warning, I'm finding that it sticks for the session, so every {{CREATE KEYSPACE}} statement will emit all the previous warnings:
{code:java}
CREATE KEYSPACE k1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2}; # warn about k1
CREATE KEYSPACE k2 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};; # warn about k1 again
{code}
This is more surprising when we try to fix the problem reducing the RF:
{code:java}
CREATE KEYSPACE k WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2}; # warn about k1
ALTER KEYSPACE k WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}; # warn about k1 again
{code}
As for the warning message in logs, I see that when we create a keyspace with a RF lesser than the number of nodes the warning will be emitted twice in every node. Also, every schema altering statement will emit the warning again in every node:
{code:java}
CREATE KEYSPACE k WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2}; # 2 warnings
CREATE TABLE k.t (k int PRIMARY KEY, v int); # 1 warning
ALTER TABLE k.t ADD v2 int; # 1 warning
{code}
This behaviour can be seen in the provided dtest, [here|https://github.com/apache/cassandra-dtest/blob/d9287666b80864165e48a37bb76640c16f084dc7/bootstrap_test.py#L301-L302]. I don't think this is wrong and indeed is the common behaviour for keyspace properties validation. However, I understand that having a RF lesser than the number of nodes is legitimate and the warning is just a friendly advice to prevent accidents, so perhaps we might consider warning only once, at keyspace creation time. I think we could do that by moving the warning emission from {{AbstractReplicationStrategy#validateOptions}} to a new separate abstract method in {{AbstractReplicationStrategy}}, and calling that method from {{AbstractReplicationStrategy.validateReplicationStrategy}}, but not from {{AbstractReplicationStrategy#createReplicationStrategy}}, if that makes sense. wdyt?

Finally, the new client warning can also be emitted by {{ALTER KEYSPACE}}, we could add a test to verify it.

 ;;;","03/Feb/21 06:42;bereng;The sticky message is a bug indeed. But the creation vs validation vs multi-node warn logging is sthg I thought about and decided to be noisy about it. I have mixed feelings as it is indeed a correct scenario if you are intending to do so. But it's not pretty if you do that by accident :thinking:  I don't like either solution so I'll be happy to take yours. Anybody else having an opinion please chime in :-);;;","12/Feb/21 16:45;e.dimitrova;I believe all concerns were addressed already?

Can we squash and run last CI run?;;;","15/Feb/21 06:14;bereng;Done. Links in PR :-);;;","15/Feb/21 12:22;adelapena;CircleCI runs look good to me, Jenkins is running [here|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch/382/]. I think that if that looks good and [~tomasz.lasica] approves the last changes we'll be ready commit.;;;","16/Feb/21 04:26;bereng;Seems jenkins failed for some reason and needs restarting...;;;","16/Feb/21 04:26;bereng;Seems jenkins failed for some reason and needs restarting...;;;","16/Feb/21 11:26;adelapena;Trying with separate components:

* [utest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/232/]
* [jvm-dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/223/]
* [jvm-dtest-upgrade|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/222/]
* [python-dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/396/]
* [cqlsh-test|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-cqlsh-tests/511/];;;","17/Feb/21 08:27;tomasz.lasica;+1 on the code;;;","17/Feb/21 17:22;adelapena;It seems many of the Jenkins tasks above have failed, so I have restarted them:
 * [utest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/233/]
 * [jvm-dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/225/]
 * [jvm-dtest-upgrade|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/224]
 * [python-dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/402/]

Unit tests are clean and the failures in jvm-dtests seem due to the environment. In the JVM upgrade dtests there is [a failure in {{CompactStorageUpgradeTest.compactStoragePagingTest}}|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/224/jdk=jdk_1.8_latest,label=cassandra/testReport/junit/org.apache.cassandra.distributed.upgrade/CompactStorageUpgradeTest/compactStoragePagingTest/] that seems to go away after rebasing the PR to {{trunk}}.

As for Python dtests, there are [multiple tests|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/402/#showFailuresLink] failing with the error message added by CASSANDRA-16411 ({{Please specify the DC this node should be added to}}), I'm not sure why we aren't seeing those errors on the CircleCI runs provided in the PR.;;;","17/Feb/21 17:45;e.dimitrova;I think the dtest branch is not rebased;;;","17/Feb/21 18:57;adelapena;bq. I think the dtest branch is not rebased

Makes sense. I have copied both branches and rebased them without conflicts, and now Python dtests are clean as a whistle:

* [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/186/workflows/88206db3-bff4-4c04-b1e2-45ffefef4e60]
* [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/186/workflows/51aa9a8b-44c8-4b5d-a162-c8b9225f5504]
* [utest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/234/]
* [dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/403/]
* [jvm-test|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/226/]
* [jvm-test-upgrade|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/225/]

Some jobs haven't finished yet, if they look good when they finish I will proceed to commit the changes.;;;","17/Feb/21 20:33;e.dimitrova;Thanks [~adelapena], the results look good to me, +1;;;","18/Feb/21 05:21;bereng;Thx guys for all the hard work getting these 2 tickets through review;;;","18/Feb/21 11:53;adelapena;Patch committed to {{trunk}} as [87e4f31e30f6a89f1c17b5a9eb6406208e384d51,|https://github.com/apache/cassandra/commit/87e4f31e30f6a89f1c17b5a9eb6406208e384d51] dtest committed as [493ddae492a9a9a47bc484a7dfa75ef86fd3d9b8|https://github.com/apache/cassandra-dtest/commit/493ddae492a9a9a47bc484a7dfa75ef86fd3d9b8].;;;",,,,,,,,,
Potential NPE in JVMStabilityInspector,CASSANDRA-16294,13341817,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,samt,samt,20/Nov/20 16:56,03/Jan/21 16:58,13/Jul/23 08:39,23/Nov/20 15:37,3.0.24,3.11.10,4.0,4.0-beta4,,Legacy/Core,,,,0,,,,"On either a FileNotFoundException or SocketException, JVMStabilityInspector checks the error message for the string ""Too many open files"". However, both of these exceptions have a constructor which sets a null message, which can lead to NPE if handled.",,dcapwell,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Nov 23 15:37:34 UTC 2020,,,,,,,All,,,,,,"0|z0ksmg:",9223372036854775807,,,,dcapwell,,,,Low,,3.0.0,,,https://github.com/apache/cassandra/commit/068d87acfbdf384f883ca17895c40a7a36a507b0,,,,,,,,,Extended JVMStabilityInspectorTest,,,,,"20/Nov/20 17:04;samt;||branch||CI||
|[16294-3.0|https://github.com/beobal/cassandra/tree/16294-3.0]|[circle|https://circleci.com/gh/beobal/cassandra?branch=16294-3.0]|
|[16294-3.11|https://github.com/beobal/cassandra/tree/16294-3.11]|[circle|https://circleci.com/gh/beobal/cassandra?branch=16294-3.11]|
|[16294-trunk|https://github.com/beobal/cassandra/tree/16294-trunk]|[circle|https://circleci.com/gh/beobal/cassandra?branch=16294-trunk]|
;;;","20/Nov/20 18:52;dcapwell;LGTM +1;;;","23/Nov/20 15:37;samt;Thanks, committed to 3.0 in {{068d87acfbdf384f883ca17895c40a7a36a507b0}} and merged to 3.11 & trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky NodeToolRingTest,CASSANDRA-16293,13341768,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,20/Nov/20 10:56,24/Feb/21 05:59,13/Jul/23 08:39,20/Nov/20 13:50,4.0,4.0-beta4,,,,Test/unit,,,,0,,,,"NodeToolRingTest is [failing|https://ci-cassandra.apache.org/job/Cassandra-trunk/162/testReport/junit/org.apache.cassandra.distributed.test/NodeToolRingTest/testRingResolve/history/] every now and then. Depending on where it gets executed the host name resolves to localhost or to localhost.localdomain",,bereng,,,,,,,,,,,"bereng opened a new pull request #830:
URL: https://github.com/apache/cassandra/pull/830


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 11:04;githubbot;600","bereng commented on pull request #830:
URL: https://github.com/apache/cassandra/pull/830#issuecomment-731123515


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/183/workflows/976d6d67-bbc8-4a5a-bfe4-230e168a4c00)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/183/workflows/bfc94e7f-ac41-456e-9d60-f185f02d59f9)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 11:48;githubbot;600","bereng closed pull request #830:
URL: https://github.com/apache/cassandra/pull/830


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Feb/21 05:59;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 20 13:50:58 UTC 2020,,,,,,,All,,,,,,"0|z0ksbk:",9223372036854775807,,,,brandon.williams,,,,Low,,4.0-beta2,,,https://github.com/apache/cassandra/commit/732ac9ae0c5e8c0868d207dbece5067d0bd4029d,,,,,,,,,See PR,,,,,"20/Nov/20 13:50;brandon.williams;Also no guarantee that hostname resolution works at all.  Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Include test jars in dtest uber jar,CASSANDRA-16288,13341621,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,19/Nov/20 16:14,19/Nov/20 22:05,13/Jul/23 08:39,19/Nov/20 22:05,NA,,,,,Test/dtest/java,,,,0,,,,"Add reflections and javassist jars to 4.0 (trunk) lib directory, since they're required for dtest uberjar.",,dcapwell,ifesdjeen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Packaging -> Package Distribution,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Nov 19 21:27:21 UTC 2020,,,,,,,All,,,,,,"0|z0krew:",9223372036854775807,,,,dcapwell,,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/2a135cad6d3e0e78aaeb60939161c951b262b2cc,,,,,,,,,tested manually ,,,,,"19/Nov/20 16:22;ifesdjeen;|[patch|https://github.com/ifesdjeen/cassandra/pull/new/CASSANDRA-16288-trunk]| ;;;","19/Nov/20 18:54;dcapwell;rather than add to libs, can we figure out why the uber jar isn't pulling in test dependencies properly?;;;","19/Nov/20 18:57;dcapwell;{code}
<path id=""cassandra.classpath.test"">
  <file file=""${build.dir}/${final.name}.jar""/>
  <!-- we need the jar for tests and benchmarks (multi-version jar) -->
  <fileset dir=""${build.lib}"">
    <include name=""**/*.jar""/>
    <exclude name=""**/*-sources.jar""/>
    <exclude name=""**/ant-*.jar""/>
  </fileset>
  <fileset dir=""${build.dir.lib}"">
    <include name=""**/*.jar""/>
    <exclude name=""**/*-sources.jar""/>
    <exclude name=""**/ant-*.jar""/>
  </fileset>
</path>
{code}

vs

{code}
<target name=""dtest-jar"" depends=""build-test, build"" description=""Create dtest-compatible jar, including all dependencies"">
  <jar jarfile=""${build.dir}/dtest-${base.version}.jar"">
    <zipgroupfileset dir=""${build.lib}"" includes=""*.jar"" excludes=""META-INF/*.SF""/>
    <fileset dir=""${build.classes.main}""/>
    <fileset dir=""${test.classes}""/>
    <fileset dir=""${test.conf}""/>
  </jar>
</target>
{code}

Looks like we are only adding the src jars not the test jars, can we include the test jars?;;;","19/Nov/20 19:02;dcapwell;tested this patch

{code}
diff --git a/build.xml b/build.xml
index 58704ef656..94792f525d 100644
--- a/build.xml
+++ b/build.xml
@@ -2089,6 +2089,7 @@
   <target name=""dtest-jar"" depends=""build-test, build"" description=""Create dtest-compatible jar, including all dependencies"">
       <jar jarfile=""${build.dir}/dtest-${base.version}.jar"">
           <zipgroupfileset dir=""${build.lib}"" includes=""*.jar"" excludes=""META-INF/*.SF""/>
+          <zipgroupfileset dir=""${build.dir.lib}/jars"" includes=""*.jar"" excludes=""META-INF/*.SF""/>
           <fileset dir=""${build.classes.main}""/>
           <fileset dir=""${test.classes}""/>
           <fileset dir=""${test.conf}"" />
{code}

and got

{code}
$ jar -tf build/dtest-4.0-beta4.jar | grep Reflections
org/reflections/Reflections.class
org/reflections/ReflectionsException.class
{code};;;","19/Nov/20 19:08;ifesdjeen;Even better; +1, I think we should merge your suggested solution.;;;","19/Nov/20 19:46;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16288-trunk-E7F2920C-4E5B-4B83-B252-63057FA88F0A]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16288-trunk-E7F2920C-4E5B-4B83-B252-63057FA88F0A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/223/]|
;;;","19/Nov/20 20:24;dcapwell;causes 

{code}
Caused by: java.lang.ClassNotFoundException: org.apache.cassandra.distributed.impl.IsolatedExecutor
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
{code}

in upgrade tests, will look into it;;;","19/Nov/20 21:27;dcapwell;there is a lot of jars in build/lib/jars and for some reason adding them causes the class to fail to load properly in the 4.0 class loader, I switched to only include the 2 jars [~ifesdjeen] attempted to add to lib, this passed locally so pushed to trigger CI.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make TokenMetadata's ring version increments atomic,CASSANDRA-16286,13341440,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,18/Nov/20 21:18,16/Mar/22 15:21,13/Jul/23 08:39,01/Feb/21 17:47,2.2.20,3.0.25,3.11.11,4.0,4.0-rc1,Cluster/Gossip,,,,0,,,,"The update semantics of the ring version in {{TokenMetadata}} are not clear. The instance variable itself is {{volatile}}, but it is still incremented by a non-atomic check-and-set, and not all codepaths do that while holding the {{TokenMetadata}} write lock. We could make this more intelligible by forcing the external callers to use both the write when invalidating the ring and read lock when reading the current ring version. Most of the readers of the ring version (ex. compaction) don't need it to be fast, but it shouldn't be a problem even if they do. If we do this, we should be able to avoid a situation where concurrent invalidations don't produce two distinct version increments.",,adelapena,cscotta,maedhroz,yifanc,,,,,,,,"maedhroz opened a new pull request #877:
URL: https://github.com/apache/cassandra/pull/877


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/21 21:53;githubbot;600","maedhroz commented on pull request #877:
URL: https://github.com/apache/cassandra/pull/877#issuecomment-768602397


   https://app.circleci.com/pipelines/github/maedhroz/cassandra/209/workflows/29bfe1cd-ac44-45a6-9c92-9ed983ffe858


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/21 21:54;githubbot;600","maedhroz opened a new pull request #878:
URL: https://github.com/apache/cassandra/pull/878


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/21 21:59;githubbot;600","maedhroz commented on pull request #878:
URL: https://github.com/apache/cassandra/pull/878#issuecomment-768606680


   https://app.circleci.com/pipelines/github/maedhroz/cassandra/211/workflows/30913013-6c53-4a83-9bc7-b7c5efaac959


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/21 21:59;githubbot;600","maedhroz opened a new pull request #879:
URL: https://github.com/apache/cassandra/pull/879


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/21 22:08;githubbot;600","maedhroz commented on pull request #879:
URL: https://github.com/apache/cassandra/pull/879#issuecomment-768611785


   j8: https://app.circleci.com/pipelines/github/maedhroz/cassandra/213/workflows/1fe56afa-08d6-4925-9fe0-1f2c5c58b2b0
   
   j11: https://app.circleci.com/pipelines/github/maedhroz/cassandra/213/workflows/995b87ca-eab0-4dac-85e4-53262eb98685


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/21 22:09;githubbot;600","maedhroz opened a new pull request #882:
URL: https://github.com/apache/cassandra/pull/882


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Jan/21 18:45;githubbot;600","maedhroz commented on pull request #882:
URL: https://github.com/apache/cassandra/pull/882#issuecomment-769294866


   https://app.circleci.com/pipelines/github/maedhroz/cassandra/214/workflows/01ceec1c-19ec-477e-87ba-480455194780


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Jan/21 18:45;githubbot;600","smiklosovic closed pull request #879:
URL: https://github.com/apache/cassandra/pull/879


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:16;githubbot;600","smiklosovic closed pull request #877:
URL: https://github.com/apache/cassandra/pull/877


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:20;githubbot;600","smiklosovic closed pull request #882:
URL: https://github.com/apache/cassandra/pull/882


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:21;githubbot;600","smiklosovic closed pull request #878:
URL: https://github.com/apache/cassandra/pull/878


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7200,,,0,7200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Feb 01 17:44:30 UTC 2021,,,,,,,All,,,,,,"0|z0kqaw:",9223372036854775807,,,,adelapena,yifanc,,,Normal,,1.2.13,,,https://github.com/apache/cassandra/commit/d3e48e4e00b1e8bd45e0694c5a8d9a0e941fa985,,,,,,,,,The patch adds a test that would be *almost* guaranteed to fail if the ring invalidation ever became unsafe.,,,,,"21/Jan/21 23:54;cscotta;[~maedhroz] Would it be reasonable to target this for 4.0.x?;;;","22/Jan/21 02:25;maedhroz;[~cscotta] I know this has been a potential problem for years (and certainly before 4.0), but I'd like to try to throw a patch together first to see if it's as simple as I think it is. If I don't get around to it by the end of the month, I won't argue against pushing it to an early 4.0.x release.;;;","27/Jan/21 22:16;maedhroz;|3.0|[patch|https://github.com/apache/cassandra/pull/877]|[Circle j8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/209/workflows/29bfe1cd-ac44-45a6-9c92-9ed983ffe858]|n/a|
|3.11|[patch|https://github.com/apache/cassandra/pull/878]|[Circle j8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/211/workflows/30913013-6c53-4a83-9bc7-b7c5efaac959]|n/a|
|trunk|[patch|https://github.com/apache/cassandra/pull/879]|[Circle j8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/213/workflows/1fe56afa-08d6-4925-9fe0-1f2c5c58b2b0]|[Circle j11|https://app.circleci.com/pipelines/github/maedhroz/cassandra/213/workflows/995b87ca-eab0-4dac-85e4-53262eb98685]|
;;;","28/Jan/21 05:21;yifanc;Thanks for the patches!

The test (added in the patch) can easily produce the race w/o applying the patch. 

The patch makes sure 'ringVersion' is guarded by read/write lock accordingly in all the code paths. 

+1 on all branches. 

 ;;;","28/Jan/21 18:29;adelapena;The patches also look good to me. It seems that the bug also affects 2.1 and 2.2. I'm not sure if the bug is critical enough to go in 2.1, but probably we should apply it to 2.2 even when we are very close to its end of support with 4.0 release. The patch seems to apply cleanly to older branches, we'd only have to be careful to replace the lambda function in the test by a classic anonymous class. wdyt?;;;","28/Jan/21 18:45;maedhroz;[~adelapena] Check out [https://github.com/apache/cassandra/pull/882]

(Note: Not sure what happened to {{testDateCompatibility - org.apache.cassandra.cql3.validation.entities.TypeTest}}, but it almost certainly doesn't have anything to do with this patch...);;;","28/Jan/21 18:55;adelapena;Excellent, +1;;;","28/Jan/21 21:25;maedhroz;The only really interesting test failure I can see is [mixedModeReadColumnSubsetDigestCheck - org.apache.cassandra.distributed.upgrade.MixedModeReadTest|https://app.circleci.com/pipelines/github/maedhroz/cassandra/213/workflows/1fe56afa-08d6-4925-9fe0-1f2c5c58b2b0/jobs/1172]. Throwing up a rerun [here|https://app.circleci.com/pipelines/github/maedhroz/cassandra/213/workflows/8b236d60-7c4b-4ab4-a4d3-24f864564416].

[~adelapena] Mind starting a Jenkins run against these branches? Otherwise, seems like we're ready to commit.;;;","28/Jan/21 22:18;yifanc;+1 on the patch to 2.2.

The failed tests from CI do not look related to the patch. Some failed tests are known flaky and have tickets opened. I am also unable to reproduce the failure from testDateCompatibility and I agree that the test has nothing to do with the patch.;;;","28/Jan/21 23:13;adelapena;bq. Andres de la Peña Mind starting a Jenkins run against these branches? Otherwise, seems like we're ready to commit.

Sure:
||branch||utest||java-dtest||python-dtest||java-dtest-upgrade||
|2.2|​[202|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/202/]|[195|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/195/]​|[353|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/353/]​|[202|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/202/]​|
|3.0|​[203|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/203/]|[196|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/196/]​|[354|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/354/]​​|[201|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/201/]​|
|3.11|​[204|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/204/]|[197|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/197/]​|​[355|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/355/]​|[200|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/200/]​|
|4.0|​[205|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/205/]|[198|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/198/]​|​[356|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/356/]​|[199|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/199/]​|;;;","01/Feb/21 17:44;adelapena;Committed to cassandra-2.2 as [d3e48e4e00b1e8bd45e0694c5a8d9a0e941fa985|https://github.com/apache/cassandra/commit/d3e48e4e00b1e8bd45e0694c5a8d9a0e941fa985] and merged up to trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Too defensive check when picking sstables for preview repair,CASSANDRA-16284,13341359,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,18/Nov/20 14:32,25/Feb/21 10:25,13/Jul/23 08:39,18/Jan/21 08:33,4.0,4.0-rc1,,,,Consistency/Repair,,,,0,,,,We fail starting any preview repair if any sstable is marked pending but the session not being finalized. The current check does not care if the range we are previewing intersects with the sstable marked pending - this means that we abort too many preview repairs.,,aholmber,e.dimitrova,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jan 18 08:33:36 UTC 2021,,,,,,,All,,,,,,"0|z0kpsw:",9223372036854775807,,,,aholmber,e.dimitrova,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/0e059c42f298686d6a219b4bc0b7973652f4183d,,,,,,,,,"cci run, new jvm dtest",,,,,"18/Nov/20 14:37;marcuse;patch to apply the predicate after checking range intersection:

patch: https://github.com/krummas/cassandra/commits/marcuse/16284
cci: https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F16284;;;","02/Dec/20 19:16;aholmber;Reviewed; +1 patch (non-committer). Nice test.

The one question I had was on an apparently unrelated change [removing the sleep|https://github.com/aholmberg/cassandra/pull/19/commits/7116fdac97f61be92109269bcf48e28c82345c38#diff-d59b698a42b1c23cd68888e27f5ddcb5b112ad80a9c53a61e4561a421e55ebd2L295]. It's not totally clear why it was there in the first place. Do you know why, or if something changed?;;;","02/Dec/20 19:44;marcuse;hey, thanks for the review, iirc the sleep was there because in some early version of in-jvm dtests we didn't wait for the schema to fully propagate;;;","02/Dec/20 20:44;aholmber;Got it. Thanks.;;;","14/Dec/20 17:47;e.dimitrova;-+1 from me, too. Thank you!-

EDIT: Are we sure the repair CI failures are not related? (I am sorry, I didn't see them earlier);;;","14/Dec/20 18:19;e.dimitrova;Locally completes successfully and the logs point me to maybe circleci issue.

I just submitted Jenkins run [here| https://jenkins-cm4.apache.org/job/Cassandra-devbranch-artifacts/229/];;;","14/Jan/21 13:25;marcuse;rebased and re-ran the tests in the cci link above, failures seem to be an OOM in {{SimpleReadWriteTest#readWithSchemaDisagreement/writeWithSchemaDisagreement2}} and {{CASTest:incompletePrepare}} - they should be unrelated to this;;;","15/Jan/21 21:52;e.dimitrova;Thanks [~marcuse], I am getting the same failure with a different patch and it doesn't look related to this one.

I resubmitted the branch to Jenkins [here |https://ci-cassandra.apache.org/job/Cassandra-devbranch/299/].

+1 on its completion, thank you!;;;","18/Jan/21 08:33;marcuse;And committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Incorrect output in ""nodetool status -r""",CASSANDRA-16283,13341325,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,aholmber,yakir.g,yakir.g,18/Nov/20 12:36,16/Mar/22 15:14,13/Jul/23 08:39,03/Feb/21 14:43,4.0,4.0-rc1,,,,Tool/nodetool,,,,0,,,,"nodetool status -r not working well on C* 4,
 Version:
{code:java}
[root@foo001 ~]# nodetool version
ReleaseVersion: 4.0-beta3
{code}
Without resolving:
{code:java}
[root@foo001 ~]# nodetool status
Datacenter: V4CH
================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address Load    Tokens  Owns(effective) Host ID                            Rack
UN  1.2.3.4 363.68 KiB  128     ?         92ae4c39-edb3-4e67-8623-b49fd8301b66 RAC1
UN  1.2.3.5 109.71 KiB  128     ?         d80647a8-32b2-4a8f-8022-f5ae3ce8fbb2 RAC1
{code}
With resolving:
{code:java}
[root@foo001 ~]# nodetool status -r
Datacenter: V4CH
================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address          Load  Tokens  Owns (effective)  Host ID  Rack
?N  foo001.tab.com   ?     128     ?                          RAC1
?N  foo002.tab.com   ?     128     ?                          RAC1
{code}

I only changed here IPs and hostnames.
",,aholmber,bereng,e.dimitrova,serban,wolfenhaut,yakir.g,,,,,,"swolfenhaut opened a new pull request #845:
URL: https://github.com/apache/cassandra/pull/845


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Dec/20 16:25;githubbot;600","aholmberg commented on a change in pull request #845:
URL: https://github.com/apache/cassandra/pull/845#discussion_r552855324



##########
File path: src/java/org/apache/cassandra/tools/nodetool/Status.java
##########
@@ -149,28 +150,33 @@ private void addNodesHeader(boolean hasEffectiveOwns, TableBuilder tableBuilder)
     private void addNode(String endpoint, Float owns, String epDns, String token, int size, boolean hasEffectiveOwns,

Review comment:
       What would you think of just refactoring this to accept the HostStatWithPort? Then we have access to `ipOrDns()` as well as the `endpoint`, and we don't need to resolve again.
   https://github.com/apache/cassandra/blob/401e933b7395892bf0356f88308f64b94be84601/src/java/org/apache/cassandra/tools/nodetool/HostStat.java#L24)

##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()
+    {
+        ToolResult tool = ToolRunner.invokeNodetool(""status"", ""-r"");

Review comment:
       I think this bug goes a bit further than just the resolved host lookup logic. It seems like the tool is never showing anything definitive for the ""Owns (effective)"" column. I'll bubble this up on the ticket.

##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()
+    {
+        ToolResult tool = ToolRunner.invokeNodetool(""status"", ""-r"");
+        assertThat(tool.getStdout(), CoreMatchers.containsString(""UN""));

Review comment:
       I wonder if this test should go a bit further and validate that the IP actually resolves. Can we count on `127.0.0.1` to always resolve to `localhost` in these tests?

##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()

Review comment:
       Thanks for adding a test. I'm wondering if this should be a new package in nodetool tests since we're testing `status` and not `stats`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Jan/21 17:55;githubbot;600","bereng commented on a change in pull request #845:
URL: https://github.com/apache/cassandra/pull/845#discussion_r555507873



##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()

Review comment:
       +1




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/21 04:33;githubbot;600","bereng commented on a change in pull request #845:
URL: https://github.com/apache/cassandra/pull/845#discussion_r555508057



##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()
+    {
+        ToolResult tool = ToolRunner.invokeNodetool(""status"", ""-r"");

Review comment:
       +1 Either we resolve this here or we open a new ticket if you don't want to drag this one longer




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/21 04:34;githubbot;600","bereng commented on a change in pull request #845:
URL: https://github.com/apache/cassandra/pull/845#discussion_r555508245



##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()
+    {
+        ToolResult tool = ToolRunner.invokeNodetool(""status"", ""-r"");
+        assertThat(tool.getStdout(), CoreMatchers.containsString(""UN""));

Review comment:
       +1 given it's an easy thing to do




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/21 04:35;githubbot;600","bereng commented on a change in pull request #845:
URL: https://github.com/apache/cassandra/pull/845#discussion_r555510028



##########
File path: test/unit/org/apache/cassandra/tools/nodetool/stats/NodetoolTableStatsTest.java
##########
@@ -237,4 +237,13 @@ public void testTopArg()
         tool.assertCleanStdErr();
         assertEquals(1, tool.getExitCode());
     }
+
+    @Test
+    public void testStatusArg()
+    {
+        ToolResult tool = ToolRunner.invokeNodetool(""status"", ""-r"");
+        assertThat(tool.getStdout(), CoreMatchers.containsString(""UN""));
+        tool.assertCleanStdErr();

Review comment:
       These 2 can be replaced by `assertOnCleanExit()`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Jan/21 04:42;githubbot;600","smiklosovic closed pull request #845:
URL: https://github.com/apache/cassandra/pull/845


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,CASSANDRA-16273,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16612,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,wolfenhaut,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Feb 03 14:43:25 UTC 2021,,,,,,,All,,,,,,"0|z0kplc:",9223372036854775807,,,,aholmber,bereng,brandon.williams,e.dimitrova,Low,,4.0-beta4,,,https://github.com/apache/cassandra/commit/b61860c76e9cf1eebfb7d29dc4f4420955f62bb4,,,,,,,,,"fixed nodetool issue, unit test included",,,,,"23/Nov/20 08:47;bereng;See {{ToolRunner}} on how to test tooling #collaborating;;;","10/Dec/20 16:27;wolfenhaut;Fixed via PR https://github.com/apache/cassandra/pull/845;;;","12/Dec/20 20:02;yakir.g;Thank you [~wolfenhaut] :);;;","14/Dec/20 20:20;aholmber;Thanks [~wolfenhaut]. Would you consider adding a test and moving it to ""Ready for Revidew""?;;;","30/Dec/20 22:36;wolfenhaut;Sure, and thanks!;;;","06/Jan/21 18:02;aholmber;Thanks for taking a look at this, and for the patch. I reviewed and left a few comments on the PR.

While looking at this I think I noticed one other potential flaw around looking things up by endpoint (unrelated the resolved host lookup logic). It seems like the tool is never showing anything definitive for the ""Owns (effective)"" column. Resolved or not, the table always just produces '?'.;;;","12/Jan/21 04:50;bereng;Did review it. Mostly aligned to what Adam mentioned + a minor. The only real concern is whether we tackle the 'Owns' issue here or on a new ticket.;;;","12/Jan/21 16:57;aholmber;I personally don't see a reason to split out a new ticket, but I don't feel too strongly about it. To me it fits the description, and it's closely related in code. I can take a look at revising the patch if [~wolfenhaut] doesn't care to.;;;","21/Jan/21 17:31;aholmber;[~wolfenhaut] Just checking to see if you're going to have time to get back to this review? If not, I have no problem carrying the work forward. Just wanted to check in first.;;;","22/Jan/21 18:58;wolfenhaut;[~aholmber]

Been a little busy, feel free to run with this if you want...

Thanks for letting me help out!

--scott ;;;","22/Jan/21 19:15;aholmber;Will do. Thanks for getting back on the matter, and thanks for getting it this far.;;;","25/Jan/21 22:10;aholmber;Updated branch with PR here:
https://github.com/aholmberg/cassandra/pull/38

tl;dr there are several maps in Status that were broken depending on whether host is resolved (-r) or port printing was enabled (-pp), and some were using different forms of string conversion. Now everything is normalized to always using the form ""<ip>:<port>"" for command internal maps. Port printing and DNS resolution only apply to printing the host string for table output.

CI running:
https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16283;;;","26/Jan/21 02:51;aholmber;I see that the port is not fixed for unit tests, and that there is a jvm-dtest that codified the question marks. I'll address those test issues tomorrow.;;;","26/Jan/21 15:01;e.dimitrova;Thank you, [~aholmber]. Please let me know when you are done, I will be happy to review the patch.;;;","26/Jan/21 20:39;aholmber;The branch is updated. Full CI run finished revealing an in-jvm test I overlooked. Another limited run is still running on that tweak, but I think it's ready for review. Thanks in advance.;;;","28/Jan/21 01:04;e.dimitrova;Jenkins run pushed [here | [https://jenkins-cm4.apache.org/job/Cassandra-devbranch/333/#showFailuresLink].]

Review in progress, thanks :) ;;;","29/Jan/21 02:47;e.dimitrova;The patch looks good to me, I left just a few small comments [here|https://github.com/ekaterinadimitrova2/cassandra/commit/9e79a336bf5348ac6fae59dac7ffa60eb4c29bae] - I created a new branch with squashed commits for myself while reviewing.

I believe the two main things are CHANGES.txt entry is missing and the last in-jvm test [failing|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/333/] to be fixed. ;;;","29/Jan/21 21:53;aholmber;Thanks for the review. I pushed updates. I think CI looks good as well.;;;","29/Jan/21 22:47;e.dimitrova;Thanks both [~wolfenhaut] and [~aholmber] for the patch!
LGTM +1
CircleCI has unrelated failures
[~brandon.williams] can you review it as a second committer, please?
I believe Berenguer's concerns were also addressed. We need only to move the CHANGES.txt update to the top on commit. :-)  ;;;","01/Feb/21 23:45;brandon.williams;+1

bq. We need only to move the CHANGES.txt update to the top on commit.

Historically we've left it out of the patch, it's up to the committer to handle, and it often ends up conflicting too when in a patch.;;;","02/Feb/21 16:42;e.dimitrova;Patch rebased and squashed [here|https://github.com/ekaterinadimitrova2/cassandra/commit/f99faca3e62dad3c748673e306433ce242a31b92]
Commit pending on final Jenkins run in progress [here|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/352/];;;","03/Feb/21 14:43;e.dimitrova;Patch committed [here| https://github.com/apache/cassandra/commit/b61860c76e9cf1eebfb7d29dc4f4420955f62bb4]

Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Fix STCS documentation (the header is currently LCS),CASSANDRA-16282,13341218,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,miles.garnsey,miles.garnsey,miles.garnsey,18/Nov/20 05:21,19/Nov/20 00:33,13/Jul/23 08:39,18/Nov/20 12:18,4.0,4.0-beta4,,,,Documentation/Website,,,,0,,,,"Currently, the header in the [documentation for STCS|https://cassandra.apache.org/doc/latest/operating/compaction/stcs.html] refers to LCS in the header, which also makes it hard to find the STCS documentation via search.",,bereng,jeromatron,mck,miles.garnsey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,miles.garnsey,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,,Thu Nov 19 00:33:49 UTC 2020,,,,,,,All,,,,,,"0|z0koxk:",9223372036854775807,,,,bereng,mck,,,Low,,4.0-alpha4,,,https://github.com/apache/cassandra/commit/872751a0501561f43c4360aa9a8bedfe7f180234,,,,,,,,,Not applicable. One line change to the documentation.,,,,,"18/Nov/20 05:58;miles.garnsey;I have opened a [pull request|https://github.com/apache/cassandra/pull/825] to fix this issue. Apologies, having read the contributing guidelines more thoroughly, this Jira ticket may have been overkill, feel free to close once the pull request is approved.;;;","18/Nov/20 06:48;miles.garnsey;Pull request [here|https://github.com/apache/cassandra/pull/825].;;;","18/Nov/20 08:49;bereng;LGTM +1;;;","18/Nov/20 12:18;mck;Committed as [872751a0501561f43c4360aa9a8bedfe7f180234|https://github.com/apache/cassandra/commit/872751a0501561f43c4360aa9a8bedfe7f180234].;;;","19/Nov/20 00:33;miles.garnsey;:D Awesome, thanks [~mck]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSTableLoader will fail if encryption parameters are used due to CASSANDRA-16144,CASSANDRA-16280,13341073,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adejanovski,adejanovski,adejanovski,17/Nov/20 14:35,03/Jan/21 16:58,13/Jul/23 08:39,17/Nov/20 19:15,4.0,4.0-beta4,,,,Tool/bulk load,,,,0,,,,"CASSANDRA-16144 recently introduced [repeated calls |https://github.com/apache/cassandra/compare/trunk...dcapwell:commit_remote_branch/CASSANDRA-16144-trunk-209E2350-3A50-457E-A466-F2661CD0D4D1#diff-b87acacbdc34464d327446f7a7e64718dbf843d70f5fbc9e5ddcd1bafca0f441R478]to _clientEncOptions.applyConfig()_ for each encryption parameter passed to the sstableloader command line.
This consistently fails because _applyConfig()_ can be called only once due to the _ensureConfigNotApplied()_ check at the beginning of the method.

This call is not necessary since the _with...()_ methods will invoke _applyConfig()_ each time:
{code:java}
public EncryptionOptions withTrustStore(String truststore)
{
    return new EncryptionOptions(keystore, keystore_password, truststore, truststore_password, cipher_suites,
                                        protocol, algorithm, store_type, require_client_auth, require_endpoint_verification,
                                        enabled, optional).applyConfig();
}
{code}
I'll build a patch for this with the appropriate unit test.",,adejanovski,dcapwell,jmeredithco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adejanovski,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 17 18:20:33 UTC 2020,,,,,,,All,,,,,,"0|z0ko1c:",9223372036854775807,,,,dcapwell,jmeredithco,,,Critical,,4.0-beta3,,,https://github.com/apache/cassandra/commit/d031c445f6fe9f3639537d69fef1538e09d18410,,,,,,,,,"Regression test added under {{LoaderOptionsTest.testEncryptionSettings}}, invoking {{LoaderOptions.builder().parseArgs()}} with all the encryption options. 

Failure with the current trunk:

{code:java}
test:
     [echo] Number of test runners: 3
    [mkdir] Created dir: /Users/adejanovski/projets/cassandra/thelastpickle/cassandra/build/test/cassandra
    [mkdir] Created dir: /Users/adejanovski/projets/cassandra/thelastpickle/cassandra/build/test/output
[junit-timeout] Testsuite: org.apache.cassandra.tools.LoaderOptionsTest
[junit-timeout] Testsuite: org.apache.cassandra.tools.LoaderOptionsTest Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0,824 sec
[junit-timeout]
[junit-timeout] Testcase: testEncryptionSettings(org.apache.cassandra.tools.LoaderOptionsTest):	Caused an ERROR
[junit-timeout] EncryptionOptions cannot be changed after configuration applied
[junit-timeout] java.lang.IllegalStateException: EncryptionOptions cannot be changed after configuration applied
[junit-timeout] 	at org.apache.cassandra.config.EncryptionOptions.ensureConfigNotApplied(EncryptionOptions.java:162)
[junit-timeout] 	at org.apache.cassandra.config.EncryptionOptions.applyConfig(EncryptionOptions.java:130)
[junit-timeout] 	at org.apache.cassandra.tools.LoaderOptions$Builder.parseArgs(LoaderOptions.java:478)
[junit-timeout] 	at org.apache.cassandra.tools.LoaderOptionsTest.testEncryptionSettings(LoaderOptionsTest.java:55)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.tools.LoaderOptionsTest FAILED
{code}

The test passes with the patch:

{code:java}
test:
     [echo] Number of test runners: 3
[junit-timeout] Testsuite: org.apache.cassandra.tools.LoaderOptionsTest
[junit-timeout] Testsuite: org.apache.cassandra.tools.LoaderOptionsTest Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0,5 sec

BUILD SUCCESSFUL
{code}

",,,,,"17/Nov/20 15:27;adejanovski;Here's the patch:
 * [branch|https://github.com/thelastpickle/cassandra/tree/CASSANDRA-16280]
 * [commit|https://github.com/thelastpickle/cassandra/commit/dbce40a06d89c415cbe172e4726b6c4bb38fe4c9]

I'm waiting for the build to go through in CircleCI.;;;","17/Nov/20 16:28;jmeredithco;+1 from me, thanks for the test and fix.  Apologies for the breakage, the code was left over from an earlier version of the patch but I missed {{SSTableLoader}} when I refactored the {{applyConfig}}.;;;","17/Nov/20 18:15;dcapwell;LGTM +1

 

I reverted your changes to src/java than ran the test added

 

{code}

testclasslist:
 [echo] Number of test runners: 1
 [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-oss-commit/build/test/cassandra
 [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-oss-commit/build/test/output
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.tools.LoaderOptionsTest
[junit-timeout] Testsuite: org.apache.cassandra.tools.LoaderOptionsTest Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.761 sec
[junit-timeout]
[junit-timeout] Testcase: testEncryptionSettings(org.apache.cassandra.tools.LoaderOptionsTest): Caused an ERROR
[junit-timeout] EncryptionOptions cannot be changed after configuration applied
[junit-timeout] java.lang.IllegalStateException: EncryptionOptions cannot be changed after configuration applied
[junit-timeout] at org.apache.cassandra.config.EncryptionOptions.ensureConfigNotApplied(EncryptionOptions.java:162)
[junit-timeout] at org.apache.cassandra.config.EncryptionOptions.applyConfig(EncryptionOptions.java:130)
[junit-timeout] at org.apache.cassandra.tools.LoaderOptions$Builder.parseArgs(LoaderOptions.java:478)
[junit-timeout] at org.apache.cassandra.tools.LoaderOptionsTest.testEncryptionSettings(LoaderOptionsTest.java:63)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.tools.LoaderOptionsTest FAILED

BUILD FAILED
/Users/davidcapwell/src/github/apache/cassandra-oss-commit/build.xml:2035: The following error occurred while executing this line:
/Users/davidcapwell/src/github/apache/cassandra-oss-commit/build.xml:1916: Some test(s) failed.

{code}

 

Tests are able to reproduce the issue!;;;","17/Nov/20 18:20;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16280-trunk-058DDE2C-FE3C-45AE-8FA4-7EB872209E88]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16280-trunk-058DDE2C-FE3C-45AE-8FA4-7EB872209E88]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/214/]|;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect check for -Xlog in cassandra-env.sh ,CASSANDRA-16279,13341051,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,yakir.g,yakir.g,17/Nov/20 12:59,10/Jan/21 14:04,13/Jul/23 08:39,08/Jan/21 21:08,4.0,4.0-rc1,,,,Packaging,,,,0,,,,"Possible small bug in {{cassandra-env.sh}} of Cassandra 4:
 [https://github.com/apache/cassandra/blob/trunk/conf/cassandra-env.sh#L98]
 The following command incorrect:
 {code}
 echo ""$JVM_OPTS"" | grep -q ""^-[X]log:gc""
{code}

 Should be:
{code}
echo ""$JVM_OPTS"" | grep -qe ""-[X]log:gc""
{code}
 The variable  {{$JVM_OPTS}} not starting with {{-Xlog..}}  , and always return 1, remove {{^}} and add {{-qe}}  will solve the problem.
 It's causing that {{cassandra-env.sh}}  ignoring variable of {{-Xlog}}  in {{jvm11-server.options}} and {{jvm8-server.options}}

 

Right now, jvm11-server.options with:
{code:java}
-Xlog:gc=info,heap*=trace,age*=debug,safepoint=info,promotion*=trace:file=/var/log/cassandra/gc.log:time,uptime,pid,tid,level:filecount=10,filesize=100M{code}
Will generate process of:
{code:java}
-Xlog:gc=info,heap*=trace,age*=debug,safepoint=info,promotion*=trace:file=/var/log/cassandra/gc.log:time,uptime,pid,tid,level:filecount=10,filesize=100M -Xlog:gc=info,heap*=trace,age*=debug,safepoint=info,promotion*=trace:file=/var/log/cassandra/gc.log:time,uptime,pid,tid,level:filecount=10,filesize=10485760
{code}

With fix it will generate correct gc option of :
{code}
-Xlog:gc=info,heap*=trace,age*=debug,safepoint=info,promotion*=trace:file=/var/log/cassandra/gc.log:time,uptime,pid,tid,level:filecount=10,filesize=100M
{code}",,aholmber,mck,yakir.g,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sun Jan 10 14:04:46 UTC 2021,,,,,,,All,,,,,,"0|z0knwg:",9223372036854775807,,,,aholmber,mck,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/023eecb03acbc3d8ad751853f7ef067220eba1e9,,,,,,,,,"The change is verified by uncommenting the gc log option in the respective server.options file ([8|https://github.com/apache/cassandra/blob/ea52f1d2fa032dd28bbe69a1914497e48a6eb99a/conf/jvm8-server.options#L71], [11|https://github.com/apache/cassandra/blob/ea52f1d2fa032dd28bbe69a1914497e48a6eb99a/conf/jvm11-server.options#L83]) and checking that the options from {{cassandra-ev.sh}} are not added if those are already present.",,,,,"16/Dec/20 17:24;aholmber;+1
This looks correct to me. I think line 106 in the jvm8 branch has the same issue. [~yakir.g] would you like to submit a patch for review, or shall I?;;;","20/Dec/20 21:45;yakir.g;Hi [~aholmber], please do it.;;;","21/Dec/20 17:41;aholmber;[patch|https://github.com/aholmberg/cassandra/pull/27]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16279];;;","08/Jan/21 13:58;mck;CI runs
 - circleci j8 https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/9/workflows/79395309-7132-4db0-88cf-57789cf303ea
 - circleci j11 https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/9/workflows/a472ea28-62aa-4bf5-bb0f-ef1fd6a064b5
 - ci-cassandra https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/279/;;;","08/Jan/21 21:08;mck;Committed as [023eecb03acbc3d8ad751853f7ef067220eba1e9|https://github.com/apache/cassandra/commit/023eecb03acbc3d8ad751853f7ef067220eba1e9];;;","10/Jan/21 14:04;yakir.g;Thank you [~aholmber] and [~mck];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
'SSLEngine closed already' exception on failed outbound connection,CASSANDRA-16277,13340878,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aleksey,aleksey,aleksey,16/Nov/20 17:09,03/Jan/21 16:58,13/Jul/23 08:39,18/Nov/20 14:18,4.0,4.0-beta4,,,,Messaging/Internode,,,,0,,,,"Occasionally Netty will invoke {{OutboundConnectionInitiator#exceptionCaught()}} handler to process an exception of the following kind:
{code}
io.netty.channel.unix.Errors$NativeIoException: readAddress(..) failed: Connection reset by peer
{code}

When we invoke {{ctx.close()}} later in that method, the listener, set up in {{channelActive()}}, might be
failed with an {{SSLException(""SSLEngine closed already”)}} by Netty, and {{exceptionCaught()}} will be invoked
once again, this time to handle the {{SSLException}} triggered by {{ctx.close()}}.

The exception at this stage is benign, and we shouldn't be double-logging the failure to connect.",,aleksey,ifesdjeen,jmeredithco,norman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aleksey,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Dec 04 14:56:29 UTC 2020,,,,,,,All,,,,,,"0|z0kmu0:",9223372036854775807,,,,aleksey,ifesdjeen,norman,,Low,,4.0-alpha1,,,"[e572c8fca0c5cd68229b8db8d4915817d5d49daf|https://github.com/apache/cassandra/commit/e572c8fca0c5cd68229b8db8d4915817d5d49daf]",,,,,,,,,Run existing tests,,,,,"16/Nov/20 17:59;aleksey;Code: https://github.com/iamaleksey/cassandra/commits/16277-4.0
CI: https://app.circleci.com/pipelines/github/iamaleksey/cassandra/8/workflows/4eda4eb1-4dd7-4a24-8572-8162a8d34ed7

The patch set also pulls in most recent Netty (4.1.54), with added support for {{SslClosedEngineException}} (see https://github.com/netty/netty/pull/10783);;;","17/Nov/20 16:17;ifesdjeen;LGTM, +1.;;;","18/Nov/20 07:08;norman;LGTM as well.... +1;;;","18/Nov/20 14:18;aleksey;Cheers. Committed as [cefe43b06bb1c0dd3bd362638cc56e0fc1f78ddb|https://github.com/apache/cassandra/commit/cefe43b06bb1c0dd3bd362638cc56e0fc1f78ddb] and [e572c8fca0c5cd68229b8db8d4915817d5d49daf|https://github.com/apache/cassandra/commit/e572c8fca0c5cd68229b8db8d4915817d5d49daf] to trunk.;;;","03/Dec/20 21:42;jmeredithco;[~aleksey] should the 

cefe43b06bb1c0dd3bd362638cc56e0fc1f78ddb have also updated the Netty Version numbers in build.xml? ;;;","04/Dec/20 14:56;aleksey;[~jmeredithco] Indeed. Fixed in ecbb970aec0780aa97406f80ea05a24b1dfa650f - thanks for noticing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Drain and/or shutdown might throw because of slow messaging service shutdown,CASSANDRA-16276,13340863,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aleksey,aleksey,aleksey,16/Nov/20 16:05,03/Jan/21 16:58,13/Jul/23 08:39,18/Nov/20 14:06,4.0,4.0-beta4,,,,Local/Startup and Shutdown,,,,0,,,,"If we invoke nodetool drain before shutdown, it sometimes fails to shut down messaging service in time (in this case - timing out the shutdown of the eventloopgroup by Netty). But, not before we manage to set isShutdown of StorageService to true, despite aborting further drain logic (including shutting down mutation stages).

Then, via on shutdown hook, we invoke drain() method again, implicitly. We see that the mutation stage is not shutdown and proceed to assert that isShutdown == false, failing that assertion and triggering a second error log message.

The patch merely ensures that any exception thrown by MS shutdown is captured so that drain logic can complete the first time around.",,aleksey,ifesdjeen,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aleksey,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Nov 18 14:05:09 UTC 2020,,,,,,,All,,,,,,"0|z0kmqo:",9223372036854775807,,,,aleksey,ifesdjeen,marcuse,,Low,,4.0-alpha1,,,"[7ca997ba3514e19864d53b8ca56a1e4f5c26208f|https://github.com/apache/cassandra/commit/7ca997ba3514e19864d53b8ca56a1e4f5c26208f]",,,,,,,,,None needed,,,,,"16/Nov/20 17:01;aleksey;Code: https://github.com/iamaleksey/cassandra/commits/16276-4.0 (trivial patch);;;","16/Nov/20 18:09;marcuse;+1;;;","18/Nov/20 12:59;ifesdjeen;+1;;;","18/Nov/20 14:05;aleksey;Cheers, committed as [7ca997ba3514e19864d53b8ca56a1e4f5c26208f|https://github.com/apache/cassandra/commit/7ca997ba3514e19864d53b8ca56a1e4f5c26208f] to trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Prevent unbounded number of flushing tasks,CASSANDRA-16261,13339821,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,10/Nov/20 19:00,11/Apr/21 18:23,13/Jul/23 08:39,19/Jan/21 23:52,3.0.24,3.11.10,4.0,4.0-rc1,,Legacy/Local Write-Read Paths,,,,0,,,,"The cleaner thread is not prevented from queueing an unbounded number of flushing tasks for memtables that are almost empty.

This patch adds a mechanism to track the number of pending flushing
tasks in the memtable cleaner. Above the maximum number (2x the flushing
threads by default), only memtables using at least MCT memory will be
flushed, where MCT stands for Memory Cleanup Threshold.

This patch also fixes a possible problem tracking the memory marked as
""reclaiming"" in the memtable allocators and pool. Writes that complete
only after a memtable has been scheduled for flushing, did not report
their memory as reclaiming. Normally this should be a small value of no
consequence, but if the flushing tasks are blocked for a long period,
and there is a sufficient number of writes, or these writes use
a sufficiently large quantity of memory, this would cause the memtable
cleaning algorithm to schedule repeated flushing tasks because the used
memory is always > reclaiming memory + MCT.",,adelapena,e.dimitrova,jjirsa,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15821,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Code,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jan 26 22:22:52 UTC 2021,,,,,,,All,,,,,,"0|z0kgb4:",9223372036854775807,,,,adelapena,maedhroz,,,Normal,,,,,https://github.com/apache/cassandra/commit/0a1e900a0a042f78d7d5d6625bc98b84eb463e69,,,,,,,,,"Patch committed: 
 *  trunk - [1b4e1cc9303414f91535dab10f6342e1c1c6b8ac|https://github.com/apache/cassandra/commit/1b4e1cc9303414f91535dab10f6342e1c1c6b8ac]

 - 3.11 - [11cb8104facc4d3455efb73d2701fd5ba510bef1|https://github.com/apache/cassandra/commit/11cb8104facc4d3455efb73d2701fd5ba510bef1]
 - 3.0 - [0a1e900a0a042f78d7d5d6625bc98b84eb463e69|https://github.com/apache/cassandra/commit/0a1e900a0a042f78d7d5d6625bc98b84eb463e69]",,,,,"13/Nov/20 23:17;e.dimitrova;This patch puts a cap on the maximum number of flushing tasks that can be enqueued by the memtable cleaner thread.

This will have the consequence of creating larger sstables if flushing cannot keep up, so we must choose the maximum number of pending tasks carefully. At the moment it is [configurable |https://github.com/ekaterinadimitrova2/cassandra/blob/CASSANDRA-16261-trunk/src/java/org/apache/cassandra/db/Memtable.java#L76] and set to twice the number of flush writers.
 When a memtable gets into discarding state, all pending updates update both used and reclaiming.

[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/76/commits/6ffa1802a1cfb8420db8a253ae5312fcffddfd6a] | [JAVA8 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/506/workflows/4411817d-bd4d-449a-b28e-8f9616eaf1f4] | [JAVA 11 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/506/workflows/9646169b-26bd-4d5b-aa5b-ba7d6522786d]

[3.11|https://github.com/ekaterinadimitrova2/cassandra/commit/1f0d02d0a8d04524a99574dc60c0f4b215520591] | [CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/508/workflows/78295ba3-6a08-4e04-a39e-cf46a7913d02] 

No new test failures, one more test class added - [MemtableCleanerThreadTest |https://github.com/ekaterinadimitrova2/cassandra/pull/76/commits/6ffa1802a1cfb8420db8a253ae5312fcffddfd6a#diff-ef05bf02f6f0b3ab7db707faeb3a6c0e69f67d330de07ca0876cccaf1ea9395fR44].

[~adelapena] do you mind to review it?
  ;;;","19/Nov/20 12:50;adelapena;[~e.dimitrova] Being this a bug shouldn't we fix it also in 2.2 and 3.0?

I think we should document the new {{cassandra.max_pending_flushing_tasks}} property somewhere, probably at least in a brief note in the {{NEWS.txt}} file, WDYT?

I have left some minor suggestions in the PR for 3.11. Overall it looks good to me although I'd like to take a closer look on a second review pass, since I'm not very familiarized with the affected area of the code. I think we would need a second reviewer here.;;;","20/Nov/20 00:30;e.dimitrova;Thank you for the review [~adelapena]

 I just pushed a post-review [commit|https://github.com/ekaterinadimitrova2/cassandra/pull/74/commits/aef2d0f7ca46c24afb6c01347411dbc3a979d825] to 3.11. 

 I added a bullet in NEWS.txt, not sure whether this is the best format? WDYT?

Not adding the patch to 2.2 and 3.0 was my decision based on two things:
 * only really critical updates 
 * as per our [Downloads|https://cassandra.apache.org/download/] page it seems they will  be here - 2.2 only until 4.0 and 3.0, only 6 months after 4.0 release

Not sure that my reasoning was good enough though. :) Happy to apply the patch there too, if that is required. ;;;","20/Nov/20 18:24;adelapena;[~e.dimitrova] If I'm understanding the [Downloads|https://cassandra.apache.org/download/] page, the rule about only really critical fixes only applies to 2.1, and indeed I don't think we should apply this fix to that branch. As for 2.2 and 3.0, they are supported until 4.0 is released, not until a few more months before. In the case of 3.0 there are 6 more months of support, which being a bit pessimistic about the release of 4.0 start is not a short time, IMO. The bug that we are solving here maybe isn't critical but it isn't a minor thing either, so I think we should apply the fix to all the supported versions. Also, I think that the patch is relatively easy to apply to those versions, but I might be wrong.;;;","20/Nov/20 19:00;e.dimitrova;My bad, I was primarily referring to this one - [https://cassandra.apache.org/doc/latest/development/patches.html?highlight=contributions]

But I agree with you. I will apply the patch to the other two branches later today.

Thank you!;;;","23/Nov/20 04:03;e.dimitrova;[2.2 patch|https://github.com/ekaterinadimitrova2/cassandra/commits/CASSANDRA-16261-2.2] | [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/518/workflows/24905bec-e6f1-4d4f-8996-6be0ba8f99bb]

The CI run doesn't show any new failures. Most of the DTests fail because of:
{code:java}
Invalid yaml. Please remove properties [enable_scripted_user_defined_functions] from your cassandra.yaml{code}
The few additional changes needed in order to be able to apply the patch are intentionally in separate commits so you can easily identify them. 

[3.0 patch|https://github.com/ekaterinadimitrova2/cassandra/commits/cassandra-3.0-16261] | [CI run |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/514/workflows/ca1d07df-b85e-4333-a4da-7035f83a0c5f]

The CI run shows no new failures were introduced

The few additional changes needed to be able to apply the patch to 3.0 are in a separate commit.

 ;;;","24/Nov/20 17:16;adelapena;[~e.dimitrova] the patch for 2.2 breaks the 1.7 language level, that I think we have to satisfy [to support 1.7|https://github.com/apache/cassandra/blob/cassandra-2.2/README.asc#requirements]. Fortunately the bits not satisfying language level are in the more or less cosmetic changes that are not related to the original bug fix, so hopefully they will be easy to remove. Not so fortunately, there are already a few relatively recent changes in the current 2.2 codebase that are also breaking that compatibility, so I've opened CASSANDRA-16300 to fix them, if needed.;;;","24/Nov/20 18:39;adelapena;{quote}I added a bullet in NEWS.txt, not sure whether this is the best format? WDYT?
{quote}
I'm not sure about what is the best place to make user aware new properties. It seems that the format of {{NEWS.txt}} that I can infer involves not adding direct entries but sections, like {{New features}}, {{Upgrading}} or {{Deprecation}}, and place the entries under those sections. Even though this is a bug fix the new {{cassandra.max_pending_flushing_tasks}} property could be considered as a new feature, maybe? Perhaps adding a {{NEWS.txt}} entry is overkill, and we could just mention it in the {{CHANGES.txt}} entry. And, at least since 3.11, we could add a description of the property in [the documentation for {{cassandra-env.sh}}|https://cassandra.apache.org/doc/latest/configuration/cass_env_sh_file.html], which already contains definitions of other properties, WDYT?;;;","02/Dec/20 22:00;maedhroz;bq. And, at least since 3.11, we could add a description of the property in the documentation for cassandra-env.sh, which already contains definitions of other properties, WDYT?

+100 to this

Further, we should make sure the documentation clearly explains when you would want/need to raise/lower the value of {{max_pending_flushing_tasks}} in response to a metric or set of metrics.;;;","02/Dec/20 22:27;maedhroz;I started reviewing the 2.2 branch, but if we're going to need 2.2 to be JDK 1.7 compatible, I'd lean toward not fixing it there at all. Neither having a different implementation between 2.2 and 3.0+ nor changing 3.0+ to avoid 1.8 features seems ideal.;;;","02/Dec/20 22:41;e.dimitrova;Thanks [~maedhroz]
Actually I finished today 3.0, 3.11 and 4.0 and after looking at the implementation of CompletableFuture functions, I don't find it worth it too. Also, 2.2 should be out of support the moment 4.0 is out. But I will be happy to review CASSANDRA-16300  to fix the build (not related to this patch but this patch led to that discovery from [~adelapena])
With that said:
I think all concerns of [~adelapena] are addressed in the PRs. I didn't squash intentionally so it is clear what is review feedback, etc.
Looking forward to your review [~maedhroz]. Thank you!;;;","03/Dec/20 23:47;maedhroz;[~e.dimitrova] [~adelapena] I've wrapped up my first pass at review. Most of my feedback (inline in the PR) is around pretty minor stuff, but there is one thread of discussion I'd like to resolve [here|https://github.com/ekaterinadimitrova2/cassandra/pull/74/files?file-filters%5B%5D=.java&file-filters%5B%5D=.txt#r535728281]...;;;","08/Dec/20 14:56;e.dimitrova;Thank you [~maedhroz], I will get back to this again probably tomorrow.;;;","14/Dec/20 22:13;e.dimitrova;[~maedhroz], I just responded to your comment in GitHub and I am going to introduce the suggested changes to the patch. Thank you!;;;","14/Dec/20 22:16;e.dimitrova;Drop the parameter as root cause was fixed, confirmed.

Metric can be added to improve system monitoring.;;;","10/Jan/21 23:16;e.dimitrova;3.0 patch prepared [here |https://github.com/ekaterinadimitrova2/cassandra/pull/81].

In case we agree this is the final outcome wanted, I will propagate to the rest of the C* versions

CI run on low res [here |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/556/workflows/981d1c0c-b225-4514-b0f9-6218d08eb5f7];;;","12/Jan/21 00:55;maedhroz;[~adelapena] [~e.dimitrova] I've looked at the latest 3.0 PR and dropped a few comments [inline|https://github.com/ekaterinadimitrova2/cassandra/pull/81]...mostly nit and minor organizational things.;;;","12/Jan/21 01:16;maedhroz;Also, the [one failure|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/556/workflows/981d1c0c-b225-4514-b0f9-6218d08eb5f7/jobs/3075] in CI doesn't have anything to do with the change. [~adelapena] The test itself doesn't even look correct, and it might be something we just remove in CASSANDRA-16181?;;;","13/Jan/21 00:14;maedhroz;+1 on the 3.0 patch;;;","14/Jan/21 01:02;e.dimitrova;Thank you both for your deep reviews and great suggestions.

3.0 is squashed and I propagated the changes to 3.11 and trunk.

I just started Jenkins runs too.

[3.0 PR |https://github.com/ekaterinadimitrova2/cassandra/pull/81] |  [Jenkins run |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/286/]

[3.11 PR |https://github.com/ekaterinadimitrova2/cassandra/pull/83] |  [Jenkins run |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/284/]

[trunk PR |https://github.com/ekaterinadimitrova2/cassandra/pull/83] |  [Jenkins run |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/285/] 

/CC [~lorina@datastax.com] - this is the ticket we discussed offline. The new metric that needs to be documented is PendingFlushTasks. I believe the Metrics doc needs also other updates so maybe contact me when you start working on it and I can help there with revision, at least.;;;","14/Jan/21 15:52;adelapena;[~e.dimitrova] the PR for trunk in the comment right above points to the PR for 3.11. I think that the right PR for trunk in [this one|https://github.com/ekaterinadimitrova2/cassandra/pull/84], and that the other four PRs in the issue links section are outdated, is this right?;;;","14/Jan/21 16:46;e.dimitrova;Right for the link, apologize, looks like my copy-paste didn't work.

Yes, I kept the old and the new PRs until we are done with the reviews. I believe the old ones are good for reference on what we discussed/agreed on.  It was easy to squash everything but I guess it would have been harder and frustrating for everyone. :) 

It is on my list to update the ticket and leave only the latest ones when we are done. Thank you!;;;","14/Jan/21 16:54;e.dimitrova;I didn't have issues in CircleCI but I see timeouts in Jenkins, not sure whether it is not Jenkins issue as there were some problems yesterday. I will push new runs and follow up to confirm everything is alright again;;;","14/Jan/21 20:50;maedhroz;Aside from a minor unresolved issue in one of the tests [here|https://github.com/ekaterinadimitrova2/cassandra/pull/81#discussion_r555437171], and needing to add some information about the new metric in {{metrics.rst}}, the 3.11 and trunk patches look good to me.

I'm not sure what to make of the huge number of failures on Jenkins for trunk, but on 3.11, these two seem like they *might* be new:
 [https://jenkins-cm4.apache.org/job/Cassandra-devbranch/284/testReport/dtest.disk_balance_test/TestDiskBalance]
 [https://jenkins-cm4.apache.org/job/Cassandra-devbranch/284/testReport/dtest.bootstrap_test/TestBootstrap];;;","18/Jan/21 17:43;e.dimitrova;I am off today but I checked the results from the CI runs that I pushed at the end of the week after the latest rebase, here are the results, it looks like this solved the previous issues we saw:

[3.0 CI |https://ci-cassandra.apache.org/job/Cassandra-devbranch/297/]. | [3.0 patch |https://github.com/ekaterinadimitrova2/cassandra/pull/81]
 We don't have history for the cqlsh tests and I don't see those in the last builds but when I ran CI without my patch they [failed again|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/305/#showFailuresLink] so I don't think this patch is the reason. Also I saw some of cqlsh failures in 3.11.
 =================
 [3.11 CI |https://ci-cassandra.apache.org/job/Cassandra-devbranch/300/]. | [3.11 patch|https://github.com/ekaterinadimitrova2/cassandra/pull/83/commits] 
 The cqlsh errors appeared in the last builds; It seems there is some typo that needs to be fixed. I will see to fix it/raise a ticket but the issues is not related to this patch.
 =================
 [trunk CI |https://ci-cassandra.apache.org/job/Cassandra-devbranch/301/] |. [trunk patch|https://github.com/ekaterinadimitrova2/cassandra/pull/84/commits]
 No failures;;;","19/Jan/21 17:50;maedhroz;+1;;;","19/Jan/21 18:21;adelapena;+1, setting this as ready to commit.;;;","19/Jan/21 23:51;e.dimitrova;Patch committed: 
 *  trunk - [1b4e1cc9303414f91535dab10f6342e1c1c6b8ac|https://github.com/apache/cassandra/commit/1b4e1cc9303414f91535dab10f6342e1c1c6b8ac]

 - 3.11 - [11cb8104facc4d3455efb73d2701fd5ba510bef1|https://github.com/apache/cassandra/commit/11cb8104facc4d3455efb73d2701fd5ba510bef1]
 - 3.0 - [0a1e900a0a042f78d7d5d6625bc98b84eb463e69|https://github.com/apache/cassandra/commit/0a1e900a0a042f78d7d5d6625bc98b84eb463e69];;;","25/Jan/21 02:37;e.dimitrova;[~maedhroz], [~adelapena], as a result of [this|https://the-asf.slack.com/archives/CK23JSY2K/p1611330259005500] user report/question/concerns and follow up discussion I spent some time today thinking of the best way to handle this and I think we can safely directly remove the NoSpamLogger info logs in the MemtableAllocator. WDYT? Also, do you think we need a separate ticket for this(in case you agree with me)? ;;;","25/Jan/21 12:37;adelapena;[~e.dimitrova] perhaps we could also use a normal logger with debug level, in case we think we could need to debug this.

Being such a small change I don't think we need a separate ticket for  either using debug level or just remove the message. If we decided to add a debug level to {{NoSpamLogger}} as it's mentioned in the aforementioned Slack conversation we would need to add some changes to {{NoSpamLoggerTest}}, making the changes not so trivial, though.;;;","25/Jan/21 17:51;maedhroz;[~e.dimitrova] I'd be fine with moving it to a normal logger at DEBUG or TRACE, and also with doing it as a ninja-fix.;;;","26/Jan/21 16:36;jjirsa;There's so, so, so many unrelated whitespace and style changes in the 3.0 version of this patch :( 
;;;","26/Jan/21 22:22;e.dimitrova;Hi [~jjirsa],

As we talked on Slack, I agree with your point that clearing the warnings for old branches, if it is done Is better to be more incremental. Thank you for raising the topic as there is no strict policy on cleaning the code, the only thing I know is that we try to do it while we work on patches and thus fully clean it in time. Apologize for any inconvenience caused to anyone during merge.

[~maedhroz], [~adelapena] I just committed a ninja fix to all three branches to move from NoSpamLogger to the normal logger at TRACE:
4d4218c553..44ca3d322d  cassandra-3.0
a9ab7bde4e..11b07536a9  cassandra-3.11
186c731664..11789e0f3c  trunk

/CC [~tsteinmaurer]

 ;;;",,,,,,,,,,,,,,
tablehistograms cause ArrayIndexOutOfBoundsException,CASSANDRA-16259,13339660,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,blerer,Justin Montgomery,Justin Montgomery,10/Nov/20 05:22,03/Jan/21 16:58,13/Jul/23 08:39,02/Dec/20 14:03,2.2.20,3.0.24,3.11.10,4.0,4.0-beta4,Observability/Metrics,,,,0,,,,"After upgrading some nodes in our cluster from 3.11.8 to 3.11.9 an error appeared on the upgraded nodes when trying to access *tablehistograms*. The same command run on our .8 nodes return as expected, only the upgraded .9 nodes fail. Not all tables fail when queried, but about 90% of them do.

We use Datastax MCAC which appears to query histograms every 30 seconds, this outputs to the system.log:
{noformat}
WARN  [insights-3-1] 2020-11-09 01:11:22,331 UnixSocketClient.java:830 - Error reporting:
java.lang.ArrayIndexOutOfBoundsException: 115
    at org.apache.cassandra.metrics.TableMetrics.combineHistograms(TableMetrics.java:261) ~[apache-cassandra-3.11.9.jar:3.11.9]
    at org.apache.cassandra.metrics.TableMetrics.access$000(TableMetrics.java:48) ~[apache-cassandra-3.11.9.jar:3.11.9]
    at org.apache.cassandra.metrics.TableMetrics$11.getValue(TableMetrics.java:376) ~[apache-cassandra-3.11.9.jar:3.11.9]
    at org.apache.cassandra.metrics.TableMetrics$11.getValue(TableMetrics.java:373) ~[apache-cassandra-3.11.9.jar:3.11.9]
    at com.datastax.mcac.UnixSocketClient.writeMetric(UnixSocketClient.java:839) [datastax-mcac-agent.jar:na]
    at com.datastax.mcac.UnixSocketClient.access$700(UnixSocketClient.java:78) [datastax-mcac-agent.jar:na]
    at com.datastax.mcac.UnixSocketClient$2.lambda$onGaugeAdded$0(UnixSocketClient.java:626) ~[datastax-mcac-agent.jar:na]
    at com.datastax.mcac.UnixSocketClient.writeGroup(UnixSocketClient.java:819) [datastax-mcac-agent.jar:na]
    at com.datastax.mcac.UnixSocketClient.lambda$restartMetricReporting$2(UnixSocketClient.java:798) [datastax-mcac-agent.jar:na]
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_272]
    at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:126) ~[netty-all-4.0.44.Final.jar:4.0.44.Final]
    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:399) ~[netty-all-4.0.44.Final.jar:4.0.44.Final]
    at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:307) ~[netty-all-4.0.44.Final.jar:4.0.44.Final]
    at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131) ~[netty-all-4.0.44.Final.jar:4.0.44.Final]
    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144) ~[netty-all-4.0.44.Final.jar:4.0.44.Final]
    at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_272]{noformat}
Manually trying a histogram from the CLI:
{noformat}
$ nodetool tablehistograms logdata log_height_index
error: 115
-- StackTrace --
java.lang.ArrayIndexOutOfBoundsException: 115
	at org.apache.cassandra.metrics.TableMetrics.combineHistograms(TableMetrics.java:261)
	at org.apache.cassandra.metrics.TableMetrics.access$000(TableMetrics.java:48)
	at org.apache.cassandra.metrics.TableMetrics$11.getValue(TableMetrics.java:376)
	at org.apache.cassandra.metrics.TableMetrics$11.getValue(TableMetrics.java:373)
	at org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxGauge.getValue(CassandraMetricsRegistry.java:250)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:276)
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112)
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46)
	at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237)
	at com.sun.jmx.mbeanserver.PerInterface.getAttribute(PerInterface.java:83)
	at com.sun.jmx.mbeanserver.MBeanSupport.getAttribute(MBeanSupport.java:206)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:647)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:678)
	at com.sun.jmx.remote.security.MBeanServerAccessController.getAttribute(MBeanServerAccessController.java:320)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1445)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1408)
	at javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:639)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
{noformat}",,blerer,flightc,jasonstack,Justin Montgomery,rtib,tommy_s,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,blerer,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Dec 02 14:04:00 UTC 2020,,,,,,,All,,,,,,"0|z0kfbc:",9223372036854775807,,,,bereng,jasonstack,,,Normal,,2.2.0,,,https://github.com/apache/cassandra/commit/e96b60bd9f814ee1a911e8820b7e255d23e2f24e,,,,,,,,,"The patch add some new unit tests to TableMetricsTest to check that the merging of histogram is working properly and that the metrics using that mechanism are returning the correct numbers.
",,,,,"10/Nov/20 05:41;flightc;Noting here that this came out of a [discussion on ASF Slack in the #cassandra channel|https://the-asf.slack.com/archives/CJZLTM05A/p1604884605220500].;;;","11/Nov/20 07:03;rtib;We have the same issue. Noteworthy observation is that not all tables are affected, but it's not the table schema, i.e. we have the same tables in multiple keyspaces, some of them fail histograms in one keyspace, not in the other.;;;","11/Nov/20 07:07;flightc;[~rtib] could you please confirm your version of Cassandra for completeness?;;;","11/Nov/20 08:14;rtib;These log messages started after upgrade Apache Cassandra from 3.11.8 to 3.11.9, running Datastax MCAC-Agent 0.1.11 (later upgraded to 0.1.12, without noticeable change).;;;","11/Nov/20 12:16;rtib;Scrubbing the affected table makes histograms work again.;;;","11/Nov/20 13:19;blerer;There is effectively a bug in the code [here|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/metrics/TableMetrics.java#L259]. If an SSTable histogram contains less buckets than the one of a previous SSTable, the call to {{nextBucket[i];}}  [here|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/metrics/TableMetrics.java#L261] will trigger an {{ArrayIndexOutOfBoundsException}}.
That code has been wrong since it was introduced in 2014 so the error has been caused by some change somewhere else in the code base.
I will fix that problem and dug a bit deeper to find out which change made us hit that issue. ;;;","12/Nov/20 16:59;blerer;I guess that the change that made us hit the issue is CASSANDRA-15164 where we changed the default number of buckets in the {{CellPerPartitionCountHistogram}}. Due to that it is possible to have some SSTables (the one created with the previous version) with a smaller amount of buckets than others. 

That would match the index {{115}} seen in the stack trace as the default number was raised from {{114}} to {{118}}. ;;;","13/Nov/20 08:10;rtib;Well, that would explain why scrubbing the table fixed it.

If I understand the change within CASSANDRA-15164 right, then the storage format of SSTable statistics has changed, which should also bump the SSTable version, shouldn't it?;;;","13/Nov/20 11:02;blerer;{quote}If I understand the change within CASSANDRA-15164 right, then the storage format of SSTable statistics has changed, which should also bump the SSTable version, shouldn't it?{quote}

The storage format did not change. The encoding was already {{<number_of_buckets><bucket_value>\*}}. The old code is able to read the statistics produced by the new one. The problem is only at the metric level where C* try to merge some SSTable histograms that have a different number of buckets with some buggy code.

When you scrub the old SSTable, it is recreated with the new number of buckets ensuring that you will not hit the TableMetric bug again. ;;;","16/Nov/20 19:56;Justin Montgomery;So is the current workaround to upgrade a node to 3.11.9 and then scrub all tables (or take the time to find which tables are causing errors and scrub just those)? Incidentally I upgraded to .9 and ran a repair and then a cleanup, but perhaps that doesn't necessarily rewrite the sstables because I still see the error;;;","17/Nov/20 07:38;rtib;Not in general. First, the bug is hitting only tables having both old and new SSTables, so it may happen, that a table having old SSTables only will work until it eventually get a new SSTable. Thus, finding out which tables are affected now, doesn't mean that in the future no more tables could suffer from this bug. Second, be aware of the fact that scrubbing a table using LCS will reset all SSTables to L0, which may have performance implications. Third, you would need to scrub all nodes, which could lead to data loss, therefore a full repair after the scrub is advisable on the node before scrubbing the next node.;;;","17/Nov/20 16:27;blerer;Sorry, I am sick since a couple of day and do not have the energy to dig into the code.
If I am not mistaken the problem can be solve by triggering an index summary redistribution using JMX ({{IndexSummaryManager.redistributeSummaries()}}). See CASSANDRA-5519 for a better understanding of the impact.
Hope it help.;;;","25/Nov/20 07:07;rtib;No, redistributing index summaries does not affect the current issue. Get well soon.;;;","26/Nov/20 09:57;blerer;[~rtib] Sorry, my brain was not working properly. :-(;;;","26/Nov/20 10:38;blerer;While working on a fix for this bug I hit another issue that impact the 3.0, 3.X and 4.0 versions. On some scenario the number of cells for a row is counted twice.

We count the number of cells per partition using the {{BigTableWriter.StatsCollector}} which will increment the number of cells when {{onPartitionClose}} is called. {{onPartitionClose}} is called when the transformed {{UnfilteredRowIterator}} is closed by the {{try-with-resources}} in [BigTableWriter.append|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/sstable/format/big/BigTableWriter.java#L214]. Unfortunately, If the {{UnfilteredRowIterator}} is an instance of {{UnfilteredRows}} [Transformation.apply|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/transform/Transformation.java#L138] will not create a wrapper around the {{UnfilteredRowIterator}} but will simply add the {{Transformation}} to the list of transformations associated to that iterator.
When a memtable is flush the {{UnfilteredRowIterator}} is opened in a {{try-with-resources}} in [FlushRunnable:writeSortedContent|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/Memtable.java#L473] before being passed to {{BigTableWriter|append}}. If the  {{UnfilteredRowIterator}} is an instance of {{UnfilteredRows}}, {{StatsCollector#onPartitionClose}} will be called twice and the cells for the row will be counted twice.

The patch contains a change that ensure that we do not hit that problem by ensuring that if we call {{close}} on a class inheriting from {{BaseIterator}} only the first close will be processed and the following one will be ignored.

|| Branches || Test results ||
| [trunk|https://github.com/apache/cassandra/pull/835] | [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/72/workflows/77c51c04-5a76-4530-99bd-cb1604f58931], [j11|https://app.circleci.com/pipelines/github/blerer/cassandra/72/workflows/ab7be933-239c-41fb-a907-fa76a859ed99] |
| [3.11|https://github.com/apache/cassandra/pull/836] | [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/69/workflows/9fb4aca3-3b41-4798-a921-07b4c7026b7e] |
| [3.0|https://github.com/apache/cassandra/pull/837] | [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/70/workflows/b0ef5b25-0a4f-4ddb-92cd-b4c76f7908ea] |
| [2.2|https://github.com/apache/cassandra/pull/838] | [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/71/workflows/d24c6595-9c8c-4893-86e0-ef3b15966f02] |
 
;;;","02/Dec/20 06:38;jasonstack;LGTM, thanks for the fix.;;;","02/Dec/20 14:03;blerer;The fix for the histogram merge of the table metrics was committed into cassandra-2.2 at e96b60bd9f814ee1a911e8820b7e255d23e2f24e and merged int cassandra-3.0, cassandra-3.11 and trung 
The fix for the counting of partition cells was committed into cassandra-3.0 at 6baeb9247b9156c08305326a77d8c27510d6cb40 and merged into cassandra-3.11 and trunk ;;;","02/Dec/20 14:04;blerer;Thanks a lot [~Bereng] and [~jasonstack] for the review :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm dtest is strict on properties which causes upgrade tests to fail,CASSANDRA-16256,13339576,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,09/Nov/20 18:18,16/Mar/22 14:34,13/Jul/23 08:39,10/Nov/20 18:51,NA,,,,,Test/dtest/java,,,,0,,,,"{code}
ConfigurationException: Invalid yaml. Please remove properties [cdc_raw_directory, diagnostic_events_enabled] from your cassandra.yaml
{code}

This was done in CASSANDRA-16152 to make sure we don’t have typo’s in configs, but this makes upgrades harder as InstanceConfig is used and this isn’t version aware.",,dcapwell,e.dimitrova,jmeredithco,jwest,maedhroz,yifanc,,,,,,"dcapwell opened a new pull request #813:
URL: https://github.com/apache/cassandra/pull/813


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 18:40;githubbot;600","maedhroz commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520126627



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/Instance.java
##########
@@ -530,7 +530,10 @@ private void mkdirs()
     private Config loadConfig(IInstanceConfig overrides)
     {
         Map<String,Object> params = ((InstanceConfig) overrides).getParams();
-        return YamlConfigurationLoader.fromMap(params, Config.class);
+        boolean check = true;
+        if (overrides.get(""dtest.api.config.check"") != null)

Review comment:
       @dcapwell I suppose it shouldn't change, but creating a constant for this that's also used in `newInstanceWrapper()` might be a good idea.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:19;githubbot;600","yifan-c commented on pull request #813:
URL: https://github.com/apache/cassandra/pull/813#issuecomment-724291776


   Built the 30 dtest jar and run the test again. Somehow, it still calls the check. The line# in the trace indicates the dtest jar is built from your 30 branch. 
   
   ```
   Caused by: org.apache.cassandra.exceptions.ConfigurationException: Invalid yaml. Please remove properties [cdc_raw_directory, diagnostic_events_enabled] from your cassandra.yaml
   	at org.apache.cassandra.config.YamlConfigurationLoader$MissingPropertiesChecker.check(YamlConfigurationLoader.java:223)
   	at org.apache.cassandra.config.YamlConfigurationLoader.fromMap(YamlConfigurationLoader.java:154)
   	at org.apache.cassandra.distributed.impl.Instance.loadConfig(Instance.java:646)
   	at org.apache.cassandra.distributed.impl.Instance.lambda$new$0(Instance.java:144)
   	at org.apache.cassandra.config.DatabaseDescriptor.loadConfig(DatabaseDescriptor.java:149)
   	at org.apache.cassandra.config.DatabaseDescriptor.<clinit>(DatabaseDescriptor.java:137)
   	... 7 more
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:34;githubbot;600","dcapwell commented on pull request #813:
URL: https://github.com/apache/cassandra/pull/813#issuecomment-724294743


   @yifan-c I set it up so normal tests will have this on, but upgrade will disable the check, you will need all branches to have the patch for it to work given how jvm-dtest works.
   
   AbstractCluster is in the test ClassLoader, and this will populate that flag
   Instance is in the InstanceClassLoader and will consume that flag
   
   If you don't have both jars updated, then you will default to checking and fail.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:40;githubbot;600","dcapwell commented on pull request #813:
URL: https://github.com/apache/cassandra/pull/813#issuecomment-724295513


   Here is the script I used to build/test locally (this assumes my setup, so paths may be different for you)
   
   ```
   $ cat ~/bin/oss-build-dtest
   #!/usr/bin/env bash
   
   #set -o xtrace
   set -o errexit
   set -o pipefail
   set -o nounset
   
   bin=""$(cd ""$(dirname ""$0"")"" > /dev/null; pwd)""
   
   error() {
     echo ""$*"" 1>&2
     exit 1
   }
   
   build() {
     local -r dir=""$1""
     cd ""$dir""
     rm -rf build
     #local branch_name=""$(basename ""$dir"")""
     #if [[ ""$branch_name"" == ""cassandra-trunk"" ]]; then
     #  branch_name=""trunk""
     #fi
     #git pull --rebase upstream ""$branch_name""
     ant jar dtest-jar
   }
   
   _main() {
     local dirs=(
       ~/src/github/apache/cassandra-2.2
       ~/src/github/apache/cassandra-3.0
       ~/src/github/apache/cassandra-3.11
       ~/src/github/apache/cassandra-trunk
     )
     for d in ""${dirs[@]}""; do
       build ""$d"" &
     done
     wait
     for outter in ""${dirs[@]}""; do
       for inner in ""${dirs[@]}""; do
         if [[ ""$outter"" == ""$inner"" ]]; then
           continue
         fi
         cp ""$outter""/build/dtest-* ""$inner/build"" || error ""Unable to copy dtest jars from $outter to $inner""
       done
     done
   }
   
   _main ""$@""
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:42;githubbot;600","yifan-c commented on pull request #813:
URL: https://github.com/apache/cassandra/pull/813#issuecomment-724298678


   Talked on slack. So I have only built the 30 jar. After building the 40 dtest jar as well, the test starts. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:49;githubbot;600","dcapwell commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520144800



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/Instance.java
##########
@@ -530,7 +530,10 @@ private void mkdirs()
     private Config loadConfig(IInstanceConfig overrides)
     {
         Map<String,Object> params = ((InstanceConfig) overrides).getParams();
-        return YamlConfigurationLoader.fromMap(params, Config.class);
+        boolean check = true;
+        if (overrides.get(""dtest.api.config.check"") != null)

Review comment:
       changed, but also moved the cluster_id one (same pattern) to a new Constants class.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:54;githubbot;600","yifan-c commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520145745



##########
File path: test/distributed/org/apache/cassandra/distributed/Constants.java
##########
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed;
+
+public final class Constants
+{
+    /**
+     * Property defined in {@link org.apache.cassandra.distributed.api.IInstanceConfig} which references the ID of the
+     * {@link org.apache.cassandra.distributed.api.ICluster}.
+     */
+    public static final String KEY_DTEST_API_CLUSTER_ID = ""dtest.api.cluster_id"";
+
+    /**
+     * Property used by Instances to determine if checking YAML configuration is required; set to false if validation
+     * of the YAML is not desired.
+     */
+    public static final String KEY_DTEST_API_CONFIG_CHECK = ""dtest.api.config.check"";

Review comment:
       nit: The constants seems to be best fit in the dtest api repo. 

##########
File path: test/distributed/org/apache/cassandra/distributed/UpgradeableCluster.java
##########
@@ -42,6 +42,7 @@ private UpgradeableCluster(Builder builder)
 
     protected IUpgradeableInstance newInstanceWrapper(int generation, Versions.Version version, IInstanceConfig config)
     {
+        config.set(Constants.KEY_DTEST_API_CONFIG_CHECK, false);

Review comment:
       It seems we always want to turn off check for jvm dtest. 
   In case we want to have test cases to check config, unit test could be more useful. 
   So maybe we can just hardcode it in `Instance.java`?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 21:59;githubbot;600","maedhroz commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520157500



##########
File path: test/distributed/org/apache/cassandra/distributed/Constants.java
##########
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed;
+
+public final class Constants
+{
+    /**
+     * Property defined in {@link org.apache.cassandra.distributed.api.IInstanceConfig} which references the ID of the
+     * {@link org.apache.cassandra.distributed.api.ICluster}.
+     */
+    public static final String KEY_DTEST_API_CLUSTER_ID = ""dtest.api.cluster_id"";
+
+    /**
+     * Property used by Instances to determine if checking YAML configuration is required; set to false if validation
+     * of the YAML is not desired.
+     */
+    public static final String KEY_DTEST_API_CONFIG_CHECK = ""dtest.api.config.check"";

Review comment:
       I agree, although getting this out as quickly as possible to un-break testing makes sense too (i.e. without waiting for an API release). At least with this class, we have a single thing to move to the API project later...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 22:20;githubbot;600","dcapwell commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520166348



##########
File path: test/distributed/org/apache/cassandra/distributed/Constants.java
##########
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed;
+
+public final class Constants
+{
+    /**
+     * Property defined in {@link org.apache.cassandra.distributed.api.IInstanceConfig} which references the ID of the
+     * {@link org.apache.cassandra.distributed.api.ICluster}.
+     */
+    public static final String KEY_DTEST_API_CLUSTER_ID = ""dtest.api.cluster_id"";
+
+    /**
+     * Property used by Instances to determine if checking YAML configuration is required; set to false if validation
+     * of the YAML is not desired.
+     */
+    public static final String KEY_DTEST_API_CONFIG_CHECK = ""dtest.api.config.check"";

Review comment:
       For now I feel its best to stay in-tree but open to revisit later?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 22:39;githubbot;600","dcapwell commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520167445



##########
File path: test/distributed/org/apache/cassandra/distributed/UpgradeableCluster.java
##########
@@ -42,6 +42,7 @@ private UpgradeableCluster(Builder builder)
 
     protected IUpgradeableInstance newInstanceWrapper(int generation, Versions.Version version, IInstanceConfig config)
     {
+        config.set(Constants.KEY_DTEST_API_CONFIG_CHECK, false);

Review comment:
       > It seems we always want to turn off check for jvm dtest.
   
   Nope!  They were added to block stuff like typos (turning this on actually found typos in tests!) and to match the behavior of CassandraDaemon.  This got complicated in upgrade as the dtest-api isn't that good about knowing the instance's version and adapting to it (python dtest is better with this at the moment).
   
   So, my feeling is that normal tests should have this on by default, but to disable in upgrade tests as the jvm-dtest api makes it hard to do that correctly.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 22:41;githubbot;600","yifan-c commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520169420



##########
File path: test/distributed/org/apache/cassandra/distributed/Constants.java
##########
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed;
+
+public final class Constants
+{
+    /**
+     * Property defined in {@link org.apache.cassandra.distributed.api.IInstanceConfig} which references the ID of the
+     * {@link org.apache.cassandra.distributed.api.ICluster}.
+     */
+    public static final String KEY_DTEST_API_CLUSTER_ID = ""dtest.api.cluster_id"";
+
+    /**
+     * Property used by Instances to determine if checking YAML configuration is required; set to false if validation
+     * of the YAML is not desired.
+     */
+    public static final String KEY_DTEST_API_CONFIG_CHECK = ""dtest.api.config.check"";

Review comment:
       make sense.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 22:46;githubbot;600","yifan-c commented on pull request #813:
URL: https://github.com/apache/cassandra/pull/813#issuecomment-724324302


   +1


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 22:47;githubbot;600","ekaterinadimitrova2 commented on a change in pull request #813:
URL: https://github.com/apache/cassandra/pull/813#discussion_r520731561



##########
File path: test/distributed/org/apache/cassandra/distributed/Constants.java
##########
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed;
+
+public final class Constants
+{
+    /**
+     * Property defined in {@link org.apache.cassandra.distributed.api.IInstanceConfig} which references the ID of the
+     * {@link org.apache.cassandra.distributed.api.ICluster}.
+     */
+    public static final String KEY_DTEST_API_CLUSTER_ID = ""dtest.api.cluster_id"";
+
+    /**
+     * Property used by Instances to determine if checking YAML configuration is required; set to false if validation
+     * of the YAML is not desired.
+     */
+    public static final String KEY_DTEST_API_CONFIG_CHECK = ""dtest.api.config.check"";

Review comment:
       +1 to unbreak the tests and follow up on later API release




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Nov/20 17:15;githubbot;600","smiklosovic closed pull request #813:
URL: https://github.com/apache/cassandra/pull/813


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:34;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,9000,,,0,9000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 10 18:10:44 UTC 2020,,,,,,,All,,,,,,"0|z0keso:",9223372036854775807,,,,e.dimitrova,jwest,maedhroz,yifanc,Normal,,NA,,,https://github.com/apache/cassandra/commit/047ac0ab26101132bc93bfac2b76de324ddb22a9,,,,,,,,,testing,,,,,"09/Nov/20 19:15;dcapwell;patch working locally, will trigger CI 

{code}
testclasslist:
     [echo] Number of test runners: 1
    [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/cassandra
    [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/output
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 29.934 sec
[junit-timeout]

BUILD SUCCESSFUL
Total time: 35 seconds
{code};;;","09/Nov/20 21:15;maedhroz;+1 on all 4 branches (which look more or less identical), and the Circle run looks fine, albeit with a metaspace problem that I'm guessing would g away on re-run. I was initially wondering if we might just maintain a list of properties to ignore on older versions, but the proposed patch avoiding that altogether and ignoring the checks altogether for upgrade tests seems like it should be easier to maintain. Thanks!;;;","09/Nov/20 21:29;dcapwell;bq. metaspace problem that I'm guessing would g away on re-run

nope, this is a known issue, see CASSANDRA-16237.  ;;;","09/Nov/20 22:55;yifanc;Patches lgtm. +1 
I was able to run the upgrade test locally using David's branches. 
We might want to relocate the {{Constants}} into the dtest-api later. ;;;","09/Nov/20 23:02;jwest;+1. Thanks for the quick fix. ;;;","09/Nov/20 23:20;jmeredithco;Definitely, thanks for the speedy fix. Sorry it got into the codebase.;;;","09/Nov/20 23:53;dcapwell;since [~e.dimitrova] was the reporter wanted to get her review as well, once she approves will merge (expected tomorrow).;;;","10/Nov/20 17:25;e.dimitrova;+1 from me.

Also, I agree with both points that were made:
 * fix the tests now but move the constants to the API on next release. 
 * It's great we don't have to maintain lists of config parameters! Thanks;;;","10/Nov/20 18:10;dcapwell;Starting commit

CI Results: Yellow, expected results and CASSANDRA-15957
||Branch||Source||Circle CI||Jenkins||
|cassandra-2.2|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16256-cassandra-2.2-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16256-cassandra-2.2-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/187/]|
|cassandra-3.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16256-cassandra-3.0-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16256-cassandra-3.0-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/188/]|
|cassandra-3.11|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16256-cassandra-3.11-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16256-cassandra-3.11-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/189/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16256-trunk-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16256-trunk-59F29227-67E6-4E09-B926-E4E209DEA096]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/190/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make sure OOM errors are rethrown on truncation failure,CASSANDRA-16254,13339534,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,09/Nov/20 14:22,03/Jan/21 16:58,13/Jul/23 08:39,15/Dec/20 09:57,4.0,4.0-beta4,,,,Local/Other,,,,0,,,,"Seems we don't rethrow OOM errors in [truncation verb handler|https://github.com/apache/cassandra/blob/609876275738589fdfb9a3e20cb2f594aa404037/src/java/org/apache/cassandra/db/TruncateVerbHandler.java#L44]

We also send both success and failure messages if the failure reason is not an FSError",,bereng,blerer,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Dec 15 09:57:04 UTC 2020,,,,,,,All,,,,,,"0|z0kejc:",9223372036854775807,,,,bereng,blerer,,,Low,,4.0-beta3,,,https://github.com/apache/cassandra/commit/242ab778f2decbf15e34ab4c28308274f4e01d01,,,,,,,,,"new in-jvm dtest, cci run",,,,,"09/Nov/20 14:26;marcuse;patch: https://github.com/krummas/cassandra/commits/marcuse/16254
cci: https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F16254;;;","12/Nov/20 06:20;bereng;Left a couple comments in commit #justfyi;;;","12/Nov/20 09:16;bereng;+1 from me but I'm no committer.;;;","14/Dec/20 09:15;blerer;The patch looks good to me.;;;","15/Dec/20 09:57;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ByteBufferAccessor.getUnsignedShort ignores ByteBuffer position,CASSANDRA-16249,13339164,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,06/Nov/20 12:04,03/Jan/21 16:58,13/Jul/23 08:39,15/Dec/20 13:53,4.0,4.0-beta4,,,,Legacy/Core,,,,0,,,,{{ByteBufferAccessor.readUnsignedShort}} does not include the current buffer position when calculating the final offset for reading data,,bereng,blerer,jlewandowski,,,,,,,,,"jacek-lewandowski opened a new pull request #811:
URL: https://github.com/apache/cassandra/pull/811


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Nov/20 12:13;githubbot;600","bereng commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r519558501



##########
File path: src/java/org/apache/cassandra/db/marshal/ByteBufferAccessor.java
##########
@@ -193,7 +193,7 @@ public short getShort(ByteBuffer value, int offset)
     @Override
     public int getUnsignedShort(ByteBuffer value, int offset)
     {
-        return ByteBufferUtil.getUnsignedShort(value, offset);
+        return ByteBufferUtil.getUnsignedShort(value, value.position() + offset);

Review comment:
       Good catch. The only one that's missing it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 05:21;githubbot;600","bereng commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r519559415



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -39,6 +39,28 @@
 
 public class ValueAccessorTest
 {
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybeCopyWithPadding(V value)

Review comment:
       Why not call it `maybePad`? The important bit here is whether it is being padded or not., not that is being copied or not. So when I first read it I was wondering why being copied or not was a thing.
   
   Also why pad in a 'random' way and not with a fix value? You can get 0 padding which beats the purpose of the test imo and if it failed you wouldn't know what was the padding value.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 05:25;githubbot;600","bereng commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-723764007


   @jacek-lewandowski  can you include a circle-ci run please?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 05:26;githubbot;600","jacek-lewandowski commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r519942287



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -39,6 +39,28 @@
 
 public class ValueAccessorTest
 {
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybeCopyWithPadding(V value)

Review comment:
       I'll rename the method and keep some kind of randomness. I'd like to avoid the situation that the subsequent paddings are of the same length.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Nov/20 16:25;githubbot;600","bereng commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r520303597



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -39,6 +39,28 @@
 
 public class ValueAccessorTest
 {
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybeCopyWithPadding(V value)

Review comment:
       Sgtm. What about printing in stdout the used padding or alternatively including the padded values in the assert msg? Sorry I usually do a lot of test fixing so I tend to ocd a bit on these test things that help me a lot lol




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Nov/20 05:53;githubbot;600","bereng commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-724648168


   We still need CI runs right?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Nov/20 11:39;githubbot;600","blerer commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r521991697



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -39,6 +39,28 @@
 
 public class ValueAccessorTest
 {
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybeCopyWithPadding(V value)

Review comment:
       The those tests are already relying heavily on randomness. Having several level of randomness sound like a bad idea to me unless we do it proprely. Logging some extra data along the way is far from a perfect solution. The `testUnsignedShort` test already relies on `quicktheories` which produce a really clear output on failure allowing somebody to easily reproduce the problem. It is possible to use that library to add the extra randomness you need for testing your change. Doing it for the others tests will require more work as they do not relies on `quicktheories`.     
   
   We all have suffered a lot trying to get ride of flaky tests and the experience as showed us that unless people are easily able to reproduce the problem they will chose to wait for somebody else to fix it.  




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Nov/20 10:16;githubbot;600","jacek-lewandowski commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r522978100



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -39,6 +39,28 @@
 
 public class ValueAccessorTest
 {
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybeCopyWithPadding(V value)

Review comment:
       ok, i didn't know quicktheories, please have a look at my recent changes




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Nov/20 14:19;githubbot;600","bereng commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-729523810


   LGTM pending CI links


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Nov/20 08:34;githubbot;600","blerer commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r533418984



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -20,75 +20,95 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
-import com.google.common.primitives.Shorts;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.junit.Assert;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.utils.ByteArrayUtil;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.assertj.core.api.Assertions;
 import org.quicktheories.core.Gen;
 import org.quicktheories.generators.SourceDSL;
 
 import static org.apache.cassandra.db.marshal.ValueAccessors.ACCESSORS;
+import static org.apache.cassandra.utils.ByteArrayUtil.bytesToHex;
+import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.quicktheories.QuickTheory.qt;
+import static org.quicktheories.generators.SourceDSL.arbitrary;
+import static org.quicktheories.generators.SourceDSL.doubles;
+import static org.quicktheories.generators.SourceDSL.integers;
 
 public class ValueAccessorTest
 {
-    private static byte[] randomBytes(int minSize, int maxSize, Random random)
+    final static Supplier<Gen<Integer>> leftPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<Integer>> rightPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<ValueAccessor>> accessors = () -> SourceDSL.arbitrary().pick(ACCESSORS);
+    final static Supplier<Gen<Function>> paddings = () -> leftPadding.get().zip(rightPadding.get(), (l, r) -> v -> maybePad(v, l, r));
+    final static byte[] bytes = new byte[200];
+
+    @BeforeClass
+    public static void beforeClass()
     {
-        int size = random.nextInt(maxSize - minSize + 1) + minSize;
-        byte[] bytes = new byte[size];
-        random.nextBytes(bytes);
-        return bytes;
+        new Random(0).nextBytes(bytes);
+    }
+
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybePad(V value, int lPad, int rPad)

Review comment:
       I do not think that padding on the right bring any value. If some of the tests were exceeding the `limit` they would fail even without the right padding.  

##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -20,75 +20,95 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
-import com.google.common.primitives.Shorts;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.junit.Assert;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.utils.ByteArrayUtil;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.assertj.core.api.Assertions;
 import org.quicktheories.core.Gen;
 import org.quicktheories.generators.SourceDSL;
 
 import static org.apache.cassandra.db.marshal.ValueAccessors.ACCESSORS;
+import static org.apache.cassandra.utils.ByteArrayUtil.bytesToHex;
+import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.quicktheories.QuickTheory.qt;
+import static org.quicktheories.generators.SourceDSL.arbitrary;
+import static org.quicktheories.generators.SourceDSL.doubles;
+import static org.quicktheories.generators.SourceDSL.integers;
 
 public class ValueAccessorTest
 {
-    private static byte[] randomBytes(int minSize, int maxSize, Random random)
+    final static Supplier<Gen<Integer>> leftPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<Integer>> rightPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<ValueAccessor>> accessors = () -> SourceDSL.arbitrary().pick(ACCESSORS);
+    final static Supplier<Gen<Function>> paddings = () -> leftPadding.get().zip(rightPadding.get(), (l, r) -> v -> maybePad(v, l, r));
+    final static byte[] bytes = new byte[200];
+
+    @BeforeClass
+    public static void beforeClass()
     {
-        int size = random.nextInt(maxSize - minSize + 1) + minSize;
-        byte[] bytes = new byte[size];
-        random.nextBytes(bytes);
-        return bytes;
+        new Random(0).nextBytes(bytes);
+    }
+
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybePad(V value, int lPad, int rPad)
+    {
+        if (value instanceof ByteBuffer)
+        {
+            ByteBuffer buf = ByteBuffer.allocate(((ByteBuffer) value).remaining() + lPad + rPad);
+            buf.position(lPad);
+            buf.duplicate().put((ByteBuffer) value);

Review comment:
       The use of `duplicate` is confusing. Using `put` directly on the buffer and ressetting  the position to `lpad` achieve the same result in a way easier to understand and without creating an unecessary object. 

##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -20,75 +20,95 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
-import com.google.common.primitives.Shorts;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.junit.Assert;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.utils.ByteArrayUtil;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.assertj.core.api.Assertions;
 import org.quicktheories.core.Gen;
 import org.quicktheories.generators.SourceDSL;
 
 import static org.apache.cassandra.db.marshal.ValueAccessors.ACCESSORS;
+import static org.apache.cassandra.utils.ByteArrayUtil.bytesToHex;
+import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.quicktheories.QuickTheory.qt;
+import static org.quicktheories.generators.SourceDSL.arbitrary;
+import static org.quicktheories.generators.SourceDSL.doubles;
+import static org.quicktheories.generators.SourceDSL.integers;
 
 public class ValueAccessorTest
 {
-    private static byte[] randomBytes(int minSize, int maxSize, Random random)
+    final static Supplier<Gen<Integer>> leftPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<Integer>> rightPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<ValueAccessor>> accessors = () -> SourceDSL.arbitrary().pick(ACCESSORS);
+    final static Supplier<Gen<Function>> paddings = () -> leftPadding.get().zip(rightPadding.get(), (l, r) -> v -> maybePad(v, l, r));
+    final static byte[] bytes = new byte[200];
+
+    @BeforeClass
+    public static void beforeClass()
     {
-        int size = random.nextInt(maxSize - minSize + 1) + minSize;
-        byte[] bytes = new byte[size];
-        random.nextBytes(bytes);
-        return bytes;
+        new Random(0).nextBytes(bytes);
+    }
+
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybePad(V value, int lPad, int rPad)
+    {
+        if (value instanceof ByteBuffer)
+        {
+            ByteBuffer buf = ByteBuffer.allocate(((ByteBuffer) value).remaining() + lPad + rPad);
+            buf.position(lPad);
+            buf.duplicate().put((ByteBuffer) value);
+            buf.limit(buf.limit() - rPad);
+            return (V) buf;
+        }
+        else
+        {
+            return value;
+        }
     }
 
-    private static ValueAccessor<?> nextAccessor(Random random)
+    private static byte[] randomBytes(int size)
     {
-        return ACCESSORS[random.nextInt(ACCESSORS.length)];
+        assert size <= ValueAccessorTest.bytes.length;
+        byte[] bytes = new byte[size];
+        System.arraycopy(ValueAccessorTest.bytes, 0, bytes, 0, size);
+        return bytes;
     }
 
-    private static <V1, V2> void testHashCodeAndEquals(int seed, ValueAccessor<V1> accessor1, ValueAccessor<V2> accessor2, Random random)
+    private static <V1, V2> void testHashCodeAndEquals(int size, int sliceOffset, int sliceSize,
+                                                       ValueAccessor<V1> accessor1, Function<V1, V1> padding1,
+                                                       ValueAccessor<V2> accessor2, Function<V2, V2> padding2)
     {
-        byte[] rawBytes = randomBytes(2, 200, random);
-        int sliceOffset = random.nextInt(rawBytes.length);
-        int sliceSize = random.nextInt(rawBytes.length - sliceOffset);
-        V1 value1 = accessor1.slice(accessor1.valueOf(rawBytes), sliceOffset, sliceSize);
-        V2 value2 = accessor2.slice(accessor2.valueOf(rawBytes), sliceOffset, sliceSize);
+        byte[] rawBytes = randomBytes(size);
+        V1 value1 = accessor1.slice(padding1.apply(accessor1.valueOf(rawBytes)), sliceOffset, sliceSize);
+        V2 value2 = accessor2.slice(padding2.apply(accessor2.valueOf(rawBytes)), sliceOffset, sliceSize);

Review comment:
       I do not believe that using `slice` here makes a lot of sense (I know that it was there before :-)). It looks like it was just some way to have some randomness in the array shape. We could simply use `valueOf` on an array generated by quicktheories. The `slice` method probably deserve a test in itself. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Dec/20 14:12;githubbot;600","bereng commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-737760166


   I don't see anything remarkable in Benjamin's patch. LGTM. The only nit is that using `AsserThat` family of assertions already produces human friendly messages and you can spare building them up yourself.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 08:54;githubbot;600","jacek-lewandowski commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r534975457



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -20,75 +20,95 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
-import com.google.common.primitives.Shorts;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.junit.Assert;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.utils.ByteArrayUtil;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.assertj.core.api.Assertions;
 import org.quicktheories.core.Gen;
 import org.quicktheories.generators.SourceDSL;
 
 import static org.apache.cassandra.db.marshal.ValueAccessors.ACCESSORS;
+import static org.apache.cassandra.utils.ByteArrayUtil.bytesToHex;
+import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.quicktheories.QuickTheory.qt;
+import static org.quicktheories.generators.SourceDSL.arbitrary;
+import static org.quicktheories.generators.SourceDSL.doubles;
+import static org.quicktheories.generators.SourceDSL.integers;
 
 public class ValueAccessorTest
 {
-    private static byte[] randomBytes(int minSize, int maxSize, Random random)
+    final static Supplier<Gen<Integer>> leftPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<Integer>> rightPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<ValueAccessor>> accessors = () -> SourceDSL.arbitrary().pick(ACCESSORS);
+    final static Supplier<Gen<Function>> paddings = () -> leftPadding.get().zip(rightPadding.get(), (l, r) -> v -> maybePad(v, l, r));
+    final static byte[] bytes = new byte[200];
+
+    @BeforeClass
+    public static void beforeClass()
     {
-        int size = random.nextInt(maxSize - minSize + 1) + minSize;
-        byte[] bytes = new byte[size];
-        random.nextBytes(bytes);
-        return bytes;
+        new Random(0).nextBytes(bytes);
+    }
+
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybePad(V value, int lPad, int rPad)

Review comment:
       The purpose of this was to make sure we read only what we need to read instead of reading everything AFAIR - that is, read the size and only that number of content that is specified by size rather than the rest of the buffer




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 09:06;githubbot;600","jacek-lewandowski commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r534976907



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -20,75 +20,95 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
-import com.google.common.primitives.Shorts;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.junit.Assert;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.utils.ByteArrayUtil;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.assertj.core.api.Assertions;
 import org.quicktheories.core.Gen;
 import org.quicktheories.generators.SourceDSL;
 
 import static org.apache.cassandra.db.marshal.ValueAccessors.ACCESSORS;
+import static org.apache.cassandra.utils.ByteArrayUtil.bytesToHex;
+import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.quicktheories.QuickTheory.qt;
+import static org.quicktheories.generators.SourceDSL.arbitrary;
+import static org.quicktheories.generators.SourceDSL.doubles;
+import static org.quicktheories.generators.SourceDSL.integers;
 
 public class ValueAccessorTest
 {
-    private static byte[] randomBytes(int minSize, int maxSize, Random random)
+    final static Supplier<Gen<Integer>> leftPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<Integer>> rightPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<ValueAccessor>> accessors = () -> SourceDSL.arbitrary().pick(ACCESSORS);
+    final static Supplier<Gen<Function>> paddings = () -> leftPadding.get().zip(rightPadding.get(), (l, r) -> v -> maybePad(v, l, r));
+    final static byte[] bytes = new byte[200];
+
+    @BeforeClass
+    public static void beforeClass()
     {
-        int size = random.nextInt(maxSize - minSize + 1) + minSize;
-        byte[] bytes = new byte[size];
-        random.nextBytes(bytes);
-        return bytes;
+        new Random(0).nextBytes(bytes);
+    }
+
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybePad(V value, int lPad, int rPad)
+    {
+        if (value instanceof ByteBuffer)
+        {
+            ByteBuffer buf = ByteBuffer.allocate(((ByteBuffer) value).remaining() + lPad + rPad);
+            buf.position(lPad);
+            buf.duplicate().put((ByteBuffer) value);

Review comment:
       right




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 09:07;githubbot;600","blerer commented on a change in pull request #811:
URL: https://github.com/apache/cassandra/pull/811#discussion_r534995123



##########
File path: test/unit/org/apache/cassandra/db/marshal/ValueAccessorTest.java
##########
@@ -20,75 +20,95 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Random;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
-import com.google.common.primitives.Shorts;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.junit.Assert;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.utils.ByteArrayUtil;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.assertj.core.api.Assertions;
 import org.quicktheories.core.Gen;
 import org.quicktheories.generators.SourceDSL;
 
 import static org.apache.cassandra.db.marshal.ValueAccessors.ACCESSORS;
+import static org.apache.cassandra.utils.ByteArrayUtil.bytesToHex;
+import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.quicktheories.QuickTheory.qt;
+import static org.quicktheories.generators.SourceDSL.arbitrary;
+import static org.quicktheories.generators.SourceDSL.doubles;
+import static org.quicktheories.generators.SourceDSL.integers;
 
 public class ValueAccessorTest
 {
-    private static byte[] randomBytes(int minSize, int maxSize, Random random)
+    final static Supplier<Gen<Integer>> leftPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<Integer>> rightPadding = () -> integers().between(0, 2);
+    final static Supplier<Gen<ValueAccessor>> accessors = () -> SourceDSL.arbitrary().pick(ACCESSORS);
+    final static Supplier<Gen<Function>> paddings = () -> leftPadding.get().zip(rightPadding.get(), (l, r) -> v -> maybePad(v, l, r));
+    final static byte[] bytes = new byte[200];
+
+    @BeforeClass
+    public static void beforeClass()
     {
-        int size = random.nextInt(maxSize - minSize + 1) + minSize;
-        byte[] bytes = new byte[size];
-        random.nextBytes(bytes);
-        return bytes;
+        new Random(0).nextBytes(bytes);
+    }
+
+    /**
+     * This method should be used to test values to be processed by {@link ValueAccessor}
+     * in order to make sure we do not assume position == 0 in the underlying {@link ByteBuffer}
+     */
+    public static <V> V maybePad(V value, int lPad, int rPad)

Review comment:
       `ByteBuffer` operations will fire an `IndexOutOfBoundsException` if the index goes over the `limit`. As the right padding was after the `limit` it was not changing anything in practice. The right padding was only changing the buffer `capacity` allowing a larger place for writes. By consequence, a write that would have failed would now succeed.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 09:25;githubbot;600","blerer commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-737791284


   @jacek-lewandowski Any concerns with the additional commit I proposed?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 09:41;githubbot;600","jacek-lewandowski commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-744758893


   @blerer it looks very nice, thank you


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Dec/20 22:45;githubbot;600","blerer commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-745296839


   I ran the tests on CI: 
   [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/83/workflows/f2542fcd-b870-4d49-89cc-27ae0529ec2d]
   [j11|https://app.circleci.com/pipelines/github/blerer/cassandra/83/workflows/4e33d52f-0f2f-40b4-93ee-f3c1812ebc84]
   
   The failing tests look unrelated to the changes.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 13:48;githubbot;600","blerer commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-745297059


   +1


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 13:48;githubbot;600","blerer closed pull request #811:
URL: https://github.com/apache/cassandra/pull/811


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 13:56;githubbot;600","blerer commented on pull request #811:
URL: https://github.com/apache/cassandra/pull/811#issuecomment-745301046


   Merge manually


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 13:56;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,12600,,,0,12600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Dec 15 13:53:49 UTC 2020,,,,,,,All,,,,,,"0|z0kc94:",9223372036854775807,,,,bereng,blerer,,,Critical,,4.0-beta1,,,https://github.com/apache/cassandra/commit/1102687d06ab2dda3c022e4b464286a1b372e6d9,,,,,,,,,Add new unit tests and modify the tests to find issues with methods assuming a zero position for the ByteBuffers. ,,,,,"15/Dec/20 13:53;blerer;Committed into trunk at 1102687d06ab2dda3c022e4b464286a1b372e6d9;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"GossipTest hangs until timeout, then fails.",CASSANDRA-16248,13339163,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,samt,samt,06/Nov/20 11:56,03/Jan/21 16:58,13/Jul/23 08:39,06/Nov/20 19:25,4.0,4.0-beta4,,,,Local/Startup and Shutdown,Messaging/Internode,Test/dtest/java,,0,,,,"A couple of recent updates appear to have broken {{o.a.c.d.t.GossipTest}}

* There seems to have been a merge/commit race between CASSANDRA-16146 ([{{fee7a108}}|https://github.com/apache/cassandra/commit/fee7a10823da1e29bd0e6504fea9679389180c9e]) and CASSANDRA-15935 ([{{41952a2f}}|https://github.com/apache/cassandra/commit/41952a2f73ba5198250f64beba8f7ff1203204ab]). The former adds a ByteBuddy interception on {{StorageService::bootstrap}}, but the latter changed the method signature, so this never actually gets injected. This causes a latch in the test not to be counted down and it hangs until timeout.
* After fixing the test code, it still hangs due to changes to {{server_encryption_options}} initialization in CASSANDRA-16144 ([{{f293376a}}|https://github.com/apache/cassandra/commit/f293376aa8dd315a208ef2f03bdcb7a84dcc675c]). It appears to be causing an incorrect keystore location to be specified, which causes instance startup to fail, again leading to the test hanging until it times out. I don't have the cycles to dig into this further right now, but reverting that commit (and making the test fix above) restores the green bar.

",,dcapwell,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 06 19:25:30 UTC 2020,,,,,,,All,,,,,,"0|z0kc8w:",9223372036854775807,,,,,,,,Critical,,,,,,,,,,,,,,,,,,,"06/Nov/20 18:20;brandon.williams;I fixed the tests in e5ab8c1951, but cc [~yifanc];;;","06/Nov/20 19:16;dcapwell;{code}
./ci-test org/apache/cassandra/distributed/test/GossipTest
...
testclasslist:
     [echo] Number of test runners: 1
    [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/cassandra
    [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/output
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.GossipTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.GossipTest Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 56.095 sec
[junit-timeout]

BUILD SUCCESSFUL
Total time: 1 minute 37 seconds
{code}

trunk is working for me again, thanks for the commit [~yifanc] and [~brandon.williams];;;","06/Nov/20 19:25;brandon.williams;Works for me too, that commit got it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test testTPStats - org.apache.cassandra.tools.NodeToolGossipInfoTest,CASSANDRA-16247,13339091,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dcapwell,dcapwell,05/Nov/20 22:49,21/Dec/20 08:54,13/Jul/23 08:39,13/Nov/20 17:02,4.0,4.0-beta4,,,,Test/unit,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/764/workflows/6d7a6adc-59d1-4f3c-baae-1f8329dca9b7/jobs/4363

{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.tools.NodeToolGossipInfoTest.testTPStats(NodeToolGossipInfoTest.java:128)
{code}",,dcapwell,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 13 17:02:59 UTC 2020,,,,,,,All,,,,,,"0|z0kbsw:",9223372036854775807,,,,samt,,,,Normal,,4.0-beta2,,,https://github.com/apache/cassandra/commit/94663c314a8a2c69a90cc64ac7e60344ba1c60ce,,,,,,,,,https://ci-cassandra.apache.org/job/Cassandra-devbranch/199/,,,,,"13/Nov/20 16:50;brandon.williams;Patch to compare <= instead of <, since that is more correct as to how the heartbeat increments with regard to query timing.;;;","13/Nov/20 16:51;samt;+1;;;","13/Nov/20 17:02;brandon.williams;Committed w/rename nit.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Unexpected warning ""Ignoring Unrecognized strategy option"" for NetworkTopologyStrategy when restarting",CASSANDRA-16246,13339086,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,05/Nov/20 21:08,03/Jan/21 16:58,13/Jul/23 08:39,13/Nov/20 13:57,4.0,4.0-beta4,,,,Observability/Logging,,,,0,,,,"During restarting, bunch of warning messages like ""AbstractReplicationStrategy.java:364 - Ignoring Unrecognized strategy option {datacenter2} passed to NetworkTopologyStrategy for keyspace distributed_test_keyspace"" are logged. 
The warnings are not expected since the mentioned DC exist. 
It seems to be caused by the improper order during startup, so that when opening keyspaces it is unaware of DCs. 

The warning can be reproduced using the test below. 

{code:java}
@Test
public void testEmitsWarningsForNetworkTopologyStategyConfigOnRestart() throws Exception {
    int nodesPerDc = 2;
    try (Cluster cluster = builder().withConfig(c -> c.with(GOSSIP, NETWORK))
                                    .withRacks(2, 1, nodesPerDc)
                                    .start()) {
        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE +
                             "" WITH replication = {'class': 'NetworkTopologyStrategy', "" +
                             ""'datacenter1' : "" + nodesPerDc + "", 'datacenter2' : "" + nodesPerDc + "" };"");
        cluster.get(2).nodetool(""flush"");
        System.out.println(""Stop node 2 in datacenter 1"");
        cluster.get(2).shutdown().get();
        System.out.println(""Start node 2 in datacenter 1"");
        cluster.get(2).startup();
        List<String> result = cluster.get(2).logs().grep(""Ignoring Unrecognized strategy option \\{datacenter2\\}"").getResult();
        Assert.assertFalse(result.isEmpty());
    }
}
{code}
",,brandon.williams,samt,yifanc,,,,,,,,,"yifan-c opened a new pull request #810:
URL: https://github.com/apache/cassandra/pull/810


   - Populate saved hostIds into TokenMetadata during startup


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Nov/20 04:05;githubbot;600","yifan-c closed pull request #810:
URL: https://github.com/apache/cassandra/pull/810


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Nov/20 22:58;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 13 13:57:17 UTC 2020,,,,,,,All,,,,,,"0|z0kbrs:",9223372036854775807,,,,samt,,,,Low,,3.0.0,,,https://github.com/apache/cassandra/commit/fde640fe52704836ec21fedd62cae21290e099ec,,,,,,,,,"ci, jvm dtest",,,,,"06/Nov/20 05:14;yifanc;The cause is that when creating NetworkTopologyStategy of keyspaces during {{CassandraDaemon#setup}}, the tokenMetadata does not have hostIds populated from the saved hostIds. {{Datacenters#getValidDatacenters}} is unable to lookup the remote DCs and {{ConfigurationException}} is thrown later. 

To fix the unexpected warning message, the {{StorageService#populateTokenMetadata}} is updated to also load the {{hostId -> endpoint}} map from the saved hostIds. 

PR: https://github.com/apache/cassandra/pull/810
CI: https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=C-16246-warn-networktopologystrategy-restart;;;","12/Nov/20 17:39;samt;This diagnosis and solution looks right to me. I just have a couple of suggestions to tidy up a bit, partly because the original reason for reloading the ring state after the shadow gossip round no longer applies since CASSANDRA-12653. I've pushed them to [this branch|https://github.com/beobal/cassandra/commits/beobal/16246-trunk] ([CI|https://app.circleci.com/pipelines/github/beobal/cassandra?branch=beobal%2F16246-trunk]);;;","12/Nov/20 21:29;yifanc;Thank you [~samt]! The simplification looks good. I have cherry-picked your commit and updated in the branch. ;;;","13/Nov/20 13:55;samt;Thanks, LGTM;;;","13/Nov/20 13:57;samt;Committed to trunk in {{fde640fe52704836ec21fedd62cae21290e099ec}}, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayClustering does not properly handle null clustering key elements left over from tables created WITH COMPACT STORAGE,CASSANDRA-16241,13338456,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,02/Nov/20 16:12,21/Dec/20 09:04,13/Jul/23 08:39,10/Nov/20 20:46,4.0,4.0-beta4,,,,Local/Compaction,,,,0,compaction,,,"The only way we can produce null clustering key elements is leaving them empty on insert while a table is still compact. If we subsequently DROP COMPACT STORAGE, those null elements linger, and {{ArrayClustering}} does not handle them appropriately on compaction. 

If you run the test [here|https://github.com/maedhroz/cassandra/commit/e247b7868cae383168153bbe8bbbaa47a660f76b], you should be able to observe an exception that looks roughly like this:

{noformat}
java.lang.NullPointerException
	at java.base/java.nio.ByteBuffer.wrap(ByteBuffer.java:422)
	at org.apache.cassandra.db.AbstractArrayClusteringPrefix.getBufferArray(AbstractArrayClusteringPrefix.java:45)
	at org.apache.cassandra.io.sstable.metadata.MetadataCollector.finalizeMetadata(MetadataCollector.java:246)
	at org.apache.cassandra.io.sstable.format.SSTableWriter.finalizeMetadata(SSTableWriter.java:315)
	at org.apache.cassandra.io.sstable.format.big.BigTableWriter.access$200(BigTableWriter.java:52)
	at org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy.doPrepare(BigTableWriter.java:415)
	at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.prepareToCommit(Transactional.java:168)
	at org.apache.cassandra.io.sstable.format.SSTableWriter.prepareToCommit(SSTableWriter.java:283)
	at org.apache.cassandra.io.sstable.SSTableRewriter.doPrepare(SSTableRewriter.java:380)
	at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.prepareToCommit(Transactional.java:168)
	at org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doPrepare(CompactionAwareWriter.java:118)
	at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.prepareToCommit(Transactional.java:168)
	at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.finish(Transactional.java:179)
	at org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.finish(CompactionAwareWriter.java:128)
	at org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:225)
	at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)
{noformat}

There are already numerous places where we respect the fact that clustering elements may be null, so this should be pretty straightforward to fix, and the tests that accompany it will probably be more complex than the fix itself.",,dcapwell,jwest,maedhroz,yifanc,,,,,,,,"maedhroz opened a new pull request #802:
URL: https://github.com/apache/cassandra/pull/802


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:51;githubbot;600","maedhroz closed pull request #802:
URL: https://github.com/apache/cassandra/pull/802


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Nov/20 20:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 10 20:46:14 UTC 2020,,,,,,,All,,,,,,"0|z0k7w8:",9223372036854775807,,,,jwest,yifanc,,,Critical,,4.0-beta3,,,https://github.com/apache/cassandra/commit/beee6b441c71895ca7b2833631933a6a55b516c2,,,,,,,,,There is a new test here that reproduces the problem in a way that's basically identical to the way it occurred on an actual cluster.,,,,,"02/Nov/20 16:15;maedhroz;I've marked this as a ""degradation"" affecting ""resource management"" since it essentially blocks compactions, but you could consider it a ""correctness"" issue as well.;;;","02/Nov/20 17:50;maedhroz;[patch|https://github.com/apache/cassandra/pull/802], [Circle8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/141/workflows/07d9b042-a59c-4585-ae3e-2c48f58d8214], [Circle11|https://app.circleci.com/pipelines/github/maedhroz/cassandra/141/workflows/da29c5a9-4f5b-440c-b49f-bce780466862]

The tests look clean, except for one Java 8-only failure in {{TestMaterializedViews}}., but that doesn't look related at all.;;;","05/Nov/20 22:31;jwest;+1 LGTM. Ran the test locally as well and verified it failed without the fix. Also looked at the call-sites of {{getBufferArrray}}. ;;;","09/Nov/20 07:10;yifanc;The newly added upgrade test runs locally. It throws NPE with same trace when running w/o your patch. And the test passes with the patch. 
However, I have to comment out setting {{cdc_raw_directory}} and {{diagnostic_events_enabled}} in [InstanceConfig.java|https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/impl/InstanceConfig.java#L95-L113] in order to start the test. 
Please rebase and rerun the upgrade test in CI, there might be a recent change that breaks it.;;;","09/Nov/20 15:51;maedhroz;[~yifanc] I've rebased and started the JVM upgrade tests again here: https://app.circleci.com/pipelines/github/maedhroz/cassandra/142/workflows/e657431c-1e91-45e8-b8f4-321f89408b5f;;;","10/Nov/20 01:08;yifanc;Beside leaving clustering key empty on insertion, there is one other case that generates null values in clustering key. 
When dropping the {{COMPACT STORAGE}} from a table that has no clustering columns, a new clustering column is added to the table, and its value could be null. I modified your test to simulate that scenario, but compaction does not have a problem with it (using trunk code base). 

The patch makes sense to me. +1 and thanks.
;;;","10/Nov/20 01:31;maedhroz;[~jwest] Would you be able to commit this? (It's just trunk...);;;","10/Nov/20 18:12;jwest;Spoke with [~maedhroz] and we're going to wait until CASSANDRA-16256 merges so we can get a cleaner upgrade test build.;;;","10/Nov/20 18:17;dcapwell;pre-commit results https://issues.apache.org/jira/browse/CASSANDRA-16256?focusedCommentId=17229412&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17229412;;;","10/Nov/20 19:45;maedhroz;If [https://app.circleci.com/pipelines/github/maedhroz/cassandra/143/workflows/ebc21a43-f3eb-4de4-aada-e7295cc27a71] looks good, we should be okay to merge...;;;","10/Nov/20 20:46;jwest;Committed as https://github.com/apache/cassandra/commit/beee6b441c71895ca7b2833631933a6a55b516c2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky jvm-dtests that fail with Unable to contact any seeds,CASSANDRA-16238,13337917,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dcapwell,dcapwell,29/Oct/20 18:24,29/Apr/21 18:22,13/Jul/23 08:39,29/Apr/21 18:22,4.0,4.0-rc2,,,,Test/dtest/java,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/745/workflows/1c7e589e-b5af-4a56-b40a-43da424602c7/jobs/4231

{code}
test teardown failure
Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [main] 2020-10-29 17:38:13,808 CassandraDaemon.java:817 - Exception encountered during startup
java.lang.IllegalStateException: Unable to contact any seeds!
	at org.apache.cassandra.service.StorageService.bootstrap(StorageService.java:1601)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:931)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:892)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:699)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:635)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:407)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:671)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:795), ERROR [main] 2020-10-29 17:38:13,808 CassandraDaemon.java:817 - Exception encountered during startup
java.lang.IllegalStateException: Unable to contact any seeds!
	at org.apache.cassandra.service.StorageService.bootstrap(StorageService.java:1601)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:931)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:892)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:699)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:635)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:407)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:671)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:795)]
{code}",,aholmber,bereng,dcapwell,Gerrrr,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15239,,,,,,,,,"23/Jan/21 19:16;mck;16238-archived-failures.txt;https://issues.apache.org/jira/secure/attachment/13019247/16238-archived-failures.txt",,,,,,,,,,,,,,1.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 29 18:22:48 UTC 2021,,,,,,,All,,,,,,"0|z0k4ko:",9223372036854775807,,,,dcapwell,,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/3a610066eb3df5603d8a4d0fd491e0233c708eb5,,,,,,,,,CI,,,,,"12/Jan/21 18:45;aholmber;I've had this looping on multiple platforms for the better part of a week and have not been able to reproduce. In sleuthing I have not come up with anything more to go on. Logs are gone from the linked run in Circle, and I haven't figured out how to get them from Jenkins. 

Jenkins shows the test at 13% flaky on trunk, with the last failure on Dec 15. Curiously, the runtimes reported for failures are always ~0.5 seconds. Not sure if that is possible, or if it's a problem with interpreting test results.

I'm going to set this aside for now. Maybe somebody else can think of a way to reproduce.;;;","18/Jan/21 06:53;bereng;0% flakiness and 100% stability [where the last fail|https://ci-cassandra.apache.org/job/Cassandra-trunk/232/testReport/dtest-novnode.replace_address_test/TestReplaceAddress/test_insert_data_during_replace_same_address/]ures are from a month ago. I say we close it until it resurfaces, rather than keeping it open, as we have nothing to on with.;;;","19/Jan/21 16:38;brandon.williams;If the network were broken, I think what we see here would be the result (or on any other dtest, for that matter.)  If we can't reproduce after dutiful effort, I that's a sufficient enough possibility to solve for now and reopen if we see it again.;;;","23/Jan/21 19:27;mck;bq. 0% flakiness and 100% stability where the last failures are from a month ago.

Here's the link(s) based off the latest build (rather than a build number that will expire to 404 soon)
-  [trunk dtest-novnode|https://ci-cassandra.apache.org/job/Cassandra-trunk/lastCompletedBuild/testReport/dtest-novnode.replace_address_test/TestReplaceAddress/test_insert_data_during_replace_same_address/]
-  [trunk dtest|https://ci-cassandra.apache.org/job/Cassandra-trunk/lastCompletedBuild/testReport/dtest.replace_address_test/TestReplaceAddress/test_insert_data_during_replace_same_address/]
- [trunk dtest-offheap|https://ci-cassandra.apache.org/job/Cassandra-trunk/lastCompletedBuild/testReport/dtest-offheap.replace_address_test/TestReplaceAddress/test_insert_data_during_replace_same_address/]

h4. Searching nightlies.a.o for past failures…

We can use the nightlies archives for a complete search:
{code}
# webdav mount `https://nightlies.apache.org/cassandra/` to `/Volumes/cassandra`
cd /Volumes/cassandra

# define what we are looking for
export DTEST_CLASS=""replace_address_test.TestReplaceAddress""
export DTEST_NAME=""test_insert_data_during_replace_same_address""

# find builds where it failed
find Cassandra-trunk-dtest*/label=cassandra,split=* -name nosetests.xml -exec grep -q ${DTEST_CLASS} {} \; -exec grep -l ""name=\""${DTEST_NAME}\"" time=\""[0-9.]*\""><error message"" {} \;

# alongside the nosetest.xml files you will find the `test_stdout.txt.xz` and `ccm_logs.tar.xz` logs
{code}
Alternatively, to control check, find builds where it succeeded
{code}
# alternatively, to control check, find builds where it succeeded
find Cassandra-trunk-dtest*/label=cassandra,split=* -name nosetests.xml -exec grep -q ${DTEST_CLASS} {} \; -exec grep -l ""name=\""${DTEST_NAME}\"" time=\""[0-9.]*\""></testcase>"" {} \;
{code}

h4. Past failures and logs
The above recipe lists 54 failures (from currently what is archived in nighties.a.o).
 Links to the folders containing the logs are listed in the attachment  [^16238-archived-failures.txt] 
Within just {{Cassandra-trunk-dtest}} there's 17 failures from 193 archived runs. (9% flakiness)
;;;","15/Apr/21 17:26;dcapwell;I am reopening as this error impacts any multi-node jvm-dtest and not localized to a single test

Examples:
* https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/659/tests/

hostReplaceAbruptShutdown – org.apache.cassandra.distributed.test.hostreplacement.HostReplacementAbruptDownedInstanceTest

{code}
java.lang.IllegalStateException: Unable to contact any seeds!
	at org.apache.cassandra.service.StorageService.bootstrap(StorageService.java:1749)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1054)
	at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1015)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:799)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:729)
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$10(Instance.java:541)
{code}

* CASSANDRA-15239;;;","26/Apr/21 20:56;brandon.williams;Branch [here|https://github.com/driftx/cassandra/tree/CASSANDRA-16238].

[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/714/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/714/pipeline]

{noformat}
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:05,381 Gossiper.java:1296 - Node /127.0.0.1:7012 is now part of the cluster
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:05,381 StorageService.java:2730 - Node /127.0.0.1:7012 state NORMAL, token [-3074457345618258603]
[junit-timeout] INFO  [node4_GossipTasks:1] node4 2021-04-23 16:23:05,393 Gossiper.java:997 - FatClient /127.0.0.1:7012 has been silent for 0ms, removing from gossip
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:05,398 StorageService.java:2677 - New node /127.0.0.1:7012 at token -3074457345618258603
{noformat}

We can see here that .1 is detected for the first time via gossip, and as it is going through StorageService but before it is added to TokenMetatadata, the gossiper's status check has begun running.  Since the quarantine delay is overridden to zero, without a presence in TMD the node is not a member yet and thus deemed a fat client, and removed.

{noformat}
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:05,407 TokenMetadata.java:505 - Updating topology for /127.0.0.1:7012
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:05,414 TokenMetadata.java:505 - Updating topology for /127.0.0.1:7012
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:05,422 StorageService.java:2730 - Node /127.0.0.1:7012 state NORMAL, token [-3074457345618258603]
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:05,422 StorageService.java:2733 - Node /127.0.0.1:7012 state jump to NORMAL
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:05,447 Gossiper.java:1243 - removing expire time for endpoint : /127.0.0.1:7012
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:05,447 Gossiper.java:1244 - InetAddress /127.0.0.1:7012 is now UP
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:05,447 Gossiper.java:579 - removed /127.0.0.1:7012 from seeds, updated seeds list = []
[junit-timeout] WARN  16:23:05 Seeds list is now empty!
[junit-timeout] WARN  [node4_GossipStage:1] node4 2021-04-23 16:23:05,447 Gossiper.java:581 - Seeds list is now empty!
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:05,452 Gossiper.java:590 - removing endpoint /127.0.0.1:7012
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:05,452 Gossiper.java:561 - evicting /127.0.0.1:7012 from gossip
[junit-timeout] DEBUG [node4_GossipTasks:1] node4 2021-04-23 16:23:06,453 Gossiper.java:1025 - 0 elapsed, /127.0.0.1:7012 gossip quarantine over
{noformat}

Crucially, as part of this removal the node is also removed from the seeds list, since it is listed there. The warning about the empty seed list is added from my branch.

{noformat}
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:07,176 Gossiper.java:1296 - Node /127.0.0.1:7012 is now part of the cluster
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:07,177 StorageService.java:2730 - Node /127.0.0.1:7012 state NORMAL, token [-3074457345618258603]
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:07,189 StorageService.java:2677 - New node /127.0.0.1:7012 at token -3074457345618258603
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:07,198 TokenMetadata.java:505 - Updating topology for /127.0.0.1:7012
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:07,201 TokenMetadata.java:505 - Updating topology for /127.0.0.1:7012
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:07,208 StorageService.java:2730 - Node /127.0.0.1:7012 state NORMAL, token [-3074457345618258603]
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:07,208 StorageService.java:2733 - Node /127.0.0.1:7012 state jump to NORMAL
[junit-timeout] DEBUG [node4_GossipStage:1] node4 2021-04-23 16:23:07,220 Gossiper.java:1243 - removing expire time for endpoint : /127.0.0.1:7012
[junit-timeout] INFO  [node4_GossipStage:1] node4 2021-04-23 16:23:07,220 Gossiper.java:1244 - InetAddress /127.0.0.1:7012 is now UP
[junit-timeout] DEBUG [node4_BatchlogTasks:1] node4 2021-04-23 16:23:07,383 BatchlogManager.java:246 - Updating batchlog replay throttle to 1024 KB/s, 256 KB/s per endpoint
[junit-timeout] DEBUG [node4_isolatedExecutor:1] node4 2021-04-23 16:23:12,457 Gossiper.java:2142 - Gossip looks settled.
{noformat}

Another round of gossip mostly papers over this problem, except:

{noformat}
[junit-timeout] Unable to contact any seeds: []
[junit-timeout] java.lang.IllegalStateException: Unable to contact any seeds: []
[junit-timeout]         at org.apache.cassandra.service.StorageService.bootstrap(StorageService.java:1752)
[junit-timeout]         at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1054)
[junit-timeout]         at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:1015)
[junit-timeout]         at org.apache.cassandra.service.StorageService.initServer(StorageService.java:799)
[junit-timeout]         at org.apache.cassandra.service.StorageService.initServer(StorageService.java:729)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$10(Instance.java:541)
[junit-timeout]         at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[junit-timeout]         at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[junit-timeout]         at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[junit-timeout]         at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.base/java.lang.Thread.run(Thread.java:834)
{noformat}

There's (correctly) no logic to add a removed node back as a seed.  This branch also prints the seeds list when this happens to disambiguate between problems contacting seeds, and problems like this where the problem is not having any seeds left to contact.

Ultimately, quarantine delay can't be set this low.  I tried low non-zero values, but it needs to be set to at least one gossiper interval to avoid not accidentally reaping nodes as fat clients prematurely, and since ring delay was already being overridden and quarantine delay derived from that, I just removed the quarantine delay override.;;;","26/Apr/21 22:31;dcapwell;The host replacement tests set it low, but what about the other classes which hit this (such as the original test https://app.circleci.com/pipelines/github/dcapwell/cassandra/745/workflows/1c7e589e-b5af-4a56-b40a-43da424602c7/jobs/4231)?  We have seen this with nodeDownDuringMove(org.apache.cassandra.distributed.test.GossipTest) as well.;;;","26/Apr/21 22:57;dcapwell;Review

* https://github.com/apache/cassandra/compare/trunk...driftx:CASSANDRA-16238#diff-99267a2170b04fd7dd24d6c6bf2ba1fc26d6dc896cd74f8c5bd56c476e2540e4R580 - nit: you can call isEmpty rather than size

For the host replacement tests, I set that field low to help find issues, so if this case happens more frequently because of that I am cool removing it; but we do see this outside of these classes as well.

bq. .1 is detected for the first time via gossip, and as it is going through StorageService but before it is added to TokenMetatadata, the gossiper's status check has begun running

If I understand you, the call to StorageService.onChange (which calls handleStateNormal) happens-after gossip status check, so removes the state? GossipDigestAck2 should be handled in the gossip stage and eventually call applyNewStates to apply the state and trigger notifications, but doStatusCheck is called in the GossipTasks thread pool, which checks isGossipOnlyMember which returns true in this case (as state isn't fully settled yet), at which point we schedule a task in the gossip stage to remove (but at this point the isGossipOnlyMember(endpoint) == false).  

If I understand you correctly, this feels like a race condition where we read data not fully committed, which feels like a bug (which is why it was set to 0 in the first place).  Do I understand you [~brandon.williams]?;;;","27/Apr/21 14:34;brandon.williams;bq. but we do see this outside of these classes as well.

I haven't seen those yet.

bq. If I understand you, the call to StorageService.onChange (which calls handleStateNormal) happens-after gossip status check, so removes the state?

It's hard to know the exact order but it's clear from the first few log lines that the status check and onChange are happening concurrently.

bq. If I understand you correctly, this feels like a race condition where we read data not fully committed, which feels like a bug (which is why it was set to 0 in the first place). Do I understand you Brandon Williams?

That may be the case as well, but yes you understand my theory thus far.


;;;","28/Apr/21 02:03;dcapwell;If this is a race reading un-committed data, then the patch below might work around it (double check locking, but with queues)

Patch:

{code}
$ git diff
diff --git a/src/java/org/apache/cassandra/gms/Gossiper.java b/src/java/org/apache/cassandra/gms/Gossiper.java
index 699f235bd3..e82b107bac 100644
--- a/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -928,6 +928,11 @@ public class Gossiper implements IFailureDetectionEventListener, GossiperMBean
                 {
                     logger.info(""FatClient {} has been silent for {}ms, removing from gossip"", endpoint, fatClientTimeout);
                     runInGossipStageBlocking(() -> {
+                        if (!isGossipOnlyMember(endpoint))
+                        {
+                            // updating gossip and token metadata are not atomic, but rely on the single threaded gossip stage
+                            // since status checks are done outside the gossip stage, need to confirm the state of the endpoint
+                            // to make sure that the previous read data was correct
+                            logger.info(""Race condition marking {} as a FatClient; ignoring"", endpoint);
+                            return;
+                        }
                         removeEndpoint(endpoint); // will put it in justRemovedEndpoints to respect quarantine delay
                         evictFromMembership(endpoint); // can get rid of the state immediately
                     });
{code};;;","28/Apr/21 16:49;brandon.williams;{noformat}
[junit-timeout] WARN  [node4_GossipStage:1] node4 2021-04-28 16:02:24,532 Gossiper.java:1002 - Race condition marking /127.0.0.2:7012 as a FatClient; ignoring
{noformat}

That will work too.;;;","29/Apr/21 17:10;brandon.williams;[Branch|https://github.com/driftx/cassandra/tree/CASSANDRA-16238] [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/716/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/716/pipeline]

;;;","29/Apr/21 17:32;dcapwell;+1;;;","29/Apr/21 18:22;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test mixedModeReadRepairUpdate - org.apache.cassandra.distributed.upgrade.MixedModeReadRepairTest,CASSANDRA-16237,13337916,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,dcapwell,dcapwell,29/Oct/20 18:23,16/Mar/22 14:34,13/Jul/23 08:39,11/Nov/20 20:49,4.0,4.0-beta4,,,,Test/dtest/java,,,,0,,,,"[https://app.circleci.com/pipelines/github/dcapwell/cassandra/745/workflows/1c7e589e-b5af-4a56-b40a-43da424602c7/jobs/4233]
 
{code}
java.lang.RuntimeException: java.lang.OutOfMemoryError: Metaspace
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$11(Instance.java:514)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.OutOfMemoryError: Metaspace
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:757)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at org.apache.cassandra.distributed.shared.InstanceClassLoader.loadClassInternal(InstanceClassLoader.java:101)
	at org.apache.cassandra.distributed.shared.InstanceClassLoader.loadClass(InstanceClassLoader.java:87)
	at org.apache.cassandra.net.OutboundConnections$UnusedConnectionMonitor.<init>(OutboundConnections.java:265)
	at org.apache.cassandra.net.OutboundConnections.scheduleUnusedConnectionMonitoring(OutboundConnections.java:312)
	at org.apache.cassandra.net.MessagingService.<init>(MessagingService.java:262)
	at org.apache.cassandra.net.MessagingService$MSHandle.<clinit>(MessagingService.java:226)
	at org.apache.cassandra.net.MessagingService.instance(MessagingService.java:231)
	at org.apache.cassandra.distributed.impl.Instance.registerMockMessaging(Instance.java:253)
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$11(Instance.java:466)
	at org.apache.cassandra.distributed.impl.Instance$$Lambda$16500/806573706.run(Unknown Source)
{code}",,adelapena,dcapwell,maedhroz,,,,,,,,,"maedhroz opened a new pull request #815:
URL: https://github.com/apache/cassandra/pull/815


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Nov/20 20:50;githubbot;600","adelapena commented on a change in pull request #815:
URL: https://github.com/apache/cassandra/pull/815#discussion_r521459419



##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeReadRepairDeleteTest.java
##########
@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.upgrade;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
+
+public class MixedModeReadRepairDeleteTest extends UpgradeTestBase

Review comment:
       We could add a comment about why we have split the tests. That could be a hint for someone trying to unify them, or extending any of them with more cases.
   ```suggestion
   /**
    * Test read repair after partial deletions when the cluster nodes are in different versions.
    *
    * This test and {@link MixedModeReadRepairWriteTest} are separated to avoid OOM errors on CI (see CASSANDRA-16237).
    */
   public class MixedModeReadRepairDeleteTest extends UpgradeTestBase
   ```

##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeReadRepairWriteTest.java
##########
@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.upgrade;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
+
+/**
+ * Test read repair when the cluster nodes are in different versions

Review comment:
       ```suggestion
    * Test read repair after partial writes when the cluster nodes are in different versions.
    *
    * This test and {@link MixedModeReadRepairDeleteTest} are separated to avoid OOM errors on CI (see CASSANDRA-16237).
   ```

##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java
##########
@@ -196,4 +196,14 @@ public TestCase nodesToUpgrade(int ... nodes)
         }
     }
 
+    protected TestCase allUpgrades(int nodes, int... toUpgrade)

Review comment:
       Nice utility function. Maybe we could have a variant asking for a range of versions, like everything up to 3.x, that could be used in `mixedModeReadRepairCompactStorage`. Not saying that we should do it in this ticket, though.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Nov/20 16:16;githubbot;600","dcapwell commented on a change in pull request #815:
URL: https://github.com/apache/cassandra/pull/815#discussion_r521557502



##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/ReadRepairCompactStorageUpgradeTest.java
##########
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.upgrade;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.shared.Versions;
+
+public class ReadRepairCompactStorageUpgradeTest extends UpgradeTestBase
+{
+    /**
+     * Tests {@code COMPACT STORAGE} behaviour with mixed replica versions.
+     * <p>
+     * See CASSANDRA-15363 for further details.
+     */
+    @Test
+    public void mixedModeReadRepairCompactStorage() throws Throwable

Review comment:
       It looks like COMPACT STORAGE is partially coming back, so wondering if the author of that patch should extend this?

##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/ReadRepairCompactStorageUpgradeTest.java
##########
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.upgrade;
+
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.shared.Versions;
+
+public class ReadRepairCompactStorageUpgradeTest extends UpgradeTestBase
+{
+    /**
+     * Tests {@code COMPACT STORAGE} behaviour with mixed replica versions.
+     * <p>
+     * See CASSANDRA-15363 for further details.
+     */
+    @Test
+    public void mixedModeReadRepairCompactStorage() throws Throwable
+    {
+        new TestCase()
+        .nodes(2)
+        .upgrade(Versions.Major.v22, Versions.Major.v30)
+        .upgrade(Versions.Major.v22, Versions.Major.v3X)
+        .upgrade(Versions.Major.v30, Versions.Major.v3X)
+        .setup((cluster) -> cluster.schemaChange(withKeyspace(""CREATE TABLE %s.tbl"" +

Review comment:
       COMPACT STORAGE has different flavors, so thinking we should also test these other flavors as well.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Nov/20 19:09;githubbot;600","smiklosovic closed pull request #815:
URL: https://github.com/apache/cassandra/pull/815


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:34;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Nov 11 19:37:03 UTC 2020,,,,,,,All,,,,,,"0|z0k4kg:",9223372036854775807,,,,adelapena,dcapwell,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/4d5b68cfd8609b5a03a5966c4e5a2a76f2c5c872,,,,,,,,,this patch just breaks up some existing tests to avoid Metaspace problems,,,,,"29/Oct/20 19:06;dcapwell;[~maedhroz], [~adelapena], would either of you be able to look into this?  There may be a leak so unable to cleanup... a common work around is to split the class into multiple classes.;;;","09/Nov/20 22:15;maedhroz;[~adelapena] I'm going to take a shot at splitting this up. I'll probably be asking for your review soon...;;;","10/Nov/20 16:42;adelapena;Good, I'll be happy to review.;;;","10/Nov/20 20:54;maedhroz;[patch|https://github.com/apache/cassandra/pull/815] [CircleCI j8 with upgrade tests|https://app.circleci.com/pipelines/github/maedhroz/cassandra/146/workflows/5867ebbf-0c04-4fb9-b049-dd0184575782];;;","11/Nov/20 15:55;adelapena;The patch has survived two runs of in-JVM upgrade tests in ci-cassandra too:

https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/66/
https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/67/;;;","11/Nov/20 16:27;maedhroz;Second CircleCI run here: https://app.circleci.com/pipelines/github/maedhroz/cassandra/146/workflows/8e6ad0d8-b432-4874-bf31-a10892be7288;;;","11/Nov/20 17:40;adelapena;All four CI rounds have succeeded. Changes look good to me.;;;","11/Nov/20 19:12;dcapwell;+1

The patch is a clean refactor and should speed up CI runs; though sad we need this refactor =/

I did leave a few comments about COMPACT STORAGE, but since this patch isn't dealing with that I think its fine to punt to the patch adding COMPACT STORAGE back (CASSANDRA-16217 [~ifesdjeen]).;;;","11/Nov/20 19:13;dcapwell;bq. Changes look good to me

[~adelapena] if this is your +1 then I can start the commit.;;;","11/Nov/20 19:19;adelapena;[~dcapwell] that is my +1.;;;","11/Nov/20 19:37;dcapwell;CI Results: Yellow; known issues, and `org.apache.cassandra.distributed.test.RepairTest` which had a timeout (calling this as unrelated)
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16237-trunk-7BBC8F6D-B889-4C4D-A616-D16740C06C01]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16237-trunk-7BBC8F6D-B889-4C4D-A616-D16740C06C01]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/191/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky testTrackMaxDeletionTime,CASSANDRA-16236,13337911,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,brandon.williams,brandon.williams,29/Oct/20 17:48,27/May/21 15:49,13/Jul/23 08:39,26/Mar/21 20:31,4.0,4.0-rc1,,,,Test/unit,,,,0,,,,"* 
testTrackMaxDeletionTime - org.apache.cassandra.io.sstable.SSTableMetadataTest
 
junit.framework.AssertionFailedError: expected:<1.6038784E9> but was:<1.60387827E9>
	at org.apache.cassandra.io.sstable.SSTableMetadataTest.testTrackMaxDeletionTime(SSTableMetadataTest.java:102)

https://app.circleci.com/pipelines/github/bereng/cassandra/160/workflows/6cb80410-b398-477c-b4c9-cc7369785869/jobs/1317",,adelapena,aholmber,bereng,brandon.williams,e.dimitrova,mck,,,,,,"adelapena opened a new pull request #942:
URL: https://github.com/apache/cassandra/pull/942


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/21 16:00;githubbot;600","adelapena closed pull request #942:
URL: https://github.com/apache/cassandra/pull/942


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/21 15:49;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Mar/21 19:12;mck;Screenshot 2021-03-23 at 20.12.18.png;https://issues.apache.org/jira/secure/attachment/13022859/Screenshot+2021-03-23+at+20.12.18.png",,,,,,,,,,,,,,1.0,adelapena,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Mar 29 04:55:40 UTC 2021,,,,,,,All,,,,,,"0|z0k4jc:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Normal,,2.0.0,,,https://github.com/apache/cassandra/commit/9b32b8a4369049aec6e0848d21f524a40d2c93f1,,,,,,,,,The fixed flaky test should be stable,,,,,"16/Dec/20 16:20;aholmber;Have you found anything on this? I see the logs are now deleted in Circle. 100% stable in ci-cassandra.;;;","16/Dec/20 16:23;brandon.williams;I have not, and haven't seen this anywhere since the first time.;;;","13/Jan/21 17:46;brandon.williams;Closing this since it has never been seen again and there is nothing actionable.  Please reopen if this recurs.;;;","24/Jan/21 08:30;mck;Taking a search of nightlies.a.o found no failures.
{code}
# webdav mount  https://nightlies.apache.org/cassandra/ to /Volumes/cassandra
cd /Volumes/cassandra

xzgrep testTrackMaxDeletionTime  Cassandra-trunk/*/TESTS-TestSuites.xml.xz
{code}
(The test xml for the unit test jobs, like [this|https://ci-cassandra.apache.org//job/Cassandra-trunk-test/jdk=jdk_1.8_latest,label=cassandra/lastSuccessfulBuild/artifact/build/test/output/], are not archived (yet) so the slower greps against the full pipeline xml test reports have to done).;;;","23/Mar/21 19:12;mck;Failure spotted:
- [Cassandra-trunk #368|https://nightlies.apache.org/cassandra/ci-cassandra.apache.org/job/Cassandra-trunk/368/] \\   !Screenshot 2021-03-23 at 20.12.18.png|width=300! 

Downstream stage job:
- [Cassandra-trunk-test-cdc jdk_11 #599|https://nightlies.apache.org/cassandra/ci-cassandra.apache.org/job/Cassandra-trunk-test-cdc/599/] with logs [here|https://nightlies.apache.org/cassandra/Cassandra-trunk-test-cdc/jdk=jdk_11_latest,label=cassandra/599/build/test/logs/cdc/TEST-org.apache.cassandra.io.sstable.SSTableMetadataTest.log.xz];;;","25/Mar/21 10:42;bereng;I can't repro no mater how much I loop it...;;;","26/Mar/21 16:06;adelapena;It's not easy to reproduce the problem just running it, but it can be reproduced adding calls to {{Thread.sleep}} before [this call to {{System.currentTimeMillis}}|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java#L97].

The cause of the problem is in [this call to {{assertEquals}}|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java#L102]. Since the compared timestamps and the delta are integers {{Assert.assertEquals(float, float, float)}} is used. The int timestamps are casted to floats and, since they have relatively high values, the loss of precision of the cast can make the comparison to fail. For example, while debugging I have seen a run where the compared timestamps were 1616771139 and 1616771129. They are inside the max allowed delta of ten seconds, but the difference between their float values is higher than that (1616771139f - 1616771129f = 128.0).

[The proposed PR|https://github.com/apache/cassandra/pull/942] just forces the use of {{Assert.assertEquals(double, double, double)}} instead of {{Assert.assertEquals(float, float, float)}}, which should give us enough precision.

CI results:
 * [CircleCI j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/241/workflows/12960670-589d-41b2-a08f-6d28796bec35]
 * [CircleCI j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/241/workflows/09114f17-1a5f-479a-8b06-916ba2aa1246]
* [ci-cassandra utest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/336/]
* [Internal multiplexer|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/744/];;;","26/Mar/21 16:11;brandon.williams;That is an excellent catch, thank you for the analysis!  I looked at this patch before you posted it, and didn't catch what the fix was, it's so subtle in reading but clear in the explanation. +1 if CI agrees.;;;","26/Mar/21 17:18;adelapena;I'm glad you like it :) 

Looking for other similar calls to {{Assert.assertEquals(float, float, float)}} across the codebase, I have found that {{SSTableMetadataTrackingTest}}, which is quite similar to {{SSTableMetadataTest}}, might have the same problem. I have added a similar fix for it in the PR.

I can't find other similar cases, which would be anything calling {{Assert.assertEquals(float, float, float)}} with big integers, greater than 2^24 (16777216) if I'm right.

New CI runs:
 * [CircleCI j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/242/workflows/ff53bab0-0840-4df7-98de-70b98611f0af]
 * [CircleCI j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/242/workflows/ca7e2484-f94c-4c03-b62a-c4fb445405b3]
 * [ci-cassandra utest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/337/]
 * [Internal multiplexer|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/745/];;;","26/Mar/21 18:28;brandon.williams;+1;;;","26/Mar/21 20:05;e.dimitrova;CI and patch look good to me, thanks [~adelapena], that was a good catch fixing also the other class :) ;;;","26/Mar/21 20:19;adelapena;Thanks for the reviews. CI looks good to me, the failures don't seem related, especially since the changes are limited to {{SSTableMetadataTest}} and {{SSTableMetadataTrackingTest}} and these tests pass.;;;","26/Mar/21 20:29;adelapena;Committed to trunk as [9b32b8a4369049aec6e0848d21f524a40d2c93f1|https://github.com/apache/cassandra/commit/9b32b8a4369049aec6e0848d21f524a40d2c93f1].;;;","29/Mar/21 04:55;bereng;Nice catch [~adelapena];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSTableLoader issue when restoring a table named backups,CASSANDRA-16235,13337881,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,29/Oct/20 14:44,21/Dec/20 09:29,13/Jul/23 08:39,02/Nov/20 16:02,4.0,4.0-beta3,,,,Tool/sstable,,,,0,,,,"""backups"" is a keyword used to parse sstable path (Descriptor.fromFilename())..
If sstable file's parent directory name is ""backups"", it takes ""backups""'s parent directory name as table name.",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14013,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Nov 02 16:02:33 UTC 2020,,,,,,,All,,,,,,"0|z0k4co:",9223372036854775807,,,,brandon.williams,,,,Low,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/d808412ff9778fe72ea784a8eff7a693908681f9,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16235?focusedCommentId=17223935&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17223935,,,,,"30/Oct/20 22:48;e.dimitrova;We rely on the directory structure to find the keyspace and table of a sstable. We should record those in a component (new or existing) and use that instead of relying on any particular directory structure. Doing so isn't trivial and probably only reasonable for alpha version.
At this moment it's better to try to work-around this. Typically, we could have special code that (only in the sstableloader code tbc), if the normal path fails to find a table from a sstable file, look if the top-level directory is called ""backup"" and tries to correct for this. It's a hack so we should open a follow up ticket to rework this in the future.
[4.0 pull request | https://github.com/ekaterinadimitrova2/cassandra/pull/68] | [CI Java 8 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/454/workflows/5dbb8e75-9741-4231-b7b8-016e2368f18d] | [CI Java 11 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/454/workflows/5ad44fd2-6a93-4f7b-a7ac-98839a2d1093]

Only failed test in Java 11 and unrelated - test_compression_cql_options - compression_test.TestCompression; I will check on Monday whether a ticket is needed for it

[~brandon.williams], do you mind to review this one, please, if you have some time?
Thanks in advance!;;;","02/Nov/20 16:02;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update NetBeans project file for dependency changes since 11th Feb 2020,CASSANDRA-16234,13337863,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,29/Oct/20 11:48,20/Nov/20 08:23,13/Jul/23 08:39,20/Nov/20 08:23,4.0,4.0-beta4,,,,Build,,,,0,,,,"A number of dependencies have been add/removed/updated to the project.
The netbeans project file needs an update to be in-sync.

Causing tickets:
 - CASSANDRA-15677
 - CASSANDRA-16064
 - CASSANDRA-12995
 - CASSANDRA-15867
 - CASSANDRA-12197
 - CASSANDRA-15556
 - CASSANDRA-15868
 - CASSANDRA-16150
 - CASSANDRA-15631
 - CASSANDRA-15851
 - CASSANDRA-16148
 - CASSANDRA-14655
 - CASSANDRA-15867
 - CASSANDRA-15388
 - CASSANDRA-15564
 - CASSANDRA-16127",,bereng,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15677,CASSANDRA-15867,CASSANDRA-15868,CASSANDRA-15388,CASSANDRA-15851,CASSANDRA-14655,CASSANDRA-16064,CASSANDRA-12197,CASSANDRA-16148,CASSANDRA-16127,CASSANDRA-15564,CASSANDRA-15631,CASSANDRA-12995,CASSANDRA-15556,CASSANDRA-16150,CASSANDRA-16212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 20 08:23:40 UTC 2020,,,,,,,All,,,,,,"0|z0k48o:",9223372036854775807,,,,bereng,mck,,,Low,,4.0-alpha3,,,https://github.com/apache/cassandra/commit/1b139bc66ca39baa81571538633f503648ff6f5c,,,,,,,,,"open project in NetBeans, example instructions at https://cassandra.apache.org/doc/latest/development/ide.html#opening-cassandra-in-apache-netbeans",,,,,"11/Nov/20 11:12;mck;Patch at https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_16234 ;;;","11/Nov/20 11:15;mck;[~dotbg], would you be interested in reviewing this? (It's a one-liner.);;;","19/Nov/20 06:10;bereng;LGTM 1+;;;","20/Nov/20 08:23;mck;Committed as [1b139bc66ca39baa81571538633f503648ff6f5c|https://github.com/apache/cassandra/commit/1b139bc66ca39baa81571538633f503648ff6f5c].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky jvm-dtest: org.apache.cassandra.distributed.test.ring.NodeNotInRingTest.nodeNotInRingTest,CASSANDRA-16229,13337483,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,yifanc,yifanc,27/Oct/20 17:53,25/Feb/21 10:25,13/Jul/23 08:39,20/Jan/21 18:49,4.0,4.0-rc1,,,,Test/dtest/java,,,,0,,,,"Test failed during CI build. Stack trace attached below, 

[https://app.circleci.com/pipelines/github/yifan-c/cassandra/135/workflows/371dee8e-36d2-41a1-b27f-f7578496a1fe/jobs/681]
{code:java}
Testcase: nodeNotInRingTest(org.apache.cassandra.distributed.test.ring.NodeNotInRingTest):  FAILED
expected:<86> but was:<100>
junit.framework.AssertionFailedError: expected:<86> but was:<100>
 at org.apache.cassandra.distributed.test.ring.NodeNotInRingTest.nodeNotInRingTest(NodeNotInRingTest.java:60)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43){code}

Besides the flakiness, the expected and the actual values are swapped in the assertion statement.",,dcapwell,e.dimitrova,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jan 20 18:49:49 UTC 2021,,,,,,,All,,,,,,"0|z0k1w8:",9223372036854775807,,,,e.dimitrova,ycai,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/12b610246bc42dc6af33abfe0885b2f989fc2c73,,,,,,,,,Make flaky test pass.,,,,,"29/Oct/20 19:00;dcapwell;[~ifesdjeen] can you look into this?;;;","19/Jan/21 18:40;brandon.williams;||Branch||Apache CI||
|[CASSANDRA-16229|https://github.com/driftx/cassandra/tree/CASSANDRA-16229]|[ci-cassandra|https://ci-cassandra.apache.org/job/Cassandra-devbranch/309/]|

The test was manually removing endpoints from the gossiper and doing endpoint cleanup incorrectly - after notifying StorageService about a change in state, it should handle all this as necessary.  Doing it manually creates a race somewhere.;;;","19/Jan/21 23:33;yifanc;Thanks for the patch! Agree with your analysis. The manual endpoint removal does not seem to be necessary, and could cause race with handling the left status. 

A nit for the test case is to add an explicit check after removing node3 from the ring. It checks that from the perspective of the remaining nodes, there should be just 2 nodes. 
{code:java}
cluster.run(GossipHelper.removeFromRing(cluster.get(3)), 1, 2);
// assert that node1 and node2 only sees 2 nodes in the ring. 
cluster.run(inst -> inst.runsOnInstance(() -> {
    Assert.assertEquals(""There should be 2 remaining nodes in ring"", 
                        2, StorageService.instance.effectiveOwnershipWithPort(KEYSPACE).size());
}), 1, 2);
{code};;;","20/Jan/21 16:06;e.dimitrova;Thanks [~brandon.williams]. The patch looks good to me.

I second what [~yifanc] proposed.;;;","20/Jan/21 18:49;brandon.williams;Committed w/nit test added, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableMetrics are exposed before ColumnFamilyStore is fully initialized,CASSANDRA-16228,13337449,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,27/Oct/20 14:46,03/Jan/21 16:58,13/Jul/23 08:39,10/Nov/20 13:06,3.0.24,3.11.10,4.0,4.0-beta4,,Observability/Metrics,,,,0,,,,"The {{ColumnFamilyStore}} exposes the {{TableMetrics}} before it is fully initialized, due to that it is possible to perform a call via the metrics that access uninitialized part of the {{ColumnFamilyStore}}. 

The following test can be added to ColumnFamilyMetricTest to show the issue:
{code:java}
@Test
public void testStartupRaceConditionOnMetricListeners()
{
 // Since the ColumnFamilyStore instance reference escapes during the construction
 // we have a race condition and listeners can see an instance that is in an unknown state.
 // This test just check that all callbacks can access the data without throwing any exception.
 registerMetricListener();
 SchemaLoader.createKeyspace(""Keyspace2"",
 KeyspaceParams.simple(1),
 SchemaLoader.standardCFMD(""Keyspace2"", ""Standard2""));
}

private void registerMetricListener()
{
 CassandraMetricsRegistry.Metrics.addListener(new MetricRegistryListener.Base()
 {
 @Override
 public void onGaugeAdded(String name, Gauge<?> gauge)
 {
 gauge.getValue();
 }

 @Override
 public void onGaugeRemoved(String name)
 {

 }

 @Override
 public void onCounterAdded(String name, Counter counter)
 {
 counter.getCount();
 }

 @Override
 public void onCounterRemoved(String name)
 {

 }

 @Override
 public void onHistogramAdded(String name, Histogram histogram)
 {
 histogram.getCount();
 }

 @Override
 public void onHistogramRemoved(String name)
 {

 }

 @Override
 public void onMeterAdded(String name, Meter meter)
 {
 meter.getCount();
 }

 @Override
 public void onMeterRemoved(String name)
 {

 }

 @Override
 public void onTimerAdded(String name, Timer timer)
 {
 timer.getCount();
 }

 @Override
 public void onTimerRemoved(String name)
 {

 }
 });{code}

While looking into that ticket we also discovered a problem with the used of {{Metered}} in {{CacheMetrics}}.
Metrics reporter looks for metrics classes that are instance of the standard codahale classes. Due to that, other Metered implementations are not be exposed through the reporter. This ticket will also address that issue.",,blerer,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 10 13:06:35 UTC 2020,,,,,,,All,,,,,,"0|z0k1oo:",9223372036854775807,,,,blerer,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/548ef438568fe3216e39235fc054202709c542ca,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16228?focusedCommentId=17221755&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17221755,,,,,"27/Oct/20 21:06;e.dimitrova;The patch adds a [test|https://github.com/ekaterinadimitrova2/cassandra/commit/612d71cd09967e725770895ebfcf528f11353bd4#diff-3b7425b96625eda53b205ad149edea919df71b29ef01efc602d8ce28b86f3f59R122] to cover the mentioned race condition.

In 4.0, as part of CASSANDRA-14628, requests implementation in CacheMetrics was changed but this change (the 2nd suggestion [here|https://issues.apache.org/jira/browse/CASSANDRA-14626?focusedCommentId=16587227&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16587227] ) prevents us from using the codahale [addListener() |https://github.com/ekaterinadimitrova2/cassandra/commit/612d71cd09967e725770895ebfcf528f11353bd4#diff-3b7425b96625eda53b205ad149edea919df71b29ef01efc602d8ce28b86f3f59R136]. That is why I reverted the requests implementation to the original [version |https://github.com/ekaterinadimitrova2/cassandra/commit/c66e6641a5a5f7e9241212a8193feb6a66771d3f] from CASSANDRA-14628, changing its type from Metered to Meter and using the mark method.

The race condition was fixed itself in 3.0, 3.11, 4.0.

[4.0 pull request |https://github.com/ekaterinadimitrova2/cassandra/pull/67] | [JAVA 8 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/450/workflows/8df700c5-1775-433f-8dfc-3b3391f3d0ae] | [JAVA 11 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/450/workflows/4f8946b5-6448-4dd6-b231-8f288c861f34] [Jenkins CI |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/144/]
 [3.0 branch |https://github.com/ekaterinadimitrova2/cassandra/commit/898880b5f6d7635cddc4eec1f19513fe61de5b43] | [CI |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/145/]
 [3.11 CI |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/146/]
 [3.0 patch |https://github.com/ekaterinadimitrova2/cassandra/commit/898880b5f6d7635cddc4eec1f19513fe61de5b43] to be merged also to 3.11 and 4.0 *after* applying first this [patch |https://github.com/ekaterinadimitrova2/cassandra/commit/c66e6641a5a5f7e9241212a8193feb6a66771d3f] to 4.0

 ;;;","28/Oct/20 02:34;e.dimitrova;The CI results are out. The only failure that grabbed my attention was  the one of [test_table_metric_mbeans - jmx_test.TestJMX | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/450/workflows/8df700c5-1775-433f-8dfc-3b3391f3d0ae/jobs/2606] . 

But it looks like it was random, unrelated, CircleCI resource related(I also looped the test locally several times and it completed successfully; it also didn't fail in Jenkins):
{code:java}
stdout = b""Couldn't start agent for PID 6894\nPossible reason could be that port '8778' is already occupied.\nPlease check the standard output of the target process for a detailed error message.\n""
{code}

;;;","28/Oct/20 02:35;e.dimitrova;[~blerer], do you think you will have the time to make a review?;;;","10/Nov/20 12:57;blerer;The patches looks good.;;;","10/Nov/20 13:06;blerer;Patch committed into cassandra-3.0 at 548ef438568fe3216e39235fc054202709c542ca and merged into cassandra-3.11 and trunk.

The patch for the metric reported issue was merged into trunk at 32874dd04ae6c8dc9cc98d63717b8f94f4485378;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
COMPACT STORAGE SSTables created before 3.0 are not correctly skipped by timestamp due to missing primary key liveness info,CASSANDRA-16226,13336991,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,23/Oct/20 21:48,16/Mar/22 15:16,13/Jul/23 08:39,07/Jan/21 23:19,2.2.20,3.0.24,3.11.10,4.0,4.0-rc1,Legacy/Local Write-Read Paths,,,,0,perfomance,upgrade,,"This was discovered while tracking down a spike in the number of  SSTables per read for a COMPACT STORAGE table after a 2.1 -> 3.0 upgrade. Before 3.0, there is no direct analog of 3.0's primary key liveness info. When we upgrade 2.1 COMPACT STORAGE SSTables to the mf format, we simply don't write row timestamps, even if the original mutations were INSERTs. On read, when we look at SSTables in order from newest to oldest max timestamp, we expect to have this primary key liveness information to determine whether we can skip older SSTables after finding completely populated rows.

ex. I have three SSTables in a COMPACT STORAGE table with max timestamps 1000, 2000, and 3000. There are many rows in a particular partition, making filtering on the min and max clustering effectively a no-op. All data is inserted, and there are no partial updates. A fully specified row with timestamp 2500 exists in the SSTable with a max timestamp of 3000. With a proper row timestamp in hand, we can easily ignore the SSTables w/ max timestamps of 1000 and 2000. Without it, we read 3 SSTables instead of 1, which likely means a significant performance regression. 

The following test illustrates this difference in behavior between 2.1 and 3.0:
https://github.com/maedhroz/cassandra/commit/84ce9242bedd735ca79d4f06007d127de6a82800

A solution here might be as simple as having {{SinglePartitionReadCommand#canRemoveRow()}} only inspect primary key liveness information for non-compact/CQL tables. Tombstones seem to be handled at a level above that anyway. (One potential problem with that is whether or not the distinction will continue to exist in 4.0, and dropping compact storage from a table doesn't magically make pk liveness information appear.)",,cscotta,ifesdjeen,jasonstack,jeromatron,jjirsa,kornelpal,maedhroz,mck,sumanth.pasupuleti,,,"maedhroz opened a new pull request #789:
URL: https://github.com/apache/cassandra/pull/789


   fall through to checking cell timestamps when primary key liveness information doesn't exist, which makes skipping possible for COMPACT STORAGE tables after and upgrade to 3.0+


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Oct/20 15:07;githubbot;600","maedhroz opened a new pull request #823:
URL: https://github.com/apache/cassandra/pull/823


   Check primary key liveness information only if it exists, and fall back to checking cell contents, which makes skipping possible for COMPACT STORAGE tables after and upgrade to 3.0+


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 00:33;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r524808189



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,46 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }

Review comment:
       TODO: More tests around the expected number of SSTables hit for deletion and update cases for both compact tables.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 00:36;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r524809272



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -108,10 +109,10 @@ public void testSinglePartitionQuery() throws Throwable
         executeAndCheck(""SELECT * FROM %s WHERE pk = 2 AND c > 20 ORDER BY c DESC"", 2,
                         row(2, 40, ""42""));
 
-        // Test with only 2 of the 3 SSTables being merged and a Name filter
+        // Test with only 1 of the 3 SSTables being merged and a Name filter
         // This test checks the SinglePartitionReadCommand::queryMemtableAndSSTablesInTimestampOrder which is only
         // used for ClusteringIndexNamesFilter when there are no multi-cell columns
-        executeAndCheck(""SELECT * FROM %s WHERE pk = 2 AND c = 10"", 2,
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 2 AND c = 10"", 1,

Review comment:
       It doesn't look like there was previously any logical reason to hit more than the latest SSTable here. The update completely specifies the row.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 00:39;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r524810301



##########
File path: src/java/org/apache/cassandra/db/SinglePartitionReadCommand.java
##########
@@ -1042,15 +1042,28 @@ private boolean canRemoveRow(Row row, Columns requestedColumns, long sstableTime
         // We can remove a row if it has data that is more recent that the next sstable to consider for the data that the query
         // cares about. And the data we care about is 1) the row timestamp (since every query cares if the row exists or not)
         // and 2) the requested columns.
-        if (row.primaryKeyLivenessInfo().isEmpty() || row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        
+        boolean isLivenessInfoEmpty = row.primaryKeyLivenessInfo().isEmpty();
+
+        // Compact tables have no concept of primary key liveness info, so this will never be true for them: 
+        if (!isLivenessInfoEmpty && row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        {
             return false;
+        }
+        
+        boolean isCQL = metadata().isCQLTable();
 
         for (ColumnDefinition column : requestedColumns)
         {
             Cell cell = row.getCell(column);
-            if (cell == null || cell.timestamp() <= sstableTimestamp)
+            
+            // Non-compact tables with tombstones may need to look at further SSTables to find a live primary key:
+            if (cell == null || cell.timestamp() <= sstableTimestamp || (isCQL && isLivenessInfoEmpty && cell.isTombstone()))

Review comment:
       TODO: This may not be optimal for UPDATE. (i.e. We might still be able to skip the SSTable as long as there is at least some non-tombstone cell.)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 00:42;githubbot;600","maedhroz closed pull request #789:
URL: https://github.com/apache/cassandra/pull/789


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 04:33;githubbot;600","maedhroz commented on pull request #789:
URL: https://github.com/apache/cassandra/pull/789#issuecomment-728679890


   Superseded by #823 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 04:34;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r524940178



##########
File path: src/java/org/apache/cassandra/db/SinglePartitionReadCommand.java
##########
@@ -1042,16 +1042,26 @@ private boolean canRemoveRow(Row row, Columns requestedColumns, long sstableTime
         // We can remove a row if it has data that is more recent that the next sstable to consider for the data that the query
         // cares about. And the data we care about is 1) the row timestamp (since every query cares if the row exists or not)
         // and 2) the requested columns.
-        if (row.primaryKeyLivenessInfo().isEmpty() || row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        
+        // Note that compact tables will always have an empty primary key liveness info. 
+        if (!row.primaryKeyLivenessInfo().isEmpty() && row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp) 
             return false;
-
+        
+        boolean hasLiveCell = false;
+        
         for (ColumnDefinition column : requestedColumns)
         {
             Cell cell = row.getCell(column);
-            if (cell == null || cell.timestamp() <= sstableTimestamp)
+            
+            if (cell == null || cell.timestamp() <= sstableTimestamp) 
                 return false;
+            
+            if (!cell.isTombstone()) 
+                hasLiveCell = true;
         }
-        return true;
+
+        // If we've gotten here w/ a compact table or at least one non-tombstone cell, it's safe to remove the row.
+        return hasLiveCell || !metadata().isCQLTable();

Review comment:
       After dropping compact storage, we may have to look at more SSTable than logically necessary, but for tables that never used compact storage, we have to look at older SSTables for primary key liveness info if all we have here are tombstones. Not looking at the older ones would mean we propagate empty primary key liveness info into the response creation, which would cause us to return zero rows instead of rows w/ null cell values.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 07:44;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r524940178



##########
File path: src/java/org/apache/cassandra/db/SinglePartitionReadCommand.java
##########
@@ -1042,16 +1042,26 @@ private boolean canRemoveRow(Row row, Columns requestedColumns, long sstableTime
         // We can remove a row if it has data that is more recent that the next sstable to consider for the data that the query
         // cares about. And the data we care about is 1) the row timestamp (since every query cares if the row exists or not)
         // and 2) the requested columns.
-        if (row.primaryKeyLivenessInfo().isEmpty() || row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        
+        // Note that compact tables will always have an empty primary key liveness info. 
+        if (!row.primaryKeyLivenessInfo().isEmpty() && row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp) 
             return false;
-
+        
+        boolean hasLiveCell = false;
+        
         for (ColumnDefinition column : requestedColumns)
         {
             Cell cell = row.getCell(column);
-            if (cell == null || cell.timestamp() <= sstableTimestamp)
+            
+            if (cell == null || cell.timestamp() <= sstableTimestamp) 
                 return false;
+            
+            if (!cell.isTombstone()) 
+                hasLiveCell = true;
         }
-        return true;
+
+        // If we've gotten here w/ a compact table or at least one non-tombstone cell, it's safe to remove the row.
+        return hasLiveCell || !metadata().isCQLTable();

Review comment:
       After dropping compact storage, we may have to look at more SSTable than logically necessary, but for tables that never used compact storage, we have to look at older SSTables for primary key liveness info if all we have here are tombstones. Not looking at the older ones would mean we propagate empty primary key liveness info into the response creation, which would cause us to return zero rows instead of rows w/ null cell values representing tombstones.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 07:53;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r524808189



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,46 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }

Review comment:
       TODO: More tests around the expected number of SSTables hit for deletion and update cases for both compact tables.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 15:55;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r525275385



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       Even after dropping compact storage, there is simply no primary key liveness info, and `transform.Filter` will purge the row via `BTreeRow#purge()`. More commentary on this in the Jira.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 15:57;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r525275385



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       Even after dropping compact storage, there is simply no primary key liveness info, and `transform.Filter` will purge the row via `BTreeRow#purge()`. More commentary on this in the Jira. (Also should probably inline a comment here...)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Nov/20 16:06;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r525275385



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       Even after dropping compact storage, there is simply no primary key liveness info, and `transform.Filter` will purge the row via `BTreeRow#purge()`. More commentary on this in the Jira. (Also should probably inline a comment here before committing...)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Dec/20 22:07;githubbot;600","maedhroz opened a new pull request #853:
URL: https://github.com/apache/cassandra/pull/853


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 17:25;githubbot;600","maedhroz commented on pull request #853:
URL: https://github.com/apache/cassandra/pull/853#issuecomment-745441325


   https://app.circleci.com/pipelines/github/maedhroz/cassandra/174/workflows/e5fc06b8-3acc-4a7f-bb66-f0c3bea52272


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 17:25;githubbot;600","maedhroz opened a new pull request #854:
URL: https://github.com/apache/cassandra/pull/854


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 17:59;githubbot;600","maedhroz commented on pull request #854:
URL: https://github.com/apache/cassandra/pull/854#issuecomment-745502015


   j8: https://app.circleci.com/pipelines/github/maedhroz/cassandra/175/workflows/e6adf785-c421-4d0b-a0a9-6fe90f313952
   j11: https://app.circleci.com/pipelines/github/maedhroz/cassandra/175/workflows/0ada7c16-9c60-45d5-8c32-770ee0194a0f


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Dec/20 19:06;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r544990034



##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorage2to3UpgradeTest.java
##########
@@ -29,7 +29,10 @@
 import org.apache.cassandra.distributed.api.IMessageFilters;
 import org.apache.cassandra.distributed.api.NodeToolResult;
 import org.apache.cassandra.distributed.shared.Versions;
-import static org.apache.cassandra.distributed.shared.AssertUtils.*;
+
+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
+import static org.junit.Assert.assertEquals;

Review comment:
       nit: can we remove this, it's outside of patch's scope.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 10:45;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r544991255



##########
File path: test/distributed/org/apache/cassandra/distributed/upgrade/CompactStorage2to3UpgradeTest.java
##########
@@ -314,7 +317,6 @@ public void testDropCompactWithClusteringAndValueColumnWithDeletesAndWrites() th
                 }).run();
     }
 
-

Review comment:
       nit: can we remove this, it's outside of patch's scope.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 10:47;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r544997081



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       How come this changed to only need to read one sstable in trunk? ref https://github.com/apache/cassandra/pull/854/files#diff-db622d4d6661216853fe50af2292286c2296643a4d50d486dee6b39b540eafd5R643




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 10:56;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545035546



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,108 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testNonCompactTableRowDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck))"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);
+    }
+
+    @Test
+    public void testNonCompactTableRangeDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))"");
+        
+        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 1, 1, 1);
+        flush();
+        
+        execute(""DELETE FROM %s WHERE a=? AND b=?"", 1, 1);
+        flush();
+        
+        executeAndCheck(""SELECT * FROM %s WHERE a=1 AND b=1 AND c=1"", 2);
+    }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);
+    }
+
+    @Test
+    public void testCompactTableCellUpdate() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""UPDATE %s SET v = '2' WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1, row(1, 1, ""2""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1, row(1, 1, ""2""));
+    }

Review comment:
       what about the additional tests? do any of these offer any value (i haven't spent much time optimising)?
   ```
   
   
       @Test
       public void testCompactTableDeleteOverlappingSSTables() throws Throwable
       {
           createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
   
           execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 1000002"");
           flush();
           execute(""DELETE FROM %s WHERE pk = 1 AND ck = 51"");
           flush();
   
           execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 1000001"");
           execute(""INSERT INTO %s (pk, ck) VALUES (2, 51)"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 2);
   
           execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 2);
       }
   
       @Test
       public void testCompactTableRowDeletion() throws Throwable
       {
           createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
   
           execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
           flush();
   
           execute(""DELETE FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
   
           execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
       }
   
       @Test
       public void testCompactTableRangeDeletion() throws Throwable
       {
           createTable(""CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c)) WITH COMPACT STORAGE"");
   
           execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 1, 1, 1);
           execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 1, 2, 1);
           execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 2, 1, 1);
           flush();
   
           execute(""DELETE FROM %s WHERE a=? AND b=?"", 1, 1);
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE a=1 AND b=1 AND c=1"", 2);
   
           execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
           executeAndCheck(""SELECT * FROM %s WHERE a=1 AND b=1 AND c=1"", 2);
       }
   
   
       @Test
       public void testCompactTableRangeOverRowDeletion() throws Throwable
       {
           createTable(""CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c)) WITH COMPACT STORAGE"");
   
           execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 1, 1, 1);
           execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 1, 2, 1);
           execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 2, 1, 1);
           flush();
   
           execute(""DELETE FROM %s WHERE a=? AND b=? AND c=?"", 1, 1, 1);
           flush();
   
           execute(""DELETE FROM %s WHERE a=? AND b=?"", 1, 1);
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE a=1 AND b=1 AND c=1"", 3);
   
           execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
           executeAndCheck(""SELECT * FROM %s WHERE a=1 AND b=1 AND c=1"", 3);
       }
   
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 11:59;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545049849



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       And, from the ticket…
   
   > One drawback of this approach is that when a compact table with existing SSTables has compact storage dropped, those SSTables still do not contain primary key liveness info, and therefore may continue to return zero rows rather than rows w/ primary keys and null regular columns.
   
   If I've understood that correctly, compact tables before or after a drop compact, will not return rows w/ primary keys and null regular columns. But non-compact tables can.
   
   For example, if we add the following test
   ```
       @Test
       public void testNonCompactTableCellsDeletion() throws Throwable
       {
           createTable(""CREATE TABLE %s (pk int, ck int, v1 text, v2 text, PRIMARY KEY (pk, ck))"");
   
           execute(""INSERT INTO %s (pk, ck, v1, v2) VALUES (1, 1, '1', '1')"");
           flush();
   
           execute(""DELETE v1 FROM %s WHERE pk = 1 AND ck = 1"");
           execute(""DELETE v2 FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2, row(1, 1, null, null));
       }
   ```
   
   I'm also curious as to how schema changes impact all of this on drop compact un-upgraded sstables.
   For example
   ```
   
   
       @Test
       public void testCompactTableCellDeletionAddColumn() throws Throwable
       {
           createTable(""CREATE TABLE %s (pk int, ck int, v1 text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
   
           execute(""INSERT INTO %s (pk, ck, v1) VALUES (1, 1, '1')"");
           flush();
   
           execute(""DELETE v1 FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
   
           execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
   
           execute(""ALTER TABLE %s ADD v2 text"");
           execute(""DELETE v2 FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 3);
       }
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 12:24;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545050395



##########
File path: src/java/org/apache/cassandra/db/SinglePartitionReadCommand.java
##########
@@ -1042,16 +1042,26 @@ private boolean canRemoveRow(Row row, Columns requestedColumns, long sstableTime
         // We can remove a row if it has data that is more recent that the next sstable to consider for the data that the query
         // cares about. And the data we care about is 1) the row timestamp (since every query cares if the row exists or not)
         // and 2) the requested columns.
-        if (row.primaryKeyLivenessInfo().isEmpty() || row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        
+        // Note that compact tables will always have an empty primary key liveness info. 
+        if (!row.primaryKeyLivenessInfo().isEmpty() && row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp) 
             return false;
-
+        
+        boolean hasLiveCell = false;
+        
         for (ColumnDefinition column : requestedColumns)
         {
             Cell cell = row.getCell(column);
-            if (cell == null || cell.timestamp() <= sstableTimestamp)
+            
+            if (cell == null || cell.timestamp() <= sstableTimestamp) 
                 return false;
+            
+            if (!cell.isTombstone()) 
+                hasLiveCell = true;
         }
-        return true;
+
+        // If we've gotten here w/ a compact table or at least one non-tombstone cell, it's safe to remove the row.
+        return hasLiveCell || !metadata().isCQLTable();

Review comment:
       I'm struggling to read which of the unit tests capture that^. Do any of them?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 12:25;githubbot;600","michaelsembwever commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545049849



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       And, from the ticket…
   
   > One drawback of this approach is that when a compact table with existing SSTables has compact storage dropped, those SSTables still do not contain primary key liveness info, and therefore may continue to return zero rows rather than rows w/ primary keys and null regular columns.
   
   If I've understood that correctly, compact tables before or after a drop compact, will not return rows w/ primary keys and null regular columns. But non-compact tables can.
   
   For example, if we add the following test
   ```
       @Test
       public void testNonCompactTableCellsDeletion() throws Throwable
       {
           createTable(""CREATE TABLE %s (pk int, ck int, v1 text, v2 text, PRIMARY KEY (pk, ck))"");
   
           execute(""INSERT INTO %s (pk, ck, v1, v2) VALUES (1, 1, '1', '1')"");
           flush();
   
           execute(""DELETE v1 FROM %s WHERE pk = 1 AND ck = 1"");
           execute(""DELETE v2 FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2, row(1, 1, null, null));
       }
   ```
   
   I'm also curious as to how schema changes impact all of this on drop compact un-upgraded sstables.
   For example
   ```
       @Test
       public void testCompactTableCellDeletionAddColumn() throws Throwable
       {
           createTable(""CREATE TABLE %s (pk int, ck int, v1 text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
   
           execute(""INSERT INTO %s (pk, ck, v1) VALUES (1, 1, '1')"");
           flush();
   
           execute(""DELETE v1 FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
   
           execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
   
           execute(""ALTER TABLE %s ADD v2 text"");
           execute(""DELETE v2 FROM %s WHERE pk = 1 AND ck = 1"");
           flush();
   
           executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 3);
       }
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 12:25;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545235500



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       > How come this changed to only need to read one sstable in trunk?
   
   @michaelsembwever Ah, I should have looked at that one more closely. On trunk, if you comment out the first `executeAndCheck()` execution, the test behaves in line with 3.0 and 3.11. It looks like what's happening is that the prepared statement cache isn't invalidated when DROP COMPACT STORAGE executes on the table and switches the table metadata type. I'm following up w/ @ifesdjeen on that. In the meantime, I'll focus on addressing the other issues in the 3.0 and 3.11 versions of the patch here...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 16:42;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545235500



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       > How come this changed to only need to read one sstable in trunk?
   
   @michaelsembwever Ah, I should have looked at that one more closely. On trunk, if you comment out the first `executeAndCheck()` execution, the test behaves in line with 3.0 and 3.11. It looks like what's happening is that the prepared statement cache isn't invalidated when DROP COMPACT STORAGE executes on the table and switches the table metadata type. (The `isDense` flag is updated in-place on 3.0 and 3.11.) I'm following up w/ @ifesdjeen on that. In the meantime, I'll focus on addressing the other issues in the 3.0 and 3.11 versions of the patch here...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 16:56;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545267098



##########
File path: src/java/org/apache/cassandra/db/SinglePartitionReadCommand.java
##########
@@ -1042,16 +1042,26 @@ private boolean canRemoveRow(Row row, Columns requestedColumns, long sstableTime
         // We can remove a row if it has data that is more recent that the next sstable to consider for the data that the query
         // cares about. And the data we care about is 1) the row timestamp (since every query cares if the row exists or not)
         // and 2) the requested columns.
-        if (row.primaryKeyLivenessInfo().isEmpty() || row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        
+        // Note that compact tables will always have an empty primary key liveness info. 
+        if (!row.primaryKeyLivenessInfo().isEmpty() && row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp) 
             return false;
-
+        
+        boolean hasLiveCell = false;
+        
         for (ColumnDefinition column : requestedColumns)
         {
             Cell cell = row.getCell(column);
-            if (cell == null || cell.timestamp() <= sstableTimestamp)
+            
+            if (cell == null || cell.timestamp() <= sstableTimestamp) 
                 return false;
+            
+            if (!cell.isTombstone()) 
+                hasLiveCell = true;
         }
-        return true;
+
+        // If we've gotten here w/ a compact table or at least one non-tombstone cell, it's safe to remove the row.
+        return hasLiveCell || !metadata().isCQLTable();

Review comment:
       @michaelsembwever The easiest way to see this is to change this line to `return true;` and then run `operations.UpgradeTest` and `operations.DeleteTest`. You'll see failures around the issue above. Switching to `return hasLiveCell;` will eliminate that particular problem. Then run `SSTablesIteratedTest`, and you'll see one failure around `testCompactTableCellDeletion` hitting too many SSTables before DROP CS blows away the `isDense` flag. Adding `|| !metadata().isCQLTable()` resolves that. (i.e. When the table is compact, returning no rows rather than is perfectly acceptable. See the [comment below](https://github.com/apache/cassandra/pull/823/files?file-filters%5B%5D=.java#r525275385).)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 17:26;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545267098



##########
File path: src/java/org/apache/cassandra/db/SinglePartitionReadCommand.java
##########
@@ -1042,16 +1042,26 @@ private boolean canRemoveRow(Row row, Columns requestedColumns, long sstableTime
         // We can remove a row if it has data that is more recent that the next sstable to consider for the data that the query
         // cares about. And the data we care about is 1) the row timestamp (since every query cares if the row exists or not)
         // and 2) the requested columns.
-        if (row.primaryKeyLivenessInfo().isEmpty() || row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp)
+        
+        // Note that compact tables will always have an empty primary key liveness info. 
+        if (!row.primaryKeyLivenessInfo().isEmpty() && row.primaryKeyLivenessInfo().timestamp() <= sstableTimestamp) 
             return false;
-
+        
+        boolean hasLiveCell = false;
+        
         for (ColumnDefinition column : requestedColumns)
         {
             Cell cell = row.getCell(column);
-            if (cell == null || cell.timestamp() <= sstableTimestamp)
+            
+            if (cell == null || cell.timestamp() <= sstableTimestamp) 
                 return false;
+            
+            if (!cell.isTombstone()) 
+                hasLiveCell = true;
         }
-        return true;
+
+        // If we've gotten here w/ a compact table or at least one non-tombstone cell, it's safe to remove the row.
+        return hasLiveCell || !metadata().isCQLTable();

Review comment:
       @michaelsembwever The easiest way to see this is to change this line to `return true;` and then run `operations.UpgradeTest` and `operations.DeleteTest`. You'll see failures around the issue above. Switching to `return hasLiveCell;` will eliminate that particular problem. Then run `SSTablesIteratedTest`, and you'll see one failure around `testCompactTableCellDeletion` hitting too many SSTables before DROP CS blows away the `isDense` flag. Adding `|| !metadata().isCQLTable()` resolves that. (i.e. When the table is compact, returning no rows rather than is perfectly acceptable. See the [comment below](https://github.com/apache/cassandra/pull/823/files?file-filters%5B%5D=.java#r525275385).) Once we DROP CS, we no longer can take advantage of that hint.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 17:27;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545270679



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,80 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);

Review comment:
       > If I've understood that correctly, compact tables before or after a drop compact, will not return rows w/ primary keys and null regular columns. But non-compact tables can.
   
   > For example, if we add the following test
   
   Right, and I've added that test. There are also examples of this behavior in `operations.DeleteTest` and `operations.UpdateTest`, which you can see failing if you walk through the [steps above](https://github.com/apache/cassandra/pull/823/files?file-filters%5B%5D=.java#r545267098).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 17:31;githubbot;600","maedhroz commented on a change in pull request #823:
URL: https://github.com/apache/cassandra/pull/823#discussion_r545312688



##########
File path: test/unit/org/apache/cassandra/cql3/validation/miscellaneous/SSTablesIteratedTest.java
##########
@@ -133,4 +134,108 @@ public void testSinglePartitionQuery() throws Throwable
         assertInvalidMessage(""ORDER BY is only supported when the partition key is restricted by an EQ or an IN"",
                              ""SELECT * FROM %s WHERE token(pk) = token(1) ORDER BY C DESC"");
     }
+
+    @Test
+    public void testNonCompactTableRowDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck))"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);
+    }
+
+    @Test
+    public void testNonCompactTableRangeDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))"");
+        
+        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 1, 1, 1, 1);
+        flush();
+        
+        execute(""DELETE FROM %s WHERE a=? AND b=?"", 1, 1);
+        flush();
+        
+        executeAndCheck(""SELECT * FROM %s WHERE a=1 AND b=1 AND c=1"", 2);
+    }
+
+    @Test
+    public void testCompactTableSkipping() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1') USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 50, '2') USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 100, '3') USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 2, '4') USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 51, '5') USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 101, '6') USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51, ""5""));
+    }
+
+    @Test
+    public void testCompactTableSkippingPkOnly() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 1) USING TIMESTAMP 1000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 50) USING TIMESTAMP 1000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 100) USING TIMESTAMP 1000002"");
+        flush();
+
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 2) USING TIMESTAMP 2000000"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 51) USING TIMESTAMP 2000001"");
+        execute(""INSERT INTO %s (pk, ck) VALUES (1, 101) USING TIMESTAMP 2000002"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 51"", 1, row(1, 51));
+    }
+
+    @Test
+    public void testCompactTableCellDeletion() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+        
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""DELETE v FROM %s WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1);
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 2);
+    }
+
+    @Test
+    public void testCompactTableCellUpdate() throws Throwable
+    {
+        createTable(""CREATE TABLE %s (pk int, ck int, v text, PRIMARY KEY (pk, ck)) WITH COMPACT STORAGE"");
+
+        execute(""INSERT INTO %s (pk, ck, v) VALUES (1, 1, '1')"");
+        flush();
+
+        execute(""UPDATE %s SET v = '2' WHERE pk = 1 AND ck = 1"");
+        flush();
+
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1, row(1, 1, ""2""));
+
+        execute(""ALTER TABLE %s DROP COMPACT STORAGE"");
+        executeAndCheck(""SELECT * FROM %s WHERE pk = 1 AND ck = 1"", 1, row(1, 1, ""2""));
+    }

Review comment:
       `testCompactTableDeleteOverlappingSSTables` is a more complex version of `testCompactTableCellDeletion`, and it's especially interesting because of the totally useless third SSTable that we have to look at because of the timestamp of the write on the row we're not actually querying. (It also forces us to hit all 3 SSTables after dropping compact storage, rather than just two.) I'll throw an inline comment around that.
   
   `testCompactTableRowDeletion` is nice for completeness, although it also needs to bump the number of expected SSTables hit post-DROP CS.
   
   `testCompactTableRangeDeletion` is also good for completeness, and illustrates that even compact tables have never been able to short-circuit when the delete isn't manifest as a cell tombstone.
   
   `testCompactTableRangeOverRowDeletion` helps illustrate that an older row deletion will be subsumed by the newer range delete and won't factor into SSTable skipping decisions. I've added a complimentary test, `testCompactTableRowOverRangeDeletion` that switches the temporal order of the range and row deletes and only has to hit one SSTable rather than three because of this patch.
   
   Thanks for outlining these cases!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 18:34;githubbot;600","maedhroz commented on pull request #823:
URL: https://github.com/apache/cassandra/pull/823#issuecomment-747623339


   @michaelsembwever I've added your new tests (and one more of my own) in a follow-up commit.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 18:39;githubbot;600","smiklosovic closed pull request #823:
URL: https://github.com/apache/cassandra/pull/823


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:09;githubbot;600","smiklosovic closed pull request #853:
URL: https://github.com/apache/cassandra/pull/853


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:13;githubbot;600","smiklosovic closed pull request #854:
URL: https://github.com/apache/cassandra/pull/854


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,20400,,,0,20400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16671,CASSANDRA-16217,,,,CASSANDRA-15640,CASSANDRA-16675,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,mck,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jan 07 23:49:46 UTC 2021,,,,,,,All,,,,,,"0|z0jyuw:",9223372036854775807,,,,ifesdjeen,mck,,,Critical,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/f8500ee911343eb8826f9c44bb6db2ab780f6327,,,,,,,,,"The patch includes a series of new tests in {{SSTablesIteratedTest}} that verify expected numbers of SSTables read for several query types across compact and non-compact tables. They should serve as reasonable documentation and guardrails against further regression.

The official [docs on compact storage|https://cassandra.apache.org/doc/latest/cql/appendices.html#appendix-c-dropping-compact-storage] and the in-tree docs (in {{ddl.rst}})will need some rework as well, both to indicate that it will live on in 4.0, and to take into account the concerns in this issue.",,,,,"27/Oct/20 03:13;kornelpal;If I understand correctly, only upgraded tables are affected, so new tables (or even INSERTs to upgraded tables?) are not affected. Could the migration code be fixed so that row timestamps are properly generated? While the proposed solution improves performance for migrated tables, also seems to take away the performance benefits of max timestamps from COMPACT STORAGE tables. Fixing the issue for newly upgraded and rebuilt tables and recommending {{nodetool upgradesstables -a}} for fixing the performance issue on already migrated tables might result in even better performance improvements.;;;","27/Oct/20 16:15;maedhroz;Hi [~kornelpal]. Take a look at {{UpdateStatement#addUpdateForKey()}}...

{noformat}
// We update the row timestamp (ex-row marker) only on INSERT (#6782)
// Further, COMPACT tables semantic differs from ""CQL3"" ones in that a row exists only if it has
// a non-null column, so we don't want to set the row timestamp for them.
if (type.isInsert() && cfm.isCQLTable())
    params.addPrimaryKeyLivenessInfo();
{noformat}

...and {{LegacyLayout}}...

{noformat}
else if (column.isPrimaryKeyColumn() && metadata.isCQLTable())
{noformat}

COMPACT tables will never have primary key liveness info, even if those tables are created in 3.0+, so running {{upgradesstables}} doesn't help (at least as far as I can tell). The patch I've posted simply restores the way this optimization worked for COMPACT tables before the 3.0 storage engine rewrite.;;;","27/Oct/20 16:20;maedhroz;I do need to test this w/ {{DROP COMPACT STORAGE}} though...;;;","27/Oct/20 17:27;maedhroz;There is a problem the current patch does not address, and that's dropping compact storage when you've already written SSTables. {{DROP COMPACT STORAGE}} doesn't leave any indication on individual SSTables as to whether the table overall was COMPACT when they were written. Therefore, {{isCQLTable()}} can be true after the drop, and we're back in the same situation. Also, {{upgradesstables}} has to be run before {{DROP COMPACT STORAGE}} can be run, so there is no source of liveness information either way.;;;","27/Oct/20 17:30;kornelpal;Thank you [~maedhroz] for the details, now I understand that this is not an upgrade issue. I don't have any more concerns about your patch, and thank you for fixing this performance issue.;;;","27/Oct/20 18:00;maedhroz;[~marcuse] [~jwest] [~ifesdjeen] What might make sense (and I need to coordinate with you) is whether we could solve the above problem with a simple flag at the SSTable level that indicates whether empty primary key liveness info is valid. If we write this in {{upgradesstables}} and then require its presence before running {{DROP COMPACT STORAGE}}, I think we would have the guardrails necessary to make it basically impossible for people to accidentally re-introduce this regression. (This would be coupled, of course, with changing the current patch to look at that flag, not the table level {{isCQLTable()}}.);;;","12/Nov/20 17:05;maedhroz;With the now-committed CASSANDRA-16217 bringing back {{isCQLTable()}}, the patch currently posted for this issue is perhaps _more_ defensible. However, the problems around {{DROP COMPACT STORAGE}} persist and will have to be dealt with.;;;","14/Nov/20 18:21;kornelpal;[~maedhroz], since {{COMPACT STORAGE}} support was reintroduced to 4.0, would it make sense to implement the fix for 3.0+ and document the performance degradation as one more of the already many undesirable side effects of {{DROP COMPACT STORAGE}}? {{isCQLTable()}} will be true after that, and then rebuilding the SSTables (compaction, scrub or upgradesstables) will fix the performance issues.

I did some more research and I don't think that the temporary performance issue after {{DROP COMPACT STORAGE}} can be fixed without tracking the dropped status. On another note, I think that the current implementation of {{DROP COMPACT STORAGE}} is of very limited use. Ideally it should record that compact storage was dropped and later rebuild the SSTable using a new structure that is functionally equivalent to the old compact behavior, avoiding the issues described in CASSANDRA-16217. Unfortunately I am not sure how much effort such a change was.

Other {{ALTER TABLE}} operations such as dropping a column, changing bloom_filter_fp_chance or compression options already require the SSTables to be rebuilt (by compaction, scrub or upgradesstables) to take effect. This would be the first of those operations to cause a temporary performance degradation however. Considering even this, I believe that fixing the compact table performance issue and dealing with the side effects of {{DROP COMPACT STORAGE}} as part of the larger effort of removing compact storage support would benefit the community by facilitating upgrade to 3.0+ from 2.x.;;;","17/Nov/20 00:15;maedhroz;bq. I don't think that the temporary performance issue after DROP COMPACT STORAGE can be fixed without tracking the dropped status.

Before going too much farther here, I should probably lay out one more time how the concept of an empty row differs between compact and non-compact tables and how that affects the way they interact with the read path optimizations for skipping SSTables.

For compact tables, there is no concept of primary key liveness. When a row has no live cells, it is simply empty. For a non-compact table, it is possible to have a live row that happens to have no live cells. Imagine the following example:

{noformat}
INSERT INTO foo (partitionKey, clustering, value) VALUES (0, 1, 1)
DELETE value FROM foo WHERE partitionKey = 0 AND clustering = 1
SELECT * FROM foo WHERE partitionKey = 1 AND clustering = 1
{noformat}

With compact storage, this SELECT will return nothing/zero rows. With a non-compact table, this will return a single row {{(0, 1, null)}}. Any solution for this Jira should preserve this behavior, i.e. when DROP COMPACT STORAGE runs, we should start returning the second result, and all existing non-compact tables should keep the same behavior as well.

Right now, I'm working on a solution that a.) preserves this behavior, b.) requires no changes to the SSTable format, and c.) fixes the performance regression originally reported in this Jira, in addition to one or two that don't actually relate to compact tables. I'll hopefully have a rough patch in the next day or so.;;;","17/Nov/20 05:46;kornelpal;Thank you [~maedhroz] for the example, now I understand that the simple fix for the performance issue would also result in a behavior change. In this case I think that you need to apply the same special behavior when the NO_COMPACT client option is set, not just when DROP COMPACT STORAGE was issued.;;;","17/Nov/20 17:09;maedhroz;I've posted (the 3.0 version of) an alternative solution here, which should merge up cleanly, given {{TableMetadata#isCQLTable()}} is still present on trunk after CASSANDRA-16217: https://github.com/apache/cassandra/pull/823

(CircleCI is having difficulty with the unit tests, but there is an ex-unit test run [here|https://app.circleci.com/pipelines/github/maedhroz/cassandra/155/workflows/cc54c092-cac1-4144-b9be-577ea4c8a78e] and a default config unit test run [here|https://app.circleci.com/pipelines/github/maedhroz/cassandra/158/workflows/12cd707a-2fdd-4b9f-b512-b5f060a63dbf].)

My goals w/ this patch were the following:

1.) Maintain the empty row semantics of tables that have either always been compact or always been non-compact (see [previous|https://issues.apache.org/jira/browse/CASSANDRA-16226?focusedCommentId=17233168&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17233168] comment), and preserve as much of them as possible after dropping compact storage, given the historical limitations of the compact format.

2.) Either improve/reduce or leave unchanged the number of SSTables read in all cases for tables that have never been compact.

3.) Fix the regression around the number of SSTables read in the original description of this issue for compact tables, and avoid having the regression re-introduced when and if compact storage is dropped.

4.) Avoid creating a new SSTable format or burdening operators with running {{upgradesstables}} again to make all of this above work.

Although there are some issues w/ the unit tests on CI, the relevant local tests are looking clean, including {{operations.DeleteTest}} and {{operations.UpgradeTest}}, which verify item #1 above, and the other points are by and large satisfied. For point #2, there was actually a case where pure non-compact tables appeared to be reading too many SSTables w/ updates present (although that [needs to be reviewed|https://github.com/apache/cassandra/pull/823/files?file-filters%5B%5D=.java#r524809272]).

One drawback of this approach is that when a compact table with existing SSTables has compact storage dropped, those SSTables still do not contain primary key liveness info, and therefore may continue to return zero rows rather than rows w/ primary keys and null regular columns. (Data written after the drop will, of course, have liveness info, and so mixed behavior is possible.) I've discussed a few ideas w/ [~jwest] and [~ifesdjeen] around this, and I'm not convinced any of them would be valuable. (Keep in mind that applications written against compact storage tables will already be handling this case, and good documentation will help even further.)

The first is having enough information, either via a sequence number or a new piece of metadata, to identify whether an SSTable was created while a table was still compact. Having this data might be useful in some other way, but it still does not insert primary key liveness info into pre-drop SSTables. DELETE and UPDATE operations never have primary key liveness information attached to them, even for pure non-compact tables, so an insert pre-drop in one SSTable, followed by a delete in a post-drop SSTable, will still translate to the absence of a row rather than a row with null regular cells.

The second broad idea is to somehow insert primary key liveness information into pre-drop SSTables, but this is problematic for at least a couple reasons. If we make it a prerequisite for running DROP COMPACT STORAGE, it means physically rewriting SSTables. (To be fair, this may not be a huge additional burden for those still on 2.x, who would have to do this anyway.) The other oddity is that there doesn't appear to be any existing procedure for synthesizing primary key liveness info. In the non-compact world, it is carried only by INSERT operations, not UPDATE or DELETE operations. It's not clear to me how we would determine where to add it during a {{runsstableupgrade}} run, particularly how we would know the difference between INSERT and UPDATE starting with just a compact SSTable on disk.

To summarize, I think tables that are purely compact or non-compact should be handled pretty well w/ this patch (and will strictly git all the goals above, where applicable). The interesting case is the mixed compact/non-compact SSTable set caused by dropping compact storage. In this case, I think it makes reasonable trade-offs and avoids all the major pain points for operators. Whatever direction we go, the official docs around compact storage are going to need updating.;;;","11/Dec/20 15:39;ifesdjeen;+1 on the patch. The only change I'd like to suggest is to add tests for tombstones, since previously we weren't taking them into consideration. 

Two nits (pre-existing):
  * [here|https://github.com/apache/cassandra/pull/823/files#diff-b4515f390c3b40e1f64feda8fd8746647b43cda26f8019ec96fc2dd4320fa96cR1040] ""more recent that"" should be ""more recent than"".
  * should we consider renaming {{canRemoveRow}}? The name is slightly confusing, since the idea here is basically to reduce number of clustering keys to perform search upon. I'm sure this made complete sense to whoever was writing it at first, but out of context this name was a bit hard to parse.

;;;","11/Dec/20 22:10;maedhroz;Thanks [~ifesdjeen].

bq. add tests for tombstones, since previously we weren't taking them into consideration

Indeed, although there is some coverage of this logic across {{SSTablesIteratedTest}}, {{DeleteTest}}, and {{UpgradeTest}}. It might be useful to have a test or two around the number of SSTables hit with range tombstones in {{SSTablesIteratedTest}}.

bq. should be ""more recent than""

Fixed.

bq. should we consider renaming canRemoveRow?

I settled on {{isRowComplete()}}, which at least describes what the method tells us, and _not_ what it tells use we can do as a result.

New commit with the changes above is [here|https://github.com/apache/cassandra/pull/823/commits/b71d830ebbe2e5726de2c18b03179ca2b8a74023].

...and just to have everything in one place for [~mck]: [3.0 patch|https://github.com/apache/cassandra/pull/823], [CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra/171/workflows/4781de11-c5e2-40b1-967c-0e96728f843b], [CircleCI Unit Tests Only|https://app.circleci.com/pipelines/github/maedhroz/cassandra/169/workflows/93ea354c-cd12-48a5-a0ec-d88ca1a0dc86]. (For some reason, the HIGHRES configuration isn't handling the unit tests properly.)

I'll post the 3.11 and 4.0 branches, which I expect not to deviate much (if at all) from the 3.0 diff, once we've got a second +1.;;;","15/Dec/20 14:31;mck;ci-cassandra.a.o run [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/264/#showFailuresLink].
Failures look erroneous. Maybe the 3.0 patch needs a rebase? (e.g. compare it to 3.0 latest [results|https://ci-cassandra.apache.org/job/Cassandra-3.0/lastSuccessfulBuild/#showFailuresLink].;;;","15/Dec/20 16:33;maedhroz;[~mck] I've rebased the 3.0 patch.

The {{TestCqlshOutput}} errors look like some oddities around unexpected single-quotes, parentheses, and dashes in their output, so those should be unrelated. {{TestOfflineTools}} is flaky in the base branch. Finally, the failing in-jvm tests area all passing in the above CircleCI runs.;;;","15/Dec/20 16:37;maedhroz;Also, it looks like we aren't even running the {{TestCqlshOutput}} tests against {{cassandra-3.0}}? (i.e. 8,246 tests for my branch and 8,030 for the base branch?);;;","15/Dec/20 18:04;maedhroz;Pushed up the 3.11 and trunk patches...

|[3.0|https://github.com/apache/cassandra/pull/823]|[Circle j8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/172/workflows/2cd5f868-d9ec-44e2-97d0-ea2a809f2533]|n/a|
|[3.11|https://github.com/apache/cassandra/pull/853]|[Circle j8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/174/workflows/e5fc06b8-3acc-4a7f-bb66-f0c3bea52272]|n/a|
|[trunk|https://github.com/apache/cassandra/pull/854]|[Circle j8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/175/workflows/e6adf785-c421-4d0b-a0a9-6fe90f313952]|[Circle j11|https://app.circleci.com/pipelines/github/maedhroz/cassandra/175/workflows/0ada7c16-9c60-45d5-8c32-770ee0194a0f]|
;;;","15/Dec/20 21:34;mck;ci-cassandra.a.o runs for the above:
 - [3.0|https://ci-cassandra.apache.org/job/Cassandra-devbranch/266/]
 - [3.11|https://ci-cassandra.apache.org/job/Cassandra-devbranch/267/]
 - [trunk|https://ci-cassandra.apache.org/job/Cassandra-devbranch/268/];;;","16/Dec/20 17:32;maedhroz;Summarizing the {{ci-cassandra}} runs...

For the 3.0 and 3.11 patches, there's no test failure that's not also present (assuming it's even run) in the recent history for {{cassandra-3.0}} and {{cassandra-3.11}}, respectively.

For the trunk patch, there is [one failure|https://ci-cassandra.apache.org/job/Cassandra-devbranch/268/testReport/org.apache.cassandra.net/ProxyHandlerConnectionsTest/testExpireSomeFromBatch_compression/] that isn't in the recent history, {{ProxyHandlerConnectionsTest.testExpireSomeFromBatch}} w/ compression, but it looks both completely unrelated and accompanied by failures in the normal and cdc versions on trunk.

It looks like {{ProxyHandlerConnectionsTest}} needs a test fixing Jira...

UPDATE: Filed CASSANDRA-16358;;;","17/Dec/20 18:43;maedhroz;I've added a few more tests in the wake of [~mck]'s review in the 3.0 branch and addressed the concerns raised. If those discussions are resolved, I'll begin the process of updating the 3.11 and trunk PRs...;;;","17/Dec/20 21:49;mck;+1 to the 3.0 patch. Will the failure to invalidate the prepared statement cache when dropping compact storage in trunk be addressed in a separate ticket?;;;","17/Dec/20 21:53;maedhroz;bq. Will the failure to invalidate the prepared statement cache when dropping compact storage in trunk be addressed in a separate ticket?

See CASSANDRA-16361. (UPDATE: A patch is now available there.);;;","17/Dec/20 22:35;maedhroz;[~mck] There are actually a couple changes I want to make to the docs around compact storage, as I mentioned in the Documentation Plan above. Would it be best to include that only in the trunk patch? A separate Jira altogether?;;;","18/Dec/20 07:50;mck;bq. There are actually a couple changes I want to make to the docs around compact storage, as I mentioned in the Documentation Plan above. Would it be best to include that only in the trunk patch? A separate Jira altogether?

3.11 (if doc exists there) and trunk, this jira, please.;;;","18/Dec/20 16:17;maedhroz;[~mck] [~ifesdjeen] I've made the minor adjustment to the docs in the 3.11 branch [here|https://github.com/apache/cassandra/pull/853/commits/1de49337f1ed93bbf023d0b25add179922fd9341]. Let me know what you think.;;;","18/Dec/20 16:44;mck;> I've made the minor adjustment to the docs in the 3.11 branch here. Let me know what you think.

LGTM!;;;","05/Jan/21 06:24;maedhroz;With CASSANDRA-16361 resolved, it looks like all that's left here is to rebase things and get the trunk patch up-to-date. I'll take care of that tomorrow...;;;","06/Jan/21 03:24;maedhroz;The three branches are now squashed, Circle settings removed, etc.;;;","07/Jan/21 23:19;mck;Committed as [f8500ee911343eb8826f9c44bb6db2ab780f6327|https://github.com/apache/cassandra/commit/f8500ee911343eb8826f9c44bb6db2ab780f6327];;;","07/Jan/21 23:49;maedhroz;Thanks [~mck]!;;;",,,,,,,,,,,,,,,,,
Followup CASSANDRA-14554,CASSANDRA-16225,13336950,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,23/Oct/20 15:58,21/Dec/20 08:56,13/Jul/23 08:39,10/Nov/20 17:32,3.0.24,3.11.10,4.0,4.0-beta4,,Messaging/Internode,,,,0,,,,"As per [~stefania]'s advice, additional synchronization should be added to   LogTransaction.java. Without synchronization, we could have corrupted txn log files with JBOD.",,e.dimitrova,jeromatron,jmeredithco,stefania,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14554,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Dec 02 18:17:20 UTC 2020,,,,,,,All,,,,,,"0|z0jyls:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.18,,,https://github.com/apache/cassandra/commit/9660499acc4ceceb748715ddbd8b81e02916fb53,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16225?focusedCommentId=17228655&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17228655,,,,,"09/Nov/20 15:10;e.dimitrova;Transaction files on JBOD may become out of sync, that is lines are not in the same order.

To prevent that we synchronize LogTransaction.java
 [trunk |https://github.com/ekaterinadimitrova2/cassandra/commit/7d4007e942202809925b0d715bc519fd8f7d5ba0] | [JAVA8 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/483/workflows/0fc7c223-7b2f-450a-9697-36cb2f295ad1] | [JAVA11 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/483/workflows/2e4ca8af-217f-4778-8da9-064b24c2fbf4]

[3.11 |https://github.com/ekaterinadimitrova2/cassandra/commit/bbf11d406dc88bc646cad45c4dfb8cf7135ff72c] | [CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/482/workflows/5b9f1098-9b79-4477-9ca9-ef9ff8c57e84]
 [3.0 |https://github.com/ekaterinadimitrova2/cassandra/commit/6b72d5ebe82e7ed031708a1ad4cd45f6c76ca525] | [CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/481/workflows/3b4e63f5-5f09-4520-8e0c-764410febec3]

No new failures.

[~brandon.williams], can you, please, review?;;;","10/Nov/20 17:32;brandon.williams;Committed, thanks.;;;","20/Nov/20 17:52;e.dimitrova;[~maedhroz] pointed that I missed the synchronization for LogTransaction#untrackNew()

I corrected it for 3.0 [here|https://github.com/ekaterinadimitrova2/cassandra/commit/e5241dfa3c097d6078f95823272a1e1c73c00002]. This could be merged to the rest of the branches.

Not sure whether we need full CI run again

[~maedhroz] and [~psynix@t-online.de], can you review, please? And thank you for reaching out, appreciate it! :) ;;;","20/Nov/20 18:24;jmeredithco;+1 on the code. No deadlock issues with callers holding different locks that I could see.

I've cherry-picked it and am going to run it through CI locally against trunk.;;;","20/Nov/20 21:20;jmeredithco;In-tree tests passed on my cherry-pick for trunk.;;;","01/Dec/20 01:57;e.dimitrova;Thanks [~psynix@t-online.de], do I understand correctly that no full CI run is expected and I can ask [~brandon.williams] Brandon for this ninja fix commit, if he doesn't have any concerns? ;;;","02/Dec/20 18:17;brandon.williams;Ninja'd the fix and correct changes entry in https://github.com/apache/cassandra/commit/2bcbd92a25c420b30cc8cc0eb8b266d9889ea973;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InvalidQueryException: Order by on unknown column From cassandra-diff,CASSANDRA-16224,13336839,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Jyothsnakonisa,yifanc,yifanc,23/Oct/20 03:49,06/May/21 21:37,13/Jul/23 08:39,02/Feb/21 19:16,cassandra-diff-0.2,,,,,Tool/diff,,,,0,pull-request-available,,,"Diff job fails with the following error,
{code:java}
  Caused by: shaded.com.datastax.driver.core.exceptions.InvalidQueryException: Order by on unknown column <column_name>
  at shaded.com.datastax.driver.core.exceptions.InvalidQueryException.copy(InvalidQueryException.java:49)
  at shaded.com.datastax.driver.core.DriverThrowables.propagateCause(DriverThrowables.java:35)
  at shaded.com.datastax.driver.core.AbstractSession.prepare(AbstractSession.java:97)
  at mme.cassandraclient.SessionWrapper.prepare(SessionWrapper.java:215)
  at org.apache.cassandra.diff.DiffCluster.getFullStatement(DiffCluster.java:272)
  at org.apache.cassandra.diff.DiffCluster.getStatementForTable(DiffCluster.java:204)
  at org.apache.cassandra.diff.DiffCluster.keyReader(DiffCluster.java:188)
  at org.apache.cassandra.diff.DiffCluster.fetchPartitionKeys(DiffCluster.java:125)
  at org.apache.cassandra.diff.DiffCluster.lambda$getPartitionKeys$0(DiffCluster.java:114)
  at org.apache.cassandra.diff.RetryStrategy.retry(RetryStrategy.java:21)
  at org.apache.cassandra.diff.DiffCluster.getPartitionKeys(DiffCluster.java:113)
{code}

The cause is that when building the select query, the ordered-by column names are not quoted. The server only sees the field names in lowercase, and it is unable to recognize. 

A simple unit test to prove that the field name needs to be quoted in the query builder in order to have the built query preserve the quotes. 

{code:java}
query = ""SELECT * FROM t WHERE a='foo' ORDER BY \""bCol\"" DESC;"";
select = select().from(""t"").where(eq(""a"", ""foo"")).orderBy(desc(""\""bCol\""""));
assertEquals(select.toString(), query);
{code}",,Jyothsnakonisa,marcuse,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15537,,,,,,,,,,,,,,,,,,,,,,,0.0,Jyothsnakonisa,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Feb 02 19:16:01 UTC 2021,,,,,,,All,,,,,,"0|z0jxx4:",9223372036854775807,,,,marcuse,yifanc,,,Normal,,cassandra-diff-0.2,,,https://github.com/apache/cassandra-diff/commit/c3ce22c97542eaa3b0a450168bc63ce24b4ffeaa,,,,,,,,,Manual container test,,,,,"29/Jan/21 19:15;Jyothsnakonisa;[https://github.com/apache/cassandra-diff/pull/14]

 For tables with clustering keys, in the prepared statement with ordering, column names are to be quoted.;;;","02/Feb/21 00:48;Jyothsnakonisa;Adding quotes by default to keyspace names, table names and column names so that we do not run into issues with quotes during diff job where we have reserve/keywords in keyspace, table and column names.;;;","02/Feb/21 00:59;yifanc;Thanks [~Jyothsnakonisa] for fixing the issue. 

I ran the test locally and can confirm the diff spark job now works with names with uppercase letters. 

The schema used in the test
{code:java}
CREATE KEYSPACE keyspace1 WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': 1};

CREATE TABLE keyspace1.""TEST"" (
  pk text,
  ""Col1"" text,
  col2 text,
  PRIMARY KEY(pk, ""Col1"")
);{code}
With the patch, the diff job passes. 

W/o the patch, it fails with the following error.
{code:java}
Caused by: com.datastax.driver.core.exceptions.InvalidQueryException: Undefined column name col1Caused by: com.datastax.driver.core.exceptions.InvalidQueryException: Undefined column name col1 at com.datastax.driver.core.exceptions.InvalidQueryException.copy(InvalidQueryException.java:49) at com.datastax.driver.core.DriverThrowables.propagateCause(DriverThrowables.java:35) at com.datastax.driver.core.AbstractSession.prepare(AbstractSession.java:97) at org.apache.cassandra.diff.DiffCluster.getFullStatement(DiffCluster.java:272) at org.apache.cassandra.diff.DiffCluster.getStatementForTable(DiffCluster.java:204) at org.apache.cassandra.diff.DiffCluster.keyReader(DiffCluster.java:188) at org.apache.cassandra.diff.DiffCluster.fetchPartitionKeys(DiffCluster.java:125) at org.apache.cassandra.diff.DiffCluster.lambda$getPartitionKeys$0(DiffCluster.java:114) at org.apache.cassandra.diff.RetryStrategy.retry(RetryStrategy.java:21) at org.apache.cassandra.diff.DiffCluster.getPartitionKeys(DiffCluster.java:113) ... 21 more
{code}
+1;;;","02/Feb/21 06:50;marcuse;+1;;;","02/Feb/21 19:16;yifanc;Committed into trunk as [c3ce22c97542eaa3b0a450168bc63ce24b4ffeaa|https://github.com/apache/cassandra-diff/commit/c3ce22c97542eaa3b0a450168bc63ce24b4ffeaa];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reading dense table yields invalid results in case of row scan queries,CASSANDRA-16223,13336798,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,22/Oct/20 20:34,19/Nov/21 06:51,13/Jul/23 08:39,02/Nov/20 10:43,3.0.23,3.11.9,,,,Consistency/Coordination,,,,0,,,,"{{ThriftIntegrationTest}} is broken in the way that it does not actually test reads before and after flushing, because it does not do flush at all (see https://github.com/apache/cassandra/blob/cassandra-3.11/test/unit/org/apache/cassandra/cql3/validation/ThriftIntegrationTest.java#L939). After fixing that method so that it really flushes memtables to disk, we can see inconsistency in reads from dense table - the results returned from memtable differs from the results returned from sstable (the later are wrong, cell values are skipped unexpectedly).

{noformat}
java.lang.AssertionError: Invalid value for row 0 column 0 (value of type ascii), expected <value1> but got <>
{noformat}

In principle this problems is about skipping column values when doing row scan queries with explicitly selected columns (not wildcard), when the columns belong to a super column. This happens only when reading from sstables, it does not happen when reading from memtables.
",,brandon.williams,cscotta,jlewandowski,slebresne,,,,,,,,"jacek-lewandowski opened a new pull request #787:
URL: https://github.com/apache/cassandra/pull/787


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 20:41;githubbot;600","jacek-lewandowski closed pull request #787:
URL: https://github.com/apache/cassandra/pull/787


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Nov/21 06:51;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15962,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Nov 02 11:17:45 UTC 2020,,,,,,,All,,,,,,"0|z0jxo8:",9223372036854775807,,,,slebresne,,,,Low,,3.0.0,,,"https://github.com/apache/cassandra/commit/f106ef0697e172492b0343462c593edb703f2ac8, https://github.com/apache/cassandra/commit/833ba83c155871247092d6783d026c27582cde7b",,,,,,,,,"Run unit tests, especially {{ThriftIntegrationTest}}",,,,,"22/Oct/20 20:45;jlewandowski;PR fixing the issue is available here: https://github.com/apache/cassandra/pull/787

The first commit fixes the {{ThriftIntegrationTest}} so that one can see the problem before it is fixed in the second commit.
;;;","22/Oct/20 20:51;cscotta;Great find! Does this impact 3.0.x as well?;;;","22/Oct/20 21:29;jlewandowski;I'll check on Monday;;;","26/Oct/20 11:45;jlewandowski;It does not impact 3.0.x because AFAIU there is no value skipping optimization in 3.0.x.;;;","26/Oct/20 12:26;slebresne;Good catch, and the fix lgtm, +1.;;;","26/Oct/20 12:43;slebresne;bq. It does not impact 3.0.x because AFAIU there is no value skipping optimization in 3.0.x.

It's true that the bug here does not manifest on 3.0. That said, the code is still kind of wrong in 3.0 as well (range queries just don't get the proper column filter for super columns), and while this may not manifest in a bug in practice, it still feel a bit dodgy to leave as is in practice. Plus, fixing {{ThriftIntegrationTest}} in 3.0 doesn't hurt either.

Anyway, I've pulled the patch against 3.0 as well (it applies without any changes whatsoever) and started CI on both branches. Planning to commit both when I get clean result from CI (unless someone object quickly on the 3.0 part).

|| patch || CI run ||
| [3.0|https://github.com/pcmanus/cassandra/commits/C-16223-3.0] | [#133|https://ci-cassandra.apache.org/job/Cassandra-devbranch/133/] |
| [3.11|https://github.com/pcmanus/cassandra/commits/C-16223-3.11] | [#134|https://ci-cassandra.apache.org/job/Cassandra-devbranch/134/] |
;;;","26/Oct/20 12:46;jlewandowski;Thanks!;;;","02/Nov/20 09:18;jlewandowski;Can we merge this and close the ticket ?;;;","02/Nov/20 10:43;slebresne;The CI run appears good to me, so committed.;;;","02/Nov/20 11:17;jlewandowski;Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
python dtest pending_range_test.py::TestPendingRangeMovements::test_pending_range (@pytest.mark.resource_intensive) fails on trunk,CASSANDRA-16220,13336531,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,dcapwell,dcapwell,21/Oct/20 17:35,21/Dec/20 09:08,13/Jul/23 08:39,28/Oct/20 13:36,2.2.19,3.0.23,3.11.9,4.0,4.0-beta3,Test/dtest/python,,,,0,,,,"The test has the following section

{code}
if cluster.version() >= '2.2':
  node2.watch_log_for('127.0.0.1 state moving', timeout=10, filename='debug.log’)
{code}

The issue is that in trunk we have the port attached to the log, so the log is now

{code}
DEBUG [GossipStage:1] 2020-10-21 00:48:20,104 StorageService.java:2452 - Node /127.0.0.1:7000 state MOVING, tokens [-9223372036854775808]
DEBUG [GossipStage:1] 2020-10-21 00:48:20,105 StorageService.java:2670 - Node /127.0.0.1:7000 state moving, new token -634023222112864484
{code}

Since the log now contains the port, this test always times out on trunk when it hits this

{code}
self = <pending_range_test.TestPendingRangeMovements object at 0x7fc5d35c85f8>
     @pytest.mark.resource_intensive
    def test_pending_range(self):
        """"""
            @jira_ticket CASSANDRA-10887
            """"""
        cluster = self.cluster
        # If we are on 2.1, we need to set the log level to debug or higher, as debug.log does not exist.
        if cluster.version() < '2.2':
            cluster.set_log_level('DEBUG')
   
        # Create 5 node cluster
        cluster.populate(5).start()
        node1, node2 = cluster.nodelist()[0:2]
   
        # Set up RF=3 keyspace
        session = self.patient_cql_connection(node1)
        create_ks(session, 'ks', 3)
   
        session.execute(""CREATE TABLE users (login text PRIMARY KEY, email text, name text, login_count int)"")
   
        # We use the partition key 'jdoe3' because it belongs to node1.
        # The key MUST belong to node1 to repro the bug.
        session.execute(""INSERT INTO users (login, email, name, login_count) VALUES ('jdoe3', 'jdoe@abc.com', 'Jane Doe', 1) IF NOT EXISTS;"")
   
        lwt_query = SimpleStatement(""UPDATE users SET email = 'janedoe@abc.com' WHERE login = 'jdoe3' IF email = 'jdoe@abc.com'"")
   
        # Show we can execute LWT no problem
        for i in range(1000):
            session.execute(lwt_query)
   
        token = '-634023222112864484'
   
        mark = node1.mark_log()
   
        # Move a node
        node1.nodetool('move {}'.format(token))
   
        # Watch the log so we know when the node is moving
        node1.watch_log_for('Moving .* to {}'.format(token), timeout=10, from_mark=mark)
        node1.watch_log_for('Sleeping 30000 ms before start streaming/fetching ranges', timeout=10, from_mark=mark)
   
        if cluster.version() >= '2.2':
>           node2.watch_log_for('127.0.0.1 state moving', timeout=10, filename='debug.log')
 pending_range_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
 self = <ccmlib.node.Node object at 0x7fc5d3b51208>
exprs = '127.0.0.1 state moving', from_mark = None, timeout = 10, process = None
verbose = False, filename = 'debug.log'
     def watch_log_for(self, exprs, from_mark=None, timeout=600, process=None, verbose=False, filename='system.log'):
        """"""
            Watch the log until one or more (regular) expressions are found or timeouts (a
            TimeoutError is then raised). On successful completion, a list of pair (line matched,
            match object) is returned.
            """"""
        start = time.time()
        tofind = [exprs] if isinstance(exprs, string_types) else exprs
        tofind = [re.compile(e) for e in tofind]
        matchings = []
        reads = """"
        if len(tofind) == 0:
            return None
   
        log_file = os.path.join(self.log_directory(), filename)
        output_read = False
        while not os.path.exists(log_file):
            time.sleep(.5)
            if start + timeout < time.time():
                raise TimeoutError(time.strftime(""%d %b %Y %H:%M:%S"", time.gmtime()) + "" ["" + self.name + ""] Timed out waiting for {} to be created."".format(log_file))
            if process and not output_read:
                process.poll()
                if process.returncode is not None:
                    self.print_process_output(self.name, process, verbose)
                    output_read = True
                    if process.returncode != 0:
                        raise RuntimeError()  # Shouldn't reuse RuntimeError but I'm lazy
   
        with open(log_file) as f:
            if from_mark:
                f.seek(from_mark)
   
            while True:
                # First, if we have a process to check, then check it.
                # Skip on Windows - stdout/stderr is cassandra.bat
                if not common.is_win() and not output_read:
                    if process:
                        process.poll()
                        if process.returncode is not None:
                            self.print_process_output(self.name, process, verbose)
                            output_read = True
                            if process.returncode != 0:
                                raise RuntimeError()  # Shouldn't reuse RuntimeError but I'm lazy
   
                line = f.readline()
                if line:
                    reads = reads + line
                    for e in tofind:
                        m = e.search(line)
                        if m:
                            matchings.append((line, m))
                            tofind.remove(e)
                            if len(tofind) == 0:
                                return matchings[0] if isinstance(exprs, string_types) else matchings
                else:
                    # yep, it's ugly
                    time.sleep(1)
                    if start + timeout < time.time():
>                       raise TimeoutError(time.strftime(""%d %b %Y %H:%M:%S"", time.gmtime()) + "" ["" + self.name + ""] Missing: "" + str([e.pattern for e in tofind]) + "":\n"" + reads[:50] + "".....\nSee {} for remainder"".format(filename))
E                       ccmlib.node.TimeoutError: 21 Oct 2020 00:50:26 [node2] Missing: ['127.0.0.1 state moving']:
E                       INFO  [main] 2020-10-21 00:49:15,878 YamlConfigura.....
E                       See debug.log for remainder
 /opt/rh/rh-python36/root/usr/lib/python3.6/site-packages/ccmlib/node.py:550: TimeoutError
{code}",,bereng,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16221,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 28 13:40:17 UTC 2020,,,,,,,All,,,,,,"0|z0jw14:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/f5cb55464bf831e3a6d07bcf80facc2afebefc05,,,,,,,,,"DTest Pull request [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/6]",,,,,"21/Oct/20 17:43;dcapwell;In slack https://the-asf.slack.com/archives/CK23JSY2K/p1603301859245500 I pointed out that Jenkins doesn't run this test, as Jenkins only runs the tests with vnodes, and this test is marked no_vnode; we should fix Jenkins to run these test to see these issues (though 100% fine in a different ticket).;;;","22/Oct/20 22:35;e.dimitrova;DTest fixed [here |https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/6]
 After fixing the mentioned issue (to consider the port in the log messages in 4.0), it was revealed one more hidden [issue |https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/6/commits/d645e13805a8e8e7cfe940387f1922ab7f2f9997#diff-3fbf2d533913fcf219b19134faede17aaf4e6475277ce62f9dc0d021ab7b0d04L69] which was affecting all versions.
{code:java}
        logger.debug(""Nodetool Ring output: {}"".format(out))
>       assert_regexp_matches(out, ""127\.0\.0\.1.*?Down.*?Moving"")
E       TypeError: 'tuple' object is not callable

pending_range_test.py:73: TypeError
{code}
As I read that
{code:java}
assert_regexp_matches(){code}
is deprecated in Python 3, I fixed the issue by using
{code:java}
re.search().{code}
Thanks [~dcapwell] for opening CASSANDRA-16221. This test passes successfully locally.
 Should we wait for the CASSANDRA-16221 patch to be committed?;;;","26/Oct/20 04:15;bereng;If you dig a bit {{assertTools.py}} maps {{assert_regexp_matches()}} which is being used in other places as well. How about updating the mapping to fix that deprecation throughout and renaming {{assert_regexp_matches()}} to sthg else such as {{re_search()}} i.e.?

I wouldn't wait to merge but I don't feel strongly about it.;;;","26/Oct/20 14:48;e.dimitrova;As we talked in Slack, updating the mapping is not applicable to re.search(). On a further read actually it is good to update  assert_regexp_matches() to assertRegex().

I suggest this to be done in a follow up ticket and to leave this one with the current patch. (in this case it doesn't matter whether we use assert_regexp_matches() or re.search() I think?)

 

 

 ;;;","27/Oct/20 05:18;bereng;SGTM if you prefer to do in another ticket. Can you get a committer to run that dtest branch for you so we have CI?;;;","27/Oct/20 13:12;e.dimitrova;This test is still not running in Jenkins;;;","27/Oct/20 13:35;bereng;Ah right! my bad. +1.;;;","27/Oct/20 23:18;e.dimitrova; [~dcapwell], [~brandon.williams], is anyone of you available also to review/commit it?;;;","28/Oct/20 13:36;brandon.williams;Committed.;;;","28/Oct/20 13:40;e.dimitrova;Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minimal 4.0 COMPACT STORAGE backport,CASSANDRA-16217,13336338,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,20/Oct/20 16:54,09/Jan/23 15:36,13/Jul/23 08:39,08/Dec/20 07:25,4.0,4.0-beta4,,,,Legacy/CQL,,,,0,,,,"There are several behavioural changes related to compact storage, and these differences are larger than most of us have anticipated: we first thought there’ll be that “appearing column”, but there’s implicit nulls in clusterings thing, and row vs column deletion.

Some of the recent issues on the subject are: CASSANDRA-16048, which allows to ignore these differences. The other one was trying to improve user experience of anyone still using compact storage: CASSANDRA-15811.

Easily reproducible differernces are:

(1) hidden columns show up, which breaks SELECT * queries
 (2) DELETE v and UPDATE v WITH TTL would result into row removals in non-dense compact tables (CASSANDRA-16069)
 (3) INSERT allows skipping clusterings, which are filled with nulls by default.

Some of these are tricky to support, as 15811 has shown. Anyone on OSS side who might want to upgrade to 4.0 while still using compact storage might be affected by being forced into one of these behaviours.

Possible solutions are to document these behaviours, or to bring back a minimal set of COMPACT STORAGE to keep supporting these.

It looks like it is possible to leave some of the functionality related to DENSE flag and allow it to be present in 4.0, but only for these three (and potential related, however not direrclty visible) cases.

[~e.dimitrova] since you were working on removal on compact storage, wanted to reassure that this is not a revert of your patch. On contrary: your patch was instrumental in identifying the right places.

cc [~slebresne] [~aleksey] [~benedict] [~marcuse]

|[patch|https://github.com/apache/cassandra/pull/785]|[ci|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=13994-followup]|",,dcapwell,e.dimitrova,ifesdjeen,maedhroz,marcuse,,,,,,,"ifesdjeen opened a new pull request #827:
URL: https://github.com/apache/cassandra/pull/827


   Patch by Alex Petrov; reviewed by Marcus Eriksson for Marcus Eriksson


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Nov/20 14:33;githubbot;600","ifesdjeen opened a new pull request #104:
URL: https://github.com/apache/cassandra-dtest/pull/104


   Patch by Alex Petrov; reviewed by Ekaterina Dimitrova for CASSANDRA-16217


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 15:31;githubbot;600","ifesdjeen merged pull request #104:
URL: https://github.com/apache/cassandra-dtest/pull/104


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Dec/20 07:25;githubbot;600","smiklosovic closed pull request #827:
URL: https://github.com/apache/cassandra/pull/827


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:08;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16361,CASSANDRA-16226,CASSANDRA-17507,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Dec 01 18:49:20 UTC 2020,,,,,,,All,,,,,,"0|z0juu8:",9223372036854775807,,,,ifesdjeen,marcuse,,,Critical,,4.0-beta1,,,https://github.com/apache/cassandra/commit/8ffec0f02cf73c3d3a8c01aa2d856647a5620a21,,,,,,,,,"Tests included; will be additionally tested wit Harry",,,,,"21/Oct/20 14:02;e.dimitrova;Hi [~ifesdjeen], 

Thanks for pinging.

??Possible solutions are to document these behaviours, or to bring back a minimal set of COMPACT STORAGE to keep supporting these.??

I am +1 on adding the minimal support and not having breaking changes. ;;;","02/Nov/20 14:36;marcuse;this looks good in general, first pass of review;

* we need to forward-port https://issues.apache.org/jira/browse/CASSANDRA-13917 to 4.0
* In {{Selection.java}}, this was changed in 13994:
{code}
    public boolean containsStaticColumns()
     {
-        if (table.isStaticCompactTable() || !table.hasStaticColumns())
+        if (!table.hasStaticColumns())
             return false;
...
{code}
note that I don't see how we can actually hit this (especially with 13917 backported), just wanted to make sure you left this out on purpose

* {{RowFilter#deserialize}}:
{code}
-                if (!metadata.isCompactTable() && column == null)
+                if (column == null)
{code}
* {{ViewUpdateGenerator#updateAction}} missing:
{code}
        if (baseMetadata.isCompactTable())
         {
             Clustering clustering = mergedBaseRow.clustering();
             for (int i = 0; i < clustering.size(); i++)
             {
                 if (clustering.get(i) == null)
                     return UpdateAction.NONE;
             }
         }
{code}
* {{TableMetadata#fixupCompactTable}} needs
{code}
        if (hasCounters)
            flags.add(TableMetadata.Flag.COUNTER);
{code}
* we should probably re-add all the (relevant) tests removed in CASSANDRA-10857

;;;","05/Nov/20 13:17;ifesdjeen;[~marcuse] thank you for a review.

I think it's a great idea to backport [CASSANDRA-10857] tests, did find several edge-cases with CQL generation. I've also made changes similar to [CASSANDRA-13917], although it turned out we can implement them a bit simpler in 4.0.

I've triggered another test run just now after fixing the last failure, so this should be ready for another round.;;;","10/Nov/20 11:16;marcuse;+1, two very minor comments in the PR, feel free to ignore or fix on commit;;;","12/Nov/20 11:39;ifesdjeen;[~marcuse] thank you for review! Fixed indentation on commit, and will open a separate ticket for handling v3 in 4.0.

Committed to trunk with [8ffec0f02cf73c3d3a8c01aa2d856647a5620a21|https://github.com/apache/cassandra/commit/8ffec0f02cf73c3d3a8c01aa2d856647a5620a21];;;","12/Nov/20 23:36;dcapwell;This seems to have broken the upgrade tests, [~ifesdjeen] can you take a look?

https://app.circleci.com/pipelines/github/dcapwell/cassandra/790/workflows/2cee6597-8801-41fb-af14-09943cba006c

{code}
testclasslist:
     [echo] Number of test runners: 1
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest Tests run: 4, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 36.632 sec
[junit-timeout]
[junit-timeout] Testcase: ignoreDenseCompoundTablesWithValueColumn(org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest):     FAILED
[junit-timeout] missing compound flag
[junit-timeout] junit.framework.AssertionFailedError: missing compound flag
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest.lambda$ignoreDenseCompoundTablesWithValueColumn$1(CompactStorage3to4UpgradeTest.java:97)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:180)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest.ignoreDenseCompoundTablesWithValueColumn(CompactStorage3to4UpgradeTest.java:100)
[junit-timeout]
[junit-timeout]
[junit-timeout] Testcase: failOnCompactClusteredTablesWithValueOutColumn(org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest):       FAILED
[junit-timeout] should never run because we don't expect the node to start
[junit-timeout] junit.framework.AssertionFailedError: should never run because we don't expect the node to start
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest.lambda$failOnCompactClusteredTablesWithValueOutColumn$3(CompactStorage3to4UpgradeTest.java:112)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:180)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest.failOnCompactClusteredTablesWithValueOutColumn(CompactStorage3to4UpgradeTest.java:113)
[junit-timeout]
[junit-timeout]
[junit-timeout] Testcase: failOnCompactTablesWithNoClustering(org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest):  FAILED
[junit-timeout] should never run because we don't expect the node to start
[junit-timeout] junit.framework.AssertionFailedError: should never run because we don't expect the node to start
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest.lambda$failOnCompactTablesWithNoClustering$5(CompactStorage3to4UpgradeTest.java:130)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:180)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest.failOnCompactTablesWithNoClustering(CompactStorage3to4UpgradeTest.java:131)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.distributed.upgrade.CompactStorage3to4UpgradeTest FAILED

BUILD FAILED
/Users/davidcapwell/src/github/apache/cassandra-trunk/build.xml:2035: The following error occurred while executing this line:
/Users/davidcapwell/src/github/apache/cassandra-trunk/build.xml:1916: Some test(s) failed.

Total time: 41 seconds
{code};;;","17/Nov/20 19:21;e.dimitrova;[~ifesdjeen]  Also, I think we can remove this from NEWS.txt:
 * Cassandra 4.0 removed support for COMPACT STORAGE tables. All Compact Tables have to be migrated using 'ALTER ... DROP COMPACT STORAGE' statement in 3.0/3.11. Cassandra starting 4.0 will not start if flags indicate that the table is non-CQL. Syntax for creating compact tables is also deprecated

Should I open a new follow up ticket for test fixes, harry tests, and documentation to be updated? Or even a few of them?;;;","19/Nov/20 14:39;ifesdjeen;I aplogise for taking long to respond. This test shouold be removed since there's no auto-drop of compact storage, one has to do this explicitly.

|[patch|https://github.com/apache/cassandra/pull/827]|[CI|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=CASSANDRA-16217-followup]|

I've also updated a news entry.

[~marcuse] [~e.dimitrova] could you take a short look? The change is rahter mechanical.;;;","19/Nov/20 14:54;marcuse;+1 assuming clean ci;;;","19/Nov/20 15:01;e.dimitrova;Thanks [~ifesdjeen], it looks good to me. I managed to run locally the compact storage upgrade DTests some time ago, I will rerun them later to check their current state.;;;","19/Nov/20 19:09;dcapwell;[~maedhroz] and/or [~adelapena] mind reviewing?  Since you two worked on creating that test, would be best if you chime in saying its correct to delete the test.;;;","19/Nov/20 19:12;maedhroz;[~ifesdjeen] Should we be removing {{testNullClusteringValues}}. It never relied on the auto-drop functionality, correct? (It's also the only test that verified the fix from CASSANDRA-16241.);;;","20/Nov/20 14:55;e.dimitrova;I just took a quick look at the dests as promised:

[https://github.com/ekaterinadimitrova2/cassandra-dtest/blob/master/upgrade_tests/upgrade_compact_storage.py#L56] ---> this one should be reworked to actually test 4.0 with the compact storage

[https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_compact_storage.py#L116] ---> this one maybe could be removed

Also, this one - https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_compact_storage.py#L182;;;","20/Nov/20 15:15;ifesdjeen;[~maedhroz] of course, you're right. Brought back {{testNullClusteringValues}}. Thank you for bringing this up. Could you take another look?

;;;","20/Nov/20 15:31;ifesdjeen;[~e.dimitrova] since we have added upgrade dtests [here|https://github.com/apache/cassandra/commit/8ffec0f02cf73c3d3a8c01aa2d856647a5620a21#diff-80d21b6bed7c174f700bd5d003122180c67b6615a2bc9c64aa9077ad9dc7cd8aR31] as in-jvm dtests, I do not think it's necessary to update python tests. Patch to remove ones you have pointed out: https://github.com/apache/cassandra-dtest/pull/104;;;","20/Nov/20 18:36;dcapwell;There have been conversations about migrating from python to jvm dtest and the main point is we shouldn't delete python dtests.  python dtests cover vnode case as well but jvm does not, so if we delete python dtests in favor of jvm dtest we actually loose coverage.  I added a marker saying a test was ported to jvm-dtest, this will skip novnode case but still run in vnode case.;;;","20/Nov/20 18:40;ifesdjeen;Just to make sure: above patch only removes tests that aren’t applicable (in other words, ones that are testing that 4.0 won’t start). We will not delete any tests that test actual functionality.;;;","20/Nov/20 18:46;dcapwell;thanks for clarifying.;;;","21/Nov/20 18:12;maedhroz;[~ifesdjeen] Sorry, was out sick yesterday. I had a look at the [follow-up patch|https://github.com/apache/cassandra/pull/827], and LGTM. Thanks!;;;","30/Nov/20 17:21;e.dimitrova;As far as I can see from the thread, all concerns were already addressed? Is this ready for commit or I am missing something? :);;;","30/Nov/20 23:57;dcapwell;As long as the author's of the tests modified (Caleb in this case) are ok then I am ok.;;;","01/Dec/20 08:13;ifesdjeen;Follow-up is committed as [caeecf6456b87886a79f47a2954788e6c856697c|https://github.com/apache/cassandra/commit/caeecf6456b87886a79f47a2954788e6c856697c] and [79ea1e373614c21fd1aa294fb52d693767b91819|https://github.com/apache/cassandra/commit/79ea1e373614c21fd1aa294fb52d693767b91819]. 

I was waiting for to merge https://github.com/apache/cassandra-dtest/pull/104 to close this ticket, [~e.dimitrova] would you be able to take a look at it?;;;","01/Dec/20 18:49;e.dimitrova;Hey [~ifesdjeen], I am sorry, I am not a committer but removing those three tests makes sense as they were testing inability to start after upgrade to 4.0 without removing the COMPACT STORAGE and the downgrade after unsuccessful upgrade. ;;;",,,,,,,,,,,,,,,,,,,,,,,,
Cannot replace_address /X because it doesn't exist in gossip,CASSANDRA-16213,13335664,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,15/Oct/20 19:11,03/Jan/21 16:58,13/Jul/23 08:39,15/Dec/20 22:55,4.0,4.0-beta4,,,,Cluster/Gossip,Cluster/Membership,,,0,,,,"We see this exception around nodes crashing and trying to do a host replacement; this error appears to be correlated around multiple node failures.

A simplified case to trigger this is the following

*) Have a N node cluster
*) Shutdown all N nodes
*) Bring up N-1 nodes (at least 1 seed, else replace seed)
*) Host replace the N-1th node -> this will fail with the above

The reason this happens is that the N-1th node isn’t gossiping anymore, and the existing nodes do not have its details in gossip (but have the details in the peers table), so the host replacement fails as the node isn’t known in gossip.

This affects all versions (tested 3.0 and trunk, assume 2.2 as well)",,brandon.williams,dcapwell,e.dimitrova,jeromatron,jmeredithco,paulo,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Dec 15 22:55:02 UTC 2020,,,,,,,All,,,,,,"0|z0jqow:",9223372036854775807,,,,brandon.williams,jmeredithco,paulo,samt,Critical,,2.0.0,,,https://github.com/apache/cassandra/commit/d61710d5b2623f0c1ebf4dbcbfaaf6c8d3a3ab91,,,,,,,,,tests added,,,,,"15/Oct/20 19:23;brandon.williams;This affects all versions since the inception of replacement.  If you shutdown the entire ring in non-rolling fashion then it is no surprise that any gossip state not persisted (and specific to an existing live node, which will repopulate it) will be lost.  You can no longer replace as a consequence. A node injecting states that don't belong to itself is generally forbidden as it is dangerous, with the except that proves the rule be assassinate (which also sleeps to careful.)  No node should need to know about any dead states upon a full ring restart,  with the exception of replacement.

;;;","15/Oct/20 19:50;dcapwell;Thanks for the replay [~brandon.williams]!

bq. If you shutdown the entire ring in non-rolling fashion then it is no surprise

We see this in rolling fashion as well, full cluster was easier to reproduce; so the issue isn't isolated to full cluster outage.

bq. You can no longer replace as a consequence

What is the recommendation in these cases?

bq. A node injecting states that don't belong to itself is generally forbidden as it is dangerous

In the case I call out we don't add the node to the ring, but we do add it to gossip, see https://github.com/apache/cassandra/blob/699a1f74fcc1da1952da6b2b0309c9e2474c67f4/src/java/org/apache/cassandra/gms/Gossiper.java#L1754-L1780.

We will try to evict it from gossip (see https://github.com/apache/cassandra/blob/699a1f74fcc1da1952da6b2b0309c9e2474c67f4/src/java/org/apache/cassandra/gms/Gossiper.java#L960-L969), but we also see in the wild that this eviction doesn't happen and it stays there forever; here is a sample from gossipinfo on a real cluster

{code}
/<ip>
  generation:0
  heartbeat:0
  TOKENS: not present
{code}

;;;","15/Oct/20 19:54;dcapwell;Sorry, I misspoke, on startup we do add it back into the ring, see https://github.com/apache/cassandra/blob/699a1f74fcc1da1952da6b2b0309c9e2474c67f4/src/java/org/apache/cassandra/service/StorageService.java#L604-L617.

So currently, each node will add it back into the ring, and will add it back into gossip.;;;","15/Oct/20 20:01;dcapwell;[~paulo]. Brandon told me in slack you would be a good person to review as well, would you be able to?;;;","25/Oct/20 23:20;paulo;Overall I like the proposed approach, I would just limit propagating state about the downed host *only* during shadow gossip response (and *not* during normal gossip) to limit the potential surface area of this change. I think we should extract the shadow gossip response from {{examineGossiper}} to make this cleaner.

A natural consequence of this is that we will never need to handle the state ""UNKNOWN"" on {{StorageService.onChange}} so it would be nice to add an assertion there if we ever get a notification about this change on a live node.

I like the tests but I'm not very familiar with in-jvm dtest infrastructure so it would be nice to get a pair of eyes on that to make sure the framework changes look good.
;;;","26/Oct/20 18:10;dcapwell;Thanks for the review [~paulo]

bq.  I would just limit propagating state about the downed host only during shadow gossip response

I will test this out

bq. I'm not very familiar with in-jvm dtest infrastructure so it would be nice to get a pair of eyes on that to make sure the framework changes look good.

Agree.  Jvm-dtest forked a lot of CassandraDaemon so took a while to make sure the logic matched, this was a good chunk of this patch =(.;;;","30/Oct/20 20:45;dcapwell;Started down the path of only modifying shadow round and hitting a wall.

When we are starting a fresh host, we do not have anything in the peers table, so we do not populate TokenMetadata and rely on gossip, but we only rely on normal gossip and not shadow gossip for this.  I tried notifying StorageService about the shadow round but it fails as it polls Gossiper for endpointStateMap, which won't have this data.  I can try to refactor storage service, or populate endpointStateMap when shadow round completes...

[~paulo] is this what you had in mind?  Seeing that shadow round is mostly ignored, so would need to change this in order to isolate to that.

;;;","30/Oct/20 21:22;dcapwell;I made the changes pass in https://github.com/dcapwell/cassandra/commit/e7af378ce4b491d0126b6d9f67b746e2d62ff19a, but not a fan of this change

* storage service registers early
* we apply the shadow round state to the gossip state
* removed 'unknown';;;","01/Nov/20 22:23;paulo;Thanks, added some comments to the commit. Please let me know what do you think.;;;","03/Nov/20 00:02;dcapwell;[~paulo] and I chatted in GH and slack, dumping a summary here.

1) shadow round will now return these ""empty"" states, but these states do NOT have the status state defined
2) the receiver side will now see these empty states and check a flag to see if it should handle this case or fall back to previous state
3) if true, then apply just the endpoint state to gossip then call org.apache.cassandra.service.StorageService#handleStateNormal
4) added logic to reject nodes with specific gossip states from being replaced, and added flags to alter and/or disable this behavior
5) when gossiping, the ""empty"" states will be filtered out and not sent around (to match previous logic).

the empty state is defined as the following
{code}
heartbeat version = -1
applicationState does NOT contain STATUS_WITH_PORT or STATUS
{code}

I have cleaned up the code and made the changes; code is ready to review again.;;;","04/Nov/20 04:39;e.dimitrova;I left a few small comments/questions on the CASSANDRA_RELEVANT_PROPERTIES' new methods, as per request. I see you already have two reviewers committers but let me know if you want me to do a review of the full ticket. ;;;","08/Nov/20 21:56;paulo;Thanks for the update [~dcapwell]. I think 5) is not required as endpoint states with heartbeat version -1 need not be sent by {{examineGossiper}}, just by {{examineShadowState}} where all states are sent. I made this update [on this commit|https://github.com/dcapwell/cassandra/pull/1/commits/35802d68c6fa195a93b92e7bc779d3d8c94f07e6].

I don't think we need the property {{cassandra.allow_non_normal_replace_address}} is needed since we can achieve this via the property {{cassandra.replacement_allowed_gossip_statuses}}, so I removed it [on this commit|https://github.com/dcapwell/cassandra/pull/1/commits/8f23a70948ef020dba222cfb80a21e2d5322c672].

I opened [this PR|https://github.com/dcapwell/cassandra/pull/1] to your branch with these suggestions and some other minor nits.

As far as I understood {{HostReplacementOfDowedClusterTest.hostReplacementOfDeadNode}} tests an orderly shutdown, that is, when the node announces it's going to leave the cluster by broadcasting the shutdown state. Can we maybe also test with an abrupt shutdown, that is when the shutdown state is not broadcast and the node to be replaced is on NORMAL state?

Other than that, this patch looks good to me.;;;","09/Nov/20 17:55;dcapwell;Thanks for the feedback

bq. not required as endpoint states with heartbeat version -1 need not be sent by examineGossiper

I think that was important for assassinate, so will try to look closer at your patch and how it works with assassinate

bq. HostReplacementOfDowedClusterTest.hostReplacementOfDeadNode tests an orderly shutdown, ... Can we maybe also test with an abrupt shutdown, that is when the shutdown state is not broadcast and the node to be replaced is on NORMAL state?

Makes a lot of sense, I can try working on this test (I assume I can just block gossip messages as I can't kill -9 in jvm-dtest).;;;","13/Nov/20 02:10;dcapwell;I have been working on the test but its flaky; half the time it passes, the other half it acts like an infinite loop waiting on schema during bootstrap...  trying to figure out what's going on there, though it does look unrelated to the patch (all the nodes expected in gossip are present).;;;","13/Nov/20 18:29;dcapwell;Found the issue, it was caused by CASSANDRA-15158 where it creates a config of milliseconds, calls a delay which takes milliseconds, but converts the mills as if they were seconds, causing a much longer delay than expected.

Once I fix that I then hit the next issue, we now block waiting on schema which will fail since it has a downed node.

{code}
case SCHEMA:
                        SystemKeyspace.updatePeerInfo(endpoint, ""schema_version"", UUID.fromString(value.value));
                        MigrationCoordinator.instance.reportEndpointVersion(endpoint, UUID.fromString(value.value));
                        break;
{code}

{code}
boolean schemasReceived = MigrationCoordinator.instance.awaitSchemaRequests(SCHEMA_DELAY_MILLIS);

        if (schemasReceived)
            return;

        logger.warn(String.format(""There are nodes in the cluster with a different schema version than us we did not merged schemas from, "" +
                                  ""our version : (%s), outstanding versions -> endpoints : %s"",
                                  Schema.instance.getVersion(),
                                  MigrationCoordinator.instance.outstandingVersions()));

        if (REQUIRE_SCHEMAS)
            throw new RuntimeException(""Didn't receive schemas for all known versions within the timeout"");
{code}

when we get the gossip info from the peers it will have node2 (the node that crashed abruptly) and wait until it gets the schema, but this won't happen since node2 is down and we are replacing it.

This looks unrelated to this patch, but also is a bad condition as any schema change with a downed node will cause nodes to fail to start up...;;;","13/Nov/20 19:01;dcapwell;I plan to fix the schema wait logic in https://issues.apache.org/jira/browse/CASSANDRA-15158?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=17231757#comment-17231757 to keep this patch clean of it, but for the moment the logic is in this branch to get a stable test.;;;","13/Nov/20 21:12;dcapwell;[~paulo] added the test and rebased to latest trunk as 2 recent commits impact this logic.

 

I am going to run the tests in a loop to make sure they are not flaky, if they are will split the class files or change the bootstrap schema properties.

 

The last thing on my plate is to validate assassinate; forgot to do this.;;;","14/Nov/20 05:01;dcapwell;Finished assassinate and made sure to flesh out the different cases I could see.  org.apache.cassandra.gms.EndpointState#isEmpty does need to check for status in order for assassinate with this patch.

If you stop all nodes and bring up all but the host to remove, then assassinate the node to remove, it will still be ""empty"" based off version, but will have a status.  If we do not check the status when we check for empty, we would then treat this endpoint as normal and move on, which isn't correct as its in the LEFT state.

 

[~paulo] I added org.apache.cassandra.distributed.test.hostreplacement.AssassinatedEmptyNodeTest to flesh this case out if you want to take a closer look. EndpointState.isEmpty is only use in one spot now since we removed the filter, so feel its still best to check the state to make sure it is this specific case.;;;","16/Nov/20 20:56;dcapwell;[~brandon.williams] [~paulo] [~samt] the patch should be ready to review again.;;;","17/Nov/20 13:08;paulo;Thanks! I'll take another look this week.;;;","25/Nov/20 17:32;samt;Sorry I'm a bit late to the party here.

I think the general approach of using the shadow round to learn persisted peer info about a down host is sound, but I believe this implementation is a bit overcomplicated. I don't think we need to modify the behaviour of assassinate or make any changes regarding which {{STATUS}} we can replace.

I've pushed a simplified version here: [https://github.com/beobal/cassandra/tree/beobal/16213-trunk] (I kept all your tests, but removed the fix from the first commit).
 It doesn't currently pass your new dtests, but I think that's mostly to do with the expectations being specific to your implementation. I've checked that all the scenarios your tests cover work as expected using ccm clusters. Also, aside from the fix for replacing down nodes, all other behaviour is the same as current trunk wrt assasinate, eviction of fat clients etc.

I'll try and dig into the dtests this week and update them.;;;","29/Nov/20 22:52;paulo;I really like the alternative implementation and descriptive comments. I'd just extract the shadow round response logic to its own method (ie. {{replyShadowRound}} vs {{examineGossiper)}} as done in the previous implementation since they don't have a lot in common. Maybe add debug logs when gossip state is injected during replace or returned during shadow round response to make it easier to debug this if someone run into issues. Also, make sure to remove the new properties added to {{CassandraRelevantProperties}} in the previous implementation.;;;","30/Nov/20 19:00;dcapwell;Thanks sam for the review, ill try to look closer at your changes as the original logic is no longer fresh in my head, will try to replay later today, if not then tomorrow.;;;","30/Nov/20 21:20;dcapwell;I left comments on the commit https://github.com/beobal/cassandra/commit/b33d3aaf01326e49bacda2410c0fa6fc17677ae5

To summarize I think these are the following changes

1) size of the patch
2) avoid injecting the host_id + token on startup, but keep the ""empty"" node in gossip as is.  On shadow round, query table to repopulate this in order to reply
3) removed the allowed state logic

For #1 it looks like this is only done by removing the explicit ""empty"" flags and replaced access with logic which tries to detect it based off symptoms (generation and version == 0, absents from gossip, etc.).  I personally feel this logic is justifiable as it makes it easy to see how/where we handle the logic, by scattering the handling it gets harder to see how its handled.

For #2 I am not sure why, would love to hear from you on what you are thinking.  I do love the extra comments but it isn't clear the motivation between the two versions.

[~samt] thanks for the review.  If it helps we can chat on slack tomorrow (or when you are free) and can summaries here after.;;;","01/Dec/20 18:24;dcapwell;booo... rebased and now getting 
{code}
Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread ""node2_COMMIT-LOG-WRITER""
{code}


Looks like CASSANDRA-16212 isn't fixed yet so will need to disable metaspace cleaning when running the test (CI does this but not IntelliJ);;;","01/Dec/20 20:40;dcapwell;[~samt] pushed changes based off your version.  I made a few changes (we spoke in slack about them)
1) rather than modify the block which checks the downed host is ""old enough"", we inject the node while doing prepare; this keeps the logic centralized
2) keep the isEmpty logic and flag to enable/disable this feature.  If feature is disabled then this patch has no affect (outside of shadow round sending empty).

[~paulo] would be good to get your eyes as well!;;;","01/Dec/20 20:48;dcapwell;To keep history clear for review, I split each change into different commits

* removed blocking replace on state: https://github.com/apache/cassandra/pull/780/commits/ebc844428d928789835f2a839ebbe1230aed68fd
* load token/host_id lazy during shadow round rather than startup: https://github.com/apache/cassandra/pull/780/commits/748d437028843de50b0e271cdacec4dfd27af2df
* host replacement no longer injects a ""normal"" state transition, but updates token metadata and gossip state explicitly: https://github.com/apache/cassandra/pull/780/commits/650a3541da65a367cbce8a623e040c2f4776f23f;;;","03/Dec/20 19:07;dcapwell;rebased to trunk, which fixed some of the test failures.  ATM the build is clean (minus the streaming test, but that is known);;;","04/Dec/20 00:30;jmeredithco;Posted a review.

I'm chasing down a second related issue if multiple nodes are starting up with {{replace_address_first_boot}} at the same time and one of the replacement nodes is also marked as a seed for the others.  Seems to be the root cause of CASSANDRA-16159 so will handle on that ticket.;;;","04/Dec/20 17:40;jmeredithco;Thanks for addressing nits.  +1 from me.;;;","04/Dec/20 20:54;brandon.williams;Finally got this all straight in my head again (I think.) LGTM, +1.;;;","04/Dec/20 21:38;dcapwell;Thanks for the review [~brandon.williams] and [~jmeredithco]!;;;","07/Dec/20 19:04;samt;+1 from me too, thanks for incorporating my suggestions.

Nit typo: {{HostReplacementOfDowedClusterTest}};;;","07/Dec/20 19:27;dcapwell;Thanks [~samt]!

Will wait for [~paulo] to review.;;;","08/Dec/20 16:36;paulo;Just a heads up that I'll take a final look at this tomorrow.;;;","14/Dec/20 22:58;paulo;Sorry for the delay. Approved PR with one minor nit.

One last thing I wanted to discuss before we commit is if we need the {{cassandra.allow_empty_replace_address}} property defaulting to false, now that we have the collision check in place. I think it should be pretty safe to have this enabled by default, or even remove this knob altogether, since it's the correct behavior and I don't see where it can be useful to have it disabled.;;;","15/Dec/20 01:43;dcapwell;Thanks for the review [~paulo].

bq.  I think it should be pretty safe to have this enabled by default

For our environment, the plan is to default to true, so I am ok with this. Another option is to default this to false for now and after ""some time"" we change the default to true... the hard part is when ""some time"" is as this is super edge case-y (small number of times within a year).

Ill leave this open for now, give time for [~samt] to comment as well.

bq. or even remove this knob altogether

I am a fan of feature flags, so rather keep it to revert back if there is ever seen a reason to.
;;;","15/Dec/20 17:22;samt;+1 to keeping the flag and defaulting it to true.;;;","15/Dec/20 17:40;dcapwell;Thanks for the feedback, ill keep the flag and switch to true.;;;","15/Dec/20 20:13;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16213-trunk-699BF5AE-697A-4899-A74F-38E44BCB85C7]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16213-trunk-699BF5AE-697A-4899-A74F-38E44BCB85C7]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/269/]|
;;;","15/Dec/20 22:55;dcapwell;Thanks all for the review!;;;",,,,,,
Synchronize Keyspace instance store/clear,CASSANDRA-16210,13335428,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,14/Oct/20 14:22,20/Oct/20 07:31,13/Jul/23 08:39,20/Oct/20 07:31,3.11.9,,,,,Cluster/Schema,,,,0,,,,DTest failure: dtest-large.repair_tests.repair_test.TestRepairDataSystemTable.test_repair_table (vnodes) - one random failure was reported which pointed to a race condition to be spotted. ,,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Oct 20 07:31:21 UTC 2020,,,,,,,All,,,,,,"0|z0jp8g:",9223372036854775807,,,,mck,,,,Normal,,2.0 beta 1,,,https://github.com/apache/cassandra/commit/bca91ca84b9daf8b9e3d361975a535b90b4f77fa,,,,,,,,,,,,,,"15/Oct/20 14:21;e.dimitrova;The issue is that it was possible to open a new Keyspace instance in the middle of Schema.dropKeyspace(). To see the problem the drop has to progress to the following [state|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/config/Schema.java#L657]: 1) Keyspace instance doesn't exist - it has been already removed. 
 2) KeyspaceMetadata still exists
 Keyspace.open in this state creates a new Keyspace instance (with ColumnFamilyStore instances) and stores it in Schema.keyspaceInstances. This is an object leak.

[3.11 |https://github.com/ekaterinadimitrova2/cassandra/pull/59]

CI run: [Java8 | https://jenkins-cm4.apache.org/job/Cassandra-devbranch/104/#showFailuresLink] 

EDIT: Not applicable to 4.0
-[4.0 | https://github.com/ekaterinadimitrova2/cassandra/pull/62]-
-CI run: [Java 8 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/414/workflows/9d0905bd-6ca6-480a-862b-35d5842ed5ef] | [Java 11 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/414/workflows/9476a603-a494-4da3-bf69-9498d40ae29a]-;;;","19/Oct/20 14:23;mck;I think you were right originally about this patch not applying to 4.0. The call hierarchy to the private {{Schema.dropKeyspace(..)}}  method is only three only methods, all of which are {{synchronized}}.

In 3.11: at runtime it's only accessed by method in {{SchemaKeyspace.mergeSchema(..)}}  which is also {{synchronized}}. But the method itself is public and not {{synchronized}} so the tests can get into the race condition. Ideally i would think it's better to have synchronized at the test layer, but that's maybe asking a bit much for such a small fix, so I'm +1 on the 3.11 patch. ;;;","19/Oct/20 17:15;e.dimitrova;Agreed, as per my initial comment - 	schema race conditions solved for 4.0 with CASSANDRA-9425 
Thanks [~mck]!!;;;","20/Oct/20 07:31;mck;Committed as [bca91ca84b9daf8b9e3d361975a535b90b4f77fa|https://github.com/apache/cassandra/commit/bca91ca84b9daf8b9e3d361975a535b90b4f77fa];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fail truncation requests when they fail on replica,CASSANDRA-16208,13335087,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,12/Oct/20 21:59,03/Jan/21 17:03,13/Jul/23 08:39,14/Oct/20 14:57,4.0,4.0-beta3,,,,Legacy/Local Write-Read Paths,,,,0,,,,,,e.dimitrova,jeromatron,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 14 14:57:48 UTC 2020,,,,,,,All,,,,,,"0|z0jn4w:",9223372036854775807,,,,brandon.williams,,,,Low,,NA,,,https://github.com/apache/cassandra/commit/609876275738589fdfb9a3e20cb2f594aa404037,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16208?filter=-1#,,,,,"13/Oct/20 20:17;e.dimitrova;[Trunk | https://github.com/ekaterinadimitrova2/cassandra/pull/58/commits] patch. Dtest added [here | https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/5].

CI ran successfully (no new failures):

[Java 8 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/398/workflows/1464d688-6fcb-4b5b-b336-4fd9d2d3c810] | [Java 11 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/398/workflows/015bcb18-e79d-4c16-909a-bb710ac47590]

[~brandon.williams] do you mind to review?;;;","14/Oct/20 14:57;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when calling broadcast address on unintialized node,CASSANDRA-16207,13335018,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,12/Oct/20 13:48,03/Jan/21 17:02,13/Jul/23 08:39,14/Oct/20 08:41,3.0.23,3.11.9,4.0,4.0-beta3,,Test/dtest/java,,,,0,,,,"When trying to run upgrades, sometimes we’re calling broadcasts addrerss on an uninitialised new node:

{code}
java.lang.IllegalStateException: Can't use shut down instances, delegate is null
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.delegate(AbstractCluster.java:163)
	at org.apache.cassandra.distributed.impl.DelegatingInvokableInstance.broadcastAddress(DelegatingInvokableInstance.java:53) 
	at org.apache.cassandra.distributed.impl.Instance$2.allowIncomingMessage(Instance.java:278) 
	at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:1031) ~[dtest-3.0.19.jar:?]
	at org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:213) 
	at org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:182) 
	at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:93) 
{code}",,dcapwell,ifesdjeen,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16157,CASSANDRA-15935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 14 15:28:44 UTC 2020,,,,,,,All,,,,,,"0|z0jmpk:",9223372036854775807,,,,dcapwell,,,,Critical,,3.0.21,,,https://github.com/apache/cassandra/commit/6eeca9d6cc482417fd4564302baa349ed76fd7ec,,,,,,,,,Test included,,,,,"12/Oct/20 14:07;ifesdjeen;|[patch|https://github.com/apache/cassandra/pull/773]|[ci|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=16207-npe-broadcast-address]|;;;","13/Oct/20 01:36;dcapwell;[~ifesdjeen] you linked https://github.com/apache/cassandra/pull/773 which adds a test but dosn't change anything in dtest or src/java based off the above comment; is there something missing?;;;","13/Oct/20 06:39;ifesdjeen;[~dcapwell] it looks like it got merged away while I was rebasing. Turned out that [~marcuse] has made the same change in [this patch|https://github.com/apache/cassandra/commit/4d173e0a3f97b68b2ce0fb72befe2912efd31102#diff-321b52220c5bd0aaadf275a845143eb208c889c2696ba0d48a5fc880551131d8L266]. I'd still say it's useful to merge the test in.;;;","13/Oct/20 16:51;dcapwell;+1, make sure to run the test to make sure its no where close to the 6m timeout in CI, upgrade test currently has a lot of tests in there and upgrades are slow; if possible, a different class file would be ideal (would also be faster in CI).;;;","13/Oct/20 16:51;dcapwell;+1 to the test.;;;","14/Oct/20 08:41;ifesdjeen;Committed to 3.0 with [6eeca9d6cc482417fd4564302baa349ed76fd7ec |https://github.com/apache/cassandra/commit/6eeca9d6cc482417fd4564302baa349ed76fd7ec] and merged to [3.11|https://github.com/apache/cassandra/commit/d3f7bdfe017cd236779cbac0b788ab8a3c619278] and [trunk|https://github.com/apache/cassandra/commit/83033075d334997298dc6937dc64067de76a3077].;;;","14/Oct/20 14:52;ifesdjeen;This patch caused several test failures. Follow-up/fix: 
|[patch|https://github.com/apache/cassandra/pull/777]|[CI|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=CASSANDRA-16207-followup]|;;;","14/Oct/20 14:57;marcuse;+1;;;","14/Oct/20 15:28;ifesdjeen;Thank you [~marcuse]! Committed a follow-up to [3a05ed3ce15ab4dcd5f13b9b56c18c0198c0e203|https://github.com/apache/cassandra/commit/3a05ed3ce15ab4dcd5f13b9b56c18c0198c0e203];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eliminate gen-doc template warning and unused (problematic) import,CASSANDRA-16206,13334797,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,polo-language,polo-language,polo-language,10/Oct/20 11:54,16/Mar/22 14:22,13/Jul/23 08:39,07/Apr/21 16:04,3.11.11,4.0,4.0-rc1,,,Build,Documentation/Website,,,0,,,,"1)

When running 'sphinx-build -b html -d build/doctrees source build/html'
on Linux we get the following warning:
{noformat}
     [exec] generating indices... genindex
     [exec] WARNING: Now base template defindex.html is deprecated.
     [exec] writing additional pages... index search{noformat}
On FreeBSD this causes gen-doc to fail:
{noformat}
     [exec] writing additional pages...  indexfailed
     [exec]
     [exec] Theme error:
     [exec] An error happened in rendering the page index.
     [exec] Reason: UndefinedError(""'warn' is undefined"")
     [exec] *** Error code 2{noformat}
2)

The patch to doc/source/_util/cql.py removes the unused iteritems import, preventing errors on versions of pygments 2.6.0+:
{noformat}
     [exec] Running Sphinx v3.2.1
     [exec]
     [exec] Exception occurred:
     [exec]   File ""/path/to/apache-cassandra-4.0-beta2-src/doc/source/_util/cql.py"", line 29, in <module>
     [exec]     from pygments.util import iteritems
     [exec] ImportError: cannot import name 'iteritems' from 'pygments.util' (/usr/local/lib/python3.7/site-packages/pygments/util.py){noformat}
The patch has been tested in the following environments:
 * FreeBSD 12.1-RELEASE-p7
 Python 3.7.9
 Sphinx 3.2.1
 pygments 2.7.1
 * Ubuntu 18.04.1
 Python 3.7.5
 Sphinx 1.6.7
 pygments 2.2.0
 * Ubuntu 18.04.1
 Python 2.7.17
 Sphinx 1.6.7
 pygments 2.5.2",,e.dimitrova,mck,polo-language,,,,,,,,,"polo-language opened a new pull request #771:
URL: https://github.com/apache/cassandra/pull/771


   When running 'sphinx-build -b html -d build/doctrees   source build/html'
   on Linux we get the following warning:
        [exec] generating indices... genindex
        [exec] WARNING: Now base template defindex.html is deprecated.
        [exec] writing additional pages... index search
   
   on FreeBSD this causes gen-doc to fail:
        [exec] writing additional pages...  indexfailed
        [exec]
        [exec] Theme error:
        [exec] An error happened in rendering the page index.
        [exec] Reason: UndefinedError(""'warn' is undefined"")
        [exec] *** Error code 2
   
   The patch to doc/source/_util/cql.py removes the unused iteritems import, preventing errors on versions of pygments 2.6.0+:
        [exec] Running Sphinx v3.2.1
        [exec]
        [exec] Exception occurred:
        [exec]   File ""/wrkdirs/usr/ports/databases/cassandra4/work/apache-cassandra-4.0-beta2-src/doc/source/_util/cql.py"", line 29, in <module>
        [exec]     from pygments.util import iteritems
        [exec] ImportError: cannot import name 'iteritems' from 'pygments.util' (/usr/local/lib/python3.7/site-packages/pygments/util.py)
   
   The patch has been tested in the following environments:
   FreeBSD 12.1-RELEASE-p7
       Python 3.7.9
       Sphinx 3.2.1
       pygments 2.7.1
   
   Ubuntu 18.04.1
       Python 3.7.5
       Sphinx 1.6.7
       pygments 2.2.0
   
   Ubuntu 18.04.1
       Python 2.7.17
       Sphinx 1.6.7
       pygments 2.5.2
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Oct/20 11:55;githubbot;600","smiklosovic closed pull request #771:
URL: https://github.com/apache/cassandra/pull/771


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:22;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,polo-language,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Apr 07 16:04:32 UTC 2021,,,,,,,All,,,,,,"0|z0jlcg:",9223372036854775807,,,,e.dimitrova,mck,,,Low,,3.8,,,https://github.com/apache/cassandra/commit/6edd7db751bb571887c84cb2f92e8226e8dd7017,,,,,,,,,https://github.com/apache/cassandra/pull/771,,,,,"06/Apr/21 18:45;e.dimitrova;Hey [~polo-language],

I ran into the same issue today and I saw you already raised the flag and submitted the patch some time ago but it was still in TRIAGE so I moved the ticket for you, hope you don't mind.

Thanks for reporting the issue and submitting a patch, appreciate it!

 ;;;","06/Apr/21 19:02;e.dimitrova;I tested the patch with the latest trunk and it seems ok to me.

[~mck], do you mind to do a second review when/if you have a bit of time? ;;;","07/Apr/21 15:50;mck;+1;;;","07/Apr/21 16:04;mck;Committed as [6edd7db751bb571887c84cb2f92e8226e8dd7017|https://github.com/apache/cassandra/commit/6edd7db751bb571887c84cb2f92e8226e8dd7017].;;;","07/Apr/21 16:04;mck;Thanks [~polo-language]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reduce amount of allocations during batch statement execution,CASSANDRA-16201,13334428,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,tsteinmaurer,tsteinmaurer,08/Oct/20 13:34,22/Jan/21 11:21,13/Jul/23 08:39,22/Jan/21 10:03,3.11.10,4.0,4.0-rc1,,,Local/Other,,,,1,,,,"In a Cas 2.1 / 3.0 / 3.11 / 4.0b2 comparison test with the same load profile, we see 4.0b2 going OOM from time to time. According to a heap dump, we have multiple NTR threads in a 3-digit MB range.

This is likely related to object array pre-allocations at the size of {{BatchUpdatesCollector.updatedRows}} per {{BTree}} although there is always only 1 {{BTreeRow}} in the {{BTree}}.
 !screenshot-1.png|width=100%! 

So it seems we have many, many 20K elemnts pre-allocated object arrays resulting in a shallow heap of 80K each, although there is only one element in the array.

This sort of pre-allocation is causing a lot of memory pressure.
",,blerer,dcapwell,jasonstack,kkierer,marcuse,mck,tsteinmaurer,yakir.g,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13900,,,,,,,,,,CASSANDRA-15430,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15430,,,,,,,,,,,,,"03/Nov/20 15:15;mck;16201_jfr_3023_alloc.png;https://issues.apache.org/jira/secure/attachment/13014648/16201_jfr_3023_alloc.png","03/Nov/20 15:19;mck;16201_jfr_3023_obj.png;https://issues.apache.org/jira/secure/attachment/13014649/16201_jfr_3023_obj.png","03/Nov/20 14:52;mck;16201_jfr_3118_alloc.png;https://issues.apache.org/jira/secure/attachment/13014645/16201_jfr_3118_alloc.png","03/Nov/20 14:54;mck;16201_jfr_3118_obj.png;https://issues.apache.org/jira/secure/attachment/13014646/16201_jfr_3118_obj.png","03/Nov/20 14:47;mck;16201_jfr_40b3_alloc.png;https://issues.apache.org/jira/secure/attachment/13014643/16201_jfr_40b3_alloc.png","03/Nov/20 14:48;mck;16201_jfr_40b3_obj.png;https://issues.apache.org/jira/secure/attachment/13014644/16201_jfr_40b3_obj.png","08/Oct/20 13:45;tsteinmaurer;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13013242/screenshot-1.png","08/Oct/20 14:13;tsteinmaurer;screenshot-2.png;https://issues.apache.org/jira/secure/attachment/13013246/screenshot-2.png","21/Oct/20 13:50;tsteinmaurer;screenshot-3.png;https://issues.apache.org/jira/secure/attachment/13013933/screenshot-3.png","04/Nov/20 09:48;tsteinmaurer;screenshot-4.png;https://issues.apache.org/jira/secure/attachment/13014685/screenshot-4.png",,,,,10.0,marcuse,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jan 22 10:03:31 UTC 2021,,,,,,,All,,,,,,"0|z0jj2w:",9223372036854775807,,,,blerer,mck,yifanc,,Normal,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/8333d0b0890f6299fac1fd219f58aee0c62cbf9c,,,,,,,,,cci runs,,,,,"08/Oct/20 14:00;marcuse;[~tsteinmaurer] you sure you don't see this in 3.11? looks like we ignore {{initialCapacity}} in 3.0 here: https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/utils/btree/BTree.java#L752 but not in 3.11: https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/utils/btree/BTree.java#L777;;;","08/Oct/20 14:13;tsteinmaurer;[~marcuse], yes I think so. :-) TRUNK, locally checked out, calling hierarchy from {{BatchUpdatesCollector.getPartitionUpdateBuilder}} up to {{PartitionUpdate.Builder.rowBuilder}}

 !screenshot-2.png|width=100%! 

Thanks again.;;;","08/Oct/20 14:23;dcapwell;Can you describe the workload used?  Work has been done to lower the heap usage so possible trunk is already fixed (but not in a beta release); would be good to try to replicate the reported issue ;;;","08/Oct/20 14:30;tsteinmaurer;[~dcapwell], code screen above is from local TRUNK, thus not strictly Beta2. [~marcuse] already contacted me via Slack. Thanks for your attention;;;","08/Oct/20 14:58;marcuse;In {{BatchStatement}} we have {{updatedRows()}} which is simply the number of statements in the batch - then we pre-size each partition update with that initial capacity. If the batch touches many different partitions we still use {{initialCapacity = statements.size()}} for each partition update which is what causes this. I'll work on a patch. 

Affects 3.11 and 4.0 but not earlier, before that we [ignored|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/utils/btree/BTree.java#L752] {{initialCapacity}} ;;;","12/Oct/20 21:13;mck;[~marcuse], looking at CASSANDRA-15430 it looks like {{initialCapacity}} (CASSANDRA-13929) needs to be back-ported to 3.0, and this ticket also applied to 3.0. wdyt?;;;","21/Oct/20 11:07;marcuse;4.0: [patch|https://github.com/krummas/cassandra/commits/marcuse/16201-4.0-new], [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F16201-4.0-new]
3.11: [patch|https://github.com/krummas/cassandra/commits/marcuse/16201-3.11-new], [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F16201-3.11-new]
3.0: [patch|https://github.com/krummas/cassandra/commits/marcuse/16201-3.0-new], [cci|https://app.circleci.com/pipelines/github/krummas/cassandra?branch=marcuse%2F16201-3.0-new]

this focuses only on getMutations as that is where the OOM happened - there is much more to do, but I think these fixes are fairly safe and make performance slightly more acceptable
;;;","21/Oct/20 13:53;tsteinmaurer;[~marcuse], first impression from our comparison infrastructure regarding the 3.0, 3.11 and 4.0 patches.

When having a look on 2 high-level metrics:
* JVM suspension, marked as ""1"" in the dashboard below
* Cassandra dropped messages, marked as ""2"" in the dashboard below

 !screenshot-3.png|width=100%! 

* Cassandra 3.0: No positive impact on suspension
* Cassandra 3.11: Huge positive impact on suspension
* Cassandra 4.0: Huge positive impact on suspension + no dropped messages with the patch

I will keep that running over the night and provide another set of JFR files for 3.0, 3.11 and 4.0 with the patch.

Thanks for your efforts!
;;;","29/Oct/20 01:28;yifanc;Just went over the 40 patch. It looks good to me overall. Listing the nits/feedbacks below.
 * {{BatchStatement#updatedRows}} is no longer used. Please remove it
 * Maybe change the single table update detection from ""{{!stmt.metadata.equals(metadata)""}} to ""{{metadata != null && !stmt.metadata.equals(metadata)""}} in order to avoid the unnecessary comparison, although the cost of comparing with null should be negligible.
 * Please update the comments for {{perPartitionKeyCounts}} in both {{BatchUpdatesCollector}} and {{SingleTableUpdatesCollector}}, since the count is no longer an estimation.
 * Maybe remove the comment in {{ModificationStatement#requiresRead}} since the original implementation is removed.
 * The new implementation of {{BatchUpdatesCollector#getMutationBuilder}} is essentially the same as the previous {{computeIfAbsent}} except calling dk.getKey() twice. In the case of NativeDecoratedKey, the new implementation is slightly more expensive.
 * Similarly, the new implementation of {{BatchUpdatesCollector#keyspaceMap}} is equivalent to the previous {{computeIfAbsent}} except the supplied map being different. I think the {{computeIfAbsent}} approach looks more elegant. But it is just a style thing.;;;","30/Oct/20 11:42;tsteinmaurer;{quote}
I will keep that running over the night and provide another set of JFR files for 3.0, 3.11 and 4.0 with the patch.
{quote}

[~mck], in my provided OneDrive share provided on Oct 12, 2020 to you, there is now an additional sub-directory called {{_perffixes_jfr_20201027}}, which contains a new set of JFR files for all versions (including 2.1), with the patch applied to 3.0, 3.11 and 4.0.

[~marcuse], let me know if/how I could share the new JFR files with you as well.;;;","30/Oct/20 11:52;mck;Thank you [~tsteinmaurer]. I will take a look straight away.;;;","03/Nov/20 16:26;mck;Re-doing the screenshots as done in CASSANDRA-15430 for comparison.

h4. 2.1.18
Skipping these results as its based on the same C* code as in 15430, and I've confirmed the allocation counts and object sizes proportionally match. 


h4. 3.0.23
Allocations

* BatchMessage.execute - 1926411 
 ** BatchStatement.getMutations => 1008170 == 52% ( previously 60%)
 ** BatchStatement.executeWithoutConditions => 692322 == 36% ( previously 30%)
 !16201_jfr_3023_alloc.png|width=1000! 
Sizes by object under {{BatchStatement.getMutations}}
 !16201_jfr_3023_obj.png|width=600! 
With the invocation count only a 1%  decrease, the {{Object[]}} size has gone from 29.8GB down to 18.7GB, or 37% reduction. 

h4. 3.11.9
Allocations

* BatchMessage.execute - 1210873
 ** BatchStatement.getMutations => 396645 == 33% ( previously 62%)
 ** BatchStatement.executeWithoutConditions => 664650 == 55% ( previously 30%)
 !16201_jfr_3118_alloc.png|width=1000! 
Sizes by object under {{BatchStatement.getMutations}}
 !16201_jfr_3118_obj.png|width=600! 
The {{Object[]}} size has gone from 116GB down to 8.14GB. With the invocation count 40% that from CASSANDRA-15430, proportionally this is a 82% reduction.

h4. 4.0-beta3
Allocations

* BatchMessage.execute - 969189
 ** BatchStatement.getMutations => 410739  ==  42% ( previously 70%)
 ** BatchStatement.executeWithoutConditions => 425337 == 44% ( previously 23%)
 !16201_jfr_40b3_alloc.png|width=1000! 
Sizes by object under {{BatchStatement.getMutations}}
 !16201_jfr_40b3_obj.png|width=600! 
The {{Object[]}} size has gone from 129GB down to 8.52GB. With the invocation count 30% that from CASSANDRA-15430, proportionally this is a 78% reduction.

;;;","03/Nov/20 16:42;mck;Similar to the metrics shown above from [~tsteinmaurer], 3.11 and 4.0 patches show the most improvement. From my understanding of 15430 and this patch, this makes sense.

[~marcuse], can you check these^ numbers and see if they align with your expectations.;;;","04/Nov/20 09:55;tsteinmaurer;[~mck], thanks a lot for the extensive follow-up. In our tests, from where the actual JFR files come from, we now see, that Cassandra 3.11 and Cassandra 4.0 is basically on the same level than 3.0 again, or even slightly better than 3.0, but 2.1 unbeaten :-)

Do you see any further improvements in regard to 2.1 vs. 3.0/3.11/4.0? Following chart is an AVG for last 24hrs on a bunch of metrics, for all versions with the patch applied for 3.0/3.11/4.0, processing the same ingest. The only main difference here is, that 2.1 is using STCS for our timeseries tables, whereas 3.0+ is using TWCS.
 !screenshot-4.png|width=100%! 

So, in short:
|| ||Cassandra 2.1||Cassandra 3.0 Patched (Rel. diff to 2.1)||Cassandra 3.11 Patched (Rel. diff to 2.1)||Cassandra 4.0 Patched (Rel. diff to 2.1)||
|AVG CPU|52,86%|61,43% (+16,2%)|61,04% (+15,5%)|75,06% (+42%)|
|AVG Suspension|3,76%|6,13% (+63%)|5,74% (+52,7%)|5,60% (+48,9%)|

But for *Cassandra 3.11* and *Cassandra 4.0*, this was a huge step forward! Thanks a lot!;;;","04/Nov/20 10:01;marcuse;The numbers make sense, we should file a followup ticket for more improvement but given the obvious bug fix for the multi-partition batch statement case, I think we should get these patches reviewed and committed;;;","13/Nov/20 13:18;mck;Out of the ticket scope… why are the microbench classes all in the {{org.apache.cassandra.test.microbench}} ? They are already separate under {{src/testmicrobench/}}, and by re-packaging them like this it means accessed methods: eg {{bs.getMutations(..)}} ; have to be made public instead of package-protected. It would be nice to keep methods package-protected where possible.

AFAIK we also don't CI run the microbench classes anywhere, so there's no guarantee they remain runnable over time. I could add them to the ci-cassandra pipeline, though ideally a dedicated bare-metal server would be needed to make [use|https://plugins.jenkins.io/jmh-report/] of the runtime [reports|https://www.jenkins.io/blog/2019/06/21/performance-testing-jenkins/].

+1 on all branch patches (including [~yifanc] review comments above).;;;","26/Nov/20 06:42;tsteinmaurer;Do we have an ETA for the patch being included/merged?;;;","26/Nov/20 07:30;marcuse;I'll try to get back to this next week;;;","22/Dec/20 15:50;marcuse;rebased the branches and fixed Yifans comments (not all, but the non-style ones)

Also pushed another commit to the branches improving this a bit more - in the 3.0 case it is a slightly smaller backport of CASSANDRA-12153 to avoid allocating the LinkedHashSet every time we iterate the restrictions. [~blerer] - any chance you have time to review this?;;;","22/Dec/20 17:30;blerer;[~marcuse] I guessed that you just wanted me to review the last commit in the 3.0 branch. 
I let some minor comments on the commit. Otherwise, I am +1 with the change.  ;;;","22/Dec/20 20:48;yifanc;+1 

I am able to run the benchmark and also observe the improvement with the change, especially when using uniquePartitions. However, I have to change the memory allocation to 1GB ({{@Fork(value = 1,jvmArgsAppend = ""-Xmx1g"")}}) in order to avoid OOME when using uniquePartitions and w/o the change. ;;;","14/Jan/21 15:53;tsteinmaurer;Any ideas if this will make it into 3.0.24?;;;","14/Jan/21 18:37;marcuse;I haven't seen any plans to cut 3.0.24 soon, so yes, most likely;;;","15/Jan/21 03:04;yifanc;+1 on all branches. 

Rebased the branch to the head of each branch and kicked off CI

trunk: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=r%2Fkrummas_marcuse%2F16201-4.0-new]

3.11: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=r%2Fkrummas_marcuse%2F16201-3.11-new]

3.0: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=r%2Fkrummas_marcuse%2F16201-3.0-new]

 

EDIT: update the CI result

The test 'testIndexMemtableSwitching - org.apache.cassandra.index.sasi.SASIIndexTest' has been failed. It is tracked already in CASSANDRA-15995

There are bunch of dtest failures. Scanned the failures and they do not look relevant to the change. [https://app.circleci.com/pipelines/github/yifan-c/cassandra/176/workflows/a6c6eaaf-b627-40e6-8af8-851f7a0174c6/jobs/923]

There are failures from 2 jvm dtest, 'org.apache.cassandra.distributed.test.SimpleReadWriteTest' and 'org.apache.cassandra.distributed.test.CASTest', all due to 'java.lang.OutOfMemoryError: Java heap space'. I am able to run the test successfully from my local. So the failures do not look relevant. Some flaky tests in the 'CASTest' are tracked in CASSANDRA-16355 and CASSANDRA-16317.;;;","15/Jan/21 17:35;blerer;[~marcuse] I did not have the time to go through all the branches yet.
For the 4.0 branch I got a few comments:
* Would it not make sense to use an {{HashMultiset<ByteBuffer>}} rathen than a {{Map<ByteBuffer, Integer>}}? according to the [guava documentation|https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset] they seems to have been developped with that scenario in mind.
* In {{BatchStatement.getMutations}}:
    {code}
            partitionCounts.computeIfAbsent(stmt.metadata.id, k -> new HashMap<>());
            Map<ByteBuffer, Integer> perKeyCounts = partitionCounts.get(stmt.metadata.id);
    {code}
   Should be:
    {code}
            Map<ByteBuffer, Integer> perKeyCounts = partitionCounts.computeIfAbsent(stmt.metadata.id, k -> new HashMap<>());
    {code}
    Will it make sense to extract {{k -> new HashMap<>()}} in a variable initialized before the loop ?
*  Regarding the  single table update detection, I wonder if it will not be more efficient to do the comparison on the {{TableId}} rather than the metadata.;;;","18/Jan/21 16:15;blerer;I went to the other branches today. 
I just have the following small nit: Rather than having {{(int) (createdAt / 1000)}} at several places in the code, should we not create a {{toSeconds}} method in {{FBUtilities}} and use it for the conversions?

+1 for the patches
  ;;;","22/Jan/21 10:03;marcuse;And committed, thanks everyone

Decided to not merge the 3.0 patch as the improvement there was quite small - if anyone has a benchmark showing big 3.0 improvements I'd be happy to commit it as well.;;;",,,,,,,,,,,,,,,,,,,,
cassandra.logdir undefined when CASSANDRA_LOG_DIR,CASSANDRA-16199,13334339,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bhouser,cscetbon,cscetbon,08/Oct/20 03:11,06/May/21 10:22,13/Jul/23 08:39,06/May/21 10:22,3.11.11,4.0,4.0-rc2,,,Local/Config,,,,0,,,,"When ${cassandra.logdir} is used in logback.xml nodetool doesn’t use the env variable CASSANDRA_LOG_DIR or the default value. and complains
{noformat}
03:07:27,387 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[DEBUGLOG] - Failed to create parent directories for [/cassandra.logdir_IS_UNDEFINED/debug.log]03:07:27,387 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[DEBUGLOG] - Failed to create parent directories for [/cassandra.logdir_IS_UNDEFINED/debug.log]03:07:27,388 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[DEBUGLOG] - openFile(cassandra.logdir_IS_UNDEFINED/debug.log,true) call failed. java.io.FileNotFoundException: cassandra.logdir_IS_UNDEFINED/debug.log (No such file or directory) at java.io.FileNotFoundException: cassandra.logdir_IS_UNDEFINED/debug.log (No such file or directory)
...{noformat}
It’s different for cassandra for instance [https://github.com/apache/cassandra/blob/324267b3c0676ad31bd4f2fac0e2e673a9257a37/bin/cassandra#L186]. I feel like it should be added to [https://github.com/apache/cassandra/blob/06209037ea56b5a2a49615a99f1542d6ea1b2947/bin/nodetool], or that it should call cassandra-env.sh

 

Seen on 3.11 and 4.0-beta1",,bhouser,blerer,cscetbon,e.dimitrova,jeromatron,polo-language,,,,,,"bhouse99 opened a new pull request #989:
URL: https://github.com/apache/cassandra/pull/989


   Maps $CASSANDRA_LOG_DIR  (set during call to cassandra_env.sh call) to cassandra.logdir java property when executing nodetool.
   
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Apr/21 21:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bhouser,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu May 06 10:22:01 UTC 2021,,,,,,,All,,,,,,"0|z0jij4:",9223372036854775807,,,,blerer,,,,Low,,3.11.0,,,https://github.com/apache/cassandra/commit/4169c43ad71b219e5ca367ecdad94f42fa7330ce,,,,,,,,,"Tested manually, as this was a minor change to the shell file, and there are no tests I didn't add an automated one.

Does not require documentation.

https://github.com/apache/cassandra/pull/989

 ",,,,,"30/Apr/21 21:25;bhouser;I've looked into this, and I've added the cassandra.logdir property to the nodetool as it makes it consistent, and that alone has value.



A few points however....

The nodetool already calls cassandra_env.sh which handles the environment variable $CASSANDRA_LOG_DIR, including setting the environment variable if its not set, this is true in 4.0 and 3.11.
see [https://github.com/apache/cassandra/blob/cassandra-3.11/bin/nodetool#L59]

The nodetool uses its a unique log config called logback-tools.xml (and not logback.xml) which doesn't seem to mention this property...
[https://github.com/apache/cassandra/blob/cassandra-3.11/bin/nodetool#L111]



 ;;;","30/Apr/21 21:26;bhouser;PR : https://github.com/apache/cassandra/pull/989

 ;;;","06/May/21 10:20;blerer;The patch looks good to me. Thanks a lot [~bhouser].;;;","06/May/21 10:22;blerer;Committed into 3.11 at 4169c43ad71b219e5ca367ecdad94f42fa7330ce and merged into cassandra-4.0 and trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test test_disk_balance_after_boundary_change_lcs - disk_balance_test.TestDiskBalance,CASSANDRA-16196,13334081,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,06/Oct/20 22:16,26/Oct/20 04:23,13/Jul/23 08:39,26/Oct/20 04:23,4.0,,,,,Test/dtest/python,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/622/workflows/adcd463c-156a-43c7-a9bc-7f3e4938dbe8/jobs/3514

{code}
        error_message = '' if 'error_message' not in kwargs else kwargs['error_message']
        assert vmin > vmax * (1.0 - error) or vmin == vmax, \
>           ""values not within {:.2f}% of the max: {} ({})"".format(error * 100, args, error_message)
E       AssertionError: values not within 10.00% of the max: (8022760, 9192165, 4575645, 9235566, 9091014) (node2)

tools/assertions.py:206: AssertionError
{code}

Marking as distinct issue after chat in CASSANDRA-14030",,aholmber,bereng,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Oct/20 17:01;aholmber;node2-debug-end.log;https://issues.apache.org/jira/secure/attachment/13013516/node2-debug-end.log",,,,,,,,,,,,,,1.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 26 04:21:34 UTC 2020,,,,,,,All,,,,,,"0|z0jgxs:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.0,,,https://github.com/apache/cassandra-dtest/commit/9500cb982b579dba95e0765aa1c13b436777c3be,,,,,,,,,"ran CI
No doc update",,,,,"13/Oct/20 16:57;aholmber;I let this spin for quite a while and it never reproduced, but I think I see what's happening after resorting to static analysis. Here is what I think is happening.

The test [waits|https://github.com/apache/cassandra-dtest/blob/1c8e5bcd5040af279205cd69bb5276ed854540e6/disk_balance_test.py#L335] for {{compactionstats}} pending tasks to be zero after commanding a compaction. However because SSTable cleanup is [scheduled in the background asynchronously|https://github.com/apache/cassandra/blob/2ae1ec5dd2d98178f3ab4b3ed64a87147e713560/src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java#L2036-L2064], the pending tasks can go to zero while the deletes are still happening. If we get to the disk balance assertion while those are still running, we may find only one disk cleaned up so far.

There is evidence of this in the log file of David's CI run.

{code}
INFO  [CompactionExecutor:9] 2020-10-06 20:26:27,227 CompactionTask.java:251 - Compacted (35c63db2-0812-11eb-85ce-07703ff33f2a) 5 sstables to [/tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-137-big,/tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-142-big,/tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-147-big,/tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-152-big,/tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-156-big,] to level=0.  4.364MiB to 4.364MiB (~100% of original) in 271ms.  Read Throughput = 16.100MiB/s, Write Throughput = 16.100MiB/s, Row Throughput = ~40,010/s.  20,005 total partitions merged to 20,005.  Partition merge counts were {1:20005, }
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:27,243 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data3/system_schema/functions-96489b7980be3e14a70166a0b9159450/na-4-big
INFO  [CompactionExecutor:7] 2020-10-06 20:26:27,271 CompactionTask.java:251 - Compacted (35c63db0-0812-11eb-85ce-07703ff33f2a) 5 sstables to [/tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-138-big,/tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-145-big,/tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-151-big,/tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-157-big,/tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-161-big,] to level=0.  4.326MiB to 4.326MiB (~100% of original) in 314ms.  Read Throughput = 13.766MiB/s, Write Throughput = 13.766MiB/s, Row Throughput = ~39,660/s.  19,830 total partitions merged to 19,830.  Partition merge counts were {1:19830, }
INFO  [CompactionExecutor:10] 2020-10-06 20:26:27,286 CompactionTask.java:251 - Compacted (35c63db3-0812-11eb-85ce-07703ff33f2a) 5 sstables to [/tmp/dtest-qrvo6g7p/test/node2/data3/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-141-big,/tmp/dtest-qrvo6g7p/test/node2/data3/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-144-big,/tmp/dtest-qrvo6g7p/test/node2/data3/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-149-big,/tmp/dtest-qrvo6g7p/test/node2/data3/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-153-big,/tmp/dtest-qrvo6g7p/test/node2/data3/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-158-big,] to level=0.  4.404MiB to 4.404MiB (~100% of original) in 329ms.  Read Throughput = 13.368MiB/s, Write Throughput = 13.368MiB/s, Row Throughput = ~40,374/s.  20,187 total partitions merged to 20,187.  Partition merge counts were {1:20187, }
INFO  [CompactionExecutor:8] 2020-10-06 20:26:27,287 CompactionTask.java:251 - Compacted (35c63db4-0812-11eb-85ce-07703ff33f2a) 5 sstables to [/tmp/dtest-qrvo6g7p/test/node2/data4/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-139-big,/tmp/dtest-qrvo6g7p/test/node2/data4/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-146-big,/tmp/dtest-qrvo6g7p/test/node2/data4/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-150-big,/tmp/dtest-qrvo6g7p/test/node2/data4/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-154-big,/tmp/dtest-qrvo6g7p/test/node2/data4/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-159-big,] to level=0.  4.335MiB to 4.335MiB (~100% of original) in 330ms.  Read Throughput = 13.117MiB/s, Write Throughput = 13.117MiB/s, Row Throughput = ~39,746/s.  19,873 total partitions merged to 19,873.  Partition merge counts were {1:19873, }
INFO  [CompactionExecutor:6] 2020-10-06 20:26:27,287 CompactionTask.java:251 - Compacted (35c63db1-0812-11eb-85ce-07703ff33f2a) 6 sstables to [/tmp/dtest-qrvo6g7p/test/node2/data1/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-140-big,/tmp/dtest-qrvo6g7p/test/node2/data1/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-143-big,/tmp/dtest-qrvo6g7p/test/node2/data1/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-148-big,/tmp/dtest-qrvo6g7p/test/node2/data1/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-155-big,/tmp/dtest-qrvo6g7p/test/node2/data1/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-160-big,] to level=0.  4.381MiB to 4.386MiB (~100% of original) in 331ms.  Read Throughput = 13.227MiB/s, Write Throughput = 13.242MiB/s, Row Throughput = ~40,210/s.  20,105 total partitions merged to 20,105.  Partition merge counts were {1:20105, }
{code}
The compacted files were all ~4.4MiB so we would expect the disks to be balanced. As the compactions finish, we see table deletions continue, but the server only gets through those on {{disk2}} for the keyspace in question, before the test fails the assertion and the server is killed. 

{code}
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,182 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data3/system/available_ranges_v2-4224a0882ac93d0c889dfbb5f0facda0/na-4-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,185 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data2/system/available_ranges_v2-4224a0882ac93d0c889dfbb5f0facda0/na-3-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,213 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-122-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,224 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-123-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,260 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-120-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,287 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-121-big
DEBUG [GossipStage:1] 2020-10-06 20:26:28,316 Gossiper.java:471 - Convicting /127.0.0.1:7000 with status LEFT - alive true
INFO  [GossipStage:1] 2020-10-06 20:26:28,316 Gossiper.java:1211 - InetAddress /127.0.0.1:7000 is now DOWN
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,320 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data2/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-124-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,379 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-116-big
INFO  [NonPeriodicTasks:1] 2020-10-06 20:26:28,478 SSTable.java:111 - Deleting sstable: /tmp/dtest-qrvo6g7p/test/node2/data0/keyspace1/standard1-8e445040081111ebac99afe4a7391731/na-117-big
<end of log>
{code}

This can be corroborated in the assertion message, which shows 4575645 as the measured for the second volume, which is 4.364MiB, the same size as the file output from the compaction message in the previous snippet.

Since there is no final deterministic message that can tell us when tidying is done, the test change I'm proposing takes a couple size samples to make sure we're not still cleaning up.

[patch|https://github.com/apache/cassandra-dtest/compare/master...aholmberg:CASSANDRA-16196?expand=1]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16196];;;","13/Oct/20 18:24;brandon.williams;Committed this here: https://github.com/apache/cassandra-dtest/commit/9500cb982b579dba95e0765aa1c13b436777c3be and I'll come back and close this later if we don't see it again.;;;","14/Oct/20 09:59;bereng;SGTM and there's no byteman either I can think of to catch pending deletes... :shrug:;;;","26/Oct/20 04:21;bereng;Look [solid|https://ci-cassandra.apache.org/job/Cassandra-trunk/96/testReport/dtest-novnode.disk_balance_test/TestDiskBalance/test_disk_balance_after_boundary_change_lcs/history/]. Closing and we can reopen if it repros ever again imo.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test test_expiration_overflow_policy_cap - ttl_test.TestTTL,CASSANDRA-16195,13334067,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,06/Oct/20 20:51,03/Jan/21 17:03,13/Jul/23 08:39,16/Oct/20 19:40,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/622/workflows/adcd463c-156a-43c7-a9bc-7f3e4938dbe8/jobs/3514

{code}
>           assert warning, 'Log message should be print for CAP and CAP_NOWARN policy'
E           AssertionError: Log message should be print for CAP and CAP_NOWARN policy
E           assert []

ttl_test.py:410: AssertionError
{code}",,aholmber,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15996,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 16 18:19:12 UTC 2020,,,,,,,All,,,,,,"0|z0jguo:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,,"07/Oct/20 04:33;brandon.williams;Dupe of CASSANDRA-15996?;;;","13/Oct/20 18:54;aholmber;Different tests, but using the same shared assertion on an inner method. I'm looking at the other one. Will link and work together.;;;","16/Oct/20 18:19;aholmber;If the CASSANDRA-15996 proposal works out, this will be closed with the same patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GPG key for jwest@apache.org,CASSANDRA-16194,13334061,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jwest,jwest,jwest,06/Oct/20 19:43,03/Jan/21 17:03,13/Jul/23 08:39,07/Oct/20 10:23,4.0,4.0-beta3,,,,Build,,,,0,,,,I am working on releasing a new version of in-jvm dtest API and need to add my GPG key to the KEYS file.,,jwest,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15652,,,,,,,,,"06/Oct/20 21:48;jwest;jwest-gpg-key.patch;https://issues.apache.org/jira/secure/attachment/13013166/jwest-gpg-key.patch",,,,,,,,,,,,,,1.0,jwest,,,,,,,,,,,,,Documentation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 07 10:23:31 UTC 2020,,,,,,,All,,,,,,"0|z0jgtc:",9223372036854775807,,,,mck,,,,Normal,,NA,,,https://dist.apache.org/repos/dist/release/cassandra/KEYS (r41745),,,,,,,,,N/A,,,,,"06/Oct/20 20:08;brandon.williams;+1;;;","06/Oct/20 20:18;mck;[~jwest],
 the patch only contains your signature list. It needs the exported public key too.

{code}
gpg --list-sigs <your name> && gpg --armor --export <your name>
{code};;;","06/Oct/20 21:48;jwest;Updated;;;","06/Oct/20 22:00;mck;+1;;;","07/Oct/20 10:14;mck;Example quick manual test…
{code}
docker run -v `pwd`/KEYS:/KEYS -it debian /bin/sh
apt update
apt install -y gnupg
cat KEYS | apt-key add -
apt update
apt-key list
{code};;;","07/Oct/20 10:16;mck;Removing the blank line in the patch (in Alex Petrov's exported key section) breaks {{`apt-key add …`}}. Adding it back fixes it.;;;","07/Oct/20 10:23;mck;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm_upgrade_dtests job issue in CircleCI MIDRES,CASSANDRA-16177,13330635,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,02/Oct/20 20:40,20/Oct/20 21:17,13/Jul/23 08:39,20/Oct/20 21:16,NA,,,,,CI,,,,0,,,,"jvm_upgrade_dtests work well in HIGHRES, but we see the following issue with MIDRES:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/349/workflows/04bccc52-4e3e-41e2-9c04-93501ea4ce77/jobs/2167/steps",,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Oct 20 21:17:01 UTC 2020,,,,,,,All,,,,,,"0|z0j4m0:",9223372036854775807,,,,dcapwell,,,,Low,,NA,,,https://github.com/apache/cassandra/commit/1e2d800421fe482fc2f16a814f44477cb284a93a,,,,,,,,,"[CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/411/workflows/ba075847-0c8b-4838-ad47-0e0c4324dc0a/jobs/2377]

[Patch|https://github.com/ekaterinadimitrova2/cassandra/pull/61]",,,,,"15/Oct/20 14:38;e.dimitrova;The issue is that number of workers shouldn't be more than  the number of tests.;;;","15/Oct/20 16:20;e.dimitrova;[~dcapwell] can you review and commit this patch, please? I believe it is the solution we discussed, CI run also proves it. Thanks!

[CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/411/workflows/ba075847-0c8b-4838-ad47-0e0c4324dc0a/jobs/2377]

[Patch|https://github.com/ekaterinadimitrova2/cassandra/pull/61]

 ;;;","20/Oct/20 20:52;dcapwell;+1;;;","20/Oct/20 21:17;dcapwell;committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid removing batch when it's not created during view replication,CASSANDRA-16175,13330610,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,jasonstack,jasonstack,02/Oct/20 17:46,27/May/22 19:25,13/Jul/23 08:39,07/Sep/21 15:02,3.0.26,3.11.12,4.0.2,4.1,4.1-alpha1,Feature/Materialized Views,,,,0,,,,"When the base replica is also a view replica we don't write a local batchlog, but they are unnecessarily removed when the view write is successful, what creates (and persists) a tombstone into the system.batches table.",,e.dimitrova,jasonstack,jeromatron,pauloricardomg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15921,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,jasonstack,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 07 15:00:53 UTC 2021,,,,,,,All,,,,,,"0|z0j4gg:",9223372036854775807,,,,brandon.williams,,,,Low,,,,,https://github.com/apache/cassandra/commit/57f53f53ae811f00cf9c1f84bd0414d99391f1ce,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16175?focusedCommentId=17407713&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17407713,,,,,"31/Aug/21 22:48;e.dimitrova;The issue was initially raised to be fixed for 4.x and I ported below a patch from [~jasonstack], CI started
||Patch||CI||
| [trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:16175-trunk?expand=1] | [Jenkins dev run | https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1089/] |

I personally think we can port the patch also to 3.0, 3.11 and 4.0 so I did it. CI can be run for all branches pre-commit when we confirm the versions which will be fixed. 

||Patch||
|[3.0|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16175-3.0]|
|[3.11|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16175-3.11]|
|[4.0|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16175-4.0]|;;;","02/Sep/21 16:12;brandon.williams;3.0 gives me slight pause since there isn't a massive amount of value in this, but the patch is simple enough. +1 if CI is happy on these branches.;;;","02/Sep/21 18:50;e.dimitrova;Thank you [~brandon.williams], I just pushed Jenkins CI run for the other three branches:

[3.0| https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1096/], [3.11| https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1097/], [4.0| https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1098/];;;","03/Sep/21 15:07;e.dimitrova;CI results look ok to me, there are only unrelated known failures I think.;;;","06/Sep/21 03:54;jasonstack;LGTM thanks for the fix;;;","07/Sep/21 15:00;e.dimitrova;Thank you [~jasonstack] and [~brandon.williams]

This was committed here:

To https://github.com/apache/cassandra.git

   267d3ce04e..57f53f53ae  cassandra-3.0 -> cassandra-3.0

   29d78af616..e644a9954a  cassandra-3.11 -> cassandra-3.11

   9c90cf7da0..4ed28cbf9c  cassandra-4.0 -> cassandra-4.0

   138569b079..ce2d756c41  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cqlsh row_id resets on page boundaries,CASSANDRA-16160,13330475,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,02/Oct/20 00:36,03/Jan/21 16:58,13/Jul/23 08:39,17/Dec/20 17:19,4.0,4.0-beta4,,,,Tool/cqlsh,,,,0,,,,"When you run a query such as

{code}
expand on; 
select * from table_with_clustering_keys where token(partition_key) = 1192326969048244361;
{code}

We print out a header for each row that looks like the following

@ Row 1

In 3.0 all values printed were uniq, but in 4.0 they are no longer unique

{code}
$ grep Row 3.0-rows.results | sort | uniq -c | sort -k1 -h -r | head -n 10
  1 @ Row 999
  1 @ Row 998
  1 @ Row 997
  1 @ Row 996
  1 @ Row 995
  1 @ Row 994
  1 @ Row 993
  1 @ Row 992
  1 @ Row 991
  1 @ Row 990
{code}

{code}
$ grep Row 4.0-rows.results | sort | uniq -c | sort -k1 -h -r | head -n 10
 10 @ Row 9
 10 @ Row 8
 10 @ Row 7
 10 @ Row 6
 10 @ Row 5
 10 @ Row 48
 10 @ Row 47
 10 @ Row 46
 10 @ Row 45
 10 @ Row 44
{code}",,aholmber,dcapwell,jeromatron,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,Workload Replay,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Dec 17 17:20:06 UTC 2020,,,,,,,All,,,,,,"0|z0j3mo:",9223372036854775807,,,,brandon.williams,dcapwell,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/cb71f2395896d29fd1f7d248cf48c69cb12c0411,,,,,,,,,"no doc
New unit test is provided, run in CI",,,,,"03/Nov/20 00:15;brandon.williams;I've been unable to reproduce this behavior, do you have an example schema?;;;","04/Nov/20 20:51;dcapwell;[~yifanc] do you remember the schema?;;;","04/Nov/20 21:44;dcapwell;we found the table

{code}
CREATE TABLE ks.tbl (
    pk1 text,
    pk2 text,
    c1 timeuuid,
    PRIMARY KEY ((pk1, pk2), c1)
) WITH CLUSTERING ORDER BY (c1 DESC)
{code};;;","15/Dec/20 20:30;aholmber;I think it's not related to any schema in particular, but rather requires data with enough rows to cross paging boundaries. I'm going to dig into it.;;;","15/Dec/20 22:25;aholmber;Confirmed that it's the result of paging. Looking back a bit, I don't think this behavior has ever been different. [~dcapwell] I'm wondering if {{3.0-rows.results}} was just selected with page size set higher.

Anyway, here is a potential patch and test.

[patch|https://github.com/aholmberg/cassandra/pull/25]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra/122/workflows/0bc193fd-3256-4e53-8929-4a7725c682c8/jobs/1286/steps];;;","16/Dec/20 18:30;dcapwell;Thanks for looking into this [~aholmber]!  Not sure if the default paging was changed between the two clusters, it was not explicitly set.

patch LGTM +1;;;","16/Dec/20 18:33;dcapwell;[~brandon.williams] mind reviewing as well?;;;","16/Dec/20 22:40;brandon.williams;+1 from me too;;;","16/Dec/20 22:41;dcapwell;ill start the commit and run through CI;;;","16/Dec/20 23:18;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16160-trunk-1C25756B-E296-4AD1-9270-AE5EF4363D28]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16160-trunk-1C25756B-E296-4AD1-9270-AE5EF4363D28]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/273/]|
;;;","16/Dec/20 23:18;dcapwell;this time I was careful and made sure to actually credit the author... https://github.com/dcapwell/cassandra/commit/b39acc9b431a9b31ca5881c2b300d09efc227460.patch;;;","17/Dec/20 17:14;dcapwell;sorry for the delay, ci had issues with checking out python dtests, so rerunning again.;;;","17/Dec/20 17:17;dcapwell;ok, see they passed in jenkins, will commit.;;;","17/Dec/20 17:20;dcapwell;thanks for the work!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RTE during re-serialization for message filtering during 3.0 -> 4.0 upgrade,CASSANDRA-16157,13330394,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,01/Oct/20 14:58,03/Jan/21 17:03,13/Jul/23 08:39,14/Oct/20 08:59,4.0,4.0-beta3,,,,Test/dtest/java,,,,0,,,,"When trying to upgrade 3.0 to 4.0, we’re often running into a problem, if older node serves as a coordinator:

{code}
 15294 java.lang.RuntimeException: Can not deserialize message org.apache.cassandra.distributed.impl.MessageImpl@4c46aead
  15295         at org.apache.cassandra.distributed.impl.Instance.deserializeMessage(Instance.java:299) ~[dtest-4.0-beta3.jar:?]
  15296         at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessage$7(Instance.java:315) ~[dtest-4.0-beta3.jar:?]
  15297         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_232]
  15298         at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_232]
  15299         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_232]
  15300         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_232]
  15301         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [dtest-4.0-beta3.jar:?]
  15302         at java.lang.Thread.run(Thread.java:748) [?:1.8.0_232]
  15303 Caused by: java.io.EOFException
  15304         at org.apache.cassandra.io.util.RebufferingInputStream.readByte(RebufferingInputStream.java:180) ~[dtest-4.0-beta3.jar:?]
  15305         at org.apache.cassandra.utils.vint.VIntCoding.readUnsignedVInt(VIntCoding.java:68) ~[dtest-4.0-beta3.jar:?]
  15306         at org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedVInt(RebufferingInputStream.java:243) ~[dtest-4.0-beta3.jar:?]
  15307         at org.apache.cassandra.net.Message$Serializer.deserializeHeaderPost40(Message.java:694) ~[dtest-4.0-beta3.jar:?]
  15308         at org.apache.cassandra.net.Message$Serializer.deserializePost40(Message.java:765) ~[dtest-4.0-beta3.jar:?]
  15309         at org.apache.cassandra.net.Message$Serializer.deserialize(Message.java:625) ~[dtest-4.0-beta3.jar:?]
  15310         at org.apache.cassandra.distributed.impl.Instance.deserializeMessage(Instance.java:295) ~[dtest-4.0-beta3.jar:?]
  15311         ... 7 more
{code}",,dcapwell,ifesdjeen,pauloricardomg,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16207,CASSANDRA-15935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 14 08:59:25 UTC 2020,,,,,,,All,,,,,,"0|z0j34o:",9223372036854775807,,,,dcapwell,yifanc,,,Critical,,4.0-beta1,,,https://github.com/apache/cassandra/commit/5be83b6a72695253c552535d2b826209f144cc63,,,,,,,,,Test included,,,,,"12/Oct/20 08:03;ifesdjeen;|[patch|https://github.com/apache/cassandra/pull/772]|[ci|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=16157-npe-during-reserialization]|;;;","13/Oct/20 01:00;yifanc;I can produce the {{IllegalArgumentException}} in the {{Instance#serializeMessage}} code path by unapplying the patch. But I cannot reproduce the mentioned RTE in the {{deserializeMessage}} code path. 

When applying the patch, the {{reserializationDuringUpgradeFrom30}} test always passes. 

Beside, providing the {{toString}} override in {{MessageImpl}} to display the {{verb, id, version and from}} can give better clarity in the exception message. For example, 
{code:java}
java.lang.RuntimeException: Can not deserialize message (verb: 1, id, 1, version: VERSION, from: IP)
{code}
;;;","13/Oct/20 01:27;dcapwell;The other exception that happens is

{code}
java.lang.IllegalArgumentException
		at org.apache.cassandra.net.NoPayload$1.serialize(NoPayload.java:40)
		at org.apache.cassandra.net.NoPayload$1.serialize(NoPayload.java:36)
		at org.apache.cassandra.net.Message$Serializer.serializePost40(Message.java:760)
		at org.apache.cassandra.net.Message$Serializer.serialize(Message.java:618)
		at org.apache.cassandra.distributed.impl.Instance.serializeMessage(Instance.java:291)
		at org.apache.cassandra.distributed.impl.Instance.lambda$registerInboundFilter$4(Instance.java:264)
		at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:62)
		at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:49)
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:93)
		at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:334)
		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
		at java.util.concurrent.FutureTask.run(FutureTask.java:266)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
{code};;;","13/Oct/20 01:33;dcapwell;Overall LGTM +1

I left a comment about the test, it would be good to address it but fine if you do it before merging.  ;;;","14/Oct/20 08:58;ifesdjeen;[~yifanc] I've added {{toString}} to message. Thank you for reviewing!;;;","14/Oct/20 08:59;ifesdjeen;Committed to trunk with [5be83b6a72695253c552535d2b826209f144cc63|https://github.com/apache/cassandra/commit/5be83b6a72695253c552535d2b826209f144cc63];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Decomissioned nodes are picked for gossip when unreachable nodes are considered for gossiping ,CASSANDRA-16156,13330386,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,01/Oct/20 14:27,22/Oct/20 07:53,13/Jul/23 08:39,22/Oct/20 07:53,3.0.23,3.11.9,4.0,,,Cluster/Gossip,,,,0,,,,"After node is decommissioned, it is still considered for gossip via “unreachable” nodes, which results into following exceptions:
 
{code}
INFO  [node4_Messaging-EventLoop-3-3] node4 2020-09-29 16:37:37,527 NoSpamLogger.java:91 - /127.0.0.4:7012->/127.0.0.1:7012-URGENT_MESSAGES-[no-channel] failed to connect
io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: /127.0.0.1:7012
Caused by: java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:330)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
 {code}

Trace of the method that attempts to establish connection:

{code} 
org.apache.cassandra.net.MessagingService.getOutbound(MessagingService.java:492)
	at org.apache.cassandra.net.MessagingService.doSend(MessagingService.java:335)
	at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:55)
	at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
	at org.apache.cassandra.net.MessagingService.send(MessagingService.java:327)
	at org.apache.cassandra.net.MessagingService.send(MessagingService.java:314)
	at org.apache.cassandra.gms.Gossiper.sendGossip(Gossiper.java:813)
	at org.apache.cassandra.gms.Gossiper.maybeGossipToUnreachableMember(Gossiper.java:840)
	at org.apache.cassandra.gms.Gossiper.access$400(Gossiper.java:86)
 {code}

LEFT and other nodes that are considered dead should not be picked for gossip with unreachable nodes.",,brandon.williams,ifesdjeen,jeromatron,maedhroz,marcuse,pauloricardomg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15935,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Oct 22 07:53:04 UTC 2020,,,,,,,All,,,,,,"0|z0j32w:",9223372036854775807,,,,marcuse,,,,Normal,,3.0.21,,,https://github.com/apache/cassandra/commit/bf1ea945b6fb1efb1730a3b8973325a26d51be39,,,,,,,,,"Test included into [CASSANDRA-15935], can find it [here|https://github.com/apache/cassandra/blob/27470d38f57695a766d8efd27a90be6f779ed625/test/distributed/org/apache/cassandra/distributed/test/BootstrapTest.java#L154-L191].",,,,,"12/Oct/20 15:56;ifesdjeen;|[patch|https://github.com/apache/cassandra/pull/774]|[ci|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra?branch=16156-gossip-with-unreachable-nodes]|;;;","22/Oct/20 06:45;marcuse;+1 lgtm;;;","22/Oct/20 07:53;ifesdjeen;Thank you for review!

Committed to 3.0 with [3cba8d807a478a9ee7cc93e3fd50849cfe056fa0|https://github.com/apache/cassandra/commit/3cba8d807a478a9ee7cc93e3fd50849cfe056fa0] and merged up to [3.11|https://github.com/apache/cassandra/commit/56f6cd9fba57a879377113af11ed4303f3697e77] and [trunk|https://github.com/apache/cassandra/commit/bf1ea945b6fb1efb1730a3b8973325a26d51be39].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ByteBufferAccessor cast exceptions are thrown when trying to query a virtual table,CASSANDRA-16155,13330385,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,01/Oct/20 14:26,03/Jan/21 17:02,13/Jul/23 08:39,12/Oct/20 08:20,4.0,4.0-beta3,,,,Feature/Virtual Tables,,,,0,,,,"Start a fresh trunk node, and try to run

SELECT * FROM system_views.local_read_latency ;

You’ll get: 
{code:java}
ERROR [Native-Transport-Requests-1] 2020-09-30 09:44:45,099 ErrorMessage.java:457 - Unexpected exception during request
 java.lang.ClassCastException: org.apache.cassandra.db.marshal.ByteBufferAccessor cannot be cast to java.lang.String
         at org.apache.cassandra.serializers.AbstractTextSerializer.serialize(AbstractTextSerializer.java:29)
         at org.apache.cassandra.db.marshal.AbstractType.decompose(AbstractType.java:131) {code}
 ",,clohfink,dcapwell,ifesdjeen,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15935,,,,,,,,CASSANDRA-16178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 12 18:50:43 UTC 2020,,,,,,,All,,,,,,"0|z0j32o:",9223372036854775807,,,,clohfink,maedhroz,,,Critical,,4.0-beta2,,,https://github.com/apache/cassandra/commit/896baf64159463d9dd72a8829eec8311f8a888da,,,,,,,,,Tests included,,,,,"02/Oct/20 11:43;ifesdjeen;|[patch|https://github.com/apache/cassandra/pull/764]|[ci|https://app.circleci.com/pipelines/github/ifesdjeen];;;","04/Oct/20 04:40;maedhroz;[~ifesdjeen] As you probably know by now, I mistakenly duplicated this in CASSANDRA-16178. In any case, we made the same exact fix (outside some cosmetic changes). If you'd like to incorporate it, I did add a more isolated test for {{SimpleDataSet}} [here|https://github.com/apache/cassandra/pull/766/files#diff-3040722d64285d97ebc45109bf21aac1R38].

Otherwise, +1;;;","05/Oct/20 11:38;ifesdjeen;[~maedhroz] thank you for the review. I've incorporated your changes, and added you as a co-author, since indeed our patches, down to tests, are identical. Force-pushed the branch.;;;","05/Oct/20 14:05;clohfink;+1;;;","05/Oct/20 18:10;dcapwell;I left this feedback in Caleb's version of the patch; can we add a test for the vtable that broke?  We didn't have coverage for that/those table(s) so would be best to add coverage as well.;;;","09/Oct/20 07:42;ifesdjeen;[~dcapwell] there is a test [here|https://github.com/apache/cassandra/pull/764/files#diff-3c0c566b23d7afa27bac87b84858399eR234-R250], which is equivalent to Caleb's test [here|https://github.com/apache/cassandra/pull/766/files#diff-3040722d64285d97ebc45109bf21aac1R38]. Both tests exercise the same code path, and latter uses a lower-level API.

[~maedhroz] do you have any objections to committing a test that's similar to the rest of {{VirtualTableTest}} tests?

[~dcapwell] you've also mentioned in review comment ""for me: the issue was that the method didn't take it, but takes Object..."", what do you think can be an alternative here? Unfortunately we do not have a more specific type to prevent something similar happening in the future.;;;","09/Oct/20 15:31;maedhroz;bq. do you have any objections to committing a test that's similar to the rest of VirtualTableTest tests?

[~ifesdjeen] That's fine w/ me. (The idea behind my {{SimpleDataSetTest}} being so isolated is that it should cover all current and _future_ usages of that path in {{SimpleDataSet}}.);;;","09/Oct/20 17:46;dcapwell;[~ifesdjeen] this is for test table test_virtual_ks.vt3, was hoping we could have a test for the table that actually broke which triggered this.  The comment was more that a public table failed and we didn't have test coverage to detect it, so would be good to have a basic test that makes sure it mostly works.  I am 100% fine with the test you have, more asking for an additional one.

bq. David Capwell you've also mentioned in review comment ""for me: the issue was that the method didn't take it, but takes Object..."", what do you think can be an alternative here? Unfortunately we do not have a more specific type to prevent something similar happening in the future.

When it comes to Object... that gets tricky as it traps everything... not sure how we could prevent this from happening with that signature...  The best hack I can think of is a static analyzer tool (custom to us) that checks these things, nothing else is coming to mind.

bq. David Capwell you've also mentioned in review comment ""for me:

Since reviews can go back-and-forth over multiple days, I tend to leave ""for me"" comments to remind me later of stuff I knew while reviewing as I will likely forget this the next time I need to look at it; these comments can mostly be ignored as they are just review documentation.;;;","12/Oct/20 08:15;ifesdjeen;[~dcapwell] thank you for elaborating! There is a test that uses this table in [CASSANDRA-15935] and we can add more test coverage for this (and other) virtual tables if needed.

Committed to trunk as [896baf64159463d9dd72a8829eec8311f8a888da|https://github.com/apache/cassandra/commit/896baf64159463d9dd72a8829eec8311f8a888da].;;;","12/Oct/20 18:50;dcapwell;Works for me, thanks =);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Package tools/bin scripts as executable,CASSANDRA-16151,13330132,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,polo-language,polo-language,polo-language,30/Sep/20 09:05,03/Jan/21 17:04,13/Jul/23 08:39,21/Oct/20 12:40,2.2.19,3.0.23,3.11.9,4.0,4.0-beta3,Packaging,,,,0,patch,,,"The tools/bin scripts aren't packaged as executable in the source distributions, though in the repository the scripts have the right bits.

This causes, on 3.11.8 for example, the tests in org.apache.cassandra.cql3.EmptyValuesTest to fail:
{{java.io.IOException: Cannot run program ""tools/bin/sstabledump"": error=13, Permission denied}}

{{[junit-timeout] junit.framework.AssertionFailedError: java.io.IOException}}
{{[junit-timeout]         at org.apache.cassandra.cql3.EmptyValuesTest.verify(EmptyValuesTest.java:85)}}
{{[junit-timeout]         at org.apache.cassandra.cql3.EmptyValuesTest.verifyJsonInsert(EmptyValuesTest.java:112)}}

See attached patch of build.xml for the trunk and cassandra-3.11 branches.",,adelapena,polo-language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15586,,,,,,,,,"21/Oct/20 10:21;polo-language;2.2-Package-tools-bin-scripts-as-executable.patch;https://issues.apache.org/jira/secure/attachment/13013911/2.2-Package-tools-bin-scripts-as-executable.patch","21/Oct/20 10:21;polo-language;3.0-Package-tools-bin-scripts-as-executable.patch;https://issues.apache.org/jira/secure/attachment/13013912/3.0-Package-tools-bin-scripts-as-executable.patch","30/Sep/20 09:05;polo-language;3.11-Package-tools-bin-scripts-as-executable.patch;https://issues.apache.org/jira/secure/attachment/13012330/3.11-Package-tools-bin-scripts-as-executable.patch","30/Sep/20 09:05;polo-language;trunk-Package-tools-bin-scripts-as-executable.patch;https://issues.apache.org/jira/secure/attachment/13012331/trunk-Package-tools-bin-scripts-as-executable.patch",,,,,,,,,,,4.0,polo-language,,,,,,,,,,,,,Packaging -> Source Distribution,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 21 12:38:03 UTC 2020,,,,,,,All,,,,,,"0|z0j1io:",9223372036854775807,,,,adelapena,,,,Normal,,0.7 beta 3,,,https://github.com/apache/cassandra/commit/72941b9ec14e64af9e64365027d542b4fff41d81,,,,,,,,,No documentation needed.,,,,,"19/Oct/20 20:29;adelapena;Looks good to me, I think we should also patch 2.2 and 3.0 since they also seem affected.;;;","21/Oct/20 10:22;polo-language;Patches for 2.2 and 3.0 attached!;;;","21/Oct/20 12:38;adelapena;Great, thanks, nice patches.

Committed to {{cassandra-2.2}} as [72941b9ec14e64af9e64365027d542b4fff41d81|https://github.com/apache/cassandra/commit/72941b9ec14e64af9e64365027d542b4fff41d81] and merged up to [{{3.0}}|https://github.com/apache/cassandra/commit/d44dbd91c1752a71f4819be92fd75a52be9f0118], [{{3.11}}|https://github.com/apache/cassandra/commit/a2f59be94388754e667f545b02798810056f9b1b] and [{{trunk}}|https://github.com/apache/cassandra/commit/095540d54a07d2c35bd9260e065fcf346ad36164].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade to snakeyaml >= 1.26 version for CVE-2017-18640 fix,CASSANDRA-16150,13330091,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,crazylab,crazylab,crazylab,30/Sep/20 05:02,16/Mar/22 14:14,13/Jul/23 08:39,09/Oct/20 20:03,4.0,4.0-beta3,,,,Dependencies,,,,0,,,,"There have been critical level CVE (CVE-2017-18640) discovered in snakeyaml version earlier to 1.26. This has been patched into snakeyaml version 1.26.

Reference: [https://nvd.nist.gov/vuln/detail/CVE-2017-18640]

This card is expected to upgrade the snakeyaml version to 1.26.",,crazylab,dcapwell,e.dimitrova,ifesdjeen,,,,,,,,"smiklosovic closed pull request #736:
URL: https://github.com/apache/cassandra/pull/736


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16234,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,crazylab,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 09 20:03:31 UTC 2020,,,,,,,All,,,,,,"0|z0j19k:",9223372036854775807,,,,dcapwell,ifesdjeen,,,Low,,4.0-beta1,,,https://github.com/apache/cassandra/commit/7648588b65a5801c1e8af026b6459cd65799eace,,,,,,,,,unit tests,,,,,"30/Sep/20 16:04;e.dimitrova;Hi [~crazylab], please, let us know if you need any help with this update (I guess you will be working on it as you assigned it?)

Some reference about updating dependencies in Cassandra(sorry if you are already aware of this doc, just wanted to save you some time if you haven't seen it yet :)):

[https://cassandra.apache.org/doc/latest/development/dependencies.html];;;","30/Sep/20 17:45;dcapwell;left comment in PR but its related to the document [~e.dimitrova] shared.  After making the change, it would be good to run the config tests to make sure things work properly; I can run the whole suite once this is done.;;;","30/Sep/20 17:56;e.dimitrova;[~dcapwell] I think you reverted a snakeyaml upgrade patch from another ticket recently?

Just decided to mention it as, as far as I remember, the update there led to ClassCastExceptions.

So further to the Cassandra specifics, probably worth to check on snakeyaml side what breaking changes were done in the new version that might require additional work on our end (if it wasn't checked already);;;","30/Sep/20 19:01;dcapwell;bq.  I think you reverted a snakeyaml upgrade patch from another ticket recently?

What?  [~ifesdjeen] just upgraded to 1.23 for a harry patch and he fixed a bug caused after the merge; trunk is currently 1.23.

bq. Just decided to mention it as, as far as I remember, the update there led to ClassCastExceptions.

Fixed in commit 

{code}
commit fb49ab2b12bf813697971b41fe47ac11f4a240c0
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Sun Sep 20 13:24:22 2020 +0300

    Fix test failure caused by CASSANDRA-16102

    Patch by Alex Petrov; reviewed by David Capwell for CASSANDRA-16102
{code}

bq. So further to the Cassandra specifics, probably worth to check on snakeyaml side what breaking changes were done in the new version that might require additional work on our end (if it wasn't checked already)

Yep, a good place to start is unit + dtest.  I can run the dtests, was hoping [~crazylab] would take the unit tests.;;;","30/Sep/20 22:37;e.dimitrova;Ok, bad example. I meant to say that sometimes vendors (we do it in cassandra) make changes which will require some additional work during upgrade and if we read the notes in advance that my save some time and efforts, sometimes even headache. :) Tried to help not to point out someone for something... Hope I was understood correctly.

Moving away, there is a committer already doing the review :) 

 ;;;","30/Sep/20 23:28;dcapwell;your review is more than welcome =D;;;","01/Oct/20 04:03;crazylab;Here is the pull request: https://github.com/apache/cassandra/pull/736#pullrequestreview-499670496;;;","01/Oct/20 22:09;brandon.williams;If we're doing this, 1.27 is now out.;;;","02/Oct/20 17:45;dcapwell;I am going to run the branch through CI just to make sure nothing breaks like the upgrade to 1.23 did.

[~ifesdjeen] you switched the branch to 1.23 for harry reasons, can you also take a look at this to make sure this works well with harry?;;;","02/Oct/20 17:55;dcapwell;Trigged build: https://ci-cassandra.apache.org/job/Cassandra-devbranch/56/;;;","07/Oct/20 17:37;dcapwell;tests look mostly clean, so I am +1 (I am ok with 1.27 or 1.26)

[~ifesdjeen] can you review as well?  just want to make sure the harry side of things is also fine with this change.;;;","09/Oct/20 13:00;ifesdjeen;+1 to update to 1.26, since so far I couldn't find a released version of jackson-dataformat-yaml that we depend on in Harry that has 1.27 yaml.

[Harry patch|https://github.com/apache/cassandra-harry/pull/4];;;","09/Oct/20 17:37;dcapwell;[~brandon.williams] have any issues with 1.26, else I can merge this today.;;;","09/Oct/20 17:46;brandon.williams;Nope, go for it.;;;","09/Oct/20 17:58;dcapwell;CI Results: Yellow, known broken tests only

Branch: trunk
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16150-trunk-89A170D2-1BB1-4D7D-ADA0-7D9942489E9C
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/88/
;;;","09/Oct/20 20:03;dcapwell;I also validated the md5 of the lib matches maven central.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failures caused by merging CASSANDRA-15833,CASSANDRA-16148,13330054,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jwest,jwest,jwest,29/Sep/20 23:03,03/Jan/21 17:02,13/Jul/23 08:39,14/Oct/20 19:10,4.0,4.0-beta3,,,,Cluster/Gossip,,,,0,,,,"Three issues were caused by merging CASSANDRA-15833:

1. `GossiperTest#testHaveAnyVersion3Nodes` was failing on trunk: https://app.circleci.com/pipelines/github/jrwest/cassandra/53/workflows/95f9f401-1ef8-4b8d-9c64-3703d9669d95/jobs/771

2. python dtest ReadRepairTest#test_atomic_writes[blocking] was failing

3. In-jvm dtests being worked on as part of CASSANDRA-15977 uncovered an issue with how CASSANDRA-15833 changes interacted with in-jvm dtests running without {{Feature.GOSSIP}}",,adelapena,aholmber,dcapwell,jwest,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15833,,,,,,,,,,,,,,,,CASSANDRA-16234,,,,,,,,,,,,,CASSANDRA-15977,,,,,,,,,,,,,,,0.0,jwest,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 14 19:10:33 UTC 2020,,,,,,,All,,,,,,"0|z0j11c:",9223372036854775807,,,,dcapwell,maedhroz,,,Normal,,4.0-beta3,,,https://github.com/apache/cassandra/commit/9a40e8079baff6f499229535a4af75be97f9a3b9  https://github.com/apache/cassandra/commit/06bc316c89053067d162da3f118b43a62dcf0854,,,,,,,,,Make sure the test that is being fixed passes and no other tests were broken as a result,,,,,"29/Sep/20 23:16;jwest;Branch updated to address all 3 issues: 

[branch | https://github.com/jrwest/cassandra/tree/jwest/16148] [tests | https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16148];;;","30/Sep/20 22:26;dcapwell;The change to Gossiper isn't thread safe.  Previous we used memoize which guarded the state with a sync on the memoizer, now that we have removed this there are no locks/fences in place to make sure the field access is safe (tests would directly access, but read/write was the same thread so not a issue there); it should be enough to add volatile to org.apache.cassandra.gms.Gossiper#haveMajorVersion3Nodes.

Also, I am concerned that there may be perf implications with larger clusters during mixed-mode case, specifically this call site org.apache.cassandra.db.filter.ColumnFilter.Builder#build; would need to look closer but this looks like the query hot path so would want to confirm.  A simple way to avoid this would be to still memoize with the 1m expires, but to avoid caching when version isn't known (the assumption the race window is ""small"" so performance hit during this window).

{code}
Gossiper.instance.injectApplicationState(addressAndPort,
                                                             ApplicationState.RELEASE_VERSION,
                                                             new VersionedValue.VersionedValueFactory(partitioner).releaseVersion());
{code}

This logic isn't correct as you need the release version of the node you are adding, this method takes the release version of the current node (example: node1 is 3.0, node2 is 4.0.  node2 would update gossip to say node1 is 4.0).


https://github.com/apache/cassandra/compare/trunk...jrwest:jwest/16148#diff-9d7e7c7ee33324ba61d6240be9e88f7eR51

Can you remove the comment which switches to Feature.GOSSIP?;;;","30/Sep/20 22:51;jwest;[~dcapwell] good catch re: volatile. I had that locally but forgot to commit. Thank you. Regarding the hot path, it certainly adds more work during mixed mode. Can you say more about what you mean by ""avoid caching when the version isn't known"". If memoization is involved won't we be ""caching"" the value? Or is there a short circuit I am not aware of? Otherwise, I think we need to opt for correctness over performance here. 

Will remove the extraneous comment;;;","30/Sep/20 23:16;dcapwell;bq. Can you say more about what you mean by ""avoid caching when the version isn't known"". 

Guava memoize doesn't support it so would require a custom implementation but could indicate not to cache via a special exception that returns a value or have the return type be a ADT that has Success, and NoCache.

bq. Otherwise, I think we need to opt for correctness over performance here.

I agree correctness is important here, but just concerned about mixed mode with larger clusters.  It would be great if we could get a baseline with and without memoize with a 50-100 node cluster with at least 1 node in 3.x.

Also, my thinking was mostly that we could always fork the guava class, it is 15 lines of code (depending on implementation of NoCache, would be around 20~.;;;","01/Oct/20 17:41;maedhroz;bq. This logic isn't correct as you need the release version of the node you are adding, this method takes the release version of the current node (example: node1 is 3.0, node2 is 4.0. node2 would update gossip to say node1 is 4.0).

Would the idea be to add something similar to {{getMessagingVersion()}} to the {{IInstance}} API?

Otherwise, just minor notes in addition to what's already been discussed above:

* I'd move {{SimpleReadWriteTest#test15833()}} to {{ReadRepairTest}}, get rid of the commented out cluster init, and throw a TODO onto it that indicates the method should be removed when CASSANDRA-15977 merges. (CC [~adelapena])
* nit: If I'm interpreting all this correctly, {{haveMajorVersion3Nodes()}} is really more like {{mightHaveMajorVersion3Nodes()}} ;)
* If we end up not needing Guava, can we switch to {{java.util.function.Supplier}}?
* {{import com.google.common.base.Suppliers}} is unused.;;;","01/Oct/20 17:52;maedhroz;bq. It would be great if we could get a baseline with and without memoize with a 50-100 node cluster with at least 1 node in 3.x.

Would a microbenchmark hammering {{haveMajorVersion3Nodes()}} over 100 endpoints suffice to allay our fears? (i.e. One comparing trunk to a version of the patch w/ a {{volatile}} {{haveMajorVersion3Nodes}}?);;;","01/Oct/20 19:17;adelapena;bq. I'd move {{SimpleReadWriteTest#test15833()}} to {{ReadRepairTest}}, get rid of the commented out cluster init, and throw a TODO onto it that indicates the method should be removed when CASSANDRA-15977 merges. (CC [~adelapena])
Agree, we'll remove it in CASSANDRA-15977. We could also name it {{test16148}}, like this ticket.;;;","02/Oct/20 00:57;jwest;{quote} This logic isn't correct as you need the release version of the node you are adding {quote}

To address this I've opened:
https://github.com/apache/cassandra-in-jvm-dtest-api/pull/21

And updated all of the branches to implement the new method, as well as updated trunk to use it correctly:
[2.2 | https://github.com/jrwest/cassandra/tree/jwest/16148-2.2]
[3.0 | https://github.com/jrwest/cassandra/tree/jwest/16148-3.0]
[3.11 | https://github.com/jrwest/cassandra/tree/jwest/16148-3.11]
[trunk | https://github.com/jrwest/cassandra/tree/jwest/16148] 

Also moved the test to {{ReadRepairTest}} and added the requested comment about CASSANDRA-15977 deleting it. 

Memoization changes to follow. ;;;","02/Oct/20 03:10;jwest;Added the memoization changes as well and pushed. Unfortunately the build will be broken until we get the in-jvm dtest changes released. ;;;","02/Oct/20 17:31;dcapwell;Overall the patch LGTM, one thing I would love is to split it in two (can keep the same JIRA): Gossiper change (fix unit and python dtest), jvm dtest when not gossiping.  Main reason is updating jvm-dtest is rather slow at the moment so would be good to get the build green.;;;","02/Oct/20 17:33;jwest;Hehe this is why I wanted to split them up initially but was encouraged to keep them together. Do we then just have two source tracking links, etc? Can we get the process for in-jvm dtest started ASAP (let me know what I have to do)?

 ;;;","13/Oct/20 22:18;jwest;Builds:

- [trunk|https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16148]. Yellow. Two unrelated dtest failures. 
- [3.11|https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16148-3.11]. Yellow. Known, unrelated unit test failure. 
- [3.0|https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16148-3.0]. Green
- [2.2|https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16148-2.2]. Green;;;","14/Oct/20 17:16;dcapwell;I feel that https://app.circleci.com/pipelines/github/jrwest/cassandra/71/workflows/a6356d72-d33c-449d-8561-332ec190910c/jobs/885 is because you didn't rebase... I added a lot line to all branches to detect when we complete startup, and looks like it times out after 10m since it never sees that log.

Confirmed, https://github.com/jrwest/cassandra/commits/jwest/16148 doesn't have the commit which checks for the log.;;;","14/Oct/20 17:16;dcapwell;+1 from me;;;","14/Oct/20 19:10;jwest;Committed. Thanks. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ValueAccessor is using signed shorts in sliceWithShortLength,CASSANDRA-16147,13330044,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bdeggleston,bdeggleston,bdeggleston,29/Sep/20 21:17,30/Apr/21 06:46,13/Jul/23 08:39,30/Sep/20 18:49,4.0,4.0-beta3,,,,Local/Other,,,,0,,,,"ValueAccessor is using a signed short when interpreting byte lengths, causing exceptions when reading blobs over 32767 bytes in length",,bdeggleston,dcapwell,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15537,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bdeggleston,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Low Hanging Fruit,Workload Replay,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 30 18:49:07 UTC 2020,,,,,,,All,,,,,,"0|z0j0z4:",9223372036854775807,,,,dcapwell,maedhroz,,,Critical,,4.0-beta1,,,https://github.com/apache/cassandra/commit/8be1cbe9ab14155773bfab765a3567df9ff9833f,,,,,,,,,unit tests / circle,,,,,"29/Sep/20 21:21;bdeggleston;[trunk |https://github.com/bdeggleston/cassandra/tree/16147-trunk];;;","29/Sep/20 21:51;dcapwell;overall +1 from me.  I do think it would be good to add a test which reads/writes SSTables that would have hit the issue as it seems that we are missing larger data in java and python testing.;;;","29/Sep/20 23:44;bdeggleston;Variable length data types can have values > 0xFFFF, but composite types can't, so I added a test around composite types with large values.;;;","29/Sep/20 23:50;dcapwell;the test passes on trunk, and one of the reasons is that org.apache.cassandra.db.marshal.CompositeType#build(org.apache.cassandra.db.marshal.ValueAccessor<V>, boolean, V...) uses ByteBuffer directly

{code}
@SafeVarargs
    public static <V> V build(ValueAccessor<V> accessor, boolean isStatic, V... values)
    {
..

        ByteBuffer out = ByteBuffer.allocate(totalLength);

...
        for (V v : values)
        {
            ByteBufferUtil.writeShortLength(out, accessor.size(v));
...
    }
{code}

And org.apache.cassandra.db.marshal.CompositeType#split also does the same

{code}
while (bb.remaining() > 0)
        {
            l[i++] = ByteBufferUtil.readBytesWithShortLength(bb);
            bb.get(); // skip end-of-component
        }
{code};;;","29/Sep/20 23:59;bdeggleston;yep, build and split both do. I've updated the test to use to/from string.;;;","30/Sep/20 00:01;dcapwell;I modified split to trigger this logic

{code}
l[i++] = ByteBufferAccessor.instance.sliceWithShortLength(bb, bb.position());
bb.position(bb.position() + 2 + l[i - 1].remaining());
{code}

the test causes the size to be -2 and since the offset is 2 for the header, the returned buffer is 0
;;;","30/Sep/20 00:01;dcapwell;looking now.;;;","30/Sep/20 00:04;dcapwell;test LGTM thanks!  +1;;;","30/Sep/20 16:07;maedhroz;+1 (with the minor nit about changing {{ByteBufferUtil.getShortLength()}} to {{ByteBufferUtil.getUnsignedShort()}});;;","30/Sep/20 18:49;bdeggleston;Committed to trunk, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Node state incorrectly set to NORMAL after nodetool disablegossip and enablegossip during bootstrap,CASSANDRA-16146,13329784,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,28/Sep/20 17:23,01/Aug/21 12:15,13/Jul/23 08:39,30/Oct/20 19:41,3.0.23,3.11.10,4.0,4.0-beta3,,Cluster/Gossip,,,,0,,,,"At high level, {{StorageService#setGossipTokens}} set the gossip state to {{NORMAL}} blindly. Therefore, re-enabling gossip (stop and start gossip) overrides the actual gossip state.
  
It could happen in the below scenario.
# Bootstrap failed. The gossip state remains in {{BOOT}} / {{JOINING}} and code execution exits StorageService#initServer.
# Operator runs nodetool to stop and re-start gossip. The gossip state gets flipped to {{NORMAL}}",,bdeggleston,brandon.williams,dcapwell,jeromatron,yifanc,,,,,,,"yifan-c opened a new pull request #760:
URL: https://github.com/apache/cassandra/pull/760


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Sep/20 20:40;githubbot;600","yifan-c closed pull request #760:
URL: https://github.com/apache/cassandra/pull/760


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:38;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 06 17:45:29 UTC 2020,,,,,,,All,,,,,,"0|z0izdc:",9223372036854775807,,,,bdeggleston,brandon.williams,,,Low,,3.0.0,,,https://github.com/apache/cassandra/commit/fee7a10823da1e29bd0e6504fea9679389180c9e,,,,,,,,,"ci, jvm dtest",,,,,"28/Sep/20 17:27;brandon.williams;bq. Operator runs nodetool to stop and re-start gossip. The gossip state gets flipped to NORMAL

We should perhaps just not allow this outside of NORMAL, since in that case you probably want to just stop the the node instead.;;;","28/Sep/20 17:57;yifanc;Thanks [~brandon.williams] for commenting so quickly. 

bq. perhaps just not allow this outside of NORMAL

Adding a pre-check before both starting and stopping gossip to make sure the current mode is NORMAL sounds good to me.;;;","28/Sep/20 20:43;yifanc;PR (to 3.0): [https://github.com/apache/cassandra/pull/760]

CI: [https://app.circleci.com/pipelines/github/yifan-c/cassandra/108/workflows/d4fc0b93-111e-4cbc-bd2c-c68e1a72fe09]

The patch simply prevents calling stopGossip and startGossip when not in the normal mode. 

I will prepare the patch to the other branches (3.11 and trunk) once this one looks good. 

cc: [~bdeggleston];;;","28/Sep/20 21:07;brandon.williams;+1, with minor bikeshed: it would be nice if the error mentioned shutting the node down instead if they really want to do that.;;;","28/Sep/20 23:33;yifanc;Updated the error message. 

Unit and jvm dtest passed. One test failure ({{test_closing_connections - thrift_hsha_test.TestThriftHSHA}}) from dtest. It does not look related and exists before this patch. 

 [https://app.circleci.com/pipelines/github/yifan-c/cassandra/111/workflows/ae86acf0-b416-4a42-92e8-cb845d5393a7];;;","29/Sep/20 15:54;brandon.williams;Indeed, that looks related to CASSANDRA-16127.;;;","02/Oct/20 22:01;brandon.williams;I am +1 on 3.0, are you still planning to do patches for other versions?;;;","02/Oct/20 22:05;yifanc;yep. 3.11 and trunk.;;;","08/Oct/20 23:05;yifanc;3.11: [https://github.com/yifan-c/cassandra/tree/f/CASSANDRA-16146-3.11]

trunk: [https://github.com/yifan-c/cassandra/tree/f/CASSANDRA-16146-trunk];;;","09/Oct/20 17:51;brandon.williams;+1;;;","30/Oct/20 19:41;bdeggleston;+1, committed. Thanks!;;;","03/Nov/20 02:52;dcapwell;Turns out this broke jvm-dtest org.apache.cassandra.distributed.test.ClientNetworkStopStartTest

{code}
[junit-timeout] Testcase: stopStartNative(org.apache.cassandra.distributed.test.ClientNetworkStopStartTest):    FAILED
[junit-timeout] nodetool command [enablebinary] was not successful
[junit-timeout] Notifications:
[junit-timeout] Error:
[junit-timeout] java.lang.IllegalStateException: Unable to start native transport because the node is not in the normal state.
[junit-timeout]         at org.apache.cassandra.service.StorageService.checkServiceAllowedToStart(StorageService.java:4389)
[junit-timeout]         at org.apache.cassandra.service.StorageService.startNativeTransport(StorageService.java:427)
[junit-timeout]         at org.apache.cassandra.tools.NodeProbe.startNativeTransport(NodeProbe.java:963)
[junit-timeout]         at org.apache.cassandra.tools.nodetool.EnableBinary.execute(EnableBinary.java:31)
[junit-timeout]         at org.apache.cassandra.tools.NodeTool$NodeToolCmd.runInternal(NodeTool.java:287)
[junit-timeout]         at org.apache.cassandra.tools.NodeTool$NodeToolCmd.run(NodeTool.java:272)
[junit-timeout]         at org.apache.cassandra.tools.NodeTool.execute(NodeTool.java:178)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance$DTestNodeTool.execute(Instance.java:843)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$nodetoolResult$30(Instance.java:778)
[junit-timeout]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout]         at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)
[junit-timeout]         at java.lang.Thread.run(Thread.java:748)
{code}

found in https://app.circleci.com/pipelines/github/dcapwell/cassandra/752/workflows/cf4c3766-de15-4903-88f9-20a3dbcfd331/jobs/4268;;;","03/Nov/20 03:19;dcapwell;Also org.apache.cassandra.distributed.test.GossipTest on trunk

{code}
[junit-timeout] Testcase: org.apache.cassandra.distributed.test.GossipTest:testPreventStoppingGossipDuringBootstrap:    Caused an ERROR
[junit-timeout] Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
[junit-timeout] junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1275)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1275)
[junit-timeout]         at java.lang.Thread.run(Thread.java:748)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.distributed.test.GossipTest FAILED (timeout)
{code}

https://app.circleci.com/pipelines/github/dcapwell/cassandra/754/workflows/d47aee80-0f62-4010-aca6-39adad2d986d/jobs/4285;;;","03/Nov/20 04:42;yifanc;Thanks David!

It looks like the backports in CASSANDRA-16127 is merged after I posted the [CI link|https://issues.apache.org/jira/browse/CASSANDRA-16146?focusedCommentId=17203554&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17203554]. Therefore, CI did not show any jvm dtest failures. 

For the failures in ClientNetworkStopStartTest, the cause is that the cluster without GOSSIP enabled does not set the instance's operation mode correctly. (So it stuck at Starting and fail).

For the failure in GossipTest in trunk, the cause is that ByteBuddy does not overwrite the StorageService#bootstrap successfully as the method signature is different in trunk than 3.x.;;;","04/Nov/20 00:27;yifanc;Fixups and CI
3.0: https://github.com/yifan-c/cassandra/tree/fixup/CASSANDRA-16146-3.0
https://app.circleci.com/pipelines/github/yifan-c/cassandra/143/workflows/1a55cee6-36ef-4e8a-a8d4-6798549ca202

3.11: https://github.com/yifan-c/cassandra/tree/fixup/CASSANDRA-16146-3.11
https://app.circleci.com/pipelines/github/yifan-c/cassandra/144/workflows/52cfbd53-92cb-4644-ae0d-694a9bef398c

trunk: https://github.com/yifan-c/cassandra/tree/fixup/CASSANDRA-16146-trunk
https://app.circleci.com/pipelines/github/yifan-c/cassandra/142/workflows/480e513f-2cf5-47b7-a608-d37cb91e1393;;;","04/Nov/20 18:45;dcapwell;for the 3.x you added Feature.GOSSIP which wasn't needed in the test, this tells me the non-gossip state is not fixed; can we fix jvm dtest?;;;","04/Nov/20 19:19;yifanc;Updated the 3.0 and 3.11 fixup branchs to correctly finish ring initialization in the mock gossip mode, instead of enabling GOSSOP in the test. ;;;","04/Nov/20 19:38;dcapwell;3.x line LGTM;;;","06/Nov/20 05:25;yifanc;Hi [~brandon.williams] and [~bdeggleston],

Would you please take another look at the fixup to each branch? Links are posted above. Although the CI result looks good when committing, several newly added tests were actually broken since we did not rebase and rerun the CI. 

In the 3.x branches, the fixup sets the operationMode to normal directly in StorageService when using mock gossip.

In the trunk, the fixup corrects the bytebuddy in the failed test class in addition to the operationMode fix in test. ;;;","06/Nov/20 15:24;brandon.williams;LGTM, supernit: I think it's a good idea to have some comment around unsafe methods, but that's easy enough to add on commit.;;;","06/Nov/20 17:29;yifanc;Sure thing. Comment was just added for the unsafe method in each branch. ;;;","06/Nov/20 17:45;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,
dtest: Fix redundant TTL overflow policy tests,CASSANDRA-16145,13329290,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,aholmber,aholmber,24/Sep/20 21:29,03/Jan/21 17:03,13/Jul/23 08:39,25/Sep/20 16:03,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"While looking into CASSANDRA-15996 I came across what I think is a copy/paste mistake resulting in redundant tests, and not running the other variant. 

Spinning out here to fix independently of the flaky test.",,aholmber,brandon.williams,pauloricardomg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Sep 25 16:04:02 UTC 2020,,,,,,,All,,,,,,"0|z0iwbs:",9223372036854775807,,,,brandon.williams,pauloricardomg,,,Low,,NA,,,https://github.com/apache/cassandra-dtest/commit/7d6debb5f3572682a069513ea9c85ee19e5d59b1,,,,,,,,,run the updated tests,,,,,"24/Sep/20 21:47;aholmber;[patch|https://github.com/apache/cassandra-dtest/compare/master...aholmberg:CASSANDRA-16145?expand=1]

[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16145]

[~pauloricardomg] these are your tests. Was this your intent?;;;","25/Sep/20 15:54;pauloricardomg;bq. Paulo Motta these are your tests. Was this your intent?

Yes, this LGTM. Thanks! 

You may need to find another committer to commit this as I don't have access to a workspace right now.;;;","25/Sep/20 16:04;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TLS connections to the storage port on a node without server encryption configured causes java.io.IOException accessing missing keystore,CASSANDRA-16144,13329045,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,23/Sep/20 17:43,12/Feb/21 16:57,13/Jul/23 08:39,05/Nov/20 22:48,4.0,4.0-beta4,,,,Messaging/Internode,,,,0,,,,"If a TLS connection is requested against a node with all encryption disabled by configuration,
configured with

{code}
server_encryption_options: {optional:false, internode_encryption: none}
{code}

it logs the following error if no keystore exists for the node.

{code}
INFO  [Messaging-EventLoop-3-3] 2020-09-15T14:30:02,952 : - 127.0.0.1:7000->127.0.1.1:7000-URGENT_MESSAGES-[no-channel] failed to connect
io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: local1-i1/127.0.1.1:7000
Caused by: java.net.ConnectException: Connection refused
       at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method) ~[?:?]
       at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779) ~[?:?]
       at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:330) ~[netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:334) ~[netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702) ~[netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650) ~[netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576) ~[netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at java.lang.Thread.run(Thread.java:834) [?:?]
WARN  [Messaging-EventLoop-3-9] 2020-09-15T14:30:06,375 : - Failed to initialize a channel. Closing: [id: 0x0746c157, L:/127.0.0.1:7000 - R:/127.0.0.1:59623]
java.io.IOException: failed to build trust manager store for secure connections
       at org.apache.cassandra.security.SSLFactory.buildKeyManagerFactory(SSLFactory.java:232) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       at org.apache.cassandra.security.SSLFactory.createNettySslContext(SSLFactory.java:300) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       at org.apache.cassandra.security.SSLFactory.getOrCreateSslContext(SSLFactory.java:276) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       at org.apache.cassandra.security.SSLFactory.getOrCreateSslContext(SSLFactory.java:257) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       at org.apache.cassandra.net.InboundConnectionInitiator$Initializer.initChannel(InboundConnectionInitiator.java:107) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       at org.apache.cassandra.net.InboundConnectionInitiator$Initializer.initChannel(InboundConnectionInitiator.java:71) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       at io.netty.channel.ChannelInitializer.initChannel(ChannelInitializer.java:129) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.ChannelInitializer.handlerAdded(ChannelInitializer.java:112) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.AbstractChannelHandlerContext.callHandlerAdded(AbstractChannelHandlerContext.java:938) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:609) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.DefaultChannelPipeline.access$100(DefaultChannelPipeline.java:46) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask.execute(DefaultChannelPipeline.java:1463) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.DefaultChannelPipeline.callHandlerAddedForAllHandlers(DefaultChannelPipeline.java:1115) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.DefaultChannelPipeline.invokeHandlerAddedIfNeeded(DefaultChannelPipeline.java:650) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:502) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: java.nio.file.NoSuchFileException: conf/.keystore
       at sun.nio.fs.UnixException.translateToIOException(UnixException.java:92) ~[?:?]
       at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111) ~[?:?]
       at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116) ~[?:?]
       at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:219) ~[?:?]
       at java.nio.file.Files.newByteChannel(Files.java:370) ~[?:?]
       at java.nio.file.Files.newByteChannel(Files.java:421) ~[?:?]
       at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420) ~[?:?]
       at java.nio.file.Files.newInputStream(Files.java:155) ~[?:?]
       at org.apache.cassandra.security.SSLFactory.buildKeyManagerFactory(SSLFactory.java:207) ~[apache-cassandra-4.0-beta1-SNAPSHOT.jar:4.0-beta1-SNAPSHOT]
       ... 23 more
{code}

This happens regardless of the settings of server_encryption_options.optional, as the OptionalSslHandler is installed if optional is true, and if optional is not true, an SSL handler is always installed.

https://github.com/apache/cassandra/blob/674b6cc1a5e905a9c234c649adaad2de79cfa560/src/java/org/apache/cassandra/net/InboundConnectionInitiator.java#L101


CASSANDRA-15262 improved backward 4.0 backward compatability with 3.11 by defaulting to allowing optional encrypted connections if optional was not explicitly configured, however if an operator has not installed a keystore and an secure connection cannot possibly be established, neither the optional or required SSL  handlers should be installed.

Similarly if the operator has explicitly disabled SSL, then neither SSL handlers should be installed.

Temporarily commenting out both handlers and testing a TLS connection logs, an incoming TLS connection logs an ERROR

{code}
ERROR [Messaging-EventLoop-3-1] 2020-09-15 15:09:48,898 InboundConnectionInitiator.java:355 - Failed to properly handshake with peer /127.0.0.1:60525. Closing the channel.
io.netty.handler.codec.DecoderException: org.apache.cassandra.net.Message$InvalidLegacyProtocolMagic: Read 369295616, Expected -900387334
       at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:471)
       at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
       at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
       at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
       at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
       at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
       at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
       at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
       at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
       at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
       at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
       at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
       at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
       at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.cassandra.net.Message$InvalidLegacyProtocolMagic: Read 369295616, Expected -900387334
       at org.apache.cassandra.net.Message.validateLegacyProtocolMagic(Message.java:333)
       at org.apache.cassandra.net.HandshakeProtocol$Initiate.maybeDecode(HandshakeProtocol.java:167)
       at org.apache.cassandra.net.InboundConnectionInitiator$Handler.initiate(InboundConnectionInitiator.java:255)
       at org.apache.cassandra.net.InboundConnectionInitiator$Handler.decode(InboundConnectionInitiator.java:248)
       at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
       at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
       ... 17 common frames omitted
{code}

I think it would be helpful to an include a {{DisabledSslHandler}} that uses a similar method to the {{OptionalSSLHandler}} of waiting for enough bytes to be received, and then logging a warning about an SSL connection attempt on the port to help the operator spot misconfigurations or security scans.

There are another couple of related, but minor additional issues.

The listening message does not currently indicate whether optional secure connections are permitted, it should be explicit about whether secure connections are required, optional and possibly include the internode mode.

{code}
 INFO  [main] 2020-09-15 15:09:33,045 InboundConnectionInitiator.java:128 - Listening on address: (localhost/127.0.0.1:7000), nic: lo0, encryption: disabled
{code}

Also {{org.apache.cassandra.security.SSLFactory#buildKeyManagerFactory}} throws {{throw new IOException(""failed to build trust manager store for secure connections"", e);}} when it should be {{throw new IOException(""failed to build key manager store for secure connections"", e);}} (probably a copy/paste from {{buildTrustManagerFactory}})

Proposed changes to resolve this issue and improve behavior:

* Introduce a DisabledSslHandler that logs a WARN if an SSL connection is attempted when administratively disabled.
* Add a check that the keystore exists before defaulting optional to false (as a path to a keystore is hard-coded and simply not supplying it does not work)
* Update the listening message to be explicit about what types of encrypted connections will be accepted.
* Fix the Keystone IOException to correctly identify the Keystore as the culprit",,dcapwell,djoshi,e.dimitrova,jasonstack,jmeredithco,maedhroz,serban,,,,,"jonmeredith opened a new pull request #763:
URL: https://github.com/apache/cassandra/pull/763


   Fixes listening on optional native transport, checking SSL Keystores if only optional is enabled, disabling optional if no Keystore exists at the default path and improves logging on encryption status of listening sockets and established connections.
   
   Details in the individual commit descriptions.
   
   The first two commits are from CASSANDRA-16152 which is currently under review (but being applied to all versions, not just trunk).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Oct/20 23:39;githubbot;600","dineshjoshi commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r498988230



##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -27,6 +28,23 @@
 
 public class EncryptionOptions
 {
+    public enum TlsEncryptionPolicy
+    {
+        unencrypted(""unencrypted""), optional(""optionally encrypted""), encrypted(""encrypted"");

Review comment:
       Usual convention is to use upper case identifiers for enum elements.

##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -228,39 +228,41 @@ static SslHandler newSslHandler(Channel channel, SslContext sslContext, @Nullabl
         return sslHandler;
     }
 
-    static String encryptionLogStatement(EncryptionOptions options)
+    /**
+     * Summarizes the intended encryption options, suitable for logging. Once a connection is established, use
+     * {@link SocketFactory#encryptionConnectionSummary} below.
+     * @param options options to summarize
+     * @return description of encryption options
+     */
+    static String encryptionOptionsSummary(EncryptionOptions options)

Review comment:
       Would it be better to simply change this to:
   ```java
   if (options == null)
       return ""disabled"";
   
   String encryptionType = SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"";
   return options.tlsEncryptionPolicy().description() + '(' + encryptionType + ')';
   ```

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -83,8 +83,8 @@ public boolean authenticate(InetAddress address, int port)
 
     public String toString()
     {
-        return format(""address: (%s), nic: %s, encryption: %s"",
-                      bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
+        return format(""address: (%s), nic: %s, %s"",

Review comment:
       Could we add back `encryption: ` label?

##########
File path: src/java/org/apache/cassandra/transport/Server.java
##########
@@ -139,18 +139,19 @@ public synchronized void start()
         if (workerGroup != null)
             bootstrap = bootstrap.group(workerGroup);
 
+        final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
+
         if (this.useSSL)
         {
-            final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
-
-            if (clientEnc.optional)
+            if (clientEnc.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.optional)
             {
-                logger.info(""Enabling optionally encrypted CQL connections between client and server"");
+                logger.debug(""Enabling optionally encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new OptionalSecureInitializer(this, clientEnc));
             }
             else
             {
-                logger.info(""Enabling encrypted CQL connections between client and server"");
+                logger.debug(""Enabling encrypted CQL connections between client and server"");
+                assert clientEnc.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.encrypted : ""Unexpected policy: "" + clientEnc.tlsEncryptionPolicy();

Review comment:
       Is `clientEnc.tlsEncryptionPolicy()` guaranteed to be non-null?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Oct/20 18:46;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r499940185



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -83,8 +83,8 @@ public boolean authenticate(InetAddress address, int port)
 
     public String toString()
     {
-        return format(""address: (%s), nic: %s, encryption: %s"",
-                      bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
+        return format(""address: (%s), nic: %s, %s"",

Review comment:
       Can do - I thought it was redundant with the descriptions 'unencrypted', 'optionally encrypted' or 'encrypted' 
   
   would go from
   ```
   Listening on address: (/127.0.0.1:7012), nic: lo0, unencrypted
   Listening on address: (/127.0.0.1:7012), nic: lo0, optionally encrypted(jdk)
   Listening on address: (/127.0.0.2:7012), nic: lo0, encrypted(jdk)
   ```
   to
   ```
   Listening on address: (/127.0.0.1:7012), nic: lo0, encryption: unencrypted
   Listening on address: (/127.0.0.1:7012), nic: lo0, encryption: optionally encrypted(jdk)
   Listening on address: (/127.0.0.2:7012), nic: lo0, encryption: encrypted(jdk)
   ```
   
   Still prefer it back?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Oct/20 00:19;githubbot;600","dineshjoshi commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r500553772



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -83,8 +83,8 @@ public boolean authenticate(InetAddress address, int port)
 
     public String toString()
     {
-        return format(""address: (%s), nic: %s, encryption: %s"",
-                      bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
+        return format(""address: (%s), nic: %s, %s"",

Review comment:
       From a parsing standpoint, I prefer the second. It's easier to parse the log entries, for example, in Splunk. It is also consistent with what we print in `OutboundConnectionSettings` https://github.com/apache/cassandra/pull/763/files#diff-77d6e44359d621fcf54fef9e65dd0a10L173




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Oct/20 19:47;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r501182729



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -83,8 +83,8 @@ public boolean authenticate(InetAddress address, int port)
 
     public String toString()
     {
-        return format(""address: (%s), nic: %s, encryption: %s"",
-                      bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
+        return format(""address: (%s), nic: %s, %s"",

Review comment:
       Ok, will keep the original `encryption:` tag.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Oct/20 17:21;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r501183954



##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -228,39 +228,41 @@ static SslHandler newSslHandler(Channel channel, SslContext sslContext, @Nullabl
         return sslHandler;
     }
 
-    static String encryptionLogStatement(EncryptionOptions options)
+    /**
+     * Summarizes the intended encryption options, suitable for logging. Once a connection is established, use
+     * {@link SocketFactory#encryptionConnectionSummary} below.
+     * @param options options to summarize
+     * @return description of encryption options
+     */
+    static String encryptionOptionsSummary(EncryptionOptions options)

Review comment:
       Outputing `unencrypted(openssl)` read badly to me, and I wanted to enforce the same description of encrypted/optional/unencrypted from the enum so I was also getting rid of `disabled`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Oct/20 17:23;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r501188428



##########
File path: src/java/org/apache/cassandra/transport/Server.java
##########
@@ -139,18 +139,19 @@ public synchronized void start()
         if (workerGroup != null)
             bootstrap = bootstrap.group(workerGroup);
 
+        final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
+
         if (this.useSSL)
         {
-            final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
-
-            if (clientEnc.optional)
+            if (clientEnc.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.optional)
             {
-                logger.info(""Enabling optionally encrypted CQL connections between client and server"");
+                logger.debug(""Enabling optionally encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new OptionalSecureInitializer(this, clientEnc));
             }
             else
             {
-                logger.info(""Enabling encrypted CQL connections between client and server"");
+                logger.debug(""Enabling encrypted CQL connections between client and server"");
+                assert clientEnc.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.encrypted : ""Unexpected policy: "" + clientEnc.tlsEncryptionPolicy();

Review comment:
       Yes, I can tag it with an `@Nonnull`, as that seems used elsewhere, though I don't know what current best practice is there for static analysis tools.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Oct/20 17:31;githubbot;600","dineshjoshi commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r501223597



##########
File path: src/java/org/apache/cassandra/transport/Server.java
##########
@@ -139,18 +139,19 @@ public synchronized void start()
         if (workerGroup != null)
             bootstrap = bootstrap.group(workerGroup);
 
+        final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
+
         if (this.useSSL)
         {
-            final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
-
-            if (clientEnc.optional)
+            if (clientEnc.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.optional)
             {
-                logger.info(""Enabling optionally encrypted CQL connections between client and server"");
+                logger.debug(""Enabling optionally encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new OptionalSecureInitializer(this, clientEnc));
             }
             else
             {
-                logger.info(""Enabling encrypted CQL connections between client and server"");
+                logger.debug(""Enabling encrypted CQL connections between client and server"");
+                assert clientEnc.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.encrypted : ""Unexpected policy: "" + clientEnc.tlsEncryptionPolicy();

Review comment:
       `@NotNull` is the way to go.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Oct/20 18:26;githubbot;600","dineshjoshi commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502085602



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -503,4 +494,31 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             }
         }
     }
+
+    private static class rejectSslHandler extends ByteToMessageDecoder

Review comment:
       Class names should begin with upper-case characters.

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -98,17 +95,22 @@ public void initChannel(SocketChannel channel) throws Exception
 
             // order of handlers: ssl -> logger -> handshakeHandler
             // For either unencrypted or transitional modes, allow Ssl optionally.
-            if (settings.encryption.optional)
+            switch(settings.encryption.tlsEncryptionPolicy())
             {
-                pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
-            }
-            else
-            {
-                SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);
-                InetSocketAddress peer = settings.encryption.require_endpoint_verification ? channel.remoteAddress() : null;
-                SslHandler sslHandler = newSslHandler(channel, sslContext, peer);
-                logger.trace(""creating inbound netty SslContext: context={}, engine={}"", sslContext.getClass().getName(), sslHandler.engine().getClass().getName());
-                pipeline.addFirst(""ssl"", sslHandler);
+                case UNENCRYPTED:
+                    // Handler checks for SSL connection attempts and cleanly rejects them if encryption is disabled
+                    pipeline.addFirst(""rejectssl"", new rejectSslHandler());
+                    break;
+                case OPTIONAL:
+                    pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
+                    break;
+                case ENCRYPTED:
+                    SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);

Review comment:
       Nit: If its not a big deal, could you create a constant `BUILD_TRUST_STORE=true` and pass it in. Makes the code a bit more readable. If you feel too ambitious, make this into a builder.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 00:04;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502109182



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -503,4 +494,31 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             }
         }
     }
+
+    private static class rejectSslHandler extends ByteToMessageDecoder

Review comment:
       ack, thought I was copying existing convention for the Optional handle, but I'm obviously not.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 01:01;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502110687



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -98,17 +95,22 @@ public void initChannel(SocketChannel channel) throws Exception
 
             // order of handlers: ssl -> logger -> handshakeHandler
             // For either unencrypted or transitional modes, allow Ssl optionally.
-            if (settings.encryption.optional)
+            switch(settings.encryption.tlsEncryptionPolicy())
             {
-                pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
-            }
-            else
-            {
-                SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);
-                InetSocketAddress peer = settings.encryption.require_endpoint_verification ? channel.remoteAddress() : null;
-                SslHandler sslHandler = newSslHandler(channel, sslContext, peer);
-                logger.trace(""creating inbound netty SslContext: context={}, engine={}"", sslContext.getClass().getName(), sslHandler.engine().getClass().getName());
-                pipeline.addFirst(""ssl"", sslHandler);
+                case UNENCRYPTED:
+                    // Handler checks for SSL connection attempts and cleanly rejects them if encryption is disabled
+                    pipeline.addFirst(""rejectssl"", new rejectSslHandler());
+                    break;
+                case OPTIONAL:
+                    pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
+                    break;
+                case ENCRYPTED:
+                    SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);

Review comment:
       Went with the low effort route as there's already more than I wanted to refactor in the beta.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 01:04;githubbot;600","dineshjoshi commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502085602



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -503,4 +494,31 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             }
         }
     }
+
+    private static class rejectSslHandler extends ByteToMessageDecoder

Review comment:
       Class names should begin with upper-case characters.

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -98,17 +95,22 @@ public void initChannel(SocketChannel channel) throws Exception
 
             // order of handlers: ssl -> logger -> handshakeHandler
             // For either unencrypted or transitional modes, allow Ssl optionally.
-            if (settings.encryption.optional)
+            switch(settings.encryption.tlsEncryptionPolicy())
             {
-                pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
-            }
-            else
-            {
-                SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);
-                InetSocketAddress peer = settings.encryption.require_endpoint_verification ? channel.remoteAddress() : null;
-                SslHandler sslHandler = newSslHandler(channel, sslContext, peer);
-                logger.trace(""creating inbound netty SslContext: context={}, engine={}"", sslContext.getClass().getName(), sslHandler.engine().getClass().getName());
-                pipeline.addFirst(""ssl"", sslHandler);
+                case UNENCRYPTED:
+                    // Handler checks for SSL connection attempts and cleanly rejects them if encryption is disabled
+                    pipeline.addFirst(""rejectssl"", new rejectSslHandler());
+                    break;
+                case OPTIONAL:
+                    pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
+                    break;
+                case ENCRYPTED:
+                    SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);

Review comment:
       Nit: If its not a big deal, could you create a constant `BUILD_TRUST_STORE=true` and pass it in. Makes the code a bit more readable. If you feel too ambitious, make this into a builder.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 13:49;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502109182



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -503,4 +494,31 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
             }
         }
     }
+
+    private static class rejectSslHandler extends ByteToMessageDecoder

Review comment:
       ack, thought I was copying existing convention for the Optional handle, but I'm obviously not.

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -98,17 +95,22 @@ public void initChannel(SocketChannel channel) throws Exception
 
             // order of handlers: ssl -> logger -> handshakeHandler
             // For either unencrypted or transitional modes, allow Ssl optionally.
-            if (settings.encryption.optional)
+            switch(settings.encryption.tlsEncryptionPolicy())
             {
-                pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
-            }
-            else
-            {
-                SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);
-                InetSocketAddress peer = settings.encryption.require_endpoint_verification ? channel.remoteAddress() : null;
-                SslHandler sslHandler = newSslHandler(channel, sslContext, peer);
-                logger.trace(""creating inbound netty SslContext: context={}, engine={}"", sslContext.getClass().getName(), sslHandler.engine().getClass().getName());
-                pipeline.addFirst(""ssl"", sslHandler);
+                case UNENCRYPTED:
+                    // Handler checks for SSL connection attempts and cleanly rejects them if encryption is disabled
+                    pipeline.addFirst(""rejectssl"", new rejectSslHandler());
+                    break;
+                case OPTIONAL:
+                    pipeline.addFirst(""ssl"", new OptionalSslHandler(settings.encryption));
+                    break;
+                case ENCRYPTED:
+                    SslContext sslContext = SSLFactory.getOrCreateSslContext(settings.encryption, true, SSLFactory.SocketType.SERVER);

Review comment:
       Went with the low effort route as there's already more than I wanted to refactor in the beta.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 14:00;githubbot;600","dcapwell commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502706371



##########
File path: src/java/org/apache/cassandra/db/virtual/SimpleDataSet.java
##########
@@ -84,7 +84,7 @@ private DecoratedKey makeDecoratedKey(Object... partitionKeyValues)
     {
         ByteBuffer partitionKey = partitionKeyValues.length == 1
                                 ? decompose(metadata.partitionKeyType, partitionKeyValues[0])
-                                : ((CompositeType) metadata.partitionKeyType).decompose(ByteBufferAccessor.instance, partitionKeyValues);

Review comment:
       teehee




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 23:05;githubbot;600","dcapwell commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r502706774



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -460,14 +447,24 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
                         handler.id(true),
                         useMessagingVersion,
                         initiate.framing,
-                        pipeline.get(""ssl"") != null ? encryptionLogStatement(pipeline.channel(), settings.encryption) : ""disabled"");
+                        SocketFactory.encryptionConnectionSummary(pipeline.channel()));
 
             pipeline.addLast(""deserialize"", handler);
 
             pipeline.remove(this);
         }
     }
 
+    private static SslHandler getSslHandler(String description, Channel channel, EncryptionOptions.ServerEncryptionOptions encryptionOptions) throws IOException
+    {
+        final boolean BUILD_TRUST_STORE = true;

Review comment:
       `s/BUILD_TRUST_STORE/buildTrustStore/g`

##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -302,6 +363,30 @@ public boolean isEnabled() {
             return this.internode_encryption != InternodeEncryption.none;
         }
 
+        @Override
+        public TlsEncryptionPolicy tlsEncryptionPolicy()
+        {
+            if (this.enabled != null)
+            {
+                throw new ConfigurationException(""enabled should not be configured for server_encryption_policy, must use internode_encryption"");

Review comment:
       do you mean `server_encryption_options` instead of `server_encryption_policy`?

##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -114,19 +119,74 @@ public EncryptionOptions(EncryptionOptions options)
      * @return if the channel should be encrypted
      */
     public boolean isEnabled() {
-        return this.enabled;
+        return this.enabled != null && enabled;
     }
 
     /**
      * Sets if encryption should be enabled for this channel. Note that this should only be called by
      * the configuration parser or tests. It is public only for that purpose, mutating enabled state
      * is probably a bad idea.
-     * @param enabled
+     * @param enabled value to set
      */
     public void setEnabled(boolean enabled) {
         this.enabled = enabled;
     }
 
+    protected void unsetEnabled()
+    {
+        this.enabled = null;
+    }
+
+    /**
+     * Indicates if the channel may be encrypted (but is not requried to be).
+     * Explicitly providing a value in the configuration take precedent.
+     * If no optional value is set and !isEnabled(), then optional connections are allowed
+     * if a keystore exists. Without it, it would be impossible to establish the connections.
+     * @return if the channel may be encrypted
+     */
+    public boolean isOptional()
+    {
+        if (optional != null)
+            return optional;
+
+        // If someone is asking for an _insecure_ connection and not explicitly telling us to refuse
+        // encrypted connections AND they have a keystore file, we assume they would like to be able
+        // to transition to encrypted connections in the future.
+        if (new File(keystore).exists())

Review comment:
       can we move this into the constructor?  would be good to avoid touching the filesystem every time a new connection is opened;  do we allow updating keystore at runtime, if so how do we detect this?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Oct/20 19:43;githubbot;600","dcapwell commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r503503981



##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -280,13 +340,14 @@ public int hashCode()
 
         public ServerEncryptionOptions()
         {
+            unsetEnabled(); // set to null DatabaseDescriptor can check if it was explicitly set.

Review comment:
       is this needed?  the default is null so setting null shouldn't be required.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Oct/20 19:56;githubbot;600","dcapwell commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r503575716



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -460,14 +447,24 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
                         handler.id(true),
                         useMessagingVersion,
                         initiate.framing,
-                        pipeline.get(""ssl"") != null ? encryptionLogStatement(pipeline.channel(), settings.encryption) : ""disabled"");
+                        SocketFactory.encryptionConnectionSummary(pipeline.channel()));
 
             pipeline.addLast(""deserialize"", handler);
 
             pipeline.remove(this);
         }
     }
 
+    private static SslHandler getSslHandler(String description, Channel channel, EncryptionOptions.ServerEncryptionOptions encryptionOptions) throws IOException
+    {
+        final boolean BUILD_TRUST_STORE = true;
+        SslContext sslContext = SSLFactory.getOrCreateSslContext(encryptionOptions, BUILD_TRUST_STORE, SSLFactory.SocketType.SERVER);
+        InetSocketAddress peer = encryptionOptions.require_endpoint_verification ? (InetSocketAddress) channel.remoteAddress() : null;
+        SslHandler sslHandler = newSslHandler(channel, sslContext, peer);
+        logger.trace(description + "" inbound netty SslContext: context={}, engine={}"", sslContext.getClass().getName(), sslHandler.engine().getClass().getName());

Review comment:
       nit, `logger.trace(""{} inbound netty..."", description, sslContext.getClass().getName(), sslHandler.engine().getClass().getName());`

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -83,8 +83,8 @@ public boolean authenticate(InetAddress address, int port)
 
     public String toString()
     {
-        return format(""address: (%s), nic: %s, encryption: %s"",
-                      bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
+        return format(""address: (%s), nic: %s, encrypted: %s"",

Review comment:
       wasn't encryption correct before?  you are doing a summary and not a boolean; the following feels weird
   
   ```
   encrypted: unencrypted
   ```

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -460,14 +447,24 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
                         handler.id(true),
                         useMessagingVersion,
                         initiate.framing,
-                        pipeline.get(""ssl"") != null ? encryptionLogStatement(pipeline.channel(), settings.encryption) : ""disabled"");
+                        SocketFactory.encryptionConnectionSummary(pipeline.channel()));
 
             pipeline.addLast(""deserialize"", handler);
 
             pipeline.remove(this);
         }
     }
 
+    private static SslHandler getSslHandler(String description, Channel channel, EncryptionOptions.ServerEncryptionOptions encryptionOptions) throws IOException
+    {
+        final boolean BUILD_TRUST_STORE = true;

Review comment:
       also only looks like its used in one place, so kinda prefer the code before that just added true into the method params

##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -228,39 +228,41 @@ static SslHandler newSslHandler(Channel channel, SslContext sslContext, @Nullabl
         return sslHandler;
     }
 
-    static String encryptionLogStatement(EncryptionOptions options)
+    /**
+     * Summarizes the intended encryption options, suitable for logging. Once a connection is established, use
+     * {@link SocketFactory#encryptionConnectionSummary} below.
+     * @param options options to summarize
+     * @return description of encryption options
+     */
+    static String encryptionOptionsSummary(EncryptionOptions options)
     {
-        if (options == null)
-            return ""disabled"";
+        if (options == null || options.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED)
+            return EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED.description();
 
         String encryptionType = SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"";
-        return ""enabled ("" + encryptionType + ')';
+        return options.tlsEncryptionPolicy().description() + '(' + encryptionType + ')';
     }
 
-    static String encryptionLogStatement(Channel channel, EncryptionOptions options)
+    /**
+     * Summarizes the encryption status of a channel, suitable for logging.
+     * @return description of channel encryption
+     */
+    static String encryptionConnectionSummary(Channel channel)
     {
-        if (options == null || !options.isEnabled())
-            return ""disabled"";
-
-        StringBuilder sb = new StringBuilder(64);
-        if (options.optional)
-            sb.append(""optional (factory="");
-        else
-            sb.append(""enabled (factory="");
-        sb.append(SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"");
-
-        final SslHandler sslHandler = channel == null ? null : channel.pipeline().get(SslHandler.class);
-        if (sslHandler != null)
+        final SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
+        if (sslHandler == null)
         {
-            SSLSession session = sslHandler.engine().getSession();
-            sb.append("";protocol="")
-              .append(session.getProtocol())
-              .append("";cipher="")
-              .append(session.getCipherSuite());
+            return EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED.description();
         }
-
-        sb.append(')');
-        return sb.toString();
+        SSLSession session = sslHandler.engine().getSession();
+
+        return  ""encrypted(factory="" +
+                (SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"") +
+                "";protocol="" +
+                (session != null ? session.getProtocol() : ""MISSING SESSION"") +

Review comment:
       why is session nullable now but wasn't before the patch?  

##########
File path: src/java/org/apache/cassandra/net/InboundSockets.java
##########
@@ -202,7 +203,8 @@ private static void addBindings(InboundConnectionSettings template, ImmutableLis
         InboundConnectionSettings       settings = template.withDefaults();
         InboundConnectionSettings legacySettings = template.withLegacyDefaults();
 
-        if (settings.encryption.enable_legacy_ssl_storage_port)
+        if (settings.encryption.enable_legacy_ssl_storage_port &&

Review comment:
       I am wondering if it would be better to push this logic into `org.apache.cassandra.net.InboundConnectionSettings` rather than have here? or DatabaseDescriptor (only allow true if encryptions != none

##########
File path: src/java/org/apache/cassandra/transport/Server.java
##########
@@ -139,29 +137,27 @@ public synchronized void start()
         if (workerGroup != null)
             bootstrap = bootstrap.group(workerGroup);
 
-        if (this.useSSL)
-        {
-            final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
+        final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
 
-            if (clientEnc.optional)
-            {
-                logger.info(""Enabling optionally encrypted CQL connections between client and server"");
+        switch (this.tlsEncryptionPolicy)
+        {
+            case UNENCRYPTED:
+                bootstrap.childHandler(new Initializer(this));
+                break;
+            case OPTIONAL:
+                logger.debug(""Enabling optionally encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new OptionalSecureInitializer(this, clientEnc));
-            }
-            else
-            {
-                logger.info(""Enabling encrypted CQL connections between client and server"");
+                break;
+            case ENCRYPTED:
+                logger.debug(""Enabling encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new SecureInitializer(this, clientEnc));
-            }
-        }
-        else
-        {
-            bootstrap.childHandler(new Initializer(this));
+                break;
+            default:
+                throw new IllegalStateException(""Unrecognized TLS encryption policy: "" + this.tlsEncryptionPolicy);
         }
 
         // Bind and start to accept incoming connections.
-        logger.info(""Using Netty Version: {}"", Version.identify().entrySet());

Review comment:
       why move this log to a different location?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Oct/20 23:33;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504095689



##########
File path: src/java/org/apache/cassandra/transport/Server.java
##########
@@ -139,29 +137,27 @@ public synchronized void start()
         if (workerGroup != null)
             bootstrap = bootstrap.group(workerGroup);
 
-        if (this.useSSL)
-        {
-            final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
+        final EncryptionOptions clientEnc = DatabaseDescriptor.getNativeProtocolEncryptionOptions();
 
-            if (clientEnc.optional)
-            {
-                logger.info(""Enabling optionally encrypted CQL connections between client and server"");
+        switch (this.tlsEncryptionPolicy)
+        {
+            case UNENCRYPTED:
+                bootstrap.childHandler(new Initializer(this));
+                break;
+            case OPTIONAL:
+                logger.debug(""Enabling optionally encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new OptionalSecureInitializer(this, clientEnc));
-            }
-            else
-            {
-                logger.info(""Enabling encrypted CQL connections between client and server"");
+                break;
+            case ENCRYPTED:
+                logger.debug(""Enabling encrypted CQL connections between client and server"");
                 bootstrap.childHandler(new SecureInitializer(this, clientEnc));
-            }
-        }
-        else
-        {
-            bootstrap.childHandler(new Initializer(this));
+                break;
+            default:
+                throw new IllegalStateException(""Unrecognized TLS encryption policy: "" + this.tlsEncryptionPolicy);
         }
 
         // Bind and start to accept incoming connections.
-        logger.info(""Using Netty Version: {}"", Version.identify().entrySet());

Review comment:
       It prevents it being logged twice if there is a separate SSL port specified. We only need Netty version information once.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:32;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504102063



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -460,14 +447,24 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
                         handler.id(true),
                         useMessagingVersion,
                         initiate.framing,
-                        pipeline.get(""ssl"") != null ? encryptionLogStatement(pipeline.channel(), settings.encryption) : ""disabled"");
+                        SocketFactory.encryptionConnectionSummary(pipeline.channel()));
 
             pipeline.addLast(""deserialize"", handler);
 
             pipeline.remove(this);
         }
     }
 
+    private static SslHandler getSslHandler(String description, Channel channel, EncryptionOptions.ServerEncryptionOptions encryptionOptions) throws IOException
+    {
+        final boolean BUILD_TRUST_STORE = true;

Review comment:
       it was a review comment from Dinesh that I agreed with, I think it's about conveying more meaning than a simple boolean rather than rely on the IDE to provide hints what they mean.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:39;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504102639



##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -302,6 +363,30 @@ public boolean isEnabled() {
             return this.internode_encryption != InternodeEncryption.none;
         }
 
+        @Override
+        public TlsEncryptionPolicy tlsEncryptionPolicy()
+        {
+            if (this.enabled != null)
+            {
+                throw new ConfigurationException(""enabled should not be configured for server_encryption_policy, must use internode_encryption"");

Review comment:
       good eye, thanks.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:40;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504105429



##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -280,13 +340,14 @@ public int hashCode()
 
         public ServerEncryptionOptions()
         {
+            unsetEnabled(); // set to null DatabaseDescriptor can check if it was explicitly set.

Review comment:
       Agreed -- not needed.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:43;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504110164



##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -280,13 +340,14 @@ public int hashCode()
 
         public ServerEncryptionOptions()
         {
+            unsetEnabled(); // set to null DatabaseDescriptor can check if it was explicitly set.

Review comment:
       So removing in the current form causes test failures as the Yaml config loader I was originally using initializes the enabled field.
   
   ```
   Caused by: org.apache.cassandra.exceptions.ConfigurationException: enabled should not be configured for server_encryption_options, must use internode_encryption
   	at org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions.tlsEncryptionPolicy(EncryptionOptions.java:365)
   	at org.apache.cassandra.security.SSLFactory.validateSslCerts(SSLFactory.java:409)
   	... 12 more
   ```
   
   I'll try with the improved version.
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:50;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504111207



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -460,14 +447,24 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
                         handler.id(true),
                         useMessagingVersion,
                         initiate.framing,
-                        pipeline.get(""ssl"") != null ? encryptionLogStatement(pipeline.channel(), settings.encryption) : ""disabled"");
+                        SocketFactory.encryptionConnectionSummary(pipeline.channel()));
 
             pipeline.addLast(""deserialize"", handler);
 
             pipeline.remove(this);
         }
     }
 
+    private static SslHandler getSslHandler(String description, Channel channel, EncryptionOptions.ServerEncryptionOptions encryptionOptions) throws IOException
+    {
+        final boolean BUILD_TRUST_STORE = true;
+        SslContext sslContext = SSLFactory.getOrCreateSslContext(encryptionOptions, BUILD_TRUST_STORE, SSLFactory.SocketType.SERVER);
+        InetSocketAddress peer = encryptionOptions.require_endpoint_verification ? (InetSocketAddress) channel.remoteAddress() : null;
+        SslHandler sslHandler = newSslHandler(channel, sslContext, peer);
+        logger.trace(description + "" inbound netty SslContext: context={}, engine={}"", sslContext.getClass().getName(), sslHandler.engine().getClass().getName());

Review comment:
       ack




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:51;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504111775



##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -228,39 +228,41 @@ static SslHandler newSslHandler(Channel channel, SslContext sslContext, @Nullabl
         return sslHandler;
     }
 
-    static String encryptionLogStatement(EncryptionOptions options)
+    /**
+     * Summarizes the intended encryption options, suitable for logging. Once a connection is established, use
+     * {@link SocketFactory#encryptionConnectionSummary} below.
+     * @param options options to summarize
+     * @return description of encryption options
+     */
+    static String encryptionOptionsSummary(EncryptionOptions options)
     {
-        if (options == null)
-            return ""disabled"";
+        if (options == null || options.tlsEncryptionPolicy() == EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED)
+            return EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED.description();
 
         String encryptionType = SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"";
-        return ""enabled ("" + encryptionType + ')';
+        return options.tlsEncryptionPolicy().description() + '(' + encryptionType + ')';
     }
 
-    static String encryptionLogStatement(Channel channel, EncryptionOptions options)
+    /**
+     * Summarizes the encryption status of a channel, suitable for logging.
+     * @return description of channel encryption
+     */
+    static String encryptionConnectionSummary(Channel channel)
     {
-        if (options == null || !options.isEnabled())
-            return ""disabled"";
-
-        StringBuilder sb = new StringBuilder(64);
-        if (options.optional)
-            sb.append(""optional (factory="");
-        else
-            sb.append(""enabled (factory="");
-        sb.append(SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"");
-
-        final SslHandler sslHandler = channel == null ? null : channel.pipeline().get(SslHandler.class);
-        if (sslHandler != null)
+        final SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
+        if (sslHandler == null)
         {
-            SSLSession session = sslHandler.engine().getSession();
-            sb.append("";protocol="")
-              .append(session.getProtocol())
-              .append("";cipher="")
-              .append(session.getCipherSuite());
+            return EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED.description();
         }
-
-        sb.append(')');
-        return sb.toString();
+        SSLSession session = sslHandler.engine().getSession();
+
+        return  ""encrypted(factory="" +
+                (SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"") +
+                "";protocol="" +
+                (session != null ? session.getProtocol() : ""MISSING SESSION"") +

Review comment:
       Pure paranoia. I didn't want to lose diagnostic information from the log statements in the event of a crash building the string used there.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:52;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r504111946



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -83,8 +83,8 @@ public boolean authenticate(InetAddress address, int port)
 
     public String toString()
     {
-        return format(""address: (%s), nic: %s, encryption: %s"",
-                      bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
+        return format(""address: (%s), nic: %s, encrypted: %s"",

Review comment:
       bah, fail putting it back the way it was before a comment from Dinesh. Will fix.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Oct/20 16:53;githubbot;600","dineshjoshi commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r505001534



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -460,14 +447,24 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
                         handler.id(true),
                         useMessagingVersion,
                         initiate.framing,
-                        pipeline.get(""ssl"") != null ? encryptionLogStatement(pipeline.channel(), settings.encryption) : ""disabled"");
+                        SocketFactory.encryptionConnectionSummary(pipeline.channel()));
 
             pipeline.addLast(""deserialize"", handler);
 
             pipeline.remove(this);
         }
     }
 
+    private static SslHandler getSslHandler(String description, Channel channel, EncryptionOptions.ServerEncryptionOptions encryptionOptions) throws IOException
+    {
+        final boolean BUILD_TRUST_STORE = true;

Review comment:
       I'd prefer to keep it as a constant. Not everybody is going to open the code in IntelliJ idea. We follow the Sun Java coding standards with slight modifications. [Constants are to be named all in upper case with underscores as a separator](https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Oct/20 22:00;githubbot;600","dcapwell commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r508131591



##########
File path: src/java/org/apache/cassandra/config/DatabaseDescriptor.java
##########
@@ -757,9 +757,13 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i
             throw new ConfigurationException(""commitlog_segment_size_in_mb must be at least twice the size of max_mutation_size_in_kb / 1024"", false);
 
         // native transport encryption options
+        if (conf.client_encryption_options != null)
+        {
+            conf.client_encryption_options.applyConfig();
+        }
         if (conf.native_transport_port_ssl != null

Review comment:
       maybe move this into the null check if statement like you did for server_encryption_options?

##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -98,14 +113,50 @@ public EncryptionOptions(EncryptionOptions options)
         require_client_auth = options.require_client_auth;
         require_endpoint_verification = options.require_endpoint_verification;
         enabled = options.enabled;
-        if (options.optional != null) {
-            optional = options.optional;
-        } else {
-            // If someone is asking for an _insecure_ connection and not explicitly telling us to refuse
-            // encrypted connections we assume they would like to be able to transition to encrypted connections
-            // in the future.
-            optional = !enabled;
+        this.optional = options.optional;
+    }
+
+    /* Computes enabled and optional before use. Because the configuration can be loaded
+     * through pluggable mechanisms this is the only safe way to make sure that
+     * enabled and optional are set correctly.
+     */
+    public EncryptionOptions applyConfig()
+    {
+        if (isEnabled != null || isOptional != null)

Review comment:
       should this call `ensureConfigNotApplied`?

##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -114,19 +165,61 @@ public EncryptionOptions(EncryptionOptions options)
      * @return if the channel should be encrypted
      */
     public boolean isEnabled() {
-        return this.enabled;
+        ensureConfigApplied();
+        return isEnabled;
     }
 
     /**
      * Sets if encryption should be enabled for this channel. Note that this should only be called by
      * the configuration parser or tests. It is public only for that purpose, mutating enabled state
      * is probably a bad idea.
-     * @param enabled
+     * @param enabled value to set
      */
     public void setEnabled(boolean enabled) {

Review comment:
       I am not sure why the test doesn't seem to pick this up, but since the field is no longer public the test you added is failing.

##########
File path: test/distributed/org/apache/cassandra/distributed/test/AbstractEncryptionOptionsTest.java
##########
@@ -0,0 +1,295 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+
+import com.google.common.collect.ImmutableMap;
+import org.junit.Assert;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import io.netty.bootstrap.Bootstrap;
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioSocketChannel;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import io.netty.handler.ssl.SslContext;
+import io.netty.handler.ssl.SslHandler;
+import io.netty.util.concurrent.FutureListener;
+import org.apache.cassandra.config.EncryptionOptions;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.exceptions.ConfigurationException;
+import org.apache.cassandra.security.SSLFactory;
+import org.apache.cassandra.utils.concurrent.SimpleCondition;
+
+public class AbstractEncryptionOptionsTest extends TestBaseImpl

Review comment:
       this is causing CI to fail as CI searches for files that match this pattern: `*Test.java`, can you rename this to remove `Test`?

##########
File path: src/java/org/apache/cassandra/net/InboundSockets.java
##########
@@ -37,6 +37,7 @@
 import io.netty.util.concurrent.SucceededFuture;
 import org.apache.cassandra.concurrent.NamedThreadFactory;
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.config.EncryptionOptions;

Review comment:
       can you remove?  unused import

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -157,7 +157,8 @@ public InboundConnectionSettings withLegacyDefaults()
         ServerEncryptionOptions encryption = this.encryption;
         if (encryption == null)
             encryption = DatabaseDescriptor.getInternodeMessagingEncyptionOptions();
-        encryption = encryption.withOptional(false);
+        encryption = encryption.withOptional(false).withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all);

Review comment:
       in 3.0 I see the default is `none` and not `all`

##########
File path: src/java/org/apache/cassandra/config/YamlConfigurationLoader.java
##########
@@ -135,6 +128,22 @@ public Config loadConfig(URL url) throws ConfigurationException
         }
     }
 
+    public static <T> T parseYamlString(Class<T> klass, String yamlString)
+    {
+        return parseYamlBytes(klass, yamlString.getBytes());
+    }
+
+    private static <T> T parseYamlBytes(Class<T> klass, byte[] configBytes)
+    {
+        Constructor constructor = new CustomConstructor(klass, Thread.currentThread().getContextClassLoader());

Review comment:
       should this be `Yaml.class.getClassLoader()` or `klass.getClassLoader()`?

##########
File path: src/java/org/apache/cassandra/config/YamlConfigurationLoader.java
##########
@@ -135,6 +128,22 @@ public Config loadConfig(URL url) throws ConfigurationException
         }
     }
 
+    public static <T> T parseYamlString(Class<T> klass, String yamlString)
+    {
+        return parseYamlBytes(klass, yamlString.getBytes());

Review comment:
       should be `yamlString.getBytes(StandardCharsets.UTF_8)`; `getBytes()` is host specific, so some hosts may be utf-8, others may be ascii.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Oct/20 21:49;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r509682394



##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -114,19 +165,61 @@ public EncryptionOptions(EncryptionOptions options)
      * @return if the channel should be encrypted
      */
     public boolean isEnabled() {
-        return this.enabled;
+        ensureConfigApplied();
+        return isEnabled;
     }
 
     /**
      * Sets if encryption should be enabled for this channel. Note that this should only be called by
      * the configuration parser or tests. It is public only for that purpose, mutating enabled state
      * is probably a bad idea.
-     * @param enabled
+     * @param enabled value to set
      */
     public void setEnabled(boolean enabled) {

Review comment:
       Digging into this, snakeyaml finds `isEnabled` when deciding how to read/write to EncryptionOptions and needs the isEnabled/isOptional types to match exactly.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 20:47;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r509682740



##########
File path: src/java/org/apache/cassandra/config/DatabaseDescriptor.java
##########
@@ -757,9 +757,13 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i
             throw new ConfigurationException(""commitlog_segment_size_in_mb must be at least twice the size of max_mutation_size_in_kb / 1024"", false);
 
         // native transport encryption options
+        if (conf.client_encryption_options != null)
+        {
+            conf.client_encryption_options.applyConfig();
+        }
         if (conf.native_transport_port_ssl != null

Review comment:
       will do.

##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -98,14 +113,50 @@ public EncryptionOptions(EncryptionOptions options)
         require_client_auth = options.require_client_auth;
         require_endpoint_verification = options.require_endpoint_verification;
         enabled = options.enabled;
-        if (options.optional != null) {
-            optional = options.optional;
-        } else {
-            // If someone is asking for an _insecure_ connection and not explicitly telling us to refuse
-            // encrypted connections we assume they would like to be able to transition to encrypted connections
-            // in the future.
-            optional = !enabled;
+        this.optional = options.optional;
+    }
+
+    /* Computes enabled and optional before use. Because the configuration can be loaded
+     * through pluggable mechanisms this is the only safe way to make sure that
+     * enabled and optional are set correctly.
+     */
+    public EncryptionOptions applyConfig()
+    {
+        if (isEnabled != null || isOptional != null)

Review comment:
       absoutely, thanks.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 20:47;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r509683311



##########
File path: test/distributed/org/apache/cassandra/distributed/test/AbstractEncryptionOptionsTest.java
##########
@@ -0,0 +1,295 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+
+import com.google.common.collect.ImmutableMap;
+import org.junit.Assert;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import io.netty.bootstrap.Bootstrap;
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioSocketChannel;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import io.netty.handler.ssl.SslContext;
+import io.netty.handler.ssl.SslHandler;
+import io.netty.util.concurrent.FutureListener;
+import org.apache.cassandra.config.EncryptionOptions;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.exceptions.ConfigurationException;
+import org.apache.cassandra.security.SSLFactory;
+import org.apache.cassandra.utils.concurrent.SimpleCondition;
+
+public class AbstractEncryptionOptionsTest extends TestBaseImpl

Review comment:
       will do

##########
File path: src/java/org/apache/cassandra/net/InboundSockets.java
##########
@@ -37,6 +37,7 @@
 import io.netty.util.concurrent.SucceededFuture;
 import org.apache.cassandra.concurrent.NamedThreadFactory;
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.config.EncryptionOptions;

Review comment:
       ack




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 20:48;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r509684525



##########
File path: src/java/org/apache/cassandra/config/YamlConfigurationLoader.java
##########
@@ -135,6 +128,22 @@ public Config loadConfig(URL url) throws ConfigurationException
         }
     }
 
+    public static <T> T parseYamlString(Class<T> klass, String yamlString)
+    {
+        return parseYamlBytes(klass, yamlString.getBytes());

Review comment:
       should be handled by updates to CASSANDRA-16152 now.

##########
File path: src/java/org/apache/cassandra/config/YamlConfigurationLoader.java
##########
@@ -135,6 +128,22 @@ public Config loadConfig(URL url) throws ConfigurationException
         }
     }
 
+    public static <T> T parseYamlString(Class<T> klass, String yamlString)
+    {
+        return parseYamlBytes(klass, yamlString.getBytes());
+    }
+
+    private static <T> T parseYamlBytes(Class<T> klass, byte[] configBytes)
+    {
+        Constructor constructor = new CustomConstructor(klass, Thread.currentThread().getContextClassLoader());

Review comment:
       should be handled by updates to CASSANDRA-16152 now.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 20:49;githubbot;600","jonmeredith commented on a change in pull request #763:
URL: https://github.com/apache/cassandra/pull/763#discussion_r509686211



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionSettings.java
##########
@@ -157,7 +157,8 @@ public InboundConnectionSettings withLegacyDefaults()
         ServerEncryptionOptions encryption = this.encryption;
         if (encryption == null)
             encryption = DatabaseDescriptor.getInternodeMessagingEncyptionOptions();
-        encryption = encryption.withOptional(false);
+        encryption = encryption.withOptional(false).withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all);

Review comment:
       The `withLegacyDefaults` template is used if the legacy ssl storage port is enabled, and connections on that port should always be encrypted so I defaulted to `all` to make sure the SSL handler (and not the optional SSL handler) was installed.

##########
File path: src/java/org/apache/cassandra/config/DatabaseDescriptor.java
##########
@@ -757,9 +757,13 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i
             throw new ConfigurationException(""commitlog_segment_size_in_mb must be at least twice the size of max_mutation_size_in_kb / 1024"", false);
 
         // native transport encryption options
+        if (conf.client_encryption_options != null)
+        {
+            conf.client_encryption_options.applyConfig();
+        }
         if (conf.native_transport_port_ssl != null

Review comment:
       ack, can't check the encryption policy if the client encryption options are null.

##########
File path: src/java/org/apache/cassandra/config/EncryptionOptions.java
##########
@@ -98,14 +113,50 @@ public EncryptionOptions(EncryptionOptions options)
         require_client_auth = options.require_client_auth;
         require_endpoint_verification = options.require_endpoint_verification;
         enabled = options.enabled;
-        if (options.optional != null) {
-            optional = options.optional;
-        } else {
-            // If someone is asking for an _insecure_ connection and not explicitly telling us to refuse
-            // encrypted connections we assume they would like to be able to transition to encrypted connections
-            // in the future.
-            optional = !enabled;
+        this.optional = options.optional;
+    }
+
+    /* Computes enabled and optional before use. Because the configuration can be loaded
+     * through pluggable mechanisms this is the only safe way to make sure that
+     * enabled and optional are set correctly.
+     */
+    public EncryptionOptions applyConfig()
+    {
+        if (isEnabled != null || isOptional != null)

Review comment:
       heh, refactor fail. Yes it should.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 20:51;githubbot;600","jonmeredith closed pull request #763:
URL: https://github.com/apache/cassandra/pull/763


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 16:57;githubbot;600","jonmeredith commented on pull request #763:
URL: https://github.com/apache/cassandra/pull/763#issuecomment-778314165


   Merged.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 16:57;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,20400,,,0,20400,,,,,,,,,,,,,,CASSANDRA-16068,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16280,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Normal,Shadow Traffic,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Nov 05 21:04:28 UTC 2020,,,,,,,All,,,,,,"0|z0iutk:",9223372036854775807,,,,dcapwell,djoshi,,,Normal,,4.0-beta1,,, https://github.com/apache/cassandra/commit/76555088561d3412ca6a06c0b6359cd01f07326c,,,,,,,,,New tests added under unit and distributed. ,,,,,"01/Oct/20 23:41;jmeredithco;[PR|https://github.com/apache/cassandra/pull/763]
[Branch|https://github.com/jonmeredith/cassandra/tree/C16144]
[CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16144]
 ;;;","20/Oct/20 21:31;dcapwell;CI is failing

{code}
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.AbstractEncryptionOptionsTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.AbstractEncryptionOptionsTest Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.046 sec
[junit-timeout] 
[junit-timeout] Testcase: initializationError(org.apache.cassandra.distributed.test.AbstractEncryptionOptionsTest):	Caused an ERROR
[junit-timeout] No runnable methods
[junit-timeout] java.lang.Exception: No runnable methods
[junit-timeout] 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
{code}

Our builds are not smart, they search for files with the following pattern: 
{code:java}
*Test.java
{code}

since your abstract class matches that pattern, it tried to run it and failed.

Also the new yaml test failed

{code}
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.JVMDTestTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.JVMDTestTest Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 151.146 sec
[junit-timeout] 
[junit-timeout] Testcase: nonSharedConfigClassTest(org.apache.cassandra.distributed.test.JVMDTestTest):	Caused an ERROR
[junit-timeout] Unable to find getter for property 'enabled' on object org.apache.cassandra.config.EncryptionOptions@bb156a7f:java.lang.reflect.InvocationTargetException
[junit-timeout] org.yaml.snakeyaml.error.YAMLException: Unable to find getter for property 'enabled' on object org.apache.cassandra.config.EncryptionOptions@bb156a7f:java.lang.reflect.InvocationTargetException
[junit-timeout] 	at org.yaml.snakeyaml.introspector.MethodProperty.get(MethodProperty.java:86)
[junit-timeout] 	at org.yaml.snakeyaml.representer.Representer.representJavaBean(Representer.java:108)
[junit-timeout] 	at org.yaml.snakeyaml.representer.Representer$RepresentJavaBean.representData(Representer.java:80)
[junit-timeout] 	at org.yaml.snakeyaml.representer.BaseRepresenter.representData(BaseRepresenter.java:106)
[junit-timeout] 	at org.yaml.snakeyaml.representer.BaseRepresenter.representMapping(BaseRepresenter.java:157)
[junit-timeout] 	at org.yaml.snakeyaml.representer.SafeRepresenter$RepresentMap.representData(SafeRepresenter.java:321)
[junit-timeout] 	at org.yaml.snakeyaml.representer.BaseRepresenter.representData(BaseRepresenter.java:95)
[junit-timeout] 	at org.yaml.snakeyaml.representer.BaseRepresenter.represent(BaseRepresenter.java:65)
[junit-timeout] 	at org.yaml.snakeyaml.Yaml.represent(Yaml.java:232)
[junit-timeout] 	at org.apache.cassandra.config.YamlConfigurationLoader.fromMap(YamlConfigurationLoader.java:147)
{code};;;","20/Oct/20 21:50;dcapwell;Finished my first review, left comments in PR.

Can we also make sure that this patch is in-sync with the changes in CASSANDRA-15262, just want to make sure we don't revert those changes (looks like visibility is getting changed a little bit);;;","21/Oct/20 22:42;djoshi;[~jmeredithco] I think I'm +1. If there are any minor nits, please fix them on commit. [~dcapwell] do you want to get this once [~jmeredithco]'s finished addressing your comments?;;;","22/Oct/20 20:29;jmeredithco;I think I've hit all the PR comments. I'm fairly confident there's no regression on the changes in CASSANDRA-15262 except for the check that the Keystores exists before enabling optional.\;;;","22/Oct/20 20:29;dcapwell;sure I can.;;;","23/Oct/20 00:10;dcapwell;Starting commit

CI Results (pending):

Branch: cassandra-2.2
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-2.2-C4A8A69D-5946-4B44-AD54-1C66E3CAB344
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/129/

Branch: cassandra-3.0
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.0-C4A8A69D-5946-4B44-AD54-1C66E3CAB344
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/130/

Branch: cassandra-3.11
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.11-C4A8A69D-5946-4B44-AD54-1C66E3CAB344
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/131/

Branch: trunk
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-trunk-C4A8A69D-5946-4B44-AD54-1C66E3CAB344
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/132/
;;;","23/Oct/20 01:18;dcapwell;A good chunk of tests are failing in trunk, can you look into it [~jmeredithco]?

https://app.circleci.com/pipelines/github/dcapwell/cassandra/729/workflows/0dc07b24-70eb-4942-890c-fbf111cc2177/jobs/4116;;;","23/Oct/20 22:37;jmeredithco;Should be resolved now - was caused by improvements to the patch during review.  Cleaned it up and should be good to go.;;;","27/Oct/20 17:59;dcapwell;Starting commit

CI Results (pending):

Branch: cassandra-2.2
Source: https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-2.2-6F583124-6A59-40FF-832F-27F6AC26F5FD
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-2.2-6F583124-6A59-40FF-832F-27F6AC26F5FD
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/136/

Branch: cassandra-3.0
Source: https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.0-6F583124-6A59-40FF-832F-27F6AC26F5FD
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.0-6F583124-6A59-40FF-832F-27F6AC26F5FD
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/137/

Branch: cassandra-3.11
Source: https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.11-6F583124-6A59-40FF-832F-27F6AC26F5FD
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.11-6F583124-6A59-40FF-832F-27F6AC26F5FD
Jenkins: unknown

Branch: trunk
Source: https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-trunk-6F583124-6A59-40FF-832F-27F6AC26F5FD
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-trunk-6F583124-6A59-40FF-832F-27F6AC26F5FD
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/139/
;;;","27/Oct/20 19:52;dcapwell;switch to trunk for dtest broke all python dtests... fixing...;;;","27/Oct/20 19:59;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-2.2 |[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-2.2-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-2.2-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/140/]|
|cassandra-3.0 |[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.0-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.0-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/141/]|
|cassandra-3.11 |[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.11-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.11-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/142/]|
|trunk |[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-trunk-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-trunk-6298EA10-5C5B-41A3-9575-78AA3A5A5249] |[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/143/]|
;;;","27/Oct/20 21:39;dcapwell;[~jmeredithco] can you take a look at the trunk tests, ssl tests are failing https://app.circleci.com/pipelines/github/dcapwell/cassandra/742/workflows/438a85b4-a6b3-4d07-9ff0-b642fdef011c/jobs/4208;;;","03/Nov/20 00:50;dcapwell;Starting commit

CI Results: Yellow, expected results and https://issues.apache.org/jira/browse/CASSANDRA-16146?focusedCommentId=17225093&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17225093.  org.apache.cassandra.tools.NodeToolGossipInfoTest passes locally, 
||Branch||Source||Circle CI||Jenkins||
|cassandra-2.2|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-2.2-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-2.2-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/162/]|
|cassandra-3.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.0-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.0-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/163/]|
|cassandra-3.11|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.11-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.11-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/164/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-trunk-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-trunk-209E2350-3A50-457E-A466-F2661CD0D4D1]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/165/]|;;;","03/Nov/20 03:21;dcapwell;[~jmeredithco] can you look into https://app.circleci.com/pipelines/github/dcapwell/cassandra/754/workflows/d47aee80-0f62-4010-aca6-39adad2d986d/jobs/4290;;;","05/Nov/20 17:16;dcapwell;Looks like https://github.com/apache/cassandra/pull/763/commits/24f8507294b79f1d2e551adc09353c3aeb4a2465 and https://github.com/apache/cassandra/pull/763/commits/dd52e2ff391d95e418e0a033bde687bbf8c0e7a8 are missing, something must have gone wrong with my merge attempt, will retry.;;;","05/Nov/20 17:34;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-2.2|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-2.2-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-2.2-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/174/]|
|cassandra-3.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.0-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.0-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/175/]|
|cassandra-3.11|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.11-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.11-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/176/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-trunk-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-trunk-32A0C15C-7EBF-4373-87D5-72DAFE6BC340]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/177/]|
;;;","05/Nov/20 21:04;dcapwell;CI Results: Yellow, known issues and CASSANDRA-16247
||Branch||Source||Circle CI||Jenkins||
|cassandra-2.2|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-2.2-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-2.2-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/178/]|
|cassandra-3.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.0-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.0-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/179/]|
|cassandra-3.11|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-cassandra-3.11-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-cassandra-3.11-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/180/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16144-trunk-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16144-trunk-EACE893A-0011-4FDD-B14A-CDF9AFCA71BD]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/181/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Streaming fails when s SSTable writer finish() exceeds internode_tcp_user_timeout,CASSANDRA-16143,13329044,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,jmeredithco,jmeredithco,23/Sep/20 17:35,03/Jan/21 16:58,13/Jul/23 08:39,09/Dec/20 13:09,4.0,4.0-beta4,,,,Messaging/Internode,,,,0,,,,"tl;dr The internode TCP user timeout that provides more responsive detection of dead nodes for internode message will cause streaming to fail if system calls to fsync/fdatasync exceed the timeout (default 30s).

To workaround, explicitly set internode_tcp_user_timeout to longer than fsync/fdatasync, or to zero to revert to the operating system default.

Details:

While bootstrapping a replacement 4.0beta3 node in an existing cluster, bootstrap streaming repeatedly failed with the streaming follower logging
{code:java}
ERROR 2020-09-10T14:29:34,711 [NettyStreaming-Outbound-1.1.1.1.7000:1] org.apache.cassandra.streaming.StreamSession:693 - [Stream #7cb67c00-f3ac-11ea-b940-f7836f164528] Streaming error occurred on session with peer 1.1.1.1:7000
org.apache.cassandra.net.AsyncChannelOutputPlus$FlushException: The channel this output stream was writing to has been closed
       at org.apache.cassandra.net.AsyncChannelOutputPlus.propagateFailedFlush(AsyncChannelOutputPlus.java:200)
       at org.apache.cassandra.net.AsyncChannelOutputPlus.waitUntilFlushed(AsyncChannelOutputPlus.java:158)
       at org.apache.cassandra.net.AsyncChannelOutputPlus.waitForSpace(AsyncChannelOutputPlus.java:140)
       at org.apache.cassandra.net.AsyncChannelOutputPlus.beginFlush(AsyncChannelOutputPlus.java:97)
       at org.apache.cassandra.net.AsyncStreamingOutputPlus.lambda$writeToChannel$0(AsyncStreamingOutputPlus.java:142)
       at org.apache.cassandra.db.streaming.CassandraCompressedStreamWriter.lambda$write$0(CassandraCompressedStreamWriter.java:90)
       at org.apache.cassandra.net.AsyncStreamingOutputPlus.writeToChannel(AsyncStreamingOutputPlus.java:138)
       at org.apache.cassandra.db.streaming.CassandraCompressedStreamWriter.write(CassandraCompressedStreamWriter.java:89)
       at org.apache.cassandra.db.streaming.CassandraOutgoingFile.write(CassandraOutgoingFile.java:180)
       at org.apache.cassandra.streaming.messages.OutgoingStreamMessage.serialize(OutgoingStreamMessage.java:87)
       at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:45)
       at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:34)
       at org.apache.cassandra.streaming.messages.StreamMessage.serialize(StreamMessage.java:40)
       at org.apache.cassandra.streaming.async.NettyStreamingMessageSender$FileStreamTask.run(NettyStreamingMessageSender.java:347)
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
       at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at java.lang.Thread.run(Thread.java:834) [?:?]
       Suppressed: java.nio.channels.ClosedChannelException
               at org.apache.cassandra.net.AsyncStreamingOutputPlus.doFlush(AsyncStreamingOutputPlus.java:78)
               at org.apache.cassandra.net.AsyncChannelOutputPlus.flush(AsyncChannelOutputPlus.java:229)
               at org.apache.cassandra.net.AsyncChannelOutputPlus.close(AsyncChannelOutputPlus.java:248)
               at org.apache.cassandra.streaming.async.NettyStreamingMessageSender$FileStreamTask.run(NettyStreamingMessageSender.java:348)
               at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
               at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
               at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
               at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
               at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.50.Final.jar:4.1.50.Final]
               at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: io.netty.channel.unix.Errors$NativeIoException: writeAddress(..) failed: Connection timed out
{code}
and the boostrapping node (the streaming initiator) logging (times are from two separate attempts, pattern was very similar each time, IP addresses doctored to protect the innocent)
{code:java}
ERROR 2020-09-11T09:45:54,720 [Stream-Deserializer-2.2.2.2:7000-93837c82] org.apache.cassandra.streaming.StreamSession:917 - [Stream #f921ea30-f44d-11ea-b7f1-356e3edd6247] Remote peer 2.2.2.2:7000 failed stream session.
DEBUG 2020-09-11T09:45:54,721 [Stream-Deserializer-2.2.2.2:7000-93837c82] org.apache.cassandra.streaming.StreamSession:510 - [Stream #f921ea30-f44d-11ea-b7f1-356e3edd6247] Will close attached channels {93837c82=[id: 0x93837c82, L:/1.1.1.1:56859 ! R:2.2.2.2/2.2.2.2:7000], a608109b=[id: 0xa608109b, L:/1.1.1.1:7000 - R:/2.2.2.2:49426]}
INFO  2020-09-11T09:45:54,722 [Stream-Deserializer-2.2.2.2:7000-93837c82] org.apache.cassandra.streaming.StreamResultFuture:192 - [Stream #f921ea30-f44d-11ea-b7f1-356e3edd6247] Session with 2.2.2.2:7000 is complete
DEBUG 2020-09-11T09:45:54,723 [Messaging-EventLoop-3-15] org.apache.cassandra.streaming.async.NettyStreamingMessageSender:553 - [Stream #f921ea30-f44d-11ea-b7f1-356e3edd6247] Closing stream connection channels on 2.2.2.2:7000
ERROR 2020-09-11T09:45:55,121 [Stream-Deserializer-2.2.2.2:7000-a608109b] org.apache.cassandra.streaming.StreamSession:693 - [Stream #f921ea30-f44d-11ea-b7f1-356e3edd6247] Streaming error occurred on session with peer 2.2.2.2:7000
org.apache.cassandra.streaming.StreamReceiveException: java.io.EOFException
       at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:60)
       at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:38)
       at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:51)
       at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:172)
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: java.io.EOFException
       at org.apache.cassandra.net.AsyncStreamingInputPlus.reBuffer(AsyncStreamingInputPlus.java:133)
       at org.apache.cassandra.io.util.RebufferingInputStream.readByte(RebufferingInputStream.java:178)
       at org.apache.cassandra.io.util.RebufferingInputStream.readPrimitiveSlowly(RebufferingInputStream.java:142)
       at org.apache.cassandra.io.util.RebufferingInputStream.readLong(RebufferingInputStream.java:231)
       at org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.deserialize(CompressionMetadata.java:538)
       at org.apache.cassandra.io.compress.CompressionMetadata$ChunkSerializer.deserialize(CompressionMetadata.java:528)
       at org.apache.cassandra.db.streaming.CompressionInfo$CompressionInfoSerializer.deserialize(CompressionInfo.java:88)
       at org.apache.cassandra.db.streaming.CompressionInfo$CompressionInfoSerializer.deserialize(CompressionInfo.java:61)
       at org.apache.cassandra.db.streaming.CassandraStreamHeader$CassandraStreamHeaderSerializer.deserialize(CassandraStreamHeader.java:230)
       at org.apache.cassandra.db.streaming.CassandraStreamHeader$CassandraStreamHeaderSerializer.deserialize(CassandraStreamHeader.java:210)
       at org.apache.cassandra.db.streaming.CassandraStreamHeader$CassandraStreamHeaderSerializer.deserialize(CassandraStreamHeader.java:178)
       at org.apache.cassandra.db.streaming.CassandraIncomingFile.read(CassandraIncomingFile.java:69)
       at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:53)
       ... 5 more
DEBUG 2020-09-11T09:45:55,123 [Stream-Deserializer-2.2.2.2:7000-93837c82] org.apache.cassandra.streaming.StreamSession:657 - [Stream #f921ea30-f44d-11ea-b7f1-356e3edd6247] Socket closed after session completed with state FAILED
{code}
The issue was repeatable across many attempts to bootstrap. Cluster was deployed on Linux hosts running a 4.1.x kernel.

Investigating the cause of the NativeIoException error message showed that a write(2) call return must have been ETIMEDOUT, which occurs when a TCP user timeout is set on the socket.  In 4.0 connections now do that when EPOLL is available, with a default of 30s to detect failures faster.

Investigating the socket buffers around the time of crash showed the send buffer filling on the streaming follower and the receive buffer filling on the streaming initiator.

Capturing a heap dump and analyzing with MAT showed a thread in this state until the stream failed.
{code:java}
Object / Stack Frame |Name |
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 io.netty.util.concurrent.FastThreadLocalThread @ 0x6916ea170 |Stream-Deserializer-2.2.2.2:7000-a608109b|
| - at sun.nio.ch.FileDispatcherImpl.force0(Ljava/io/FileDescriptor;Z)I (Native Method)| |
| - at sun.nio.ch.FileDispatcherImpl.force(Ljava/io/FileDescriptor;Z)I (FileDispatcherImpl.java:82)| |
| - at sun.nio.ch.FileChannelImpl.force(Z)V (FileChannelImpl.java:461)| |
| - at org.apache.cassandra.utils.SyncUtil.force(Ljava/nio/channels/FileChannel;Z)V (SyncUtil.java:172)| |
| - at org.apache.cassandra.io.util.SequentialWriter.syncDataOnlyInternal()V (SequentialWriter.java:190)| |
| - at org.apache.cassandra.io.util.SequentialWriter.syncInternal()V (SequentialWriter.java:206)| |
| - at org.apache.cassandra.io.compress.CompressedSequentialWriter.access$100(Lorg/apache/cassandra/io/compress/CompressedSequentialWriter;)V (CompressedSequentialWriter.java:39)| |
| - at org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy.doPrepare()V (CompressedSequentialWriter.java:353)| |
| - at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.prepareToCommit()V (Transactional.java:168)| |
| - at org.apache.cassandra.io.util.SequentialWriter.prepareToCommit()V (SequentialWriter.java:379)| |
| - at org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy.doPrepare()V (BigTableWriter.java:409)| |
| - at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.prepareToCommit()V (Transactional.java:168)| |
| - at org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional.finish()Ljava/lang/Object; (Transactional.java:179)| |
| - at org.apache.cassandra.io.sstable.format.SSTableWriter.finish(Z)Lorg/apache/cassandra/io/sstable/format/SSTableReader; (SSTableWriter.java:266)| |
| - at org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finish(Z)Ljava/util/Collection; (SimpleSSTableMultiWriter.java:59)| |
| - at org.apache.cassandra.io.sstable.format.RangeAwareSSTableWriter.finish(Z)Ljava/util/Collection; (RangeAwareSSTableWriter.java:135)| |
| - at org.apache.cassandra.db.streaming.CassandraStreamReceiver.received(Lorg/apache/cassandra/streaming/IncomingStream;)V (CassandraStreamReceiver.java:108)| |
| - at org.apache.cassandra.streaming.StreamReceiveTask.received(Lorg/apache/cassandra/streaming/IncomingStream;)V (StreamReceiveTask.java:91)| |
| - at org.apache.cassandra.streaming.StreamSession.receive(Lorg/apache/cassandra/streaming/messages/IncomingStreamMessage;)V (StreamSession.java:848)| |
| - at org.apache.cassandra.streaming.StreamSession.messageReceived(Lorg/apache/cassandra/streaming/messages/StreamMessage;)V (StreamSession.java:597)| |
| - at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run()V (StreamingInboundHandler.java:189)| |
| - at io.netty.util.concurrent.FastThreadLocalRunnable.run()V (FastThreadLocalRunnable.java:30)| |
| - at java.lang.Thread.run()V (Thread.java:834)| |

'- Total: 23 entries | |
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {code}
Looking at the Java sources, the {{force0}} function calls {{fdatasync}} under Linux. Using {{perf trace record}} showed that some fdatasyncs were exceeding the socket user timeout threshold, explaining the failures.

This issue required significant effort to determine the root cause, so at least it would be good to improve the ability to diagnose this for an operator that may not have access to system call profiling.

Obviously {{fdatasync}} going away for 30s+ is a system tuning issue but I do not know of a way to guarantee an upper bound on fdatasync time, just make it more probable it completes.

One workaround is to increase the TCP user timeout from 30s to whatever the host needs to complete, or to reset to the system default with {{0}}, however this impacts regular internode messaging as well as streaming, and it's desirable to discover dead nodes as early as possible.

Possible improvements:
* Separate the user timeout thresholds for internode messaging and streaming.
* Create a metric for FileChannel.force times by unique filesystem to surface that as a possible timeout.
* Introduce a log warning when FileChannel.force times exceed a threshold.
* Run FileChannel.force on a separate (unbounded) excecutor service and either continue to stream while force completes in the background with at least some backpressure on the stream, or throw on the initiator to improve diagnosis.
* Periodically call force by time and/or volume written on a background thread.",,aholmber,blerer,dcapwell,jasonstack,jmeredithco,yifanc,,,,,,"yifan-c opened a new pull request #824:
URL: https://github.com/apache/cassandra/pull/824


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Nov/20 03:55;githubbot;600","aholmberg commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r533608554



##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       Just a nit -- I see this is following a similar pattern to the above variable, but what is the ""user"" meant to convey in this naming?

##########
File path: src/java/org/apache/cassandra/metrics/StreamingMetrics.java
##########
@@ -43,6 +44,8 @@
     public static final Counter totalOutgoingRepairSSTables = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, ""TotalOutgoingRepairSSTables"", null));
     public final Counter incomingBytes;
     public final Counter outgoingBytes;
+    /* Measures the time taken for processing the incoming stream message after being deserialized, including the time to flush to disk. */
+    public final Timer incomingStreamMessageProcessTime;

Review comment:
       Should we add to metrics documentation?
   https://cassandra.apache.org/doc/latest/operating/metrics.html?highlight=metrics#streaming-metrics

##########
File path: src/java/org/apache/cassandra/streaming/StreamSession.java
##########
@@ -792,7 +792,21 @@ public void receive(IncomingStreamMessage message)
         // send back file received message
         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
-        receivers.get(message.header.tableId).received(message.stream);
+        long receivedStartNanos = System.nanoTime();
+        try
+        {
+            receivers.get(message.header.tableId).received(message.stream);
+        }
+        finally
+        {
+            long latencyNanos = System.nanoTime() - receivedStartNanos;
+            metrics.incomingStreamMessageProcessTime.update(latencyNanos, TimeUnit.NANOSECONDS);
+            long latencyMs = TimeUnit.NANOSECONDS.toMillis(latencyNanos);
+            int timeout = DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();
+            if (timeout > 0 && latencyMs > timeout)
+                logger.warn(""Time taken ({} ms) for processing the incoming stream message ({}) exceeded internode streaming TCP user timeout ({} ms),"",

Review comment:
       Is there anything we might tell the operator here about what to tune, change, or look into system-wise?

##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       The [comment](https://github.com/apache/cassandra/blob/22abff779df097e0ef38180442e9c680b3d41187/src/java/org/apache/cassandra/config/Config.java#L43) at the top seems to indicate that JMX-modified settings should be declared volatile. Is that a concern here?

##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       Do we need to document these in https://github.com/apache/cassandra-website/blob/trunk/src/doc/4.0-beta3/_sources/configuration/cass_yaml_file.rst.txt ? Worth adding some of your tl;dr from the ticket here, or in docs?

##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       What does it mean for this timeout to default to zero instead of 30000 like its counterpart above?
   
   https://man7.org/linux/man-pages/man7/tcp.7.html
   > If the option value is specified as 0, TCP will use the system default.
   
   Seems sane to me, but it there a reason for the default to be different than `internode_tcp_user_timeout_in_ms`? I haven't been able to find out what the ""system default"" would typically be, and if it's much different from 30000. A brief look at the source gave me the impression that not setting it would actually cause this timeout mechanism to be bypassed completely, which is different behavior than we had before with a non-zero default.

##########
File path: src/java/org/apache/cassandra/metrics/StreamingMetrics.java
##########
@@ -43,6 +44,8 @@
     public static final Counter totalOutgoingRepairSSTables = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, ""TotalOutgoingRepairSSTables"", null));
     public final Counter incomingBytes;
     public final Counter outgoingBytes;
+    /* Measures the time taken for processing the incoming stream message after being deserialized, including the time to flush to disk. */
+    public final Timer incomingStreamMessageProcessTime;

Review comment:
       Should we bootstrap a test for these metrics? I know we haven't bothered historically, but we're [trying to change that](https://issues.apache.org/jira/browse/CASSANDRA-16190) for 4.0+.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Dec/20 22:17;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r533777976



##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       > What does it mean for this timeout to default to zero instead of 30000 like its counterpart above?
   
   Finding a proper default value is hard. The reason I set it 0 is that it seems to be working better for streaming, according to the ticket description. 
   I guess, we can set it the same as the previous value (30000) and adjust it on-demand. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Dec/20 22:57;githubbot;600","bereng commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r533930553



##########
File path: src/java/org/apache/cassandra/service/StorageService.java
##########
@@ -1321,6 +1321,19 @@ public int getInternodeTcpUserTimeoutInMS()
         return DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();
     }
 
+    public void setInternodeStreamingTcpUserTimeoutInMS(int value)
+    {
+        if (value < 0)

Review comment:
       Use `Preconditions` for consistency?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Dec/20 06:43;githubbot;600","bereng commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r533933892



##########
File path: src/java/org/apache/cassandra/metrics/StreamingMetrics.java
##########
@@ -43,6 +44,8 @@
     public static final Counter totalOutgoingRepairSSTables = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, ""TotalOutgoingRepairSSTables"", null));
     public final Counter incomingBytes;
     public final Counter outgoingBytes;
+    /* Measures the time taken for processing the incoming stream message after being deserialized, including the time to flush to disk. */
+    public final Timer incomingStreamMessageProcessTime;

Review comment:
       +1 for testing the metrics




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Dec/20 06:52;githubbot;600","bereng commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r533935165



##########
File path: test/distributed/org/apache/cassandra/distributed/test/NodeToolTest.java
##########
@@ -67,9 +72,37 @@ public void testCaptureConsoleOutput() throws Throwable
     public void testNodetoolSystemExit()
     {
         // Verify currently calls System.exit, this test uses that knowlege to test System.exit behavior in jvm-dtest
-        CLUSTER.get(1).nodetoolResult(""verify"", ""--check-tokens"")
-               .asserts()
-               .failure()
-               .stdoutContains(""Token verification requires --extended-verify"");
+        NODE.nodetoolResult(""verify"", ""--check-tokens"")

Review comment:
       We have been trying to consolidate tooling testing across the board with a recently introduced `ToolRunner`. I would move these new tests to that new interface for consistency and to benefit from any future dev there. See `NodeToolRingTest` for some example




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Dec/20 06:56;githubbot;600","aholmberg commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r534289322



##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       > Finding a proper default value is hard. 
   
   💯  couldn't agree more
   
   > The reason I set it 0 is that it seems to be working better for streaming
   
   Sure. I'm not fully arguing against a different value. Just trying to reason about the change in behavior. It could even be that we want the streaming timeout with some higher value, but not zero, which might defeat the purpose of the original ticket introducing TCP User Timeout (CASSANDRA-14358).
   For the record, [here](https://github.com/torvalds/linux/blob/9ff9b0d392ea08090cd1780fb196f36dbb586529/net/ipv4/tcp_timer.c#L363-L369) is the area of code that made me think it just disables the mechanism altogether. I only point it out to say that I think it's a little different than using some other ""system default"" as some of the higher level docs say. I'm wondering if the ""system default"" is to not have this mechanism enabled.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Dec/20 16:08;githubbot;600","blerer commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r535099970



##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       It may be interesting to have that discussion on the ticket to get other people attention. Jon might have an opinion as he is the one that opened the ticket.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 10:57;githubbot;600","jonmeredith commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r535303747



##########
File path: src/java/org/apache/cassandra/config/Config.java
##########
@@ -178,6 +178,8 @@
     // (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
     // (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
     public int internode_tcp_user_timeout_in_ms = 30000;
+    // Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.
+    public int internode_streaming_tcp_user_timeout_in_ms = 0;

Review comment:
       Will take it back to the JIRA ticket and comment there. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 14:57;githubbot;600","dcapwell commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r535524693



##########
File path: test/distributed/org/apache/cassandra/distributed/test/NodeToolTest.java
##########
@@ -67,9 +72,37 @@ public void testCaptureConsoleOutput() throws Throwable
     public void testNodetoolSystemExit()
     {
         // Verify currently calls System.exit, this test uses that knowlege to test System.exit behavior in jvm-dtest
-        CLUSTER.get(1).nodetoolResult(""verify"", ""--check-tokens"")
-               .asserts()
-               .failure()
-               .stdoutContains(""Token verification requires --extended-verify"");
+        NODE.nodetoolResult(""verify"", ""--check-tokens"")

Review comment:
       for jvm-dtest I would not agree with this.  `NodeToolResult` is more fleshed out than tool runner offers (as it is deeply integrated with jvm-dtest), and the added ToolRunner wrapper adds more complexity without offering simplification to test authors.
   
   I feel that ToolRunner should be used when calling `main` or calling a CLI on disk, but not when using jvm-dtest nodetool.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 19:32;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r535541304



##########
File path: test/distributed/org/apache/cassandra/distributed/test/NodeToolTest.java
##########
@@ -67,9 +72,37 @@ public void testCaptureConsoleOutput() throws Throwable
     public void testNodetoolSystemExit()
     {
         // Verify currently calls System.exit, this test uses that knowlege to test System.exit behavior in jvm-dtest
-        CLUSTER.get(1).nodetoolResult(""verify"", ""--check-tokens"")
-               .asserts()
-               .failure()
-               .stdoutContains(""Token verification requires --extended-verify"");
+        NODE.nodetoolResult(""verify"", ""--check-tokens"")

Review comment:
       I align with David on the usage. 
   The `ToolRunner` is good for non-distributed cases. Meanwhile, the `nodetool` and `NodeToolResult` interfaces exposed from jvm-dtest-api is suitable in the jvm dtest cases. 
   The nodetool api is fluent and easy to use (e.g. assertion). The `NodeToolResult` already contains stdout and stderr from command. Therefore I do not see benefits from wrapping the jvm-dtest-api within ToolRunner interface. We lose the benefits by wrapping the api into `ToolRunner`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 19:54;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r535714110



##########
File path: src/java/org/apache/cassandra/streaming/StreamSession.java
##########
@@ -792,7 +792,21 @@ public void receive(IncomingStreamMessage message)
         // send back file received message
         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
-        receivers.get(message.header.tableId).received(message.stream);
+        long receivedStartNanos = System.nanoTime();
+        try
+        {
+            receivers.get(message.header.tableId).received(message.stream);
+        }
+        finally
+        {
+            long latencyNanos = System.nanoTime() - receivedStartNanos;
+            metrics.incomingStreamMessageProcessTime.update(latencyNanos, TimeUnit.NANOSECONDS);
+            long latencyMs = TimeUnit.NANOSECONDS.toMillis(latencyNanos);
+            int timeout = DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();
+            if (timeout > 0 && latencyMs > timeout)
+                logger.warn(""Time taken ({} ms) for processing the incoming stream message ({}) exceeded internode streaming TCP user timeout ({} ms),"",

Review comment:
       Maybe suggest to tune (increase) the `internode_streaming_tcp_user_timeout_in_ms`. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Dec/20 23:10;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537276503



##########
File path: src/java/org/apache/cassandra/metrics/StreamingMetrics.java
##########
@@ -43,6 +44,8 @@
     public static final Counter totalOutgoingRepairSSTables = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, ""TotalOutgoingRepairSSTables"", null));
     public final Counter incomingBytes;
     public final Counter outgoingBytes;
+    /* Measures the time taken for processing the incoming stream message after being deserialized, including the time to flush to disk. */
+    public final Timer incomingStreamMessageProcessTime;

Review comment:
       I have added one jvm dtest to test streaming metrics that is related to this patch.  
   The test can be a starting point for [CASSANDRA-16190](https://issues.apache.org/jira/browse/CASSANDRA-16190).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 07:12;githubbot;600","blerer commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537348468



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));
+            cluster.get(1).nodetool(""flush"");
+        }
+
+        cluster.get(2).executeInternal(""TRUNCATE system.available_ranges;"");
+        {
+            Object[][] results = cluster.get(2).executeInternal(String.format(""SELECT k, c1, c2 FROM %s.cf;"", KEYSPACE));
+            assertThat(results.length).isEqualTo(0);
+        }

Review comment:
       Is there a reason for enclosing that part of code between braces?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 09:21;githubbot;600","blerer commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537348468



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));
+            cluster.get(1).nodetool(""flush"");
+        }
+
+        cluster.get(2).executeInternal(""TRUNCATE system.available_ranges;"");
+        {
+            Object[][] results = cluster.get(2).executeInternal(String.format(""SELECT k, c1, c2 FROM %s.cf;"", KEYSPACE));
+            assertThat(results.length).isEqualTo(0);
+        }

Review comment:
       Is there a reason for enclosing that part of code between braces?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 09:29;githubbot;600","blerer commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537354436



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));
+            cluster.get(1).nodetool(""flush"");
+        }
+
+        cluster.get(2).executeInternal(""TRUNCATE system.available_ranges;"");
+        {
+            Object[][] results = cluster.get(2).executeInternal(String.format(""SELECT k, c1, c2 FROM %s.cf;"", KEYSPACE));
+            assertThat(results.length).isEqualTo(0);
+        }

Review comment:
       Is there a reason for enclosing that part of code between braces?

##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));
+            cluster.get(1).nodetool(""flush"");
+        }
+
+        cluster.get(2).executeInternal(""TRUNCATE system.available_ranges;"");
+        {
+            Object[][] results = cluster.get(2).executeInternal(String.format(""SELECT k, c1, c2 FROM %s.cf;"", KEYSPACE));
+            assertThat(results.length).isEqualTo(0);
+        }
+
+        InetAddressAndPort node1Address = getNodeAddress(1);
+        InetAddressAndPort node2Address = getNodeAddress(2);
+
+        cluster.get(2).nodetool(""rebuild"", ""--keyspace"", KEYSPACE);
+
+        // Trigger streaming in node 2 and assert metrics on completion.
+        cluster.get(2).runOnInstance(() -> {
+            StreamingMetrics metrics = StreamingMetrics.get(node1Address);
+            assertThat(metrics.incomingBytes.getCount())
+                .isGreaterThan(0)
+                .describedAs(""There should be bytes streamed from the peer."");
+            assertThat(metrics.outgoingBytes.getCount())
+                .isEqualTo(0)
+                .describedAs(""There should not be sstables streamed to the peer."");
+            assertThat(metrics.incomingProcessTime.getCount())
+                .isEqualTo(files)
+                .describedAs(""There should be "" + files + "" files streamed from the peer."");
+            assertThat(metrics.incomingProcessTime.getSnapshot().getMedian())
+                .isGreaterThan(0)
+                .describedAs(""The median processing time should be non-0"");
+        });
+
+        // Assert metrics in node 1
+        cluster.get(1).runOnInstance(() -> {
+            StreamingMetrics metrics = StreamingMetrics.get(node2Address);
+            assertThat(metrics.incomingBytes.getCount())
+                .isEqualTo(0).describedAs(""There should not be sstables streamed from the peer."");
+            assertThat(metrics.outgoingBytes.getCount())
+                .isGreaterThan(0)
+                .describedAs(""There should be bytes streamed to the peer."");
+            assertThat(metrics.incomingProcessTime.getCount())
+                .isEqualTo(0)
+                .describedAs(""There should be no files streamed from the peer."");
+        });

Review comment:
       Could we check that node1  `outgoingBytes` is equals to node2 `incomingBytes` ?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 09:44;githubbot;600","aholmberg commented on pull request #824:
URL: https://github.com/apache/cassandra/pull/824#issuecomment-740057448


   Current change set looks good to me, assuming Benjamin's comments are addressed, and the longer timeout is adopted as discussed in the ticket.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 17:17;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537696405



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));
+            cluster.get(1).nodetool(""flush"");
+        }
+
+        cluster.get(2).executeInternal(""TRUNCATE system.available_ranges;"");
+        {
+            Object[][] results = cluster.get(2).executeInternal(String.format(""SELECT k, c1, c2 FROM %s.cf;"", KEYSPACE));
+            assertThat(results.length).isEqualTo(0);
+        }

Review comment:
       Just to associate the code block with the prior `TRUNCATE` op visually. I will remove it. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 17:37;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537700295



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));
+            cluster.get(1).nodetool(""flush"");
+        }
+
+        cluster.get(2).executeInternal(""TRUNCATE system.available_ranges;"");
+        {
+            Object[][] results = cluster.get(2).executeInternal(String.format(""SELECT k, c1, c2 FROM %s.cf;"", KEYSPACE));
+            assertThat(results.length).isEqualTo(0);
+        }
+
+        InetAddressAndPort node1Address = getNodeAddress(1);
+        InetAddressAndPort node2Address = getNodeAddress(2);
+
+        cluster.get(2).nodetool(""rebuild"", ""--keyspace"", KEYSPACE);
+
+        // Trigger streaming in node 2 and assert metrics on completion.
+        cluster.get(2).runOnInstance(() -> {
+            StreamingMetrics metrics = StreamingMetrics.get(node1Address);
+            assertThat(metrics.incomingBytes.getCount())
+                .isGreaterThan(0)
+                .describedAs(""There should be bytes streamed from the peer."");
+            assertThat(metrics.outgoingBytes.getCount())
+                .isEqualTo(0)
+                .describedAs(""There should not be sstables streamed to the peer."");
+            assertThat(metrics.incomingProcessTime.getCount())
+                .isEqualTo(files)
+                .describedAs(""There should be "" + files + "" files streamed from the peer."");
+            assertThat(metrics.incomingProcessTime.getSnapshot().getMedian())
+                .isGreaterThan(0)
+                .describedAs(""The median processing time should be non-0"");
+        });
+
+        // Assert metrics in node 1
+        cluster.get(1).runOnInstance(() -> {
+            StreamingMetrics metrics = StreamingMetrics.get(node2Address);
+            assertThat(metrics.incomingBytes.getCount())
+                .isEqualTo(0).describedAs(""There should not be sstables streamed from the peer."");
+            assertThat(metrics.outgoingBytes.getCount())
+                .isGreaterThan(0)
+                .describedAs(""There should be bytes streamed to the peer."");
+            assertThat(metrics.incomingProcessTime.getCount())
+                .isEqualTo(0)
+                .describedAs(""There should be no files streamed from the peer."");
+        });

Review comment:
       Good idea! 👍 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 17:43;githubbot;600","dcapwell commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537805571



##########
File path: doc/source/configuration/cass_yaml_file.rst
##########
@@ -1406,17 +1406,33 @@ Lowest acceptable value is 10 ms.
 Defensive settings for protecting Cassandra from true network partitions.
 See (CASSANDRA-14358) for details.
 
+
+``internode_tcp_connect_timeout_in_ms``
+---------------------------------------
 The amount of time to wait for internode tcp connections to establish.
-internode_tcp_connect_timeout_in_ms = 2000
 
+*Default Value:* 2000
+
+``internode_tcp_user_timeout_in_ms``
+------------------------------------
 The amount of time unacknowledged data is allowed on a connection before we throw out the connection
 Note this is only supported on Linux + epoll, and it appears to behave oddly above a setting of 30000
 (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0
 which picks up the OS default and configure the net.ipv4.tcp_retries2 sysctl to be ~8.
-internode_tcp_user_timeout_in_ms = 30000
 
-The maximum continuous period a connection may be unwritable in application space
-internode_application_timeout_in_ms = 30000
+*Default Value:* 30000
+
+``internode_streaming_tcp_user_timeout_in_ms``
+----------------------------------------------
+The amount of time unacknowledged data is allowed on a streaming connection before we close the connection.
+
+*Default Value:* 3000000

Review comment:
       should be `300000`, there is an extra zero.

##########
File path: src/java/org/apache/cassandra/net/OutboundConnectionSettings.java
##########
@@ -410,10 +410,19 @@ public int tcpConnectTimeoutInMS()
                                              : DatabaseDescriptor.getInternodeTcpConnectTimeoutInMS();
     }
 
-    public int tcpUserTimeoutInMS()
+    public int tcpUserTimeoutInMS(ConnectionCategory category)
     {
-        return tcpUserTimeoutInMS != null ? tcpUserTimeoutInMS
-                                          : DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();
+        // Reusing tcpUserTimeoutInMS for both messaging and streaming, since the connection is created for either one of them.
+        if (tcpUserTimeoutInMS != null)
+            return tcpUserTimeoutInMS;
+
+        if (category.isMessaging())

Review comment:
       personal preference
   
   ```
   switch (category)
   {
     case MESSAGING: return DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();
     case STREAMING: return DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();
     default: throw new IllegalArgumentException(""Unknown connection category: "" + category);
   }
   ```

##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();

Review comment:
       should do a null check as its possible setup fails

##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl
+{
+    private static Cluster cluster;
+
+    @BeforeClass
+    public static void setupCluster() throws IOException
+    {
+        cluster = Cluster.build().withNodes(2)
+                         .withDataDirCount(1)
+                         .withConfig(config -> config.with(NETWORK)
+                                                     .set(""stream_entire_sstables"", false))
+                         .start();
+        cluster.schemaChange(""CREATE KEYSPACE "" + KEYSPACE + "" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2 };"");
+    }
+
+    private static InetAddressAndPort getNodeAddress(int num)
+    {
+        InetSocketAddress broadcastAddress = cluster.get(num).broadcastAddress();
+        return InetAddressAndPort.getByAddressOverrideDefaults(broadcastAddress.getAddress(),
+                                                               broadcastAddress.getPort());
+    }
+
+    @AfterClass
+    public static void teardownCluster()
+    {
+        cluster.close();
+    }
+
+
+    @Test
+    public void testStreamMetrics()
+    {
+        cluster.schemaChange(String.format(""CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}"", KEYSPACE, ""LeveledCompactionStrategy""));
+
+        final int rowsPerFile = 500;
+        final int files = 5;
+        for (int k = 0; k < files; k++)
+        {
+            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
+                cluster.get(1).executeInternal(String.format(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"", KEYSPACE), Integer.toString(i));

Review comment:
       fyi there is a method `withKeyspace` in scope which does this for you
   
   ```
   cluster.get(1).executeInternal(withKeyspace(""INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');""), Integer.toString(i));
   ```

##########
File path: src/java/org/apache/cassandra/streaming/StreamSession.java
##########
@@ -792,7 +792,25 @@ public void receive(IncomingStreamMessage message)
         // send back file received message
         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
-        receivers.get(message.header.tableId).received(message.stream);
+        long receivedStartNanos = System.nanoTime();
+        try
+        {
+            receivers.get(message.header.tableId).received(message.stream);

Review comment:
       we call `CassandraStreamReceiver::finished` async, so this time does not include the actual commit?  Guess it makes sense given the name is incoming process time; and not processing time.

##########
File path: src/java/org/apache/cassandra/streaming/StreamSession.java
##########
@@ -792,7 +792,25 @@ public void receive(IncomingStreamMessage message)
         // send back file received message
         messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));
         StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);
-        receivers.get(message.header.tableId).received(message.stream);
+        long receivedStartNanos = System.nanoTime();
+        try
+        {
+            receivers.get(message.header.tableId).received(message.stream);
+        }
+        finally
+        {
+            long latencyNanos = System.nanoTime() - receivedStartNanos;
+            metrics.incomingProcessTime.update(latencyNanos, TimeUnit.NANOSECONDS);
+            long latencyMs = TimeUnit.NANOSECONDS.toMillis(latencyNanos);
+            int timeout = DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();
+            if (timeout > 0 && latencyMs > timeout)
+                logger.warn(""The time taken ({} ms) for processing the incoming stream message ({})"" +

Review comment:
       I am worried that this will produce a lot of false positives, and can produce a lot of spam if multiple sessions are going on; wondering if we should use a no spam logger here?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 21:01;githubbot;600","dcapwell commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537883583



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metrics/StreamingMetricsTest.java
##########
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metrics;
+
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.locator.InetAddressAndPort;
+import org.apache.cassandra.metrics.StreamingMetrics;
+
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StreamingMetricsTest extends TestBaseImpl

Review comment:
       ran in a loop, this was stable




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Dec/20 22:32;githubbot;600","yifan-c commented on a change in pull request #824:
URL: https://github.com/apache/cassandra/pull/824#discussion_r537928060



##########
File path: src/java/org/apache/cassandra/net/OutboundConnectionSettings.java
##########
@@ -410,10 +410,19 @@ public int tcpConnectTimeoutInMS()
                                              : DatabaseDescriptor.getInternodeTcpConnectTimeoutInMS();
     }
 
-    public int tcpUserTimeoutInMS()
+    public int tcpUserTimeoutInMS(ConnectionCategory category)
     {
-        return tcpUserTimeoutInMS != null ? tcpUserTimeoutInMS
-                                          : DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();
+        // Reusing tcpUserTimeoutInMS for both messaging and streaming, since the connection is created for either one of them.
+        if (tcpUserTimeoutInMS != null)
+            return tcpUserTimeoutInMS;
+
+        if (category.isMessaging())

Review comment:
       👍  I like this form since we are doing exhaustive matching here. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Dec/20 00:02;githubbot;600","blerer commented on pull request #824:
URL: https://github.com/apache/cassandra/pull/824#issuecomment-741760260


   Thanks to everybody.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Dec/20 13:11;githubbot;600","blerer commented on pull request #824:
URL: https://github.com/apache/cassandra/pull/824#issuecomment-741760401


   Merged manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Dec/20 13:11;githubbot;600","blerer closed pull request #824:
URL: https://github.com/apache/cassandra/pull/824


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Dec/20 13:11;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,15000,,,0,15000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,Shadow Traffic,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Dec 09 13:09:52 UTC 2020,,,,,,,All,,,,,,"0|z0iutc:",9223372036854775807,,,,aholmber,bereng,blerer,dcapwell,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/c6ea8fabf9f726a58b76ff6e41d21b650941f880,,,,,,,,,"ci, unit test, jvm dtest, adhoc test",,,,,"16/Nov/20 23:13;yifanc;Made a jvm dtest that is able to reproduce the TCP connection timeout during streaming reliably. The test code can be found [here|https://github.com/apache/cassandra/compare/trunk...yifan-c:C-16143/test]. The test blocks CassandraCompressedStreamReader.read in the receiver for 10 seconds to simulate the slow disk, and reduces the send/receive buffer to keep the connection active. 

Run the {{CASSANDRA-16143.sh}} and it will start the test within a docker container. The container is needed in order to enable EPOLL. (Not necessary if you are already running on Linux).

The test should fail with stacktrace like the following

{code:java}
[junit-timeout] ERROR 21:16:18 [Stream #f4c1ac00-2850-11eb-9cb2-ed254fd63997] Streaming error occurred on session with peer 127.0.0.2:7012
[junit-timeout] org.apache.cassandra.net.AsyncChannelOutputPlus$FlushException: The channel this output stream was writing to has been closed
[junit-timeout] 	at org.apache.cassandra.net.AsyncChannelOutputPlus.propagateFailedFlush(AsyncChannelOutputPlus.java:200)
[junit-timeout] 	at org.apache.cassandra.net.AsyncChannelOutputPlus.waitUntilFlushed(AsyncChannelOutputPlus.java:158)
[junit-timeout] 	at org.apache.cassandra.net.AsyncChannelOutputPlus.flush(AsyncChannelOutputPlus.java:230)
[junit-timeout] 	at org.apache.cassandra.db.streaming.CassandraOutgoingFile.write(CassandraOutgoingFile.java:179)
[junit-timeout] 	at org.apache.cassandra.streaming.messages.OutgoingStreamMessage.serialize(OutgoingStreamMessage.java:87)
[junit-timeout] 	at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:45)
[junit-timeout] 	at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:34)
[junit-timeout] 	at org.apache.cassandra.streaming.messages.StreamMessage.serialize(StreamMessage.java:42)
[junit-timeout] 	at org.apache.cassandra.streaming.async.NettyStreamingMessageSender$FileStreamTask.run(NettyStreamingMessageSender.java:347)
[junit-timeout] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[junit-timeout] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout] 	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout] 	at java.lang.Thread.run(Thread.java:748)
[junit-timeout] 	Suppressed: java.nio.channels.ClosedChannelException: null
[junit-timeout] 		at org.apache.cassandra.net.AsyncStreamingOutputPlus.doFlush(AsyncStreamingOutputPlus.java:81)
[junit-timeout] 		at org.apache.cassandra.net.AsyncChannelOutputPlus.flush(AsyncChannelOutputPlus.java:229)
[junit-timeout] 		at org.apache.cassandra.net.AsyncChannelOutputPlus.close(AsyncChannelOutputPlus.java:248)
[junit-timeout] 		at org.apache.cassandra.streaming.async.NettyStreamingMessageSender$FileStreamTask.run(NettyStreamingMessageSender.java:348)
[junit-timeout] 		... 6 common frames omitted
[junit-timeout] Caused by: io.netty.channel.unix.Errors$NativeIoException: writeAddress(..) failed: Connection timed out
{code};;;","17/Nov/20 01:05;yifanc;Talked with Jon on Slack. Assigning it to me. ;;;","18/Nov/20 04:17;yifanc;PR: https://github.com/apache/cassandra/pull/824
CI: https://app.circleci.com/pipelines/github/yifan-c/cassandra/164/workflows/a1fee16c-b4cd-4e67-b52f-f2e649ea33da

The patch 
# adds a dedicated TCP user timeout (defaults to 0) for streaming.
# collects the processing time for the received incoming stream messages.
# logs warning when the processing time exceeds the tcp user timeout.

I chose to not add ""a separate (unbounded) excecutor service"" for FileChannel.force and ""periodically call force"". 
In the code base, the incoming stream messages are consumed in a dedicated thread that polls from {{AsyncStreamingInputPlus}}. It does not block the netty event loop. The {{AsyncStreamingInputPlus}} intentionally disables auto read from netty channel to avoid OOM. If we starts an executor service to consume the bytes and FileChannel.force clogs, we end up with keeping more deserialized messages in memory with the risk of OOM. The timeout is actually related to the auto read being disabled. The receiver is blocked at flushing and not able to issue newer channel read. 
I am also concerned about calling force periodically. According to the java doc of FileChannel.force (quoted below), do so may increase the I/O ops that are not necessary. 

{quote}     <p> Invoking this method may cause an I/O operation to occur even if the
     channel was only opened for reading.  Some operating systems, for
     example, maintain a last-access time as part of a file's metadata, and
     this time is updated whenever the file is read.  Whether or not this is
     actually done is system-dependent and is therefore unspecified.{quote};;;","01/Dec/20 17:42;aholmber;I'm taking a look today as a non-committer reviewer. Meanwhile leaving in ""Ready for Review"" to invite other reviewers.;;;","01/Dec/20 22:17;aholmber;Added a few comments and questions to the PR.
I just noticed the PR is somehow linked and updating the Work Log section of this ticket. Is that new?;;;","01/Dec/20 22:46;yifanc;Thanks [~aholmber]. So the bot links the PR, if its title starts with the ticket number. ;;;","03/Dec/20 15:15;jmeredithco;Bringing the discussion on what the default should be set to back here.

 

I'm fine with zero, however given Yifan added the log message to explain to operators why streaming failed I think they have a fighting chance of tracking down failures and think something like 5 minutes would provide for faster failure than system default TCP timeouts while tolerating the majority of messy server tuning like the cluster I found this on.;;;","03/Dec/20 16:27;blerer;That sound like a good compromise to me.;;;","03/Dec/20 18:35;dcapwell;I can pick up review Monday unless enough committers +1 by then.;;;","05/Dec/20 10:06;yifanc;Thanks for having the discussion about the timeout default. 5 minutes also sounds good to me.

I would like to bring up one concern that the netty/streaming behaves oddly when tcp_user_timeout is large. 
The docker test (posted above) was updated with _tcp_user_timeout == 300 seconds and artificial delay == 290 seconds_. 
The test should pass with the settings, but it failed with the same error, ""writeAddress(..) failed: Connection timed out"". 
The log indicates that after the receiver (node2) completed blocking, the sender did not continue writing into channel. The last flush took 302096082 micros == 302 seconds > tcp_user_timeout, so it failed expectedly. 

Although failed, the test proves that the tcp_user_timeout closes the connection at the right moment. 

{code:java}
...
[junit-timeout] node2 <--- block CassandraCompressedStreamReader.read for 290 seconds
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-10b5986c] node2 2020-12-05 09:45:02,468 CassandraCompressedStreamReader.java:73 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb] Start receiving file #0 from /127.0.0.1:7012, repairedAt = 0, size = 5421, ks = 'distributed_test_keyspace', pendingRepair = 'null', table = 'cf'.
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-10b5986c] node2 2020-12-05 09:45:02,573 StreamingInboundHandler.java:187 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: 10b5986c] Received IncomingStreamMessage{header=Header (tableId: db5364c0-36dd-11eb-ab7f-6fd7ea8cef30, #0, repairedAt: 0, pendingRepair: null, sendByFollower: true), stream=CassandraIncomingFile{sstable=distributed_test_keyspace/cf}}
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-10b5986c] node2 2020-12-05 09:45:02,575 NettyStreamingMessageSender.java:258 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: acbcbd5e] Sending Received (db5364c0-36dd-11eb-ab7f-6fd7ea8cef30, #0)
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-10b5986c] node2 2020-12-05 09:45:02,577 StreamReceiveTask.java:88 - received 1 of 5 total files, 5421 of total bytes 5421
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-10b5986c] node2 2020-12-05 09:45:02,599 AsyncStreamingInputPlus.java:197 - Issueing a channel read.
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.2:7012-61a7772e] node1 2020-12-05 09:45:02,924 StreamingInboundHandler.java:187 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: 61a7772e] Received Received (db5364c0-36dd-11eb-ab7f-6fd7ea8cef30, #0)
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.2:7012-61a7772e] node1 2020-12-05 09:45:02,927 StreamTransferTask.java:95 - recevied sequenceNumber 0, remaining files [1, 2, 3, 4]
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.2:7012-61a7772e] node1 2020-12-05 09:45:02,929 AsyncStreamingInputPlus.java:197 - Issueing a channel read.
[junit-timeout] DEBUG [Streaming-EventLoop-4-1] node2 2020-12-05 09:45:10,299 NettyStreamingMessageSender.java:258 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: acbcbd5e] Sending keep-alive
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.2:7012-61a7772e] node1 2020-12-05 09:45:10,532 StreamingInboundHandler.java:179 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: 61a7772e] Received keep-alive
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.2:7012-61a7772e] node1 2020-12-05 09:45:10,534 AsyncStreamingInputPlus.java:197 - Issueing a channel read.
[junit-timeout] DEBUG [node1_Messaging-EventLoop-3-7] node1 2020-12-05 09:45:11,169 NettyStreamingMessageSender.java:258 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: 61a7772e] Sending keep-alive
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-acbcbd5e] node2 2020-12-05 09:45:11,386 StreamingInboundHandler.java:179 - [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb channel: acbcbd5e] Received keep-alive
[junit-timeout] DEBUG [Stream-Deserializer-/127.0.0.1:7012-acbcbd5e] node2 2020-12-05 09:45:11,387 AsyncStreamingInputPlus.java:197 - Issueing a channel read.
[junit-timeout] DEBUG [node1_NettyStreaming-Outbound-/127.0.0.2.7012:1] node1 2020-12-05 09:45:14,167 AsyncChannelOutputPlus.java:165 - flush took micros: 302096082
[junit-timeout] ERROR 09:45:14 [Stream #ddd04ba0-36dd-11eb-800f-855dcc8aaeeb] Streaming error occurred on session with peer 127.0.0.2:7012
[junit-timeout] org.apache.cassandra.net.AsyncChannelOutputPlus$FlushException: The channel this output stream was writing to has been closed
[junit-timeout]     at org.apache.cassandra.net.AsyncChannelOutputPlus.propagateFailedFlush(AsyncChannelOutputPlus.java:208)
[junit-timeout]     at org.apache.cassandra.net.AsyncChannelOutputPlus.waitUntilFlushed(AsyncChannelOutputPlus.java:166)
[junit-timeout]     at org.apache.cassandra.net.AsyncChannelOutputPlus.flush(AsyncChannelOutputPlus.java:238)
[junit-timeout]     at org.apache.cassandra.db.streaming.CassandraOutgoingFile.write(CassandraOutgoingFile.java:179)
[junit-timeout]     at org.apache.cassandra.streaming.messages.OutgoingStreamMessage.serialize(OutgoingStreamMessage.java:87)
[junit-timeout]     at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:45)
[junit-timeout]     at org.apache.cassandra.streaming.messages.OutgoingStreamMessage$1.serialize(OutgoingStreamMessage.java:34)
[junit-timeout]     at org.apache.cassandra.streaming.messages.StreamMessage.serialize(StreamMessage.java:42)
[junit-timeout]     at org.apache.cassandra.streaming.async.NettyStreamingMessageSender$FileStreamTask.run(NettyStreamingMessageSender.java:347)
[junit-timeout]     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[junit-timeout]     at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[junit-timeout]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.lang.Thread.run(Thread.java:748)
[junit-timeout]     Suppressed: java.nio.channels.ClosedChannelException: null
[junit-timeout]         at org.apache.cassandra.net.AsyncStreamingOutputPlus.doFlush(AsyncStreamingOutputPlus.java:81)
[junit-timeout]         at org.apache.cassandra.net.AsyncChannelOutputPlus.flush(AsyncChannelOutputPlus.java:237)
[junit-timeout]         at org.apache.cassandra.net.AsyncChannelOutputPlus.close(AsyncChannelOutputPlus.java:256)
[junit-timeout]         at org.apache.cassandra.streaming.async.NettyStreamingMessageSender$FileStreamTask.run(NettyStreamingMessageSender.java:348)
[junit-timeout]         ... 6 common frames omitted
[junit-timeout] Caused by: io.netty.channel.unix.Errors$NativeIoException: writeAddress(..) failed: Connection timed out
...
{code}
;;;","05/Dec/20 22:20;jmeredithco;Thanks for raising the concern and testing. I'm ok with it taking longer, as long as it times out eventually. Even if it's 10 minutes it's likely better than default TCP settings.;;;","07/Dec/20 07:15;yifanc;Thanks all for the feedback! 
New commits were just pushed to address the comments. The patch is ready to be re-reviewed. ;;;","07/Dec/20 22:33;dcapwell;Finished first round of review, overall LGTM; only minor comments.

1) typo in docs; have an extra 0
2) should we use NoSpamLogger vs normal logger?;;;","08/Dec/20 00:19;yifanc;Thanks David! 
Pushed a new commit. 

bq. should we use NoSpamLogger vs normal logger?

Using {{NoSpamLogger}} sounds better. The warning message emits when disk goes slow. In that case, we can expect a lot of those warnings. Logging every warning does not provide more help, from the operators' perspective. I have changed the logging interval to 1 minute. ;;;","08/Dec/20 00:57;dcapwell;+1;;;","09/Dec/20 12:35;blerer;+1 Thanks a lot for the patch;;;","09/Dec/20 13:09;blerer;Committed into trunk at c6ea8fabf9f726a58b76ff6e41d21b650941f880;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in StreamingMessage type lookup,CASSANDRA-16131,13327923,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,aholmber,aholmber,16/Sep/20 21:29,03/Jan/21 17:03,13/Jul/23 08:39,16/Sep/20 21:34,4.0,4.0-beta3,,,,Consistency/Streaming,,,,0,,,,"Found while investigating https://issues.apache.org/jira/browse/CASSANDRA-15965

{noformat}
java.lang.NullPointerException: null
	at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:51)
	at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:172)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{noformat}

There is a null in the zero.index of the type map. We can clean this up, handle invalid ids in a uniform manner, and add a test.",,aholmber,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15965,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 16 21:34:14 UTC 2020,,,,,,,All,,,,,,"0|z0inwo:",9223372036854775807,,,,brandon.williams,,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/2958c558707e3e2252bdd38d61981ce7eb138717,,,,,,,,,Unit test added.,,,,,"16/Sep/20 21:32;aholmber;[patched|https://github.com/apache/cassandra/compare/trunk...aholmberg:CASSANDRA-15965] as part of CASSANDRA-15965.;;;","16/Sep/20 21:34;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when calling nodetool enablethrift,CASSANDRA-16127,13327624,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,rtib,rtib,15/Sep/20 08:40,29/Oct/20 11:53,13/Jul/23 08:39,12/Oct/20 18:09,2.2.19,3.0.23,3.11.9,,,Messaging/Thrift,,,,0,,,,"Having thrift disabled, it's impossible to enable it again without restarting the node:
{code}
$ nodetool statusthrift
not running
$ nodetool enablethrift
error: null
-- StackTrace --
java.lang.NullPointerException
	at org.apache.cassandra.service.StorageService.startRPCServer(StorageService.java:392)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275)
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112)
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46)
	at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237)
	at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138)
	at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
{code}
",,dcapwell,e.dimitrova,jeromatron,jwest,kkierer,maedhroz,rtib,tommy_s,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16091,CASSANDRA-16124,,,,,,,,,,,,,,,,,,,CASSANDRA-16234,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 12 18:09:13 UTC 2020,,,,,,,All,,,,,,"0|z0im2g:",9223372036854775807,,,,e.dimitrova,jwest,yifanc,,Normal,,2.2.18,,, https://github.com/apache/cassandra/commit/3ee90cfc94ee038b7758a57b56d3ec09b514cb88,,,,,,,,,added jvm-dtests,,,,,"15/Sep/20 23:34;dcapwell;on shutdown we do

{code}
if (thriftServer != null)
        {
            thriftServer.stop();
            thriftServer = null;
        }
{code}

startRPCServer does

{code}
daemon.thriftServer.start();
{code}

This null was set in 

{code}
commit 25fd7bd84f1931d2a44e90e629f794c4cd11aa46
Author: David Capwell <dcapwell@apple.com>
Date:   Fri Jul 24 18:16:37 2020 -0700

    Add support in jvm dtest to test thrift

    patch by David Capwell; reviewed by Alex Petrov,Jon Meredith for CASSANDRA-15967
{code}

Given that I broke it... I should fix it.;;;","15/Sep/20 23:56;dcapwell;Ok so I think native was turned off, I changed native to also disable thrift, so disabling native then enabling thrift would fail... this is my bad...;;;","16/Sep/20 06:33;tommy_s;Looks like this patch will also fix the similar issue I reported in CASSANDRA-16124.;;;","16/Sep/20 07:20;rtib;Now start and stop are looking much more tidy. Assume that this will also fix CASSANDRA-16091 .;;;","16/Sep/20 12:02;tommy_s;I took a closer look at the patch and tested and it did solve CASSANDRA-16124. The patch LGTM.;;;","16/Sep/20 14:47;dcapwell;Thanks for taking a look and trying!

CASSANDRA-16091 is more concerning as no test guards that, so I won’t say it’s fixed without proper testing guarding it (this patch doesn’t right now).  I’ll sync with [~brandon.williams] since he is assigned that;;;","16/Sep/20 21:58;yifanc;Left some comments inline on GH. ;;;","17/Sep/20 03:10;dcapwell;added python dtest which catches the other reported issues that I couldn't test in jvm-dtest.  I need to still test this against 2.2 and trunk, but with a version before the issue it passes, with the issue it fails.;;;","18/Sep/20 16:55;dcapwell;Ok I think the code is almost ready to review.  python dtest passes locally and skips previous versions, all branches have the new tests added and refactored to have the same lifecycle methods, and thrift/binary operations work in isolation without affecting each other.

I have updated the CI for each branch to run with the latest python dtest branch, so will ask for review once green.;;;","19/Sep/20 02:02;dcapwell;Ok trunk is finally stable; patch is ready to review.;;;","21/Sep/20 19:01;dcapwell;the test failure on trunk is caused by CASSANDRA-16102; not related to this issue.

On trunk, I have been battling with test/distributed/org/apache/cassandra/distributed/test/TopologyChangeTest.java as the test was not correct.  CassandraDaemon was not registered so the nodetool commands to shutdown networking were failing (test did not check this), which means the tests didn't see the Down event.  The test assumed only the Remove event would be present, but this was not correct as Down then Remove should be seen; so test was testing the broken behavior...  I also had to deal with the fact that it is flaky.  If the JVM is slow the client may loose connection and mark the node as Down, then see it come back with Up, so the exact event assertions would fail periodically as they didn't expect Down then Up to show up; I changed the tests to only validate the specific desired events show up in order and to ignore other events.
;;;","22/Sep/20 19:01;e.dimitrova;Hey [~dcapwell],

Thanks for the patch, also improving dtests.

Do you think you can group some of the commits if this doesn't bother [~yifanc] as a reviewer? Not sure where he is in there and whether this will affect his tracking of the patch changes. ;;;","23/Sep/20 01:30;dcapwell;[~yifanc] applied to all feedback

[~e.dimitrova] rebased 3.11 and dtest (the PR branches).;;;","23/Sep/20 23:50;yifanc;+1 on the 3.11 patch. 
(One unit test failure in the 3.11 CI. but not related)
Now looking at the dtest patch. ;;;","24/Sep/20 04:46;yifanc;dtest has [2 failures|https://app.circleci.com/pipelines/github/dcapwell/cassandra/566/workflows/05b20cbd-2312-4b36-a869-9207f26c6811/jobs/3101] that looks related to the patch.;;;","29/Sep/20 22:36;dcapwell;3.0 and 3.11 bootstrap failed but were working before https://app.circleci.com/pipelines/github/dcapwell/cassandra/550/workflows/ca6c6551-01d4-4438-bd4d-c14e27fa9bfc/jobs/3035, looks like a change I made caused a regression; looking into it.;;;","06/Oct/20 20:28;dcapwell;Sorry, neglected this patch for a bit; picking up review comments today.;;;","07/Oct/20 17:19;dcapwell;Update, I found out what was failing the test and it was a review comment to remove the validation; this is important for survey mode.

I ported the test to a jvm dtest and found a few gaps in which the test acts differently so also fixed them to be in-line with CassandraDaemon.

I will wait for CASSANDRA-16120 to merge as it is needed for the bootstrap test.;;;","07/Oct/20 20:56;jwest;LGTM. Changes look good, ran the tests locally, and also manually checked {{enable/disablethrift}} on earlier branches (and enable/disable binary on trunk). ;;;","07/Oct/20 23:00;dcapwell;[~e.dimitrova] I plan to remove the python dtest in favor of the jvm-dtest, will do that after I get a clean run (waiting on https://issues.apache.org/jira/browse/CASSANDRA-16120).;;;","08/Oct/20 16:19;dcapwell;all tests are passing for 3.11 now, will start porting the changes to the other 4 branches.;;;","08/Oct/20 19:14;jwest;Updated changes also look good;;;","08/Oct/20 20:25;dcapwell;all tests passing across all branches (after fixing the trunk test based off CASSANDRA-16057 being merged).;;;","08/Oct/20 21:04;dcapwell;Im going to start the commit process, but will not commit until [~e.dimitrova] reviews; mostly making sure the different CI systems are all green with the changes going on.;;;","08/Oct/20 21:15;dcapwell;Starting commit

CI Results (pending):

2.2
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-2.2-F9DFA56F-5286-4E7D-AE58-0AB5C18D944C
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/84/

3.0
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-3.0-F9DFA56F-5286-4E7D-AE58-0AB5C18D944C
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/85/

3.11
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-3.11-F9DFA56F-5286-4E7D-AE58-0AB5C18D944C
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/86/

trunk
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-trunk-F9DFA56F-5286-4E7D-AE58-0AB5C18D944C
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/87/;;;","09/Oct/20 03:44;e.dimitrova;A couple of nits on the dtest pull request. Please revert the ccm repository change in requirements.txt before commit.

One thing I am a bit worried is the new mark for in-jvm tests. Please add comment to clarify it. Someone brand new might be confused seeing it. Is it a duplicate test? Why is it here? I find clarifying the situation about the vnodes important.

As [~jwest] as a committer mentioned he tested both the test and the patch manually on his machine, I will look at the CI results tomorrow morning. But first, is there a reason you didn't run the DTests with Java11?

 ;;;","09/Oct/20 14:01;e.dimitrova;Also, while you introduce the new in-jvm test in all versions, I think we should document/comment this part about the versions, brought by [~adelapena]. To be clear for future use of the new mark.

For reference:

[https://the-asf.slack.com/archives/CK23JSY2K/p1602201135179400]

 

 ;;;","09/Oct/20 14:38;e.dimitrova;Unfortunately, I found this dtest failure in Jenkins for trunk:

[https://ci-cassandra.apache.org/job/Cassandra-devbranch/87/testReport/junit/dtest.bootstrap_test/TestBootstrap/test_bootstrap_binary_disabled/]

Please check it;;;","09/Oct/20 16:59;dcapwell;Yep, will check the test failure; the test failed in trunk for Circle and Jenkins, so doesn't feel like a 1-off flaky test.

[~e.dimitrova] I will take [~adelapena] version in slack and see how it works, this will also make it easier to document as my current document is hidden in a random function.;;;","09/Oct/20 17:03;dcapwell;Doh, I knew about this but forgot to update the test... the error is ok to ignore

{code}
        if self.cluster.version() >= LooseVersion('4.0'):
>           self.assert_log_had_msg(node2, 'Not starting client transports as bootstrap has not completed')
{code}

that log was added in 4.0 and made the logic more complex as it copy/pasted the validation logic just to rename the string that was used before.  I felt it was best to keep the branches in-sync so removed that log in favor of the previous log, here is the code that the jvm-dtest checks for and the python version also checks for pre-4.0

{code}
throw new IllegalStateException(""Node is not yet bootstrapped completely. Use nodetool to check bootstrap"" +
                                                    "" state and resume. For more, see `nodetool help bootstrap`"");
{code};;;","09/Oct/20 22:39;dcapwell;Starting commit

CI Results (pending):

Branch: cassandra-2.2
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-2.2-806833FE-D6C3-4556-A63B-8E1E7AC387F0
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/89/

Branch: cassandra-3.0
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-3.0-806833FE-D6C3-4556-A63B-8E1E7AC387F0
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/90/

Branch: cassandra-3.11
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-3.11-806833FE-D6C3-4556-A63B-8E1E7AC387F0
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/91/

Branch: trunk
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-trunk-806833FE-D6C3-4556-A63B-8E1E7AC387F0
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/92/
;;;","10/Oct/20 17:25;e.dimitrova;CI looks good. 

Thank you for the improvements around porting Python dtests to In-Jvm. That's important topic.

I saw a notification CCM patch was committed so I personally think that the patch and the tests are also ready for commit.;;;","12/Oct/20 16:42;dcapwell;CI Results: Yellow, normal failures

Branch: cassandra-2.2
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-2.2-1535B57E-CC4D-4F4D-91C3-9FC233923F02
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/95/

Branch: cassandra-3.0
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-3.0-1535B57E-CC4D-4F4D-91C3-9FC233923F02
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/96/

Branch: cassandra-3.11
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-cassandra-3.11-1535B57E-CC4D-4F4D-91C3-9FC233923F02
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/97/

Branch: trunk
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16127-trunk-1535B57E-CC4D-4F4D-91C3-9FC233923F02
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/98/
;;;","12/Oct/20 18:09;dcapwell;python dtest commit: 1b71196a036b4f33d1ef53418bd21ac4b241399e;;;",,,,,,,,,,,,,
Circleci should run cqlshlib tests as well,CASSANDRA-16121,13326834,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,10/Sep/20 10:20,24/Jun/21 17:43,13/Jul/23 08:39,05/Nov/20 23:44,4.0,4.0-beta4,,,,CI,Test/unit,,,0,,,,Currently circleci is not running cqlshlib tests. This resulted in some bugs not being caught before committing.,,bereng,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14975,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16655,,,,,CASSANDRA-16098,CASSANDRA-15769,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 06 05:03:05 UTC 2020,,,,,,,All,,,,,,"0|z0ih74:",9223372036854775807,,,,dcapwell,e.dimitrova,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/0700d795bcc4d79c3f2e52872ac865fa735917d8,,,,,,,,,See PR,,,,,"14/Sep/20 05:23;bereng;CI results in PR.;;;","15/Sep/20 13:36;e.dimitrova;I am wondering do we know why they were not included before? 

I will make a review pass later today. ;;;","15/Sep/20 14:56;bereng;I don't know tbh. I just found a failure in ci-cass that I couldn't repro on circle and found out that it was just they weren't being ran :shrug:;;;","15/Sep/20 23:25;dcapwell;bq. I am wondering do we know why they were not included before? 

[~djoshi] can you answer?;;;","16/Sep/20 02:14;e.dimitrova;In CASSANDRA-10190 all cql related python tests were updated to run with both python 2&3 and jobs were added to circleci but I think the in-tree tests might have been missed. I will check better tomorrow on the laptop(locked myself out of my apartment and now trying to do some stuff from my phone to distract myself from the situation:D ). Meanwhile, did you test with different resources how much time it takes?

Also, I saw you set large resource_class for j8 and medium for j11 for the MIDRES? Was this a copy-paste issue or there is any reason I missed?

What is the difference in duration between medium and large resource class usage? 
 Also, I am curious, do the tests manage to run properly with medium resources? ;;;","16/Sep/20 02:21;e.dimitrova;Actually, I just saw in CircleCI your test run, you are using medium resources to run both j8 and j11 and the test run duration is 5 minutes so I suggest not to spend credits on the large resources with MIDRES, WDYT?;;;","16/Sep/20 02:27;e.dimitrova;Change large resources to medium for the MIDRES;;;","16/Sep/20 04:50;bereng;[~e.dimitrova] if I managed to follow the steps correctly that {{large}} on {{MIDRES}} is down to what {{generate.sh}} produces.;;;","16/Sep/20 05:23;bereng;New CI results in PR available. Everything is good with {{medium}} on j8 as expected.;;;","16/Sep/20 13:34;e.dimitrova;Hi [~Bereng],

Thanks for the update, can you also update the patch files, please? I think at least the HIGHRES needs an update for the large resources?;;;","17/Sep/20 10:16;bereng;Hi [~e.dimitrova] I updated both patch files. But notice the following which ties to your original comment about using too large resources:
- config21 uses {{j8_small_par_executor}} [here|https://github.com/bereng/cassandra/blob/CASSANDRA-16121/.circleci/config-2_1.yml#L399]
- {{j8_small_par_executor}} is patched to {{large}} and parallelism of {{10}} [here|https://github.com/bereng/cassandra/blob/trunk/.circleci/config-2_1.yml.mid_res.patch#L19]

So my original commit was correct when generating 'large & 10' (it is what the patch does) Shouldn't we instead change the patch to redefine {{j8_small_par_executor}} to 'medium & 1'?;;;","22/Sep/20 01:47;e.dimitrova;I saw that  j8_small_par_executor is used by the in-jvm tests so we shouldn't change it as this will unfortunately reflect them. I checked, there is no annotation for 'medium&1' so we can just create one ('j8_small_executor' or something) to be used by the new job. That should be fine. ;;;","22/Sep/20 07:59;bereng;I added that new executor and updated the files. I will now run small, medium and high to make sure the 3 still work and then we should be able to merge.

- Small:  [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/121/workflows/7d278dce-3f13-46f0-bde2-79dcf61c6ad1] [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/121/workflows/6bba245b-ac4d-426a-9041-c90571070d51]: OOM on the final test report which is a known problem, otherwise LGTM.
- Medium [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/123/workflows/16aa4612-4a27-4bea-bebf-97efeef56353] [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/123/workflows/c261dcdb-d878-4d66-afa6-5791d01dc45d] Failures look unrelated or known to fail. LGTM
- High [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/125/workflows/69b234d0-dc70-4dd7-850a-23cb20ba4891] [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/125/workflows/2e2143f0-6750-4579-b301-9c6747df1aa4] Same as prevoius. LGTM;;;","23/Sep/20 15:01;bereng;[~e.dimitrova] squashed and you can see in the previous message low, mid and high CI runs. Feel free to butcher it :-);;;","23/Sep/20 22:42;e.dimitrova;Thanks [~Bereng], I left some small comments on github, maybe during squash something went wrong with the patch files. Please check them. Thanks;;;","24/Sep/20 05:44;bereng;Replied in GH. LGTM it's just {{diff}} 'noise' making things hard to follow iiuc what you meant.;;;","29/Sep/20 12:02;bereng;[~e.dimitrova] executors are now in the original config-2.1 file:

- Low: [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/129/workflows/42ede6ff-d809-42f3-b143-3945003539a6] & [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/129/workflows/10497110-d938-4500-8ef3-eb3d0e815b6e]
- Medium: [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/130/workflows/ee08a837-0710-40c8-bb26-cad7b2e20891] & [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/130/workflows/94de5698-26b5-467d-afe4-c8b284d52d50]
- High: [j11|https://app.circleci.com/pipelines/github/bereng/cassandra/131/workflows/5d7b1a6e-fd7b-47d9-932c-cabc8194a644] & [j8|https://app.circleci.com/pipelines/github/bereng/cassandra/131/workflows/893ae53b-0744-4568-ae41-993a9c1fdcd5]
;;;","02/Oct/20 13:08;e.dimitrova;Thank you for your work.

One last thing to add and I will +1. Artifacts are not stored.

Otherwise I apply the patch and the only thing I see is this line but the patch applies properly so it doesn't look as an issue?
{code:java}
missing header for unified diff at line 1 of patch{code}
Also, [~Bereng], you mentioned this line doesn't appear on your machine...

[~dcapwell], can you also check it, please?;;;","02/Oct/20 13:13;bereng;[~e.dimitrova] iirc the only thing that survives the execution of the sh script is the xml junit results file. So there are no other artifacts to store available. You get the logs in stdout and the junit results but nothing else.

Also yes the patch applies cleanly for me.;;;","13/Oct/20 09:13;bereng;Waiting for committer review.;;;","21/Oct/20 20:50;dcapwell;I can start reviewing.

[~e.dimitrova] did you +1 or still pending?  I read your comment as pending?;;;","21/Oct/20 21:05;dcapwell;[~Bereng] I see Jenkins runs these tests and is green, yet the test results linked are failing with different test names

Jenkins: https://ci-cassandra.apache.org/view/Cassandra%204.0/job/Cassandra-trunk-cqlsh-tests/lastCompletedBuild/cython=no,jdk=jdk_1.8_latest,label=cassandra/testReport/
Jenkins build def: https://github.com/apache/cassandra-builds/blob/6d556fe8873296c0a48f747bd9855e462193252d/jenkins-dsl/cassandra_job_dsl_seed.groovy#L344

Circle CI: https://app.circleci.com/pipelines/github/bereng/cassandra/129/workflows/10497110-d938-4500-8ef3-eb3d0e815b6e/jobs/1053/tests;;;","21/Oct/20 21:07;dcapwell;Left comments in PR, but won't to know why this acts differently than Jenkins, if you could look into that it would be great (we don't archive the test xml so I can't view it).;;;","21/Oct/20 21:14;dcapwell;Talking to [~e.dimitrova] in slack she showed me how to find all tests that ran and I was also looking at Jenkins wrong; here is the test results in Jenkins for the test that failed: https://ci-cassandra.apache.org/view/Cassandra%204.0/job/Cassandra-trunk-cqlsh-tests/lastCompletedBuild/cython=no,jdk=jdk_1.8_latest,label=cassandra/testReport/cqlshlib.python3.jdk8.no_cython.test.test_cqlsh_output/TestCqlshOutput/test_describe_cluster_output/history/
 

In Jenkins this test isn't flaky, so wondering why it failed here.;;;","22/Oct/20 04:32;bereng;Correct, those are 2 diff sets of tests.

At the time of this PR `test_describe_cluster_output` was failing (CASSANDRA-16098) but wasn't getting reported in jenkins, this is what trigerred me raising this ticket. So this SHA fails this test and you can run it locally to doublecheck. It is not fixed/rebased in this PR bc I needed a failing test to see that circleci was reporting failures correctly :-)

Should we rebase and run a new circleci/jenkins and then we have confirmation it A. reports failures B. now passes green?

Edit: That was a silly question lol. Rebased as it was an old PR, pushed and new CI passing green in the PR. Now we know both it's green and does indeed report failures.;;;","22/Oct/20 13:20;e.dimitrova;[~dcapwell] [~Bereng]
I saw one discussion in the PR which I believe It is quite important so I will leave a comment in the ticket for visibility.
Currently no tests  are started automatically in Java 11.
I would like to encourage people to always run at least the unit and in-jvm tests for Java 11. IMO that is the only stable way to move Java 11 out of being only experimental. 
Now, one can argue that sometimes in circle we test something quick before final submission and we want a quick j8 check only but I think most of the time people run the full CI in Circle/Jenkins for a patch in final/almost final state
While we still don't have Java 11 in Jenkins, we need to be sure at least in Circle we have always at least a minimal coverage, personal opinion. Feel free to disagree :-)  ;;;","23/Oct/20 03:39;bereng;CASSANDRA-15944 has been merged recently #justfyi;;;","29/Oct/20 16:54;dcapwell;sorry for the delay, been overloaded.  I should be able to get to this Friday.;;;","04/Nov/20 18:22;dcapwell;sorry for the delay, starting back today.;;;","04/Nov/20 18:38;dcapwell;Overall +1 from me, only small comment about keeping the logs;;;","04/Nov/20 20:04;e.dimitrova;+1 as soon as David's comment is addressed and the logs are added, thank you for spotting the absence and adding the tests;;;","05/Nov/20 05:31;bereng;Hi [~dcapwell] [~e.dimitrova] thx for looking into this. Unfortunately logs are not reachable atm so that is food for another ticket imo. Details in the PR.;;;","05/Nov/20 17:36;dcapwell;thanks for replying [~Bereng], LGTM, will commit today (unless [~e.dimitrova] has anything open).;;;","05/Nov/20 23:14;dcapwell;CI Results: Yellow, seems these tests can be flaky.
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16121-trunk-13B96DF0-43D0-4161-977E-5D1FEFDE4DE8]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16121-trunk-13B96DF0-43D0-4161-977E-5D1FEFDE4DE8]|[build|unknown]|
;;;","05/Nov/20 23:19;dcapwell;testing out commit but used a slight change; seems that the commit was reverting the python dtest change to use the trunk branch, so corrected that.

{code}
diff --git a/.circleci/config.yml.MIDRES b/.circleci/config.yml.MIDRES
index 691cc2886f..823a550e04 100644
--- a/.circleci/config.yml.MIDRES
+++ b/.circleci/config.yml.MIDRES
@@ -1459,7 +1459,7 @@ jobs:
     - CASS_DRIVER_NO_CYTHON: true
     - CASSANDRA_SKIP_SYNC: true
     - DTEST_REPO: git://github.com/apache/cassandra-dtest.git
-    - DTEST_BRANCH: master
+    - DTEST_BRANCH: trunk
     - CCM_MAX_HEAP_SIZE: 1024M
     - CCM_HEAP_NEWSIZE: 256M
     - JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
@@ -2002,7 +2002,7 @@ jobs:
     - CASS_DRIVER_NO_CYTHON: true
     - CASSANDRA_SKIP_SYNC: true
     - DTEST_REPO: git://github.com/apache/cassandra-dtest.git
-    - DTEST_BRANCH: master
+    - DTEST_BRANCH: trunk
     - CCM_MAX_HEAP_SIZE: 1024M
     - CCM_HEAP_NEWSIZE: 256M
     - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
{code};;;","05/Nov/20 23:45;dcapwell;Saw test failures, but they pass the next time or on the other jdk pipeline.  Since this patch just runs them and didn't change them, I committed knowing that this will cause more flaky tests; can't fix if we don't know them.

Thanks for your work [~Bereng]!;;;","06/Nov/20 05:03;bereng;[~dcapwell] thanks for looking into this one. Yes that's the point running these tests. If there are hidden flakies they will surface now. Also as this hadn't been rebased in a long time good catch changing 'master' to 'trunk' after the recent change in branch names.

One question: Why was the fixVersion removed?;;;",,,,,,,,,,
MockSchema's SSTableReader creation leaks FileHandle and Channel instances,CASSANDRA-16119,13326738,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,09/Sep/20 20:56,16/Mar/22 14:15,13/Jul/23 08:39,10/Sep/20 19:46,4.0,4.0-beta3,,,,Test/unit,,,,0,,,,"{{MockSchema}} creates {{SSTableReader}} instances for testing, but when it does, it doesn’t seem to ever close the {{FileHandle}} and {{Channel}} instances from which copies are made for the actual readers. ({{FileHandle}} itself also internally copies the channel on creation.) This can trigger leak detection, although perhaps not reliably, from tests like {{AntiCompactionTest}}. A couple well-placed {{try-with-resources}} blocks should help us avoid this (and shouldn't risk closing anything too early, since the close methods for handles and channels seem only to do reference bookkeeping anyway).


Example:

{noformat}
[junit-timeout] ERROR 16:35:47,747 LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@487c0fdb) to class org.apache.cassandra.io.util.FileHandle$Cleanup@2072030898:/var/folders/4d/zfjs7m7s6x5_l93k33r5k6680000gn/T/mocksegmentedfile0tmp was not released before the reference was garbage collected
[junit-timeout] ERROR 16:35:47,747 Allocate trace org.apache.cassandra.utils.concurrent.Ref$State@487c0fdb:
[junit-timeout] Thread[main,5,main]
[junit-timeout] 	at java.lang.Thread.getStackTrace(Thread.java:1559)
[junit-timeout] 	at org.apache.cassandra.utils.concurrent.Ref$Debug.<init>(Ref.java:249)
[junit-timeout] 	at org.apache.cassandra.utils.concurrent.Ref$State.<init>(Ref.java:179)
[junit-timeout] 	at org.apache.cassandra.utils.concurrent.Ref.<init>(Ref.java:101)
[junit-timeout] 	at org.apache.cassandra.utils.concurrent.SharedCloseableImpl.<init>(SharedCloseableImpl.java:30)
[junit-timeout] 	at org.apache.cassandra.io.util.FileHandle.<init>(FileHandle.java:74)
[junit-timeout] 	at org.apache.cassandra.io.util.FileHandle.<init>(FileHandle.java:50)
[junit-timeout] 	at org.apache.cassandra.io.util.FileHandle$Builder.complete(FileHandle.java:389)
[junit-timeout] 	at org.apache.cassandra.schema.MockSchema.sstable(MockSchema.java:124)
[junit-timeout] 	at org.apache.cassandra.schema.MockSchema.sstable(MockSchema.java:83)
{noformat}",,e.dimitrova,maedhroz,marcuse,samt,,,,,,,,"maedhroz opened a new pull request #744:
URL: https://github.com/apache/cassandra/pull/744


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Sep/20 21:39;githubbot;600","smiklosovic closed pull request #744:
URL: https://github.com/apache/cassandra/pull/744


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Sep 10 19:46:24 UTC 2020,,,,,,,All,,,,,,"0|z0igls:",9223372036854775807,,,,marcuse,samt,,,Low,,4.0-beta2,,,https://github.com/apache/cassandra/commit/54d297a192ca452dab5640f33fd6c22fd31e2f9c,,,,,,,,,passing unit tests (as this is a change specifically to a unit test helper),,,,,"09/Sep/20 21:41;maedhroz;[patch|https://github.com/apache/cassandra/pull/744], [j8 tests|https://app.circleci.com/pipelines/github/maedhroz/cassandra/108/workflows/5ce25733-c058-48b9-add4-1fa07f95a59a], [j11 tests|https://app.circleci.com/pipelines/github/maedhroz/cassandra/108/workflows/83a675f2-d3c2-4ad6-82e4-b56ae992ab6e];;;","09/Sep/20 21:45;maedhroz;CC [~marcuse];;;","10/Sep/20 08:28;marcuse;lgtm, +1;;;","10/Sep/20 19:46;samt;And committed in {{54d297a192ca452dab5640f33fd6c22fd31e2f9c}}, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix tests CQLTester.assertLastSchemaChange causes ClassCastException,CASSANDRA-16114,13326556,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,dcapwell,dcapwell,08/Sep/20 21:00,21/Dec/20 09:08,13/Jul/23 08:39,03/Nov/20 13:47,2.2.19,3.0.23,3.11.9,4.0,4.0-beta4,Test/unit,,,,0,,,,"Build: https://app.circleci.com/pipelines/github/dcapwell/cassandra/494/workflows/b3765545-7b09-48dd-85ff-830c4f348329/jobs/2681

{code}
java.lang.ClassCastException: org.apache.cassandra.transport.messages.ResultMessage$Void cannot be cast to org.apache.cassandra.transport.messages.ResultMessage$SchemaChange
	at org.apache.cassandra.cql3.CQLTester.assertLastSchemaChange(CQLTester.java:916)
	at org.apache.cassandra.cql3.validation.entities.UFTest.testSchemaChange(UFTest.java:94)
{code}",,aholmber,bereng,blerer,cedric.nabaa,dcapwell,e.dimitrova,,,,,,"bereng opened a new pull request #782:
URL: https://github.com/apache/cassandra/pull/782


   …e tests


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Oct/20 08:26;githubbot;600","bereng commented on pull request #782:
URL: https://github.com/apache/cassandra/pull/782#issuecomment-711952617


   Ci [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/153/workflows/68fff645-8ea5-4890-8a30-bdb5c725c29d)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/153/workflows/f96f86e0-1c8e-4392-b81d-6ecad5e225a7)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Oct/20 09:50;githubbot;600","dcapwell commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r509544429



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -401,6 +402,7 @@ public void beforeTest() throws Throwable
     @After
     public void afterTest() throws Throwable
     {
+        asyncTestSchemaChanges = true;

Review comment:
       rather than do this, and add blocking logic at every test that fails, why not update `org.apache.cassandra.cql3.CQLTester#schemaChange` to allow not saving the result? We do not care about the schema changes in this block, so we can just ask schemaChange to not update `lastSchemaChangeResult`; this would remove all the blocking.

##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -194,7 +194,8 @@ public static final ProtocolVersion getDefaultVersion()
         }
     }
 
-    public static ResultMessage lastSchemaChangeResult;
+    public static volatile ResultMessage lastSchemaChangeResult;

Review comment:
       can you update the usages to pull this reference once?  for example `org.apache.cassandra.cql3.CQLTester#assertLastSchemaChange` access it twice, which isn't safe.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 18:18;githubbot;600","dcapwell commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r509547019



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -401,6 +402,7 @@ public void beforeTest() throws Throwable
     @After
     public void afterTest() throws Throwable
     {
+        asyncTestSchemaChanges = true;

Review comment:
       just saw that Benjamin had the same feedback =)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Oct/20 18:21;githubbot;600","bereng commented on pull request #782:
URL: https://github.com/apache/cassandra/pull/782#issuecomment-714231316


   Thx for the feedback. I wanted to keep the original behavior of saving the _last_ schema change but as you both pointed out it's cleaner not to.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 05:11;githubbot;600","bereng commented on pull request #782:
URL: https://github.com/apache/cassandra/pull/782#issuecomment-714293593


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/156/workflows/f736e09d-d28f-4992-b7a7-f356c18cfee8)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/156/workflows/7fa9fa33-d02f-49f6-a929-a69f84d0822c)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 07:31;githubbot;600","blerer commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r510135556



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -949,8 +949,9 @@ protected void assertLastSchemaChange(Event.SchemaChange.Change change, Event.Sc
                                           String keyspace, String name,
                                           String... argTypes)
     {
-        Assert.assertTrue(lastSchemaChangeResult instanceof ResultMessage.SchemaChange);
-        ResultMessage.SchemaChange schemaChange = (ResultMessage.SchemaChange) lastSchemaChangeResult;
+        ResultMessage schemaChangeRes = recordedSchemaChangeResult;
+        Assert.assertTrue(schemaChangeRes instanceof ResultMessage.SchemaChange);
+        ResultMessage.SchemaChange schemaChange = (ResultMessage.SchemaChange) schemaChangeRes;

Review comment:
       If we use `Event.SchemaChange schemaChange = ((ResultMessage.SchemaChange) recordedSchemaChangeResult).change;` we can simplify the following code by removing the `.change` parts.

##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -970,7 +976,8 @@ protected static void schemaChange(String query)
 
             QueryOptions options = QueryOptions.forInternalCalls(Collections.<ByteBuffer>emptyList());
 
-            lastSchemaChangeResult = statement.executeLocally(queryState, options);
+            ResultMessage result = statement.executeLocally(queryState, options);
+            recordedSchemaChangeResult = recordSchemaChange ? result : recordedSchemaChangeResult;

Review comment:
       Using a ternary operator here is a bit confusing. An `if` would be clearer.

##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -194,7 +194,7 @@ public static final ProtocolVersion getDefaultVersion()
         }
     }
 
-    public static ResultMessage lastSchemaChangeResult;
+    public static volatile ResultMessage recordedSchemaChangeResult;

Review comment:
       I would use `lastRecordedSchemaChangeResult`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 12:53;githubbot;600","blerer commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r510136936



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -194,7 +194,7 @@ public static final ProtocolVersion getDefaultVersion()
         }
     }
 
-    public static ResultMessage lastSchemaChangeResult;
+    public static volatile ResultMessage recordedSchemaChangeResult;

Review comment:
       ... or `lastRecordedSchemaChange`. The `Result` part does not bring much.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 12:55;githubbot;600","dcapwell commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r510370433



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -970,7 +976,8 @@ protected static void schemaChange(String query)
 
             QueryOptions options = QueryOptions.forInternalCalls(Collections.<ByteBuffer>emptyList());
 
-            lastSchemaChangeResult = statement.executeLocally(queryState, options);
+            ResultMessage result = statement.executeLocally(queryState, options);
+            recordedSchemaChangeResult = recordSchemaChange ? result : recordedSchemaChangeResult;

Review comment:
       agree, but mostly to avoid updating with the same value; can we use
   
   ```
   if (recordSchemaChange)
       recordedSchemaChangeResult = result;
   ```
   
   it is more clear, but also avoids a race condition issue if a user updates the schema from multiple threads; we should avoid setting as we could set an old history by mistake.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 18:27;githubbot;600","bereng commented on pull request #782:
URL: https://github.com/apache/cassandra/pull/782#issuecomment-714905290


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/157/workflows/b1080bfd-f964-4b6c-b902-cae605e39c92)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/157/workflows/8889fecd-310f-47ba-9b31-1a8f62581452)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 04:37;githubbot;600","blerer commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r510931119



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -970,7 +976,8 @@ protected static void schemaChange(String query)
 
             QueryOptions options = QueryOptions.forInternalCalls(Collections.<ByteBuffer>emptyList());
 
-            lastSchemaChangeResult = statement.executeLocally(queryState, options);
+            ResultMessage result = statement.executeLocally(queryState, options);
+            recordedSchemaChangeResult = recordSchemaChange ? result : recordedSchemaChangeResult;

Review comment:
       @dcapwell Your comment made me pause. I always assumed that this code will be called in a single threaded way (outside of the tearDown logic). If a user updates the schema from multiple threads there are no way to avoid some flakiness with `assertLastSchemaChange` because we cannot know which thread will update the `recordedSchemaChangeResult` last.
   If we want the code to be more robust, I think we should consider removing the volatile variable and let the user store the result of the schema change on his side.
   We are exploring that approach with @bereng. If it lead to something we will post a patch next week.    




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 14:39;githubbot;600","bereng commented on pull request #782:
URL: https://github.com/apache/cassandra/pull/782#issuecomment-716275678


   @blerer is [proposing](https://github.com/apache/cassandra/compare/trunk...blerer:CASSANDRA-16114-review) we use an approach to use a returned value instead for the reasons he mentions above. We have no multi threaded usages atm but this will make it more future proof so +1 from me.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Oct/20 03:01;githubbot;600","blerer opened a new pull request #803:
URL: https://github.com/apache/cassandra/pull/803


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:33;githubbot;600","blerer opened a new pull request #805:
URL: https://github.com/apache/cassandra/pull/805


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:37;githubbot;600","bereng commented on pull request #782:
URL: https://github.com/apache/cassandra/pull/782#issuecomment-720907063


   @blerer I think we can merge now.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:38;githubbot;600","bereng commented on a change in pull request #782:
URL: https://github.com/apache/cassandra/pull/782#discussion_r516430364



##########
File path: test/unit/org/apache/cassandra/cql3/CQLTester.java
##########
@@ -970,7 +976,8 @@ protected static void schemaChange(String query)
 
             QueryOptions options = QueryOptions.forInternalCalls(Collections.<ByteBuffer>emptyList());
 
-            lastSchemaChangeResult = statement.executeLocally(queryState, options);
+            ResultMessage result = statement.executeLocally(queryState, options);
+            recordedSchemaChangeResult = recordSchemaChange ? result : recordedSchemaChangeResult;

Review comment:
       That 'new logic' @blerer is referring to is that code indeed in the new PR iiuc.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:42;githubbot;600","blerer opened a new pull request #804:
URL: https://github.com/apache/cassandra/pull/804


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 13:45;githubbot;600","blerer opened a new pull request #806:
URL: https://github.com/apache/cassandra/pull/806


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:12;githubbot;600","blerer closed pull request #805:
URL: https://github.com/apache/cassandra/pull/805


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:19;githubbot;600","blerer commented on pull request #806:
URL: https://github.com/apache/cassandra/pull/806#issuecomment-721128063


   Merged manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:19;githubbot;600","blerer closed pull request #806:
URL: https://github.com/apache/cassandra/pull/806


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:20;githubbot;600","blerer closed pull request #804:
URL: https://github.com/apache/cassandra/pull/804


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:20;githubbot;600","blerer commented on pull request #805:
URL: https://github.com/apache/cassandra/pull/805#issuecomment-721127937


   Merged manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:20;githubbot;600","blerer commented on pull request #803:
URL: https://github.com/apache/cassandra/pull/803#issuecomment-721127633


   Merged manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:20;githubbot;600","blerer commented on pull request #804:
URL: https://github.com/apache/cassandra/pull/804#issuecomment-721127816


   Merged manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:20;githubbot;600","blerer closed pull request #803:
URL: https://github.com/apache/cassandra/pull/803


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Nov/20 14:20;githubbot;600","bereng closed pull request #782:
URL: https://github.com/apache/cassandra/pull/782


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:42;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,16200,,,0,16200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 03 13:47:04 UTC 2020,,,,,,,All,,,,,,"0|z0ibvw:",9223372036854775807,,,,blerer,dcapwell,,,Normal,,2.2.0,,,https://github.com/apache/cassandra/commit/ec2f2e687dde75b30c09e0a676bb03fd62ac0cbb,,,,,,,,,See PR for CI results,,,,,"08/Sep/20 21:09;dcapwell;looking at the code I see the following

{code}
Assert.assertTrue(lastSchemaChangeResult instanceof ResultMessage.SchemaChange);
ResultMessage.SchemaChange schemaChange = (ResultMessage.SchemaChange) lastSchemaChangeResult; // fails with java.lang.ClassCastException here
{code}

This implies concurrent modification, so looked for anything that creates modifications async and found org.apache.cassandra.cql3.CQLTester#afterTest does, so this would make this logic not thread safe (no memory barriers to make sure visible), and would make all tests that check this state unsafe as it can change after the test changes the schema.;;;","14/Sep/20 19:34;e.dimitrova;Hey [~dcapwell], do you plan on working on this one? ;;;","14/Sep/20 21:43;dcapwell;nope, feel free to take =D;;;","15/Sep/20 15:10;cedric.nabaa;Hello Can I take this one? It seems like a good start;;;","15/Sep/20 15:36;e.dimitrova;I haven't started it, feel free to take it [~cedric.nabaa];;;","15/Oct/20 05:23;bereng;[~cedric.nabaa] are you still planning on working on this one?;;;","19/Oct/20 08:23;bereng;Hi, I see no activity from [~cedric.nabaa] for the last month nor a reply so I hijacked this one. I hope that is ok, apologies otherwise.;;;","21/Oct/20 18:19;dcapwell;left comments in PR;;;","22/Oct/20 18:27;dcapwell;+1 from me assuming https://github.com/apache/cassandra/pull/782/files#r510370433 is resolved.;;;","23/Oct/20 04:37;bereng;Addressed and latest CI in PR.;;;","23/Oct/20 18:01;dcapwell;+1 from me;;;","27/Oct/20 05:51;bereng;[~dcapwell] there is a new proposal in the PR from [~blerer] in case you missed the GH update #collborating;;;","03/Nov/20 05:09;bereng;[~blerer] I think with both +1 from you and David we can merge your proposal now :-);;;","03/Nov/20 09:27;blerer;The problem is affecting previous versions too. Backporting the patch for those.
;;;","03/Nov/20 12:25;blerer;||Branch PR|| CI ||
|[cassandra-2.2|https://github.com/apache/cassandra/pull/803]|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/53/workflows/61ff3832-f724-4f56-8115-6d78e3c6903c]|
|[cassandra-3.0|https://github.com/apache/cassandra/pull/804]|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/54/workflows/efc0b9c5-95eb-4e9b-9e62-0df834bcf0f9]|
|[cassandra-3.11|https://github.com/apache/cassandra/pull/805]|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/51/workflows/969b6c8f-a2c9-405e-a3b1-79ce19000698]|
|[trunk|https://github.com/apache/cassandra/pull/806]|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/56/workflows/fce458af-2cb1-476a-934b-e4276e0af16b], [j11|https://app.circleci.com/pipelines/github/blerer/cassandra/56/workflows/9f6f8b58-60a0-4213-9c73-f87e4c809d37]|;;;","03/Nov/20 13:03;blerer;CI looks good for the different branches.;;;","03/Nov/20 13:47;blerer;Committed into cassandra-2.2 at ec2f2e687dde75b30c09e0a676bb03fd62ac0cbb and merged into cassandra-3.0, cassandra-3.11 and trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove duplicate line in Cassandra docs about virtual tables limitations,CASSANDRA-16107,13326185,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,fabioueno,fabioueno,fabioueno,06/Sep/20 10:51,03/Jan/21 17:03,13/Jul/23 08:39,07/Sep/20 06:15,4.0,4.0-beta3,,,,Documentation/Website,,,,0,,,,Lines 81 and 84 of cassandra/doc/source/new/virtualtable.rst are exactly the same. This should just remove one of them.,,fabioueno,mck,,,,,,,,,,"michaelsembwever closed pull request #734:
URL: https://github.com/apache/cassandra/pull/734


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Sep/20 06:16;githubbot;600","michaelsembwever commented on pull request #734:
URL: https://github.com/apache/cassandra/pull/734#issuecomment-688061582


   Merged with 64b338cbbce6bba70bda696250f3ccf4931b2808


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Sep/20 06:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,fabioueno,,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Sep 07 06:16:29 UTC 2020,,,,,,,All,,,,,,"0|z0id7k:",9223372036854775807,,,,mck,,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/64b338cbbce6bba70bda696250f3ccf4931b2808,,,,,,,,,cassandra.staged.apache.org,,,,,"06/Sep/20 18:30;mck;Patch at https://github.com/apache/cassandra/pull/734;;;","07/Sep/20 06:15;mck;Committed as [64b338cbbce6bba70bda696250f3ccf4931b2808|https://github.com/apache/cassandra/commit/64b338cbbce6bba70bda696250f3ccf4931b2808];;;","07/Sep/20 06:16;mck;Thanks [~fabioueno] for reporting and patching it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InvalidQuery when datetime string format is not zero padded,CASSANDRA-16105,13325958,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,joao.reis,joao.reis,03/Sep/20 16:47,03/Jan/21 17:03,13/Jul/23 08:39,15/Sep/20 15:45,4.0,4.0-beta3,,,,CQL/Interpreter,,,,0,,,,"With CASSANDRA-15976, Cassandra no longer accepts certain datetime string formats that it used to accept before:

{code:java}
Unable to parse a date/time from '2020-09-03 9:00:00+0000'
{code}

In this example, {{2020-09-03 9:00:00+0000}} is not accepted in 4.0-beta2 but it is accepted in previous versions (I tested this with 4.0-beta1 and 3.11.4). If I add a zero so that it becomes {{2020-09-03 09:00:00+0000}} then it is accepted in all of the 3 mentioned versions (note the zero padded time part - {{9:00:00}} vs {{09:00:00}})",,aholmber,brandon.williams,jeromatron,joao.reis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 15 15:45:43 UTC 2020,,,,,,,All,,,,,,"0|z0ibt4:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-beta2,,,https://github.com/apache/cassandra/commit/07f8db31ae10a3883c06194642354feb711e361c,,,,,,,,,new unit test characterizing the behavior,,,,,"11/Sep/20 21:27;aholmber;Potential [patch|https://github.com/aholmberg/cassandra/pull/5/files].

I learned that a single character for a numeric field in the DTF pattern accepts arbitrary zero padding (or not). I didn't see this described in the docs. I added a test characterizing it. Also happened to find some additional correctness bugs around this in the *old* parsing, so ""good"", I guess.

CI running:
[j8|https://app.circleci.com/pipelines/github/aholmberg/cassandra/32/workflows/07410762-10cd-4039-a072-238522b9ba1e]
[j11|https://app.circleci.com/pipelines/github/aholmberg/cassandra/32/workflows/e6f7ff1c-b15f-46c1-83d5-f4082bac7ccd];;;","15/Sep/20 15:45;brandon.williams;Interesting find.  Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong warning about data volumes capacity,CASSANDRA-16104,13325952,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,saprykin,saprykin,saprykin,03/Sep/20 16:28,27/May/22 19:25,13/Jul/23 08:39,06/Aug/21 18:21,3.0.26,3.11.12,4.0.1,4.1,4.1-alpha1,Tool/nodetool,,,,0,,,,"I see the following warning trying to run *nodetool upgradesstables*
{noformat}
WARN  16:09:24 Only 34988 MB free across all data volumes. Consider adding more capacity to your cluster or removing obsolete snapshots
{noformat}
This warning is wrong because the wrong storage device capacity gets tested.

All my cassandra data paths are subdirectories of */data* mount point which has enough of space:
{noformat}
$ df -h /data
Filesystem      Size  Used Avail Mounted on
.................     1.2T 200G  1T  /data
{noformat}
However what Warning reports is a OS mount which has nothing to do with Cassandra configuration:
{noformat}
df -h /
Filesystem      Size  Used Avail Use% Mounted on
............        40G  5.7G   35G  15% /
{noformat}

I see this error running Cassandra 3.0.22",,adelapena,blerer,e.dimitrova,jeromatron,saprykin,,,,,,,"adelapena opened a new pull request #150:
URL: https://github.com/apache/cassandra-dtest/pull/150


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jul/21 12:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,saprykin,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Aug 06 18:19:39 UTC 2021,,,,,,,All,,,,,,"0|z0ibrs:",9223372036854775807,,,,adelapena,blerer,,,Low,,2.1.14,,,https://github.com/apache/cassandra/commit/acf38bf7a1ac34fdbe8c18c843828a78293a85cb,,,,,,,,,no documentation needed,,,,,"08/Oct/20 16:51;saprykin;After some digging I found a source for this warning:
* src/java/org/apache/cassandra/tools/NodeProbe.java method *upgradeSSTables* calls *checkJobs* to validate *--jobs* parameter ;
* which calls *DatabaseDescriptor.toolInitialization(false)* ;
* *DatabaseDescriptor* calls *applySimpleConfig* which validates *data_files_directories* and produces warning ;

So data directory space gets checked in the wrong location (if CASSANDRA_CONF env is not default) and on the wrong host (it is checked on nodetool upgradesstables request source).

Moreover I do not think checkJobs has any sense at all as it validates *--jobs* against local configuration which has nothing to do with *concurrent_compactors* value for host which actually executes upgrade sstables operation.;;;","08/Oct/20 19:34;saprykin;I have extended *StorageServiceMBean* with method *getConcurrentCompactors* and changed *checkJobs* to validate --jobs parameter using JMX;;;","14/Jul/21 13:04;adelapena;[~saprykin] Thanks for the patch, and sorry for the delayed review.

Getting concurrent compactors through JMX when validating the {{-j/--jobs}} option makes sense to me. Indeed, there is [a TODO comment|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/tools/NodeProbe.java#L302] about this in 3.11, dating back to CASSANDRA-9054. I have rebased the patch and created versions for 3.11, 4.0 and trunk, and CI is running:
||patch||CI||
|[3.0|https://github.com/apache/cassandra/compare/cassandra-3.0...adelapena:16104-3.0]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/661/workflows/3e91ee7c-eb67-416b-af65-3e0314e5d359]|
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...adelapena:16104-3.11]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/664/workflows/2fe0f649-b846-47e4-8a42-74c04aef75c4]|
|[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...adelapena:16104-4.0]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/663/workflows/e58e0821-b6a7-4b18-923d-f0eddf743734] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/663/workflows/be12b427-30ed-429b-9a4e-ca0ec1a5e53a]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:16104-trunk]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/662/workflows/bf7ad882-b6f7-4c13-a534-0e64b740c748] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/662/workflows/b1ff8a2f-b268-407f-98ef-cb13b10fc575]|

From 3.11 and beyond we don't need to add the mbean methods since they already exist since CASSANDRA-12248, so we only need to use them from {{NodeProbe}} to get rid of all the dependencies from {{DatabaseDescriptor}}.

I wonder whether it's worth adding a dtest setting a couple of nodes with different values for {{concurrent_compactors}} and call them with nodetool to verify that the {{-j/--jobs}} option issues the warning depending on the connected node. I think it should be a Python dtest since, if I'm right, Java dtests use an internal probe that doesn't use JMX.;;;","14/Jul/21 16:10;saprykin;[~adelapena] Thank you for review and help with request. 

I have doubts if it is worth to add extra tests.
 * For version 3.0: there is no API for changing concurrent_compactors so test fetching non default static configuration value should work;
 * For version >3.0: it seems we will be testing setConcurrentCompactors which already exists and tested in CASSANDRA-12248 ([https://github.com/DikangGu/cassandra/commit/3a79a027c7db2b8007a8ae4e19002c3edbf63d8e)]

IMHO minimal impact is preferable.;;;","15/Jul/21 12:54;adelapena;I think that we can change the value of {{concurrent_compactors}} without the setters, we can just edit it in the configuration file of each tested node. The idea for the test would be verifying that nodetool is able to throw the warning depending on the configuration of the connected node, independently of the local environment. I gave it a try with [this tiny Python dtest|https://github.com/apache/cassandra-dtest/pull/150]. The test passes with the patch and fails without it.

Here is a new CI round including 100 rounds of the proposed dtest:
||patch||CI||
|[3.0|https://github.com/apache/cassandra/compare/cassandra-3.0...adelapena:16104-3.0]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/666/workflows/81c89e91-2d71-4f19-9595-c5057e95daa8]|
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...adelapena:16104-3.11]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/667/workflows/b5ba034c-633e-4e06-9613-ed5df2b26659]|
|[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...adelapena:16104-4.0]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/668/workflows/c9c3302c-92c0-4aad-971b-ec471022f4c5] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/668/workflows/13142930-3bd5-43fd-8285-f1d4d05e9fbc]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:16104-trunk]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/665/workflows/f2497ddd-5c4e-4d66-9768-dfc38a8a9ea4] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/665/workflows/1d1cb4e9-7e01-4084-98cb-da78b3f8a42c]|;;;","23/Jul/21 12:09;adelapena;As suggested by [~Bereng] and [~djatnieks], from 4.0 we can have [a JUnit test|https://github.com/adelapena/cassandra/blob/38c1a41ddeb1b75f9c57a3ec6900d8638c01ddb2/test/unit/org/apache/cassandra/tools/NodeProbeTest.java] instead of the Python dtest. I have added it to the patches, rebased and rerun CI:

||patch||CI||
|[3.0|https://github.com/apache/cassandra/compare/cassandra-3.0...adelapena:16104-3.0]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/691/workflows/4f824afb-9fdf-438f-b50d-6c571fde297b]|
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...adelapena:16104-3.11]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/692/workflows/efc91371-1999-47f3-acb6-21a1024e1bd2]|
|[4.0|https://github.com/apache/cassandra/compare/cassandra-4.0...adelapena:16104-4.0]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/696/workflows/76a55c1c-ef4f-4c42-9b31-f40f934604b5] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/696/workflows/d32878f3-f1ee-4604-a70a-d0a82790c684]|
|[trunk|https://github.com/apache/cassandra/compare/trunk...adelapena:16104-trunk]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/695/workflows/9244b3d6-a31c-4e6c-b2c0-39761b235885] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/695/workflows/d5b504c8-b61b-47c2-974d-70e938ddcb51]|
|[dtest|https://github.com/apache/cassandra-dtest/compare/trunk...adelapena:CASSANDRA-16104]||

If that looks good we'll only need the approval of a second reviewer.;;;","29/Jul/21 08:13;blerer;The patches look good to me. :-) ;;;","06/Aug/21 18:19;adelapena;Committed to 3.0 as [acf38bf7a1ac34fdbe8c18c843828a78293a85cb|https://github.com/apache/cassandra/commit/acf38bf7a1ac34fdbe8c18c843828a78293a85cb] and merged up to [3.11|https://github.com/apache/cassandra/commit/952df13f257dc1ef19f79915f1a0a4d593de0fd5], [4.0|https://github.com/apache/cassandra/commit/762df84f6c078a879b3bab2ccc195c95f333edc3] and [trunk|https://github.com/apache/cassandra/commit/6fbe736bc261527af79a57f137c2af59efd81490]. Dtest committed as [03cc411ad07a8a8781c7b6bf42b10c9c334ff8b4|https://github.com/apache/cassandra-dtest/commit/03cc411ad07a8a8781c7b6bf42b10c9c334ff8b4].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid serialized size for responses,CASSANDRA-16103,13325949,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,dcapwell,dcapwell,03/Sep/20 16:14,16/Mar/22 14:32,13/Jul/23 08:39,29/Oct/20 18:29,4.0,4.0-beta4,,,,Messaging/Internode,,,,0,,,,"Was running a benchmark at LOCAL_ONE and eventually saw the below exception; this is related to CASSANDRA-16097 as it was found during the same test.

{code}
org.apache.cassandra.net.InvalidSerializedSizeException: Invalid serialized size; expected 14, actual size at least 13, for verb HINT_RSP
	at org.apache.cassandra.net.OutboundConnection$EventLoopDelivery.doRun(OutboundConnection.java:816)
	at org.apache.cassandra.net.OutboundConnection$Delivery.run(OutboundConnection.java:687)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
{code}

{code}
org.apache.cassandra.net.InvalidSerializedSizeException: Invalid serialized size; expected 14, actual size at least 13, for verb MUTATION_RSP
	at org.apache.cassandra.net.OutboundConnection$EventLoopDelivery.doRun(OutboundConnection.java:816)
	at org.apache.cassandra.net.OutboundConnection$Delivery.run(OutboundConnection.java:687)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
{code}",,aholmber,aleksey,dcapwell,jasonstack,jmeredithco,yifanc,,,,,,"yifan-c opened a new pull request #786:
URL: https://github.com/apache/cassandra/pull/786


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Oct/20 18:22;githubbot;600","dcapwell commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r511011914



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);
+            else
+                this.createdAtNanos = createdAtNanos;
+            Preconditions.checkArgument(this.createdAtNanos <= this.expiresAtNanos, ""createdAtNanos cannot be more recent than expiresAtNanos"");

Review comment:
       if this fails, would be good to also print the time.  To keep the string create lazy, may be best to do
   
   ```
   if (this.createdAtNanos > this.expiresAtNanos)
     throw new IllegalArgumentException(""createdAtNanos (""+this.createdAtNanos+"") cannot be more recent than expiresAtNanos (""+this.expiresAtNanos+"")"");
   ```

##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       not sure how I feel about this... its no longer created at if we do this...  will need to think about this more.

##########
File path: test/unit/org/apache/cassandra/net/MessageTest.java
##########
@@ -39,6 +39,8 @@
 import org.apache.cassandra.tracing.Tracing.TraceType;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.UUIDGen;
+import org.assertj.core.api.Assertions;
+import org.openjdk.jmh.annotations.TearDown;

Review comment:
       can you remove this import?  not used.

##########
File path: test/unit/org/apache/cassandra/net/FramingTest.java
##########
@@ -213,6 +217,37 @@ public void burnRandomLegacy()
         burnRandomLegacy(1000);
     }
 
+    @Test
+    public void testSerializeSizeMatchesEdgeCases() // See CASSANDRA-16103
+    {
+        int v40 = MessagingService.Version.VERSION_40.value;
+        Consumer<Long> subTest = timeGap ->
+        {
+            long createdAt = 0;
+            long expiresAt = createdAt + timeGap;
+            Message<NoPayload> message = Message.builder(Verb.READ_REPAIR_RSP, NoPayload.noPayload)
+                                                .from(FBUtilities.getBroadcastAddressAndPort())
+                                                .withCreatedAt(createdAt)
+                                                .withExpiresAt(TimeUnit.MILLISECONDS.toNanos(expiresAt))

Review comment:
       withCreatedAt takes nanos, so `createdAt` has to be nanos, so timeGap must also be in nanos... which means `expiresAt` is also nanos.... so shouldn't have this conversion?

##########
File path: test/unit/org/apache/cassandra/utils/CassandraGenerators.java
##########
@@ -105,8 +114,26 @@
                                                                                        .<Message<? extends ReadCommand>>map(c -> Message.builder(Verb.READ_REQ, c).build())
                                                                                        .describedAs(CassandraGenerators::toStringRecursive);
 
+    private static Gen<Message<NoPayload>> responseGen(Verb verb)
+    {
+        return gen(rnd -> {
+            long timeSpan = SMALL_TIME_SPAN_GEN.generate(rnd);

Review comment:
       I kinda feel its more clear if we do the following (assuming SMALL_TIME_SPAN_GEN doesn't return negative values, see other comment)
   
   ```
   long realCreatedAt = TIMESTAMP_NANOS.generate(rnd);
   long networkDelay = SMALL_TIME_SPAN_GEN.generate(rnd);
   long timeSpan = SMALL_TIME_SPAN_GEN.generate(rnd);
   
   long createdAtNanos = realCreatedAt + networkDelay;
   long expiresAtNanos = realCreatedAt + timeSpan;
   ```
   
   my thinking is, we keep track of the request create timestamp, and account for network delay.  This will get us into cases where createdAtNanos is > expiresAtNanos.

##########
File path: test/unit/org/apache/cassandra/utils/Generators.java
##########
@@ -177,21 +178,28 @@
     // all time is boxed in the future around 50 years from today: Aug 20th, 2020 UTC
     public static final Gen<Timestamp> TIMESTAMP_GEN;
     public static final Gen<Date> DATE_GEN;
+    public static final Gen<Long> TIMESTAMP_NANOS;
+    public static final Gen<Long> SMALL_TIME_SPAN_GEN;
 
     static
     {
+        long secondInNanos = 1_000_000_000L;
         ZonedDateTime now = ZonedDateTime.of(2020, 8, 20,
                                              0, 0, 0, 0, ZoneOffset.UTC);
         ZonedDateTime startOfTime = now.minusYears(50);
         ZonedDateTime endOfDays = now.plusYears(50);
         Constraint millisConstraint = Constraint.between(startOfTime.toInstant().toEpochMilli(), endOfDays.toInstant().toEpochMilli());
-        Constraint nanosInSecondConstraint = Constraint.between(0, 999999999);
+        Constraint nanosInSecondConstraint = Constraint.between(0, secondInNanos - 1);
+        // Represents the timespan based on the most of the default request timeouts. See DatabaseDescriptor
+        Constraint smallTimeSpanNanosConstraint = Constraint.between(-1 * secondInNanos, 10 * secondInNanos);

Review comment:
       I feel weird having negative time here, though in your test case it makes sense; should we move this generator there?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 17:02;githubbot;600","yifan-c commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r511112609



##########
File path: test/unit/org/apache/cassandra/net/FramingTest.java
##########
@@ -213,6 +217,37 @@ public void burnRandomLegacy()
         burnRandomLegacy(1000);
     }
 
+    @Test
+    public void testSerializeSizeMatchesEdgeCases() // See CASSANDRA-16103
+    {
+        int v40 = MessagingService.Version.VERSION_40.value;
+        Consumer<Long> subTest = timeGap ->
+        {
+            long createdAt = 0;
+            long expiresAt = createdAt + timeGap;
+            Message<NoPayload> message = Message.builder(Verb.READ_REPAIR_RSP, NoPayload.noPayload)
+                                                .from(FBUtilities.getBroadcastAddressAndPort())
+                                                .withCreatedAt(createdAt)
+                                                .withExpiresAt(TimeUnit.MILLISECONDS.toNanos(expiresAt))

Review comment:
       Good catch. The `timeGap` is in milliseconds. Fixed. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 19:36;githubbot;600","yifan-c commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r511168197



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       agree. will put more thoughts.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 21:42;githubbot;600","jonmeredith commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r511189879



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       Perhaps add a check that expiresAtNanos >= createdAtNanos and either update `responseWith` and `failureResponse` to ensure the time is correct?

##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -717,7 +725,7 @@ private int serializedHeaderSizePost40(Header header, int version)
             long size = 0;
             size += sizeofUnsignedVInt(header.id);
             size += CREATION_TIME_SIZE;
-            size += sizeofUnsignedVInt(1 + NANOSECONDS.toMillis(header.expiresAtNanos - header.createdAtNanos));
+            size += sizeofUnsignedVInt(NANOSECONDS.toMillis(header.expiresAtNanos - header.createdAtNanos));

Review comment:
       Why aren't we adding the 1 to the serializeHeader instead?  This bug stems from missing the change in both places for  CASSANDRA-16064, and I can't remember why we though it was good. Pre-16064 this would have made sure the value was >=1 for a sane local clock.
   
   Probably more for @dcapwell to remember than @yifan-c 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 23:11;githubbot;600","jonmeredith commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r511189879



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       Perhaps add a check that expiresAtNanos >= createdAtNanos and update `responseWith` and `failureResponse` to ensure the time is correct (or riskier make sure expiredTimeout() does the min check)?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 23:12;githubbot;600","yifan-c commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r512274324



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -717,7 +725,7 @@ private int serializedHeaderSizePost40(Header header, int version)
             long size = 0;
             size += sizeofUnsignedVInt(header.id);
             size += CREATION_TIME_SIZE;
-            size += sizeofUnsignedVInt(1 + NANOSECONDS.toMillis(header.expiresAtNanos - header.createdAtNanos));
+            size += sizeofUnsignedVInt(NANOSECONDS.toMillis(header.expiresAtNanos - header.createdAtNanos));

Review comment:
       Any value >= 0 for the first byte in vUnsignedInt can be correctly recognized that the vUnsignedInt contains only 1 byte. Not sure how the `+1` helps. And it does not help to prevent negative values too. (except -1)
   I would guess `+1` was written before 
   ```
   // in org.apache.cassandra.utils.vint.VIntCoding#computeUnsignedVIntSize(long)
   Long.numberOfLeadingZeros(value | 1); // | with 1 to ensure magntiude <= 63, so (63 - 1) / 7 <= 8
   ```
   The latter one (`value | 1`) is better and voids the need for `+1`. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Oct/20 21:18;githubbot;600","yifan-c commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r512296249



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       At the high-level, the coordinator sends request messages to peers and waits for the response messages. The coordinator's waiting time is based on the original request messages' `createdAt` and `expiresAt` (AbstractReadExecutor and AbstractWriteResponseHandler for e.g.). The response message's `createdAt` is not important. 
   If looking at the `InboundMessageHandler`, the only field used for expiry check is `header.expiresAtNanos`. The `createdAt` time is not used. 
   **Therefore, as long as the `expiresAt` is not changed across nodes, I think it makes no harm.** 
   
   The main benefit of correcting the `createdAt` in response message is that the serialized `VUnsignedInt` field for `createdAt` takes 1 byte instead of 9 bytes in the case of negative values.
   
   We can also revert the constraint if not convinced, since the read/write unsigned vint can apply to negative values in fact with the cost of slightly larger message in some edge cases.  




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Oct/20 22:03;githubbot;600","belliottsmith commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r512844657



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       I'm unconvinced by this change too - it's accepted and acceptable for rare edge cases to spent 9 bytes encoding a negative value. The cost of those 9 bytes is negligible, and not worth trying to optimise in any way.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 16:30;githubbot;600","belliottsmith commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r512844657



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       I'm unconvinced by this change too - it's accepted and acceptable for rare edge cases to spend 9 bytes encoding a negative value with `writeUnsignedVInt`. The cost of those 9 bytes is negligible, and not worth trying to optimise in any way.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 16:31;githubbot;600","yifan-c commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r512925221



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -367,8 +368,13 @@ private Header(long id, Verb verb, InetAddressAndPort from, long createdAtNanos,
             this.id = id;
             this.verb = verb;
             this.from = from;
-            this.createdAtNanos = createdAtNanos;
             this.expiresAtNanos = expiresAtNanos;
+            if (verb.isResponse())
+                // Correct createdAtNanos to enforce the contraint, createdAtNanos <= expiresAtNanos
+                this.createdAtNanos = Math.min(createdAtNanos, expiresAtNanos);

Review comment:
       Reverted the correction to `createdAt`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 18:17;githubbot;600","jonmeredith commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r513017351



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -28,6 +28,7 @@
 import javax.annotation.Nullable;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;

Review comment:
       Do you still need this?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 20:43;githubbot;600","yifan-c commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r513018789



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -28,6 +28,7 @@
 import javax.annotation.Nullable;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;

Review comment:
       removed.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 20:46;githubbot;600","dcapwell commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r513050228



##########
File path: src/java/org/apache/cassandra/net/Message.java
##########
@@ -717,7 +725,7 @@ private int serializedHeaderSizePost40(Header header, int version)
             long size = 0;
             size += sizeofUnsignedVInt(header.id);
             size += CREATION_TIME_SIZE;
-            size += sizeofUnsignedVInt(1 + NANOSECONDS.toMillis(header.expiresAtNanos - header.createdAtNanos));
+            size += sizeofUnsignedVInt(NANOSECONDS.toMillis(header.expiresAtNanos - header.createdAtNanos));

Review comment:
       I removed the +1 as it was missing on deserialize so caused `msg != deserialize(serialize(msg))`; it looks like I missed the removal of `+1` on size of.
   
   I talked to Aleksey and Benedict about why the `+1` was there and neither had an answer and said to remove it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 21:42;githubbot;600","dcapwell commented on a change in pull request #786:
URL: https://github.com/apache/cassandra/pull/786#discussion_r513051863



##########
File path: test/unit/org/apache/cassandra/utils/CassandraGenerators.java
##########
@@ -76,6 +81,11 @@
     private static final Gen<Integer> SMALL_POSITIVE_SIZE_GEN = SourceDSL.integers().between(1, 30);
     private static final Gen<Boolean> BOOLEAN_GEN = SourceDSL.booleans().all();
 
+    public static final Gen<InetAddressAndPort> INET_ADDRESS_AND_PORT_GEN = rnd -> {
+        InetAddress address = Generators.INET_ADDRESS_GEN.generate(rnd);
+        return InetAddressAndPort.getByAddressOverrideDefaults(address, SMALL_POSITIVE_SIZE_GEN.generate(rnd));

Review comment:
       it would be better to use a port generator which returns values between `0-65,535`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 21:46;githubbot;600","smiklosovic closed pull request #786:
URL: https://github.com/apache/cassandra/pull/786


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:32;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,9600,,,0,9600,,,,,,,,,,,,,,CASSANDRA-16106,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16097,,,,CASSANDRA-16106,CASSANDRA-15537,CASSANDRA-16218,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Normal,Performance Regression Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 30 14:16:43 UTC 2020,,,,,,,All,,,,,,"0|z0ibr4:",9223372036854775807,,,,dcapwell,jmeredithco,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/ce270081bc0bc8ffa0a7e1e5c04f30b5c1875a84,,,,,,,,,"CI, unit test, quick theories. ",,,,,"19/Oct/20 17:51;dcapwell;Seen with the following as well

{code}
Invalid serialized size; expected 13, actual size at least 21, for verb READ_REPAIR_RSP
{code};;;","19/Oct/20 21:09;aholmber;[~dcapwell] is there anything more you can tell us about the test that produced this? For example the schema, workload, and topology? Was the cluster facing outages or adverse conditions?;;;","19/Oct/20 22:25;dcapwell;Update, looked at all the logs and found the following list

{code}
verb
MUTATION_RSP
READ_REPAIR_RSP
HINT_RSP
READ_RSP
FAILURE_RSP
PAXOS_COMMIT_RSP
{code};;;","19/Oct/20 22:38;dcapwell;[~aholmber]

bq. For example the schema, workload, and topology? Was the cluster facing outages or adverse conditions?

Looking at the clusters impacted, we have 3 categories: diff test (clone cluster in 3.0 and 4.0, and diff 100% of rows), ad-hoc (random people deploying random stuff), test cluster (user tests).  Out of these 3 categories the ad-hoc clusters hit this the most, followed by diff test (read only); the test cluster is low traffic and only seen this a small number of times in the past week.

Diff is heavy read, that is the only workload I can talk about (because I don't know what people do on the ad-hoc clusters).

Now, for the first test that saw this issue, I think it was the following:

* tip-stress https://github.com/thelastpickle/tlp-stress/blob/master/src/main/kotlin/com/thelastpickle/tlpstress/profiles/KeyValue.kt
* 6 node cluster, single DC
* rate 800 qps
* concurrency 100
* consistency level LOCAL_ONE

I do not remember the read/write percentage, but seeing how this happens for all response types... I don't think it matters

I sadly don't remember well if this is correct or not (mostly the profile used is likely to change, the other variables are my defaults), I didn't document this in CASSANDRA-16097  =(;;;","21/Oct/20 20:19;dcapwell;Linking CASSANDRA-16218 as it found a similar issue, but caused by us calculating message header with ts + 1, which causes vint to add an extra byte to the size; this looks different than this issue as it was an off by one issue only there, and this can be off by several bytes.;;;","22/Oct/20 00:45;yifanc;After scanning the server logs for this error, there are 2 groups of errors grouping by the difference of the expected and the actual size.

The differences are either 8 or -1. 

It is caused by the extra 1 at {{serializedHeaderSizePost40()}} [https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/Message.java#L720]. It leads to the calculated serialized size mismatch with the actual one, in the case of some special combinations of message creation and expiration time.

* When creationTime - expirationTime == (1L << 7) - 1 ms (or (1L << 14) - 1 ms), we get the difference of -1.
* When creationTime - expirationTime == -1 ms, we get the difference of 8. The reason we are seeing {{creationTime > expirationTime}} is that there is no constraint to assure expirationTime is greater than creationTime in the message constructor. 
The response message shares the same expiration time with the request message, but it assigns the current time to the creationTime. There is a small chance that we got response messages with {{creationTime > expirationTime}}.;;;","22/Oct/20 18:28;yifanc;PR: [https://github.com/apache/cassandra/pull/786]
 CI: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=C-16103-invalid-ser-size]

The patch
 * removed the extra 1 at {{Message.Serializer#serializedHeaderSizePost40()}}.
 * -added a constraint in message header to assure {{createdAt <= expiresAt}}.-
 * added generators in QT to cover the response messages.;;;","23/Oct/20 16:21;yifanc;The test failure in ""testMessageSerialization - org.apache.cassandra.net.MessageSerializationPropertyTest"" is caused by the large difference between the random time generated and the {{FixedMonotonicClock}} used in the test during deserialization. ;;;","26/Oct/20 22:32;yifanc;Fixed the test and addressed the comments in the GH PR. 

CI results looks good. (Unit test, jvm dtest, dtest and upgrade test)

https://app.circleci.com/pipelines/github/yifan-c/cassandra/136/workflows/b267771a-dd3f-40c2-9ec7-611bf81f5b20;;;","27/Oct/20 21:47;dcapwell;my comments are only nits, so +1 from me.;;;","27/Oct/20 21:52;dcapwell;[~yifanc] for the upgrade tests you would need to rebase to pick up changes ;;;","27/Oct/20 22:26;yifanc;Sure. Rebased and rerun CI;;;","28/Oct/20 00:54;yifanc;Updated CI result after rebase. [https://app.circleci.com/pipelines/github/yifan-c/cassandra/140/workflows/573178eb-002f-4c57-93b8-0d7029689098]

(1 failure from dtest with vnodes. It does not look related);;;","28/Oct/20 13:59;jmeredithco;+1 from me too. Thanks for getting it fixed.;;;","29/Oct/20 16:56;dcapwell;will start the commit process.;;;","29/Oct/20 17:06;dcapwell;CI Results: Yellow, see CASSANDRA-16237, CASSANDRA-16238
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16103-trunk-FF69FBB5-F716-4346-81B5-7871D4929674]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16103-trunk-FF69FBB5-F716-4346-81B5-7871D4929674]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/155/]|;;;","30/Oct/20 14:16;aleksey;Retroactively +1.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid trying to stream from localhost (which fails) during rebuild,CASSANDRA-16099,13325859,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,03/Sep/20 07:31,21/Dec/20 09:29,13/Jul/23 08:39,08/Sep/20 11:01,4.0,4.0-beta3,,,,Consistency/Streaming,,,,0,,,,"We should skip using localhost when adding ""trivial"" ranges to the fetchMap as this will fail the rebuild",,bdeggleston,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 08 11:01:57 UTC 2020,,,,,,,All,,,,,,"0|z0ib74:",9223372036854775807,,,,bdeggleston,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/5ec3bae22b6e252d629daae8549036c1a547d21a,,,,,,,,,"new unit test, cci run",,,,,"03/Sep/20 07:34;marcuse;patch: https://github.com/krummas/cassandra/commits/marcuse/16099
cci: https://app.circleci.com/pipelines/github/krummas/cassandra/490/workflows/5b16d9ee-1623-47aa-b31e-27cd7584e0a4;;;","03/Sep/20 17:41;bdeggleston;+1;;;","08/Sep/20 11:01;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestCqlshOutput.test_describe_cluster_output flaky,CASSANDRA-16098,13325853,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,03/Sep/20 06:57,21/Dec/20 09:29,13/Jul/23 08:39,08/Sep/20 15:43,4.0,4.0-beta3,,,,Test/unit,,,,0,,,,TestCqlshOutput.test_describe_cluster_output has been constantly in ci-cass,,bereng,blerer,,,,,,,,,,"bereng opened a new pull request #732:
URL: https://github.com/apache/cassandra/pull/732


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Sep/20 07:01;githubbot;600","bereng closed pull request #732:
URL: https://github.com/apache/cassandra/pull/732


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:44;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16121,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Degradation,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 08 15:43:56 UTC 2020,,,,,,,All,,,,,,"0|z0ib5s:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra/commit/eebad66fe2de9b2a6b217144cd251be3d839f441,,,,,,,,,See attached links,,,,,"08/Sep/20 15:43;blerer;Committed into trunk at eebad66fe2de9b2a6b217144cd251be3d839f441;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DigestResolver.getData throws AssertionError since dataResponse is null,CASSANDRA-16097,13325820,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,02/Sep/20 23:48,03/Jan/21 16:58,13/Jul/23 08:39,08/Dec/20 19:04,4.0,4.0-beta4,,,,Consistency/Coordination,,,,0,,,,"Was running a benchmark at LOCAL_ONE and eventually saw the below exception

{code}
2020-09-02 21:08:59,872 ERROR [Native-Transport-Requests-35] org.apache.cassandra.transport.Message - Unexpected exception during request; channel = [id: 0x13bb89d4, L:/10.14.92.74:9042 - R:/10.14.89.248:47112]
java.lang.AssertionError
       at org.apache.cassandra.service.reads.DigestResolver.getData(DigestResolver.java:77) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.service.reads.AbstractReadExecutor.awaitResponses(AbstractReadExecutor.java:390) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:1821) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1711) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1628) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1097) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:294) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:246) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:88) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:216) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:498) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:476) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:138) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.transport.Message$Request.execute(Message.java:253) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.transport.Message$Dispatcher.processRequest(Message.java:725) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.transport.Message$Dispatcher.lambda$channelRead0$0(Message.java:630) ~[apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
       at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:162) [apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:119) [apache-cassandra-4.0.0-beta3.jar:4.0.0-beta3]
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.50.Final.jar:4.1.50.Final]
       at java.base/java.lang.Thread.run(Thread.java:834) [?:?]
{code}

This exception was not frequent, out of the whole run (3h) only saw this twice.",,aholmber,bereng,blerer,dcapwell,e.dimitrova,jasonstack,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16103,CASSANDRA-16106,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,maedhroz,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Normal,Performance Regression Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Dec 08 19:09:50 UTC 2020,,,,,,,All,,,,,,"0|z0iayg:",9223372036854775807,,,,bereng,brandonwilliams,dcapwell,maedhroz,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/4c103447af3c4829e3a1c733bed3952fd059af08,,,,,,,,,"Testing:
I had a manual test (linked in comments) that reproduced this with 100% certainty over time on my platform, but it was not deterministic. I'm not sure if it's worth converting into a dtest because it's based on timing for both the local error, and spec exec decisions are not deterministic.

No docs",,,,,"11/Nov/20 21:45;aholmber;I have a method of reproducing this 100%. Sharing a minimal dtest script for repro in case anyone else is looking into it.
https://github.com/apache/cassandra-dtest/commit/ca57b258779d1d78adb95f5efa861ac9f36769d4

Haven't gotten to the bottom of it yet.;;;","11/Nov/20 23:24;aholmber;I see what's happening. It has to do with error handling when there is an occasional race with speculative execution. Should be straightforward to fix.;;;","12/Nov/20 05:40;bereng;[~aholmber] I was wondering if this is related to CASSANDRA-16106 and both can be folded in the same ticket in your opinion?;;;","12/Nov/20 16:05;aholmber;[~Bereng] based on my current understanding they would not be related. I'll keep it in mind, though.;;;","16/Nov/20 20:25;aholmber;The basic symptom is that we have a read request that has ""finished"" with no data and no failure. The read executor is trying to get data, and we trip on the assertion. We are arriving there under the following conditions:

N=2, RF=2, read ONE
The read will fail on the local node due to tombstone read threshold.

There is a [race|https://github.com/apache/cassandra/blob/45acc6318ac063eb9553857d0ec0df550f94e627/src/java/org/apache/cassandra/service/StorageProxy.java#L1803-L1814] between async execution of the local replica, and the decision to send a spec exec. If the local failure takes long enough, a spec exec is triggered, and the [contacts list is updated|https://github.com/apache/cassandra/blob/45acc6318ac063eb9553857d0ec0df550f94e627/src/java/org/apache/cassandra/service/StorageProxy.java#L1803-L1814]. Meanwhile, the local request fails and the [callback is signaled|https://github.com/apache/cassandra/blob/45acc6318ac063eb9553857d0ec0df550f94e627/src/java/org/apache/cassandra/service/reads/ReadCallback.java#L170-L171]. When we [awaitResults|https://github.com/apache/cassandra/blob/45acc6318ac063eb9553857d0ec0df550f94e627/src/java/org/apache/cassandra/service/reads/ReadCallback.java#L101-L103], we find a signaled callback, but {{blockfor(1) + failures(1)}} is not greater than the contacts as updated by the spec exec. We thus return success with a resolver that has no data.

The proposed patch makes this logic depend on the actual responses, and presence of data:
https://github.com/aholmberg/cassandra/pull/17

I also added a couple of assertions because we were violating some assumptions along the way before tripping on the one described in this ticket.

[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16097];;;","23/Nov/20 22:20;aholmber;Review discussion has been ongoing, now pending a look from Caleb.

Meanwhile, I ported the demonstration script to in-jvm dtest: https://github.com/apache/cassandra/commit/3bdcacce861f202e4e7b21a1866695d97ce1d1fa

Pushed to both branches.;;;","02/Dec/20 05:17;maedhroz;My first pass at review is complete. Mostly, I've [chimed in|https://github.com/aholmberg/cassandra/pull/17#discussion_r533782186] on what appears to be the main outstanding discussion point and [proposed a new test|https://github.com/aholmberg/cassandra/pull/17#issuecomment-736995647].;;;","03/Dec/20 22:34;dcapwell;I am good with Adam's test (once it can pass successfully repeatedly) + Caleb's test.;;;","04/Dec/20 04:14;maedhroz;Once the test I've proposed is integrated and we resolve the points [here|https://github.com/aholmberg/cassandra/pull/17#discussion_r533756487] and  [here|https://github.com/aholmberg/cassandra/pull/17#discussion_r533782186], I'll be a +1 as well.;;;","04/Dec/20 19:20;aholmber;Thanks a lot for your time on this. I'm back to revise today. Hoping to push this afternoon.;;;","04/Dec/20 22:04;aholmber;Branch is updated. I think I've addressed all comments.

In my original test I reduced the number of iterations to a number that creates a handful of failures pretty much every time against trunk. I didn't spin it forever, but it failed every time I ran on my machine. It runs in about 10s. I'm not sure if runtime was the only concern, but now I'm wondering if it's even worth keeping the test, in light of the one Caleb created. Please let me know if anyone has thoughts on that, or anything else in the current commit.;;;","04/Dec/20 22:05;dcapwell;thanks for the update; running the new tests in a loop to make sure stable.  Will try to look at the changes closer within an hour or so.;;;","04/Dec/20 22:12;aholmber;> running the new tests in a loop to make sure stable

Thanks. I guess I could do that before submitting. I didn't consider that as standard practice.

On a related note, I forgot to mention I was not reproducing that OOM here. Do you think it was related to log capture and the huge number of iterations, or something we need to keep digging on?;;;","04/Dec/20 22:42;maedhroz;bq. I'm wondering if it's even worth keeping the test, in light of the one Caleb created. Please let me know if anyone has thoughts on that, or anything else in the current commit.

Take a look at {{CommitLogStressTest}}. In this case, we seem to have simply throw {{@Ignore}} on the test class and kept it around. We could do something similar here if we think the test constitutes an interesting scenario that we don't want to just lose completely.;;;","04/Dec/20 23:00;dcapwell;bq. We could do something similar here if we think the test constitutes an interesting scenario that we don't want to just lose completely.

CI doesn't run those so those can/will get lost into the either; I rather run it or drop it, but if you both want Ignore then I am +0 to that (go ahead).

bq. I didn't consider that as standard practice.

My job is to make sure w/e goes in is stable, so I am responsible to keep that invariant true.  You are more than free to do the same =D.

Before commit I will also make sure all tests are clean (upgrade, dtest, etc.), so will block on that as well and poke you if they are not.

bq. On a related note, I forgot to mention I was not reproducing that OOM here. Do you think it was related to log capture and the huge number of iterations, or something we need to keep digging on?

No idea.. I am just running OpenJDK 8 and hit it constantly, the only thing special about my setup is I tell all JVMs on my laptop to run with ipv4... I would doubt that impacted this...

Since I was able to run in a loop the new test doesn't look to OOM anymore, so don't think we need to keep digging.  My theory is the following

1) exceptions + logs are very expensive
2) hot loop throwing exceptions and generating logs

so I am not really that worried about the OOM (famous last words...);;;","04/Dec/20 23:07;maedhroz;+1

Thanks [~aholmber];;;","04/Dec/20 23:21;dcapwell;+1

Thanks!;;;","08/Dec/20 15:02;brandon.williams;+1;;;","08/Dec/20 18:04;dcapwell;Starting commit

CI Results: Yellow.  CASTest and SimpleReadWriteTest are failing, but they have been for a while.  Python dtest has a failure with replacement (been failing for a while) and a incremental repair one which didn't fail without vnodes
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16097-trunk-22EF4AC8-F74B-4DDB-8894-4ABA81986CE9]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16097-trunk-22EF4AC8-F74B-4DDB-8894-4ABA81986CE9]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/251/]|
;;;","08/Dec/20 19:09;dcapwell;blah, messed up the commit and attributed to Marcus rather than Adam !!!1 =(;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"When a table attempts to clean up metrics, it was cleaning up all global table metrics",CASSANDRA-16095,13325642,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,dcapwell,altanozlu,altanozlu,02/Sep/20 00:17,31/Oct/22 17:46,13/Jul/23 08:39,02/Dec/20 23:20,4.0,4.0-beta4,,,,Observability/JMX,,,,0,,,,"when i use
{code:java}
bin/nodetool tablestats xxxx{code}
i get this error
{code:java}
error: org.apache.cassandra.metrics:type=Table,keyspace=xxxx,scope=feed,name=WriteLatency
-- StackTrace --
javax.management.InstanceNotFoundException: org.apache.cassandra.metrics:type=Table,keyspace=xxxx,scope=feed,name=WriteLatency
{code}
if i restart the node and check it works but if i write something then i get the error again
 * Cassandra 4.0-beta1
 * Ubuntu 20",,altanozlu,dcapwell,e.dimitrova,jmeredithco,jwest,yifanc,,,,,,"dcapwell opened a new pull request #831:
URL: https://github.com/apache/cassandra/pull/831


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 22:00;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r527994342



##########
File path: src/java/org/apache/cassandra/config/CassandraRelevantProperties.java
##########
@@ -196,6 +199,28 @@ public String getString()
         return value == null ? defaultVal : STRING_CONVERTER.convert(value);
     }
 
+    /**

Review comment:
       Pulled from https://issues.apache.org/jira/browse/CASSANDRA-16213, was going to add them there but need them in this patch as well, so copy/pasted from there (but added docs for the ones missing)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 22:02;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r527994984



##########
File path: src/java/org/apache/cassandra/metrics/TableMetrics.java
##########
@@ -62,6 +62,10 @@
  */
 public class TableMetrics
 {
+    /**
+     * stores metrics that will be rolled into a single global metric
+     */
+    private final static ConcurrentMap<String, Set<Metric>> ALL_TABLE_METRICS = Maps.newConcurrentMap();

Review comment:
       renamed to all caps so its more clear this is global and not local to the table; seems that this naming convention caused `all` to be confused with local table names rather than global metrics, so switch to java naming convention to help to prevent this next time.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 22:03;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r527996075



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/AbstractCluster.java
##########
@@ -313,6 +314,13 @@ public void uncaughtException(Thread thread, Throwable throwable)
             else
                 logger.error(""uncaught exception in thread {}"", thread, throwable);
         }
+
+        @Override
+        public String toString()
+        {
+            IInvokableInstance delegate = this.delegate;

Review comment:
       did this in https://issues.apache.org/jira/browse/CASSANDRA-16213 as its useful for debugging.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 22:06;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r527996485



##########
File path: test/distributed/org/apache/cassandra/distributed/impl/Instance.java
##########
@@ -485,11 +485,10 @@ public void startup(ICluster cluster)
                             GossipHelper.unsafeStatusToNormal(this, (IInstance) peer);
                     });
 
+                    StorageService.instance.setUpDistributedSystemKeyspaces();

Review comment:
       this was a regressions... when not using gossip we didn't register the distributed tables, and we tried to force trace regardless...
   
   right before we gossip tokens around we call this method, so adding it here makes sure the distributed tables work with and without gossip.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 22:06;githubbot;600","jonmeredith commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528015547



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       Could you use `org.apache.cassandra.db.SystemKeyspace#ALL_TABLE_NAMES` here? and similarly create ALL_TABLE_NAMES for the other keyspaces where they're missing?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:04;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528020034



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       I didn't want to as that would load the whole DB, I could refactor to avoid that but felt simplest to just fork.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:17;githubbot;600","dcapwell commented on pull request #831:
URL: https://github.com/apache/cassandra/pull/831#issuecomment-731456098


   > LGTM.
   > 
   > Is it worth also checking the KeyspaceMetrics are created and removed and that dropping a Keyspace removes all contained table metrics?
   
   I thought about that but was lazy!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:18;githubbot;600","dcapwell commented on pull request #831:
URL: https://github.com/apache/cassandra/pull/831#issuecomment-731459812


   I updated to also check the keyspace metric, there isn't a keyspace mbean to validate, so only look for the keyspace version of the metrics list


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:31;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528024350



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       I don't see that in 3.0 or trunk...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:32;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528024350



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       I don't see that in 3.0 or trunk...
   
   ```
   $ grep -r ALL_TABLE_NAMES src/java/
   $
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:33;githubbot;600","jonmeredith commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528027285



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       My mistake :)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Nov/20 23:44;githubbot;600","yifan-c commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528031218



##########
File path: src/java/org/apache/cassandra/metrics/TableMetrics.java
##########
@@ -62,7 +62,17 @@
  */
 public class TableMetrics
 {
+    /**
+     * stores metrics that will be rolled into a single global metric
+     */
+    private static final ConcurrentMap<String, Set<Metric>> ALL_TABLE_METRICS = Maps.newConcurrentMap();
     public static final long[] EMPTY = new long[0];
+    private static final MetricNameFactory GLOBAL_FACTORY = new AllTableMetricNameFactory(""Table"");
+    private static final MetricNameFactory GLOBAL_ALIAS_FACTORY = new AllTableMetricNameFactory(""ColumnFamily"");
+
+    public final static LatencyMetrics GLOBAL_READ_LATENCY = new LatencyMetrics(GLOBAL_FACTORY, GLOBAL_ALIAS_FACTORY, ""Read"");
+    public final static LatencyMetrics GLOBAL_WRITE_LATENCY = new LatencyMetrics(GLOBAL_FACTORY, GLOBAL_ALIAS_FACTORY, ""Write"");
+    public final static LatencyMetrics GLOBAL_RANGE_LATENCY = new LatencyMetrics(GLOBAL_FACTORY, GLOBAL_ALIAS_FACTORY, ""Range"");

Review comment:
       great to group the static variable together. 

##########
File path: src/java/org/apache/cassandra/metrics/TableMetrics.java
##########
@@ -609,7 +609,7 @@ public Long getValue()
             public Long getValue()
             {
                 long min = Long.MAX_VALUE;
-                for (Metric cfGauge : allTableMetrics.get(""MinPartitionSize""))
+                for (Metric cfGauge : ALL_TABLE_METRICS.get(""MinPartitionSize""))

Review comment:
       nit: maybe also create constants for the metrics names? since this patch is doing some code cleanup already. 
   (Maybe too much work. your call)

##########
File path: src/java/org/apache/cassandra/config/CassandraRelevantProperties.java
##########
@@ -196,6 +199,28 @@ public String getString()
         return value == null ? defaultVal : STRING_CONVERTER.convert(value);
     }
 
+    /**

Review comment:
       The get with overrideDefaultValue methods are not used. Not a big problem if the other patch referenced is to be merged. 

##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       I think it is better to load the tables programmatically. So compiler prompts when code changes. It can be done via
   
   ```java
           Map<String, Collection<String>> systemTables = new HashMap<>();
           Consumer<KeyspaceMetadata> loader = meta ->
           {
               Set<String> tables = meta.tables.stream().map(t -> t.name).collect(Collectors.toSet());
               systemTables.put(meta.name, tables);
           };
           Arrays.asList(SystemKeyspace.metadata(), AuthKeyspace.metadata(), SystemDistributedKeyspace.metadata(),
                         SchemaKeyspace.metadata(), TraceKeyspace.metadata())
                 .forEach(loader);
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Nov/20 00:24;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r528051579



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       that has the same issue, we load the whole DB into the app space, so was trying to avoid that.  




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Nov/20 01:49;githubbot;600","dcapwell commented on a change in pull request #831:
URL: https://github.com/apache/cassandra/pull/831#discussion_r532788627



##########
File path: test/distributed/org/apache/cassandra/distributed/test/metric/TableMetricTest.java
##########
@@ -0,0 +1,210 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test.metric;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.InstanceNotFoundException;
+import javax.management.ObjectName;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.IInvokableInstance;
+import org.apache.cassandra.distributed.test.TestBaseImpl;
+import org.apache.cassandra.utils.MBeanWrapper;
+
+import static org.apache.cassandra.config.CassandraRelevantProperties.IS_DISABLED_MBEAN_REGISTRATION;
+import static org.apache.cassandra.config.CassandraRelevantProperties.MBEAN_REGISTRATION_CLASS;
+
+public class TableMetricTest extends TestBaseImpl
+{
+    static
+    {
+        MBEAN_REGISTRATION_CLASS.setString(MapMBeanWrapper.class.getName());
+        IS_DISABLED_MBEAN_REGISTRATION.setBoolean(false);
+    }
+
+    private static Map<String, Collection<String>> SYSTEM_TABLES = ImmutableMap.of(
+    ""system"", ImmutableSet.of(""available_ranges"", ""available_ranges_v2"", ""batches"", ""built_views"", ""compaction_history"", ""IndexInfo"", ""local"",

Review comment:
       I switched to doing this, I do this by loading all tables in the first instance.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Nov/20 17:54;githubbot;600","smiklosovic closed pull request #831:
URL: https://github.com/apache/cassandra/pull/831


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:10;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,9600,,,0,9600,,,,,,,,,,,,,,CASSANDRA-16055,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15582,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Dec 02 21:49:07 UTC 2020,,,,,,,All,,,,,,"0|z0i9uw:",9223372036854775807,,,,jmeredithco,jwest,yifanc,,Critical,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/c636d623a45daf69bdf4a1f6634524d7a1568b64,,,,,,,,,added tests,,,,,"09/Sep/20 05:32;altanozlu;My bad, server is using JVM 11 and nodetool client using JVM 8 that is the reason.;;;","12/Nov/20 01:20;dcapwell;I have seen this as well with server running JVM 11 and nodetool JVM 11, the issue went away on restart.

I took a dump of the metrics and saw that the tables had the MBeans registered, but not TableMetrics (though some tables had both).

I am trying to figure out how this happened and will reopen if I make any progress.;;;","20/Nov/20 21:15;dcapwell;Confirmed this is actually an issue, and is unrelated to JDK version.;;;","20/Nov/20 21:23;dcapwell;Seems global static state was added to CASSANDRA-7273 with names that are lower case, so all the cleanup logic for a single table attempts to delete all global metrics...;;;","20/Nov/20 21:40;dcapwell;Tested on 3.0 and not able to replicate, so looks like CASSANDRA-7273 didn't do this but something over time saw the lower case global static field and tried to use it differently.;;;","20/Nov/20 23:51;dcapwell;Jon +1ed in GH;;;","21/Nov/20 00:19;jmeredithco;+1 from me;;;","21/Nov/20 00:27;yifanc;The issue is caused static value {{TableMetrics#all}}. 
The patch looks good overall. Left several small comments in the PR. ;;;","21/Nov/20 02:21;yifanc;Thank you for the fix. +1;;;","02/Dec/20 20:02;jwest;+1 LGTM;;;","02/Dec/20 21:49;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-16095-trunk-9DDF4ED4-D56E-4FB0-AB89-B42A3B1CC1BC]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16095-trunk-9DDF4ED4-D56E-4FB0-AB89-B42A3B1CC1BC]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/240/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid marking shutting down nodes as up after receiving gossip shutdown message,CASSANDRA-16094,13325605,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,maedhroz,maedhroz,01/Sep/20 20:20,03/Jan/21 17:02,13/Jul/23 08:39,23/Oct/20 08:48,3.0.23,3.11.9,4.0,4.0-beta3,,Test/dtest/python,,,,0,dtest,incremental_repair,repair,"We have two recent failures for this test on trunk: 

1.) https://app.circleci.com/pipelines/github/maedhroz/cassandra/102/workflows/37ed8dab-9da4-4730-a883-20b7a99d88b4/jobs/518/tests (CASSANDRA-15909)
2.) https://app.circleci.com/pipelines/github/jolynch/cassandra/6/workflows/41e080e0-d7ff-4256-899e-b4010c6ef5ab/jobs/716/tests (CASSANDRA-15379)

The test expects there to be mismatches and then read repair executed on a following SELECT, but either those mismatches aren’t there, read repair isn’t happening, or both.",,brandon.williams,e.dimitrova,maedhroz,marcuse,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 23 08:48:15 UTC 2020,,,,,,,All,,,,,,"0|z0i9mo:",9223372036854775807,,,,samt,,,,Normal,,2.0 beta 1,,,https://github.com/apache/cassandra/commit/12604456f9a8a38f742fd536af145d6ef0f61677,,,,,,,,,"new jvm dtest, cci run",,,,,"25/Sep/20 07:09;marcuse;got the same error for this: https://app.circleci.com/pipelines/github/krummas/cassandra/543/workflows/555d874f-8c47-41b0-bf95-80aeb9a75188/jobs/3847;;;","07/Oct/20 11:18;marcuse;This failure looks to be caused by a gossip shutdown race.

During {{drain()}} we send out {{GOSSIP_SHUTDOWN}} messages to all live endpoints which marks the node down on all other nodes. Sometimes a node can get a {{GossipDigestAck}} from the shutting down node after the GOSSIP_SHUTDOWN message, then we will send an ECHO_REQ to the shutting down node, which replies and the node gets marked as UP again.

In this case it makes the mutation that is supposed to only go to node1 get queued up and applied when the node gets back which makes us not get a digest mismatch and no repair data tracking warning.

[Patch|https://github.com/krummas/cassandra/commits/marcuse/16094] to avoid replying to an {{ECHO_REQ}} if we are shutting down.

[cci|https://app.circleci.com/pipelines/github/krummas/cassandra/575/workflows/242a0b75-e3a1-4e29-84d1-3353a32d4096];;;","22/Oct/20 11:12;samt;LGTM, though we can get the same result by simply dropping {{ECHO_REQ}} message if the node is shutdown. I'm fine either way, but seems like we don't really need to send the response (and add the new {{RequestFailureReason}} etc).;;;","22/Oct/20 11:42;marcuse;fixed in a new commit on the 4.0 branch below

[3.0|https://github.com/krummas/cassandra/commits/marcuse/16094-3.0] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra/583/workflows/66bba70b-5c76-4098-97f8-340cda84eb6a]
[3.11|https://github.com/krummas/cassandra/commits/marcuse/16094-3.11] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra/585/workflows/f966f78e-a5d7-44cf-96b7-710dee3bf16a]
[4.0|https://github.com/krummas/cassandra/commits/marcuse/16094] [cci|https://app.circleci.com/pipelines/github/krummas/cassandra/584/workflows/c26d0bff-5bd6-4dc9-b3b8-de093672f87d];;;","23/Oct/20 07:58;samt;+1;;;","23/Oct/20 08:48;marcuse;committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cassandra website is building/including the wrong versioned nodetool docs,CASSANDRA-16093,13325536,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Anthony Grasso,mck,mck,01/Sep/20 14:32,03/Jan/21 17:02,13/Jul/23 08:39,24/Sep/20 12:21,3.11.9,4.0,4.0-beta3,,,Documentation/Website,,,,0,,,,"For example
https://cassandra.apache.org/doc/3.11/tools/nodetool/enablefullquerylog.html

shouldn't be under the 3.11 documentation.",,Anthony Grasso,blerer,brandon.williams,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16066,,,,CASSANDRA-14955,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Documentation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Sep 24 12:21:33 UTC 2020,,,,,,,All,,,,,,"0|z0i97c:",9223372036854775807,,,,Anthony Grasso,,,,Low,,3.11.3,,,https://github.com/apache/cassandra-website/commit/6ac702768d90421c4b8b1eb0762a4f3cca65bb1e https://github.com/apache/cassandra/commit/3db64445f90e6fdb5ef550fc37dd7e8cd1161561,,,,,,,,,CI and cassandra.staged.a.o,,,,,"01/Sep/20 18:42;mck;`ant realclean` will remove the final in-tree generated docs at {{build/html}}
but it doesn't remove the nodetool generated docs at {{doc/source/tools/nodetool}}

The docker-compose.yaml file in cassandra-website, rebuilds the versions using the same cassandra directory just switching branches/tags.;;;","02/Sep/20 09:34;mck;CASSANDRA-14955 is also missing from the cassandra-3.11 branch and tags.;;;","02/Sep/20 10:41;mck;Fix in https://github.com/apache/cassandra-website/pull/17
 specifically the fix is the first commit, while the second commit regenerates the in-tree docs correctly. ;;;","02/Sep/20 12:06;Anthony Grasso;Pull request [#17|https://github.com/apache/cassandra-website/pull/17] reviewed. Left a few minor comments, however they are non-blocking.;;;","02/Sep/20 16:03;mck;Suggestions addressed/applied. Thanks [~Anthony Grasso].;;;","02/Sep/20 16:09;mck;Committed as [6ac702768d90421c4b8b1eb0762a4f3cca65bb1e|https://github.com/apache/cassandra-website/commit/6ac702768d90421c4b8b1eb0762a4f3cca65bb1e].;;;","02/Sep/20 16:10;mck;Re-opened. This need a patch in-tree for the proper cleanup.;;;","02/Sep/20 16:17;mck;In-tree patch at [here|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_16093] (one-liner).;;;","24/Sep/20 11:19;Anthony Grasso;Reviewing In-tree patch;;;","24/Sep/20 11:25;Anthony Grasso;Change in commit [df54117|https://github.com/apache/cassandra/commit/df54117e9ef4f07d84592a925d6a0a92489d68ac] looks good to me.;;;","24/Sep/20 11:38;blerer;+1;;;","24/Sep/20 12:21;mck;In-tree patch committed with [3db64445f90e6fdb5ef550fc37dd7e8cd1161561|https://github.com/apache/cassandra/commit/3db64445f90e6fdb5ef550fc37dd7e8cd1161561].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky Test: TestDiskBalance.test_disk_balance_after_boundary_change_stcs,CASSANDRA-16089,13325393,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,maedhroz,maedhroz,31/Aug/20 20:52,03/Jan/21 17:02,13/Jul/23 08:39,29/Sep/20 18:39,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,dtest,,,"See https://app.circleci.com/pipelines/github/maedhroz/cassandra/99/workflows/72c69ea8-f347-4b00-aed8-bd465f3549ff/jobs/498

After bootstrapping a second node into the cluster, the sizes of the SSTables (per directory) on the first node no longer fall within the 10% margin of error. We don’t have any assertion in the test that they were balanced before bootstrap, however.",,aholmber,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 29 18:39:52 UTC 2020,,,,,,,All,,,,,,"0|z0i8bs:",9223372036854775807,,,,brandon.williams,,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/e4e8d94ba540743f0b0ccfdd5b8ce3cefc7a6a68,,,,,,,,,"Manually reproduced the problem.
Fixed and looped test many iterations locally.
CI looks good.",,,,,"29/Sep/20 18:01;aholmber;The test fails occasionally due to random token generation for the second node. If the random token is too close to the node1 token, very little data is left on node1 after cleanup, and the disk balance variation goes up due to ""noise"".

It can be made to fail in this manner consistently by configuring an intentionally bad token. For example one unfortunate token selection:

{noformat}
Datacenter: datacenter1
==========
Address    Rack        Status State   Load            Owns                Token
                                                                                                          9143583083429189474
127.0.0.1  rack1       Up     Normal  23.67 MiB       0.43%               -9223372036854775808
127.0.0.2  rack1       Up     Normal  68.62 KiB       99.57%              9143583083429189474
{noformat}

Leaves only kilobytes of data on each disk after cleanup and compaction.

The dtest change just makes for fixed token selection so we can avoid the noise in small files.
[patch|https://github.com/apache/cassandra-dtest/commit/32a31742bda41b09872b7820e9fb7fffda1addd9]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16089];;;","29/Sep/20 18:39;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MessageSerializationPropertyTest fails with bytes should not be empty for type org.apache.cassandra.db.marshal.BytesType,CASSANDRA-16086,13325362,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Bob01,dcapwell,dcapwell,31/Aug/20 16:54,03/Jan/21 17:03,13/Jul/23 08:39,31/Aug/20 19:35,4.0,4.0-beta3,,,,Test/unit,,,,0,,,,"{code}
Cause was :-
java.lang.AssertionError: bytes should not be empty for type org.apache.cassandra.db.marshal.BytesType
	at org.apache.cassandra.db.marshal.AbstractType.writtenLength(AbstractType.java:423)
	at org.apache.cassandra.db.SinglePartitionReadCommand.selectionSerializedSize(SinglePartitionReadCommand.java:1043)
	at org.apache.cassandra.db.ReadCommand$Serializer.serializedSize(ReadCommand.java:1038)
	at org.apache.cassandra.db.ReadCommand$Serializer.serializedSize(ReadCommand.java:909)
	at org.apache.cassandra.net.Message$Serializer.payloadSize(Message.java:1289)
	at org.apache.cassandra.net.Message.payloadSize(Message.java:1333)
	at org.apache.cassandra.net.Message$Serializer.serializePre40(Message.java:917)
	at org.apache.cassandra.net.Message$Serializer.serialize(Message.java:620)
	at org.apache.cassandra.net.MessageSerializationPropertyTest.lambda$serializeSizeProperty$0(MessageSerializationPropertyTest.java:73)

Seed was 35361441975355
{code}

This is caused by the fact the generators allow empty types.",,dcapwell,jmeredithco,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Bob01,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 31 19:35:29 UTC 2020,,,,,,,All,,,,,,"0|z0i84o:",9223372036854775807,,,,dcapwell,jmeredithco,maedhroz,,Low,,4.0-beta2,,,https://github.com/apache/cassandra/commit/23ba48aa935d3f81e66b65285fa8e7972f94dcfe,,,,,,,,,test,,,,,"31/Aug/20 17:00;jmeredithco;+1;;;","31/Aug/20 17:21;maedhroz;+1;;;","31/Aug/20 19:35;dcapwell;CI: https://app.circleci.com/pipelines/github/dcapwell/cassandra/466/workflows/45d15709-2a7a-4ea5-a658-fe83af87c419

all failures were flaky tests;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cassandra fails to start using Java SE 8 Update 261,CASSANDRA-16085,13325356,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,sldr,alexDrinkwater,alexDrinkwater,31/Aug/20 15:46,19/Jan/22 19:54,13/Jul/23 08:39,15/Sep/21 18:44,3.0.26,3.11.12,,,,Local/Startup and Shutdown,,,,1,,,,When using JRE 8u261 to start cassandra it fails and gives this error: \njava.lang.UnsatisfiedLinkError: WindowsTimer ,,alexDrinkwater,brandon.williams,e.dimitrova,jmckenzie,slachiewicz,sldr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Sep/21 03:39;sldr;cassandra-16085-3.0.patch;https://issues.apache.org/jira/secure/attachment/13033489/cassandra-16085-3.0.patch","15/Sep/21 03:39;sldr;cassandra-16085-3.11.patch;https://issues.apache.org/jira/secure/attachment/13033490/cassandra-16085-3.11.patch","15/Sep/21 03:39;sldr;cassandra-16085-trunk.patch;https://issues.apache.org/jira/secure/attachment/13033491/cassandra-16085-trunk.patch",,,,,,,,,,,,3.0,sldr,,,,,,,,,,,,,Availability,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Clients,None,,Wed Jan 19 19:54:57 UTC 2022,,,,,,,All,Java8,Windows,,,,"0|z0i83c:",9223372036854775807,,,,brandon.williams,jmckenzie,,,Normal,,3.11.2,,,https://github.com/apache/cassandra/commit/be649d5d5437a99be225049f94fda058e4b9e896,,,,,,,,,localized to windows,,,,,"15/Sep/21 04:00;sldr;Add the ability to catch UnsatisfiedLinkError in WindowsTimer and if not available to allow startup to continue. I get the following on Windows 2019 Server running Cassandra 3.11.3 on Azul Zulu Java 1.8u302:
{code:java}
ERROR [main] 2021-09-10 14:25:29,064 CassandraDaemon.java:708 - Exception encountered during startup
java.lang.UnsatisfiedLinkError: C:\Windows\Temp\jna-1617058420\jna439724638011461000.dll: Can't find dependent libraries
    at java.lang.ClassLoader$NativeLibrary.load(Native Method) ~[na:1.8.0_302]
    at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1950) ~[na:1.8.0_302]
    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1832) ~[na:1.8.0_302]
    at java.lang.Runtime.load0(Runtime.java:811) ~[na:1.8.0_302]
    at java.lang.System.load(System.java:1088) ~[na:1.8.0_302]
    at com.sun.jna.Native.loadNativeDispatchLibraryFromClasspath(Native.java:851) ~[jna-4.2.2.jar:4.2.2 (b0)]
    at com.sun.jna.Native.loadNativeDispatchLibrary(Native.java:826) ~[jna-4.2.2.jar:4.2.2 (b0)]
    at com.sun.jna.Native.<clinit>(Native.java:140) ~[jna-4.2.2.jar:4.2.2 (b0)]
    at org.apache.cassandra.utils.WindowsTimer.<clinit>(WindowsTimer.java:35) ~[apache-cassandra-3.11.3.jar:3.11.3]
    at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:599) [apache-cassandra-3.11.3.jar:3.11.3]
    at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691) [apache-cassandra-3.11.3.jar:3.11.3]
{code}
The fix implemented is similar to fix done in CASSANDRA-13333. In that issue  WindowsTimer was mentioned but further down the question of  moving WindowsTimer is asked so it could be fixed and answered not to move.
 
I have attached the patch files for branches cassandra-3.0, cassandra-3.11, and trunk.
Below are the links to the 3 github branches (since I am new at this; I hope at least 1 set of patches or branches will work).
[CASSANDRA-16085-3.0|https://github.com/sldr/cassandra/tree/CASSANDRA-16085-3.0]
[CASSANDRA-16085-3.11|https://github.com/sldr/cassandra/tree/CASSANDRA-16085-3.11]
[CASSANDRA-16085-trunk|https://github.com/sldr/cassandra/tree/CASSANDRA-16085-trunk]
 
Let me know if you need anything else.
Thanks!;;;","15/Sep/21 13:57;brandon.williams;Thanks for the patches! Unfortunately, since [Windows support has ended|https://issues.apache.org/jira/browse/CASSANDRA-16171] with 4.0, this is a bit of a conundrum, since I don't know any committers with a windows machine to test this. That said, since the patch is very straightforward and only touches WindowsTimer, I think we could commit this (except for the trunk patch - CASSANDRA-16956)  [~jmckenzie]  what do you think?;;;","15/Sep/21 17:40;jmckenzie;Can't test it, but visually +1 to the patch. The default coalescing value performs reasonably well; think it was the memory mapping that really made the difference. Yeah, checking [here|https://web.archive.org/web/20160316234320/http://www.datastax.com/dev/blog/windows-and-cassandra-2-2-objects-in-mirror-are-closer-than-they-appear] it was between 9 and 14% from kernel timer 6 years ago, so I think we're 100% safe to continue if it fails to register.;;;","15/Sep/21 18:31;e.dimitrova;I think [~blerer] might be able to test it :) ;;;","15/Sep/21 18:44;brandon.williams;I had already started the commit, so I guess now testing will be easier.  Committed to 3.0 and 3.11 only.;;;","15/Sep/21 20:00;sldr;THANK YOU!!!

We will be looking forward to updating to 3.11.12.;;;","19/Jan/22 19:54;sldr;*Workaround:*

Cassandra is using jna-4.2.2.2.jar that has a native dll in it (jnidispatch.dll) that needs msvcr100.dll that is part of Microsoft Visual C++ 2010 Redistributable Package (x64). If you install that then Cassandra will run without crashing. NOTE: It may be hard to find ""Microsoft Visual C++ 2010 Redistributable Package (x64)"" from Microsoft.

Here is a URL where I found it (url from Installshield prerequisite file for ""Microsoft Visual C++ 2010 Redistributable Package (x64)""):

http://download.microsoft.com/download/3/2/2/3224B87F-CFA0-4E70-BDA3-3DE650EFEBA5/vcredist_x64.exe

*Better Option:*

The other option is getting Cassandra 3.11.12 released but I am not sure if and when that is going to happen.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid trying to keep track of RTs for endpoints we won't write to during read repair,CASSANDRA-16084,13325345,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,31/Aug/20 14:12,03/Jan/21 17:03,13/Jul/23 08:39,03/Sep/20 11:33,4.0,4.0-beta3,,,,Consistency/Coordination,,,,0,,,,"During range movements we can have responses for endpoints we won't write to, in this case we don't collect {{PartitionUpdate}}s for those endpoints, but we do try to update the range tombstones. This causes us to fail with this assertion error since we assume a partition deletion to be LIVE if there is no current partition update getting built for an endpoint.

{code}
Caused by: java.lang.AssertionError: Error merging RTs on distributed_test_keyspace.tbl: merged=null, versions=[null, Marker INCL_START_BOUND(20)@80/1598882605, Marker INCL_START_BOUND(20)@80/1598882605], sources={[Full(/127.0.0.3:7012,(-3,4611686018427387899]), Full(/127.0.0.1:7012,(-3,4611686018427387899]), Full(/127.0.0.2:7012,(-3,4611686018427387899])]}, debug info:
 /127.0.0.3:7012 => [distributed_test_keyspace.tbl] key=test1 partition_deletion=deletedAt=100, localDeletion=1598882605 columns=[[] | []] repaired_digest= repaired_digest_conclusive==true,
/127.0.0.1:7012 => [distributed_test_keyspace.tbl] key=test1 partition_deletion=deletedAt=50, localDeletion=1598882605 columns=[[] | []] repaired_digest= repaired_digest_conclusive==true
    Marker INCL_START_BOUND(20)@80/1598882605
    Marker INCL_END_BOUND(40)@80/1598882605,
/127.0.0.2:7012 => [distributed_test_keyspace.tbl] key=test1 partition_deletion=deletedAt=50, localDeletion=1598882605 columns=[[] | []] repaired_digest= repaired_digest_conclusive==true
    Marker INCL_START_BOUND(20)@80/1598882605
    Marker INCL_END_BOUND(40)@80/1598882605
	at org.apache.cassandra.service.reads.DataResolver$2$1.onMergedRangeTombstoneMarkers(DataResolver.java:384)
	at org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer.getReduced(UnfilteredRowIterators.java:592)
	at org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer.getReduced(UnfilteredRowIterators.java:541)
	at org.apache.cassandra.utils.MergeIterator$ManyToOne.consume(MergeIterator.java:219)
	at org.apache.cassandra.utils.MergeIterator$ManyToOne.computeNext(MergeIterator.java:158)
	at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:47)
	at org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator.computeNext(UnfilteredRowIterators.java:523)
	at org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator.computeNext(UnfilteredRowIterators.java:391)
	at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:47)
	at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:133)
	at org.apache.cassandra.db.transform.FilteredRows.isEmpty(FilteredRows.java:50)
	at org.apache.cassandra.db.transform.EmptyPartitionsDiscarder.applyToPartition(EmptyPartitionsDiscarder.java:27)
	at org.apache.cassandra.db.transform.BasePartitions.hasNext(BasePartitions.java:97)
	at org.apache.cassandra.service.StorageProxy$6.hasNext(StorageProxy.java:1768)
	at org.apache.cassandra.cql3.statements.SelectStatement.process(SelectStatement.java:777)
	at org.apache.cassandra.cql3.statements.SelectStatement.processResults(SelectStatement.java:425)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:296)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:246)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:88)
	at org.apache.cassandra.distributed.impl.Coordinator.executeInternal(Coordinator.java:100)
	at org.apache.cassandra.distributed.impl.Coordinator.lambda$executeWithResult$0(Coordinator.java:62)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.AssertionError: currentDeletion=deletedAt=100, localDeletion=1598882605, marker=Marker INCL_START_BOUND(20)@80/1598882605
	at org.apache.cassandra.service.reads.repair.RowIteratorMergeListener.onMergedRangeTombstoneMarkers(RowIteratorMergeListener.java:296)
	at org.apache.cassandra.service.reads.DataResolver$2$1.onMergedRangeTombstoneMarkers(DataResolver.java:370)
	... 25 more
{code}",,benedict,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Sep 03 11:33:27 UTC 2020,,,,,,,All,,,,,,"0|z0i80w:",9223372036854775807,,,,benedict,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/9b6e54ee02dc68a99965f1ea9533fd5e781e4cbe,,,,,,,,,"new test, cci run",,,,,"31/Aug/20 14:17;marcuse;Patch: https://github.com/krummas/cassandra/commits/marcuse/16084
cci: https://app.circleci.com/pipelines/github/krummas/cassandra/489/workflows/d2c417cb-e28b-42fd-94ea-125398bb1c84;;;","03/Sep/20 08:35;benedict;+1;;;","03/Sep/20 11:33;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cql_tracing_test.py failing repeatedly on jenkins,CASSANDRA-16073,13324295,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,24/Aug/20 15:17,21/Dec/20 09:31,13/Jul/23 08:39,26/Aug/20 15:31,4.0,4.0-beta2,,,,Test/dtest/python,,,,0,,,,Jenkins has been failing tracing tests repeatedly,,bereng,blerer,brandon.williams,e.dimitrova,,,,,,,,"bereng opened a new pull request #91:
URL: https://github.com/apache/cassandra-dtest/pull/91


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Aug/20 15:24;githubbot;600","bereng commented on pull request #91:
URL: https://github.com/apache/cassandra-dtest/pull/91#issuecomment-679755327


   [CI dtests](https://ci-cassandra.apache.org/job/Cassandra-devbranch/266/)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Aug/20 05:45;githubbot;600","blerer commented on pull request #91:
URL: https://github.com/apache/cassandra-dtest/pull/91#issuecomment-680952073


   Committed manually.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Aug/20 15:28;githubbot;600","blerer closed pull request #91:
URL: https://github.com/apache/cassandra-dtest/pull/91


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Aug/20 15:28;githubbot;600","bereng opened a new pull request #92:
URL: https://github.com/apache/cassandra-dtest/pull/92


   …cific test instead


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Aug/20 05:06;githubbot;600","bereng commented on pull request #92:
URL: https://github.com/apache/cassandra-dtest/pull/92#issuecomment-681685968


   - [Ci j11](https://app.circleci.com/pipelines/github/bereng/cassandra/95/workflows/0705cab0-41b7-4678-ac55-17ed093e3d91)
   - [CI j8](https://app.circleci.com/pipelines/github/bereng/cassandra/95/workflows/0dc21a18-dd65-4e39-ab69-c44776c8479a)
   
   Known or unrelated failures


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Aug/20 07:27;githubbot;600","bereng closed pull request #92:
URL: https://github.com/apache/cassandra-dtest/pull/92


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Aug/20 08:27;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-11928,CASSANDRA-16045,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Aug 27 08:11:20 UTC 2020,,,,,,,All,,,,,,"0|z0i1k8:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra-dtest/commit/b00d0c310ff61d3f39c116daeccdf43aa63f2b25,,,,,,,,,See PR,,,,,"24/Aug/20 15:22;e.dimitrova;Hey [~Bereng],
I just noticed this ticket in #Cassandra-noise, I think me and you created duplicates of an old ticket :-) 
I opened CASSANDRA-16045 which [~mck2] recognized and linked to CASSANDRA-11928.
I think we might want to close CASSANDRA-16045 and this one and continue the work started at CASSANDRA-11928, what do you think?;;;","24/Aug/20 15:38;bereng;Investigating this failure I suspect this should fix all the tracing test failures and hopefully strengthen dtests overall. It was mainly a matter of hitting a couple timeouts. You can repro with a VM with little memory (3GB) and lowering CPU until it repros. The fix is basically to increase timeouts as there are no errors, just things being slow which aligns to circle and ASF jenkins heavy stressed test envs.;;;","24/Aug/20 15:38;bereng;[~e.dimitrova] thanks for the pointers. Unfortunately I had the PR ready already lol. So I will drop a message on those tickets and we can close as we think best.;;;","25/Aug/20 11:45;blerer;The fix looks fine to me. Waiting for the CI-results.;;;","25/Aug/20 12:27;bereng;[~blerer]CI results are in the PR. You can see them [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/266/];;;","26/Aug/20 06:39;bereng;[~blerer] did you fire another CI run in the end? I am curious to see the results...;;;","26/Aug/20 15:28;blerer;Your test run was looking fine to me :-);;;","26/Aug/20 15:31;blerer;Committed into DTest master at faf202c6c377a875a2c52ee971436c14962d1132;;;","27/Aug/20 05:08;bereng;Seems latest jenkins run spike to 50-ish failures. This is strange as the dtest runs pre-merge where clean.

I have pushed a new [PR|https://github.com/apache/cassandra-dtest/pull/92] to revert the generic timeout change in favor of a specific test fix. -I will need sbdy to fire a dtest ci for me...-

Edit: Waiting on CI;;;","27/Aug/20 07:27;bereng;CI is good imo:
 * [Ci j11|https://app.circleci.com/pipelines/github/bereng/cassandra/95/workflows/0705cab0-41b7-4678-ac55-17ed093e3d91]
 * [CI j8|https://app.circleci.com/pipelines/github/bereng/cassandra/95/workflows/0dc21a18-dd65-4e39-ab69-c44776c8479a]

This is ready for review/merge.;;;","27/Aug/20 08:11;blerer;Committed the new patch in master at b00d0c310ff61d3f39c116daeccdf43aa63f2b25;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
max_compaction_flush_memory_in_mb is interpreted as bytes,CASSANDRA-16071,13324230,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,24/Aug/20 09:39,05/Dec/20 17:52,13/Jul/23 08:39,25/Aug/20 18:24,3.11.10,3.11.8,4.0,4.0-beta2,4.0-beta4,Feature/SASI,,,,0,,,,"In CASSANDRA-12662, [~scottcarey] [reported|https://issues.apache.org/jira/browse/CASSANDRA-12662?focusedCommentId=17070055&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17070055] that the {{max_compaction_flush_memory_in_mb}} setting gets incorrectly interpreted in bytes rather than megabytes as its name implies.

{quote}
1.  the setting 'max_compaction_flush_memory_in_mb' is a misnomer, it is actually memory in BYTES.  If you take it at face value, and set it to say, '512' thinking that means 512MB,  you will produce a million temp files rather quickly in a large compaction, which will exhaust even large values of max_map_count rapidly, and get the OOM: Map Error issue above and possibly have a very difficult situation to get a cluster back into a place where nodes aren't crashing while initilaizing or soon after.  This issue is minor if you know about it in advance and set the value IN BYTES.
{quote}

",,e.dimitrova,jasonstack,mck,scott_carey,scottcarey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-12662,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Dec 05 17:50:52 UTC 2020,,,,,,,All,,,,,,"0|z0i15s:",9223372036854775807,,,,jasonstack,,,,Normal,,3.4,,,https://github.com/apache/cassandra/commit/116e9c1678a1e96748236962e71319f337e07f8d,,,,,,,,,CI run. Unit test added.,,,,,"24/Aug/20 09:47;mck;Patches
 - [3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...thelastpickle:mck/cassandra-3.11_max_compaction_flush_memory_in_mb_fix] with CI [run|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/264/pipeline]
 - [trunk|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_max_compaction_flush_memory_in_mb_fix] with CI [run|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/265/pipeline]

(will update with tests …);;;","24/Aug/20 11:49;jasonstack;{code:java}
 long maxMemMb = indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION) == null
  ? (long) (1048576 * INDEX_MAX_FLUSH_DEFAULT_MULTIPLIER) // 1G default for memtable
  : Long.parseLong(indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION));
{code}
[~mck] I think the default {{""1048576 * 0.15 mb"" (153GB)}} may still cause OOM.

 

How about we rename {{""maxMemMb""}} to {{""maxMemBytes""}} and rename 
 {{""IndexMode#maxCompactionFlushMemoryInMb""}} to {{""maxCompactionFlushMemoryInBytes""}}. So it should be :
{code:java}
 long maxMemBytes = indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION) == null
  ? (long) (1073741824 * INDEX_MAX_FLUSH_DEFAULT_MULTIPLIER) // 1G default for memtable
  : 1048576L * Long.parseLong(indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION));
{code};;;","24/Aug/20 13:02;mck;bq. How about we rename ""maxMemMb"" to ""maxMemBytes"" and rename
""IndexMode#maxCompactionFlushMemoryInMb"" to ""maxCompactionFlushMemoryInBytes"".

Done. And CI runs added. Working on a (super simple) unit test…;;;","25/Aug/20 13:27;mck;Unit test added.;;;","25/Aug/20 14:59;jasonstack;Thanks for the patch. LGTM.;;;","25/Aug/20 18:24;mck;Committed as [116e9c1678a1e96748236962e71319f337e07f8d|https://github.com/apache/cassandra/commit/116e9c1678a1e96748236962e71319f337e07f8d].;;;","17/Sep/20 19:09;scottcarey;Heads-up for anyone currently working around this bug by setting the value in bytes.

With this bug fix, it appears we will need to change our config file or risk going OOM.  For me, it will go from a setting of 10MB to 10TB when the version is bumped if I don't change the config when updating.;;;","15/Nov/20 03:13;scott_carey;Its worse than I remembered.   Updating to the latest cassandra with this fix in will take down nodes.  The configuration option is on the index itself, and there is no 'alter index' option to reset the max_compaction_flush_memory_in_mb value.    The whole cluster must be updated to the new version, then compaction has to be either stopped or delicately monitored, then _new_ indexes need to be built with the updated values for max_compaction_flush_memory_in_mb, and then the old indexes can be removed.   

 

The new values will destroy old versions with death-by-a-million-open-files, and the old values will destroy new nodes with OOM during compaction.

 

I wish I had seen this fix before it was committed.  It should have detected 'unusually large' values and interpreted them as bytes.

 

For example, '20480000' is 20MB if interpreted as bytes.  If interpreted as MB its way over any reasonable size – 20TB.   A safe bet would be to interpret anything over 100000 (100GB in MB, but only 100K if bytes) as bytes, and anything below that as MB.  Then this wouldn't be a migration nightmare.;;;","15/Nov/20 12:47;mck;I should have put this in NEWS.txt :-(

bq.  A safe bet would be to interpret anything over 100000 (100GB in MB, but only 100K if bytes) as bytes…

This is smart. Though I'm uneasy with continuing to interpret the value in bytes. 
Here are patches for [3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...thelastpickle:mck/cassandra-3.11_16701_2] and [trunk|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_16071_2] that, if the value is over 100GB, log an error and revert value back to default of 1GB. This won't be ideal in all situations, but I believe it means users will correct the configuration and will be therefore safer in the longer run. wdyt [~scott_carey], [~jasonstack]?


Rehashing the pain…

Clusters that had previously configured {{max_compaction_flush_memory_in_mb}} as bytes,  must take one of the upgrade actions,

Upgrading to 3.11.8 or 3.11.9, with the index unavailable:
- drop index
- rolling upgrade all nodes (disabling compactions upon restart)
- recreate index with correct {{max_compaction_flush_memory_in_mb}} mb value

Upgrading to 3.11.8 or 3.11.9, maintaining use of index:
- disable compactions on all nodes 
- rolling upgrade all nodes (disabling compactions upon restart)
- create new index with correct {{max_compaction_flush_memory_in_mb}} mb value
- drop old index
- enable compactions on all nodes

With the patches proposed, upgrading to 3.11.10+:
- rolling upgrade all nodes
- drop and recreate index with correct {{max_compaction_flush_memory_in_mb}} mb value


;;;","15/Nov/20 14:54;jasonstack;bq. if the value is over 100GB, log an error and revert value back to default of 1GB. 

lgtm.

bq. if (maxMemBytes > 100 * 1073741824)

right hand side will overflow..

bq. logger.error(""{} configured as {} is above 100GB, reverting to default 1GB"", INDEX_MAX_FLUSH_MEMORY_OPTION, maxMemBytes);

nits: how about using {{FBUtilities#prettyPrintMemory}} for {{maxMemBytes}};;;","15/Nov/20 15:03;mck;
bq. right hand side will overflow..

fixed, and moved to a constant.

bq. nits: how about using FBUtilities#prettyPrintMemory for maxMemBytes

I first did that, but figured the raw value here is more intuitive, as it helps explain the mismatch between bytes and megabytes, and the calculation happening…;;;","16/Nov/20 10:32;mck;CI runs for [3.11|https://ci-cassandra.apache.org/job/Cassandra-devbranch/206/#showFailuresLink] and [trunk|https://ci-cassandra.apache.org/job/Cassandra-devbranch/207/#showFailuresLink].

[~scottcarey], [~scott_carey], I am still waiting for your input before committing these patches.;;;","18/Nov/20 12:31;mck;Committed upgrade protection as [ad9b7156bd3df143c1d090a3d77f9479d906e0ec|https://github.com/apache/cassandra/commit/ad9b7156bd3df143c1d090a3d77f9479d906e0ec].;;;","18/Nov/20 21:06;scott_carey;I still have to do a rolling re-index which is not very nice.   If it just interpreted the large values as if it were bytes it would be ok.  Sure, log a loud warning or something.   I don't comprehend why interpreting it as bytes for such values is problematic.   Maybe set a floor of some sort if 100k is too small.  But 1GB is useless for anyone who already set this lower than the default 1GB on purpose.

 

The default 1GB isn't safe either, due to the bugs I listed in the other ticket.   Large compactions with multiple output files are 1GB _per file_ _output_ per index in the worst case.   So a compaction that outputs 40 files from LCS id DOA on my environment at 1GB  – no different than setting it to 1TB.   Anyone who set the value smaller than the default did so most likely to avoid going OOM.

I suppose the patch here will help some people, but is not helpful for me.  It does highlight the issue in the logs which is a big improvement.

To compound issues, the cassandra yum repo does not store older versions, so rolling back to 3.11.7 is non-trivial.

 

RE: the upgrade process

 

In no way is it acceptable in most environments using SASI to drop the old index and only then build the new one.   Most likely, there are queries that will not function without the index.   I have to build a new index with the new settings (but a different name), then drop the old one.  

I also have to carefully build them in the correct order since the query planner is dependent on the order of creation of the index.

 

If this interpreted the value as bytes when it is huge, I wouldn't have to create a new index.   If addressing the error log message was as simple as dividing the value by 2^20 and nothing else, it would probably even be reasonable to halt the start-up and correct it.  But as long as it is an index rebuild that can take a LONG time on a large table, I think this fix should be more sensitive to the operational cost incurred – after all this is a minor patch release and it seems unusual to require data rebuilds in such a patch.;;;","18/Nov/20 21:09;scott_carey;On the other hand, maybe I'm the only one crazy enough to use this feature on an LCS table with 500GB of data per node.

 

Yet, it absolutely obliterates the ordinary secondary indexing on a low to moderate cardinality index and opens up use cases that are impossible without it.  I'm looking forward to the new secondary indexing feature that is being designed that likewise uses a local index alongside an SSTable.

 

Sorry for the delay replying, I'm not getting email notifications at the moment.

 

Thanks for listening!   I thought  about submitting a patch but I don't have a cassandra dev environment set up.;;;","19/Nov/20 12:42;mck;[~scott_carey], apologies for moving ahead with the upgrade protection patch before getting the feedback from you.

We definitely hear your concerns and pain around how to upgrade in this situation while maintaining the SASI available.

The approach of reverting to the default was chosen to minimise tech debt in the C* code, as having it continue to parse bytes is something likely to trap other C* developers and might just hurt other users down the road. The impact is also thought to be limited, i.e. not many will be in this situation of accurately incorrectly tuned max_compaction_flush_memory_in_mb in setups where the default value does not work at all and SASI availability is critical.

That being said, I will write up here soon a manual migration approach you can use to avoid having to recreate the SASI and keeping it available over the upgrade.;;;","21/Nov/20 15:16;mck;Here is a manual migration you can use to avoid having to recreate the SASI, also while keeping it available during the upgrade.

- disable compactions on all nodes
- rolling upgrade all nodes (disabling again compactions upon restart)
- verify that the system.log files reported 
{noformat} ERROR [main] … IndexMode.java:196 - max_compaction_flush_memory_in_mb configured as … is above 100GB, reverting to default 1GB{noformat}
- verify the index still has the old setting
{code}cqlsh -e ""select * from system_schema.indexes where keyspace_name = '<keyspace>' and table_name = '<table>';""{code}

- edit the indexes table to the correct max_compaction_flush_memory_in_mb value. It is important to get all the values here correct, including all those in {{OPTIONS}}. Failure to do this correctly can corrupt the original table and leave the node unable to start.
{code}cqlsh
> update system_schema.indexes set options = {'class_name': 'org.apache.cassandra.index.sasi.SASIIndex', 'max_compaction_flush_memory_in_mb': '<correct_value>', 'target': '<column_name>', …<other options>}  where keyspace_name = '<keyspace>' and table_name = '<table>' and index_name = '<index_name>' ;{code}

- restart the node
- validate the ERROR message no longer appears during startup
- enable compactions on all nodes;;;","05/Dec/20 17:50;scottcarey;[~mck]

Thank you for the update script that simulates ""alter index"".  This is also useful if one wants to modify this value without rebuilding the index for other purposes as well. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSL connection to storage port when internode encryption is disabled still try to load keystore,CASSANDRA-16068,13323952,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,jmeredithco,jmeredithco,21/Aug/20 12:38,24/Sep/20 00:39,13/Jul/23 08:39,24/Sep/20 00:39,,,,,,Messaging/Internode,,,,0,,,,"Starting a 4.0 cluster with internode encryption disabled can throw an exception if the keystore is not present after CASSANDRA-15262.

Part of {{cassandra.yaml}}, the keystore is optional and it just defaults to {{conf/.keystore}}

{code}
server_encryption_options:
    internode_encryption: none
    keystore: conf/.keystore
    keystore_password: cassandra
    truststore: conf/.truststore
    truststore_password: cassandra
{code}


Start the service and try to connect with openssl

{code}
$ openssl s_client -connect 127.0.0.1:7000
CONNECTED(00000003)
4790519404:error:140040E5:SSL routines:CONNECT_CR_SRVR_HELLO:ssl handshake failure:ssl_pkt.c:585:
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 0 bytes and written 0 bytes
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : 0000
    Session-ID:
    Session-ID-ctx:
    Master-Key:
    Start Time: 1597969961
    Timeout   : 7200 (sec)
    Verify return code: 0 (ok)
---
{code}


Which triggers an ERROR message with exception

{code}
ERROR [Messaging-EventLoop-3-1] 2020-08-20 18:34:52,855 InboundConnectionInitiator.java:355 - Failed to properly handshake with peer /127.0.0.1:61851. Closing the channel.
io.netty.handler.codec.DecoderException: java.io.IOException: failed to build trust manager store for secure connections
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:471)
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: failed to build trust manager store for secure connections
        at org.apache.cassandra.security.SSLFactory.buildKeyManagerFactory(SSLFactory.java:232)
        at org.apache.cassandra.security.SSLFactory.createNettySslContext(SSLFactory.java:300)
        at org.apache.cassandra.security.SSLFactory.getOrCreateSslContext(SSLFactory.java:276)
        at org.apache.cassandra.security.SSLFactory.getOrCreateSslContext(SSLFactory.java:257)
        at org.apache.cassandra.net.InboundConnectionInitiator$OptionalSslHandler.decode(InboundConnectionInitiator.java:492)
        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
        ... 17 common frames omitted
Caused by: java.nio.file.NoSuchFileException: conf/.keystore
        at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)
        at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:219)
        at java.base/java.nio.file.Files.newByteChannel(Files.java:370)
        at java.base/java.nio.file.Files.newByteChannel(Files.java:421)
        at java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420)
        at java.base/java.nio.file.Files.newInputStream(Files.java:155)
        at org.apache.cassandra.security.SSLFactory.buildKeyManagerFactory(SSLFactory.java:207)
        ... 23 common frames omitted
ERROR [Messaging-EventLoop-3-1] 2020-08-20 18:34:52,858 InboundConnectionInitiator.java:355 - Failed to properly handshake with peer /127.0.0.1:61851. Closing the channel.
io.netty.handler.codec.DecoderException: java.io.IOException: failed to build trust manager store for secure connections
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:471)
        at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:404)
        at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:371)
        at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:354)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1405)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
        at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:901)
        at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:818)
        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:497)
        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: failed to build trust manager store for secure connections
        at org.apache.cassandra.security.SSLFactory.buildKeyManagerFactory(SSLFactory.java:232)
        at org.apache.cassandra.security.SSLFactory.createNettySslContext(SSLFactory.java:300)
        at org.apache.cassandra.security.SSLFactory.getOrCreateSslContext(SSLFactory.java:276)
        at org.apache.cassandra.security.SSLFactory.getOrCreateSslContext(SSLFactory.java:257)
        at org.apache.cassandra.net.InboundConnectionInitiator$OptionalSslHandler.decode(InboundConnectionInitiator.java:492)
        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
        ... 18 common frames omitted
Caused by: java.nio.file.NoSuchFileException: conf/.keystore
        at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)
        at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:219)
        at java.base/java.nio.file.Files.newByteChannel(Files.java:370)
        at java.base/java.nio.file.Files.newByteChannel(Files.java:421)
        at java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420)
        at java.base/java.nio.file.Files.newInputStream(Files.java:155)
        at org.apache.cassandra.security.SSLFactory.buildKeyManagerFactory(SSLFactory.java:207)
        ... 24 common frames omitted
{code}
If the optional SSL handler is disabled, Cassandra emits this error instead.
{code}
ERROR [Messaging-EventLoop-3-1] 2020-08-20 18:44:34,338 InboundConnectionInitiator.java:358 - Failed to properly handshake with peer /127.0.0.1:61967. Closing the channel.
io.netty.handler.codec.DecoderException: org.apache.cassandra.net.Message$InvalidLegacyProtocolMagic: Read 369295616, Expected -900387334
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:471)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:404)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:371)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:354)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1405)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:901)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:818)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:497)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.cassandra.net.Message$InvalidLegacyProtocolMagic: Read 369295616, Expected -900387334
	at org.apache.cassandra.net.Message.validateLegacyProtocolMagic(Message.java:333)
	at org.apache.cassandra.net.HandshakeProtocol$Initiate.maybeDecode(HandshakeProtocol.java:167)
	at org.apache.cassandra.net.InboundConnectionInitiator$Handler.initiate(InboundConnectionInitiator.java:258)
	at org.apache.cassandra.net.InboundConnectionInitiator$Handler.decode(InboundConnectionInitiator.java:251)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)
	... 18 common frames omitted
{code}

The system should either not register the SSL handler when encryption is disabled (the behavior before CASSANDRA-15262) or gracefully tolerate the error.

Additionally, the inbound connection should either be an INFO or a WARNING.  Outbound connection failures should be an ERROR as the endpoint is expected, however inbound connections have to deal with anything connecting - from security scans to malicious actors",,jmeredithco,serban,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Sep 24 00:39:59 UTC 2020,,,,,,,All,,,,,,"0|z0hzg0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Sep/20 00:39;jmeredithco;Apologies, forgot I already filed this one. Closing this one against CASSANDRA-16144 as that has my plan for resolving.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid invalid state transition exception during incremental repair,CASSANDRA-16067,13323891,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,21/Aug/20 06:41,03/Jan/21 17:03,13/Jul/23 08:39,16/Sep/20 09:25,4.0,4.0-beta3,,,,Consistency/Repair,,,,0,,,,We currently throw an invalid state transition exception if we receive a prepare response and the repair session has already completely failed. In this case we should just ignore the response.,,bdeggleston,e.dimitrova,jmeredithco,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 16 09:25:22 UTC 2020,,,,,,,All,,,,,,"0|z0hz2g:",9223372036854775807,,,,bdeggleston,jmeredithco,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/da3806795fe7cf8412249a0fab9934e071a7511e,,,,,,,,,cci run,,,,,"21/Aug/20 07:03;marcuse;https://github.com/krummas/cassandra/commits/marcuse/16067
https://app.circleci.com/pipelines/github/krummas/cassandra/483/workflows/a572caee-3f2e-48f7-9d39-507c69ca7cb1;;;","21/Aug/20 20:31;jmeredithco;+1 looks like it'll have the benefit of not calling fail() multiple times and sending duplicate messages to participants.;;;","15/Sep/20 20:49;bdeggleston;+1;;;","16/Sep/20 09:25;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add test which validates that Message serializedSize(version) == serialize(out, version).length",CASSANDRA-16064,13323841,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,20/Aug/20 21:37,03/Jan/21 17:03,13/Jul/23 08:39,26/Aug/20 22:27,4.0,4.0-beta2,,,,Messaging/Internode,,,,0,,,,"In 4.0 we require serializedSize(version) == serialize(out, version).length for correctness in post40 message format as we write it into the message header.  Given that this is a strong requirement for correct deserialization of the message, we should have tests which help enforce this property.",,dcapwell,e.dimitrova,jmeredithco,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16234,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 26 22:27:34 UTC 2020,,,,,,,All,,,,,,"0|z0hyrc:",9223372036854775807,,,,jmeredithco,maedhroz,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/0697489f7455fa078cb454776b98236f18f82dd4,,,,,,,,,added tests,,,,,"20/Aug/20 21:50;dcapwell;I also feel I should backport this to 3.0.  I started this in 3.0 and found a bug where we don't include the table name's size in our estimate.  We didn't use sizeOf for correctness like we do in 4.0, so less critical.;;;","20/Aug/20 22:13;maedhroz;bq. I should backport this to 3.0

Fair. Either way, I'll try to have feedback on trunk by tomorrow.;;;","21/Aug/20 17:44;jmeredithco;Pushed up a round of review notes [https://github.com/jonmeredith/cassandra/pull/new/CASSANDRA-16064-suggestions];;;","21/Aug/20 19:21;dcapwell;Ok hitting issues with reversed type... working on tests for reversed type and fixing the issues found... this caused the current tests to be flaky; targeting 2pm my time to complete tests.;;;","23/Aug/20 18:06;dcapwell;Ok finally got all tests stable, but had to expand the scope to fix other issues... feel it may make more sense to split this up to isolate the changes; thoughts?;;;","25/Aug/20 00:19;dcapwell;python dtests are passing other than 7 tests which look to be caused by https://github.com/apache/cassandra-dtest/commit/cefddf845d63919c6e7b5efa35b28fe7a5ad1142 changing the Api they call;;;","25/Aug/20 23:17;maedhroz;Do we have a committer lined up? Perhaps [~aleksey], given the minor involvement?;;;","25/Aug/20 23:31;brandon.williams;David can commit, heh.;;;","26/Aug/20 00:37;maedhroz;Ouch. Sorry.;;;","26/Aug/20 17:29;dcapwell;Thanks for all the reviews so far.  I have wrapped up everything and running through CI right now.

java8: https://app.circleci.com/pipelines/github/dcapwell/cassandra/448/workflows/3982d772-6f37-4ff2-bc16-af1c1613462b

only failing test so far looks to be CASSANDRA-15861, so so far so good.;;;","26/Aug/20 21:32;dcapwell;Caleb and Jon both +1 in PR;;;","26/Aug/20 22:27;dcapwell;CI results: https://app.circleci.com/pipelines/github/dcapwell/cassandra/455/workflows/a60aef20-a3e0-4f3a-b055-93e9b040d82a

there were flaky tests and I forgot to merge the python dtest changes in CASSANDRA-7544 so those tests also failed (so pushed the tests).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix user experience when upgrading to 4.0 with compact tables,CASSANDRA-16063,13323784,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,slebresne,slebresne,20/Aug/20 15:09,03/Jan/21 17:02,13/Jul/23 08:39,13/Oct/20 15:51,3.0.23,3.11.9,4.0,4.0-beta3,,Legacy/CQL,,,,0,,,,"The code to handle compact tables has been removed from 4.0, and the intended upgrade path to 4.0 for users having compact tables on 3.x is that they must execute {{ALTER ... DROP COMPACT STORAGE}} on all of their compact tables *before* attempting the upgrade.

Obviously, some users won't read the upgrade instructions (or miss a table) and may try upgrading despite still having compact tables. If they do so, the intent is that the node will _not_ start, with a message clearly indicating the pre-upgrade step the user has missed. The user will then downgrade back the node(s) to 3.x, run the proper {{ALTER ... DROP COMPACT STORAGE}}, and then upgrade again.

But while 4.0 does currently fail startup when finding any compact tables with a decent message, I believe the check is done too late during startup.

Namely, that check is done as we read the tables schema, so within [{{Schema.instance.loadFromDisk()}}|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java#L241].  But by then, we've _at least_ called {{SystemKeyspace.persistLocalMetadata()}}} and {{SystemKeyspaceMigrator40.migrate()}}, which will get into the commit log, and even possibly flush new {{na}} format sstables. As a results, a user might not be able to seemlessly restart the node on 3.x (to drop compact storage on the appropriate tables).

Basically, we should make sure the check for compact tables done at 4.0 startup is done as a {{StartupCheck}}, before the node does anything.

We should also add a test for this (checking that if you try upgrading to 4.0 with compact storage, you can downgrade back with no intervention whatsoever).
",,adelapena,e.dimitrova,jeromatron,jwest,slebresne,,,,,,,"ekaterinadimitrova2 opened a new pull request #99:
URL: https://github.com/apache/cassandra-dtest/pull/99


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Sep/20 11:59;githubbot;600","ekaterinadimitrova2 closed pull request #99:
URL: https://github.com/apache/cassandra-dtest/pull/99


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Sep/20 12:08;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15897,,,,,,,,,,,,,"24/Sep/20 13:27;e.dimitrova;Compact_storage_upgrade_tests.txt;https://issues.apache.org/jira/secure/attachment/13012075/Compact_storage_upgrade_tests.txt",,,,,,,,,,,,,,1.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Oct 13 15:48:40 UTC 2020,,,,,,,All,,,,,,"0|z0hyeo:",9223372036854775807,,,,adelapena,slebresne,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/0700dfa0bc26d0758df898101bb595d3ec8d7def,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16063?focusedCommentId=17201519&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17201519,,,,,"20/Aug/20 19:54;jwest;Another concern I have with the existing approach is if users run upgrade sstables as part of their upgrade process instead of letting the node do it while online. We should ensure the check is there as well. ;;;","20/Aug/20 19:58;brandon.williams;I agree and would even say that running upgradesstables as part of the upgrade process is the normal case, not the exception.;;;","21/Aug/20 21:09;e.dimitrova;-I suggest we open a separate ticket and keep the work incremental?-
*EDIT:* I'll make it part of this patch, it will be just a simple check, preventing users from being able to do the drop of compact storage on non-upgraded nodes. ;;;","28/Aug/20 04:20;e.dimitrova;These are the four branches I worked on for this patch:

[C* 3.0|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-16063-3.0] | [C* 3.11|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-16063-3.11] | [trunk |https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-16063] | [DTests|https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-16063] 

4 things have been done:
 1) Check SSTables for latest version before dropping compact storage commits - [3.0|https://github.com/ekaterinadimitrova2/cassandra/commit/9ff9130808c751c9253bdecaa27c453bb5e7a71c] and [3.11|https://github.com/ekaterinadimitrova2/cassandra/commit/c0c43e90644b28b9b363fa7aba55adbf95dd5bd7]
 2) Allow skipping commit log replay was not failing on descriptor errors, this was corrected on all branches in order to support our strategy from the next point.
 [3.0|https://github.com/ekaterinadimitrova2/cassandra/commit/dd6207e6639576a8090ea5930f46c3cf2a4a5971] | [3.11|https://github.com/ekaterinadimitrova2/cassandra/commit/ad6f1f9d5106b07a001a847a63bb4b3068b0c599] | [trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/62affe6e9e5dc654ba729a97d136e16c37f392fd]
 3) Move compact storage validation earlier in startup process with detailed [instructions|https://github.com/ekaterinadimitrova2/cassandra/commit/c4835158f2815ab90bf6fdb907e95861984f2c72#diff-2220885f2835194f87cce0d27ac87c73R915] to the users [here|https://github.com/ekaterinadimitrova2/cassandra/commit/c4835158f2815ab90bf6fdb907e95861984f2c72]

With this change we no longer write out sstable data (only a CL segment).

4) Two upgrade test created [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commits/CASSANDRA-16063]
 Trunk CI run: 

[Java 8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/338/workflows/324e7e64-097e-4cb3-8521-d5c4eacaca9c] and [Java 11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/338/workflows/559d91f6-d80a-4eb9-8211-7220db8618a5] CI runs did not show anything disturbing. The failures presented look related to the latest timeouts and incremental repair failures which are tackled by the community this week. I will check tomorrow whether any of them requires a new ticket to be raised. 

[~slebresne] do you mind to make a review, please? Also, I need the upgrade tests to be pushed in Jenkins as they did not appear in CircleCI and I have some troubles to run them locally. Do you mind to help me with that too? (I have no access there)

_About the order of commits, I would say:_
 _1st the tests; Then 1) -> 2) -> 3)_;;;","28/Aug/20 13:16;slebresne;Happy to review (early next week most likely).

One question before checking the code though: you mentions that with this change, we still write a CL segment. Why is that and have you look at how we could avoid it? Because if we still write the CL on 4.0 before erroring out, I assume this CL gets replayed once the user restart the node on 3.0 (to run DROP COMPACT STORAGE)? If so, how are we 100% confident what is replayed will not create problems?;;;","31/Aug/20 10:04;slebresne;Ok, I hadn't understood the strategy you described, and in particular why skipping errors during commit replay was part of this.

 To rephrase, in case that helps other people as dense as me, the strategy implemented by the current patches is that if a users starts 4.0 with some compact tables, the server will not start but may (will?) write some CL segments. The user is then asked to restart on 3.x with a special startup flag that makes it so that if replaying those 4.0 CL segments fails, the server ignores those errors.

But as mentioned in my previous comment, this is not an ideal experience (it also makes it harder to convince oneself that it is safe). Ideally, users should not have to pass special flags when restarting 3.x. So back to my question above, what is technically preventing us to do that startup check before any CL segment is written?;;;","10/Sep/20 14:37;e.dimitrova;As we talked on Slack, the startup checks happen after the [CommitLog.instance.start()|#L214] (where a new empty segment is created) but before processing the old ones. So with this patch we had to get rid of the empty segment.

As suggested by you, I will double check today why as part of CASSANDRA-15295, [CommitLog.instance.start()|#L214] was set before the startup checks and not after them and try to work it out in favor of getting rid of the flag and guarantee downgrade is gonna be seamless for the user in all cases.

 ;;;","10/Sep/20 23:58;e.dimitrova;So the reason for the  [CommitLog.instance.start()|#L214] being set before the startup checks are
{code:java}
checkSystemKeyspaceState,
checkDatacenter,
checkRack,
checkLegacyAuthTables{code}
and the following dependency:
 * In order to read from the table, we have to first create a {{ColumnFamilyStore.}}
 * {{ColumnFamilyStore}}, in order to function ""normally"", has to create a memtable.
 * In order to create Memtable, we have to get a current position from commit log.;;;","24/Sep/20 13:27;e.dimitrova;Detailed code review showed the error I was getting as not being related. Empty segments should be skipped on startup.

I recreated my test environment. Managed to fix my issues with running the upgrade tests locally.

No flag is needed.

This is how the solution works now:

These are the four branches I worked on for this patch:

[C* 3.0|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-16063-3.0] | [C* 3.11|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-16063-3.11] | [trunk |https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-16063]| [DTests|https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-16063] 
 1) Check SSTables for latest version before dropping compact storage commits - [3.0|https://github.com/ekaterinadimitrova2/cassandra/commit/9ff9130808c751c9253bdecaa27c453bb5e7a71c] and [3.11|https://github.com/ekaterinadimitrova2/cassandra/commit/c0c43e90644b28b9b363fa7aba55adbf95dd5bd7]
 2) Move compact storage [validation |https://github.com/ekaterinadimitrova2/cassandra/commit/1a8b3ea2823d8424e2018c686fb2d6e5d67270f7#diff-a5df240149285ae528cdd3c41aa59360R104] earlier in the startup process.

4) Two new upgrade tests created and an old one was fixed [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commits/CASSANDRA-16063]

Trunk CI run: 

[Java 8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/349/workflows/04bccc52-4e3e-41e2-9c04-93501ea4ce77] and [Java 11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/349/workflows/04bccc52-4e3e-41e2-9c04-93501ea4ce77] CI runs did not show any new issues introduced.  The two failing tests already have opened corresponding tickets:
 _test_tracing_does_not_interfere_with_digest_calculation - cql_tracing_test.TestCqlTracing - CASSANDRA-14157_
 _testMessagePurging - org.apache.cassandra.net.ConnectionTest - CASSANDRA-15958_

Attached is the log of the upgrade tests successfully passing 

[~slebresne] do you have time to review it again? Or maybe [~adelapena] can help here?

 ;;;","25/Sep/20 17:13;adelapena;[~e.dimitrova] I'll be happy to take a look next week.;;;","29/Sep/20 11:15;adelapena;[~e.dimitrova] are there PRs for those branches? I only see [this one|https://github.com/ekaterinadimitrova2/cassandra/pull/54] for trunk.;;;","29/Sep/20 12:09;e.dimitrova;Hi [~adelapena]

I just rebased all branches.

PRs as follow:

[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/54]| [3.0|https://github.com/ekaterinadimitrova2/cassandra/pull/56] | [dtetsts|https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/4]
 No PR for 3.11 as it is a merge from 3.0;;;","29/Sep/20 14:24;slebresne;I don't the time to test the patch thoroughly right now, but from a code review point of view, this lgtm.;;;","01/Oct/20 15:41;adelapena;I have left a few very minor suggestions on the PRs. The only thing that worries me is that, if I'm understanding it correctly, the verification of the SSTables before dropping `COMPACT STORAGE` at the cluster-level is done only in the local node, while there could be other nodes with old sstable versions.;;;","07/Oct/20 13:59;e.dimitrova;Thanks for the review [~adelapena] and [~slebresne]

[~adelapena]'s point is correct. I was checking yesterday for a way to collect the global information but I didn't find an implemented already way. Also, additional test was added to handle this topic.

From what we talked with [~adelapena] and other engineers, probably our best bet will be to use Gossip?

Before I start any implementation, I decided first to update the ticket and confirm the approach.

[~adelapena] , [~slebresne] , [~marcuse], [~ifesdjeen], any thoughts here? Or anyone else? 

Maybe [~brandon.williams] or [~jwest] had some idea as they raised the upgrade of SSTables topic as part of this ticket :) 

To summarize, in order to enforce users to upgrade their SSTables before using ALTER DROP COMPACT STORAGE, we need to be able to check globally which nodes we need to update. It seems there is no current implementation to collect this knowledge. So Gossip?;;;","07/Oct/20 14:15;brandon.williams;Gossip is a really big hammer for this nail, and in general not a good fit.  Also, how do we handle nodes that are down?  Since a schema change is two-pronged, first trying an rpc call to every machine, and then using gossip as a fallback, we should probably do the same here: make an rpc call to every node to determine if the change is ok, and if any node is not up or the check doesn't succeed, everything fails.  If the operator wants to really drop these, they need to satisfy the same conditions as say, truncate, and have all nodes available.;;;","07/Oct/20 14:38;slebresne;bq. Before I start any implementation, I decided first to update the ticket and confirm the approach.

CASSANDRA-15897 is open to implement _exactly_ that problem. I suggest we commit the fix on this ticket as is and leave the issue of cluster-wide detection to CASSANDRA-15897. We did discuss options there some time ago, and kind of settled on Gossip-based at the time, so [~brandon.williams] is not going to be happy. I do have an almost ready branch for that Gossip approach btw (which, I won't deny, is a bit involved), and while I don't have time to get this to the finish line right now, I can share my branch (tomorrow most likely) and you can decide whether to use that or not.

bq. how do we handle nodes that are down?

Fwiw, my existing branch for CASSANDRA-15897 make nodes share the sstables version they have in use. If a node is down, other nodes simply rely on the last information they got from that node, which should work pretty well in practice.;;;","07/Oct/20 14:52;e.dimitrova;[~slebresne], thanks a lot for reminding me of that one! Looks like I even commented on it but as I looked at that more than a month ago I totally forgot about it and that it will handle this... :(

But on the bright side, these are good news that this is already on its way. :) 

I will rebase and wrap up the code here for commit and submit a final CI run.

Thanks both [~brandon.williams] and [~slebresne]!;;;","07/Oct/20 14:56;e.dimitrova;[~slebresne], please, ping me on the other ticket when you push the branch you mentioned and I will be happy to take a look and finish whatever is left there.;;;","07/Oct/20 15:16;brandon.williams;bq. Gossip-based at the time, so Brandon Williams is not going to be happy

It can definitely work, so that's fine.  You're just going to leave a scar in AppicationState to forever remind of us of your transgression. :)

Really though, it's fine, it's certainly a big enough hammer to get the job done.;;;","08/Oct/20 03:54;e.dimitrova;Branches rebased and wrapped for final review.

PRs as follow:

[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/54]| [3.0|https://github.com/ekaterinadimitrova2/cassandra/pull/56] | [dtetsts|https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/4]
No PR for 3.11 as it is a merge from 3.0

CI:

[JAVA8 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/388/workflows/c8714c4c-7b68-4d3a-a8b9-e0708d69b13b] | [JAVA 11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/388/workflows/885828f4-9f47-4f3e-91d0-65c110c0db7e]

_testHaveVersion3Nodes - org.apache.cassandra.gms.GossiperTest_ - CASSANDRA-16148

_test_alter_rf_and_run_read_repair - read_repair_test.TestReadRepair -_ CASSANDRA-16148

_test_atomic_writes[blocking] - read_repair_test.TestReadRepairGuarantees -_  CASSANDRA-16148

test_compression_cql_options - compression_test.TestCompression - not related but have to find/file a ticket; I will do it tomorrow

test_multiple_ranges_repair - repair_tests.repair_test.TestRepair - not related but have to find/file a ticket; I will do it tomorrow

corruptionCausesFailure - org.apache.cassandra.transport.frame.checksum.ChecksummingTransformerTest -  CASSANDRA-15313;;;","08/Oct/20 13:49;adelapena;Looks good to me, +1. I have just left a couple of trivial suggestions about duplicated CHANGES.txt entries and docstring properties. As for the specific test for the problem discussed above, since we are not going to wait for CASSANDRA-15897, I would slightly prefer to leave it annotated with {{@pytest.mark.skip(reason='awaiting CASSANDRA-15897')}} instead of just removing it, but we can easily re-add it in 15897.;;;","08/Oct/20 23:30;e.dimitrova;Thanks [~adelapena]

I believe all your comments were addressed.

I only didn't return the test as I noticed that [~slebresne] created In-jvm test as part of his work for  CASSANDRA-15897.  

My suggestion is to not add it back for now and continue that work in the other ticket. I am almost 99% sure we will utilize his test at the end.;;;","09/Oct/20 14:10;adelapena;{quote}My suggestion is to not add it back for now and continue that work in the other ticket. I am almost 99% sure we will utilize his test at the end.
{quote}
Fine with me.

Running a final round of CI upgrade tests before commit:
||[3.0|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest-upgrade/6/]||[3.11|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest-upgrade/7/]||[trunk|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest-upgrade/8/]||;;;","12/Oct/20 14:41;adelapena;[~e.dimitrova] there are a lot of failures the CI run of upgrade tests but I'd say they are not related, do you agree? Are we ready to commit?;;;","12/Oct/20 22:29;e.dimitrova;Thank you [~adelapena]

Indeed, these are the failures we already know about. I don't see the compact storage related tests in the list of failures. Also, I ran all tests several times locally. I believe the patch is ready for commit. ;;;","13/Oct/20 15:48;adelapena;Committed to cassandra-3.0 as [0700dfa0bc26d0758df898101bb595d3ec8d7def|https://github.com/apache/cassandra/commit/0700dfa0bc26d0758df898101bb595d3ec8d7def] and merged up to [cassandra-3.11|https://github.com/apache/cassandra/commit/45982f5617565f31e7d634ca9d1d2b6b55c3b775] and [trunk|https://github.com/apache/cassandra/commit/d890b7a5f14108bf60fbd52f94eefb53aaab1e18]. 

Dtests committed as [1c8e5bcd5040af279205cd69bb5276ed854540e6|https://github.com/apache/cassandra-dtest/commit/1c8e5bcd5040af279205cd69bb5276ed854540e6].;;;",,,,,,,,,,,,,,,,,,,,
Avoid NPE in getCompactionInfo,CASSANDRA-16062,13323686,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,20/Aug/20 06:50,21/Dec/20 09:31,13/Jul/23 08:39,24/Aug/20 11:16,4.0,4.0-beta2,,,,Local/Compaction,,,,0,,,,We currently initialize {{sstables}} after calling {{beginCompaction(this)}} in the {{CompactionIterator}} constructor which creates a window where we can get NPE creating the {{CompactionInfo}} for cancelling compactions,,jmeredithco,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 24 11:16:33 UTC 2020,,,,,,,All,,,,,,"0|z0hxt4:",9223372036854775807,,,,brandon.williams,jmeredithco,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/219eb86fd22805d419667c791af4419cd2b3d00a,,,,,,,,,cci run,,,,,"20/Aug/20 06:54;marcuse;https://app.circleci.com/pipelines/github/krummas/cassandra/482/workflows/86158fb6-34aa-4e8a-9d28-e4fc440421b0
https://github.com/krummas/cassandra/commits/marcuse/16062;;;","20/Aug/20 16:03;brandon.williams;+1;;;","21/Aug/20 17:51;jmeredithco;+1;;;","24/Aug/20 11:16;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StorageService exposes ensureTraceKeyspace that is used by jvm-dtest, but it should be removed and use MigrationManager.evolveSystemKeyspace instead",CASSANDRA-16055,13323121,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,dcapwell,dcapwell,17/Aug/20 22:50,31/Oct/22 17:46,13/Jul/23 08:39,31/Oct/22 17:46,,,,,,Test/dtest/java,,,,0,,,,"Jvm dtest uses StorageService.ensureTraceKeyspace to register the tracing keyspace, but doesn’t register the other distributed key spaces.  This method should not be used by dtest and instead should use MigrationManager.evolveSystemKeyspace as it registers all keyspaces",,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16095,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 31 17:46:15 UTC 2022,,,,,,,All,,,,,,"0|z0hubk:",9223372036854775807,,,,,,,,Low,,,,,,,,,,,,,,,,,,,"18/Aug/20 22:06;dcapwell;removing myself as I don't have the time.;;;","31/Oct/22 17:46;dcapwell;Looks like this was fixed in CASSANDRA-16095...;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cqlsh COPY functions broken in Python 3.8 on Mac,CASSANDRA-16053,13323097,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,aholmber,aholmber,17/Aug/20 19:09,20/Aug/20 21:01,13/Jul/23 08:39,20/Aug/20 20:05,4.0,4.0-beta2,,,,Tool/cqlsh,,,,0,,,,"{noformat}
aholmberg-rmbp16:cassandra adamholmberg$ pyenv shell
3.8.2
aholmberg-rmbp16:cassandra adamholmberg$ bin/cqlsh --debug
Using CQL driver: <module 'cassandra' from '/Users/adamholmberg/code/cassandra/bin/../lib/cassandra-driver-internal-only-3.23.0.post0-1a184b99.zip/cassandra-driver-3.23.0.post0-1a184b99/cassandra/__init__.py'>
Using connect timeout: 5 seconds
Using 'utf-8' encoding
Using ssl: False
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 4.0-beta2-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]
Use HELP for help.
cqlsh> copy test.testcopyto to 'asdf';
Detected 12 core(s)
Using 11 child processes

Starting copy of test.testcopyto with columns [a, b, c, d].
Traceback (most recent call last):
  File ""/Users/adamholmberg/code/cassandra/bin/cqlsh.py"", line 937, in onecmd
    self.handle_statement(st, statementtext)
  File ""/Users/adamholmberg/code/cassandra/bin/cqlsh.py"", line 974, in handle_statement
    return custom_handler(parsed)
  File ""/Users/adamholmberg/code/cassandra/bin/cqlsh.py"", line 1563, in do_copy
    task.run()
  File ""/Users/adamholmberg/code/cassandra/bin/../pylib/cqlshlib/copyutil.py"", line 669, in run
    self.start_processes()
  File ""/Users/adamholmberg/code/cassandra/bin/../pylib/cqlshlib/copyutil.py"", line 471, in start_processes
    process.start()
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/process.py"", line 121, in start
    self._popen = self._Popen(self)
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/context.py"", line 224, in _Popen
    return _default_context.get_context().Process._Popen(process_obj)
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/context.py"", line 283, in _Popen
    return Popen(process_obj)
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/popen_spawn_posix.py"", line 32, in __init__
    super().__init__(process_obj)
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/popen_fork.py"", line 19, in __init__
    self._launch(process_obj)
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/popen_spawn_posix.py"", line 47, in _launch
    reduction.dump(process_obj, fp)
  File ""/Users/adamholmberg/.pyenv/versions/3.8.2/lib/python3.8/multiprocessing/reduction.py"", line 60, in dump
    ForkingPickler(file, protocol).dump(obj)
TypeError: cannot pickle '_thread.lock' object
cqlsh>
{noformat}


multiprocessing uses a different default start method on Mac, and pickling fails trying to serialize the Cluster object.
https://github.com/python/cpython/blob/db098bc1f05bd0773943e59f83489f05f28dedf8/Lib/multiprocessing/context.py#L313-L318
https://bugs.python.org/issue33725
",,aholmber,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-11749,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Aug 20 20:05:33 UTC 2020,,,,,,,,,,,,,"0|z0hu68:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/0e53379ec945e07c38aed03048ba8f76d42bdd42,,,,,,,,,"I ran the repro script from the previous ticket 500+ times, restarting C* (which was said to make it happen more) each time.",,,,,"17/Aug/20 20:25;aholmber;CASSANDRA-11749 introduced passing the cluster to clean up sockets in forked child processes. That patch assumed that forking would be used everywhere but Windows.

Instead of making the parameter passing logic more complex to account for platform and runtime variations, I suggest we rely on the underlying driver fix which was later introduced, and stop trying to pass the Cluster.
[PYTHON-577|https://datastax-oss.atlassian.net/browse/PYTHON-577]

[patch|https://github.com/apache/cassandra/compare/trunk...aholmberg:CASSANDRA-16053?expand=1]

I've run the repro script from CASSANDRA-11749 several hundred times. Stefania indicated that it would previously reproduce within around a half dozen iterations.;;;","17/Aug/20 21:53;aholmber;[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16053]
Everything failed so far is known to be flaky.;;;","20/Aug/20 19:24;e.dimitrova;I am not a driver person but from everything I read in the referenced links around python and drivers, the patch looks good to me. 
No new CI failures, I read you iterated the reproduction test quite some time and it doesn't fail anymore.
+1 from me, you need a committer to check it too and possibly commit.;;;","20/Aug/20 20:05;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle difference in timestamp precision between java8 and java11 in LogFIle.java,CASSANDRA-16050,13322768,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,14/Aug/20 15:02,03/Jan/21 17:02,13/Jul/23 08:39,19/Aug/20 22:28,3.0.22,3.11.8,4.0,4.0-beta2,,Local/SSTable,Local/Startup and Shutdown,,,0,,,,"https://bugs.openjdk.java.net/browse/JDK-8177809 made File.lastModified include milliseconds while java8 always has them as 000.

This causes problems in LogFile.java where we compare the timestamps with what we have in the logfile: [LogFile.java|https://github.com/apache/cassandra/blob/ffc8e407e087e942c4e5c40605743fe3b32d8fd5/src/java/org/apache/cassandra/db/lifecycle/LogFile.java#L234]. This means that we can throw errors when changing between java11 and 8",,dcapwell,e.dimitrova,jeromatron,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 19 22:28:53 UTC 2020,,,,,,,All,,,,,,"0|z0hs54:",9223372036854775807,,,,dcapwell,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/c89f3df91139deee6fe78cc73a2ff0514c8af721,,,,,,,,,"new test, cci runs",,,,,"17/Aug/20 07:34;marcuse;| [3.0|https://github.com/krummas/cassandra/commits/marcuse/16050] | [unit tests|https://app.circleci.com/pipelines/github/krummas/cassandra/475/workflows/acc3b0a3-71b9-4816-9b10-0906d9d8c364/jobs/3514] | [jvm dtests|https://app.circleci.com/pipelines/github/krummas/cassandra/475/workflows/acc3b0a3-71b9-4816-9b10-0906d9d8c364/jobs/3515] | [novnodes|https://app.circleci.com/pipelines/github/krummas/cassandra/475/workflows/acc3b0a3-71b9-4816-9b10-0906d9d8c364/jobs/3520] | [vnodes|https://app.circleci.com/pipelines/github/krummas/cassandra/475/workflows/acc3b0a3-71b9-4816-9b10-0906d9d8c364/jobs/3521] |
| [3.11|https://github.com/krummas/cassandra/commits/marcuse/16050-3.11] | [unit tests|https://app.circleci.com/pipelines/github/krummas/cassandra/473/workflows/a2ff42d2-6a01-410f-9b45-78ad51615e2f/jobs/3503] | [jvm dtests|https://app.circleci.com/pipelines/github/krummas/cassandra/473/workflows/a2ff42d2-6a01-410f-9b45-78ad51615e2f/jobs/3502] | [novodes |https://app.circleci.com/pipelines/github/krummas/cassandra/473/workflows/a2ff42d2-6a01-410f-9b45-78ad51615e2f/jobs/3516] | [vnodes|https://app.circleci.com/pipelines/github/krummas/cassandra/473/workflows/a2ff42d2-6a01-410f-9b45-78ad51615e2f/jobs/3517]
| [trunk|https://github.com/krummas/cassandra/commits/marcuse/16050-trunk] | [unit tests|https://app.circleci.com/pipelines/github/krummas/cassandra/476/workflows/d1da56f3-ddde-48fb-b133-0a2a61133b63/jobs/3510] | [jvm dtests|https://app.circleci.com/pipelines/github/krummas/cassandra/476/workflows/d1da56f3-ddde-48fb-b133-0a2a61133b63/jobs/3509] | [novnodes|https://app.circleci.com/pipelines/github/krummas/cassandra/476/workflows/d1da56f3-ddde-48fb-b133-0a2a61133b63/jobs/3519] | [vnodes|https://app.circleci.com/pipelines/github/krummas/cassandra/476/workflows/d1da56f3-ddde-48fb-b133-0a2a61133b63/jobs/3518] |;;;","19/Aug/20 18:13;dcapwell;+1;;;","19/Aug/20 22:28;dcapwell;CI results:

3.0: https://app.circleci.com/pipelines/github/dcapwell/cassandra/410/workflows/4cb109bf-d829-42ab-8f0e-b91c7c7969c4
3.11: https://app.circleci.com/pipelines/github/dcapwell/cassandra/411/workflows/beb8e3b0-6102-4f7f-9bbb-743e99cef325
trunk: https://app.circleci.com/pipelines/github/dcapwell/cassandra/412/workflows/3df9f8d3-512c-44a7-bfe2-5842c79542d0

There were failed tests, but all known flaky.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cassandra.distributed.test.ReadRepairTest#movingTokenReadRepairTest passes because the message drop filters are not dropping the messages,CASSANDRA-16049,13322634,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,dcapwell,dcapwell,14/Aug/20 00:23,03/Jan/21 17:03,13/Jul/23 08:39,02/Oct/20 08:36,4.0,4.0-beta3,,,,Consistency/Repair,Test/dtest/java,,,0,,,,"The test tries to block messages from node 4 to 3 but used verb ordinal rather than id; this causes the verbs to sent to node 3 and allow all replies to happen.

If you fix the test to use id (and actually filter), then the test fails

Patch to show the issue

{code}
diff --git a/test/distributed/org/apache/cassandra/distributed/test/ReadRepairTest.java b/test/distributed/org/apache/cassandra/distributed/test/ReadRepairTest.java
index f0c82b85e1..55d2e8f303 100644
--- a/test/distributed/org/apache/cassandra/distributed/test/ReadRepairTest.java
+++ b/test/distributed/org/apache/cassandra/distributed/test/ReadRepairTest.java
@@ -30,14 +30,14 @@ import org.apache.cassandra.dht.Token;
import org.apache.cassandra.distributed.Cluster;
import org.apache.cassandra.distributed.api.ConsistencyLevel;
import org.apache.cassandra.distributed.api.ICluster;
-import org.apache.cassandra.distributed.shared.NetworkTopology;
import org.apache.cassandra.locator.InetAddressAndPort;
import org.apache.cassandra.service.PendingRangeCalculatorService;
import org.apache.cassandra.service.StorageService;

+import static org.apache.cassandra.distributed.shared.AssertUtils.assertRows;
+import static org.apache.cassandra.distributed.shared.AssertUtils.row;
import static org.apache.cassandra.net.Verb.READ_REPAIR_REQ;
import static org.apache.cassandra.net.Verb.READ_REQ;
-import static org.apache.cassandra.distributed.shared.AssertUtils.*;

public class ReadRepairTest extends TestBaseImpl
{
@@ -115,8 +115,8 @@ public class ReadRepairTest extends TestBaseImpl

            // prevent #4 from reading or writing to #3, so our QUORUM must contain #2 and #4
            // since #1 is taking over the range, this means any read-repair must make it to #1 as well
-            cluster.filters().verbs(READ_REQ.ordinal()).from(4).to(3).drop();
-            cluster.filters().verbs(READ_REPAIR_REQ.ordinal()).from(4).to(3).drop();
+            cluster.filters().verbs(READ_REQ.id).from(4).to(3).drop();
+            cluster.filters().verbs(READ_REPAIR_REQ.id).from(4).to(3).drop();
            assertRows(cluster.coordinator(4).execute(""SELECT * FROM "" + KEYSPACE + "".tbl WHERE pk = ?"",
                                                      ConsistencyLevel.ALL, i),
                       row(i, 1, 1));
{code}

Exception

{code}
org.apache.cassandra.exceptions.ReadTimeoutException: Operation timed out - received only 2 responses.

	at org.apache.cassandra.service.reads.ReadCallback.awaitResults(ReadCallback.java:120)
	at org.apache.cassandra.service.reads.AbstractReadExecutor.awaitResponses(AbstractReadExecutor.java:373)
	at org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:1823)
	at org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1713)
	at org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1630)
	at org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1123)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:294)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:246)
	at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:88)
	at org.apache.cassandra.distributed.impl.Coordinator.executeInternal(Coordinator.java:100)
	at org.apache.cassandra.distributed.impl.Coordinator.lambda$executeWithResult$0(Coordinator.java:62)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}",,dcapwell,e.dimitrova,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 02 08:36:02 UTC 2020,,,,,,,All,,,,,,"0|z0hrbc:",9223372036854775807,,,,e.dimitrova,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/f866753b058fae2d73089710acd5628b7cff70c7,,,,,,,,,"Test-only fix, clean run of unit tests should be sufficient.",,,,,"14/Aug/20 00:30;dcapwell;The test runs a 4 node cluster, blocks traffic from node 4 -> 3, and marks node 2 as leaving the cluster.  The test validates that a CL.ALL read on node 4 will pass and update node 1 with correct data.

At CL.ALL nodes 2, 3, and 4 are involved with the read and the test timeout because node 3 doesn't reply.  The test documentation says that node 1 is supposed to take on node 2's range, so the test assumes node 1 will be used in the query (it is not).

I am not sure if this is a test failure or a correctness issue.  The test clearly documents that the query is supposed to hit node 1 since node 2 is leaving but it doesn't; so is this a correctness issue with reading?;;;","14/Sep/20 19:35;e.dimitrova;Hey [~dcapwell], do you plan on working on this one? ;;;","14/Sep/20 21:15;dcapwell;don't have time right now but does look like an issue with membership changes, might be best to look into it now that CASSANDRA-14801 is committed as that feels related.

cc [~samt]
cc [~adelapena] as he is working on CASSANDRA-15977;;;","15/Sep/20 12:52;samt;The issue is that the query which is intended to trigger the read repair is done at {{CL.ALL}}. Since one of the replicas is unresponsive, this query simply times out. This looks to have just been an oversight in the original patch and changing to read at {{CL.QUORUM}} fixes it.


||Branch||JDK8||JDK11||
|[16049-trunk|https://github.com/beobal/cassandra/tree/16049-trunk]|[utests|https://app.circleci.com/pipelines/github/beobal/cassandra/92/workflows/431fc8ac-07d8-4f8e-a812-a5ecb896bacd/jobs/1888]|[utests|https://app.circleci.com/pipelines/github/beobal/cassandra/92/workflows/9e34b845-c2e4-4ccb-870d-b62ec6a54316/jobs/1891]|;;;","17/Sep/20 03:52;e.dimitrova;+1 from me. Thank you both [~dcapwell] and [~samt];;;","02/Oct/20 08:36;samt;Thanks, committed to trunk in {{f866753b058fae2d73089710acd5628b7cff70c7}}, apologies for the delay.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add flag to disable chunk cache and disable by default,CASSANDRA-16036,13321440,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,07/Aug/20 05:12,03/Jan/21 17:02,13/Jul/23 08:39,30/Sep/20 00:08,4.0,4.0-beta3,,,,Legacy/Local Write-Read Paths,,,,0,,,,"Chunk cache is enabled by default and doesn’t have a flag to disable without impacting networking.  In performance testing 4.0 against 3.0 I found that reads were slower in 4.0 and after profiling found that the ChunkCache was partially to blame; after disabling the chunk cache, read performance had improved.

{code}
40_w_cc-selects.hdr
#[Mean    =     11.50063, StdDeviation   =     13.44014]
#[Max     =    482.41254, Total count    =       316477]
#[Buckets =           25, SubBuckets     =       262144]

40_wo_cc-selects.hdr
#[Mean    =      9.82115, StdDeviation   =     10.14270]
#[Max     =    522.36493, Total count    =       317444]
#[Buckets =           25, SubBuckets     =       262144]
{code}

",,dcapwell,e.dimitrova,jasonstack,jeromatron,jmeredithco,maedhroz,saprykin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15229,,,,CASSANDRA-16078,CASSANDRA-16158,,,,,,,,"17/Sep/20 17:52;jasonstack;15229_128mb.png;https://issues.apache.org/jira/secure/attachment/13011706/15229_128mb.png","17/Sep/20 17:52;jasonstack;16036_128mb.png;https://issues.apache.org/jira/secure/attachment/13011707/16036_128mb.png","13/Aug/20 16:16;dcapwell;async-profile.collapsed.svg;https://issues.apache.org/jira/secure/attachment/13009804/async-profile.collapsed.svg","13/Aug/20 01:21;dcapwell;clustering-in-clause_latency_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009749/clustering-in-clause_latency_selects_baseline.png","13/Aug/20 16:11;dcapwell;clustering-in-clause_latency_selects_baseline_attempt3.png;https://issues.apache.org/jira/secure/attachment/13009803/clustering-in-clause_latency_selects_baseline_attempt3.png","13/Aug/20 01:21;dcapwell;clustering-in-clause_latency_under90_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009748/clustering-in-clause_latency_under90_selects_baseline.png","13/Aug/20 16:11;dcapwell;clustering-in-clause_latency_under90_selects_baseline_attempt3.png;https://issues.apache.org/jira/secure/attachment/13009802/clustering-in-clause_latency_under90_selects_baseline_attempt3.png","13/Aug/20 01:21;dcapwell;clustering-slice_latency_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009751/clustering-slice_latency_selects_baseline.png","13/Aug/20 01:21;dcapwell;clustering-slice_latency_under90_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009750/clustering-slice_latency_under90_selects_baseline.png","13/Aug/20 01:21;dcapwell;medium-blobs_latency_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009747/medium-blobs_latency_selects_baseline.png","13/Aug/20 01:21;dcapwell;medium-blobs_latency_under90_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009746/medium-blobs_latency_under90_selects_baseline.png","13/Aug/20 01:21;dcapwell;partition-single-row-read_latency_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009745/partition-single-row-read_latency_selects_baseline.png","13/Aug/20 01:21;dcapwell;partition-single-row-read_latency_under90_selects_baseline.png;https://issues.apache.org/jira/secure/attachment/13009744/partition-single-row-read_latency_under90_selects_baseline.png",,13.0,dcapwell,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Low Hanging Fruit,Performance Regression Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 29 22:30:01 UTC 2020,,,,,,,All,,,,,,"0|z0hjzk:",9223372036854775807,,,,jasonstack,jmeredithco,,,Normal,,3.11.0,,,https://github.com/apache/cassandra/commit/d4f501892d882cb1bf62529f0e72cf7d9c61e323,,,,,,,,,CI and performance tests,,,,,"07/Aug/20 05:19;dcapwell;The test performed was 11% read of slices on a clustering key, so 89% write; workload from prod.

What I saw in CPU profiles was that the chunk cache was a decent part of compaction and the read path, but not in a positive way.  With compaction also populating the cache, it caused a constant churn from the cache, but all reads had to pay the cost for it.;;;","07/Aug/20 16:47;dcapwell;Rerunning the test with chunk cache enabled, seeing the following for hits/misses

{code}
OneMinuteRate

Hits
392.07075331154306
Misses
10004.73634589861
{code}

So a 3.8% cache hit rate, this makes sense to me since compaction keeps populating the cache with files that are about to be deleted;;;","07/Aug/20 16:48;dcapwell;CI is Yellow; known failing tests only.;;;","07/Aug/20 20:12;dcapwell;[~jasonstack] was hoping I could get your feedback on this patch?  From my testing, if there are writes going on the cluster the cache hit ratio tanks and chunk cache gets more costly than having it disabled; most workloads I see are write heavy, hence the default I went with.;;;","08/Aug/20 00:17;jmeredithco;I took a first pass through.  I definitely think we should be able to disable the {{ChunkCache}} without impacting the \{{BufferPool}} and seem like they should be two separate configuration entries to me.

The code changes look good too. 

The only thing that needs more discussion is the change to make the ChunkCache be disabled by default. A single benchmark isn't enough evidence to convince me. 

We could either leave the default as enabled (in which case I think it's already good to go once CI is happy), or if we are able to collect a few more benchmarks (read-heavy, write-heavy, compaction-heavy, hot-key) to justify disabling then we should do so.;;;","08/Aug/20 02:38;dcapwell;Fair point.  I am spinning up two clusters, with and without CC, and can run a few benchmarks Monday.

The current test used was a write heavy clustering key test with slices on clustering, but mostly looked at the selects for this patch.  Given the logic I see the next test I will run is a 100% read test with pre-populated data.;;;","10/Aug/20 23:15;dcapwell;Attached test which fetches rows using IN clause, this test is 11% reads as well.  For the graph oss-pushbutton-62-selects is a cluster without this patch, and oss-pushbutton-63-selects is a cluster with this patch and the default of off.

What I see is that up to 99% they are roughly equal, and that over 99% disabling chunk cache is more stable.;;;","11/Aug/20 17:33;dcapwell;Added a read only workload; select = with chunk cache, select-2 is without chunk cache.  What I see is up to 99% they are equal, after with chunk cache has an advantage, then at 99.99 without chunk cache has the advantage.

{code}
selects.hdr
#[Mean    =     49.88099, StdDeviation   =     37.74398]
#[Max     =   1826.77504, Total count    =      2880010]
#[Buckets =           25, SubBuckets     =       262144]
selects-2.hdr
#[Mean    =     51.66994, StdDeviation   =     44.94572]
#[Max     =   1810.85798, Total count    =      2880036]
#[Buckets =           25, SubBuckets     =       262144]
{code}

The mean has a diff of about 1ms.;;;","11/Aug/20 17:34;dcapwell;In summary of what I see

1) if cluster has no writes and only does reads, there is a small advantage 
2) if the cluster is doing compactions, there are no advantages;;;","12/Aug/20 20:04;dcapwell;Will redo the tests since just saw that the runners were in a different DC than the cluster.;;;","13/Aug/20 01:28;dcapwell;Here are the results rerunning again (didn't populate data before test, relied on the same clusters)

cluster 62 = with chunk cache
cluster 63 = without chunk cache

clustering slice:
read rate: 11%
!https://issues.apache.org/jira/secure/attachment/13009751/clustering-slice_latency_selects_baseline.png!
!https://issues.apache.org/jira/secure/attachment/13009750/clustering-slice_latency_under90_selects_baseline.png!

clustering in-clause:
read rate: 11%
!https://issues.apache.org/jira/secure/attachment/13009749/clustering-in-clause_latency_selects_baseline.png!
!https://issues.apache.org/jira/secure/attachment/13009748/clustering-in-clause_latency_under90_selects_baseline.png!

Attempt 3
!https://issues.apache.org/jira/secure/attachment/13009803/clustering-in-clause_latency_selects_baseline_attempt3.png!
!https://issues.apache.org/jira/secure/attachment/13009802/clustering-in-clause_latency_under90_selects_baseline_attempt3.png!

medium blob:
Read rate: 100%
!https://issues.apache.org/jira/secure/attachment/13009747/medium-blobs_latency_selects_baseline.png!
!https://issues.apache.org/jira/secure/attachment/13009746/medium-blobs_latency_under90_selects_baseline.png!


Partition single row read
Read rate: 100%
!https://issues.apache.org/jira/secure/attachment/13009745/partition-single-row-read_latency_selects_baseline.png!
!https://issues.apache.org/jira/secure/attachment/13009744/partition-single-row-read_latency_under90_selects_baseline.png!;;;","13/Aug/20 01:49;dcapwell;Here are the results I am seeing (baseline is 3.0); all read only tests are expected to have zero compaction going on, the cluster only ran the specific workload at the time, multi workload traffic has not happened.

* Point reads show roughly equal performance
* Scans around 99.5% we see cache doing better but under that non cache is better
* In clause shows improvement with cache

From past testing, anything greater than 99.99% is too noisy to really look at, so ignoring that when making my statements.  Given this the only test out of the 4 that had any benefit was the in-clause test (will run a few more times to see how stable), and the scan tests were generally regressed.  The tests which were designed to highlight this feature (medium blob, and Partition single row read) showed no difference with or without the cache.

In my experience, in clause is rather rare but scans are much more common (partition read, read range by clustering, read latest N rows, etc.).  If compaction is constantly running (unlikely in these tests, much more likely in production) then the cache is invalidated very frequently which should yield worse results than what these tests show (homogeneous query pattern vs heterogeneous query pattern); given this I am still in favor of the default of false.

[~jmeredithco] can you review again?  [~jasonstack] can I get your feedback as well?;;;","13/Aug/20 04:22;jasonstack;[~dcapwell] sorry, won't be able to look deeper into chunk cache this week. But based on the comparison between 3.0 baseline, 4.0 chunk cache, and 4.0 no chunk cache, disabling chunk-cache didn't bridge the gap between 3.0 and 4.0. I wonder if something else is affecting the perf instead of chunk cache. do you have JFR?;;;","13/Aug/20 16:17;dcapwell;bq. I wonder if something else is affecting the perf instead of chunk cache.

Yeah, it looks like more is going on, so have to look closer.  I was curious about networking since I knew two different JIRA were going on with regard to networking perf, since the two tests which regressed returns more data, thought it could be some how related.

bq. do you have JFR?

JFR no, but I did have a flame graph from the first attempt

!https://issues.apache.org/jira/secure/attachment/13009804/async-profile.collapsed.svg!

;;;","19/Aug/20 22:18;jmeredithco;Thanks for doing the extra benchmarking.  Results seem to be fairly close, and to get the best out of things users would need to optimize and benchmark anyway to work out how to use their memory budget.

+1 from me, with a minor nit that it would be good to update {{conf/cassandra.yaml}} with a commented out entry and some description of what the setting controls.;;;","27/Aug/20 18:33;dcapwell;Thanks jon, will update conf/cassandra.yaml.

bq. work out how to use their memory budget.

Yeah, this is why I still lean to this default.  I have not found a use case which benefits from chunk cache and find some use cases which are roughly equal with and without, so favor disabling in these cases to save memory (a much limited resource in production).;;;","27/Aug/20 18:39;dcapwell;[~jmeredithco] pushed changes to the yaml to document this flag.;;;","15/Sep/20 19:04;dcapwell;[~jasonstack] would be great to get your feedback.  This patch does not fix the perf regression, so hoping we can defer that to CASSANDRA-16078.  This mostly just disables as it doesn't appear I can find a use case which benefits from the feature, so feel that we should be explicit about having the feature on rather than default to it.;;;","16/Sep/20 17:00;jasonstack;I wonder if the chunk-cache regression is related to CASSANDRA-15229, let me run some tests from CASSANDRA-15229.

 

Also, I am not a committer, you may need to find one more...;;;","18/Sep/20 07:12;jasonstack;!16036_128mb.png!

 

Above is write perf in mixed-read-write test using 128mb cache between 16036-disable-chunk-cache and its base line. Disabling chunk cache significantly improves latency.  (read perf is similar to write perf)

 

 

!15229_128mb.png!

Above is write perf in mixed-read-write test using 128mb cache between 15229-disable-chunk-cache and 15229-improved-buffer-pool. Disabling chunk cache show some improvement on latency.  (read perf is similar to write perf);;;","18/Sep/20 07:15;jasonstack;+1 to disable chunk cache until we get CASSANDRA-15229 and other improvements (eg. fixed buffer size) into chunk cache.;;;","18/Sep/20 17:18;dcapwell;Awesome, thanks for the feedback.;;;","29/Sep/20 18:58;dcapwell;Now that [~jasonstack] is a committer (congrats!) I will move forward to merge this later today (after rerunning CI on it).;;;","29/Sep/20 21:10;dcapwell;CI results (pending):

Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16036-trunk-B4951B6C-9967-4B3D-A93A-5C5539DDE804
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/51/;;;","29/Sep/20 22:14;dcapwell;rebase and broke JMX (since it isn't enabled) so enabled check cache in testing and tests are passing.  I am running CI against trunk as the failing tests are consistent and failing for other branches, so isolating the changes to make sure those tests are not broken here.;;;","29/Sep/20 22:26;dcapwell;ok so looks like the read_repair tests and the gossiper test was broken by https://issues.apache.org/jira/browse/CASSANDRA-15833, so can ignore in this results.  Will rerun the tests with the commit to enable the cache in tests.;;;","29/Sep/20 22:30;dcapwell;Updated CI results

Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16036-trunk-2EBAD3E9-4394-4D42-9213-69A6590F37E2 (expected test failures caused by other JIRA, and 1 flaky test in no-vnode case but not in vnode case)
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/52/

trunk baseline: https://app.circleci.com/pipelines/github/dcapwell/cassandra/574/workflows/19f38f3c-9da3-42d5-ba5f-269f0285b791;;;",,,,,,,,,,,,,,,,,,,,
testQueueWhenPoolFullStrategy - org.apache.cassandra.service.ActiveRepairServiceTest,CASSANDRA-16034,13321413,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,e.dimitrova,e.dimitrova,07/Aug/20 00:14,03/Jan/21 17:03,13/Jul/23 08:39,09/Sep/20 10:58,4.0,4.0-beta3,,,,Test/unit,,,,0,,,,"The test is failing in CircleCI [here | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/295/workflows/168d88ab-f55f-4560-a23e-8243aff7b1bd/jobs/1792]",,e.dimitrova,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Degradation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 09 13:31:06 UTC 2020,,,,,,,All,,,,,,"0|z0hjtk:",9223372036854775807,,,,e.dimitrova,,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/c6fc6714eea73d94e6befd13b52a15cd48e28f7a,,,,,,,,,"Intermittently failing test reliably repro'd locally by running in a container with limited resources. Probably difficult to prove non-flakiness in CI, but I've linked a run using the lower specced config as per the original report.",,,,,"03/Sep/20 17:31;samt;Looks to be due to the fact that a task submitted to an executor may not immediately begin execution even if capacity exists to do so. Repro's reliably when run in Docker with restricted cpu and adding a spin assert with a short timeout seems to fix it. It's probably of little value, but I've linked a Circle run with the medium config as in the original report.

||Branch||CircleCI||
|[16034-trunk|https://github.com/beobal/cassandra/commits/16034-trunk]|[utests|https://app.circleci.com/pipelines/github/beobal/cassandra/89/workflows/490b8e03-c6a3-44dc-ba79-09833a058cbb/jobs/1870]
;;;","08/Sep/20 18:34;e.dimitrova;Hi [~samt],

Thank you for the patch!

I will do a review later today.

One thing I was thinking around the flakiness - can you loop the test with the patch like 10 times(10 should be enough if it was failing consistently I guess) or something in your environment? (Or you already did that?) 

 ;;;","08/Sep/20 23:10;e.dimitrova;The patch looks good to me.  Unfortunately, we rely on timing, so as suggested in my previous comment, please, loop it to check for flakiness.

 ;;;","09/Sep/20 10:58;samt;bq. can you loop the test with the patch like 10 times

yep, I did that already and saw no failures.

Thanks for the review [~e.dimitrova], committed to trunk in {{c6fc6714eea73d94e6befd13b52a15cd48e28f7a}} with the typo fixed.;;;","09/Sep/20 13:31;e.dimitrova;Thank you [~samt];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestBootstrap::test_node_cannot_join_as_hibernating_node_without_replace_address failing on trunk,CASSANDRA-16030,13321175,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,maedhroz,maedhroz,05/Aug/20 21:20,03/Jan/21 17:03,13/Jul/23 08:39,11/Aug/20 14:41,4.0,4.0-beta2,,,,Test/dtest/python,,,,0,,,,"{{TestBootstrap::test_node_cannot_join_as_hibernating_node_without_replace_address}} seems to think that the new replacement node is running when it shouldn’t be. We’ve got two confirmed failures, one on trunk and one on a recent trunk-based patch:

https://ci-cassandra.apache.org/job/Cassandra-trunk/259/testReport/dtest-novnode.bootstrap_test/TestBootstrap/test_node_cannot_join_as_hibernating_node_without_replace_address/

https://app.circleci.com/pipelines/github/adelapena/cassandra/79/workflows/1fa1cbcf-820d-438f-97bd-91e20a50baba/jobs/604",,e.dimitrova,maedhroz,stefan.miklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,stefan.miklosovic,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Aug 11 14:43:09 UTC 2020,,,,,,,All,,,,,,"0|z0hidc:",9223372036854775807,,,,brandon.williams,,,,Low,,4.0-beta1,,,https://github.com/apache/cassandra-dtest/commit/59ca5090b028956ba609fbd7e37e638dfc40a451,,,,,,,,,it is a test.,,,,,"10/Aug/20 23:54;e.dimitrova;This test was created for CASSANDRA-14559 but it fails on trunk

CC [~stefan.miklosovic] [~brandon.williams];;;","11/Aug/20 06:04;stefan.miklosovic;Hi [~e.dimitrova] and [~brandon.williams] 

that PR is just flaky, this one should fix it [https://github.com/apache/cassandra-dtest/pull/88]

very easy solution, that node just does not stop fast enough;;;","11/Aug/20 14:41;brandon.williams;Committed.;;;","11/Aug/20 14:43;e.dimitrova;Thank you both!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cqlsh tests broken in Python 3.7+,CASSANDRA-16028,13321137,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,aholmber,aholmber,05/Aug/20 18:02,03/Jan/21 17:03,13/Jul/23 08:39,05/Aug/20 18:48,4.0,4.0-beta2,,,,Tool/cqlsh,,,,0,,,,"{code:java}
// cassandra/pylib/cqlshlib/test/run_cqlsh.py"", line 221, in read_until
    if not isinstance(until, re._pattern_type):
AttributeError: module 're' has no attribute '_pattern_type'
{code}
An internal module attribute was changed/removed from Python 3.7 on.

[https://github.com/python/cpython/pull/1646/files#diff-daea55f2fca784d9a64ca8f190403904R267-L272]

This breakage did not manifest in CI because the test use the Jenkins host system Python, which is 3.6.

I have a trivial patch I'll add shortly.",,aholmber,,,,,,,,,,,"aholmberg closed pull request #710:
URL: https://github.com/apache/cassandra/pull/710


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Aug/20 19:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 05 18:48:01 UTC 2020,,,,,,,All,,,,,,"0|z0hi5s:",9223372036854775807,,,,brandon.williams,,,,Low,,2.1.21,,,https://github.com/apache/cassandra/commit/f93c5631636020cd3fa1f39d0ac92959102bd5eb,,,,,,,,,"repro/validation:
- activate python 3.7+
- cd pylib/cqlshlib; nosetests
<confirm attribute error>
- apply patch
- run tests again, expecting success
- activate python 3.6 and/or 2.7 and verify

No docs required.",,,,,"05/Aug/20 18:23;aholmber;https://github.com/apache/cassandra/pull/710;;;","05/Aug/20 18:48;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstabledump unit test hardening,CASSANDRA-16020,13320819,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,04/Aug/20 09:06,30/Apr/21 06:46,13/Jul/23 08:39,05/Aug/20 12:52,4.0,4.0-beta2,,,,Tool/sstable,,,,0,low-hanging-fruit,,,During CASSANDRA-15883 / CASSANDRA-15991 it was detected unit test coverage for this tool is minimal. There is a unit test to enhance upon under {{test/unit/org/apache/cassandra/tools}}.,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 05 12:50:38 UTC 2020,,,,,,,All,,,,,,"0|z0hg7s:",9223372036854775807,,,,bereng,,,,Normal,,4.0-beta1,,,See CASSANDRA-15991,,,,,,,,,See CASSANDRA-15991,,,,,"05/Aug/20 12:50;bereng;Fixes for this ticket have been folded into CASSANDRA-15991;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"sstablemetadata unit test, docs and params parsing hardening",CASSANDRA-16016,13320815,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,04/Aug/20 09:01,03/Jan/21 17:03,13/Jul/23 08:39,06/Oct/20 20:20,4.0,4.0-beta3,,,,Tool/sstable,,,,0,,,,During CASSANDRA-15883 / CASSANDRA-15991 it was detected unit test coverage for this tool is minimal. There is a unit test to enhance upon under {{test/unit/org/apache/cassandra/tools}}. Also docs are missing some options and args parsing is brittle.,,bereng,e.dimitrova,,,,,,,,,,"bereng opened a new pull request #767:
URL: https://github.com/apache/cassandra/pull/767


   …rdening


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Oct/20 03:41;githubbot;600","bereng commented on pull request #767:
URL: https://github.com/apache/cassandra/pull/767#issuecomment-704023100


   - [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/141/workflows/894aaf4e-af5c-47ab-8da4-16ffb68950f6) CI
   - [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/141/workflows/c68e56b6-1440-4d4c-a46f-826e181aef55) CI


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Oct/20 04:41;githubbot;600","bereng closed pull request #767:
URL: https://github.com/apache/cassandra/pull/767


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,CASSANDRA-15583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Oct 06 20:20:22 UTC 2020,,,,,,,All,,,,,,"0|z0hg6w:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/e8d3743b1aa25a23f04726903d0cbf61f9824fe0,,,,,,,,,Ready for review once CASSANDRA-15991 is merged,,,,,"06/Aug/20 10:45;bereng;Branched off CASSANDRA-15991. Once that one is merged we can review/merge this one. Waiting atm;;;","06/Oct/20 04:42;bereng;This is up for review but can't move status forward;;;","06/Oct/20 20:20;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstablescrub unit test hardening and docs improvements,CASSANDRA-16013,13320812,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,04/Aug/20 08:56,24/Feb/21 06:00,13/Jul/23 08:39,17/Nov/20 20:04,4.0,4.0-beta4,,,,Tool/sstable,,,,0,,,,During CASSANDRA-15883 / CASSANDRA-15991 it was detected unit test coverage for this tool is minimal. There is a unit test to enhance upon under {{test/unit/org/apache/cassandra/tools}}. Also docs need updating to reflect the latest options available.,,bereng,,,,,,,,,,,"bereng opened a new pull request #816:
URL: https://github.com/apache/cassandra/pull/816


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Nov/20 08:56;githubbot;600","bereng commented on pull request #816:
URL: https://github.com/apache/cassandra/pull/816#issuecomment-725350381


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/180/workflows/3e0a927c-7a8f-44d1-a6e8-edf7114e62e1)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/180/workflows/d8b334a5-07a0-43a3-9cd3-728b24916e6b)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Nov/20 10:46;githubbot;600","bereng closed pull request #816:
URL: https://github.com/apache/cassandra/pull/816


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Feb/21 06:00;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,CASSANDRA-15583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 17 20:04:00 UTC 2020,,,,,,,All,,,,,,"0|z0hg68:",9223372036854775807,,,,brandon.williams,,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/a04ccf3297839febed68c314704db4d920b64413,,,,,,,,,See PR,,,,,"17/Nov/20 20:04;brandon.williams;Thanks, committed w/minor rebase.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstablesplit unit test hardening,CASSANDRA-16012,13320810,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,04/Aug/20 08:55,03/Jan/21 17:03,13/Jul/23 08:39,09/Oct/20 14:21,4.0,4.0-beta3,,,,Tool/sstable,,,,0,low-hanging-fruit,,," 
During CASSANDRA-15883 / CASSANDRA-15991 it was detected unit test coverage for this tool is minimal. There is a unit test to enhance upon under {{test/unit/org/apache/cassandra/tools}}.",,bereng,e.dimitrova,mck,yifanc,,,,,,,,"bereng opened a new pull request #762:
URL: https://github.com/apache/cassandra/pull/762


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Oct/20 09:43;githubbot;600","bereng commented on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-702019595


   CI
   - [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/134/workflows/b4665632-d801-48a0-bb7b-10f33e4e4277)
   - [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/134/workflows/869b5980-9a67-429c-8f75-3fa6484e17d2)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Oct/20 09:44;githubbot;600","yifan-c commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r500588921



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String NO_FAIL_TOOL_ON_REINIT = ""NO_FAIL_TOOL_ON_REINIT""; // Necessary for testing

Review comment:
       How about calling the flag `ALLOW_TOOL_REINIT` instead? It reads slightly better to me. 

##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private String sstableFileName;
+    private File sstablesDir;
+    private File sstablesBackupDir;
+    private List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by putting all tests in single junit test method
+
+    @Test
+    public void test() throws Throwable

Review comment:
       Can you break down the test cases into individual tests? Therefore, CI continues testing the other case on failure. It may reveal a more accurate result. 
   
   You can tell the test runner to ignore the annotations from `@Before`, `@After`, `@BeforeClass`, etc. by extending the `OrderedJUnit4ClassRunner` and overriding `withBefore()`... methods.  
   So it also solves the problem that you immediately `tearDownClass` in the test.  




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Oct/20 21:50;githubbot;600","yifan-c commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r500608694



##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private String sstableFileName;
+    private File sstablesDir;
+    private File sstablesBackupDir;
+    private List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by putting all tests in single junit test method
+
+    @Test
+    public void test() throws Throwable

Review comment:
       Can you break down the test cases into individual tests? Therefore, CI continues testing the other case on failure. It may reveal a more accurate result. 
   
   You can tell the test runner to ignore the annotations from the super class (`@Before`, `@After`, `@BeforeClass`, etc.) by extending the `OrderedJUnit4ClassRunner` and overriding `withBefore()`... methods.  
   So it also solves the problem that you immediately `tearDownClass` in the test.  




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Oct/20 21:53;githubbot;600","bereng commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r500759730



##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private String sstableFileName;
+    private File sstablesDir;
+    private File sstablesBackupDir;
+    private List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by putting all tests in single junit test method
+
+    @Test
+    public void test() throws Throwable

Review comment:
       Good thinking. Please check the latest commit :-)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Oct/20 06:12;githubbot;600","bereng commented on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-704767566


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/143/workflows/1007bf83-d5da-4e02-8c24-21ba3a17b911)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/143/workflows/a0bc5470-8cb2-4557-9e42-2334e896d276)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Oct/20 08:03;githubbot;600","bereng commented on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-705298992


   Well that was a surprise @yifan-c The new custom junit executor was wrong. Adding that new test method you suggested I noticed I couldn't get any failures. The tests were green despite I knew they were broken. I found out the new executor was swallowing all errors. So I removed that and override the `@After` method, which on retrospect I don't know how I didn't think of it.
   
   Now everything works as expected, it's cleaner and has the extra test method.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Oct/20 02:54;githubbot;600","bereng edited a comment on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-705298992


   Well that was a surprise @yifan-c The new custom junit executor was wrong. Adding that new test method you suggested I noticed I couldn't get any failures. The tests were green despite I knew they were broken. I found out the new executor was swallowing all errors. So I removed that and overrode the `@After` method, which on retrospect I don't know how I didn't think of it before.
   
   Now everything works as expected, it's cleaner and has the extra test method.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Oct/20 02:54;githubbot;600","bereng edited a comment on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-705298992


   Well that was a surprise @yifan-c The new custom junit executor was wrong. Adding that new test method you suggested I noticed I couldn't get any failures. The tests were green despite I knew they were broken. I found out the new executor was swallowing all errors. So I removed that and overrode the `@After` method, which on retrospect I don't know how I didn't think of it before.
   
   Now everything works as expected, it's cleaner and has the extra test method.
   
   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/144/workflows/8e0704dc-c5c2-4f34-8455-8625a715922c)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/144/workflows/17c720fd-af9e-424b-b510-fa386266e9e1)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Oct/20 04:04;githubbot;600","yifan-c commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r501442124



##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.After;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.apache.hadoop.fs.Path;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @After

Review comment:
       Annotating the override is not necessary. Please add `@Override` and remove `@After`.

##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.After;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.apache.hadoop.fs.Path;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @After
+    public void afterTest() throws Throwable
+    {
+    }
+
+    @Test
+    public void setupEnv() throws Throwable
+    {
+        // Stop the server after setup as we're going to be changing things under it's feet
+        setupTestSstables();
+        tearDownClass();
+    }
+
+    @Test
+    public void testMinFileSizeCheck() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, sstableFileName);
+        Assertions.assertThat(tool.getStdout()).contains(""is less than the split size"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingSSTable() throws Throwable
+    {
+        restoreOrigSstables();
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", sstableFileName);
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        Assertions.assertThat(tool.getStdout()).contains(""sstables snapshotted into"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingMultipleSSTables() throws Throwable
+    {
+        restoreOrigSstables();
+        ArrayList<String> args = new ArrayList<>(Arrays.asList(""-s"", ""1""));
+
+        args.addAll(Arrays.asList(sstablesDir.listFiles())
+                          .stream()
+                          .map(f -> f.getAbsolutePath())
+                          .collect(Collectors.toList()));
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, args.toArray(new String[args.size()]));
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testNoSnapshotOption() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", ""--no-snapshot"", sstableFileName);
+        assertTrue(origSstables.size() < Arrays.asList(sstablesDir.listFiles()).size());
+        assertTrue(tool.getStdout(), tool.getStdout().isEmpty());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void cleanEnv() throws Throwable
+    {
+        afterTest();

Review comment:
       You may want to call the `super.afterTest();`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Oct/20 04:32;githubbot;600","bereng commented on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-705340479


   Latest review comments pushed. Thx.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Oct/20 05:34;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502240159



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Two nits:
    - the name comes across as very ""public"", could it be something more obviously test-ish? like [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java#L150-L152]
   - and should the property be defined in `CassandraRelevantProperties`? (otherwise can be a package protected constant?)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 07:31;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502240159



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Two nits:
    - the name comes across as very ""public"", could it be something more obviously test-ish? like [here](https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java#L150-L152)
   - and should the property be defined in `CassandraRelevantProperties`? (otherwise can be a package protected constant?)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 07:33;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502244973



##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,187 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @Override
+    public void afterTest() throws Throwable
+    {

Review comment:
       do you want to unset the `ALLOW_TOOL_REINIT` test system property here?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 07:41;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502247295



##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,187 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @Override
+    public void afterTest() throws Throwable
+    {
+    }
+
+    @Test
+    public void setupEnv() throws Throwable
+    {
+        // Stop the server after setup as we're going to be changing things under it's feet
+        setupTestSstables();
+        tearDownClass();
+    }
+
+    @Test
+    public void testMinFileSizeCheck() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, sstableFileName);
+        Assertions.assertThat(tool.getStdout()).contains(""is less than the split size"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingSSTable() throws Throwable
+    {
+        restoreOrigSstables();
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", sstableFileName);
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        Assertions.assertThat(tool.getStdout()).contains(""sstables snapshotted into"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingMultipleSSTables() throws Throwable
+    {
+        restoreOrigSstables();
+        ArrayList<String> args = new ArrayList<>(Arrays.asList(""-s"", ""1""));
+
+        args.addAll(Arrays.asList(sstablesDir.listFiles())
+                          .stream()
+                          .map(f -> f.getAbsolutePath())
+                          .collect(Collectors.toList()));
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, args.toArray(new String[args.size()]));
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testNoSnapshotOption() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", ""--no-snapshot"", sstableFileName);
+        assertTrue(origSstables.size() < Arrays.asList(sstablesDir.listFiles()).size());
+        assertTrue(tool.getStdout(), tool.getStdout().isEmpty());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void cleanEnv() throws Throwable
+    {
+        super.afterTest();
+    }

Review comment:
       do you want to unset the `ALLOW_TOOL_REINIT` test system property here?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 07:46;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502240159



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Two nits:
    - the name comes across as very ""public"", could it be something more obviously test-ish? like [here](https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java#L150-L152)
   - and can be a package protected constant
   
   my preference would be 
   ```
   static final String TEST_TOOL_REINIT = Util.class.getName() + "".TEST_TOOL_REINIT""; // Necessary for testing
   ```
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 07:50;githubbot;600","bereng commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502292327



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Used a slightly diff name. Hope it's ok.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 09:06;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502301999



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Yes yes ofc, we are but bike-shedding.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 09:23;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502354693



##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       quick question:
   
   how come this line isn't 
   ```
   if (Boolean.getBoolean(Util.ALLOW_TOOL_REINIT_FOR_TEST)))
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 11:08;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502354693



##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       quick question:
   
   how come this line isn't 
   ```
   if (Boolean.getBoolean(Util.ALLOW_TOOL_REINIT_FOR_TEST))
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 11:09;githubbot;600","bereng commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502363690



##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       Iirc I had to do that bc the tool can execute 'out-of-process', then setting the value of the boolean directly wouldn't work.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 11:28;githubbot;600","bereng commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502411470



##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       Mick pinged me about the `get` vs `parse` bit I missed! Will fix it :-) Thx




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 13:03;githubbot;600","bereng commented on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-706168869


   CI for latest force push [here](https://app.circleci.com/pipelines/github/bereng/cassandra/149/workflows/bb581d5d-3ba7-4c12-80ee-d0a6226ff4e4)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 13:04;githubbot;600","michaelsembwever commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502240159



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Two nits:
    - the name comes across as very ""public"", could it be something more obviously test-ish? like [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java#L150-L152]
   - and should the property be defined in `CassandraRelevantProperties`? (otherwise can be a package protected constant?)

##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Two nits:
    - the name comes across as very ""public"", could it be something more obviously test-ish? like [here](https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java#L150-L152)
   - and should the property be defined in `CassandraRelevantProperties`? (otherwise can be a package protected constant?)

##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,187 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @Override
+    public void afterTest() throws Throwable
+    {

Review comment:
       do you want to unset the `ALLOW_TOOL_REINIT` test system property here?

##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,187 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @Override
+    public void afterTest() throws Throwable
+    {
+    }
+
+    @Test
+    public void setupEnv() throws Throwable
+    {
+        // Stop the server after setup as we're going to be changing things under it's feet
+        setupTestSstables();
+        tearDownClass();
+    }
+
+    @Test
+    public void testMinFileSizeCheck() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, sstableFileName);
+        Assertions.assertThat(tool.getStdout()).contains(""is less than the split size"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingSSTable() throws Throwable
+    {
+        restoreOrigSstables();
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", sstableFileName);
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        Assertions.assertThat(tool.getStdout()).contains(""sstables snapshotted into"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingMultipleSSTables() throws Throwable
+    {
+        restoreOrigSstables();
+        ArrayList<String> args = new ArrayList<>(Arrays.asList(""-s"", ""1""));
+
+        args.addAll(Arrays.asList(sstablesDir.listFiles())
+                          .stream()
+                          .map(f -> f.getAbsolutePath())
+                          .collect(Collectors.toList()));
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, args.toArray(new String[args.size()]));
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testNoSnapshotOption() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", ""--no-snapshot"", sstableFileName);
+        assertTrue(origSstables.size() < Arrays.asList(sstablesDir.listFiles()).size());
+        assertTrue(tool.getStdout(), tool.getStdout().isEmpty());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void cleanEnv() throws Throwable
+    {
+        super.afterTest();
+    }

Review comment:
       do you want to unset the `ALLOW_TOOL_REINIT` test system property here?

##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Two nits:
    - the name comes across as very ""public"", could it be something more obviously test-ish? like [here](https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java#L150-L152)
   - and can be a package protected constant
   
   my preference would be 
   ```
   static final String TEST_TOOL_REINIT = Util.class.getName() + "".TEST_TOOL_REINIT""; // Necessary for testing
   ```
   

##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Yes yes ofc, we are but bike-shedding.

##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       quick question:
   
   how come this line isn't 
   ```
   if (Boolean.getBoolean(Util.ALLOW_TOOL_REINIT_FOR_TEST)))
   ```

##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       quick question:
   
   how come this line isn't 
   ```
   if (Boolean.getBoolean(Util.ALLOW_TOOL_REINIT_FOR_TEST))
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 13:44;githubbot;600","bereng commented on pull request #762:
URL: https://github.com/apache/cassandra/pull/762#issuecomment-705340479






----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 13:50;githubbot;600","bereng commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r502292327



##########
File path: src/java/org/apache/cassandra/tools/Util.java
##########
@@ -54,6 +54,7 @@
 @SuppressWarnings(""serial"")
 public final class Util
 {
+    public static final String ALLOW_TOOL_REINIT = ""ALLOW_TOOL_REINIT""; // Necessary for testing

Review comment:
       Used a slightly diff name. Hope it's ok.

##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       Iirc I had to do that bc the tool can execute 'out-of-process', then setting the value of the boolean directly wouldn't work.

##########
File path: src/java/org/apache/cassandra/tools/StandaloneSplitter.java
##########
@@ -51,7 +52,10 @@
     public static void main(String args[])
     {
         Options options = Options.parseArgs(args);
-        Util.initDatabaseDescriptor();
+        if (Boolean.parseBoolean(System.getProperty(Util.ALLOW_TOOL_REINIT_FOR_TEST, ""false"")))

Review comment:
       Mick pinged me about the `get` vs `parse` bit I missed! Will fix it :-) Thx




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 13:52;githubbot;600","yifan-c commented on a change in pull request #762:
URL: https://github.com/apache/cassandra/pull/762#discussion_r501442124



##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.After;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.apache.hadoop.fs.Path;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @After

Review comment:
       Annotating the override is not necessary. Please add `@Override` and remove `@After`.

##########
File path: test/unit/org/apache/cassandra/tools/StandaloneSplitterWithCQLTesterTest.java
##########
@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.tools;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.io.Files;
+
+import org.junit.After;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.apache.cassandra.OrderedJUnit4ClassRunner;
+import org.apache.cassandra.cql3.CQLTester;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.io.sstable.format.SSTableReader;
+import org.apache.cassandra.tools.ToolRunner.ToolResult;
+import org.apache.hadoop.fs.Path;
+import org.assertj.core.api.Assertions;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(OrderedJUnit4ClassRunner.class)
+public class StandaloneSplitterWithCQLTesterTest extends CQLTester
+{
+    private static String sstableFileName;
+    private static File sstablesDir;
+    private static File sstablesBackupDir;
+    private static List<File> origSstables;
+
+    // CQLTester post test method cleanup needs to be avoided by overriding as it'd clean all sstables, env, etc.
+    @After
+    public void afterTest() throws Throwable
+    {
+    }
+
+    @Test
+    public void setupEnv() throws Throwable
+    {
+        // Stop the server after setup as we're going to be changing things under it's feet
+        setupTestSstables();
+        tearDownClass();
+    }
+
+    @Test
+    public void testMinFileSizeCheck() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, sstableFileName);
+        Assertions.assertThat(tool.getStdout()).contains(""is less than the split size"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingSSTable() throws Throwable
+    {
+        restoreOrigSstables();
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", sstableFileName);
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        Assertions.assertThat(tool.getStdout()).contains(""sstables snapshotted into"");
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testSplittingMultipleSSTables() throws Throwable
+    {
+        restoreOrigSstables();
+        ArrayList<String> args = new ArrayList<>(Arrays.asList(""-s"", ""1""));
+
+        args.addAll(Arrays.asList(sstablesDir.listFiles())
+                          .stream()
+                          .map(f -> f.getAbsolutePath())
+                          .collect(Collectors.toList()));
+
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, args.toArray(new String[args.size()]));
+        List<File> splitFiles = Arrays.asList(sstablesDir.listFiles());
+        splitFiles.stream().forEach(f -> {
+            if (f.getName().endsWith(""Data.db"") && !origSstables.contains(f))
+                assertTrue(f.getName() + "" is way bigger than 1MB: ["" + f.length() + ""] bytes"",
+                           f.length() <= 1024 * 1024 * 1.2); //give a 20% margin on size check
+        });
+        assertTrue(origSstables.size() < splitFiles.size());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void testNoSnapshotOption() throws Throwable
+    {
+        restoreOrigSstables();
+        ToolResult tool  = ToolRunner.invokeClass(StandaloneSplitter.class, ""-s"", ""1"", ""--no-snapshot"", sstableFileName);
+        assertTrue(origSstables.size() < Arrays.asList(sstablesDir.listFiles()).size());
+        assertTrue(tool.getStdout(), tool.getStdout().isEmpty());
+        assertTrue(tool.getCleanedStderr(), tool.getCleanedStderr().isEmpty());
+        assertEquals(0, tool.getExitCode());
+    }
+
+    @Test
+    public void cleanEnv() throws Throwable
+    {
+        afterTest();

Review comment:
       You may want to call the `super.afterTest();`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Oct/20 14:04;githubbot;600","bereng closed pull request #762:
URL: https://github.com/apache/cassandra/pull/762


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,16800,,,0,16800,,,,,,,,,,,,,,,,,,,CASSANDRA-15583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 09 09:56:49 UTC 2020,,,,,,,All,,,,,,"0|z0hg5s:",9223372036854775807,,,,mck,yifanc,,,Normal,,1.2.9,,,https://github.com/apache/cassandra/commit/4564e102684dc5f66ec73de1fc836f97a1fa33c9,,,,,,,,,See PR,,,,,"12/Aug/20 08:43;bereng;Branch pushed, local tests passing. Waiting on CASSANDRA-15991 to be merged to rebase and put this on in review.;;;","05/Oct/20 09:23;bereng;Ready for review;;;","06/Oct/20 21:52;yifanc;Left comments inline inside the GH PR. ;;;","07/Oct/20 06:13;bereng;Thx for the comments. Pushed new code.;;;","07/Oct/20 20:00;yifanc;Thanks for the changes. The code LGTM.

Regarding the test coverage, can you add 1 more case that splits multiple sstables? e.g. https://cassandra.apache.org/doc/latest/tools/sstable/sstablesplit.html#split-multiple-files;;;","08/Oct/20 18:41;yifanc;+1;;;","09/Oct/20 06:00;bereng;Waiting for committer to review.;;;","09/Oct/20 09:24;mck;+1

[~Bereng], if you squash, I will commit.;;;","09/Oct/20 09:56;bereng;Squashed. Thx a lot.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sstableupgrade unit test hardening,CASSANDRA-16011,13320809,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,04/Aug/20 08:54,05/Nov/20 05:39,13/Jul/23 08:39,04/Nov/20 18:02,4.0,4.0-beta4,,,,Tool/sstable,,,,0,low-hanging-fruit,,,During CASSANDRA-15883 / CASSANDRA-15991 it was detected unit test coverage for this tool is minimal. There is a unit test to enhance upon under {{test/unit/org/apache/cassandra/tools}}.,,bereng,,,,,,,,,,,"bereng opened a new pull request #807:
URL: https://github.com/apache/cassandra/pull/807


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Nov/20 08:03;githubbot;600","bereng commented on pull request #807:
URL: https://github.com/apache/cassandra/pull/807#issuecomment-721594603


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/174/workflows/49380737-9e1a-4345-a47f-1c6a700443f7)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/174/workflows/ab0b17a9-5517-4b2b-8da7-84cb7155d1a5)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Nov/20 08:44;githubbot;600","bereng commented on pull request #807:
URL: https://github.com/apache/cassandra/pull/807#issuecomment-721654495


   CI [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/175/workflows/aea36f43-8c98-4104-906f-461a22707caf)
   CI [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/175/workflows/2a3e0fd0-7232-426d-b784-7d0836ab9ce4)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Nov/20 10:40;githubbot;600","bereng closed pull request #807:
URL: https://github.com/apache/cassandra/pull/807


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:38;githubbot;600","bereng opened a new pull request #807:
URL: https://github.com/apache/cassandra/pull/807


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:39;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,CASSANDRA-15583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Nov 04 18:02:16 UTC 2020,,,,,,,All,,,,,,"0|z0hg5k:",9223372036854775807,,,,brandon.williams,,,,Normal,,NA,,,https://github.com/apache/cassandra/commit/7e0c0e59c7c5a27df2dfce52f02c2cb7c0eff968,,,,,,,,,See PR for CI results,,,,,"04/Nov/20 10:18;bereng;A new {{StandaloneUpgraderOnSStablesTest}} has been added that together with the previously added {{StandaloneUpgraderTest}} should cover the tool.;;;","04/Nov/20 18:02;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
2.2.17 fails to start up with ExceptionInInitializerError,CASSANDRA-16008,13320752,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,flightc,tianon,tianon,03/Aug/20 22:06,04/Mar/22 07:33,13/Jul/23 08:39,23/Sep/20 15:08,2.2.19,,,,,Local/Config,,,,1,,,,"After the upgrade to 2.2.17, Cassandra fails to start with the following error:
{noformat}
INFO  20:28:57 JVM Arguments: [-Dcom.sun.management.jmxremote.port=7199, -Dcom.sun.management.jmxremote.ssl=false, -Dcom.sun.management.jmxremote.authenticate=false, -ea, -javaagent:/opt/cassandra/lib/jamm-0.3.0.jar, -XX:+CMSClassUnloadingEnabled, -XX:+UseThreadPriorities, -XX:ThreadPriorityPolicy=42, -Xms128m, -Xmx128m, -Xmn32m, -XX:+HeapDumpOnOutOfMemoryError, -Xss256k, -XX:StringTableSize=1000003, -XX:+UseParNewGC, -XX:+UseConcMarkSweepGC, -XX:+CMSParallelRemarkEnabled, -XX:SurvivorRatio=8, -XX:MaxTenuringThreshold=1, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+UseTLAB, -XX:+PerfDisableSharedMem, -XX:CompileCommandFile=/etc/cassandra/hotspot_compiler, -XX:CMSWaitDuration=10000, -XX:+CMSParallelInitialMarkEnabled, -XX:+CMSEdenChunksRecordAlways, -XX:CMSWaitDuration=10000, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintHeapAtGC, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -XX:+PrintPromotionFailure, -Xloggc:/opt/cassandra/logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=10, -XX:GCLogFileSize=10M, -Djava.net.preferIPv4Stack=true, -Dcassandra.jmx.local.port=7199, -XX:+DisableExplicitGC, -Djava.library.path=/opt/cassandra/lib/sigar-bin, -Dcassandra.libjemalloc=/usr/lib/x86_64-linux-gnu/libjemalloc.so.1, -XX:OnOutOfMemoryError=kill -9 %p, -Dlogback.configurationFile=logback.xml, -Dcassandra.logdir=/opt/cassandra/logs, -Dcassandra.storagedir=/opt/cassandra/data, -Dcassandra-foreground=yes]
WARN  20:28:57 Unable to lock JVM memory (ENOMEM). This can result in part of the JVM being swapped out, especially with mmapped I/O enabled. Increase RLIMIT_MEMLOCK or run Cassandra as root.
INFO  20:28:57 jemalloc seems to be preloaded from /usr/lib/x86_64-linux-gnu/libjemalloc.so.1
INFO  20:28:57 JMX is enabled to receive remote connections on port: 7199
WARN  20:28:57 OpenJDK is not recommended. Please upgrade to the newest Oracle Java release
INFO  20:28:57 Initializing SIGAR library
INFO  20:28:57 Checked OS settings and found them configured for optimal performance.
WARN  20:28:57 Directory /opt/cassandra/data/commitlog doesn't exist
WARN  20:28:57 Directory /opt/cassandra/data/saved_caches doesn't exist
Exception (java.lang.ExceptionInInitializerError) encountered during startup: null
java.lang.ExceptionInInitializerError
	at org.apache.cassandra.db.SystemKeyspace.checkHealth(SystemKeyspace.java:709)
	at org.apache.cassandra.service.StartupChecks$9.execute(StartupChecks.java:351)
	at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:109)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:188)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:607)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:717)
Caused by: java.lang.IllegalArgumentException: Bad configuration; unable to start server: At least one DataFileDirectory must be specified
	at org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories(DatabaseDescriptor.java:846)
	at org.apache.cassandra.db.Keyspace.<clinit>(Keyspace.java:66)
	... 6 more
ERROR 20:28:58 Exception encountered during startup
java.lang.ExceptionInInitializerError: null
	at org.apache.cassandra.db.SystemKeyspace.checkHealth(SystemKeyspace.java:709) ~[apache-cassandra-2.2.17.jar:2.2.17]
	at org.apache.cassandra.service.StartupChecks$9.execute(StartupChecks.java:351) ~[apache-cassandra-2.2.17.jar:2.2.17]
	at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:109) ~[apache-cassandra-2.2.17.jar:2.2.17]
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:188) [apache-cassandra-2.2.17.jar:2.2.17]
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:607) [apache-cassandra-2.2.17.jar:2.2.17]
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:717) [apache-cassandra-2.2.17.jar:2.2.17]
Caused by: java.lang.IllegalArgumentException: Bad configuration; unable to start server: At least one DataFileDirectory must be specified
	at org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories(DatabaseDescriptor.java:846) ~[apache-cassandra-2.2.17.jar:2.2.17]
	at org.apache.cassandra.db.Keyspace.<clinit>(Keyspace.java:66) ~[apache-cassandra-2.2.17.jar:2.2.17]
	... 6 common frames omitted
	at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:109)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:188)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:607)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:717)
Caused by: java.lang.IllegalArgumentException: Bad configuration; unable to start server: At least one DataFileDirectory must be specified
	at org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories(DatabaseDescriptor.java:846)
	at org.apache.cassandra.db.Keyspace.<clinit>(Keyspace.java:66)
	... 6 more
{noformat}
I've traced this down to what I believe is the issue in [https://github.com/apache/cassandra/commit/257fb0377343cbfdb58327da17f31d4eaed940f5], specifically [https://github.com/apache/cassandra/commit/257fb0377343cbfdb58327da17f31d4eaed940f5#r40944000] – the addition of an empty value for {{data_file_directories}} needs to be accompanied with a change to {{DatabaseDescriptor.java}} to handle an empty array the same way as the previous nil value was (and seed the value of {{cassandra.storagedir}} into that empty array), as was done in [https://github.com/apache/cassandra/commit/b09e60f72bb2f37235d9e9190c25db36371b3c18#diff-b66584c9ce7b64019b5db5a531deeda1] (which I believe is the origin of this change).",,elsmorian,flightc,tianon,,,,,,,,,"flightc opened a new pull request #756:
URL: https://github.com/apache/cassandra/pull/756


   …ories is not set
   
   Commit `257fb03` changed `Config.java`:
   
   ```
   -    public String[] data_file_directories;
   +    public String[] data_file_directories = new String[0];
   ```
   
   which broke `DatabaseDescriptor.java`. This PR is to commit the fix to C* 3.0/3.11 by CASSANDRA-7066.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Sep/20 10:59;githubbot;600","flightc closed pull request #756:
URL: https://github.com/apache/cassandra/pull/756


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Sep/20 11:04;githubbot;600","flightc commented on pull request #756:
URL: https://github.com/apache/cassandra/pull/756#issuecomment-697292529


   I've screwed up the PR... redoing.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Sep/20 11:04;githubbot;600","flightc opened a new pull request #757:
URL: https://github.com/apache/cassandra/pull/757


   Applied C* 3.0/3.11 fix to `DatabaseDescriptor.java` in CASSANDRA-7066 broken by commit `257fb03`.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Sep/20 11:18;githubbot;600","ErickRamirezAU closed pull request #757:
URL: https://github.com/apache/cassandra/pull/757


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Mar/22 07:33;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Sep/20 11:23;flightc;CASSANDRA-16008-2.2.txt;https://issues.apache.org/jira/secure/attachment/13012009/CASSANDRA-16008-2.2.txt",,,,,,,,,,,,,,1.0,flightc,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 23 15:08:57 UTC 2020,,,,,,,All,,,,,,"0|z0hfsw:",9223372036854775807,,,,brandon.williams,,,,Normal,,2.2.18,,,https://github.com/apache/cassandra/commit/ed8005552376188abb81894fb8c9c611ebd6379a,,,,,,,,,Applied CASSANDRA-7066 fix in C* 3.0/3.11 to `DatabaseDescriptor.java` broken by commit `257fb03`.,,,,,"23/Sep/20 10:50;elsmorian;Would be very helpful to have this addressed as it is currently blocking new Docker containers of the Cassandra 2.2 tag - https://github.com/docker-library/cassandra/issues/215;;;","23/Sep/20 11:28;flightc;Applied CASSANDRA-7066 fix in C* 3.0/3.11 to {{DatabaseDescriptor.java}} broken by commit {{257fb03}}:

* 2.2 PR - https://github.com/apache/cassandra/pull/757
* 2.2 Patch -  [^CASSANDRA-16008-2.2.txt] 

This only applies to the 2.2 branch since it's already fixed in C* 3.x/4.0.;;;","23/Sep/20 15:08;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When jvm dtest apis differ Circle CI's dtest_jars_build can fail to detect this and will use the jars from the older version,CASSANDRA-16004,13320294,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,31/Jul/20 00:36,03/Jan/21 17:03,13/Jul/23 08:39,03/Aug/20 22:20,3.0.22,3.11.8,4.0,4.0-beta2,,Build,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/389/workflows/ea7776ac-5be0-4cb4-ab4c-61f524397c07/jobs/2019

{code}
build-test:
    [javac] Compiling 510 source files to /home/cassandra/cassandra/build/test/classes
    [javac] warning: Supported source version 'RELEASE_6' from annotation processor 'org.openjdk.jmh.generators.BenchmarkProcessor' less than -source '1.8'
    [javac] /home/cassandra/cassandra/test/distributed/org/apache/cassandra/distributed/impl/RowUtil.java:49: error: no suitable constructor found for SimpleQueryResult(String[],Object[][],warnings =[...]nings)
    [javac]             return new SimpleQueryResult(names, results, warnings == null ? Collections.emptyList() : warnings);
    [javac]                    ^
    [javac]     constructor SimpleQueryResult.SimpleQueryResult(String[],Object[][]) is not applicable
    [javac]       (actual and formal argument lists differ in length)
    [javac]     constructor SimpleQueryResult.SimpleQueryResult(String[],Object[][],Predicate<Row>,int) is not applicable
    [javac]       (actual and formal argument lists differ in length)
    [javac] /home/cassandra/cassandra/test/distributed/org/apache/cassandra/distributed/test/ReplicaFilteringProtectionTest.java:212: error: cannot find symbol
    [javac]         List<String> futureWarnings = futureResult.warnings();
    [javac]                                                   ^
    [javac]   symbol:   method warnings()
    [javac]   location: variable futureResult of type SimpleQueryResult
    [javac] Note: Some input files use or override a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation for details.
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 2 errors
    [javac] 1 warning

BUILD FAILED
/home/cassandra/cassandra/build.xml:1176: Compile failed; see the compiler error output for details.
{code}

cassandra-3.0 compiled against the dtest jar provided by cassandra-2.2, so failed.",,dcapwell,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 03 22:20:44 UTC 2020,,,,,,,All,,,,,,"0|z0hczk:",9223372036854775807,,,,maedhroz,,,,Normal,,3.0.22,,,https://github.com/apache/cassandra/commit/8b8ec94744c70b5770c98b22f641ca7f492e0534,,,,,,,,,ran upgrade tests in circle ci,,,,,"03/Aug/20 19:57;maedhroz;LGTM;;;","03/Aug/20 20:55;dcapwell;upgrade tests passed, builds only failed because of ant OOM issue (tracked by different JIRA).;;;","03/Aug/20 22:20;dcapwell;CI results:

3.0: https://app.circleci.com/pipelines/github/dcapwell/cassandra/401/workflows/b5254a01-a0ec-46b6-8f4b-e164bd4145d4
3.11: https://app.circleci.com/pipelines/github/dcapwell/cassandra/402/workflows/1e4ecc06-9ee1-42d9-a12f-0572aee136c3
trunk: https://app.circleci.com/pipelines/github/dcapwell/cassandra/403/workflows/eba134d3-0725-4590-aa46-4076b2725422

there were failed tests, but not in the upgrade path, so ignored.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToolRunner added in CASSANDRA-15942 stdErr checks improvements,CASSANDRA-16003,13320281,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,dcapwell,dcapwell,30/Jul/20 22:10,03/Jan/21 17:03,13/Jul/23 08:39,06/Aug/20 16:26,4.0,4.0-beta2,,,,Test/unit,,,,0,,,,"The JVM will output to stderr on some environments to show what flags that were picked up, when this happens all tests which validate stderr start to fail.  This was found in the org.apache.cassandra.tools.ClearSnapshotTest as it switched to use the ToolRunner; below is a sample failure on my laptop (I had to modify the asserts since they don’t include the input)

{code}
java.lang.AssertionError: 
Expecting empty but was:<""Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
"">

	at org.apache.cassandra.tools.ToolRunner.assertEmptyStdErr(ToolRunner.java:339)
	at org.apache.cassandra.tools.ToolRunner.waitAndAssertOnCleanExit(ToolRunner.java:334)
	at org.apache.cassandra.tools.ClearSnapshotTest.testClearSnapshot_RemoveMultiple(ClearSnapshotTest.java:91)
{code}


Here _JAVA_OPTIONS is used globally on my system so fails the test; there is also JAVA_TOOL_RUNNER which is used the same way.  ",,bereng,dcapwell,,,,,,,,,,"bereng opened a new pull request #706:
URL: https://github.com/apache/cassandra/pull/706


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jul/20 06:50;githubbot;600","bereng commented on pull request #706:
URL: https://github.com/apache/cassandra/pull/706#issuecomment-666974129


   [J11 CI](https://app.circleci.com/pipelines/github/bereng/cassandra/83/workflows/386c5b95-371d-4777-8411-fceb9a427c4f)
   [j8 CI](https://app.circleci.com/pipelines/github/bereng/cassandra/83/workflows/ca515754-6afb-4f40-ba69-46a1860afd56)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jul/20 07:19;githubbot;600","dcapwell commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r463815976



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -330,12 +330,21 @@ public ToolRunner waitAndAssertOnExitCode()
     
     public ToolRunner waitAndAssertOnCleanExit()
     {
-        return waitAndAssertOnExitCode().assertEmptyStdErr();
+        return waitAndAssertOnExitCode().assertCleanStdErr();
     }
     
-    public ToolRunner assertEmptyStdErr()
+    /**
+     * Checks if the stdErr is empty after removing any JVM env info output
+     * 
+     * Some JVM configs may output env info on stdErr. We need to remove those to see what was the tool's actual stdErr
+     * 
+     * @return
+     */
+    public ToolRunner assertCleanStdErr()

Review comment:
       Thanks for this!
   
   To help make this more extendable, it would be good to use a exclude list and filter based off that; this is what happens in python dtests (example: https://github.com/riptano/ccm/blob/master/ccmlib/node.py#L395-L421) today.
   
   With an exclude list, we can add more cases by default over time, but can also let tests control and search for the logs they care about.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jul/20 20:18;githubbot;600","bereng commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r464307542



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -330,12 +330,21 @@ public ToolRunner waitAndAssertOnExitCode()
     
     public ToolRunner waitAndAssertOnCleanExit()
     {
-        return waitAndAssertOnExitCode().assertEmptyStdErr();
+        return waitAndAssertOnExitCode().assertCleanStdErr();
     }
     
-    public ToolRunner assertEmptyStdErr()
+    /**
+     * Checks if the stdErr is empty after removing any JVM env info output
+     * 
+     * Some JVM configs may output env info on stdErr. We need to remove those to see what was the tool's actual stdErr
+     * 
+     * @return
+     */
+    public ToolRunner assertCleanStdErr()

Review comment:
       Aha! icywm. Iiuc my latest commit works off an exclude list. I haven't gone as far as implementing the `grepLog` functionality as it sounds more like sthg for another ticket + I want to merger this asap bc of 15583 (the main tooling ticket).
   
   Still I think this addition is nice and a step in the direction you point. Wdyt?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Aug/20 09:44;githubbot;600","bereng commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r464307542



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -330,12 +330,21 @@ public ToolRunner waitAndAssertOnExitCode()
     
     public ToolRunner waitAndAssertOnCleanExit()
     {
-        return waitAndAssertOnExitCode().assertEmptyStdErr();
+        return waitAndAssertOnExitCode().assertCleanStdErr();
     }
     
-    public ToolRunner assertEmptyStdErr()
+    /**
+     * Checks if the stdErr is empty after removing any JVM env info output
+     * 
+     * Some JVM configs may output env info on stdErr. We need to remove those to see what was the tool's actual stdErr
+     * 
+     * @return
+     */
+    public ToolRunner assertCleanStdErr()

Review comment:
       Aha! icywm. Iiuc my latest commit works off an exclude list. I haven't gone as far as implementing the `grepLog` functionality as it sounds more like sthg for another ticket + I want to merge this asap bc of 15583 (the main tooling ticket).
   
   Still I think this addition is nice and a step in the direction you point. Wdyt?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Aug/20 09:44;githubbot;600","dcapwell commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r464526319



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -49,6 +49,8 @@
 public class ToolRunner implements AutoCloseable
 {
     protected static final Logger logger = LoggerFactory.getLogger(ToolRunner.class);
+
+    public List<String> stdErrRegExpCleaners = Arrays.asList(""(?im)^picked up.*\\R"");

Review comment:
       should be final and immutable if public, if private should just be final.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Aug/20 16:33;githubbot;600","bereng commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r464863322



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -49,6 +49,8 @@
 public class ToolRunner implements AutoCloseable
 {
     protected static final Logger logger = LoggerFactory.getLogger(ToolRunner.class);
+
+    public List<String> stdErrRegExpCleaners = Arrays.asList(""(?im)^picked up.*\\R"");

Review comment:
       Icwym you're probably thinking along the lines of `defaultCleanersList` whereas I was thinking along the lines of `cleanersInThisInstance` and that to be modifiable to your liking. That's why I made it public, not static and not final :shrug:. Makes sense or you'd prefer me to change it?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Aug/20 07:47;githubbot;600","dcapwell commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r465213524



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -49,6 +49,8 @@
 public class ToolRunner implements AutoCloseable
 {
     protected static final Logger logger = LoggerFactory.getLogger(ToolRunner.class);
+
+    public List<String> stdErrRegExpCleaners = Arrays.asList(""(?im)^picked up.*\\R"");

Review comment:
       I see where you are coming from, but mutable state can still be brittle for tests, so simpler to avoid it in the API.
   
   Since this is public and mutable, anyone is able to modify it
   1) public means any other class can have access, and do with it what Is allowed by the object
   2) the object is mutable, given the fact that it is public, any class could mutate unexpectedly 
   3) you can't add to this list, so ""modifiable to your linking"" wouldn't work
   
   ```
   jshell> var v =Arrays.asList(1, 2)
   v ==> [1, 2]
   
   jshell> v.add(3)
   |  Exception java.lang.UnsupportedOperationException
   |        at AbstractList.add (AbstractList.java:153)
   |        at AbstractList.add (AbstractList.java:111)
   |        at (#3:1)
   
   jshell> v.remove(1)
   |  Exception java.lang.UnsupportedOperationException
   |        at AbstractList.remove (AbstractList.java:167)
   |        at (#4:1)
   
   jshell> v.set(0, 42)
   $5 ==> 1
   
   jshell> v
   v ==> [42, 2]
   ```
   
   Given this, it makes sense to be the `defaultCleanersList`, also makes sense to expose so the caller can add to their own list; but if it is exposed, it should be immutable




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Aug/20 17:29;githubbot;600","bereng commented on a change in pull request #706:
URL: https://github.com/apache/cassandra/pull/706#discussion_r465535270



##########
File path: test/unit/org/apache/cassandra/tools/ToolRunner.java
##########
@@ -49,6 +49,8 @@
 public class ToolRunner implements AutoCloseable
 {
     protected static final Logger logger = LoggerFactory.getLogger(ToolRunner.class);
+
+    public List<String> stdErrRegExpCleaners = Arrays.asList(""(?im)^picked up.*\\R"");

Review comment:
       Ok, immutable and public it is :-)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Aug/20 07:42;githubbot;600","bereng closed pull request #706:
URL: https://github.com/apache/cassandra/pull/706


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Aug/20 06:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,CASSANDRA-15583,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15942,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Aug 11 14:39:15 UTC 2020,,,,,,,All,,,,,,"0|z0hcww:",9223372036854775807,,,,dcapwell,,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/9a23a8a6af5ab1ee8c947f363b0e32f71369746f,,,,,,,,,See PR,,,,,"30/Jul/20 22:12;dcapwell;It would also be good to fix the asserts as they are not actionable; they should inform what happened to cause the issue (such as print out stderr if it is expected to be empty but was not);;;","31/Jul/20 07:22;bereng;[~dcapwell] Thanks for raising this one, good catch!. I don't think the problem lies in ToolRunner not being portable, but the actual stdErr we are doing now and we didn't do previously. So this is just the natural consequence of us improving in tooling testing imo :-)

I have added a super short PR, fortunately, which seems to work when I repro'ed locally. Would you be so kind to review please? Thx in advance.

Edit: Latest code on CASSANDRA-15583 will be blocked on this as well, so the sooner we can merge this one the better #collaborating;;;","31/Jul/20 20:18;dcapwell;left comment in PR;;;","03/Aug/20 16:34;dcapwell;Overall LGTM +1 (with small comment).;;;","04/Aug/20 07:48;bereng;Thanks [~dcapwell]. I left an explanation for the choice I made. If it sgt you feel free to commit, otherwise let me know and I'll push a commit.;;;","04/Aug/20 17:30;dcapwell;left a comment, would be good to address;;;","05/Aug/20 07:42;bereng;Thx [~dcapwell] . Changed as per your suggestion;;;","06/Aug/20 10:51;bereng;Hi [~dcapwell] I know you're probably super-busy or even on holidays, but I am starting to be piling tickets behind this one so getting this one merged would very useful to me. Would you mind I ping some other reviewer/committer to get this merged? apologies again for being a pain, but I am starting to have too many local branches based off other local ones not merged yet and my env is becoming too brittle :);;;","06/Aug/20 15:55;dcapwell;+1;;;","06/Aug/20 16:04;dcapwell;running build in circle CI and running the build against jdk 11;;;","06/Aug/20 16:26;dcapwell;CI results: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16003-trunk-84EF2DB8-B25E-4785-828A-76063C69DE12

Yellow: known flaky tests only.

Reran the tests on the env that found the issue, tests now pass there.

Thanks for your hard work!;;;","07/Aug/20 06:31;bereng;Thank you so much :);;;","11/Aug/20 14:39;bereng;#justfyi we didn't think of adding this test :shrug:  [https://github.com/apache/cassandra/pull/704/files#diff-ff6938d8ab4ea304113d733d53f84e10R41] At least we'll add it there :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm upgrade dtests fail on java 11 caused by bad initialization order of DatabaseDescriptor and FileUtils,CASSANDRA-16002,13320253,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,30/Jul/20 18:28,03/Jan/21 17:03,13/Jul/23 08:39,31/Jul/20 02:31,3.0.22,3.11.8,4.0,4.0-beta2,,Test/dtest/java,,,,0,,,,"In FileUtils we check to see if we have access to some classes (specifically to set org.apache.cassandra.io.util.FileUtils#isCleanerAvailable), which can fail in java 11.  This is fine with CassandraDaemon as it will just log the failure, but in in-jvm dtests this can fail to startup an instance with the following

{code}
java.lang.RuntimeException: java.lang.RuntimeException: java.lang.AssertionError: network topology must be assigned before using snitch
	at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:209)
	at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$7(IsolatedExecutor.java:112)
	at org.apache.cassandra.distributed.impl.Instance.startup(Instance.java:592)
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.startup(AbstractCluster.java:209)
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.startup(AbstractCluster.java:200)
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:179)
	at org.apache.cassandra.distributed.upgrade.UpgradeTest.upgradeTest(UpgradeTest.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Caused by: java.lang.RuntimeException: java.lang.AssertionError: network topology must be assigned before using snitch
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$7(Instance.java:590)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.AssertionError: network topology must be assigned before using snitch
	at org.apache.cassandra.distributed.impl.DistributedTestSnitch.getDatacenter(DistributedTestSnitch.java:90)
	at org.apache.cassandra.distributed.impl.DistributedTestSnitch.getDatacenter(DistributedTestSnitch.java:85)
	at org.apache.cassandra.locator.DynamicEndpointSnitch.getDatacenter(DynamicEndpointSnitch.java:118)
	at org.apache.cassandra.config.DatabaseDescriptor.applyConfig(DatabaseDescriptor.java:488)
	at org.apache.cassandra.config.DatabaseDescriptor.<clinit>(DatabaseDescriptor.java:137)
	at org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(JVMStabilityInspector.java:102)
	at org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(JVMStabilityInspector.java:60)
	at org.apache.cassandra.io.util.FileUtils.<clinit>(FileUtils.java:78)
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$7(Instance.java:509)
{code}

The exception isn’t clear, but what is happening is the following

{code}
static
{
    boolean canClean = false;
    try
    {
        ByteBuffer buf = ByteBuffer.allocateDirect(1);
        ((DirectBuffer) buf).cleaner().clean();
        canClean = true;
    }
    catch (Throwable t)
    {
        JVMStabilityInspector.inspectThrowable(t);
        logger.info(""Cannot initialize un-mmaper.  (Are you using a non-Oracle JVM?)  Compacted data files will not be removed promptly.  Consider using an Oracle JVM or using standard disk access mode"");
    }
    canCleanDirectBuffers = canClean;
}
{code}

JVMStabilityInspector will check the throwable which will eventually call org.apache.cassandra.config.DatabaseDescriptor#getDiskFailurePolicy which will try to load the configs and fail",,dcapwell,jmeredithco,jwest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15981,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jul 31 02:31:26 UTC 2020,,,,,,,All,,,,,,"0|z0hcqo:",9223372036854775807,,,,jmeredithco,jwest,,,Normal,,3.0.21,,,https://github.com/apache/cassandra/commit/624d01660bdad4dc924717f4c602ce6241c0c825,,,,,,,,,manual testing,,,,,"30/Jul/20 18:45;dcapwell;OSS CI doesn't do upgrade tests with java 11, so need to replicate by hand

{code}
ant testclasslist -Dtest.classlistfile=<( echo ""org/apache/cassandra/distributed/upgrade/UpgradeTest.java"" ) -Dtest.classlistprefix=distributed
...
[junit-timeout] Testcase: upgradeTest(org.apache.cassandra.distributed.upgrade.UpgradeTest):    Caused an ERROR
[junit-timeout] java.lang.RuntimeException: java.lang.AssertionError: network topology must be assigned before using snitch
[junit-timeout] java.lang.RuntimeException: java.lang.RuntimeException: java.lang.AssertionError: network topology must be assigned before using snitch
[junit-timeout]         at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:209)
[junit-timeout]         at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$7(IsolatedExecutor.java:112)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.startup(Instance.java:592)
[junit-timeout]         at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.startup(AbstractCluster.java:209)
[junit-timeout]         at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.startup(AbstractCluster.java:200)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:179)
[junit-timeout]         at org.apache.cassandra.distributed.upgrade.UpgradeTest.upgradeTest(UpgradeTest.java:50)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] Caused by: java.lang.RuntimeException: java.lang.AssertionError: network topology must be assigned before using snitch
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$7(Instance.java:590)
[junit-timeout]         at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[junit-timeout]         at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[junit-timeout]         at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[junit-timeout]         at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[junit-timeout]         at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)
[junit-timeout]         at java.base/java.lang.Thread.run(Thread.java:834)
[junit-timeout] Caused by: java.lang.AssertionError: network topology must be assigned before using snitch
[junit-timeout]         at org.apache.cassandra.distributed.impl.DistributedTestSnitch.getDatacenter(DistributedTestSnitch.java:90)
[junit-timeout]         at org.apache.cassandra.distributed.impl.DistributedTestSnitch.getDatacenter(DistributedTestSnitch.java:85)
[junit-timeout]         at org.apache.cassandra.locator.DynamicEndpointSnitch.getDatacenter(DynamicEndpointSnitch.java:118)
[junit-timeout]         at org.apache.cassandra.config.DatabaseDescriptor.applyConfig(DatabaseDescriptor.java:488)
[junit-timeout]         at org.apache.cassandra.config.DatabaseDescriptor.<clinit>(DatabaseDescriptor.java:137)
[junit-timeout]         at org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(JVMStabilityInspector.java:102)
[junit-timeout]         at org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(JVMStabilityInspector.java:60)
[junit-timeout]         at org.apache.cassandra.io.util.FileUtils.<clinit>(FileUtils.java:79)
[junit-timeout]         at org.apache.cassandra.distributed.impl.Instance.lambda$startup$7(Instance.java:509)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.distributed.upgrade.UpgradeTest FAILED
...
{code};;;","30/Jul/20 18:46;dcapwell;The underline exception is

{code}
ERROR [node1_isolatedExecutor:1] node1 2020-07-30 11:44:38,115 Cannot initialize un-mmaper.  (Are you using a non-Oracle JVM?)  Compacted data files will not be removed promptly.  Consider using an Oracle JVM or using standard disk access mode
java.lang.NoSuchMethodError: sun.nio.ch.DirectBuffer.cleaner()Lsun/misc/Cleaner;
  at org.apache.cassandra.io.util.FileUtils.<clinit>(FileUtils.java:73) ~[dtest-3.0.22.jar:na]
  at org.apache.cassandra.distributed.impl.Instance.lambda$startup$7(Instance.java:509) ~[dtest-3.0.22.jar:na]
  at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
  at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
  at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
  at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83) ~[dtest-3.0.22.jar:na]
  at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
{code}

As of java 11, the cleaner is now jdk.internal.ref.Cleaner;;;","30/Jul/20 19:02;dcapwell;With the patch I get the following

{code}
testclasslist:
[testparallelhelper] Warning: Nashorn engine is planned to be removed from a future JDK release
     [echo] Number of test runners: 1
    [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/cassandra
    [mkdir] Created dir: /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/output
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
[junit-timeout] Testsuite: org.apache.cassandra.distributed.upgrade.UpgradeTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.upgrade.UpgradeTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 49.363 sec
[junit-timeout]
[junitreport] Processing /Users/davidcapwell/src/github/apache/cassandra-trunk/build/test/TESTS-TestSuites.xml to /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null1381087585
[junitreport] Loading stylesheet jar:file:/usr/local/Cellar/ant/1.10.7/libexec/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl
[junitreport] Transform time: 368ms
[junitreport] Deleting: /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null1381087585

BUILD SUCCESSFUL
Total time: 54 seconds
{code};;;","30/Jul/20 19:48;jwest;+1 LGTM. For 3.0/3.11 moving the logging line above the stability inspector call makes sense because the JVM can be killed before reaching the log line. For trunk, logging the exceptions for additional information also makes sense. So does registering the error handler after initializing {{DatabaseDescriptor}} in all cases.;;;","30/Jul/20 21:03;dcapwell;Ran all upgrade tests on java 11 and they passed.  There were unit test failures but they are the same ones active on trunk right now.;;;","30/Jul/20 23:19;dcapwell;To help with review, the following commands can be run locally

{code}
setjdk 8
unset CASSANDRA_USE_JDK11
for v in 2.2 3.0 3.11 trunk; do 
  cd ../cassandra-$v
  ant realclean 
  ant jar dtest-jar
  ant generate-idea-files
done
echo ../cassandra-{3.0,3.11,trunk}/build/ | xargs -n1 cp -v ../cassandra-2.2/build/dtest-2.2*.jar
echo ../cassandra-{3.11,trunk}/build/ | xargs -n1 cp -v ../cassandra-3.0/build/dtest-3.0*.jar
echo ../cassandra-trunk/build/ | xargs -n1 cp -v ../cassandra-3.11/build/dtest-3.11*.jar

cd  ../cassandra-trunk  
setjdk 11

CASSANDRA_USE_JDK11=true ant testclasslist -Dtest.classlistfile=<( echo ""org/apache/cassandra/distributed/upgrade/UpgradeTest.java"" ) -Dtest.classlistprefix=distributed 
{code};;;","31/Jul/20 01:10;jmeredithco;LGTM. Code changes make sense.  We should probably update the wording on the JVM selection, but that's unrelated to this ticket.

Locally ran the branches through the in-jvm Dtest upgrades and checked trunk passed on J8 and failed on J11 before the patch and all test pass afterwards.;;;","31/Jul/20 01:21;dcapwell;CI having issues with CASSANDRA-16004, I am trying to work around it to get a working build.;;;","31/Jul/20 02:31;dcapwell;CI results
3.0: https://app.circleci.com/pipelines/github/dcapwell/cassandra/395/workflows/8bd01d34-7280-4176-8b31-180d193e8125
3.11: https://app.circleci.com/pipelines/github/dcapwell/cassandra/396/workflows/cbba3a88-3371-47b6-9100-1e806efa6ce5
trunk: https://app.circleci.com/pipelines/github/dcapwell/cassandra/397/workflows/89e13b1f-6395-4a7e-a16c-0d33497dd7c4

there are failing tests, but they are known flaky.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Updates needed after 4.0-beta1 release,CASSANDRA-16000,13320228,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,30/Jul/20 15:57,20/Aug/20 18:01,13/Jul/23 08:39,20/Aug/20 15:50,4.0,4.0-beta2,,,,Documentation/Website,,,,0,,,,"We need to update for beta the Documentation/Installing Cassandra page (also the curl link provided)

 

/CC [~lorina@datastax.com]",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15586,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,,Thu Aug 20 18:01:16 UTC 2020,,,,,,,All,,,,,,"0|z0hcl4:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/102a54a6a11aea4078e6f7e694c8798b48ff352c,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-16000?focusedCommentId=17181291&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17181291,,,,,"20/Aug/20 15:44;e.dimitrova;[Pull request |https://github.com/ekaterinadimitrova2/cassandra/compare/trunk...ekaterinadimitrova2:CASSANDRA-16000?expand=1]

[~mck2], [~dcapwell] , [~brandon.williams], anyone has a free cycle to check this quick one?;;;","20/Aug/20 15:50;brandon.williams;Thanks, committed.;;;","20/Aug/20 17:18;e.dimitrova;Thanks [~brandon.williams]. Actually I wanted to confirm.... is this gonna be published with the new view of the web page before beta2 or not?
As if it is gonna be roll out with beta2, it needs to be changed to 4.0-beta2. [~lorina@datastax.com], can you advise, please?
Thinking out loud, should we make this update part of the release process so we update this page on release? [~mck2], does this make sense?;;;","20/Aug/20 18:01;mck;[~e.dimitrova], in cassandra-website there is a macro for the latest version, so changes like this don't have to be made:
 https://github.com/apache/cassandra-website/blob/master/src/_data/releases.yaml

Something similar does exist for the in-tree docs (though I've never used it):
 https://github.com/apache/cassandra/blob/trunk/doc/source/conf.py#L81-L84;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cassandra 3.0.21 debian package is half available,CASSANDRA-15999,13320154,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,masterzen,masterzen,30/Jul/20 09:53,30/Jul/20 17:46,13/Jul/23 08:39,30/Jul/20 17:46,3.0.21,,,,,Packaging,,,,0,,,,"Hi,

Cassandra 3.0.21 seems to have been released in the debian package repository, as it is selected by an {{apt install cassandra}} however the {{.deb}} is not available in the repository (only the {{.dsc}}):

 
{code:java}
# apt-get install cassandra
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  cassandra-tools
The following packages will be upgraded:
  cassandra cassandra-tools
2 upgraded, 0 newly installed, 0 to remove and 18 not upgraded.
Need to get 25.5 MB/25.5 MB of archives.
After this operation, 37.9 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
Ign:1 https://dl.bintray.com/apache/cassandra 30x/main amd64 cassandra all 3.0.21
Err:1 http://www.apache.org/dist/cassandra/debian 30x/main amd64 cassandra all 3.0.21
  404  Not Found [IP: 52.58.94.94 443]
E: Failed to fetch http://www.apache.org/dist/cassandra/debian/pool/main/c/cassandra/cassandra_3.0.21_all.deb  404  Not Found [IP: 52.58.94.94 443]
E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
 {code}
 

 Indeed, there's no {{https://dl.bintray.com/apache/cassandra/dist/cassandra/debian/pool/main/c/cassandra/cassandra_3.0.21_all.deb}} file avaible. 

{{cassandra-tools}} 3.0.21 is available, and of course {{cassandra}} 3.0.20 is available though.

My current workaround is to use apt-pinning to pin to 3.0.20 until the problem is resolved.

 ",,brandon.williams,masterzen,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Jul/20 15:31;mck;Screen Shot 2020-07-30 at 17.30.41.png;https://issues.apache.org/jira/secure/attachment/13008774/Screen+Shot+2020-07-30+at+17.30.41.png",,,,,,,,,,,,,,1.0,mck,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 30 17:39:54 UTC 2020,,,,,,,All,,,,,,"0|z0hc4o:",9223372036854775807,,,,masterzen,mck,,,Normal,,3.0.21,,,n/a,,,,,,,,,apt-get install cassandra,,,,,"30/Jul/20 15:17;brandon.williams;I suspect this is caused by the bintray outage [~mck] noted in the release email, but I'm not sure if it just fixes itself.;;;","30/Jul/20 15:34;mck;Definitely files missing in bintray.
Screenshot from https://bintray.com/apache/cassandra/debian#files/pool%2Fmain%2Fc%2Fcassandra
 !Screen Shot 2020-07-30 at 17.30.41.png|width=400px! 

The files were uploaded during the release process while bintray was suffering an outage. I wasn't aware of the outage until afterwards when I went to publish them and couldn't. Later on when things were working I poorly presumed the publish included all files. 

Adding the missing files now. Thanks for the report [~masterzen].;;;","30/Jul/20 16:13;mck;All {{3.0.21}} files in https://apache.bintray.com/cassandra/pool/main/c/cassandra/ have been uploaded again, from https://dist.apache.org/repos/dist/release/cassandra/3.0.21/debian/;;;","30/Jul/20 16:19;mck;Tested fresh 3.0.21 install on a docker ubuntu:latest image. Works now.

[~masterzen], could you please confirm that it works for you? so I can close this ticket…;;;","30/Jul/20 17:39;masterzen;I confirm this is now working.

Many thanks for fixing the problem so quickly!

You can close the ticket.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky python dtest test_expiration_overflow_policy_capnowarn - ttl_test.TestTTL,CASSANDRA-15996,13319860,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,29/Jul/20 00:35,03/Jan/21 17:02,13/Jul/23 08:39,16/Oct/20 19:35,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/361/workflows/3a42fa45-1f60-4c95-86a4-15a6773e384e/jobs/1860

{code}
>           assert warning, 'Log message should be print for CAP and CAP_NOWARN policy'
E           AssertionError: Log message should be print for CAP and CAP_NOWARN policy
E           assert []
{code}",,aholmber,bereng,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16195,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 16 19:35:11 UTC 2020,,,,,,,All,,,,,,"0|z0habk:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,2.1.6,,,https://github.com/apache/cassandra/commit/0fe07f91da20cee0ec948909c0d53c9103cb69e2,,,,,,,,,ran full CI,,,,,"24/Sep/20 21:50;aholmber;[~dcapwell] The linked CI run is on 3.11. I haven't been able to reproduce this on trunk, and there is no evidence of flakiness in [ci-cassandra|https://ci-cassandra.apache.org/job/Cassandra-trunk/33/testReport/dtest-novnode.ttl_test/TestTTL/test_expiration_overflow_policy_capnowarn/]. For now I'm going to leave this open, but drop it from 4.0. Please let me know if you disagree.;;;","29/Sep/20 22:32;dcapwell;works for me.;;;","06/Oct/20 21:36;aholmber;David encountered a failure in a variant of this test on trunk:
https://app.circleci.com/pipelines/github/dcapwell/cassandra/622/workflows/adcd463c-156a-43c7-a9bc-7f3e4938dbe8/jobs/3514 

Adding 4.0 fixver back on.;;;","14/Oct/20 08:44;bereng;I have been focusing on this one today and I want to share my findings. Here is the stdout from David's test for the record:

{noformat}
AssertionError: Log message should be print for CAP and CAP_NOWARN policy assert []
self = <ttl_test.TestTTL object at 0x7f3cf857ccf8>

    @since('2.1')
    def test_expiration_overflow_policy_cap(self):
>       self._base_expiration_overflow_policy_test(default_ttl=False, policy='CAP')

ttl_test.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ttl_test.TestTTL object at 0x7f3cf857ccf8>, default_ttl = False
policy = 'CAP'

    def _base_expiration_overflow_policy_test(self, default_ttl, policy):
        """"""
            Checks that expiration date overflow policy is correctly applied
            @jira_ticket CASSANDRA-14092
            """"""
        MAX_TTL = 20 * 365 * 24 * 60 * 60  # 20 years in seconds
        default_time_to_live = MAX_TTL if default_ttl else None
        self.prepare(default_time_to_live=default_time_to_live)
    
        # Restart node with expiration_date_overflow_policy
        self.cluster.stop()
        self.cluster.start(jvm_args=['-Dcassandra.expiration_date_overflow_policy={}'.format(policy)])
        self.session1 = self.patient_cql_connection(self.cluster.nodelist()[0])
        self.session1.execute(""USE ks;"")
    
        # Try to insert data, should only fail if policy is REJECT
        query = 'INSERT INTO ttl_table (key, col1) VALUES (%d, %d)' % (1, 1)
        if not default_time_to_live:
            query = query + ""USING TTL %d"" % (MAX_TTL)
        try:
            result = self.session1.execute_async(query + "";"")
            result.result()
            if policy == 'REJECT':
                self.fail(""should throw InvalidRequest"")
            if self.cluster.version() >= '3.0':  # client warn only on 3.0+
                if policy == 'CAP':
                    logger.debug(""Warning is {}"", result.warnings[0])
                    assert 'exceeds maximum supported expiration' in result.warnings[0], 'Warning not found'
                else:
                    assert not result.warnings, ""There should be no warnings""
    
        except InvalidRequest as e:
            if policy != 'REJECT':
                self.fail(""should not throw InvalidRequest"")
    
        self.cluster.flush()
        # Data should be present unless policy is reject
        assert_row_count(self.session1, 'ttl_table', 0 if policy == 'REJECT' else 1)
    
        # Check that warning is always logged, unless policy is REJECT
        if policy != 'REJECT':
            node1 = self.cluster.nodelist()[0]
            prefix = 'default ' if default_ttl else ''
            warning = node1.grep_log(""Request on table {}.{} with {}ttl of {} seconds exceeds maximum supported expiration""
                                     .format('ks', 'ttl_table', prefix, MAX_TTL))
>           assert warning, 'Log message should be print for CAP and CAP_NOWARN policy'
E           AssertionError: Log message should be print for CAP and CAP_NOWARN policy
E           assert []

ttl_test.py:410: AssertionError
{noformat}

As we can see from the code above we're being called with policy 'CAP'. And following the test code we make it through to line 392 where we [check|https://github.com/apache/cassandra-dtest/blob/master/ttl_test.py#L392] there was a client warning indeed. So the TTL 'business logic' is happening and it's correct. The only bit missing is that being logged which falls on {{NoSpamLogger}}'s shoulders. I can only think of some edge case on {{NoSpamLogger}} missing to log, which would explain why it happens so seldom, why it hasn't been repro'ed so far and why I didn't manage to repro either even on a thinned down machine.;;;","14/Oct/20 18:16;aholmber;[~Bereng] I noticed that too. I've been staring at NoSpam logger for a bit and haven't seen a way that it should fail in this way with a single request in flight. What did you have in mind for an edge case? 

I looked a bit at the logs from the other failure and noticed one anomaly. I'm not sure how it could be related, but I noticed that server never emits the ""Startup complete"" message. We only have one example of this.

The logs from the test run on this ticket are expired out of Circle. I was coming here to ask [~dcapwell] or anyone if they have other examples of this failing where the log files are still retained?;;;","15/Oct/20 04:47;bereng;The only 2 things that came to my mind are:
- On node start, instead of relying on the patient cql connection, lets add flags to wait for the binary protocol and other startup stuff to complete i.e . But this is just a stab in the dark based on previous experience fixing tests. Just in case there is some esoteric race at startup.
- {{NoSpamLogger}} has some shuffling of instances around that _maybe_ have a concurrency hole, _maybe_ I am just imagining things. I have to look at it for a while a bit longer to make up my mind. In any case I didn't see how that could affect in this particular case were usage is pretty straightforward and not multithreaded. So I am also at a loss here so far as well.

;;;","15/Oct/20 19:01;aholmber;bq. instead of relying on the patient cql connection, lets add flags to wait for the binary protocol and other startup stuff to complete
The test already waits for binary protocol log-wise, and the connection is established after that. I'm not sure what else we would add. 

bq. NoSpamLogger has some shuffling of instances around that maybe have a concurrency hole, maybe I am just imagining things. 
I've stared at this quite a bit and I am reasonably confident there is not an issue with those mappings. Reasoning in part is as we have mentioned there is only a single request in-flight. The other is that no matter what kind of race we could come up with, worst case scenario is we create new wrappers -- there are no runtime errors and it's still using the same logger internally (if it was even the same key). Incidentally I have also never seen another {{NoSpamLogger}} message across thousands of runs of this test.

With that in mind I stared a bit more at the [other thing|https://github.com/apache/cassandra/blob/699a1f74fcc1da1952da6b2b0309c9e2474c67f4/src/java/org/apache/cassandra/utils/NoSpamLogger.java#L78-L82] that could cause this not to be logged. {{minIntervalNanos}} is coming from a [static field|https://github.com/apache/cassandra/blob/699a1f74fcc1da1952da6b2b0309c9e2474c67f4/src/java/org/apache/cassandra/db/ExpirationDateOverflowHandling.java#L39] and guaranteed to be set to a known value. {{expected}} is the default zero-initialized value of an AtomicInteger. {{nowNanos}}, on the other hand, is coming from [{{System.nanoTime}}|https://github.com/apache/cassandra/blob/699a1f74fcc1da1952da6b2b0309c9e2474c67f4/src/java/org/apache/cassandra/utils/NoSpamLogger.java#L59-L62], which (TIL) can be [negative|https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#nanoTime--]:

bq. This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary origin time (perhaps in the future, so values may be negative). 

I haven't found a way to prove it, but presently this is my only plausible theory. I think we should switch NoSpamLogger to use {{currentTimeMillis}}. We know its non monotonic and may be less precise, but I think it fits the bill for the spirit of this class, where callers are specifying intervals on the order of whole seconds and minutes.

Please let me know if anyone has thoughts on that.;;;","15/Oct/20 19:24;aholmber;bq. I think we should switch NoSpamLogger to use currentTimeMillis.

This, or we could initialize the {{NoSpamLogStatement}} to {{Long.MIN_VALUE}} instead of zero. I have the changes for either.;;;","15/Oct/20 21:20;aholmber;Created two patches for consideration
|[currentTimeMillis|https://github.com/aholmberg/cassandra/pull/13/files#diff-e2c5319b6d6b31133eb6f8daf05716ee2358471ae66ac8dedb1df5fd669e088b]|[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-15996]|
|[Long.MIN_VALUE|https://github.com/aholmberg/cassandra/pull/14]|[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-15996-alt]|

(also fixing what I believe to be incorrect behavior shown in one of the unit tests);;;","16/Oct/20 05:02;bereng;That could be it indeed imo. Given NoSpamLogger is to be used in hot paths and 'currentTimeMillis' resolution issues I'd got for the 'Long.MIN_VALUE' route. Also that keeps things within the 'nanotime()' world, sort to speak, so we don't inadvertently introduce some perf profile change . Also [this|https://stackoverflow.com/a/54566928/3432945] read was interesting.

I have +1'ed the 'Long.MIN_VALUE' PR pending sbdy that knows about the upgrade test failures confirming they are indeed unrelated. Nice catch either if it turn out to be it or not! :-);;;","16/Oct/20 17:37;aholmber;I guess that's just the state of upgrade tests right now. I wasn't sure because I hadn't been running them.

https://ci-cassandra.apache.org/job/Cassandra-trunk-dtest-upgrade/lastBuild/;;;","16/Oct/20 19:35;brandon.williams;Committed the min value patch to trunk.  Upgrade tests have been like some time now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky python dtest test_view_metadata_cleanup - materialized_views_test.TestMaterializedViews,CASSANDRA-15993,13319829,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,28/Jul/20 19:18,03/Jan/21 17:02,13/Jul/23 08:39,01/Oct/20 15:29,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/355/workflows/7b8df61d-706f-4094-a206-7cdc6b4e0451/jobs/1818

{code}
E   cassandra.OperationTimedOut: errors={'127.0.0.2': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.2

cassandra/cluster.py:4026: OperationTimedOut
{code}",,aholmber,bereng,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Oct 01 15:29:26 UTC 2020,,,,,,,All,,,,,,"0|z0ha4o:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/1789213ee00a05b3686858b3a22dc8c2d26fc837,,,,,,,,,"looped a ton in my test setup
Look for stability on ci-cassandra",,,,,"11/Aug/20 23:33;e.dimitrova;Fails also in 3.11 - https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/11/label=cassandra,split=16/testReport/junit/dtest.materialized_views_test/TestMaterializedViews/test_view_metadata_cleanup/

 ;;;","12/Aug/20 17:14;e.dimitrova;Unfortunately, I can't reproduce it;;;","28/Aug/20 08:52;bereng;I tried to repro on lowered RAM and capped CPU at different settings until it started simply not working bc of the low resources. Otherwise I can't manage to repro and it looks pretty solid on [cass-ci|https://ci-cassandra.apache.org/job/Cassandra-trunk/294/testReport/dtest-novnode.materialized_views_test/TestMaterializedViews/test_view_metadata_cleanup/history/]. The only failure has a weird log which could be just env noise.

It would be good to keep en eye for new failures of this one otherwise close until it repros imo. My 2cts;;;","29/Sep/20 20:43;aholmber;I'm not seeing failures in ci-cassandra right now, but I think I have a local setup that produces this failure intermittently. I'm going to look into it.;;;","30/Sep/20 22:17;aholmber;There are a couple things going on here. 

The main source of timeouts was running all the create views at once:
The view builders run asynchronously in the background. As each new CREATE VIEW is issued, the schema migration causes any in-progress build to stop and restart anew. This causes a snowball of stopping and restarting builds that then makes one of the later DDL statements timeout (they would complete with longer timeouts).

Changing the dtest to simply wait for each build synchronously removes that contention. Although they are built serially, due to avoiding contention there is also no increase in runtime. My test setup that previously failed 1/12 times runs hundreds of times with just this change, and no increased timeout. However, there's another mechanism here that makes me think we should raise the timeouts as well:

It just so happens that [this task|https://github.com/aholmberg/cassandra/blob/c6ef4762eeee78ec783b77faa367e82d9b1ffabc/src/java/org/apache/cassandra/service/CassandraDaemon.java#L406-L414] is scheduled to run at roughly the same as the [drop_keyspace|https://github.com/aholmberg/cassandra-dtest/blob/efc64a670955eaf91533911c7cbbb792fd5add19/materialized_views_test.py#L236] DML is usually running, making another chance for contention as the build tasks are stopped for schema migration. I haven't been able to reproduce, but my theory is that's what's causing the [occasional timeout|https://ci-cassandra.apache.org/job/Cassandra-3.11/lastCompletedBuild/testReport/dtest-novnode.materialized_views_test/TestMaterializedViews/test_view_metadata_cleanup/] observed in 3.11. Rather than try to find timing around that, my suggestion is simply to raise the request timeout for any DDL that happens while views are present in the keyspace.

[patch|https://github.com/aholmberg/cassandra-dtest/commit/efc64a670955eaf91533911c7cbbb792fd5add19]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-15993];;;","01/Oct/20 05:37;bereng;I can't repro but the reasoning sounds solid to me. +1 to the current patch and watch the job a few runs for that elusive 3.11 occasional timeout.;;;","01/Oct/20 15:29;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky python dtest test_13595 - consistency_test.TestConsistency,CASSANDRA-15992,13319828,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,28/Jul/20 19:17,03/Jan/21 17:03,13/Jul/23 08:39,12/Oct/20 18:36,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/355/workflows/7b8df61d-706f-4094-a206-7cdc6b4e0451/jobs/1818

{code}
>           assert 9 == jmx.read_attribute(srp, 'Count')
E           AssertionError: assert 9 == 5
{code}",,aholmber,aleksey,brandon.williams,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15311,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 12 18:36:44 UTC 2020,,,,,,,All,,,,,,"0|z0ha4g:",9223372036854775807,,,,brandon.williams,,,,Normal,,NA,,,https://github.com/apache/cassandra-dtest/commit/19f50572016e5d88a114d730256cbf7bfd27889e,,,,,,,,,Modify existing test to be more relaxed on the metric validation.,,,,,"02/Sep/20 19:23;aholmber;I have an environment that produced the error every 100 runs or so, but it is not deterministic. The assertion is failing because we're sometimes not arriving in [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/service/reads/ShortReadPartitionsProtection.java#L151] for one of two SRP iterators created for this query (one per node). The only way I can see for this to happen is for results iteration to stop before exhausting both.

My current working theory is that this is possible, and okay due to [concurrency|https://github.com/apache/cassandra/blob/614d7d06f4964f03681e9e90d98ddf3562c47598/src/java/org/apache/cassandra/service/StorageProxy.java#L2126-L2141], [potential variation|https://github.com/apache/cassandra/blob/614d7d06f4964f03681e9e90d98ddf3562c47598/src/java/org/apache/cassandra/locator/ReplicaPlans.java#L616-L635] in replica iteration, and the potential to [stop|https://github.com/apache/cassandra/blob/614d7d06f4964f03681e9e90d98ddf3562c47598/src/java/org/apache/cassandra/db/transform/BasePartitions.java#L93] inner iteration early when [limits are in play|https://github.com/apache/cassandra-dtest/blob/b00d0c310ff61d3f39c116daeccdf43aa63f2b25/consistency_test.py#L1281]. Sadly I have not once been able to reproduce this with any instrumentation in the code whatsoever.

Having stalled progress on empirical observation, I wanted to float this static analysis for some discussion. If it holds water, the change would be to simply update the test to only require that SRP counter be at least the value of one of the node ranges (4 or 5).;;;","02/Sep/20 21:09;brandon.williams;Any thoughts on this analysis, [~aleksey]?;;;","12/Oct/20 15:05;aleksey;Hmh. Frankly, we can just ditch that assertion. The important part of that regression test is the query returning a correct resultset, which it does now, with C* fix in, and wouldn't without. In retrospect that last assert feels to me like an overspecification.;;;","12/Oct/20 16:03;aholmber;Thanks. Will do.;;;","12/Oct/20 18:20;aholmber;[a very predictable patch|https://github.com/apache/cassandra-dtest/compare/master...aholmberg:CASSANDRA-15992?expand=1]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-15992] with several unrelated errors.;;;","12/Oct/20 18:36;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Running CQL command with non-ASCII values raises UnicodeDecodeError,CASSANDRA-15990,13319672,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,joechu,joechu,28/Jul/20 05:03,03/Jan/21 17:02,13/Jul/23 08:39,19/Aug/20 15:36,4.0,4.0-beta2,,,,Tool/cqlsh,,,,0,,,,"There are INSERT statements that contains non-ASCII values that have run fine in Cassandra 3.11, but now raises a UnicodeDecodeError when I try executing them in 4.0-alpha4 and 4.0-beta1. 

Example input and output:
{code:java}
echo $LANG
en_US.UTF-8
$ cqlsh --debug
Using CQL driver: <module 'cassandra' from '/usr/share/cassandra/bin/../lib/cassandra-driver-internal-only-3.23.0.post0-1a184b99.zip/cassandra-driver-3.23.0.post0-1a184b99/cassandra/__init__.py'>
Using connect timeout: 5 seconds
Using 'utf-8' encoding
Using ssl: False
Connected to Cassandra Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 4.0-beta1 | CQL spec 3.4.5 | Native protocol v4]
Use HELP for help.
cqlsh> CREATE KEYSPACE killr_video WITH replication = {'class': 'NetworkTopologyStrategy', 'DC-Houston': 1};
cqlsh> USE killr_video;
cqlsh:killr_video> CREATE TABLE movies_by_genre ( genre TEXT, title TEXT, year INT, duration INT, avg_rating FLOAT, country TEXT, PRIMARY KEY ((genre), title, year));
cqlsh:killr_video> INSERT INTO movies_by_genre (genre, title, year, duration, avg_rating, country)
 ... VALUES ('Action', 'The Extraordinary Adventures of Adèle Blanc-Sec', 2010, 107, 6.30, 'France');
Traceback (most recent call last):
 File ""/usr/share/cassandra/bin/cqlsh.py"", line 937, in onecmd
 self.handle_statement(st, statementtext)
 File ""/usr/share/cassandra/bin/cqlsh.py"", line 962, in handle_statement
 readline.add_history(new_hist)
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe8' in position 134: ordinal not in range(128){code}",,dcapwell,e.dimitrova,jeromatron,joechu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Degradation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 19 15:36:40 UTC 2020,,,,,,,All,,,,,,"0|z0h95s:",9223372036854775807,,,,brandon.williams,dcapwell,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/8abbfc1fc5244e5686de0d04a1f71a004204030f,,,,,,,,,"Trunk [patch |https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15990], new basic [dtests |https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-15990]added",,,,,"04/Aug/20 16:05;e.dimitrova;The issue is reproduced with python2.;;;","06/Aug/20 23:28;e.dimitrova;Trunk [patch |https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15990], new basic [cqlsh tests |https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-15990] added
 _I will squash the commits and remove the circle custom config commit when the patch get approval to be committed._
 *All CQLSH tests pass successfully on trunk, probably good to run them also on the other branches in Jenkins, even if I was told the issue was seen only on trunk*
 CI run:
 [JAVA 8 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/295/workflows/168d88ab-f55f-4560-a23e-8243aff7b1bd]
 _test_resume_stopped_build - materialized_views_test.TestMaterializedViews_ - no ticket and no Jenkins failures but it doesn't seem related; I will open a ticket to be investigated

*UPDATE: CASSANDRA-16033*
 _test_disk_balance_after_boundary_change_lcs - disk_balance_test.TestDiskBalance_ - not failing in Jenkins but there is an old ticket pointing to the same issue from 2018; could be used, still open - CASSANDRA-14030
 _test_node_cannot_join_as_hibernating_node_without_replace_address - bootstrap_test.TestBootstrap_ - CASSANDRA-16030
 _test_dead_sync_initiator - repair_tests.repair_test.TestRepair_ - CASSANDRA-15963
 _testQueueWhenPoolFullStrategy - org.apache.cassandra.service.ActiveRepairServiceTest_ - no failures in Jenkins; no tickets; I will open a new one as it looks a legit issue, not related to this patch *UPDATE: CASSANDRA-16034*
 _test_cleanup - bootstrap_test.TestBootstrap_ - no failures in Jenkins; no tickets; I will open a new one as it looks a legit issue, not related to this patch. *UPDATE: CASSANDRA-16035*

[Java 11 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/295/workflows/2604dffe-9cc2-46ef-a7ed-09a9d9aecfbe]:

_test_node_cannot_join_as_hibernating_node_without_replace_address_ - CASSANDRA-16030
 _test_dead_sync_initiator - repair_tests.repair_test.TestRepair_ - CASSANDRA-15963
 _testMessagePurging - org.apache.cassandra.net.ConnectionTest_ - known issue from CASSANDRA-15338, [~yifanc] follows up on it

 

[~djoshi], [~dcapwell] - do you mind to review it, please, if you have some free time? ;;;","11/Aug/20 00:53;dcapwell;Launched jenkins builds for all 4 branches:

trunk: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/10/
3.11: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/11/
3.0: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/12/
2.2: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest/13/;;;","11/Aug/20 23:44;e.dimitrova;Thanks [~dcapwell].

I just went through the CI results.

In summary:
 * trunk:  
 ** dtest.cql_tracing_test.TestCqlTracing.test_tracing_default_impl fails - unrelated; ticket created - CASSANDRA-16045
 ** dtest.cql_tracing_test.TestCqlTracing.test_tracing_simple - I would check this with the previous one as they seem related to me; added a comment to CASSANDRA-16045
 * 3.11 - dtest.materialized_views_test.TestMaterializedViews.test_view_metadata_cleanup - not related - CASSANDRA-15993
 * 3.0 - no failures
 * 2.2 - there are cqlsh tests failing; the reports say it is regression but according the latest Jenkins reports this is not the case. The tests fail consistently because of config issue (_Invalid yaml. Please remove properties [enable_scripted_user_defined_functions] from your cassandra.yaml_) - CASSANDRA-15985;;;","17/Aug/20 18:44;dcapwell;Thanks.  code LGTM +1.

[~djoshi] can you review as well?;;;","19/Aug/20 15:03;e.dimitrova;If [~djoshi] is busy, maybe [~mck2] or [~brandon.williams] can help us to look at it too?;;;","19/Aug/20 15:36;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failure in ViewTest#testNullInClusteringColumns on FreeBSD,CASSANDRA-15987,13319570,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,polo-language,polo-language,polo-language,27/Jul/20 16:17,29/Apr/21 14:34,13/Jul/23 08:39,29/Apr/21 14:34,,,,,,Test/unit,,,,0,,,," 

Failure occurs on FreeBSD 12.1-RELEASE-p5 amd64, OpenJDK 64-Bit Server VM (build 11.0.8+10-1, mixed mode),  4.0-beta1.
{noformat}
[junit-timeout] Testsuite: org.apache.cassandra.cql3.ViewTest Tests run: 41, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 110.152 sec
[junit-timeout]
[junit-timeout] Testcase: testNullInClusteringColumns(org.apache.cassandra.cql3.ViewTest):      FAILED
[junit-timeout] Invalid value for row 0 column 2 (v1 of type varchar), expected <NULL> (-1 bytes) but got <'foo'> (3 bytes) (using protocol version 4/v4)
[junit-timeout] junit.framework.AssertionFailedError: Invalid value for row 0 column 2 (v1 of type varchar), expected <NULL> (-1 bytes) but got <'foo'> (3 bytes) (using protocol version 4/v4)
[junit-timeout]         at org.apache.cassandra.cql3.CQLTester.assertRowsNet(CQLTester.java:1034)
[junit-timeout]         at org.apache.cassandra.cql3.ViewTest.testNullInClusteringColumns(ViewTest.java:1262)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.cql3.ViewTest FAILED{noformat}
 ",,polo-language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,polo-language,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 29 14:34:57 UTC 2021,,,,,,,All,,,,,,"0|z0h8j4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Apr/21 14:34;brandon.williams;Fixed perhaps by CASSANDRA-16567 or one of many others recently.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
python dtest TestCqlsh added enable_scripted_user_defined_functions which breaks on 2.2,CASSANDRA-15985,13319392,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,dcapwell,dcapwell,26/Jul/20 19:19,01/Aug/21 12:47,13/Jul/23 08:39,21/Jul/21 21:07,2.2.19,,,,,Test/dtest/python,,,,0,,,,"{code}
ERROR [main] 2020-07-26 03:03:14,108 CassandraDaemon.java:744 - Exception encountered during startup
org.apache.cassandra.exceptions.ConfigurationException: Invalid yaml. Please remove properties [enable_scripted_user_defined_functions] from your cassandra.yaml
	at org.apache.cassandra.config.YamlConfigurationLoader$MissingPropertiesChecker.check(YamlConfigurationLoader.java:146) ~[main/:na]
	at org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(YamlConfigurationLoader.java:113) ~[main/:na]
	at org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(YamlConfigurationLoader.java:85) ~[main/:na]
	at org.apache.cassandra.config.DatabaseDescriptor.loadConfig(DatabaseDescriptor.java:151) ~[main/:na]
	at org.apache.cassandra.config.DatabaseDescriptor.<clinit>(DatabaseDescriptor.java:133) ~[main/:na]
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:604) [main/:na]
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:731) [main/:na]]
{code}

This test doesn’t put a version limit, so all tests fail on 2.2 since the property was added to all clusters.",,adelapena,dcapwell,e.dimitrova,Gerrrr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16736,,,,,,,,,"21/Jul/21 20:46;e.dimitrova;TestCqlsh_run_results.txt;https://issues.apache.org/jira/secure/attachment/13030934/TestCqlsh_run_results.txt",,,,,,,,,,,,,,1.0,Gerrrr,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 21 21:06:08 UTC 2021,,,,,,,All,,,,,,"0|z0h7fk:",9223372036854775807,,,,e.dimitrova,,,,Normal,,,,,https://github.com/apache/cassandra/commit/d3ddb190eed11dda305bcae75b6db9e0b9275459,,,,,,,,,.,,,,,"26/Jul/20 19:22;dcapwell;[~djoshi] can you take a look at this?  This looks to have broken when updating cqlsh to work with python 3; looks like a simple case when we can disable that flag for 2.2 to fix the issue.;;;","13/Jan/21 19:27;Gerrrr;|Branch||Source||
|2.2|[branch|https://github.com/apache/cassandra/compare/cassandra-2.2...Gerrrr:15985-2.2]|
|dtests|[branch|https://github.com/apache/cassandra-dtest/compare/trunk...Gerrrr:CASSANDRA-15985]|

These changes fix the Invalid yaml error as well as TestCqlsh#test_pycodestyle_compliance.

There are still 2 kinds of test failures left in test_cqlsh.py:

 * [TestCqlsh#test_unicode_invalid_request_error|https://github.com/apache/cassandra-dtest/blob/6d9209e21cd13d5ee0317e9647ec851df1de465e/cqlsh_tests/test_cqlsh.py#L533], [TestCqlsh#test_unicode_syntax_error|https://github.com/apache/cassandra-dtest/blob/6d9209e21cd13d5ee0317e9647ec851df1de465e/cqlsh_tests/test_cqlsh.py#L516], [TestCqlLogin#test_login_rejects_bad_pass|https://github.com/apache/cassandra-dtest/blob/6d9209e21cd13d5ee0317e9647ec851df1de465e/cqlsh_tests/test_cqlsh.py#L2459], [TestCqlLogin#test_login_allows_bad_pass_and_continued_use|https://github.com/apache/cassandra-dtest/blob/6d9209e21cd13d5ee0317e9647ec851df1de465e/cqlsh_tests/test_cqlsh.py#L2503]. These tests fail because cassandra 2.2 does not throw ToolError, although the requests return correct error messages.
 *  [TestCqlsh#test_describe_functions|https://github.com/apache/cassandra-dtest/blob/6d9209e21cd13d5ee0317e9647ec851df1de465e/cqlsh_tests/test_cqlsh.py#L869], [TestCqlsh#test_describe_types|https://github.com/apache/cassandra-dtest/blob/6d9209e21cd13d5ee0317e9647ec851df1de465e/cqlsh_tests/test_cqlsh.py#L962]. They fail because DESCRIBE in 2.2 does not add a semicolon at the end of the statement.

Both of them require changes in behavior and as 2.2 is marked as for Critical bug fixes only, I was not sure how we want to approach them. I can either adapt the tests to verify current behavior or actually fix it. WDYT [~dcapwell]?;;;","16/Jul/21 18:33;e.dimitrova;[~Gerrrr] I just fixed the Invalid yaml error in CASSANDRA-16736 and then while triaging the patch available tickets, I found this one. I had the same question as you about the rest of the issues as 2.2 is only critical bug fixes. 

I still haven't committed the other ticket. Probably I can cherry-pick at least the TestCqlsh#test_pycodestyle_compliance fixes you already provided here?

CC [~brandon.williams];;;","17/Jul/21 14:01;Gerrrr;Thanks for reviewing my patch [~e.dimitrova]! Feel free to cherry-pick the fix for TestCqlsh#test_pycodestyle_compliance.

Regarding proposed changes, should I maybe ask in Slack, wdyt?;;;","19/Jul/21 14:38;e.dimitrova;{quote}Both of them require changes in behavior and as 2.2 is marked as for Critical bug fixes only, I was not sure how we want to approach them. I can either adapt the tests to verify current behavior or actually fix it. WDYT [~dcapwell]?
{quote}
IMHO we can fix the tests, changing of behavior for such an old version is something we don't do normally.

So I guess either those tests were considered to work post-2.2 and someone forgot the tag or we can branch a condition with the right error messages and include those accurately. ;;;","20/Jul/21 19:29;e.dimitrova;I just committed CASSANDRA-16736 and I am open to take over the rest of the cqlsh fixes as part of this patch if you don't have time [~Gerrrr], just let me know. Otherwise, I promise at least a review. :) 

PS I decided not to overcomplicate the situation, committed what was already approved and the rest is unrelated test changes that we can handle here as per our agreements. ;;;","21/Jul/21 08:03;Gerrrr;I added fixes for the rest of the broken tests mentioned in [my comment above|https://issues.apache.org/jira/browse/CASSANDRA-15985?focusedCommentId=17264377&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17264377] and started [CI|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/196/workflows/61015777-9b3f-4994-8098-405b3485d658]. ;;;","21/Jul/21 18:00;e.dimitrova;Thanks [~Gerrrr], the patch and the CI run look good to me, just a nit that can be addressed on commit.

The only test in that class I see failing now is _test_client_warnings_ but I am fine if it is not fixed under this ticket. We can always open a follow up ticket for that one, it was not part of the plan here (same as other things you nevertheless did and we appreciate that!).

[~brandon.williams], do you mind to review, too? ;;;","21/Jul/21 18:20;brandon.williams;+1;;;","21/Jul/21 20:46;e.dimitrova;I merged everything and I am about to commit soon.

I reran the TestCqlsh on all branches after the merges to ensure *I* didn't mess up anything with the newer versions.

Attached are the results, everything looks fine. Thank you;;;","21/Jul/21 21:06;e.dimitrova;To [https://github.com/apache/cassandra.git]

   cb0e4386d8..d3ddb190ee  cassandra-2.2 -> cassandra-2.2

   426253a340..92773f8f2d  cassandra-3.0 -> cassandra-3.0

   87645a9256..85de9a05cb  cassandra-3.11 -> cassandra-3.11

   0779160c25..5fec98c583  cassandra-4.0 -> cassandra-4.0

   818e0baa62..ad4e7030a0  trunk -> trunk

 

To [https://github.com/apache/cassandra-dtest.git]

   af5d69e7..8fb42c00  trunk -> trunk

Unfortunately, I realized I pushed first to the Cassandra repo, the DTest patch was staged with -n so I think probably the dtest fixes will be acknowledged in Jenkins with the next build. Apologize for the confusion. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
how_to_commit.rst missing dash in git commands and added recommendation to compile before commit,CASSANDRA-15982,13319314,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,25/Jul/20 21:04,03/Jan/21 17:03,13/Jul/23 08:39,27/Jul/20 18:40,4.0,4.0-beta2,,,,Documentation/Website,,,,0,,,,"There are two typos in how_to_commit.rst: -amend -> --amend and -atomic -> --atomic.

Also, the docs don't recommend building before committing, would be best to encourage this.",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sun Jul 26 15:05:51 UTC 2020,,,,,,,All,,,,,,"0|z0h6y8:",9223372036854775807,,,,brandon.williams,dcapwell,,,Low,,4.0-beta1,,,http://github.com/apache/cassandra/commits/a2c3d5a4ce810d02085ace97bee21e187e67aa7e,,,,,,,,,fixed typo,,,,,"26/Jul/20 15:05;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jvm-dtests crash on java 11,CASSANDRA-15981,13319246,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,25/Jul/20 01:04,03/Jan/21 17:03,13/Jul/23 08:39,06/Aug/20 04:23,4.0,4.0-beta2,,,,Build,,,,0,,,,"There is a race condition bug with CMS and class unloading which cause the JVM to crash.  Since jvm-dtests rely on class loaders and unloading, this causes sporadic JVM crashes that look like the following in CI logs

{code}
junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.Vector.forEach(Vector.java:1387)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.util.Vector.forEach(Vector.java:1387)
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.Thread.run(Thread.java:834)
{code}

Here is the JVM bug https://bugs.openjdk.java.net/browse/JDK-8252955",,dcapwell,ifesdjeen,jmeredithco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16002,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Aug 06 04:23:24 UTC 2020,,,,,,,Java11,,,,,,"0|z0h6j4:",9223372036854775807,,,,ifesdjeen,jmeredithco,,,Normal,,4.0-alpha2,,,https://github.com/apache/cassandra/commit/528e3ad00b78f3cc03f27248914249798f2c0aa9,,,,,,,,,multiple attempts with java 11 without issue (hit repeatedly without changes),,,,,"25/Jul/20 01:07;dcapwell;It looks like -XX:-CMSClassUnloadingEnabled removes the race condition, but that would imply we might want to stop defining MaxMetaspaceSize in java 11.

This is only an issue with jvm-dtests as its class loader heavy, so triggers this bug on java 11; there is no evidence that this will impact deployment.;;;","25/Jul/20 01:09;dcapwell;might be ok to still define MaxMetaspaceSize, I tested disabling unloading in CMS (it will unload, but only at stop-the-world pause) and removed MaxMetaspaceSize.  Without the change it failed frequently in my CI (I setup the jobs to split the tests over 15 containers and ran 15 times), with the change I never noticed a failure.;;;","25/Jul/20 01:12;dcapwell;Switching off of CMS would also solve the issue, as its local to CMS.;;;","27/Jul/20 08:04;ifesdjeen;Does this mean we keep allow some runnables to continue running already after class loader is closed?;;;","27/Jul/20 17:11;dcapwell;nah, just a JVM bug with CMS and class unloading

{code}
#  SIGSEGV (0xb) at pc=0x00007f240160125f, pid=1252, tid=1259
...
# V  [libjvm.so+0x48225f]  MarkAndPushClosure::do_oop(oopDesc**)+0xaf
{code}

doesn't impact other GCs and doesn't fail with -XX:-CMSClassUnloadingEnabled;;;","30/Jul/20 17:29;dcapwell;testing out a change that defines max meatspace only in java 8 and -CMSClassUnloadingEnabled on java 11.  I am testing by running jvm-dtests and upgrade jvm-dtests with 4gb containers repeatedly; this method helps show there is a problem, so should show that it is resolved.;;;","30/Jul/20 19:29;dcapwell;in testing found CASSANDRA-16002.  I wanted to make sure upgrade tests were stable with my changes, but found upgrade kept failing; once fixed ill retest (normal tests were stable).;;;","03/Aug/20 20:53;dcapwell;so far in testing I see that normal and upgrade tests are stable with the change, and I only run with a 4gb container (matches LOWER, see https://circleci.com/docs/2.0/configuration-reference/#docker-executor);;;","04/Aug/20 00:23;jmeredithco;LGTM

I reproduced the SEGV on my laptop against a commit I know fails (

43c19878e38fbe260f9e6143aa43836e85cf2f44) then cherry-picked the patch on top and ran 140 iterations without failure.
 
Checked the process arguments

Under J11 - you can see {{-CMSClassUnloadingEnabled}}

{code}
-Dstorage-config=<path>/test/conf -Djava.awt.headless=true -javaagent:<path>/lib/jamm-0.3.2.jar -ea -Djava.io.tmpdir=<path> -Dcassandra.debugrefcount=true -Xss256k -XX:SoftRefLRUPolicyMSPerMB=0 -Dcassandra.memtable_row_overhead_computation_step=100 -Dcassandra.test.use_prepared=true -Dcassandra.test.offsetseed=0 -Dcassandra.test.sstableformatdevelopment=true -Djava.security.egd=file:/dev/urandom -Dcassandra.testtag= -Dcassandra.keepBriefBrief=true -Dcassandra.strict.runtime.checks=true -Djdk.attach.allowAttachSelf=true -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1 -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSWaitDuration=10000 -XX:+CMSParallelInitialMarkEnabled -XX:+CMSEdenChunksRecordAlways --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-exports java.base/sun.nio.ch=ALL-UNNAMED --add-exports java.management.rmi/com.sun.jmx.remote.internal.rmi=ALL-UNNAMED --add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED --add-exports java.rmi/sun.rmi.server=ALL-UNNAMED --add-exports java.sql/java.sql=ALL-UNNAMED --add-opens java.base/java.lang.module=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/jdk.internal.loader=ALL-UNNAMED --add-opens java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/jdk.internal.reflect=ALL-UNNAMED --add-opens java.base/jdk.internal.math=ALL-UNNAMED --add-opens java.base/jdk.internal.module=ALL-UNNAMED --add-opens java.base/jdk.internal.util.jar=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED -DQT_SHRINKS=0 -XX:-CMSClassUnloadingEnabled -Dlegacy-sstable-root=<path>/test/data/legacy-sstables -Dinvalid-legacy-sstable-root=<path>/test/data/invalid-legacy-sstables -Dcassandra.ring_delay_ms=1000 -Dcassandra.tolerate_sstable_size=true -Dcassandra.config.loader=org.apache.cassandra.OffsetAwareConfigurationLoader -Dcassandra.skip_sync=true -Xmx1024m
{code}

Under J8 - and has {{-XX:MaxMetaspaceExpansion=64M -XX:MaxMetaspaceSize=512M -XX:MetaspaceSize=128M}}

{code}
-Dstorage-config=<path>/test/conf -Djava.awt.headless=true -javaagent:<path>/lib/jamm-0.3.2.jar -ea -Djava.io.tmpdir=<path> -Dcassandra.debugrefcount=true -Xss256k -XX:SoftRefLRUPolicyMSPerMB=0 -Dcassandra.memtable_row_overhead_computation_step=100 -Dcassandra.test.use_prepared=true -Dcassandra.test.offsetseed=0 -Dcassandra.test.sstableformatdevelopment=true -Djava.security.egd=file:/dev/urandom -Dcassandra.testtag= -Dcassandra.keepBriefBrief=true -Dcassandra.strict.runtime.checks=true -DQT_SHRINKS=0 -XX:MaxMetaspaceExpansion=64M -XX:MaxMetaspaceSize=512M -XX:MetaspaceSize=128M -Dlegacy-sstable-root=<path>/test/data/legacy-sstables -Dinvalid-legacy-sstable-root=<path>/test/data/invalid-legacy-sstables -Dcassandra.ring_delay_ms=1000 -Dcassandra.tolerate_sstable_size=true -Dcassandra.config.loader=org.apache.cassandra.OffsetAwareConfigurationLoader -Dcassandra.skip_sync=true -Xmx1024m
{code};;;","04/Aug/20 14:15;ifesdjeen;The only thing I can say is that previously CI was failing without {{MetaspaceSize}} params. Could you also trigger a ""normal"" CI pipeline, not only {{HIGHRES}}. As long as it passes without an OOM killer, I'm +1.;;;","04/Aug/20 18:08;dcapwell;Thanks [~jmeredithco]!

[~ifesdjeen] sure, I will remove.  My testing was in another environment that used a 4gb container, but that env may be different than Circle CI; so valid to run.;;;","04/Aug/20 18:11;dcapwell;Oh hey, what do you know, I didn't link the results against HIGHER, only LOWER =D

{code}
$ diff .circleci/config.yml .circleci/config.yml.LOWRES
$
{code};;;","06/Aug/20 04:23;dcapwell;CI results: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15981-trunk-CC886567-B80F-4C47-AE29-63CF0A3A2687

Green.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve log messages for socket connection/disconnection,CASSANDRA-15980,13319230,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,24/Jul/20 22:08,03/Jan/21 17:03,13/Jul/23 08:39,05/Aug/20 13:43,4.0,4.0-beta2,,,,Observability/Logging,,,,0,,,,"Logging for inbound SSL connections can take place before protocol negotiation has taken place and logs a misleading cipher that could cause problems for security auditing.
  
  
{code:java}
INFO  2020-07-03T13:57:58,380 [Messaging-EventLoop-3-1] org.apache.cassandra.net.InboundConnectionInitiator:242 - connection from peer /1.1.1.1:57899 to /2.2.2.2:7000, protocol = TLSv1.2, cipher suite = SSL_NULL_WITH_NULL_NULL
{code}
 
 Instead Cassandra should log the connection & protocol, then once the cipher has been negotiated log the agreed upon cipher.
  
  
 If the inbound SSL connection does not present a client certificate, Cassandra logs this error, even if the client wasn't required to.
{code:java}
ERROR 2020-07-14T11:58:45,925 [Native-Transport-Requests-1] org.apache.cassandra.transport.ServerConnection:140 - Failed to get peer certificates for peer /4.3.2.1:59263
{code}
 
 Logging the absense of verified certificates should be a concern of the SaslNegotiator if it requires it, and not something worth alerting the operator for generally. Downgrade to debug message to make investigation possible if needed.
  
  
 Finally, to help with logging issues related to disconnection, add a log statement when an instance decides it no longer needs to keep a gossip connection open when cleaning up connections in org.apache.cassandra.net.OutboundConnections.UnusedConnectionMonitor#closeUnusedSinceLastRun",,aleksey,dcapwell,jeromatron,jmeredithco,,,,,,,,"dcapwell commented on a change in pull request #698:
URL: https://github.com/apache/cassandra/pull/698#discussion_r463311607



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -445,11 +454,11 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
             InboundMessageHandler handler =
                 settings.handlers.apply(from).createHandler(frameDecoder, initiate.type, pipeline.channel(), useMessagingVersion);
 
-            logger.info(""{} connection established, version = {}, framing = {}, encryption = {}"",
+            logger.info(""{} messaging connection established, version = {}, framing = {}, encryption = {}"",

Review comment:
       before
   
   ```
   127.0.0.2:7000(127.0.0.1:65115)->127.0.0.1:7000-LARGE_MESSAGES-f53d678a connection established, version = 12, framing = CRC, encryption = enabled (openssl)
   ```
   
   after
   
   ```
   127.0.0.2:7000(127.0.0.1:65115)->127.0.0.1:7000-LARGE_MESSAGES-f53d678a messaging connection established, version = 12, framing = CRC, encryption = enabled (openssl)
   ```

##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -445,11 +454,11 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
             InboundMessageHandler handler =
                 settings.handlers.apply(from).createHandler(frameDecoder, initiate.type, pipeline.channel(), useMessagingVersion);
 
-            logger.info(""{} connection established, version = {}, framing = {}, encryption = {}"",
+            logger.info(""{} messaging connection established, version = {}, framing = {}, encryption = {}"",

Review comment:
       personal preference, I prefer the old




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jul/20 22:43;githubbot;600","dcapwell commented on a change in pull request #698:
URL: https://github.com/apache/cassandra/pull/698#discussion_r463319155



##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -237,6 +239,29 @@ static String encryptionLogStatement(EncryptionOptions options)
         return ""enabled ("" + encryptionType + ')';
     }
 
+    static String encryptionLogStatement(Channel channel, EncryptionOptions options)
+    {
+        if (options == null)
+            return ""disabled"";
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(""enabled (factory="");
+        sb.append(SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"");
+
+        SslHandler sslHandler = channel.pipeline().get(SslHandler.class);

Review comment:
       you pass null to channel but don't have any checks against it; in testing this patch found a case where this causes a NPE
   
   ```
   ERROR [main] 2020-07-30 16:00:56,584 CassandraDaemon.java:800 - Exception encountered during startup
   java.lang.NullPointerException: null
     at org.apache.cassandra.net.SocketFactory.encryptionLogStatement(SocketFactory.java:251)
     at org.apache.cassandra.net.InboundConnectionSettings.toString(InboundConnectionSettings.java:87)
     at java.base/java.lang.String.valueOf(String.java:2951)
     at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
     at org.apache.cassandra.net.InboundConnectionInitiator.bind(InboundConnectionInitiator.java:129)
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jul/20 23:06;githubbot;600","jonmeredith commented on a change in pull request #698:
URL: https://github.com/apache/cassandra/pull/698#discussion_r463329196



##########
File path: src/java/org/apache/cassandra/net/InboundConnectionInitiator.java
##########
@@ -445,11 +454,11 @@ void setupMessagingPipeline(InetAddressAndPort from, int useMessagingVersion, in
             InboundMessageHandler handler =
                 settings.handlers.apply(from).createHandler(frameDecoder, initiate.type, pipeline.channel(), useMessagingVersion);
 
-            logger.info(""{} connection established, version = {}, framing = {}, encryption = {}"",
+            logger.info(""{} messaging connection established, version = {}, framing = {}, encryption = {}"",

Review comment:
       It's to disambiguate between streaming connections so I'd prefer to keep it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jul/20 23:40;githubbot;600","jonmeredith commented on a change in pull request #698:
URL: https://github.com/apache/cassandra/pull/698#discussion_r463342965



##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -237,6 +239,29 @@ static String encryptionLogStatement(EncryptionOptions options)
         return ""enabled ("" + encryptionType + ')';
     }
 
+    static String encryptionLogStatement(Channel channel, EncryptionOptions options)
+    {
+        if (options == null)
+            return ""disabled"";
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(""enabled (factory="");
+        sb.append(SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"");
+
+        SslHandler sslHandler = channel.pipeline().get(SslHandler.class);

Review comment:
       fixed




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jul/20 00:29;githubbot;600","dcapwell commented on a change in pull request #698:
URL: https://github.com/apache/cassandra/pull/698#discussion_r463357930



##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -237,6 +240,30 @@ static String encryptionLogStatement(EncryptionOptions options)
         return ""enabled ("" + encryptionType + ')';
     }
 
+    static String encryptionLogStatement(Channel channel, EncryptionOptions options)
+    {
+        if (options == null)
+            return ""disabled"";
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(""enabled (factory="");
+        sb.append(SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"");
+
+        final ChannelPipeline pipeline = channel.pipeline();

Review comment:
       this doesn't fix the issue
   
   ```
   public String toString()
        {
            return format(""address: (%s), nic: %s, encryption: %s"",
   -                       bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(encryption));
   +                       bindAddress, FBUtilities.getNetworkInterface(bindAddress.address), SocketFactory.encryptionLogStatement(null, encryption));
        }
   ```
   
   The toString method now passes null as the channel, so the channel itself is null




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jul/20 01:26;githubbot;600","jonmeredith commented on a change in pull request #698:
URL: https://github.com/apache/cassandra/pull/698#discussion_r463709802



##########
File path: src/java/org/apache/cassandra/net/SocketFactory.java
##########
@@ -237,6 +240,30 @@ static String encryptionLogStatement(EncryptionOptions options)
         return ""enabled ("" + encryptionType + ')';
     }
 
+    static String encryptionLogStatement(Channel channel, EncryptionOptions options)
+    {
+        if (options == null)
+            return ""disabled"";
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(""enabled (factory="");
+        sb.append(SSLFactory.openSslIsAvailable() ? ""openssl"" : ""jdk"");
+
+        final ChannelPipeline pipeline = channel.pipeline();

Review comment:
       Teach me to fix things at the end of the day.  Pushed up a fix. The silver lining is that it made me look a bit more carefully about the message and I think the current one is misleading so the fix improves the `toString() output to be more useful.
   
   I've updated the JIRA with more details to get more visibility on it.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jul/20 16:28;githubbot;600","jonmeredith commented on pull request #698:
URL: https://github.com/apache/cassandra/pull/698#issuecomment-671960677


   Merged as c9b41c1f8ad03719918c4d3c29719056ae6b3995


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Aug/20 13:53;githubbot;600","jonmeredith closed pull request #698:
URL: https://github.com/apache/cassandra/pull/698


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Aug/20 13:53;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Code,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 05 13:42:52 UTC 2020,,,,,,,All,,,,,,"0|z0h6fk:",9223372036854775807,,,,aleksey,dcapwell,,,Normal,,4.0-alpha1,,,"[c9b41c1f8ad03719918c4d3c29719056ae6b3995|https://github.com/apache/cassandra/commit/c9b41c1f8ad03719918c4d3c29719056ae6b3995]",,,,,,,,,"I started up a local CCM instance using the guide from Nate on [TLP Blog|https://thelastpickle.com/blog/2015/09/30/hardening-cassandra-step-by-step-part-1-server-to-server.html] to configure SSL, then checked the messages were sane & formatted.",,,,,"28/Jul/20 00:54;jmeredithco;Patch almost ready for submission, here are some sample log output lines.

Example of SSL enabled messaging connections being established
{code:java}
INFO  [Messaging-EventLoop-3-11] 2020-07-27 16:36:14,746 InboundConnectionInitiator.java:241 - connection from peer /127.0.0.1:62955 to /127.0.0.1:7000, protocol = TLSv1.2
INFO  [Messaging-EventLoop-3-12] 2020-07-27 16:36:14,747 InboundConnectionInitiator.java:241 - connection from peer /127.0.0.1:62956 to /127.0.0.1:7000, protocol = TLSv1.2
INFO  [Messaging-EventLoop-3-12] 2020-07-27 16:36:14,761 InboundConnectionInitiator.java:457 - 127.0.0.3:7000(127.0.0.1:62956)->127.0.0.1:7000-LARGE_MESSAGES-7dc6697c messaging connection established, version = 1
2, framing = CRC, encryption = enabled (factory=openssl;protocol=TLSv1.2;cipher=TLS_RSA_WITH_AES_256_CBC_SHA)
INFO  [Messaging-EventLoop-3-11] 2020-07-27 16:36:14,761 InboundConnectionInitiator.java:457 - 127.0.0.3:7000(127.0.0.1:62955)->127.0.0.1:7000-SMALL_MESSAGES-24cc4a4e messaging connection established, version = 12, framing = CRC, encryption = enabled (factory=openssl;protocol=TLSv1.2;cipher=TLS_RSA_WITH_AES_256_CBC_SHA)
{code}
And establishing streaming connections
{code:java}
INFO  [Messaging-EventLoop-3-12] 2020-07-27 16:40:27,516 InboundConnectionInitiator.java:396 - 127.0.0.1:7000(127.0.0.3:63208)->127.0.0.3:7000-STREAMING-64b53f77 streaming connection established, version = 12, fr
aming = UNPROTECTED, encryption = enabled (factory=openssl;protocol=TLSv1.2;cipher=TLS_RSA_WITH_AES_256_CBC_SHA)
{code};;;","28/Jul/20 01:13;jmeredithco;[Branch|https://github.com/jonmeredith/cassandra/tree/c15980]
[PR|https://github.com/apache/cassandra/pull/698]
[CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=c15980];;;","30/Jul/20 23:11;dcapwell;Sorry for the delay, been trying to validate.

In 3.11 I don't see any of these logs, so this is local to 4.0 and wouldn't regress our logging.

It took a bit to replicate the issue, as the document linked from Nate doesn't cause these logs to happen; in fact ssl doesn't happen (is this a known issue?).

Here are the steps I took to replicate

{code}
Based off https://thelastpickle.com/blog/2015/09/30/hardening-cassandra-step-by-step-part-1-server-to-server.html

```
# create non-ssl cluster
ccm create -n 3 -v 3.11.6 sslverify-311
```

Setup the certs

```
cat <<EOF > gen_ca_cert.conf
[ req ]
distinguished_name     = req_distinguished_name
prompt                 = no
output_password        = mypass
default_bits           = 2048

[ req_distinguished_name ]
C                      = US
ST                     = TX
L                      = Austin
O                      = TLP
OU                     = TestCluster
CN                     = TestClusterMasterCA
emailAddress           = info@thelastpickle.com
EOF
openssl req -config gen_ca_cert.conf -new -x509 -keyout ca-key -out ca-cert -days 365
# should now have ca-cert and ca-key
# validate they work
openssl x509 -in ca-cert -text -noout

# setup the public/private keys
setjdk 8
keytool -genkeypair -keyalg RSA -alias node1 -keystore node1-server-keystore.jks -storepass awesomekeypass -keypass awesomekeypass -validity 365 -keysize 2048 -dname ""CN=node1, OU=SSL-verification-cluster, O=TheLastPickle, C=US""
keytool -genkeypair -keyalg RSA -alias node2 -keystore node2-server-keystore.jks -storepass awesomekeypass -keypass awesomekeypass -validity 365 -keysize 2048 -dname ""CN=node2, OU=SSL-verification-cluster, O=TheLastPickle, C=US""
keytool -genkeypair -keyalg RSA -alias node3 -keystore node3-server-keystore.jks -storepass awesomekeypass -keypass awesomekeypass -validity 365 -keysize 2048 -dname ""CN=node3, OU=SSL-verification-cluster, O=TheLastPickle, C=US""
# should now have node1-server-keystore.jks node2-server-keystore.jks and node3-server-keystore.jks
# validate they work
keytool -list -v -keystore node1-server-keystore.jks -storepass awesomekeypass

keytool -keystore node1-server-keystore.jks -alias node1 -certreq -file node1_cert_sr -keypass awesomekeypass -storepass awesomekeypass
keytool -keystore node2-server-keystore.jks -alias node2 -certreq -file node2_cert_sr -keypass awesomekeypass -storepass awesomekeypass
keytool -keystore node3-server-keystore.jks -alias node3 -certreq -file node3_cert_sr -keypass awesomekeypass -storepass awesomekeypass
# should now have node1_cert_sr and node2_cert_sr node3_cert_sr

# sign
openssl x509 -req -CA ca-cert -CAkey ca-key -in node1_cert_sr -out node1_cert_signed -days 365 -CAcreateserial -passin pass:mypass
openssl x509 -req -CA ca-cert -CAkey ca-key -in node2_cert_sr -out node2_cert_signed -days 365 -CAcreateserial -passin pass:mypass
openssl x509 -req -CA ca-cert -CAkey ca-key -in node3_cert_sr -out node3_cert_signed -days 365 -CAcreateserial -passin pass:mypass
should have node1_cert_signed node2_cert_signed node3_cert_signed and ca-cert.srl

# add to key store
keytool -keystore node1-server-keystore.jks -alias CARoot -import -file ca-cert -noprompt -keypass awesomekeypass -storepass awesomekeypass
keytool -keystore node2-server-keystore.jks -alias CARoot -import -file ca-cert -noprompt -keypass awesomekeypass -storepass awesomekeypass
keytool -keystore node3-server-keystore.jks -alias CARoot -import -file ca-cert -noprompt -keypass awesomekeypass -storepass awesomekeypass
should have node1-server-keystore.jks node2-server-keystore.jks and node3-server-keystore.jks

keytool -keystore node1-server-keystore.jks -alias node1 -import -file node1_cert_signed -keypass awesomekeypass -storepass awesomekeypass
keytool -keystore node2-server-keystore.jks -alias node2 -import -file node2_cert_signed -keypass awesomekeypass -storepass awesomekeypass
keytool -keystore node3-server-keystore.jks -alias node3 -import -file node3_cert_signed -keypass awesomekeypass -storepass awesomekeypass

# Build the trust store
keytool -keystore generic-server-truststore.jks -alias CARoot -importcert -file ca-cert -keypass mypass -storepass truststorepass -noprompt
# should have generic-server-truststore.jks
```
```
ccm create -n 3 sslverify-trunk --install-dir=$HOME/src/github/apache/cassandra-trunk
cluster=""sslverify-trunk""
cp node1-server-keystore.jks ~/.ccm/${cluster}/node1/conf/server-keystore.jks
cp node2-server-keystore.jks ~/.ccm/${cluster}/node2/conf/server-keystore.jks
cp node3-server-keystore.jks ~/.ccm/${cluster}/node3/conf/server-keystore.jks
cp generic-server-truststore.jks ~/.ccm/${cluster}/node1/conf/server-truststore.jks
cp generic-server-truststore.jks ~/.ccm/${cluster}/node2/conf/server-truststore.jks
cp generic-server-truststore.jks ~/.ccm/${cluster}/node3/conf/server-truststore.jks
# validate they are there
ls -l ~/.ccm/$cluster/node?/conf/*.jks

# update the yaml to be (replace $USER, and $NODE with node<num>, ccm won't)
# server_encryption_options:
#   internode_encryption: all
#   keystore: /Users/$USER/.ccm/sslverify-trunk/$NODE/conf/server-keystore.jks
#   keystore_password: awesomekeypass
#   truststore: /Users/$USER/.ccm/sslverify-trunk/$NODE/conf/server-truststore.jks
#   truststore_password: truststorepass
#   #protocol: TLS
#   algorithm: SunX509
#   store_type: JKS
#   cipher_suites: [TLS_RSA_WITH_AES_256_CBC_SHA]
#   require_client_auth: true
#   # not from nates doc
#   enable_legacy_ssl_storage_port: true
#   enabled: true
#   optional: false
#   protocol: TLSv1.2
vim ~/.ccm/$cluster/node?/conf/cassandra.yaml
```

Now to test Jon's code

```
ccm create -n 3 sslverify-c15980 --install-dir=$HOME/src/github/apache/team/jonmeredith
cluster=""sslverify-c15980""
cp node1-server-keystore.jks ~/.ccm/${cluster}/node1/conf/server-keystore.jks
cp node2-server-keystore.jks ~/.ccm/${cluster}/node2/conf/server-keystore.jks
cp node3-server-keystore.jks ~/.ccm/${cluster}/node3/conf/server-keystore.jks
cp generic-server-truststore.jks ~/.ccm/${cluster}/node1/conf/server-truststore.jks
cp generic-server-truststore.jks ~/.ccm/${cluster}/node2/conf/server-truststore.jks
cp generic-server-truststore.jks ~/.ccm/${cluster}/node3/conf/server-truststore.jks
# validate they are there
ls -l ~/.ccm/$cluster/node?/conf/*.jks

# update the yaml to be (replace $USER, and $NODE with node<num>, ccm won't)
# server_encryption_options:
#   internode_encryption: all
#   keystore: /Users/$USER/.ccm/sslverify-trunk/$NODE/conf/server-keystore.jks
#   keystore_password: awesomekeypass
#   truststore: /Users/$USER/.ccm/sslverify-trunk/$NODE/conf/server-truststore.jks
#   truststore_password: truststorepass
#   #protocol: TLS
#   algorithm: SunX509
#   store_type: JKS
#   cipher_suites: [TLS_RSA_WITH_AES_256_CBC_SHA]
#   require_client_auth: true
#   # not from nates doc
#   enable_legacy_ssl_storage_port: true
#   enabled: true
#   optional: false
#   protocol: TLSv1.2
vim ~/.ccm/$cluster/node?/conf/cassandra.yaml
```
{code}

Overall LGTM, left a few small comments in the PR.;;;","31/Jul/20 00:37;jmeredithco;Thanks for the review, I've fixed the NPE you found and explained that I updated the message with the type of connection.;;;","31/Jul/20 16:32;jmeredithco;While testing the fix-of-the-fix, I noticed that Listen message is misleading.  It only output disabled if the encryption options were null, however encryption could still be disabled by configuration (I noticed when I started the server up with enabled: false). For the ServerEncryptionOptions it's also possible to be disabled depending on the internode_encryption but inbound doesn't care about that).

encryption off.

{code}
INFO  [main] 2020-07-31 10:06:20,234 InboundConnectionInitiator.java:129 - Listening on address: (127.0.0.1:7000), nic: lo0, encryption: disabled
{code}

encryption enabled, NOT optional

{code}
INFO  [main] 2020-07-31 10:12:26,417 InboundConnectionInitiator.java:129 - Listening on address: (127.0.0.1:7001), nic: lo0, encryption: enabled (factory=openssl)
{code}

encryption enabled, optional, enable legacy (both listens shown here)

{code}
INFO  [main] 2020-07-31 10:14:49,407 InboundConnectionInitiator.java:129 - Listening on address: (127.0.0.1:7001), nic: lo0, encryption: enabled (factory=openssl)
INFO  [main] 2020-07-31 10:14:49,495 InboundConnectionInitiator.java:129 - Listening on address: (127.0.0.1:7000), nic: lo0, encryption: optional (factory=openssl)
{code}

encryption enabled. optional, disable legacy

{code}
INFO  [main] 2020-07-31 10:17:37,736 InboundConnectionInitiator.java:129 - Listening on address: (127.0.0.1:7000), nic: lo0, encryption: optional (factory=openssl)
{code}

with an optionally encrypted inbound connection logged as

{code}
INFO  [Messaging-EventLoop-3-9] 2020-07-31 10:17:44,067 InboundConnectionInitiator.java:457 - 127.0.0.3:7000(127.0.0.1:60610)->127.0.0.1:7000-SMALL_MESSAGES-75d10ff2 messaging connection established, version = 12, framing = CRC, encryption = optional (factory=openssl;protocol=TLSv1.2;cipher=TLS_RSA_WITH_AES_256_CBC_SHA)
{code}

and an plaintext inbound connection logged as

{code}
INFO  [Messaging-EventLoop-3-1] 2020-07-31 10:26:00,047 InboundConnectionInitiator.java:457 - 127.0.0.3:7000(127.0.0.1:60754)->127.0.0.1:7000-URGENT_MESSAGES-f3c595f8 messaging connection established, version = 12, framing = CRC, encryption = disabled
{code};;;","03/Aug/20 19:19;dcapwell;LGTM +1;;;","05/Aug/20 13:42;aleksey;LGTM. Committed with unused imports cleaned up and some minor formatting changes made, to trunk as [c9b41c1f8ad03719918c4d3c29719056ae6b3995|https://github.com/apache/cassandra/commit/c9b41c1f8ad03719918c4d3c29719056ae6b3995].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect parsing of the timestamp with less than 3 digits in the milliseconds,CASSANDRA-15976,13319100,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,alexott,alexott,24/Jul/20 06:26,23/Mar/22 14:33,13/Jul/23 08:39,13/Aug/20 21:20,4.0,4.0-beta2,,,,CQL/Interpreter,,,,0,,,,"(tested on 4.0-beta1, but should be in all versions)

Right now, Cassandra incorrectly handles timestamps with less than 3 digits in the milliseconds part.  Timestamps (valid from the Java point of view (see below output in Scala) are either rejected (if we have 1 digit only), or incorrectly parsed when 2 digits are specified:

{noformat}
cqlsh> create table test.tm (id int primary key, tm timestamp);
cqlsh> insert into test.tm(id, tm) values (2, '2020-07-24T10:00:01.2Z');
InvalidRequest: Error from server: code=2200 [Invalid query] message=""Unable to coerce '2020-07-24T10:00:01.2Z' to a formatted date (long)""
cqlsh> insert into test.tm(id, tm) values (1, '2020-07-24T10:00:01.12Z');
cqlsh> select * from test.tm;

 id | tm
----+---------------------------------
  1 | 2020-07-24 10:00:01.012000+0000

(1 rows)
{noformat}

Checking with Instant:

{noformat}
scala> java.time.Instant.parse(""2020-07-24T10:00:01.12Z"")
res0: java.time.Instant = 2020-07-24T10:00:01.120Z
scala> java.time.Instant.parse(""2020-07-24T10:00:01.2Z"")
res1: java.time.Instant = 2020-07-24T10:00:01.200Z
{noformat}

Imho it should be fixed (Cc: [~aholmber])",,aholmber,alexott,brandon.williams,e.dimitrova,jeromatron,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17467,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,,Thu Aug 13 21:21:15 UTC 2020,,,,,,,All,,,,,,"0|z0h5mo:",9223372036854775807,,,,brandon.williams,,,,Normal,,2.2.0,,,https://github.com/apache/cassandra/commit/517d3ecceee737dffa46c47c351a43092fd4a7ba,,,,,,,,,"Unit tests were expanded and made more rigorous.

 

Doc: may need to visit CQL timestamp discussion and see if there is any mention of this limitation.",,,,,"11/Aug/20 21:14;aholmber;The the bug seems to be with DateUtils.parseStrictly [here|[https://github.com/apache/cassandra/blob/54ebb19720225e176bc93e6dbc9e8943fa5e3bfc/src/java/org/apache/cassandra/serializers/TimestampSerializer.java#L159]].

There is no format pattern for single digit precision, which is why parsing fails. Confusingly there is also no pattern for two digits, but parsing succeeds with the [three digit pattern|[https://github.com/apache/cassandra/blob/54ebb19720225e176bc93e6dbc9e8943fa5e3bfc/src/java/org/apache/cassandra/serializers/TimestampSerializer.java#L79]]

Even with one- and two-digit patterns added, the parsing ""succeeds"" but comes back with the incorrect value as shown in the description.;;;","11/Aug/20 21:29;aholmber;[potential solution|https://github.com/apache/cassandra/compare/trunk...aholmberg:CASSANDRA-15976]

I first expanded unit tests to characterize existing parsing, and also to actually validate parsed values.
The patch introduces DateTimeFormatter for parsing internally. I verified with some basic local microbenchmarks that this parsing is also much faster – up to 10x depending on the inputs.;;;","12/Aug/20 17:20;brandon.williams;I like this solution, but it broke a few tests (the tests are now at fault, I imagine): https://ci-cassandra.apache.org/job/Cassandra-devbranch/237/;;;","12/Aug/20 20:15;aholmber;Thanks for running that. I triggered Circle but didn't have time to go look for results.
I'll look into the failing tests some time this week.;;;","13/Aug/20 16:01;aholmber;Some of these are because I changed an error message slightly, but there is also this instance failing to parse """"2017-012-03 04:05+0000"". Note the extra zero in the month field. Do you think that was intentional? Do we want to accept malformed dates like that?;;;","13/Aug/20 16:30;brandon.williams;Way back in 2f2b2ae607b2531836c805da913ca2e545162275 I recall fixing some wonky dates, though not specifically the three digit month.  I don't know why we'd support that, and I'm fine with saying we don't support that in 4.0 in case anyone is actually doing that for some strange reason.;;;","13/Aug/20 17:54;aholmber;ok. Sorry for the false start on this.

The branch linked above is updated with test tweaks on one code fix.

There is also a [dtest branch|https://github.com/apache/cassandra-dtest/compare/master...aholmberg:CASSANDRA-15976?expand=1] removing some oddly formatted dates.;;;","13/Aug/20 21:21;brandon.williams;CI looks good now: https://ci-cassandra.apache.org/job/Cassandra-devbranch/242/ (with your dtest branch)

Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade of custom 3.0 version fails with custom 4.0 caused by version parsing logic,CASSANDRA-15973,13319002,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,23/Jul/20 17:12,03/Jan/21 17:02,13/Jul/23 08:39,23/Jul/20 21:24,4.0,4.0-beta2,,,,Build,,,,0,,,,"In 3.0 and earlier, custom versions could have an extra digit and could have multiple pre release tags separated by -, after upgrading to 4.0 these custom versions no longer are allowed and fail different parts of the code, any place which now uses CassandraVersion.

The issue is that version was just a String before, so the only parsing rules were controlled by the client, now CassandraVersion is used which is more restrictive.

To help out, we should allow a ""hot fix"" digit, and preRelease should allow multiple -",,dcapwell,e.dimitrova,jeromatron,jmeredithco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Workload Replay,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 23 21:24:43 UTC 2020,,,,,,,All,,,,,,"0|z0h50w:",9223372036854775807,,,,brandon.williams,jmeredithco,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/57a2a8613d2595b8650c24ef1cf3bb0055202409,,,,,,,,,unit tests + manual test upgrade,,,,,"23/Jul/20 20:18;jmeredithco;+1 - looks good to me and I really appreciate the QT test.  With regards to removing the dead code findSupportingVersion and isSupportedBy, I checked the Cassandra & Python Dtest and did a quick search of GitHub itself and couldn't find anything. Now all we need is a committer.;;;","23/Jul/20 21:24;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3.x fails to start if commit log has range tombstones from a column which is also deleted,CASSANDRA-15970,13318614,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,22/Jul/20 05:18,29/Jul/20 01:09,13/Jul/23 08:39,29/Jul/20 01:09,3.0.22,3.11.8,,,,Legacy/Local Write-Read Paths,Local/Commit Log,,,0,,,,"Cassandra crashes with the following exception

{code}
ERROR [node1_isolatedExecutor:1] node1 2020-07-21 18:59:39,048 JVMStabilityInspector.java:102 - Exiting due to error while processing commit log during initialization.
org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException: Unexpected error deserializing mutation; saved to /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/mutation6239873170066752296dat.  This may be caused by replaying a mutation against a table with the same name but incompatible schema.
	at org.apache.cassandra.db.commitlog.CommitLogReplayer.handleReplayError(CommitLogReplayer.java:731) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLogReplayer.replayMutation(CommitLogReplayer.java:656) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLogReplayer.replaySyncSection(CommitLogReplayer.java:609) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(CommitLogReplayer.java:493) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(CommitLogReplayer.java:189) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLog.recover(CommitLog.java:170) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLog.recover(CommitLog.java:151) [dtest-3.0.21.jar:na]
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$7(Instance.java:535) [dtest-3.0.21.jar:na]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_242]
	at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83) ~[dtest-3.0.21.jar:na]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_242]
Caused by: java.lang.NullPointerException: null
	at org.apache.cassandra.db.ClusteringComparator.validate(ClusteringComparator.java:206) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.partitions.PartitionUpdate.validate(PartitionUpdate.java:494) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.commitlog.CommitLogReplayer.replayMutation(CommitLogReplayer.java:629) [dtest-3.0.21.jar:na]
	... 12 common frames omitted
{code}

If you drain in 2.2 before upgrade, you get the following

{code}
ERROR [SharedPool-Worker-1] node1 2020-07-21 22:17:25,661 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[SharedPool-Worker-1,5,node1]
java.lang.RuntimeException: java.lang.NullPointerException
	at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2537) ~[dtest-3.0.21.jar:na]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_242]
	at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:109) [dtest-3.0.21.jar:na]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_242]
Caused by: java.lang.NullPointerException: null
	at org.apache.cassandra.db.ClusteringComparator.compare(ClusteringComparator.java:131) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.compareNextTo(UnfilteredDeserializer.java:391) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.handlePreSliceData(SSTableIterator.java:105) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.hasNextInternal(SSTableIterator.java:164) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:336) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1.hasNext(ClusteringIndexNamesFilter.java:157) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.rows.UnfilteredRowIterator.isEmpty(UnfilteredRowIterator.java:70) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:952) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:679) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:656) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:491) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:418) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1793) ~[dtest-3.0.21.jar:na]
	at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2533) ~[dtest-3.0.21.jar:na]
	... 4 common frames omitted
{code}

The issue found was as follows

* The schema had a collection type in 2.1
* a collection range tombstone happened in 2.1
* the row only had the RT, no other cells
* the collection was dropped in 2.1
* 3.0 detected the collection was deleted and ignored the cell
* 3.0 produced an empty row with a null clustering key (since we skipped the RT)",,bdeggleston,dcapwell,jeromatron,sumanth.pasupuleti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Workload Replay,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 29 01:09:40 UTC 2020,,,,,,,All,,,,,,"0|z0h2mw:",9223372036854775807,,,,bdeggleston,brandon.williams,,,Critical,,3.0.0,,,https://github.com/apache/cassandra/commit/4b0c0817fa7b8e12a8e6cf96a9a2b67f36b449e8,,,,,,,,,upgrade dtest,,,,,"22/Jul/20 05:20;dcapwell;Marked as 3.x only since this is upgrading from 2.x.  I assume the ""fix"" will be local to 3.x and won't impact 4.0, but if wrong will need to mark as 4.0 as well.

I am also ok if anyone wants to take this from me!;;;","22/Jul/20 05:22;dcapwell;The dtest above needs the following JIRA to run: CASSANDRA-15969, CASSANDRA-15968, CASSANDRA-15967;;;","25/Jul/20 03:59;dcapwell;thrift was added, now waiting on drain.;;;","28/Jul/20 17:38;dcapwell;CI Links
2.2: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15970-2.2
3.0: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15970-3.0
3.11: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15970-3.11
trunk: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15970


Tests failed with the following:

2.2:
https://issues.apache.org/jira/browse/CASSANDRA-15985 (python dtest TestCqlsh added enable_scripted_user_defined_functions which breaks on 2.2)
https://issues.apache.org/jira/browse/CASSANDRA-15984 (thrift_hsha_test.TestThriftHSHA test_closing_connections is broken on 3.0 and 3.11)

3.0:
https://issues.apache.org/jira/browse/CASSANDRA-15984 (thrift_hsha_test.TestThriftHSHA test_closing_connections is broken on 3.0 and 3.11)

3.11:
https://issues.apache.org/jira/browse/CASSANDRA-15881 (Flaky unit test: SASIIndexTest.testInsertingIncorrectValuesIntoAgeIndex) - not actually, same class but different test (testIndexMemtableSwitching); don't see a JIRA for this test
https://issues.apache.org/jira/browse/CASSANDRA-15984 (thrift_hsha_test.TestThriftHSHA test_closing_connections is broken on 3.0 and 3.11)

Trunk:
https://issues.apache.org/jira/browse/CASSANDRA-15981 (jvm-dtests crash on java 11)
https://issues.apache.org/jira/browse/CASSANDRA-15992 (Fix flaky python dtest test_13595 - consistency_test.TestConsistency)
https://issues.apache.org/jira/browse/CASSANDRA-15993 (Fix flaky python dtest test_view_metadata_cleanup - materialized_views_test.TestMaterializedViews);;;","28/Jul/20 17:43;brandon.williams;bq. Marked as 3.x only since this is upgrading from 2.x.

I'm confused, why is there a 2.2 patch?  Otherwise, LGTM.
 
;;;","28/Jul/20 17:59;dcapwell;Thanks [~brandon.williams] for the review!

bq. I'm confused, why is there a 2.2 patch?

This line https://github.com/dcapwell/cassandra/commit/52005e0061ea9ea8bf9c6ea782c75c39f23c0569#diff-31dfa99c0e891a6d048dd82581a3e6eeR69

{code}
// write table to pk=1
// NOTE: because jvm-dtest doesn't support collections in the execute interface (see CASSANDRA-15969)
// need to encode to a ByteBuffer first
coordinator.execute(withKeyspace(""INSERT INTO %s.tbl (pk, tables) VALUES (?, ?)""), ConsistencyLevel.ONE, 1, MAP_TYPE.decompose(ImmutableMap.of(1, 1)));
{code}

For the upgrade test, we run the inserts in 2.2.  jvm-dtest doesn't support collection types, so need to convert to a ByteBuffer.  jvm-dtest uses org.apache.cassandra.utils.ByteBufferUtil#objectToBytes to go from Object -> ByteBuffer, and that method didn't support ByteBuffer -> ByteBuffer; this is the reason to update 2.2;;;","28/Jul/20 18:26;brandon.williams;I see. +1;;;","28/Jul/20 18:48;dcapwell;upgrade test on 3.11 is flaky due to timeouts, I will refactor it so each test case is its own class =(;;;","28/Jul/20 21:57;bdeggleston;+1;;;","29/Jul/20 01:09;dcapwell;not tagging 2.2 or trunk since the changes are utilities and keeping things in-sync; the bug was in 3.x so fixed version is only 3.x

2.2 CI: https://app.circleci.com/pipelines/github/dcapwell/cassandra/359/workflows/83812acb-5ae9-4cdd-9dc2-e054ab2169a9
Green
Disabled python dtest

3.0 CI: https://app.circleci.com/pipelines/github/dcapwell/cassandra/360/workflows/8e93a655-b66e-4bf2-8866-5f9a46487763
Yellow
* https://issues.apache.org/jira/browse/CASSANDRA-15984 (thrift_hsha_test.TestThriftHSHA test_closing_connections is broken on 3.0 and 3.11)
* dropColumns - org.apache.cassandra.distributed.upgrade.MigrateDropColumnsTest.  This is expected as the yaml used didn't replace the GitHub links, prior to the rebase it was working in https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15970-3.0 
* https://issues.apache.org/jira/browse/CASSANDRA-15994 

3.11 CI: https://app.circleci.com/pipelines/github/dcapwell/cassandra/361/workflows/3a42fa45-1f60-4c95-86a4-15a6773e384e
Yellow
* https://issues.apache.org/jira/browse/CASSANDRA-15984 (thrift_hsha_test.TestThriftHSHA test_closing_connections is broken on 3.0 and 3.11)
* dropColumns - org.apache.cassandra.distributed.upgrade.MigrateDropColumnsTest.  This is expected as the yaml used didn't replace the GitHub links, prior to the rebase it was working in https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15970-3.11 
* https://issues.apache.org/jira/browse/CASSANDRA-15995 
* https://issues.apache.org/jira/browse/CASSANDRA-15996 

Trunk CI: https://app.circleci.com/pipelines/github/dcapwell/cassandra/362/workflows/c04020b0-d13e-4e18-ae27-0277e636b73d
Yellow
* https://issues.apache.org/jira/browse/CASSANDRA-15958 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test StreamingInboundHandlerTest channelRead_Normal,CASSANDRA-15965,13318551,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,21/Jul/20 19:28,03/Jan/21 17:03,13/Jul/23 08:39,16/Sep/20 21:35,4.0,4.0-beta3,,,,Test/unit,,,,0,,,,"channelRead_Normal - org.apache.cassandra.streaming.async.StreamingInboundHandlerTest

{code}
junit.framework.AssertionFailedError: expected:<8> but was:<0>
	at org.apache.cassandra.streaming.async.StreamingInboundHandlerTest.channelRead_Normal(StreamingInboundHandlerTest.java:98)
{code}

Failed build: https://app.circleci.com/pipelines/github/dcapwell/cassandra/298/workflows/e3296f33-2289-401c-8fc8-a7f786e3692a/jobs/1445",,aholmber,dcapwell,e.dimitrova,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16131,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 16 21:35:21 UTC 2020,,,,,,,All,,,,,,"0|z0h294:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/68aca1064be12697e5ff7f56b50e6808f5d5d020,,,,,,,,,Flaky test is removed.,,,,,"30/Jul/20 15:20;brandon.williams;I was able to reproduce this in only 59 runs the first time, but after adding some debug logging in AsyncStreamingInputPlus.unsafeAvailable, I'm unable to repro in thousands of runs. There is clearly some kind of timing issue here, but I'm not familiar enough with Netty to know exactly where.;;;","15/Sep/20 21:44;aholmber;[This|https://github.com/apache/cassandra/blob/07f8db31ae10a3883c06194642354feb711e361c/test/unit/org/apache/cassandra/streaming/async/StreamingInboundHandlerTest.java#L98] ""unsafe"" assertion is racing with [this|https://github.com/apache/cassandra/blob/07f8db31ae10a3883c06194642354feb711e361c/src/java/org/apache/cassandra/streaming/async/StreamingInboundHandler.java#L164-L172] background read.

My recommendation is to remove the test. It's testing so very little (we can queue a message), and so fundamental -- I believe we have quite a bit of coverage for this elsewhere.

While looking at this I discovered a possible NPE in StreamMessage type lookups. The lookup table had a null value in the zero index. I'm including a potential fix for that.

[Patch|https://github.com/apache/cassandra/compare/trunk...aholmberg:CASSANDRA-15965]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-15965];;;","16/Sep/20 14:56;brandon.williams;I'm fine with removing the test,  but for the NPE can we add one?;;;","16/Sep/20 16:19;aholmber;Yes. And frankly I'm embarrassed the first PR didn't include one. I think I had it in my head that I was just tidying existing functionality. I'll update today.;;;","16/Sep/20 17:38;aholmber;[added|https://github.com/aholmberg/cassandra/commit/4fa6db0277eee6a28b38ab61d2ac23e55756a018]

Presently trying to figure out why circleci won't create a workflow for this commit.;;;","16/Sep/20 17:43;brandon.williams;[CI|https://ci-cassandra.apache.org/job/Cassandra-devbranch/22/];;;","16/Sep/20 17:59;yifanc;If it is a timing issue in the {{channelRead_Normal}} test, {{Util#spinAssertEquals}} could be an alternative, and the test can be kept. 

Do we want to open a new ticket for fixing the NPE? A bit of trouble, but the new ticket can better describe the goal of the patch. This one just reports a flaky test. ;;;","16/Sep/20 18:13;aholmber;> Util#spinAssertEquals could be an alternative, and the test can be kept. 
It's not a matter of the test thread getting there too early -- it gets there too late and the condition will never be true. By then the buffer has been read.

>Do we want to open a new ticket for fixing the NPE?
In the past we've included production code changes in the flaky test ticket that discovered them. I will open a new ticket if that's needed. lmk. ;;;","16/Sep/20 18:16;brandon.williams;I don't have much preference on new ticket or not; we don't mention test fixes in the changelog, but I'll appropriately put an entry about the NPE fix and we can even rename the ticket.  Or just make another one, whichever.;;;","16/Sep/20 18:46;yifanc;bq. it gets there too late and the condition will never be true.

Thanks for the clarification. Yeah. Spin assert won't help in this case. 


The fix will go into the change log. So either change both the ticket title and description (which seems messy), or just create a new ticket and link to this one, so the context is not lost. ;;;","16/Sep/20 21:35;brandon.williams;Committed the test removal.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky dtest test_dead_sync_initiator - repair_tests.repair_test.TestRepair,CASSANDRA-15963,13318333,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,yifanc,yifanc,20/Jul/20 21:20,09/Apr/22 13:45,13/Jul/23 08:39,21/Sep/20 20:38,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"CI test link. [https://app.circleci.com/pipelines/github/yifan-c/cassandra/78/workflows/e89b96f1-c468-484f-9764-694b64fad95b/jobs/411]
{code:java}
test teardown failure
 Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-127.0.0.1:7000-56da8052] 2020-07-20 19:00:33,545 CassandraEntireSSTableStreamReader.java:145 - [Stream 48a43e80-cabb-11ea-a743-3578c769ed44] Error while reading sstable from stream for table = keyspace1.standard1
 org.apache.cassandra.io.sstable.CorruptSSTableException: Corrupted: /tmp/dtest-4ichr2ha/test/node3/data0/keyspace1/standard1-3b1f65f0cabb11eaa7433578c769ed44/na-1-big-Statistics.db
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.maybeValidateChecksum(MetadataSerializer.java:219)
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:198)
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:129)
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutate(MetadataSerializer.java:226)
 at org.apache.cassandra.db.streaming.CassandraEntireSSTableStreamReader.read(CassandraEntireSSTableStreamReader.java:140)
 at org.apache.cassandra.db.streaming.CassandraIncomingFile.read(CassandraIncomingFile.java:84)
 at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:53)
 at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:38)
 at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:51)
 at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:172)
 at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 at java.lang.Thread.run(Thread.java:748)
 Caused by: java.io.IOException: Checksums do not match for /tmp/dtest-4ichr2ha/test/node3/data0/keyspace1/standard1-3b1f65f0cabb11eaa7433578c769ed44/na-1-big-Statistics.db
 ... 12 common frames omitted, ERROR [Stream-Deserializer-127.0.0.1:7000-56da8052] 2020-07-20 19:00:33,545 CassandraEntireSSTableStreamReader.java:145 - [Stream 48a43e80-cabb-11ea-a743-3578c769ed44] Error while reading sstable from stream for table = keyspace1.standard1
 org.apache.cassandra.io.sstable.CorruptSSTableException: Corrupted: /tmp/dtest-4ichr2ha/test/node3/data0/keyspace1/standard1-3b1f65f0cabb11eaa7433578c769ed44/na-1-big-Statistics.db
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.maybeValidateChecksum(MetadataSerializer.java:219)
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:198)
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:129)
 at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutate(MetadataSerializer.java:226)
 at org.apache.cassandra.db.streaming.CassandraEntireSSTableStreamReader.read(CassandraEntireSSTableStreamReader.java:140)
 at org.apache.cassandra.db.streaming.CassandraIncomingFile.read(CassandraIncomingFile.java:84)
 at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:53)
 at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:38)
 at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:51)
 at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:172)
 at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 at java.lang.Thread.run(Thread.java:748)
 Caused by: java.io.IOException: Checksums do not match for /tmp/dtest-4ichr2ha/test/node3/data0/keyspace1/standard1-3b1f65f0cabb11eaa7433578c769ed44/na-1-big-Statistics.db
... 12 common frames omitted]{code}",,aholmber,brandon.williams,jasonstack,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14151,CASSANDRA-15861,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17541,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Sep 21 21:27:27 UTC 2020,,,,,,,All,,,,,,"0|z0h0wo:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra-dtest/commit/3f34166bbeeac179acdf4874785435ae7442fd77,,,,,,,,,none,,,,,"17/Sep/20 15:14;aholmber;So far this error has not reproduced for me, but the test is flaky having a different exception at teardown:

{noformat}
ERROR [Stream-Deserializer-/127.0.0.2:7000-4f60dcb2] 2020-09-17 14:44:17,917 StreamingInboundHandler.java:205 - [Stream channel: 4f60dcb2] stream operation from /127.0.0.2:7000 failed
java.io.EOFException: null
        at org.apache.cassandra.net.AsyncStreamingInputPlus.reBuffer(AsyncStreamingInputPlus.java:133)
        at org.apache.cassandra.io.util.RebufferingInputStream.readByte(RebufferingInputStream.java:178)
        at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:50)
        at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:172)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)
{noformat};;;","21/Sep/20 20:34;aholmber;Apparently Zhao has already fixed this. I linked the duplicate ticket, which merged Sept 10. There are no failures in [ci-cassandra|https://ci-cassandra.apache.org/job/Cassandra-trunk/10/testReport/dtest.repair_tests.repair_test/TestRepair/test_dead_sync_initiator/history/] since then.;;;","21/Sep/20 20:45;aholmber;Passing along for review this [one-liner|https://github.com/apache/cassandra-dtest/compare/master...aholmberg:CASSANDRA-15963?expand=1] updating the test for the error above.

The error is expected, and caused when the [socket is closed|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/AsyncStreamingInputPlus.java#L133] and the [handler|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/streaming/async/StreamingInboundHandler.java#L205] has not been associated with a session yet. The message text is new for 4.0, but had not been added to the allow list yet.;;;","21/Sep/20 21:24;brandon.williams;Committed, thanks.;;;","21/Sep/20 21:27;yifanc;Thanks for the analysis, Adam. Sounds like we could close the ticket as a dup?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Digest for some queries is different depending whether the data are retrieved from sstable or memtable,CASSANDRA-15962,13318258,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,20/Jul/20 13:19,19/Nov/21 06:53,13/Jul/23 08:39,25/Jan/21 10:50,3.11.10,4.0,4.0-rc1,,,Consistency/Coordination,,,,0,,,,"Not sure into which category should I assign this ticket.

 

Basically when reading using certain column filters, the digest is different depending whether we read from sstable and memtable. This happens on {{trunk}} and {{cassandra-3.11}} branches. However it works properly on {{cassandra-3.0}} branch.

 

I'm attaching a simple test for trunk to demonstrate what I mean. 

 

Please verify my test and my conclusions

 ",,blerer,jasonstack,jlewandowski,kornelpal,mck,slebresne,yifanc,,,,,"jacek-lewandowski opened a new pull request #784:
URL: https://github.com/apache/cassandra/pull/784


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Oct/20 15:45;githubbot;600","jacek-lewandowski closed pull request #702:
URL: https://github.com/apache/cassandra/pull/702


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Nov/21 06:53;githubbot;600","jacek-lewandowski closed pull request #784:
URL: https://github.com/apache/cassandra/pull/784


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Nov/21 06:53;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,CASSANDRA-15640,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16223,,,,,,,,,,,,,"20/Jul/20 13:18;jlewandowski;DigestTest.java;https://issues.apache.org/jira/secure/attachment/13008008/DigestTest.java",,,,,,,,,,,,,,1.0,fcofdezc,jlewandowski,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Feb 02 05:16:08 UTC 2021,,,,,,,All,,,,,,"0|z0h0g0:",9223372036854775807,,,,blerer,slebresne,,,Low,,3.11.0,,,https://github.com/apache/cassandra/commit/a9ab7bde4e35856f407458c341883c4cde7484cd,,,,,,,,,The unit test is in the PR,,,,,"29/Jul/20 14:30;jlewandowski;It looks like in {{BTreeRow}} where have a missing piece in a method:

{code}
public Row filter(ColumnFilter filter, DeletionTime activeDeletion, boolean setActiveDeletionToRow, CFMetaData metadata)
{code}

when the column is not queried, but it is required (cell timestamp. >= row timestamp), we should actually return empty cell rather than a cell with data or no cell at all
;;;","29/Jul/20 15:24;jlewandowski;https://github.com/apache/cassandra/pull/702
;;;","20/Aug/20 14:27;slebresne;The approach lgtm. Just a few remarks:
* Could you include the {{DigestTest}} you wrote into the PR?
* Changes to {{SelectStatement}} (special casing of the filter for super columns on range queries, as is done for slice ones) looks legit, but unrelated and a problem on 3.0. We should either split to another ticket (probably ideal), or have a 3.0 branch with that fix. It would also be good to have a test (one that shows the problem that exists and is fixed by this change).
* Similarly, the change to {{AbstractReadExecutor}} also look legit but unrelated and exists in 3.0. That one is pretty minor since I don't think it has visible consequence, so not worth a ticket of its own, but would nice to include with whatever we do for my previous point so it gets into 3.0.
* BTreeRow#filter: we should reuse/extract the {{!queriedByUserTester.test(column)}} test from the {{isSkippable}} initializer as value for {{shouldSkipValue}} instead of redoing the work by calling {{!filter.fetchedColumnIsQueried(column)}}.
* ComplexColumnData#filter:
** I'd store the result of {{filter.fetchedColumnIsQueried(column))}} in a variable at the beginning of the function, to avoid potentially repeating the call multiple times. Mostly because it'll be imo more readable, but it also avoid bad cases where we repeat it for vary many cells.
** Nit: The {{path != null}} in the {{shouldSkipValue}} initializer is unecessary: cells of complex columns are guaranteed to have a non-null path (see assertion in {{BufferCell}} ctor).
** It would be nice to avoid the repetition of {{cellTest.fetchedCellIsQueried(path)}} as well, readability wise. I'd suggest something like:
   {noformat}
   CellPath path = cell.path();
   boolean isForDropped = ...;
   boolean isShardowed = ...;
   boolean isFetchedCell = cellTester == null || cellTest.fetches(path);
   boolean isQueriedCell = isQueriedColumn && isFetchedCell && (cellTester == null || cellTester.fetchedCellIsQueried(path));
   boolean isSkippableCell = !isFetchedCell || (!isQueriedCell && cell.timestamp() < rowLiveness.timestamp());
   if (isForDropped ||| isShadowed || isSkippable)
       return null;

   // If the cell is only fetched but not queried, we need the cell but never the value. So, when reading from sstables, we
   // ""skip"" the value of such cells as an optimiation (see Cell#deserialize). We _must_ thus do the same here to avoid
   // disrepancies between data coming from memtables or sstables, which would lead to digest mismatches.
   return isQueriedCell ? cell : cell.withSkippedValue();
   {noformat}


With those addressed, if you could set up both a 3.11 branch and a trunk one and run CI, this would be ideal.
;;;","20/Oct/20 07:25;jlewandowski;Thanks [~slebresne], sorry for huge delay, I'm about to apply your remarks and run tests;;;","20/Oct/20 10:09;jlewandowski;{quote}Could you include the DigestTest you wrote into the PR?{quote}

Sure

----

{quote}Changes to SelectStatement (special casing of the filter for super columns on range queries, as is done for slice ones) looks legit, but unrelated and a problem on 3.0. We should either split to another ticket (probably ideal), or have a 3.0 branch with that fix. It would also be good to have a test (one that shows the problem that exists and is fixed by this change).{quote}

{quote}Similarly, the change to AbstractReadExecutor also look legit but unrelated and exists in 3.0. That one is pretty minor since I don't think it has visible consequence, so not worth a ticket of its own, but would nice to include with whatever we do for my previous point so it gets into 3.0.{quote}

I agree that those changes are unrelated, I've removed them

----

{quote}BTreeRow#filter: we should reuse/extract the !queriedByUserTester.test(column) test from the isSkippable initializer as value for shouldSkipValue instead of redoing the work by calling !filter.fetchedColumnIsQueried(column).{quote}

Ok, I've done that

----

{quote}I'd store the result of filter.fetchedColumnIsQueried(column)) in a variable at the beginning of the function, to avoid potentially repeating the call multiple times. Mostly because it'll be imo more readable, but it also avoid bad cases where we repeat it for vary many cells.{quote}

Ok, I've done that

----

{quote}Nit: The path != null in the shouldSkipValue initializer is unecessary: cells of complex columns are guaranteed to have a non-null path (see assertion in BufferCell ctor).{quote}

Ok, I've removed that

----

{quote}It would be nice to avoid the repetition of cellTest.fetchedCellIsQueried(path) as well, readability wise.{quote}

Ok, I've done that
;;;","20/Oct/20 12:29;jlewandowski;Unfortunately, it does not work on trunk (regardless the code is patched or not, the test fails). I need to investigate that more;;;","20/Oct/20 15:47;jlewandowski;Here is the PR against trunk, now it works, additional change in {{BTreeRow:filter}} - added back {{|| !filter.allFetchedColumnsAreQueried()}} to {{mayFilterColumns}} initializer

https://github.com/apache/cassandra/pull/784
;;;","22/Oct/20 19:27;jlewandowski;[~slebresne], removing the unrelated change from {{SelectStatement}} makes {{ThriftIntegrationTest}} fail in two cases;;;","22/Oct/20 20:15;jlewandowski;So I was wondering whether I can see somewhere the problem solved in {{SelectStatement}} without fixing this issue here. I thought {{ThriftIntegrationTest}} should fail anyway if we query SSTable - because we made it fail by making reads from Memtable behave in the same way as reads from SSTable with regard to skipping values. {{ThriftIntegrationTest}} should catch that since it does tests before and after flushing...

and there must have been an oversight in that test since:

{code:java}
    private void flushAll()
    {
        for (String cfName : new String[]{ currentTable(), currentSparseTable(), currentCounterTable() })
            Keyspace.open(KEYSPACE).getColumnFamilyStore(cfName);
    }
{code}

1. does not mention {{currentDenseTable()}} on which the test used to fail after fixing CASSANDRA-15962 without the fix in {{SelectStatement}}
2. it doesn't actually do anything - there is missing {{.forceBlockingFlush()}} call on the retrieved CFS... 

So I fixed that {{flushAll}} method and the failure popped up. This way I may create a separate ticket, show where it fails the tests and what is actually broken (for those who still use Thrift, it may be significant, as it causes skipping cell value in some cases when selecting data)
;;;","06/Jan/21 20:48;kornelpal;Thank you [~jlewandowski] for fixing both issues you have found. Now that CASSANDRA-16223 was committed and released, I wonder whether anything else is blocking this fix in CASSANDRA-15962.;;;","06/Jan/21 21:40;blerer;[~kornelpal] The latest patches have not been reviewed and approed yet. I started the review earlier today and will probably be done tomorrow. Some changes might be needed.;;;","08/Jan/21 16:24;kornelpal;Thank you [~blerer]!;;;","19/Jan/21 18:43;jlewandowski;[~blerer] - could you also review PR against trunk (https://github.com/apache/cassandra/pull/784) - as mentioned above there is one extra change in comparison to 3.x PR (https://github.com/apache/cassandra/pull/784/files#diff-24bf23a6435f78db7cf54aaf773f97c6355653443746a4750bec1cd01c0d4eddR329);;;","25/Jan/21 10:05;blerer;Thanks for the patches [~jlewandowski]
CI results look good. Test failures are known or unrelated.

||Branch|| CI||
|trunk| [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/99/workflows/eb4ec247-9ac7-4864-8a81-f93f1700fdd0], [j11|https://app.circleci.com/pipelines/github/blerer/cassandra/99/workflows/9de3033a-995f-4cd9-9e48-5006ef8bfed8]|
|cassandra-3.11|[j8|https://app.circleci.com/pipelines/github/blerer/cassandra/98/workflows/721d2806-db13-4457-88d6-a7651f2f570a]| ;;;","25/Jan/21 10:50;blerer;Patch merged into 3.11 at a9ab7bde4e35856f407458c341883c4cde7484cd;;;","25/Jan/21 14:01;jlewandowski;Thank you;;;","02/Feb/21 05:16;yifanc;The test failure of ""mixedModeReadColumnSubsetDigestCheck - org.apache.cassandra.distributed.upgrade.MixedModeReadTest"" seems to be related. CASSANDRA-16415;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cassandra.cql3.validation.operations.TTLTest testCapWarnExpirationOverflowPolicy,CASSANDRA-15959,13317504,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dcapwell,dcapwell,17/Jul/20 23:35,03/Jan/21 17:02,13/Jul/23 08:39,04/Aug/20 20:28,4.0,4.0-beta2,,,,Test/unit,,,,0,,,,"Build: https://ci-cassandra.apache.org/job/Cassandra-trunk-test/194/testReport/junit/org.apache.cassandra.cql3.validation.operations/TTLTest/testCapWarnExpirationOverflowPolicy/
junit.framework.AssertionFailedError
	at org.apache.cassandra.cql3.validation.operations.TTLTest.checkTTLIsCapped(TTLTest.java:321)
	at org.apache.cassandra.cql3.validation.operations.TTLTest.verifyData(TTLTest.java:303)
	at org.apache.cassandra.cql3.validation.operations.TTLTest.testCapExpirationDateOverflowPolicy(TTLTest.java:248)
	at org.apache.cassandra.cql3.validation.operations.TTLTest.testCapExpirationDateOverflowPolicy(TTLTest.java:199)
	at org.apache.cassandra.cql3.validation.operations.TTLTest.testCapWarnExpirationOverflowPolicy(TTLTest.java:140)",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Jul/20 20:54;brandon.williams;0001-computeMaxTTL-directly-before-fetching-TTL.patch;https://issues.apache.org/jira/secure/attachment/13008625/0001-computeMaxTTL-directly-before-fetching-TTL.patch",,,,,,,,,,,,,,1.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Aug 04 20:28:48 UTC 2020,,,,,,,All,,,,,,"0|z0gvsg:",9223372036854775807,,,,dcapwell,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/5d968e6d274f9743a777276d5b5ee09fa4db3254,,,,,,,,,it is a test.,,,,,"28/Jul/20 20:55;brandon.williams;There seems to be a timing race between computing the max TTL and fetching the TTL from the row.  Patch to compute the max more closely to the fetch.;;;","30/Jul/20 02:02;dcapwell;Thanks for the patch.

I am +1, but rather than calling computeMaxTTL in the loop can we do it right after the query?  Once we have the result set back all values are fixed, so safe to compute only once (current time is assumed to be later than query time; if clocks shift then this will still fail).

Had to look at TTL logic but this is what I saw
* local delete is capped to 68 years after epoch (as of this moment we are ~50 years after epoch, so 18 years left before purge)
* local delete is set at write time
* ttl(column) is ""how much time is left"" (local_delete_time - now_in_seconds)
** defined by this function org.apache.cassandra.cql3.selection.ResultSetBuilder#remainingTTL
** the frontend logic is here org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector#addInput, but that just pulls w/e was put into the RS

Given this, before the query our minMax is larger than after the query (since now grows larger (assuming no clock rollback)), so ttl >= minMaxTTL would be smaller >= larger and fail.;;;","04/Aug/20 20:28;brandon.williams;Verified that works and moved it on commit.  Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cassandra.net.ConnectionTest testMessagePurging,CASSANDRA-15958,13317503,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aholmber,dcapwell,dcapwell,17/Jul/20 23:34,03/Jan/21 17:03,13/Jul/23 08:39,07/Oct/20 11:02,4.0,4.0-beta3,,,,Test/unit,,,,0,,,,"Build: https://ci-cassandra.apache.org/job/Cassandra-trunk-test/196/testReport/junit/org.apache.cassandra.net/ConnectionTest/testMessagePurging/
Build: https://ci-cassandra.apache.org/job/Cassandra-trunk-test/194/testReport/junit/org.apache.cassandra.net/ConnectionTest/testMessagePurging/
java.util.concurrent.TimeoutException
	at org.apache.cassandra.net.AsyncPromise.get(AsyncPromise.java:258)
	at org.apache.cassandra.net.FutureDelegate.get(FutureDelegate.java:143)
	at org.apache.cassandra.net.ConnectionTest.doTestManual(ConnectionTest.java:268)
	at org.apache.cassandra.net.ConnectionTest.testManual(ConnectionTest.java:236)
	at org.apache.cassandra.net.ConnectionTest.testMessagePurging(ConnectionTest.java:679)",,aholmber,aleksey,blerer,dcapwell,e.dimitrova,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15338,,,,,,,,,,,,,,,,,,,,,,,0.0,aholmber,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Oct 07 11:02:29 UTC 2020,,,,,,,All,,,,,,"0|z0gvs8:",9223372036854775807,,,,blerer,yifanc,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/ba63fa3c951cb5c18d0fa4f9483577c6e18389c4,,,,,,,,,Ran the test in question hundreds of times. Previously reproducible flakiness did not manifest.,,,,,"23/Jul/20 17:51;dcapwell;Failed again: https://app.circleci.com/pipelines/github/dcapwell/cassandra/307/workflows/a5d97246-2f81-489e-81e9-55c311ad65ae/jobs/1542;;;","24/Aug/20 18:26;aholmber;The timeout occurs [waiting for this close future|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/test/unit/org/apache/cassandra/net/ConnectionTest.java#L268], failing intermittently due to a race condition. The test [closes|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/test/unit/org/apache/cassandra/net/ConnectionTest.java#L723] the inbound connection [twice|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/test/unit/org/apache/cassandra/net/ConnectionTest.java#L268]. If the first execution finishes and [shuts down the executor|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/src/java/org/apache/cassandra/net/InboundSockets.java#L128] before the second, the [FutureCombiner|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/src/java/org/apache/cassandra/net/InboundSockets.java#L125-L126] fails to [addListener|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/src/java/org/apache/cassandra/net/FutureCombiner.java#L83] to the channel, and the [done future|https://github.com/aholmberg/cassandra/blob/CASSANDRA-15958/src/java/org/apache/cassandra/net/InboundSockets.java#L131] will never complete.;;;","24/Aug/20 18:36;aholmber;Looks like there are some additional sources of flakiness in this test.
https://app.circleci.com/pipelines/github/aholmberg/cassandra/25/workflows/536c8ec1-51d3-4ef0-95c6-7dd9677225dc/jobs/207;;;","24/Aug/20 21:50;yifanc;Hi Adam, thanks for the analysis! 
I agree with the cause, and I can reproduce the timeout exception (at closing) by inserting a pause between those 2 close call sites. 

The patch looks good to me. The {{closeFuture}} is updated/read within the synchronized block.

Only one thing to bring up is that there is a slight side effect introduced. With the patch, only the {{Consumer<? super ExecutorService> shutdownExecutors}} in the first call site will be registered. The other call sites, if supplying a different consumer, are all ignored. Maybe update the method docs for such behavior. ;;;","25/Aug/20 14:44;aholmber;Thanks, Yifan, for taking a look. I'll revisit that before submitting for review.

In the mean time, I looked some at the other flakiness.

{noformat}
java.lang.RuntimeException: java.util.concurrent.TimeoutException
	at org.apache.cassandra.net.ConnectionTest.lambda$testMessagePurging$36(ConnectionTest.java:700)
	at org.apache.cassandra.net.ConnectionTest.lambda$testMessagePurging$40(ConnectionTest.java:730)
	at org.apache.cassandra.net.ConnectionTest.doTestManual(ConnectionTest.java:263)
	at org.apache.cassandra.net.ConnectionTest.testManual(ConnectionTest.java:236)
	at org.apache.cassandra.net.ConnectionTest.testMessagePurging(ConnectionTest.java:679)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Caused by: java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1886)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2021)
	at org.apache.cassandra.net.ConnectionTest.lambda$testMessagePurging$36(ConnectionTest.java:693)
{noformat}

Timeout waiting for message to be purged. It will never purge.

Identified another race condition where the next expiration can be set to Long.MAX_VALUE, and pruning will never happen.

[Periodic pruning|https://github.com/aholmberg/cassandra/blob/eb1c9bf59c7faba3e65be7fc45359611c7242672/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L203-L209] runs in the background. It might run against an empty queue, producing a [pruner|https://github.com/aholmberg/cassandra/blob/eb1c9bf59c7faba3e65be7fc45359611c7242672/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L288] with {{earliestExpiresAt = Long.MAX_VALUE}}. In the mean time a message is added and the current deadline matches that message. If our nowNanos was established more than the clock resolution after the message expire time was set, the earliestExpiresAt time is [set|https://github.com/aholmberg/cassandra/blob/eb1c9bf59c7faba3e65be7fc45359611c7242672/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L228-L229] to {{Long.MAX_VALUE}}.

I have another tweak for this issue. Still looking at some other related unit tests.;;;","26/Aug/20 14:59;aholmber;Looked at the {{OutboundMessageQueue}} issue a bit more. Put more simply, there's a race [adding to this queue and updating the expiration deadline|https://github.com/apache/cassandra/blob/405e2dd8b5610208596ab4cb0bb6b9be7a159f5e/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L89-L92] while another thread is draining ( [1|https://github.com/apache/cassandra/blob/405e2dd8b5610208596ab4cb0bb6b9be7a159f5e/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L256] [2|https://github.com/apache/cassandra/blob/405e2dd8b5610208596ab4cb0bb6b9be7a159f5e/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L148] [3|https://github.com/apache/cassandra/blob/405e2dd8b5610208596ab4cb0bb6b9be7a159f5e/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L484] ) and also updating ( [1|https://github.com/apache/cassandra/blob/405e2dd8b5610208596ab4cb0bb6b9be7a159f5e/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L288] [2|https://github.com/apache/cassandra/blob/405e2dd8b5610208596ab4cb0bb6b9be7a159f5e/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L488] ). The race is there, but I'm not certain it would be a problem in an operating server, since nothing is spinning on an inactive queue waiting for messages to be evacuated, like this test is. In other words, new incoming messages and ongoing delivery would break this loose naturally.

Two ways to proceed:
1.) We can agree that it's not a problem, and I can make this test not susceptible to the timeout.
2.) We try to fix by adding synchronization around both the external queue and expiry update. I would need to expand the analysis quite a bit to understand what performance implications that might have (since the apparent point of the two queue design is efficiency).

[~yifanc] I'm interested in your take.
also /cc [~benedict] [~aleksey] for ideas since this is part of your newish messaging rewrite.;;;","26/Aug/20 17:44;aholmber;A third alternative would be to skip synchronization and computation and just make it periodic. I'm not sure what the genesis of the more precise calculation was.;;;","27/Aug/20 07:42;yifanc;Nice finding! 
I am able to reproduce the race, as long as the {{nextExpirationDeadlineUpdater}} that sets {{earliestExpiresAt}} to {{Long.MAX_VALUE}} in {{pruneInternalQueueWithLock}} happens after the updater in the *last* {{add()}} message call in the test. 

The impact is that the prune task might not be able to prune the queue when there is no new message with expiration time that can trigger {{pruneWithLock()}} enqueued. But in an operating system, there should be new messages enqueued continuously. Therefore, the chance that messages not being pruned should be low. 
In the worst case that an expired message is not pruned in the queue, the message is still discarded when outbound connection sends the message. It checks {{shouldSend()}} when polling from the queue. 
Therefore, it seems a special case in the test. It should not harm in production.

Regarding the third alternative, if I understand correctly, without updating the {{nextExpirationDeadline}} in the {{add()}} message method, no prune task will be scheduled. Because the {{nextExpirationDeadline}} remains {{Long.MAX_VALUE}} and {{clock.isAfter(nowNanos, nextExpirationDeadline)}} always returns false in the {{maybePruneExpired()}} method.;;;","27/Aug/20 20:44;aholmber;Sorry I wasn't more precise on the third option. There, I was suggesting that we stop trying to calculate the earliest possible prune, and just make it prune periodically -- say every 10ms. Then there's no deadline to adjust forward or backward and synchronize relative to new messages coming in -- it's just a periodic task.

>Therefore, it seems a special case in the test. It should not harm in production.
It sound like in this paragraph you're agreeing with my option #1. If that is the case (and we don't hear any opposition), when I get back to it I'll update the test to be robust against this.;;;","31/Aug/20 17:03;yifanc;Hi Adam. Yes. I agree with option 1. 

IMO, the periodic prune task and the condition to guard entering the actual prune operation is a best effort optimization to reduce the messages in the outbound queue. 
The contention for the lock (between poll and prune) would be increased, if removing the condition. The periodic prune task will try to acquire the lock every time it is triggered (every 100 ms). Prune is an O({{n}}) operation. It could become expensive when the outbound queue is large and block the poll more likely. So having a condition to guard the entry makes sense to me, even though the condition could become inaccurate (, best effort). The exact impact on the queue performance need to be benchmarked. Intuitively, I think having the guard provides benefit. ;;;","01/Sep/20 12:14;aleksey;Ping [~sbtourist] / CASSANDRA-15700;;;","09/Sep/20 21:53;aholmber;Thanks for the link Aleksey. 

Returning to this, option #1 seems a bit absurd to me: changing a test to work around a flaw in the thing it was meant to test. I also think this class could benefit from some simplification, but I don't think we have the appetite to bite off and perf test a change like that at this point (and I think we've agreed this particular case is not a danger in a running system). 

Here's a [patch|https://github.com/aholmberg/cassandra/pull/4/files], updated according to Yifan's input, and augmented to make sure the test will not race with the background pruning, and timeout.;;;","10/Sep/20 19:33;yifanc;Not seeing the link to the CI run.

Attaching one: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=C-15958]

 ;;;","10/Sep/20 21:25;yifanc;Unit test and dtest passed.

[https://app.circleci.com/pipelines/github/yifan-c/cassandra/96/workflows/ddf05402-e19d-4a74-a14b-90a105dea475]

 

+1 to the patch.;;;","10/Sep/20 23:26;aholmber;Thanks for kicking that off.;;;","24/Sep/20 12:56;e.dimitrova;Is a second reviewer needed?;;;","05/Oct/20 09:06;blerer;I apparently forgot to put my +1 for the patch.;;;","05/Oct/20 09:10;blerer;Could not mark the ticket as committed. Will try again once the problem has been fixed.;;;","07/Oct/20 11:02;blerer;Committed into trunk at ba63fa3c951cb5c18d0fa4f9483577c6e18389c4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cassandra.repair.RepairJobTest testOptimizedCreateStandardSyncTasks,CASSANDRA-15957,13317502,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,dcapwell,dcapwell,17/Jul/20 23:33,21/Dec/20 09:04,13/Jul/23 08:39,13/Nov/20 11:04,4.0,4.0-beta4,,,,Test/unit,,,,0,,,,"Build: https://ci-cassandra.apache.org/job/Cassandra-trunk-test/lastCompletedBuild/testReport/junit/org.apache.cassandra.repair/RepairJobTest/testOptimizedCreateStandardSyncTasks/

Expecting:
 <[#<TreeRange (00000002,00000003] depth=0>,
   #<TreeRange (00000000,00000001] depth=0>]>
to contain only:
 <[(00000000,00000001]]>
but the following elements were unexpected:
 <[#<TreeRange (00000002,00000003] depth=0>]>

This failed 3 times in a row on Jenkins",,bereng,dcapwell,e.dimitrova,marcuse,polo-language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Nov 13 11:04:14 UTC 2020,,,,,,,All,,,,,,"0|z0gvs0:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,,"29/Jul/20 14:21;e.dimitrova;{quote}This failed 3 times in a row on Jenkins
{quote}
Does this mean we know the patch/ticket that caused it? This very often speeds up the test fix :) ;;;","29/Jul/20 22:29;dcapwell;No idea!  Looking at jenkins, the commit that ""fixed"" it was my doc fix... so, don't think my doc fix really fixed it... ;;;","28/Aug/20 07:46;bereng;This whole test class has been rock solid for a [long|https://ci-cassandra.apache.org/job/Cassandra-trunk/294/testReport/org.apache.cassandra.repair/RepairJobTest/history/] time now including the mentioned method.

Given the many changes that have gone in meanwhile, unless sbdy has a recent circle-ci failure, despite not being ideal I'd suggest to close until this/if materializes again. The cost of investigating past failures coupled with the cassandra-ci test failure reporting problems we've had recently might be a time sink.;;;","28/Aug/20 22:27;dcapwell;checked my builds in the past 29d ago, I don't see any examples, but I do have a few examples where there were too many tests and reporting OOMed (different jira for that).;;;","31/Aug/20 07:34;bereng;Correct [~dcapwell]. Iirc that was some junit xml processing of the test results OOM'ing so I would say that is unrelated to any specific test.

I am going to close this one to favor some 'backlog hygiene' for lack of a better term but feel free to slap me in the hand and reopen if anybody disagrees :-);;;","10/Nov/20 18:28;dcapwell;This failed again on trunk https://app.circleci.com/pipelines/github/dcapwell/cassandra/788/workflows/dddd4f18-ba2d-45ec-9b69-9e78e83ddbd6/jobs/4501

{code}
junit.framework.AssertionFailedError: 
Expecting:
  <[#<TreeRange (00000002,00000003] depth=0>,
    #<TreeRange (00000000,00000001] depth=0>]>
to contain only:
  <[(00000000,00000001]]>
but the following elements were unexpected:
  <[#<TreeRange (00000002,00000003] depth=0>]>

	at org.apache.cassandra.repair.RepairJobTest.assertStreamRangeFromEither(RepairJobTest.java:716)
	at org.apache.cassandra.repair.RepairJobTest.testOptimizedCreateStandardSyncTasks(RepairJobTest.java:663)
{code};;;","10/Nov/20 18:30;dcapwell;re-opened as this failed again against latest trunk.;;;","13/Nov/20 11:04;marcuse;CASSANDRA-16274 contains a fix for this;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestBootstrap::test_bootstrap_binary_disabled_resumable_bootstrap checks non-existent log messages for 3.0 and 3.11,CASSANDRA-15952,13317225,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,16/Jul/20 18:06,17/Jul/20 16:45,13/Jul/23 08:39,17/Jul/20 16:29,3.0.22,3.11.8,,,,Test/dtest/python,,,,0,,,,"CASSANDRA-14525 added a bit of logging only in trunk that {{TestBootstrap::test_bootstrap_binary_disabled_resumable_bootstrap}} assumes is present in all versions. This should be as simple as making sure we only assert around that on 4.0+.

See https://app.circleci.com/pipelines/github/maedhroz/cassandra/57/workflows/b408ce8a-ee68-47bf-b9f1-eb9541e9827e/jobs/312",,brandon.williams,e.dimitrova,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14525,,,,,,,,,,,,,,,,,CASSANDRA-15667,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jul 17 16:45:45 UTC 2020,,,,,,,All,,,,,,"0|z0gu2g:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Low,,3.0.0,,,https://github.com/apache/cassandra-dtest/commit/94ce5797ae5892e2952fa55efd0594b1aa0e3aa8,,,,,,,,,"Verify that {{test_bootstrap_binary_disabled}} works against 3.0 and 3.11, and that the newly returned {{test_resumable_bootstrap}} works as well",,,,,"16/Jul/20 19:40;maedhroz;Fixing the test to check for the new log messages only in 4.0+ was simple enough. I've also taken the opportunity to add back  {{test_resumable_bootstrap}}, which was apparently agreed upon [here|https://issues.apache.org/jira/browse/CASSANDRA-15667?focusedCommentId=17079380&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17079380] and just missed.;;;","16/Jul/20 19:46;maedhroz;dtest PR: https://github.com/apache/cassandra-dtest/pull/85

{{test_bootstrap_binary_disabled}} and {{test_resumable_bootstrap}} are both passing locally now consistently against 3.0;;;","16/Jul/20 19:58;e.dimitrova;[~brandon.williams], can you run CI for 3.0 and 3.11, please?

If nothing pop up(it shouldn't), +1 from me. Thank you!

 ;;;","16/Jul/20 20:12;brandon.williams;3.0: [https://ci-cassandra.apache.org/job/Cassandra-devbranch/212/]

3.11: https://ci-cassandra.apache.org/job/Cassandra-devbranch/213/;;;","17/Jul/20 15:36;maedhroz;[~e.dimitrova] [~brandon.williams] Nice. That looks like two clean {{dtest}} runs to me :);;;","17/Jul/20 16:29;brandon.williams;Committed, thanks.;;;","17/Jul/20 16:45;e.dimitrova;Thank you to both of you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown while updating speculative execution time if table is removed during task execution,CASSANDRA-15949,13317016,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,jmeredithco,jmeredithco,15/Jul/20 20:06,16/Mar/22 14:14,13/Jul/23 08:39,16/Sep/20 20:44,4.0,4.0-beta3,,,,Local/Other,,,,0,,,,"CASSANDRA-14338 fixed the scheduling the speculation retry threshold calculation, but if the task happens to be scheduled while a table is being dropped, it triggers an NPE. 


ERROR 2020-07-14T11:34:55,762 [OptionalTasks:1] org.apache.cassandra.service.CassandraDaemon:446 - Exception in thread Thread[OptionalTasks:1,5,main]
java.lang.NullPointerException: null
       at org.apache.cassandra.db.Keyspace.initCf(Keyspace.java:444) ~[cassandra-4.0.0.jar:4.0.0]
       at org.apache.cassandra.db.Keyspace.<init>(Keyspace.java:346) ~[cassandra-4.0.0.jar:4.0.0]
       at org.apache.cassandra.db.Keyspace.open(Keyspace.java:139) ~[cassandra-4.0.0.jar:4.0.0]
       at org.apache.cassandra.db.Keyspace.open(Keyspace.java:116) ~[cassandra-4.0.0.jar:4.0.0]
       at org.apache.cassandra.db.Keyspace$1.apply(Keyspace.java:102) ~[cassandra-4.0.0.jar:4.0.0]
       at org.apache.cassandra.db.Keyspace$1.apply(Keyspace.java:99) ~[cassandra-4.0.0.jar:4.0.0]
       at com.google.common.collect.Iterables$5.lambda$forEach$0(Iterables.java:704) ~[guava-27.0-jre.jar:?]
       at com.google.common.collect.IndexedImmutableSet.forEach(IndexedImmutableSet.java:45) ~[guava-27.0-jre.jar:?]
       at com.google.common.collect.Iterables$5.forEach(Iterables.java:704) ~[guava-27.0-jre.jar:?]
       at org.apache.cassandra.service.CassandraDaemon.lambda$setup$2(CassandraDaemon.java:412) ~[cassandra-4.0.0.jar:4.0.0]
       at org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable.run(DebuggableScheduledThreadPoolExecutor.java:118) [cassandra-4.0.0.jar:4.0.0]
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
       at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) [?:?]
       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [?:?]
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
       at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.37.Final.jar:4.1.37.Final]
       at java.lang.Thread.run(Thread.java:834) [?:?]",,aleksey,dcapwell,jeromatron,jmeredithco,maedhroz,,,,,,,"maedhroz opened a new pull request #733:
URL: https://github.com/apache/cassandra/pull/733


   This involves both catching and logging exceptions from the task itself and short-circuiting ColumnFamilyStore creation when sufficient table metadata is not present.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Sep/20 23:23;githubbot;600","maedhroz commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r483355872



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -337,7 +337,19 @@ private Keyspace(String keyspaceName, boolean loadSSTables)
         for (TableMetadata cfm : metadata.tablesAndViews())
         {
             logger.trace(""Initializing {}.{}"", getName(), cfm.name);
-            initCf(Schema.instance.getTableMetadataRef(cfm.id), loadSSTables);
+            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(cfm.id);
+            
+            if (tableMetadataRef == null)
+            {
+                logger.info(""Failed to initialize {}.{}, as no table metadata was available. This "" +
+                            ""has likely occurred because the keyspace metadata for {} has not yet "" +
+                            ""been updated to reflect the table being dropped."", 
+                            getName(), cfm.name, getName());

Review comment:
       The one thing that did cross my mind is whether or not simply logging here wouldn't be loud enough in some case, but we're already supposed to have a `TableMetadata` instance. It's not like we'll just log at INFO if something higher up the stack passes a non-existent table name.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Sep/20 02:50;githubbot;600","dcapwell commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r483899636



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -337,7 +337,19 @@ private Keyspace(String keyspaceName, boolean loadSSTables)
         for (TableMetadata cfm : metadata.tablesAndViews())
         {
             logger.trace(""Initializing {}.{}"", getName(), cfm.name);
-            initCf(Schema.instance.getTableMetadataRef(cfm.id), loadSSTables);
+            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(cfm.id);

Review comment:
       adding `@Nullable` to this method causes IntelliJ to flag this call site as a warning.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Sep/20 01:23;githubbot;600","dcapwell commented on pull request #733:
URL: https://github.com/apache/cassandra/pull/733#issuecomment-690820019


   I took a stab and was able to replicate via a unit test with the proposed refactor
   
   ```
   diff --git a/src/java/org/apache/cassandra/db/Keyspace.java b/src/java/org/apache/cassandra/db/Keyspace.java
   index fc4f56f652..a264db92c2 100644
   --- a/src/java/org/apache/cassandra/db/Keyspace.java
   +++ b/src/java/org/apache/cassandra/db/Keyspace.java
   @@ -24,6 +24,7 @@ import java.util.concurrent.*;
    import java.util.concurrent.atomic.AtomicLong;
    import java.util.concurrent.locks.Lock;
    
   +import com.google.common.annotations.VisibleForTesting;
    import com.google.common.base.Function;
    import com.google.common.collect.Iterables;
    import org.slf4j.Logger;
   @@ -50,6 +51,7 @@ import org.apache.cassandra.schema.Schema;
    import org.apache.cassandra.schema.SchemaConstants;
    import org.apache.cassandra.schema.TableId;
    import org.apache.cassandra.schema.TableMetadata;
   +import org.apache.cassandra.schema.TableMetadataProvider;
    import org.apache.cassandra.schema.TableMetadataRef;
    import org.apache.cassandra.tracing.Tracing;
    import org.apache.cassandra.utils.*;
   @@ -93,6 +95,7 @@ public class Keyspace
        private final KeyspaceWriteHandler writeHandler;
        private volatile ReplicationParams replicationParams;
        private final KeyspaceRepairManager repairManager;
   +    private final TableMetadataProvider schema;
    
        public static final Function<String,Keyspace> keyspaceTransformer = new Function<String, Keyspace>()
        {
   @@ -121,7 +124,8 @@ public class Keyspace
            return open(keyspaceName, Schema.instance, false);
        }
    
   -    private static Keyspace open(String keyspaceName, Schema schema, boolean loadSSTables)
   +    @VisibleForTesting
   +    static Keyspace open(String keyspaceName, TableMetadataProvider schema, boolean loadSSTables)
        {
            Keyspace keyspaceInstance = schema.getKeyspaceInstance(keyspaceName);
    
   @@ -135,7 +139,7 @@ public class Keyspace
                    if (keyspaceInstance == null)
                    {
                        // open and store the keyspace
   -                    keyspaceInstance = new Keyspace(keyspaceName, loadSSTables);
   +                    keyspaceInstance = new Keyspace(keyspaceName, schema, loadSSTables);
                        schema.storeKeyspaceInstance(keyspaceInstance);
                    }
                }
   @@ -207,7 +211,7 @@ public class Keyspace
    
        public ColumnFamilyStore getColumnFamilyStore(String cfName)
        {
   -        TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
   +        TableMetadata table = schema.getTableMetadata(getName(), cfName);
            if (table == null)
                throw new IllegalArgumentException(String.format(""Unknown keyspace/cf pair (%s.%s)"", getName(), cfName));
            return getColumnFamilyStore(table.id);
   @@ -324,9 +328,10 @@ public class Keyspace
            return list;
        }
    
   -    private Keyspace(String keyspaceName, boolean loadSSTables)
   +    private Keyspace(String keyspaceName, TableMetadataProvider schema, boolean loadSSTables)
        {
   -        metadata = Schema.instance.getKeyspaceMetadata(keyspaceName);
   +        this.schema = schema;
   +        metadata = schema.getKeyspaceMetadata(keyspaceName);
            assert metadata != null : ""Unknown keyspace "" + keyspaceName;
            if (metadata.isVirtual())
                throw new IllegalStateException(""Cannot initialize Keyspace with virtual metadata "" + keyspaceName);
   @@ -337,7 +342,18 @@ public class Keyspace
            for (TableMetadata cfm : metadata.tablesAndViews())
            {
                logger.trace(""Initializing {}.{}"", getName(), cfm.name);
   -            initCf(Schema.instance.getTableMetadataRef(cfm.id), loadSSTables);
   +            TableMetadataRef tableMetadataRef = schema.getTableMetadataRef(cfm.id);
   +            if (tableMetadataRef == null)
   +            {
   +                logger.info(""Failed to initialize {}.{}, as no table metadata was available. This "" +
   +                            ""has likely occurred because the keyspace metadata for {} has not yet "" +
   +                            ""been updated to reflect the table being dropped."",
   +                            getName(), cfm.name, getName());
   +            }
   +            else
   +            {
   +                initCf(tableMetadataRef, loadSSTables);
   +            }
            }
            this.viewManager.reload(false);
    
   @@ -347,6 +363,7 @@ public class Keyspace
    
        private Keyspace(KeyspaceMetadata metadata)
        {
   +        this.schema = Schema.instance;
            this.metadata = metadata;
            createReplicationStrategy(metadata);
            this.metric = new KeyspaceMetrics(this);
   diff --git a/src/java/org/apache/cassandra/schema/Schema.java b/src/java/org/apache/cassandra/schema/Schema.java
   index 0498993d9d..48f57bd73f 100644
   --- a/src/java/org/apache/cassandra/schema/Schema.java
   +++ b/src/java/org/apache/cassandra/schema/Schema.java
   @@ -192,6 +192,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return Keyspace object or null if keyspace was not found
         */
   +    @Override
        public Keyspace getKeyspaceInstance(String keyspaceName)
        {
            return keyspaceInstances.get(keyspaceName);
   @@ -219,6 +220,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @throws IllegalArgumentException if Keyspace is already stored
         */
   +    @Override
        public void storeKeyspaceInstance(Keyspace keyspace)
        {
            if (keyspaceInstances.containsKey(keyspace.getName()))
   @@ -283,6 +285,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return The keyspace metadata or null if it wasn't found
         */
   +    @Override
        public KeyspaceMetadata getKeyspaceMetadata(String keyspaceName)
        {
            assert keyspaceName != null;
   @@ -356,6 +359,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return TableMetadataRef object or null if it wasn't found
         */
   +    @Override
        public TableMetadataRef getTableMetadataRef(String keyspace, String table)
        {
            TableMetadata tm = getTableMetadata(keyspace, table);
   @@ -381,16 +385,12 @@ public final class Schema implements TableMetadataProvider
         *
         * @return metadata about Table or View
         */
   +    @Override
        public TableMetadataRef getTableMetadataRef(TableId id)
        {
            return metadataRefs.get(id);
        }
    
   -    public TableMetadataRef getTableMetadataRef(Descriptor descriptor)
   -    {
   -        return getTableMetadataRef(descriptor.ksname, descriptor.cfname);
   -    }
   -
        Map<TableId, TableMetadataRef> getTableMetadataRefs()
        {
            return metadataRefs;
   @@ -406,6 +406,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return TableMetadata object or null if it wasn't found
         */
   +    @Override
        public TableMetadata getTableMetadata(String keyspace, String table)
        {
            assert keyspace != null;
   diff --git a/src/java/org/apache/cassandra/schema/TableMetadataProvider.java b/src/java/org/apache/cassandra/schema/TableMetadataProvider.java
   index 7c5ae8a2f0..e8056d9cba 100644
   --- a/src/java/org/apache/cassandra/schema/TableMetadataProvider.java
   +++ b/src/java/org/apache/cassandra/schema/TableMetadataProvider.java
   @@ -2,13 +2,26 @@ package org.apache.cassandra.schema;
    
    import javax.annotation.Nullable;
    
   +import org.apache.cassandra.db.Keyspace;
    import org.apache.cassandra.exceptions.UnknownTableException;
   +import org.apache.cassandra.io.sstable.Descriptor;
    
    public interface TableMetadataProvider
    {
   +    @Nullable
   +    Keyspace getKeyspaceInstance(String keyspaceName);
   +
   +    void storeKeyspaceInstance(Keyspace keyspace);
   +
   +    @Nullable
   +    KeyspaceMetadata getKeyspaceMetadata(String keyspaceName);
   +
        @Nullable
        TableMetadata getTableMetadata(TableId id);
    
   +    @Nullable
   +    TableMetadata getTableMetadata(String keyspace, String table);
   +
        default TableMetadata getExistingTableMetadata(TableId id) throws UnknownTableException
        {
            TableMetadata metadata = getTableMetadata(id);
   @@ -21,4 +34,16 @@ public interface TableMetadataProvider
                              id);
            throw new UnknownTableException(message, id);
        }
   +
   +    @Nullable
   +    TableMetadataRef getTableMetadataRef(String keyspace, String table);
   +
   +    @Nullable
   +    TableMetadataRef getTableMetadataRef(TableId id);
   +
   +    @Nullable
   +    default TableMetadataRef getTableMetadataRef(Descriptor descriptor)
   +    {
   +        return getTableMetadataRef(descriptor.ksname, descriptor.cfname);
   +    }
    }
   diff --git a/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java b/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java
   index 25d32fc4e1..159879bf11 100644
   --- a/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java
   +++ b/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java
   @@ -1,2 +1,50 @@
   -package org.apache.cassandra.db;public class KeyspaceUnitTest {
   +package org.apache.cassandra.db;
   +
   +import java.util.UUID;
   +
   +import org.junit.Test;
   +
   +import org.apache.cassandra.config.DatabaseDescriptor;
   +import org.apache.cassandra.db.marshal.BytesType;
   +import org.apache.cassandra.schema.KeyspaceMetadata;
   +import org.apache.cassandra.schema.KeyspaceParams;
   +import org.apache.cassandra.schema.TableId;
   +import org.apache.cassandra.schema.TableMetadata;
   +import org.apache.cassandra.schema.TableMetadataProvider;
   +import org.apache.cassandra.schema.Tables;
   +import org.assertj.core.api.Assertions;
   +import org.mockito.Mockito;
   +
   +public class KeyspaceUnitTest
   +{
   +    static
   +    {
   +        DatabaseDescriptor.daemonInitialization();
   +    }
   +
   +    /**
   +     * Test behavior of trying to open a Keyspace when the table is missing from the schema; this can happen
   +     * if the table is dropped while the call to open happens.
   +     * 
   +     * @see <a href=""https://issues.apache.org/jira/browse/CASSANDRA-15949"">CASSANDRA-15949</a>
   +     */
   +    @Test
   +    public void missingTable()
   +    {
   +        TableMetadataProvider schema = Mockito.mock(TableMetadataProvider.class, Mockito.CALLS_REAL_METHODS);
   +        String ksName = ""missingTable"";
   +        String missingTableName = ""table1"";
   +        TableId tableId = TableId.fromUUID(UUID.randomUUID());
   +        KeyspaceMetadata metadata = KeyspaceMetadata.create(ksName, KeyspaceParams.local(), Tables.of(
   +        TableMetadata.builder(ksName, missingTableName)
   +                     .id(tableId)
   +                     .addPartitionKeyColumn(""key"", BytesType.instance)
   +                     .build()));
   +        Mockito.when(schema.getKeyspaceMetadata(ksName)).thenReturn(metadata);
   +
   +        Keyspace ks = Keyspace.open(ksName, schema, false);
   +        Assertions.assertThatThrownBy(() -> ks.getColumnFamilyStore(tableId))
   +                  .isInstanceOf(IllegalArgumentException.class)
   +                  .hasMessage(""Unknown CF "" + tableId);
   +    }
    }
   
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Sep/20 01:33;githubbot;600","dcapwell commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r487188316



##########
File path: src/java/org/apache/cassandra/service/CassandraDaemon.java
##########
@@ -167,6 +167,20 @@ private void maybeInitJmx()
         }
     }
 
+    @VisibleForTesting
+    public static Runnable SPECULATION_THRESHOLD_UPDATER = 
+        () -> 
+        {
+            try
+            {
+                Keyspace.allExisting().forEach(k -> k.getColumnFamilyStores().forEach(ColumnFamilyStore::updateSpeculationThreshold));
+            }
+            catch (Throwable t)
+            {
+                logger.warn(""Failed to update speculative retry thresholds."", t);

Review comment:
       after logging should call `org.apache.cassandra.utils.JVMStabilityInspector#inspectThrowable(java.lang.Throwable)`; if this is caused by OOM it will properly handle that (I don't think we touch disk so disk failure policy wouldn't happen).

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       should this be `Iterable` just to match all methods?

##########
File path: test/unit/org/apache/cassandra/service/OptionalTasksTest.java
##########
@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.service;
+
+import java.util.Objects;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.SchemaLoader;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.db.Keyspace;
+import org.apache.cassandra.exceptions.ConfigurationException;
+import org.apache.cassandra.schema.KeyspaceParams;
+import org.apache.cassandra.schema.Schema;
+import org.apache.cassandra.schema.TableMetadata;
+
+import static org.apache.cassandra.SchemaLoader.standardCFMD;
+import static org.apache.cassandra.service.CassandraDaemon.SPECULATION_THRESHOLD_UPDATER;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+
+public class OptionalTasksTest
+{
+    private static final String KEYSPACE = ""OpitonalTasksTest"";
+    private static final String TABLE = ""SpeculationThreshold"";
+
+    @BeforeClass
+    public static void defineSchema() throws ConfigurationException
+    {
+        SchemaLoader.prepareServer();
+        SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), standardCFMD(KEYSPACE, TABLE));
+    }
+    
+    @Test
+    public void shouldIgnoreDroppedKeyspace()
+    {
+        // Set the initial sampling state...
+        TableMetadata metadata = Schema.instance.getTableMetadata(KEYSPACE, TABLE);
+        ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(Objects.requireNonNull(metadata).id);
+        Objects.requireNonNull(cfs).metric.coordinatorReadLatency.update(100, TimeUnit.NANOSECONDS);
+        
+        // Remove the Keyspace name to trigger creation on open...
+        Keyspace removed = Schema.instance.removeKeyspaceInstance(KEYSPACE);

Review comment:
       the comment is a bit misleading given the new patch, can we say something like ""Remove the keyspace so the updater does not see it""?  

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       the stream would at least avoid extra allocation from collecting, and also means we only call getKeyspaceInstance when we need to.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Sep/20 17:40;githubbot;600","dcapwell commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r483899636



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -337,7 +337,19 @@ private Keyspace(String keyspaceName, boolean loadSSTables)
         for (TableMetadata cfm : metadata.tablesAndViews())
         {
             logger.trace(""Initializing {}.{}"", getName(), cfm.name);
-            initCf(Schema.instance.getTableMetadataRef(cfm.id), loadSSTables);
+            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(cfm.id);

Review comment:
       adding `@Nullable` to this method causes IntelliJ to flag this call site as a warning.

##########
File path: src/java/org/apache/cassandra/service/CassandraDaemon.java
##########
@@ -167,6 +167,20 @@ private void maybeInitJmx()
         }
     }
 
+    @VisibleForTesting
+    public static Runnable SPECULATION_THRESHOLD_UPDATER = 
+        () -> 
+        {
+            try
+            {
+                Keyspace.allExisting().forEach(k -> k.getColumnFamilyStores().forEach(ColumnFamilyStore::updateSpeculationThreshold));
+            }
+            catch (Throwable t)
+            {
+                logger.warn(""Failed to update speculative retry thresholds."", t);

Review comment:
       after logging should call `org.apache.cassandra.utils.JVMStabilityInspector#inspectThrowable(java.lang.Throwable)`; if this is caused by OOM it will properly handle that (I don't think we touch disk so disk failure policy wouldn't happen).

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       should this be `Iterable` just to match all methods?

##########
File path: test/unit/org/apache/cassandra/service/OptionalTasksTest.java
##########
@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.service;
+
+import java.util.Objects;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.SchemaLoader;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.db.Keyspace;
+import org.apache.cassandra.exceptions.ConfigurationException;
+import org.apache.cassandra.schema.KeyspaceParams;
+import org.apache.cassandra.schema.Schema;
+import org.apache.cassandra.schema.TableMetadata;
+
+import static org.apache.cassandra.SchemaLoader.standardCFMD;
+import static org.apache.cassandra.service.CassandraDaemon.SPECULATION_THRESHOLD_UPDATER;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+
+public class OptionalTasksTest
+{
+    private static final String KEYSPACE = ""OpitonalTasksTest"";
+    private static final String TABLE = ""SpeculationThreshold"";
+
+    @BeforeClass
+    public static void defineSchema() throws ConfigurationException
+    {
+        SchemaLoader.prepareServer();
+        SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), standardCFMD(KEYSPACE, TABLE));
+    }
+    
+    @Test
+    public void shouldIgnoreDroppedKeyspace()
+    {
+        // Set the initial sampling state...
+        TableMetadata metadata = Schema.instance.getTableMetadata(KEYSPACE, TABLE);
+        ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(Objects.requireNonNull(metadata).id);
+        Objects.requireNonNull(cfs).metric.coordinatorReadLatency.update(100, TimeUnit.NANOSECONDS);
+        
+        // Remove the Keyspace name to trigger creation on open...
+        Keyspace removed = Schema.instance.removeKeyspaceInstance(KEYSPACE);

Review comment:
       the comment is a bit misleading given the new patch, can we say something like ""Remove the keyspace so the updater does not see it""?  

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       the stream would at least avoid extra allocation from collecting, and also means we only call getKeyspaceInstance when we need to.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Sep/20 20:11;githubbot;600","dcapwell commented on pull request #733:
URL: https://github.com/apache/cassandra/pull/733#issuecomment-690820019


   I took a stab and was able to replicate via a unit test with the proposed refactor
   
   ```
   diff --git a/src/java/org/apache/cassandra/db/Keyspace.java b/src/java/org/apache/cassandra/db/Keyspace.java
   index fc4f56f652..a264db92c2 100644
   --- a/src/java/org/apache/cassandra/db/Keyspace.java
   +++ b/src/java/org/apache/cassandra/db/Keyspace.java
   @@ -24,6 +24,7 @@ import java.util.concurrent.*;
    import java.util.concurrent.atomic.AtomicLong;
    import java.util.concurrent.locks.Lock;
    
   +import com.google.common.annotations.VisibleForTesting;
    import com.google.common.base.Function;
    import com.google.common.collect.Iterables;
    import org.slf4j.Logger;
   @@ -50,6 +51,7 @@ import org.apache.cassandra.schema.Schema;
    import org.apache.cassandra.schema.SchemaConstants;
    import org.apache.cassandra.schema.TableId;
    import org.apache.cassandra.schema.TableMetadata;
   +import org.apache.cassandra.schema.TableMetadataProvider;
    import org.apache.cassandra.schema.TableMetadataRef;
    import org.apache.cassandra.tracing.Tracing;
    import org.apache.cassandra.utils.*;
   @@ -93,6 +95,7 @@ public class Keyspace
        private final KeyspaceWriteHandler writeHandler;
        private volatile ReplicationParams replicationParams;
        private final KeyspaceRepairManager repairManager;
   +    private final TableMetadataProvider schema;
    
        public static final Function<String,Keyspace> keyspaceTransformer = new Function<String, Keyspace>()
        {
   @@ -121,7 +124,8 @@ public class Keyspace
            return open(keyspaceName, Schema.instance, false);
        }
    
   -    private static Keyspace open(String keyspaceName, Schema schema, boolean loadSSTables)
   +    @VisibleForTesting
   +    static Keyspace open(String keyspaceName, TableMetadataProvider schema, boolean loadSSTables)
        {
            Keyspace keyspaceInstance = schema.getKeyspaceInstance(keyspaceName);
    
   @@ -135,7 +139,7 @@ public class Keyspace
                    if (keyspaceInstance == null)
                    {
                        // open and store the keyspace
   -                    keyspaceInstance = new Keyspace(keyspaceName, loadSSTables);
   +                    keyspaceInstance = new Keyspace(keyspaceName, schema, loadSSTables);
                        schema.storeKeyspaceInstance(keyspaceInstance);
                    }
                }
   @@ -207,7 +211,7 @@ public class Keyspace
    
        public ColumnFamilyStore getColumnFamilyStore(String cfName)
        {
   -        TableMetadata table = Schema.instance.getTableMetadata(getName(), cfName);
   +        TableMetadata table = schema.getTableMetadata(getName(), cfName);
            if (table == null)
                throw new IllegalArgumentException(String.format(""Unknown keyspace/cf pair (%s.%s)"", getName(), cfName));
            return getColumnFamilyStore(table.id);
   @@ -324,9 +328,10 @@ public class Keyspace
            return list;
        }
    
   -    private Keyspace(String keyspaceName, boolean loadSSTables)
   +    private Keyspace(String keyspaceName, TableMetadataProvider schema, boolean loadSSTables)
        {
   -        metadata = Schema.instance.getKeyspaceMetadata(keyspaceName);
   +        this.schema = schema;
   +        metadata = schema.getKeyspaceMetadata(keyspaceName);
            assert metadata != null : ""Unknown keyspace "" + keyspaceName;
            if (metadata.isVirtual())
                throw new IllegalStateException(""Cannot initialize Keyspace with virtual metadata "" + keyspaceName);
   @@ -337,7 +342,18 @@ public class Keyspace
            for (TableMetadata cfm : metadata.tablesAndViews())
            {
                logger.trace(""Initializing {}.{}"", getName(), cfm.name);
   -            initCf(Schema.instance.getTableMetadataRef(cfm.id), loadSSTables);
   +            TableMetadataRef tableMetadataRef = schema.getTableMetadataRef(cfm.id);
   +            if (tableMetadataRef == null)
   +            {
   +                logger.info(""Failed to initialize {}.{}, as no table metadata was available. This "" +
   +                            ""has likely occurred because the keyspace metadata for {} has not yet "" +
   +                            ""been updated to reflect the table being dropped."",
   +                            getName(), cfm.name, getName());
   +            }
   +            else
   +            {
   +                initCf(tableMetadataRef, loadSSTables);
   +            }
            }
            this.viewManager.reload(false);
    
   @@ -347,6 +363,7 @@ public class Keyspace
    
        private Keyspace(KeyspaceMetadata metadata)
        {
   +        this.schema = Schema.instance;
            this.metadata = metadata;
            createReplicationStrategy(metadata);
            this.metric = new KeyspaceMetrics(this);
   diff --git a/src/java/org/apache/cassandra/schema/Schema.java b/src/java/org/apache/cassandra/schema/Schema.java
   index 0498993d9d..48f57bd73f 100644
   --- a/src/java/org/apache/cassandra/schema/Schema.java
   +++ b/src/java/org/apache/cassandra/schema/Schema.java
   @@ -192,6 +192,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return Keyspace object or null if keyspace was not found
         */
   +    @Override
        public Keyspace getKeyspaceInstance(String keyspaceName)
        {
            return keyspaceInstances.get(keyspaceName);
   @@ -219,6 +220,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @throws IllegalArgumentException if Keyspace is already stored
         */
   +    @Override
        public void storeKeyspaceInstance(Keyspace keyspace)
        {
            if (keyspaceInstances.containsKey(keyspace.getName()))
   @@ -283,6 +285,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return The keyspace metadata or null if it wasn't found
         */
   +    @Override
        public KeyspaceMetadata getKeyspaceMetadata(String keyspaceName)
        {
            assert keyspaceName != null;
   @@ -356,6 +359,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return TableMetadataRef object or null if it wasn't found
         */
   +    @Override
        public TableMetadataRef getTableMetadataRef(String keyspace, String table)
        {
            TableMetadata tm = getTableMetadata(keyspace, table);
   @@ -381,16 +385,12 @@ public final class Schema implements TableMetadataProvider
         *
         * @return metadata about Table or View
         */
   +    @Override
        public TableMetadataRef getTableMetadataRef(TableId id)
        {
            return metadataRefs.get(id);
        }
    
   -    public TableMetadataRef getTableMetadataRef(Descriptor descriptor)
   -    {
   -        return getTableMetadataRef(descriptor.ksname, descriptor.cfname);
   -    }
   -
        Map<TableId, TableMetadataRef> getTableMetadataRefs()
        {
            return metadataRefs;
   @@ -406,6 +406,7 @@ public final class Schema implements TableMetadataProvider
         *
         * @return TableMetadata object or null if it wasn't found
         */
   +    @Override
        public TableMetadata getTableMetadata(String keyspace, String table)
        {
            assert keyspace != null;
   diff --git a/src/java/org/apache/cassandra/schema/TableMetadataProvider.java b/src/java/org/apache/cassandra/schema/TableMetadataProvider.java
   index 7c5ae8a2f0..e8056d9cba 100644
   --- a/src/java/org/apache/cassandra/schema/TableMetadataProvider.java
   +++ b/src/java/org/apache/cassandra/schema/TableMetadataProvider.java
   @@ -2,13 +2,26 @@ package org.apache.cassandra.schema;
    
    import javax.annotation.Nullable;
    
   +import org.apache.cassandra.db.Keyspace;
    import org.apache.cassandra.exceptions.UnknownTableException;
   +import org.apache.cassandra.io.sstable.Descriptor;
    
    public interface TableMetadataProvider
    {
   +    @Nullable
   +    Keyspace getKeyspaceInstance(String keyspaceName);
   +
   +    void storeKeyspaceInstance(Keyspace keyspace);
   +
   +    @Nullable
   +    KeyspaceMetadata getKeyspaceMetadata(String keyspaceName);
   +
        @Nullable
        TableMetadata getTableMetadata(TableId id);
    
   +    @Nullable
   +    TableMetadata getTableMetadata(String keyspace, String table);
   +
        default TableMetadata getExistingTableMetadata(TableId id) throws UnknownTableException
        {
            TableMetadata metadata = getTableMetadata(id);
   @@ -21,4 +34,16 @@ public interface TableMetadataProvider
                              id);
            throw new UnknownTableException(message, id);
        }
   +
   +    @Nullable
   +    TableMetadataRef getTableMetadataRef(String keyspace, String table);
   +
   +    @Nullable
   +    TableMetadataRef getTableMetadataRef(TableId id);
   +
   +    @Nullable
   +    default TableMetadataRef getTableMetadataRef(Descriptor descriptor)
   +    {
   +        return getTableMetadataRef(descriptor.ksname, descriptor.cfname);
   +    }
    }
   diff --git a/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java b/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java
   index 25d32fc4e1..159879bf11 100644
   --- a/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java
   +++ b/test/unit/org/apache/cassandra/db/KeyspaceUnitTest.java
   @@ -1,2 +1,50 @@
   -package org.apache.cassandra.db;public class KeyspaceUnitTest {
   +package org.apache.cassandra.db;
   +
   +import java.util.UUID;
   +
   +import org.junit.Test;
   +
   +import org.apache.cassandra.config.DatabaseDescriptor;
   +import org.apache.cassandra.db.marshal.BytesType;
   +import org.apache.cassandra.schema.KeyspaceMetadata;
   +import org.apache.cassandra.schema.KeyspaceParams;
   +import org.apache.cassandra.schema.TableId;
   +import org.apache.cassandra.schema.TableMetadata;
   +import org.apache.cassandra.schema.TableMetadataProvider;
   +import org.apache.cassandra.schema.Tables;
   +import org.assertj.core.api.Assertions;
   +import org.mockito.Mockito;
   +
   +public class KeyspaceUnitTest
   +{
   +    static
   +    {
   +        DatabaseDescriptor.daemonInitialization();
   +    }
   +
   +    /**
   +     * Test behavior of trying to open a Keyspace when the table is missing from the schema; this can happen
   +     * if the table is dropped while the call to open happens.
   +     * 
   +     * @see <a href=""https://issues.apache.org/jira/browse/CASSANDRA-15949"">CASSANDRA-15949</a>
   +     */
   +    @Test
   +    public void missingTable()
   +    {
   +        TableMetadataProvider schema = Mockito.mock(TableMetadataProvider.class, Mockito.CALLS_REAL_METHODS);
   +        String ksName = ""missingTable"";
   +        String missingTableName = ""table1"";
   +        TableId tableId = TableId.fromUUID(UUID.randomUUID());
   +        KeyspaceMetadata metadata = KeyspaceMetadata.create(ksName, KeyspaceParams.local(), Tables.of(
   +        TableMetadata.builder(ksName, missingTableName)
   +                     .id(tableId)
   +                     .addPartitionKeyColumn(""key"", BytesType.instance)
   +                     .build()));
   +        Mockito.when(schema.getKeyspaceMetadata(ksName)).thenReturn(metadata);
   +
   +        Keyspace ks = Keyspace.open(ksName, schema, false);
   +        Assertions.assertThatThrownBy(() -> ks.getColumnFamilyStore(tableId))
   +                  .isInstanceOf(IllegalArgumentException.class)
   +                  .hasMessage(""Unknown CF "" + tableId);
   +    }
    }
   
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Sep/20 20:38;githubbot;600","dcapwell commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r487188316



##########
File path: src/java/org/apache/cassandra/service/CassandraDaemon.java
##########
@@ -167,6 +167,20 @@ private void maybeInitJmx()
         }
     }
 
+    @VisibleForTesting
+    public static Runnable SPECULATION_THRESHOLD_UPDATER = 
+        () -> 
+        {
+            try
+            {
+                Keyspace.allExisting().forEach(k -> k.getColumnFamilyStores().forEach(ColumnFamilyStore::updateSpeculationThreshold));
+            }
+            catch (Throwable t)
+            {
+                logger.warn(""Failed to update speculative retry thresholds."", t);

Review comment:
       after logging should call `org.apache.cassandra.utils.JVMStabilityInspector#inspectThrowable(java.lang.Throwable)`; if this is caused by OOM it will properly handle that (I don't think we touch disk so disk failure policy wouldn't happen).

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       should this be `Iterable` just to match all methods?

##########
File path: test/unit/org/apache/cassandra/service/OptionalTasksTest.java
##########
@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.service;
+
+import java.util.Objects;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.SchemaLoader;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.db.Keyspace;
+import org.apache.cassandra.exceptions.ConfigurationException;
+import org.apache.cassandra.schema.KeyspaceParams;
+import org.apache.cassandra.schema.Schema;
+import org.apache.cassandra.schema.TableMetadata;
+
+import static org.apache.cassandra.SchemaLoader.standardCFMD;
+import static org.apache.cassandra.service.CassandraDaemon.SPECULATION_THRESHOLD_UPDATER;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+
+public class OptionalTasksTest
+{
+    private static final String KEYSPACE = ""OpitonalTasksTest"";
+    private static final String TABLE = ""SpeculationThreshold"";
+
+    @BeforeClass
+    public static void defineSchema() throws ConfigurationException
+    {
+        SchemaLoader.prepareServer();
+        SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), standardCFMD(KEYSPACE, TABLE));
+    }
+    
+    @Test
+    public void shouldIgnoreDroppedKeyspace()
+    {
+        // Set the initial sampling state...
+        TableMetadata metadata = Schema.instance.getTableMetadata(KEYSPACE, TABLE);
+        ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(Objects.requireNonNull(metadata).id);
+        Objects.requireNonNull(cfs).metric.coordinatorReadLatency.update(100, TimeUnit.NANOSECONDS);
+        
+        // Remove the Keyspace name to trigger creation on open...
+        Keyspace removed = Schema.instance.removeKeyspaceInstance(KEYSPACE);

Review comment:
       the comment is a bit misleading given the new patch, can we say something like ""Remove the keyspace so the updater does not see it""?  

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       the stream would at least avoid extra allocation from collecting, and also means we only call getKeyspaceInstance when we need to.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Sep/20 22:00;githubbot;600","maedhroz commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r488016196



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -121,21 +129,22 @@ public static Keyspace openWithoutSSTables(String keyspaceName)
         return open(keyspaceName, Schema.instance, false);
     }
 
-    private static Keyspace open(String keyspaceName, Schema schema, boolean loadSSTables)
+    @VisibleForTesting
+    static Keyspace open(String keyspaceName, SchemaProvider schema, boolean loadSSTables)
     {
         Keyspace keyspaceInstance = schema.getKeyspaceInstance(keyspaceName);
 
         if (keyspaceInstance == null)
         {
-            // instantiate the Keyspace.  we could use putIfAbsent but it's important to making sure it is only done once
-            // per keyspace, so we synchronize and re-check before doing it.
-            synchronized (Keyspace.class)
+            // Instantiate the Keyspace while holding the Schema lock. This both ensures we only do it once per
+            // keyspace, and also ensures that Keyspace construction sees a consistent view of the schema.
+            synchronized (schema)

Review comment:
       CC @iamaleksey 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Sep/20 15:19;githubbot;600","dcapwell commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r488056289



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -148,19 +157,19 @@ public static Keyspace clear(String keyspaceName)
         return clear(keyspaceName, Schema.instance);
     }
 
+    /**
+     * Note that this method should only be called while holding the monitor lock for {@link Schema#instance} 
+     */
     public static Keyspace clear(String keyspaceName, Schema schema)
     {
-        synchronized (Keyspace.class)
+        Keyspace t = schema.removeKeyspaceInstance(keyspaceName);

Review comment:
       should lock on `schema` as well here to match.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Sep/20 16:14;githubbot;600","maedhroz commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r488070888



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -148,19 +157,19 @@ public static Keyspace clear(String keyspaceName)
         return clear(keyspaceName, Schema.instance);
     }
 
+    /**
+     * Note that this method should only be called while holding the monitor lock for {@link Schema#instance} 
+     */
     public static Keyspace clear(String keyspaceName, Schema schema)
     {
-        synchronized (Keyspace.class)
+        Keyspace t = schema.removeKeyspaceInstance(keyspaceName);

Review comment:
       @dcapwell All codepaths that arrive here should already be holding the `Schema.instance` monitor lock, but reentrancy should make it harmless. It's probably better, in retrospect, than a method comment.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Sep/20 16:37;githubbot;600","dcapwell commented on a change in pull request #733:
URL: https://github.com/apache/cassandra/pull/733#discussion_r488943720



##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -337,7 +348,7 @@ private Keyspace(String keyspaceName, boolean loadSSTables)
         for (TableMetadata cfm : metadata.tablesAndViews())
         {
             logger.trace(""Initializing {}.{}"", getName(), cfm.name);
-            initCf(Schema.instance.getTableMetadataRef(cfm.id), loadSSTables);

Review comment:
       for me: this should no longer be null as the schema block means we see a consistent view of schema, so will see all ref and metadata protected.

##########
File path: src/java/org/apache/cassandra/db/Keyspace.java
##########
@@ -743,22 +767,30 @@ public AbstractReplicationStrategy getReplicationStrategy()
 
     public static Iterable<Keyspace> all()
     {
-        return Iterables.transform(Schema.instance.getKeyspaces(), keyspaceTransformer);
+        return Iterables.transform(Schema.instance.getKeyspaces(), Keyspace::open);
+    }
+
+    /**
+     * @return a {@link Stream} of all keyspaces existing/open {@link Keyspace} instances
+     */
+    public static Stream<Keyspace> allExisting()

Review comment:
       for me: stated in JIRA; leaving here to isolate the change.  Over time more things maybe should switch over and all() might go away.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Sep/20 20:18;githubbot;600","smiklosovic closed pull request #733:
URL: https://github.com/apache/cassandra/pull/733


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7800,,,0,7800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Degradation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Sep 16 20:44:59 UTC 2020,,,,,,,All,,,,,,"0|z0gsso:",9223372036854775807,,,,aleksey,dcapwell,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/ca027c3c2262f5a6789dbf41a5656a7bcf02a5f2,,,,,,,,,"- clean Circle run
- an additional test that provides guardrails around the Keyspace opening process (at least as it's used by the speculative retry threshold update task)",,,,,"15/Jul/20 20:18;jmeredithco;Marked this as a degradation as from https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#scheduleAtFixedRate-java.lang.Runnable-long-long-java.util.concurrent.TimeUnit-

""If any execution of the task encounters an exception, subsequent executions are suppressed""

So if this hits while a table is being dropped, recomputation of speculative retry thresholds will halt node-wide. 

 

 ;;;","03/Sep/20 22:55;maedhroz;[~jmeredithco] Took a quick look, and it seems like this is nominally a consequence of {{Schema#keyspaces}} and {{Schema#metadataRefs}} not really being synchronized in any way. (i.e. The {{Keyspace}} constructor finds {{TableMetadata}}, but there is no {{TableMetadataRef}} present by the time we need to pass it to {{initCf()}}). My first instinct is to do two things:

1.) Catch and log at WARN all exceptions from anywhere in the recomputation task rather than halting node-wide.
2.) Apprehend null {{TableMetadataRef}} references in the {{Keyspace}} constructor and log at INFO to avoid stopping progress even within a particular recomputation task for something transient like this.

I'll work out a test that hits the original error and push up a patch w/ the above shortly...;;;","03/Sep/20 23:26;maedhroz;[trunk|https://github.com/apache/cassandra/pull/733] [j8 tests|https://app.circleci.com/pipelines/github/maedhroz/cassandra/105/workflows/36eededa-b5bc-4ecc-b3fa-592f12109884] [j11 tests|https://app.circleci.com/pipelines/github/maedhroz/cassandra/105/workflows/940fb0c2-7881-40fa-9daa-dc29859d27ec]

UPDATE: Tests are clean outside a couple already identified as flaky.;;;","11/Sep/20 04:04;maedhroz;[~dcapwell] [~jmeredithco] I think I can see a sequence that produces the error above now. Here goes...

1.) We drop a keyspace, which hits {{Schema#dropKeyspace()}}.
2.) This winds around a bit, but finally clears the keyspace name from the {{keyspaceInstances}} field of {{Schema}}. However, the {{keyspaces}} field still thinks the keyspace is present right before {{dropKeyspace()}} proceeds to {{unload()}}.
3.) At this point, the speculative retry threshold task decides it's a good time to run. It hits {{Keyspace.open()}} and sees that, according to {{Schema#getKeyspaceInstance()}}, the keyspace doesn't exist!
4.) We move into the {{Keyspace}} constructor just in time to get a reference to a {{KeyspaceMetadata}} from {{keyspaces}} in {{Schema}} that thinks the table in question still exists.
5.) Immediately after this happens, the original thread continues into {{unload()}} and drops the hammer on everything, including {{metadataRefs}}.
6.) The task thread wakes up and proceeds in the {{Keyspace}} constructor to try to get a {{TableMetadataRef}}, but of course, it's gone.

If the sequence above is coherent, I think it means the [current patch|https://github.com/apache/cassandra/pull/733/files] is at least an improvement, given it stops the {{Keyspace}} constructor before it proceeds to {{initCf}} and doesn't kill all future executions of the threshold update task in addition. My only concern is that we might still be able to hit {{initCf()}} if we get a {{TableMetadataRef}} _just_ before {{unload()}} blows it away, which seems like it would create a new {{ColumnFamilyStore}}.

So naïve question...why do we allow the speculative retry threshold updater task to create keyspaces at all, ever? It seems like we could approach this an entirely different way...by just having something like {{Keyspace.allExisting()}} that just uses the non-null results of {{Schema#getKeyspaceInstance()}} instead of {{Keyspace.open()}}. Even if one of those instances is in the process of being removed, updating the thresholds on a doomed CFS is harmless. (Also, we can avoid a new esoteric bit of logging trying to explain how our schema updates work.);;;","11/Sep/20 14:09;jmeredithco;I like the `allExisting()` approach and agree updating thresholds in doomed CFS is harmless as long as there aren't issues relating to them being shutdown (the table metadata being invalid). I'm not sure where the best point to actually iterate-over-metadata-of-all-loaded-CFS-without-loading-ever with the {{updateSpeculationThreshold function}} which is what we really want to do. It's also not the end of the world to miss it as a keyspace is loading as it will be updated next time (as long as this doesn't crash updating of course).;;;","11/Sep/20 16:54;maedhroz;[~jmeredithco] I've taken both the testability ideas from [~dcapwell] and the ""only run the update task on existing keyspaces"" approach and worked them into the patch, which is now [running through|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-15949] the tests again. Let me know what you think...;;;","11/Sep/20 17:25;dcapwell;allExisting sounds better in this case, but if what you mentioned is true then we may have other race condition bugs (a lot of places use Keyspace.open) where a dropped keyspace comes back to life, which would impact metrics and would cause the cached Keyspace to have incorrect meta (org.apache.cassandra.schema.Schema#loadNew doesn't update meta)...;;;","11/Sep/20 17:53;dcapwell;Patch looks good to me, it would avoid updater trying to open a keyspace and makes it so the constructor doesn't fail.  I am wondering though if all should actually be allExisting, so rather than adding a new method we fix this method to avoid the problem?  on-startup and on keyspace create we cache the Keyspace object, so Keyspace.open isn't actually needed in the majority of cases.

Given the race above, I still think it may be best if Keyspace.open also locks on Schema so it has a consistent view during the open call and can learn if it still exists (only when the double check locking happens, not in the cache hit case).  [~aleksey] it would be great if we could get your feedback as well.;;;","11/Sep/20 22:06;maedhroz;[~dcapwell] So just to summarize, the plan would be...

1.) Remove the synchronization blocks on {{Keyspace}}.
2.) Replace the sync block on {{Keyspace}} in {{open()}} w/ a sync block on the {{Schema}} singleton. (This ensures most access still results in a cache hit.)
3.) Given it's no longer possible, remove the check in my patch for a null {{TableMetadataRef}} and the logging accompanying it.

Unless [~aleksey] has holes to poke in it, I like it...

UPDATE: After taking a stab at this,  the [tests|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-15949] look unremarkable, aside from indicating that we need to rebase on trunk post-CASSANDRA-15954.;;;","11/Sep/20 22:08;maedhroz;bq. I am wondering though if all should actually be allExisting, so rather than adding a new method we fix this method to avoid the problem?

It looks like you're probably right on this one, but given there are a dozen or so places to audit, I lean toward avoiding it in this patch.;;;","15/Sep/20 18:25;aleksey;The PR looks good to me as currently is.

And I'm sure we have a ton of {{Keyspace.open()}} around, all lazy-initializing the keyspaces, where sometimes we don't mean to do that. Out of scope of this issue, but maybe should indeed be looked into at some point.;;;","15/Sep/20 18:41;aleksey;Relatedly, we might want to audit other similar uses of the executor with tasks not handling exceptions properly.;;;","15/Sep/20 18:48;dcapwell;bq.  but given there are a dozen or so places to audit, I lean toward avoiding it in this patch.

sounds good to me.;;;","15/Sep/20 20:19;dcapwell;re-reviewed; with the lock on schema then this LGTM; +1.;;;","15/Sep/20 20:24;maedhroz;bq. The PR looks good to me as currently is.

[~aleksey] Thanks! Should I consider that a ""+1""? :);;;","16/Sep/20 11:48;aleksey;bq. Thanks! Should I consider that a ""+1""?

Indeed you should (:;;;","16/Sep/20 20:44;dcapwell;CI results:
https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/20/
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15949-trunk-B03EA88E-B95B-40C8-BF76-DA566646C28C

I don't have as much history with Jenkins flaky tests, so I went off Circle CI's results for review.

Also, Jenkins didn't have the same commit as circle as I ninja fixed an issue that was on trunk, so jenkins was missing ea322bfaa78b662c95711e6579b480b4d0f741c6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple failures in cqlsh_tests.test_cqlsh.TestCqlsh,CASSANDRA-15948,13316973,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,15/Jul/20 16:36,16/Mar/22 14:02,13/Jul/23 08:39,15/Jul/20 21:49,3.0.22,3.11.8,,,,Test/dtest/python,,,,0,,,,"At least the following tests in cqlsh_tests.test_cqlsh.TestCqlsh need to be investigated:

{{test_describe_types}}
 {{test_describe_functions}}
 {{test_pycodestyle_compliance}}

For a recent example of this, see [https://app.circleci.com/pipelines/github/maedhroz/cassandra/51/workflows/4fd639f6-6523-4520-961e-5b5c384a13b3/jobs/281]. These three tests fail locally and consistently against {{cassandra-3.0}}, but not on {{trunk}}.

 {{test_pycodestyle_compliance}} seems to fail only on 3.0 and 3.11.",,maedhroz,,,,,,,,,,,"maedhroz opened a new pull request #679:
URL: https://github.com/apache/cassandra/pull/679


   - fixed a number of formatting problems that were causing failures in TestCqlsh::test_pycodestyle_compliance
   - backported CASSANDRA-12189 to avoid failures in TestCqlsh::test_describe_functions


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jul/20 18:54;githubbot;600","maedhroz opened a new pull request #680:
URL: https://github.com/apache/cassandra/pull/680


   - fixed a number of formatting problems that were causing failures in TestCqlsh::test_pycodestyle_compliance
   - backported CASSANDRA-12189 to avoid failures in TestCqlsh::test_describe_functions


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jul/20 18:55;githubbot;600","maedhroz opened a new pull request #84:
URL: https://github.com/apache/cassandra-dtest/pull/84


   changed expectations around whether collection sub-fields of a UDT will show up with the ""frozen"" modifier in versions that don't support non-frozen UDTs


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jul/20 18:57;githubbot;600","maedhroz closed pull request #84:
URL: https://github.com/apache/cassandra-dtest/pull/84


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jul/20 18:15;githubbot;600","maedhroz commented on pull request #84:
URL: https://github.com/apache/cassandra-dtest/pull/84#issuecomment-659584641


   Committed as https://github.com/apache/cassandra-dtest/commit/a70e855b27d7e95dd2ca33245422b05c9c1949b6


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jul/20 18:15;githubbot;600","smiklosovic closed pull request #679:
URL: https://github.com/apache/cassandra/pull/679


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:01;githubbot;600","smiklosovic closed pull request #680:
URL: https://github.com/apache/cassandra/pull/680


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:02;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,CASSANDRA-14980,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-12189,,,,CASSANDRA-15663,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 15 21:49:56 UTC 2020,,,,,,,All,,,,,,"0|z0gsj4:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/5774415368debb8296968a12155f486c5d2b618c,,,,,,,,,Rerun dtests to make sure the listed failures in {{TestCqlsh}} are fixed (w/ no new failures).,,,,,"15/Jul/20 18:10;maedhroz;Apparently back-porting CASSANDRA-12189 should be enough to avoid the issue w/ {{test_describe_functions}}.;;;","15/Jul/20 18:59;maedhroz;3.0 [patch|https://github.com/apache/cassandra/pull/679], [CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra/52/workflows/9db268a0-5dd1-4f10-b23f-5b3e9dc9abbb]
3.11 [patch|https://github.com/apache/cassandra/pull/680], [CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra/53/workflows/62f7ddfa-97a5-41b6-b172-39549eb06fd0]

(trunk should already be fine)

dtest patch: https://github.com/apache/cassandra-dtest/pull/84;;;","15/Jul/20 21:49;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when sending REQUEST_RSP from 3.0 to 4.0 in in-jvm dtests,CASSANDRA-15946,13316847,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,15/Jul/20 07:22,03/Jan/21 17:03,13/Jul/23 08:39,18/Aug/20 16:48,4.0,4.0-beta2,,,,Test/dtest/java,,,,0,,,,"There is a communication problem when testing upgrades using in-JVM dtest between Cassandra 3 and 4. 

In a method {{registerInboundFilter}} of {{Instance}}, we get a message which was just received and we prepare it for filtering as part of which, we serialize the payload again. This is fine when dealing with incoming Cassandra 4 message, because we can serialize it. However when we get the Cassandra 3 message, which uses a different protocol, and we get something like {{REQUEST_RSP}}, we can surely deserialize it through some special deserialization path, but we cannot serialize the payload for it as there is no serializer defined for {{REQUEST_RSP}} - no wonder, why would Cassandra 4.0 need to be able to serialize Cassandra 3.0 payloads?

{code}
java.lang.NullPointerException: null
	at org.apache.cassandra.net.Message$Serializer.serializePost40(Message.java:760)
	at org.apache.cassandra.net.Message$Serializer.serialize(Message.java:618)
	at org.apache.cassandra.distributed.impl.Instance.serializeMessage(Instance.java:267)
	at org.apache.cassandra.distributed.impl.Instance.lambda$registerInboundFilter$4(Instance.java:234)
	at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:62)
	at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:49)
	at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:93)
	at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:305)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165)
	at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137)
	at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:119)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}
",,dcapwell,e.dimitrova,ifesdjeen,jlewandowski,jmeredithco,jwest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15833,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Aug 18 16:48:28 UTC 2020,,,,,,,All,,,,,,"0|z0grr4:",9223372036854775807,,,,ifesdjeen,jwest,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/14d1e3eb91189e1684583918305116061eba6413,,,,,,,,,Here [https://github.com/apache/cassandra/pull/676] is the test which fails due to the mentioned communication problems,,,,,"15/Jul/20 07:26;jlewandowski;Here is my patch for this: [https://github.com/apache/cassandra/pull/678]

Though, I'm not familiar with all of that testing infrastructure, so I'm waiting for comments if it should be fixed in a different way

[~ifesdjeen] ^;;;","15/Jul/20 07:36;ifesdjeen;It's on my list. I'll check it out as soon as I get a chance. Thanks!;;;","23/Jul/20 14:08;ifesdjeen;[UPD] after checking the issue closer. 

It looks like the problem occurs when 4.0 is trying to _serialize_ 3.0 response, which it doesn't have to do most of the time. To be honest, I would just patch it up with something as simple as {{Verb.REQUEST_RSP.unsafeSetSerializer(() -> ReadResponse.serializer);}} in the {{Instance}} startup, instead of trying to change serializers.;;;","28/Jul/20 08:51;jlewandowski;Sorry [~ifesdjeen], I was on short vacation. Indeed, this is what I was trying to explain in the description of this ticket :)

Will try the approach you've suggested;;;","28/Jul/20 11:33;jlewandowski;I've updated my PR with your suggestions. It seems it works fine. You asked about some reproduction example - it is here: [https://github.com/apache/cassandra/pull/676] (CASSANDRA-15833) along with this patch.

 ;;;","10/Aug/20 17:05;ifesdjeen;Great, thank you! 
+1 with implemented suggestions ;;;","12/Aug/20 10:29;jlewandowski;[~ifesdjeen] so can it be committed then?;;;","12/Aug/20 14:15;jwest;I'm +1 as well fwiw. I've used these changes in an updated test/patch for CASSANDRA-15833;;;","12/Aug/20 16:43;jmeredithco;I've been using it too while investigating gossip upgrades - I'm not convinced it's a general fix yet as I hit problems with ECHO_REQ messages but haven't had time to investigate yet. I'm not sure if the ReadResponse serializer is always going to work. There might also be problems with INTERNAL_RSP as well as REQUEST_RSP.;;;","14/Aug/20 20:43;dcapwell;I got curious so did a simple test where one node was v3.0 and the other was v4.0 and just let it run; this replicated the issue super quickly.  What I see is that the issue is with org.apache.cassandra.net.EndpointMessagingVersions#get(org.apache.cassandra.locator.InetAddressAndPort).  When we don't know the version we assume it is the current version... so next question is... why don't we know the version from v3.0?;;;","14/Aug/20 20:44;dcapwell;Very simple to replicate with

{code}
@Test
    public void test() throws Exception
    {
        Versions versions = Versions.find();
        try (Cluster cluster = init(builder()
                                    .withNodes(2)
                                    .withVersion(versions.getLatest(Versions.Major.v30))
                                    .withConfig(c -> c.with(Feature.GOSSIP, Feature.NATIVE_PROTOCOL, Feature.NETWORK))
                                    .start()))
        {
            cluster.schemaChange(withKeyspace(""CREATE TABLE %s.tbl (pk int primary key)""));

            cluster.get(2).shutdown().get();
            ((IUpgradeableInstance) cluster.get(2)).setVersion(versions.getLatest(Versions.Major.v4));
            cluster.get(2).startup();

            System.err.println(""Doing insert"");
            cluster.coordinator(1).execute(withKeyspace(""INSERT INTO %s.tbl (pk) VALUES (?)""), ConsistencyLevel.ALL, 0);
            cluster.get(1).executeInternal(withKeyspace(""INSERT INTO %s.tbl (pk) VALUES (?)""), 1);
            System.err.println(""Doing query"");
            SimpleQueryResult qr = cluster.coordinator(2).executeWithResult(withKeyspace(""SELECT * FROM %s.tbl""), ConsistencyLevel.ALL);
            AssertUtils.assertRows(qr, QueryResults.builder()
                                                   .row(1)
                                                   .row(0)
                                                   .build());
        }
    }
{code}

I don't do any writes, so this patch doesn't fix the messages being sent.;;;","14/Aug/20 21:06;dcapwell;I did a quick test to disable filter logic in both versions and reran; no issues.;;;","14/Aug/20 21:16;dcapwell;disabling filters (comment out in code) fixes most other messages

In short, I think this is a much bigger issue.  jvm dtest doesn't work properly in mixed mode

Given that, I don't think this patch is enough;;;","15/Aug/20 01:56;dcapwell;Ok been testing this out, this is what I see

1) when using mock networking, this patch is required because jvm-dtest filters will serialize all messages; this fails without the patch
2) with networking and gossip are used this still fails, but with a different error

{code}
DEBUG [node1_GossipStage:1] node1 2020-08-14 18:49:18,033 MigrationManager.java:96 - Not pulling schema because release version in Gossip is not major version 3, it is 4.0-beta2-SNAPSHOT
ERROR 01:49:18 Exception in thread Thread[node2_GossipStage:1,5,node2]
java.lang.IllegalArgumentException: null
	at org.apache.cassandra.net.NoPayload$1.serialize(NoPayload.java:40)
	at org.apache.cassandra.net.NoPayload$1.serialize(NoPayload.java:36)
	at org.apache.cassandra.net.Message$Serializer.serializePost40(Message.java:760)
	at org.apache.cassandra.net.Message$Serializer.serialize(Message.java:618)
	at org.apache.cassandra.distributed.impl.Instance.serializeMessage(Instance.java:263)
	at org.apache.cassandra.distributed.impl.Instance.lambda$registerInboundFilter$4(Instance.java:236)
	at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:62)
	at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:49)
	at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:93)
	at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:44)
	at org.apache.cassandra.net.InboundMessageHandler$ProcessMessage.run(InboundMessageHandler.java:890)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}

In a debugger I see the verb that fails is ECHO_REQ, this is caused by the fact the payload is null rather than NoPayload

{code}
ECHO_REQ               (31,  P0, rpcTimeout,      GOSSIP,            () -> NoPayload.serializer,                 () -> EchoVerbHandler.instance,            ECHO_RSP            ),
{code};;;","15/Aug/20 02:06;dcapwell;Looks like the issue is that org.apache.cassandra.net.Message.Serializer#deserializePayloadPre40 returns null when the payloadSize is 0, so won't call the deserializer to return empty;;;","18/Aug/20 16:27;jwest;Kicked off a test run [here | https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=CASSANDRA-15946] so that we can get this merged -- this is blocking a few people / tests and the patch that exists solves the initially reported problem. [~dcapwell] will follow up on the other issues he found separately. ;;;","18/Aug/20 16:48;jwest;Tests passed. Committed to trunk as https://github.com/apache/cassandra/commit/14d1e3eb91189e1684583918305116061eba6413;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Verify expected SSTable components are present at startup,CASSANDRA-15945,13316751,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,14/Jul/20 17:36,03/Jan/21 17:03,13/Jul/23 08:39,20/Jul/20 19:31,4.0,4.0-beta2,,,,Local/SSTable,,,,0,,,,"When Cassandra batch opens all sstables at startup, it should check that all components listed in the TOC.txt are available. Compression is optional, so there may not be a Compression.db component for all sstables, but if there should be and it's missing we continue to load the sstable. The sstable is unreadable without the compression metadata though, but we won't know this until it's touched by a query or compaction.

To reliably use TOC.txt for verification, it needs CASSANDRA-10709 ",,dcapwell,jeromatron,yifanc,,,,,,,,,"yifan-c opened a new pull request #682:
URL: https://github.com/apache/cassandra/pull/682


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jul/20 21:56;githubbot;600","dcapwell commented on a change in pull request #682:
URL: https://github.com/apache/cassandra/pull/682#discussion_r456723285



##########
File path: test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
##########
@@ -780,4 +787,65 @@ public void testGetApproximateKeyCount() throws InterruptedException
             assertEquals(50, SSTableReader.getApproximateKeyCount(sstables));
         }
     }
+
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
+    @Test
+    public void testVerifyCompressionInfoExistenceThrows()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+
+        // delete the compression info, so it is corrupted.
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        compressionInfoFile.delete();
+        assertFalse(""CompressionInfo file should not exist"", compressionInfoFile.exists());
+
+        // discovert the components on disk after deletion
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+
+        expectedException.expect(CorruptSSTableException.class);
+        expectedException.expectMessage(""CompressionInfo.db"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistencePasses()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+
+        // mark the toc file not readable in order to trigger the FSReadError
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        tocFile.setReadable(false);
+
+        expectedException.expect(FSReadError.class);
+        expectedException.expectMessage(""TOC.txt"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistenceWhenTOCUnableToOpen()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    private Descriptor setUpForTestVerfiyCompressionInfoExistence()
+    {
+        Keyspace keyspace = Keyspace.open(KEYSPACE1);
+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_COMPRESSED);
+        SSTableReader sstable = getNewSSTable(cfs);
+        cfs.clearUnsafe();
+        sstable.selfRef().release();
+        Descriptor desc = sstable.descriptor;
+
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        assertTrue(""CompressionInfo file should exist"", compressionInfoFile.exists());

Review comment:
       this will be flaky, deleting sstables is async
   
   ```
   # org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier#tidy
   ScheduledExecutors.nonPeriodicTasks.execute(new Runnable()
   ```
   
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 00:19;githubbot;600","dcapwell commented on a change in pull request #682:
URL: https://github.com/apache/cassandra/pull/682#discussion_r456723461



##########
File path: test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
##########
@@ -780,4 +787,65 @@ public void testGetApproximateKeyCount() throws InterruptedException
             assertEquals(50, SSTableReader.getApproximateKeyCount(sstables));
         }
     }
+
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
+    @Test
+    public void testVerifyCompressionInfoExistenceThrows()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+
+        // delete the compression info, so it is corrupted.
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        compressionInfoFile.delete();
+        assertFalse(""CompressionInfo file should not exist"", compressionInfoFile.exists());
+
+        // discovert the components on disk after deletion
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+
+        expectedException.expect(CorruptSSTableException.class);
+        expectedException.expectMessage(""CompressionInfo.db"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistencePasses()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+
+        // mark the toc file not readable in order to trigger the FSReadError
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        tocFile.setReadable(false);
+
+        expectedException.expect(FSReadError.class);
+        expectedException.expectMessage(""TOC.txt"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistenceWhenTOCUnableToOpen()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    private Descriptor setUpForTestVerfiyCompressionInfoExistence()
+    {
+        Keyspace keyspace = Keyspace.open(KEYSPACE1);
+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_COMPRESSED);
+        SSTableReader sstable = getNewSSTable(cfs);
+        cfs.clearUnsafe();
+        sstable.selfRef().release();
+        Descriptor desc = sstable.descriptor;
+
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        assertTrue(""CompressionInfo file should exist"", compressionInfoFile.exists());

Review comment:
       To make this safe, you would need to create a `readOrdering` barrier




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 00:20;githubbot;600","dcapwell commented on a change in pull request #682:
URL: https://github.com/apache/cassandra/pull/682#discussion_r456724327



##########
File path: test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
##########
@@ -780,4 +787,65 @@ public void testGetApproximateKeyCount() throws InterruptedException
             assertEquals(50, SSTableReader.getApproximateKeyCount(sstables));
         }
     }
+
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
+    @Test
+    public void testVerifyCompressionInfoExistenceThrows()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+
+        // delete the compression info, so it is corrupted.
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        compressionInfoFile.delete();
+        assertFalse(""CompressionInfo file should not exist"", compressionInfoFile.exists());
+
+        // discovert the components on disk after deletion
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+
+        expectedException.expect(CorruptSSTableException.class);
+        expectedException.expectMessage(""CompressionInfo.db"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistencePasses()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+
+        // mark the toc file not readable in order to trigger the FSReadError
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        tocFile.setReadable(false);
+
+        expectedException.expect(FSReadError.class);
+        expectedException.expectMessage(""TOC.txt"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistenceWhenTOCUnableToOpen()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    private Descriptor setUpForTestVerfiyCompressionInfoExistence()

Review comment:
       I don't understand why you delete the SSTable.  verify will run IFF TOC.txt exists, and that is deleted async.  Given the name (Verify CompressionInfo Existence When TOC Unable To Open) it sounds like you want to delete TOC and verify that verify no-ops?  If so you should prob have the function return a boolean to say if it did anything, and make sure that it returns that it didn't.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 00:25;githubbot;600","yifan-c commented on a change in pull request #682:
URL: https://github.com/apache/cassandra/pull/682#discussion_r456724803



##########
File path: test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
##########
@@ -780,4 +787,65 @@ public void testGetApproximateKeyCount() throws InterruptedException
             assertEquals(50, SSTableReader.getApproximateKeyCount(sstables));
         }
     }
+
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
+    @Test
+    public void testVerifyCompressionInfoExistenceThrows()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+
+        // delete the compression info, so it is corrupted.
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        compressionInfoFile.delete();
+        assertFalse(""CompressionInfo file should not exist"", compressionInfoFile.exists());
+
+        // discovert the components on disk after deletion
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+
+        expectedException.expect(CorruptSSTableException.class);
+        expectedException.expectMessage(""CompressionInfo.db"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistencePasses()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+
+        // mark the toc file not readable in order to trigger the FSReadError
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        tocFile.setReadable(false);
+
+        expectedException.expect(FSReadError.class);
+        expectedException.expectMessage(""TOC.txt"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistenceWhenTOCUnableToOpen()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    private Descriptor setUpForTestVerfiyCompressionInfoExistence()

Review comment:
       It is a mistake. I somehow swapped the test name between `testVerifyCompressionInfoExistenceWhenTOCUnableToOpen` and `testVerifyCompressionInfoExistencePasses`.
   
   If TOC exist but cannot be opened, it throws `FSReadError`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 00:29;githubbot;600","dcapwell commented on a change in pull request #682:
URL: https://github.com/apache/cassandra/pull/682#discussion_r457620205



##########
File path: test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
##########
@@ -780,4 +787,65 @@ public void testGetApproximateKeyCount() throws InterruptedException
             assertEquals(50, SSTableReader.getApproximateKeyCount(sstables));
         }
     }
+
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
+    @Test
+    public void testVerifyCompressionInfoExistenceThrows()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+
+        // delete the compression info, so it is corrupted.
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        compressionInfoFile.delete();
+        assertFalse(""CompressionInfo file should not exist"", compressionInfoFile.exists());
+
+        // discovert the components on disk after deletion
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+
+        expectedException.expect(CorruptSSTableException.class);
+        expectedException.expectMessage(""CompressionInfo.db"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistencePasses()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+
+        // mark the toc file not readable in order to trigger the FSReadError
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        tocFile.setReadable(false);
+
+        expectedException.expect(FSReadError.class);
+        expectedException.expectMessage(""TOC.txt"");
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    @Test
+    public void testVerifyCompressionInfoExistenceWhenTOCUnableToOpen()
+    {
+        Descriptor desc = setUpForTestVerfiyCompressionInfoExistence();
+        Set<Component> components = SSTable.discoverComponentsFor(desc);
+        SSTableReader.verifyCompressionInfoExistenceIfApplicable(desc, components);
+    }
+
+    private Descriptor setUpForTestVerfiyCompressionInfoExistence()
+    {
+        Keyspace keyspace = Keyspace.open(KEYSPACE1);
+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_COMPRESSED);
+        SSTableReader sstable = getNewSSTable(cfs);
+        cfs.clearUnsafe();
+        sstable.selfRef().release();
+        Descriptor desc = sstable.descriptor;
+
+        File compressionInfoFile = new File(desc.filenameFor(Component.COMPRESSION_INFO));
+        File tocFile = new File(desc.filenameFor(Component.TOC));
+        assertTrue(""CompressionInfo file should exist"", compressionInfoFile.exists());

Review comment:
       Thanks, by removing the release these should stick around; so should resolve the issue above.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 18:49;githubbot;600","yifan-c commented on pull request #682:
URL: https://github.com/apache/cassandra/pull/682#issuecomment-676597748


   close the PR since it is merged.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:47;githubbot;600","yifan-c closed pull request #682:
URL: https://github.com/apache/cassandra/pull/682


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:47;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15537,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jul 20 19:31:17 UTC 2020,,,,,,,All,,,,,,"0|z0gr5s:",9223372036854775807,,,,brandon.williams,dcapwell,,,Low,,2.0.0,,,https://github.com/apache/cassandra/commit/f3198c45067f753444ffafbc83b6aa563cb392ac,,,,,,,,,ci,,,,,"16/Jul/20 22:52;yifanc;PR: [https://github.com/apache/cassandra/pull/682]
 Code: [https://github.com/yifan-c/cassandra/tree/CASSANDRA-15945-verify-sstable-components]
 Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra]

The patch provides the best-effort verification based on the entries in TOC file to verify the existence of the required {{CompressionInfo}} component, when opening a sstable. 
 If the TOC file does not exist, the verification is a no-op. 
 It only verifies the {{CompressionInfo}} component, because the other components are either mandatory and verified or we rebuild them on opening. Only the compressionInfo is mandatory when compression is enabled but no verification for it in the code base yet. 
 See the table below.

_Mandatory: must present on opening. Optional: can be absent on opening._
||Component||Note||
|DATA|Mandatory. Verified.|
|PRIMARY INDEX|Mandatory (if with validation). Verified.|
|FILTER|Optional. Recreate if needed|
|COMPRESSION INFO|Mandatory if compression enabled. |
|STATS|Mandatory. Verified|
|DIGEST|Optional. |
|CRC|Optional.|
|SUMMARY|Optional.|
|TOC|Optional.|;;;","18/Jul/20 00:29;dcapwell;Did a first pass and mostly LGTM, left a comment in the PR about the tests.;;;","20/Jul/20 18:51;dcapwell;LGTM. +1;;;","20/Jul/20 19:31;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix support for adding UDT fields to clustering keys,CASSANDRA-15938,13316492,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,ifesdjeen,ifesdjeen,13/Jul/20 16:04,21/Dec/20 09:09,13/Jul/23 08:39,22/Sep/20 09:40,2.2.19,3.0.23,3.11.9,4.0,4.0-beta3,Feature/UDT,,,,0,,,,"Adding UDT fields to clustering keys is broken in all versions, however slightly differently.

In 4.0, there will be a brief moment while schema changes are propagated during which we won’t be able to decode and compare byte sequences. Unfortunately, it is unclear what we should do in such cases, since we can’t just come up with a comparator, and we can’t ignore non-null trailing values, since this will lead to cases where compare for tuples `a;1` and `a;2` would return 0, effectively making them equal, and we don’t know how to compare unknown trailing values. Probably we should reject such query since we can’t sort correctly, but we should make the error message more descriptive than just ""Index 1 out of bounds for length 1”. The only problem is that we get this exception only on flush right now, so data already propagates to the node by that time.

In 3.0, the problem is a bit worse than that, since in 3.0 we do not ignore trailing nulls, so some of the values, written before `ALTER TYPE .. ADD` become inaccessible. Both old values, and the new ones should always be accessible.
",,aleksey,ifesdjeen,jeromatron,maedhroz,n.v.harikrishna,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 22 09:39:49 UTC 2020,,,,,,,All,,,,,,"0|z0gpkg:",9223372036854775807,,,,maedhroz,,,,Critical,,2.2.18,,,https://github.com/apache/cassandra/commit/2f0eb6f799f32c6f01d1f8384d48910c34ff6a98,,,,,,,,,Tests attached.,,,,,"24/Jul/20 16:35;ifesdjeen;|[2.2 patch|https://github.com/ifesdjeen/cassandra/tree/15938-2.2]|[2.2 CI|https://circleci.com/gh/ifesdjeen/cassandra/tree/15938-2.2]|
|[3.0 patch|https://github.com/ifesdjeen/cassandra/tree/15938-3.0]|[3.0 CI|https://circleci.com/gh/ifesdjeen/cassandra/tree/15938-3.0]|
|[3.11 patch|https://github.com/ifesdjeen/cassandra/tree/15938-3.11]|[3.11 CI|https://circleci.com/gh/ifesdjeen/cassandra/tree/15938-3.11]|
|[trunk patch|https://github.com/ifesdjeen/cassandra/tree/15938-trunk]|[trunk CI|https://circleci.com/gh/ifesdjeen/cassandra/tree/15938-trunk]|;;;","27/Jul/20 20:53;maedhroz;[~ifesdjeen] Just to make sure I'm not missing anything, aside from an extra newline, the 3.0 -> trunk patches are identical?;;;","29/Jul/20 23:46;maedhroz;[~ifesdjeen] So far I've looked at the 2.2 patch, and aside from one [minor question|https://github.com/ifesdjeen/cassandra/commit/2b91cb9022a0f8e4b700d0dc5c61d92b971dd6f4#r41021513], that LGTM. Moving on to the 3.0+ patches...;;;","03/Aug/20 21:26;maedhroz;[~ifesdjeen] After looking at the 3.0+ patches, the basic fix looks reasonable. There are only two things that seem worth mentioning:

- It seems like {{allRemainingComponentsAreNull()}} corrected the previous mistake of potentially treating a size of zero as null, but it doesn't look like there was a test that covered this case. Not sure how important it is for us to add that, but it's worth considering.
- The extra bit of diagnostic information in {{DuplicateRowChecker}} might be useful, but I'm not sure exactly how much overhead the extra {{equals()}} check will introduce on compaction and read.

+1 otherwise;;;","04/Aug/20 00:59;maedhroz;Taking a quick look at the tests, it seems like the 3.11 run [failed to build|https://app.circleci.com/pipelines/github/ifesdjeen/cassandra/36/workflows/5d23d9e7-1bf9-4538-a69d-b355adf5650f/jobs/2300]. The unit tests also weren't run w/ J11 on trunk. Otherwise, things look about as expected.;;;","28/Aug/20 15:19;ifesdjeen;[~maedhroz] thank you for the review. I've updated patches to reflect the first point (added a test with empty strings). 

As regards {{DuplicateRowChecker}}, I think it's fine as it is for now, since we do not expect many rows to be duplicates, and we're only checking for equality in case of `0` cmp value, which shouldn't have a performance impact, but could be useful for debugging. I've also fixed a compilation error on 3.11 that you have pointed out and re-triggered builds.;;;","04/Sep/20 16:41;maedhroz;[~ifesdjeen] I don't see any new failures in the unit tests or in-JVM dtests, but we probably need to switch to the HIGHRES  CircleCI config for the python dtests...;;;","20/Sep/20 12:10;ifesdjeen;[~maedhroz] I've had to rebase and rework trunk a bit, which required some changes because of [CASSANDRA-15393]. Could you check the new version out?;;;","21/Sep/20 15:55;maedhroz;Sure. CC'ing [~bdeggleston] as well in case he wants to take a peek.;;;","21/Sep/20 15:59;maedhroz;The last test run looks ok, modulo not having pulled in CASSANDRA-16102.;;;","21/Sep/20 20:55;maedhroz;[~ifesdjeen] The 15393-related changes look fine. The only thing that didn't occur to me in my initial review was that it might be nice to output _how many_ non-equal duplicates occurred in the logs rather than whether any happened. It's a minor thing though, and I wouldn't hold anything up to make that change.;;;","22/Sep/20 09:39;ifesdjeen;[~maedhroz]  thank you for checking! we could do that, but I have left it as-is for now. Main motivation for not changing it is withouot storing all potential duplicates, we'd only say how many duplicates were different to the first clustering we've seen, which is only partially useful. That said, if you already have duplicates, you probably should take a close look at your sstables anyways.

I've committed the change to 2.2 with [2f0eb6f799f32c6f01d1f8384d48910c34ff6a98|https://github.com/apache/cassandra/commit/2f0eb6f799f32c6f01d1f8384d48910c34ff6a98] and merged it up to [3.0|https://github.com/apache/cassandra/commit/2cde7a7e148e333c3cac7a015322db5f7ccbe6c5], [3.11|https://github.com/apache/cassandra/commit/492009ae9b48839cc97540ecb1cf5217c1f30118] and [trunk|https://github.com/apache/cassandra/commit/53234e744db432666dc27625f87258ce6aab2d23] with corresponding changes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX output inconsistencies from CASSANDRA-7544 storage-port-configurable-per-node,CASSANDRA-15937,13316256,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,11/Jul/20 00:03,03/Jan/21 17:03,13/Jul/23 08:39,26/Aug/20 21:03,4.0,4.0-beta2,,,,Observability/JMX,,,,0,,,,"CASSANDRA-7544 introduced changes to allow the storage port number to be configured per-node. As part of that work it introduces new MBeans for MessagingService, FailureDetector providing new 'WithPort' versions that include the new port information, however there are some mistakes and inconsistencies.
{code:java}
                           3.11.6                trunk                  trunk w/Port          Notes
  
 AllEndpointStates        /127.0.0.1\n...       /127.0.0.3\n...        127.0.0.3:7000\n        (trunk /w port different)
 SimpleStates             /127.0.0.2=UP         /127.0.0.2=UP          127.0.0.3:7000=UP       (trunk /w port different)
 LargeMessagePendingTasks /127.0.0.1=0          /127.0.0.1=0           127.0.0.3:7000=0        (trunk /w port different)
 TimeoutsPerHost          127.0.0.1=0           /127.0.0.1=0           127.0.0.3:7000=0        3.0/3.11.6 & trunk differ.
 BackPressurePerHost      127.0.0.1=Infinity    /127.0.0.2=Infinity    /127.0.0.2=Infinity     3.11 & trunk differ, missing port number for BackPressurePerHostWithPort
 SchemaVersions          {...=[127.0.0.1,...]} {...=[127.0.0.1,...]}  {...=[127.0.0.1:7000,...]
  
 TokenToEndpointMap      {-92...8=127.0.0.1,   -92...8=127.0.0.1      -92..8=127.0.0.1:7000
 HostIdMap               127.0.0.1=1ee..6f0af  127.0.0.1=e06...7e     MISSING                  Deprecated for EndpointToHostId
 EndpointToHostId        127.0.0.1=1ee..6f0a   127.0.0.1=e06...7e     127.0.0.1:7000=e0..7e
 HostIdToEndpoint        1ee..6f0a=127.0.0.1   e06..7e=127.0.0.1      e06..7e=127.0.0.1:7000
 LoadMap                 127.0.0.1=185.01 KiB  127.0.0.1:7000=106.08 KiB  127.0.0.1=106.08 Ki  LoadMap and LoadMapWithPort are flipped.
 LiveNodes               127.0.0.1             127.0.0.1              127.0.0.1:7000
 Ownership               /127.0.0.1=0.333333   /127.0.0.1=0.333333    127.0.0.1:7000=0.333333
 Scores                  /127.0.0.1=0.0        /127.0.0.1=0.0         127.0.0.1:7000=0.0
  {code}
 
 Proposed changes
  
 1) AllEndpointStats, SimpleStates, Connection message tracking, TimeoutsPerHost - include the host/ip:port in the WithPort version
2) Add port number to BackPressurePerHostWithPort
3) Correct LoadMap to omit port / LoadMapWithPort to include port
4) Ownership - update with port to host/ip:port version
5) Scores - update with port to host/ip:port version
  
  
 Additionally while dumping out all of the JMX info with `sjk mxdump`
  
6) DynamicEndpointSnitch.getScoresWithPort now returns an InetAddressAndPort which should just be a String
7) ClientMetrics.clientsByProtocolVersion returns a Guava Immutable map
8) StorageService.getIdealConsistencyLevel fails if none set (as we try and call ConsistencyLevel.toString on a null pointer).",,dcapwell,e.dimitrova,jeromatron,jmeredithco,mck,,,,,,,"jonmeredith opened a new pull request #692:
URL: https://github.com/apache/cassandra/pull/692


   See [CASSANDRA-15937](https://issues.apache.org/jira/browse/CASSANDRA-15937)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jul/20 16:32;githubbot;600","dcapwell commented on a change in pull request #692:
URL: https://github.com/apache/cassandra/pull/692#discussion_r464629070



##########
File path: src/java/org/apache/cassandra/locator/InetAddressAndPort.java
##########
@@ -119,11 +121,22 @@ public int compareTo(InetAddressAndPort o)
         return Integer.compare(port, o.port);
     }
 
+    public String getHostAddressAndPort()
+    {
+        return getHostAddress(true);
+    }
+
+    static final Pattern jmxIncompatibleChars = Pattern.compile(""[\\[\\]:]"");

Review comment:
       should be private

##########
File path: src/java/org/apache/cassandra/locator/InetAddressAndPort.java
##########
@@ -151,7 +164,33 @@ public String toString(boolean withPort)
 
     public static String toString(InetAddress address, int port)
     {
-        return HostAndPort.fromParts(address.getHostAddress(), port).toString();
+        String hostName = Objects.toString(address.getHostName(), """");

Review comment:
       Docs would be good, so the caller knows what to expect and how this related to getHostAddressAndPort() and getHostAddressAndPortForJMX()

##########
File path: test/unit/org/apache/cassandra/gms/EndpointStateTest.java
##########
@@ -114,11 +117,11 @@ public void testMultiThreadWriteConsistency() throws InterruptedException
     /**
      * Test that two threads can update the state map concurrently.
      */
-    private void innerTestMultiThreadWriteConsistency() throws InterruptedException
+    private void innerTestMultiThreadWriteConsistency() throws InterruptedException, UnknownHostException
     {
         final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();
         final List<Token> tokens = Collections.singletonList(token);
-        final String ip = ""127.0.0.1"";
+        final InetAddress ip = InetAddress.getByName(""127.0.0.1"");

Review comment:
       sadly this will try to resolve, since this should be loopback its mostly fine, but would be good to use `java.net.InetAddress#getByAddress(java.lang.String, byte[])`
   
   ```
   InetAddress.getByAddress(null, new byte[] { 127, 0, 0, 1})
   ```
   
   this throws the same exception, but doesn't try to resolve

##########
File path: src/java/org/apache/cassandra/locator/InetAddressAndPort.java
##########
@@ -119,11 +121,22 @@ public int compareTo(InetAddressAndPort o)
         return Integer.compare(port, o.port);
     }
 
+    public String getHostAddressAndPort()
+    {
+        return getHostAddress(true);
+    }
+
+    static final Pattern jmxIncompatibleChars = Pattern.compile(""[\\[\\]:]"");

Review comment:
       should be `JMX_INCOMPATIBLE_CHARS`

##########
File path: src/java/org/apache/cassandra/metrics/ClientMetrics.java
##########
@@ -136,7 +136,7 @@ private int countConnectedClients()
 
         for (Server server : servers)
             for (ClientStat stat : server.recentClientStats())
-                stats.add(stat.asMap());
+                stats.add(new HashMap(stat.asMap()));

Review comment:
       for maintenance, would be good to document that this is because `asMap` returns guava, so need to convert to java for jmx




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Aug/20 23:12;githubbot;600","jonmeredith commented on a change in pull request #692:
URL: https://github.com/apache/cassandra/pull/692#discussion_r471001246



##########
File path: src/java/org/apache/cassandra/locator/InetAddressAndPort.java
##########
@@ -119,11 +121,22 @@ public int compareTo(InetAddressAndPort o)
         return Integer.compare(port, o.port);
     }
 
+    public String getHostAddressAndPort()
+    {
+        return getHostAddress(true);
+    }
+
+    static final Pattern jmxIncompatibleChars = Pattern.compile(""[\\[\\]:]"");

Review comment:
       ack




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Aug/20 15:26;githubbot;600","jonmeredith commented on a change in pull request #692:
URL: https://github.com/apache/cassandra/pull/692#discussion_r471015576



##########
File path: src/java/org/apache/cassandra/locator/InetAddressAndPort.java
##########
@@ -151,7 +164,33 @@ public String toString(boolean withPort)
 
     public static String toString(InetAddress address, int port)
     {
-        return HostAndPort.fromParts(address.getHostAddress(), port).toString();
+        String hostName = Objects.toString(address.getHostName(), """");

Review comment:
       Updated and looked a little closer.  Ended up rewriting to preserve the `InetAddress.toString` resolver behavior.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Aug/20 17:15;githubbot;600","jonmeredith commented on a change in pull request #692:
URL: https://github.com/apache/cassandra/pull/692#discussion_r471016978



##########
File path: src/java/org/apache/cassandra/metrics/ClientMetrics.java
##########
@@ -136,7 +136,7 @@ private int countConnectedClients()
 
         for (Server server : servers)
             for (ClientStat stat : server.recentClientStats())
-                stats.add(stat.asMap());
+                stats.add(new HashMap(stat.asMap()));

Review comment:
       ack




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Aug/20 17:32;githubbot;600","jonmeredith commented on a change in pull request #692:
URL: https://github.com/apache/cassandra/pull/692#discussion_r471016996



##########
File path: test/unit/org/apache/cassandra/gms/EndpointStateTest.java
##########
@@ -114,11 +117,11 @@ public void testMultiThreadWriteConsistency() throws InterruptedException
     /**
      * Test that two threads can update the state map concurrently.
      */
-    private void innerTestMultiThreadWriteConsistency() throws InterruptedException
+    private void innerTestMultiThreadWriteConsistency() throws InterruptedException, UnknownHostException
     {
         final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();
         final List<Token> tokens = Collections.singletonList(token);
-        final String ip = ""127.0.0.1"";
+        final InetAddress ip = InetAddress.getByName(""127.0.0.1"");

Review comment:
       ack - much better, thanks.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Aug/20 17:33;githubbot;600","dcapwell commented on a change in pull request #692:
URL: https://github.com/apache/cassandra/pull/692#discussion_r473368193



##########
File path: src/java/org/apache/cassandra/locator/InetAddressAndPort.java
##########
@@ -149,9 +170,42 @@ public String toString(boolean withPort)
         }
     }
 
+    /** Format an InetAddressAndPort in the same style as InetAddress.toString.
+     *  The string returned is of the form: hostname / literal IP address : port
+     *  (without the whitespace). Literal IPv6 addresses will be wrapped with [ ]
+     *  to make the port number clear.
+     *
+     *  If the host name is unresolved, no reverse name service lookup
+     *  is performed. The hostname part will be represented by an empty string.
+     *
+     * @param address InetAddress to convert String
+     * @param port Port number to convert to String
+     * @return String representation of the IP address and port
+     */
     public static String toString(InetAddress address, int port)
     {
-        return HostAndPort.fromParts(address.getHostAddress(), port).toString();
+        String addressToString = address.toString(); // cannot use getHostName as it resolves
+        int nameLength = addressToString.lastIndexOf('/'); // use last index to prevent ambiguity if host name contains /
+        assert nameLength >= 0 : ""InetAddress.toString format may have changed, expecting /"";

Review comment:
       should include the string `addressToString` so debugging actually knows what caused the failure

##########
File path: test/distributed/org/apache/cassandra/distributed/test/GossipSettlesTest.java
##########
@@ -18,27 +18,143 @@
 
 package org.apache.cassandra.distributed.test;
 
+import java.net.InetAddress;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+import org.junit.Assert;
 import org.junit.Test;
 
-import org.apache.cassandra.distributed.api.ICluster;
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.gms.FailureDetector;
+import org.apache.cassandra.gms.Gossiper;
+import org.apache.cassandra.net.MessagingService;
+import org.apache.cassandra.repair.SystemDistributedKeyspace;
+import org.apache.cassandra.schema.SchemaConstants;
+import org.apache.cassandra.service.StorageProxy;
+import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
 import static org.apache.cassandra.distributed.api.Feature.GOSSIP;
 import static org.apache.cassandra.distributed.api.Feature.NETWORK;
 
 // TODO: this test should be removed after running in-jvm dtests is set up via the shared API repository
 public class GossipSettlesTest extends TestBaseImpl
 {
-
     @Test
     public void testGossipSettles() throws Throwable
     {
         /* Use withSubnet(1) to prove seed provider is set correctly - without the fix to pass a seed provider, this test fails */
-        try (ICluster cluster = builder().withNodes(3)
-                                         .withConfig(config -> config.with(GOSSIP).with(NETWORK))
-                                         .withSubnet(1)
-                                         .start())
+        try (Cluster cluster = builder().withNodes(3)
+                                        .withConfig(config -> config.with(GOSSIP).with(NETWORK))
+                                        .withSubnet(1)
+                                        .start())
         {
+            // Verify the 4.0 WithPort versions of status reporting methods match their InetAddress
+            // counterparts.  Disable Gossip first to prevent any bump in heartbeats that would
+            // invalidate the comparison.  Compare the newer WithPort versions by adding the
+            // storage port to IP addresses in keys/values/strings as appropriate.
+            cluster.forEach(i -> i.runOnInstance(() -> { Gossiper.instance.stop(); }));
+            cluster.get(1).runOnInstance(() -> {
+
+                // First prove that the storage port is added
+                Assert.assertEquals(""stuff 127.0.0.1:7012 morestuff 127.0.0.2:7012"", addStoragePortToIP(""stuff 127.0.0.1 morestuff 127.0.0.2""));
+
+                FailureDetector fd = ((FailureDetector) FailureDetector.instance);
+                Assert.assertEquals(addStoragePortToInstanceName(fd.getAllEndpointStates(false)),
+                                    fd.getAllEndpointStates(true));
+                Assert.assertEquals(addPortToKeys(fd.getSimpleStates()), fd.getSimpleStatesWithPort());
+
+                StorageProxy sp = StorageProxy.instance;
+                Assert.assertEquals(addPortToSchemaVersions(sp.getSchemaVersions()), sp.getSchemaVersionsWithPort());
+
+                StorageService ss = StorageService.instance;
+                Assert.assertEquals(addPortToValues(ss.getTokenToEndpointMap()), ss.getTokenToEndpointWithPortMap());
+                Assert.assertEquals(addPortToKeys(ss.getEndpointToHostId()), ss.getEndpointWithPortToHostId());
+                Assert.assertEquals(addPortToValues(ss.getHostIdToEndpoint()), ss.getHostIdToEndpointWithPort());
+                Assert.assertEquals(addPortToKeys(ss.getLoadMap()), ss.getLoadMapWithPort());
+                Assert.assertEquals(addPortToList(ss.getLiveNodes()), ss.getLiveNodesWithPort());
+                List<String> naturalEndpointsAddedPort = ss.getNaturalEndpoints(SchemaConstants.DISTRIBUTED_KEYSPACE_NAME,
+                                                                                SystemDistributedKeyspace.VIEW_BUILD_STATUS, ""dummy"").stream()
+                                                           .map(e -> addStoragePortToIP(e.getHostAddress())).collect(Collectors.toList());
+                Assert.assertEquals(naturalEndpointsAddedPort,
+                                    ss.getNaturalEndpointsWithPort(SchemaConstants.DISTRIBUTED_KEYSPACE_NAME,
+                                                                   SystemDistributedKeyspace.VIEW_BUILD_STATUS, ""dummy""));
+                naturalEndpointsAddedPort = ss.getNaturalEndpoints(SchemaConstants.DISTRIBUTED_KEYSPACE_NAME, ByteBufferUtil.EMPTY_BYTE_BUFFER).stream()
+                                              .map(e -> addStoragePortToIP(e.getHostAddress())).collect(Collectors.toList());
+                Assert.assertEquals(naturalEndpointsAddedPort,
+                                    ss.getNaturalEndpointsWithPort(SchemaConstants.DISTRIBUTED_KEYSPACE_NAME, ByteBufferUtil.EMPTY_BYTE_BUFFER));
+
+
+                // Difference in key type... convert to String and add the port to the older format
+                Map<String, Float> getOwnershipKeyAddedPort = ss.getOwnership().entrySet().stream()
+                                                                .collect(Collectors.<Map.Entry<InetAddress, Float>, String, Float>toMap(
+                                                                e -> addStoragePortToIP(e.getKey().toString()),
+                                                                Map.Entry::getValue));
+                Assert.assertEquals(getOwnershipKeyAddedPort, ss.getOwnershipWithPort());
+
+                MessagingService ms = MessagingService.instance();
+                Assert.assertEquals(addPortToKeys(ms.getTimeoutsPerHost()), ms.getTimeoutsPerHostWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getLargeMessagePendingTasks()), ms.getLargeMessagePendingTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getLargeMessageCompletedTasks()), ms.getLargeMessageCompletedTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getLargeMessageDroppedTasks()), ms.getLargeMessageDroppedTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getSmallMessagePendingTasks()), ms.getSmallMessagePendingTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getSmallMessageCompletedTasks()), ms.getSmallMessageCompletedTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getSmallMessageDroppedTasks()), ms.getSmallMessageDroppedTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getGossipMessagePendingTasks()), ms.getGossipMessagePendingTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getGossipMessageCompletedTasks()), ms.getGossipMessageCompletedTasksWithPort());
+                Assert.assertEquals(addPortToKeys(ms.getGossipMessageDroppedTasks()), ms.getGossipMessageDroppedTasksWithPort());
+            });
         }
     }
 
+
+    final static Pattern IP4_ADDRESS = Pattern.compile(""(127\\.0\\.\\d{1,3}\\.\\d{1,3})"");
+
+    static String addStoragePortToIP(String s)
+    {
+        return IP4_ADDRESS.matcher(s).replaceAll(""$1:"" + DatabaseDescriptor.getStoragePort());
+    }
+
+    static String addStoragePortToInstanceName(String s)
+    {
+        return Arrays.stream(s.split(""\n"")).map(line -> {
+            if (line.startsWith("" ""))

Review comment:
       nit: `return line.startsWith("" "") ? line : addStoragePortToIP(line);`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 22:20;githubbot;600","jonmeredith closed pull request #692:
URL: https://github.com/apache/cassandra/pull/692


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Aug/20 00:07;githubbot;600","jonmeredith commented on pull request #692:
URL: https://github.com/apache/cassandra/pull/692#issuecomment-681185827


   Merged as a062ff5f9f0d3221deaaaaf8fccbcd21e933e7cd


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Aug/20 00:07;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Code,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 26 21:03:23 UTC 2020,,,,,,,All,,,,,,"0|z0go40:",9223372036854775807,,,,dcapwell,,,,Low,,4.0-beta1,,,https://github.com/apache/cassandra/commit/a062ff5f9f0d3221deaaaaf8fccbcd21e933e7cd,,,,,,,,,tests,,,,,"24/Jul/20 18:48;jmeredithco;Here's the before & after with the patch.
{code:java}
                          current trunk             current w/port               patched                     patched w/port

 AllEndpointStates        /127.0.0.3\n...           127.0.0.1:7000\n             /127.0.0.1                  /127.0.0.3:7000
 SimpleStates             /127.0.0.1=UP             127.0.0.1:7000=UP            /127.0.0.1=UP               /127.0.0.2:7000=UP
 LargeMessagePendingTasks /127.0.0.1=0              127.0.0.1:7000=0             /127.0.0.1=0                /127.0.0.1:7000=0
 TimeoutsPerHost          /127.0.0.1=0              127.0.0.1:7000=0             /127.0.0.1=0                /127.0.0.1:7000=0
 SchemaVersions          {...=[127.0.0.1,...]}      {...=[127.0.0.1:7000,...]    {...=[127.0.0.1,...]}       {...=[127.0.0.1:7000,...]}

 TokenToEndpointMap      -92...8=127.0.0.1          -92..8=127.0.0.1:7000        -92..08=127.0.0.1           -92..08=127.0.0.1:7000
 EndpointToHostId        127.0.0.1=e06...7e         127.0.0.1:7000=e0..7e        127.0.0.1=e04..5            127.0.0.1:7000=e0..b5
 HostIdToEndpoint        e06..7e=127.0.0.1          e06..7e=127.0.0.1:7000       e0..b5=127.0.0.1            e0..b5=127.0.0.1:7000
 LoadMap                 127.0.0.1:7000=106.08 KiB  127.0.0.1=106.08 KiB         127.0.0.1=106.12 KiB        127.0.0.1:7000=106.12 KiB
 LiveNodes               127.0.0.1                  127.0.0.1:7000               127.0.0.1                   127.0.0.1:7000
 Ownership               /127.0.0.1=0.0             127.0.0.1:7000=0.0           /127.0.0.1=0.333333         /127.0.0.1:7000=0.333333

{code}
I checked the name resolution also works by adding some additional aliases to /etc/hosts
{code:java}
127.0.0.1	localhost local0-i1
255.255.255.255	broadcasthost
::1             localhost
127.0.0.2 local0-i2
127.0.0.3 local0-i3
{code}
Which gives
{code:java}
     ""SimpleStates"": ""{local0-i3/127.0.0.3=UP, localhost/127.0.0.1=UP, local0-i2/127.0.0.2=UP}"",
      ""SimpleStatesWithPort"": ""{localhost/127.0.0.1:7000=UP, local0-i2/127.0.0.2:7000=UP, local0-i3/127.0.0.3:7000=UP}"",
{code}
 
 If a reviewer is feeling adventurous and wants to test with IPv6, you can create a cluster with
{code:java}
# macOS aliases, YMMV
sudo ifconfig lo0 inet6 alias 0:0:0:0:0:0:0:1
sudo ifconfig lo0 inet6 alias 0:0:0:0:0:0:0:2
sudo ifconfig lo0 inet6 alias 0:0:0:0:0:0:0:3

ccm create -n3 --install-dir=. --ip-format=""::%d"" c15937ipv6
{code};;;","24/Jul/20 19:04;jmeredithco;[Branch|https://github.com/jonmeredith/cassandra/tree/c15937]
 [PR|https://github.com/apache/cassandra/pull/692]
 [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=c15937] - looks there's an issue with the TopologyChangeTest I need to investigate.;;;","03/Aug/20 23:17;dcapwell;This patch looks to be a few things
* refactor to centralize logic (toString(true), hostAndPortForJmx, etc.)
* bug fixes for JMX (InetAddressAndPort, Guava collections, etc.)
* check output to match 3.x output

Overall I am good with this patch, but would like to see tests enforcing the behavioral changes; mostly looks like updating existing tests impacted (like repair tests).

I will need to do another pass again as this is large, but looks good so far.;;;","16/Aug/20 16:38;jmeredithco;Sorry it's taken a while to get to the feedback on this.

Your comment about better JavaDocs nudged me to look at the {{InetAddress.toString()}} method more closely, and I've realized the first draft of the {{InetAddressAndPort.toString}} would trigger name resolution.  I've rewritten it to have the same behavior with respect to side-effects (by directly parsing the output from {{InetAddress.toString}} instead). Tests updated with your suggestion to show resolved/non-resolved (and pathalogical) cases.

Thanks for the nudge on testing.  I've gone through and extended the {{GossipSettlesTest}} to check both the gossip related and some other {{WithPort}} functions.  Ideally this would be in it's own test, but pragmatically everything is set up as we need it and this saves runtime on the dtests.  I can break it out if you'd strongly prefer.

Lastly I spotted another use of {{toString}} that should be {{getHostNameAndPort}} in the repair history {{participants_v2}}, which I fixed.
;;;","16/Aug/20 16:48;jmeredithco;Pushed a separate [rebased branch|https://github.com/jonmeredith/cassandra/tree/c15937-rebased] to move past the {{TopologyChangeTest}} issues that have been fixed. [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=c15937-rebased] is running.;;;","19/Aug/20 22:21;dcapwell;Overall LGTM, left a few small comments in the PR.

Assuming the comments are addressed then +1 from me.;;;","19/Aug/20 22:30;jmeredithco;Thanks for looking at it again, I've pushed the nits up to the rebased branch.;;;","20/Aug/20 01:42;dcapwell;LGTM +1;;;","22/Aug/20 18:10;dcapwell;Tested out the merge but there were python dtest failures; can you take a look [~jmeredithco]?  https://app.circleci.com/pipelines/github/dcapwell/cassandra/422/workflows/012cfc82-ec1b-4bdc-92db-3f4c4721882a

CI build: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15937-trunk-3013A0E9-A2D8-4D27-8CD2-B653FEAB0931
branch: https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-15937-trunk-3013A0E9-A2D8-4D27-8CD2-B653FEAB0931
patch: https://github.com/dcapwell/cassandra/commit/e00a0a0b4f1db4e35eaf7844f8762af440587b6d.patch;;;","24/Aug/20 14:18;jmeredithco;Will do - looks like regexes in tests need to be updated for the toString vs getHostByAddressAndPort formats.  I'm pleasantly suprrised they're being tested.;;;","25/Aug/20 00:22;jmeredithco;Thanks for prepping. The failures look genuine and related to reverting some of the formatting changes in CASSANDRA-7544. Fixing requires updates to both Dtest and the cassandra-dtest branch of CCM. Not sure how they should get merged or run through CI as you need the rebased Cassandra branch, the updated dtest branch with the ccm branch checked out inside it.

[Dtest changes|https://github.com/jonmeredith/cassandra-dtest/tree/CASSANDRA-15937] 
[CCM changes |https://github.com/jonmeredith/ccm/tree/CASSANDRA-15937];;;","25/Aug/20 01:28;dcapwell;This is what I see in circle ci

{code}
  clone_dtest:
    steps:
    - run:
        name: Clone Cassandra dtest Repository (via git)
        command: |
          git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO ~/cassandra-dtest
  create_venv:
    parameters:
      python_version:
        type: enum
        default: ""3.6""
        enum: [""3.6"", ""3.7"", ""3.8""]
    steps:
    - run:
        name: Configure virtualenv and python Dependencies
        command: |
          # note, this should be super quick as all dependencies should be pre-installed in the docker image
          # if additional dependencies were added to requirmeents.txt and the docker image hasn't been updated
          # we'd have to install it here at runtime -- which will make things slow, so do yourself a favor and
          # rebuild the docker image! (it automatically pulls the latest requirements.txt on build)
          source ~/env<<parameters.python_version>>/bin/activate
          export PATH=$JAVA_HOME/bin:$PATH
          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt
          pip3 uninstall -y cqlsh
          pip3 freeze
{code}

So, looks like we need the dtest branch to update ~/cassandra-dtest/requirements.txt to point to the ccm branch?  https://github.com/apache/cassandra-dtest/blob/master/requirements.txt#L3

[~mck] does this sound right to you?  Know a different process?


[~jmeredithco] ill test this tomorrow, will update my scripts to link those two in with circle ci.;;;","25/Aug/20 06:33;mck;bq. So, looks like we need the dtest branch to update ~/cassandra-dtest/requirements.txt to point to the ccm branch? https://github.com/apache/cassandra-dtest/blob/master/requirements.txt#L3


That's correct [~dcapwell]. Usually by adding a ""throw away"" commit that contains the requirements.txt hack, and a note on the jira about it and the necessary merge order.;;;","25/Aug/20 17:19;dcapwell;Thanks, working on a script to make this easier for me; launched the build here https://app.circleci.com/pipelines/github/dcapwell/cassandra/431/workflows/2fd8cab6-5af3-4260-8acd-5239fbc56b6d;;;","25/Aug/20 19:22;dcapwell;Great, https://app.circleci.com/pipelines/github/dcapwell/cassandra/433/workflows/f52b094c-61a8-4465-a03d-d997d590c2e8 is green again...

Going to test the dtest changes on older branches...;;;","26/Aug/20 18:34;dcapwell;ccm was merged, going to rebase and start the commits now.;;;","26/Aug/20 21:03;dcapwell;Can with ci multiple times.  There were multiple failures but they were flaky tests or issues with recent changes outside of this change.

https://app.circleci.com/pipelines/github/dcapwell/cassandra/450/workflows/bdad1231-c6f5-4ffc-ab7f-1c1a9895e3e3

https://app.circleci.com/pipelines/github/dcapwell/cassandra/451/workflows/e4a1c41d-9a3a-4bc1-8b5d-2e5cf9584852;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
In-jvm dtests use -1 as timestamp for all writes that don't specify 'USING TIMESTAMP',CASSANDRA-15934,13315953,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,09/Jul/20 17:24,03/Jan/21 17:03,13/Jul/23 08:39,04/Sep/20 20:45,2.2.19,3.0.23,3.11.9,4.0,4.0-beta3,Test/dtest/java,,,,0,,,,,,dcapwell,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Sep 04 20:45:34 UTC 2020,,,,,,,All,,,,,,"0|z0gm8g:",9223372036854775807,,,,dcapwell,,,,Low,,2.2.18,,,https://github.com/apache/cassandra/commit/3a29f77743e57d0fb5abd21fc03f9591f51a08ef,,,,,,,,,new test + cci runs,,,,,"09/Jul/20 17:27;marcuse;I'll post test results soon
https://github.com/krummas/cassandra/tree/marcuse/jvmdtesttimestamps-trunk
https://github.com/krummas/cassandra/tree/marcuse/jvmdtesttimestamps-3.11
https://github.com/krummas/cassandra/tree/marcuse/jvmdtesttimestamps-3.0
https://github.com/krummas/cassandra/tree/marcuse/jvmdtesttimestamps;;;","09/Jul/20 18:37;dcapwell;Is there more context here?  I see 3.x and trunk only adds a test and they are passing in your circle ci.  I see 2.2 moves away from -1 in favor of Long.MIN_VALUE, the dtest also passes there.;;;","09/Jul/20 18:47;marcuse;uh good catch, was looking at an old 3.0 branch where we still passed in -1, and git merged cleanly 2.2 -> 3.0 here

so yes, this is only the test for 3.0+ :);;;","04/Sep/20 17:26;dcapwell;reviewing now;;;","04/Sep/20 17:33;dcapwell;+1;;;","04/Sep/20 17:38;dcapwell;starting commit now, will retest to make sure its clean merge.;;;","04/Sep/20 20:45;dcapwell;CI results:

2.2: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15934-cassandra-2.2-64E27C2E-C7A3-44A8-8AB7-A6B61A886E54
3.0: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15934-cassandra-3.0-64E27C2E-C7A3-44A8-8AB7-A6B61A886E54
3.11: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15934-cassandra-3.11-64E27C2E-C7A3-44A8-8AB7-A6B61A886E54
trunk: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15934-trunk-64E27C2E-C7A3-44A8-8AB7-A6B61A886E54

The added tests didn't fail in any branch so ignored 3.0+ test failures as they are unrelated.

2.2 has a lot of test failures but all look to be the cql tests, which are known broken in 2.2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Forbid adding new fields to UDTs used in partition key columns,CASSANDRA-15933,13315874,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aleksey,aleksey,aleksey,09/Jul/20 11:57,03/Jan/21 17:03,13/Jul/23 08:39,27/Jul/20 15:28,3.0.21,3.11.8,4.0,4.0-beta2,,Cluster/Schema,,,,0,,,,,,aleksey,ifesdjeen,jeromatron,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aleksey,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jul 27 15:27:21 UTC 2020,,,,,,,All,,,,,,"0|z0glqw:",9223372036854775807,,,,ifesdjeen,samt,,,Normal,,3.0.0,,,"[dc725bc01a69893a59db27312f6eb2bda9aa0ac9|https://github.com/apache/cassandra/commit/dc725bc01a69893a59db27312f6eb2bda9aa0ac9] ",,,,,,,,,Unit test included,,,,,"10/Jul/20 16:32;aleksey;Closing, as this is only an issue in 3.0, and fixed in 3.11 and 4.0 since CASSANDRA-7423. The issue in 3.0: altering a type used in a PK of a table causes lookups for previously written data to fail. This will be addressed by backporting {{TupleType}} changes from 3.11 to 3.0.

EDIT: in all versions this is a problem if a UDT used frozen in a partition key is altered, since we primarily treat partition keys as opaque byte buffers internally, and change in serialization makes previously written data inaccessible.;;;","20/Jul/20 12:44;aleksey;3.0 branch: https://github.com/iamaleksey/cassandra/commits/15933-3.0
4.0 branch: https://github.com/iamaleksey/cassandra/commits/15933-4.0

3.0 CI: https://app.circleci.com/pipelines/github/iamaleksey/cassandra/5/workflows/a327ef34-8873-4b4d-bec2-0557d90e6353
4.0 CI: https://app.circleci.com/pipelines/github/iamaleksey/cassandra/4/workflows/212ebf06-0462-4b46-aece-f0855ea42ebf;;;","24/Jul/20 16:46;ifesdjeen;+1

The only think I would add is a test with a table that has a type that indirectly references altered type, and same with the nested collection, like that:

{code}
String type2 = createType(""CREATE TYPE %s (v1 frozen<"" + type + "">, v2 frozen<"" + type + "">)"");
String table = createTable(""CREATE TABLE %s (pk frozen<"" + type2 + "">, val int, PRIMARY KEY(pk));"");
{code}

and

{code}
String type = createType(""CREATE TYPE %s (v1 int)"");
String table = createTable(""CREATE TABLE %s (pk frozen<list<frozen<"" + type + "">>>, val int, PRIMARY KEY(pk));"");
{code};;;","27/Jul/20 11:28;samt;+1;;;","27/Jul/20 15:27;aleksey;Thanks for review, committed as [dc725bc01a69893a59db27312f6eb2bda9aa0ac9|https://github.com/apache/cassandra/commit/dc725bc01a69893a59db27312f6eb2bda9aa0ac9] to 3.0 and merged up into 3.11 and trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
USING_G1 is incorrectly set in cassandra-env.sh if G1 is explicitly disabled,CASSANDRA-15931,13315527,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jeromatron,jeromatron,jeromatron,08/Jul/20 02:43,16/Mar/22 13:56,13/Jul/23 08:39,08/Jul/20 16:24,4.0,4.0-beta1,,,,Local/Startup and Shutdown,,,,0,,,,"{code}
echo $JVM_OPTS | grep -q UseG1GC
USING_G1=$?
{code}
This code will set {{USING_G1}} to {{0}} if G1 is explicitly enabled ({{+UseG1GC}}) *or* explicitly disabled ({{-UseG1GC}}), as found on CASSANDRA-15839.",,dcapwell,jeromatron,,,,,,,,,,"jeromatron opened a new pull request #667:
URL: https://github.com/apache/cassandra/pull/667


   Made the grep when setting USING_G1 check explicitly for enabling G1 (+UseG1GC).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 03:11;githubbot;600","smiklosovic closed pull request #667:
URL: https://github.com/apache/cassandra/pull/667


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:56;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jeromatron,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 08 16:24:38 UTC 2020,,,,,,,All,,,,,,"0|z0gjnc:",9223372036854775807,,,,brandon.williams,dcapwell,,,Normal,,4.0-alpha3,,,https://github.com/apache/cassandra/commit/688bb664c5f4733fafc5a7f27362a56c6e157fda,,,,,,,,,deploy cluster in same environment which first hit the issue,,,,,"08/Jul/20 03:14;jeromatron;PR after testing that it matched {{+UseG1GC}} but not {{-UseG1GC}}: https://github.com/apache/cassandra/pull/667;;;","08/Jul/20 03:49;dcapwell;Patch LGTM, to make sure it is working I am deploying it to a cluster using the same setup that detected the issue.;;;","08/Jul/20 16:09;dcapwell;Test was fine for this logic (failed because of CASSANDRA-15929).

+1;;;","08/Jul/20 16:24;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Startup fails with NoClassDefFoundError after CASSANDRA-15884,CASSANDRA-15929,13315503,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,07/Jul/20 23:03,03/Jan/21 17:03,13/Jul/23 08:39,08/Jul/20 15:07,4.0,4.0-beta1,,,,Local/Startup and Shutdown,,,,0,,,,"CASSANDRA-15884 added logic to detect if the native lib of lz4 was properly loaded and to log a warning if this was not the case, it seems that the catch for this didn’t handle the class loading issue that also happens in this case.

{code}
ERROR [main] 2020-07-07 22:49:32,560 CassandraDaemon.java:800 - Exception encountered during startup
java.lang.NoClassDefFoundError: Could not initialize class net.jpountz.lz4.LZ4JNI
       at net.jpountz.lz4.LZ4JNICompressor.compress(LZ4JNICompressor.java:36)
       at net.jpountz.lz4.LZ4Factory.<init>(LZ4Factory.java:207)
       at net.jpountz.lz4.LZ4Factory.instance(LZ4Factory.java:51)
       at net.jpountz.lz4.LZ4Factory.nativeInstance(LZ4Factory.java:91)
       at org.apache.cassandra.service.StartupChecks.lambda$static$0(StartupChecks.java:149)
       at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:127)
       at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:211)
       at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:661)
       at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:778)
{code}

After patching, the following is the behavior

WARN  [main] 2020-07-07 22:50:45,018 StartupChecks.java:153 - lz4-java was unable to load native libraries; this will lower the performance of lz4 (network/sstables/etc.): Could not initialize class net.jpountz.lz4.LZ4JNI",,blerer,dcapwell,jeromatron,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 08 15:07:04 UTC 2020,,,,,,,All,,,,,,"0|z0gji8:",9223372036854775807,,,,blerer,,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/3cca9ab22f6ff675c6332671da1304fac9aad77c,,,,,,,,,manual testing using glibc 2.12,,,,,"08/Jul/20 15:04;blerer;The patch looks good to me. Thanks [~dcapwell].;;;","08/Jul/20 15:07;blerer;Patch committed into trunk at 3cca9ab22f6ff675c6332671da1304fac9aad77c ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throw FSWriteError upon write failures in order to apply DiskFailurePolicy,CASSANDRA-15928,13315500,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,07/Jul/20 22:13,03/Jan/21 17:03,13/Jul/23 08:39,03/Aug/20 15:37,4.0,4.0-beta2,,,,Local/Other,,,,0,,,,"Active handling of FSError in AbstractLocalAwareExecutorService was introduced in CASSANDRA-14993. 
 
However, in the current code base, there are places that catch the IOException but not wrap it with FSError, hence not triggering the DiskFailurePolicy. Especially when the bad disk no longer permits write operations, it could leads to the mutation stage backup. Therefore I propose to fix the IOException handling in those cases. 
 
From the code inspection, those 6 places are current not re-throwing an IOException with FSWriteError.
 # org.apache.cassandra.triggers.CustomClassLoader#addClassPath throws IOError. Invoked in TriggerExecutor's constructor
 # org.apache.cassandra.io.util.FileUtils#renameWithConfirm throws RuntimeException
 # org.apache.cassandra.io.util.FileUtils#truncate throws RuntimeException
 # org.apache.cassandra.io.util.FileUtils#write throws RuntimeException
 # org.apache.cassandra.db.compaction.LeveledManifest#sendBackToL0 throws RuntimeException. Invokes rewriteSSTableMetadata
 # org.apache.cassandra.io.sstable.SSTableHeaderFix#writeNewMetadata throws RuntimeException. Invokes rewriteSSTableMetadata",,aleksey,jeromatron,yifanc,,,,,,,,,"yifan-c opened a new pull request #677:
URL: https://github.com/apache/cassandra/pull/677


   …olicy


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Jul/20 17:22;githubbot;600","smiklosovic commented on pull request #677:
URL: https://github.com/apache/cassandra/pull/677#issuecomment-675989071


   @yifan-c would you mind to close this PR if it is not relevant anymore as it was already merged?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 09:03;githubbot;600","yifan-c closed pull request #677:
URL: https://github.com/apache/cassandra/pull/677


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:47;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Jul/20 04:10;yifanc;intellij_custom_insepction.xml;https://issues.apache.org/jira/secure/attachment/13007343/intellij_custom_insepction.xml",,,,,,,,,,,,,,1.0,yifanc,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 03 15:37:52 UTC 2020,,,,,,,All,,,,,,"0|z0gjhk:",9223372036854775807,,,,aleksey,,,,Low,,3.0.0,,,"[0e65e85861b84e87691d576ba80c5c3b3b7020d5|https://github.com/apache/cassandra/commit/0e65e85861b84e87691d576ba80c5c3b3b7020d5",,,,,,,,,ci,,,,,"09/Jul/20 04:16;yifanc;It looks like that for {{org.apache.cassandra.io.util.FileUtils#renameWithConfirm}}, we want to not throw FSWE, according to the [comment|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java#L246-L247]. 

Found another occurrence where throwing FSWE makes more sense. 
{{org.apache.cassandra.io.compress.CompressionMetadata.Writer#doPrepare}} re-throws IOException wrapped by RuntimeException. 

Custom inspection rules were made in Intellij to perform static analysis and find the occurrences that do not handle IOException with FSError. Attached the custom inspection config. 

cc: [~aleksey] I came across CASSANDRA-2116, which looks to be a similar task to this one. Would you like to take a look at the list of findings and see if they are valid to throw FSWE instead? ;;;","13/Jul/20 17:38;yifanc;PR: [https://github.com/apache/cassandra/pull/677]
Code: [https://github.com/yifan-c/cassandra/tree/CASSANDRA-15928-fserror-handling]
Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15928-fserror-handling]

Briefly, the patch re-throws {{IOException}} as {{FSWriteError}} when applicable in the locations mentioned in the ticket. ;;;","03/Aug/20 15:37;aleksey;Committed to trunk as [0e65e85861b84e87691d576ba80c5c3b3b7020d5|https://github.com/apache/cassandra/commit/0e65e85861b84e87691d576ba80c5c3b3b7020d5], thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jenkins pipeline can copy wrong test report artefacts from stage builds,CASSANDRA-15925,13315361,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,07/Jul/20 09:47,03/Jan/21 17:02,13/Jul/23 08:39,04/Aug/20 08:57,2.2.18,3.0.22,3.11.8,4.0,4.0-beta2,CI,,,,0,,,,"Spotted in https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/196/console

Looks like copyArtifact will need to be specific to a build.",,bereng,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Aug 04 08:57:16 UTC 2020,,,,,,,All,,,,,,"0|z0gimo:",9223372036854775807,,,,bereng,,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/bb2562b7774caf0b5037c5cd10f5fe07f75ed92f,,,,,,,,,local jenkins testing,,,,,"07/Jul/20 15:48;mck;nice tip on how to do this [here|https://stackoverflow.com/questions/39170144/jenkins-groovy-pipeline-retrieve-build-number-of-built-job];;;","07/Jul/20 20:26;mck;patches
- https://github.com/apache/cassandra-builds/compare/master...thelastpickle:mck/jenkins_copy_artefacts_with_build_number
- https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15925;;;","08/Jul/20 22:07;mck;Committed cassandra-builds patch. Failed on first pipeline run, but has worked since. ;;;","14/Jul/20 08:21;mck;Unstable builds are not copying over their test reports in the devbranch pipeline.

ref:
- https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/207/
- https://the-asf.slack.com/archives/C0162JU2CKY/p1594712414005200;;;","17/Jul/20 09:43;bereng;https://ci-cassandra.apache.org/job/Cassandra-devbranch/211/ reports no overall failures but stages have failures #collaborating;;;","18/Jul/20 13:44;mck;
bq. https://ci-cassandra.apache.org/job/Cassandra-devbranch/211/ reports no overall failures but stages have failures #collaborating

Cheers.
Test results were either not copied or copied from the wrong build.
From the pipeline's console
{noformat}
…
11:17:50  Starting building: Cassandra-devbranch-test-compression #140
…
12:35:53  [Pipeline] copyArtifacts
12:35:53  Unable to find a build for artifact copy from: Cassandra-devbranch-test
…
12:37:45  [Pipeline] copyArtifacts
12:41:03  Copied 587 artifacts from ""Cassandra-devbranch-test-compression"" build number 139
…
23:32:01  [Pipeline] copyArtifacts
23:32:01  Unable to find a build for artifact copy from: Cassandra-devbranch-dtest
{noformat}

I've put a [fix|https://github.com/apache/cassandra-builds/commit/a8683629d4a5d66c280443c27a1c26217928b531] in for using separate build step wrapper variables for each build. Let's see if that helps. ;;;","25/Jul/20 10:24;mck;Updated [in-tree patch|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15925].;;;","27/Jul/20 10:09;bereng;[~mck] I was looking into this and saw some problems. Let me know if I am holding the wrong end of the stick though:

- Take run [#220|https://ci-cassandra.apache.org/job/Cassandra-devbranch/220/] reporting 3 failures
- On it's console out you can see it runs [Cassandra-devbranch-test #198|https://ci-cassandra.apache.org/job/Cassandra-devbranch/220/console] with [2 failures|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/198/]
- org.apache.cassandra.transport.frame.checksum.ChecksummingTransformerTest.corruptionCausesFailure is missing from the top #220 failures report and timestamps and [out|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/198/testReport/junit/org.apache.cassandra.cql3.validation.operations/TTLTest/testCapNoWarnExpirationOverflowPolicy/] from testCapNoWarnExpirationOverflowPolicy failure doesn't match that of the matching #220 top failures [report|https://ci-cassandra.apache.org/job/Cassandra-devbranch/220/testReport/junit/org.apache.cassandra.cql3.validation.operations/TTLTest/testCapNoWarnExpirationOverflowPolicy/]

If out, timestamps and failing tests list don't match I'd bet there is some jenkins funnies going on somewhere?;;;","27/Jul/20 10:28;mck;bq. org.apache.cassandra.transport.frame.checksum.ChecksummingTransformerTest.corruptionCausesFailure is missing from the top #220 failures report and timestamps and out from testCapNoWarnExpirationOverflowPolicy failure doesn't match that of the matching #220 top failures report

The *test output* copied in the pipeline are actually from the test-cdc stage job. This is evident [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/220/testReport/org.apache.cassandra.cql3.validation.operations/TTLTest/testCapNoWarnExpirationOverflowPolicy/] compared to [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test-cdc/146/testReport/org.apache.cassandra.cql3.validation.operations/TTLTest/testCapNoWarnExpirationOverflowPolicyDefaultTTL_cdc/]

The test names are also not getting passed through and honoured correctly…
Nor are tests always present, for example [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/220/testReport/junit/org.apache.cassandra.transport.frame.checksum/ChecksummingTransformerTest/].

So… the problem here is no longer about which artefacts are getting copied, but how they get aggregated together (which is a custom process in the `Summary` stage).;;;","31/Jul/20 20:52;mck;bq. So… the problem here is no longer about which artefacts are getting copied, but how they get aggregated together (which is a custom process in the `Summary` stage).

Correction. This is related to CASSANDRA-9463 and CASSANDRA-9528.
Investigating updating {{CassandraXMLJUnitResultFormatter}} so the ""cassandra.testtag"" value is suffixed to the testsuite, so testsuite elements are separated cleanly.;;;","01/Aug/20 09:05;mck;CI run, including CassandraXMLJUnitResultFormatter [patch|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15925], [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/226/pipeline].

This will need to be applied from 2.2 onwards.;;;","02/Aug/20 14:57;mck;Patches  [2.2|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/cassandra-2.2_15925], [3.0|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/cassandra-3.0_15925], [3.11|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/cassandra-3.11_15925], [trunk|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15925] (and [CI|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/226/pipeline]).;;;","03/Aug/20 10:21;bereng;[~mck] LGTM +1. Note: i have focused on trunk, I trust you for the <trunk PRs which I have had just a cursory look. Congrats this one was a painful one :-)

Edit: Why are stage failures not being reported now? They used to appear before the final total report.;;;","03/Aug/20 10:34;mck;bq. Why are stage failures not being reported now? They used to appear before the final total report.

Nice spot! Yes, there's some muffins there they way pipelines, blue ocean, and unstable builds are visualised. 
A little bit of background to this is in blog post: https://www.jenkins.io/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/

I might be wrong, but I believe with the patch we are at ""as good as it gets"" with the current Jenkins API and plugins.;;;","03/Aug/20 10:50;bereng;Even if you switch back to the 'classic' view the stages that fail are not being reported. Which is a pity as that's partially how we came to detect this ticket in the first place...;;;","03/Aug/20 12:09;mck;bq. Even if you switch back to the 'classic' view the stages that fail are not being reported. Which is a pity as that's partially how we came to detect this ticket in the first place...

Yes, and why I had initially not taken the approach. Unfortunately it looked like taking the long-way-around to the same end place :(

I'd suggest we revisit it later on. As stages become reliably SUCCESS (rather than UNSTABLE) we'll have more options open to us. The incompatibilities and support between Jenkins APIs may improve as well. Otherwise I am in favour of keeping things as simple as they can be (i imagine very little joy on an elaborate system on top of jenkins).;;;","04/Aug/20 08:57;mck;Committed as [bb2562b7774caf0b5037c5cd10f5fe07f75ed92f |https://github.com/apache/cassandra/commit/bb2562b7774caf0b5037c5cd10f5fe07f75ed92f];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid emitting empty range tombstones from RangeTombstoneList,CASSANDRA-15924,13315185,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,06/Jul/20 16:02,10/Jul/20 20:32,13/Jul/23 08:39,09/Jul/20 14:52,3.0.21,3.11.7,4.0,4.0-beta1,,Consistency/Coordination,,,,0,,,,"In {{RangeTombstoneList#iterator}} there is a chance we emit empty range tombstones depending on the slice passed in. This can happen during read repair with either an empty slice or with paging and the final page being empty.

This creates problems in RTL if we try to insert a new range tombstone which covers the empty ones;
{code}
Caused by: java.lang.AssertionError
	at org.apache.cassandra.db.RangeTombstoneList.insertFrom(RangeTombstoneList.java:541)
	at org.apache.cassandra.db.RangeTombstoneList.addAll(RangeTombstoneList.java:217)
	at org.apache.cassandra.db.MutableDeletionInfo.add(MutableDeletionInfo.java:141)
	at org.apache.cassandra.db.partitions.AtomicBTreePartition.addAllWithSizeDelta(AtomicBTreePartition.java:137)
	at org.apache.cassandra.db.Memtable.put(Memtable.java:254)
	at org.apache.cassandra.db.ColumnFamilyStore.apply(ColumnFamilyStore.java:1210)
	at org.apache.cassandra.db.Keyspace.applyInternal(Keyspace.java:573)
	at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:421)
	at org.apache.cassandra.db.Mutation.apply(Mutation.java:210)
	at org.apache.cassandra.db.Mutation.apply(Mutation.java:215)
	at org.apache.cassandra.db.Mutation.apply(Mutation.java:224)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(ModificationStatement.java:582)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternal(ModificationStatement.java:572)
{code}",,ifesdjeen,jeromatron,marcuse,slebresne,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 09 14:52:03 UTC 2020,,,,,,,All,,,,,,"0|z0ghjk:",9223372036854775807,,,,ifesdjeen,marcuse,slebresne,,Normal,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/ab6a87bf60174d9a6e7cd727702da3004c0dbeeb,,,,,,,,,new tests,,,,,"06/Jul/20 16:30;marcuse;https://github.com/krummas/cassandra/commits/marcuse/15924
(also includes a fix to RowAndDeletionMergeIterator to make sure there are no other paths creating these empty tombstones)

unit tests: https://circleci.com/gh/krummas/cassandra/3440
jvm dtests: https://circleci.com/gh/krummas/cassandra/3441;;;","06/Jul/20 16:43;marcuse;[~ifesdjeen] & [~slebresne] do you have time to review?;;;","07/Jul/20 08:28;slebresne;Left a minor comment on github for making operators priority explicit in the 2nd commit, but lgtm otherwise, +1. ;;;","09/Jul/20 13:23;ifesdjeen;+1 as well. Thank you for the patch!;;;","09/Jul/20 14:52;marcuse;And committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
High CAS failures in NativeAllocator.Region.allocate(..) ,CASSANDRA-15922,13315028,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,05/Jul/20 11:50,03/Jan/21 17:02,13/Jul/23 08:39,07/Jul/20 10:54,3.0.21,3.11.7,4.0,4.0-beta1,,Local/Memtable,,,,0,,,,"h4. Problem

The method {{NativeAllocator.Region.allocate(..)}} uses an {{AtomicInteger}} for the current offset in the region. Allocations depends on a {{.compareAndSet(..)}} call.

In highly contended environments the CAS failures can be high, starving writes in a running Cassandra node.

h4. Example

It has been witnessed up to 33% of CPU time stuck in the {{NativeAllocator.Region.allocate(..)}} loop (due to the CAS failures) during a heavy spark analytics write load.

These nodes: 40 CPU cores and 256GB ram; have relevant settings
 - {{memtable_allocation_type: offheap_objects}}
 - {{memtable_offheap_space_in_mb: 5120}}
 - {{concurrent_writes: 160}}

Numerous  flamegraphs demonstrate the problem. See attached [^profile_pbdpc23zafsrh_20200702.svg].

h4. Suggestion: ThreadLocal Regions

One possible solution is to have separate Regions per thread.  
Code wise this is relatively easy to do, for example replacing NativeAllocator:59 
{code}private final AtomicReference<Region> currentRegion = new AtomicReference<>();{code}
with
{code}private final ThreadLocal<AtomicReference<Region>> currentRegion = new ThreadLocal<>() {...};{code}

But this approach substantially changes the allocation behaviour, with more than concurrent_writes number of Regions in use at any one time. For example with {{concurrent_writes: 160}} that's 160+ regions, each of 1MB. 

h4. Suggestion: Simple Contention Management Algorithm (Constant Backoff)

Another possible solution is to introduce a contention management algorithm that a) reduces CAS failures in high contention environments, b) doesn't impact normal environments, and c) keeps the allocation strategy of using one region at a time.

The research paper [arXiv:1305.5800|https://arxiv.org/abs/1305.5800] describes this contention CAS problem and demonstrates a number of algorithms to apply. The simplest of these algorithms is the Constant Backoff CAS Algorithm.

Applying the Constant Backoff CAS Algorithm involves adding one line of code to {{NativeAllocator.Region.allocate(..)}} to sleep for one (or some constant number) nanoseconds after a CAS failure occurs.
That is...
{code}
    // we raced and lost alloc, try again
    LockSupport.parkNanos(1);
{code}

h4. Constant Backoff CAS Algorithm Experiments

Using the code attached in NativeAllocatorRegionTest.java the concurrency and CAS failures of {{NativeAllocator.Region.allocate(..)}} can be demonstrated. 

In the attached [^NativeAllocatorRegionTest.java] class, which can be run standalone, the {{Region}} class: copied from {{NativeAllocator.Region}}; has also the {{casFailures}} field added. The following two screenshots are from data collected from this class on a 6 CPU (12 core) MBP, running the {{NativeAllocatorRegionTest.testRegionCAS}} method.

This attached screenshot shows the number of CAS failures during the life of a Region (over ~215 million allocations), using different threads and park times. This illustrates the improvement (reduction) of CAS failures from zero park time, through orders of magnitude, up to 10000000ns (10ms). The biggest improvement is from no algorithm to a park time of 1ns where CAS failures are ~two orders of magnitude lower. From a park time 10μs and higher there is a significant drop also at low contention rates.

 !Screen Shot 2020-07-05 at 13.16.10.png|width=500px! 

This attached screenshot shows the time it takes to fill a Region (~215 million allocations), using different threads and park times. The biggest improvement is from no algorithm to a park time of 1ns where performance is one order of magnitude faster. From a park time of 100μs and higher there is a even further significant drop, especially at low contention rates.

 !Screen Shot 2020-07-05 at 13.26.17.png|width=500px! 

Repeating the test run show reliably similar results:  [^Screen Shot 2020-07-05 at 13.37.01.png]  and  [^Screen Shot 2020-07-05 at 13.35.55.png].

h4. Region Per Thread Experiments

Implementing Region Per Thread: see the {{NativeAllocatorRegionTest.testRegionThreadLocal}} method; we can expect zero CAS failures of the life of a Region. For performance we see two orders of magnitude lower times to fill up the Region (~420ms).

 !Screen Shot 2020-07-05 at 13.48.16.png|width=200px! 

h4. Costs

Region per Thread is an unrealistic solution as it introduces many new issues and problems, from increased memory use to leaking memory and GC issues. It is better tackled as part of a TPC implementation.

The backoff approach is simple and elegant, and seems to improve throughput in all situations. It does introduce context switches which may impact throughput in some busy throughput scenarios, so this should to be tested further.",,benedict,blambov,jasonstack,jeromatron,mck,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16072,,,,CASSANDRA-2252,,,,,,,,,"06/Jul/20 11:34;mck;NativeAllocatorRegion2Test.java;https://issues.apache.org/jira/secure/attachment/13007126/NativeAllocatorRegion2Test.java","06/Jul/20 09:40;mck;NativeAllocatorRegionTest.java;https://issues.apache.org/jira/secure/attachment/13007116/NativeAllocatorRegionTest.java","05/Jul/20 11:16;mck;Screen Shot 2020-07-05 at 13.16.10.png;https://issues.apache.org/jira/secure/attachment/13007074/Screen+Shot+2020-07-05+at+13.16.10.png","05/Jul/20 11:26;mck;Screen Shot 2020-07-05 at 13.26.17.png;https://issues.apache.org/jira/secure/attachment/13007073/Screen+Shot+2020-07-05+at+13.26.17.png","05/Jul/20 11:36;mck;Screen Shot 2020-07-05 at 13.35.55.png;https://issues.apache.org/jira/secure/attachment/13007072/Screen+Shot+2020-07-05+at+13.35.55.png","05/Jul/20 11:37;mck;Screen Shot 2020-07-05 at 13.37.01.png;https://issues.apache.org/jira/secure/attachment/13007071/Screen+Shot+2020-07-05+at+13.37.01.png","05/Jul/20 11:48;mck;Screen Shot 2020-07-05 at 13.48.16.png;https://issues.apache.org/jira/secure/attachment/13007070/Screen+Shot+2020-07-05+at+13.48.16.png","06/Jul/20 09:40;mck;Screen Shot 2020-07-06 at 11.35.35.png;https://issues.apache.org/jira/secure/attachment/13007118/Screen+Shot+2020-07-06+at+11.35.35.png","06/Jul/20 09:40;mck;Screen Shot 2020-07-06 at 11.36.44.png;https://issues.apache.org/jira/secure/attachment/13007117/Screen+Shot+2020-07-06+at+11.36.44.png","06/Jul/20 11:26;mck;Screen Shot 2020-07-06 at 13.26.10.png;https://issues.apache.org/jira/secure/attachment/13007124/Screen+Shot+2020-07-06+at+13.26.10.png","05/Jul/20 10:38;mck;profile_pbdpc23zafsrh_20200702.svg;https://issues.apache.org/jira/secure/attachment/13007076/profile_pbdpc23zafsrh_20200702.svg",,,,11.0,mck,,,,,,,,,,,,,Degradation -> Slow Use Case,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jul 07 10:54:12 UTC 2020,,,,,,,All,,,,,,"0|z0ggko:",9223372036854775807,,,,benedict,snazy,,,Normal,,1.0.0,,,https://github.com/apache/cassandra/commit/5a6d52b26191ab1f5df6e9cf941e0f964dd95a28,,,,,,,,,"existing CI. 
benchmarking in ticket.",,,,,"05/Jul/20 12:13;mck;Patch for CAS Backoff Contention Management Algorithm at https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15922
;;;","06/Jul/20 07:29;snazy;Talked to Mick a bit about this offline. The demonstrated effects (in the attached charts and SVG) are IMO ""good enough"" to justify the change.

However, there's a slight issue in the attached {{NativeAllocatorRegionTest.java}} {{Region.allocate()}} method that adds another CAS ({{casFailures}}) to every failed CAS against {{nextFreeOffset}}. It's probably better to count the number of failed CAS's in a local variable and add it to {{this.casFailures}} when the test's {{Region.allocate()}} returns.

I think, the proposed solution here to add a constant {{LockSupport.sleepNanos(1)}} is fine and ""non-intrusive enough"". Although the same change probably needs to be applied to {{org.apache.cassandra.utils.memory.SlabAllocator.Region#allocate}} as well.
;;;","06/Jul/20 08:24;mck;bq. Although the same change probably needs to be applied to org.apache.cassandra.utils.memory.SlabAllocator.Region#allocate as well.

Added to patch.

bq. there's a slight issue in the attached NativeAllocatorRegionTest.java Region.allocate() method that adds another CAS (casFailures) to every failed CAS against nextFreeOffset. It's probably better to count the number of failed CAS's in a local variable and add it to this.casFailures when the test's Region.allocate() returns.

Fixed and re-running tests. Thanks [~snazy].
EDIT: new screenshots uploaded. results and conclusions stay the same.;;;","06/Jul/20 10:20;benedict;There is perhaps a better alternative: use {{addAndGet->if}} instead of {{read->if->compareAndSet}}, i.e. unconditionally update the pointer, then determine whether or not you successfully allocated in the aftermath.  This is guaranteed to succeed in one step; contention can slow that step down modestly, but there is no wasted competition.

There is no downside to this approach with the {{NativeAllocator}}, either, since if we fail to allocate we always swap the {{Region}}, so consuming more than we need when smaller allocations may have been possible is not a problem.  So we should have made this change a long time ago, really.  

It _might_ be that this approach still sees some slowdown: I assume in this case one of the problems is that we are allocating huge numbers of small objects, so that a small number of threads are competing over-and-over again to allocate the same data.  We should not be competing for each {{Cell}} alloation, and instead try to allocate all the buffers for e.g. at least a {{Row}} at once.  But this is more involved.  Ideally we would improve the allocator itself, which is very under-engineered, but with our threading model that's more challenging than we might like.

The _upside_ to this approach is that ordinary workloads should be _improved_, and there is no possibility of thread starvation.

The current proposal by contrast introduces much longer windows for thread starvation, and _might_ negatively impact tail latencies.  This is a very difficult thing for us to rule out, so the work required to demonstrate it is performance neutral could be prohibitive.;;;","06/Jul/20 10:52;mck;bq.  I assume in this case one of the problems is that we are allocating huge numbers of small objects, so that a small number of threads are competing over-and-over again to allocate the same data. We should not be competing for each Cell allocation, and instead try to allocate all the buffers for e.g. at least a Row at once. 

This is correct. Rows with ~many hundreds of double cells.

bq. There is perhaps a better alternative: use addAndGet->if instead of read->if->compareAndSet, i.e. unconditionally update the pointer, then determine whether or not you successfully allocated in the aftermath. This is guaranteed to succeed in one step; contention can slow that step down modestly, but there is no wasted competition.

Sounds good. Will put it together and test.;;;","06/Jul/20 11:58;snazy;+1 on {{addAndGet}} (or {{getAndAdd}}, whichever works best).

And I agree, the allocation-model that we currently have is not great, but as you said, it's a ton of work to get it right (less (ideally no) fragmentation, no unnecessary tiny allocations, no unnecessary copying, etc etc).;;;","06/Jul/20 12:00;mck;h4. {{addAndGet}} Experiments

Code patch at https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15922_1
This patch depends on the {{addAndGet(..)}} call guaranteeing a (serial) result that returns the value from no overlapping/latter add calls. AFAIK that is how AtomicInteger works.

I'm also curious if we still need the {{allocCount}} AtomicInteger field, it appears to be there only for debug. May I remove it in this patch?

Benchmark code attached in  [^NativeAllocatorRegion2Test.java].

The following attached screenshot shows the time it takes to fill a Region (~215 million allocations), using different threads, comparing the original code (compareAndSet), the addAndGet, and the constant backoff (parkNano) approaches. 

The biggest improvement is still the constant backoff algorithm where performance is one order of magnitude faster. 

But the addAndGet approach is 2x to 5x faster than the original, and as mentioned above it also comes with the benefit of no-loop (no starvation) and faster performance in all workloads.

 !Screen Shot 2020-07-06 at 13.26.10.png|width=600px! ;;;","06/Jul/20 12:38;mck;Patch updated to
- use {{getAndAdd(..)}} instead of {{addAndGet(..)}} for readability
 - remove the {{allocCount}} AtomicInteger field
 - don't print negative waste values in the {{toString(..)}} method (when region is full and nextFreeOffset is passed capacity)

https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15922_1

CI run at https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/197/pipeline;;;","06/Jul/20 13:05;snazy;+1 (assuming CI looks good and 3.11+3.0 back-ports are clean);;;","06/Jul/20 13:13;benedict;+1;;;","07/Jul/20 10:54;mck;Committed as [5a6d52b26191ab1f5df6e9cf941e0f964dd95a28 |https://github.com/apache/cassandra/commit/5a6d52b26191ab1f5df6e9cf941e0f964dd95a28].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Occasional NEW_NODE event sent instead of NODE_UP in dTest,CASSANDRA-15912,13314649,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bryncooke,bryncooke,02/Jul/20 10:23,21/Dec/20 09:32,13/Jul/23 08:39,08/Jul/20 16:18,4.0,4.0-beta1,,,,Messaging/Client,,,,0,,,,"A new test for topology events in CASSANDRA-15677 is occasionally failing due to a NEW_NODE event sent instead of NODE_UP.

For instance: [https://app.circleci.com/pipelines/github/jasonstack/cassandra/231/workflows/cdf55335-c876-450b-8bf9-1d778a2df806/jobs/2240] 

Previously topology events were not been sent at all, so it is possible that this is a long standing bug.

 ",,bereng,brandon.williams,bryncooke,jasonstack,jeromatron,maedhroz,,,,,,"bereng opened a new pull request #670:
URL: https://github.com/apache/cassandra/pull/670


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 08:31;githubbot;600","bereng opened a new pull request #671:
URL: https://github.com/apache/cassandra/pull/671


   …ications


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 08:41;githubbot;600","bereng closed pull request #670:
URL: https://github.com/apache/cassandra/pull/670


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 10:56;githubbot;600","bereng commented on pull request #670:
URL: https://github.com/apache/cassandra/pull/670#issuecomment-655445260


   Invalid


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 10:56;githubbot;600","bereng commented on pull request #671:
URL: https://github.com/apache/cassandra/pull/671#issuecomment-655445417


   Invalid


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 10:56;githubbot;600","bereng closed pull request #671:
URL: https://github.com/apache/cassandra/pull/671


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 10:56;githubbot;600","bereng opened a new pull request #83:
URL: https://github.com/apache/cassandra-dtest/pull/83


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 12:26;githubbot;600","bereng commented on pull request #83:
URL: https://github.com/apache/cassandra-dtest/pull/83#issuecomment-655487755


   Tested locally both the failure and the fix against 3.0, 3.11 and 4.0


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 12:27;githubbot;600","bereng closed pull request #83:
URL: https://github.com/apache/cassandra-dtest/pull/83


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Jul/20 07:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15677,CASSANDRA-11038,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 08 16:18:10 UTC 2020,,,,,,,All,,,,,,"0|z0gedk:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra-dtest/commit/30806d425e2271b982bf8facb174341b6b4193ed,,,,,,,,,See PR,,,,,"08/Jul/20 12:30;bereng;The original problem was that the node2 restart could happen before the original NEW_NODE had been sent, so upon node2 becoming UP again it would get that NEW_NODE on top. Waiting to restart once all notifications have gone through fixes the issue.

No CI runs as it would be an overkill. It failed and now passes locally: repro'ed against 3.0, 3.11 and 4.0.;;;","08/Jul/20 15:34;bereng;Mmmm I managed to repro again despite the fix. Need to review a bit more... Edit: found it. Ready for review.;;;","08/Jul/20 16:18;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Queries on KEYS 2i are broken by DROP COMPACT STORAGE on 3.0,CASSANDRA-15906,13314080,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,slebresne,slebresne,slebresne,29/Jun/20 15:14,03/Jan/21 17:03,13/Jul/23 08:39,23/Jul/20 23:19,3.0.21,3.11.7,4.0,4.0-beta1,,CQL/Interpreter,,,,0,,,,"From 3.0 onwards, the declared columns of a thrift table are internally static columns. While the table is compact, this 

After DROP COMPACT STORAGE is used on a table that has a KEYS 2i, queries that uses that index will start failing with:
{noformat}
Queries using 2ndary indexes don't support selecting only static columns
{noformat}

In 3.0, we don't support index on static columns and have that validation that rejects 2i queries on static columns. But the declared columns of compact table are static under the hood, and while this specific validation is skipped while the table is compact, it isn't anymore after the DROP COMPACT STORAGE.

Note that internally, nothing changes with the DROP COMPACT STORAGE, and the 2i queries would still work as well as before, it is just that they are rejected.

Also not that this is only a problem in 3.0. In 3.11, static column indexes were added (CASSANDRA-8103) and thus this validation has been removed, and everything works as it should.

However, since DROP COMPACT STORAGE is a mandatory step for compact tables before upgrading to 4.0, fixing this annoying in 3.0 would avoid forcing users with KEYS 2i on 3.0 to upgrade to 3.11 before going to 4.0.
",,jeromatron,maedhroz,slebresne,,,,,,,,,"pcmanus opened a new pull request #89:
URL: https://github.com/apache/cassandra-dtest/pull/89


   Somehow, I had forgotten to commit this when committing [CASSANDRA-15906](https://issues.apache.org/jira/browse/CASSANDRA-15906) so here it is.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Aug/20 14:08;githubbot;600","pcmanus closed pull request #89:
URL: https://github.com/apache/cassandra-dtest/pull/89


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Aug/20 14:15;githubbot;600","pcmanus commented on pull request #89:
URL: https://github.com/apache/cassandra-dtest/pull/89#issuecomment-672897731


   Committed as f25832a.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Aug/20 14:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,slebresne,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 23 23:19:30 UTC 2020,,,,,,,All,,,,,,"0|z0gav4:",9223372036854775807,,,,brandon.williams,,,,Low,,3.0.0,,,https://github.com/apache/cassandra/commit/64c80f4ef89f0cc88c15febed8c01eb07ae0a84e,,,,,,,,,upgrade dtest included,,,,,"29/Jun/20 15:26;slebresne;The fix is pretty simple, we can just skip the validation if the table has a KEYS index. More importantly, I've added a dtest to test the upgrade path of KEYS 2i to 4.0, which in particular demonstrates the problem described (as DROP COMPACT STORAGE is part of that upgrade path).
||C* patch||dtest patch||CI||
|[3.0|https://github.com/pcmanus/cassandra/commits/C-15906-3.0]|[dtest|https://github.com/pcmanus/cassandra-dtest/commits/test_keys_2i_upgrade]|[#169|https://ci-cassandra.apache.org/job/Cassandra-devbranch/169/]|

Note that there is only a 3.0 patch since as said in the description, 3.11+ is not affected.
;;;","30/Jun/20 12:04;brandon.williams;+1;;;","23/Jul/20 23:09;maedhroz;[~brandon.williams] This was committed and merged up through trunk, right?;;;","23/Jul/20 23:19;brandon.williams;Yes, though not by me.  I've updated the ticket to reflect the correct versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cqlsh not able to fetch all rows when in batch mode,CASSANDRA-15905,13313529,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,26/Jun/20 00:56,03/Jan/21 17:02,13/Jul/23 08:39,30/Jun/20 23:00,3.11.7,4.0,4.0-beta1,,,Legacy/CQL,,,,0,,,,"The cqlsh in trunk only display the first page when running in the batch mode, i.e. using {{--execute}} or {{--file}} option. 
  
 It is a change of behavior. In 3.x branches, the cqlsh returns all rows. 
  
 It can be reproduced in 3 steps.
{code:java}
 1. ccm create trunk -v git:trunk -n1 && ccm start
 2. tools/bin/cassandra-stress write n=1k -schema keyspace=""keyspace1""   // write 1000 rows
 3. bin/cqlsh -e ""SELECT * FROM keyspace1.standard1;""                    // fetch all rows
{code}
 
 There are 1000 rows written. But the output in step 3 will only list 100 rows, which is the first page. 
{code:java}
➜ bin/cqlsh -e ""SELECT * FROM keyspace1.standard1"" | wc -l
     105{code}
 
 The related change was introduced in https://issues.apache.org/jira/browse/CASSANDRA-11534, where the cqlsh.py script no longer fetch all rows when not using tty in the print_result method. ",,brandon.williams,jeromatron,yifanc,,,,,,,,,"yifan-c opened a new pull request #82:
URL: https://github.com/apache/cassandra-dtest/pull/82


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jun/20 22:21;githubbot;600","yifan-c opened a new pull request #661:
URL: https://github.com/apache/cassandra/pull/661


   Fetch and print all pages iteratively. 
   Print compactly when in batch mode. 
   Always print header and new line for each page if in tty mode.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jun/20 22:23;githubbot;600","yifan-c closed pull request #661:
URL: https://github.com/apache/cassandra/pull/661


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:48;githubbot;600","michaelsembwever closed pull request #82:
URL: https://github.com/apache/cassandra-dtest/pull/82


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15537,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jun 30 23:00:56 UTC 2020,,,,,,,All,,,,,,"0|z0g7go:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.10,,,https://github.com/apache/cassandra/commit/9251b8116ff89b528b6b9eaa43d4dc2d1bc0bbaf,,,,,,,,,dtest added,,,,,"29/Jun/20 16:01;brandon.williams;[~stefania] can you take a look?;;;","29/Jun/20 16:51;yifanc;I have taken a look at the code path. It is quite easy to fix. I can post a patch later today if you don't mind.;;;","29/Jun/20 17:09;brandon.williams;Sure, that'd be great.  One thing I don't understand though, you say this only happens on trunk, but CASSANDRA-11534 was fixed in 3.10.;;;","29/Jun/20 17:22;yifanc;I have only tried with the 3.0 branch earlier. Here is the update.
{code:java}
// on 3.11 branch
➜ git status
On branch cassandra-3.11
Your branch is up to date with 'upstream/cassandra-3.11'.nothing to commit, working tree clean

➜ bin/cqlsh -e ""SELECT * FROM keyspace1.standard1"" | wc -l
     105

// on 3.0 branch
➜ git status
On branch cassandra-3.0
Your branch is up to date with 'upstream/cassandra-3.0'.nothing to commit, working tree clean

➜ bin/cqlsh -e ""SELECT * FROM keyspace1.standard1"" | wc -l
    1005
{code};;;","29/Jun/20 18:33;brandon.williams;Ah, ok, so 3.11 is affected too.  That makes sense.;;;","30/Jun/20 22:33;yifanc;||Cassandra||Dtest||
|[PR|https://github.com/apache/cassandra/pull/661]|[PR|https://github.com/apache/cassandra-dtest/pull/82]|
|[Code|https://github.com/yifan-c/cassandra/tree/CASSANDRA-15905-cqlsh-fetch-all-rows-in-batch-mode]|[Code|https://github.com/yifan-c/cassandra-dtest]|

Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra/66/workflows/2b590ea0-2b4a-4d79-8abc-347cecded0cc]

The dtest failures should not be related to the change. The errors can be reproduced by running the dtest against trunk.

There is no failure from tests in {{test_cqlsh.py}}.

Briefly, the changes are
 * Fetch and print all pages iteratively. ({{cqlsh.py::Shell::print_result}})
 * Print compactly when in batch mode.
 * Always print header and new line at the bottom for each page if in tty mode, in order to have the same behavior.;;;","30/Jun/20 23:00;brandon.williams;Committed to 3.11 (with very small backport) and trunk, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OOM because repair session thread not closed when terminating repair,CASSANDRA-15902,13313454,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,moczarski,moczarski,moczarski,25/Jun/20 13:50,03/Nov/20 07:48,13/Jul/23 08:39,28/Oct/20 14:01,3.0.23,3.11.9,4.0,4.0-beta3,,Consistency/Repair,,,,0,,,,"In our cluster, after a while some nodes running slowly out of memory. On that nodes we observed that Cassandra Reaper terminate repairs with a JMX call to {{StorageServiceMBean.forceTerminateAllRepairSessions()}} because reaching timeout of 30 min.

In the memory heap dump we see lot of instances of {{io.netty.util.concurrent.FastThreadLocalThread}} occupy most of the memory:
{noformat}
119 instances of ""io.netty.util.concurrent.FastThreadLocalThread"", loaded by ""sun.misc.Launcher$AppClassLoader @ 0x51a800000"" occupy 8.445.684.480 (93,96 %) bytes. {noformat}
In the thread dump we see lot of repair threads:
{noformat}
grep ""Repair#"" threaddump.txt | wc -l
      50 {noformat}
 

The repair jobs are waiting for the validation to finish:
{noformat}
""Repair#152:1"" #96170 daemon prio=5 os_prio=0 tid=0x0000000012fc5000 nid=0x542a waiting on condition [0x00007f81ee414000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000007939bcfc8> (a com.google.common.util.concurrent.AbstractFuture$Sync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)
        at com.google.common.util.concurrent.AbstractFuture$Sync.get(AbstractFuture.java:285)
        at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:116)
        at com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:137)
        at com.google.common.util.concurrent.Futures.getUnchecked(Futures.java:1509)
        at org.apache.cassandra.repair.RepairJob.run(RepairJob.java:160)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:81)
        at org.apache.cassandra.concurrent.NamedThreadFactory$$Lambda$13/480490520.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:748) {noformat}
 

Thats the line where the threads stuck:
{noformat}
// Wait for validation to complete
Futures.getUnchecked(validations); {noformat}
 

The call to {{StorageServiceMBean.forceTerminateAllRepairSessions()}} stops the thread pool executor. It looks like that futures which are in progress will therefor never be completed and the repair thread waits forever and won't be finished.

 

Environment:

Cassandra version: 3.11.4 and 3.11.6

Cassandra Reaper: 1.4.0

JVM memory settings:
{noformat}
-Xms11771M -Xmx11771M -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+ParallelRefProcEnabled -XX:MaxMetaspaceSize=100M {noformat}
on another cluster with same issue:
{noformat}
-Xms31744M -Xmx31744M -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+ParallelRefProcEnabled -XX:MaxMetaspaceSize=100M {noformat}
Java Runtime:
{noformat}
openjdk version ""1.8.0_212""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_212-b03)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.212-b03, mixed mode) {noformat}
 

The same issue described in this comment: https://issues.apache.org/jira/browse/CASSANDRA-14355?focusedCommentId=16992973&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16992973

As suggested in the comments I created this new specific ticket.",,adejanovski,brandon.williams,e.dimitrova,jeromatron,moczarski,padakwaak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13797,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13555,,,,,,,CASSANDRA-14332,,,,,,"25/Jun/20 15:54;moczarski;heap-mem-histo.txt;https://issues.apache.org/jira/secure/attachment/13006446/heap-mem-histo.txt","25/Jun/20 14:29;moczarski;repair-terminated.txt;https://issues.apache.org/jira/secure/attachment/13006436/repair-terminated.txt",,,,,,,,,,,,,2.0,moczarski,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Nov 03 07:48:21 UTC 2020,,,,,,,All,,,,,,"0|z0g708:",9223372036854775807,,,,adejanovski,brandon.williams,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/45ad38fb5aec76418589c07d88fd0ca27fb430f4,,,,,,,,,"* Add unit test exposing the issue
* For trunk, add only regression test as unit test ",,,,,"29/Jun/20 16:35;brandon.williams;There may be a problem with repair, but your target pause time of 100ms is 1/5th the default we ship, and perhaps too aggressive, exacerbating the OOM.;;;","29/Jun/20 21:46;moczarski;[~brandon.williams] thanks for taking a look into the issue. Good to know about the GC setting, I will review that.

Currently, I try out a patch in another direction in our environment. I actively cancel the outstanding futures in the repair to not blocking the thread any longer before the thread pool executor will be stopped. So far, the results looks quite promising. When that works, I will attach the patch.;;;","03/Sep/20 12:20;moczarski;Some more investigation:

CASSANDRA-13797  seems to fix the issue by removing the blocking wait for validations in {{RepairJob}}: 
{code:java}
// Wait for validation to complete
Futures.getUnchecked(validations);
{code}

The fix causes other issues and was reverted by CASSANDRA-14332 on 3.0.17 and 3.11.3, but not for trunk. Therefor trunk seems to not having this issue.;;;","03/Sep/20 12:56;moczarski;Created a patch:
|[3.0|https://github.com/swen-fuhrmann/cassandra/tree/3.0-15902-oom-repair-terminating]|
|[3.11|https://github.com/swen-fuhrmann/cassandra/tree/3.11-15902-oom-repair-terminating]|
|[trunk|https://github.com/swen-fuhrmann/cassandra/tree/trunk-15902-oom-repair-terminating] (only regression test)|

Question for the reviewer: 
For trunk I only add a regression test because the issue seems not affecting trunk due to CASSANDRA-13797 *not* reverted on trunk. I'm unsure if cancel the outstanding futures even so makes sense. If so I'm glad to create a patch for trunk as well.;;;","28/Sep/20 14:52;adejanovski;Hi [~moczarski],

I'm aware of similar reports regarding repair sessions not being cleaned up correctly.
I'll happily test this patch and perform a review.;;;","28/Sep/20 14:53;adejanovski;Starting testing and review.;;;","02/Oct/20 15:15;adejanovski;So far, so good.
I've reproduced the issue in 3.11 using a low timeout in Reaper and repair sessions started to pile up indefinitely:

{code:java}
% x_all ""sudo su -s /bin/bash -c \""jstack \$(ps -ef |grep CassandraDaemon |grep -v grep| cut -d' ' -f3) |grep 'Repair#'\"" cassandra""
""Repair#11:1"" #2193 daemon prio=5 os_prio=0 tid=0x00007fe15b19f530 nid=0x74d8 waiting on condition [0x00007fe145968000]
""Repair#10:1"" #2154 daemon prio=5 os_prio=0 tid=0x00007fe16d7eceb0 nid=0x7471 waiting on condition [0x00007fe12bf12000]
""Repair#8:1"" #2116 daemon prio=5 os_prio=0 tid=0x00007fe150316b40 nid=0x73f1 waiting on condition [0x00007fe12ce09000]
""Repair#7:1"" #2084 daemon prio=5 os_prio=0 tid=0x00007fe150162f80 nid=0x73a9 waiting on condition [0x00007fe137894000]
""Repair#3:1"" #1704 daemon prio=5 os_prio=0 tid=0x00007fe10f1b98d0 nid=0x6b9a waiting on condition [0x00007fe1428fc000]
""Repair#14:1"" #1778 daemon prio=5 os_prio=0 tid=0x0000565030775bb0 nid=0x6d58 waiting on condition [0x00007f8d08659000]
""Repair#9:1"" #1573 daemon prio=5 os_prio=0 tid=0x00007f8d28770af0 nid=0x6b88 waiting on condition [0x00007f8d1ff39000]
""Repair#2:1"" #1397 daemon prio=5 os_prio=0 tid=0x00007f8d2815eb70 nid=0x6851 waiting on condition [0x00007f8d1f9a0000]
""Repair#1:1"" #1375 daemon prio=5 os_prio=0 tid=0x00007f8c67dcee40 nid=0x66a8 waiting on condition [0x00007f8d1cc6f000]
""Repair#1:1"" #2412 daemon prio=5 os_prio=0 tid=0x00007fc61d2a38f0 nid=0x6ed9 waiting on condition [0x00007fc60736d000]
{code}

Then I built the patched version and waited again for repairs to time out for a little while.
I never got more than one repair thread:

{code:java}
% x_all ""sudo su -s /bin/bash -c \""jstack \$(ps -ef |grep CassandraDaemon |grep -v grep| cut -d' ' -f2) |grep 'Repair#'\"" cassandra""
""Repair#21:1"" #682 daemon prio=5 os_prio=0 tid=0x00007f249854cc10 nid=0x7ced waiting on condition [0x00007f246f779000]
{code}
 
I'm currently checking that repair still go through as expected with a regular timeout and that is still running. 
Once that's done, I'll check again against 3.0 and then perform a code review.;;;","02/Oct/20 22:11;moczarski;Thanks a lot [~adejanovski] for starting the review and the testing! ;;;","09/Oct/20 06:43;adejanovski;3.0 works as expected as well once patched.
I'll proceed with code review now.;;;","28/Oct/20 13:18;adejanovski;The code looks good to me.
Patch works as expected and changes to the non-testing code are minimal.
Unit tests for repairs are all passing .;;;","28/Oct/20 13:18;adejanovski;LGTM;;;","28/Oct/20 14:01;brandon.williams;Great work, committed.  Thanks!;;;","02/Nov/20 17:50;moczarski;[~adejanovski] thanks for the review, [~brandon.williams] thanks for committing!

[~mck] Not sure if fixed for version ""4.0"" and ""4.0-beta3"" correct for this ticket. As far as I see there was not merge in trunk. This issue only appear in 3.x (see my comment above). I only created a regression test for trunk (but was not committed yet). 
Should we add the test to trunk? 
Should we also merge the fix to trunk because improves the code even thought its not an issue any longer?
I'd be glad to prepare this fix also for trunk if that makes sense. 
Any thoughts?;;;","02/Nov/20 18:34;brandon.williams;I think the fix version is fine.  I did only commit the test to 4.0, but also since it was only a test I did not add it to CHANGES per our policy for test fixes, though it is mentioned in the branches below that.;;;","03/Nov/20 07:48;moczarski;Thanks for clarification, makes sense.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix unit tests to load test/conf/cassandra.yaml (so to listen on a valid ip),CASSANDRA-15901,13313438,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,25/Jun/20 12:48,27/Aug/20 15:00,13/Jul/23 08:39,07/Jul/20 09:32,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"Many of the ci-cassandra jenkins runs fail on {{ip-10-0-5-5: Name or service not known}}. CASSANDRA-15622 addressed some of these but many still remain. Currently test C* nodes are either failing or listening on a public ip depending on which agent they end up.

The idea behind this ticket is to make ant force the private VPC ip in the cassandra yaml when building, this will force the nodes to listen on the correct ip.",,bereng,mck,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jul 07 09:34:36 UTC 2020,,,,,,,All,,,,,,"0|z0g6wo:",9223372036854775807,,,,mck2,snazy,,,Normal,,0.3,,,https://github.com/apache/cassandra/commit/4654ef09c1d3736e0b50e8d5756664cbf9e4ca84,,,,,,,,,See PR,,,,,"25/Jun/20 15:05;bereng;[~mck] This is the POC I came up with. I tested it on a local jenkins and I can see it being effective:

{noformat}
16:56:29 forceDeviceListenAddress:
16:56:29      [exec] docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
16:56:29      [exec]         inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
16:56:29      [exec]         inet6 fe80::42:26ff:fe25:c1e2  prefixlen 64  scopeid 0x20<link>
16:56:29      [exec]         ether 02:42:26:25:c1:e2  txqueuelen 0  (Ethernet)
16:56:29      [exec]         RX packets 78645  bytes 5621831 (5.6 MB)
16:56:29      [exec]         RX errors 0  dropped 0  overruns 0  frame 0
16:56:29      [exec]         TX packets 85630  bytes 1329098560 (1.3 GB)
16:56:29      [exec]         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
16:56:29      [exec] 
16:56:29      [exec] lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
16:56:29      [exec]         inet 127.0.0.1  netmask 255.0.0.0
16:56:29      [exec]         inet6 ::1  prefixlen 128  scopeid 0x10<host>
16:56:29      [exec]         loop  txqueuelen 1000  (Local Loopback)
16:56:29      [exec]         RX packets 66296  bytes 21093416 (21.0 MB)
16:56:29      [exec]         RX errors 0  dropped 0  overruns 0  frame 0
16:56:29      [exec]         TX packets 66296  bytes 21093416 (21.0 MB)
16:56:29      [exec]         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
16:56:29      [exec] 
16:56:29      [exec] wlp59s0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
16:56:29      [exec]         inet 192.168.1.131  netmask 255.255.255.0  broadcast 192.168.1.255
16:56:29      [exec]         inet6 fe80::9c8e:fcad:d881:ffda  prefixlen 64  scopeid 0x20<link>
16:56:29      [exec]         ether 18:1d:ea:b1:51:48  txqueuelen 1000  (Ethernet)
16:56:29      [exec]         RX packets 6031123  bytes 7766582727 (7.7 GB)
16:56:29      [exec]         RX errors 0  dropped 0  overruns 0  frame 0
16:56:29      [exec]         TX packets 2398356  bytes 1840272042 (1.8 GB)
16:56:29      [exec]         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
16:56:29      [exec] 
16:56:29      [echo] ******************* 192.168.1.131
{noformat}

You'll notice that a device is being force upon calling {{ifconfig}}. This is bc many ips can match the regexp. On AWS the private ip is on eth0. So I'd suggest this course of action:
- Take a look at what I did and see if it makes sense at all
- If it does we'd need to run it against {{eth0}} on all agents and see we indeed get what we expect and tests run ok

wdyt?
;;;","26/Jun/20 08:47;mck;Quick interjection while i keep looking… 

bq. If it does we'd need to run it against eth0 on all agents and see we indeed get what we expect and tests run ok

Not all the agents are AWS. Some are virtuals on-premise (e.g. iland). In fact I only know for certain that the Amazon agents are AWS  :shrug:

;;;","26/Jun/20 08:53;mck;Back references:
- example failure stacktrace on [ci-cassandra.a.o|https://ci-cassandra.apache.org/job/Cassandra-trunk/150/testReport/(root)/_init_/org_apache_cassandra_locator_ReplicaCollectionTest/]
- dev ML [post|https://lists.apache.org/thread.html/r1a7bc49b0648ec3b4ab9245dc101dc7dfbec51048f83c7128e3989eb%40%3Cdev.cassandra.apache.org%3E] asking for help;;;","26/Jun/20 09:35;bereng;After discussion with [~mck] it seems the underlying root cause is that some tests don't init the daemon. Hence the config/listen_address are never loaded and effective. We came up with the following course of action:
 * Make all ci-cass agents fail consistently, so any new tests will get reported.
 * Fix all current tests to init the daemon correctly
 * Once ci-cass is in good shape we can link the report for the commit into the Jira ticket
 * Explore ways to make that fail locally so you get the failure pre-push rather than post-commit/ci-cass run;;;","29/Jun/20 10:01;bereng;[~mck] CI [runs|https://app.circleci.com/pipelines/github/bereng/cassandra/51/workflows/e5aeb0d3-9bc6-43d1-a45c-8c6f6c3412b1] seem ok & tests pass locally as well, besides the OOM but circle was on a partial outage today... Do you think you could run the PR against cassandra13 and see if the issue has been sorted?;;;","29/Jun/20 13:59;mck;bq. Do you think you could run the PR against cassandra13 and see if the issue has been sorted?

Running at https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/153/;;;","29/Jun/20 14:21;bereng;Mmmm they seem to failing already but let it run to get an updated list of failing tests. I'll start digging...;;;","29/Jun/20 15:26;bereng;Ok the ones failing on the hostname resolution have gone down from 20-ish to 3 and they look like snowflakes: unsing reflection and other non-std stuff. I'll fix those tomorrow but looks like we're on track.;;;","30/Jun/20 12:38;bereng;The latest run with the latest commit looks ok imo:
 * [CI j11|https://app.circleci.com/pipelines/github/bereng/cassandra/52/workflows/573ad5be-e34d-4668-a0af-2726d4b35568] Failure seems unrelated and passes locally
 * [CI j8|https://app.circleci.com/pipelines/github/bereng/cassandra/52/workflows/16e15155-7dce-4877-86f5-315c6a837d36] Seems to be a new flaky test but unrelated to the PR imo. It passes when ran locally but failed once locally on {{ant test}}
 * The [latest|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test/156/] ci-cassandra run looks much better but:
 ** ActiveRepairServiceTest could be a [legit|https://ci-cassandra.apache.org/job/Cassandra-trunk/199/testReport/org.apache.cassandra.service/ActiveRepairServiceTest/testQueueWhenPoolFullStrategy_cdc/history/] flaky
 ** ClearSpanshotTest passes locally and it failed with some weird VM error :shrug:
 ** Connection tests have given timeouts [before|https://ci-cassandra.apache.org/job/Cassandra-trunk/199/testReport/org.apache.cassandra.net/ConnectionTest/testMessageDeliveryOnReconnect_cdc/history/]

It would be good to have a second opinion here. But I think the failures we are hitting are legit flaky tests now that we've removed much of the noise. [~mck] would you be so kind to run the tests again but not on cassandra13 to see what happens? I think we can then move this to review if no weird stuff happens. Wdyt?;;;","30/Jun/20 15:15;mck;Agreed!
New run [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/157/] (on cassandra35);;;","01/Jul/20 07:52;bereng;The new run is successful. So I am starting to think that cassandra13 should have been named cassandra12+1 instead as things tend to go wrong over there lol. Anyway this is removing lots of noise from test reports so I am moving it forward to review. We need another committer besides you [~mck] to +1 it. Sounds good?;;;","01/Jul/20 08:18;snazy;I'm not sure whether adding {{DatabaseDescriptor.daemonInitialization()}} to the tests is the right way here. Those tests do not need the daemon at all and adding these DD.daemonInit() makes those tests slower. The change to {{DatabaseDescriptorRefTest}} can actually break that test itself. The {{SSTable*Test.java}} tests test offline tools, so DD.daemonInit() feels wrong here.;;;","01/Jul/20 09:54;bereng;[~snazy] Thanks for taking a look here! I replaced all daemon inits with a plain address load call and checked it still works locally. The {{SStable*Test}}s weren't using DD.daemonInit() but toolinit(). Still I have replaced those with plain address loads as well to avoid any other heavyweight lifting as you pointed out. Hope it looks better now?;;;","01/Jul/20 10:27;snazy;Hm - maybe it's easier to change {{org.apache.cassandra.utils.FBUtilities#getJustLocalAddress}} and add a try-catch(UnknownHostException) around the {{InetAddress.getLocalHost()}} (_""Returns the address of the local host. This is achieved by retrieving the name of the host from the system, then resolving that name into an {{InetAddress}}.""_) and use {{InetAddress.getLoopbackAddress()}} when that's thrown (to avoid a change of the current behavior). Guess, this affects all branches (and all other uses of {{InetAddress.getLocalHost()}}).;;;","01/Jul/20 10:54;bereng;If I am following you correctly you're proposing returning {{InetAddress.getLoopbackAddress()}} when {{listen_address}} is null and not resolvable:
 * The original problem we are facing imo is that the specified {{listen_address}} in the yaml is not being loaded, hence is not effective and using a default fallback. I would argue here you want the {{listen_address}} you have in the test yaml to be effective rather than being resilient to a default fallback node mis-config? In fact it's actually good we found out we were not honoring the test yaml.
 * I played a bit on DD to try to load the address config sooner looking for alternatives, as you did, to the wall of test fixes. But some access the method well before the {{listen_address}} is loaded. So that didn't work.
 * On your proposed fix it sounds great but maybe orthogonal (iiuc). Also would we prefer to fail if we can't resolve the machine name?  I read a bit about {{{{getLoopbackAddress}}}} and you might have some ipv4 vs ipv6 lo address being returned apparently :thinking:...

So TLDR: we need to make the yaml effective, I wasn't able to find a smarter alternative & your proposal could be a new ticket instead. Wdyt makes sense?;;;","02/Jul/20 07:58;mck;bq.  I would argue here you want the listen_address you have in the test yaml to be effective rather than being resilient to a default fallback node mis-config? In fact it's actually good we found out we were not honoring the test yaml.

I agree with this. The test yaml needs to honoured. And it would be nice to solve this ticket without touching runtime code.
Finding a lighter way to just load the yaml makes sense.;;;","02/Jul/20 08:56;snazy;Well, the most unintrusive way would be to add the hostname to the 127.0.0.1 (or even better the host's public IP) entry in /etc/hosts.

Mosts tests in question (e.g. the {{ReplicaCollectionTest}} or {{SEPExecutorTest}}) do not need a c-yaml at all (and didn't need it before), because those are ""pure"" unit tests (i.e. don't need a daemon or any configuration). Other tests (like the {{DatabaseDescriptorRefTest}}) are ""allergic"" to touching classes before the actual test. The next guy who comes along these tests, likely thinks that the DD call is unnecessary and removes it, because the test passes locally and e.g. in CircleCI.

The change to {{DatabaseDescriptorRefTest}} actually causes the test to not fully exercise the DD-init code being tested (and ""silently pass"" although it didn't test the whole init code or, if new changes get in, fail because some expectations aren't met). TL;DR it breaks that test.

The implemented default for {{broadcast_address}} (defaulting to {{listen_address}}, which in turn defaults to {{InetAddress.getLocalHost()}}), is correct (the yaml says: _""{{Leaving it blank leaves it up to InetAddress.getLocalHost(). This will always do the Right Thing *if the node is properly configured (hostname, name resolution, etc)*, and the Right Thing is to use the address associated with the hostname (it might not be).}}""_). I admit, it might be wrong to add a fallback to {{InetAddress.getLoopbackAddress()}}.

TL;DR I think it's much safer to fix the test environment (and not work around test environment issues by changing any existing code).

Side note (feel free to ignore this): I do think that using {{InetAddress.getLocalHost()}} is a mistake in general. It seems that (in practice) there is no guarantee that it {{IA.getLocalHost()}} deterministically return the same address - think: DHCP changes, interfaces going up or down, hostnames that resolve to multiple IPs, etc etc.;;;","02/Jul/20 10:13;bereng;[~snazy] thx for the input.

{{toolInit}} isn't expected to have a loaded address config so the default behavior is what's expected. So adding an address load either from scratch or before the {{toolInit}} is wrong. Icwym.

On the other hand as discussed in CASSANDRA-15622 there can be problems on test C* nodes listening on public ips /ports and ASF regulations I am not aware of as mentioned there. Given this is a source of false failures on ci-cass jenkins runs atm, maybe the best way forward is to fix the config in cassandra-13. Then open a ticket to put the full ci-cassandra jenkins master/slave things under a more secured env compliant to whatever ASF and other regulations there might be.

What do you guys think? [~mck] is that even possible or am I talking nonsense?;;;","02/Jul/20 13:51;mck;bq. Well, the most unintrusive way would be to add the hostname to the 127.0.0.1 (or even better the host's public IP) entry in /etc/hosts.

These tests have also failed in the previous jenkins environment at builds.apache.org (long before circleci was introduced).

The jenkins agents  require public ip and a valid hostname. So there is a valid reason that these nodes are ""not properly configured"" (according to our definition for a runtime node). 

And, we don't have ssh access. So this may be un-intrusive to code changes, but involves either waiting a few weeks or months for the owner of the donated agents to re-configure them (to incorrectly let tests listen on public interfaces), or containerising all tests (bc inside containers hostname can always safely be the private interface, like circleci).

bq. … those are ""pure"" unit tests (i.e. don't need a daemon or any configuration)

I'm not sure I agree entirely with that statement. But those quotes imply you don't either. These unit tests are not really configuration free, the fault lies in the fact that the tests are looking up the configuration, and those that haven't defined the config then fall back onto an opinion that is incompatible with the ""jenkins agents around the world but unlike normal C* don't listen on the public interface because this is tests"" setup. A pure unit test shouldn't be resorting to either an opinion or an OS hostname lookup. A hardcoded default config would be more appropriate, in theory. But alas the C* is a bit too messy for the ideal :-(

Thanks for pushing back [~snazy].;;;","06/Jul/20 08:29;bereng;So it seems after all the back and forth and given the current restrictions mainly:
 * Not providing a synthetic address load which the test actually doesn't need
 * Avoiding failing on mis-config nodes

Adding a 3rd fallback seems reasonable enough, moving from failing scenarios to a 'localhost' listen in a major release. Both {{getLocalHost()}} and {{getLoopbackAddress()}} may fail under some OS/ip configs so we're not anyway worse than we used to be.

The change has been pushed. It's undergoing review and an initial test run [fired|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test/161/]. Iirc at least the JMXAuth test is a legit failure I need to look into. Once that's done I'll run a full test suite as this is touching C* code: dtests, unit tests, jvm, etc...

 ;;;","06/Jul/20 08:58;bereng;[~snazy] I did accept your commits but for a single one on wording. Please take a look at it and the {{JMXAuthTest}} failure, which is a hostname resolution error in some library. Wdyt?

[~mck] could you be so kind to fire a run against cassandra13 please :-)?

I am running a full CI on circle as well. If all goes well that should be it.;;;","06/Jul/20 09:08;mck;Just the unit tests (on cassandra13) at https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test/165
Full devbranch pipeline (now that we're touching runtime code) at https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/196/;;;","07/Jul/20 09:06;bereng;[~mck] the full pipeline failed on dtest [replica_side_filtering_test|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/196/testReport/] which passes locally and passes on circle-ci. Is there a chance to re-run that? I know this is an extra day of waiting before commit, but it'll be better than merging sthg broken, despite I have the intuition this is probably a legit flaky.;;;","07/Jul/20 09:32;mck;Committed as [4654ef09c1d3736e0b50e8d5756664cbf9e4ca84 |https://github.com/apache/cassandra/commit/4654ef09c1d3736e0b50e8d5756664cbf9e4ca84].;;;","07/Jul/20 09:33;mck;bq.  the full pipeline failed on dtest replica_side_filtering_test which passes locally and passes on circle-ci. Is there a chance to re-run that? 

this was a first-time-witnessed bug where the Jenkins pipeline copied the test report artefact from the wrong build. investigating this separately. ;;;","07/Jul/20 09:34;bereng;Ok after some investigation [~mck] discovered the final jenkins report is collecting results from other runs! If you check the stages one by one and make sure commit id matches we see none of those failures. This is jenkins being broken.;;;",,,,,,,,,,,,,,,,,,,,,
Close channel and reduce buffer allocation during entire sstable streaming with SSL,CASSANDRA-15900,13313236,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,jasonstack,jasonstack,24/Jun/20 11:47,21/Dec/20 09:32,13/Jul/23 08:39,07/Jul/20 00:21,4.0,4.0-beta1,,,,Legacy/Streaming and Messaging,,,,0,,,,"CASSANDRA-15740 added the ability to stream entire sstable by loading on-disk file into user-space off-heap buffer when SSL is enabled, because netty doesn't support zero-copy with SSL.

But there are two issues:
 # file channel is not closed.
 # 1mb batch size is used. 1mb exceeds buffer pool's max allocation size, thus it's all allocated outside the pool and will cause large amount of allocations.

[Patch|https://github.com/apache/cassandra/pull/651]:
 # close file channel when the last batch is loaded into off-heap bytebuffer. I don't think we need to wait until buffer is flushed by netty.
 # reduce the batch to 64kb which is more buffer pool friendly when streaming entire sstable with SSL.",,djoshi,jasonstack,jeromatron,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jul 07 14:13:42 UTC 2020,,,,,,,All,,,,,,"0|z0g5ns:",9223372036854775807,,,,djoshi,maedhroz,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/73691944c0ff9b01679cf5a6fe5944ad4c416509,,,,,,,,,[https://circleci.com/workflow-run/ba9f4692-da21-44e9-ac31-fe8d2e6215cb],,,,,"24/Jun/20 11:49;jasonstack;[~djoshi] do you mind reviewing and checking it on apache ci?;;;","24/Jun/20 18:16;maedhroz;[~jasonstack] I can take an initial look.;;;","24/Jun/20 21:17;maedhroz;[~jasonstack] Made a couple comments inline in the PR where I thought that would be easier. Then there are a few higher level things:

* It might be worthwhile to have a test in {{AsyncStreamingOutputPlusTest}} that verifies {{AsyncStreamingOutputPlus#writeFileToChannel()}} closes the provided channel.
* {{AsyncStreamingOutputPlus#writeFileToChannel(FileChannel, StreamRateLimiter, int)}} and {{AsyncStreamingOutputPlus#writeFileToChannelZeroCopy()}} may be better off at {{private}} visibility, given we're treating them as transport-level implementation details. (Perhaps {{writeFileToChannel}} would be easier to test at package-private though.)
* The JavaDoc for {{writeFileToChannel(FileChannel, StreamRateLimiter)}} is slightly out-of date now, given we've lowered the batch size for the SSL case. (We should make sure to preserve the bit about the method taking ownership of the {{FileChannel}}.);;;","25/Jun/20 17:42;jasonstack;bq. It might be worthwhile to have a test in AsyncStreamingOutputPlusTest that verifies AsyncStreamingOutputPlus#writeFileToChannel() closes the provided channel.

+1

bq. AsyncStreamingOutputPlus#writeFileToChannel(FileChannel, StreamRateLimiter, int) and AsyncStreamingOutputPlus#writeFileToChannelZeroCopy() may be better off at private visibility, given we're treating them as transport-level implementation details. (Perhaps writeFileToChannel would be easier to test at package-private though.)

I left them as public and marked ""@VisibleForTesting""..

bq. The JavaDoc for writeFileToChannel(FileChannel, StreamRateLimiter) is slightly out-of date now, given we've lowered the batch size for the SSL case. (We should make sure to preserve the bit about the method taking ownership of the FileChannel.)

+1;;;","25/Jun/20 18:46;maedhroz;+1

I think [~djoshi] might take a quick look as well.;;;","29/Jun/20 20:05;djoshi;The patch lgtm too. +1. I've kicked off tests as a final check [here|https://circleci.com/workflow-run/35d72695-0461-4080-997f-20d54940ff98] and [here|https://circleci.com/workflow-run/3487a3b3-401e-4b50-aea8-fc667b2e64cd]. I'll commit once I get a clean run.;;;","30/Jun/20 18:20;djoshi;[~maedhroz] [~jasonstack] looks like there are a few failures. They're likely unrelated but it would be great to double check and make sure.;;;","01/Jul/20 03:13;maedhroz;Let's see...

{{test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications}} should have been addressed by CASSANDRA-15677 a few days ago.

{{test_describe - cqlsh_tests.test_cqlsh.TestCqlsh}} and its materialized view equivalent have a history of flakiness, and don't look directly related to this patch. (Is there an issue around {{read_repair}} showing up in the table DDL where it isn't expected?)

;;;","01/Jul/20 03:23;jasonstack;rebased and submit another round of ci: [j8|https://circleci.com/workflow-run/cdf55335-c876-450b-8bf9-1d778a2df806] and [j11|https://circleci.com/workflow-run/2080f225-f689-4243-ad67-288bef608640]

bq. test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications should have been addressed by CASSANDRA-15677 a few days ago.

it's failing after rebase...

bq. J11 - readRepairTest - org.apache.cassandra.distributed.test.SimpleReadWriteTest
bq. J11 - testImportCorrupt - org.apache.cassandra.db.ImportTest

doesn't seem to be related.
;;;","01/Jul/20 17:32;maedhroz;I pinged [~bryncooke] about {{pushed_notifications_test.TestPushedNotifications}}. It's possible CASSANDRA-15886 actually wasn't a duplicate of CASSANDRA-15677?

[~jasonstack] Unless those last two fail locally or have errors relating to channel closure, I wouldn't guess they have anything to do with this patch. However, I'm also not seeing any existing flaky test Jiras for them (closest are CASSANDRA-15543 and CASSANDRA-15517), so we may need a couple new Jiras. {{SimpleReadWriteTest}} looks like it got taken out by the forked VM existing abnormally though.;;;","03/Jul/20 14:10;jasonstack;both SimpleReadWriteTest and ImportTest passed locally with JDK11, I don't think they use streaming.;;;","07/Jul/20 00:21;djoshi;Committed. Thanks, [~maedhroz] and [~jasonstack]!;;;","07/Jul/20 14:13;jasonstack;thanks for the review
 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dropping a column can break queries until the schema is fully propagated,CASSANDRA-15899,13313185,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bdeggleston,marcuse,marcuse,24/Jun/20 07:50,03/Jan/21 17:03,13/Jul/23 08:39,06/Oct/20 17:16,3.0.23,3.11.9,4.0,4.0-beta3,,Cluster/Schema,,,,0,,,,"With a table like:
{code}
CREATE TABLE ks.tbl (id int primary key, v1 int, v2 int, v3 int)
{code}

and we drop {{v2}}, we get this exception on the replicas which haven't seen the schema change:
{code}
ERROR [SharedPool-Worker-1] node2 2020-06-24 09:49:08,107 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[SharedPool-Worker-1,5,node2]
java.lang.IllegalStateException: [ColumnDefinition{name=v1, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, position=-1}, ColumnDefinition{name=v2, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, position=-1}, ColumnDefinition{name=v3, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, position=-1}] is not a subset of [v1 v3]
	at org.apache.cassandra.db.Columns$Serializer.encodeBitmap(Columns.java:546) ~[main/:na]
	at org.apache.cassandra.db.Columns$Serializer.serializeSubset(Columns.java:478) ~[main/:na]
	at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:184) ~[main/:na]
	at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:114) ~[main/:na]
	at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:102) ~[main/:na]
	at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:132) ~[main/:na]
	at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:87) ~[main/:na]
...
{code}

Note that it doesn't matter if we {{SELECT *}} or {{SELECT id, v1}}",,bdeggleston,ifesdjeen,jeromatron,marcuse,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bdeggleston,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 05 21:32:39 UTC 2020,,,,,,,All,,,,,,"0|z0g5co:",9223372036854775807,,,,samt,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/31b9078a691a6f93b104cc6b3f72fe2fbf6557f6,,,,,,,,,in-jvm dtests,,,,,"24/Jun/20 07:57;marcuse;repro dtest: https://github.com/krummas/cassandra/commits/marcuse/15899

This is probably caused by {{isFetchAll}} vs {{fetchedColumns()}} in {{ColumnFilter}} as they will mismatch if there is a disagreement on which columns exist;;;","28/Jul/20 23:37;bdeggleston;I have a patch ready for review here: https://github.com/bdeggleston/cassandra/tree/15899-trunk. This fixes the issue for dropping columns as well as adding them, which would also throw validation errors.

Dropped columns are handled by checking that the columns we're serializing and the header columns are actually equal, not just the same length, and ignoring situations where we have a column not specified by the read command.

Added columns are handled by returning placeholder columns when deserializing columns instead of throwing an exception. We will throw an exception if we attempt to deserialize any data with a placeholder column.;;;","21/Aug/20 15:55;samt;
The patch looks good to me, the only minor nit I've got is that having {{SearchIterator}} extend {{Iterator}} is somewhat unnecessary for how we're using it. I've pushed a branch (rebased onto latest trunk) for you to take a look at: https://github.com/beobal/cassandra/commits/beobal/15899-trunk

Also, it may be worth adding a test where a write is received for a dropped column but the coordinator isn't aware of the schema change. This is handled correctly already on the other replicas via DroppedColumn and isn't affected by anything in this patch, but it took me a little time to manually verify that that was actually the case. If you agree, I've added that to the linked branch too.

Otherwise, this seems fine to me. The fixver is 3.0, but I don't think there should be much involved in backporting this to 3.0/3.11.
;;;","24/Aug/20 10:16;ifesdjeen;A minor comment: shouold we consider implementing {{isPlaceholder}} on {{Placeholder}} class to avoid instanceOf checks? Also, it might be useful to add tests for {{*}} not only {{id, v1}} in {{SchemaTest.java}}.;;;","31/Aug/20 21:03;bdeggleston;I pulled in Sam's changes, added the tests Alex suggested, and ported to 3.0/3.11

| [3.0|https://github.com/bdeggleston/cassandra/tree/15899-3.0] | [circle|https://app.circleci.com/pipelines/github/bdeggleston/cassandra?branch=15899-3.0]|
| [3.11|https://github.com/bdeggleston/cassandra/tree/15899-3.11] | [circle|https://app.circleci.com/pipelines/github/bdeggleston/cassandra?branch=15899-3.11]|
| [trunk|https://github.com/bdeggleston/cassandra/tree/15899-trunk] | [circle|https://app.circleci.com/pipelines/github/bdeggleston/cassandra?branch=15899-trunk]|;;;","04/Sep/20 14:31;samt;+1 LGTM
One tiny nit if you don't mind fixing on commit: in the 3.0 & 3.11 branches, there are a couple of stray semicolons in {{SimpleReadWriteTest}} (lines 137 & 148).;;;","20/Sep/20 10:10;ifesdjeen;+1 LGTM

The only change I can suggest (feel free to ignore it) is to add tests not only for added, but also for dropped columns, and test for when coordinator is a node that is not aware of the schema change:  [https://github.com/ifesdjeen/cassandra/pull/new/15899-3.0]. All tests pass.;;;","05/Oct/20 21:32;bdeggleston;committed to 3.0 and merged up. I can't mark the ticked as committed until INFRA-20942 is resolved, but in the meantime, here's the github link: https://github.com/apache/cassandra/commit/31b9078a691a6f93b104cc6b3f72fe2fbf6557f6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dropping compact storage with 2.1-sstables on disk make them unreadable,CASSANDRA-15897,13313024,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,marcuse,marcuse,23/Jun/20 11:01,02/Jun/22 22:35,13/Jul/23 08:39,11/Mar/21 03:07,3.0.25,3.11.11,4.0,4.0-rc1,,Legacy/Local Write-Read Paths,,,,0,,,,Test reproducing: https://github.com/krummas/cassandra/commits/marcuse/dropcompactstorage,,aleksey,blerer,brandon.williams,e.dimitrova,ifesdjeen,jeromatron,jmeredithco,marcuse,slebresne,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16295,,,,CASSANDRA-16063,,,,,,,,,,,,,,,,,,,,,,,0.0,slebresne,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Mar 11 19:37:24 UTC 2021,,,,,,,All,,,,,,"0|z0g4cw:",9223372036854775807,,,,blerer,brandon.williams,e.dimitrova,,Normal,,,,,https://github.com/apache/cassandra/commit/efde6a76f9807eaa0af80b5e85aa350ac8709a81 https://github.com/apache/cassandra-dtest/commit/700f712c0ee87ea90c960e7fe92343bff7b2ba23,,,,,,,,,https://issues.apache.org/jira/browse/CASSANDRA-15897?focusedCommentId=17299259&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17299259,,,,,"01/Jul/20 08:25;slebresne;The problem here is that the 2.X sstables layout is that of the ""compact"" table, and can't be read properly post-DROP COMPACT unless we still remember the table ""was"" compact.

Overall, I can see only 2 main options:
# we remember somehow that a table ""was"" compact, even after a {{DROP COMPACT STORAGE}}. The code reading legacy sstables could then use the old compact version of the table metadata, and I think this would work. One way to preserve this information could be that, instead of dropping the COMPOUND/DENSE flags when {{DROP COMPACT STORAGE}} is used, we'd preserve those but add a new {{COMPACT_STORAGE_DROPPED}} flag. I think doing so would be relatively simple code-wise, and preserving the information that a table _was_ compact internally, at least until 4.0 (which can clean all that up) almost feel like a good idea (I doubt many people have tried {{DROP COMPACT STORAGE}} yet, but some will have to to upgrade to 4.0 and keeping this info may help diagnose issues along the way). The downsides I can see however are:
#* adding a flag impacts drivers, at least when they read the schema (not that it completely break driver versions that won't know about the flag...).
#* DROP COMPACT STORAGE has been released a while ago already and this wouldn't be retroactive. Not sure it's a big deal, but I may not have think it through.
# we don't ""allow"" DROP COMPACT STORAGE until all 2.x sstables have been upgraded.  Now, if we could easily reject DROP COMPACT STORAGE requests until all sstables are in the 3.x format, I probably wouldn't even suggest the first option above. But it's actually not trivial, because when a coordinator receive such requests, it has no way to know what sstable formats the other nodes have. So I guess there is 2 sub-options:
## we clearly document that one should upgrade sstables on all nodes before trying DROP COMPACT STORAGE, but don't do more than that. Not amazing, but certainly the simplest option.
## we start having each node gossip, say, the lowest sstable format version it has locally, so we can properly reject DROP COMPACT STORAGE until it's safe. My main personal caveat here is that I'm always a tad nervous with adding things to Gossip in a minor. But I _think_ it's pretty safe to do so.

I'm happy to implement any of those solution we prefer (and of course, there may be better suggestions), but we need to pick. Personally, I'd prefer avoiding 2.1 unless the other options prove more complex than I think, but I'm not 100% sure between 1 and 2.2. Maybe 2.2 because it has not externally visible impact on drivers.

Other opinions (going to arbitrarily ping [~marcuse], [~ifesdjeen] and [~aleksey] as people knowledgeable of COMPACT STORAGE but welcoming every opinion)?
;;;","01/Jul/20 13:42;ifesdjeen;I like the idea with {{COMPACT_STORAGE_DROPPED}} flag, but that won't work for people who have already dropped them (however, disallowing dropping won't help them, either). You also did mention it won't be retroactive. 

I'm personally in favour of not allowing {{DROP COMPACT STORAGE}} unless all tables are upgraded, since it's a bit simpler to maintain. Maybe, depending on how [CASSANDRA-15811] is implemented, that can even be a node-local decision?;;;","01/Jul/20 14:09;slebresne;bq. Maybe, depending on how CASSANDRA-15811 is implemented, that can even be a node-local decision?

Haven't though too long about that other ticket, so not sure if this would help. I do agree we should do something there though and happy to start the conversation on what exactly.;;;","02/Jul/20 11:36;aleksey;bq. I'm personally in favour of not allowing DROP COMPACT STORAGE unless all tables are upgraded, since it's a bit simpler to maintain.

This also wouldn't be retroactive, though. I do weakly prefer the gossip route. And we might need a one-off tool/support in {{upgradesstables}} to convert those 2.x sstables.;;;","02/Jul/20 14:59;slebresne;I'll give a shot to the gossip route since that seems to win this popularity contest, even if not by a great margin.

bq. And we might need a one-off tool/support in upgradesstables to convert those 2.x sstables.

Yeah. I'll look at adding a flag to {{upgradesstables}}. 

That said, I suspect there may be corner cases that we can't entirely handle. For instance, if the user started adding/removing columns just after that {{DROP COMPACT STORAGE}} and before figuring out that some tables couldn't be read, then we might be in the dark. Does not mean we shouldn't try handling those sstables in the simple case, but just to list a probable limitation.;;;","26/Aug/20 14:58;e.dimitrova;I just added as part of CASSANDRA-16063 the following [commit|https://github.com/ekaterinadimitrova2/cassandra/commit/9ff9130808c751c9253bdecaa27c453bb5e7a71c]
 You might want to check it. 
 I will soon publish the full patch for that ticket (it covers a couple of patches in a couple of repos), I have to run CI and confirm some of the upgrade tests but this was one of the things that was brought as part of that ticket.;;;","08/Oct/20 09:09;slebresne;I wrote a patch for the Gossip option discussed a while back. It's [here|https://github.com/pcmanus/cassandra/commits/C-15897-3.0] and should be pretty complete as far as refusing `DROP COMPACT STORAGE` until no nodes have 2.x sstables anymore goes.

I didn't got to updating {{upgradesstable}} to allow migrating 2.x sstables for potential users that have already cornered themselves. And I'm afraid I'm unlikely to have time for that in the short term.

So if we're ok with pushing update to {{upgradesstable}} (or {{scrub}}) to a followup (I could argue that no user has complained about this yet; maybe no-one has run into this yet), and are still ok with the Gossip approach, then the path is more or less ready for review.

If we prefer having the {{upgradesstable}} change in this ticket however, I cannot make promises on how quickly I can get to it (but I'm happy to hand it over).
;;;","09/Oct/20 20:41;e.dimitrova;My personal preference would be to keep the work incremental - review and commit this work and open a new ticket on the other part. I can rebase and push CI on this one on Monday? 

 ;;;","12/Oct/20 23:45;e.dimitrova;Branch rebased. CI running [here | https://jenkins-cm4.apache.org/job/Cassandra-devbranch-artifacts/83/];;;","21/Oct/20 23:53;e.dimitrova;Jenkins run is lost. I just [rebased | https://github.com/ekaterinadimitrova2/cassandra/tree/C-15897-3.0], reverted the local temporary check for the SSTables from CASSANDRA-16063, and ran CI [here | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/424/workflows/fb25652e-1297-4a24-a5b1-b31afb732333].
There are four tests that will need attention. I will look at them tomorrow. 
- test_prefer_local_reconnect_on_listen_address - snitch_test.TestGossipingPropertyFileSnitch - stable in [Jenkins | https://jenkins-cm4.apache.org/job/Cassandra-3.0/25/testReport/dtest.snitch_test/] 
- testDropSSTables - org.apache.cassandra.db.lifecycle.TrackerTest - stable in [Jenkins | https://jenkins-cm4.apache.org/job/Cassandra-3.0/25/testReport/org.apache.cassandra.db.lifecycle/] 
- testDropCompactWithClusteringAndValueColumnWithDeletesAndWrites - org.apache.cassandra.distributed.upgrade.CompactStorage2to3UpgradeTest
- testDropCompactWithClusteringAndValueColumn - org.apache.cassandra.distributed.upgrade.CompactStorage2to3UpgradeTest
;;;","21/Oct/20 23:57;e.dimitrova;[~marcuse], [~ifesdjeen] and [~aleksey], just to confirm you are ok with the approach proposed by Sylvain? Wanted to be sure before I invest time here. Also, do you accept the suggestion to pull update to upgradesstable (or scrub) to a followup ticket? ;;;","26/Oct/20 15:50;e.dimitrova;[~marcuse], [~aleksey], [~ifesdjeen], I was wondering whether you had the time to look at this one? ;;;","11/Nov/20 23:10;jmeredithco;[~ifesdjeen] does CASSANDRA-16217 resolve the concerns in this ticket?
;;;","16/Nov/20 15:30;ifesdjeen;[~jmeredithco] if I understand the problem correctly, [CASSANDRA-16217] does not solve this one. 4.0 supports versions down to {{ma}}, and 3.0 supports versions down to {{jb}} (3.0 and 2.0.1 correspondingly). So by the time you're on 4.0, you should have no 2.0 sstables either way, and this needs to be fixed for 3.0.

That said, we should make sure things are reversible: if we start upgrade sstable / commit log or flush processes, we better make sure we can finish it (or at least make a good effort to). ;;;","18/Nov/20 18:52;e.dimitrova;Talked to [~ifesdjeen] on Slack. 

Considering the scope left until GA and that this issue fixes behavior in case someone didn't follow the instructions to upgrade sstables before dropping compact storage, this patch will be put on hold for later(for sure great improvement that should go in) in favor of solid documentation and NEWS.txt. 

Anyone against moving it to 4.x for example and posting a patch to update NEWS.txt and docs for now?;;;","19/Nov/20 14:32;ifesdjeen;[~e.dimitrova] will we need a fix in 4.0, since 2.0 sstables can't be read by 4.0?

UPD: talked with [~e.dimitrova], and I was responding to a different question. I was speaking only about 2.0 upgrades, but am generally +1 to do the proposed ""gossip"" solution, assuming we're talking about mixed-mode 2.0/3.0 cluster or 3.0/4.0 cluster that can might contain 2.0 sstables.;;;","20/Nov/20 19:43;e.dimitrova;Thanks [~ifesdjeen].

I just opened CASSANDRA-16295 for the upgradesstables/scrub support.

And if no one pick up the current patch for the other problem in hand in this ticket, I can rebase and finish whatever is needed after Thanksgiving.;;;","01/Dec/20 23:05;e.dimitrova;Patch rebased [here|https://github.com/ekaterinadimitrova2/cassandra/pull/79].  CI run can be found [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/529/workflows/7101b314-681a-40b9-a266-6286c4f27152].

There was a collision between this patch  and CASSANDRA-16228 in [Tracker.java |#diff-9baecde49b36a386d6200cb163d482dd70a816019ba2b45f0ff25c3ca4eabf28L184]

To solve It I added a new flag [updatingSize|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:15897-3.0#diff-9baecde49b36a386d6200cb163d482dd70a816019ba2b45f0ff25c3ca4eabf28R209].

There are a few tests failing (same were failing before and after the rebase and they are not known failures)

The only failing unit test is testDropSSTables which I [changed|https://github.com/apache/cassandra/commit/dba4a86306bc13f1b421c500570deb3a3f06414f] a bit to show what is the current sequence of messages to have it in mind while debugging. (That's why it is green in CircleCI)

These are the other failures:

_repairUnreplicatedKStest - org.apache.cassandra.distributed.test.RepairOperationalTest -_ not sure about this timeout whether it is related; have to check

*EDIT:* _repairUnreplicatedKStest - org.apache.cassandra.distributed.test.RepairOperationalTest -_ I ran it locally a few times and it passes successfully so I think it was circle ci timeout. Also, it doesn't seem related

jvm upgrade test [CompactStorage2to3UpgradeTest|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/529/workflows/7101b314-681a-40b9-a266-6286c4f27152/jobs/2942]

Also 1 dtest [TestGossipingPropertyFileSnitch|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/529/workflows/7101b314-681a-40b9-a266-6286c4f27152/jobs/2940]

I will try to do a more detailed review and try to work out the failures but I guess also 2 committers for review will be needed. Also,  I haven't dealt with our Gossip implementation up to now.  

 ;;;","11/Dec/20 16:22;e.dimitrova;First pass of review done. I don't see any issues with the patch itself, fixed formatting at a few places. Latest state of the branch [here|https://github.com/ekaterinadimitrova2/cassandra/pull/79]

The failing tests are test issues:
 _TestGossipingPropertyFileSnitch_ - it required [update|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/927a07d0cc9bfcc183d3a0e7c8959cd0c6c88c6a] of the VersionedValue in the assertions as the patch introduces a [new application state update|https://github.com/pcmanus/cassandra/commit/2dd0d1cdbd2c0869bfb8e22be34e0d67a79a8742#diff-9bf2c26bc294ef9085e16bf287490223665eaa2eb8ec24bcf5bd8653c713644bR820].
 _testDropSSTables_ - it turned out the previous commit I added is actually the [fix|https://github.com/ekaterinadimitrova2/cassandra/pull/79/commits/dba4a86306bc13f1b421c500570deb3a3f06414f]. As part of this patch a notification for added/loaded SSTables on start was added. This was done in order to accommodate this change and ensure no repetitive actions [here|https://github.com/pcmanus/cassandra/commit/2dd0d1cdbd2c0869bfb8e22be34e0d67a79a8742#diff-57723368d79933b3d7fcc00ce9d3b98335391901c88cf09176d063fd6eb10ba3R249].

_CompactStorage2to3UpgradeTest_ - -I am a bit puzzled about this one. It fails by complaining that the nodes do not have this patch. At the same time, I used ccm locally to run through the test scenario and everything works smoothly so I tend to believe I miss something from the nature of the jvm-upgrade tests-  Tests [fixed|https://github.com/ekaterinadimitrova2/cassandra/pull/79/commits/307ba7f6cf00364280b4a8155444f96689c9d5c2], a bit of time is needed after the upgrade for the nodes to settle down

-While I am fixing the last mentioned test,- I think this patch is ready for second review. [~ifesdjeen], [~aleksey], [~marcuse] is anyone of you available? Or if [~slebresne] can confirm my corrections/observations?

[CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/535/workflows/62835302-6aeb-4a47-b009-c706ced77869]
 [3.0 patch|https://github.com/ekaterinadimitrova2/cassandra/pull/79]
 [DTests patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/927a07d0cc9bfcc183d3a0e7c8959cd0c6c88c6a]

 

*NOTE:*  test_prefer_local_reconnect_on_listen_address failed in circleci as I forgot to change the dtest repo but the test succeeds locally with the proposed dtest patch

 ;;;","07/Feb/21 20:49;e.dimitrova;* 3.0 version reviewed(Thanks to [~blerer]!) and more or less ready (depends on [~brandon.williams] 's opinion as he agreed also to review it, thank you!)
 * It seems that upgradesstables works in 3.0 but not in 3.11 (lb SSTables are still presented after upgradesstables run), I corrected the version in CASSANDRA-16295
 * With this patch we ensure the lowest SSTables version to be past 3.0 but we don't guarantee that the SSTables will be upgraded to the last possible version for all 3.0 and 4.0 version C* nodes, which was the idea of CASSANDRA-16063 where we added the local check. This seems to me as a change of intention which I don't think it will be an issue as soon as:
 ** We guarantee the old pre-V3 SSTables are not presented anymore
 ** The minimal support for compact storage is removed with the next version
 * Since 4.0 cannot even read the lb SSTables, do we need a check at all when we drop compact storage or we would expect that there won't be already any that old SSTables on a cluster with 4.0 nodes? 

And last but not least, is this a 4.0 blocker? I started doubting it. Any opinion will be highly appreciated.;;;","08/Feb/21 21:05;brandon.williams;+1 on 3.0.

bq. Since 4.0 cannot even read the lb SSTables, do we need a check at all when we drop compact storage or we would expect that there won't be already any that old SSTables on a cluster with 4.0 nodes? 

After CASSANDRA-16063, shouldn't it refuse to start if there are old sstables?

As far as 4.0 blocker goes, I do feel that we need all upgrade procedures finalized, and compact storage  would be one of them.;;;","09/Feb/21 15:14;e.dimitrova;Thank you [~brandon.williams]

?? After CASSANDRA-16063, shouldn't it refuse to start if there are old sstables??

CASSANDRA-16063 - this is a refuse to start drop compact storage in case the sstables on the node we run it were not upgraded. It does not guarantee cluster-wise. That was differed to this ticket.;;;","03/Mar/21 02:12;e.dimitrova;I believe more or less we agreed on the patch on the V3.0 branch [here|https://github.com/ekaterinadimitrova2/cassandra/pull/79/files].

I propagated it to [3.11|https://github.com/ekaterinadimitrova2/cassandra/pull/87/files] and [4.0|https://github.com/ekaterinadimitrova2/cassandra/pull/88/files]. I tested locally successfully those patches. Because of the latest CI failures, I decided to wait running full CI a bit until the latest issues are resolved so we can see the situation better.

I believe there is only a need of one test of mixed cluster of nodes 3/4 with old 2.2 sstables on the v3 node and attempt to drop compact storage on 4.0, I will add a python dtest tomorrow. ;;;","04/Mar/21 14:29;e.dimitrova;While testing I found a small bug in the 4.0 patch, fixed [here | https://github.com/ekaterinadimitrova2/cassandra/commit/dcbff670cc3569aaa10befdafa4294968cf8c3c6]. 

I found out there is some problem when running on mixed cluster 3/3.11 and 4.0
WIP [tests | https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/3e82370ce827d6a2587a991f8d73fb40e6d8b6c7] showing the different use cases I was testing (no, I am not going to keep those test names, this is WIP). The tests marked with suffix ""fail"" are the problem ones.
If we have two nodes with old sstables on 3/3.11, upgrade the sstables on both nodes, and only one node upgrade to 4.0, then the DROP COMPACT STORAGE doesn't work, the request times out.
If we continue and upgrade also the second 3/3.11 node to 4.0 then DROP COMPACT STORAGE works. I need to investigate further today. If anyone has any ideas or was considering this issue in a way, please, let me know. ;;;","04/Mar/21 14:36;brandon.williams;I'm not sure what the problem was, but your fix of removing a padding state in ApplicationState is incorrect, paddings should never be removed or consumed.  It look like this has been done in a couple other places, I've created CASSANDRA-16484 to address these.;;;","04/Mar/21 14:46;e.dimitrova;Thanks [~brandon.williams], while in general you are right in this case the situation is different.

It is not really just a removal, during merge from the previous versions I had to substitute X4 with the SSTABLE_VERSIONS. If you compare the enums in 3.0/3.11 and 4.0 you can see it. 

 ;;;","04/Mar/21 14:50;brandon.williams;bq. I had to substitute X4 with the SSTABLE_VERSIONS.

This was unfortunately incorrect too, then.  I've written an explanation of the padding on CASSANDRA-16484.;;;","04/Mar/21 14:50;e.dimitrova;Actually, do you mean that [X1, X2, X3|https://github.com/ekaterinadimitrova2/cassandra/blob/dcbff670cc3569aaa10befdafa4294968cf8c3c6/src/java/org/apache/cassandra/gms/ApplicationState.java#L46] were consumed in a wrong way? (this was done in a different patch but we followed the same approach for the new SSTABLE_VERSIONS);;;","04/Mar/21 14:52;brandon.williams;Yes.;;;","04/Mar/21 17:20;e.dimitrova;Thanks [~brandon.williams], I will leave the current patch as is and leave to you to fix the 4.0 padding in CASSANDRA-16484. 
Also, the issue with the tests is not an issue, we can't execute ALTER table on a mixed cluster of 3 and 4 nodes. I guess I got confused after the timeout last night. 
I will revise the tests and run last CI for final +1. I see our CI is back to normal, the latest issues were fixed;;;","05/Mar/21 01:13;e.dimitrova;Patches:
 [3.0 |https://github.com/ekaterinadimitrova2/cassandra/pull/79/files] | [3.11 |https://github.com/ekaterinadimitrova2/cassandra/pull/87/files] | [trunk |https://github.com/ekaterinadimitrova2/cassandra/pull/88/files] | [DTests |https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/7/files]
 CI:
 [3.0 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/655/workflows/5c9281e0-ccb1-423e-939a-6f42fb201d00] | [3.11 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/657/workflows/570fcf4a-954d-4484-a2d6-3e8a0d296fdf] | [trunk |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/659/workflows/7e6669a1-a325-4a28-bbc2-02694fee148f]

The CI is still not fixed but at least unit tests and in-jvm look good.

The in-jvm upgrade tests finished successfully locally, I just can't update in CircleCI the jars, I think?;;;","05/Mar/21 14:40;blerer;+1;;;","05/Mar/21 15:31;e.dimitrova;Seems like MIDRES and config.yml  were missed to be updated as part of CASSANDRA-16474 so that is why after rebase the CI was still failing. As an intermediate solution I updated the docker image [here|https://github.com/ekaterinadimitrova2/cassandra/commit/20b8ec3763fcbfb8c33d9fbc1ff78d83162c92d2] and reran the CI [here |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/660/workflows/a703312e-e9fb-4a9e-8cd6-d33e6b95d274]. I don't think the failures are related to this patch.

 

I will open another ticket to update CircleCI config;;;","08/Mar/21 14:52;e.dimitrova;I squashed and pushed a full CI run in Jenkins over the weekend but there are a few test failures that I should check now. They were not failing locally. I am going to work on them now and hopefully this could be committed until the end of the day if [~brandon.williams] also approves the rest of the branches and the python dtests.;;;","08/Mar/21 17:16;e.dimitrova;Rerunning python upgrade tests locally is slow. DTests small patch coming soon, definitely just a test issue due to timing issues;;;","08/Mar/21 19:56;brandon.williams;It looks like you will need to rebase the ApplicationState changes after CASSANDRA-16184, since I don't think this will merge cleanly there.;;;","09/Mar/21 02:38;e.dimitrova;I think you meant CASSANDRA-16484, I just rebased and fixed that conflict.

Also, I found a small bug in 4.0 patch and fixed the check [here|https://github.com/ekaterinadimitrova2/cassandra/commit/b4aa7beb9e4f513887c3af15c66acd297b7e4623#diff-3434848170f154654ec22746b39b1fc1ce747cf416dd9bdd10e14386983004f8R458-R459], testing it in the DTests [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/099fffb72d432d0ac8fb2ed27a7fbfa0a56405d3#diff-a0ae22c334be9294ded78f79e39af70cead9ba41c023093d6254ee3dc41cb6ebR143-R147]

Jenkins runs:
[3.0|https://ci-cassandra.apache.org/job/Cassandra-devbranch/471/] | [3.11|https://ci-cassandra.apache.org/job/Cassandra-devbranch/472/] | [trunk|https://ci-cassandra.apache.org/job/Cassandra-devbranch/474/]

On commit I should redirect the DTests [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/099fffb72d432d0ac8fb2ed27a7fbfa0a56405d3#diff-a0ae22c334be9294ded78f79e39af70cead9ba41c023093d6254ee3dc41cb6ebR13-R15] to the Apache repo and revert the changes in the CircleCI config file.
The order of commits should be - first the python DTests and then the Cassandra patches.;;;","09/Mar/21 16:05;e.dimitrova;Jenkins looks fine to me.

On 3.0 the only new failures are:

 - _cql3.ViewLongTest_ but it seems resource issue, unrelated and it passed locally.

 - _upgrade_through_versions_test.TestUpgrade_current_2_1_x_To_indev_3_0_x_ seems unrelated too but I am rerunning those locally to double check what is going on. 

No new failures in 3.11 and 4.0

[~brandon.williams] if you don't have any concerns, I think I am ready to commit today as soon as _upgrade_through_versions_test.TestUpgrade_current_2_1_x_To_indev_3_0_x_ doesn't surprise me, still running, those are slow

 ;;;","10/Mar/21 21:08;brandon.williams;+1, though I'll note the addition of getApplicationState to the Gossiper has been handled by a subsequent call from getEndpointState historically, but I'm not against the addition of the method here since there is no need to distinguish between not knowing the endpoint and it not having a given state.  In fact, I hope we use it more going forward.;;;","11/Mar/21 03:06;e.dimitrova;DTests committed [here|https://github.com/apache/cassandra-dtest/commit/700f712c0ee87ea90c960e7fe92343bff7b2ba23].

3.0 committed [here|https://github.com/apache/cassandra/commit/efde6a76f9807eaa0af80b5e85aa350ac8709a81].

3.11 committed [here|https://github.com/apache/cassandra/commit/b6540009365b1986950510ecc28ee5740c64412e].

4.0 committed [here|https://github.com/apache/cassandra/commit/c7432e98a381c16cb63692e727c35e2909d7200a].

In 3.0 and 3.11 the docker image was not updated in config.yml after the latest changes, only LOWRES was updated so I used the opportunity to correct that.

Thank you [~slebresne] for the patch.

Thank you for the reviews and help [~blerer] and [~brandon.williams];;;","11/Mar/21 19:37;e.dimitrova;One of the in-jvm tests failed, now all compact storage related in-JVM upgrade tests require GOSSIP in order to take a decision whether DROP COMPACT STORAGE can or cannot be executed. 

I ninja-fixed it [here|https://github.com/apache/cassandra/commit/07babf3cb10bc11efad48cc7865c7425d7c27ce4]
 The successful CI run can be found [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/694/workflows/0b29dcb6-2cb4-48e0-b119-5e0ab1b8d74f/jobs/3814]

I apologize for the inconvenience caused and thanks to [~mck] and [~blerer] for the pings. Appreciate it;;;",,,,,,
NullPointerException in SELECT JSON statement when a UUID field contains an empty string,CASSANDRA-15896,13313018,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,Ostico,Ostico,23/Jun/20 10:25,03/Jan/21 17:03,13/Jul/23 08:39,22/Jul/20 18:03,3.0.22,3.11.8,4.0,4.0-beta2,,CQL/Interpreter,CQL/Semantics,,,0,,,,"It seems that Cassandra accept empty strings """" ( FROM JSON string ) for UUID fields but crash when asking for JSON serialization of those fields.

 

Cassandra version 3.6.11.6 running in docker from official Dockerhub image.

Java driver:
{code:java}
<!-- https://mvnrepository.com/artifact/com.datastax.oss/java-driver-core -->
<dependency>
    <groupId>com.datastax.oss</groupId>
    <artifactId>java-driver-core</artifactId>
    <version>4.7.0</version>
</dependency>
{code}
The attached code is to allow bug reproducibility:
{code:java}
package com.foo.bar;
import com.datastax.oss.driver.api.core.CqlSession;
import com.datastax.oss.driver.api.core.CqlSessionBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.ResultSet;
import com.datastax.oss.driver.api.core.cql.Row;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.net.InetSocketAddress;
import java.net.URI;
import java.util.*;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;

/**
 * @author Domenico Lupinetti <ostico@gmail.com> - 23/06/2020
 */
public class NullPointerExceptionTest {

    protected String uuid;
    protected CqlSession cqlSession;

    @Before
    public void setUp() throws Exception {

        URI node = new URI( ""tcp://localhost:9042"" );
        final CqlSessionBuilder builder = CqlSession.builder();

        cqlSession = builder.addContactPoint( new InetSocketAddress(
                node.getHost(),
                node.getPort()
        ) ).withLocalDatacenter( ""datacenter1"" ).build();

        cqlSession.execute( ""CREATE KEYSPACE IF NOT EXISTS test_suite WITH replication = {'class':'SimpleStrategy','replication_factor':1};"" );

        String sb = ""CREATE TABLE IF NOT EXISTS test_suite.test ( id uuid PRIMARY KEY, another_id uuid, subject text );"";

        cqlSession.execute( sb );
        PreparedStatement stm = cqlSession.prepare( ""INSERT INTO test_suite.test JSON :payload"" );

        this.uuid = UUID.randomUUID().toString();

        HashMap<String, String> payload = new HashMap<>();
        payload.put( ""id"", this.uuid );

        // ******* This exception do not happens if the field is set as NULL
        payload.put( ""another_id"", """" );  //<------ EMPTY STRING AS UUID
        payload.put( ""subject"", ""Alighieri, Dante. Divina Commedia"" );

        ObjectMapper objM = new ObjectMapper();
        cqlSession.execute(
                stm.bind().setString( ""payload"", objM.writeValueAsString( payload ) )
        );  //<------ serialize as JSON

    }

    @After
    public void tearDown() throws Exception {
        cqlSession.execute( ""DROP TABLE IF EXISTS test_suite.test;"" );
        cqlSession.execute( ""DROP KEYSPACE test_suite;"" );
        cqlSession.close();
    }

    @Test
    public void testNullPointer() {

        PreparedStatement stmt       = cqlSession.prepare( ""SELECT JSON id, another_id FROM test_suite.test where id = :id;"" );
        ResultSet         resultSet  = cqlSession.execute( stmt.bind().setUuid( ""id"", UUID.fromString( this.uuid ) ) ); // <------ EXCEPTION
        Row               r          = resultSet.one();

        assertNotNull( r );
        assertNotNull( r.getString( ""[json]"" ) );
        assertFalse( Objects.requireNonNull( r.getString( ""[json]"" ) ).isEmpty() );

    }

}


{code}
Client stack Trace:
{code:java}
com.datastax.oss.driver.api.core.servererrors.ServerError: java.lang.NullPointerExceptioncom.datastax.oss.driver.api.core.servererrors.ServerError: java.lang.NullPointerException
 at com.datastax.oss.driver.api.core.servererrors.ServerError.copy(ServerError.java:54) at com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures.getUninterruptibly(CompletableFutures.java:149) at com.datastax.oss.driver.internal.core.cql.CqlRequestSyncProcessor.process(CqlRequestSyncProcessor.java:53) at com.datastax.oss.driver.internal.core.cql.CqlRequestSyncProcessor.process(CqlRequestSyncProcessor.java:30) at com.datastax.oss.driver.internal.core.session.DefaultSession.execute(DefaultSession.java:230) at com.datastax.oss.driver.api.core.cql.SyncCqlSession.execute(SyncCqlSession.java:53) at com.foo.bar.NullPointerExceptionTest.testNullPointer(NullPointerExceptionTest.java:74) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306) at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63) at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329) at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293) at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306) at org.junit.runners.ParentRunner.run(ParentRunner.java:413) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
{code}
Cassandra stack Trace:

 
{code:java}
ERROR [Native-Transport-Requests-1] 2020-06-23 09:57:48,074 ErrorMessage.java:384 - Unexpected exception during requestERROR [Native-Transport-Requests-1] 2020-06-23 09:57:48,074 ErrorMessage.java:384 - Unexpected exception during requestjava.lang.NullPointerException: null at org.apache.cassandra.db.marshal.AbstractType.toJSONString(AbstractType.java:156) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.selection.Selection.rowToJson(Selection.java:343) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder.getOutputRow(Selection.java:494) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder.build(Selection.java:477) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.statements.SelectStatement.process(SelectStatement.java:794) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.statements.SelectStatement.processResults(SelectStatement.java:438) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:416) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:289) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:117) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:225) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:532) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:509) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:146) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.transport.Message$Dispatcher.processRequest(Message.java:686) [apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.transport.Message$Dispatcher.lambda$channelRead0$0(Message.java:592) [apache-cassandra-3.11.6.jar:3.11.6] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_252] at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.6.jar:3.11.6] at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) ~[apache-cassandra-3.11.6.jar:3.11.6] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_252]
{code}",,bereng,brandon.williams,dcapwell,jeromatron,Ostico,,,,,,,"bereng opened a new pull request #687:
URL: https://github.com/apache/cassandra/pull/687


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 10:16;githubbot;600","bereng closed pull request #687:
URL: https://github.com/apache/cassandra/pull/687


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 10:17;githubbot;600","bereng opened a new pull request #688:
URL: https://github.com/apache/cassandra/pull/688


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 10:19;githubbot;600","bereng commented on pull request #688:
URL: https://github.com/apache/cassandra/pull/688#issuecomment-662383026


   [CI](https://app.circleci.com/pipelines/github/bereng/cassandra/74/workflows/04606ad8-5055-4362-a339-e2f66bdb0bc5) was clean


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 10:45;githubbot;600","bereng commented on pull request #688:
URL: https://github.com/apache/cassandra/pull/688#issuecomment-662502389


   [CI](https://app.circleci.com/pipelines/github/bereng/cassandra?branch=CASSANDRA-15896-3.0) passes clean


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 14:56;githubbot;600","bereng closed pull request #688:
URL: https://github.com/apache/cassandra/pull/688


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:45;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,CASSANDRA-14200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Clients,JDBC,,Thu Jul 23 09:01:27 UTC 2020,,,,,,,All,,,,,,"0|z0g4bk:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/64fa75dd92f2b555ee1650b0c140f911c3b32b97,,,,,,,,,See PR,,,,,"22/Jul/20 10:45;bereng;Submitting this for the initial patch review. If good I'll create the rest of PRs.;;;","22/Jul/20 10:46;bereng;Thanks alot [~Ostico] for the detailed error description and repro steps :-);;;","22/Jul/20 14:15;bereng;Folding in CASSANDRA-14200 as well;;;","22/Jul/20 15:44;brandon.williams;3.0 looks good.;;;","22/Jul/20 18:03;brandon.williams;Committed, thanks;;;","22/Jul/20 19:52;dcapwell;FYI this broke the build for 3.11, we no longer compile.

{code}
$ ant build-test
...
build-test:
    [javac] Compiling 2 source files to /Users/davidcapwell/src/github/apache/cassandra-3.11/build/test/classes
    [javac] /Users/davidcapwell/src/github/apache/cassandra-3.11/test/unit/org/apache/cassandra/cql3/EmptyValuesTest.java:63: error: cannot find symbol
    [javac]         ResultSet resultNet = executeNet(Server.CURRENT_VERSION, ""SELECT * FROM %s"");
    [javac]                                                ^
    [javac]   symbol:   variable CURRENT_VERSION
    [javac]   location: class Server
    [javac] /Users/davidcapwell/src/github/apache/cassandra-3.11/test/unit/org/apache/cassandra/cql3/EmptyValuesTest.java:68: error: cannot find symbol
    [javac]         ResultSet jsonNet = executeNet(Server.CURRENT_VERSION, ""SELECT JSON * FROM %s"");
    [javac]                                              ^
    [javac]   symbol:   variable CURRENT_VERSION
    [javac]   location: class Server
    [javac] /Users/davidcapwell/src/github/apache/cassandra-3.11/test/unit/org/apache/cassandra/db/marshal/UUIDTypeTest.java:50: error: cannot find symbol
    [javac]         String res = uuidType.toJSONString(uuidType.fromJSONObject("""").bindAndGet(null), Server.CURRENT_VERSION);
    [javac]                                                                                                ^
    [javac]   symbol:   variable CURRENT_VERSION
    [javac]   location: class Server
    [javac] 3 errors

BUILD FAILED
/Users/dcapwell/src/github/apache/cassandra-3.11/build.xml:1230: Compile failed; see the compiler error output for details.
{code};;;","22/Jul/20 20:01;brandon.williams;Whoops, fixed now.;;;","23/Jul/20 09:01;bereng;meh, probably GH being silly with forward merges again on {{.patch}}. If you use {{.diff}} you should get what you need next time.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAVA 11: test_short_read - consistency_test.TestConsistency,CASSANDRA-15893,13312951,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,23/Jun/20 02:58,21/Dec/20 09:32,13/Jul/23 08:39,09/Jul/20 14:32,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"JAVA 11: test_short_read - consistency_test.TestConsistency

Failing locally and in CircleCI:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/222/workflows/11202c7e-6c94-4d4e-bbbf-9e2fa9791ad0/jobs/1337",,bereng,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Jul/20 00:21;e.dimitrova;test_short_read.txt;https://issues.apache.org/jira/secure/attachment/13007335/test_short_read.txt",,,,,,,,,,,,,,1.0,e.dimitrova,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 09 14:32:49 UTC 2020,,,,,,,All,,,,,,"0|z0g3wo:",9223372036854775807,,,,bereng,brandon.williams,e.dimitrova,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra-dtest/commit/16d4f1cfc84a0da95149897f2ac5e229a738dbb6,,,,,,,,,"Reproduced locally on Mac
[Patch | https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/02937e0d058154efd121f6a61817be7b2d1841cf]",,,,,"26/Jun/20 08:36;bereng;Passes locally for me as well as the other ones you raised. Under j11:
{noformat}
pytest --cassandra-dir=/tmp/test consistency_test.py::TestConsistency::test_short_read
=============================================================================================================================== test session starts ===============================================================================================================================
platform linux -- Python 3.6.9, pytest-3.6.4, py-1.8.1, pluggy-0.7.1
rootdir: /home/bereng/work/repos/bdpWS/dtests, inifile: pytest.ini
plugins: timeout-1.3.4, flaky-3.6.1
timeout: 900.0s
timeout method: signal
timeout func_only: False
collected 1 item                                                                                                                                                                                                                                                                  consistency_test.py .                                                                                                                                                                                                                                                       [100%]
===Flaky Test Report===test_short_read passed 1 out of the required 1 times. Success!===End Flaky Test Report============================================================================================================================== 1 passed in 710.55 seconds ============================================================================================================================ {noformat};;;","29/Jun/20 09:47;bereng;Cannot repro, suggesting to close until it can be repro'ed;;;","05/Jul/20 00:34;e.dimitrova;Locally I failed it also in java 8. Also, I checked it with older trunk versions from April and it was failing. 
So I wouldn't close it. The thing is that it was not failing up until recently neither in Jenkins, nor in CircleCI (but probably no one had the need to run it locally :-( ). Now It fails in CircleCI. So whatever is the issue, it got bigger. I will try to look at it more next week;;;","06/Jul/20 07:57;bereng;Thx for the feedback [~e.dimitrova] . I am assigning it to you bc I can't repro locally :(;;;","06/Jul/20 23:21;e.dimitrova;Thank you for your time and work [~Bereng], I know how frustrating this could be but not being able to reproduce easily test failures happens sometimes. 

I am already looking into it, I am moving the ticket back to work in progress. Thank you one more time!;;;","08/Jul/20 23:57;e.dimitrova;This test was put in a loop to be run 10 times. This was done in order to be able to catch an issue which was hard to be reproduced. The loop had the goal to help us to ensure that the applied patch is enough to fix the problem. This was done 5 years ago as part of CASSANDRA-9460 . I put some additional logging and I observed that the test fails during its 9th repetition as the test run duration becomes more than the time threshold of 900s.

Jenkins shows the test is stable so I removed the loop. Just looped it 10 times locally successfully. I believe this is enough to solve the problem. Attached log of the local run 

[Patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/02937e0d058154efd121f6a61817be7b2d1841cf]

[~Bereng], [~blerer], can anyone of you review the solution, please?

Thanks in advance!;;;","09/Jul/20 08:01;bereng;[~e.dimitrova] I went over the original ticket and it seems there is already a consistency test checking for the NULL. Despite that the original authors considered looping a good idea still to surface any races hiding in there. Instead of removing the looping completely could we just reduce it to 5 loops i.e.? wdyt?;;;","09/Jul/20 13:07;e.dimitrova;[~Bereng], I can make it 5 but I think it is a left-over from 5 years ago. The thing is the author wasn't able to reproduce it and she left the loop to ensure the community can faster see any regressions in case this needs additional fix. 5 years later I don't find neither a ticket, nor an evidence in any CI that the issue reappeared so to me it looks like just an unneeded leftover. Let me know if you still want the 5 times loop. It doesn't hurt to have It but I don't see a reason anymore, honestly.;;;","09/Jul/20 13:44;bereng;Kill it then. It will come up eventually if it has to and git history will be there. +1 from me.;;;","09/Jul/20 14:01;e.dimitrova;[~brandon.williams] do you mind to commit if you don't see any issue, please?;;;","09/Jul/20 14:32;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAVA 8/11: test_resumable_rebuild - rebuild_test.TestRebuild,CASSANDRA-15892,13312950,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,gianluca,e.dimitrova,e.dimitrova,23/Jun/20 02:55,26/Mar/21 08:43,13/Jul/23 08:39,26/Mar/21 08:43,4.0,4.0-rc1,,,,Test/dtest/python,,,,0,,,,"JAVA 11:

test_resumable_rebuild - rebuild_test.TestRebuild

Fails locally and in  

[CircleCI | [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/222/workflows/11202c7e-6c94-4d4e-bbbf-9e2fa9791ad0/jobs/1338]]",,aholmber,bereng,dcapwell,e.dimitrova,gianluca,jasonstack,maedhroz,mck,,,,"grighetto opened a new pull request #933:
URL: https://github.com/apache/cassandra/pull/933


   Handle `StreamSession#onChannelClose` in a different thread to avoid deadlocking when the session is closed due to a failure while a network flush is in progress.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/21 23:40;githubbot;600","grighetto closed pull request #933:
URL: https://github.com/apache/cassandra/pull/933


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/21 23:58;githubbot;600","grighetto opened a new pull request #130:
URL: https://github.com/apache/cassandra-dtest/pull/130


   Once https://github.com/grighetto/cassandra/pull/3 is applied to C*, the referred test in this PR shouldn't be flaky anymore.
   Also, ignored an additional log message that may come up while the channel is being closed.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Mar/21 06:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/21 07:36;gianluca;CASSANDRA-15892-07babf3c-node2-deadlock-thread-dump.txt;https://issues.apache.org/jira/secure/attachment/13022752/CASSANDRA-15892-07babf3c-node2-deadlock-thread-dump.txt","23/Mar/21 18:37;mck;Screenshot 2021-03-23 at 19.37.35.png;https://issues.apache.org/jira/secure/attachment/13022857/Screenshot+2021-03-23+at+19.37.35.png","23/Mar/21 18:53;mck;Screenshot 2021-03-23 at 19.53.51.png;https://issues.apache.org/jira/secure/attachment/13022858/Screenshot+2021-03-23+at+19.53.51.png",,,,,,,,,,,,3.0,gianluca,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Mar 26 08:40:33 UTC 2021,,,,,,,All,,,,,,"0|z0g3wg:",9223372036854775807,,,,e.dimitrova,jasonstack,mck,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra/commit/dc5337bf956ae26447cb8d1ca897512c969f5172 https://github.com/apache/cassandra-dtest/commit/a4186ad83ec1c42c8b0086865f6da80408f9ece4,,,,,,,,,"Reproduction steps added to the comments.

Patches available: 
https://github.com/grighetto/cassandra/pull/3
https://github.com/apache/cassandra-dtest/pull/130",,,,,"26/Jun/20 08:17;bereng;[~e.dimitrova] This test doesn't seem to fail on the latest ci-cassandra runs, also I did run it locally both under j8 and j11 and it passes.

{noformat}
(dtests) bereng@dxpc:~/work/repos/bdpWS/dtests$ pytest --cassandra-dir=/tmp/test rebuild_test.py::TestRebuild::test_resumable_rebuild
=============================================================================================================================== test session starts ===============================================================================================================================
platform linux -- Python 3.6.9, pytest-3.6.4, py-1.8.1, pluggy-0.7.1
rootdir: /home/bereng/work/repos/bdpWS/dtests, inifile: pytest.ini
plugins: timeout-1.3.4, flaky-3.6.1
timeout: 900.0s
timeout method: signal
timeout func_only: False
collected 1 item                                                                                                                                                                                                                                                                  

rebuild_test.py .                                                                                                                                                                                                                                                           [100%]
===Flaky Test Report===

test_resumable_rebuild passed 1 out of the required 1 times. Success!

===End Flaky Test Report===

============================================================================================================================ 1 passed in 70.18 seconds ============================================================================================================================
(dtests) bereng@dxpc:~/work/repos/bdpWS/dtests$ java -version
openjdk version ""11.0.7"" 2020-04-14
OpenJDK Runtime Environment (build 11.0.7+10-post-Ubuntu-2ubuntu218.04)
OpenJDK 64-Bit Server VM (build 11.0.7+10-post-Ubuntu-2ubuntu218.04, mixed mode, sharing)

{noformat}

Can you confirm this is the case for you as well? maybe sthg got fixed in the last few days;;;","29/Jun/20 09:49;bereng;Impossible to repro. Suggestion to close until we can.;;;","01/Jul/20 12:00;gianluca;I can reproduce this locally, assigning to myself for further investigation.;;;","01/Jul/20 12:31;bereng;[~gianluca] did you do anything special to manage to repro?;;;","01/Jul/20 13:34;gianluca;[~Bereng] No, it fails right away.;;;","01/Jul/20 13:37;e.dimitrova;Sometimes some are reproduced on the Mac, sometimes only in the ubuntu vm...

They do not always fail for everyone :( Happened already to me a couple of times to play around until I manage to reproduce different failures.

 

Thanks [~gianluca] and [~Bereng] . I will try to look today the other two, at least to ensure whether they are software defects or test failures.

 

 ;;;","01/Jul/20 15:30;bereng;Ah you see... OSS C* should run all tests in my laptop then all things would be great :);;;","23/Sep/20 20:27;maedhroz;Saw this today in https://app.circleci.com/pipelines/github/maedhroz/cassandra/120/workflows/03a81457-1d8a-47a2-a169-779a346053dc/jobs/653;;;","06/Oct/20 20:41;dcapwell;saw this today https://app.circleci.com/pipelines/github/dcapwell/cassandra/622/workflows/adcd463c-156a-43c7-a9bc-7f3e4938dbe8/jobs/3514;;;","21/Jan/21 23:32;e.dimitrova;[~gianluca], I was wondering whether you are still working on this one?

Also, I haven't actually seen this one failing lately in CircleCI? [~Bereng], have you seen it by chance?

 

Maybe [~gianluca] will surprise us in a nice way by saying he can't reproduce it on the latest trunk? :);;;","22/Jan/21 01:45;gianluca;[~e.dimitrova] I did some initial investigation to narrow the problem down, but I got sidetracked with some QA work on k8s and couldn't come up with a patch for this yet. But I just started looking into it again.

So, I just rebased with latest trunk and I can still reproduce it locally. I think it just doesn't fail more often on CI because the test has a @flaky annotation, so it gives another chance for the test to pass.
The behavior I'm seeing is that one of the nodes keeps waiting for a message that never arrives and it will simply sit idle for as long as I let it (I think in CI it times out and reruns).;;;","22/Jan/21 01:54;e.dimitrova;[~gianluca] thank you for the quick response and looking into it!

That is an important point, I didn't know it was already marked @flaky. Then I can check tomorrow who and why added this and whether this means we can leave it for now. It's good to know the history. Thanks again;;;","22/Jan/21 02:02;gianluca;I believe it was added here https://github.com/apache/cassandra-dtest/commit/49b2dda4e6643d2b18376d504b5fea4c0b3354a7;;;","22/Jan/21 17:36;e.dimitrova;Thanks [~gianluca], I checked that ticket and it looks like the only reason to add @flaky as part of CASSANDRA-14134 was to prevent from distractions while working on the pytest migration. So it looks like the ticket and the issue is legit

On the other hand, maybe(I haven't tested it yet) the rest of us might be able to reproduce the problem if the annotation is removed. ;;;","22/Mar/21 07:09;gianluca;I did some more investigation recently and got to the bottom of this issue and this is actually a runtime problem, not simply a flaky test. I have a patch available, but I'll try to break it down below in a way that makes it easier to understand what's going on:

*Dtest*:
 - The dtest is designed to initially write data to only 2 nodes, then a third node is started and _nodetool rebuild_ is invoked, so the sstables start to be streamed to node 3.
 - The goal of the test is to make sure the rebuild process is able to continue later, in case the first attempt fails for whatever reason.
 - To simulate a failure, byteman is used on node 3 to throw an exception (only once) when it receives a message from node 2.
 - That will make node 2 receive a Stream Failed message back. If that message is processed and the event-loop thread tries to close the network channel while the writer thread is Parked waiting for the stream to complete, there will be a deadlock.
 - The second time _nodetool rebuild_ command is invoked by the dtest, node 2 will be in deadlock already, so the test will remain on-hold indefinitely (eventually time out on Jenkins).

*Reproduction steps*:

In your IDE, set a couple of breakpoints at the following lines, then attach the debugger to the process of node 2 and make sure the first method below (_StreamSession#closeSession_) is executed before the line of the second breakpoint.

[https://github.com/apache/cassandra/blob/4d49308a3fbc354850126a5ec128b11a3aca4007/src/java/org/apache/cassandra/streaming/StreamSession.java#L485]

[https://github.com/apache/cassandra/blob/4d49308a3fbc354850126a5ec128b11a3aca4007/src/java/org/apache/cassandra/net/AsyncStreamingOutputPlus.java#L91]

*Patch*:

The patch simply handles the channel's _closeFuture_ callback asynchronously, that allows for the channel to be fully closed and then the [error handler|https://github.com/apache/cassandra/blob/4d49308a3fbc354850126a5ec128b11a3aca4007/src/java/org/apache/cassandra/net/AsyncChannelOutputPlus.java#L100] in _AsyncChannelOutputPlus_ is executed to clean things up and Unpark the thread, so no deadlock occurs.

C* patch: [https://github.com/grighetto/cassandra/pull/3]
 Dtest patch: [https://github.com/apache/cassandra-dtest/pull/130] (remove @flaky annotation and add ignore-log pattern)

*CircleCI Results*:

JVM 11 Dtests: [https://app.circleci.com/pipelines/github/grighetto/cassandra/32/workflows/77ef945f-8cf9-4c8b-84c6-13bc48078275/jobs/198]
 JVM 8 Dtests: [https://app.circleci.com/pipelines/github/grighetto/cassandra/32/workflows/dfc132e9-e4c4-4ea5-bc8e-d56e73679bcf/jobs/189];;;","22/Mar/21 07:10;gianluca;[~e.dimitrova] Would you be able to try the reproduction steps I shared above and review the patch?;;;","23/Mar/21 18:52;mck;Looks related to Zhao and Benjamin's [commit|https://github.com/grighetto/cassandra/commit/9f6fcc340d89eecc000765f6ab93e862f53a02d9] around closing connections in Apr 2020. 

Failures do exist on ci-cassandra.a.o too, though not many…
- [Cassandra-trunk #338|https://nightlies.apache.org/cassandra/ci-cassandra.apache.org/job/Cassandra-trunk/338/] \\  !Screenshot 2021-03-23 at 19.37.35.png|width=300! 
- [Cassandra-trunk #105|https://nightlies.apache.org/cassandra/ci-cassandra.apache.org/job/Cassandra-trunk/105/] \\  !Screenshot 2021-03-23 at 19.53.51.png|width=300! ;;;","24/Mar/21 08:22;jasonstack;bq. That will make node 2 receive a Stream Failed message back. If that message is processed and the event-loop thread tries to close the network channel while the writer thread is Parked waiting for the stream to complete, there will be a deadlock.

[~gianluca] thanks for the fix. can you explain a bit more here? node2 receives {{SESSION_FAILED}} and then closes its channels. how does {{""writer thread""}} get blocked?  I can't think of why {{messageSender.close()}} causes  blocking..;;;","25/Mar/21 06:32;gianluca;[~jasonstack] I attached a thread dump to this ticket which should make things more clear, but this is the sequence of events:

Node 2 runs {{AsyncChannelOutputPlus#flush -> AsyncStreamingOutputPlus#doFlush}} which contains the following

{code}
        ChannelPromise promise = beginFlush(byteCount, 0, Integer.MAX_VALUE);
        channel.writeAndFlush(GlobalBufferPoolAllocator.wrap(flush), promise);
{code}
        
That promise is responsible for unparking the thread in a later moment (it's supposed to be called when the flush either completes or fails).
Still in {{AsyncChannelOutputPlus#flush}}, it calls {{waitUntilFlushed(0, 0)}} and at this point the thread is parked.

Now it receives a SESSION_FAILED message, so it will try to close the channel, but the problem is that the channel has a close listener that relies on a synchronized method, {{StreamSession#onChannelClose}}, and since that thread is parked, it blocks. In other words, netty can't properly close the channel and the flush promise above is never called, so the thread is never unparked, hence the deadlock.;;;","25/Mar/21 07:34;jasonstack;thanks for the explanation. the thread dump really helps. The fix looks good to me. Alternatively, we can remove the {{synchronized}} from {{StreamSession#onChannelClose}} as it doesn't have to be synchronized.;;;","26/Mar/21 07:19;gianluca;Thanks for the review, [~jasonstack].
Here's a new patch simply with the {{synchronized}} modifier removed: https://github.com/grighetto/cassandra/pull/4

*Patches*
C* patch: https://github.com/grighetto/cassandra/pull/4
 Dtest patch: https://github.com/apache/cassandra-dtest/pull/130 (removes @flaky annotation and adds ignore-log pattern)

*Circle CI Results*
Java 11: https://app.circleci.com/pipelines/github/grighetto/cassandra/36/workflows/ae5ab000-e548-4548-a728-bfc525da7b20
Java 8: https://app.circleci.com/pipelines/github/grighetto/cassandra/36/workflows/beb0f334-8adf-49a4-b612-51f68e4dc462;;;","26/Mar/21 08:33;mck;+1;;;","26/Mar/21 08:40;mck;Committed [dc5337bf956ae26447cb8d1ca897512c969f5172|https://github.com/apache/cassandra/commit/dc5337bf956ae26447cb8d1ca897512c969f5172] and [a4186ad83ec1c42c8b0086865f6da80408f9ece4|https://github.com/apache/cassandra-dtest/commit/a4186ad83ec1c42c8b0086865f6da80408f9ece4].;;;",,,,,,,,,,,,,,,,,,,,,,,,
Debian package fails to download on Arm-based hosts,CASSANDRA-15889,13312876,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mattsplat,mattsplat,22/Jun/20 17:17,20/Jan/21 22:29,13/Jul/23 08:39,20/Jan/21 21:16,2.2.20,3.0.24,3.11.10,4.0,4.0-rc1,Build,,,,0,ARM,debian,,"Following the first three steps of the [Debian install process|https://cassandra.apache.org/download/], after an apt-get update you'll see this line:
{code:bash}
$ sudo apt-get update
...
N: Skipping acquire of configured file 'main/binary-arm64/Packages' as repository 'https://downloads.apache.org/cassandra/debian 311x InRelease' doesn't support architecture 'arm64'
{code}

Checking the [Debian repo|https://dl.bintray.com/apache/cassandra/dists/311x/main/] confirms there is no aarch64 variant available.

Should you then attempt to install Cassandra:
{code:bash}
$ sudo apt-get install cassandra
Reading package lists... Done
Building dependency tree
Reading state information... Done
Package cassandra is not available, but is referred to by another package.
This may mean that the package is missing, has been obsoleted, or
is only available from another source

E: Package 'cassandra' has no installation candidate
{code}

Note that there is a workaround available: if you specify ""amd64"" as the arch for the source, it downloads and runs on Arm without issue:
{code:bash}
echo ""deb [arch=amd64] https://downloads.apache.org/cassandra/debian 311x main"" | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list
{code}

The Redhat RPM contains a ""noarch"" arch type, so it will download on any host. (Cassandra does not use separate binaries/releases for different architectures, so this seems to be the correct approach, but adding an aarch64 variant would also suffice.)",,brandon.williams,e.dimitrova,ganeshraju,mattsplat,mck,RenhaiZhao,v_ganeshraju,weideng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16384,CASSANDRA-15586,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Packaging,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jan 20 21:16:40 UTC 2021,,,,,,,ARM,,,,,,"0|z0g3gw:",9223372036854775807,,,,brandon.williams,mattsplat,,,Normal,,0.3,,,https://github.com/apache/cassandra-builds/commit/4215327cb585f4bd7b0a95bf8e0aa1ae707bb455,,,,,,,,,manual download and testing against patch created debian repository,,,,,"06/Jul/20 14:54;mattsplat;Just checking if there's been any movement here, thanks!;;;","07/Jul/20 15:55;mck;We're looking for help/contributors on the deb/rpm packaging front.
I suspect the fastest solution here is if you can jump in and offer up a patch [~mattsplat]. I'd be happy to help along the way.;;;","07/Jul/20 16:05;mattsplat;Thanks Michael! Be glad to submit a patch if you can give me some guidance. I took a look at https://github.com/apache/cassandra/tree/trunk/debian but didn't see any references to the currently supported arches, so it seemed to me this wasn't where the deb package was built. I got the impression this was being done with some non-public CI/CD pipelines.;;;","07/Jul/20 16:18;brandon.williams;That is the source from which the packages are built.  In the control file we specify the architecture as 'all', but according to [https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-architecture] maybe we should be using 'any'?  /cc [~mshuler];;;","07/Jul/20 17:46;mattsplat;{quote}
Specifying only all indicates that the source package will only build architecture-independent packages.
{quote}

That sounds correct to me - a single 'noarch' package. What process builds the package from this source?;;;","07/Jul/20 17:51;mck;[~mattsplat], see
- https://github.com/apache/cassandra-builds/blob/master/build-scripts/cassandra-deb-packaging.sh
- https://github.com/apache/cassandra-builds/blob/master/build-scripts/cassandra-rpm-packaging.sh
- https://github.com/apache/cassandra-builds/blob/master/docker/build-debs.sh
- https://github.com/apache/cassandra-builds/blob/master/docker/build-rpms.sh

The former two are what are run from the artefact builds in Jenkins.
The latter two are the scripts called inside the docker container the former two, correspondingly, create.;;;","07/Jul/20 18:16;mattsplat;Thanks [~mck], that's very helpful. Does {{dpkg-buildpackage}} [need to be called here|https://github.com/apache/cassandra-builds/blob/master/docker/build-debs.sh#L120] with -A? See https://man7.org/linux/man-pages/man1/dpkg-buildpackage.1.html#OPTIONS

You would think that's not necessary given that the control file specifies {{all}}, but I wonder if it would solve the issue.;;;","04/Aug/20 20:38;mattsplat;Bumping this issue. Worst case, it would be helpful to get the workaround posted to the Cassandra install instructions.;;;","05/Aug/20 09:39;mck;bq. Does dpkg-buildpackage need to be called here with -A?

Have you tried this? If you could test and verify then I would be happy to work with getting the patch together and committed.;;;","05/Aug/20 13:44;mattsplat;Have not tested it yet, I'll try to get to it this week. If I understand the documentation correctly that flag shouldn't be necessary, we probably need guidance here from someone with more Debian packaging experience.

 ;;;","07/Oct/20 13:20;mattsplat;I believe I tested this a bit and didn't get anywhere, but I'll have to get back into it eventually. Would be great if someone who knows this code could take a look.

[~mck] In the meantime, could we update https://cassandra.apache.org/download/ with this:
{code:java}
echo ""deb [arch=amd64] https://downloads.apache.org/cassandra/debian 311x main"" | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list
{code}
Since it will work on all architectures.
;;;","13/Oct/20 17:10;mattsplat;[~mck] [~brandon.williams] Bump on this - should I open a ticket for documentation somewhere?;;;","14/Jan/21 01:27;e.dimitrova;Hi [~mck], [~brandon.williams], [~mattsplat]

I just realized I missed this ticket.

Is anyone able to update me?

Update the doc? Or do we have a patch? Please advise;;;","14/Jan/21 02:39;mattsplat;No patch currently. Would be helpful to update the doc for now.

So far nobody has been familiar with the package build process, so there's been no real effort to change it.;;;","14/Jan/21 07:32;mck;I missed any notifications from [~mattsplat] too. Apologies for that Matt!

[~e.dimitrova], we should test, confirm, and do the ""in the meantime"" as Matt suggests four comments above.

I am curious how {{[arch=amd64]}} doesn't break it for any debian distribution and architecture, like {{i386}}. But my debian package management foo is weak here.;;;","14/Jan/21 15:47;brandon.williams;Sorry, I missed this too.  I've opened/tagged the ticket appropriately to prevent this from slipping through.

bq. I am curious how [arch=amd64] doesn't break it for any debian distribution and architecture, like i386. But debian package management foo is weak here.

Well, actually, i386 is the other option we publish:

https://dl.bintray.com/apache/cassandra/dists/40x/main/

If you dig into either of those or our packaging though, the architecture is 'all' so this is not an issue of packaging, but whatever is managing our Debian repository is only publishing the package list for amd64 and i386 architectures.  Anyway, we should fix this to include arm64, rather than specifying an architecture in our docs, since while that will work, it is horrible system hygiene.

Mick, is your foo any stronger with what is building  the repo? :);;;","14/Jan/21 16:04;brandon.williams;I think this is it: https://github.com/apache/cassandra-builds/blob/trunk/cassandra-release/prepare_release.sh#L259;;;","14/Jan/21 16:18;mattsplat;Perhaps the docs can be updated just to mention the issue and the workaround.;;;","14/Jan/21 22:26;mck;bq. Mick, is your foo any stronger with what is building the repo? 

Call me nemo :-) 

I will put the patch together and create and test a deb repo with it.
;;;","14/Jan/21 22:31;mck;Patch: https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/15889;;;","14/Jan/21 23:02;brandon.williams;+1;;;","15/Jan/21 02:17;RenhaiZhao;Hi, Do you have any arm CI servers? because, when I run 'ant ; ant test' on arm server, there are some test cases failed.

I am trying to find the root cause and solve it.

But I think,  CI running on arm server is the final solution, this can prove cassandra always can run on arm server well.

If community don't have arm servers, we can donate some.

And if you need me to do any contribution , please also let me know.

Thanks;;;","15/Jan/21 07:27;mck;bq. If community don't have arm servers, we can donate some.

The community does not [~RenhaiZhao]. You can see our current list of CI agents [here|https://github.com/apache/cassandra-builds/blob/trunk/ASF-jenkins-agents.txt].

A donation would be amazingly generous and definitely and immediately utilised!;;;","15/Jan/21 07:48;RenhaiZhao;[~mck] Could you provide some contacts , I can send some arm server's IP address and password .

And also please let me know how many servers you need.

16core ,32G ram server are OK?

My email is [zhaorenhai@hotmail.com|mailto:zhaorenhai@hotmail.com]

Thanks!;;;","15/Jan/21 08:51;mck;Sent you an email, thanks [~RenhaiZhao]!;;;","15/Jan/21 16:43;mattsplat;[~mck] Let me know if you have any trouble getting CI servers, I can help there as well.;;;","15/Jan/21 19:19;mck;[~mattsplat], we can definitely utilise more arm64 servers, particularly if we want all the tests to run on them. The instructions for adding an agent is [here|https://github.com/apache/cassandra-builds/blob/trunk/ASF-jenkins-agents.txt]. Feel free to email me on mck@apache.org;;;","15/Jan/21 19:28;e.dimitrova;I wanted to say thanks to all of you... I love the Cassandra community, look what happened after one question - I went for a day off and so many great things happened only in one day! Let me know if I can be of help with anything! Thanks again all for your passion and dedication to the project!;;;","16/Jan/21 13:22;mck;[~mattsplat], would you be able to test the debian repository in [{{debian-repo-15889.tar}}|https://nightlies.apache.org/cassandra/devbranch/misc/CASSANDRA-15889/debian-repo-15889.tar] ? 

It was built with the patch mentioned above, and the following steps (copied from our {{prepare_release.sh}} script):
{code}
export gpg_key=""…""
export cassandra_builds_dir=""../cassandra-builds""  # where your cassandra-builds repo clone is 

mkdir debian
cd debian/

${cassandra_builds_dir}/build-scripts/cassandra-deb-packaging.sh cassandra-4.0-beta4

debsign -k$gpg_key cassandra_4.0~beta4_amd64.changes

export debian_series=""40x""
mkdir conf

echo ""Origin: Apache Cassandra Packages"" > conf/distributions
echo ""Label: Apache Cassandra Packages"" >> conf/distributions
echo ""Codename: $debian_series"" >> conf/distributions
echo ""Architectures: i386 amd64 arm64 source"" >> conf/distributions
echo ""Components: main"" >> conf/distributions
echo ""Description: Apache Cassandra APT Repository"" >> conf/distributions
echo ""SignWith: $gpg_key"" >> conf/distributions


reprepro --ignore=wrongdistribution include $debian_series cassandra_4.0~beta4_amd64.changes
rm -fR db conf cass*

cd ..
tar cvf debian-repo-15889.tar debian/
{code};;;","19/Jan/21 15:45;mattsplat;[~mck], no issues installing the deb package from the tarball on m5/amd64 or m6g/arm64 AWS instances running Ubuntu 20.04.

Haven't had a chance to try running cassandra-stress or similar, but it starts up just fine.

One hiccup I ran into was forgetting to run `apt update`, otherwise it couldn't find Python 2 packages to install. Would be nice to remove that dependency :);;;","19/Jan/21 16:40;brandon.williams;bq. otherwise it couldn't find Python 2 packages to install

Hmm, we require python >= 2.7 in the package, so I'm not sure why anything python 2 specific would be needed.;;;","19/Jan/21 17:29;mattsplat;Looked like it specifically wanted the package named ""python"", the ""python3"" package wasn't satisfying it.;;;","19/Jan/21 17:35;brandon.williams;I think you are correct.  Opened CASSANDRA-16396 for that.;;;","19/Jan/21 19:07;mattsplat;[~brandon.williams], thanks!

[~mck], will this patch be applied to Cassandra 3 as well?;;;","19/Jan/21 19:09;brandon.williams;The patch applies to the building of the repository, so it will apply to all versions when deployed.;;;","20/Jan/21 21:16;mck;Committed as [4215327cb585f4bd7b0a95bf8e0aa1ae707bb455|https://github.com/apache/cassandra-builds/commit/4215327cb585f4bd7b0a95bf8e0aa1ae707bb455].
;;;",,,,,,,,,,,
pushed_notifications_test.TestPushedNotifications.test_restart_node_localhost failure,CASSANDRA-15886,13312393,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,19/Jun/20 07:23,21/Dec/20 09:32,13/Jul/23 08:39,19/Jun/20 13:38,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"pushed_notifications_test.TestPushedNotifications.test_restart_node_localhost has been failing for a [while|https://ci-cassandra.apache.org/job/Cassandra-trunk/176/testReport/dtest.pushed_notifications_test/TestPushedNotifications/test_restart_node_localhost/history/] and fails locally",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15677,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,2020-06-19 07:23:39.0,,,,,,,All,,,,,,"0|z0g0hk:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
replication_test.TestSnitchConfigurationUpdate.test_rf_expand_gossiping_property_file_snitch_multi_dc failure,CASSANDRA-15885,13312392,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,19/Jun/20 07:21,03/Jan/21 17:03,13/Jul/23 08:39,24/Jun/20 18:22,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"replication_test.TestSnitchConfigurationUpdate.test_rf_expand_gossiping_property_file_snitch_multi_dc has been failing for a [while|https://ci-cassandra.apache.org/job/Cassandra-trunk/176/testReport/dtest-large.replication_test/TestSnitchConfigurationUpdate/test_rf_expand_gossiping_property_file_snitch_multi_dc/history/]. Also fails locally",,adelapena,bereng,,,,,,,,,,"bereng opened a new pull request #78:
URL: https://github.com/apache/cassandra-dtest/pull/78


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jun/20 10:05;githubbot;600","michaelsembwever closed pull request #78:
URL: https://github.com/apache/cassandra-dtest/pull/78


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jun 25 08:57:55 UTC 2020,,,,,,,All,,,,,,"0|z0g0hc:",9223372036854775807,,,,adelapena,,,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra-dtest/commit/103854f0e6b369c7b3573520acb1a50b1b2c36d8,,,,,,,,,See PR,,,,,"22/Jun/20 10:06;bereng;Failure is on checking an unsorted list vs a sorted list. Contents were right but the order mismatched.;;;","22/Jun/20 10:41;adelapena;Dtests running:

 |[3.0|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/179/]|[3.11|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/180/]|[trunk|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/181/]|;;;","23/Jun/20 09:14;bereng;[~adelapena] 3.0 and trunk failures look completely unrelated. 3.11 seems broken in the ci-cassandra [build|https://ci-cassandra.apache.org/job/Cassandra-3.11-dtest-offheap/49/console] as well, so that should be unrelated imo.;;;","23/Jun/20 11:12;adelapena;Indeed the failures don't seem related. I have run CI for 3.11 again [here|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/187/], although I think that with the 3.0 and trunk runs and the successful local execution of {{replication_test}} for 3.11 we are probably ready to commit.;;;","24/Jun/20 10:52;adelapena;[~Bereng] The CI run for 3.11 has succeeded, so I think we are ready to commit.;;;","24/Jun/20 18:20;adelapena;Committed to master as [103854f0e6b369c7b3573520acb1a50b1b2c36d8|https://github.com/apache/cassandra-dtest/commit/103854f0e6b369c7b3573520acb1a50b1b2c36d8].;;;","25/Jun/20 08:57;bereng;Great Thx a lot [~adelapena];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete and save with same keys,CASSANDRA-15883,13312303,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,yazalulloa,yazalulloa,18/Jun/20 20:38,09/Dec/20 14:20,13/Jul/23 08:39,09/Dec/20 14:20,,,,,,,,,,0,,,,"I have a table like this: key1, key2, key3, column1, column2.

 

When I delete a row with keys 1, 2, 3. and then insert a new row almost immediately with the same keys, cassandra does not store the new row even though the query executes successfully. 

How can I force Cassandra to store the new row, or do I have to change my data model?

EDIT:

I'm running Cassandra 3.11.6 in Docker, a single instance for development purposes.

This has happen already with 3 tables.
{code:java}
// CREATE TABLE my_keyspace.my_chat ( country text, user_id timeuuid, chat_id bigint, email text, first_name text, last_name text, username text, PRIMARY KEY (country, user_id, chat_id));
{code}
{code:java}
// CREATE TABLE my_keyspace.my_profile (CREATE TABLE my_keyspace.my_profile ( country text, user_id timeuuid, profile_code text, id_doc text, id_doc_type text, user_email text, user_name text, PRIMARY KEY (country, user_id)) WITH CLUSTERING ORDER BY ( user_id DESC );
{code}
{code:java}
// CREATE TABLE my_keyspace.role ( realm text, business_id timeuuid, user_id timeuuid, owner_id timeuuid, name text, status text, icon text, url text, description text, owner_email text, owner_name text, scope_id timeuuid, scope_name text, scopes SET<text>, authorization boolean, user_email text, user_name text, views SET<FROZEN<my_dt>>, PRIMARY KEY (realm, business_id, user_id, owner_id, name, status)) WITH CLUSTERING ORDER BY ( business_id DESC, user_id DESC, owner_id DESC, name DESC, status DESC);
{code}
The value of the keys for this tables come from other tables or outside immutable data.

 

I'm also using the Datastax OSS Java Driver v4.7.0 for comunications with Cassandra, but the problem have also presented using cqlsh.

 

The queries I use are standard read by partition key, insert the whole row and delete by full partiion key.",,blerer,jasonstack,jeromatron,yazalulloa,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Dec 09 14:20:13 UTC 2020,,,,,,,All,,,,,,"0|z0fzxk:",9223372036854775807,,,,,,,,,,3.11.6,,,,,,,,,,,,,,,,,"19/Jun/20 07:36;blerer;[~yazalulloa] It should work. Could you provide your exact schema and the the queries that you run?;;;","19/Jun/20 15:45;brandon.williams;You almost certainly have some kind of timestamp problem.;;;","19/Jun/20 20:28;yazalulloa;I updated the post with more info [~blerer];;;","20/Jun/20 16:28;yazalulloa;[~brandon.williams] Can you elaborate on the timestamp problem?, I added the tables on which I'm having issues with;;;","20/Jun/20 20:34;brandon.williams;Can you show the reproduction in cqlsh?;;;","22/Jun/20 15:38;yazalulloa;[~brandon.williams] Do you mean the exact queries I'm using?;;;","22/Jun/20 15:40;brandon.williams;I mean cut and paste the output to this ticket.;;;","09/Dec/20 14:20;yazalulloa;I hadn't optimized the server that Cassandra was running in, swap, memlock, nofile, etc, after I did that everything worked fine

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in CompressedChunkReader,CASSANDRA-15880,13312173,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,jtgrabowski,jtgrabowski,18/Jun/20 09:04,03/Jan/21 17:03,13/Jul/23 08:39,02/Oct/20 15:26,3.11.9,4.0,4.0-beta3,,,Feature/Compression,,,,0,,,,"CompressedChunkReader uses java.lang.ThreadLocal to reuse ByteBuffer for compressed data. ByteBuffers leak due to peculiar ThreadLocal quality.
ThreadLocals are stored in a map, where the key is a weak reference to a ThreadLocal and the value is the user's object (ByteBuffer in this case). When a last strong reference to a ThreadLocal is lost, weak reference to ThreadLocal (key) is removed but the value (ByteBuffer) is kept until cleaned by ThreadLocal heuristic expunge mechanism. See ThreadLocal's ""stale entries"" for details.

When a number of long-living threads is high enough this results in thousands of ByteBuffers stored as stale entries in ThreadLocals. In a not-so-lucky scenario we get OutOfMemoryException.",,bereng,blerer,e.dimitrova,Gerrrr,jeromatron,jtgrabowski,PuerTea,,,,,"bereng opened a new pull request #737:
URL: https://github.com/apache/cassandra/pull/737


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Sep/20 04:39;githubbot;600","bereng opened a new pull request #738:
URL: https://github.com/apache/cassandra/pull/738


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Sep/20 06:01;githubbot;600","bereng commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-688692635


   CI
   - [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/101/workflows/5056ddf5-693d-4b2e-b08d-983253eeed6e): All failures are the the latest usual flaky tests
   - [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/101/workflows/7d02ef6e-c7f2-4fa1-b2ec-dcbeba6da0bc): The only non-usual-suspect failure, test_13595 - consistency_test.TestConsistency, passes locally.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Sep/20 07:58;githubbot;600","bereng commented on pull request #738:
URL: https://github.com/apache/cassandra/pull/738#issuecomment-688692918


   [CI](https://app.circleci.com/pipelines/github/bereng/cassandra/102/workflows/debbb3b3-edb3-480a-afda-ba8def7db942) with a known flaky, otherwise lgtm


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Sep/20 07:59;githubbot;600","bereng commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-693231718


   CI
   - [j11](https://app.circleci.com/pipelines/github/bereng/cassandra/112/workflows/dadee965-c951-49ec-a10c-02b7faaaffff)
   - [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/112/workflows/c1a6addd-977e-4d42-a1e0-05928e25f46f)
   
   CI LGTM
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 07:37;githubbot;600","bereng commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-693237694


   @blambov suggested the `EnumMap` addition to prevent BB recreation on different BBTypes. If you had a gap to cursory look this change that'd be great. I still preferred using `SimpleCachedBufferPool` as a centralized point to get ThreadLocal BB from.
   
   @blerer does this now look better?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 07:50;githubbot;600","blambov commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489237475



##########
File path: src/java/org/apache/cassandra/io/util/CompressedChunkReader.java
##########
@@ -85,28 +88,28 @@ public Rebufferer instantiateRebufferer()
 
     public static class Standard extends CompressedChunkReader
     {
-        // we read the raw compressed bytes into this buffer, then uncompressed them into the provided one.
-        private final ThreadLocal<ByteBuffer> compressedHolder;
+        // We read the raw compressed bytes into a buffer, then uncompressed them into the provided one.
+        // Notice we have 1 SimpleCachedBufferPool per BBType which wraps a FastThreadLocal BB
+        private static final EnumMap<BufferType, SimpleCachedBufferPool> reusableCompressBBs = new EnumMap<>(BufferType.class);

Review comment:
       This does not fix having to recreate buffers if the type changes, because the underlying thread local map is still a single static.
   I would use the static `EnumMap` in `SimpleCachedBufferPool` instead.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 07:55;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489322822



##########
File path: src/java/org/apache/cassandra/io/util/CompressedChunkReader.java
##########
@@ -85,28 +88,28 @@ public Rebufferer instantiateRebufferer()
 
     public static class Standard extends CompressedChunkReader
     {
-        // we read the raw compressed bytes into this buffer, then uncompressed them into the provided one.
-        private final ThreadLocal<ByteBuffer> compressedHolder;
+        // We read the raw compressed bytes into a buffer, then uncompressed them into the provided one.
+        // Notice we have 1 SimpleCachedBufferPool per BBType which wraps a FastThreadLocal BB
+        private static final EnumMap<BufferType, SimpleCachedBufferPool> reusableCompressBBs = new EnumMap<>(BufferType.class);

Review comment:
       :facepalm: apologies...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 10:10;githubbot;600","bereng commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-693309544


   - [CI j11](https://app.circleci.com/pipelines/github/bereng/cassandra/114/workflows/339498da-4d60-435b-8c69-8d78e579a1e5)
   - [Ci j8](https://app.circleci.com/pipelines/github/bereng/cassandra/114/workflows/04a5940e-5366-4609-8a21-f0521f024958)
   
   CI lgtm so far pending running dtests


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 10:11;githubbot;600","blambov commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489409378



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,12 +88,12 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBBHolder.get(preferredReusableBufferType).get();

Review comment:
       Nit: Instead of `preferredReusableBufferType` we can store the result of `reusableBBHolder.get(preferredReusableBufferType)` on `setPreferredReusableBufferType` calls to avoid the `EnumMap` lookup.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 12:48;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489439285



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,12 +88,12 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBBHolder.get(preferredReusableBufferType).get();

Review comment:
       Not so nit imo. Getting the buffer is sure more prone to being part of a hot path than changing the type. So fiddly but I gave it a go.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 13:31;githubbot;600","blambov commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489478448



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -37,6 +37,8 @@
 public class SimpleCachedBufferPool
 {
     private static final EnumMap<BufferType, FastThreadLocal<ByteBuffer>> reusableBBHolder = new EnumMap<>(BufferType.class);
+    // Convenience variable holding a ref to the current resuableBB to avoid map lookups
+    private static FastThreadLocal<ByteBuffer> reusableBB;

Review comment:
       This should not be static.

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -88,19 +91,21 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBBHolder.get(preferredReusableBufferType).get();
+        ByteBuffer result = reusableBB.get();
         if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
             reusableBBHolder.get(preferredReusableBufferType).set(result);

Review comment:
       This is now redundant.

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -72,6 +74,7 @@ public SimpleCachedBufferPool(int maxBufferPoolSize, int bufferSize)
     {

Review comment:
       `preferredReusableBufferType` above should no longer be necessary.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 14:27;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489509429



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -72,6 +74,7 @@ public SimpleCachedBufferPool(int maxBufferPoolSize, int bufferSize)
     {

Review comment:
       That I tried and then you need to do a `BufferType.typeOf()`... So it's an extra operation vs having that stored in a variable.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 15:03;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489510546



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -88,19 +91,21 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBBHolder.get(preferredReusableBufferType).get();
+        ByteBuffer result = reusableBB.get();
         if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
             reusableBBHolder.get(preferredReusableBufferType).set(result);

Review comment:
       right you are!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Sep/20 15:05;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r489967748



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -37,6 +37,8 @@
 public class SimpleCachedBufferPool
 {
     private static final EnumMap<BufferType, FastThreadLocal<ByteBuffer>> reusableBBHolder = new EnumMap<>(BufferType.class);
+    // Convenience variable holding a ref to the current resuableBB to avoid map lookups
+    private static FastThreadLocal<ByteBuffer> reusableBB;

Review comment:
       Ok I see it now. That BB can be of any BBType and as we no longer switch on the fly between types it can't be static.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Sep/20 04:46;githubbot;600","blambov commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490024486



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -63,6 +74,7 @@ public SimpleCachedBufferPool(int maxBufferPoolSize, int bufferSize)
     {
         this.maxBufferPoolSize = maxBufferPoolSize;
         this.bufferSize = bufferSize;
+        SimpleCachedBufferPool.reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       Nit: replace `SimpleCachedBufferPool` with `this`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Sep/20 07:21;githubbot;600","blerer commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490232796



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       Should we not have `preferredReusableBufferType` and  `reusableBB` be `volatile` variables and the   `setPreferredReusableBufferType` method `synchronized` ? With the current implementation, it seems to me that, if a thread call `setPreferredReusableBufferType` and another `getThreadLocalReusableBuffer` the output of `getThreadLocalReusableBuffer` is unpredictable and the wrong buffer type can be added the `reusableBB` field.
   Am I missing something?

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -107,6 +120,9 @@ public void releaseBuffer(ByteBuffer buffer)
     public void shutdown()
     {
         bufferPool.clear();
+        for (FastThreadLocal<ByteBuffer> bbHolder : reusableBBHolder.values())
+            bbHolder.remove();
+        reusableBB.remove();

Review comment:
       `remove` is called twice on the same `ThreadLocal` instance as the `reusableBB` is also in the `bbHolder` variable
   
   Moreover, the `remove` call will remove the buffers values associated to the thread calling the `shutdown` method and I do not believe that it is what we want. The goal of the approach is to reuse buffer. Calling `remove` will prevent the reuse on the next call forcing the buffer to be recreated.    

##########
File path: src/java/org/apache/cassandra/io/util/CompressedChunkReader.java
##########
@@ -86,27 +87,21 @@ public Rebufferer instantiateRebufferer()
     public static class Standard extends CompressedChunkReader
     {
         // we read the raw compressed bytes into this buffer, then uncompressed them into the provided one.
-        private final ThreadLocal<ByteBuffer> compressedHolder;
+        private final SimpleCachedBufferPool reusableCompressBB;
+        private final int compressSize = getCompressSize();
 
         public Standard(ChannelProxy channel, CompressionMetadata metadata)
         {
             super(channel, metadata);
-            compressedHolder = ThreadLocal.withInitial(this::allocateBuffer);
+            reusableCompressBB = new SimpleCachedBufferPool(0, getCompressSize());

Review comment:
       We compute twice the compress size. I should do something like:
   ```
   compressSize = getCompressSize(metadata);
   reusableCompressBB = new SimpleCachedBufferPool(0, compressSize);
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Sep/20 13:41;githubbot;600","blambov commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490259247



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       Making them volatile won't change much, the right thing to do is to not allow the preferred type to change. Is it possible to pass the type as a constructor argument and make `reuseableBB` final?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Sep/20 13:47;githubbot;600","blerer commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490314377



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       You are right we can still have a race.
   The preferedType is set in the `CompressedSegment` and int the `EncryptedSegment` constructor. I do not recall if we can change the commit log configuration without restarting the server. If not we can figure out which type will be the prefered one based on the `commitLog.configuration`. It is not super clean has it some how duplicate the logic from `createSegment` but it should work. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Sep/20 14:51;githubbot;600","blerer commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490314377



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       You are right we can still have a race.
   The preferedType is set in the `CompressedSegment` and in the `EncryptedSegment` constructor. I do not recall if we can change the commit log configuration without restarting the server. If not, we can figure out which type will be the prefered one based on the `commitLog.configuration`. It is not super clean has it somehow duplicates the logic from `createSegment` but it should work. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Sep/20 14:52;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490771906



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       Given this `getThreadLocalReusableBuffer` seems to be isolated within the class, as it is not tied in with the buffer pool functinality, I don't like adding this param to the constructor. It reads as if this was the preferred type to the BBs in the pool... sounds confusing to me, changes the 'main' API, it might not get used if you only use the pool functionality
   
   I would like to propose the latest commit which does away with both variables. The price to pay is the Map lookup. I read a bit about `EnumMap`'s implementation and it is an Array indexed by the Enum int. So it should be pretty fast imo.
   
   Wdyt? you guys know better how this class plays within the hot-paths.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Sep/20 08:01;githubbot;600","blerer commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490816897



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       You are right, there is an issue with the class API. Even with the `setPreferredReusableBufferType` the API is confusing as it only applies to the `ThreadLocal` logic and not to the buffer pool. The calls to `createBuffer` are also performed from within the `CompressedSegment` and `EncryptedSegment` using the same type as the `preferredReusableBufferType`. So we can pass the buffer type as part of the constructor and remove the parameter from `createBuffer`. It will fix the threading issue and the API at the same time. Wdyt? 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Sep/20 09:21;githubbot;600","blerer commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490823927



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       @bereng The approach of your last commit is also fine for me. I just tend to prefer the constructor approach because it avoid a lookup and makes the code easier to read (less parameters being passed around). That being said, I am open for both solutions.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Sep/20 09:34;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r490859645



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       Indeed the API for the pool could benefit from that imo as well. Adding the param to the constructor and making both the pool and the reusableBB follow that type sgtm and a better option overall. A quick look at the code seems to suggest BBType is reachable at construction time :-)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Sep/20 10:41;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r491810962



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       I have pushed the latest change where preferred BBType is set at construction time.  Despite the API being much nicer imo, given we want to move away from singletons, static state/inits, etc I wonder if this is a step in the wrong direction.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Sep/20 06:15;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r491810962



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       I have pushed the latest change where preferred BBType is set at construction time.  Despite the API being much nicer imo, given we want to move away from singletons, static state/inits, etc I wonder if this is a step in the wrong direction.
   
   Edit: Btw, the original implementation wasn't thread safe either, as `setPreferredReusableBufferType()` could be called by some other thread anytime changing things under your feet. That was a bug right?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Sep/20 07:51;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r491810962



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       I have pushed the latest change where preferred BBType is set at construction time.  Despite the API being much nicer imo, given we want to move away from singletons, static state/inits, etc I wonder if this is a step in the wrong direction.
   
   Edit: Btw, the original implementation wasn't thread safe either, as `setPreferredReusableBufferType()` could be called by some other thread anytime changing things under your feet. That was a bug right?
   
   CI [fails](https://app.circleci.com/pipelines/github/bereng/cassandra/120/workflows/7f806bb7-4339-421f-9486-ecc47d073afd/jobs/916): Investigating




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Sep/20 09:34;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r491913063



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       So apparently yes, it was a step in the 'wrong' direction. We have tests that apparently change config [on the fly](https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/db/RecoveryManagerFlushedTest.java#L71). So the static init [won't play nice](https://app.circleci.com/pipelines/github/bereng/cassandra/120/workflows/7f806bb7-4339-421f-9486-ecc47d073afd/jobs/916) with that.
   
   Hence I propose we settle on the solution with the `EnumMap` [lookup](https://github.com/apache/cassandra/commit/1e4b2f483d221bb1adce212dac4b2109ca0e9789)
   
   wdyt?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Sep/20 09:45;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r491810962



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       I have pushed the latest change where preferred BBType is set at construction time.  Despite the API being much nicer imo, given we want to move away from singletons, static state/inits, etc I wonder if this is a step in the wrong direction.

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       I have pushed the latest change where preferred BBType is set at construction time.  Despite the API being much nicer imo, given we want to move away from singletons, static state/inits, etc I wonder if this is a step in the wrong direction.
   
   Edit: Btw, the original implementation wasn't thread safe either, as `setPreferredReusableBufferType()` could be called by some other thread anytime changing things under your feet. That was a bug right?

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       I have pushed the latest change where preferred BBType is set at construction time.  Despite the API being much nicer imo, given we want to move away from singletons, static state/inits, etc I wonder if this is a step in the wrong direction.
   
   Edit: Btw, the original implementation wasn't thread safe either, as `setPreferredReusableBufferType()` could be called by some other thread anytime changing things under your feet. That was a bug right?
   
   CI [fails](https://app.circleci.com/pipelines/github/bereng/cassandra/120/workflows/7f806bb7-4339-421f-9486-ecc47d073afd/jobs/916): Investigating

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       So apparently yes, it was a step in the 'wrong' direction. We have tests that apparently change config [on the fly](https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/db/RecoveryManagerFlushedTest.java#L71). So the static init [won't play nice](https://app.circleci.com/pipelines/github/bereng/cassandra/120/workflows/7f806bb7-4339-421f-9486-ecc47d073afd/jobs/916) with that.
   
   Hence I propose we settle on the solution with the `EnumMap` [lookup](https://github.com/apache/cassandra/commit/1e4b2f483d221bb1adce212dac4b2109ca0e9789)
   
   wdyt?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Sep/20 03:04;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r494189562



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       @blerer suggested using a simple instance variable instead of a static one. The assumption is there will always only be one `AbstractCommitLogSegmentManager` instance. This allows for the imrpoved API and for tests to change config on the fly.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Sep/20 09:58;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r494189562



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       @blerer suggested using a simple instance variable instead of a static one. The assumption is there will always only be one `AbstractCommitLogSegmentManager` instance. This allows for the imrpoved API and for tests to change config on the fly. Latest commit available.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Sep/20 09:59;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r494288842



##########
File path: src/java/org/apache/cassandra/db/commitlog/AbstractCommitLogSegmentManager.java
##########
@@ -166,7 +148,22 @@ public void runMayThrow() throws Exception
             }
         };
 
+        BufferType BBType = SimpleCachedBufferPool.DEFAULT_PREFERRED_BB_TYPE;
+        if (commitLog.configuration.useEncryption())
+            // Keep reusable buffers on-heap regardless of compression preference so we avoid copy off/on repeatedly during decryption
+            // Also: we want to keep the compression buffers on-heap as we need those bytes for encryption,
+            // and we want to avoid copying from off-heap (compression buffer) to on-heap encryption APIs
+            BBType = BufferType.ON_HEAP;
+        else if (commitLog.configuration.useCompression())
+            BBType = commitLog.configuration.getCompressor().preferredBufferType();
+
+        synchronized(this)
+        {
+            this.bufferPool = new SimpleCachedBufferPool(DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool(), DatabaseDescriptor.getCommitLogSegmentSize(), BBType);

Review comment:
       We can make this more 'solid' by closing the pool before re-creation to defend against `start()` calls without a matching ' close()`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Sep/20 12:48;githubbot;600","bereng commented on a change in pull request #737:
URL: https://github.com/apache/cassandra/pull/737#discussion_r494189562



##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       @blerer suggested using a simple instance variable instead of a static one. The assumption is there will always only be one `AbstractCommitLogSegmentManager` instance. This allows for the imrpoved API and for tests to change config on the fly.

##########
File path: src/java/org/apache/cassandra/db/commitlog/SimpleCachedBufferPool.java
##########
@@ -79,19 +91,20 @@ public ByteBuffer createBuffer(BufferType bufferType)
 
     public ByteBuffer getThreadLocalReusableBuffer(int size)
     {
-        ByteBuffer result = reusableBufferHolder.get();
-        if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
+        ByteBuffer result = reusableBB.get();
+        if (result.capacity() < size)
         {
             FileUtils.clean(result);
             result = preferredReusableBufferType.allocate(size);
-            reusableBufferHolder.set(result);
+            reusableBB.set(result);
         }
         return result;
     }
 
     public void setPreferredReusableBufferType(BufferType type)
     {
         preferredReusableBufferType = type;
+        reusableBB = reusableBBHolder.get(preferredReusableBufferType);

Review comment:
       @blerer suggested using a simple instance variable instead of a static one. The assumption is there will always only be one `AbstractCommitLogSegmentManager` instance. This allows for the imrpoved API and for tests to change config on the fly. Latest commit available.

##########
File path: src/java/org/apache/cassandra/db/commitlog/AbstractCommitLogSegmentManager.java
##########
@@ -166,7 +148,22 @@ public void runMayThrow() throws Exception
             }
         };
 
+        BufferType BBType = SimpleCachedBufferPool.DEFAULT_PREFERRED_BB_TYPE;
+        if (commitLog.configuration.useEncryption())
+            // Keep reusable buffers on-heap regardless of compression preference so we avoid copy off/on repeatedly during decryption
+            // Also: we want to keep the compression buffers on-heap as we need those bytes for encryption,
+            // and we want to avoid copying from off-heap (compression buffer) to on-heap encryption APIs
+            BBType = BufferType.ON_HEAP;
+        else if (commitLog.configuration.useCompression())
+            BBType = commitLog.configuration.getCompressor().preferredBufferType();
+
+        synchronized(this)
+        {
+            this.bufferPool = new SimpleCachedBufferPool(DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool(), DatabaseDescriptor.getCommitLogSegmentSize(), BBType);

Review comment:
       We can make this more 'solid' by closing the pool before re-creation to defend against `start()` calls without a matching ' close()`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Sep/20 13:10;githubbot;600","bereng commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-702532358


   A few failures I need to investigate with the latest CI run [J11](https://app.circleci.com/pipelines/github/bereng/cassandra/136/workflows/6e1808b7-224a-4702-bf19-944250365599) [j8](https://app.circleci.com/pipelines/github/bereng/cassandra/136/workflows/92fffdea-31a0-4679-a463-f6261ccf4a4b)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Oct/20 05:27;githubbot;600","bereng commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-702578521


   Rebased and now failures align more or less to what I see in ci-cass: [J11](https://app.circleci.com/pipelines/github/bereng/cassandra/137/workflows/f7979f36-a277-4f83-beae-ed2dd65a3275) and [J8](https://app.circleci.com/pipelines/github/bereng/cassandra/137/workflows/6ba55bfa-bf69-4ed2-83ed-a4628c0bbcc0)
   
   If we +1 this patch I will squash, push the 3.11 version and run CI both both.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Oct/20 07:41;githubbot;600","bereng commented on pull request #738:
URL: https://github.com/apache/cassandra/pull/738#issuecomment-702644603


   CI [results](https://app.circleci.com/pipelines/github/bereng/cassandra/139/workflows/9d9b946c-a588-4af5-be51-fadb34887d3f)
   
   The rebuild and thrift failures pass locally. The SASI one is also present in ci-cass. Overall I think it aligns to what flaky tests info we have. lgtm.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Oct/20 10:09;githubbot;600","blambov commented on pull request #737:
URL: https://github.com/apache/cassandra/pull/737#issuecomment-702704290


   Looks great now. Thanks for the patience.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Oct/20 12:23;githubbot;600","bereng closed pull request #738:
URL: https://github.com/apache/cassandra/pull/738


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:44;githubbot;600","bereng closed pull request #737:
URL: https://github.com/apache/cassandra/pull/737


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:44;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,23400,,,0,23400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Oct 05 04:57:53 UTC 2020,,,,,,,All,,,,,,"0|z0fz4o:",9223372036854775807,,,,blambov,blerer,,,Normal,,3.6,,,https://github.com/apache/cassandra/commit/3f73c16d50a80c574dd004c59bfaa6042dcd5781,,,,,,,,,See PR,,,,,"08/Sep/20 04:46;bereng;Note for the reviewer: {{CompressedChunkReader.Standard}} is a {{RebuffererFactory}} where the main method at use is {{CompressedChunkReader.instantiateRebufferer()}}. That one wraps the reader in a {{BufferManagingRebufferer}} which will call {{close()}} and it's {{AutoClosable}} also. I have checked for uses of the reader in the code and as expected it is being closed/auto closed so I expect the {{ThreadLocal}} to be properly removed and not leak now.;;;","08/Sep/20 07:58;bereng;CI runs in the PRs.;;;","14/Sep/20 12:57;bereng;After talking with [~blerer] it seems there are better ways to solve this issue so moving back to in progress.;;;","02/Oct/20 10:15;bereng;4.0 PR squashed, 3.11 PR ready and tests results attached to the PR.;;;","02/Oct/20 12:41;blerer;The PRs have been approved and the CI runs look good.  ;;;","02/Oct/20 15:26;blerer;The patch was committed into cassandra-3.11 at 3f73c16d50a80c574dd004c59bfaa6042dcd5781  and merged into trunk;;;","05/Oct/20 04:57;bereng;Thanks [~blerer] and [~blambov] for your help reviewing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky unit test: CorruptedSSTablesCompactionsTest,CASSANDRA-15879,13311827,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,16/Jun/20 21:52,16/Mar/22 13:36,13/Jul/23 08:39,23/Jun/20 18:01,3.0.21,3.11.7,4.0,4.0-beta1,,Test/unit,,,,0,,,,"CASSANDRA-14238 addressed the failure in {{BlacklistingCompactionsTest.testBlacklistingWithSizeTieredCompactionStrategy}}, but only on 2.2. While working on CASSANDRA-14888, we’ve reproduced [the failure|https://app.circleci.com/pipelines/github/dineshjoshi/cassandra/47/workflows/de5f7cdb-06b6-4869-9d19-81a145e79f3f/jobs/2516/tests] on trunk.

It looks like this should be a clean merge forward.",,djoshi,jasonstack,maedhroz,marcuse,,,,,,,,"maedhroz opened a new pull request #638:
URL: https://github.com/apache/cassandra/pull/638


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jun/20 23:31;githubbot;600","maedhroz opened a new pull request #639:
URL: https://github.com/apache/cassandra/pull/639


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jun/20 17:17;githubbot;600","maedhroz opened a new pull request #640:
URL: https://github.com/apache/cassandra/pull/640


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jun/20 17:40;githubbot;600","smiklosovic closed pull request #638:
URL: https://github.com/apache/cassandra/pull/638


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:35;githubbot;600","smiklosovic closed pull request #639:
URL: https://github.com/apache/cassandra/pull/639


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:35;githubbot;600","smiklosovic closed pull request #640:
URL: https://github.com/apache/cassandra/pull/640


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14238,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jun 23 18:01:49 UTC 2020,,,,,,,All,,,,,,"0|z0fx00:",9223372036854775807,,,,djoshi,marcuse,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/83685418f9061c08af7e59a5b88d1ea14de5c2a9,,,,,,,,,"CircleCI unit tests, as this is a test-only change",,,,,"16/Jun/20 23:13;maedhroz;It seems the test has been renamed (just a few days ago) to {{CorruptedSSTablesCompactionsTest}}.;;;","16/Jun/20 23:34;maedhroz;I pushed up [a PR|https://github.com/apache/cassandra/pull/638] that approximates the 2.2 version. (There have been a number of other changes to {{CorruptedSSTablesCompactionsTest}} since then to fix other kinds of flakiness.) The only downside I can see to following through w/ this is that if we leave things as they are and there's another failure, we'd know exactly which seed broke things.;;;","17/Jun/20 15:31;maedhroz;After a bit more digging, it seems like the seed used in the failing case above (9823169134884L), only triggers failure on {{cassandra-3.11}} and {{trunk}}. For some reason, it doesn't affect {{cassandra-3.0}}.;;;","17/Jun/20 17:30;maedhroz;So {{CorruptedSSTablesCompactionsTest}} was inserting rows with invalid {{LongType}} partition keys (i.e. keys with length 1, rather than 0 or 8). That wasn't really a problem by itself, but the seed {{9823169134884L}} somehow generated some duplicate clusterings, and when {{DuplicateRowChecker}} is notified of the partition closing in {{onPartitionClose()}}, it [tries to print|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/transform/DuplicateRowChecker.java#L93] a human-readable partition key, which of course fails validation. Simply fixing {{CorruptedSSTablesCompactionsTest}} to generate valid partition keys seems to solve the problem.


||3.0||3.11||trunk||
|[patch|https://github.com/apache/cassandra/pull/638/commits/17a7842dd6f71935f8e5c5b8f7c0a1dd7e85c566]|[patch|https://github.com/apache/cassandra/pull/639]|[patch|https://github.com/apache/cassandra/pull/640]|
|[utest|https://app.circleci.com/pipelines/github/maedhroz/cassandra/8/workflows/c4704991-07c8-473b-b99e-97d93b4c5f90]|[utest|https://app.circleci.com/pipelines/github/maedhroz/cassandra/9/workflows/14c42f46-bb04-488f-a2d8-2718d600b848]|[utest|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-15879-trunk]|;;;","17/Jun/20 17:56;maedhroz;{{SASIIndexTest.testInsertingIncorrectValuesIntoAgeIndex}} is already failing in {{cassandra-3.11}}, as reported by CASSANDRA-15881.;;;","18/Jun/20 00:36;djoshi;LGTM. [~marcuse] any thoughts?;;;","18/Jun/20 08:12;marcuse;+1;;;","18/Jun/20 14:53;maedhroz;[~marcuse][~djoshi] Thanks for the review. Let me know if you need anything else before committing.;;;","23/Jun/20 18:01;djoshi;Committed to [trunk|https://github.com/apache/cassandra/commit/83685418f9061c08af7e59a5b88d1ea14de5c2a9], [3.0|https://github.com/apache/cassandra/commit/c8a40b8780f4aeb5992dc19fc5fd2cfb5570528f] and [3.11|https://github.com/apache/cassandra/commit/83685418f9061c08af7e59a5b88d1ea14de5c2a9]. Thank you for your contribution [~maedhroz] and review [~marcuse].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ec2Snitch fails on upgrade in legacy mode,CASSANDRA-15878,13311749,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adejanovski,adejanovski,adejanovski,16/Jun/20 15:12,29/Jun/20 16:26,13/Jul/23 08:39,29/Jun/20 16:26,4.0,4.0-beta1,,,,Legacy/Distributed Metadata,,,,1,,,,"CASSANDRA-7839 changed the way the EC2 DC/Rack naming was handled in the Ec2Snitch to match AWS conventions.

The ""legacy"" mode was introduced to allow upgrades from Cassandra 3.0/3.x and keep the same naming as before (while the ""standard"" mode uses the new naming convention).

When performing an upgrade in the us-west-2 region, the second node failed to start with the following exception:

 
{code:java}
ERROR [main] 2020-06-16 09:14:42,218 Ec2Snitch.java:210 - This ec2-enabled snitch appears to be using the legacy naming scheme for regions, but existing nodes in cluster are using the opposite: region(s) = [us-west-2], availability zone(s) = [2a]. Please check the ec2_naming_scheme property in the cassandra-rackdc.properties configuration file for more details.
ERROR [main] 2020-06-16 09:14:42,219 CassandraDaemon.java:789 - Exception encountered during startup
java.lang.IllegalStateException: null
	at org.apache.cassandra.service.StorageService.validateEndpointSnitch(StorageService.java:573)
	at org.apache.cassandra.service.StorageService.checkForEndpointCollision(StorageService.java:530)
	at org.apache.cassandra.service.StorageService.prepareToJoin(StorageService.java:800)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:659)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:610)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:373)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:650)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:767)
{code}
 

The exception leads back to [this piece of code|https://github.com/apache/cassandra/blob/cassandra-4.0-alpha4/src/java/org/apache/cassandra/locator/Ec2Snitch.java#L183-L185].

After adding some logging, it turned out the DC name of the first upgraded node was considered invalid as a legacy one:
{code:java}
INFO  [main] 2020-06-16 09:14:42,216 Ec2Snitch.java:183 - Detected DC us-west-2
INFO  [main] 2020-06-16 09:14:42,217 Ec2Snitch.java:185 - dcUsesLegacyFormat=false / usingLegacyNaming=true
ERROR [main] 2020-06-16 09:14:42,217 Ec2Snitch.java:188 - Invalid DC name us-west-2
{code}
 

The problem is that the regex that's used to identify legacy dc names will match both old and new names : 
{code:java}
boolean dcUsesLegacyFormat = !dc.matches(""[a-z]+-[a-z].+-[\\d].*"");
{code}
Knowing that some dc names didn't change between the two modes (us-west-2 for example), I don't see how we can use the dc names to detect if the legacy mode is being used by other nodes in the cluster.
  
 The rack names on the other hand are totally different in the legacy and standard modes and can be used to detect mismatching settings.
  
 My go to fix would be to drop the check on datacenters by removing the following lines: [https://github.com/apache/cassandra/blob/cassandra-4.0-alpha4/src/java/org/apache/cassandra/locator/Ec2Snitch.java#L172-L186]",,adejanovski,arodrime,jeromatron,jolynch,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-7839,,,,,,,,,,,,,,,,,,,,,,,0.0,adejanovski,,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jun 29 16:26:56 UTC 2020,,,,,,,All,,,,,,"0|z0fwio:",9223372036854775807,,,,mck,,,,Critical,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/6fc8920889e8537a1f56f45e6c966b3d18325fbb,,,,,,,,,unit tests added,,,,,"26/Jun/20 16:09;adejanovski;I've pushed a commit with a potential fix and updated unit tests: [https://github.com/apache/cassandra/pull/653/commits/7a53846a217102143ae56416ebcf534c59de93e6]

[~jolynch], I'd love to have your input on this since you reviewed the original ticket that brought this change.

Are there cases I'm not seeing where the dc name would be useful to check?;;;","27/Jun/20 21:14;jolynch;Hi [~adejanovski] thanks for the mention! I will try to page back in context on this change and review this weekend, feel free to put me as a reviewer (although I see mck already got to it :-) ).;;;","28/Jun/20 10:17;mck;bq.  feel free to put me as a reviewer (although I see mck already got to it  ).

Best with your input on this [~jolynch], as you've got a better idea on the original work.
my two cents, is it would help if the unit tests could cover all scenarios, including those where we're dependent on racks to identify legacy, e.g. ""us-west-2"". ;;;","28/Jun/20 23:58;jolynch;[~adejanovski] I agree with you that the rack check is sufficient to determine that we have an accidental mixed mode cluster, but I think we can salvage the datacenter check as well which imo provides a nice second layer of defense against a very easy to make mistake. Specifically, if we see a datacenter with no number (e.g. just ""us-east"" or just ""eu-west"", and usingLegacyNaming is set to False then we could reject it as invalid and raise an exception. Yes, if users had custom suffixes that included numbers we would miss it, but then the rack verification would catch it.

I'm fine with the proposed patch as I agree the rack checks are sufficient, but I'd also be fine with fixing the datacenter check to be:
{noformat}
boolean dcUsesLegacyFormat = dc.matches(""[a-z]+-[a-z]+$"");
if (dcUsesLegacyFormat != usingLegacyNaming)
    valid = false;
{noformat}
So for example if someone started up with usingLegacyNaming=false, and the node sees another node with datacenter ""us-east"" or ""eu-west"", then we fail with the error to prevent a split brained cluster. If someone had a custom datacenter suffix of -1, we would be foiled, and the rack check would have to catch the operator error.;;;","29/Jun/20 06:00;adejanovski;Thanks for the feedback [~jolynch].

I've added back the DC name check and adjusted it as suggested. I provided accurate informations on which case we're actually covering now with this check.

[~mck], I've reintroduced the unit tests that I had deleted and changed the assertions where needed.

You can check the changes here: [https://github.com/apache/cassandra/compare/trunk...thelastpickle:CASSANDRA-15878]

Let me know what you think.;;;","29/Jun/20 15:46;mck;Patch looks good to me. Move the ticket into 'patch submitted' if you're ready for me to commit it.;;;","29/Jun/20 16:26;mck;Committed as [6fc8920889e8537a1f56f45e6c966b3d18325fbb |https://github.com/apache/cassandra/commit/6fc8920889e8537a1f56f45e6c966b3d18325fbb].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Followup on CASSANDRA-15600,CASSANDRA-15877,13311570,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,15/Jun/20 22:06,23/Jun/20 19:20,13/Jul/23 08:39,23/Jun/20 19:19,4.0,4.0-beta1,,,,Feature/Virtual Nodes,,,,0,,,,As part of CASSANDRA-15600  generateSplits method replaced the generateRandomTokens for NoReplicationAwareTokenAllocator.  generateSplits should be used also in ReplicationAwareTokenAllocator.,,adelapena,bereng,brandon.williams,e.dimitrova,jeromatron,kornelpal,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jun/20 15:59;e.dimitrova;Screen Shot 2020-06-12 at 3.21.18 PM.png;https://issues.apache.org/jira/secure/attachment/13005816/Screen+Shot+2020-06-12+at+3.21.18+PM.png",,,,,,,,,,,,,,1.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jun 23 19:19:56 UTC 2020,,,,,,,All,,,,,,"0|z0fvfk:",9223372036854775807,,,,adelapena,bereng,brandon.williams,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/b85ede633c493367901de2ebac85c4cd85c31567,,,,,,,,,https://jira.apache.org/jira/browse/CASSANDRA-15877?focusedCommentId=17140064&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17140064,,,,,"15/Jun/20 22:13;e.dimitrova;[ [branch |https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15600-followup] ] [ [Java8 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/216/workflows/2e1ae6fe-6b04-4099-a550-8e069cd030cb] ] [ [Java11 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/216/workflows/f98e8ecf-8852-43a6-90aa-c3078418cac1] ] [ [pull request |https://github.com/ekaterinadimitrova2/cassandra/pull/44] ]

*Comments on the CI run:*
 - Unit tests Java8
testNoTreesRetainedAfterDifference - org.apache.cassandra.repair.RepairJobTest - failure already presented on trunk, CASSANDRA-15872
 - Unit tests Java11
testTimeout - org.apache.cassandra.net.ConnectionTest - looks unrelated
 - CQLSH tests Java8
test_compression_cql_options - compression_test.TestCompression - looks unrelated
 - DTests Java8
test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications,
test_move_single_node_localhost - pushed_notifications_test.TestPushedNotifications - already on trunk, missed after a patch committed last week, contacted the author
test_disk_balance_after_joining_ring_lcs - disk_balance_test.TestDiskBalance - presented on trunk already
 - DTests Java11
test_speculative_data_request - read_repair_test.TestSpeculativeReadRepair - CASSANDRA-15792
test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications, test_move_single_node_localhost - pushed_notifications_test.TestPushedNotifications - already on trunk, missed after a patch committed last week, contacted the author

*The first commit is the actual patch. The second commit applies our custom CircleCI config and shouldn't be committed! Kept for test purposes.*

 ;;;","15/Jun/20 23:26;kornelpal;Thank you [~e.dimitrova], for further improving on the previous change and even fixing a bug that previously resulted in a flaky unit test.

I've noticed that you added a new NoReplicationTokenAllocatorTest.failed field with assertions, but it does not seem to be set to true anywhere. Could you please check whether it is needed.

After the change from random tokens to splits, TokenAllocatorDiagnostics.randomTokensGenerated does not seem to be used anymore. Could you please consider removing it, if not needed.;;;","16/Jun/20 19:09;e.dimitrova;Thank you for the review [~kornelpal]!

_After the change from random tokens to splits, TokenAllocatorDiagnostics.randomTokensGenerated does not seem to be used anymore. Could you please consider removing it, if not needed._

I think actually I should create new method probably for an event to be published. I will check what is needed a bit later or Thursday (off tomorrow). Good catch!

_I've noticed that you added a new NoReplicationTokenAllocatorTest.failed field with assertions, but it does not seem to be set to true anywhere. Could you please check whether it is needed._

I think this assertion is actually not needed anymore

 ;;;","18/Jun/20 23:46;e.dimitrova;[ [branch |https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15600-followup]] [ [Java8 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/222/workflows/46515d14-9be4-4edb-8db4-5930312d2bfb]] [ [Java11 CI |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/222/workflows/11202c7e-6c94-4d4e-bbbf-9e2fa9791ad0]] [ [pull request |https://github.com/ekaterinadimitrova2/cassandra/pull/44]]

Failing dtests not related to this patch but I didn't find tickets so probably good to follow up on them:

JAVA 11:

test_resumable_rebuild - rebuild_test.TestRebuild - not related but I didn't find a ticket so good to follow up on it probably

test_short_read - consistency_test.TestConsistency - not related but I didn't find a ticket so good to follow up on it probably

JAVA 8:

test_multiple_repair - repair_tests.incremental_repair_test.TestIncRepair - not related but I didn't find a ticket so good to follow up on it probably

The rest of the dtests failures are handled under [CASSANDRA-15677|https://issues.apache.org/jira/browse/CASSANDRA-15677] 

Screenshot added to prove the fixed unit test is not flaky anymore. 

*The first commit is the actual patch. The second commit applies our custom CircleCI config and shouldn't be committed! Kept for test purposes.*

*The third commit is to add event for new split generations plus removal of unused code.*

 ;;;","19/Jun/20 09:50;bereng;[~e.dimitrova] I had some cycles so wanted to help with the review here. The tests you point out are pretty stable on ci-cassandra see [here|https://ci-cassandra.apache.org/job/Cassandra-trunk/176/testReport/dtest-novnode.repair_tests.incremental_repair_test/TestIncRepair/test_multiple_repair/history/], [here|https://ci-cassandra.apache.org/job/Cassandra-trunk/176/testReport/dtest.rebuild_test/TestRebuild/test_resumable_rebuild/history/] and [here|https://ci-cassandra.apache.org/job/Cassandra-trunk/176/testReport/dtest-novnode.consistency_test/TestConsistency/test_short_read/history/]. So I would suggest you run those locally just to make sure. Otherwise lgtm +1;;;","20/Jun/20 00:54;e.dimitrova;Thanks [~Bereng]

All three fail both on trunk and with my patch.

For those that are v11, I think just Jenkins runs the test suite only for Java 8, as far as I remember?

For the one failing in Java 8, I saw it this week also with other CI runs and I am not sure why it does not fail in Jenkins.

I will raise tickets for the failing tests on Monday but I believe this patch should be ready for commit.

[~brandon.williams], can you check and commit this patch, please, if you don't have any concerns, of course? 

 ;;;","22/Jun/20 14:22;brandon.williams;Did you see  the comments that Andres left on your PR?;;;","23/Jun/20 03:01;e.dimitrova;[~adelapena]'s comments are addressed in a new separate
 [commit|https://github.com/ekaterinadimitrova2/cassandra/pull/44/commits/a4dac9d33b86325f07ea722d592824d12d2e40ba].

I didn't run a new CI as they are formatting changes. 

Separate tickets for the failing tests, not related to this patch were opened:

*JAVA 11:*

_test_resumable_rebuild - rebuild_test.TestRebuild_ - CASSANDRA-15892

_test_short_read - consistency_test.TestConsistency_ - CASSANDRA-15893

*JAVA 8:*

_test_multiple_repair - repair_tests.incremental_repair_test.TestIncRepair_ - CASSANDRA-15894

 

 ;;;","23/Jun/20 10:00;adelapena;The changes look good to me, +1;;;","23/Jun/20 18:13;e.dimitrova;Thanks [~adelapena]. Can you or [~brandon.williams] commit it, please?
I am not a committer. Thanks in advance :) ;;;","23/Jun/20 19:19;brandon.williams;Committed, thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MemoryOutputStream overflow on large bloom filter,CASSANDRA-15869,13310616,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,jasonstack,jasonstack,10/Jun/20 10:16,03/Jan/21 17:03,13/Jul/23 08:39,12/Jun/20 14:17,4.0,4.0-beta1,,,,Local/SSTable,,,,0,,,,"Since CASSANDRA-9067, Cassandra will use {{MemoryOutputStream}} to reconstruct BF Memory without re-ordering bytes, see {{OffsetBitSet#deserialize}}. But {{MemoryOutputStream}} use {{INT}} to track position and will overflow when BF size exceeds 2GB.
{code:java|title=stacktrace}
error: Illegal bounds [-2147483648..-2147483584); size: 4588588016
-- StackTrace --
java.lang.AssertionError: Illegal bounds [-2147483648..-2147483584); size: 4588588016
	at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:185)
	at org.apache.cassandra.io.util.Memory.setBytes(Memory.java:138)
	at org.apache.cassandra.io.util.MemoryOutputStream.write(MemoryOutputStream.java:45)
{code}",,jasonstack,jeromatron,,,,,,,,,,"jasonstack opened a new pull request #620:
URL: https://github.com/apache/cassandra/pull/620


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Jun/20 05:12;githubbot;600","jasonstack closed pull request #620:
URL: https://github.com/apache/cassandra/pull/620


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Jun/20 18:11;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-9067,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,Performance Regression Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jun 12 15:03:53 UTC 2020,,,,,,,All,,,,,,"0|z0fpk8:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/7cdad3ce61664cf2ffac75b6e537c910e573754c,,,,,,,,,"Large sstable can be loaded again.

 

CircleCi: [https://circleci.com/workflow-run/69685b9a-f356-46ef-939f-851cc1d29a4f]",,,,,"10/Jun/20 13:19;jasonstack;btw, this is failing for 500GB sstable during internal stress testing...;;;","12/Jun/20 07:26;jasonstack;[~brandon.williams] do you mind reviewing?;;;","12/Jun/20 14:17;brandon.williams;Thanks, committed.;;;","12/Jun/20 15:03;jasonstack;thank you;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flaky dtest hintedhandoff_test.py::TestHintedHandoffConfig::test_hintedhandoff_setmaxwindow,CASSANDRA-15865,13310386,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,samt,samt,09/Jun/20 12:25,21/Dec/20 09:29,13/Jul/23 08:39,23/Oct/20 04:34,4.0,4.0-beta3,,,,Test/dtest/python,,,,0,,,,"I've seen this fail a couple of times under JDK11, when it doesn't appear to be related to the changes under test.

 

 ",,aholmber,bereng,brandon.williams,Gerrrr,jasonstack,jmckenzie,marcuse,Ottermad,samt,,,"bereng opened a new pull request #101:
URL: https://github.com/apache/cassandra-dtest/pull/101


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Oct/20 07:54;githubbot;600","bereng commented on pull request #101:
URL: https://github.com/apache/cassandra-dtest/pull/101#issuecomment-709032535


   [CI](https://ci-cassandra.apache.org/job/Cassandra-devbranch/111/)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Oct/20 09:23;githubbot;600","bereng closed pull request #101:
URL: https://github.com/apache/cassandra-dtest/pull/101


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Oct/20 04:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,CASSANDRA-16094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Oct/20 09:50;bereng;logsGoodNBad.zip;https://issues.apache.org/jira/secure/attachment/13013909/logsGoodNBad.zip","22/Oct/20 10:26;bereng;nodeGoodNBadTrace.zip;https://issues.apache.org/jira/secure/attachment/13013971/nodeGoodNBadTrace.zip",,,,,,,,,,,,,2.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Oct 23 04:33:47 UTC 2020,,,,,,,All,,,,,,"0|z0fo54:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,CI in PR. The only hints failure is unrelated and fails also on ci-cass.,,,,,"09/Jun/20 12:34;samt;I haven't dug into it, but at first glance it looks like there could be a problem with the dtest:

{code:python}
        for node in node1, node2:
            res = self._launch_nodetool_cmd(node, 'statushandoff')
            assert 'Hinted handoff is running' == res.rstrip()

        res = self._launch_nodetool_cmd(node, 'getmaxhintwindow')
        assert 'Current max hint window: 300000 ms' == res.rstrip()
        self._do_hinted_handoff(node1, node2, True)
        node1.start(wait_other_notice=True)
        self._launch_nodetool_cmd(node, 'setmaxhintwindow 1')
        assert 'Current max hint window: 1 ms' == res.rstrip()
        self._do_hinted_handoff(node1, node2, False, keyspace='ks2')
{code}

The call to {{setmaxhintwindow}} to 1ms uses {{node}}, not {{node1}} which could be affected by the ordering of the output from {{nodetool statushandoff}}. {{_do_hinted_handoff}} writes to {{node1}} when {{node2}} is shutdown, so if the max window is set on {{node2}} by mistake, the test will fail as per the reported error:

{code}
self = <hintedhandoff_test.TestHintedHandoffConfig object at 0x7fd143d926a0>

    @since('4.0')
    def test_hintedhandoff_setmaxwindow(self):
        """"""
            Test global hinted handoff against max_hint_window_in_ms update via nodetool
            """"""
        node1, node2 = self._start_two_node_cluster({'hinted_handoff_enabled': True, ""max_hint_window_in_ms"": 300000})
    
        for node in node1, node2:
            res = self._launch_nodetool_cmd(node, 'statushandoff')
            assert 'Hinted handoff is running' == res.rstrip()
    
        res = self._launch_nodetool_cmd(node, 'getmaxhintwindow')
        assert 'Current max hint window: 300000 ms' == res.rstrip()
        self._do_hinted_handoff(node1, node2, True)
        node1.start(wait_other_notice=True)
        self._launch_nodetool_cmd(node, 'setmaxhintwindow 1')
        res = self._launch_nodetool_cmd(node, 'getmaxhintwindow')
        assert 'Current max hint window: 1 ms' == res.rstrip()
>       self._do_hinted_handoff(node1, node2, False, keyspace='ks2')

hintedhandoff_test.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
hintedhandoff_test.py:76: in _do_hinted_handoff
    query_c1c2(session, n, ConsistencyLevel.ONE, tolerate_missing=True, must_be_missing=True)
tools/data.py:40: in query_c1c2
    assertions.assert_length_equal(rows, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

object_with_length = [Row(c1='value1', c2='value2')], expected_length = 0

    def assert_length_equal(object_with_length, expected_length):
        """"""
        Assert an object has a specific length.
        @param object_with_length The object whose length will be checked
        @param expected_length The expected length of the object
    
        Examples:
        assert_length_equal(res, nb_counter)
        """"""
        assert len(object_with_length) == expected_length, \
            ""Expected {} to have length {}, but instead is of length {}""\
>           .format(object_with_length, expected_length, len(object_with_length))
E       AssertionError: Expected [Row(c1='value1', c2='value2')] to have length 0, but instead is of length 1

tools/assertions.py:269: AssertionError
{code};;;","09/Jun/20 18:44;jmckenzie;Moving to beta as it's a) test only (i.e. not product), b) flaky, and c) looks like it's JDK11 related.;;;","01/Oct/20 16:25;aholmber;[~Ottermad] are you still looking at this?;;;","07/Oct/20 08:05;Ottermad;[~aholmber] I'm afraid I'm not I'll move it out of in progress;;;","09/Oct/20 14:32;brandon.williams;{code}
test_hintedhandoff_setmaxwindow failed and was not selected for rerun.
        <class 'AssertionError'>
        Expected [Row(c1='value1', c2='value2')] to have length 0, but instead is of length 1
        [<TracebackEntry /home/ubuntu/cassandra-dtest/hintedhandoff_test.py:146>, <TracebackEntry /home/ubuntu/cassandra-dtest/hintedhandoff_test.py:76>, <TracebackEntry /home/ubuntu/cassandra-dtest/tools/data.py:40>, <TracebackEntry /home/ubuntu/cassandra-dtest/tools/assertions.py:269>]

{code};;;","15/Oct/20 07:58;bereng;Stealing this one from [~brandon.williams] I hope you don't mid :-)

I would argue {{statushandoff}}'s output is not being used as per the test's code unless I am missing sthg. In fact looking at the loop {{node}} stays set to {{node2}} as this is the last value the initial loop leaves it to. So the HH setting, along the rest of operations, are being sent to {{node2}} imo.

I couldn't repro as much as I tried but I am putting a PR up. It only makes sure the HH of 1m is effective on all nodes before proceding.;;;","15/Oct/20 12:30;brandon.williams;Go for it. :)

bq. So the HH setting, along the rest of operations, are being sent to node2 imo.

Sam's comment was similar, and I posted the trace above with a patch like the PR applied, since that was clearly wrong.  When I dug in it looked like node2 flapped once after shutdown which was causing this.  I can usually repro in a few hundred runs on j11, I'll see what happens.;;;","16/Oct/20 12:56;brandon.williams;I'm afraid as I suspected, that's a swing and a miss, [~Bereng].  It still fails as before, even though this part was obviously wrong.;;;","19/Oct/20 04:19;bereng;I'll try to repro by leaving it running overnight on my laptop. Let's see if between the 2 of us we get somewhere... I'd hate to bounce it back to you but if it doesn't I can only stare at the code a bit longer but not much more I'm afraid.;;;","21/Oct/20 04:05;bereng;So I managed to repro once laving it overnight 2 days ago. Staring at the code I added some debug in {{StorageProxy.shouldHint()}} which made it not repro anymore. So I guess I am in the right area of the code but can't repro anymore. I'll look into it a bit more. #collaborating;;;","21/Oct/20 09:33;bereng;Some progress. The only failure's logs look like 

{noformat}
grep -ri ""is now"" node1_debug.log
INFO  [GossipStage:1] 2020-10-19 15:34:07,204 Gossiper.java:1235 - Node /127.0.0.2:7000 is now part of the cluster
INFO  [GossipStage:1] 2020-10-19 15:34:07,264 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:34:19,054 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:34:31,968 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:04,652 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:04,653 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:11,715 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:35:11,719 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:24,727 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:35:24,762 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP

grep -ri ""is now"" node2_debug.log
INFO  [GossipStage:1] 2020-10-19 15:34:07,930 Gossiper.java:1235 - Node /127.0.0.1:7000 is now part of the cluster
INFO  [GossipStage:1] 2020-10-19 15:34:07,950 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:34:31,988 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:34:45,688 Gossiper.java:1211 - InetAddress /127.0.0.1:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:35:04,633 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:04,652 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:24,791 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:25,316 Gossiper.java:1211 - InetAddress /127.0.0.1:7000 is now DOWN
{noformat}

whereas all the other million non-failing runs diplay
{noformat}
grep -ri ""is now"" node1_debug.log
INFO  [GossipStage:1] 2020-10-19 15:35:40,341 Gossiper.java:1235 - Node /127.0.0.2:7000 is now part of the cluster
INFO  [GossipStage:1] 2020-10-19 15:35:40,391 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:35:52,169 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:36:05,123 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:37,729 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:37,729 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:37,729 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:44,959 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:36:57,732 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP

grep -ri ""is now"" node2_debug.log
INFO  [GossipStage:1] 2020-10-19 15:35:41,061 Gossiper.java:1235 - Node /127.0.0.1:7000 is now part of the cluster
INFO  [GossipStage:1] 2020-10-19 15:35:41,094 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:05,150 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:18,807 Gossiper.java:1211 - InetAddress /127.0.0.1:7000 is now DOWN
INFO  [GossipStage:1] 2020-10-19 15:36:37,710 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:37,728 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:57,756 Gossiper.java:1193 - InetAddress /127.0.0.1:7000 is now UP
INFO  [GossipStage:1] 2020-10-19 15:36:58,660 Gossiper.java:1211 - InetAddress /127.0.0.1:7000 is now DOWN
{noformat}

We can see node2 behaves exactly the same whereas node1 displays an extra 'DOWN'. Matching timestamps this is what's going on in the logs for a bad run
{noformat}
DEBUG [GossipStage:1] 2020-10-19 15:35:11,626 MigrationManager.java:89 - Not pulling schema from /127.0.0.2:7000, because schema versions match (7e1669d0-936a-331b-8aca-b6a47709bc60)
INFO  [GossipStage:1] 2020-10-19 15:35:11,715 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
DEBUG [GossipStage:1] 2020-10-19 15:35:11,716 FailureDetector.java:354 - Forcing conviction of /127.0.0.2:7000
DEBUG [GossipStage:1] 2020-10-19 15:35:11,719 Gossiper.java:1192 - removing expire time for endpoint : /127.0.0.2:7000
INFO  [GossipStage:1] 2020-10-19 15:35:11,719 Gossiper.java:1193 - InetAddress /127.0.0.2:7000 is now UP
DEBUG [GossipStage:1] 2020-10-19 15:35:11,719 MigrationManager.java:89 - Not pulling schema from /127.0.0.2:7000, because schema versions match (7e1669d0-936a-331b-8aca-b6a47709bc60)

DEBUG [GossipStage:1] 2020-10-19 15:35:23,368 Gossiper.java:1480 - Shadow request received, adding all states
DEBUG [GossipStage:1] 2020-10-19 15:35:24,727 Gossiper.java:471 - Convicting /127.0.0.2:7000 with status shutdown - alive true
INFO  [GossipStage:1] 2020-10-19 15:35:24,727 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
DEBUG [GossipStage:1] 2020-10-19 15:35:24,728 FailureDetector.java:354 - Forcing conviction of /127.0.0.2:7000
DEBUG [GossipStage:1] 2020-10-19 15:35:24,729 Gossiper.java:1142 - Clearing interval times for /127.0.0.2:7000 due to generation change
INFO  [GossipStage:1] 2020-10-19 15:35:24,729 Gossiper.java:1233 - Node /127.0.0.2:7000 has restarted, now UP
{noformat}

and this is what happens for a good run:
{noformat}
DEBUG [GossipStage:1] 2020-10-19 15:36:44,713 MigrationManager.java:89 - Not pulling schema from /127.0.0.2:7000, because schema versions match (4f3d62af-22c5-3886-8c0b-c5f1b95fc403)
INFO  [GossipStage:1] 2020-10-19 15:36:44,959 Gossiper.java:1211 - InetAddress /127.0.0.2:7000 is now DOWN
DEBUG [GossipStage:1] 2020-10-19 15:36:44,960 FailureDetector.java:354 - Forcing conviction of /127.0.0.2:7000

DEBUG [GossipStage:1] 2020-10-19 15:36:56,647 Gossiper.java:1480 - Shadow request received, adding all states
DEBUG [GossipStage:1] 2020-10-19 15:36:57,725 Gossiper.java:1142 - Clearing interval times for /127.0.0.2:7000 due to generation change
INFO  [GossipStage:1] 2020-10-19 15:36:57,725 Gossiper.java:1233 - Node /127.0.0.2:7000 has restarted, now UP
{noformat}

Looking at {{Gossiper}} code and trying infer what's going on looks like node2 is reported UP/DOWN an extra time but I can't infer what's happening from only looking at the logs. I have added tracing level to the test and hope to repro overnight.

I am attaching a  zip [^logsGoodNBad.zip]  for the good and bad runs for the record.;;;","22/Oct/20 10:29;bereng;Managed to repro again with TRACE enabled. {{FailureDetector}} seems to toggle the node down/up in a rapid succession and that might play into the picture. I haven't been able to pinf it down yet how does data reach node2. Attaching  [^nodeGoodNBadTrace.zip] for the record.;;;","22/Oct/20 10:47;marcuse;[~Bereng] I only had a very quick look, but it seems this could be CASSANDRA-16094 ?;;;","22/Oct/20 10:51;bereng;I bet it is. I have been seeing the node marked down, ECHO requests going there after the fact, listeners on the ECHO reacting to that reply etc ;;;","22/Oct/20 13:29;brandon.williams;I went ahead and committed Berenguer's dtest patch, since that part was obviously wrong.;;;","23/Oct/20 04:33;bereng;[~marcuse] I have been looking into this a bit more as I haven't looked into Gossip code before and I think this is it.

For the record: [Here|https://github.com/krummas/cassandra/blob/890840d40c5c5eb0a37c14dbef09e2ba32e366d0/src/java/org/apache/cassandra/gms/Gossiper.java#L1186] is where the ECHO sets the node UP again on the callback. That makes the downtime for that node be 0 and  {{shouldHint()}} logic in {{SotrageProxy}} send hints to it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bootstrap resume and TestReplaceAddress fixes,CASSANDRA-15863,13310172,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,08/Jun/20 15:37,03/Jan/21 17:03,13/Jul/23 08:39,16/Jun/20 17:45,3.0.21,3.11.7,4.0,4.0-beta1,,Consistency/Bootstrap and Decommission,Test/dtest/python,,,0,,,,"This has been [broken|https://ci-cassandra.apache.org/job/Cassandra-trunk/159/testReport/dtest-large.replace_address_test/TestReplaceAddress/test_restart_failed_replace/history/] for ages",,adelapena,bereng,e.dimitrova,jasonstack,maedhroz,,,,,,,"bereng opened a new pull request #76:
URL: https://github.com/apache/cassandra-dtest/pull/76


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jun/20 13:01;githubbot;600","michaelsembwever closed pull request #76:
URL: https://github.com/apache/cassandra-dtest/pull/76


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jun 22 14:29:55 UTC 2020,,,,,,,All,,,,,,"0|z0fmtk:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/eacdfc4978547b8e7be06c9ba9611c29963e6cc2,,,,,,,,,See PR,,,,,"09/Jun/20 13:43;bereng;This seems to be both a test problem and a legit C* problem, so  moving to alpha;;;","11/Jun/20 10:03;bereng;This ticket fixes a number of failures so here's some direction for reviewers:

*test_resume_failed_replace, test_restart_failed_replace_with_reset_resume_state & test_resume_failed_replace*

This test fails waiting for [this|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/transport/Server.java#L164] log trace. This is never reached bc on the test we are failing bootstrap and thus it is being marked IN_PROGRESS. Hence the daemon won't go that far, we [exit|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java#L568] before we reach that point.

The solution is to replace the nodes [without|https://github.com/apache/cassandra-dtest/pull/76/files#diff-271eb822afe096c34193f9071884d8beR482] waiting for that log trace and checking in an [alternative|https://github.com/apache/cassandra-dtest/pull/76/files#diff-271eb822afe096c34193f9071884d8beR485] way the bootstrap status.

 

*test_resume_failed_replace*

Once the above was fixed we would never hit the resume complete [log|https://github.com/apache/cassandra-dtest/pull/76/files#diff-271eb822afe096c34193f9071884d8beR507]. This is bc {{StorageService#resumeBoostrap}} [here|https://github.com/apache/cassandra/pull/622/files#diff-b76a607445d53f18a98c9df14323c7ddR1625] would throw an exception starting the daemon. That exception was being swallowed, now it is getting logged. Also I had to add a native transport [init|https://github.com/apache/cassandra/pull/622/files#diff-b76a607445d53f18a98c9df14323c7ddR1623] to avoid said exception and the daemon to start correctly. I am worried about any side effects of this extra native transport init, so sbdy with a broader knowledge of the codebase should chime in.

 

*test_replace_nonexistent_node, test_replace_first_boot, test_replace_shutdown_node & test_replace_stopped_node*

These in the end turned out to be failures based on the logging messages having changed throughout versions.;;;","16/Jun/20 17:45;brandon.williams;Thanks, committed.  I will note though that your 3.11 branch and beyond would not compile because your call to finishJoiningRing did not include the boolean (which 3.0 does not have.)  I added that on commit.;;;","17/Jun/20 08:01;bereng;Whaaat? impossible :) I had to compile all the branches locally many times to run the dtests locally. I just {{git clean -xfd}} and it compiles perfectly for me. Also i.e. the 4.0 PR has the [right boolean|https://github.com/apache/cassandra/pull/622/files#diff-b76a607445d53f18a98c9df14323c7ddR1620] if I am following you correctly.

Might this be a GH bug? The boolean is present in the [commit|https://github.com/apache/cassandra/pull/622/commits/2d451c68e280ea8ba2e5580ce780d1079e19dfd0#diff-b76a607445d53f18a98c9df14323c7ddR1620] but not in that commit's [patch|https://github.com/apache/cassandra/commit/2d451c68e280ea8ba2e5580ce780d1079e19dfd0.patch]! :mindblown: and scary!;;;","17/Jun/20 16:04;brandon.williams;And indeed, I grabbed the patch.  Also, I don't see it here: https://github.com/apache/cassandra/pull/622/commits/c6b87ee779e3e1e6d74b80eafe48b99175a7af1a#diff-b76a607445d53f18a98c9df14323c7ddR1331

Scary and strange, indeed.;;;","18/Jun/20 07:37;bereng;Ok so after some investigation by a git master friend of mine... That is a merge commit. When you click on GH on the commit if shows you the _diff_ with the topmost parent, hence we get the right code. When you append '.patch' you get the patch for that _commit_, not for the _diff_ as you were seeing before. So... not nice GH, not nice...;;;","22/Jun/20 12:25;adelapena;It seems that 3.0 doesn't merge cleanly into 3.11 after this, there are conflicts in that call to {{StorageService#finishJoiningRing}} and in {{CHANGES.txt}}.;;;","22/Jun/20 13:02;bereng;Probably the GH foxing we found. [~brandon.williams] anything I can help with let me know as I'm not a committer.;;;","22/Jun/20 14:01;brandon.williams;I merged everything up.;;;","22/Jun/20 14:29;adelapena;Great, thanks (y);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mutating sstable component may race with entire-sstable-streaming(ZCS) causing checksum validation failure,CASSANDRA-15861,13309944,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,jasonstack,jasonstack,07/Jun/20 14:05,03/Jan/21 17:02,13/Jul/23 08:39,10/Sep/20 03:01,4.0,4.0-beta3,,,,Consistency/Repair,Consistency/Streaming,Local/Compaction,,0,,,,"Flaky dtest: [test_dead_sync_initiator - repair_tests.repair_test.TestRepair|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/143/testReport/junit/dtest.repair_tests.repair_test/TestRepair/test_dead_sync_initiator/]
{code:java|title=stacktrace}
Unexpected error found in node logs (see stdout for full details). Errors: [ERROR [Stream-Deserializer-127.0.0.1:7000-570871f3] 2020-06-03 04:05:19,081 CassandraEntireSSTableStreamReader.java:145 - [Stream 6f1c3360-a54f-11ea-a808-2f23710fdc90] Error while reading sstable from stream for table = keyspace1.standard1
org.apache.cassandra.io.sstable.CorruptSSTableException: Corrupted: /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-te4ty0r9/test/node3/data0/keyspace1/standard1-5f5ab140a54f11eaa8082f23710fdc90/na-2-big-Statistics.db
	at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.maybeValidateChecksum(MetadataSerializer.java:219)
	at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:198)
	at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:129)
	at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutate(MetadataSerializer.java:226)
	at org.apache.cassandra.db.streaming.CassandraEntireSSTableStreamReader.read(CassandraEntireSSTableStreamReader.java:140)
	at org.apache.cassandra.db.streaming.CassandraIncomingFile.read(CassandraIncomingFile.java:78)
	at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:49)
	at org.apache.cassandra.streaming.messages.IncomingStreamMessage$1.deserialize(IncomingStreamMessage.java:36)
	at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:49)
	at org.apache.cassandra.streaming.async.StreamingInboundHandler$StreamDeserializingTask.run(StreamingInboundHandler.java:181)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Checksums do not match for /home/cassandra/cassandra/cassandra-dtest/tmp/dtest-te4ty0r9/test/node3/data0/keyspace1/standard1-5f5ab140a54f11eaa8082f23710fdc90/na-2-big-Statistics.db
{code}
 

In the above test, it executes ""nodetool repair"" on node1 and kills node2 during repair. At the end, node3 reports checksum validation failure on sstable transferred from node1.
{code:java|title=what happened}
1. When repair started on node1, it performs anti-compaction which modifies sstable's repairAt to 0 and pending repair id to session-id.
2. Then node1 creates {{ComponentManifest}} which contains file lengths to be transferred to node3.
3. Before node1 actually sends the files to node3, node2 is killed and node1 starts to broadcast repair-failure-message to all participants in {{CoordinatorSession#fail}}
4. Node1 receives its own repair-failure-message and fails its local repair sessions at {{LocalSessions#failSession}} which triggers async background compaction.
5. Node1's background compaction will mutate sstable's repairAt to 0 and pending repair id to null via  {{PendingRepairManager#getNextRepairFinishedTask}}, as there is no more in-progress repair.
6. Node1 actually sends the sstable to node3 where the sstable's STATS component size is different from the original size recorded in the manifest.
7. At the end, node3 reports checksum validation failure when it tries to mutate sstable level and ""isTransient"" attribute in {{CassandraEntireSSTableStreamReader#read}}.
{code}
Currently, entire-sstable-streaming requires sstable components to be immutable, because \{{ComponentManifest}}
with component sizes are sent before sending actual files. This isn't a problem in legacy streaming as STATS file length didn't matter.

 

Ideally it will be great to make sstable STATS metadata immutable, just like other sstable components, so we don't have to worry this special case.

I can think of 2 ways:
 # Make STATS mutation as a proper compaction to create hard link on the compacting sstable components with a new descriptor, except STATS files which will be copied entirely. Then mutation will be applied on the new STATS file. At the end, old sstable will be released. This ensures all sstable components are immutable and shouldn't make these special compaction tasks slower.
 # Change STATS metadata format to use fixed length encoding for repair info",,bdeggleston,blerer,dcapwell,djoshi,jasonstack,maedhroz,PuerTea,stefan.miklosovic,zznate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15406,,,,,,,,CASSANDRA-15963,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Sep 10 19:44:13 UTC 2020,,,,,,,All,,,,,,"0|z0flew:",9223372036854775807,,,,bdeggleston,blerer,dcapwell,maedhroz,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/d7a7c9eabc976b1defe9ec5dc912f75d855ea481,,,,,,,,,https://app.circleci.com/pipelines/github/jasonstack/cassandra/306/workflows/27e49813-d93b-49df-9722-737b932710b3,,,,,"15/Jun/20 14:01;jasonstack;[~marcuse] [~djoshi] it looks like you are pretty experienced with compaction code, do you see any issue with first proposal? ;;;","16/Jun/20 23:17;dcapwell;If reading this correctly, I wonder if this should also be a issue with org.apache.cassandra.io.sstable.format.SSTableReader#cloneWithNewSummarySamplingLevel which is called by org.apache.cassandra.io.sstable.IndexSummaryRedistribution; this modifies the summary file in place.;;;","17/Jun/20 06:34;jasonstack;[~dcapwell] you are right. {{IndexSummary}} can definitely cause trouble for entire-sstable-streaming.. Then the only option we have is to apply first approach to {{IndexSummary}} because we can't make {{IndexSummary}} fixed-length encoding..

Or we can consider a lock approach;;;","17/Jun/20 09:07;marcuse;One way could be to mark the sstable compacting while we stream the index summary and sstable metadata components;;;","17/Jun/20 10:02;jasonstack;bq. One way could be to mark the sstable compacting while we stream the index summary and sstable metadata components

if the sstables are already in compacting state, does it mean entire-sstable-streaming will be blocked until compaction is finished? 

It'd be nice to minize the lock scope, so ""critical section"" only include ""metadata mutation"" (rewrite index summary and stats metadata) which should be fast.;;;","18/Jun/20 22:41;dcapwell;I took a quick look and have a few comments

* https://github.com/apache/cassandra/pull/642/files#diff-de503ddc819368b078a86f6d9e3921aeR211-R228. isn't the write async; we are just storing on a buffer to be written later?  Looking at org.apache.cassandra.net.AsyncStreamingOutputPlus#writeFileToChannelZeroCopy it calls channel.writeAndFlush but doesn't look at the future, so the write is async.  
* have you done any longevity testing of this?  My fear is that compaction will get blocked while streaming is running which could cause slowness or stability issues.;;;","21/Jun/20 17:33;jasonstack;bq. https://github.com/apache/cassandra/pull/642/files#diff-de503ddc819368b078a86f6d9e3921aeR211-R228. isn't the write async; we are just storing on a buffer to be written later? Looking at org.apache.cassandra.net.AsyncStreamingOutputPlus#writeFileToChannelZeroCopy it calls channel.writeAndFlush but doesn't look at the future, so the write is async.

{{writeFileToChannelZeroCopy}} is async, but if I remember correctly about unix file system: once a file is opened, reader won't be affected by file deletion or rewrite. So when the synchronized block completes, all component file-channels are already opened and in-sync with {{ComponentManifest}}, even if they are not flushed from netty outbound buffer to kernel.

I agree with you that the atomicity should be made more obvious rather than relying on underlying FS. I will find a cleaner approach.

bq. have you done any longevity testing of this? My fear is that compaction will get blocked while streaming is running which could cause slowness or stability issues.

Not yet, ticket is still ""in-progress"".  It'd be nice to reuse the tests did in CASSANDRA-14556..

bq. Make STATS mutation as a proper compaction to create hard link on the compacting sstable components with a new descriptor, except STATS files which will be copied entirely. Then mutation will be applied on the new STATS file. At the end, old sstable will be released. This ensures all sstable components are immutable and shouldn't make these special compaction tasks slower.

I had a [prototype|https://github.com/jasonstack/cassandra/blob/cb9bdaf037fd550b84fe5b7da89f9c56dc729c35/src/java/org/apache/cassandra/db/compaction/StatsMutationCompaction.java#L72] using the hardlink approach which should avoid blocking between compaction and streaming. The only thing I don't like is redistributing index summary every hour will explode sstable generation.. what do you guys think?;;;","22/Jun/20 20:25;dcapwell;bq. writeFileToChannelZeroCopy is async, but if I remember correctly about unix file system: once a file is opened, reader won't be affected by file deletion or rewrite. So when the synchronized block completes, all component file-channels are already opened and in-sync with ComponentManifest, even if they are not flushed from netty outbound buffer to kernel.

Yep, checked and see that each region in netty holds reference to the channel so you are right, will not be impacted by delete.

bq. The only thing I don't like is redistributing index summary every hour will explode sstable generation..

That could have negatives for third party tools like backups since they would look like new sstables; versioning the Statistics.db file would be nice but adds its own complexity as well.


Looking closer at org.apache.cassandra.db.streaming.CassandraOutgoingFile#write, why not take advantage of the fact a FD will be immune to the swap and just create the FD at the start of the method?  This would give you the ability to write the header and the body without worrying about locking.;;;","23/Jun/20 12:51;jasonstack;{quote}Looking closer at org.apache.cassandra.db.streaming.CassandraOutgoingFile#write, why not take advantage of the fact a FD will be immune to the swap and just create the FD at the start of the method? This would give you the ability to write the header and the body without worrying about locking.
{quote}
 

We can acquire the FD inside the lock to avoid accessing a partially written file, then use the FD during streaming.;;;","23/Jun/20 16:33;dcapwell;bq. avoid accessing a partially written file

Don't we write to a tmp file then do a atomic move and replace?  So would we need to worry about a partial file?;;;","23/Jun/20 16:42;jasonstack;{quote}Don't we write to a tmp file then do a atomic move and replace? So would we need to worry about a partial file?
{quote}
For index summary, it deletes first. (I believe the reason for deletion is that index summary file can be large, up to 2GB. It'd be nice to release the old file earlier if it's not used) Of course, we can change it to use temp file..;;;","30/Jun/20 15:41;maedhroz;bq. if the sstables are already in compacting state, does it mean entire-sstable-streaming will be blocked until compaction is finished?

[~jasonstack] What if we just abort the ongoing compaction involving the SSTable we want to stream? (Then we can mark it ourselves for the period including manifest generation, stats streaming, and index summary streaming?)

The danger, I guess, is aborting compactions that are almost done. Two ways around that I can see. One is to try to prioritize ZCS for non-compacting SSTables first. The other is just to fall back to legacy streaming if the SSTable is already compacting. Or we can do both of those things.;;;","30/Jun/20 18:38;maedhroz;[~jasonstack] I thought a bit more about our earlier chat (and had a quick chat w/ [~bdeggleston]), and it seems like the simplest thing might be handling the stats and index summary in slightly different ways.

The STATS component is small. We could just buffer it up, use that buffered size in the manifest, and stream that buffer. It special-cases this component, but we more or less avoid having to reason about the risk of blocking compactions, a repair completing, etc.

For the SUMMARY, we take advantage of the fact that possibly/infrequently delaying the redistribution task isn't a big suboptimal outcome. We have a simple lock that protects it (on {{SSTableRader}}, similar to what you've already mentioned or as a threadsafe set of readers in a central location), i.e. streaming acquires it when the manifest is created and releases it when the index summary completes streaming (where that ""completion"" happens in the non-SSL case isn't 100% clear to me)...and index redistribution acquires it _before_ it creates a transaction in {{getRestributionTransactions()}}, then releases it when the redistribution is complete (so we never have to block a compaction). Streaming might have to deal with a short delay if a redistribution is running, but a.) that doesn't happen that often and b.) the summary (I think) is usually not very large. ({{getRestributionTransactions()}} can ignore streaming SSTables just like it ignores compacting ones.;;;","19/Jul/20 18:53;jasonstack;[~maedhroz] thanks for the suggestions.

bq. (where that ""completion"" happens in the non-SSL case isn't 100% clear to me)

The netty streaming itself is async, but {{CassandraEntireSSTableStreamWriter#write}} is actually blocking because {{AsyncStreamingOutputPlus#flush}} will wait for data being written to network. We don't need to worry about it.

I ended up with sstable read/write lock approach:
* During entire-sstable streaming, {{CassandraOutgoingFile}} will execute the streaming code within the sstable read-lock. So multiple streamings on the same sstable can start at the same time. I think it's fine to block stats-mutation/index-summary redistribution until streaming completion.
* For stats mutation and index summary redistribution, they will perform the component mutation in the sstable write-lock.
* Didn't reuse the synchronization on `tidy.global` because they are used in normal compaction tasks, so I added a separate read-write lock.

bq. simplest thing might be handling the stats an index summary in slightly different ways.

I feel handling stats differently may make it harder to maintain or to reason.;;;","21/Jul/20 21:27;maedhroz;bq. During entire-sstable streaming, CassandraOutgoingFile will execute the streaming code within the sstable read-lock. So multiple streamings on the same sstable can start at the same time. I think it's fine to block stats-mutation/index-summary redistribution until streaming completion.

I'm still looking at the patch itself, but the thing I'm most curious about at a design level is whether holding the SSTable read lock until we write the entirety of the SSTable to the network is safe in the face of a concurrent incremental repair. In other words, how likely is it that an incremental repair already in flight would have to wait a significant period of time to complete with an entire SSTable in the middle of streaming?

We've already talked about the possibility of just buffering the stats component, but if we think that makes things too hard to reason around, what if we instead broke the streaming into mutable vs. immutable components and wrote the mutable components first (then released the read lock)? That might at least reduce the window, and repair couldn't block while the largest components (like the data file, and perhaps index components in the future) are streaming.

WDYT?

CC [~bdeggleston];;;","21/Jul/20 22:58;bdeggleston;I don't think introducing a lock here is going to work. The incremental repair concern is an issue, but I'm more concerned about this freezing up compaction. If an outgoing stream is taking a really long time for some reason, any compaction task trying to mutate the level of that sstable will be blocking a compaction thread waiting to acquire that lock. There typically aren't a lot of compaction executors (2-8 if auto configured, probably no more than 4 in most cases), so a few of these would noticably constrain compaction throughput, or stop it entirely.;;;","23/Jul/20 17:01;jasonstack;Updated the patch to load stats component into memory, so that entire-sstable streaming will not block LCS and incremental repair..

 

If we want to reduce the blocking time for index summary redistribution, we can consider:
 * writing new index summary to a temp file and replacing the old file atomically; at the beginning of streaming, open all file channel instances which still point to the old files (this is file system dependent).
 * writing new index summary to a temp file and replacing the old file atomically; on the streaming side, use hard link to make sure it streams the same file.

WDYT?;;;","23/Jul/20 18:13;maedhroz;bq. writing new index summary to a temp file and replacing the old file atomically; on the streaming side, use hard link to make sure it streams the same file

I like this a lot. It could also be used in the stats component case, which at least consolidates our approach to this kind of problem (in general). The {{ComponentManifest}} becomes more of a {{ComponentStreamer}}, given we'd delegate the responsibility for putting bytes on the stream to it.;;;","29/Jul/20 00:23;maedhroz;[~jasonstack] I left a few more minor comments around the PR, but I'm +1 overall at this point. I don't think there's a good alternative to the current approach unless we start trading away disk space to write the new index summary to a temp file and atomic rename (which doesn't even work on all supported operating systems).;;;","29/Jul/20 13:26;jasonstack;[~maedhroz] thanks for the feedback. I have squashed and pushed.

 
There are two types of concurrent component mutations.
* index summary redistribution compaction - deletes index summary and write a new one
* pending repair manager's RepairFinishedCompactionTask - atomic replace old stats with new stats file (delete and rewrite on Windows).

In order to avoid streaming mismatched ComponentManifest and files, now manifest will create hard links
on the mutatable components and stream the hard-linked files instead of the original files which may have been modified.

To prevent creating hard links on partially written index summary or stats file in Windows OS, a read lock is
needed to create hard links and write lock is needed for saving index summary and stats metadata.

With this approach, only saving index summary may block entire-sstable streaming but index summary redistribution is not very frequent. We can get rid of the blocking by writing index summary to a temp file and replace the old summary atomically.
(Note: atomic replace doesn't work on Windows, so we have to delete first)
;;;","30/Jul/20 21:40;bdeggleston;This is pretty close, I just have a few things to address.

1) Orphaned hard links need to be cleaned up on startup.

2) Using the streaming session id for the hard link name, instead of a time uuid, would make debugging some issues easier.

3) ComponentManifest: the changes to this class feel a bit awkward to me. I think it would be cleaner if hard link creation and management was handled by a separate class. It should also be autocloseable so we're not deleting hard links in a finally block.

4) Concurrency: This is much better wrt concurrency, but I think there's still some room for improvement. The main thing I'm concerned about is the nested lock acquisition in {{cloneWithNewSummarySamplingLevel}}. This makes it easier to introduce deadlocks in the future, and we should avoid doing this if we can. In this case, if you could guarantee that no more than 1 index resample can happen at once for a given sstable, the only thing you'd need to synchronize in `cloneWithNewSummarySamplingLevel` is `saveSummary`. If you did that, you could just synchronize hard link creation on `tidy.global`, instead of introducing a new lock.;;;","04/Aug/20 00:23;maedhroz;bq. 1) Orphaned hard links need to be cleaned up on startup.
bq. 2) Using the streaming session id for the hard link name, instead of a time uuid, would make debugging some issues easier.

+1

bq. 3) ComponentManifest: the changes to this class feel a bit awkward to me. I think it would be cleaner if hard link creation and management was handled by a separate class. It should also be autocloseable so we're not deleting hard links in a finally block.

Agree (and commented to this effect) that we should make whatever that class is auto-closable. I'm just not sure what level we want to do this at. The creation of what we're now calling {{ComponentManifest}} might not be simple to break up. We could leave {{ComponentManifest}} the way it was before this patch and have a separate class, let's call it {{ComponentContext}}, that embeds it. The {{ComponentContext}} would only be used on the write side, where it would mostly be responsible for what the manifest doesn't do: provide a channel and file size. There could even be an interface, let's call it {{StreamingComponent}}, which just provides a size and channel, and the {{ComponentContext}} could be an {{Iterable<StreamingComponent>}}. (It seems like this would fit the usage in {{CassandraEntireSSTableStreamWriter}}.) Either way, the receiving side of the streaming logic could continue to deal with just a clean {{ComponentManifest}}, free of things like the unused {{hardLinks}} (which doesn't need to be transient?).;;;","04/Aug/20 00:50;maedhroz;bq. if you could guarantee that no more than 1 index resample can happen at once for a given sstable, the only thing you'd need to synchronize in `cloneWithNewSummarySamplingLevel` is `saveSummary`. If you did that, you could just synchronize hard link creation on `tidy.global`, instead of introducing a new lock.

I think we can guarantee that only one index summary resampling is going on at a time for an SSTable, but not necessarily on the same thread from run to run. What non-final state does the {{synchronized (tidy.global)}} block in {{recloneWithNewSummarySamplingLevel()}} protect? It's probably not the metadata, since that's already a {{TableMetadataRef}} (and effectively volatile). That leaves {{indexSummary}}, which perhaps we cold make {{volatile}}, and all the state used in {{cloneAndReplace()}}...but we could just extend the {{synchronized (tidy.global)}} block to include the latter. Nothing expensive happens inside {{cloneAndReplace()}}, AFAICT.

I tried this locally, just with a quick and dirty substitution in the current wrapper methods for the read and write lock, and it does seem to pass the newly added tests (and fail with locking removed completely).

CC [~jasonstack];;;","11/Aug/20 09:45;jasonstack;bq. 1) Orphaned hard links need to be cleaned up on startup.

If the hard links end with `.tmp`, they will be cleaned up on startup by {{StartupChecks#checkSystemKeyspaceState}}

bq. 2) Using the streaming session id for the hard link name, instead of a time uuid, would make debugging some issues easier.

I think the same streaming plan id is used by different peers. It may fail to create hardlink when streaming the same sstables to different peers in the same stream plan. 

bq. We could leave ComponentManifest the way it was before this patch and have a separate class, let's call it ComponentContext, that embeds it.

+1

bq. In this case, if you could guarantee that no more than 1 index resample can happen at once for a given sstable, the only thing you'd need to synchronize in `cloneWithNewSummarySamplingLevel` is `saveSummary`. If you did that, you could just synchronize hard link creation on `tidy.global`, instead of introducing a new lock.

Agreed with caleb, no more than 1 index resample can happen concurrently for a given sstable as sstable is marked as compacting before resampling.

bq. That leaves indexSummary, which perhaps we cold make volatile, and all the state used in cloneAndReplace()...but we could just extend the synchronized (tidy.global) block to include the latter. Nothing expensive happens inside cloneAndReplace(), AFAICT.

good idea

bq. synchronized (tidy.global)

The old approach was to synchronize entire streaming phase, so I didn't use ""synchronized (tidy.global)"" which may block concurrent compactions. 

But now only hard-link creation is synchronized, using ""synchronized (tidy.global)"" is better than introducing a new lock.
;;;","12/Aug/20 16:34;maedhroz;bq. they will be cleaned up on startup by StartupChecks#checkSystemKeyspaceState

Is it there or in {{CassandraDaemon#setup()}}? Either way, it looks like {{ColumnFamilyStoreTest}} covers the scrub logic already.;;;","15/Aug/20 01:44;maedhroz;[~jasonstack] [~benedict] I [made a pass|https://github.com/maedhroz/cassandra/tree/CASSANDRA-15861-final-summary] at a builder-based approach (to making more of {{SSTableReader}}'s fields {{final}}) based on the [current branch/PR|https://github.com/apache/cassandra/pull/642#discussion_r470073171]. There are some loose ends to tie up, but it does at least make progress toward consolidating the logic that builds the components necessary for reader creation. (It also seems to pass the tests in this PR and things like {{FailingRepairTest}} and {{SSTableReaderTest}} without trouble.);;;","21/Aug/20 12:22;jasonstack;updated the patch based on caleb's builder approach, now dfile/ifile/bf/indexSummary are all final.;;;","25/Aug/20 20:02;bdeggleston;[~jasonstack] it looks like the original commits and some of the review fixes have been squashed together. Can you un-squash them? Squashing like that makes it much more difficult to review incrementally.;;;","26/Aug/20 08:43;jasonstack;[~bdeggleston] I have restored previous commits, sorry for the trouble;;;","28/Aug/20 17:12;bdeggleston;No problem [~jasonstack], this LGTM. I've made 1 small change renaming the 2 {{SSTableReader#mutateAndReloadStats}} implementations to make what you're mutating more obvious, and pushed them [here|https://github.com/bdeggleston/cassandra/tree/CASSANDRA-15861-test]. Assuming a green test run and no objections about the rename, I'll commit once I get the second committer +1;;;","01/Sep/20 06:11;stefan.miklosovic;This clashes with https://issues.apache.org/jira/browse/CASSANDRA-15406 I am working on for a very long time and I havent been able to manage to merge it. There seems to be a clash with some functionality related to how size of files is computed because it is broken and it reports wrong numbers in netstats.

Could somebody verify that this patch is compatible with 15406 and it does not break things? It is pretty frustrating to continuously rewrite already fully prepared and tested code.

The problem with the original code is nicely summarized in this comment downwards and input from Benjamin Lerer https://issues.apache.org/jira/browse/CASSANDRA-15406?focusedCommentId=17181389&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17181389;;;","01/Sep/20 06:23;jasonstack;[~stefan.miklosovic] I took a brief look at the patch in 15406, I think there are just minor superficial conflicts, no compatibility issue.;;;","01/Sep/20 06:32;stefan.miklosovic;Could you elaborate on what needs to be changed specifically in mine code so it will be fully ok again? Are you already sure that your changes are computing sizes in both compressed and uncompressed paths right? (with and without entire sstable streaming);;;","01/Sep/20 06:40;jasonstack;bq. Could you elaborate on what needs to be changed specifically in mine code so it will be fully ok again?

hmm.. some moved codes in {{CassandraOutgoingFiles}}. What are you worried about?

bq. Are you already sure that your changes are computing sizes in both compressed and uncompressed paths right?

this patch is for zero-copy-streaming to avoid partial written files, not about how size is calculated.

The change in {{CassandraStreamHeder}} around compressed size is to restore original behavior (reduce GC) before storege-engine refactoring.;;;","01/Sep/20 06:48;stefan.miklosovic;I understand that this is the most probably just more important patch than my ""percentage tracking"" where I am just accidentally fixing some size-related bug and thats life ... But I would really like to see the test where we are checking this properly because netstats can again report some weird numbers and we are back in square one. The ideal test would look like - generate some sstables compressed / uncompressed and try to stream it in their entirety / without and check that the total sizes to be streamed are equal to sum of sizes of all individual tables. For all 4 combinations. I have checked your PR and I dont see this kind of test and I am worried that it will be not be matching again.;;;","01/Sep/20 13:27;blerer;[~stefan.miklosovic] CASSANDRA-15406 as been going on for so long that I perfectly understand your frustration and the fact that you are worried to go to square one. The good news is that I am reviewer on both patches and I will do my best to ensure that there are no problem between them.
[~jasonstack] found an interesting issue with the missing part in the size calculation. I missed that part by not digging deeper enough in the code history. That would have caused us to reintroduce CASSANDRA-10680. I need to have a new look at that part for CASSANDRA-15406;;;","01/Sep/20 14:53;stefan.miklosovic;Thanks [~blerer], but anyway, a test as I mentioned would be awesome to see when the code / logic which is touching this has changed little bit and we would be sure it is just computed right. The fact that we found that issue as part of 15406 is telling ... It would also simplify a lot my patch because right now I am literally parsing the output of netstats and I track that these numbers do make sense and the total is eventually equal to that sum. I am not so strong in internals so I am not able to write that ""low level"" test on my own. But ultimately it is not about me having things easier, but imho we should really test that and this patch seems to be like a good candidate to do it.;;;","01/Sep/20 15:09;blerer;This part of the code was obviously broken. Having some tests to ensure that it does not happen again makes total sense.;;;","02/Sep/20 04:54;jasonstack;Pushed a unit test to verify ""compressionMetadata"" is used to calculate the transferred size for compressed sstable.;;;","02/Sep/20 17:57;dcapwell;Thanks.  FYI I am testing this patch out by constantly rebuilding (though have to truncate the available range table) while generating load on a cluster, early results looked good but will let you know (streaming doesn't seem to be the easiest thing to monitor atm).;;;","03/Sep/20 00:13;dcapwell;Overall LGTM +1.

I also took this branch and deployed to a 6 node cluster and rebuilt the nodes in a loop to constantly run streaming, everything looked fine on this front.

[~blerer] not merging as I have not seen your review yet;;;","03/Sep/20 02:30;maedhroz;bq. Benjamin Lerer not merging as I have not seen your review yet

We do have 2 committer +1's (from [~bdeggleston] and [~dcapwell]) and one non-committer +1 (me). Do we strictly need [~blerer]'s +1? (To be clear, I'm fine if he wants to look...);;;","03/Sep/20 08:24;blerer;Sorry, [~maedhroz] it took me a bit of time to get to it, I started yesterday to dig into it and I would like to finish it. ;;;","09/Sep/20 15:44;blerer;+1 on my side.;;;","09/Sep/20 23:32;dcapwell;4 +1s, ill start the commit and redo the tests.;;;","10/Sep/20 03:01;dcapwell;PR (used source control link, which we use for commit): https://github.com/apache/cassandra/pull/642

CI results: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15861-trunk-F185BC93-1063-40DC-ADD2-CE06C061DDB4

one of the dtest fails, so reran and got green: https://app.circleci.com/pipelines/github/dcapwell/cassandra/507/workflows/fc1746fd-6568-4f2f-bc84-c7c40c94426c/jobs/2775/parallel-runs/0?filterBy=ALL;;;","10/Sep/20 19:44;jasonstack;Thanks for the review and feedback;;;"
Avoid per-host hinted-handoff throttle being rounded to 0 in large cluster,CASSANDRA-15859,13309878,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,jasonstack,jasonstack,06/Jun/20 17:26,10/Jul/20 20:32,13/Jul/23 08:39,10/Jul/20 13:49,3.0.21,3.11.7,4.0,4.0-beta1,,Consistency/Hints,,,,0,,,,"When ""hinted_handoff_throttle_in_kb"" is sufficiently small or num of nodes in the cluster is sufficiently large, the per-host throttle will be rounded to 0, aka. unthrottled.

 
{code:java|title=HintsDispatchExecutor.java}
int throttleInKB = DatabaseDescriptor.getHintedHandoffThrottleInKB() / nodesCount;
this.rateLimiter = RateLimiter.create(throttleInKB == 0 ? Double.MAX_VALUE : throttleInKB * 1024);
{code}
[trunk-patch|https://github.com/apache/cassandra/pull/616]",,jasonstack,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-5272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jul 10 13:49:46 UTC 2020,,,,,,,All,,,,,,"0|z0fl08:",9223372036854775807,,,,brandon.williams,snazy,,,Low,,1.2.6,,,https://github.com/apache/cassandra/commit/5d44a5080acacfe93aae3f19b7788035dd04cd03,,,,,,,,,circle: https://circleci.com/workflow-run/5dd8c35b-a061-47fc-9848-e8790456a296,,,,,"07/Jul/20 07:08;snazy;+1

Mind backporting it to 3.11 and 3.0?;;;","10/Jul/20 09:43;jasonstack;|patch|circle|
| [trunk|https://github.com/apache/cassandra/pull/616/files] | [ci|https://circleci.com/workflow-run/63f19a49-568a-4350-b368-9c33eeaa17de] | 
| [3.11|https://github.com/apache/cassandra/pull/674/files] | [ci|https://circleci.com/workflow-run/f18b7afa-36c7-4d7b-a5a3-9792528cc963] |
| [3.0|https://github.com/apache/cassandra/pull/673/files] | [ci|https://circleci.com/workflow-run/e2b22eef-f0b2-4752-a4b6-f1b5766e170c] |

ported to 3.0 and 3.11..
 ;;;","10/Jul/20 13:49;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestRepairDataSystemTable test_repair_parent_table and test_repair_table fail,CASSANDRA-15858,13309679,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,05/Jun/20 09:39,21/Dec/20 09:12,13/Jul/23 08:39,10/Jun/20 10:56,3.0.21,3.11.7,4.0,4.0-beta1,,Test/dtest/python,,,,0,,,,"They fail [consistently|https://ci-cassandra.apache.org/job/Cassandra-trunk/159/testReport/] and locally as well",,adelapena,bereng,,,,,,,,,,"bereng opened a new pull request #75:
URL: https://github.com/apache/cassandra-dtest/pull/75


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Jun/20 10:39;githubbot;600","michaelsembwever closed pull request #75:
URL: https://github.com/apache/cassandra-dtest/pull/75


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jun 10 10:49:33 UTC 2020,,,,,,,All,,,,,,"0|z0fjs8:",9223372036854775807,,,,adelapena,,,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra-dtest/commit/4c716b1c4f15eb7a3199fb9e30a1ccea6e444523,,,,,,,,,See PR,,,,,"05/Jun/20 10:41;bereng;They failed locally now they pass both individually and the full suite.;;;","08/Jun/20 10:47;adelapena;Looks good, CI running here:

||3.0||3.11||trunk||
|[1|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest-large/1/]|[2|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest-large/2/]|[3|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest-large/3/]|;;;","10/Jun/20 07:51;bereng;The above lgtm [~adelapena] #collaborating;;;","10/Jun/20 10:49;adelapena;They look good to me too, committed to dtest master as [4c716b1c4f15eb7a3199fb9e30a1ccea6e444523|https://github.com/apache/cassandra-dtest/commit/4c716b1c4f15eb7a3199fb9e30a1ccea6e444523].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Frozen RawTuple is not annotated with frozen in the toString method,CASSANDRA-15857,13309539,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,04/Jun/20 20:40,03/Jan/21 17:02,13/Jul/23 08:39,22/Jul/20 09:16,3.11.8,4.0,4.0-beta2,,,Legacy/CQL,,,,0,,,,"All raw types (e.g. RawCollection, RawUT) that supports freezing wraps the type name with 'frozen<>' in the toString method, except RawTuple.

Therefore, the RawTuple::toString output misses the frozen wrapper.

Tuple is always frozen. However since CASSANDRA-15035, it throws when the inner tuple is not explicitly wrapped with frozen within a collection.

The method, CQL3Type.Raw::toString, is referenced at multiple places in the source. For example, referenced in CreateTypeStatement.Raw and involved in CQLSSTableWriter. Another example is that it is called to produce the SchemaChange at several AlterSchemaStatement implementations.

A test can prove that missing the frozen wrapper causes exception when building CQLSSTableWriter for user types defined like below. Note that the inner tuple is wrapped with frozen in the initial CQL statement.
{code:java}
CREATE TYPE ks.fooType ( f list<frozen<tuple<text, text>>> )
{code}
{code:java}
org.apache.cassandra.exceptions.InvalidRequestException: Non-frozen tuples are not allowed inside collections: list<tuple<text, text>>
	at org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.throwNestedNonFrozenError(CQL3Type.java:710)
	at org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.prepare(CQL3Type.java:669)
	at org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection.prepareInternal(CQL3Type.java:661)
	at org.apache.cassandra.schema.Types$RawBuilder$RawUDT.lambda$prepare$1(Types.java:341)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.apache.cassandra.schema.Types$RawBuilder$RawUDT.prepare(Types.java:342)
	at org.apache.cassandra.schema.Types$RawBuilder.build(Types.java:291)
	at org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.createTypes(CQLSSTableWriter.java:551)
	at org.apache.cassandra.io.sstable.CQLSSTableWriter$Builder.build(CQLSSTableWriter.java:527)
{code}",,snazy,yifanc,,,,,,,,,,"yifan-c opened a new pull request #669:
URL: https://github.com/apache/cassandra/pull/669


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jul/20 06:02;githubbot;600","snazy commented on a change in pull request #669:
URL: https://github.com/apache/cassandra/pull/669#discussion_r456270200



##########
File path: test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java
##########
@@ -66,24 +74,28 @@ public static void setup() throws Exception
         StorageService.instance.initServer();
     }
 
+    @Before
+    public void perTestSetup()
+    {
+        keyspace = ""cql_keyspace"" + idGen.incrementAndGet();
+        table = ""table"" + idGen.incrementAndGet();
+        qualifiedTable = keyspace + '.' + table;
+        File tempdir = Files.createTempDir();

Review comment:
       Think it's nicer to use a JUnit 4 `@Rule` here for `tempdir`:
   ``` 
       @Rule
       private TemporaryFolder tempFolder = new TemporaryFolder();
   ```

##########
File path: src/java/org/apache/cassandra/cql3/CQL3Type.java
##########
@@ -833,11 +835,7 @@ public boolean supportsFreezing()
             @Override
             public RawTuple freeze()
             {
-                List<CQL3Type.Raw> frozenTypes =
-                    types.stream()
-                         .map(t -> t.supportsFreezing() ? t.freeze() : t)
-                         .collect(toList());
-                return new RawTuple(frozenTypes, true);
+                return this;
             }
 
             public CQL3Type prepare(String keyspace, Types udts) throws InvalidRequestException

Review comment:
       Think you can simplify the `frozen` check in the first statement

##########
File path: test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java
##########
@@ -66,24 +74,28 @@ public static void setup() throws Exception
         StorageService.instance.initServer();
     }
 
+    @Before
+    public void perTestSetup()
+    {
+        keyspace = ""cql_keyspace"" + idGen.incrementAndGet();
+        table = ""table"" + idGen.incrementAndGet();
+        qualifiedTable = keyspace + '.' + table;
+        File tempdir = Files.createTempDir();

Review comment:
       Otherwise a nice simplification!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jul/20 07:36;githubbot;600","snazy commented on pull request #669:
URL: https://github.com/apache/cassandra/pull/669#issuecomment-659931410


   `DescribeStatementTest` has 2 new failures in `testDescribeFunctionAndAggregate` (line 132) + `testDescribe` (line 298)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jul/20 07:41;githubbot;600","snazy commented on pull request #669:
URL: https://github.com/apache/cassandra/pull/669#issuecomment-659935881


   Oh, and it seems that the `CQL3Type.Raw::isFrozen` checks in `DropFunctionStatement` + `DropAggregateStatement` need to be adopted as well.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jul/20 07:49;githubbot;600","yifan-c commented on pull request #669:
URL: https://github.com/apache/cassandra/pull/669#issuecomment-660323814


   > `DescribeStatementTest` has 2 new failures in `testDescribeFunctionAndAggregate` (line 132) + `testDescribe` (line 298)
   
   The tests might be flaky. The last CI run did not have the failures. https://app.circleci.com/pipelines/github/yifan-c/cassandra/77/workflows/5dd298f0-1268-470a-907a-b7f60648dd5e/jobs/391
   
   I think what happened with the failures are caused by pollution from other test cases. The mismatched column fetched is from the other test case. `executeDescribeNet` does pagination. Maybe the page is not advanced.  


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Jul/20 20:30;githubbot;600","snazy commented on pull request #669:
URL: https://github.com/apache/cassandra/pull/669#issuecomment-660879753


   Nope, the two failures in `DescribeStatementTest` were related to the missing changes in DropFunction/AggregateStatement.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 08:21;githubbot;600","yifan-c opened a new pull request #686:
URL: https://github.com/apache/cassandra/pull/686


   1. `CQLSSTableWriterTest` uses JUnit Rule, which is not exist in 4.6. I added a separate commit to ""Backport CASSANDRA-13360 Upgrade junit from 4.6 to 4.12 ""
   2. `testSchemaChange` in `AggregationTest` and `UFTest` are adopted since in 3.11 branch we do not have CASSANDRA-14825, which removes `frozen` from param


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 20:38;githubbot;600","snazy commented on pull request #686:
URL: https://github.com/apache/cassandra/pull/686#issuecomment-662344160


   Commited as d51c18f807c5c88ef44114341592214747487645


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 09:20;githubbot;600","snazy closed pull request #686:
URL: https://github.com/apache/cassandra/pull/686


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 09:20;githubbot;600","snazy closed pull request #669:
URL: https://github.com/apache/cassandra/pull/669


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 09:21;githubbot;600","snazy commented on pull request #669:
URL: https://github.com/apache/cassandra/pull/669#issuecomment-662344361


   Committed w/ #686 as a76d288c32e9a062dfafc8e38a33b8aed064913e


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jul/20 09:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6600,,,0,6600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15537,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 22 09:16:48 UTC 2020,,,,,,,All,,,,,,"0|z0fix4:",9223372036854775807,,,,snazy,,,,Normal,,3.11.0,,,https://github.com/apache/cassandra/commit/d51c18f807c5c88ef44114341592214747487645,,,,,,,,,CI,,,,,"08/Jul/20 06:19;yifanc;PR: [https://github.com/apache/cassandra/pull/669]

Code: [https://github.com/yifan-c/cassandra/tree/CASSANDRA-15857-rawtuple-tostring-miss-frozen]

Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15857-rawtuple-tostring-miss-frozen] (Test failure is not related to the change)

The patch simply adds the frozen wrapper in the RawTuple's toString method when it is frozen. 

The toString method is called in CreateTypeStatement, CreateAggregateStatement and CreateFunctionStatement, and further affects the CQLSSTableWriter and the produced SchemaChange objects. Therefore, tests cases to verify CQLSSTableWriter and SchemaChange were added. 

Once reviewed this one, I can make a backport patch to 3.11. ;;;","10/Jul/20 09:38;snazy;As tuples cannot be frozen at all, it seems more convenient to completely omit the {{frozen<>}} bracket. I.e. removing the {{frozen}} param from {{RawTuple.<init>}}, removing the {{frozen}} handling in {{CQL3Type.Tuple.toString()}} (remove {{frozen<>}} entirely from the string) and adopting the frozen-validation-logic in {{CQL3Type.Raw.RawCollection.prepare()}}.

Honestly, the handling of frozen isn't actually great in the code base, but cleaning that up is quite a bit of work (too much for a patch release and even for 4.0 now). E.g. it should be ensured that all subtypes of a type are always frozen no matter what, the whole partition key must always be frozen, clustering key elements must be frozen, a bunch of code constructs like ""if (some-check) freeze()"" should be simplified and generalized. Things become a bit complicated when freezable types are nested, for example a non-frozen-UDT in a non-frozen-collection in a UDT, which is legal.;;;","10/Jul/20 19:13;yifanc;bq. As tuples cannot be frozen at all

Is it a typo? According to the document, tuple is always frozen. https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/refDataTypes.html?hl=tuple%2Cfrozen#refDataTypes__tuple 

The parsing rules defined at {{Parser.g}} only freeze the type when there is a frozen keyword. 

Are you suggesting to freeze the RawTuple when constructing the object? So we can get rid of the {{frozen}} param. ;;;","13/Jul/20 08:32;snazy;Not really a typo, but there's no point in freezing a tuple, as there is no unfrozen tuple. I.e. a {{frozen<>}} around a tuple doesn't add any value. So dealing with an unfrozen tuple is meaningless IMO.;;;","15/Jul/20 03:55;yifanc;Thanks Robert for the clarification! 
I agree that adding {{frozen}} keyword to a tuple is redundant, given tuples are implicitly frozen. 

In the current code base, we cannot set the {{RawTuple}} to frozen directly. Create function/aggregate statement rejects frozen raw types. (CASSANDRA-9441)

After giving more thoughts, the validation in the {{RawCollection#prepare}} does not need to throw in the case that inner type is RawTuple. Because tuples are always frozen. The method should proceed and the inner row tuple gets frozen (if not yet) when preparing itself later. 

I have update the PR with the above change. 

The test in CI passes (with unrelated failures in dtest)

Please take another look.;;;","15/Jul/20 08:01;snazy;Ah, sorry, my bad. We cannot ""blindly"" freeze all tuples, because we do have a notion of non-frozen tuples for the very special use-case of dropped columns w/ non-frozen UDTs (UDTs are ""converted"" into a tuple when a column's dropped).;;;","15/Jul/20 08:36;snazy;Ugh - actually, the recorded type in system_schema.dropped_columns for a dropped column with an unfrozen UDT is already broken (unrelated to this ticket though):

{code}
[cqlsh 5.0.1 | Cassandra 3.11.7-SNAPSHOT | CQL spec 3.4.4 | Native protocol v4]
cqlsh> CREATE TYPE ks.some_type ( i int, t text );
cqlsh> CREATE TABLE ks.t ( pk int primary key, t some_type);
cqlsh> ALTER TABLE ks.t DROP t;
cqlsh> SELECT * FROM system_schema.dropped_columns ;
 keyspace_name | table_name | column_name | dropped_time                    | kind    | type
---------------+------------+-------------+---------------------------------+---------+--------------------------------------------------------
            ks |          t |           t | 2020-07-15 08:35:10.494000+0000 | regular |                               frozen<tuple<int, text>>
{code}
;;;","16/Jul/20 07:43;yifanc;I can confirm that in 4.0, non-frozen UDT cannot be ever dropped. So it is safe to freeze a tuple unconditionally.
{code:java}
[cqlsh 5.0.1 | Cassandra 4.0-beta1-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]
cqlsh> CREATE TYPE ks.some_type ( i int, t text );
cqlsh> CREATE TABLE ks.t ( pk int primary key, t some_type);
cqlsh> ALTER TABLE ks.t DROP t;
InvalidRequest: Error from server: code=2200 [Invalid query] message=""Cannot drop non-frozen column t of user type some_type""
{code}
An optional [commit (freeze tuples unconditionally)|https://github.com/apache/cassandra/pull/669/commits/5e7577141de4ebe2c5c284fd7c22d0dd8f49aea0] was added to the patch. We can totally drop the commit if not like it. 
 All raw tuples are now always frozen. Because of that, rejections on frozen raw tuple in CreateFunctionStatement and CreateAggregateStatement are removed.

The rejections were added mainly to make the aggregate and function flexible to both frozen and non-frozen types, according to comments in CASSANDRA-9186. It prevents adding frozen in the declaration of aggregate and function, in order to not confuse users.

Given that tuples are always frozen, user should be clear that 'tuple' and 'frozen tuple' produce the same effect. Therefore, it could be confusion-free to allow both form for tuple in the create statements for aggregates and functions.;;;","20/Jul/20 08:30;snazy;LGTM, can you provide a backport to 3.11?;;;","20/Jul/20 20:40;yifanc;Thanks for the review! 

Here is the patch that backport to 3.11. [https://github.com/apache/cassandra/pull/686]

Some noticeable difference than the patch to trunk. 
 # {{CQLSSTableWriterTest}} uses JUnit Rule, which does not exist in JUnit 4.6. I added a separate commit to ""Backport CASSANDRA-13360 Upgrade junit from 4.6 to 4.12 ""
 # {{testSchemaChange}} in {{AggregationTest}} and {{UFTest}} are adjusted since in 3.11 branch we do not have CASSANDRA-14825, which removes {{frozen}} from param;;;","21/Jul/20 12:25;snazy;Hm, not really a fan of sneaking unrelated changes in a 3.11-patch, although it's probably not an issue. Let's stick with the ""old"" (non-{{@Rule}}) approach in 3.11 for {{CQLSSTableWriterTest}}.

Otherwise the PR looks good.;;;","21/Jul/20 16:24;yifanc;Got it. Just dropped the commit that upgrade junit version and fix the test. 

3.11    PR: [https://github.com/apache/cassandra/pull/686] Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15857-freeze-rawtuple-3_11]

Trunk PR: [https://github.com/apache/cassandra/pull/669] Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15857-rawtuple-tostring-miss-frozen];;;","22/Jul/20 09:14;snazy;+1;;;","22/Jul/20 09:16;snazy;Thanks for the patch!

Committed as [d51c18f807c5c88ef44114341592214747487645|https://github.com/apache/cassandra/commit/d51c18f807c5c88ef44114341592214747487645] to [cassandra-3.11|https://github.com/apache/cassandra/tree/cassandra-3.11], [merged|https://github.com/apache/cassandra/commit/a76d288c32e9a062dfafc8e38a33b8aed064913e] to [trunk|https://github.com/apache/cassandra/tree/trunk].
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mark test_populate_mv_after_insert_wide_rows as flaky,CASSANDRA-15855,13309409,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,04/Jun/20 09:47,21/Dec/20 09:12,13/Jul/23 08:39,10/Jun/20 11:12,3.0.21,3.11.7,4.0,4.0-beta1,,Test/dtest/python,,,,0,,,,See CASSANDRA-15845. This test can still fail in a flaky way so we better mark it as such to avoid confusion and dup investigation efforts on failing tests,,adelapena,bereng,jasonstack,,,,,,,,,"bereng opened a new pull request #74:
URL: https://github.com/apache/cassandra-dtest/pull/74


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Jun/20 12:27;githubbot;600","michaelsembwever closed pull request #74:
URL: https://github.com/apache/cassandra-dtest/pull/74


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15845,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jun 10 11:12:04 UTC 2020,,,,,,,All,,,,,,"0|z0fi48:",9223372036854775807,,,,adelapena,jasonstack,,,Normal,,3.0.0,,,https://github.com/apache/cassandra-dtest/commit/fe9015475ab8383be042c32376bb8e122dc35734,,,,,,,,,See PR,,,,,"04/Jun/20 12:31;bereng;[~jasonstack] maybe you want to review/commit this one as you've been involved in it. I did run the dtest locally, is it enough? or is there a way to run dtests against CI without a C* branch commit to trigger them;;;","04/Jun/20 14:02;adelapena;[~Bereng] [here|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/145/] you have a run of dtests for trunk and your dtest branch. I'd say we don't need to run them for 3.0 or 3.11, given that it's just ignoring a test and AFAIK we don't have a way to run specific dtests. ;;;","05/Jun/20 05:04;bereng;[~adelapena] thx for the run that is very kind of you. You made me think the test should run for <4.0 were the implementation for MVs is different. So I amended my commit to instead of skipping always, running it up to 3X and xfail for 4.0. This is much better imo.wdyt?;;;","05/Jun/20 13:05;adelapena;bq. You made me think the test should run for <4.0 were the implementation for MVs is different. So I amended my commit to instead of skipping always, running it up to 3X and xfail for 4.0. This is much better imo.wdyt?

Sounds good to me.

New dtest runs for the three involved branches:
|| cassandra-3.0 || cassandra-3.11 || trunk ||
|[147|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/147/]|[148|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/148/]|[149|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/149/]|

I think this can be run on CircleCI creating and pushing new branches from 3.0, 3.11 and trunk where the only change is the CircleCI config file, and never merge those branches. I guess it would be possible to remove the unit tests from that file, so CircleCI only runs the dtests, although I have never done it.;;;","08/Jun/20 07:45;bereng;Yeah... I guess some circleci acrobatics could have got us there as well. I will next time thx for the suggestion.

I already sent an email to the ML asking for objections on this test skip + commented on the related tickets with no replies. So I guess I only need someone to step up as a reviewer and merge it.;;;","08/Jun/20 10:26;adelapena;Looks good to me, I'll be happy to commit unless [~jasonstack] has anything to add.

[Link|https://lists.apache.org/thread.html/r38703378d15496aba2cdea6827e509eb096e455dc72af157e98b4e94%40%3Cdev.cassandra.apache.org%3E] to email to the dev list.;;;","09/Jun/20 12:43;jasonstack;sorry for the delay..

 

iirc, race condition between view builder and view schema propagation exists on 3.0/3.11/4.0..  should we mark flaky on all version? or do you think the test is more stable on 3.0/3.11?;;;","10/Jun/20 07:48;bereng;[~jasonstack] it seems pretty stable both on [3.0|https://ci-cassandra.apache.org/job/Cassandra-3.0/38/testReport/dtest-novnode.materialized_views_test/TestMaterializedViews/test_populate_mv_after_insert_wide_rows/history/] and [3.11|https://ci-cassandra.apache.org/job/Cassandra-3.11/47/testReport/dtest.materialized_views_test/TestMaterializedViews/test_populate_mv_after_insert_wide_rows/history/]. Also CASSANDRA-4571 is fixver 4.0 only. A quick diagonal scroll look of the source code looks like they are different between versions. So I think it's reasonable to preserve 3.X runs. Wdyt?;;;","10/Jun/20 08:16;jasonstack;work for me.;;;","10/Jun/20 11:12;adelapena;Committed to dtest master as [fe9015475ab8383be042c32376bb8e122dc35734|https://github.com/apache/cassandra-dtest/commit/fe9015475ab8383be042c32376bb8e122dc35734].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Truncation should fail any ongoing repairs,CASSANDRA-15854,13309394,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,04/Jun/20 08:55,03/Jan/21 17:03,13/Jul/23 08:39,25/Sep/20 07:13,4.0,4.0-beta3,,,,Consistency/Repair,,,,0,,,,"Truncation may race with ongoing repairs, making it possible to clear data on one node but then stream data its truncation would have deleted from another node. We should abort any ongoing preview repairs if we get a truncation request.",,dcapwell,maedhroz,marcuse,Ottermad,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Sep 25 07:13:35 UTC 2020,,,,,,,All,,,,,,"0|z0fi0w:",9223372036854775807,,,,dcapwell,maedhroz,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/d4eba9faa1b57fed205813a639fe53bbbdc06ef1,,,,,,,,,"new jvm dtest, cci runs",,,,,"08/Jun/20 07:09;Ottermad;I am curious about how this might work (I'm new to the codebase) and I was wondering how can you check for ongoing preview repairs? (The closest thing I could find is the PendingTasks compaction metric). Is there a better way?;;;","10/Jun/20 07:00;marcuse;I'll post the patch soon, but we keep track of {{ParentRepairSession}} in {{ActiveRepairService}};;;","11/Jun/20 09:18;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/15854] (on top of CASSANDRA-15851 to get byte buddy support)

[utests|https://circleci.com/gh/krummas/cassandra/3400]
[in-jvm dtests|https://circleci.com/gh/krummas/cassandra/3399]
[dtests vnodes|https://circleci.com/gh/krummas/cassandra/3403]
[dtests novnodes|https://circleci.com/gh/krummas/cassandra/3402];;;","22/Jun/20 21:53;maedhroz;I'm not able to reproduce the failure in {{StreamingInboundHandlerTest}} in a few local runs, but it also doesn't seem to have a flaky test Jira. Will have to investigate further...;;;","22/Jun/20 22:05;maedhroz;The dtest failure in {{TestRepair}} looks like CASSANDRA-15861, but {{test_cleanup}} in {{bootstrap_test.TestBootstrap}} doesn't look like it's been reported yet.;;;","22/Jun/20 22:28;maedhroz;This isn't related directly to the patch, but there are a couple places ({{CassandraValidationIterator}} and {{RepairMessageVerbHandler}}) where we believe {{ActiveRepairService#getParentRepairSession()}} can return {{null}}. It seems pretty clear, though, that we'll always throw a {{RuntimeException}} before we allow that to happen.;;;","23/Jun/20 00:13;maedhroz;[~marcuse] I've left the comments from my first pass of review [inline|https://github.com/krummas/cassandra/commit/0da4b6ca0180efae9cbf22bf5eee77d2aa3b936e].;;;","14/Aug/20 13:48;marcuse;Sorry for the delay [~maedhroz] - I've pushed a few commits addressing your comments - and the test was horrible, I've pushed a simpler version which makes it clearer what is going on;;;","14/Aug/20 21:20;maedhroz;[~marcuse] Thanks!

Left a few more very [minor nits|https://github.com/krummas/cassandra/commit/0f81a451bba4e2d40babe6fdacfb9565abe42775], but otherwise LGTM ;);;;","21/Aug/20 08:19;marcuse;[~maedhroz] pushed the nit fixes;;;","21/Aug/20 15:22;maedhroz;+1;;;","04/Sep/20 21:40;dcapwell;Left my comments on https://github.com/krummas/cassandra/commit/614b8da34660cc86305a26d33c47883cb5f603e7; my main comments are on the test.;;;","23/Sep/20 20:18;dcapwell;Been running the tests in a loop to make sure not flaky, found this failure

{code}
testclasslist:
     [echo] Number of test runners: 1
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.IncRepairTruncationTest
[junit-timeout] Testsuite: org.apache.cassandra.distributed.test.IncRepairTruncationTest Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 108.5 sec
[junit-timeout]
[junit-timeout] Testcase: testTruncateDuringIncRepair(org.apache.cassandra.distributed.test.IncRepairTruncationTest):   FAILED
[junit-timeout] null
[junit-timeout] junit.framework.AssertionFailedError
[junit-timeout]         at org.apache.cassandra.distributed.test.IncRepairTruncationTest.testTruncateDuringIncRepair(IncRepairTruncationTest.java:100)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.distributed.test.IncRepairTruncationTest FAILED
[junitreport] Processing /Users/davidcapwell/src/github/apache/team/marcus-cassandra/build/test/TESTS-TestSuites.xml to /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null1038731269
[junitreport] Loading stylesheet jar:file:/usr/local/Cellar/ant/1.10.7/libexec/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl
[junitreport] Transform time: 5425ms
[junitreport] Deleting: /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null1038731269

BUILD FAILED
/Users/davidcapwell/src/github/apache/team/marcus-cassandra/build.xml:2004: The following error occurred while executing this line:
/Users/davidcapwell/src/github/apache/team/marcus-cassandra/build.xml:1894: Some test(s) failed.
{code}

Seems an inconsistency was found; this was on the branch without changes.

This failed after the 13th run with lower resources (2 physical cores; 4 hyper-threaded).;;;","24/Sep/20 10:38;marcuse;Rewrote the test again, ran it in a loop 80 times with lower resources, no failures

Noticed that we stream even if the repair fails right before we get the validation response, that might have been what caused your failure.

cci run: https://app.circleci.com/pipelines/github/krummas/cassandra/541/workflows/8d3cbf9c-6556-45d9-b993-e258b3211323

seems {{IncrementalRepairCoordinatorTimeoutTest}} failed, looks unrelated and passes locally;;;","24/Sep/20 16:17;dcapwell;thanks, ill file a jira and take that exception

{code}
Error message 'Got negative replies from endpoints [/127.0.0.2:7012]' does not contain any of [Did not get replies from all endpoints.]
{code}

the test validates the repair fails but getting wrong message periodically it seems, so needs to be root caused and fixed.;;;","24/Sep/20 16:21;dcapwell;tests LGTM +1;;;","25/Sep/20 07:13;marcuse;committed with a small change - moved the parent repair session check to {{RepairJob#executeTask}}, test run [here|https://app.circleci.com/pipelines/github/krummas/cassandra/543/workflows/555d874f-8c47-41b0-bf95-80aeb9a75188] (dtest failure is tracked in CASSANDRA-16094, looks unrelated to this), thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@since missing/wrong for upgrade_internal_auth_test.TestAuthUpgrade.test_upgrade_to_22/33,CASSANDRA-15853,13309389,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,snazy,snazy,snazy,04/Jun/20 08:24,21/Dec/20 09:16,13/Jul/23 08:39,04/Jun/20 08:34,3.0.21,3.11.7,4.0,4.0-beta1,,Test/dtest/python,,,,0,,,,@since missing/wrong for upgrade_internal_auth_test.TestAuthUpgrade.test_upgrade_to_22/33,,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,snazy,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jun 04 08:30:35 UTC 2020,,,,,,,All,,,,,,"0|z0fhzs:",9223372036854775807,,,,eduard.tudenhoefner,snazy,,,Low,,3.0.0,,,https://github.com/apache/cassandra-dtest/commit/ca009392d1697ef5a42e87a62930fe9274a3c2fe,,,,,,,,,-,,,,,"04/Jun/20 08:30;snazy;PR: https://github.com/apache/cassandra-dtest/pull/73;;;","04/Jun/20 08:30;snazy;+1'd on the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle errors in StreamSession#prepare,CASSANDRA-15852,13309382,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,04/Jun/20 07:52,21/Dec/20 09:31,13/Jul/23 08:39,19/Aug/20 11:52,4.0,4.0-beta2,,,,Consistency/Streaming,,,,0,,,,Since CASSANDRA-12229 we don't handle errors in {{StreamSession#prepare}} - this makes a stream initiator hang forever if an error is thrown.,,dcapwell,jasonstack,jeromatron,maedhroz,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Aug 19 11:52:19 UTC 2020,,,,,,,All,,,,,,"0|z0fhy8:",9223372036854775807,,,,dcapwell,maedhroz,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/778771bf7655e252d44341cd8ab2f39109e3756d,,,,,,,,,new test + cci runs,,,,,"04/Jun/20 08:50;marcuse;need CASSANDRA-15851 to test this;;;","10/Jun/20 12:40;marcuse;https://github.com/krummas/cassandra/commits/marcuse/15852 - on top of CASSANDRA-15851 to be able to test

[unit tests|https://circleci.com/gh/krummas/cassandra/3389]
[jvm dtests|https://circleci.com/gh/krummas/cassandra/3388]
dtests [vnodes|https://circleci.com/gh/krummas/cassandra/3390], [novnodes|https://circleci.com/gh/krummas/cassandra/3391];;;","16/Jun/20 23:32;dcapwell;Mostly LGTM

* https://github.com/krummas/cassandra/commit/ee0a5f2a849b8a11d760ca2975a61fd4bbdc1735#diff-040c2f1cb2ba51b14c7e249412d6574eR62 Can we use a custom exception here, or add a message and verify the message?  RuntimeException can be thrown in many locations, so this test could pass without triggering this condition.;;;","16/Jun/20 23:36;dcapwell;I am +1 assuming the exception type is changed, or a exception message is checked.;;;","23/Jun/20 20:18;maedhroz;Other than agreeing w/ [~dcapwell] about the intelligibility of the exception (I might go so far as to make an error message field in the {{SessionInfo}} or {{StreamSession}}), the only other thing is that the {{throw e}} on {{StreamSession:700}} seems unnecessary.

Assuming those are resolved, LGTM;;;","17/Aug/20 11:20;marcuse;pushed an update

Can't change the exception type since this is thrown on replica side and we don't re-throw the same exception on the stream coordinator, we only know that it failed, not why. Added a boolean in the bytebuddy redefine to make sure we have thrown the correct exception on the replica.;;;","17/Aug/20 14:32;maedhroz;+1;;;","19/Aug/20 11:52;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fully purged static row causes NPE in repaired data tracking,CASSANDRA-15848,13309165,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,samt,samt,03/Jun/20 11:16,21/Dec/20 07:54,13/Jul/23 08:39,09/Jun/20 14:20,4.0,4.0-beta1,,,,Legacy/Local Write-Read Paths,,,,0,,,,"During repaired data tracking, if the result of applying the purge function to a static row is null, an exception is thrown from RepairedDataInfo. This will cause a read exception from the replica and could lead to unavailable results if hit on multiple replicas. A workaround is to disable repaired data tracking.",,jeromatron,marcuse,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jun 09 14:20:14 UTC 2020,,,,,,,All,,,,,,"0|z0fgm0:",9223372036854775807,,,,marcuse,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/4d1bdb129c3103c51b470b4a008039fe85d7571f,,,,,,,,,Added unit test. Existing unit/dtest/in-jvm dtests run.,,,,,"03/Jun/20 19:13;samt;||branch||utests||in-jvm dtests||dtests_with_vnodes||dtests_no_vnodes||
|[15848-trunk|https://github.com/beobal/cassandra/tree/15848-trunk]|[jdk8|https://circleci.com/gh/beobal/cassandra/1460], [jdk11|https://circleci.com/gh/beobal/cassandra/1461]|[jdk8|https://circleci.com/gh/beobal/cassandra/1459], [jdk11|https://circleci.com/gh/beobal/cassandra/1458]|[jdk8|https://circleci.com/gh/beobal/cassandra/1462], [jdk11|https://circleci.com/gh/beobal/cassandra/1465]|[jdk8|https://circleci.com/gh/beobal/cassandra/1463], [jdk11|https://circleci.com/gh/beobal/cassandra/1464]|
;;;","04/Jun/20 07:15;marcuse;I think we should check if {{purged.isEmpty()}} instead of {{row.isEmpty()}};;;","04/Jun/20 08:13;samt;Sorry, you're absolutely right, so I've pushed that change.

It looks like Circle has stopped even limited access to job info unless authenticated, but I'll update the CI status when the jobs are finished.;;;","04/Jun/20 08:16;marcuse;+1;;;","09/Jun/20 14:20;samt;Thanks, committed to trunk in {{4d1bdb129c3103c51b470b4a008039fe85d7571f}}

There 2 dtest failure, both timeouts, which I couldn't reproduce locally.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky org.apache.cassandra.schema.SchemaTest.testTransKsMigration-cdc,CASSANDRA-15842,13308692,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,01/Jun/20 10:27,21/Dec/20 09:32,13/Jul/23 08:39,09/Jun/20 08:44,4.0,4.0-beta1,,,,Test/unit,,,,0,,,,"Failing for the past [28 builds|https://ci-cassandra.apache.org/job/Cassandra-trunk/153/testReport/org.apache.cassandra.schema/SchemaTest/testTransKsMigration_cdc/]

java.lang.NullPointerException
	at org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker.shutdown(CommitLogSegmentManagerCDC.java:312)
	at org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC.shutdown(CommitLogSegmentManagerCDC.java:89)
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.stopUnsafe(AbstractCommitLogSegmentManager.java:413)
	at org.apache.cassandra.db.commitlog.CommitLog.stopUnsafe(CommitLog.java:467)
	at org.apache.cassandra.SchemaLoader.cleanupAndLeaveDirs(SchemaLoader.java:785)
	at org.apache.cassandra.schema.SchemaTest.testTransKsMigration(SchemaTest.java:46)",,bereng,blerer,,,,,,,,,,"bereng opened a new pull request #609:
URL: https://github.com/apache/cassandra/pull/609


   …e for cdc


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Jun/20 10:49;githubbot;600","bereng commented on pull request #609:
URL: https://github.com/apache/cassandra/pull/609#issuecomment-636836934


   - [CI j11](https://app.circleci.com/pipelines/github/bereng/cassandra/40/workflows/f8d6b103-80e6-42af-89e5-d459c6c83af5)
   - [CI j8](https://app.circleci.com/pipelines/github/bereng/cassandra/40/workflows/15ca6da8-1e55-4f7d-bc7f-63ef3afc5fbc)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Jun/20 12:38;githubbot;600","bereng commented on pull request #609:
URL: https://github.com/apache/cassandra/pull/609#issuecomment-640527968


   - [CI j11](https://app.circleci.com/pipelines/github/bereng/cassandra?branch=CASSANDRA-15842)
   - [CI j8](https://app.circleci.com/pipelines/github/bereng/cassandra/42/workflows/27e77940-8d17-4026-9895-75a01f9ac1d7)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jun/20 10:50;githubbot;600","bereng closed pull request #609:
URL: https://github.com/apache/cassandra/pull/609


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Jun/20 16:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,CASSANDRA-15841,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jun 09 08:44:35 UTC 2020,,,,,,,All,,,,,,"0|z0fdp4:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha4,,,https://github.com/apache/cassandra/commit/2621e07e87c1a5b53476871618740248d07607f2,,,,,,,,,See PR,,,,,"01/Jun/20 10:51;bereng;Whoever reviews this one please take a look at CASSANDRA-15841 as well.;;;","05/Jun/20 13:30;blerer;The fix looks good. I just wonder if we should not simply make the {{CDCSizeTracker.shutdown()}} more robust. Something like:
{code:java}
        public void shutdown()
        {
            if (cdcSizeCalculationExecutor != null && !cdcSizeCalculationExecutor.isShutdown())
            {
                cdcSizeCalculationExecutor.shutdown();
            }
        }
{code}
Throwing a NPE when the {{CDCSizeTracker}} is not started is not the nicest behavior.;;;","08/Jun/20 08:03;bereng;Icwym but on the other hand with that code we wouldn't be reporting on the missing service start, silently swallowing it. If having that service started is a requirement on cdc what about this one instead?
{code:java}
public void shutdown()
{
  if (cdcSizeCalculationExecutor == null)
    throw new IllegalStateException(""Attempting to shutdown service X when it has never been started. Did you miss to start it?"");

  <rest of shutdown code here>
}
{code};;;","08/Jun/20 08:51;blerer;Every component in the Commitlog treat {{shudown}} calls as a noop operation if they are not already started (which is the same behavior a java ThreadPoolExecutors). {{CDCSizeTracker}} seems to be the only component in that  part of the code that behave in a different way. So, I do not think that the current behavior was intended and I believe that it makes sense to make that component behave like the other ones.;;;","08/Jun/20 09:19;bereng;That makes sense, you're right! :) I push forced the fix and folded in CASSANDRA-15841 as well for the same price. I noticed other tests specifically start the CommitLog service so I left those starts in the tests. Waiting on CI now.;;;","08/Jun/20 12:35;bereng;CI looks good. Can be merged unless you have other comments [~blerer];;;","09/Jun/20 08:44;blerer;Thanks for the patch.
Committed into trunk at 2621e07e87c1a5b53476871618740248d07607f2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade-dtests on trunk not working in CircleCI,CASSANDRA-15835,13307447,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,snazy,snazy,snazy,26/May/20 13:51,07/Feb/21 11:41,13/Jul/23 08:39,04/Jun/20 08:45,4.0,4.0-beta1,,,,CI,Test/dtest/python,,,0,,,,"~3600 Upgrade-dtests are failing in CircleCI for trunk due to the missing {{JAVA8_HOME}} environment variable.

Patching the Docker image is rather simple by creating a new image:
{code}
FROM nastra/cassandra-testing-ubuntu1910-java11-w-dependencies:20200406
ENV JAVA8_HOME=/usr/lib/jvm/java-8-openjdk-amd64
{code}

Pushed the above to Docker hub as [snazy/cassandra-testing-ubuntu1910-java11-w-dependencies:202005261540|https://hub.docker.com/layers/snazy/cassandra-testing-ubuntu1910-java11-w-dependencies/202005261540/images/sha256-ac8a713be58694f095c491921e006c2d1a7823a3c23299e477198e2c93a6bbd7?context=explore]

The size of the whole Docker image is a little concerning though (1.85G compressed), but that's out of the scope of this ticket.

I'll prepare a patch soon-ish.",,dcapwell,eduard.tudenhoefner,jmckenzie,snazy,,,,,,,,"snazy opened a new pull request #611:
URL: https://github.com/apache/cassandra/pull/611


   … environment variable


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Jun/20 10:33;githubbot;600","snazy opened a new pull request #22:
URL: https://github.com/apache/cassandra-builds/pull/22


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Jun/20 10:44;githubbot;600","nastra commented on a change in pull request #22:
URL: https://github.com/apache/cassandra-builds/pull/22#discussion_r434357784



##########
File path: docker/testing/ubuntu18_j11.docker
##########
@@ -80,6 +80,11 @@ RUN echo 'export ANT_HOME=/usr/share/ant' >> /home/cassandra/.bashrc && \
     echo 'export JAVA11_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> /home/cassandra/.bashrc && \
     echo 'export JAVA_HOME=$JAVA8_HOME' >> /home/cassandra/.bashrc
 
+ENV ANT_HOME=/usr/share/ant \

Review comment:
       you can't really build this docker image anymore, so not sure we actually need these changes here

##########
File path: docker/testing/ubuntu1810_j11.docker
##########
@@ -80,6 +80,11 @@ RUN echo 'export ANT_HOME=/usr/share/ant' >> /home/cassandra/.bashrc && \
     echo 'export JAVA11_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> /home/cassandra/.bashrc && \
     echo 'export JAVA_HOME=$JAVA8_HOME' >> /home/cassandra/.bashrc
 
+ENV ANT_HOME=/usr/share/ant \

Review comment:
       you can't really build this docker image anymore, so not sure we actually need these changes here




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Jun/20 07:19;githubbot;600","nastra commented on pull request #22:
URL: https://github.com/apache/cassandra-builds/pull/22#issuecomment-638025369


   I published `nastra/cassandra-testing-ubuntu1910-java11:20200603` and `nastra/cassandra-testing-ubuntu1910-java11-w-dependencies:20200603` with your changes @snazy 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Jun/20 07:50;githubbot;600","nastra commented on a change in pull request #611:
URL: https://github.com/apache/cassandra/pull/611#discussion_r434375533



##########
File path: .circleci/config-2_1.yml
##########
@@ -277,7 +277,7 @@ executors:
         type: string
         default: medium
     docker:
-      - image: nastra/cassandra-testing-ubuntu1910-java11-w-dependencies:20200406

Review comment:
       should now use `nastra/cassandra-testing-ubuntu1910-java11-w-dependencies:20200603`. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Jun/20 07:52;githubbot;600","michaelsembwever commented on pull request #22:
URL: https://github.com/apache/cassandra-builds/pull/22#issuecomment-638029154


   > I published nastra/cassandra-testing-ubuntu1910-java11:20200603 and nastra/cassandra-testing-ubuntu1910-java11-w-dependencies:20200603 with your changes @snazy
   
   Can we follow up (separately) how we go about deploying these images (and to where).
   
   I'm thinking that cassandra-builds should have its ""Building packages"" instructions put into a build script and put into ASF CI, and investigate if we can CD those builds into dockerhub…


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Jun/20 07:57;githubbot;600","snazy merged pull request #22:
URL: https://github.com/apache/cassandra-builds/pull/22


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Jun/20 08:18;githubbot;600","asfgit merged pull request #611:
URL: https://github.com/apache/cassandra/pull/611


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Jun/20 08:42;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16428,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,snazy,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jun 04 08:45:53 UTC 2020,,,,,,,All,,,,,,"0|z0f634:",9223372036854775807,,,,eduard.tudenhoefner,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/d6552ce3a42d3394277e8156959c9409bb302d81,,,,,,,,,Internal Circle-CI runs,,,,,"30/May/20 16:19;jmckenzie;[~snazy] - is this a CircleCI failure only? While I know a good number of contributors rely on circle, since the Jenkins tests are our tests of record at this point, do we think it appropriate to block cutting beta-1 on this?

 

Or is it moot and you're almost done with this anyway? ;);;;","01/Jun/20 23:54;dcapwell;bq. since the Jenkins tests are our tests of record at this point, do we think it appropriate to block cutting beta-1 on this?

Jenkins doesn't run upgrade tests, only Circle CI.  ;;;","02/Jun/20 10:15;snazy;PRs:
* ccm/cassandra-test: https://github.com/riptano/ccm/pull/713
* ccm/master: https://github.com/riptano/ccm/pull/714
* dtest/master: https://github.com/apache/cassandra-dtest/pull/71
* cassandra/trunk: https://github.com/apache/cassandra/pull/611
* cassandra-builds/master: https://github.com/apache/cassandra-builds/pull/22

The above PRs fix a couple of issues w/ dtests:
* Fix/re-enable upgrade-dtests broken by CASSANDRA-14420 + CASSANDRA-14421
* Fix building C* using Java 11 during upgrade-dtests
* Use the correct Java version when starting C* and related processes
* Don't let check_logs_for_errors() fail, if there's no log file
* Always create a node*-startup-stdout/stderr.log (which helps a lot to investigate why nodes don't start)
* Add `--exists-option w` for dtests requiements.txt installation

[~eduard.tudenhoefner] can you review?;;;","02/Jun/20 10:35;snazy;[~jmckenzie] not worth to block any release on this one. The CI runs with the above changes look almost good.;;;","03/Jun/20 08:33;eduard.tudenhoefner;reviewed all of the above PRs and changes LGTM. Waiting on final CI results now.;;;","04/Jun/20 08:43;snazy;+1'd on the linked PRs;;;","04/Jun/20 08:45;snazy;Committed as [d6552ce3a42d3394277e8156959c9409bb302d81|https://github.com/apache/cassandra/commit/d6552ce3a42d3394277e8156959c9409bb302d81] to [trunk|https://github.com/apache/cassandra/tree/trunk].

Merged PRs:
https://github.com/riptano/ccm/pull/713
https://github.com/riptano/ccm/pull/714
https://github.com/apache/cassandra-dtest/pull/71
https://github.com/apache/cassandra-builds/pull/22
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bloom filter false positive rate calculation does not take into account true negatives,CASSANDRA-15834,13307406,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jtgrabowski,jtgrabowski,jtgrabowski,26/May/20 10:31,16/Mar/22 13:32,13/Jul/23 08:39,18/May/21 19:26,3.0.25,3.11.11,4.0,4.0-rc2,,Observability/JMX,,,,1,,,,"The bloom filter false positive ratio is [currently computed|https://github.com/apache/cassandra/blob/ded62076e7fdfd1cfdcf96447489ea607ca796a0/src/java/org/apache/cassandra/metrics/TableMetrics.java#L738] as:

{{bf_fp_ratio = false_positive_count / (false_positive_count + true_positive_count)}}

However, this calculation doesn't take into account true negatives (false negatives never happen on bloom filters).

In a situation where there are 1000 reads for non existing rows, and there are 10 false positives, the bloom filter false positive ratio will be wrongly calculated as 10/10 = 1.0, while it should be 10/1000 = 0.01.

We should update the calculation to:

{{bf_fp_ratio = false_positive_count / #bf_queries}}

Original jira by [~pauloricardomg]",,e.dimitrova,henrik.ingo,jeromatron,jtgrabowski,moczarski,paulo,,,,,,"jtgrabowski opened a new pull request #600:
URL: https://github.com/apache/cassandra/pull/600


   Before this change the bloom filter false positive rate was calculated
   without true negatives which resulted in high rates. In an extreme case,
   where all queries return no data, the false positive rate could go up to
   1.0.
   
   This change includes true negatives in [recent] bloom filter false ratio.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/20 03:25;githubbot;600","jtgrabowski opened a new pull request #70:
URL: https://github.com/apache/cassandra-dtest/pull/70


   Verifies if BloomFilterFalseRatio takes into account true negatives.
   Without this fix, the following scenario (many reads for non-existing
   rows) would yield BloomFilterFalseRatio=1.0. With the fix we assume
   it should be less then the default bloom_filter_fp_chance.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/20 03:52;githubbot;600","michaelsembwever closed pull request #70:
URL: https://github.com/apache/cassandra-dtest/pull/70


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600","smiklosovic closed pull request #600:
URL: https://github.com/apache/cassandra/pull/600


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:32;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jtgrabowski,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue May 18 19:26:57 UTC 2021,,,,,,,All,,,,,,"0|z0f5u0:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/4e5bd572f4cca2831b87d6aa1b322e8ad846d015,,,,,,,,,"https://github.com/apache/cassandra-dtest/pull/70
https://github.com/apache/cassandra/pull/600",,,,,"18/May/21 10:57;jtgrabowski;[~brandon.williams] could you please have a look?;;;","18/May/21 14:32;brandon.williams;||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-15834-3.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/781/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/781/pipeline]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-15834-311]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/782/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/782/pipeline]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-15834-4.0]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/783/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/783/pipeline]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-15834]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/784/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/784/pipeline]|

;;;","18/May/21 18:32;brandon.williams;LGTM, [~paulo] can you look?;;;","18/May/21 18:46;paulo;+1;;;","18/May/21 19:26;brandon.williams;Committed, thank you both!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unresolvable false digest mismatch during upgrade due to CASSANDRA-10657,CASSANDRA-15833,13307367,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,26/May/20 08:51,03/Jan/21 17:02,13/Jul/23 08:39,28/Sep/20 15:23,3.11.9,4.0,4.0-beta3,,,Consistency/Repair,,,,0,,,,"CASSANDRA-10657 introduced changes in how the ColumnFilter is interpreted. This results in digest mismatch when querying incomplete set of columns from a table with consistency that requires reaching instances running pre CASSANDRA-10657 from nodes that include CASSANDRA-10657 (it was introduced in Cassandra 3.4). 

The fix is to bring back the previous behaviour until there are no instances running pre CASSANDRA-10657 version. 
",,cscotta,dcapwell,jasonstack,jeromatron,jlewandowski,jmckenzie,jwest,maedhroz,marcuse,PuerTea,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16148,,,,,CASSANDRA-15946,,,,,,,,,"26/May/20 09:57;jlewandowski;CASSANDRA-15833-3.11.patch;https://issues.apache.org/jira/secure/attachment/13004019/CASSANDRA-15833-3.11.patch","26/May/20 20:18;jlewandowski;CASSANDRA-15833-4.0.patch;https://issues.apache.org/jira/secure/attachment/13004066/CASSANDRA-15833-4.0.patch",,,,,,,,,,,,,2.0,jlewandowski,jwest,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Sep 29 22:42:01 UTC 2020,,,,,,,All,,,,,,"0|z0f5lc:",9223372036854775807,,,,jwest,marcuse,,,Low,,3.11.9,,,https://github.com/apache/cassandra/commit/cf27558b1442e75e17e47071ecf92d1b3e5a0e36,,,,,,,,,"The issue can be tested by executing the following steps:

1. Start 2 node cluster of C* 3.0
2. Create a keyspace with RF=2, and a sample table with some regular columns (say of text type), insert some data into that table with CL=QUORUM or ALL
3. Flush created table on both nodes
4. Upgrade the first node either to 3.11 or 4.0
5. Start CQL, set consistency to QUORUM or ALL and enable tracing
6. Query table for a single row with a single regular column
7. Without patch, the tracing output shows the information about digest mismatch, which is unrecoverable (you can even do full repair), with the patch, there is no such issue
",,,,,"05/Jun/20 16:08;jwest;Thanks for the patch [~jlewandowski]. I will take a look. ;;;","09/Jun/20 23:54;jwest;[~jlewandowski] I have begun the review. One thing I am trying to think about is how we can fix the issue without tying {{ColumnFilter.Builder}} to {{Gossiper.instance}}. On the other hand, while testing your patch I noticed that {{Gossiper#haveMajorVersion3Nodes}} can return {{false}} when it is indeed {{true}}. I am still digging into it. I will continue more tomorrow. 

EDIT: Testing a bit more, this fixes the case where 4.0 is the coordinator. However, when a 3.0.x node is the coordinator the deserialized {{ColumnFilter}} on the 4.0 still has the queried columns set. ;;;","11/Jun/20 19:02;jwest;[~jlewandowski] I've pushed a test [here|https://github.com/jrwest/cassandra/tree/jwest/15833-3.11]*. Are you planning to pick up the remaining changes or would you like me to pick it up from here (I'm happy to be a reviewer or finish up the patch). Thanks!

*Unfortunately, there is a bug in in-jvm dtest 4.0 -> 3.0 internode messaging communication that I am tracking down so I haven't pushed the 4.0 version yet. ;;;","12/Jun/20 15:04;jlewandowski;Yup, I'll finish that, just was a bit busy recently;;;","15/Jun/20 13:00;jlewandowski;[~jwest] thank you for having a look. I know about those inconsistencies depending on which node is coordinator, I discovered them later after creating this patch though. The test you created looks great. I'll add more queries that may be affected by this problem, IIRC I also saw some inconsistencies when executing conditional delete but I need to re-check that. Feel free to move the ticket back in ""in-progress""-like state;;;","16/Jun/20 17:29;jlewandowski;Regarding your concern about using Gossiper; I was wondering whether we could just create a ColumnFilter factory and have different implementations, wdyt?;;;","25/Jun/20 00:49;jwest;[~jlewandowski] apologies for the delay. I was out last week and playing catch up this week. Can you say more about the factory you have in mind? An example might be helpful if its quick. Thanks!;;;","13/Jul/20 18:51;jmckenzie;Spoke w/Jordan and Jacek offline; this is ok to move to Beta phase.;;;","28/Jul/20 11:43;jlewandowski;Please also note this: https://issues.apache.org/jira/browse/CASSANDRA-15962

 

Here: [https://github.com/apache/cassandra/pull/676] is my test that reproduces the digest problems

 ;;;","12/Aug/20 03:08;jwest;Thanks [~jlewandowski]. I've taken bits of both yours and my patches and pushed them [here for 3.11|https://github.com/jrwest/cassandra/tree/jwest/15833-3.11] and [here for trunk|https://github.com/jrwest/cassandra/tree/jwest/15833-trunk]. I've included your test fixes from CASSANDRA-15946 since its not yet merged. The differences between this patch and the original patch are:
* The patch included here addresses the case where the 3.0 node is the coordinator. This is why there is an additional change in {{ColumnFilter.Serializer#deserialize}}
* No change to {{ColumnFilter#selection(CFMetadata, PartitionColumns)}} in 3.11. As far as I could tell this method was only used in testing and that testing broke when fixing deserialization from 3.0 nodes. 
* It does not include the {{ColumnFilter#selection(TableMetadata, RegularAndStaticColumns)}} change either. This method does seem to be used in CAS but that doesn't seem to be related to the failure here -- there might be a separate issue with CAS however. I was curious if you hit this specifically or what motivated that change in your original patch? 
* To fix {{Gossiper#haveAnyMajorVersion3Nodes}}, I modified there check to abort if it detects the race condition with the updated gossip state. This fixes the issue where the method returns true when there are older nodes in the cluster. I did not modify the 3.11 version, {{Gossiper#isAnyNode30}}, because the window where its wrong is very very small and shouldn't be material in practice (testing shows that it settles before the node takes traffic).

Test runs are here: [3.11|https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F15833-3.11] [trunk | https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F15833-trunk]

;;;","12/Aug/20 11:03;jlewandowski;[~jwest] what do you think about adding tables with static columns to the test?
;;;","12/Aug/20 18:10;jwest;Good suggestion [~jlewandowski]. Pushed updates to the test to include statics and added a couple more queries. ;;;","03/Sep/20 07:48;marcuse;+1

just one thing you can fix on commit, instead of the ""see CASSANDRA-15833""-comments, it would be nice to have the explanation in the code instead of having to read a JIRA ticket to understand;;;","25/Sep/20 19:09;cscotta;Checking back as this has been in ""Ready to Commit"" for a bit – anything outstanding before landing it, or is this ready to go?;;;","25/Sep/20 19:13;jwest;Its ready to go. Likely needs a rebase which is on my list to do today or Monday at the latest. I was on vacation when the second +1 was posted and missed the alert. ;;;","28/Sep/20 15:23;jwest;Committed as https://github.com/apache/cassandra/commit/cf27558b1442e75e17e47071ecf92d1b3e5a0e36. Thanks for the input and review everyone!;;;","29/Sep/20 22:23;dcapwell;Looks like this broke a unit test (https://ci-cassandra.apache.org/job/Cassandra-trunk/38/testReport/org.apache.cassandra.gms/GossiperTest/testHaveVersion3Nodes/history/)  and read repair python dtest (https://ci-cassandra.apache.org/job/Cassandra-trunk/38/testReport/dtest.read_repair_test/TestReadRepair/test_alter_rf_and_run_read_repair/history/ and https://ci-cassandra.apache.org/job/Cassandra-trunk/38/testReport/dtest-offheap.read_repair_test/TestReadRepairGuarantees/test_atomic_writes_blocking_/history/).

Didn't check 3.11 builds, only trunk.;;;","29/Sep/20 22:42;jwest;The issue only affects trunk. My bad. Will open a JIRA to follow-up. The test is likely failing because we changed the logic to make the method actually work as expected. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid version value: 4.0~alpha4 during startup,CASSANDRA-15830,13306716,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,ericwong,ericwong,22/May/20 08:49,16/Jul/20 09:25,13/Jul/23 08:39,29/May/20 13:20,4.0,4.0-beta1,,,,Build,Packaging,,,0,,,,"Hi:

We are testing the latest cassandra-4.0 on Centos 7 using a clean database.  When we started cassandra the first time, everything is fine.  However, when we stop and restart cassandra, we got the following error and the db refuses to startup:

{code}
ERROR [main] 2020-05-22 05:58:18,698 CassandraDaemon.java:789 - Exception encountered during startup
java.lang.IllegalArgumentException: Invalid version value: 4.0~alpha4
 at org.apache.cassandra.utils.CassandraVersion.<init>(CassandraVersion.java:64)
 at org.apache.cassandra.io.sstable.SSTableHeaderFix.fixNonFrozenUDTIfUpgradeFrom30(SSTableHeaderFix.java:84)
 at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:250)
 at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:650)
 at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:767)
{code}

The only way to get the node up and running again is by deleting all data under /var/lib/cassandra.

 

Is that a known issue?

Thanks, Eric

 

 

 ",,blerer,ericwong,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri May 29 13:20:54 UTC 2020,,,,,,,Linux,,,,,,"0|z0f1kw:",9223372036854775807,,,,blerer,,,,Critical,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/ec1808a34f9aa5ae0b956c1527828566f4ba2be5,,,,,,,,,CASSANDRA-15830,,,,,"25/May/20 09:29;ericwong;I actually found out this morning.  If I replaced apache-cassandra-4.0-alpha4.jar from the binary distribution, instead of the rpm version, I can shutdown and restart the db without issue.;;;","27/May/20 21:30;mck;Reproduced with
{code}
cd /tmp
wget https://downloads.apache.org/cassandra/redhat/40x/cassandra-4.0~alpha4-1.noarch.rpm
rpm2cpio cassandra-4.0\~alpha4-1.noarch.rpm | cpio -idmv
jar xvf ./usr/share/cassandra/apache-cassandra-4.0~alpha4.jar org/apache/cassandra/config/version.properties
cat org/apache/cassandra/config/version.properties
{code}

The version used is wrong when building the project artifacts inside the [build-rpms.sh|https://github.com/apache/cassandra-builds/blob/master/docker/build-rpms.sh#L75] script, either the ${deb_release} or $CASSANDRA_VERSION.
;;;","28/May/20 21:33;mck;Patch in https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15830

Currently we have no way of testing debian or rpm packaging. This is a problem, it hurts when cutting releases as well as afterwards (like this ticket). I've entered a separate [ticket|CASSANDRA-15838] to add testing of debian or rpm packaging.;;;","28/May/20 22:12;mck;To manually test (though not ideal as {{mck/trunk_15830}} is a branch rather than a tag)…
{code}
git clone https://github.com/apache/cassandra-builds.git
cd cassandra-builds

docker image rm -f  `docker images -f label=org.cassandra.buildenv=centos -q`

docker build -f docker/centos7-image.docker --build-arg ""CASSANDRA_GIT_URL=https://github.com/thelastpickle/cassandra"" docker/

mkdir /tmp/test_rpmbuild

docker run --rm -v /tmp/test_rpmbuild:/dist `docker images -f label=org.cassandra.buildenv=centos -q` /home/build/build-rpms.sh mck/trunk_15830
{code}
(this is taken from https://github.com/apache/cassandra-builds/blob/master/cassandra-release/prepare_release.sh );;;","29/May/20 09:02;blerer;+1;;;","29/May/20 13:20;mck;Committed as [ec1808a34f9aa5ae0b956c1527828566f4ba2be5 |https://github.com/apache/cassandra/commit/ec1808a34f9aa5ae0b956c1527828566f4ba2be5];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test incrementalSSTableSelection - org.apache.cassandra.db.streaming.CassandraStreamManagerTest,CASSANDRA-15825,13306302,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,dcapwell,dcapwell,20/May/20 18:45,21/Dec/20 08:08,13/Jul/23 08:39,29/May/20 09:28,4.0,4.0-beta1,,,,Test/unit,,,,0,,,,"Build link: https://app.circleci.com/pipelines/github/dcapwell/cassandra/287/workflows/06baf3db-7094-431f-920d-e8fcd1da9cce/jobs/1398 

{code}
java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/cassandra/build/test/cassandra/data:2/ks_1589913975959/tbl-051c0a709a0111eab5fb6f52366536f8/na-4-big-Statistics.db
	at org.apache.cassandra.io.util.ChannelProxy.openChannel(ChannelProxy.java:55)
	at org.apache.cassandra.io.util.ChannelProxy.<init>(ChannelProxy.java:66)
	at org.apache.cassandra.io.util.RandomAccessReader.open(RandomAccessReader.java:315)
	at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:126)
	at org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(MetadataSerializer.java:136)
	at org.apache.cassandra.io.sstable.format.SSTableReader.reloadSSTableMetadata(SSTableReader.java:2047)
	at org.apache.cassandra.db.streaming.CassandraStreamManagerTest.mutateRepaired(CassandraStreamManagerTest.java:128)
	at org.apache.cassandra.db.streaming.CassandraStreamManagerTest.incrementalSSTableSelection(CassandraStreamManagerTest.java:175)
Caused by: java.nio.file.NoSuchFileException: /tmp/cassandra/build/test/cassandra/data:2/ks_1589913975959/tbl-051c0a709a0111eab5fb6f52366536f8/na-4-big-Statistics.db
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
	at sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:177)
	at java.nio.channels.FileChannel.open(FileChannel.java:287)
	at java.nio.channels.FileChannel.open(FileChannel.java:335)
	at org.apache.cassandra.io.util.ChannelProxy.openChannel(ChannelProxy.java:51)
{code}",,bereng,blerer,dcapwell,yifanc,,,,,,,,"bereng opened a new pull request #602:
URL: https://github.com/apache/cassandra/pull/602


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/20 10:30;githubbot;600","bereng commented on pull request #602:
URL: https://github.com/apache/cassandra/pull/602#issuecomment-634573642


   - [CI j11](https://app.circleci.com/pipelines/github/bereng/cassandra/36/workflows/48e575ae-6884-4c51-b186-e546bf4e9a7f)
   - [CI j8](https://app.circleci.com/pipelines/github/bereng/cassandra/36/workflows/4d348923-c7be-4532-aaa0-71a3609f30d3)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/20 10:32;githubbot;600","blerer commented on a change in pull request #602:
URL: https://github.com/apache/cassandra/pull/602#discussion_r431866018



##########
File path: test/unit/org/apache/cassandra/db/streaming/CassandraStreamManagerTest.java
##########
@@ -161,6 +161,9 @@ private static void mutateRepaired(SSTableReader sstable, long repairedAt, UUID
     @Test
     public void incrementalSSTableSelection() throws Exception
     {
+        // CASSANDRA-15825 Make sure a compaction won't be triggered under our feet removing the sstables mid-flight
+        cfs.setMinimumCompactionThreshold(10);

Review comment:
       I would have used `cfs.disableAutoCompaction();`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/May/20 15:07;githubbot;600","bereng closed pull request #602:
URL: https://github.com/apache/cassandra/pull/602


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Nov/20 05:46;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri May 29 09:28:11 UTC 2020,,,,,,,All,,,,,,"0|z0ez0w:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/bcc1174e9bba9ba0cacbc9356d48a7599c50e03e,,,,,,,,,See PR,,,,,"27/May/20 10:33;bereng;I noticed commenting out the other test in that class made this one fail consistently. So there seems to be cross talk between test cases. It seems that on the 4th sstable a compaction is triggered and that can remove the sstables under our feet depending on who is faster. The fix I applied is to prevent the compaction from running. I hope it makes sense. Waiting on CI now.;;;","29/May/20 09:28;blerer;Committed into trunk at bcc1174e9bba9ba0cacbc9356d48a7599c50e03e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/bin/fqltool doesn't work on all distributions,CASSANDRA-15820,13305814,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,snazy,snazy,snazy,19/May/20 04:59,21/Dec/20 08:07,13/Jul/23 08:39,19/May/20 14:37,4.0,4.0-beta1,,,,Tool/fql,,,,0,,,,"The line
{code}
if [ ! $1 ]; then break; fi
{code}
doesn't work on all OSes/Linux distributions (e.g. a bare Ubuntu 18.04) with {{#!/bin/sh}} causing {{fqltool}} to fail. The fix is quite simple",,eduard.tudenhoefner,jeromatron,mck,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,snazy,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue May 19 14:37:24 UTC 2020,,,,,,,All,,,,,,"0|z0ew0g:",9223372036854775807,,,,mck,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/ec07cd7e76c93bf713618f381480f500f6c4e62f,,,,,,,,,Local dtest run,,,,,"19/May/20 05:05;snazy;PR: https://github.com/apache/cassandra/pull/595;;;","19/May/20 06:58;mck;+1 (verified and tested);;;","19/May/20 08:13;eduard.tudenhoefner;+1;;;","19/May/20 14:37;snazy;Thanks!

Committed as [ec07cd7e76c93bf713618f381480f500f6c4e62f|https://github.com/apache/cassandra/commit/ec07cd7e76c93bf713618f381480f500f6c4e62f] to [trunk|https://github.com/apache/cassandra/tree/trunk].
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nodetool enablefullquerylog doesn't allow caller to make non-blocking,CASSANDRA-15819,13305788,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,dcapwell,dcapwell,19/May/20 00:52,21/Dec/20 08:08,13/Jul/23 08:39,20/May/20 11:57,4.0,4.0-beta1,,,,Tool/nodetool,,,,0,,,,"{code}
$ ./bin/nodetool enablefullquerylog --path /tmp/deleteme --blocking false
Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
nodetool: Found unexpected parameters: [false]
See 'nodetool help' or 'nodetool help <command>'.
{code}

The root cause is boolean is special cased in airlift, so any time —blocking is set it gets turned on.",,bereng,blerer,dcapwell,jeromatron,vinaykumarcse,,,,,,,"bereng opened a new pull request #596:
URL: https://github.com/apache/cassandra/pull/596


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/May/20 14:16;githubbot;600","bereng closed pull request #596:
URL: https://github.com/apache/cassandra/pull/596


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/May/20 15:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13983,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed May 20 11:57:56 UTC 2020,,,,,,,All,,,,,,"0|z0evug:",9223372036854775807,,,,blerer,dcapwell,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/94c52450ed9ad3fd704faef7d395ede5050fcdc3,,,,,,,,,See PR,,,,,"19/May/20 00:56;dcapwell;Seeing how this feature was added to 4.0, we should not release with this bug; so marked it for beta.;;;","19/May/20 00:57;dcapwell;Its possible the defaults for the cluster are set to false, so absence of --blocking would be non-blocking, but in the cases where the configs are true and you  should still be able to mark non-blocking.;;;","19/May/20 18:29;dcapwell;patch LGTM, running CI now https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=review%2FCASSANDRA-15819;;;","20/May/20 01:04;dcapwell;CI didn't pass but looks like known flaky tests and an intermediate issue with circle ci and docker images.  

LGTM +1.

Need another review as well.;;;","20/May/20 07:26;bereng;Right, I didn't run CI as I saw only a minimal NodeTool test. But thx for running it, better safe than sorry :-);;;","20/May/20 11:55;blerer;+1 Thanks for the patch.;;;","20/May/20 11:57;blerer;Committed into trunk at 94c52450ed9ad3fd704faef7d395ede5050fcdc3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Prevent repair from overrunning compaction,CASSANDRA-15817,13305337,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,jjirsa,jjirsa,jjirsa,16/May/20 03:33,16/Mar/22 13:31,13/Jul/23 08:39,24/Aug/20 07:13,4.0,4.0-beta2,,,,Consistency/Repair,,,,0,,,,"Repair can run and stream faster than a host can compact. At some point, if a host is sufficiently out of sync, or compaction is especially expensive, it makes sense to intentionally block repair so that compaction can catch up",,dcapwell,jasonstack,jeromatron,jjirsa,marcuse,,,,,,,"jeffjirsa opened a new pull request #592:
URL: https://github.com/apache/cassandra/pull/592


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/May/20 03:36;githubbot;600","smiklosovic closed pull request #592:
URL: https://github.com/apache/cassandra/pull/592


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:31;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jjirsa,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 24 07:13:51 UTC 2020,,,,,,,All,,,,,,"0|z0et28:",9223372036854775807,,,,dcapwell,marcuse,,,Low,,0.3,,,https://github.com/apache/cassandra/commit/dfd0aebf73faa8f910e68ff5d50f91fae4f2669e,,,,,,,,,"Tested by hand; disabled by default (via very large value) and not included in cassandra.yaml or NEWS.txt",,,,,"16/May/20 05:11;dcapwell;LGTM +1

I ran the unit test and jvm-dtests, all passed.;;;","21/Aug/20 11:03;marcuse;looks like this doesn't reject repairs if the repair coordinator is the one behind

pushed a fix + test [here|https://github.com/krummas/cassandra/commits/jeff/15817] - [~dcapwell] or [~jjirsa] could you have a look?;;;","21/Aug/20 17:10;dcapwell;Good catch Marcus, thanks for the test.  LGTM, checked at the message and the coordinator side.  +1

Only comment was https://github.com/krummas/cassandra/commit/546a9587f866cc8f02613b7ff6a93256acd72374#r41670300 which is more an FYI/nit than anything.;;;","24/Aug/20 07:13;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transports are stopped in the wrong order,CASSANDRA-15816,13305336,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jjirsa,jjirsa,jjirsa,16/May/20 03:31,31/Oct/22 17:39,13/Jul/23 08:39,24/Aug/20 07:31,3.0.22,3.11.8,4.0,4.0-beta2,,Messaging/Internode,,,,0,,,,"Stopping gossip while native is running is almost always wrong, change the order of shutdown and log a warning when done manually",,jeromatron,jjirsa,marcuse,snazy,,,,,,,,"jeffjirsa opened a new pull request #593:
URL: https://github.com/apache/cassandra/pull/593


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/May/20 03:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,CASSANDRA-15574,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jjirsa,,,,,,,,,,,,,Availability,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 24 07:31:05 UTC 2020,,,,,,,All,,,,,,"0|z0et20:",9223372036854775807,,,,marcuse,snazy,,,Low,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/acbaeb1ee8d0aabe9ffb198df76fb6839b23f072,,,,,,,,,N/A. ,,,,,"06/Jul/20 07:53;snazy;Sounds reasonable to me.

+1 (on both the approach and PR);;;","21/Aug/20 11:43;marcuse;+1, will commit after tests are run

[3.0 patch|https://github.com/krummas/cassandra/commits/jeff/15816-3.0] [circle|https://app.circleci.com/pipelines/github/krummas/cassandra/485/workflows/fdfee4a7-5c12-4291-b94d-c273323350c1]
[3.11 patch|https://github.com/krummas/cassandra/commits/jeff/15816-3.11] [circle|https://app.circleci.com/pipelines/github/krummas/cassandra/486/workflows/6b64cbfd-1ac1-4e51-a53d-940285e5dd80]
[trunk patch|https://github.com/krummas/cassandra/commits/jeff/15816-trunk] [circle|https://app.circleci.com/pipelines/github/krummas/cassandra/487/workflows/60716526-4a45-41a7-954f-a1dbf2d33e53];;;","24/Aug/20 07:31;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
order by descending on frozen list not working,CASSANDRA-15814,13305103,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,felipevp,felipevp,15/May/20 04:31,27/May/21 15:52,13/Jul/23 08:39,23/Jul/20 12:04,2.2.18,3.0.22,3.11.8,4.0,4.0-beta2,CQL/Interpreter,,,,0,,,,"By creating a table like the following:
{code:java}
CREATE TABLE IF NOT EXISTS software (
 name ascii,
 version frozen<list<int>>,
 data ascii,
 PRIMARY KEY(name,version)
)
{code}
It works and version is ordered in an ascending order. But when trying to order in descending order:
{code:java}
CREATE TABLE IF NOT EXISTS software (
    name ascii,
    version frozen<list<int>>,
    data ascii,
    PRIMARY KEY(name,version)
) WITH CLUSTERING ORDER BY (version DESC);
{code}
The table is created normally, but when trying to insert a row:
{code:java}
insert into software(name, version) values ('t1', [2,10,30,40,50]); 
{code}
Cassandra throws an error:
{code:java}
InvalidRequest: Error from server: code=2200 [Invalid query] message=""Invalid list literal for version of type frozen<list<int>>""
{code}
The goal here is that I would like to get the last version of a software.

 ",,adelapena,bereng,blerer,felipevp,Gerrrr,jasonstack,jeromatron,,,,,"adelapena opened a new pull request #655:
URL: https://github.com/apache/cassandra/pull/655


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 17:11;githubbot;600","adelapena opened a new pull request #656:
URL: https://github.com/apache/cassandra/pull/656


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 17:12;githubbot;600","adelapena opened a new pull request #658:
URL: https://github.com/apache/cassandra/pull/658


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 17:12;githubbot;600","adelapena opened a new pull request #657:
URL: https://github.com/apache/cassandra/pull/657


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 17:12;githubbot;600","bereng commented on a change in pull request #658:
URL: https://github.com/apache/cassandra/pull/658#discussion_r455651027



##########
File path: test/unit/org/apache/cassandra/cql3/validation/entities/FrozenCollectionsTest.java
##########
@@ -258,6 +258,84 @@ public void testClusteringKeyUsage() throws Throwable
         );
     }
 
+    @Test
+    public void testClusteringKeyUsageWithReverseOrder() throws Throwable

Review comment:
       @adelapena given the codes fixes touch Lists, Sets and Maps I think we should test the 3 and not Sets alone. Wdyt?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jul/20 09:27;githubbot;600","bereng commented on pull request #658:
URL: https://github.com/apache/cassandra/pull/658#issuecomment-659480431


   Also CI runs lack the cqlsh, and j11 (under j8) tests etc Is there any specific reason not run them?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jul/20 15:17;githubbot;600","adelapena commented on a change in pull request #658:
URL: https://github.com/apache/cassandra/pull/658#discussion_r457329746



##########
File path: test/unit/org/apache/cassandra/cql3/validation/entities/FrozenCollectionsTest.java
##########
@@ -258,6 +258,84 @@ public void testClusteringKeyUsage() throws Throwable
         );
     }
 
+    @Test
+    public void testClusteringKeyUsageWithReverseOrder() throws Throwable

Review comment:
       We have specific tests in `testLiteralReversedList`, `testLiteralReversedSet` and `testLiteralReversedMap`. This test and `testNestedClusteringKeyUsageWithReverseOrder` are counterparts for the existing `testClusteringKeyUsage` and `testNestedClusteringKeyUsage`, which also use only a single set type. Do you think we should also multiplex those, and have:
   * testClusteringKeyUsageSet
   * testClusteringKeyUsageList
   * testClusteringKeyUsageMap
   * testClusteringKeyUsageWithReverseOrderSet
   * testClusteringKeyUsageWithReverseOrderList
   * testClusteringKeyUsageWithReverseOrderMap
   * testNestedClusteringKeyUsageSet
   * testNestedClusteringKeyUsageList
   * testNestedClusteringKeyUsageMap
   * testNestedClusteringKeyUsageWithReverseOrderSet
   * testNestedClusteringKeyUsageWithReverseOrderList
   * testNestedClusteringKeyUsageWithReverseOrderMap
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 12:17;githubbot;600","adelapena commented on a change in pull request #658:
URL: https://github.com/apache/cassandra/pull/658#discussion_r457421664



##########
File path: test/unit/org/apache/cassandra/cql3/validation/entities/FrozenCollectionsTest.java
##########
@@ -258,6 +258,84 @@ public void testClusteringKeyUsage() throws Throwable
         );
     }
 
+    @Test
+    public void testClusteringKeyUsageWithReverseOrder() throws Throwable

Review comment:
       Sorry, `testNestedClusteringKeyUsage` and `testNestedClusteringKeyUsageWithReverseOrder` already include the three collection types, so it would be:
   * testClusteringKeyUsageSet
   * testClusteringKeyUsageList
   * testClusteringKeyUsageMap
   * testClusteringKeyUsageWithReverseOrderSet
   * testClusteringKeyUsageWithReverseOrderList
   * testClusteringKeyUsageWithReverseOrderMap
   * testNestedClusteringKeyUsageSet
   * testNestedClusteringKeyUsageWithReverseOrder




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 14:10;githubbot;600","bereng commented on a change in pull request #658:
URL: https://github.com/apache/cassandra/pull/658#discussion_r457425360



##########
File path: test/unit/org/apache/cassandra/cql3/validation/entities/FrozenCollectionsTest.java
##########
@@ -258,6 +258,84 @@ public void testClusteringKeyUsage() throws Throwable
         );
     }
 
+    @Test
+    public void testClusteringKeyUsageWithReverseOrder() throws Throwable

Review comment:
       @adelapena that's what I would do. Given List and Set tests are identical despite some minor syntax diffs I'll presume they can be easily folded into a common main test method + a Map one. But I am OCD :shrug: so I leave it at your discretion.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 14:15;githubbot;600","adelapena commented on a change in pull request #658:
URL: https://github.com/apache/cassandra/pull/658#discussion_r457456506



##########
File path: test/unit/org/apache/cassandra/cql3/validation/entities/FrozenCollectionsTest.java
##########
@@ -258,6 +258,84 @@ public void testClusteringKeyUsage() throws Throwable
         );
     }
 
+    @Test
+    public void testClusteringKeyUsageWithReverseOrder() throws Throwable

Review comment:
       Oh, I pushed a commit to the 2.2 PR with the changes before reading this. It folds the three collection types, actually, and also includes `testPartitionKeyUsage`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 14:48;githubbot;600","adelapena closed pull request #658:
URL: https://github.com/apache/cassandra/pull/658


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/21 15:52;githubbot;600","adelapena closed pull request #656:
URL: https://github.com/apache/cassandra/pull/656


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/21 15:52;githubbot;600","adelapena closed pull request #657:
URL: https://github.com/apache/cassandra/pull/657


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/21 15:52;githubbot;600","adelapena closed pull request #655:
URL: https://github.com/apache/cassandra/pull/655


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/May/21 15:52;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,8400,,,0,8400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 23 17:35:45 UTC 2020,,,,,,,All,,,,,,"0|z0erm8:",9223372036854775807,,,,adelapena,bereng,,,Low,,2.1.3,,,https://github.com/apache/cassandra/commit/9f8d5b8d069a1db88e70deafff6c0edc23c896d0,,,,,,,,,New unit tests are included in the PR.,,,,,"22/Jun/20 11:13;adelapena;It seems to affect all versions since 2.1;;;","29/Jun/20 11:19;adelapena;It seems that some parts of the parsing of {{Sets}}, {{Lists}} and {{Maps}} literals are not taking into account that the type can be wrapped into a reversed type. The attached patch simply makes sure to unwrap any possible reversed collection type.

CI results:
||PR||utest||dtest||CircleCI j8||CircleCI j11||
|[2.2|https://github.com/apache/cassandra/pull/655]  |[149|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/149/]|[190|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/190/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/57/workflows/01ede702-aa0f-4ea3-876d-a2bafc4d748b/]|-|
|[3.0|https://github.com/apache/cassandra/pull/656]  |[150|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/150/]|[191|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/191/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/60/workflows/47613064-8889-4cef-9101-35b7b771c94f/]|-|
|[3.11|https://github.com/apache/cassandra/pull/657] |[151|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/151/]|[192|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/192/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/58/workflows/0a01db90-f6ad-40b8-a9bf-af3a5e65fd0a/]|-|
|[trunk|https://github.com/apache/cassandra/pull/658]|[152|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/152/]|[193|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/193/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/59/workflows/f8e9db8c-1da5-4e01-9798-cae982cbcc7a/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/59/workflows/33b79196-8dda-42ce-a95d-07a219444753]|

;;;","17/Jul/20 09:32;bereng;[~adelapena] I left a comment on the unit tests. Other than that I checked the circle links as the rest 404 me. Circle, besides the probably related wall of failures on 2.2, lgtm. I did run some of the failing ones that either passed locally or match the failures in ci-cassandra. LGTM pending resolving the comment in the PR.;;;","20/Jul/20 14:43;adelapena;[~Bereng] I'm adding the requested additional tests to the PR for 2.2, and also some additional tests for the related already existing tests that aren't verifying every collection type. If they look good to you I'll merge them up to the other PRs and run CI for them. 

The CircleCI run for the updated 2.2 PR is [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/66/workflows/8314df8a-ebf4-4ba1-95ce-2e85aedb3851].;;;","21/Jul/20 07:23;bereng;Ha great [~adelapena] yes this is what I meant. Now we test all the collection types :-) Despite the wall of failures, which I bet are env related in 2.2, I am +1 on that. Next you should _rebase_ >2.2 imo as I read yesterday about a commit fixing a ton of flaky failures in 3.X. Once that's merged forward, rebased and CI looks good that should be it. We can skip compression and upgrade tests imo?;;;","21/Jul/20 15:55;adelapena;Great. I've rebased and run CI:
||PR||utest||dtest||CircleCI j8||CircleCI j11||
|[2.2|https://github.com/apache/cassandra/pull/655]  |[193|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/193/]|[229|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/229/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/70/workflows/f69c8ddc-b243-438d-86a5-579c67b70091]|-|
|[3.0|https://github.com/apache/cassandra/pull/656]  |[194|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/194/]|[230|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/230/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/69/workflows/c5548c6d-da91-48c3-94f6-d171410a2337]|-|
|[3.11|https://github.com/apache/cassandra/pull/657] |[195|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/195/]|[231|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/231/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/68/workflows/54c2b6b0-5eb9-4561-95f6-9b68b834dddb]|-|
|[trunk|https://github.com/apache/cassandra/pull/658]|[196|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/196/]|[232|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/232/]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/67/workflows/76d504cc-b1d1-42a3-bc45-b0b183194d21]|[link|https://app.circleci.com/pipelines/github/adelapena/cassandra/67/workflows/556d39f6-80b4-4342-bfa9-ec7fd12a25cd]|
;;;","22/Jul/20 07:57;bereng;[~adelapena]:
- 2.2 has a wall of failures, impossible to tell. Let's assume it's ok.
- 3.0 is clean
- 3.11 utest is failing SASIIndexTests which on cassandra ci are solid as a rock. I'd run those locally a few times before merging to confim. dtests match ci-cassandra
- trunk looks ok. Just the latest flakies I know of showing up.

If you confirm the 3.11 SASIIndexTest failures are flaky I'm +1.;;;","22/Jul/20 15:42;adelapena;bq. 3.11 utest is failing SASIIndexTests which on cassandra ci are solid as a rock. I'd run those locally a few times before merging to confim
[~Bereng] All those tests have some failure in [ci-cassandra|https://ci-cassandra.apache.org/job/Cassandra-3.11/75/testReport/org.apache.cassandra.index.sasi/SASIIndexTest/], although it only has the 11 more recent runs.

I'm running the test multiplexer for {{SASIIndexTest}} at cassandra-3.11 and 15814-3.11:

||branch||run1||run2||
|cassandra-3.11|[664|https://jenkins-cassandra.datastax.lan/job/parameterized-testall/664/]|[666|https://jenkins-cassandra.datastax.lan/job/parameterized-testall/666/]|
|15814-3.11|[665|https://jenkins-cassandra.datastax.lan/job/parameterized-testall/665/]|[667|https://jenkins-cassandra.datastax.lan/job/parameterized-testall/667/]|

For the first pair of runs I've seen that the following tests fail in both branches:
* testIndexMemtableSwitching
* testPagination
* testIndexRedistribution
However, {{testTruncate}} only fails in 15814-3.11. Since it only has failed 2 in 100 times, it's likely that we haven't seen it failing in cassandra-3.11 due to it's relatively low flakiness, thereof the second round of multiplexer runs.

Also, none of the tables created in SASI tests uses collections, so everything suggests that those tests failures are not related. 

;;;","22/Jul/20 17:04;adelapena;[~Bereng] The second run of the multiplexer has produced two failures in {{testTruncate}} for cassandra-3.11 and none for 15814-3.11, which is the opposite to the first run. That gives us a flakiness of 1% with and without the patch. With this and the lack of collections in the test I think it's safe to consider those failures unrelated, so I'd say we're ready to merge.;;;","23/Jul/20 08:55;bereng;[~adelapena] thx for putting up with my OCD and your extensive research :-) +1 lgtm;;;","23/Jul/20 12:01;adelapena;Thanks for the review.

Committed to {{cassandra-2.2}} as [9f8d5b8d069a1db88e70deafff6c0edc23c896d0|https://github.com/apache/cassandra/commit/9f8d5b8d069a1db88e70deafff6c0edc23c896d0] and merged all the way up to {{trunk}}.;;;","23/Jul/20 17:35;adelapena;Created CASSANDRA-15974 for the flaky SASI tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Submitting Validation requests can block ANTI_ENTROPY stage ,CASSANDRA-15812,13304749,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,samt,samt,13/May/20 19:03,21/Dec/20 07:58,13/Jul/23 08:39,09/Jun/20 12:46,4.0,4.0-beta1,,,,Consistency/Repair,,,,0,,,," RepairMessages are handled on Stage.ANTI_ENTROPY, which has a thread pool with core/max capacity of one, ie. we can only process one message at a time. 
 
Scheduling validation compactions may however block the stage completely, by blocking on CompactionManager's ValidationExecutor while submitting a new validation compaction, in cases where there are already more validations running than can be executed in parallel.",,blerer,jeromatron,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jun 09 12:46:03 UTC 2020,,,,,,,All,,,,,,"0|z0epfk:",9223372036854775807,,,,blerer,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/04533e6cdae94f91a62d769c874156d81301dc7d,,,,,,,,,"new unit tests added, existing dtests modified  ",,,,,"14/May/20 18:22;samt;I've pushed a branch [here|https://github.com/beobal/cassandra/tree/15812-trunk] with a fix for this, along with a couple of minor follow up commits.

The main fix is to switch the work queue in {{ValidationExecutor}} to a {{LinkedBlockingQueue}}, rather than a {{SynchronousQueue}}. When using the latter, the executor will spawn new threads until the max pool size is reached, but then block the caller until capacity becomes available. Using {{LBQ}} will allow additional tasks to be queued but also requires {{corePoolSize}} to be set appropriately as once that threshold is reached, new threads are only created if the work queue is full. To that end, {{corePoolSize}} is defaulted to whatever the value of {{concurrent_validations}} is. In turn, this defaults to the value of {{concurrent_compactors}}, but can be overridden. To guard against accidentally configuring this way too high (which some existing clusters may do as previously {{{{concurrent_validations}}}} had limited effect), it's capped to the value of {{{{concurrent_compactors}}}}. This safety check can be disabled via a system property at startup, or JMX on a running instance.

The previous behaviour, use of a {{SynchronousQueue}} and {{corePoolSize}} of 1, is maintained if required. A new yaml option {{validation_pool_full_strategy}} controls this, with options {{queue}} & {{block}}.

This branch also makes a similar change to the repair command pool in {{ActiveRepairService}}. When {{repair_pool_full_strategy}} was set to {{queue}}, a {{LinkedBlockingQueue}} is used for the work queue, but {{corePoolSize}} is always set to 1. As the work queue is unbounded, no addition threads will be created, giving effectivly single-threaded behaviour.

The last this is to also fix the timeout for {{PREPARE}} messages, which was shortened from 1 hour to {{rpc_timeout}} in CASSANDRA-9292, but it seems it was inadvertently reset when CASSANDRA-13397 was merged.
||branch||utests||in-jvm dtests||dtests_with_vnodes||dtests_no_vnodes||
|[15812-trunk|https://github.com/beobal/cassandra/tree/15812-trunk]|[jdk8|https://circleci.com/gh/beobal/cassandra/1426], [jdk11|https://circleci.com/gh/beobal/cassandra/1430]|[jdk8|https://circleci.com/gh/beobal/cassandra/1427], [jdk11|https://circleci.com/gh/beobal/cassandra/1425]|[jdk8|https://circleci.com/gh/beobal/cassandra/1431], [jdk11|https://circleci.com/gh/beobal/cassandra/1428]|[jdk8|https://circleci.com/gh/beobal/cassandra/1432], [jdk11|https://circleci.com/gh/beobal/cassandra/1429]|

I've looked at the dtest failures and the failing pytests appear to be flakey on trunk and/or being addressed by specific JIRAs. The exception is {{repair_tests.repair_test.py::TestRepair::test_dead_sync_initiator}}, I'm unable to get a failure from that locally, but I haven't really dug into it yet.
 The one in-jvm dtest also seems to have had a few failures on trunk recently, so I think that's unrelated.
;;;","27/May/20 13:57;blerer;The patch looks good to me. I just wonder if it makes sense to allow users to use the blocking behavior for the {{ValidationExecutor}} as we know that this approach might lead to blocking the ANTI_ENTROPY stage. Is there a scenario in which using that behavior would be better?;;;","28/May/20 12:01;samt;bq. Is there a scenario in which using that behavior would be better?

 

I can't think of one. Given that this is only targetting a major release, maybe we don't need to preserve the original behaviour. I'll push a patch to remove it unless anyone has reservations. [~spod], [~jjirsa]?;;;","09/Jun/20 11:24;samt;[~blerer] I've removed support for the old blocking behaviour and rebased, CI is running now

 
||Branch||JDK8||JDK11||
|[15812-trunk​|https://github.com/beobal/cassandra/commits/15812-trunk]|​[CircleCI|https://app.circleci.com/pipelines/github/beobal/cassandra/40/workflows/38230d47-53d3-415a-a1da-7d517b2c603b]|[CircleCI|https://app.circleci.com/pipelines/github/beobal/cassandra/40/workflows/cb744bb4-dc23-4eff-b888-96d622da3e30]​|

 ;;;","09/Jun/20 12:21;blerer;The change looks good and the failing tests seems unrelated.
Thanks a lot.;;;","09/Jun/20 12:36;samt;Thanks, the failing tests are covered by CASSANDRA-15792, CASSANDRA-15313 & CASSANDRA-15865

 ;;;","09/Jun/20 12:46;samt;Thanks, committed to trunk in {{04533e6cdae94f91a62d769c874156d81301dc7d}}.

[~blerer]  and I also discussed this patch in the context of draft [CEP-3|https://cwiki.apache.org/confluence/display/CASSANDRA/%28DRAFT%29+-+CEP-3%3A+Guardrails]. Guardrails could provide a cleaner mechanism to manage the hard and soft limits on concurrent validations.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default StringTableSize parameter causes GC slowdown,CASSANDRA-15810,13304706,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,blerer,tvdw,tvdw,13/May/20 15:45,16/Mar/22 15:16,13/Jul/23 08:39,17/Dec/20 17:11,4.0,4.0-beta4,,,,Local/Config,,,,0,gc,performance,,"While looking at tail latency on a Cassandra cluster, it came up that the default StringTableSize in Cassandra is set to a million:
{code:java}
# Larger interned string table, for gossip's benefit (CASSANDRA-6410)
-XX:StringTableSize=1000003{code}
This was done for CASSANDRA-6410 by [~jbellis] in '13, to optimize heap usage on a test case, running with 500 nodes and num_tokens=512.

Until Java 13, this string table is implemented as native code, and has to be traversed entirely during the GC initial marking phase, which is a STW event.

Some testing on my end shows that the pause time of a GC cycle can be reduced by approximately 10 milliseconds if we lower the string table size back to the Java 8 default of 60013 entries.

Thus, I would recommend this patch (3.11 branch, similar patch for 4.0):
{code:java}
diff --git a/conf/jvm.options b/conf/jvm.options
index 01bb1685b3..c184d18c5d 100644
--- a/conf/jvm.options
+++ b/conf/jvm.options
@@ -107,9 +107,6 @@
 # Per-thread stack size.
 -Xss256k

-# Larger interned string table, for gossip's benefit (CASSANDRA-6410)
--XX:StringTableSize=1000003
-
 # Make sure all memory is faulted and zeroed on startup.
 # This helps prevent soft faults in containers and makes
 # transparent hugepage allocation more effective.
 {code}
It does need some testing on more extreme clusters than I have access to, but I ran some Cassandra nodes with {{-XX:+PrintStringTableStatistics}} which suggested that the Java default will suffice here.",,benedict,blerer,brandon.williams,jeromatron,snazy,tvdw,,,,,,"blerer opened a new pull request #857:
URL: https://github.com/apache/cassandra/pull/857


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/20 10:32;githubbot;600","smiklosovic closed pull request #857:
URL: https://github.com/apache/cassandra/pull/857


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 15:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,blerer,,,,,,,,,,,,,,,,,,,,Performance,Low Hanging Fruit,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Dec 17 17:11:48 UTC 2020,,,,,,,All,,,,,,"0|z0ep60:",9223372036854775807,,,,brandon.williams,,,,,,2.0.4,,,https://github.com/apache/cassandra/commit/0d56f70ae7def5b8ff9e3aef14cfa7dff01a71ac,,,,,,,,,No additional test needed,,,,,"13/Aug/20 08:26;snazy;ISTM that it's better to remove the only usage of {{String.intern()}} in {{org.apache.cassandra.gms.VersionedValue#VersionedValue(java.lang.String)}} and the {{-XX:StringTableSize}} JVM argument entirely. [~benedict] WDYT?

There's [evidence|https://shipilev.net/jvm/anatomy-quarks/10-string-intern/] that String-interning can cause GC and performance issues.
;;;","13/Aug/20 08:54;benedict;+1; I saw this recently and was unconvinced by the usage, but didn't try to explore removing it.  If this is the only source of interning, I'd be strongly in favour of removing.  If we _really_ need to ""intern"" here, we can use something like a {{WeakHashMap}}, and perhaps intern the specific {{ApplicationState}} we think will benefit, but I'm uncertain if it's needed at all.  Perhaps we should do some back-of-envelope calculations for how much heap will be used in a huge cluster without ""interning"" vs with.;;;","13/Aug/20 09:31;snazy;Yea - I think, the biggest ""consumer"" is probably the list of tokens, which is also quite unique per node. So no savings for that one.
Potential saving might happen for ""release-version"", ""dc"", ""rack"" and current ""schema-version"" - not particularly long strings so I doubt that it's actually  worth the {{String.intern()}} as the total savings are rather low. The other values of {{VersionedValue}} are unique per peer and put unnecessary pressure on the string-intern-map.

Other usages of {{String.intern()}} in the whole production code (i.e. including JDK and libraries) are (intentionally) not on a hot-path.

This change feels IMO safe for 4.0 and also safe to be backported to 3.11 + 3.0.;;;","13/Aug/20 13:36;brandon.williams;bq. This change feels IMO safe for 4.0 and also safe to be backported to 3.11 + 3.0.

I personally feel it's a bit much to do in a point release in stable versions.  If there's any chance of regression, I don't want to burn new users on those versions, but if experts want to do this, it's just JVM options they can change themselves.;;;","15/Dec/20 10:43;tvdw;Added a Fix Version here; if a main selling point for 4.0 is lower tail latency then this makes that impact even more pronounced.;;;","17/Dec/20 10:35;blerer;I pushed a [PR|https://github.com/apache/cassandra/pull/857] for 4.0. Ci results [j8|https://app.circleci.com/pipelines/github/blerer/cassandra/84/workflows/05e5708a-0378-4b67-bd3b-427487a866a0], [j11|https://app.circleci.com/pipelines/github/blerer/cassandra/84/workflows/5fe0c950-9886-4df1-9246-711a5a542ae2]. ;;;","17/Dec/20 10:36;blerer;[~brandon.williams] do you have the time to review this patch?;;;","17/Dec/20 15:01;brandon.williams;+1;;;","17/Dec/20 17:11;blerer;Committed into trunk at 0d56f70ae7def5b8ff9e3aef14cfa7dff01a71ac;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C* 4.0 is missing a way to identify transient/non-transient SSTables on disk,CASSANDRA-15806,13304398,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,sequoyha,sequoyha,sequoyha,12/May/20 16:05,21/Dec/20 08:08,13/Jul/23 08:39,20/May/20 04:16,4.0,4.0-beta1,,,,Tool/sstable,,,,0,,,,"Currently, there is no way to identify SSTables that were created as transient replicated data. Even thought the feature is experimental we should open that up for those that want to experiment. This seems to be an oversight. I have added the missing line of code to the SStableMetadataViewer and will attach a patch shortly.",,e.dimitrova,sequoyha,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/May/20 16:10;sequoyha;15806-4.0.txt;https://issues.apache.org/jira/secure/attachment/13002751/15806-4.0.txt",,,,,,,,,,,,,,1.0,sequoyha,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed May 20 13:26:59 UTC 2020,,,,,,,All,,,,,,"0|z0en9s:",9223372036854775807,,,,e.dimitrova,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/3f689e93768ea670f7a8351ec30128dd4b410c9c,,,,,,,,,"Ran a simple test against sstable to make sure it worked:
{noformat}
sequoyha.pelletier@spelletier-rmbp15:[~/cassandra-trunk/tools/bin]
510-Mon May 11 15:16

 LocalDeletionTime: 1442880000 (09/21/2015 17:00:00)
EncodingStats minTimestamp: 1588980982231688 (05/08/2020 16:36:22)
...
RegularColumns: author:org.apache.cassandra.db.marshal.UTF8Type, isbn:org.apache.cassandra.db.marshal.UTF8Type, publisher:org.apache.cassandra.db.marshal.UTF8Type, category:org.apache.cassandra.db.marshal.UTF8Type, product_name:org.apache.cassandra.db.marshal.UTF8Type
Is Transient: false{noformat}

The isTransient is a boolean value so false is enough to verify the information is showing.",,,,,"13/May/20 23:59;e.dimitrova;LGTM 
- Changed the field name from Is Transient to IsTransient, considering the format of the rest of them in the list.
- CHANGES.txt updated

[Branch | https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15806]
 
I think running the unit tests and inJVM for this one is enough. They were green here:
[Java 8 unit tests | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/131/workflows/254a32b9-8011-4137-8c4f-605fcf4f7593/jobs/695]
[Java 11 unit tests | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/131/workflows/6ab777ee-8038-499e-903f-5fcbf9c00786/jobs/707]
[Java 8 inJVM | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/131/workflows/254a32b9-8011-4137-8c4f-605fcf4f7593/jobs/694]
[Java 11 inJVM | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/131/workflows/6ab777ee-8038-499e-903f-5fcbf9c00786/jobs/693]

[~brandon.williams], do you want to check and commit? (not a committer yet);;;","20/May/20 04:16;snazy;Thanks!

Committed as [3f689e93768ea670f7a8351ec30128dd4b410c9c|https://github.com/apache/cassandra/commit/3f689e93768ea670f7a8351ec30128dd4b410c9c] to [trunk|https://github.com/apache/cassandra/tree/trunk].
;;;","20/May/20 13:26;e.dimitrova;Thank you [~snazy];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential duplicate rows on 2.X->3.X upgrade when multi-rows range tombstones interacts with collection tombstones,CASSANDRA-15805,13304387,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,slebresne,slebresne,slebresne,12/May/20 15:12,27/May/20 15:23,13/Jul/23 08:39,27/May/20 15:23,3.0.21,3.11.7,,,,Consistency/Coordination,Local/SSTable,,,1,,,,"The legacy reading code ({{LegacyLayout}} and {{UnfilteredDeserializer.OldFormatDeserializer}}) does not handle correctly the case where a range tombstone covering multiple rows interacts with a collection tombstone.

A simple example of this problem is if one runs on 2.X:
{noformat}
CREATE TABLE t (
  k int,
  c1 text,
  c2 text,
  a text,
  b set<text>,
  c text,
  PRIMARY KEY((k), c1, c2)
);

// Delete all rows where c1 is 'A'
DELETE FROM t USING TIMESTAMP 1 WHERE k = 0 AND c1 = 'A';
// Inserts a row covered by that previous range tombstone
INSERT INTO t(k, c1, c2, a, b, c) VALUES (0, 'A', 'X', 'foo', {'whatever'}, 'bar') USING TIMESTAMP 2;
// Delete the collection of that previously inserted row
DELETE b FROM t USING TIMESTAMP 3 WHERE k = 0 AND c1 = 'A' and c2 = 'X';
{noformat}

If the following is ran on 2.X (with everything either flushed in the same table or compacted together), then this will result in the inserted row being duplicated (one part containing the {{a}} column, the other the {{c}} one).

I will note that this is _not_ a duplicate of CASSANDRA-15789 and this reproduce even with the fix to {{LegacyLayout}} of this ticket. That said, the additional code added to CASSANDRA-15789 to force merging duplicated rows if they are produced _will_ end up fixing this as a consequence (assuming there is no variation of this problem that leads to other visible issues than duplicated rows). That said, I ""think"" we'd still rather fix the source of the issue.
",,aleksey,jeromatron,marcuse,mck,rustyrazorblade,slebresne,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,slebresne,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue May 26 09:42:53 UTC 2020,,,,,,,All,,,,,,"0|z0en7c:",9223372036854775807,,,,aleksey,marcuse,,,Critical,,3.0 alpha 1,,,"[8358e19840d352475a5831d130ff3c43a11f2f4e|https://github.com/apache/cassandra/commit/8358e19840d352475a5831d130ff3c43a11f2f4e], [c8a2834606d683ba9945e9cc11bdb4207ce269d1|https://github.com/apache/cassandra/commit/c8a2834606d683ba9945e9cc11bdb4207ce269d1]",,,,,,,,,in-jvm dtests included,,,,,"12/May/20 15:44;slebresne;To understand why this happens, let me write down the atoms that the example of the description generates on 2.X (using a simplified representation that I hope is clear enough):
{noformat}
atom1: RT([A:_, A:X:b:_])@1,     // beginning of all 'A' rows to beginning of A:X's b column
atom2: Cell(A:X:)@2,             // row marker for A:X
atom3: Cell(A:X:a=foo)@2,        // value of a in A:X
atom4: RT([A:X:b:_, A:X:b:!])@3, // collection tombstone for b in A:X's
atom5: RT([A:X:b:!, A:!])@1,     // remainder of covering RT, from end of b in A:X to end of all 'A' rows
atom6: Cell(A:X:c=bar)@2         // value of c in A:X
{noformat}
Those atoms are deserialized into {{LegacyCell}} and {{LegacyRangeTombstone}} on 3.X as:
{noformat}
atom1: RT(Bound(INCL_START_BOUND(A), collection=null)-Bound(EXCL_END_BOUND(A:B), collection=null), deletedAt=1, localDeletion=1589204864)
atom2: LegacyCell(REGULAR, name=Cellname(clustering=A:X, column=null, collElt=null), v=, ts=2, ldt=2147483647, ttl=0)
atom3: LegacyCell(REGULAR, name=Cellname(clustering=A:X, column=a, collElt=null), v=foo, ts=2, ldt=2147483647, ttl=0)
atom4: RT(Bound(INCL_START_BOUND(A:X), collection=b)-Bound(INCL_END_BOUND(A:X), collection=b), deletedAt=3, localDeletion=1589204864)
atom5: RT(Bound(EXCL_START_BOUND(A:X), collection=null)-Bound(INCL_END_BOUND(A), collection=null), deletedAt=1, localDeletion=1589204864)
atom6: LegacyCell(REGULAR, name=Cellname(clustering=A:X, column=c, collElt=null), v=bar, ts=2, ldt=2147483647, ttl=0)
{noformat}

I'll point out that those are a direct translation of the 2.X atoms except for {{atom1}} and {{atom5}} that are slightly different:
* instead of {{atom1}} stopping at the beginning of the row {{b}} column, it extends to the end of the row.
* and instead of {{atom5}} staring after that {{b}} column, it starts after the row. Do note however that the order of atoms is still the one above, so that atom is effectively out-of-order.

The reason for those differences is the logic [at the beginning of {{LegacyLayout.RangeTombstone}}|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/LegacyLayout.java#L1883], whose comment is trying to explain, but is basically due to the legacy layer having to map all 2.X RTs into either a 3.X range tombstone (so one over multiple rows), a row tombstone or a collection one.

Anyway, as mentioned above, the problem is that {{atom5}} is out of order.  What currently happens is that when {{atom5}} is encountered by {{UnfilteredDeserialized.OldFormatDeserializer}}, it will be passed to the {{CellGrouper}} currently grouping the row, and will end up in the [{{CellGrouper#addGenericTombstone}} method|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/LegacyLayout.java#L1544].  But, because that atom starts strictly after the row being grouped, the method returns {{false}} and the row is generated a first time. Later, we get {{atom6}} which restarts the row with the value of column {{c}}, after which it is generated a second time.
;;;","13/May/20 12:51;slebresne;There is probably a few variations for how to fix this, but what feels the more intuitive to me is to:
 # slightly modify the ctor of {{LegacyRangeTombstone}} so the {{atom5}} of my previous comment use an inclusive start. Mostly because that make the rest of the logic a bit simpler imo (we can still assume that when we get a atom whose cluster strictly sort after the currently grouper row, we're done with that row).
 # modify {{UnfilteredDeserializer.OldFormatDeserializer}} so that when, while grouping a row, it encounters a RT that covers it, is ""splits"" that into a row tombstone covering the row, and push back the handling of the rest of the tombstone to when the row is truly finished.

I've pushed a patch doing so for 3.0 below (thanks to [~marcuse] for triggering CI on this):
||branch||unit tests||dtests||jvm dtests||jvm upgrade dtest||
|[https://github.com/pcmanus/cassandra/commits/C-15805-3.0]|[utests|https://circleci.com/gh/krummas/cassandra/3289]|[vnodes|https://circleci.com/gh/krummas/cassandra/3292] [no-vnodes|https://circleci.com/gh/krummas/cassandra/3293]|[jvm dtests|https://circleci.com/gh/krummas/cassandra/3290]|[upgrade dtests|https://circleci.com/gh/krummas/cassandra/3294]|

I'll note that the branch contains another small fix, that is a lot less important. Namely, [the return at the beginning of {{CellGrouper#addCollectionTombstone}}|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/LegacyLayout.java#L1516] should be {{true}}, not {{false}} as it currently is. The test in question checks if a collection tombstone happens to not be selected by the query we're decoding data for. If it isn't included, we can ignore the tombstone, so we can/should return, but not with {{false}} as that imply the row is finished, which it probably isn't.

Now the reason I say that last problem is less important is that in practice, only thrift queries should run into this (since CQL queries queries all column effectively) so even if we duplicate the row here, it won't matter when the result is converted back to thrift (besides, having a collection tombstone implies that this is a thrift query on a CQL table, which is dodgy in the first place). Anyway, the code is still obviously wrong and the fix trivial, so included it it nonetheless (in a separate commit).;;;","15/May/20 10:52;marcuse;This LGTM, two minor ignoreable comments;

* lazily initialise the {{outOfOrderAtom}} queue in {{AtomIterator}} as it will be infrequently used (and maybe name it {{outOfOrderAtoms}} )
* consume the peeked atom ({{atoms.next()}}) before calling {{atoms.pushOutOfOrder}} in {{UnfilteredIterator#readRow}} to make it more obvious we can't consume the atom we just pushed;;;","18/May/20 18:26;aleksey;Nit, feel free to ignore: in {{UnfilteredDeserializer}} on line 701, redundant {{this}}. Otherwise pretty straightforward and LGTM.;;;","19/May/20 09:42;slebresne;Thanks for the review. I addressed the comments, squash-cleaned, 'merged' into 3.11 and started CI (first try at https://ci-cassandra.apache.org, not sure how that will go).

||branch||CI||
| [3.0|https://github.com/pcmanus/cassandra/commits/C-15805-3.0] | [ci-cassandra #134|https://ci-cassandra.apache.org/job/Cassandra-devbranch/134/] |
| [3.11|https://github.com/pcmanus/cassandra/commits/C-15805-3.11] | [ci-cassandra #135|https://ci-cassandra.apache.org/job/Cassandra-devbranch/135/] |
;;;","26/May/20 09:42;mck;[~slebresne], i've re-run #131 for you as https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/134/pipeline (taking away the stress and cdc stages, as they don't exist in 3.0) and #132 as https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/135/pipeline (just a retry).

(The CI failure in #132 is addressed in CASSANDRA-15826.);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Commented-out lines that end in a semicolon cause an error.,CASSANDRA-15802,13304018,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,RensGroothuijsen,null-,null-,11/May/20 06:17,03/Jun/22 19:46,13/Jul/23 08:39,20/Aug/20 12:03,4.0,4.0-beta2,,,,CQL/Interpreter,CQL/Syntax,,,0,,,,"Commented-out lines that end in a semicolon cause an error.

For example:

/*

describe keyspaces;

*/

 

This produces an error:

SyntaxException: line 2:22 no viable alternative at input '<EOF> (...*
describe keyspaces;...)

 

It works as expected if you use syntax:

-- describe keyspaces;

 

Environment:

python:3.7.7-slim-stretch (docker image)

 

I found that this was first seen here, and was patched, but the bug appears to have resurfaced:

https://issues.apache.org/jira/browse/CASSANDRA-2488",,ahomoki,jwest,mck,null-,RensGroothuijsen,,,,,,,"rgroothuijsen opened a new pull request #598:
URL: https://github.com/apache/cassandra/pull/598


   It has been reported that including a semicolon in a CQL comment block causes an error, since cqlsh does not discern whether it is currently inside a comment block while preparing statements. As a result, the comment is parsed up to the semicolon and executed as if it were a statement.
   
   The most straightforward solution, implemented in this PR, would be to simply remove everything inside a comment block from the input rather than keeping it as CQL to be parsed. 
   
   An alternative way would have been to restructure the parsing so that the comments are preserved, but this would be more complex and, to my knowledge, these comments would be ignored all the same.
   
   The method implemented here removes, in order:
   - Comment blocks that start and end on the same line
   - The start of a comment block and anything following it
   - The end of a comment block and anything preceding it
   - Any line that is marked as being inside a comment block, but not having any start/end markers


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/May/20 18:05;githubbot;600","michaelsembwever commented on a change in pull request #598:
URL: https://github.com/apache/cassandra/pull/598#discussion_r471123210



##########
File path: pylib/cqlshlib/test/test_cql_parsing.py
##########
@@ -711,6 +711,14 @@ def test_parse_drop_index(self):
     def test_parse_select_token(self):
         pass
 
+    def test_strip_comment_blocks_from_input(self):
+        parsed = parse_cqlsh_statements('SELECT FROM /* \n comment block starts here; \n and continues here \n */ ""MyTable"";')
+        self.assertSequenceEqual(tokens_with_types(parsed),
+                                 [('SELECT', 'reserved_identifier'),
+                                  ('FROM', 'reserved_identifier'),
+                                  ('""MyTable""', 'quotedName'),
+                                  (';', 'endtoken')])

Review comment:
       it would be great to ensure the different variations the code covers is tested, for example…
   ```suggestion
   
           parsed = parse_cqlsh_statements('SELECT FROM /* comment block */ ""MyTable"";')
           self.assertSequenceEqual(tokens_with_types(parsed),
                                    [('SELECT', 'reserved_identifier'),
                                     ('FROM', 'reserved_identifier'),
                                     ('""MyTable""', 'quotedName'),
                                     (';', 'endtoken')])
   
           parsed = parse_cqlsh_statements('SELECT FROM /* \n comment block starts here; \n and continues here \n */ ""MyTable"";')
           self.assertSequenceEqual(tokens_with_types(parsed),
                                    [('SELECT', 'reserved_identifier'),
                                     ('FROM', 'reserved_identifier'),
                                     ('""MyTable""', 'quotedName'),
                                     (';', 'endtoken')])
   
           parsed = parse_cqlsh_statements('''
                                           SELECT FROM /*
                                            comment block starts here;
                                            and continues here
                                            */ ""MyTable"";
                                           ''')
           self.assertSequenceEqual(tokens_with_types(parsed),
                                    [('SELECT', 'reserved_identifier'),
                                     ('FROM', 'reserved_identifier'),
                                     ('""MyTable""', 'quotedName'),
                                     (';', 'endtoken')])
   
           parsed = parse_cqlsh_statements('''
                                           /* comment block */
                                           SELECT FROM ""MyTable"";
                                           ''')
           self.assertSequenceEqual(tokens_with_types(parsed),
                                    [('SELECT', 'reserved_identifier'),
                                     ('FROM', 'reserved_identifier'),
                                     ('""MyTable""', 'quotedName'),
                                     (';', 'endtoken')])
   
           parsed = parse_cqlsh_statements('''
                                           /* comment block */
                                           /* another comment */ SELECT FROM /*
                                            comment block starts here;
                                            and continues here
                                            */ ""MyTable"";
                                           ''')
           self.assertSequenceEqual(tokens_with_types(parsed),
                                    [('SELECT', 'reserved_identifier'),
                                     ('FROM', 'reserved_identifier'),
                                     ('""MyTable""', 'quotedName'),
                                     (';', 'endtoken')])
   
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Aug/20 15:03;githubbot;600","rgroothuijsen commented on a change in pull request #598:
URL: https://github.com/apache/cassandra/pull/598#discussion_r471142974



##########
File path: pylib/cqlshlib/test/test_cql_parsing.py
##########
@@ -711,6 +711,14 @@ def test_parse_drop_index(self):
     def test_parse_select_token(self):
         pass
 
+    def test_strip_comment_blocks_from_input(self):
+        parsed = parse_cqlsh_statements('SELECT FROM /* \n comment block starts here; \n and continues here \n */ ""MyTable"";')
+        self.assertSequenceEqual(tokens_with_types(parsed),
+                                 [('SELECT', 'reserved_identifier'),
+                                  ('FROM', 'reserved_identifier'),
+                                  ('""MyTable""', 'quotedName'),
+                                  (';', 'endtoken')])

Review comment:
       Good idea, thanks for the help in writing them out as well.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Aug/20 18:22;githubbot;600","rgroothuijsen commented on a change in pull request #598:
URL: https://github.com/apache/cassandra/pull/598#discussion_r471177344



##########
File path: pylib/cqlshlib/test/test_cql_parsing.py
##########
@@ -711,6 +711,14 @@ def test_parse_drop_index(self):
     def test_parse_select_token(self):
         pass
 
+    def test_strip_comment_blocks_from_input(self):
+        parsed = parse_cqlsh_statements('SELECT FROM /* \n comment block starts here; \n and continues here \n */ ""MyTable"";')
+        self.assertSequenceEqual(tokens_with_types(parsed),
+                                 [('SELECT', 'reserved_identifier'),
+                                  ('FROM', 'reserved_identifier'),
+                                  ('""MyTable""', 'quotedName'),
+                                  (';', 'endtoken')])

Review comment:
       I realize I did mess up the commit message when I accepted your changes. Will that be okay, or is it worth rebasing my branch?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Aug/20 00:06;githubbot;600","michaelsembwever commented on a change in pull request #598:
URL: https://github.com/apache/cassandra/pull/598#discussion_r473803909



##########
File path: bin/cqlsh.py
##########
@@ -906,12 +907,30 @@ def cmdloop(self):
                     self.reset_statement()
                     print('')
 
+    def strip_comment_blocks(self, statementtext):
+        comment_block_in_literal_string = re.search('[""].*[/][*].*[*][/].*[""]', statementtext)
+        if not comment_block_in_literal_string:
+            result = re.sub('[/][*].*[*][/]', """", statementtext)
+            if '*/' in result and not '/*' in result and not self.in_comment:

Review comment:
       this failed the pycodestyle test: https://ci-cassandra.apache.org/job/Cassandra-devbranch/254/testReport/junit/dtest.cqlsh_tests.test_cqlsh/TestCqlsh/test_pycodestyle_compliance/
   
   have fixed it here: https://github.com/thelastpickle/cassandra/commit/b51117fb57948d9b4f67ae9f43cb7e88e4ec1f3f




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Aug/20 09:20;githubbot;600","smiklosovic closed pull request #598:
URL: https://github.com/apache/cassandra/pull/598


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:32;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-2488,CASSANDRA-17667,,,,,,,,"11/May/20 06:16;null-;cqlsh.png;https://issues.apache.org/jira/secure/attachment/13002592/cqlsh.png",,,,,,,,,,,,,,1.0,RensGroothuijsen,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Aug 20 19:24:41 UTC 2020,,,,,,,All,,,,,,"0|z0ekxc:",9223372036854775807,,,,mck,,,,Low,,0.8 beta 1,,,https://github.com/apache/cassandra/commit/1b1b87cfe3a9a93c393d1f3c1e003394260edeb5,,,,,,,,,N/A,,,,,"11/May/20 19:48;jwest;This seems to be specific to multi-line comments:

{code}
cqlsh> /* describe keyspaces */
cqlsh> /* describe keyspaces; */
cqlsh> -- describe keyspaces;
cqlsh> -- describe keyspaces
cqlsh> -- describe keyspaces
cqlsh> /*
   ... describe keyspaces;
SyntaxException: line 2:19 mismatched character '<EOF>' expecting '*'
cqlsh> // describe keyspaces;
{code}

{code}
$ cat no-semi.cql
/*
  this is a comment
  with no semi-colon
 */
$ ./bin/cqlsh -f no-semi.cql
$
{code}

{code}
$ cat semi.cql
/*
 this is a multi-line
 comment with a semi-colon;
 */
$ ./bin/cqlsh -f semi.cql
semi.cql:4:SyntaxException: line 3:27 mismatched character '<EOF>' expecting '*'
semi.cql:5:Incomplete statement at end of file
{code};;;","12/May/20 06:44;null-;Agreed, you're right Jordan. I did have a look through the cqlsh.py and see if I could spot where to patch it.

I found the ""self.in_comment"" flag but this doesn't ever appear to be set to anything other than false, so I'm not sure if this is deprecated? Or maybe the fact its never set might be the problem?;;;","14/May/20 21:40;RensGroothuijsen;[~null-]The parser being unaware that it is currently inside a comment block does seem to be the problem. It stops parsing as soon as it encounters an end token, and sends the statement without the trailing comment block terminator, which then naturally returns a syntax error.

Edit: I think [this line|https://github.com/apache/cassandra/blob/trunk/bin/cqlsh.py#L932] is where the relevant end token check is happening.;;;","20/May/20 14:47;null-;Thanks [~RensGroothuijsen] and [~jwest] for your comments on this. Any idea how it can be patched? [~djoshi] any ideas?

This is the only thing holding me back from moving away from Python 2.7

thanks! :);;;","20/May/20 14:53;RensGroothuijsen;[~null-] I've been playing around with a few ways, and I figure the most straightforward approach is to simply strip comment blocks out of the input before processing. I'm preparing a PR with that idea in mind.;;;","12/Aug/20 09:10;mck;Hi [~RensGroothuijsen], is [this|https://github.com/apache/cassandra/pull/598] the PR for this?

Can we add tests to the patch please? Otherwise LGTM.;;;","15/Aug/20 22:47;RensGroothuijsen;[~mck] Correct, that's the PR. I've added a simple unit test demonstrating the removal of comment blocks, though if you think anything else needs to be added or changed I'm open for suggestions.;;;","17/Aug/20 05:07;mck;CI run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/244/pipeline];;;","17/Aug/20 09:42;mck;A number of the dtests are broken from this patch.
See [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/244/testReport/] compared to [trunk|https://ci-cassandra.apache.org/job/Cassandra-trunk/lastCompletedBuild/testReport/].

One example is [cqlsh_tests.test_cqlsh.TestCqlsh.test_describe|https://ci-cassandra.apache.org/job/Cassandra-devbranch/244/testReport/dtest.cqlsh_tests.test_cqlsh/TestCqlsh/test_describe/];;;","18/Aug/20 18:02;RensGroothuijsen;Might be because this branch uses an outdated trunk, when I merged trunk into my branch that particular test passed.;;;","18/Aug/20 18:21;mck;Ok, new run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/249/pipeline].;;;","18/Aug/20 18:32;RensGroothuijsen;Thanks, I probably should've pushed before I mentioned that though. Looking at the timestamps, I think this one's gonna replay the old one.;;;","18/Aug/20 19:47;mck;Oh, ok. No worries, have aborted that one, new run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/250/pipeline].;;;","19/Aug/20 09:36;mck;[~RensGroothuijsen], there's two scenarios here that need to be addressed:
 - if the {{/* … */}} is inside a string literal it must not be stripped out
 - if an {{\*/}} is encountered without first encountering an {{/\*}} then the cql parsing needs to fail (rather than strip out everything on that line before the {{*/}}

I've added two more tests [here|https://github.com/apache/cassandra/commit/c62352045f13e946e8f56bc83485e31a3aa73a91] that cover these^. The second needs finishing…;;;","20/Aug/20 11:36;mck;Latest CI run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/258/pipeline/].;;;","20/Aug/20 12:03;mck;Committed as [1b1b87cfe3a9a93c393d1f3c1e003394260edeb5|https://github.com/apache/cassandra/commit/1b1b87cfe3a9a93c393d1f3c1e003394260edeb5].

Thanks for taking a few rounds on the patch [~RensGroothuijsen]!;;;","20/Aug/20 19:24;RensGroothuijsen;[~mck] Nice! Thanks for your help in getting me there as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tiny documentation fix in Architecture/Overview,CASSANDRA-15801,13304005,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,polandll,pmw,pmw,11/May/20 04:33,20/Jun/23 19:24,13/Jul/23 08:39,20/Jun/23 19:24,,,,,,Documentation,,,,0,,,,"I noticed a small issue in the documentation, so I'd like to fix it.

This issue also exists to guide me to the proper way to make contributions to Cassandra, hopefully larger ones in the future, so please forgive the trivialness of this fix.",,pmw,polandll,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/May/20 04:38;pmw;0001-CASSANDRA-15801-Fix-typo-in-Architecture-Overview-do.patch;https://issues.apache.org/jira/secure/attachment/13002584/0001-CASSANDRA-15801-Fix-typo-in-Architecture-Overview-do.patch",,,,,,,,,,,,,,1.0,polandll,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jan 21 20:01:39 UTC 2021,,,,,,,All,,,,,,"0|z0ekug:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jan/21 20:01;polandll;I've incorporated the information in this ticket with other edits to this page. It will be included in the C* 4.0 GA release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only calculate 1.0 + dynamicBadnessThreshold once per loop in DynamicEndpointSnitch,CASSANDRA-15798,13303513,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jwest,jwest,jwest,08/May/20 00:52,21/Dec/20 08:07,13/Jul/23 08:39,08/May/20 16:59,4.0,4.0-beta1,,,,Messaging/Internode,,,,0,,,,"The change to make dynamicBadnessThreshold volatile and mutable in https://issues.apache.org/jira/browse/CASSANDRA-12179 could have minor implications for the performance of this code: https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java#L216. Its better to calculate this once before the loop starts, which has the added benefit that the value is stable throughout the calculation as well. ",,dcapwell,jeromatron,jwest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jwest,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri May 08 16:59:04 UTC 2020,,,,,,,All,,,,,,"0|z0ehtk:",9223372036854775807,,,,dcapwell,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/66eae58cd4f53c03ca5ab6b520aa490f7f61a59c,,,,,,,,,https://app.circleci.com/pipelines/github/jrwest/cassandra/14/workflows/acf26d1e-7920-4338-b385-f2eb3164e772,,,,,"08/May/20 01:59;dcapwell;LGTM +1;;;","08/May/20 16:59;jwest;Thanks [~dcapwell]. Committed as 66eae58cd4f53c03ca5ab6b520aa490f7f61a59c. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky BinLogTest - org.apache.cassandra.utils.binlog.BinLogTest,CASSANDRA-15797,13303440,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,jmeredithco,jmeredithco,07/May/20 16:08,21/Dec/20 08:07,13/Jul/23 08:39,21/May/20 08:27,4.0,4.0-beta1,,,,Test/unit,,,,0,,,,"An internal CI system is failing BinLogTest somewhat frequently under JDK11.  Configuration was recently changed to reduce the number of cores the tests run with, however it is reproducible on an 8 core laptop.

{code}
[junit-timeout] OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
[junit-timeout] Testsuite: org.apache.cassandra.utils.binlog.BinLogTest
[Junit-timeout] WARNING: An illegal reflective access operation has occurred
[junit-timeout] WARNING: Illegal reflective access by net.openhft.chronicle.core.Jvm (file:/.../lib/chronicle-core-1.16.4.jar) to field java.nio.Bits.RESERVED_MEMORY
[junit-timeout] WARNING: Please consider reporting this to the maintainers of net.openhft.chronicle.core.Jvm
[junit-timeout] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[junit-timeout] WARNING: All illegal access operations will be denied in a future release
[junit-timeout] Testsuite: org.apache.cassandra.utils.binlog.BinLogTest Tests run: 13, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 13.895 sec
[junit-timeout]
[junit-timeout] Testcase: testPutAfterStop(org.apache.cassandra.utils.binlog.BinLogTest):	FAILED
[junit-timeout] expected:<null> but was:<org.apache.cassandra.utils.binlog.BinLog$1@5ed190be>
[junit-timeout] junit.framework.AssertionFailedError: expected:<null> but was:<org.apache.cassandra.utils.binlog.BinLog$1@5ed190be>
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.testPutAfterStop(BinLogTest.java:431)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.utils.binlog.BinLogTest FAILED
{code}


There's also a different failure under JDK8
{code}
junit-timeout] Testsuite: org.apache.cassandra.utils.binlog.BinLogTest
[junit-timeout] Testsuite: org.apache.cassandra.utils.binlog.BinLogTest Tests run: 13, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 15.273 sec
[junit-timeout]
[junit-timeout] Testcase: testBinLogStartStop(org.apache.cassandra.utils.binlog.BinLogTest):	FAILED
[junit-timeout] expected:<2> but was:<0>
[junit-timeout] junit.framework.AssertionFailedError: expected:<2> but was:<0>
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.testBinLogStartStop(BinLogTest.java:172)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.utils.binlog.BinLogTest FAILED
{code}

Reproducer

{code}
PASSED=0; time  { while ant testclasslist -Dtest.classlistprefix=unit -Dtest.classlistfile=<(echo org/apache/cassandra/utils/binlog/BinLogTest.java); do PASSED=$((PASSED+1)); echo PASSED $PASSED; done }; echo FAILED after $PASSED runs.
{code}

In the last four attempts it has taken 31, 38, 27 and 10 rounds respectively under JDK11 and took 51 under JDK8 (about 15 minutes).
I have not tried running in a cpu-limited container or anything like that yet.


Additionally, this went past in the logs a few times (under JDK11).  No idea if it's just an artifact of weird test setup, or something more serious.


{code}
[junit-timeout] WARNING: Please consider reporting this to the maintainers of net.openhft.chronicle.core.Jvm
[junit-timeout] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[junit-timeout] WARNING: All illegal access operations will be denied in a future release
[junit-timeout] Testsuite: org.apache.cassandra.utils.binlog.BinLogTest Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.839 sec
[junit-timeout]
[junit-timeout] java.lang.Throwable: 1e53135d-main creation ref-count=1
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.newRefCountHistory(ReferenceCounter.java:45)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.<init>(ReferenceCounter.java:35)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.onReleased(ReferenceCounter.java:40)
[junit-timeout]         at net.openhft.chronicle.bytes.AbstractBytes.<init>(AbstractBytes.java:38)
[junit-timeout]         at net.openhft.chronicle.bytes.MappedBytes.<init>(MappedBytes.java:59)
[junit-timeout]         at net.openhft.chronicle.bytes.MappedBytes.<init>(MappedBytes.java:55)
[junit-timeout]         at net.openhft.chronicle.bytes.MappedBytes.mappedBytes(MappedBytes.java:113)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueStore.bytes(SingleChronicleQueueStore.java:358)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.resetWires(SingleChronicleQueueExcerpts.java:1702)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.cycle(SingleChronicleQueueExcerpts.java:1907)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.toStart(SingleChronicleQueueExcerpts.java:1614)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.createTailer(SingleChronicleQueue.java:401)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.readBinLogRecords(BinLogTest.java:495)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.testCleanupOnOversize(BinLogTest.java:407)
...
[junit-timeout] java.lang.Throwable: 1e53135d-main Reserve ref-count=2
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.recordResevation(ReferenceCounter.java:66)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.reserve(ReferenceCounter.java:59)
[junit-timeout]         at net.openhft.chronicle.bytes.AbstractBytes.reserve(AbstractBytes.java:464)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounted.tryReserve(ReferenceCounted.java:81)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueStore.writeEOF(SingleChronicleQueueStore.java:461)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.checkMoveToNextCycle(SingleChronicleQueueExcerpts.java:1437)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.inACycleNone(SingleChronicleQueueExcerpts.java:1416)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.inACycle(SingleChronicleQueueExcerpts.java:1356)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.readingDocument(SingleChronicleQueueExcerpts.java:1168)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.readDocument(SingleChronicleQueueExcerpts.java:1096)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.readBinLogRecords(BinLogTest.java:498)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.testCleanupOnOversize(BinLogTest.java:407)
...
[junit-timeout] java.lang.Throwable: 1e53135d-main Release ref-count=1
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.recordRelease(ReferenceCounter.java:88)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.release(ReferenceCounter.java:79)
[junit-timeout]         at net.openhft.chronicle.bytes.AbstractBytes.release(AbstractBytes.java:469)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueStore.writeEOF(SingleChronicleQueueStore.java:463)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.checkMoveToNextCycle(SingleChronicleQueueExcerpts.java:1437)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.inACycleNone(SingleChronicleQueueExcerpts.java:1416)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.inACycle(SingleChronicleQueueExcerpts.java:1356)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.readingDocument(SingleChronicleQueueExcerpts.java:1168)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.readDocument(SingleChronicleQueueExcerpts.java:1096)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.readBinLogRecords(BinLogTest.java:498)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.testCleanupOnOversize(BinLogTest.java:407)
...
[junit-timeout] java.lang.Throwable: 1e53135d-main Release ref-count=0
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.recordRelease(ReferenceCounter.java:88)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.release(ReferenceCounter.java:79)
[junit-timeout]         at net.openhft.chronicle.bytes.AbstractBytes.release(AbstractBytes.java:469)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueueExcerpts$StoreTailer.close(SingleChronicleQueueExcerpts.java:1117)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.lambda$close$4(SingleChronicleQueue.java:537)
[junit-timeout]         at java.base/java.util.WeakHashMap.forEach(WeakHashMap.java:1026)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.SingleChronicleQueue.close(SingleChronicleQueue.java:537)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.readBinLogRecords(BinLogTest.java:506)
[junit-timeout]         at org.apache.cassandra.utils.binlog.BinLogTest.testCleanupOnOversize(BinLogTest.java:407)
...
[junit-timeout] java.lang.Throwable: 1e53135d-main/queue-thread-local-cleaner-daemon Release ref-count=0
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.recordRelease(ReferenceCounter.java:88)
[junit-timeout]         at net.openhft.chronicle.core.ReferenceCounter.release(ReferenceCounter.java:74)
[junit-timeout]         at net.openhft.chronicle.bytes.AbstractBytes.release(AbstractBytes.java:469)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.StoreComponentReferenceHandler.processWireQueue(StoreComponentReferenceHandler.java:74)
[junit-timeout]         at net.openhft.chronicle.queue.impl.single.StoreComponentReferenceHandler.lambda$static$0(StoreComponentReferenceHandler.java:43)
[junit-timeout]         at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[junit-timeout]         at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[junit-timeout]         at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[junit-timeout]         at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[junit-timeout]         at java.base/java.lang.Thread.run(Thread.java:834)
{code}",,e.dimitrova,jmeredithco,vinaykumarcse,yifanc,,,,,,,,"yifan-c closed pull request #588:
URL: https://github.com/apache/cassandra/pull/588


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:48;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu May 21 08:27:42 UTC 2020,,,,,,,All,,,,,,"0|z0ehdc:",9223372036854775807,,,,vinaykumarcse,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/pull/588,,,,,,,,,unit test,,,,,"08/May/20 01:24;yifanc;I can work on it if you do not plan to, Jon. ;;;","08/May/20 15:50;jmeredithco;Thanks [~yifanc], you're welcome to it - I was just recording it as I saw it go by.;;;","08/May/20 20:54;yifanc;What's surprising is that the test {{BinLogTest#testPutAfterStop}} fails constantly. 
The assertion in the test is simply wrong. A quick look at the binLog stop method. On stopping, {{NO_OP}} object is enqueued. Therefore, polling from the queue should not return {{null}}. ;;;","08/May/20 22:39;yifanc;When running all tests under {{BinLogTest}}, {{testPutAfterStop}} can pass. But when running this individual test, it fails. 

The difference is caused by a  race condition. What happens underneath is that there is a little delay between {{@Before}} and test itself introduced when running all together. So the {{BinLog}}'s internal thread starts and it enters the while loop to prepare the tasks to process, before the test flip the condition {{shouldContinue}} to false. Therefore, the thread drains the the {{NO_OP}} just put under the sample queue. When the test poll from the sample queue, it gets {{null}}.;;;","11/May/20 20:21;yifanc;PR: https://github.com/apache/cassandra/pull/588
Code: https://github.com/yifan-c/cassandra/tree/CASSANDRA-15797-Flaky-BinLogTest
Test: https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15797-Flaky-BinLogTest

_update: unit and jvm dtest passed in java 8 and java 11_

*Failed tests*
* BinLogTest.testPutAfterStop: there is a chance that at the time of assertion, the consumer thread in BinLog has not yet drain the queue, so that assertion get the last NO_OP object and fail. The behavior is expected. The fix to the test is to assert none of the records get from the queue is the one inserted after stopping the binLog.
* BinLogTest.testBinLogStartStop: there is no barrier in the test to block assertion until records in the queue are consumed. Added the coundownlatch as the barrier. 

*Chronicle reference counter history trace*
The trace indicates the last release operation sees the reference counter is already 0, so that it prints the history. It is caused by the resources has already been released by the try-with-resources statement. And according to StoreComponentReferenceHandler#processWireQueue, *the exception can be ignored as the resources has already been released*. In this case, all test that calls readBinLogRecords can see the reference counter history.
Why the history trace is not always printed every time? Because test already ended and there is no time to print it. If adding a sleep time (5 seconds) at the end of the test, it is guaranteed to print reference count history. ;;;","13/May/20 06:59;vinaykumarcse;[~yifanc] Thank you for the patch.

* BinLogTest.testPutAfterStop - Good catch on this, I was able to repro with this assertion. LGTM
* BinLogTest.testBinLogStartStop - This change looks good to me except one nit on assertion message and coundownlatch::await timeout, annotated these comments in PR. 
;;;","13/May/20 18:08;yifanc;Thanks [~vinaykumarcse] for reviewing. 

I have updated the PR to address your comments. ;;;","19/May/20 05:18;vinaykumarcse;Changes LGTM, +1. [~yifanc]. ;;;","19/May/20 22:31;e.dimitrova;Thanks [~yifanc] and [~vinaykumarcse]
Was this committed or is there anything else needed to be done here? ;;;","21/May/20 07:12;vinaykumarcse;circle ci tests: https://app.circleci.com/pipelines/github/vinaykumarchella/cassandra?branch=15797-trunk;;;","21/May/20 08:21;vinaykumarcse;Following dtests failed across java8 and java11, however these dtests are not related to BingLogTest changes
 - test_remote_query - cql_test.TestCQLSlowQuery
 - test_local_query - cql_test.TestCQLSlowQuery
 
;;;","21/May/20 08:27;vinaykumarcse;Thank you for the [~yifanc]. Squashed your changes and committed into trunk at [43c19878e38fbe260f9e6143aa43836e85cf2f44|https://github.com/apache/cassandra/commit/43c19878e38fbe260f9e6143aa43836e85cf2f44];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test_speculative_data_request - read_repair_test.TestSpeculativeReadRepair,CASSANDRA-15792,13303196,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,gianluca,e.dimitrova,e.dimitrova,06/May/20 19:43,21/Dec/20 09:31,13/Jul/23 08:39,21/Jul/20 15:51,4.0,4.0-beta2,,,,Test/dtest/python,,,,0,,,,"Failing on the latest trunk here:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/127/workflows/dfba669d-4a5c-4553-b6a2-85647d0d8d2b/jobs/668/tests
Failing once in 30 times as per Jenkins:
https://jenkins-cm4.apache.org/job/Cassandra-trunk-dtest/69/testReport/dtest.read_repair_test/TestSpeculativeReadRepair/test_speculative_data_request/",,bereng,e.dimitrova,gianluca,jasonstack,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,gianluca,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jul 21 15:51:47 UTC 2020,,,,,,,All,,,,,,"0|z0eg60:",9223372036854775807,,,,bereng,brandon.williams,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra-dtest/commit/23944afa4f435bb726c37e8cb10311e2e9bbd792,,,,,,,,,"Confirm that both tests below pass consistently now.

TestSpeculativeReadRepair::test_speculative_data_request

TestSpeculativeReadRepairLongerTimeout::test_speculative_data_request_without_speculative_write",,,,,"30/May/20 16:18;jmckenzie;[~gianluca] - any signals from this failure that it's something that would block users from testing beta or require an API change to resolve?

 

If not we should go ahead and punt to beta fixver as per dev ML thread.;;;","01/Jun/20 15:54;gianluca;[~jmckenzie] After investigating this for some time now, I determined this is mostly related to a low write timeout used in TestSpeculativeReadRepair. That may lead to a speculated write to a different node depending on how long the original node takes to apply the repair mutation, but the test assertion is expecting no speculated writes. In other words, this is mostly a problem with the test, not with C* runtime, which is doing the right thing.

In order to fix this, I made it accept speculated writes in the original test, but I also replicated the test method in a different test class with a longer write timeout to reduce the likelihood of speculated writes. Of course, since this is all time based, the new test may still fail under a system with high CPU contention, but at least for now I can't easily reproduce the failure anymore (whereas it was failing consistently for me before).

There are other tests that guarantee the speculated write will happen when needed, the tricky part is testing it won't happen within a time frame, since it depends on system performance.

Here's the pull request in my cassandra-dtest fork: [https://github.com/grighetto/cassandra-dtest/pull/1]

Regarding the fixver, I'm ok with moving this to beta, even though the fix is already available, it still needs to go through review, but since this is not a runtime problem, I wouldn't say this is a blocker for alpha.;;;","03/Jun/20 20:46;jmckenzie;Thanks for the insight; agree on fixver. A little sad about the delay-based testing, though I assume converting to any kind of determinism would be significantly more invasive and artificial in the codebase so not worth pursuing. Perhaps commenting in the dtest the issue we ran into here so if we see it pop up subsequently (or annotating / elaborating in the failure state) pointing to this ticket could help in the future if this crops back up?

 

Just a thought.;;;","10/Jun/20 14:24;gianluca;[~jmckenzie] I did add some comments trying to clarify the issue:

[https://github.com/grighetto/cassandra-dtest/pull/1/files#diff-60812631a43b8e1f0c9fb53d9f7487ebR530]

[https://github.com/grighetto/cassandra-dtest/pull/1/files#diff-60812631a43b8e1f0c9fb53d9f7487ebR816]

But I had an idea to make this deterministic, which is using byteman to check if the coordinator node got back a response from node 3 within the specified timeout, if so, we can accept the speculative write.

I'll move this back to in progress real quick to implement this solution today. This doesn't change the scope though, still for 4.0-beta.

 ;;;","08/Jul/20 13:35;bereng;LGTM +1. Ran multiple times locally as well and it succeeds. Only confused at the wild commits list, which I hope they are only merges and noop when committed.;;;","16/Jul/20 09:06;bereng;Anything else you need from me here [~gianluca]?;;;","21/Jul/20 10:05;bereng;Ready to commit imo, delegating to [~gianluca];;;","21/Jul/20 14:07;gianluca;Thanks for the first pass, [~Bereng]. Yes, this has been waiting for a committer to do the final push, I'll check if there's anyone available.

I just realized I never added a comment detailing the final solution I landed on, so here it goes: the original implementation didn't expect a {{speculative write}} to be performed to node2, but depending on timing and load of node3, that might actually happen. So, as long as we can guarantee the speculative write to node2 happened after the initial write attempt to node3, we're good. In order to achieve that, I implemented a byteman function that records the {{System.currentTimeMillis}} of each Message Verb, and with that I can reconstruct the order of the events in the test.;;;","21/Jul/20 14:22;bereng;I moved to 'review in progress'  as still sbdy that is a committer has to review it :-);;;","21/Jul/20 14:36;gianluca;Opened a clean PR to get rid of the merge noise of the first one (pushing then rebasing against two remotes messed that one up): https://github.com/grighetto/cassandra-dtest/pull/2;;;","21/Jul/20 15:51;brandon.williams;Committed, thanks.  BTW, putting something in 'ready to commit' is just fine if you need a committer to review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dtest.consistency_test/TestAccuracy/test_simple_strategy_each_quorum_counters/,CASSANDRA-15791,13303191,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,e.dimitrova,e.dimitrova,06/May/20 19:01,21/Dec/20 08:08,13/Jul/23 08:39,13/May/20 16:14,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"Flakey dtest, failure details below:
https://jenkins-cm4.apache.org/job/Cassandra-trunk-dtest/69/testReport/junit/dtest.consistency_test/TestAccuracy/test_simple_strategy_each_quorum_counters/",,adelapena,blerer,e.dimitrova,jasonstack,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15670,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed May 13 16:14:55 UTC 2020,,,,,,,All,,,,,,"0|z0eg4w:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/a209e78dae8674ef131bab1b2dc06f09ae15d21d,,,,,,,,,"In [PR|https://github.com/apache/cassandra/pull/584]",,,,,"13/May/20 15:23;blerer;The patch looks good to me.;;;","13/May/20 16:14;blerer;Committed into trunk at a209e78dae8674ef131bab1b2dc06f09ae15d21d ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EmptyType doesn't override writeValue so could attempt to write bytes when expected not to,CASSANDRA-15790,13302943,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,05/May/20 18:37,21/Dec/20 08:02,13/Jul/23 08:39,20/May/20 20:47,3.0.21,3.11.7,4.0,4.0-beta1,,CQL/Semantics,,,,0,,,,"EmptyType.writeValues is defined here https://github.com/apache/cassandra/blob/e394dc0bb32f612a476269010930c617dd1ed3cb/src/java/org/apache/cassandra/db/marshal/AbstractType.java#L407-L414

{code}
public void writeValue(ByteBuffer value, DataOutputPlus out) throws IOException
    {
        assert value.hasRemaining();
        if (valueLengthIfFixed() >= 0)
            out.write(value);
        else
            ByteBufferUtil.writeWithVIntLength(value, out);
    }
{code}

This is fine when the value is empty as the write of empty no-ops (the readValue also noops since the length is 0), but if the value is not empty (possible during upgrades or random bugs) then this could silently cause corruption; ideally this should throw a exception if the ByteBuffer has data.

This was called from org.apache.cassandra.db.rows.BufferCell.Serializer#serialize, here we check to see if data is present or not and update the flags.  If data is present then and only then do we call type.writeValue (which requires bytes is not empty).  The problem is that EmptyType never expects writes to happen, but it still writes them; and does not read them (since it says it is fixed length of 0, so does read(buffer, 0)).",,dcapwell,jwest,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15778,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bdeggleston,dcapwell,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri May 15 23:08:25 UTC 2020,,,,,,,All,,,,,,"0|z0eem8:",9223372036854775807,,,,jwest,yifanc,,,Normal,,2.1.0,,,https://github.com/jrwest/cassandra/commit/ea202cea2834dc4140b4a21645eb828f0414cbcd,,,,,,,,,circle ci + manual verification,,,,,"05/May/20 18:38;dcapwell;Linked CASSANDRA-15778 as this was found while investigating.;;;","05/May/20 18:48;dcapwell;This was found with Compact Storage, if the value field is non-empty this silently corrupts sstables and networking;;;","05/May/20 21:44;dcapwell;CI status is YELLOW (py dtest failed with known issues);;;","07/May/20 19:50;jwest;Tests look good. Agreed that the failures are known/unrelated. A few comments:

* instead of using {{null}} as the default value in {{parse}}, if you use {{""""}} (empty string) you can short circuit that special case in addition to handling the no value passed condition. 
* Consider trimming the string passed to {{NonEmptyWriteHandler.valueOf}}
* Consider renaming “LOG_DATA_LOSS” to “LOG” for succinctness 
* Really minor style nit: consider remaking *handle(r) to *mode or *behavior. 
* Minor style nit: define the {{NonEmptyWriteHandle}} enum closer to {{parse()}}
;;;","07/May/20 20:08;jwest;One other follow-up thought. Since the property is not changeable at runtime: should we figure out which branch of code to use upfront instead of doing the switch call each time? ;;;","07/May/20 20:48;dcapwell;bq. instead of using null as the default value in parse, if you use """" (empty string) you can short circuit that special case in addition to handling the no value passed condition.

Can't short-circuit as this would log, this also confuses since users could define """".  I switched to java.lang.System#getProperty(java.lang.String) which defaults to null.

bq. Consider trimming the string passed to NonEmptyWriteHandler.valueOf

Done

bq. Consider renaming “LOG_DATA_LOSS” to “LOG” for succinctness

We spoke in slack, I rather not as doing this causes data loss, so I care more that you are aware of that than how succinct the name is.  Renamed silent to silent_DATA_LOSS for the same reasons.

bq. Really minor style nit: consider remaking *handle(r) to *mode or *behavior

Switched to behavior

bq. Minor style nit: define the NonEmptyWriteHandle enum closer to parse()

done.


[~jwest] commit for all feedback can be located [here|https://github.com/dcapwell/cassandra/commit/166ab9c82401f0588959376ffcf2384f7a66f9f1];;;","07/May/20 20:54;dcapwell;bq. should we figure out which branch of code to use upfront instead of doing the switch call each time?

Saw that after patching.  If I understand you, you are saying ""function > switch""? If so not sure, its more verbose in the enum but has cleaner logic in the body.  I prefer the switch but not tied to it.;;;","07/May/20 21:37;jwest;Sounds and looks good to me [~dcapwell]. Thanks!;;;","08/May/20 03:30;yifanc;Overall look good. A few questions.

# Should {{readValue(DataInputPlus in, int maxValueSize)}} raise an exception in the case that {{maxValueSize}} is not 0? If it ever happens, the system is in a bad state. 
# Is the {{AssertionError}} intended? I can see the intention might be indicating the severity. 
# nit: {{EmptyTypeTest.java}} has no new line at the EOF. ;;;","08/May/20 16:13;dcapwell;Thanks for the review [~yifanc]!

bq. Should readValue(DataInputPlus in, int maxValueSize) raise an exception in the case that maxValueSize is not 0? If it ever happens, the system is in a bad state.

Here is a sample call site

{code}
// function org.apache.cassandra.db.rows.Cell.Serializer#deserialize
value = header.getType(column).readValue(in, DatabaseDescriptor.getMaxValueSize());
{code}

So, maxValueSize is not expected to be 0, so don't think so.  Based off the current usage, we should never be called (call site is guarded by null check) so exception works... not sure how I feel, I kinda think that exception makes sense but so does returning null (we returned empty buffer before (see org.apache.cassandra.utils.ByteBufferUtil#read) but serializer returns null... so not consistent... (see org.apache.cassandra.serializers.EmptySerializer#deserialize)

bq. Is the AssertionError intended? I can see the intention might be indicating the severity.
Do you mean [this line|https://github.com/apache/cassandra/compare/trunk...dcapwell:bug/CASSANDRA-15790#diff-7dd64369e759d811269ca1be2d14086cR153]?  If so yes, this means we have a bug and should NOT move forward (else we cause data loss).

bq. nit: EmptyTypeTest.java has no new line at the EOF.

If only we ran check style =). fixed; [see here|https://github.com/dcapwell/cassandra/commit/23f3a4f1691f6a76016f7b21d1e3a6ee4ae3c3ab];;;","08/May/20 17:44;yifanc;Thanks for digging deeper into call sites for readValue. 
I agree that the overrides in {{EmptyType}} should never be called with the current usage. All the usage are guarded by empty value check and produce an {{EMPTY_BYTE_BUFFER}} inline (without even calling the {{readValue()}} method), except one. {{SinglePartitionReadCommand.Deserializer#deserialize}} does call the {{readValue()}} method regardlessly. However, the type is for partition keys, so I do not think it could be an EmptyType. 

I think returning a value (either {{EMPTY_BYTE_BUFFER}} or null) from readValue method sounds better. Because {{EmptyType}} cannot have the assumption on how the call sites do the check and skip calling the readValue method. 
- Returning null, eventually cause an exception to indicate the abnormal state. 
- Returning {{EMPTY_BYTE_BUFFER}} may silent the error. 

_I did not read carefully and thought {{maxValueSize}} was the length to read. Thanks for pointing it out._;;;","08/May/20 18:11;dcapwell;reading closer I think readValue should return empty buffer and not null, that way it works with org.apache.cassandra.serializers.EmptySerializer#validate and org.apache.cassandra.serializers.EmptySerializer#deserialize; null would break those call sites.;;;","15/May/20 19:13;dcapwell;since its ready for commit sending the patches for 3.0 and 3.11 now.;;;","15/May/20 20:56;dcapwell;Added patch for 3.0 and ran dtests.  I saw some tests failed so I ran against cassandra-3.0: https://app.circleci.com/pipelines/github/dcapwell/cassandra/284/workflows/29833185-6f82-47ed-9372-0136d4109b88/jobs/1383. looks like my patch has the same failures as cassandra-3.0, so my patch doesn't look to regress 3.0

working on patch for 3.11 now.;;;","15/May/20 23:08;dcapwell;3.11 is failing and 2 are CQLSH tests, one couldn't connect to the server... this all looks unrelated to this patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rows can get duplicated in mixed major-version clusters and after full upgrade,CASSANDRA-15789,13302894,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,aleksey,aleksey,05/May/20 15:01,05/Nov/20 07:32,13/Jul/23 08:39,20/May/20 07:09,3.0.21,3.11.7,4.0,4.0-beta1,,Consistency/Coordination,Local/Memtable,Local/SSTable,,0,,,,"In a mixed 2.X/3.X major version cluster a sequence of row deletes, collection overwrites, paging, and read repair can cause 3.X nodes to split individual rows into several rows with identical clustering. This happens due to 2.X paging and RT semantics, and a 3.X {{LegacyLayout}} deficiency.

To reproduce, set up a 2-node mixed major version cluster with the following table:

{code}
CREATE TABLE distributed_test_keyspace.tlb (
    pk int,
    ck int,
    v map<text, text>,
    PRIMARY KEY (pk, ck)
);
{code}

1. Using either node as the coordinator, delete the row with ck=2 using timestamp 1

{code}
DELETE FROM tbl USING TIMESTAMP 1 WHERE pk = 1 AND ck = 2;
{code}

2. Using either node as the coordinator, insert the following 3 rows:

{code}
INSERT INTO tbl (pk, ck, v) VALUES (1, 1, {'e':'f'}) USING TIMESTAMP 3;
INSERT INTO tbl (pk, ck, v) VALUES (1, 2, {'g':'h'}) USING TIMESTAMP 3;
INSERT INTO tbl (pk, ck, v) VALUES (1, 3, {'i':'j'}) USING TIMESTAMP 3;
{code}

3. Flush the table on both nodes

4. Using the 2.2 node as the coordinator, force read repar by querying the table with page size = 2:
 
{code}
SELECT * FROM tbl;
{code}

5. Overwrite the row with ck=2 using timestamp 5:

{code}
INSERT INTO tbl (pk, ck, v) VALUES (1, 2, {'g':'h'}) USING TIMESTAMP 5;}}
{code}

6. Query the 3.0 node and observe the split row:

{code}
cqlsh> select * from distributed_test_keyspace.tlb ;

 pk | ck | v
----+----+------------
  1 |  1 | {'e': 'f'}
  1 |  2 | {'g': 'h'}
  1 |  2 | {'k': 'l'}
  1 |  3 | {'i': 'j'}
{code}

This happens because the read to query the second page ends up generating the following mutation for the 3.0 node:

{code}
ColumnFamily(tbl -{deletedAt=-9223372036854775808, localDeletion=2147483647,
             ranges=[2:v:_-2:v:!, deletedAt=2, localDeletion=1588588821]
                    [2:v:!-2:!,   deletedAt=1, localDeletion=1588588821]
                    [3:v:_-3:v:!, deletedAt=2, localDeletion=1588588821]}-
             [2:v:63:false:1@3,])
{code}

Which on 3.0 side gets incorrectly deserialized as

{code}
Mutation(keyspace='distributed_test_keyspace', key='00000001', modifications=[
  [distributed_test_keyspace.tbl] key=1 partition_deletion=deletedAt=-9223372036854775808, localDeletion=2147483647 columns=[[] | [v]]
    Row[info=[ts=-9223372036854775808] ]: ck=2 | del(v)=deletedAt=2, localDeletion=1588588821, [v[c]=d ts=3]
    Row[info=[ts=-9223372036854775808] del=deletedAt=1, localDeletion=1588588821 ]: ck=2 |
    Row[info=[ts=-9223372036854775808] ]: ck=3 | del(v)=deletedAt=2, localDeletion=1588588821
])
{code}

{{LegacyLayout}} correctly interprets a range tombstone whose start and finish {{collectionName}} values don't match as a wrapping fragment of a legacy row deletion that's being interrupted by a collection deletion (correctly) - see [code|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/LegacyLayout.java#L1874-L1889]. Quoting the comment inline:

{code}
// Because of the way RangeTombstoneList work, we can have a tombstone where only one of
// the bound has a collectionName. That happens if we have a big tombstone A (spanning one
// or multiple rows) and a collection tombstone B. In that case, RangeTombstoneList will
// split this into 3 RTs: the first one from the beginning of A to the beginning of B,
// then B, then a third one from the end of B to the end of A. To make this simpler, if
 // we detect that case we transform the 1st and 3rd tombstone so they don't end in the middle
 // of a row (which is still correct).
{code}

{{LegacyLayout#addRowTombstone()}} method then chokes when it encounters such a tombstone in the middle of an existing row - having seen {{v[c]=d}} first, and mistakenly starts a new row, while in the middle of an existing one: (see [code|https://github.com/apache/cassandra/blob/cassandra-3.0/src/java/org/apache/cassandra/db/LegacyLayout.java#L1500-L1501]).
",,aleksey,ifesdjeen,jeromatron,leonz,marcuse,samt,slebresne,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aleksey,marcuse,samt,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Nov 05 07:29:21 UTC 2020,,,,,,,All,,,,,,"0|z0eeb4:",9223372036854775807,,,,ifesdjeen,marcuse,slebresne,,Critical,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/4d42c189fa82b32fd93ae42a164b91e4db62992e,,,,,,,,,new tests and cci runs,,,,,"05/May/20 16:52;aleksey;{{nodetool scrub}} can fix thee sstables by collapsing rows with the same clustering into one, via the logic added in CASSANDRA-12144 to address a similar corruption.;;;","06/May/20 10:18;marcuse;Attaching branches which contain commits to;
* Add a in-jvm dtest to reproduce.
* Add a new {{PartitionUpdate}} method {{fromPre30Iterator}} which merges any subsequent duplicate rows.
* Make sure we don't create a new row in legacy layout when encountering a row tombstone after seeing actual data.
* Add read and compaction time detection for the duplication, with the ability to automatically snapshot the involved replicas to be able to investigate the sstables.

The 3.0 and 3.11 branches contain the fixes while trunk only has the duplication detection

|| branch || unit tests || dtests || jvm dtests || jvm upgrade dtests ||
|   [3.0|https://github.com/krummas/cassandra/commits/15789-3.0]  | [utests|https://circleci.com/gh/krummas/cassandra/3262] | [vnodes|https://circleci.com/gh/krummas/cassandra/3264] [novnodes|https://circleci.com/gh/krummas/cassandra/3265] | [jvm dtests|https://circleci.com/gh/krummas/cassandra/3263] | [upgrade dtests|https://circleci.com/gh/krummas/cassandra/3267] |
|  [3.11|https://github.com/krummas/cassandra/commits/15789-3.11] | [utests|https://circleci.com/gh/krummas/cassandra/3236] | [vnodes|https://circleci.com/gh/krummas/cassandra/3245] [novnodes|https://circleci.com/gh/krummas/cassandra/3244] | [jvm dtests|https://circleci.com/gh/krummas/cassandra/3235] | [upgrade dtests|https://circleci.com/gh/krummas/cassandra/3249] |
| [trunk|https://github.com/krummas/cassandra/commits/15789-trunk]| [utests|https://circleci.com/gh/krummas/cassandra/3238] | [vnodes|https://circleci.com/gh/krummas/cassandra/3247] [novnodes|https://circleci.com/gh/krummas/cassandra/3248] | [jvm dtests|https://circleci.com/gh/krummas/cassandra/3237] | [upgrade dtests|https://circleci.com/gh/krummas/cassandra/3252] |

The 3.11 upgrade dtest failure is expected since it uses the current 3.0 dtest jar;;;","08/May/20 15:33;slebresne;I had a quick look at those commits, and agrees about the fix in `LegacyLayout`.

And I have no strong objections on the 2 other parts, but wanted to remark 2 points:
- regarding the elimination of duplicates on iterator coming from `LegacyLayout`: the patch currently merge the duplicates rather silently.  What if we have another bug in `LegacyLayout` for which row duplication is only one sign, but that also lose data? Are we sure we won't regret not failing on what would be an unknown bug?
- Regarding the duplicate check on all reads, I ""think"" this could have a measurable impact on performance for some workloads. Which isn't a reason not to add it, but as this impact all reads and will go in ""stable"" versions, do we want to run a few benchmarks to quantify this? Or have a way to disable the check?
;;;","11/May/20 16:06;ifesdjeen;+1 with some minor comments:

  * {{nowInSeconds}} [here|https://github.com/apache/cassandra/commit/966ae03e778742a94fbbecffe07d977c3a39f70b#diff-984dca80cb7e39e7a99f4928ae4b3ec8R55] seems to be unused
  * [this|https://github.com/apache/cassandra/compare/trunk...krummas:15789-3.0#diff-984dca80cb7e39e7a99f4928ae4b3ec8R52] can be just {{flush()}}
  * [here|https://github.com/apache/cassandra/compare/trunk...krummas:15789-3.0#diff-32fe9b86f85fea958f137ab7862ec522R98], we will be logging unconditionally, even if we have sent snapshot messages. On a somewhat related note, we can also use {{CompactionIteratorTest#duplicateRowsTest}} to verify that throttling works by just clearing {{sentMessages}} and making sure we don't issue it again if there's one more duplicate.
  * I'm not 100% sure which level is the best for in-jvm dtests. Should we keep {{DEBUG}} or should we switch to {{ERROR}}. 
  * should we add some information that shows {{Row/RT/Row}} sandwich, like the one in description? It might make it easier for people to read it in future.
  * in {{PartitionUpdateTest}}, {{testDuplicate}} and {{testMerge}} seem to be specific to this issue, but we don't have any ticket specific information there. Should we add some motivation/information? In fact, we may consider adding some fuzz tests to test even more scenarios in the future.
  * There are some (possibly intended) {{printlns}} in {{assertCommandIssued}}

Regarding duplicates elimination in {{PartitionUpdate}}, since they'll still be detected and snapshotted, I think this is fine. However, I can imagine a scenario where an erroneous duplicate row can result into data resurrection. But given duplicate rows are by no means a right behaviour, and we already know at least three ways that could lead to such behaviour (12144, 14008, and this issue), merging them to one seems to be a reasonable thing to do, but doesn't always guarantee behaviour one would otherwise expect from the database. It might be good to make it configurable and/or disabled by default.;;;","18/May/20 10:36;marcuse;Pushed a few commits to the branches above addressing the comments;
* Made {{PartitionUpdate.fromPre30Iterator}} log whenever it [merges rows|https://github.com/krummas/cassandra/commit/7f88a2d60e0fa8da1d328c84d07da3dee6b78b18]
* [Revert|https://github.com/krummas/cassandra/commit/aedbfc761fa798c8118409cfc07ece47990578d8] to debug logging for in-jvm dtests
* [Make|https://github.com/krummas/cassandra/commit/210da67d6cae3b8c01df315d28e89c455bac488e] it possible to disable read/compaction time duplicate detection
* Various [minor|https://github.com/krummas/cassandra/commit/7a18bbea6bb5c1203014396d85fc8a3822c7969a] [fixes|https://github.com/krummas/cassandra/commit/c4373b3b75aa234b4ebd67ffa03ad5553d73e357];;;","18/May/20 13:17;slebresne;+1 from me.;;;","19/May/20 09:53;ifesdjeen;+1 from me as well. 

Two tiny nits that can be fixed on commit: 
  * two getters ({{getCheckForDuplicateRowsDuringReads}} and {{getCheckForDuplicateRowsDuringCompaction}}) return {{void}}
  * [toIter|https://github.com/apache/cassandra/compare/trunk...krummas:15789-3.11#diff-c43c377976893dc7ae62e89072946ecbR141] can be replaced by {{Iterators#forArray()}}

I have some questions / meta-discussions:

  * In this patch, we're using an [executor|https://github.com/apache/cassandra/compare/trunk...krummas:15789-3.11#diff-32fe9b86f85fea958f137ab7862ec522R42] that doesn't get shut down. Should we use use non-periodic tasks for them?
  * we're setting {{snapshot_on_duplicate_row_detection}} via config and {{diagnostic_snapshot_interval_nanos}} via system property. I don't mind to have it as-is in current case, but we should generally try to consolidate the way we're managing configuration. ;;;","19/May/20 10:25;samt;{quote} * In this patch, we're using an [executor|https://github.com/apache/cassandra/compare/trunk...krummas:15789-3.11#diff-32fe9b86f85fea958f137ab7862ec522R42] that doesn't get shut down. Should we use use non-periodic tasks for them?{quote}

This is to be explicit about making the snapshot task execution single threaded to ensure that only a single snapshot per-prefix can be triggered on a replica. Non-periodic tasks should be, and most likely always is, effectively singlethreaded but it doesn't explicitly guarantee that.

{quote} * we're setting snapshot_on_duplicate_row_detection via config and diagnostic_snapshot_interval_nanos via system property. I don't mind to have it as-is in current case, but we should generally try to consolidate the way we're managing configuration. {quote}

{{diagnostic_snapshot_interval_nanos}} is purely for testing, so it didn't feel necessary to make that accessible to operators. We could subclass {{DiagnosticSnapshotService}} for testing instead, but it didn't seem too hacky to use a system property here.;;;","20/May/20 07:09;marcuse;and committed, thanks!;;;","05/Nov/20 02:44;leonz;Hey all - just wanted to call out that an errant import made it into the Cassandra 3.11 patch of this PR: https://github.com/apache/cassandra/blob/4d42c189fa82b32fd93ae42a164b91e4db62992e/src/java/org/apache/cassandra/service/StorageProxyMBean.java#L24

Not a big deal, but noticed this because we publish the MBeans/jmx api as their own custom-built package and hit a compilation error because the DatabaseDescriptor wasn't included.;;;","05/Nov/20 07:29;marcuse;[~leonz] thanks for letting us know, fixed in https://github.com/apache/cassandra/commit/fa9bbd431100ceac0af8ca3ea0a3dac407246446 and merged up to 3.11 and trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test_refresh_size_estimates_clears_invalid_entries - nodetool_test.TestNodetool,CASSANDRA-15784,13302642,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,e.dimitrova,e.dimitrova,04/May/20 13:49,15/May/20 08:54,13/Jul/23 08:39,04/May/20 17:54,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,Dtest failure,,dcapwell,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15776,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon May 04 17:53:56 UTC 2020,,,,,,,All,,,,,,"0|z0ecr4:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,,,,,,"04/May/20 13:49;e.dimitrova;test_refresh_size_estimates_clears_invalid_entries - nodetool_test.TestNodetool
Example failure:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/118/workflows/9e57522d-52fa-4d44-88d8-5cec0e87f517/jobs/585/tests;;;","04/May/20 17:11;dcapwell;This is a dup of CASSANDRA-15776, need a reviewer.

test modifies size_estiates but nodetool started looking at table_estimates, so switched it so nodetool checks both.;;;","04/May/20 17:53;e.dimitrova;[~dcapwell] Oh, great, thanks! My search didn't show anything. Closing this one;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test_optimized_primary_range_repair - transient_replication_test.TestTransientReplication,CASSANDRA-15783,13302641,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,04/May/20 13:46,27/Oct/20 12:23,13/Jul/23 08:39,26/May/20 08:29,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"Dtest failure.
Example:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/118/workflows/9e57522d-52fa-4d44-88d8-5cec0e87f517/jobs/585/tests",,bdeggleston,djoshi,e.dimitrova,jasonstack,mck,,,,,,,"jasonstack opened a new pull request #587:
URL: https://github.com/apache/cassandra/pull/587


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/May/20 20:34;githubbot;600","jasonstack opened a new pull request #68:
URL: https://github.com/apache/cassandra-dtest/pull/68


   …ir tests


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/May/20 08:01;githubbot;600","jasonstack closed pull request #587:
URL: https://github.com/apache/cassandra/pull/587


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Jun/20 18:12;githubbot;600","michaelsembwever closed pull request #68:
URL: https://github.com/apache/cassandra-dtest/pull/68


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15793,,,,CASSANDRA-15657,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue May 26 12:11:13 UTC 2020,,,,,,,All,,,,,,"0|z0ecqw:",9223372036854775807,,,,bdeggleston,djoshi,,,Normal,,4.0-beta1,,,https://github.com/apache/cassandra/commit/598a92180e2ad95b48419605d270c53497739f35 https://github.com/apache/cassandra-dtest/commit/d7aacd3fa9b7d4c4fef80f5550a2576303e29890,,,,,,,,,"added dtests.

 

[Patch|https://github.com/apache/cassandra/pull/587]
[Dtest|https://github.com/apache/cassandra-dtest/pull/68]
[Circle|https://circleci.com/workflow-run/e10d1061-4480-4ac3-9468-add94a9b3108]",,,,,"05/May/20 23:55;e.dimitrova;This test started failing after CASSANDRA-15657. Will investigate it further tomorrow.;;;","06/May/20 00:38;djoshi;I don't see the stack trace. Can you please update the ticket with more information on the failure?;;;","06/May/20 04:16;jasonstack;Error trace:
{code:java}
=================================== FAILURES ===================================
_________ TestTransientReplication.test_optimized_primary_range_repair _________

self = <transient_replication_test.TestTransientReplication object at 0x7ffbe11a9978>

    @pytest.mark.no_vnodes
    def test_optimized_primary_range_repair(self):
        """""" optimized primary range incremental repair from full replica should remove data on node3 """"""
        self._test_speculative_write_repair_cycle(primary_range=True,
                                                  optimized_repair=True,
                                                  repair_coordinator=self.node1,
>                                                 expect_node3_data=False)

transient_replication_test.py:463: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
transient_replication_test.py:435: in _test_speculative_write_repair_cycle
    self.assert_has_sstables(self.node2, compact=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <transient_replication_test.TestTransientReplication object at 0x7ffbe11a9978>
node = <ccmlib.node.Node object at 0x7ffadec56ac8>, flush = False
compact = True

    def assert_has_sstables(self, node, flush=False, compact=False):
        if flush:
            node.flush()
        if compact:
            node.nodetool(' '.join(['compact', self.keyspace, self.table]))
    
        sstables = node.get_sstables(self.keyspace, self.table)
>       assert sstables
E       assert []
{code}
 

copying my comment from 15657:

 
{quote}This patch allows ZCS for size-tiered compaction which is used by the test and the test log showed that the file is indeed received via ZCS...
{code:java}
INFO  [CompactionExecutor:2] 2020-05-06 12:28:10,848 PendingRepairManager.java:446 - Obsoleting transient repaired ssatbles
DEBUG [CompactionExecutor:2] 2020-05-06 12:28:10,852 PendingRepairManager.java:144 - Removing compaction strategy for pending repair fc89be70-8f51-11ea-8232-f78d8bc3c1f4 on  ks.tblINFO  [NonPeriodicTasks:1] 2020-05-06 12:28:10,855 SSTable.java:111 - Deleting sstable: /private/var/folders/w0/m4svxry56h56g_42mx0rwbcr0000gn/T/dtest-9fybyxp7/test/node2/data0/ks/tbl-f26130408f5111ea8232f78d8bc3c1f4/na-1-big {code}
Transient replica {{PendingRepairManager}} is removing the received file and it's doing it earlier on ZCS sstable than non-ZCS sstable because ZCS sstable carries ""repairedAt"" metadata.
{quote}

[~e.dimitrova] [~djoshi] not sure if it's an expected behavior from transient replica...

Let me know if there is anything I can help..;;;","06/May/20 22:03;e.dimitrova;Thanks [~jasonstack]
Same as you, I am also not sure about the behavior. It sounds to me as we need to rework actually the test now and that behavior is expected but I am not 100% sure?
[~djoshi] do you have any vision?
Or maybe [~ifesdjeen] has some advice here?
;;;","06/May/20 22:43;djoshi;I think we need to update to the latest Python driver that supports creating transient replicas. Here's what I get when I run the test locally:

{code:bash}
15:39:54,773 cassandra.metadata WARNING Failed creating NetworkTopologyStrategy with options {'datacenter1': '3/1'}: invalid literal for int() with base 10: '3/1'
15:39:54,778 cassandra.metadata WARNING Failed creating NetworkTopologyStrategy with options {'datacenter1': '3/1'}: invalid literal for int() with base 10: '3/1'
15:39:54,962 cassandra.metadata WARNING Failed creating NetworkTopologyStrategy with options {'datacenter1': '3/1'}: invalid literal for int() with base 10: '3/1'{code};;;","07/May/20 00:42;djoshi;I've opened CASSANDRA-15792 for fixing the driver related issue. It fixes these warnings. However, the test still breaks. I noticed that the sstable is missing on 2 out of the 3 replicas. I haven't had a lot of time to investigate this, if anybody has the time to dig into it, please do so.;;;","07/May/20 15:21;e.dimitrova;Thanks [~djoshi]
I am trying to poke around now and check whether this is a correct behavior now or not. Want to be sure about that.;;;","07/May/20 16:39;bdeggleston;This looks like a legit regression. If this is definitely caused by CASSANDRA-15657, then it's probably broken streaming and sstables are not being streamed to node 2 when then should be. 

[~jasonstack] are you seeing the sstable getting dropped on node 2 or 3?;;;","07/May/20 17:01;jasonstack;[~bdeggleston] the streamed sstable is dropped by [transient replica|https://issues.apache.org/jira/browse/CASSANDRA-15783?focusedCommentId=17100449&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17100449] on node2 after CASSANDRA-15657.. I didn't check node3..

I don't think it's caused by 15657 which just makes ZCS more efficient and allows ZCS for tables with non-leveled-compaction strategy.

The test failure can be reproduced with leveled-compaction strategy without 15657 (ZCS will be used). I might be able to look at it next 1~2 week..;;;","07/May/20 17:18;djoshi;CASSANDRA-15793 is resolved. So we shouldn't get the Transient Replication related warnings. We should also update this dtest to test with both LCS and STCS to ensure we cover both strategies going forward.

FTR from the logs it seems that the SSTables are streamed to Node 2 but are immediately deleted.;;;","07/May/20 17:54;e.dimitrova;[~djoshi] thanks, that was my point. If that is fine we have to add testing for the second strategy in that case and leave the current test as a correct behavior.

I can look at it on Monday if no one else get to it until then. (I'll be off tomorrow);;;","07/May/20 18:02;e.dimitrova;[~jasonstack] The only reason I pointed to that ticket is to make our lives easier during the debugging of this test and to understand faster and better what is going on:
- is it a bug?
- is it a need of additional change?

Thanks for your involvement, that helped!;;;","10/May/20 20:39;jasonstack;{color:#172b4d}In fact, it's not ""repairedAt"" causing the issue, it's the ""isTransient"" attribute. For non-ZCS, it's always ""false"" for streamed sstable writer, but for ZCS, ""isTransient"" is copied from source sstable.{color}

Based on my understanding on TR, ""isTransient"" flag should be marked on local node during repair anti-compaction instead of copying via streaming.

In case of the dtest with optimized repair, node3 finished anti-compaction and changed its sstable to ""isTransient=true"" because of incremental repair. And then node3 streams the sstable to node2.

[patch|https://github.com/apache/cassandra/pull/587] : mark ""isTransient=false"" for ZCS sstables and fixed some typos in transient replica document.
 [CI|https://circleci.com/workflow-run/1796a195-1c1b-4108-831c-2060a0b53499];;;","10/May/20 21:05;djoshi;Good find. Could you also update the Python dtests so they’ll check with both STCS and LCS.;;;","11/May/20 08:03;jasonstack;{quote}Could you also update the Python dtests so they’ll check with both STCS and LCS.
{quote}
The difference is not about compaction strategy, but the streaming method..

I has moved transient replica repair dtests into {{""TestTransientReplicationRepairStreamEntireSSTable""}} and created another class {{""TestTransientReplicationRepairLegacyStreaming""}} with ""stream_entire_sstables=false"".. WDYT?

[patch|https://github.com/apache/cassandra/pull/587/files]: mark ""isTransient=false"" for entire-streaming sstables and fixed some typos in transient replica document.
 [dtest|https://github.com/apache/cassandra-dtest/pull/68]: add legacy streaming for transient replica repair tests.
 [CI|https://circleci.com/workflow-run/d9a14206-5acd-4a66-a0f2-5d8c37c0db8d]

 ;;;","11/May/20 08:13;djoshi;bq. The difference is not about compaction strategy, but the streaming method..

I understand the issue is related to the streaming method. However, here, the issue went unnoticed because the test only exercised STCS and not LCS. If the test would've exercised both strategies then the issue would've surfaced earlier when we added ZCS to LCS.;;;","11/May/20 17:40;jasonstack;bq. However, here, the issue went unnoticed because the test only exercised STCS and not LCS. If the test would've exercised both strategies then the issue would've surfaced earlier when we added ZCS to LCS.

Before CASSANDRA-15657, yes. if we have a LCS test, the issue should have been caught.. But after 15657, both STCS and LCS are streaming entire sstable, they work exactly the same way.. Anyway, I have added one LCS test..;;;","11/May/20 17:41;jasonstack;[~e.dimitrova] thanks for the report!;;;","11/May/20 19:16;e.dimitrova;Thanks for the fix [~jasonstack]
[~djoshi], I am not a committer, if you approve the current patch can you, please, commit it?;;;","11/May/20 19:49;djoshi;[~jasonstack], [~e.dimitrova] I'll take a look. I'd prefer [~bdeggleston] also gets in a review before we commit this change.;;;","11/May/20 20:29;e.dimitrova;Thank you both [~djoshi] and [~bdeggleston]!;;;","20/May/20 00:31;bdeggleston;+1;;;","20/May/20 14:18;e.dimitrova;Thanks [~bdeggleston]
Can you or [~djoshi] commit it, please? I am not a committer. Thanks in advance!;;;","26/May/20 08:29;mck;Committed as [598a92180e2ad95b48419605d270c53497739f35 |https://github.com/apache/cassandra/commit/598a92180e2ad95b48419605d270c53497739f35] and [d7aacd3fa9b7d4c4fef80f5550a2576303e29890 |https://github.com/apache/cassandra-dtest/commit/d7aacd3fa9b7d4c4fef80f5550a2576303e29890].

(added CHANGES.txt line for this ticket and CASSANDRA-15657);;;","26/May/20 12:11;e.dimitrova;Thanks [~mck]!;;;",,,,,,,,,,,,,,,,,,,,,,
Compression test failure,CASSANDRA-15782,13302602,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jolynch,bereng,bereng,04/May/20 08:45,21/Dec/20 08:07,13/Jul/23 08:39,05/May/20 21:18,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"On CASSANDRA-15560 compression test failed. This was bisected to [9c1bbf3|https://github.com/apache/cassandra/commit/9c1bbf3ac913f9bdf7a0e0922106804af42d2c1e] from CASSANDRA-15379.

Full details here

CC/ [~jolynch] in case he can spot it quick.",,bereng,e.dimitrova,jolynch,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15560,CASSANDRA-14888,,,,,,,,,,,,,,,,,,,,,,0.0,jolynch,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Aug 31 21:30:43 UTC 2020,,,,,,,All,,,,,,"0|z0eci8:",9223372036854775807,,,,bereng,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra-dtest/commit/da7fcefb16d16af8924cda35c0a6a63ad553694f,,,,,,,,,See comments,,,,,"04/May/20 17:42;jolynch;[~Bereng] If you are referring to the test_compression_cql_options - compression_test.TestCompression test failing https://app.circleci.com/pipelines/github/driftx/cassandra/27/workflows/896fefed-5707-4da0-882d-ca5a29abab58/jobs/177 with the following stack trace:
{noformat}
        for sstable_path in sstable_paths:
            sstable = os.path.join(sstable_path, sstables['compression_opts_table'][1])
            if os.path.exists(sstable):
>               assert 'DEFLATE' == self._get_compression_type(sstable)
E               AssertionError: assert 'DEFLATE' == 'UNKNOWN'
E                 - DEFLATE
E                 + UNKNOWN
{noformat}

Yeah that looks like my patch, I thought I ran the dtests but guess I missed the cqlsh dtests (oops). This is an expected change in behavior (deflate should flush with lz4 now and then compact to deflate). I think an easy fix to the test would be to compact after the flush. I can fix it.;;;","04/May/20 18:16;jolynch;|[patch|https://github.com/apache/cassandra-dtest/commit/a2fe94ba8004a2b7159e58281a8125411895604e]|
|[dtest branch|https://github.com/apache/cassandra-dtest/compare/master...jolynch:fix_compression_dtest]|
|[cass branch|https://github.com/apache/cassandra/compare/trunk...jolynch:CASSANDRA-15782]|


Tests running, will update with result.;;;","05/May/20 03:01;jolynch;All cqlsh dtests are now passing.

[java 11 cqlsh dtests|https://app.circleci.com/pipelines/github/jolynch/cassandra/12/workflows/3f45cb2b-bb15-44df-a67a-55529fbb9ccf]
[java 8 cqlsh dtests|https://app.circleci.com/pipelines/github/jolynch/cassandra/12/workflows/4996b893-228d-4e2f-9ef4-913c849d8cd4]

[~brandon.williams] or  [~Bereng] have a sec to do a quick CR on the dtest fix [a2fe94ba|https://github.com/apache/cassandra-dtest/commit/a2fe94ba8004a2b7159e58281a8125411895604e]?

 ;;;","05/May/20 07:49;bereng;Wow that was fast :-) LGTM If a compaction is needed to make that deflation effective +1;;;","05/May/20 21:18;jolynch;Committed as [da7fcefb|https://github.com/apache/cassandra-dtest/commit/da7fcefb16d16af8924cda35c0a6a63ad553694f]

Note that I considered this might impact pre trunk dtest runs but this fix should be safe since compacting in 2.x/3.x should also produce a deflate table (as flush does). If I'm wrong I'll fix it.

Thanks [~Bereng]  for the report, sorry for missing that.;;;","17/Jun/20 05:44;maedhroz;[~Bereng] [~jolynch] I think [~djoshi] and I are seeing this pop up again here: https://app.circleci.com/pipelines/github/dineshjoshi/cassandra/48/workflows/23de1e8d-108e-4138-8ea6-a650965920a5/jobs/2550/parallel-runs/2. The failure output seems to indicate the changes from this patch are present. (The C* branch in question should be [very close to trunk|https://github.com/dineshjoshi/cassandra/tree/CASSANDRA-14888].);;;","17/Jun/20 08:12;bereng;Hey [~maedhroz] ;-)

[~jolynch] seems to be able to fix these in the drop of a hat :-) , so I'll defer to him for the time. Other than that we'll have to bisect etc etc;;;","31/Aug/20 21:30;maedhroz;Popped up again [here|https://app.circleci.com/pipelines/github/maedhroz/cassandra/102/workflows/37ed8dab-9da4-4730-a883-20b7a99d88b4/jobs/522].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CorruptSSTableException after a 2.1 SSTable is upgraded to 3.0, failing reads",CASSANDRA-15778,13302322,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ifesdjeen,sumanth.pasupuleti,sumanth.pasupuleti,01/May/20 15:39,01/Aug/21 12:18,13/Jul/23 08:39,04/Jun/20 18:21,3.0.21,,,,,Local/Compaction,Local/SSTable,,,0,,,,"Below is the exception with stack trace. This issue is consistently reproduce-able.
{code:java}
ERROR [SharedPool-Worker-1] 2020-05-01 14:57:57,661 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[SharedPool-Worker-1,5,main]ERROR [SharedPool-Worker-1] 2020-05-01 14:57:57,661 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[SharedPool-Worker-1,5,main]org.apache.cassandra.io.sstable.CorruptSSTableException: Corrupted: /mnt/data/cassandra/data/<ks>/<cf-fda511301fb311e7bd79fd24f2fcfb0d/md-10151-big-Data.db at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:349) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.columniterator.AbstractSSTableIterator.hasNext(AbstractSSTableIterator.java:220) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.columniterator.SSTableIterator.hasNext(SSTableIterator.java:33) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:95) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:32) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:47) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:129) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:95) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:32) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:47) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:129) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:129) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:131) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:87) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:77) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer.serialize(UnfilteredPartitionIterators.java:294) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.ReadResponse$LocalDataResponse.build(ReadResponse.java:187) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.ReadResponse$LocalDataResponse.<init>(ReadResponse.java:180) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.ReadResponse$LocalDataResponse.<init>(ReadResponse.java:176) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.ReadResponse.createDataResponse(ReadResponse.java:76) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.ReadCommand.createResponse(ReadCommand.java:341) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:47) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:67) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_231] at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:109) [nf-cassandra-3.0.19.8.jar:3.0.19.8] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]Caused by: java.lang.ArrayIndexOutOfBoundsException: 121 at org.apache.cassandra.db.ClusteringPrefix$Deserializer.prepare(ClusteringPrefix.java:425) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.prepareNext(UnfilteredDeserializer.java:170) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.hasNext(UnfilteredDeserializer.java:151) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.computeNext(SSTableIterator.java:140) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.hasNextInternal(SSTableIterator.java:172) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:336) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] ... 27 common frames omitted

Caused by: java.lang.ArrayIndexOutOfBoundsException: 121
    at org.apache.cassandra.db.ClusteringPrefix$Deserializer.prepare(ClusteringPrefix.java:425) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8]
    at org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.prepareNext(UnfilteredDeserializer.java:170) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8]
    at org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.hasNext(UnfilteredDeserializer.java:151) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8]
    at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.computeNext(SSTableIterator.java:140) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8]
    at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.hasNextInternal(SSTableIterator.java:172) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8]
    at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:336) ~[nf-cassandra-3.0.19.8.jar:3.0.19.8] ... 27 common frames omitted
{code}

Column family definition
{code:java}
CREATE TABLE <keyspace>.""<cf>"" (
 key text,
 value text,
 PRIMARY KEY (key, value)
 ) WITH COMPACT STORAGE
 AND CLUSTERING ORDER BY (value ASC)
 AND bloom_filter_fp_chance = 0.01
 AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
 AND comment = ''
 AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
 AND compression = {'enabled': 'false'}
 AND crc_check_chance = 1.0
 AND dclocal_read_repair_chance = 0.1
 AND default_time_to_live = 0
 AND gc_grace_seconds = 864000
 AND max_index_interval = 2048
 AND memtable_flush_period_in_ms = 0
 AND min_index_interval = 128
 AND read_repair_chance = 0.0
 AND speculative_retry = '99PERCENTILE';{code}",,aleksey,benedict,dcapwell,ifesdjeen,jeromatron,slebresne,sumanth.pasupuleti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15373,,,,CASSANDRA-15790,CASSANDRA-15799,,,,,,,,,,,,,,,,,,,,,,0.0,ifesdjeen,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,,Thu Jun 04 18:19:41 UTC 2020,,,,,,,All,,,,,,"0|z0eas0:",9223372036854775807,,,,dcapwell,ifesdjeen,slebresne,,Critical,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/c4064dd80e427aec7c04e8e2e1e4630d6c8087b6,,,,,,,,,"Test added; manually tested additional scenarios of upgrade to 3.11, dropping compact storage, and reading in 4.0. However, this is going to be fully handled in scope of [CASSANDRA-15811].",,,,,"01/May/20 16:44;dcapwell;The stack trace points to https://github.com/apache/cassandra/blob/cassandra-3.0.19/src/java/org/apache/cassandra/db/ClusteringPrefix.java#L425.  If you have the 2.1 sstable attempt to read it with the tool sstable2json, that will tell you if the file was valid in 2.1.  

How was the data written, was it always though CQL or some other system (like MapReduce)?;;;","01/May/20 16:49;dcapwell;Looking closer the file is md-10151-big-Data.db, so this was after the 2.1 file got upgraded to 3.0;;;","01/May/20 18:11;sumanth.pasupuleti;Thanks correct [~dcapwell]. We have restored 2.1 sstables on this 3.0 cluster, and kicked off sstableupgrade, to eagerly rewrite all 2.1 sstables to 3.0 format. 
I was able to trace back the 2.1 sstable that got compacted into this 3.0 sstable. The data was originally written using [astyanax|https://github.com/Netflix/astyanax] driver.;;;","05/May/20 19:12;dcapwell;Created a branch to ignore value field for compact storage: https://github.com/dcapwell/cassandra/tree/corruption/CASSANDRA-15778. Running through testing now.;;;","12/May/20 18:22;ifesdjeen;I've taken a short look and wanted to precaution against ignoring or even purging values from the hidden compact column, since there are scenarios when it can contain legitimate data. 

I've been able to reproduce an issue with a similar, albeit not exactly same stacktrace (leaving only the part from sstable iterator downward):

{code}
ERROR 18:08:11 Uncaught exception on thread Thread[SharedPool-Worker-2,10,main]
java.lang.RuntimeException: org.apache.cassandra.serializers.MarshalException: EmptyType only accept empty values
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2470) ~[main/:na]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_171]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[main/:na]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [main/:na]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:109) [main/:na]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]
Caused by: org.apache.cassandra.serializers.MarshalException: EmptyType only accept empty values
        at org.apache.cassandra.serializers.EmptySerializer.validate(EmptySerializer.java:42) ~[main/:na]
        at org.apache.cassandra.db.marshal.AbstractType.validate(AbstractType.java:159) ~[main/:na]
        at org.apache.cassandra.db.marshal.AbstractType.validateIfFixedSize(AbstractType.java:390) ~[main/:na]
        at org.apache.cassandra.db.LegacyLayout$CellGrouper.addCell(LegacyLayout.java:1457) ~[main/:na]
        at org.apache.cassandra.db.LegacyLayout$CellGrouper.addAtom(LegacyLayout.java:1377) ~[main/:na]
        at org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.readRow(UnfilteredDeserializer.java:542) ~[main/:na]
        at org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator.hasNext(UnfilteredDeserializer.java:519) ~[main/:na]
        at org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer.hasNext(UnfilteredDeserializer.java:336) ~[main/:na]
        at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.computeNext(SSTableIterator.java:140) ~[main/:na]
        at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.hasNextInternal(SSTableIterator.java:172) ~[main/:na]
        at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:336) ~
{code}

In short, this is a table created on 2.2 side with: {{CREATE TABLE table_0 (key text, value text, PRIMARY KEY (key, value)) WITH COMPACT STORAGE;}}

If you write data into this table with thrift ({{ThriftClient#batch_mutate}}), you will end up with data in the hidden column, which looks like this on the 2.1 side:

{code}
select * from ks1.table_0;

 key   | value
-------+-------
 key22 |  key1
 key22 |  key4
 key11 |  key1
 key11 |  key4

(4 rows)
{code}

And like this in sstabledump:

{code}
[
{""key"": ""key22"",
 ""cells"": [[""key1"",""76616c756531"",1589306163593],
           [""key4"",""76616c756534"",1589306163594]]},
{""key"": ""key11"",
 ""cells"": [[""key1"",""76616c756531"",1589306163593],
           [""key4"",""76616c756534"",1589306163594]]}
]
{code}

Of course, on 3.x side you wouldn't be able to see the values.

UPDATE: Was able to reproduce it: 

{code}
java.lang.RuntimeException: org.apache.cassandra.io.sstable.CorruptSSTableException: Corrupted: /Users/ifesdjeen/foss/java/apache-cassandra/data/data/ks1/table_0-05609b80948511eabfa891431c623cd5/md-2-big-Data.db
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2470) ~[main/:na]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_171]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[main/:na]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [main/:na]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:109) [main/:na]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]
Caused by: org.apache.cassandra.io.sstable.CorruptSSTableException: Corrupted: /Users/ifesdjeen/foss/java/apache-cassandra/data/data/ks1/table_0-05609b80948511eabfa891431c623cd5/md-2-big-Data.db
        at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:349) ~[main/:na]
        at org.apache.cassandra.db.columniterator.AbstractSSTableIterator.hasNext(AbstractSSTableIterator.java:220) ~[main/:na]
        at org.apache.cassandra.db.columniterator.SSTableIterator.hasNext(SSTableIterator.java:33) ~[main/:na]
        at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:95) ~[main/:na]
        at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:32) ~[main/:na]
        at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:47) ~[main/:na]
        at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:129) ~[main/:na]
        at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:95) ~[main/:na]
        at org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext(LazilyInitializedUnfilteredRowIterator.java:32) ~[main/:na]
        at org.apache.cassandra.utils.AbstractIterator.hasNext(AbstractIterator.java:47) ~[main/:na]
        at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:129) ~[main/:na]
        at org.apache.cassandra.db.transform.BaseRows.hasNext(BaseRows.java:129) ~[main/:na]
        at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:131) ~[main/:na]
        at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:87) ~[main/:na]
        at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:77) ~[main/:na]
        at org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer.serialize(UnfilteredPartitionIterators.java:294) ~[main/:na]
        at org.apache.cassandra.db.ReadResponse$LocalDataResponse.build(ReadResponse.java:187) ~[main/:na]
        at org.apache.cassandra.db.ReadResponse$LocalDataResponse.<init>(ReadResponse.java:180) ~[main/:na]
        at org.apache.cassandra.db.ReadResponse$LocalDataResponse.<init>(ReadResponse.java:176) ~[main/:na]
        at org.apache.cassandra.db.ReadResponse.createDataResponse(ReadResponse.java:76) ~[main/:na]
        at org.apache.cassandra.db.ReadCommand.createResponse(ReadCommand.java:341) ~[main/:na]
        at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1785) ~[main/:na]
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2466) ~[main/:na]
        ... 5 common frames omitted
Caused by: java.lang.ArrayIndexOutOfBoundsException: 97
        at org.apache.cassandra.db.ClusteringPrefix$Deserializer.prepare(ClusteringPrefix.java:431) ~[main/:na]
        at org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.prepareNext(UnfilteredDeserializer.java:170) ~[main/:na]
        at org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer.hasNext(UnfilteredDeserializer.java:151) ~[main/:na]
        at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.computeNext(SSTableIterator.java:140) ~[main/:na]
        at org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader.hasNextInternal(SSTableIterator.java:172) ~[main/:na]
        at org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader.hasNext(AbstractSSTableIterator.java:336) ~[main/:na]
        ... 27 common frames omitted
{code}

Steps: 

1. Create a compact table in 2.1 (or 2.2), doesn't matter
2. Write data to it with thrift
3. Upgrade sstables
4. Try reading data from this table

On latest 3.0, you won't get past {{EmptySerializer#validate}}, because of [CASSANDRA-15373], so you'll have to skip validation manually or use a version that doesn't contain a fix.

But this only confirms that we should reconsider the way we treat EmptyType and thrift values.

UPDATE2: if we're making a thrift write against a fresh 3.0 node with compact storage (prior to validation patch), we'll end up with the same stack trace.;;;","12/May/20 22:37;dcapwell;Thanks [~ifesdjeen] for taking a look at this.  Most of the context is not in JIRA and the patch I posted was so Sumanth and I could test out if the value field being empty was the issue and if there were other issues; *no one should apply that patch to production*.

The current state is that the value field silently corrupted the data because

* CASSANDRA-15373 is 3.0.20 and not 3.0.19 (test cluster)
* CASSANDRA-15790 is needed to not write data and instead fail.  We currently write out data that has no logic to read, so corrupts the stream.

Action items so far are to come up with a resolution to this case.  [~bdeggleston] has the idea that we should migrate the hidden column out of VOID and to BLOB (2.1 logic), this will make the data readable via Thrift but not CQL.

[~ifesdjeen] about your reproduction, skimming the method (and CassandraServer version) you sent I don't see us injecting anything, are you saying CassandraDaemon, ThriftClient, or client code added this data?  If ThriftClient or CassandraDaemon do you know where?;;;","14/May/20 10:29;ifesdjeen;Posting the patch:

|[circleci|https://circleci.com/gh/ifesdjeen/cassandra/tree/15778-3.0]|[3.0 patch|https://github.com/apache/cassandra/compare/trunk...ifesdjeen:15778-3.0?expand=1]|

In summary, problem was caused by the fact that CQL-created {{COMPACT STORAGE}} dense tables (i.e., ones that have a clustering key and have no regular columns), had a hidden {{EmptyType}} column (compact value column). This compact value column was accessible through thrift, and it was possible to write key-value pairs to it, which would look like:

{code}
[
{""key"": ""key22"",
 ""cells"": [[""key1"",""76616c756531"",1589306163593], # <-- thrift-written cell
           [""key4"",""76616c756534"",1589306163594]]}
], [
{""key"": ""key000"",
 ""cells"": [[""value000"","""",1589371872206298]]}, # <-- cql-written cell, for comparison
]
{code}

When upgrading to 3.0, we were running into one of the following situations. During sstable upgrade, value would get written to 3.0 sstable using {{AbstractType#write}}, which would write any fixed-size (0 size is fixed for empty type), taking {{ByteBuffer#remaining}} bytes from its value. Since the value was written through thrift, it is non-empty. Similar situation would happen when issuing a local read, which would go through local response. When trying to read upgraded sstable, we read all the way to the beginning of empty value, then try to read the value itself, but we know that its size is zero, so we read nothing. Whichever code path attempts to read next bytes, will try to interpret our thrift-written bytes as the rest of cells, which leads to corruption.

I was a bit reluctant to effectively turn {{EmptyType}} into {{BytesType}}, but using empty compact value from thrift in a way that makes it look like it's just a byte array was already possible (even though I believe only a few people have used it this way), and now we have to make this behaviour official.

3.11 patch will look more or less the same as 3.0 one. Patch is not applicable to 4.0, but we will have to make sure we make {{EmptyType}} is migrated to {{BytesType}} when dropping compact storage in scope of [CASSANDRA-15811].;;;","14/May/20 19:26;dcapwell;I am -1 to this.  This attempts to change the EmptyType to be the BytesType.  Why not change the schema?  As we talked about COMPACT STOAGE was BLOB in 2.1 but is now VOID, which means this is the wrong type to use; we should change the schema to match the 2.1 behavior, not change the semantics of empty.;;;","14/May/20 20:29;ifesdjeen;bq. Why not change the schema? 

First off, I'd like to highlight that I was (and still am) reluctant to the change to {{EmptyType}}. I did take a look at that option (changing schema), but was weary, as this would be potentially a much larger change that would probably achieve the same thing. The only problem I see is that ""empty"" type is not really empty anymore. However, it is _already_ not empty from compaction perspective, and from data perspective. 

The reason I thought it was valuable to keep a distinction between the thift-created table with a Blob (where this column is visible) and CQL-created dense table (where value is hidden). I did check all usages of {{EmptyType}} and, apart from {{Set}}, all usages seem to be compact-storage related. 
 
-It is not possible to create a table with CQL that has an empty type- (UPD: turns out that we can, through fully qualified type name), so we're only really changing semantics of something that I think is internal to compact storage...;;;","15/May/20 03:31;dcapwell;We spoke offline, dumping here.  

Splunking through GitHub I found projects which use the empty type and you can create a schema with the empty type.  Even if we update all usage within Cassandra, we struggle to really understand the impact outside of Cassandra since it is modifying a public API; changing EmptyType to me is very high risk.

I was also showing that CQL created tables in 2.1.20 used the blob type and allowed me to write bytes to the hidden column (the write was outside CQL), so this isn't localized to CQL vs Thrift tables, but more that 3.0 changed behavior to go from BytesType to EmptyType.

{code}
-- this table was created via CQL
cqlsh> desc table test.kv;

CREATE TABLE test.kv (
    key text,
    value text,
    """" blob,
    PRIMARY KEY (key, value)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (value ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = '{""keys"":""ALL"", ""rows_per_partition"":""NONE""}'
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy'}
    AND compression = {}
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99.0PERCENTILE';
cqlsh> select * from system.schema_columns where keyspace_name='test' and columnfamily_name='kv';

 keyspace_name | columnfamily_name | column_name | component_index | index_name | index_options | index_type | type           | validator
---------------+-------------------+-------------+-----------------+------------+---------------+------------+----------------+-------------------------------------------
          test |                kv |             |            null |       null |          null |       null |  compact_value | org.apache.cassandra.db.marshal.BytesType
          test |                kv |         key |            null |       null |          null |       null |  partition_key |  org.apache.cassandra.db.marshal.UTF8Type
          test |                kv |       value |            null |       null |          null |       null | clustering_key |  org.apache.cassandra.db.marshal.UTF8Type

(3 rows)
{code}

After upgrading to 3.0, the schema was changed to empty type

{code}
cqlsh> cqlsh> select * from system_schema.columns where keyspace_name='test' and table_name='kv';

 keyspace_name | table_name | column_name | clustering_order | column_name_bytes | kind          | position | type
---------------+------------+-------------+------------------+-------------------+---------------+----------+-------
          test |         kv |         key |             none |          0x6b6579 | partition_key |        0 |  text
          test |         kv |       value |              asc |      0x76616c7565 |    clustering |        0 |  text
          test |         kv |      value1 |             none |    0x76616c756531 |       regular |       -1 | empty

(3 rows)
{code};;;","15/May/20 15:11;ifesdjeen;After thinking about it for longer time and talking with [~slebresne] and [~aleksey], I think there're no good solution to this problem. At the moment {{EmptyType}} assumes that it's fixed-size, therefore doesn't write its size (only writes bytes). This means that anyone who has already written the value, won't be able to read it back, and writing a generic scrub tool for that will be non-trivial since we can have arbitrary bytes there. 

From the alternatives, I think everything we have right now is risky to some degree:
  * if we inherit {{EmptyType}} from {{BytesType}}, we change semantics of the empty type, which can have unforeseen consequences 
  * if we change schema and migrate from {{EmptyType}} to {{BytesType}}, we'll end up showing the hidden column. To keep it hidden, we'll have to add a flag to table metadata
  * if we just migrate {{EmptyType}} from fixed-size to variable-size (basically by not overriding {{valueLengthIfFixed}}), it'll work in principle because of {{BufferCell#hasValue}}, but this also might be risky

So the only reasonable thing to do seems to handle this particular case: people who still have their 2.1 sstables, and they haven't upgraded, and they're (somewhat) interested in the data they've written. People who're not interested in the data they're written receive the same solution, but can just drop the column.

I suggest we do the following:
   * we keep the existing validation that forbids writes into {{EmptyType}} columns and make {{EmptyType}} write method no-op to be on an even safer side
   * we add a way to ""unbreak"" cql-created thrift-written tables by adding new {{ALTER TABLE FIX EMPTY TYPE}} (naming is just for example here) statement, which would _only_ work for cql-created dense tables and nothing else, and would turn hidden {{EmptyType}} column to {{BytesType}}. 

Main reason to ask for human intervention is that we'd like to avoid changes that can add new problems whie not bein fully satisfactory for the given problem. This will give anyone with a problem a clear path to a solution without risking already existing setups.

This also implies that in [CASSANDRA-15811], we'll simply drop {{EmptyType}} column entirely when doing {{DROP COMPACT STORAGE}}, so no surprising column without data will show up.;;;","15/May/20 20:11;dcapwell;Alex and I spoke offline, dumping here for context.

There are a few cases we want to worry about, and some cases which we don't feel are important to worry about:

Cases we feel are important to worry about

1) upgrade from 2.1 to 3.0 *or* 3.11
2) CQL Table with values written to the previous blob type (hidden type only exposed via Thrift)
3) Thrift tables with arbitrary types

Cases we don't feel are important to worry about

1) upgrade from 3.0 to 3.0 or 3.11

Given this, we came up with a proposal that should address the above concerns.

1) while upgrading from 2.1 to 3.0 or 3.11, legacy schema migration should default to BytesType, but allow an override to switch to EmptyType; BytesType will cause the column to be no longer hidden [1][2].
2) if override is set to EmptyType and data is found to be rejected in validation, then DROP COMPACT STORAGE will be needed and should add an option to expose this column.  This means the hidden column will now be exposed and will allow alter statements to change the type or drop it completely.
3) Attempt to add a more meaningful exception which tells users about this fix.  Right now the exception is ""EmptyType only accept empty values"", this is not actionable and can cause confusion.
4) For clusters already upgraded to 3.0 or 3.11, the only impact would be the options added to DROP COMPACT STORAGE which would allow the column to be exposed or not [3]; we have not worked out the default behaviors of this.

[1] - This is actually an open disagreement.  Alex's point is that this affects a small user base, but would expose the field to all users upgrading.  My point is summarized in [2].
[2] - The reason to default to BytesTypes is because the rolling upgrade case.  Since there may be data present, the default of EmptyType is unsafe as it would cause the token range impacted to be unavailable to the users.  Schema migrations are not allowed in mixed mode so the only way to resolve this would be to complete the upgrade, which may cause a larger outage for users.  If the user is aware of this behavior and know its safe, they may choose to switch to the EmptyType case.
[3] - There is an assumption that all clusters are 3.0.20+, the reason for this assumption is that validation checks were in 3.0.20 (see CASSANDRA-15373) and would protect against corrupting the SSTable in the upgrade or compaction case.  If the cluster is 3.0.19 or earlier, then corruption would have happened as the EmptyType was writing the bytes but was not reading them (see CASSANDRA-15790).  As of this moment we are not aware of a generic way to repair this data as we don't know what those bytes were so couldn't account for them generically (they are written without length).;;;","18/May/20 17:24;ifesdjeen;I think I have a patch I think solves the problem without introducing breaking changes: 

|[circleci|https://circleci.com/gh/ifesdjeen/cassandra/tree/15778-3.0]|[3.0 patch|https://github.com/apache/cassandra/compare/trunk...ifesdjeen:15778-3.0?expand=1]|

It does the following things:

  * makes {{EmptyType}} restrictions slightly stricter withouot changing semantics. Just make sure we can not write values with empty type.
  * changes {{LegacySchemaMigrator}}, allowing to start a 3.0 node during upgrade with {{-D cassandra.init_dense_table_compact_value_as_bytes=true}}, which would initialize a dense table compact value as {{ByteType}}. It will be initialized as {{EmptyType}} by default.
  * improves an error message in {{EmptySerializer}} for anyone who have faced written data in the column that was supposed to be empty, referring them here. 
  * since we initialize with {{EmptyType}} by default, in case someone has proceeded to upgrade their nodes withouot even testing an upgrade out (and being able to just start upgrade with an aforementioned flag), allow {{ALTER TABLE ALTER TYPE}} _only_ from {{EmptyType}} to {{BytesType}} and _only_ for a dense table.

We should not change compact storage behaviour to suddenly reveal a {{BytesType}} column for a huge userbase. Instead, we help out anyone who may have written values with Thrift: either to _prevent_ seeing this issue (which is ideal), or to _quickly fix_ it after upgrade. Schema changes won't propagate accross versions, but they only need to propagate to 3.0 nodes only anyways.;;;","27/May/20 14:56;slebresne;That patch looks like a reasonable solution to me, at least from my understanding of the issue.

Small comments on the code itself:
* I'd put a comment in {{AlterTableStatement}} to point out to this ticket (may feel like a peculiar special case to future readers without context).
* In {{AbstractType}}, the changes to {{writeValue}}/{{writtenLength}} feels confusing to me, and if the new code is ever triggered, this would mean we silently drop a value on the floor (we get a non-empty value, but the type say the value should be empty, so we'd write nothing), and that doesn't feel lik a good idea. Instead of specializing the 0 size case, I'd just add a {{assert valueLengthIfFixed < 0 || value.remaining() == valueLengthIfFixed}} to basically ensure we're not going to write something we don't know how to read (and effectively forbid the call of those method for {{EmptyType}} in conjunction with the existing assert).
* Assuming we agree on the previous point, I'd prefer not overriding the methods in {{EmptyType}}. For the write ones, it wouldn't add anything, and overriding {{readValue}} feels confusing when the rest of the code ensures we can never write an empty value through those methods.
* Nit: LegacySchemaMigrator has unused leftover imports ({{java.io.InvalidClassException}} and {{net.bytebuddy.implementation.bytecode.Throw}}).
;;;","29/May/20 16:51;ifesdjeen;Thank you for the review. Made suggested changes and triggered CI again:

|[circleci|https://circleci.com/gh/ifesdjeen/cassandra/tree/15778-3.0]|[3.0 patch|https://github.com/apache/cassandra/compare/trunk...ifesdjeen:15778-3.0?expand=1]|
|[circleci|https://circleci.com/gh/ifesdjeen/cassandra/tree/15778-3.11]|[3.11 patch|https://github.com/apache/cassandra/compare/trunk...ifesdjeen:15778-3.11?expand=1]|
;;;","29/May/20 18:39;dcapwell;Spoke on slack, mostly held off reviewing as I was waiting on testing.  

Feedback:

* https://github.com/apache/cassandra/compare/trunk...ifesdjeen:15778-3.0?expand=1#diff-43b2d530031e2f7ad4286bd05fed4ca0R127. exception can be hard for someone who hasn't read the code.  It would be good to move the validation part into a different if statement after the dense check, so the exception can be more actionable.
* https://github.com/apache/cassandra/compare/trunk...ifesdjeen:15778-3.0?expand=1#diff-0a4167e798cf91857b5d6995661cd421R398 can we add a assert message to show how much is remaining?  Same for the other method as well

Mostly good with this since alter unblocks a cluster.  One thing I would like to test is mixed mode, alter half way, will legacy still migrate to empty?;;;","30/May/20 08:38;ifesdjeen;Thank you for the review!

bq. One thing I would like to test is mixed mode, alter half way, will legacy still migrate to empty?

I did test all of the scenarios locally, including the one you describe. I believe current tests cover all code paths.

bq.  exception can be hard for someone who hasn't read the code. It would be good to move the validation part into a different if statement after the dense check, so the exception can be more actionable.

Could you elaborate a bit? Stack trace doesn't change in this case, and exception itself hasn't changed from the old version. ;;;","01/Jun/20 19:46;dcapwell;bq. Could you elaborate a bit? Stack trace doesn't change in this case, and exception itself hasn't changed from the old version.

Think code will speak loader.

{code}
if (meta.isDense() && meta.compactValueColumn().type instanceof EmptyType)
{
  if (validator != null
      && validator.getType() instanceof BytesType
      & meta.compactValueColumn().equals(def))
  {
                    cfm = meta.copyWithNewCompactValueType(validator.getType());
                    break;
  }
  else
  {
    throw new InvalidRequestException(""Altering of compaction value column types is only allowed if changing to bytes, but given "" + validator.getType());
  }
}
{code}

If I know that the column has always been an integer and I attempt to set as a int32 I get an exception saying that alter isn't allowed; this exception can imply that there is no way to fix the issue.  To make it more actionable, it would be better to say that alter is only allowed to be bytes and that the provided type is not supported.;;;","02/Jun/20 05:05;sumanth.pasupuleti;Thanks for the patch [~ifesdjeen]. I was able to validate both the flows of the patch on the actual data that I was able to repro the issue with.

In either of the flows, the resulting table ended up with the following schema, and doing a select * on the table includes the third column.

{code:java}
cqlsh:ks> desc ""cf"";

CREATE TABLE ks.""cf"" (
    key text,
    value text,
    value1 blob,
    PRIMARY KEY (key, value)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (value ASC)
    ...
{code}

A couple of comments on the patch:
1. It maybe helpful to add the following tests to {{testAlterTableAlterType()}} method.

{code:java}
        createTable(""CREATE TABLE %s (a int, value int, PRIMARY KEY (a,value)) WITH COMPACT STORAGE"");
        assertInvalidMessage(""Altering of types is not allowed"",
                             ""ALTER TABLE %s ALTER value TYPE 'org.apache.cassandra.db.marshal.IntegerType'"");
        execute(""ALTER TABLE %s ALTER value1 TYPE 'org.apache.cassandra.db.marshal.BytesType'"");
{code}

2. For the system property {{cassandra.init_dense_table_compact_value_as_bytes}}, I am not sure if folks may find it useful to control what keyspace/cf this needs to be applied to. I personally feel it may be rare enough to ignore this, but wanted to bring it up nevertheless.;;;","04/Jun/20 18:02;ifesdjeen;[~dcapwell] thank you for the detailed explanation. I've taken your suggestion in.

[~sumanth.pasupuleti] thank you for checking this on the cluster and your feedback on the patch! I've added the test you have suggested. As regards keyspace/cf key/value pairs, I did think about this. I think if you have written to even a single cf, it makes sense to force {{BytesType}} for all cfs, in particular - to avoid folks forgetting about previous writes. We can open up a ticket with a follow-up/improvement, but I do not feel this is a necessary condition for the fix.;;;","04/Jun/20 18:19;ifesdjeen;Thank you all for review and comments. Committed to 3.0 with [c4064dd80e427aec7c04e8e2e1e4630d6c8087b6|https://github.com/apache/cassandra/commit/c4064dd80e427aec7c04e8e2e1e4630d6c8087b6], and merged up to [3.11|https://github.com/apache/cassandra/commit/056c9eff4b0311d9bde526e0bc9f39e5fad21e39]. Merge to trunk was done with {{-s ours}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"All test targets to set jvm arg ""java.io.tmpdir"" according to ${tmp.dir}",CASSANDRA-15777,13302070,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,mck,mck,30/Apr/20 11:43,14/Jun/20 08:47,13/Jul/23 08:39,30/Apr/20 17:50,2.2.17,3.0.21,3.11.7,4.0,4.0-beta1,Build,Test/unit,,,0,,,,"Make all test targets declare the temp directory (java.io.tmpdir) as defined by tmp.dir

This was originally done in CASSANDRA-7712 but has been eroded over time as the test targets evolved.

The attached patch moves the 
{code}<jvmarg value=""-Djava.io.tmpdir=${tmp.dir}""/>{code}
into the {{testmacrohelper}} macrodef.

Like CASSANDRA-7712, jenkins agents are filling up their root volumes because of what's left behind under {{""/tmp""}}

The build scripts have already been configured to define the temp directory to be within the jenkins job's workspace: https://github.com/apache/cassandra-builds/commit/33ba1e30ea196180f7d70f8e6ec47fdf6844f3f6#diff-91876f5f158ec50dab9a70cc06c06922",,bereng,dcapwell,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-7712,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri May 01 22:03:00 UTC 2020,,,,,,,All,,,,,,"0|z0e980:",9223372036854775807,,,,bereng,e.dimitrova,,,Normal,,2.1 rc3,,,https://github.com/apache/cassandra/commit/b44a2140f88e49ac533bb1cfe3db4308929a33ea,,,,,,,,,ASF CI,,,,,"30/Apr/20 11:55;mck;||branch||circleci||jenkins||
|[cassandra_2.2_15777|https://github.com/apache/cassandra/compare/cassandra-2.2...thelastpickle:mck/cassandra-2.2_15777]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-2.2_15777]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/69/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch-test/69]|
|[cassandra_3.0_15777|https://github.com/apache/cassandra/compare/cassandra-3.0...thelastpickle:mck/cassandra-3.0_15777]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-3.0_15777]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/78/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/78]|
|[cassandra_3.11_15777|https://github.com/apache/cassandra/compare/cassandra-3.11...thelastpickle:mck/cassandra-3.11_15777]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-3.11_15777]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/79/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/79]|
|[trunk_15777|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15777]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Ftrunk_15777]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/80/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/80]|;;;","30/Apr/20 13:32;bereng;I did take a cursory look at the changes and I am only wondering if cassandra-test.sh could benefit from having {{TPMDIR}} variable just like the other scripts, instead of having it hardcoded?;;;","30/Apr/20 14:06;mck;[~Bereng], if by ""having TPMDIR variable just like the other scripts"" you mean [this|https://github.com/apache/cassandra-builds/blob/master/build-scripts/cassandra-dtest-pytest.sh#L23], then that's for python processes. Anything java needs the {{-Djava.io.tmpdir=…}} argument (which can be specified as as {{-Dtmp.dir=…}} in our ant build script).;;;","30/Apr/20 14:16;e.dimitrova;LGTM, trunk circleci tests and Jenkins tests still running but if they don't indicate anything (which I doubt will be the case) +1 from me. Thanks;;;","30/Apr/20 15:48;mck;Verified in CI with the following output from https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/70/console which shows the tmp directory in the build workspace is being used.
{noformat}
14:47:52 + find . -maxdepth 2 -type d -exec du -hs {} ;
14:47:52 483M	.
14:47:52 365M	./.git
14:47:52 48K	./.git/hooks
14:47:52 4.0K	./.git/info
14:47:52 0	./.git/branches
14:47:52 3.7M	./.git/refs
14:47:52 359M	./.git/objects
14:47:52 2.2M	./.git/logs
14:47:52 140K	./.circleci
14:47:52 12K	./.jenkins
14:47:52 240K	./bin
14:47:52 144K	./conf
14:47:52 4.0K	./conf/triggers
14:47:52 104K	./debian
14:47:52 12K	./debian/patches
14:47:52 408K	./doc
14:47:52 296K	./doc/cql3
14:47:52 76K	./examples
14:47:52 16K	./examples/triggers
14:47:52 60K	./examples/hadoop_cql3_word_count
14:47:52 76K	./ide
14:47:52 72K	./ide/idea
14:47:52 25M	./lib
14:47:52 460K	./lib/licenses
14:47:52 6.7M	./lib/sigar-bin
14:47:52 460K	./pylib
14:47:52 448K	./pylib/cqlshlib
14:47:52 28K	./redhat
14:47:52 13M	./src
14:47:52 13M	./src/java
14:47:52 4.0K	./src/resources
14:47:52 4.0K	./src/jdkoverride
14:47:52 70M	./test
14:47:52 92K	./test/burn
14:47:52 40K	./test/conf
14:47:52 64M	./test/data
14:47:52 292K	./test/distributed
14:47:52 144K	./test/long
14:47:52 36K	./test/microbench
14:47:52 48K	./test/resources
14:47:52 6.2M	./test/unit
14:47:52 892K	./tools
14:47:52 80K	./tools/bin
14:47:52 800K	./tools/stress
14:47:52 460K	./cassandra-builds
14:47:52 236K	./cassandra-builds/.git
14:47:52 48K	./cassandra-builds/build-scripts
14:47:52 32K	./cassandra-builds/cassandra-release
14:47:52 0	./cassandra-builds/dist
14:47:52 68K	./cassandra-builds/docker
14:47:52 44K	./cassandra-builds/jenkins-dsl
14:47:52 4.2M	./tmp
14:47:52 0	./tmp/jna--1712433994
14:47:52 0	./tmp/something6875525018590718980
14:47:52 0	./tmp/Keyspace1
14:47:52 200K	./tmp/1588249903123-0
14:47:52 8.0K	./tmp/5486536555493548056
14:47:52 36K	./tmp/1588250143825-0
14:47:52 36K	./tmp/1588250143992-0
14:47:52 4.0K	./tmp/1588250402390-0
14:47:52 4.0K	./tmp/1588250422866-0
14:47:52 8.0K	./tmp/1588249509129-0
14:47:52 36K	./tmp/8965738820013814910
14:47:52 0	./tmp/6451432372843992708
14:47:52 256K	./tmp/1588249901385-0
14:47:52 8.0K	./tmp/1588249904898-0
14:47:52 8.0K	./tmp/2626815944938445495
14:47:52 164K	./tmp/840198530903671919
14:47:52 2.3M	./tmp/1588250142889-0
14:47:52 36K	./tmp/1588250143947-0
14:47:52 4.0K	./tmp/1588250402383-0
14:47:52 0	./tmp/subdir
14:47:52 4.0K	./tmp/1588250422859-0
14:47:52 8.0K	./tmp/1588249514052-0
14:47:52 264K	./tmp/1588249902435-0
14:47:52 4.0K	./tmp/1588250134087-0
14:47:52 4.0K	./tmp/1588250134186-0
14:47:52 84K	./tmp/1588250142861-0
14:47:52 0	./tmp/1588250143941-0
14:47:52 184K	./tmp/1588250144036-0
14:47:52 8.0K	./tmp/1588249518823-0
14:47:52 8.0K	./tmp/1588249523701-0
14:47:52 3.0M	./interface
14:47:52 2.9M	./interface/thrift
{noformat};;;","30/Apr/20 16:22;e.dimitrova;Moved in Ready to commit but I am not a committer. :-) Please commit;;;","30/Apr/20 17:19;dcapwell;testclasslist -> testlist -> testmacrohelper
testmacro -> testmacrohelper

The cassandra patch LGTM +1.

For the build, you can also do the below; mostly calling out as this lets you override more without having to change every ant call site (not asking to change though). 

{code}
cat <<EOF > build.properties
tmp.dir:     $PWD/tmp
EOF
{code};;;","30/Apr/20 17:30;mck;Thanks [~dcapwell]. ;;;","30/Apr/20 17:50;mck;Committed as b44a2140f88e49ac533bb1cfe3db4308929a33ea;;;","01/May/20 22:03;mck;Note, the {{tmp.dir}} value needs to be an absolute path. See this [fix|https://github.com/apache/cassandra-builds/commit/746e7e605c41a6f8b3f9ab44111b2816169dbfa0].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
python dtest regression caused by CASSANDRA-15637,CASSANDRA-15776,13301899,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,29/Apr/20 19:27,21/Dec/20 08:08,13/Jul/23 08:39,14/May/20 07:38,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,,,,"CASSANDRA-15637 deprecated size_estimates in favor of table_estimates to allow for local primary range estimates (needed for MapReduce).  This appears to have caused a regression in the python dtest nodetool_test.TestNodetool. test_refresh_size_estimates_clears_invalid_entries (as seen by [Circle CI|https://app.circleci.com/pipelines/github/dcapwell/cassandra/255/workflows/21907001-93ed-4963-9314-6a0ac6ea0f1d/jobs/1246/tests]  and [Jenkins|https://ci-cassandra.apache.org/job/Cassandra-trunk-dtest/56/]).",,dcapwell,djoshi,eduard.tudenhoefner,jmckenzie,mck,,,,,,,"dcapwell opened a new pull request #575:
URL: https://github.com/apache/cassandra/pull/575


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Apr/20 19:32;githubbot;600","michaelsembwever commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r420302886



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       what's the performance impact of going from one table scan to two here?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/May/20 18:01;githubbot;600","nastra commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r420574041



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       I believe we have to do 2 table scans now until the table `size_estimates` goes away.
   
   

##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))
         {
-            keyspaceTableMap.put(row.getString(""keyspace_name""), row.getString(""table_name""));
+            UntypedResultSet rs = executeInternal(cql);
+            for (UntypedResultSet.Row row : rs)
+                keyspaceTableMap.put(row.getString(""keyspace_name""), row.getString(""table_name""));

Review comment:
       are we potentially overwriting estimates that we read from `TABLE_ESTIMATES` with estimates that we read from `LEGACY_SIZE_ESTIMATES` on purpose?

##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       nit: imo it would be more obvious to use `SchemaConstants.SYSTEM_KEYSPACE_NAME, TABLE_ESTIMATES` /  `SchemaConstants.SYSTEM_KEYSPACE_NAME, LEGACY_SIZE_ESTIMATES` in the constructed CQL query than using `TableEstimates.toString()` / `LegacySizeEstimates.toString()`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/May/20 06:51;githubbot;600","dineshjoshi commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r421061551



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       Do we expect the set of keyspaces in `table_estimates` and `size_estimates` to be mutually exclusive? If not, aren't you clobbering the estimates from `table_estimates` with the values from `size_estimates` table? Is that the expected behavior?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/May/20 20:09;githubbot;600","dcapwell commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r421669222



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       @michaelsembwever the impact is related to the number of tables in the cluster; if you have 10 tables this is small, if you have 1k its much larger cost.  To @nastra point, its sadly unavoidable since the two tables could drift.  If you think about it from the migration standpoint, on T1 we have size_estimates as the source of truth, in T2 its now table_estimates, so if there happens to exist tables in size_estimates which are no longer in the new table_estimates they would live there forever.
   
   The function is only called at two places:
   
   1) CassandraDaemon startup.  This could impact startup times as its now twice the cost; impacts clusters with more tables; Sadly there is no monitoring around this, so only know via stack traces...
   2) JMX. triggered via nodetool or via random JMX call. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/May/20 17:24;githubbot;600","dcapwell commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r421670428



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       @nastra not sure I agree with the comment that toString is less obvious, is there a reason you say that?  In this case we don't care about quoting since it is known, but the `TableMetadata.toString` is a safer way to do this in general, so should be the new norm (in my opinion) rather than the common `format(""%s.%s"", ks_name, name)` (which is unsafe in general).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/May/20 17:26;githubbot;600","dcapwell commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r421674154



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       > Do we expect the set of keyspaces in table_estimates and size_estimates to be mutually exclusive? If not, aren't you clobbering the estimates from table_estimates with the values from size_estimates table? Is that the expected behavior?
   
   @dineshjoshi I expect them to conflict 99% of the time (1% for random users writing random data), which is why a set is used to dedup; after a reboot they should have identical tables.
   
   >  clobbering the estimates from table_estimates with the values from size_estimates table?
   
   This function only looks for table names, not values, so no clobbering estimates.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/May/20 17:32;githubbot;600","dcapwell commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r421676438



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))
         {
-            keyspaceTableMap.put(row.getString(""keyspace_name""), row.getString(""table_name""));
+            UntypedResultSet rs = executeInternal(cql);
+            for (UntypedResultSet.Row row : rs)
+                keyspaceTableMap.put(row.getString(""keyspace_name""), row.getString(""table_name""));

Review comment:
       This function doesn't look at estimates but rather finds all table names.  This uses the `SetMultimap` to dedup keyspace and table names, so its fine (and expected) if the two tables have the same string values.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/May/20 17:36;githubbot;600","dcapwell commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r421697121



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       I switched to truncate as this was a more expensive truncate....  That should resolve all comments another than the toString one.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/May/20 18:10;githubbot;600","nastra commented on a change in pull request #575:
URL: https://github.com/apache/cassandra/pull/575#discussion_r422004654



##########
File path: src/java/org/apache/cassandra/db/SystemKeyspace.java
##########
@@ -1344,12 +1344,17 @@ public static void clearEstimates(String keyspace)
     public static synchronized SetMultimap<String, String> getTablesWithSizeEstimates()
     {
         SetMultimap<String, String> keyspaceTableMap = HashMultimap.create();
-        String cql = String.format(""SELECT keyspace_name, table_name FROM %s"", TableEstimates.toString(), TABLE_ESTIMATES_TYPE_PRIMARY);
-        UntypedResultSet rs = executeInternal(cql);
-        for (UntypedResultSet.Row row : rs)
+        // Its possible that size_estimates knows about a different set of keyspace/tables than table_estimates (mostly
+        // caused by external systems modifying the tables, such as dtest) so query both
+        for (String cql : Arrays.asList(
+            ""SELECT keyspace_name, table_name FROM "" + TableEstimates.toString(),
+            ""SELECT keyspace_name, table_name FROM "" + LegacySizeEstimates.toString()))

Review comment:
       > @nastra not sure I agree with the comment that toString is less obvious, is there a reason you say that? In this case we don't care about quoting since it is known, but the `TableMetadata.toString` is a safer way to do this in general, so should be the new norm (in my opinion) rather than the common `format(""%s.%s"", ks_name, name)` (which is unsafe in general).
   
   @dcapwell it's really just a personal preference and I don't have any strong objections around how it's done at the end. That's why I marked it as a nit. Your approach makes sense and is perfectly fine




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/May/20 08:01;githubbot;600","michaelsembwever closed pull request #575:
URL: https://github.com/apache/cassandra/pull/575


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/May/20 07:42;githubbot;600","michaelsembwever commented on pull request #575:
URL: https://github.com/apache/cassandra/pull/575#issuecomment-628453321


   Merged with 01103111ae08b51ccd18bb1c54ac60546546d9df


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/May/20 07:42;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7200,,,0,7200,,,,,,,,,,,,,,CASSANDRA-15784,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/May/20 06:51;mck;CASSANDRA-15776-cassandra-test-report.txt;https://issues.apache.org/jira/secure/attachment/13002890/CASSANDRA-15776-cassandra-test-report.txt",,,,,,,,,,,,,,1.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu May 14 19:35:11 UTC 2020,,,,,,,All,,,,,,"0|z0e860:",9223372036854775807,,,,djoshi,eduard.tudenhoefner,mck,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/01103111ae08b51ccd18bb1c54ac60546546d9df,,,,,,,,,Circle CI,,,,,"29/Apr/20 19:34;dcapwell;[Circle CI BranchI| https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FCASSANDRA-15776]
[Circle CI Workflow|https://app.circleci.com/pipelines/github/dcapwell/cassandra/261/workflows/fb90e467-0703-45b2-abf0-3a4b45208091] - tests passing;;;","05/May/20 14:55;jmckenzie;[~djoshi] / [~dcapwell] - either of you need a hand on this?;;;","05/May/20 16:37;dcapwell;[~jmckenzie] mostly need a review, a hand would help =);;;","05/May/20 17:50;mck;The patch is running through Jenkins [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/111/pipeline].;;;","06/May/20 06:52;eduard.tudenhoefner;changes mostly LGTM. I added a few comments/questions on the PR;;;","06/May/20 08:15;mck;bq.  The patch is running through Jenkins here.

Fixed dtest: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/111/testReport/dtest.nodetool_test/TestNodetool/test_refresh_size_estimates_clears_invalid_entries/

New jvm test: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/111/testReport/org.apache.cassandra.distributed.test/NodeToolSharedSingleNodeTest/;;;","06/May/20 20:15;djoshi;[~dcapwell] I took a look and left a comment. I have a couple concerns that other folks share (two scans vs one). But I think thats unavoidable. The only other concern I have is you might be clobbering values if the same keyspace exists in both tables. We should ideally guard against such situations.;;;","07/May/20 17:38;dcapwell;[~mck] thanks for running through Jenkins!

* [~mck] yes, the cost of the function goes up since its now two queries rather than one; not sure if its avoidable sadly... =(
* [~djoshi] [~eduard.tudenhoefner] replied in GitHub.  The function doesn't get the estimates, it only gets the keyspace/table names, and uses a set to dedup so its fine if they conflict (and expected to 99% of the time).;;;","07/May/20 18:01;dcapwell;Thought about it more, I can just truncate the table....  that avoids the query all together =D;;;","07/May/20 18:06;djoshi;[~dcapwell] Could you please ensure that you add a comment to the effect that the values from {{table_estimates}} are supposed to override {{size_estimates}}?;;;","07/May/20 18:08;dcapwell;Pushed change to truncate, this avoids all the needs to query and makes it so clusters with many tables are not impacted more.  I deleted the functions which are now dead code, so only clear(keyspace, table) exists (needed when we drop a table);;;","07/May/20 18:10;dcapwell;[~djoshi] [~mck] [~eduard.tudenhoefner] can you review again?;;;","07/May/20 21:17;dcapwell;Latest patch is YELLOW, failing test ([see here|https://app.circleci.com/pipelines/github/dcapwell/cassandra/278/workflows/5d568580-5794-4359-a72c-065ead293c83/jobs/1356/tests]) is test_optimized_primary_range_repair - transient_replication_test.TestTransientReplication, which is a known issue.;;;","08/May/20 05:58;mck;New ci-cassandra.apache.org test run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/119/pipeline].;;;","12/May/20 00:42;dcapwell;Thanks mck.  The linked build had a few failures

unit: https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch-test/detail/Cassandra-devbranch-test/90/tests.  org.apache.cassandra.audit.AuditLoggerAuthTest jvm crashed.  I don't see the logs archived so wasn't sure what those logs said
cdc: something killed the ant process it looks like?  is this a timeout?  it then failed reading a file that didn't exist?;;;","12/May/20 06:13;mck;
bq. unit: https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch-test/detail/Cassandra-devbranch-test/90/tests. org.apache.cassandra.audit.AuditLoggerAuthTest jvm crashed. 

This test failed in trunk too.
https://ci-cassandra.apache.org/job/Cassandra-trunk-test/lastCompletedBuild/testReport/org.apache.cassandra.audit/AuditLoggerAuthTest/BeforeFirstTest/

It hasn't been flakey, and despite the recent restart of Jenkins that bombed a few jobs (see #cassandra-builds channel), I can't see that it's related to https://github.com/apache/cassandra/commit/406a8596eb7ad18079df20121521b1c659063ef4

It is safe to say it's not caused by this patch (y);;;","12/May/20 06:20;djoshi;LGTM. +1. ;;;","13/May/20 01:28;dcapwell;[~eduard.tudenhoefner] could I get you to review again?

Thanks!;;;","13/May/20 07:45;eduard.tudenhoefner;sorry, wasn't aware you're waiting for my review because I assumed that 2 reviews would be enough. Changes LGTM;;;","13/May/20 15:26;mck;I have a few small nits/questions on naming, see PR.

New ASF CI run is [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/121/pipeline];;;","13/May/20 18:52;dcapwell;[~mck] fixed all feedback comments; can you review again?;;;","13/May/20 19:05;dcapwell;Here is the latest Circle CI run: https://app.circleci.com/pipelines/github/dcapwell/cassandra/282/workflows/532a7fcf-5d3d-4b9f-bcda-d0bfb73d324e. GREEN;;;","14/May/20 06:51;mck;Looks good: [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/121/testReport/]
Attached [^CASSANDRA-15776-cassandra-test-report.txt];;;","14/May/20 07:38;mck;Committed as 01103111ae08b51ccd18bb1c54ac60546546d9df;;;","14/May/20 19:35;dcapwell;Thanks all!;;;",,,,,,,,,,,,,,,,,,,,,,
stop and restart fail in Debian 10 buster,CASSANDRA-15770,13301757,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,vice,vice,vice,29/Apr/20 10:03,16/Apr/21 13:15,13/Jul/23 08:39,29/Apr/20 17:06,2.2.20,3.0.21,3.11.7,4.0,4.0-beta1,Packaging,,,,0,Debian,easyfix,patch,"Debian 10 ""buster"" has an updated {{start-stop-daemon}} version that causes init script to fail to stop or restart Cassandra daemon. {{stop}} option do not stops first launched instance and depending of previous operations, {{restart}} and {{start}} could launch a second Cassandra daemon instance.

{{start-stop-daemon}} since version 1.19.3 fail to stop matching only a pidfile that can be writen by an unprivileged (non-root) user because it is considered a security risk.

Adding a second matching option (user) solved this.

This fix does not break compatibility with older versions and does not mess with pidfile's mode or permissions.

Related: CASSANDRA-15099

https://github.com/vice/cassandra/tree/debian-buster",,oneiros,vice,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16609,CASSANDRA-15099,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Apr/20 09:55;vice;0001-Fix-init-script-for-debian-Buster.patch;https://issues.apache.org/jira/secure/attachment/13001569/0001-Fix-init-script-for-debian-Buster.patch",,,,,,,,,,,,,,1.0,vice,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Apr 16 13:15:42 UTC 2021,,,,,,,All,,,,,,"0|z0e7ag:",9223372036854775807,,,,brandon.williams,,,,Normal,,2.2.19,,,https://github.com/apache/cassandra/commit/469c6496ae8817975140e5d353ccdebedbea6c06,,,,,,,,,none,,,,,"29/Apr/20 10:28;vice;I could not find the submit patch button. So I attached the patch directly.;;;","29/Apr/20 17:06;brandon.williams;Committed, thanks!;;;","16/Apr/21 11:39;oneiros;This is also a problem in 2.2.19 - please also fix it there.;;;","16/Apr/21 13:15;brandon.williams;Added to 2.2 in 99b6095ecc02de415feaa029afea71ca824344fc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tarball contains duplicate entries,CASSANDRA-15768,13301592,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mpfau,mpfau,mpfau,28/Apr/20 15:31,16/Mar/22 13:28,13/Jul/23 08:39,06/May/20 11:04,2.2.17,3.0.21,3.11.7,4.0,4.0-beta1,Build,Packaging,,,0,,,,"The tarball contains a lot of duplicate entries. One example is cassandra-stress.bat:
{code:sh}
tar -tvf /home/map/Downloads/apache-cassandra-3.11.6-bin.tar.gz |grep ""cassandra-stress.bat""
-rw-r--r-- 0/0            1097 2020-02-10 23:57 apache-cassandra-3.11.6/tools/bin/cassandra-stress.bat
-rwxr-xr-x 0/0            1097 2020-02-10 23:57 apache-cassandra-3.11.6/tools/bin/cassandra-stress.bat
{code}",,colinkuo,dcapwell,eduard.tudenhoefner,mck,mpfau,,,,,,,"mpfau opened a new pull request #571:
URL: https://github.com/apache/cassandra/pull/571


   see https://issues.apache.org/jira/browse/CASSANDRA-15768


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Apr/20 15:59;githubbot;600","nastra commented on pull request #571:
URL: https://github.com/apache/cassandra/pull/571#issuecomment-624489843


   changes LGTM


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/May/20 07:34;githubbot;600","smiklosovic closed pull request #571:
URL: https://github.com/apache/cassandra/pull/571


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:28;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mpfau,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed May 06 11:04:30 UTC 2020,,,,,,,All,,,,,,"0|z0e6a0:",9223372036854775807,,,,eduard.tudenhoefner,,,,Low,,2.1 beta1,,,https://github.com/apache/cassandra/commit/c6a9f5513ef19188498f78aeb91260e62a7165e3,,,,,,,,,see description,,,,,"28/Apr/20 16:00;mpfau;PR available at [https://github.com/apache/cassandra/pull/571];;;","28/Apr/20 16:04;dcapwell;confirmed this impacts 3.11.6
confirmed this impacts 4.0-alpha4 as well;;;","28/Apr/20 16:07;dcapwell;marked for RC mostly to decrease the size of the tarball;;;","06/May/20 07:35;eduard.tudenhoefner;changes LGTM;;;","06/May/20 11:03;mck;tested manually. LGTM. Needs to be applied from 2.2 onwards.;;;","06/May/20 11:04;mck;Committed as c6a9f5513ef19188498f78aeb91260e62a7165e3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
/usr/bin/cassandra looking for wrong libjemalloc.so file,CASSANDRA-15767,13301584,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,bbellrose,bbellrose,28/Apr/20 14:31,05/Oct/22 22:22,13/Jul/23 08:39,15/Aug/22 08:19,3.0.28,3.11.14,4.0.6,4.1-beta1,5.0,Local/Scripts,,,,0,centos8,debian,jemalloc,"In /usr/sbin/cassandra

Linux)
 if [ -z $CASSANDRA_LIBJEMALLOC ] ; then
 which ldconfig > /dev/null 2>&1
 if [ $? = 0 ] ; then
 # e.g. for CentOS
 dirs=""/lib64 /lib /usr/lib64 /usr/lib `ldconfig -v 2>/dev/null | grep -v '^\s' | sed 's/^\([^:]*\):.*$/\1/'`""
 else
 # e.g. for Debian, OpenSUSE
 dirs=""/lib64 /lib /usr/lib64 /usr/lib `cat /etc/ld.so.conf /etc/ld.so.conf.d/*.conf | grep '^/'`""
 fi
 dirs=`echo $dirs | tr "" "" "":""`
 CASSANDRA_LIBJEMALLOC=$(find_library '.*/libjemalloc\.so\(\.1\)*' $dirs)

 

However...

# find /usr/lib64 -name ""*jemalloc*""
/usr/lib64/libjemalloc.so.2

 

 ",,bbellrose,dcapwell,smiklosovic,,,,,,,,,"smiklosovic closed pull request #1780: CASSANDRA-15767 trunk
URL: https://github.com/apache/cassandra/pull/1780


;24/Aug/22 07:22;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,CASSANDRA-17780,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Aug 13 16:29:35 UTC 2022,,,,,,,Linux,,,,,,"0|z0e688:",9223372036854775807,,,,brandon.williams,smiklosovic,,,Normal,,3.0.27,,,https://github.com/apache/cassandra/commit/ebddf7792411d1fdd62666e99cb89174ccaf630c,,,,,,,,,package installation on a distribution where libmalloc2 is present instead of libmalloc1. libmalloc1 distros should still work the same.,,,,,"28/Apr/20 15:57;dcapwell;Based off your comment it looks like the libjemalloc version is different than what we expect.  What is the version installed on the host?;;;","28/Apr/20 16:02;bbellrose;NAME=""CentOS Linux""
VERSION=""8 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""8""
PLATFORM_ID=""platform:el8""
PRETTY_NAME=""CentOS Linux 8 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:8""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-8""
CENTOS_MANTISBT_PROJECT_VERSION=""8""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""8""

CentOS Linux release 8.1.1911 (Core)
CentOS Linux release 8.1.1911 (Core);;;","28/Apr/20 16:13;dcapwell;Replicated in Docker using the CentOS 8 image

{code}
[root@b2cb6d0e780b /]# find . -name '*jemalloc*.so*'
./usr/lib64/libjemalloc.so.2
[root@b2cb6d0e780b /]# rpm -q jemalloc
jemalloc-5.2.1-2.el8.x86_64
{code}

Here is the results in CentOS 7

{code}
[root@14861a12a8e4 /]# find . -name '*jemalloc*.so*'
./usr/lib64/libjemalloc.so.1
[root@14861a12a8e4 /]# rpm -q jemalloc
jemalloc-3.6.0-1.el7.x86_64
{code};;;","28/Apr/20 16:16;bbellrose;Should I manually edit the /usr/sbin/cassandra? I am hesitant to do so, but I do get warnings when starting cassandra:

 

WARN [main] 2020-04-27 14:54:34,112 NativeLibrary.java:189 - Unable to lock JVM memory (ENOMEM). This can result in part of the JVM being swapped out, especially with mmapped I/O enabled. Increase RLIMIT_MEMLOCK or run Cassandra as root.
WARN [main] 2020-04-27 14:54:34,113 StartupChecks.java:136 - jemalloc shared library could not be preloaded to speed up memory allocations
INFO [main] 2020-04-27 14:54:34,113 StartupChecks.java:176 - JMX is enabled to receive remote connections on port: 7199
INFO [main] 2020-04-27 14:54:34,114 SigarLibrary.java:44 - Initializing SIGAR library
WARN [main] 2020-04-27 14:54:34,131 SigarLibrary.java:174 - Cassandra server running in degraded mode. Is swap disabled? : true, Address space adequate? : true, nofile limit adequate? : false, nproc limit adequate? : true;;;","28/Apr/20 17:30;dcapwell;I reviewed the usage and I believe its ok to switch the .1 search to .2.  We only use it for LD_PRELOAD which lets us swap malloc for jemalloc, we don't appear to use any of the binary interface so shouldn't be impacted by API changes there.  Doing this would only resolve ""WARN [main] 2020-04-27 14:54:34,113 StartupChecks.java:136 - jemalloc shared library could not be preloaded to speed up memory allocations"".

jemalloc is used for our native memory allocations as it makes sure we use less memory than normal malloc.  Allocations are also expected to be faster with it.  You can run Apache Cassandra without it but its always better to use jemalloc than not.;;;","28/Apr/20 17:51;bbellrose;Ok, thanks. Would this explain the other warnings as well? We get the Unable to lock JVM memory (ENOMEM). warning as well even though those parameters have been changed:

 

From my /etc/security/limits.conf

# settings for cassandra memlock issues
cassandra - memlock unlimited
cassandra - nofile 100000
cassandra - nproc 32768
cassandra - as unlimited;;;","28/Apr/20 18:42;dcapwell;When cassandra starts up it runs a set of checks to see how the environment is. Some checks will cause cassandra to fail starting up, others will log warnings saying cassandra may be impacted; the main checks can be found [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/service/StartupChecks.java#L85].

If you change jemalloc to allow .2 then the jemalloc check won't log the warning, but the other ones still will since they are independent checks.

For the ENOMEM issue, I don't think we document this well (though glad to accept improvements on this!), same for ""nofile limit adequate? "".
;;;","28/Apr/20 18:55;bbellrose;Ok, so separate issue. I should log something else? and close this as having a workaround? Sorry new to this format.

 

Brian;;;","28/Apr/20 19:14;dcapwell;User email or slack would be a better place for this, can find the details at https://cassandra.apache.org/community/. ;;;","28/Apr/20 19:15;dcapwell;we should leave this open as it hits a real issue with CentOS 8 and jemalloc lookup.  For the other issues, the mailing list or slack would be better;;;","27/Jul/22 11:47;smiklosovic;I hit the same issue here https://issues.apache.org/jira/browse/CASSANDRA-17780

I provided a solution so we load always the most recent version of that library, irrelevant to what version is installed. Not sure if the version of the library is specifically related to Cassandra version or it is basically a drop-in replacement though. We could continue on either ticket, not sure what you prefer.

BTW I hit the same issue on Debian and Ubuntu, not CentOS.;;;","09/Aug/22 12:30;smiklosovic;I was debugging this jemalloc loading little bit more and there is also an issue with directory parsing where to look for that library. I updated my branch to reflect that.

Directories to load that library from is base on this (1). That seems to be wrong on the first sight as ldconfig is present in Ubuntu, for example as well. I do not think we should decide what operating system (or its fork) we are on based on whether there is ldconfig command present as it is (or it might be) basically everywhere.

Hence, even I am on Ubuntu, because I have ldconfig present, it will act as if I am on ""Centos"" and it will not include some paths. For example, if it was detected correctly, it would add these paths to search in (this is from Ubuntu Jelly).
{code:java}
$ cat /etc/ld.so.conf /etc/ld.so.conf.d/*.conf | grep '^/'
/usr/local/lib
/usr/local/lib/x86_64-linux-gnu
/lib/x86_64-linux-gnu
/usr/lib/x86_64-linux-gnu <------ my libjemalloc is here
{code}
So, it will not add the directory my lib is in so it will not find it.

I derived Debian-based distribution from the fact if there is / is not /etc/lsb-release file.

Then there is a different problem with symlinks. Some distributions will create a symlink from libjemalloc.so to a library file, like, libjemalloc.so.1 (or .2). However, not all distributions have symlinks. For example Ubuntu Jelly has just a proper file (libjemalloc.so.2) however Mint distribution has a symlink to these files.

For that reason I changed the regexp to
{noformat}
.*/libjemalloc\.so.*
{noformat}
which will take into account symlinks as well as all other files. Then I sort them in reverse order if there are two libs of different number but there is no symlink, I filter duplicates via uniq and I take the first entry via head.

(1) [https://github.com/apache/cassandra/blob/trunk/bin/cassandra#L140-L147]

 

EDIT: we should make distribution parsing more robust, it seems to me that /etc/lsb-release is not enough as it can be present on rpm-based distro too.

https://stackoverflow.com/questions/47838800/etc-lsb-release-vs-etc-os-release

 ;;;","11/Aug/22 11:36;smiklosovic;I am ultimately proposing this as the solution: [https://github.com/apache/cassandra/pull/1780]

As described above, it is not a good idea to make a distinction between various families of distributions based on the existence of ldconfig in the system. In my case, for Ubuntu, that system has binary ldconfig present but the current script would evaluate it as if I am running on ""Centos"" which is not true. The result of that is that the parsed directories do not contain the directory my libjemalloc library is located in.

Instead of the current approach, I am combining both results from ldconfig (if such command exists) and from cat-ing the configuration files found in the system, if they exist. Then I sort the result, filtering out all duplicities and heading the first line only.

I have also changed the regexp for libjemalloc because that file might be a symbolic link on some systems but not a link on the others. The proposed regexp would match ""libjemalloc.so"" which tends to be a link as well as ""libjemalloc.so.1"" and ""libjemalloc.so.2"" and so on, covering all cases.

I have tested this manually on:

Debian 10 Buster

CentOS 7

Ubuntu 22.04 TLS (Jellyfish)

Linux Mint 20.3

 

pinging you guys based on the thread we had on Slack. I agreed on most of the details with David privately, would be nice to have more eyes on this as it is part of the core startup script.

[~dcapwell]  [~brandon.williams] [~jjirsa] 

Build for trunk: [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1861/]

I would like to merge this from 3.0 upwards to trunk.;;;","11/Aug/22 14:42;brandon.williams;This looks good to me.  If we're going to commit to multiple branches lets be thorough and run CI on them all too.;;;","13/Aug/22 15:18;smiklosovic;3.0 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1865/
3.11 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1866/
4.0 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1867/
4.1 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1869/;;;","13/Aug/22 16:29;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NoSpamLogger arguments building objects on hot paths,CASSANDRA-15766,13301578,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,jmeredithco,jmeredithco,28/Apr/20 13:54,16/Mar/22 14:01,13/Jul/23 08:39,22/Jul/20 12:52,4.0,4.0-beta2,,,,Observability/Logging,,,,0,,,,"NoSpamLogger is used in hot logging paths to prevent logs being overrun.  For that to be most effective the arguments to the logger need to be cheap to construct.  During the internode messaging refactor CASSANDRA-15066, performance changes to BufferPool for CASSANDRA-14416
were accidentally reverted in the merge up from 3.11.

Reviewing other uses since, it looks like there are a few places where the arguments require some form of String building.

org.apache.cassandra.net.InboundSink#accept
org.apache.cassandra.net.InboundMessageHandler#processCorruptFrame
org.apache.cassandra.net.InboundMessageHandler.LargeMessage#deserialize
org.apache.cassandra.net.OutboundConnection#onOverloaded
org.apache.cassandra.utils.memory.BufferPool.GlobalPool#allocateMoreChunks

Formatting arguments should either be precomputed, or if expensive they should be computed after the decision on whether to noSpamLog has been made.",,aleksey,benedict,bereng,dcapwell,jasonstack,jmckenzie,jmeredithco,maedhroz,yifanc,,,"maedhroz opened a new pull request #685:
URL: https://github.com/apache/cassandra/pull/685


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:38;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456753504



##########
File path: src/java/org/apache/cassandra/net/InboundMessageHandler.java
##########
@@ -692,6 +692,12 @@ String id()
         return SocketFactory.channelId(peer, self, type, channel.id().asShortText());
     }
 
+    @Override
+    public String toString()
+    {
+        return id();
+    }

Review comment:
       Assuming there isn't something that actually relied on the default `Object#toString()`, this seemed like a reasonable way to solve the construction problem here. We get the laziness we want, and we get it from `this`, the already created enclosing instance.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:47;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456753597



##########
File path: src/java/org/apache/cassandra/net/InboundMessageHandler.java
##########
@@ -822,7 +828,7 @@ private Message deserialize()
             catch (IncompatibleSchemaException e)
             {
                 callbacks.onFailedDeserialize(size, header, e);
-                noSpamLogger.info(""{} incompatible schema encountered while deserializing a message"", id(), e);
+                noSpamLogger.info(""{} incompatible schema encountered while deserializing a message"", InboundMessageHandler.this, e);

Review comment:
       self-nit: I thought it might be nice for readability (and future-proofing?) to use `InboundMessageHandler.this` even in the other cases where it's no necessary. Thoughts?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:48;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456753673



##########
File path: src/java/org/apache/cassandra/net/OutboundConnection.java
##########
@@ -120,6 +121,18 @@
      *  we allocate from here whenever queueSize > queueCapacity */
     private final EndpointAndGlobal reserveCapacityInBytes;
 
+    /** Used in logging statements to lazily build a human-readable number of pending bytes. */
+    private final Object readablePendingBytes =
+        new Object() { @Override public String toString() { return prettyPrintMemory(pendingBytes()); } };
+
+    /** Used in logging statements to lazily build a human-readable number of reserve endpoint bytes in use. */
+    private final Object readableReserveEndpointUsing =
+        new Object() { @Override public String toString() { return prettyPrintMemory(reserveCapacityInBytes.endpoint.using()); } };
+
+    /** Used in logging statements to lazily build a human-readable number of reserve global bytes in use. */
+    private final Object readableReserveGlobalUsing =
+        new Object() { @Override public String toString() { return prettyPrintMemory(reserveCapacityInBytes.global.using()); } };

Review comment:
       The comments hopefully explain well enough what these do. My assumption is that we won't actually be creating enough `OutboundConnection` instances to make the overhead of creating these three objects matter.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:49;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456753781



##########
File path: src/java/org/apache/cassandra/net/OutboundConnection.java
##########
@@ -439,13 +452,14 @@ private void releaseCapacity(long count, long bytes)
     private void onOverloaded(Message<?> message)
     {
         overloadedCountUpdater.incrementAndGet(this);
-        overloadedBytesUpdater.addAndGet(this, canonicalSize(message));
+        
+        int canonicalSize = canonicalSize(message);

Review comment:
       We were calculating the canonical size twice...so fixed that while I was here.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:50;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456753975



##########
File path: src/java/org/apache/cassandra/utils/memory/BufferPool.java
##########
@@ -187,22 +200,26 @@ public static void debug(Debug setDebug)
     {
         /** The size of a bigger chunk, 1 MiB, must be a multiple of NORMAL_CHUNK_SIZE */
         static final int MACRO_CHUNK_SIZE = 64 * NORMAL_CHUNK_SIZE;
+        private static final String READABLE_MACRO_CHUNK_SIZE = prettyPrintMemory(MACRO_CHUNK_SIZE);
 
         static
         {
             assert Integer.bitCount(NORMAL_CHUNK_SIZE) == 1; // must be a power of 2
             assert Integer.bitCount(MACRO_CHUNK_SIZE) == 1; // must be a power of 2
             assert MACRO_CHUNK_SIZE % NORMAL_CHUNK_SIZE == 0; // must be a multiple
 
-            logger.info(""Global buffer pool limit is {}"",
-                            prettyPrintMemory(MEMORY_USAGE_THRESHOLD));
+            logger.info(""Global buffer pool limit is {}"", prettyPrintMemory(MEMORY_USAGE_THRESHOLD));
         }
 
         private final Queue<Chunk> macroChunks = new ConcurrentLinkedQueue<>();
         // TODO (future): it would be preferable to use a CLStack to improve cache occupancy; it would also be preferable to use ""CoreLocal"" storage
         private final Queue<Chunk> chunks = new ConcurrentLinkedQueue<>();
         private final AtomicLong memoryUsage = new AtomicLong();
 
+        /** Used in logging statements to lazily build a human-readable current memory usage. */
+        private final Object readableSizeInBytes = 
+            new Object() { @Override public String toString() { return prettyPrintMemory(sizeInBytes()); } };

Review comment:
       The assumption here is that the pool instance will be long-lived and so the overhead of creating this `Object` will be negligible.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:53;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456754358



##########
File path: src/java/org/apache/cassandra/utils/memory/BufferPool.java
##########
@@ -252,9 +268,7 @@ private Chunk allocateMoreChunks()
                 noSpamLogger.error(""Buffer pool failed to allocate chunk of {}, current size {} ({}). "" +
                                    ""Attempting to continue; buffers will be allocated in on-heap memory which can degrade performance. "" +
                                    ""Make sure direct memory size (-XX:MaxDirectMemorySize) is large enough to accommodate off-heap memtables and caches."",
-                                   prettyPrintMemory(MACRO_CHUNK_SIZE),
-                                   prettyPrintMemory(sizeInBytes()),
-                                   oom.toString());
+                                   READABLE_MACRO_CHUNK_SIZE, readableMemoryUsage, oom.getClass().getName());

Review comment:
       It didn't look like the `OutOfMemoryError` had much of a message accompanying it...really ever. If it did, it basically looked like the one already explicitly logged above. Without a message the class name is all we got before, so now we're just doing it cheaply.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Jul/20 05:58;githubbot;600","jasonstack commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456938356



##########
File path: src/java/org/apache/cassandra/net/InboundMessageHandler.java
##########
@@ -692,6 +692,12 @@ String id()
         return SocketFactory.channelId(peer, self, type, channel.id().asShortText());
     }
 
+    @Override
+    public String toString()
+    {
+        return id();
+    }

Review comment:
       smart idea

##########
File path: src/java/org/apache/cassandra/net/OutboundConnection.java
##########
@@ -439,13 +452,14 @@ private void releaseCapacity(long count, long bytes)
     private void onOverloaded(Message<?> message)
     {
         overloadedCountUpdater.incrementAndGet(this);
-        overloadedBytesUpdater.addAndGet(this, canonicalSize(message));
+        
+        int canonicalSize = canonicalSize(message);

Review comment:
       `message` caches its `canonicalSize`..




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Jul/20 18:14;githubbot;600","jasonstack commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r456938566



##########
File path: src/java/org/apache/cassandra/net/OutboundConnection.java
##########
@@ -439,13 +452,14 @@ private void releaseCapacity(long count, long bytes)
     private void onOverloaded(Message<?> message)
     {
         overloadedCountUpdater.incrementAndGet(this);
-        overloadedBytesUpdater.addAndGet(this, canonicalSize(message));
+        
+        int canonicalSize = canonicalSize(message);
+        overloadedBytesUpdater.addAndGet(this, canonicalSize);
+        
         noSpamLogger.warn(""{} overloaded; dropping {} message (queue: {} local, {} endpoint, {} global)"",
-                          id(),
-                          FBUtilities.prettyPrintMemory(canonicalSize(message)),
-                          FBUtilities.prettyPrintMemory(pendingBytes()),
-                          FBUtilities.prettyPrintMemory(reserveCapacityInBytes.endpoint.using()),
-                          FBUtilities.prettyPrintMemory(reserveCapacityInBytes.global.using()));
+                          this, FBUtilities.prettyPrintMemory(canonicalSize),

Review comment:
       I suppose the remaining one won't cause any issue.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Jul/20 18:16;githubbot;600","maedhroz commented on a change in pull request #685:
URL: https://github.com/apache/cassandra/pull/685#discussion_r457052017



##########
File path: src/java/org/apache/cassandra/net/OutboundConnection.java
##########
@@ -439,13 +452,14 @@ private void releaseCapacity(long count, long bytes)
     private void onOverloaded(Message<?> message)
     {
         overloadedCountUpdater.incrementAndGet(this);
-        overloadedBytesUpdater.addAndGet(this, canonicalSize(message));
+        
+        int canonicalSize = canonicalSize(message);
+        overloadedBytesUpdater.addAndGet(this, canonicalSize);
+        
         noSpamLogger.warn(""{} overloaded; dropping {} message (queue: {} local, {} endpoint, {} global)"",
-                          id(),
-                          FBUtilities.prettyPrintMemory(canonicalSize(message)),
-                          FBUtilities.prettyPrintMemory(pendingBytes()),
-                          FBUtilities.prettyPrintMemory(reserveCapacityInBytes.endpoint.using()),
-                          FBUtilities.prettyPrintMemory(reserveCapacityInBytes.global.using()));
+                          this, FBUtilities.prettyPrintMemory(canonicalSize),

Review comment:
       It didn't seem worth creating a more complex mechanism to lazily materialize the whole group of binding values.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jul/20 05:00;githubbot;600","smiklosovic closed pull request #685:
URL: https://github.com/apache/cassandra/pull/685


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 14:01;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6600,,,0,6600,,,,,,,,,,,,,,CASSANDRA-15764,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14416,CASSANDRA-15700,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jul 22 15:23:19 UTC 2020,,,,,,,All,,,,,,"0|z0e66w:",9223372036854775807,,,,aleksey,jasonstack,,,Normal,,4.0-alpha1,,,"[1266fec349e76b964b522d11460f1df4adadcb48|https://github.com/apache/cassandra/commit/1266fec349e76b964b522d11460f1df4adadcb48]",,,,,,,,,"Just passing utests and dtests, assuming reviewed performance improvements are non-controversial. Shouldn't be any impact on documentation.",,,,,"04/May/20 09:53;bereng;Hi [~jmeredithco] I fancy taking this one. Is that ok?;;;","04/May/20 13:36;jmeredithco;I have a small prototype I was working on when I reported the issue that I should clean up.  I wanted to get some feedback on it before posting the patch, but it probably doesn't need to wait.  I'll try and push it up this morning.

The idea was too check the list of objects passed as arguments to check if they were {{Supplier}} s and automatically call get on them if they were.  The downside would be anything that was already a supplier might need to be double-wrapped, but I think that's worth it. I also wanted to work out what the cost of wrapping things like {{org.apache.cassandra.net.InboundMessageHandler#id()}} in a {{Supplier}} versus just the call.;;;","04/May/20 14:06;bereng;+1. Either a supplier approach or a 'shouldLog()' check after getting a {{NoSpamLogStatement}} where the 2 options I was playing with. I'll be happy to help with the review. No hurries.;;;","05/May/20 00:01;jmeredithco;I've pushed up my WIP, [branch|https://github.com/jonmeredith/cassandra/tree/15766] [and PR|https://github.com/apache/cassandra/pull/582]

Disassembling generated code, it looks like we trade eagerly constructing a new object array for an invoke dynamic call. I haven't had a chance to dig any more to compare the costs. I'm interested what you think.
{code:java}
  public void simpleLog();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mock:Lorg/slf4j/Logger;
       4: getstatic     #11                 // Field org/apache/cassandra/utils/NoSpamLogger$Level.INFO:Lorg/apache/cassandra/utils/NoSpamLogger$Level;
       7: lconst_1
       8: getstatic     #23                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      11: ldc           #90                 // String {}
      13: iconst_1
      14: anewarray     #26                 // class java/lang/Object
      17: dup
      18: iconst_0
      19: ldc           #91                 // String param
      21: aastore
      22: invokestatic  #28                 // Method org/apache/cassandra/utils/NoSpamLogger.log:(Lorg/slf4j/Logger;Lorg/apache/cassandra/utils/NoSpamLogger$Level;JLjava/util/concurrent/TimeUnit;Ljava/lang/String;[Ljava/lang/Object;)Z
      25: pop
      26: return

  public void paramLog();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mock:Lorg/slf4j/Logger;
       4: getstatic     #11                 // Field org/apache/cassandra/utils/NoSpamLogger$Level.INFO:Lorg/apache/cassandra/utils/NoSpamLogger$Level;
       7: lconst_1
       8: getstatic     #23                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      11: ldc           #90                 // String {}
      13: invokedynamic #92,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
      18: invokestatic  #82                 // Method org/apache/cassandra/utils/NoSpamLogger.log:(Lorg/slf4j/Logger;Lorg/apache/cassandra/utils/NoSpamLogger$Level;JLjava/util/concurrent/TimeUnit;Ljava/lang/String;Ljava/util/function/Supplier;)Z
      21: pop
      22: return
{code};;;","05/May/20 07:34;yifanc;I have only done a quick glance at the patch.

Essentially, it wraps any expensive computation within the lambda, so in the case of the log level not permits, no CPU cycles are wasted on computing the log arguments that are not going to be used. The trade-off is the wrapper, {{Supplier}}.

Whether it is worthy or not. It depends on how expensive the unnecessary argument computation is. The computation itself may produce multiple intermediate objects. 

It would be great to have a benchmark to determine the how the lazy logging helps in the scenarios of 1) no computation, 2) light computation, 3) moderate computation and 4) heavy computation. So it serves the purpose of guidance on when to invoke the lazy logging and when to not. 

This patch only applies to the {{NoSpamLogger}}. There are other logging statements that use normal logger in the code base that may have expensive argument computation. If the lazy impl is proven to have performance benefits, how about applying to those if any? 

The patch does what is wanted in CASSANDRA-15764. I will mark CASSANDRA-15764 as a dup and close once this one is completed. ;;;","05/May/20 09:06;bereng;Great, Jira lost my comment. Here we go again...

I am a newbie here, so feel free to ignore me:
* I wonder why we don't defend with a {{wrapped.isLevelEnabled()}} at {{NoSpamLogger}} top methods. It might pay off given we'd spare the many nested method calls, the {{getStatement()}}, {{nanoTime()}}, {{shouldLog()}},... calls
* The {{Supplier}} approach is very nice, I like it a lot.
** If the overhead is negligible I would make that the only option. But given my, maybe outdated, experiences with streams, lambdas, etc I am going to bet it will be not :shrug:
** If it were not I'd rename top level methods as {{warnWithLazyParams()}} and {{warnWithoutLazyParams()}}. If the dev is educated enough to have opted for {{NoSpamLogger}} sure he will make the right choice here. I don't think we can infer at call time which option is best, only the dev can.

+1 to a general 'other logs audit'. I would do it in another ticket as they won't be in the hot path, they should be {{NoSpamLogger}} if they were, so that is not as 'urgent' as this one imo.

Hope it makes sense. My 2cts;;;","05/May/20 09:43;benedict;Couldn't this be kept a bit more idiomatic with the provision of an object with a {{toString()}} method that invokes {{id()}} ? We could even have such an object instantiated once per {{InboundMessageHandler}} and once per {{BufferPool}} so that this is garbage-free for most cases, and continues to read like a normal logging call?

I've in the past considered introducing a special interface declaring only {{toString()}} for declaring these via lambdas for each parameter, which might be a nice way to do this for {{InboundSink}}.

A secondary API might be to provide method parameter options that accept pairs of (param, function) so that e.g. {{InboundSink}} can provide (t, {{Throwable::getMessage)}}, and if we wanted {{InboundMessageHandler}} could provide {{(this, InboundMessageHandler::id)}};;;","05/May/20 17:57;jmeredithco;Thanks for the feedback. I was concerned it wasn't particularly idiomatic. 

My original design was to modify the actual log call to check if the statement should be logged, then checked if any of the format parameters were instances of {{Supplier<Object> and if so rebuild the parameter objects array calling }}{{get()}} where needed to retrieve the actual object before printing.

I backed off from that as I thought that would be multiple invocations of lambdas rather than a single invocation for all arguments as well as copying/updating the objects array (although I suppose it would be safe to update in place assuming it was always called as a varargs). If you're going to pay the cost of the lambda, maybe only worth it once. I need to play with JMH to understand costs better.

I'll have a go at something more idiomatic, but for cases like this it seems like a single lambda supplying all of the parameters would be more efficient.
{code:java}
private void onOverloaded(Message<?> message)
{
    overloadedCountUpdater.incrementAndGet(this);
    int serializedSize = canonicalSize(message);
    overloadedBytesUpdater.addAndGet(this, serializedSize);
    noSpamLogger.warn(""{} overloaded; dropping {} message (queue: {} local, {} endpoint, {} global)"",
                      lazyId,
                      FBUtilities.prettyPrintMemory(serializedSize),
                      FBUtilities.prettyPrintMemory(pendingBytes()),
                      FBUtilities.prettyPrintMemory(reserveCapacityInBytes.endpoint.using()),
                      FBUtilities.prettyPrintMemory(reserveCapacityInBytes.global.using()));
    callbacks.onOverloaded(message, template.to);
} {code}
;;;","05/May/20 18:14;yifanc;There might not be a big difference between multiple and single lambda. The lambda is compiled into a static method in the bytecode view. If in the hot path and JIT kicked in, the static method could be even inlined. 

Consider the following code
 
{code:java}
import java.util.function.Supplier;

class Foo {
  public void foo() {
    comsume(() -> ""foo"");
  }  
  public void comsume(Supplier<String> supp) {
    supp.get();
  }
}
{code}
Running {{javap -v -p Foo.class}} reveals the below.
{code:java}
  private static java.lang.String lambda$foo$0();
    descriptor: ()Ljava/lang/String;
    flags: ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=0, args_size=0
         0: ldc           #5                  // String foo
         2: areturn
      LineNumberTable:
        line 5: 0{code};;;","05/May/20 19:28;benedict;{quote}The lambda is compiled into a static method in the byte code
{quote}
This is only true of non-capturing lambdas

edit: actually, I'm not sure what you mean here - the method _body_ will be compiled to a static method, but the lambda will also behave like a static _property_ if it captures no variables.

In many cases, though, even a lambda that must be allocated may be elided entirely if the method you pass it to is inlined, and escape analysis can do its magic - but there are a lot of 'ifs' there.;;;","05/May/20 19:47;yifanc;Agree that there are many 'if's. 

What a lambda is compiled into depends on the java compiler. For a capturing lambda, it can still be a static method with the expanded param list. (off topic)

At the end, we need to run benchmark to quantitively measure the difference.;;;","18/Jun/20 18:30;jmckenzie;Do we know how heavy / prevalent these calls are on a flame graph?;;;","18/Jun/20 21:50;jmeredithco;We don't currently. The original regression was spotted by code inspection rather than profiling, as were the other candidates mentioned in the original description. I think it's a fair observation that we should have a quantitive measure of the improvement.

I've also noticed this was tagged as 4.0-rc and moved this back to the 4.0-beta milestone for now. It may be possible to slip this, though the original changes were made due to operational issues that made the change important.

 

 ;;;","18/Jun/20 22:23;dcapwell;[~jmeredithco], [~jmckenzie], [~djoshi] found a regression in networking that was fixed by Jeff in 3.x; checking latest trunk I don't see it fixed... [~djoshi] did you file? prettyPrintMemory gets called in the hot path;;;","18/Jun/20 22:42;jmeredithco;Oh yeah, forgot that's how it went down - thanks for the reminder [~dcapwell].  This was the Jira I filed after it was found.;;;","14/Jul/20 05:04;maedhroz;[~jmeredithco] I'm considering taking this over after taking a quick look at the WIP and history behind the ticket (and dropping a [quick question|https://github.com/apache/cassandra/pull/582/files#r454099460] in the PR). For what it's worth, I probably wouldn't expand the scope beyond what's already been touched...to the extent I might unmark CASSANDRA-15764 as a duplicate.

Any objections?;;;","14/Jul/20 15:25;jmeredithco;It's fairly buried in my task list so if you're able to take it that would be great – I should have just let [~Bereng] take it - apologies.;;;","14/Jul/20 15:32;bereng;Yeah that one was on my list, no worries. I'll be busy a while on a 4.0 quality ticket. [~maedhroz] feel free otherwise I'll steal it back from you when I finish lol;;;","18/Jul/20 05:47;maedhroz;Finished a first draft that stays pretty close to the original scope/description. I've left inline comments in the PR to clarify the reasoning behind some decisions.

[patch|https://github.com/apache/cassandra/pull/685], [Java 8 CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra/63/workflows/aea6888d-a6fd-42d0-9efe-81b15420d96a], [Java 11 CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra/63/workflows/c820bade-6073-4f36-b2fb-6abac7dd2532];;;","19/Jul/20 18:19;jasonstack;LGTM;;;","19/Jul/20 19:45;maedhroz;The issue w/ {{id()}} being called for no reason in {{OutboundConnection}} was also identified in CASSANDRA-15700, apparently.;;;","20/Jul/20 05:15;maedhroz;Just a quick summary of where we are with the tests...

In the Java 11 tests, it looks like we've hit CASSANDRA-15861 ({{TestRepair:: test_dead_sync_initiator}}). The other 2 failures look like timeouts, something we could resolve with [a quick rerun|https://app.circleci.com/pipelines/github/maedhroz/cassandra/63/workflows/69be5c1b-f43e-4632-a146-29d546ab659d].

In the Java 8 tests, the failure in {{TestBootstrap}} has been [seen elsewhere|https://issues.apache.org/jira/browse/CASSANDRA-15854?focusedCommentId=17142442&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17142442], so is almost certainly unrelated. CASSANDRA-15861 is showing up as well. The interesting failure is {{TestDiskBalance::test_disk_balance_after_boundary_change_stcs}}, although I haven't been able to reproduce a failure locally. Let's see what [a rerun|https://app.circleci.com/pipelines/github/maedhroz/cassandra/63/workflows/99e45f4b-c7ae-4a46-8fc3-2e2466f833ed] looks like...;;;","20/Jul/20 20:53;maedhroz;The J11 rerun is hitting CASSANDRA-15892 ({{test_resumable_rebuild}}), CASSANDRA-13805 ({{test_simple_parallel_repair}}), and maybe even CASSANDRA-15299. It's unlikely any of these is being caused by the patch. (The issue w/ {{SimpleReadWriteTest}} looks JVM related.)

The J8 rerun looks clean, modulo the known issues already mentioned above.;;;","22/Jul/20 12:47;aleksey;LGTM as well, will commit shortly.;;;","22/Jul/20 12:52;aleksey;Committed to trunk as [1266fec349e76b964b522d11460f1df4adadcb48|https://github.com/apache/cassandra/commit/1266fec349e76b964b522d11460f1df4adadcb48].;;;","22/Jul/20 15:05;maedhroz;Thanks, [~aleksey] ;);;;","22/Jul/20 15:23;jmeredithco;Thanks for the quick pragmatic solution.;;;",,,,,,,,,,,,,,,,,,,,
CustomIndexTest.indexBuildingPagesLargePartitions is flaky,CASSANDRA-15757,13300902,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,jmeredithco,jmeredithco,24/Apr/20 22:45,15/May/20 08:53,13/Jul/23 08:39,07/May/20 16:26,3.0.21,3.11.7,4.0,4.0-beta1,,Test/unit,,,,0,,,,"CustomIndexTest.indexBuildingPagesLargePartitions is flaky. Failed in CI and was able to reproduce failure inside IntelliJ by setting test Repeat to ‘Run Until Failure’. Failed after 459 iterations.

{code}
java.lang.AssertionError
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at org.apache.cassandra.index.CustomIndexTest.lambda$indexBuildingPagesLargePartitions$1(CustomIndexTest.java:687)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
	at org.apache.cassandra.index.CustomIndexTest.indexBuildingPagesLargePartitions(CustomIndexTest.java:687)
	at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:53)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
{code}",,adelapena,bereng,jasonstack,jmeredithco,,,,,,,,"adelapena opened a new pull request #576:
URL: https://github.com/apache/cassandra/pull/576


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/May/20 14:45;githubbot;600","adelapena opened a new pull request #577:
URL: https://github.com/apache/cassandra/pull/577


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/May/20 14:45;githubbot;600","adelapena opened a new pull request #578:
URL: https://github.com/apache/cassandra/pull/578


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/May/20 14:45;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu May 07 16:21:50 UTC 2020,,,,,,,All,,,,,,"0|z0e20o:",9223372036854775807,,,,bereng,,,,Low,,3.0.21,,,"[f858a800f05d33679b2bce2a08a701b5e61f36bc|https://github.com/apache/cassandra/commit/f858a800f05d33679b2bce2a08a701b5e61f36bc]",,,,,,,,,The flaky tests passes some thousands of runs.,,,,,"01/May/20 15:33;adelapena;I think that the test started to fail after CASSANDRA-15367, which added the failing assertion to {{indexBuildingPagesLargePartitions}}. That assertion was probably forgotten when the test was originally added by CASSANDRA-12796 ([here|https://github.com/apache/cassandra/commit/36ce4e02b429b1297d71c5c8a963623c62d9e159#diff-13cb97758bcb11cce8fc6f4cb1990dd6R686]). 

I think the reason why it fails is that [{{Keyspace.writeOrder}}|https://github.com/apache/cassandra/commit/36ce4e02b429b1297d71c5c8a963623c62d9e159#diff-13cb97758bcb11cce8fc6f4cb1990dd6R965] is globally shared, so other tests and/or tasks can concurrently use it to start other operations, thus the barrier might not yet finished at the moment we do the assertion. For example, the following simple test fails when repeatedly run:
{code:java}
@Test
public void myTest()
{
    OpOrder.Barrier b = Keyspace.writeOrder.newBarrier();
    b.issue();
    assertTrue(b.getSyncPoint().isFinished());
}
{code}
It fails because we have concurrent writes for the {{sstable_activity}} table, probably caused by the teardown of previous test runs. 

The proposed patch simply stores the barriers for {{Keyspace.writeOrder}} in a separate list and awaits for their completion before doing the assert:

||Branch||PR||utest||parameterized||
|3.0  |[576|https://github.com/apache/cassandra/pull/576]|[74|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/74/]|[647|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/647/]|
|3.11 |[577|https://github.com/apache/cassandra/pull/577]|[75|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/75/]|[648|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/648/]|
|trunk|[578|https://github.com/apache/cassandra/pull/578]|[76|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/76/]|[649|https://jenkins-dse.build.dsinternal.org/view/Parameterized/job/parameterized-testall/649/]|

With this change it seems not to fail after some thousands of runs.;;;","04/May/20 09:18;bereng;Hi [~adelapena] I was looking into this one as well but I didn't go as far as you did. In any case this makes sense to me so +1 from my side but with a 'I am a new to the codebase disclaimer' :);;;","06/May/20 07:32;bereng;Ready to commit from my pov. But [~adelapena] feel free to look for more reviewers.;;;","06/May/20 16:52;jmeredithco;Test runs fine for me in a loop now (3744 passes before I got bored).  I had a quick glance at the patch and it looks reasonable. Thanks for picking it up and fixing it.;;;","07/May/20 16:21;adelapena;Thanks for the review, committed to 3.0 as [f858a800f05d33679b2bce2a08a701b5e61f36bc|https://github.com/apache/cassandra/commit/f858a800f05d33679b2bce2a08a701b5e61f36bc] and merged up without conflicts to [3.11|https://github.com/apache/cassandra/commit/b9de3f60f0a9b895757a2a414ec80a3cdac396e0] and [trunk|https://github.com/apache/cassandra/commit/ba508d009727bd4f6a9c80096b65888abafefa65].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Range read concurrency factor didn't consider range merger,CASSANDRA-15752,13300314,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,jasonstack,jasonstack,22/Apr/20 16:04,03/Jan/21 17:02,13/Jul/23 08:39,22/Jun/20 15:29,3.0.21,3.11.7,4.0,4.0-beta1,,Legacy/Coordination,,,,1,,,,"During range read, coordinator computes concurrency factor which is the number of vnode ranges to contact in parallel for the next batch.

But in {{RangeCommandIterator}}, vnode ranges are merged by {{RangeMerger}} if vnode ranges share enough replicas to satisfy consistency level. eg. vnode range [a,b) has replica n1,n2,n3 and vnode range [b,c) has replica n2,n3,n4, so they can be merged as range [a,c) with replica n2, n3 for Quorum.

Currently it counts number of merged ranges towards concurrency factor. Coordinator may fetch more ranges than needed.

----

Another issue is that when executing range read on table with very small amount of data, concurrency factor can be bumped to {{size of total vnode ranges}}, eg. 10k, depending on the num of vnodes and cluster size. As a result, coordinator will send large number of concurrent range requests, potentially slowing down the cluster.. We should cap the max concurrency factor..",,adelapena,jasonstack,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jun 22 15:24:54 UTC 2020,,,,,,,All,,,,,,"0|z0dye0:",9223372036854775807,,,,adelapena,maedhroz,,,Normal,,2.1 beta1,,,https://github.com/apache/cassandra/commit/abdf5085d4381351054bc2c0976bc826f4ac82e2,,,,,,,,,"Added unit tests.

Circle Ci: [https://circleci.com/workflow-run/440126c4-058d-4511-8301-16df2bddf5db]
  
 ",,,,,"02/Jun/20 16:27;jasonstack;[Trunk Patch|https://github.com/apache/cassandra/pull/606] / [CI|https://app.circleci.com/pipelines/github/jasonstack/cassandra/153/workflows/39d0da06-96dc-4795-aa39-e4f428ba8ea7]:
* count vnode ranges instead of merged ranges against concurrency factor during range read
* cap max concurrency factor as ten times the number of cores to avoid large number of concurrent remote ranges in large vnode cluster.;;;","08/Jun/20 18:04;maedhroz;[~jasonstack] Any objection to making this 4.0-beta?;;;","09/Jun/20 02:50;jasonstack;4.0-beta works for me;;;","11/Jun/20 21:10;maedhroz;[~jasonstack] Made a pass at review and threw my comments on the PR.;;;","12/Jun/20 10:58;jasonstack;updated the branch and rebased on trunk;;;","12/Jun/20 16:27;maedhroz;+1;;;","17/Jun/20 14:40;adelapena;+1;;;","18/Jun/20 11:33;adelapena;Running cassandra-ci:

||[utest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/130/]||[dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/167/]||[jvm-dtest|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/106/]||;;;","18/Jun/20 12:49;jasonstack;backported to 3.0 and 3.11
|[trunk|https://github.com/apache/cassandra/pull/606/files]| [circle|https://circleci.com/workflow-run/440126c4-058d-4511-8301-16df2bddf5db]|
|[3.11|https://github.com/apache/cassandra/pull/643/files]| [circle|https://circleci.com/workflow-run/000e8712-3259-42c1-a2b3-20ff166fe5b4] |
|[3.0|https://github.com/apache/cassandra/pull/644] | [circle|https://circleci.com/workflow-run/3714cc8b-c0ef-4974-9b6a-d8ea815aaaea] |;;;","19/Jun/20 10:54;adelapena;Cassandra-ci results:

|| branch || utest || dtest ||
|[3.0  |https://github.com/apache/cassandra/pull/644]|[131|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/131/]|[168|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/168/]|
|[3.11 |https://github.com/apache/cassandra/pull/643]|[132|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/132/]|[169|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/169/]|
|[trunk|https://github.com/apache/cassandra/pull/606]|[133|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/133/]|[170|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/170/]|

They look good to me, although dtests for 3.11 haven't yet finished.;;;","22/Jun/20 15:24;adelapena;Committed to 3.0 as [abdf5085d4381351054bc2c0976bc826f4ac82e2|https://github.com/apache/cassandra/commit/abdf5085d4381351054bc2c0976bc826f4ac82e2] and merged up to [3.11|https://github.com/apache/cassandra/commit/61ecfda2e68a3142a671cb50ad8786b5354c91ff] and [trunk|https://github.com/apache/cassandra/commit/9629c1650d53af6e624d9317c83e4bc1998b04bd].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CustomNowInSecondsTest.testSelectQuery() is flaky,CASSANDRA-15751,13300303,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,snazy,snazy,snazy,22/Apr/20 15:28,21/Dec/20 08:07,13/Jul/23 08:39,23/Apr/20 11:57,4.0,4.0-beta1,,,,Test/unit,,,,0,,,,"The test {{CustomNowInSecondsTest.testSelectQuery()}} is flaky, because the {{now}} [calculated here|https://github.com/snazy/cassandra/blob/5242f7d4306f034f32e26834df06ff7fc85a3c16/test/unit/org/apache/cassandra/cql3/CustomNowInSecondsTest.java#L57] but [used here|https://github.com/snazy/cassandra/blob/5242f7d4306f034f32e26834df06ff7fc85a3c16/test/unit/org/apache/cassandra/cql3/CustomNowInSecondsTest.java#L70] can be wrong, if the thread running the test method gets stalled.
The flakiness can be simulated by adding a {{Thread.sleep(1000)}} before the {{executeModify()}}.",,adelapena,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,snazy,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 23 11:57:39 UTC 2020,,,,,,,All,,,,,,"0|z0dybk:",9223372036854775807,,,,adelapena,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/7f0df2e5e55ccad7ae23ed74e3caabba53d63d5e,,,,,,,,,-,,,,,"22/Apr/20 15:33;snazy;PR: https://github.com/apache/cassandra/pull/556;;;","23/Apr/20 11:14;adelapena;Looks good to me.;;;","23/Apr/20 11:57;snazy;Thanks!

Committed as [7f0df2e5e55ccad7ae23ed74e3caabba53d63d5e|https://github.com/apache/cassandra/commit/7f0df2e5e55ccad7ae23ed74e3caabba53d63d5e] to [trunk|https://github.com/apache/cassandra/tree/trunk].
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make clear in the documentation that stress is not a secured tool,CASSANDRA-15749,13300226,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,blerer,blerer,22/Apr/20 09:44,21/Dec/20 08:08,13/Jul/23 08:39,06/May/20 07:59,4.0,4.0-beta1,,,,Documentation/Website,,,,0,,,,"It has been reported that the serialization used by the stress server was unsafe.
As Stress has never intended to be a secure application, the problem should not be fixed but the documentation should be updated to reflect that fact.",,akin-tekeoglu,bereng,blerer,colinkuo,eduard.tudenhoefner,mck,,,,,,"bereng opened a new pull request #574:
URL: https://github.com/apache/cassandra/pull/574


   …secured tool


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Apr/20 12:04;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,,Security,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed May 06 07:59:56 UTC 2020,,,,,,,All,,,,,,"0|z0dxug:",9223372036854775807,,,,eduard.tudenhoefner,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/b2c5f91fd6fa2bbce7e1a1a4cb31a64e0b229f13,,,,,,,,,See PR. No tests.,,,,,"25/Apr/20 08:08;akin-tekeoglu;[~blerer] 

Did you intend to add warning here ?

[https://cassandra.staged.apache.org/doc/latest/tools/cassandra_stress.html]
  
  ;;;","27/Apr/20 07:30;blerer;[~akin-tekeoglu] Yes :-);;;","29/Apr/20 12:05;bereng;I fancied taking a look at how do docs work so I gave this one a go. PR [here|https://github.com/apache/cassandra/pull/574]

I only found docs for cassandra-stress in trunk. Nothing for the previous versions so happy to be corrected.

Test: I generated the docs locally and tested the generated html includes the message in the FAQ section;;;","06/May/20 07:02;eduard.tudenhoefner;[~Bereng] changes LGTM;;;","06/May/20 07:56;mck;This doc page only exists in trunk. Adjusting fix version accordingly.;;;","06/May/20 07:59;mck;Committed as b2c5f91fd6fa2bbce7e1a1a4cb31a64e0b229f13;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FBUtilitities.testWaitFirstFuture is flaky,CASSANDRA-15744,13299967,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,snazy,snazy,snazy,21/Apr/20 11:07,15/May/20 08:48,13/Jul/23 08:39,21/Apr/20 14:18,3.0.21,3.11.7,4.0,4.0-beta1,,Test/unit,,,,0,,,,"The unit test FBUtilitities.testWaitFirstFuture 

Example failure message: {{junit.framework.AssertionFailedError: expected:<40> but was:<10>}} ",,eduard.tudenhoefner,snazy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,snazy,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 21 14:17:10 UTC 2020,,,,,,,All,,,,,,"0|z0dw8w:",9223372036854775807,,,,eduard.tudenhoefner,snazy,,,Low,,3.0.17,,,https://github.com/apache/cassandra/commit/2aa7cf8114f3c63359e65fd741bfb990ebac2ebe,,,,,,,,,-,,,,,"21/Apr/20 11:17;snazy;https://github.com/apache/cassandra/pull/548 (against 3.0, trivial merge to 3.11+trunk)
;;;","21/Apr/20 13:52;eduard.tudenhoefner;changes LGTM;;;","21/Apr/20 14:17;snazy;Thanks for the review!

Committed as [2aa7cf8114f3c63359e65fd741bfb990ebac2ebe|https://github.com/apache/cassandra/commit/2aa7cf8114f3c63359e65fd741bfb990ebac2ebe] to [cassandra-3.0|https://github.com/apache/cassandra/tree/cassandra-3.0], [merged|https://github.com/apache/cassandra/commit/d833df80a9b1225f80cb1cc8847411509a9dc77a] to [cassandra-3.11|https://github.com/apache/cassandra/tree/cassandra-3.11], [merged|https://github.com/apache/cassandra/commit/b870562008672edfe57d11cb1d147d3d57da5ead] to [trunk|https://github.com/apache/cassandra/tree/trunk].
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Entire SSTable transfers don't work over SSL,CASSANDRA-15740,13299543,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,djoshi,djoshi,djoshi,19/Apr/20 23:05,15/May/20 08:48,13/Jul/23 08:39,23/Apr/20 05:09,4.0,4.0-beta1,,,,Legacy/Streaming and Messaging,,,,0,,,,"Entire SSTable transfers do not function when SSL handler is present in the Netty pipeline. This is a trivial fix to allow it to proceed over SSL there by extending benefits over SSL.

||ssl||
|[cassandra|https://github.com/dineshjoshi/cassandra/tree/zcs-with-ssl]|
|[dtest|https://github.com/dineshjoshi/cassandra-dtest-1/tree/zcs-with-ssl]|
|[utests &amp; dtests|https://circleci.com/gh/dineshjoshi/workflows/cassandra/tree/zcs-with-ssl]|",,djoshi,jasonstack,jeromatron,jolynch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,djoshi,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 23 05:08:06 UTC 2020,,,,,,,All,,,,,,"0|z0dtnc:",9223372036854775807,,,,jolynch,,,,Normal,,4.0,,,https://github.com/apache/cassandra/commit/e995c3fcc7479e82f34721d9634093a807ff06bd,,,,,,,,,CircleCI tests,,,,,"23/Apr/20 00:30;jolynch;Only minor concern I have is the assert in writeFileToChannel that checks the bytes read are what you asked for, I would personally just throw an exception there.

Other than that (and feel free to ignore), patch looks good to me +1.

For some reason I can't appear to load the dtest results, if the newly added dtest passes please merge.;;;","23/Apr/20 05:08;djoshi;Thanks for the review [~jolynch]. I addressed your concern. The CircleCI links are having some issues. The unit, in-jvm dtests and python dtests passed (with 1 flaky failure and 1 test tear down failure).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dtests fix due to cqlsh behavior change,CASSANDRA-15739,13299542,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,djoshi,djoshi,djoshi,19/Apr/20 22:55,15/May/20 08:53,13/Jul/23 08:39,22/Apr/20 19:47,4.0,4.0-beta1,,,,Tool/cqlsh,,,,0,,,,"dtests are failing due to a behavior change in cqlsh that was introduced as part of 15623. This patch fixes the issue. It also fixes some issues that were surfaced that were silent failures earlier. For example, the UTF-8 encoding issues with Python 2.7 on trunk was caught. We also caught an issue with ccm which ccm subsequently [fixed|https://github.com/riptano/ccm/pull/712].

|[cassandra|https://github.com/dineshjoshi/cassandra/tree/15623-fix-tests]|
|[cassandra-dtests|https://github.com/dineshjoshi/cassandra-dtest-1/tree/15623-fix-tests]|
|[utests &amp; dtests|https://circleci.com/workflow-run/65ae49dd-e52f-4af0-b310-7e09f2c204ea]|


 !15623-pipeline.png! 
",,djoshi,e.dimitrova,eduard.tudenhoefner,jwest,mck,plastikat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15623,,,,,,,,,,,,,"19/Apr/20 23:02;djoshi;15623-pipeline.png;https://issues.apache.org/jira/secure/attachment/13000464/15623-pipeline.png",,,,,,,,,,,,,,1.0,djoshi,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Apr 22 19:47:47 UTC 2020,,,,,,,All,,,,,,"0|z0dtn4:",9223372036854775807,,,,jwest,mck,,,Low,,4.0,,,https://github.com/apache/cassandra/commit/ffa05ef24039e5ed8a9c8080ce682e3fda926583,,,,,,,,,circleci,,,,,"20/Apr/20 11:40;mck;Small comment on the dtest patch regarding naming.

Jenkins CI run [here|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/67/pipeline].

EDIT: i botched the dtest build in the pipeline (bc i had hacked it to test [PR#66|https://github.com/apache/cassandra-dtest/pull/66]. A new build of it (unhacked) is [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/75/]).

(Had to run with the branch in thelastpickle fork, as the build scripts don't work when the forked repository has a different name.)

;;;","20/Apr/20 16:13;djoshi;Thanks [~mck]. I have addressed your comments.;;;","21/Apr/20 04:51;jwest;For the dtest patch, can we cleanup the whitespace and import changes the editor likely made automatically? Also, are we going to wait the ccm PR to fix the TODO? Otherwise I believe it looks ok – would like to see the results of the Jenkins run first however. ;;;","21/Apr/20 05:56;mck;bq. For the dtest patch, can we cleanup the whitespace and import changes the editor likely made automatically? 

I can fix that before I push.

bq. Also, are we going to wait the ccm PR to fix the TODO? 

Can we open another ticket for that please.;;;","21/Apr/20 07:13;mck;We need patches against the three branches. They are here, with CI runs (re-using the dtest patch above).


||branch||circleci||jenkins||
|[cassandra_3.0_15739|https://github.com/apache/cassandra/compare/cassandra-3.0...thelastpickle:mck/cassandra-3.0_15739]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-3.0_15739]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/69/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/69]|
|[cassandra_3.11_15739|https://github.com/apache/cassandra/compare/cassandra-3.11...thelastpickle:mck/cassandra-3.11_15739]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-3.11_15739]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/70/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/70]|
|[trunk_15739|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15739]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Ftrunk_15739]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/71/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/71]|;;;","21/Apr/20 07:30;djoshi;[~mck], we need to only patch trunk as the fixes I made to {{cqlsh.py}} in trunk don't need to be backported. They're related to UTF8 handling and are Python 2/3 compatibility related. {{cqlsh.py}} in earlier versions of C* doesn't support Python 3 therefore this issue doesn't exist in those branches. So we're good on that front. The test breakages are contained in dtest repo and are related to the behavior change.;;;","21/Apr/20 08:09;mck;Ok, thanks [~djoshi], I have removed those patches.;;;","22/Apr/20 03:32;plastikat;[~djoshi] wrote:

> They're related to UTF8 handling and are Python 2/3 compatibility related

Ah, when I was looking at these changes, I was really wondering how could they be related to CASSANDRA-15623 changes... I wish I would have read all the comments here first!;;;","22/Apr/20 19:47;djoshi;Committed to [cassandra|https://github.com/apache/cassandra/commit/ffa05ef24039e5ed8a9c8080ce682e3fda926583] and [cassandra-dtest|https://github.com/apache/cassandra-dtest/commit/35cee51a058c1970fe15bcb06c22ef4f2b9af5ba].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generate compiler options file to support Java11 in IDEA.,CASSANDRA-15738,13299248,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,17/Apr/20 22:59,15/May/20 08:53,13/Jul/23 08:39,18/Apr/20 03:33,4.0,4.0-beta1,,,,Build,,,,0,,,,"The change to JMX in CASSANDRA-15653 prevents the generated IDEA project from compiling under JDK11.

Fix by adding options for a module (named after the checkout dir)

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<project version=""4"">
  <component name=""JavacSettings"">
    <option name=""ADDITIONAL_OPTIONS_OVERRIDE"">
      <module name=""trunk"" options=""--add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED"" />
    </option>
  </component>
{code}
",,djoshi,jmeredithco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Apr 18 03:33:33 UTC 2020,,,,,,,All,,,,,,"0|z0ds68:",9223372036854775807,,,,djoshi,,,,Low,,4.0,,,https://github.com/apache/cassandra/commit/c4db3f89a9a07c45c78da9b5b3f802a6f8b51531,,,,,,,,,"To test,

Either a clean checkout or remove the {{.idea}} directory, then under Java8 and Java11 run {{ant generate-idea-files}} then load the project and compile.

Under Java11, check {{Preferences}} -> {{Build, Execution, Deployment}} -> {{Java Compiler}} and there should be an entry under {{Additional command line parameters:}} you should see

{code}
--add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED
{code}

Under Java8, no {{.idea/compiler.xml}} file should be generated.",,,,,"17/Apr/20 23:23;jmeredithco;PR https://github.com/apache/cassandra/pull/545 / Commit https://github.com/apache/cassandra/pull/545/commits/9bc5dedde44db1376c860edf332d48e56e74b0d9;;;","18/Apr/20 03:32;djoshi;+1;;;","18/Apr/20 03:33;djoshi;Committed. Thank you for the patch [~jmeredithco].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Batch statement preparation fails if multiple tables and parameters are used,CASSANDRA-15730,13298598,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bryncooke,bryncooke,bryncooke,15/Apr/20 15:21,02/May/21 19:41,13/Jul/23 08:39,21/Apr/20 15:31,4.0,4.0-beta1,,,,Consistency/Batch Log,,,,0,pull-request-available,,,"Batch statement preparation fails with an assertion error if multiple tables and parameters are used.

{{BEGIN BATCH }}
{{ UPDATE tbl1 SET v1 = 1 WHERE k1 = ?}}
{{ UPDATE tbl2 SET v2 = 2 WHERE k2 = ?}}
{{APPLY BATCH}}

The logic for affectsMultipleTables [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/cql3/statements/BatchStatement.java#L144] looks inverted
 This later causes an assertion failure [here|https://github.com/apache/cassandra/blob/24c8a21c1c131abd89c6b646343ff098d1b3263b/src/java/org/apache/cassandra/cql3/VariableSpecifications.java#L75]

 

 ",,bryncooke,eduard.tudenhoefner,jasonstack,mck,snazy,,,,,,,"BrynCooke commented on pull request #542: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/542
 
 
   The logic for detecting if a batch statement affects multiple tables in BatchStatement#getPartitionKeyBindVariableIndexes is inverted.
   BatchTest#testBatchMultipleTablePrepare has been added to demonstrate the issue.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 15:36;githubbot;600","BrynCooke commented on pull request #542: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/542
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 08:47;githubbot;600","BrynCooke commented on pull request #542: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/542
 
 
   The logic for detecting if a batch statement affects multiple tables in BatchStatement#getPartitionKeyBindVariableIndexes is inverted.
   BatchTest#testBatchMultipleTablePrepare has been added to demonstrate the issue.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 08:47;githubbot;600","BrynCooke commented on pull request #542: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/542
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 08:48;githubbot;600","BrynCooke commented on pull request #544: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/544
 
 
   The logic for detecting if a batch statement affects multiple tables in BatchStatement#getPartitionKeyBindVariableIndexes is inverted.
   BatchTest#testBatchMultipleTablePrepare has been added to demonstrate the issue.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 08:50;githubbot;600","BrynCooke commented on pull request #544: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/544
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 08:55;githubbot;600","BrynCooke commented on pull request #544: CASSANDRA-15730 Batch statement preparation fails if multiple tables and parameters are used
URL: https://github.com/apache/cassandra/pull/544
 
 
   The logic for detecting if a batch statement affects multiple tables in BatchStatement#getPartitionKeyBindVariableIndexes is inverted.
   BatchTest#testBatchMultipleTablePrepare has been added to demonstrate the issue.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 08:55;githubbot;600","snazy commented on a change in pull request #544:
URL: https://github.com/apache/cassandra/pull/544#discussion_r411974284



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java
##########
@@ -167,6 +167,26 @@ public void testBatchMultipleTable() throws Throwable
         assertRows(execute(String.format(""SELECT * FROM %s"", tbl2)), row(0, 3, 4));
     }
 
+    @Test
+    public void testBatchMultipleTablePrepare() throws Throwable
+    {
+        String tbl1 = KEYSPACE + ""."" + createTableName();
+        String tbl2 = KEYSPACE + ""."" + createTableName();
+
+        schemaChange(String.format(""CREATE TABLE %s (k1 int PRIMARY KEY, v1 int)"", tbl1));
+        schemaChange(String.format(""CREATE TABLE %s (k2 int PRIMARY KEY, v2 int)"", tbl2));
+
+        String query = ""BEGIN BATCH "" +
+                   String.format(""UPDATE %s SET v1 = 1 WHERE k1 = ?;"", tbl1) +
+                   String.format(""UPDATE %s SET v2 = 2 WHERE k2 = ?;"", tbl2) +
+                   ""APPLY BATCH;"";
+        prepare(query);
+        execute(query, 0, 0);

Review comment:
       Nit: maybe use different keys for the two tables here.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Apr/20 08:19;githubbot;600","BrynCooke commented on a change in pull request #544:
URL: https://github.com/apache/cassandra/pull/544#discussion_r412005994



##########
File path: test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java
##########
@@ -167,6 +167,26 @@ public void testBatchMultipleTable() throws Throwable
         assertRows(execute(String.format(""SELECT * FROM %s"", tbl2)), row(0, 3, 4));
     }
 
+    @Test
+    public void testBatchMultipleTablePrepare() throws Throwable
+    {
+        String tbl1 = KEYSPACE + ""."" + createTableName();
+        String tbl2 = KEYSPACE + ""."" + createTableName();
+
+        schemaChange(String.format(""CREATE TABLE %s (k1 int PRIMARY KEY, v1 int)"", tbl1));
+        schemaChange(String.format(""CREATE TABLE %s (k2 int PRIMARY KEY, v2 int)"", tbl2));
+
+        String query = ""BEGIN BATCH "" +
+                   String.format(""UPDATE %s SET v1 = 1 WHERE k1 = ?;"", tbl1) +
+                   String.format(""UPDATE %s SET v2 = 2 WHERE k2 = ?;"", tbl2) +
+                   ""APPLY BATCH;"";
+        prepare(query);
+        execute(query, 0, 0);

Review comment:
       Fixed




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Apr/20 09:01;githubbot;600","BrynCooke closed pull request #544:
URL: https://github.com/apache/cassandra/pull/544


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/May/21 19:41;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bryncooke,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 21 15:31:41 UTC 2020,,,,,,,All,,,,,,"0|z0do5s:",9223372036854775807,,,,eduard.tudenhoefner,snazy,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/dd014bbf583a9101b9b21d5a345be3e4cd79ad96,,,,,,,,,see PR,,,,,"17/Apr/20 09:12;mck;||branch||circleci||jenkins||
|[trunk_15730|https://github.com/apache/cassandra/compare/trunk...BrynCooke:CASSANDRA-15730-trunk]|[circleci|https://circleci.com/gh/BrynCooke/workflows/cassandra/tree/CASSANDRA-15730-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/64/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/64]|;;;","21/Apr/20 08:19;snazy;+1;;;","21/Apr/20 08:57;eduard.tudenhoefner;changes LGTM;;;","21/Apr/20 15:31;mck;Committed as dd014bbf583a9101b9b21d5a345be3e4cd79ad96;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Setting ""cassandra_dir"" in pytest.ini has no effect",CASSANDRA-15728,13298482,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,eduard.tudenhoefner,eduard.tudenhoefner,eduard.tudenhoefner,15/Apr/20 07:14,21/Dec/20 08:08,13/Jul/23 08:39,16/Apr/20 15:37,4.0,4.0-beta1,,,,Test/dtest/python,,,,0,pull-request-available,,,"Setting *cassandra_dir* in *pytest.ini* should not require specifying *--cassandra-dir* on the command line:

{code}
$ pytest cql_tracing_test.py
============================================================================================================ test session starts =============================================================================================================
platform linux -- Python 3.6.9, pytest-3.6.4, py-1.8.1, pluggy-0.7.1
rootdir: /home/nastra/Development/pycharm-projects/cassandra-dtest, inifile: pytest.ini
plugins: timeout-1.3.4, flaky-3.6.1
timeout: 900.0s
timeout method: signal
timeout func_only: False
collecting 4 items                                                                                                                                                                                                                           
INTERNALERROR> Traceback (most recent call last):
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/_pytest/main.py"", line 178, in wrap_session
INTERNALERROR>     session.exitstatus = doit(config, session) or 0
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/_pytest/main.py"", line 214, in _main
INTERNALERROR>     config.hook.pytest_collection(session=session)
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/hooks.py"", line 258, in __call__
INTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/manager.py"", line 67, in _hookexec
INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/manager.py"", line 61, in <lambda>
INTERNALERROR>     firstresult=hook.spec_opts.get('firstresult'),
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/callers.py"", line 201, in _multicall
INTERNALERROR>     return outcome.get_result()
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/callers.py"", line 76, in get_result
INTERNALERROR>     raise ex[1].with_traceback(ex[2])
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/callers.py"", line 180, in _multicall
INTERNALERROR>     res = hook_impl.function(*args)
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/_pytest/main.py"", line 224, in pytest_collection
INTERNALERROR>     return session.perform_collect()
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/_pytest/main.py"", line 429, in perform_collect
INTERNALERROR>     session=self, config=self.config, items=items
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/hooks.py"", line 258, in __call__
INTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/manager.py"", line 67, in _hookexec
INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/manager.py"", line 61, in <lambda>
INTERNALERROR>     firstresult=hook.spec_opts.get('firstresult'),
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/callers.py"", line 201, in _multicall
INTERNALERROR>     return outcome.get_result()
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/callers.py"", line 76, in get_result
INTERNALERROR>     raise ex[1].with_traceback(ex[2])
INTERNALERROR>   File ""/home/nastra/dtest/lib/python3.6/site-packages/pluggy/callers.py"", line 180, in _multicall
INTERNALERROR>     res = hook_impl.function(*args)
INTERNALERROR>   File ""/home/nastra/Development/pycharm-projects/cassandra-dtest/conftest.py"", line 440, in pytest_collection_modifyitems
INTERNALERROR>     raise Exception(""Required dtest arguments were missing! You must provide either --cassandra-dir ""
INTERNALERROR> Exception: Required dtest arguments were missing! You must provide either --cassandra-dir or --cassandra-version. Refer to the documentation or invoke the help with --help.
{code}


",,bereng,blerer,eduard.tudenhoefner,,,,,,,,,"nastra commented on pull request #64: CASSANDRA-15728: Respect cassandra_dir from pytest.ini
URL: https://github.com/apache/cassandra-dtest/pull/64
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Apr/20 07:39;githubbot;600","bereng commented on issue #64: CASSANDRA-15728: Respect cassandra_dir from pytest.ini
URL: https://github.com/apache/cassandra-dtest/pull/64#issuecomment-613894932
 
 
   +1. Went over the PR and tested it indeed failed and it's fixed now.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Apr/20 08:24;githubbot;600","nastra commented on issue #64: CASSANDRA-15728: Respect cassandra_dir from pytest.ini
URL: https://github.com/apache/cassandra-dtest/pull/64#issuecomment-614738563
 
 
   committed as 158f084779159e8341c080a90d759a89006f5829
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 15:54;githubbot;600","nastra commented on pull request #64: CASSANDRA-15728: Respect cassandra_dir from pytest.ini
URL: https://github.com/apache/cassandra-dtest/pull/64
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 15:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,eduard.tudenhoefner,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 16 15:38:19 UTC 2020,,,,,,,All,,,,,,"0|z0dng0:",9223372036854775807,,,,bereng,blerer,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra-dtest/commit/158f084779159e8341c080a90d759a89006f5829,,,,,,,,,run *pytest sometest.py* with *cassandra_dir* being set in *pytest.ini*,,,,,"15/Apr/20 08:25;bereng;+1 from me. Went over the PR and tested it indeed failed and it's fixed now.;;;","15/Apr/20 08:47;blerer;[jenkins ci-run|https://ci-cassandra.apache.org/job/Cassandra-devbranch/62/];;;","16/Apr/20 15:38;blerer;Committed into cassandra-dtest master at 158f084779159e8341c080a90d759a89006f5829;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Internode messaging connection setup between 4.0 and legacy SSL 3.0 fails if initial connection version incorrect,CASSANDRA-15727,13298436,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,15/Apr/20 03:06,12/Feb/21 17:08,13/Jul/23 08:39,13/May/20 15:36,4.0,4.0-beta1,,,,Messaging/Internode,,,,0,pull-request-available,,,"This was discovered while testing upgrading an SSL enabled cluster from 3.0 to 4.0.  The 3.0 cluster was configured to only listen on the ssl storage port. When the upgraded 4.0 node started it received a gossip messsage that triggered a shadow round before it had correctly set the messaging versions for the other endpoints.

Sending the message created the connection, but because the endpoint defaulted to {{VERSION_40}} the initial connect attempt was to the regular {{storage_port}}.  The 3.0 node was only listening on the {{ssl_storage_port}}, so the connection was refused and the {{OutboundConnection.onFailure}} handler was called.  As the shadow
gossip round had queued up a message, the {{hasPending}} branch was followed and the connection was rescheduled, however the port is never recalculated as the original settings are used so it always fails.

Meanwhile, the node discovered information about peers through inbound connection and gossip updating the messaging version for the endpoint which could have been used to make a valid connection.",,aleksey,benedict,jasonstack,jmeredithco,,,,,,,,"jonmeredith commented on pull request #538: CASSANDRA-15727
URL: https://github.com/apache/cassandra/pull/538
 
 
   On a failed outbound connection to a node with pending data, recheck
   the messaging version before reattempting the connection.
   
   Prior to this change, if the endpoint version was incorrectly set
   to 4.0 when the node was running 3.0 with an SSL storage port
   the connection would continuously try to reconnect on the wrong port.
   
   The patch also improves some of the log messages to include the
   actual port being connected to as well as the canonical endpoint for
   the node.
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Apr/20 03:10;githubbot;600","jonmeredith commented on pull request #538:
URL: https://github.com/apache/cassandra/pull/538#issuecomment-778320527


   Merged as 17caa288c311e0364f81f78a85831c36f0f4917e


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 17:08;githubbot;600","jonmeredith closed pull request #538:
URL: https://github.com/apache/cassandra/pull/538


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 17:08;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,CASSANDRA-14848,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,andrew.tolbert,jmeredithco,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri May 15 15:32:22 UTC 2020,,,,,,,All,,,,,,"0|z0dn5s:",9223372036854775807,,,,aleksey,,,,Normal,,4.0-alpha,4.0-alpha1,,"[678ca3fc29c38b64a110dcf40693aa7840b0585c|https://github.com/apache/cassandra/commit/678ca3fc29c38b64a110dcf40693aa7840b0585c]",,,,,,,,,Reproduced in ConnectionTest. testPendingOutboundConnectionUpdatesMessageVersionOnReconnectAttempt and checked the fix.,,,,,"15/Apr/20 03:11;jmeredithco;Patch here (opened as a PR with CircleCI hi-res config added on top)
https://github.com/apache/cassandra/commit/2356e86bc43494af7f54a1006242a1db42957d82;;;","15/Apr/20 03:15;jmeredithco;CircleCI [Java8|https://circleci.com/workflow-run/4db87bd0-acc6-48e8-afcc-d259841af5c2] [Java11|https://circleci.com/workflow-run/f2969704-8d9b-4d9e-9af4-0f59186b08d5];;;","17/Apr/20 23:29;jmeredithco;Looks like I have a test failure to deal with..

{code}
[junit-timeout] Testsuite: org.apache.cassandra.net.ConnectionTest Tests run: 13, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 77.412 sec
[junit-timeout] 
[junit-timeout] Testcase: testPendingOutboundConnectionUpdatesMessageVersionOnReconnectAttempt(org.apache.cassandra.net.ConnectionTest):	Caused an ERROR
[junit-timeout] Local endpoint port 7011 doesn't match YAML configured port 7016 or legacy SSL port 7015
[junit-timeout] org.apache.cassandra.exceptions.ConfigurationException: Local endpoint port 7011 doesn't match YAML configured port 7016 or legacy SSL port 7015
[junit-timeout] 	at org.apache.cassandra.net.InboundConnectionSettings.withDefaults(InboundConnectionSettings.java:172)
[junit-timeout] 	at org.apache.cassandra.net.InboundSockets.addBindings(InboundSockets.java:190)
[junit-timeout] 	at org.apache.cassandra.net.InboundSockets.bindings(InboundSockets.java:184)
[junit-timeout] 	at org.apache.cassandra.net.InboundSockets.<init>(InboundSockets.java:168)
[junit-timeout] 	at org.apache.cassandra.net.ConnectionTest.testPendingOutboundConnectionUpdatesMessageVersionOnReconnectAttempt(ConnectionTest.java:586)
{code};;;","18/Apr/20 00:02;jmeredithco;Committed fix for test failure - [Java8|https://app.circleci.com/pipelines/github/jonmeredith/cassandra/339/workflows/def20a38-cd04-4a7b-bfc6-7f15b3c1abd9] [Java11|https://app.circleci.com/pipelines/github/jonmeredith/cassandra/339/workflows/8e63bc9c-7941-4bd6-af2f-e3a604181a7e];;;","13/May/20 14:08;aleksey;The patch mostly looks good to me, but I think there is an issue with the logic in {{InboundSockets#addBindings()}} - I *think* it's possible for the ports to match in config but for encryption or legacy ssl storage port to not be enabled, thus never adding any bindings at all.

Also some formatting nits and unnecessary `this` that we usually avoid.

Pushed [here|https://github.com/iamaleksey/cassandra/commits/15727-4.0] - please have a look, as I'm not certain about issue 1.;;;","13/May/20 14:42;jmeredithco;Thanks for the review.  The fix looks necessary to me, and the nits are all good. Please merge when you're happy with it.;;;","13/May/20 15:36;aleksey;Cheers, committed as [678ca3fc29c38b64a110dcf40693aa7840b0585c|https://github.com/apache/cassandra/commit/678ca3fc29c38b64a110dcf40693aa7840b0585c] to trunk.;;;","13/May/20 18:50;benedict;Sorry that I'm late to this party, but might it be cleaner to move the setting of {{messagingVersion}} into {{attempt}} since we already do it there, and remove it from {{onCompletedHandshake/RETRY}} and the class constructor?  This would capture all possible reasons {{messagingVersion}} might have changed, and reduce the verbosity of this particular point in the code, possibly keeping its intent a bit clearer.;;;","15/May/20 14:10;aleksey;bq. Sorry that I'm late to this party, but might it be cleaner to move the setting of messagingVersion into attempt since we already do it there, and remove it from onCompletedHandshake/RETRY and the class constructor? This would capture all possible reasons messagingVersion might have changed, and reduce the verbosity of this particular point in the code, possibly keeping its intent a bit clearer.

Good call. I'll ninja it, if nobody objects.

EDIT: may or may have not done it in 17caa288c311e0364f81f78a85831c36f0f4917e;;;","15/May/20 15:32;jmeredithco;Looks like an improvement to me.  Thanks for both your help.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
buffer pool may throw NPE with concurrent release due to in-progress tiny pool eviction,CASSANDRA-15726,13298251,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,jasonstack,jasonstack,14/Apr/20 12:04,21/Dec/20 08:07,13/Jul/23 08:39,28/Apr/20 17:56,4.0,4.0-beta1,,,,Legacy/Core,,,,0,,,,"This can be reproduced by running {{LongBufferPoolTest}}, 1 out 5 runs..
{code:java}
java.lang.NullPointerException
	at org.apache.cassandra.utils.memory.BufferPool$Chunk.access$1300(BufferPool.java:836)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.lambda$remove$1(BufferPool.java:716)
	at org.apache.cassandra.utils.memory.BufferPool$MicroQueueOfChunks.removeIf(BufferPool.java:460)
	at org.apache.cassandra.utils.memory.BufferPool$MicroQueueOfChunks.access$1500(BufferPool.java:304)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.remove(BufferPool.java:716)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.put(BufferPool.java:590)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.recycle(BufferPool.java:709)
	at org.apache.cassandra.utils.memory.BufferPool$Chunk.recycle(BufferPool.java:909)
	at org.apache.cassandra.utils.memory.BufferPool$Chunk.tryRecycle(BufferPool.java:903)
	at org.apache.cassandra.utils.memory.BufferPool$Chunk.release(BufferPool.java:896)
	at org.apache.cassandra.utils.memory.BufferPool$MicroQueueOfChunks.removeIf(BufferPool.java:465)
	at org.apache.cassandra.utils.memory.BufferPool$MicroQueueOfChunks.access$1500(BufferPool.java:304)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.addChunk(BufferPool.java:736)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.addChunkFromParent(BufferPool.java:725)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.tryGetInternal(BufferPool.java:691)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.tryGet(BufferPool.java:679)
	at org.apache.cassandra.utils.memory.BufferPool$LocalPool.access$000(BufferPool.java:518)
	at org.apache.cassandra.utils.memory.BufferPool.tryGet(BufferPool.java:120)                       
	at org.apache.cassandra.utils.memory.LongBufferPoolTest$2.testOne(LongBufferPoolTest.java:497)
	at org.apache.cassandra.utils.memory.LongBufferPoolTest$TestUntil.call(LongBufferPoolTest.java:558)
	at org.apache.cassandra.utils.memory.LongBufferPoolTest$TestUntil.call(LongBufferPoolTest.java:538)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
{code}
The cause is that:
 * When evicting a normal chunk from a full MicroQueueOfChunks, local pool will try to remove corresponding tiny chunks, via {{MicroQueueOfChunks#removeIf}}.
 * If matching tiny chunk is found, tiny {{chunk.release()}} is called immediately before moving null chunk to the back of the queue.
 * Due to concurrent release from different threads, tiny {{chunk.release()}} may cause its parent normal chunk, aka. the evicted chunk in #1, to be removed from local pool and causes tiny pool to remove corresponding tiny chunks again in {{LocalPool#remove()}}.
 * In {{MicroQueueOfChunks#removeIf}}, due to previous in-progress {{removeIf}}, it throws NPE as it violate MicroQueueOfChunks's assumption which requires null chunks to be put at the back of queue.

 
|[patch|https://github.com/apache/cassandra/pull/537]|[CI|https://circleci.com/workflow-run/a97317a0-ef21-4c01-9a97-82eaf28d7faf]|

The fix is to put null chunks to the back of queue before releasing any chunks.",,aleksey,jasonstack,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 28 18:43:18 UTC 2020,,,,,,,All,,,,,,"0|z0dm0o:",9223372036854775807,,,,aleksey,,,,Normal,,4.0-alpha,4.0-alpha1,,"[fb9e74a4fe26eda988c0e98d578f7ded80a8c390|https://github.com/apache/cassandra/commit/fb9e74a4fe26eda988c0e98d578f7ded80a8c390]",,,,,,,,,"With patch, cannot reproduce anymore on {{LongBufferPoolTest}}",,,,,"14/Apr/20 12:06;jasonstack;[~aleksey] [~benedict] do you mind reviewing?;;;","15/Apr/20 13:43;aleksey;Sure, I'll take a look once I've gotten through some items in my queue.;;;","28/Apr/20 17:56;aleksey;Cheers, committed to trunk as [fb9e74a4fe26eda988c0e98d578f7ded80a8c390|https://github.com/apache/cassandra/commit/fb9e74a4fe26eda988c0e98d578f7ded80a8c390].;;;","28/Apr/20 18:43;aleksey;For some additional context: this is a fix strictly for the test failure, as in actual use it's not intended for and isn't used in multi-threaded context. The fix doesn't make the method thread-safe, as races between updating chunk pointers and count are all still possible, and might cause further test failures. This also introduces three branches that aren't necessarily predictable. But this is a safe change and allows to unblock the alpha in an expedient fashion.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 Support in cassandra-in-jvm-dtest-api for replacing logback with alternate logger,CASSANDRA-15714,13297708,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,10/Apr/20 22:31,21/Dec/20 08:08,13/Jul/23 08:39,20/Apr/20 15:53,4.0,4.0-beta1,,,,Test/dtest/java,,,,0,pull-request-available,,,"Not all forks use logback, and there is an (prematurely) closed ticket indicating that it would be valuable CASSANDRA-13212.

 
Add support for making the log file configuration property and log file pathname configurable rather than hard-coding to logback.
 
Also had to add 'org.w3c.dom' to the InstanceClassLoader so that log4j2 could load its configuration, but looks like that can be handled with the changes in CASSANDRA-15713",,dcapwell,ifesdjeen,jmeredithco,,,,,,,,,"jonmeredith commented on pull request #8:  CASSANDRA-15714 Support for replacing logback with alternate logger config (like log4j2)
URL: https://github.com/apache/cassandra-in-jvm-dtest-api/pull/8
 
 
   Not all forks use logback, and there is an (prematurely) closed ticket
   indicating that it would be valuable CASSANDRA-13212.
   
   Also had to add 'org.w3c.dom' to the InstanceClassLoader so that
   log4j2 could load it's configuration.
   
   Patch by Jon Meredith; reviewed by ? for CASSANDRA-15714.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 22:41;githubbot;600","jonmeredith commented on pull request #8:  CASSANDRA-15714 Support for replacing logback with alternate logger config (like log4j2)
URL: https://github.com/apache/cassandra-in-jvm-dtest-api/pull/8
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 12:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15713,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Apr 20 15:53:08 UTC 2020,,,,,,,All,,,,,,"0|z0dinc:",9223372036854775807,,,,dcapwell,,,,Low,,4.0-alpha,4.0-alpha1,,"https://gitbox.apache.org/repos/asf?p=cassandra-in-jvm-dtest-api.git;a=commit;h=7ddfe52d51639817c6c5be86c0c8e317e33620eba",,,,,,,,,Manual check it worked in upstream build.,,,,,"10/Apr/20 22:44;jmeredithco;PR on github;;;","13/Apr/20 17:28;dcapwell;small comment left in GitHub.

Overall I am ok with this.;;;","15/Apr/20 13:53;ifesdjeen;+1 to make this change.

This is unrelated to the ticket itself: I'm starting thinking if it'd be useful to add {{CHANGES.txt}} file and keep a log of tickets that were committed to make it easier to maintain cross-version compatibility?;;;","15/Apr/20 16:03;jmeredithco;I think documenting evolutions of the API would be useful.;;;","15/Apr/20 16:10;dcapwell;Sorry didn't look after you fixed my feedback.

+1 to the patch (assuming you remove mine from it ^_^)

Adding CHANGES.txt makes sense to me;;;","20/Apr/20 15:53;jmeredithco;Not sure what version to set here as JIRA is based on main project versions, not the dependency version - is really fixed in 0.0.2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cqlsh ALTER KEYSPACE completion show virtual table keyspaces,CASSANDRA-15711,13297330,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,eduard.tudenhoefner,blerer,blerer,09/Apr/20 09:23,21/Dec/20 08:08,13/Jul/23 08:39,09/Apr/20 14:56,4.0,4.0-alpha4,,,,Tool/cqlsh,,,,0,pull-request-available,,,"{code}
cqlsh> ALTER KEYSPACE
system_traces         system_virtual_schema system_auth           system_views          system_distributed
{code}

The {{system_virtual_schema}} and {{system_views}} keyspaces are virtual tables keyspaces that cannot be altered and by consequence they should not appear in this list.",,blerer,eduard.tudenhoefner,,,,,,,,,,"nastra commented on pull request #530: CASSANDRA-15711: Mark system_views/system_virtual_schema as non-alterable keyspaces in cqlsh
URL: https://github.com/apache/cassandra/pull/530
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 10:03;githubbot;600","nastra commented on issue #530: CASSANDRA-15711: Mark system_views/system_virtual_schema as non-alterable keyspaces in cqlsh
URL: https://github.com/apache/cassandra/pull/530#issuecomment-611586691
 
 
   committed as 39a0703b65c985c4b99eed1c045d0f00bbbcc9db to trunk
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 15:20;githubbot;600","nastra commented on pull request #530: CASSANDRA-15711: Mark system_views/system_virtual_schema as non-alterable keyspaces in cqlsh
URL: https://github.com/apache/cassandra/pull/530
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 15:20;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,eduard.tudenhoefner,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 14:56:04 UTC 2020,,,,,,,All,,,,,,"0|z0dgbc:",9223372036854775807,,,,blerer,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/39a0703b65c985c4b99eed1c045d0f00bbbcc9db,,,,,,,,,execute *ALTER KEYSPACE* and *system_virtual_schema* and *system_views* shouldn't show up in the completion,,,,,"09/Apr/20 11:33;eduard.tudenhoefner;Tests on Jenkins [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/46/], more specifically [this|https://ci-cassandra.apache.org/job/Cassandra-devbranch-cqlsh-tests/36/cython=no,jdk=JDK%201.8%20(latest),label=cassandra/testReport/cqlshlib.test.test_cqlsh_completion/TestCqlshCompletion/test_complete_in_alter_keyspace/] is the newly added test.;;;","09/Apr/20 14:54;blerer;Thanks. The patch look good to me.;;;","09/Apr/20 14:56;blerer;Committed into trunk at 39a0703b65c985c4b99eed1c045d0f00bbbcc9db;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SEPExecutorTest changingMaxWorkersMeetsConcurrencyGoalsTest failure,CASSANDRA-15709,13297271,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,marcuse,marcuse,09/Apr/20 05:56,20/May/21 11:09,13/Jul/23 08:39,18/Apr/20 17:18,4.0,4.0-beta1,,,,Test/unit,,,,0,pull-request-available,,,"{code}
[junit-timeout] Testsuite: org.apache.cassandra.concurrent.SEPExecutorTest
[junit-timeout] Testsuite: org.apache.cassandra.concurrent.SEPExecutorTest Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 7.656 sec
[junit-timeout] 
[junit-timeout] Testcase: changingMaxWorkersMeetsConcurrencyGoalsTest(org.apache.cassandra.concurrent.SEPExecutorTest):	FAILED
[junit-timeout] expected:<true> but was:<false>
[junit-timeout] junit.framework.AssertionFailedError: expected:<true> but was:<false>
[junit-timeout] 	at org.apache.cassandra.concurrent.SEPExecutorTest.assertMaxTaskConcurrency(SEPExecutorTest.java:180)
[junit-timeout] 	at org.apache.cassandra.concurrent.SEPExecutorTest.changingMaxWorkersMeetsConcurrencyGoalsTest(SEPExecutorTest.java:110)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.concurrent.SEPExecutorTest FAILED
{code}",,adelapena,dcapwell,djoshi,e.dimitrova,jasonstack,jmeredithco,marcuse,,,,,"dcapwell commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406837445
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -75,48 +78,67 @@ public void write(int b) { }
     }
 
     @Test
-    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException
+    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException, TimeoutException
     {
-        final int numBusyWorkers = 2; // Number of busy worker threads to run and gum things up
+        // Number of busy worker threads to run and gum things up. Chosen to be
+        // between the low and high max pool size so the test exercises resizing
+        // under a number of different conditions.
+        final int numBusyWorkers = 2;
         SharedExecutorPool sharedPool = new SharedExecutorPool(""ChangingMaxWorkersMeetsConcurrencyGoalsTest"");
         final AtomicInteger notifiedMaxPoolSize = new AtomicInteger();
 
         LocalAwareExecutorService executor = sharedPool.newExecutor(0, notifiedMaxPoolSize::set, 4, ""internal"", ""resizetest"");
 
+        // Keep feeding the executor work while resizing
+        // so it stays under load.
         AtomicBoolean stayBusy = new AtomicBoolean(true);
-        for (int i = 0; i < numBusyWorkers; i++)
-        {
-            executor.execute(new BusyWork(executor, stayBusy));
-        }
+        Semaphore busyWorkerPermits = new Semaphore(numBusyWorkers);
+        Thread makeBusy = new Thread(() -> {
+            while (stayBusy.get() == true)
+            {
+                try
+                {
+                    if (busyWorkerPermits.tryAcquire(1, MILLISECONDS)) {
+                        executor.execute(new BusyWork(busyWorkerPermits));
+                    }
+                }
+                catch (InterruptedException e)
+                {
+                    // ignore, will either stop looping if done or retry the lock
+                }
+            }
+        });
 
-        final int previousConcurrency = executor.getMaximumPoolSize();
+        makeBusy.start();
         try
         {
-            assertMaxTaskConcurrency(executor, 1);
-            Assert.assertEquals(1, notifiedMaxPoolSize.get());
+            for (int repeat = 0; repeat < 1000; repeat++)
+            {
+                assertMaxTaskConcurrency(executor, 1);
+                Assert.assertEquals(1, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 2);
-            Assert.assertEquals(2, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 2);
+                Assert.assertEquals(2, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 1);
-            Assert.assertEquals(1, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 1);
+                Assert.assertEquals(1, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 3);
-            Assert.assertEquals(3, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 3);
+                Assert.assertEquals(3, notifiedMaxPoolSize.get());
 
-            executor.setMaximumPoolSize(0);
-            Assert.assertEquals(0, notifiedMaxPoolSize.get());
+                executor.setMaximumPoolSize(0);
+                Assert.assertEquals(0, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 4);
-            Assert.assertEquals(4, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 4);
+                Assert.assertEquals(4, notifiedMaxPoolSize.get());
+            }
         }
         finally
         {
             stayBusy.set(false);
-            executor.setMaximumPoolSize(previousConcurrency);
-            executor.shutdownNow();
-            Assert.assertTrue(executor.isShutdown());
-            Assert.assertTrue(executor.awaitTermination(1L, TimeUnit.MINUTES));
+            makeBusy.join(TimeUnit.SECONDS.toNanos(5));
 
 Review comment:
   `java.lang.Thread#join(long)` is milliseconds, you are providing nanos.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:44;githubbot;600","dcapwell commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406836614
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -75,48 +78,67 @@ public void write(int b) { }
     }
 
     @Test
-    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException
+    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException, TimeoutException
     {
-        final int numBusyWorkers = 2; // Number of busy worker threads to run and gum things up
+        // Number of busy worker threads to run and gum things up. Chosen to be
+        // between the low and high max pool size so the test exercises resizing
+        // under a number of different conditions.
+        final int numBusyWorkers = 2;
         SharedExecutorPool sharedPool = new SharedExecutorPool(""ChangingMaxWorkersMeetsConcurrencyGoalsTest"");
         final AtomicInteger notifiedMaxPoolSize = new AtomicInteger();
 
         LocalAwareExecutorService executor = sharedPool.newExecutor(0, notifiedMaxPoolSize::set, 4, ""internal"", ""resizetest"");
 
+        // Keep feeding the executor work while resizing
+        // so it stays under load.
         AtomicBoolean stayBusy = new AtomicBoolean(true);
-        for (int i = 0; i < numBusyWorkers; i++)
-        {
-            executor.execute(new BusyWork(executor, stayBusy));
-        }
+        Semaphore busyWorkerPermits = new Semaphore(numBusyWorkers);
+        Thread makeBusy = new Thread(() -> {
+            while (stayBusy.get() == true)
 
 Review comment:
   or `while (stayBusy.get())`
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:44;githubbot;600","dcapwell commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406837587
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -75,48 +78,67 @@ public void write(int b) { }
     }
 
     @Test
-    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException
+    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException, TimeoutException
     {
-        final int numBusyWorkers = 2; // Number of busy worker threads to run and gum things up
+        // Number of busy worker threads to run and gum things up. Chosen to be
+        // between the low and high max pool size so the test exercises resizing
+        // under a number of different conditions.
+        final int numBusyWorkers = 2;
         SharedExecutorPool sharedPool = new SharedExecutorPool(""ChangingMaxWorkersMeetsConcurrencyGoalsTest"");
         final AtomicInteger notifiedMaxPoolSize = new AtomicInteger();
 
         LocalAwareExecutorService executor = sharedPool.newExecutor(0, notifiedMaxPoolSize::set, 4, ""internal"", ""resizetest"");
 
+        // Keep feeding the executor work while resizing
+        // so it stays under load.
         AtomicBoolean stayBusy = new AtomicBoolean(true);
-        for (int i = 0; i < numBusyWorkers; i++)
-        {
-            executor.execute(new BusyWork(executor, stayBusy));
-        }
+        Semaphore busyWorkerPermits = new Semaphore(numBusyWorkers);
+        Thread makeBusy = new Thread(() -> {
+            while (stayBusy.get() == true)
+            {
+                try
+                {
+                    if (busyWorkerPermits.tryAcquire(1, MILLISECONDS)) {
+                        executor.execute(new BusyWork(busyWorkerPermits));
+                    }
+                }
+                catch (InterruptedException e)
+                {
+                    // ignore, will either stop looping if done or retry the lock
+                }
+            }
+        });
 
-        final int previousConcurrency = executor.getMaximumPoolSize();
+        makeBusy.start();
         try
         {
-            assertMaxTaskConcurrency(executor, 1);
-            Assert.assertEquals(1, notifiedMaxPoolSize.get());
+            for (int repeat = 0; repeat < 1000; repeat++)
+            {
+                assertMaxTaskConcurrency(executor, 1);
+                Assert.assertEquals(1, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 2);
-            Assert.assertEquals(2, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 2);
+                Assert.assertEquals(2, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 1);
-            Assert.assertEquals(1, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 1);
+                Assert.assertEquals(1, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 3);
-            Assert.assertEquals(3, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 3);
+                Assert.assertEquals(3, notifiedMaxPoolSize.get());
 
-            executor.setMaximumPoolSize(0);
-            Assert.assertEquals(0, notifiedMaxPoolSize.get());
+                executor.setMaximumPoolSize(0);
+                Assert.assertEquals(0, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 4);
-            Assert.assertEquals(4, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 4);
+                Assert.assertEquals(4, notifiedMaxPoolSize.get());
+            }
         }
         finally
         {
             stayBusy.set(false);
-            executor.setMaximumPoolSize(previousConcurrency);
-            executor.shutdownNow();
-            Assert.assertTrue(executor.isShutdown());
-            Assert.assertTrue(executor.awaitTermination(1L, TimeUnit.MINUTES));
+            makeBusy.join(TimeUnit.SECONDS.toNanos(5));
+            Assert.assertFalse(makeBusy.isAlive());
 
 Review comment:
   nit: useful failure message would be nice.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:44;githubbot;600","dcapwell commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406838537
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -174,9 +191,9 @@ void assertMaxTaskConcurrency(LocalAwareExecutorService executor, int concurrenc
         CountDownLatch concurrencyGoal = new CountDownLatch(concurrency);
         for (int i = 0; i < concurrency; i++)
         {
-            executor.execute(new LatchWaiter(concurrencyGoal, 5L, TimeUnit.SECONDS));
+            executor.execute(new LatchWaiter(concurrencyGoal, 5000L, TimeUnit.MILLISECONDS));
         }
         // Will return true if all of the LatchWaiters count down before the timeout
-        Assert.assertEquals(true, concurrencyGoal.await(3L, TimeUnit.SECONDS));
+        Assert.assertEquals(true, concurrencyGoal.await(3000L, TimeUnit.MILLISECONDS));
 
 Review comment:
   is there a reason you changed the units?  the values are the same so not sure if there is a reason.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:44;githubbot;600","dcapwell commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406841137
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -174,9 +191,9 @@ void assertMaxTaskConcurrency(LocalAwareExecutorService executor, int concurrenc
         CountDownLatch concurrencyGoal = new CountDownLatch(concurrency);
         for (int i = 0; i < concurrency; i++)
         {
-            executor.execute(new LatchWaiter(concurrencyGoal, 5L, TimeUnit.SECONDS));
+            executor.execute(new LatchWaiter(concurrencyGoal, 5000L, TimeUnit.MILLISECONDS));
         }
         // Will return true if all of the LatchWaiters count down before the timeout
-        Assert.assertEquals(true, concurrencyGoal.await(3L, TimeUnit.SECONDS));
+        Assert.assertEquals(true, concurrencyGoal.await(3000L, TimeUnit.MILLISECONDS));
 
 Review comment:
   while you are here, can you provide a more meaningful error message? =D
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:44;githubbot;600","jonmeredith commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406844616
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -75,48 +78,67 @@ public void write(int b) { }
     }
 
     @Test
-    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException
+    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException, TimeoutException
     {
-        final int numBusyWorkers = 2; // Number of busy worker threads to run and gum things up
+        // Number of busy worker threads to run and gum things up. Chosen to be
+        // between the low and high max pool size so the test exercises resizing
+        // under a number of different conditions.
+        final int numBusyWorkers = 2;
         SharedExecutorPool sharedPool = new SharedExecutorPool(""ChangingMaxWorkersMeetsConcurrencyGoalsTest"");
         final AtomicInteger notifiedMaxPoolSize = new AtomicInteger();
 
         LocalAwareExecutorService executor = sharedPool.newExecutor(0, notifiedMaxPoolSize::set, 4, ""internal"", ""resizetest"");
 
+        // Keep feeding the executor work while resizing
+        // so it stays under load.
         AtomicBoolean stayBusy = new AtomicBoolean(true);
-        for (int i = 0; i < numBusyWorkers; i++)
-        {
-            executor.execute(new BusyWork(executor, stayBusy));
-        }
+        Semaphore busyWorkerPermits = new Semaphore(numBusyWorkers);
+        Thread makeBusy = new Thread(() -> {
+            while (stayBusy.get() == true)
+            {
+                try
+                {
+                    if (busyWorkerPermits.tryAcquire(1, MILLISECONDS)) {
+                        executor.execute(new BusyWork(busyWorkerPermits));
+                    }
+                }
+                catch (InterruptedException e)
+                {
+                    // ignore, will either stop looping if done or retry the lock
+                }
+            }
+        });
 
-        final int previousConcurrency = executor.getMaximumPoolSize();
+        makeBusy.start();
         try
         {
-            assertMaxTaskConcurrency(executor, 1);
-            Assert.assertEquals(1, notifiedMaxPoolSize.get());
+            for (int repeat = 0; repeat < 1000; repeat++)
+            {
+                assertMaxTaskConcurrency(executor, 1);
+                Assert.assertEquals(1, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 2);
-            Assert.assertEquals(2, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 2);
+                Assert.assertEquals(2, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 1);
-            Assert.assertEquals(1, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 1);
+                Assert.assertEquals(1, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 3);
-            Assert.assertEquals(3, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 3);
+                Assert.assertEquals(3, notifiedMaxPoolSize.get());
 
-            executor.setMaximumPoolSize(0);
-            Assert.assertEquals(0, notifiedMaxPoolSize.get());
+                executor.setMaximumPoolSize(0);
+                Assert.assertEquals(0, notifiedMaxPoolSize.get());
 
-            assertMaxTaskConcurrency(executor, 4);
-            Assert.assertEquals(4, notifiedMaxPoolSize.get());
+                assertMaxTaskConcurrency(executor, 4);
+                Assert.assertEquals(4, notifiedMaxPoolSize.get());
+            }
         }
         finally
         {
             stayBusy.set(false);
-            executor.setMaximumPoolSize(previousConcurrency);
-            executor.shutdownNow();
-            Assert.assertTrue(executor.isShutdown());
-            Assert.assertTrue(executor.awaitTermination(1L, TimeUnit.MINUTES));
+            makeBusy.join(TimeUnit.SECONDS.toNanos(5));
 
 Review comment:
   heh, that's why symbolic names are good. Amazing you can forget what you read in the docs between changing back to the source and modifying.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:52;githubbot;600","jonmeredith commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406844635
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -174,9 +191,9 @@ void assertMaxTaskConcurrency(LocalAwareExecutorService executor, int concurrenc
         CountDownLatch concurrencyGoal = new CountDownLatch(concurrency);
         for (int i = 0; i < concurrency; i++)
         {
-            executor.execute(new LatchWaiter(concurrencyGoal, 5L, TimeUnit.SECONDS));
+            executor.execute(new LatchWaiter(concurrencyGoal, 5000L, TimeUnit.MILLISECONDS));
         }
         // Will return true if all of the LatchWaiters count down before the timeout
-        Assert.assertEquals(true, concurrencyGoal.await(3L, TimeUnit.SECONDS));
+        Assert.assertEquals(true, concurrencyGoal.await(3000L, TimeUnit.MILLISECONDS));
 
 Review comment:
   leftover cruft from local reproduction - will revert and improve message.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 16:52;githubbot;600","dcapwell commented on pull request #534: CASSANDRA-15709 Fix flaky SEPExecutor.changingMaxWorkersMeetsConcurrencyGoalsTest
URL: https://github.com/apache/cassandra/pull/534#discussion_r406836614
 
 

 ##########
 File path: test/unit/org/apache/cassandra/concurrent/SEPExecutorTest.java
 ##########
 @@ -75,48 +78,67 @@ public void write(int b) { }
     }
 
     @Test
-    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException
+    public void changingMaxWorkersMeetsConcurrencyGoalsTest() throws InterruptedException, TimeoutException
     {
-        final int numBusyWorkers = 2; // Number of busy worker threads to run and gum things up
+        // Number of busy worker threads to run and gum things up. Chosen to be
+        // between the low and high max pool size so the test exercises resizing
+        // under a number of different conditions.
+        final int numBusyWorkers = 2;
         SharedExecutorPool sharedPool = new SharedExecutorPool(""ChangingMaxWorkersMeetsConcurrencyGoalsTest"");
         final AtomicInteger notifiedMaxPoolSize = new AtomicInteger();
 
         LocalAwareExecutorService executor = sharedPool.newExecutor(0, notifiedMaxPoolSize::set, 4, ""internal"", ""resizetest"");
 
+        // Keep feeding the executor work while resizing
+        // so it stays under load.
         AtomicBoolean stayBusy = new AtomicBoolean(true);
-        for (int i = 0; i < numBusyWorkers; i++)
-        {
-            executor.execute(new BusyWork(executor, stayBusy));
-        }
+        Semaphore busyWorkerPermits = new Semaphore(numBusyWorkers);
+        Thread makeBusy = new Thread(() -> {
+            while (stayBusy.get() == true)
 
 Review comment:
   nit: or `while (stayBusy.get())`
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 17:13;githubbot;600","jonmeredith commented on pull request #534:
URL: https://github.com/apache/cassandra/pull/534#issuecomment-778320881


   Merged as f9ddaf1841147fc284e802739ca42403aa2816ae


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 17:09;githubbot;600","jonmeredith closed pull request #534:
URL: https://github.com/apache/cassandra/pull/534


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 17:09;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16668,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Apr 18 17:18:29 UTC 2020,,,,,,,All,,,,,,"0|z0dfy8:",9223372036854775807,,,,dcapwell,djoshi,,,Normal,,4.0,,,https://github.com/apache/cassandra/commit/f9ddaf1841147fc284e802739ca42403aa2816ae,,,,,,,,,Resolving test failure.,,,,,"09/Apr/20 18:00;jmeredithco;I'll try and reproduce - it's possible this is some unlucky scheduling on an otherwise busy machine. ;;;","09/Apr/20 19:02;dcapwell;If it helps I use the following to slow things down https://issues.apache.org/jira/browse/CASSANDRA-15650?focusedCommentId=17064073&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17064073. 

I saw this with HIGHER configs and Marcus saw it with HIGHER configs, so slowing down may not be desirable; sharing mostly as a FYI if it helps;;;","09/Apr/20 23:21;jmeredithco;PR here https://github.com/apache/cassandra/pull/534;;;","10/Apr/20 00:05;jmeredithco;CircleCI - [Java8|https://circleci.com/workflow-run/100b06b5-508e-4a9a-949f-1ec67d84b232] [Java11|https://circleci.com/workflow-run/a613c680-0c80-41ac-bd6a-c66ff81e81fd];;;","10/Apr/20 16:46;dcapwell;patch mostly LGTM.  I am currently testing to see how flaky it is before/after.  

Without limiting resources I was able to cause it to fail quickly, running with your patch now.;;;","10/Apr/20 16:59;dcapwell;Been running in a loop for awhile without issue.  Most of my comments are small or nits, so assuming you resolve them I am +1;;;","10/Apr/20 17:14;dcapwell;update looks good, +1;;;","10/Apr/20 18:50;e.dimitrova;[~djoshi], [~dcapwell], is there anything else we are looking for in this one?
Or only a committer? (I know David is not a committer, same as me :D ) ;;;","17/Apr/20 11:41;adelapena;I can commit it if this is reviewed and ready.;;;","17/Apr/20 14:46;jmeredithco;I think it's good to merge, as long as you're happy with it and a +1 from a non-committer is acceptable.

It just needs these two commits merged (fixup on the second) and the commit message updated to record David as the reviewer and you as the merger.
04e45f97377026b92fc42c2dc85633d1c54eac67
596e924a35e5513d9b8e72329f4a897c9631bcb9

I'm happy to do the squash/fixup comments and force-push up to the review branch if you'd like;;;","18/Apr/20 17:04;djoshi;+1;;;","18/Apr/20 17:18;djoshi;Committed. Thanks for the patch [~jmeredithco] and [~dcapwell]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix in-jvm upgrade dtests,CASSANDRA-15708,13297124,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,08/Apr/20 16:27,27/Aug/20 15:02,13/Jul/23 08:39,09/Apr/20 14:34,2.2.17,3.0.21,3.11.7,4.0,4.0-alpha4,Test/dtest/java,,,,0,,,,In-jvm upgrade dtests were broken by CASSANDRA-15539,,dcapwell,ifesdjeen,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 14:34:45 UTC 2020,,,,,,,All,,,,,,"0|z0df1k:",9223372036854775807,,,,dcapwell,ifesdjeen,,,Low,,2.2.x,,,https://github.com/apache/cassandra/commit/479a76df2320856a0bcc5c202d40050c3b3ab14d,,,,,,,,,circle ci,,,,,"08/Apr/20 16:30;marcuse;https://github.com/krummas/cassandra/commits/marcuse/15708

[jvm upgrade dtests|https://circleci.com/gh/krummas/cassandra/3109], [jvm dtests|https://circleci.com/gh/krummas/cassandra/3105], [unit tests|https://circleci.com/gh/krummas/cassandra/3106];;;","08/Apr/20 18:00;dcapwell;Patch LGTM, I am just running the tests without the patch to produce the errors so they are recorded in JIRA.;;;","08/Apr/20 18:02;dcapwell;https://app.circleci.com/pipelines/github/dcapwell/cassandra/193/workflows/6d184c9e-f1b9-435e-bc67-66531ddbb47e/jobs/964

{code}
[junit-timeout] Caused by: java.lang.NoSuchFieldException: cdc_raw_directory
[junit-timeout] 	at java.lang.Class.getDeclaredField(Class.java:2070)
[junit-timeout] 	at org.apache.cassandra.distributed.impl.InstanceConfig.propagate(InstanceConfig.java:221)
{code};;;","08/Apr/20 18:07;dcapwell;[~marcuse] can you file a ticket for the test failure you saw?

{code}
[junit-timeout] Testsuite: org.apache.cassandra.concurrent.SEPExecutorTest
[junit-timeout] Testsuite: org.apache.cassandra.concurrent.SEPExecutorTest Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 7.656 sec
[junit-timeout] 
[junit-timeout] Testcase: changingMaxWorkersMeetsConcurrencyGoalsTest(org.apache.cassandra.concurrent.SEPExecutorTest):	FAILED
[junit-timeout] expected:<true> but was:<false>
[junit-timeout] junit.framework.AssertionFailedError: expected:<true> but was:<false>
[junit-timeout] 	at org.apache.cassandra.concurrent.SEPExecutorTest.assertMaxTaskConcurrency(SEPExecutorTest.java:180)
[junit-timeout] 	at org.apache.cassandra.concurrent.SEPExecutorTest.changingMaxWorkersMeetsConcurrencyGoalsTest(SEPExecutorTest.java:110)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.concurrent.SEPExecutorTest FAILED
{code};;;","08/Apr/20 18:07;dcapwell;LGTM +1;;;","09/Apr/20 05:57;marcuse;thanks, created CASSANDRA-15709 for the test failure;;;","09/Apr/20 12:09;marcuse;tests for all branches:

|| unit tests || jvm dtest || jvm upgrade tests||
| [2.2|https://circleci.com/gh/krummas/cassandra/3120] [3.0|https://circleci.com/gh/krummas/cassandra/3117] [3.11|https://circleci.com/gh/krummas/cassandra/3115] [trunk|https://circleci.com/gh/krummas/cassandra/3123] | [2.2|https://circleci.com/gh/krummas/cassandra/3119] [3.0|https://circleci.com/gh/krummas/cassandra/3118]  [3.11|https://circleci.com/gh/krummas/cassandra/3116] [trunk|https://circleci.com/gh/krummas/cassandra/3122] | [3.0|https://circleci.com/gh/krummas/cassandra/3131] [3.11|https://circleci.com/gh/krummas/cassandra/3132] [trunk|https://circleci.com/gh/krummas/cassandra/3136]

;;;","09/Apr/20 13:38;ifesdjeen;Thank you for the patch! +1 from my side. The only (minor) suggestion is to maybe warn/log on the missing field. If we want to bring previous behaviour of failing/non failing on config fields, we shouold change `Config` API. But I'm not sure if it's worth doing. If you like suggestion, you can just do it on commit (or ignore otherwise).;;;","09/Apr/20 14:34;marcuse;committed but forgot adding the log message, will ninja that in;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix cqlsh output test,CASSANDRA-15707,13297028,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,eduard.tudenhoefner,eduard.tudenhoefner,eduard.tudenhoefner,08/Apr/20 09:52,21/Dec/20 08:08,13/Jul/23 08:39,09/Apr/20 12:57,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"https://ci-cassandra.apache.org/view/branches/job/Cassandra-trunk/45/testReport/cqlshlib.test.test_cqlsh_output/TestCqlshOutput/

{code}
Sequences differ: ['CRE[438 chars]nt', "") WITH additional_write_policy = '99p'"",[710 chars], ''] != ['CRE[438 chars]nt', ') WITH bloom_filter_fp_chance = 0.01', ""[711 chars], '']

First differing element 17:
"") WITH additional_write_policy = '99p'""
') WITH bloom_filter_fp_chance = 0.01'

Diff is 1475 characters long. Set self.maxDiff to None to see it.
    """"""Fail immediately, with the given message.""""""
>>  raise self.failureException('Sequences differ: [\'CRE[438 chars]nt\', "") WITH additional_write_policy = \'99p\'"",[710 chars], \'\'] != [\'CRE[438 chars]nt\', \') WITH bloom_filter_fp_chance = 0.01\', ""[711 chars], \'\']\n\nFirst differing element 17:\n"") WITH additional_write_policy = \'99p\'""\n\') WITH bloom_filter_fp_chance = 0.01\'\n\nDiff is 1475 characters long. Set self.maxDiff to None to see it.')
{code}",,blerer,eduard.tudenhoefner,mck,,,,,,,,,"nastra commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 10:39;githubbot;600","michaelsembwever commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#discussion_r405439570
 
 

 ##########
 File path: CHANGES.txt
 ##########
 @@ -1,4 +1,5 @@
 4.0-alpha4
+ * Fix cqlsh output test (CASSANDRA-15707)
 
 Review comment:
   i'm not too sure we need non-user entries in `CHANGES.txt`
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 11:00;githubbot;600","michaelsembwever commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#discussion_r405439570
 
 

 ##########
 File path: CHANGES.txt
 ##########
 @@ -1,4 +1,5 @@
 4.0-alpha4
+ * Fix cqlsh output test (CASSANDRA-15707)
 
 Review comment:
   i'm not too sure we need non-user-facing entries in `CHANGES.txt`
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 11:01;githubbot;600","nastra commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#discussion_r405456766
 
 

 ##########
 File path: CHANGES.txt
 ##########
 @@ -1,4 +1,5 @@
 4.0-alpha4
+ * Fix cqlsh output test (CASSANDRA-15707)
 
 Review comment:
   not sure either...I can remove those as they cause merge conflicts all the time ;)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 11:35;githubbot;600","nastra commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#discussion_r405457350
 
 

 ##########
 File path: CHANGES.txt
 ##########
 @@ -1,4 +1,5 @@
 4.0-alpha4
+ * Fix cqlsh output test (CASSANDRA-15707)
 
 Review comment:
   there are a bunch of entries in CHANGES.txt that are for test fixes, so I did the same but personally either work for me
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 11:36;githubbot;600","blerer commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#discussion_r405490802
 
 

 ##########
 File path: CHANGES.txt
 ##########
 @@ -1,4 +1,5 @@
 4.0-alpha4
+ * Fix cqlsh output test (CASSANDRA-15707)
 
 Review comment:
   Normally it is only user impacting changes. Not sure why people put them there.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 12:37;githubbot;600","nastra commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#discussion_r405508253
 
 

 ##########
 File path: CHANGES.txt
 ##########
 @@ -1,4 +1,5 @@
 4.0-alpha4
+ * Fix cqlsh output test (CASSANDRA-15707)
 
 Review comment:
   makes perfect sense to mention only user-relevant things in CHANGES.txt, so I removed my changes there
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 13:05;githubbot;600","nastra commented on issue #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527#issuecomment-611585825
 
 
   committed as 3db7796c1b7aa0e953fab621c0334c576cc7da35
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 15:18;githubbot;600","nastra commented on pull request #527: CASSANDRA-15707: Fix cqlsh output test
URL: https://github.com/apache/cassandra/pull/527
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 15:18;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,eduard.tudenhoefner,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 12:57:38 UTC 2020,,,,,,,All,,,,,,"0|z0deg8:",9223372036854775807,,,,mck,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/3db7796c1b7aa0e953fab621c0334c576cc7da35,,,,,,,,,nosetests test/test_cqlsh_output.py,,,,,"08/Apr/20 10:40;eduard.tudenhoefner;Passes now locally
{code}
$ nosetests test/test_cqlsh_output.py
nose.config: INFO: Ignoring files matching ['^\\.', '^_', '^setup\\.py$']
test_blob_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_boolean_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_cancel_statement (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_color_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_columnless_key_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_count_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_describe_cluster_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_describe_columnfamilies_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_describe_columnfamily_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_describe_keyspace_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_describe_schema_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_empty_cf_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_empty_line (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_eof_prints_newline (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_exit_prints_no_newline (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_help (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_help_types (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_multiline_statements (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_no_color_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_no_prompt_or_colors_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_null_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_numeric_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_printing_cql_error (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_printing_integrity_error (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_printing_lex_error (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_printing_parse_error (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_prompt (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_show_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_static_cf_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_string_output_ascii (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_string_output_utf8 (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_timestamp_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_user_types_output (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
test_user_types_with_collections (cqlshlib.test.test_cqlsh_output.TestCqlshOutput) ... ok
cqlshlib.test.test_cqlsh_output.testrun_cqlsh ... ok
cqlshlib.test.test_cqlsh_output.testcall_cqlsh ... ok

----------------------------------------------------------------------
XML: /home/nastra/Development/workspace/cassandra/pylib/cqlshlib/nosetests.xml
----------------------------------------------------------------------
Ran 36 tests in 24.021s

OK
{code};;;","08/Apr/20 10:59;mck;||branch||circleci||jenkins||
|[trunk_15707|https://github.com/apache/cassandra/compare/trunk...nastra:CASSANDRA-15707]|[circleci|https://circleci.com/gh/nastra/workflows/cassandra/tree/CASSANDRA-15707]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/41/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/41]|;;;","09/Apr/20 07:03;eduard.tudenhoefner;Relevant cqlsh test on Jenkins is [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-cqlsh-tests/35/], which shows that the test is fixed;;;","09/Apr/20 12:57;blerer;Committed into trunk at 3db7796c1b7aa0e953fab621c0334c576cc7da35;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix cqlsh completion test,CASSANDRA-15706,13297019,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,eduard.tudenhoefner,eduard.tudenhoefner,eduard.tudenhoefner,08/Apr/20 09:33,21/Dec/20 08:08,13/Jul/23 08:39,09/Apr/20 09:16,4.0,4.0-alpha4,,,,Legacy/Testing,,,,0,pull-request-available,,,"This has been failing for a while now because *system_views* and *system_virtual_schema* are occuring in the completion.

{code}
cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion.test_complete_in_drop_keyspace (from nosetests)

Failing for the past 1 build (Since Unstable#42 )
Took 2 sec.
Error Message
Items in the second set but not the first:
'system_views'
'system_virtual_schema'
    """"""Fail immediately, with the given message.""""""
>>  raise self.failureException(""Items in the second set but not the first:\n'system_views'\n'system_virtual_schema'"")
{code}",,blerer,eduard.tudenhoefner,,,,,,,,,,"nastra commented on pull request #525: CASSANDRA-15706: Mark system_views / system_virtual_schema as system keyspaces for cqlsh
URL: https://github.com/apache/cassandra/pull/525
 
 
   This is so that those keyspaces don't show up in tab completions. This
   also fixes the cqlsh completion tests.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 09:45;githubbot;600","blerer commented on pull request #525: CASSANDRA-15706: Mark system_views / system_virtual_schema as system keyspaces for cqlsh
URL: https://github.com/apache/cassandra/pull/525
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 09:25;githubbot;600","blerer commented on issue #525: CASSANDRA-15706: Mark system_views / system_virtual_schema as system keyspaces for cqlsh
URL: https://github.com/apache/cassandra/pull/525#issuecomment-611428462
 
 
   Committed manually.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 09:25;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,eduard.tudenhoefner,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 09:25:03 UTC 2020,,,,,,,All,,,,,,"0|z0dee8:",9223372036854775807,,,,blerer,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/b3f27381a5efcf3d06bceb211c72479abcd6004a,,,,,,,,,Start up cqlsh and try *CREATE TABLE ...* completions. No system keyspaces should show up during completions,,,,,"08/Apr/20 09:48;eduard.tudenhoefner;{code}
$ nosetests test/test_cqlsh_completion.py 
nose.config: INFO: Ignoring files matching ['^\\.', '^_', '^setup\\.py$']
test_complete_command_words (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_alter_columnfamily (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_batch (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_create_columnfamily (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_create_index (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_create_keyspace (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_create_table (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_delete (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
Tests for Cassandra-10733 ... ok
test_complete_in_drop (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_drop_columnfamily (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_drop_index (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_drop_keyspace (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_insert (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_select (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_string_literals (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_truncate (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_update (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_use (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_in_uuid (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
test_complete_on_empty_string (cqlshlib.test.test_cqlsh_completion.TestCqlshCompletion) ... ok
cqlshlib.test.test_cqlsh_completion.testrun_cqlsh ... ok

----------------------------------------------------------------------
XML: /home/nastra/Development/workspace/cassandra/pylib/cqlshlib/nosetests.xml
----------------------------------------------------------------------
Ran 22 tests in 165.902s

OK
{code}
Passes now locally as well;;;","08/Apr/20 10:34;eduard.tudenhoefner;Relevant cqlsh test on Jenkins is [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-cqlsh-tests/34/], which shows that the test is fixed;;;","09/Apr/20 09:16;blerer;Committed into trunk at b3f27381a5efcf3d06bceb211c72479abcd6004a;;;","09/Apr/20 09:25;blerer;[~eduard.tudenhoefner] Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
copyutil.py uses Exception.message which doesn't exist in Python 3,CASSANDRA-15702,13296854,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,eduard.tudenhoefner,eduard.tudenhoefner,eduard.tudenhoefner,07/Apr/20 15:12,07/Mar/23 11:52,13/Jul/23 08:39,09/Apr/20 15:48,4.0,4.0-alpha4,,,,Tool/cqlsh,,,,0,pull-request-available,,,Python 3 deprecated and removed the use of Exception.message.  The purpose of this ticket is to convert *Exception.message* to something that is Python 3 compatible,,eduard.tudenhoefner,mck,stefania,,,,,,,,,"nastra commented on pull request #521: CASSANDRA-15702: Use Exception.message in copyutil.py only if it exists
URL: https://github.com/apache/cassandra/pull/521
 
 
   Exception.message was removed in Python 3, so only refer to it when it
   exists on an Exception instance.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 15:17;githubbot;600","stef1927 commented on issue #521: CASSANDRA-15702: Use Exception.message in copyutil.py only if it exists
URL: https://github.com/apache/cassandra/pull/521#issuecomment-611602646
 
 
   Committed as 58015fd681dadbe31068ecfb4f4c0eb506de8efa, you can close the pull request.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 15:50;githubbot;600","nastra commented on pull request #521: CASSANDRA-15702: Use Exception.message in copyutil.py only if it exists
URL: https://github.com/apache/cassandra/pull/521
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 16:29;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,eduard.tudenhoefner,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 15:48:46 UTC 2020,,,,,,,All,,,,,,"0|z0dddk:",9223372036854775807,,,,stefania,,,,Low,,5.0,,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=58015fd681dadbe31068ecfb4f4c0eb506de8efa",,,,,,,,,https://github.com/apache/cassandra/pull/521,,,,,"07/Apr/20 15:26;mck;[~Anthony Grasso], are you interested in reviewing this?;;;","09/Apr/20 14:35;stefania;Patch looks good, running cqlsh tests here: [53|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/53/];;;","09/Apr/20 15:48;stefania;CI was fine, the only error was a code style compliance issue (missing blank line) introduced by CASSANDRA-15679, which I fixed on commit.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance regression on internode messaging,CASSANDRA-15700,13296801,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,sbtourist,sbtourist,sbtourist,07/Apr/20 11:00,16/Mar/22 13:21,13/Jul/23 08:39,29/Jun/20 16:57,4.0,4.0-beta1,,,,Messaging/Internode,,,,0,pull-request-available,,,"Me and [~jasonstack] have been investigating a performance regression affecting 4.0 during a 3 nodes, RF 3 write throughput test with a timeseries like workload, as shown in this plot, where blue is 3.11 and orange is 4.0:

!Oss40vsOss311.png|width=389,height=214!

 It's been a bit of a long investigation, but two clues ended up standing out:
1) An abnormal number of expired messages on 4.0 (as shown in the attached  system log), while 3.11 has almost none.
2) An abnormal GC activity (as shown in the attached gc log).

Turns out the two are related, as the [on expired callback|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundConnection.java#L462] creates a huge amount of strings in the {{id()}} call. The next question is what causes all those message expirations; we thoroughly reviewed the internode messaging code and the only issue we could find so far is related to the ""batch pruning"" calls [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L81] and [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundMessageQueue.java#L188]: it _seems_ too much time is spent on those, causing the event loop to fall behind in processing the rest of the messages, which will end up being expired. This is supported by the analysis of the collapsed stacks (after fixing the GC issue):
{noformat}
(tprint (top-aggregated-calls oss40nogc ""EventLoopDelivery:doRun"" 5))
org/apache/cassandra/net/OutboundConnection$EventLoopDelivery:doRun 3456
org/apache/cassandra/net/OutboundMessageQueue:access$600 1621
org/apache/cassandra/net/PrunableArrayQueue:prune 1621
org/apache/cassandra/net/OutboundMessageQueue$WithLock:close 1621
org/apache/cassandra/net/OutboundMessageQueue:pruneInternalQueueWithLock 1620
{noformat}

Those are the top 5 sampled calls from {{EventLoopDelivery#doRun()}} which spends half of its time pruning. But only a tiny portion of such pruning time is spent actually expiring:
{noformat}
(tprint (top-aggregated-calls oss40nogc ""OutboundMessageQueue:pruneInternalQueueWithLock"" 5))
org/apache/cassandra/net/OutboundMessageQueue:pruneInternalQueueWithLock 1900
org/apache/cassandra/net/PrunableArrayQueue:prune 1894
org/apache/cassandra/net/OutboundMessageQueue$1Pruner:onPruned 147
org/apache/cassandra/net/OutboundConnection$$Lambda$444/740904487:accept 147
org/apache/cassandra/net/OutboundConnection:onExpired 147
{noformat}

And indeed, the {{PrunableArrayQueue:prune()}} self time is dominant:
{noformat}
(tprint (top-self-calls oss40nogc ""PrunableArrayQueue:prune"" 5))
org/apache/cassandra/net/PrunableArrayQueue:prune 1718
org/apache/cassandra/net/OutboundConnection:releaseCapacity 27
java/util/concurrent/ConcurrentHashMap:replaceNode 19
java/util/concurrent/ConcurrentLinkedQueue:offer 16
java/util/concurrent/LinkedBlockingQueue:offer 15
{noformat}

That said, before proceeding with a PR to fix those issues, I'd like to understand: what's the reason to prune so often, rather than just when polling the message during delivery? If there's a reason I'm missing, let's talk about how to optimize pruning, otherwise let's get rid of that.",,aleksey,benedict,dnk,Gerrrr,jasonstack,jeromatron,PuerTea,samt,sbtourist,stefania,vinaykumarcse,"sbtourist commented on pull request #531: CASSANDRA-15700
URL: https://github.com/apache/cassandra/pull/531
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 11:15;githubbot;600","smiklosovic closed pull request #531:
URL: https://github.com/apache/cassandra/pull/531


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15766,,,,,,,,CASSANDRA-14747,"08/Apr/20 17:19;sbtourist;Oss40patchedvsOss311.png;https://issues.apache.org/jira/secure/attachment/12999352/Oss40patchedvsOss311.png","06/Apr/20 22:59;sbtourist;Oss40vsOss311.png;https://issues.apache.org/jira/secure/attachment/12999226/Oss40vsOss311.png","06/Apr/20 23:02;sbtourist;oss40.gc;https://issues.apache.org/jira/secure/attachment/12999225/oss40.gc","07/Apr/20 10:53;sbtourist;oss40_nogc.tar.xz;https://issues.apache.org/jira/secure/attachment/12999223/oss40_nogc.tar.xz","06/Apr/20 23:02;sbtourist;oss40_system.log;https://issues.apache.org/jira/secure/attachment/12999224/oss40_system.log",,,,,,,,,,5.0,sbtourist,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,Performance Regression Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jun 29 16:57:16 UTC 2020,,,,,,,All,,,,,,"0|z0dd1k:",9223372036854775807,,,,aleksey,,,,Normal,,4.0-alpha,4.0-alpha1,,"[56f24f78f62c9945fae40790e3ed09893fa1ed18|https://github.com/apache/cassandra/commit/56f24f78f62c9945fae40790e3ed09893fa1ed18]",,,,,,,,,See attached performance test plots. Also see unit tests.,,,,,"07/Apr/20 12:18;benedict;Thanks for the bug report, this is very valuable.

bq. what's the reason to prune so often, rather than just when polling the message during delivery?

This is the only way (presently) to know what deadline the eventLoop needs to wake up on, to ensure we do not let expiring messages accumulate indefinitely, without maintaining an auxiliary structure of expirations or introducing a more sophisticated queue for maintaining QoS.  It is not an astonishing surprise to see this report, though we had been reassured by this path's absence so far in other testing, as we consciously implemented a suboptimal approach to keep the patch tractable.  We expected that this work would be self limiting - a cluster _shouldn't_ have a backlog that dominates unless there are network problems, or if the receiving node is getting backed up, in which case you would expect expiry itself to dominate since the cost of pruning _should_ be quite low.  Clearly that isn't the case here; fortunately there are numerous solutions to this problem, none of which are super onerous.;;;","07/Apr/20 12:35;sbtourist;{quote}This is the only way (presently) to know what deadline the eventLoop needs to wake up on, to ensure we do not let expiring messages accumulate indefinitely
{quote}
I'm not sure I follow, it would be great if you could elaborate more, maybe with some pointers on the code. AFAIU, the ""event loop"" (assuming you mean the {{EventLoopDelivery}} class) is potentially scheduled at every new message, then rescheduling itself based on the number of pending bytes and the writable state; this means, as long as there are pending bytes, and even if no new messages arrive, it will keep rescheduling itself and getting rid of expired messages along the way, so I don't see how they could accumulate indefinitely, although I might very well missing something. Or you just mean such ""rescheduling to expire"" is simply inefficient?;;;","07/Apr/20 13:40;benedict;None of the above factors _guarantee_ that work is scheduled promptly.  Delivery will only be scheduled at enqueue if it is not already processing outstanding work, and though iirc the enqueue operation will itself forcefully prune in some circumstances, there are anyway no guarantees that new messages will be arriving to this connection.  Delivery will only reschedule itself once the outbound TCP channel has room, and so in a network outage that does not terminate the connection or stalled recipient process (for example), where it is making no (or very slow) progress, it will not be woken up to process further pending messages.;;;","07/Apr/20 14:52;sbtourist;{quote}Delivery will only be scheduled at enqueue if it is not already processing outstanding work, and though iirc the enqueue operation will itself forcefully prune in some circumstances, there are anyway no guarantees that new messages will be arriving to this connection.
{quote}
Correct.
{quote}Delivery will only reschedule itself once the outbound TCP channel has room, and so in a network outage that does not terminate the connection or stalled recipient process (for example), where it is making no (or very slow) progress, it will not be woken up to process further pending messages.
{quote}
Isn't this a problem regardless, given the current implementation? That is, we currently prune upon:

1) Receiving a new message.

2) Finishing processing messages in an event loop run.

As we said, we have no guarantee we'll keep receiving messages, which rules #1 out, and if the event loop is stalling (i.e. due to network issues or whatever) we'll not run the message processing loop anyway, which rules #2 out and leaves us with the same problem of leaving expired messages in the queue.

If this really is the problem we want to solve, which is a bit of an edge case but fine, something as easy as scheduling a background pruning at the earliest expiry date before ""stalling"" (i.e. before setting the connection as unwritable) would do it (possibly using a Hashed Wheel Timer because the Netty scheduler sucks a bit at scheduled tasks).;;;","07/Apr/20 15:22;benedict;So, I'm actually misremembering: though I had thought we scheduled exactly what you suggest (for which we must use something like {{earliestExpiresAt}}, and for which it would need to be maintained) we actually only use it to avoid wasted work performing a prune on enqueue when it is unnecessary to avoid head-of-line blocking.

Either way, it's the same basic problem (i.e. that we only maintain the minimum value gating prune work), and the solution is probably to maintain some kind of minimal histogram of the expiration times, or otherwise pick a number that isn't the minimum but amortises the cost of refreshing the value over multiple operations, that permits us to prune at worst a little later than we might while bounding the number of expired messages we leave in place.

It looks like we only schedule regular prunes when disconnected; we should probably fix that too.;;;","07/Apr/20 15:51;benedict;Sorry, I realise I never made clear in either of my messages a critical fact: the point of these prunes is not primarily to prune, but to determine when we must next prune by.  It determines this precisely today, and only to the next precise point, which is of course invalidated whenever we deliver the soonest-to-expire message.  However it should probably be approximate, and potentially also determine multiple such points at once, so that the linear cost of deciding this can be amortised effectively.;;;","07/Apr/20 17:50;sbtourist;{quote}So, I'm actually misremembering: though I had thought we scheduled exactly what you suggest
{quote}
It's ok, I do also forget most stuff past the 24hrs cut-off :)

On a more serious note, I get your point about the need to be precise VS amortising costs, but wondering what data we have to help with such decision, if any.

We definitely have evidence that the _current_ implementation massively affects performance, and given the need to stabilise the codebase upon the 4.0 release, I would personally opt for a fix which doesn't increase overall complexity, and rather tries to strike a balance between said complexity and desired accuracy and performance, along the lines of:

1) Remove pruning and expire time tracking from enqueue.

2) Remove pruning from the event loop delivery run.

3) During event loop delivery:

a) Compute a weighted average of each message expire time.

b) If potentially stalling (flushing over the high water mark), schedule a background pruning using the computed expire time.

c) If resuming from stalling before the pruning deadline, cancel it (because we'll keep pruning as we process). 

This should be reasonably easy to implement, have decent accuracy, and perform well, as the expire deadline would be computed on the single threaded event loop (no contention) and the pruner would only run if actually stalling (which should *not* be the case most of the time).

How does that sound? Am I missing anything?

 ;;;","07/Apr/20 19:12;benedict;{quote}Remove pruning and expire time tracking from enqueue.
{quote}
This would be a regression from 3.0 unfortunately, though the semantic for 3.0 was a to use the head of the list, which we could potentially restore (not necessarily as trivially as might be desired, but it is achievable).
{quote}Compute a weighted average of each message expire time.
{quote}
I assume you mean to maintain a guess of the number of items we _on average_ have in the queue? In which case I am fairly strongly -1 on this category approach. One of the features running through this work is that we make strong guarantees, and this would weaken that.  I would prefer to be able to stipulate that (e.g.) we never reject an {{enqueue}} if more than 20% of the queue is already expired.
{quote}I would personally opt for a fix which doesn't increase overall complexity
{quote}
Complexity is in the eye of the beholder :)  I think the main goal should be minimising risk to delivery. The stability of this patch has been tested _fairly_ extensively and so far held up, so messing with important control flow semantics is something I would prefer to avoid.

I think the least risky approach is to change how we compute and select the expiration time we use for triggering an expiration. This also has the benefit of maintaining well-define guarantees, is simple, and modifies no behaviours besides the selection of this value. For instance, picking an expiration time that we expect to contain a certain amount of data, then simply tracking _accurately_ on the delivery thread that it really does so. Once it doesn't, we prune to pick a better value.

More specifically (e.g.), you pick a time {{t}}, such that you expect the set of messages with expiration less than {{t}}, say {{M(<t)}}, should collectively occupy no more than 20% of the connection's data or item limit. As you introduce new messages, you simply record the total amount of data represented by {{M(<t)}}, and if it crosses the threshold, you recompute picking a new {{t}}. Assuming a random distribution of expiration this should be amortised constant time, as whatever {{t}} we pick first, our new {{t}} will be recomputed only {{O(1/n)}} times, at {{O(n)}} cost.

This has the advantage of changing none of the important behaviours, so requires only isolated analysis of this particular calculation, and the calculation is simple.

FWIW, we should also exclude the possibility that there really are more legitimate expirations occurring. The new patch properly enforces timeouts for an operation _and its responses_, so we may also be seeing a different behaviour as we enforce these timeouts accurately.  3.0 was much more lax in this regard, and there is a real chance that this is involved given the presence of real expirations.  It _might_ be that the time spent pruning is immaterial given the impact on progress of this behavioural change. Previously we may have been happily serving operations that had actually had their timeout elapse (for instance). Unfortunately I don't know enough about the workload you are running to say much with confidence. Either way, this is a good opportunity to patch this known weakness, but further investigation might be warranted to isolate possibly multiple causes of the aggregate behaviour you are seeing.

I won't be able to participate in this discussion for a week or two, but I expect [~aleksey] will get involved soon. Either way, there is no need to solve this on such a short time horizon I don't think.;;;","07/Apr/20 23:58;benedict;I think anyway I've let us get ahead of ourselves, in my race to respond before disappearing on leave for a period.  I hadn't had time to really look at the code.  Aleksey will be better placed to talk about this, as his memory and understanding of the pruner is likely superior to mine.  The semantics of pruning are actually more intrinsically linked to the queuing than I had remembered, so all of the above suggestions by both of us probably miss the mark.  Perhaps Aleksey and I can discuss it when I return from leave, and we can make a concrete proposal.

It remains a relatively isolated problem, and nothing that I would be concerned about causing a delay to GA.

In the meantime, it would be great if you could investigate the possibility that the modified timeout semantics for internode message delivery could also be involved.;;;","08/Apr/20 10:38;sbtourist;{quote}This would be a regression from 3.0 unfortunately
{quote}
Oh that's a good point, forgot we do that in 3.0+ too. We can keep the {{enqueue()}} pruning, as that's not the worst offender (see collapsed stacks).
{quote}I assume you mean to maintain a guess of the number of items we _on average_ have in the queue?
{quote}
No, I meant to compute the ""next expire time"" as an approximation of the expire time of the processed messages, rather than relying on exactly computing it via the pruner at every event loop delivery run.
{quote}One of the features running through this work is that we make strong guarantees, and this would weaken that.  I would prefer to be able to stipulate that (e.g.) we never reject an {{enqueue}} if more than 20% of the queue is already expired.
{quote}
How is that related to what we're discussing? Enqueuing new messages is regulated by memory limiting, so that's what gives us strong guarantees; also, we do already prune the backlog if memory limits are met.
{quote}messing with important control flow semantics is something I would prefer to avoid.
{quote}
I'd still like to understand how the pruning approach we're discussing here is important to the control flow semantics at all, as I don't think I've got a clear answer yet, although it might be me missing the point. What I've heard/understood is:

1) It protects us against saturating memory upon network stalls.

2) It protects us against saturating memory upon too many expired messages.

AFAIU, none of those is accurate, as the current implementation doesn't satisfy #1, and #2 is covered by the memory limits implementation.
{quote}I think the least risky approach is to change how we compute and select the expiration time we use for triggering an expiration. This also has the benefit of maintaining well-define guarantees, is simple, and modifies no behaviours besides the selection of this value.
{quote}
This is something that can definitely be tried first, to reduce the amount of pruner runs. I will test this next.
{quote}More specifically (e.g.), you pick a time {{t}}, such that you expect the set of messages with expiration less than {{t}}, say {{M(<t)}}, should collectively occupy no more than 20% of the connection's data or item limit.
{quote}
This is an example of borderline unnecessary complexity in my book :) The reason is, memory limits are already implemented via a separate mechanism and controlled by 3 different config properties (\{{internode_application_send_queue_*}}), so why adding an additional mechanism and 4th config property (your 20% threshold)? In other words, my definition of complexity is whatever additional piece of code or configuration which is not justified by an actual use case or doesn't solve an actual problem, and I can hardly see what problem we're trying to solve with that. If I'm missing anything, happy to hear further explanations.
{quote}FWIW, we should also exclude the possibility that there really are more legitimate expirations occurring. The new patch properly enforces timeouts for an operation _and its responses_, so we may also be seeing a different behaviour as we enforce these timeouts accurately.
{quote}
Good point, I wouldn't exclude that, but after a thorough review (as thorough as a 2 days review of a large piece of unknown code can be) we leaned against that being the case because:

1) We disabled cross node timeouts, to make 4.0 behave as similarly as possible to 3.11, and to remove some of the complexity around computing the expire time based on the creation time (which being done via cross-node time translations could be suffering from subtle bugs).

2) The collapsed stacks clearly show most time is spent by pruning itself, that is by iterating the queue, rather than by expiring messages: if time were spent by actually expiring messages, it would have shown in the stacks.
{quote}It remains a relatively isolated problem, and nothing that I would be concerned about causing a delay to GA.
{quote}
This honestly worries me quite a bit: on what ground you say this is an isolated problem? And on what ground isn't a massive performance regression a concern for our GA date?;;;","08/Apr/20 13:15;benedict;bq. on what ground you say this is an isolated problem?

This appears to be an issue in communication: the word isolated refers to the problem _code_.  Please be assured I consider this a _serious_ problem, I am just unconcerned about (any difficulty) resolving it.  There is no need to panic and rush a fix.

bq. I’d still like to understand how the pruning approach we're discussing here is important to the control flow semantics at all

In the word of Dirk Gently: everything’s connected :)  Your prior alternative proposal to replace the existing semantics involved two distinct changes to control flow, namely introducing a hash timer wheel (something I’m in favour of generally, but demonstrably a control flow change, and preferable to defer until 5.0) and eliminating the expiry on enqueue.  I just consider these kinds of change to be riskier at this stage.

bq. The collapsed stacks clearly show most time is spent by pruning itself, that is by iterating the queue, rather than by expiring messages

I believe it shows as much as 10% of time in real expirations?  That is not insignificant, and given how relatively cheap evaluating an expiration is, it _may_ well be the case that the algorithmic inefficiency we are discussing is incidental to the behaviour.

bq. to make 4.0 behave as similarly as possible to 3.11

This leaves a significant gap still: 4.0 will use the local node message arrival to determine the timeout for its response, so there is still plenty of scope for messages to expire ahead of 3.x

bq. No, I meant to compute the ""next expire time"" as an approximation of the expire time of the processed messages, rather than relying on exactly computing it via the pruner at every event loop delivery run.
bq. We can keep the enqueue() pruning, as that's not the worst offender (see collapsed stacks).

The enqueue pruning is cheap because we compute the minimum expiration time, so it is infrequently called; if we only guess this number now, we offer no guarantees the balance of new messages dropped in favour of expired messages.

bq. so why adding an additional mechanism and 4th config property (your 20% threshold)

Is this an additional mechanism? We already have a mechanism, we just pick our number differently.  Guessing at a number is also a mechanism, surely?  How would we configure the guess algorithm, and why wouldn’t we expose its parameters?  I had assumed we would not make this configurable, in the same way we would not make the assumptions of any guess algorithm configurable, since its purpose is just to guarantee algorithmic complexity and bound how far from our memory limits we permit expired messages to be preferred over unexpired messages.

Honestly though it sounds like there is not much between our proposals now, which is reassuring, so perhaps we should focus on the common ground we have.  However, I am now on leave so I would appreciate it if you can be patient until I return to continue this discussion.  I would also like to look more closely again at the existing behaviour, as the pruning is closely related to the migration of new records from the MPSC queue to the internal queue.  I have been trying to respond promptly to your queries, but I feel that in doing so my responses have not been sufficiently well considered, and I would prefer to take time to produce a complete and coherent view and proposal.  Is that acceptable to you?;;;","08/Apr/20 17:29;sbtourist;{quote}Honestly though it sounds like there is not much between our proposals now, which is reassuring, so perhaps we should focus on the common ground we have. 
{quote}
Indeed, I think we agree on the necessity to fix this in the least risky way, which it seems to mean keeping the current pruning implementation and accuracy, but avoiding it to be run *at every single delivery* (although maybe you dispute this being the problem, but the collapsed stacks speak soundly about that).

In the spirit of that, I've fixed the message queue algorithm to compute the expiration deadline in a way that can be used to actually run the pruning task _only after such deadline_. I'll give it another review on my own and possibly add more unit tests (please note the current implementation seems to had none at all), but performance tests now look much better (orange is patched 4.0):

!Oss40patchedvsOss311.png|width=556,height=299!

Here's the branch: [https://github.com/sbtourist/cassandra/commits/CASSANDRA-15700]

I understand there's no _panic_ to fix it, and you'll be away the next couple weeks, but this means realistically postponing this issue for at least 3 weeks, which will add to the delay we're already accumulating in 4.0 for other reasons, so maybe you could delegate this to [~aleksey] as you mentioned?;;;","08/Apr/20 18:10;aleksey;I'll take a look soonish.;;;","08/Apr/20 19:07;benedict;Your proposed solution sounds great, so there's not much use for me here.  Aleksey is the more natural reviewer anyway.;;;","09/Apr/20 09:26;sbtourist;Thank you both.;;;","09/Apr/20 11:17;sbtourist;Added some more thorough unit tests in the meantime.;;;","20/May/20 14:14;aleksey;On {{id()}} change: the only frequent callers of it are {{onOverloaded()}} and {{onExpired()}} callbacks, via {{noSpamLogger.warn()}}. To get rid of these we could pass {{OutboundConnection}} instance as argument itself instead of explicitly invoking {{id()}}, as {{toString()}} is overloaded to return {{id()}}, and will only be invoked by formatter if we should log - no more than once in every 30 seconds. I think the code is a bit cleaner without that change, though don't mind it too strongly.;;;","20/May/20 15:11;benedict;That part could also be left to CASSANDRA-15766, which I think is also addressing this and will do so in a consistent manner across various NoSpamLogger call sites.;;;","03/Jun/20 13:32;aleksey;I *think* the way we update times at the end of pruning in this patch is potentially problematic, but I might be getting this wrong, so pardon me for any obvious foolishness. Was thinking about this particular scenario:

1. After partial consumption/delivery, thread {{t1}} updates {{earliestExpiryTime}} with some high value (say, all messages up to now have been with long timeouts); gets descheduled for a period of time.
2. A different thread, {{t2}}, invokes {{add()}} with an lots of short-expiration messages, all skipping purging, as the lock is being held by {{t1}}. Repeatedly updates both {{earliestExpiryTime}} and {{nextExpirationDeadline}} with a small value
3. Thread {{t1}} is now scheduled again, sets {{nextExpirationDeadline}} to the high value from step (1)

If there are no {{add()}} incoming and delivery has stalled, we can now hold an arbitrary # of messages added at step 2, as we use {{nextExpirationDeadline}} value to determine whether or not pruning is necessary.;;;","03/Jun/20 18:24;sbtourist;[~aleksey] thanks for reviewing: getting back to this after two months and having to rebuild the whole thing in my mind, made me realize how complex this is, and that I should have put a couple more comments, so apologies and kudos for getting through it all alone :)

That said, to answer your question straight: the race you point out is absolutely correct, and was unfortunately overlooked by myself, but there should be an easy fix. Before going with that, I think I have to clarify first why I introduced the new {{nextExpirationDeadline}} variable along {{earliestExpiryTime}}. Simply put, if we only track time via {{earliestExpiryTime}} during both {{add}} and {{prune}}, we risk getting into a race where we accumulate an unbounded number of messages until the next expiration, as shown in the following scenario:
1. {{add}} is called N times with {{earliestExpiryTime}} set as the minimum time among the added messages; you can't adjust in this case by the current time otherwise you would never expire (as the time would always shift).
2. {{prune}} is called and {{earliestExpiryTime}} is set as the minimum between the minimum time among the pruned messages and the current expiry time.
3. This means that any messages arrived between the start and end of the pruning whose expiry time was not the minimum, but still less than the minimum expiry time among pruned messages, would be ""ignored"" and remain in the queue.

At this point you might say it really sounds like the race you discovered and in a way it is :) Although in the above case the race window would be much larger (the whole {{prune}}).

Anyway, as I said there should be an easy fix: the deadline should be updated only if it's actually the minimum value (adjusted by current time), and I've sent a new commit with such fix. I don't see a way to fix the same kind of races by just keeping a single variable, but let me know if you find any.;;;","04/Jun/20 15:23;aleksey;Thanks for your patience overall. Just have a few nits now.

1. Can you change {{maybeUpdateEarliestExpiryTime()}} to have the same structure as {{maybeUpdateNextExpirationDeadline()}}?
2. In {{add()}}, use the return value of {{maybeUpdateExpiryTime()}} instead of loading the current value (should be equivalent)?
3. Fix up whitespace in the last commit
4. Check {{Remover}} logic? In particular I don't think {{earliestExpiresAt = Long.MAX_VALUE;}} belongs there anymore.

And, so long as you don't mind omitting the {{id()}} commit, we can push.;;;","25/Jun/20 15:57;sbtourist;[~aleksey] apologies for this late reply. I've pushed the recommended changes, please have a look when you have a moment.;;;","29/Jun/20 16:57;aleksey;Cheers, committed as [56f24f78f62c9945fae40790e3ed09893fa1ed18|https://github.com/apache/cassandra/commit/56f24f78f62c9945fae40790e3ed09893fa1ed18] to trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Only track ideal CL failure when request CL is met,CASSANDRA-15696,13296640,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,rustyrazorblade,rustyrazorblade,rustyrazorblade,06/Apr/20 19:22,16/Mar/22 13:17,13/Jul/23 08:39,07/Apr/20 01:35,4.0,4.0-alpha4,,,,Observability/Metrics,,,,0,pull-request-available,,,"When ideal_consistency_level is set (CASSANDRA-13289), we currently increment a counter if a request doesn’t meet the consistency level specified in the configuration (or through JMX).

At the moment, we increment the counter if the query was successful or not. I think it would be slightly better if we only incremented the counter if the ideal CL wasn’t achieved but the query’s CL was met.

The original JIRA, stated the following as an objective:
{quote}If your application writes at LOCAL_QUORUM how often are those writes failing to achieve EACH_QUORUM at other data centers. If you failed your application over to one of those data centers roughly how inconsistent might it be given the number of writes that didn't propagate since the last incremental repair?
{quote}
The main benefit to the JIRA was to set a CL higher than the CL being used, and to track how often we weren’t able to hit that CL despise hitting the underlying CL. We should only increment the counter in a case where we were able to meet the query provided consistency but were unable to meet the ideal consistency level.",,djoshi,rustyrazorblade,,,,,,,,,,"rustyrazorblade commented on pull request #519: CASSANDRA-15696 improve ideal CL tracking
URL: https://github.com/apache/cassandra/pull/519
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Apr/20 22:43;githubbot;600","dineshjoshi commented on pull request #519: CASSANDRA-15696 improve ideal CL tracking
URL: https://github.com/apache/cassandra/pull/519#discussion_r404478074
 
 

 ##########
 File path: src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java
 ##########
 @@ -279,8 +291,9 @@ private final void decrementResponseOrExpired()
         int decrementedValue = responsesAndExpirations.decrementAndGet();
         if (decrementedValue == 0)
         {
-            //The condition being signaled is a valid proxy for the CL being achieved
-            if (!condition.isSignaled())
+            // The condition being signaled is a valid proxy for the CL being achieved
+            // Only mark it as failed if the requested CL was achieved.
+            if (!condition.isSignaled() & requestedCLAchieved)
 
 Review comment:
   Is this intentionally a bitwise AND?
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 01:07;githubbot;600","smiklosovic closed pull request #519:
URL: https://github.com/apache/cassandra/pull/519


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:17;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,rustyrazorblade,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 07 01:29:42 UTC 2020,,,,,,,All,,,,,,"0|z0dc20:",9223372036854775807,,,,djoshi,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/0e0d288ab7e87e7d4a7542c955dd06701798bd06,,,,,,,,,Test links in comments,,,,,"06/Apr/20 23:13;rustyrazorblade;There's a single failing DTest unrelated to this patch.  ;;;","07/Apr/20 00:25;rustyrazorblade;[Unit Tests|https://app.circleci.com/pipelines/github/rustyrazorblade/cassandra/23/workflows/61d1e8fd-6e9d-44c2-99d4-1c62e3d7cacc/jobs/273]
[JVM DTests| https://app.circleci.com/pipelines/github/rustyrazorblade/cassandra/23/workflows/61d1e8fd-6e9d-44c2-99d4-1c62e3d7cacc/jobs/272]
[Python DTests| https://app.circleci.com/pipelines/github/rustyrazorblade/cassandra/23/workflows/61d1e8fd-6e9d-44c2-99d4-1c62e3d7cacc/jobs/279];;;","07/Apr/20 01:10;djoshi;Thanks for your patch [~rustyrazorblade]. Looks ok overall. I think there is just one minor issue where you're using a bitwise operator instead of logical operator. Although the results are the same right now, I'd prefer that you change it to logical operator on commit.;;;","07/Apr/20 01:29;rustyrazorblade;Ah yes - that was a typo.  Fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Statistics upon streaming of entire SSTables in Netstats is wrong,CASSANDRA-15694,13296438,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,stefan.miklosovic,stefan.miklosovic,stefan.miklosovic,06/Apr/20 08:04,18/Nov/20 21:12,13/Jul/23 08:39,22/Apr/20 21:29,4.0,4.0-beta1,,,,Tool/nodetool,,,,0,,,,"There is a bug in the current code (trunk on 6th April 2020) as if we are streaming entire SSTables via CassandraEntireSSTableStreamWriter and CassandraOutgoingFile respectively, there is not any update on particular components of a SSTable as it counts only ""db"" file to be there. That introduces this bug:

 
{code:java}
Mode: NORMAL
Rebuild 2c0b43f0-735d-11ea-9346-fb0ffe238736
    /127.0.0.2 Sending 19 files, 27664559 bytes total. Already sent 133 files, 27664559 bytes total
        /tmp/dtests15682026295742741219/node2/data/distributed_test_keyspace/cf-196b3...
        ....
{code}
Basically, number of files to be sent is lower than files sent.

 

The straightforward fix here is to distinguish when we are streaming entire sstables and in that case include all manifest files into computation. 

 

This issue depends on CASSANDRA-15657 because the resolution whether we stream entirely or not is got from a method which is performance sensitive and computed every time. Once CASSANDRA-15657  (hence CASSANDRA-14586) is done, this ticket can be worked on.

 

branch with fix is here: [https://github.com/smiklosovic/cassandra/tree/CASSANDRA-15694]",,djoshi,jasonstack,stefan.miklosovic,,,,,,,,,"smiklosovic opened a new pull request #546:
URL: https://github.com/apache/cassandra/pull/546


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Apr/20 07:05;githubbot;600","smiklosovic closed pull request #546:
URL: https://github.com/apache/cassandra/pull/546


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Nov/20 21:12;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,CASSANDRA-15657,CASSANDRA-15406,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,stefan.miklosovic,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Apr 22 21:29:34 UTC 2020,,,,,,,All,,,,,,"0|z0db20:",9223372036854775807,,,,djoshi,,,,Low,,4.0,,,https://github.com/apache/cassandra/commit/b1411a43180e0085ae4741f4da567a08b5a28f17,,,,,,,,,"Unit, dtests, CircleCI/Jenkins",,,,,"19/Apr/20 13:48;jasonstack;FYI, 15657 is merged..;;;","19/Apr/20 13:56;stefan.miklosovic;[~jasonstack] yes I noticed that, thanks. [~djoshi] could you please review this and merge? I think this is your area of expertise as you have written that whole SSTable streaming ... ;;;","20/Apr/20 08:22;stefan.miklosovic;[~djoshi] PR prepared here, please let me know if there is anything I should do to make this happen.

 

[https://github.com/apache/cassandra/pull/546];;;","22/Apr/20 05:22;djoshi;Hi [~stefan.miklosovic], thanks for the bug report and patch. Here's my feedback:
 # {{StreamSession::addTransferStreams}} doesn't seem to be the right place to compute the number of files inside an {{OutgoingStreamMessage}}. It belongs to the {{OutgoingStreamMessage}}.
 # While you're correctly sending the number of files in the stream message on the outbound side, on the receiving side you did not update the number of files that the receiver expects. This causes mismatch and the receiver keeps waiting to receive files specifically {{StreamReceiveTask}} hangs.
 # A few existing tests broke as the number of files they expected changed, specifically tests in {{StreamTransferTaskTest}}.
 # Minor spacing nits in test file.

I ran CircleCI and spotted a few tests failed due to timeouts and thats how I was able to figure out that things didn't function as expected.

I have made all suggestions in this [branch|https://github.com/dineshjoshi/cassandra/tree/CASSANDRA-15694-trunk-review]. Please let me know your thoughts. If it looks good, I'll go ahead and commit it.;;;","22/Apr/20 05:44;stefan.miklosovic;[~djoshi] good stuff! Yes, I went through your changes and I do not have any objections, looks pretty solid. Please go ahead with the committing.;;;","22/Apr/20 17:06;djoshi;Thanks, [~stefan.miklosovic].;;;","22/Apr/20 21:28;djoshi;Here's the final [CI run|https://circleci.com/workflow-run/92b05cbf-d9e2-46c3-a867-d1b899335273].;;;","22/Apr/20 21:29;djoshi;Committed. Thanks for the patch [~stefan.miklosovic]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generating nodetool docs fails with python 3,CASSANDRA-15693,13296180,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,polo-language,polo-language,polo-language,04/Apr/20 10:13,03/Jan/21 17:02,13/Jul/23 08:39,23/Jul/20 22:19,4.0,4.0-beta2,,,,Build,,,,0,patch,,,"Building nodetool docs with the ant target 'gen-doc' fails for python 3. Python 3 doesn't allow the file open mode ""rw+"".
{noformat}
gen-doc:
     [exec] python convert_yaml_to_rst.py ../conf/cassandra.yaml source/configuration/cassandra_config_file.rst
     [exec] python gen-nodetool-docs.py
     [exec] Makefile:64: recipe for target 'html' failed
     [exec] Traceback (most recent call last):
     [exec]   File ""gen-nodetool-docs.py"", line 75, in <module>
     [exec]     with open(helpfilename, ""rw+"") as helpfile:
     [exec] ValueError: must have exactly one of create/read/write/append mode
     [exec] make: *** [html] Error 1
     [exec] Result: 2
{noformat}
Fails on and patch [^0001-Fix-file-open-modes-for-python-3.patch] tested on the following platforms: Ubuntu 18.04.4 LTS with Python 3.6.9 and FreeBSD 12.1-RELEASE-p1 with Python 3.7.7.",,e.dimitrova,Gerrrr,polo-language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15586,,,,,,,,,"04/Apr/20 10:01;polo-language;0001-Fix-file-open-modes-for-python-3.patch;https://issues.apache.org/jira/secure/attachment/12998829/0001-Fix-file-open-modes-for-python-3.patch",,,,,,,,,,,,,,1.0,polo-language,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 23 22:53:02 UTC 2020,,,,,,,All,,,,,,"0|z0da00:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/a47be7eddd5855fc7723d4080ca1a63c611efdab,,,,,,,,,"Building nodetool docs with the ant target 'gen-doc' fails for python 3. Python 3 doesn't allow the file open mode ""rw+"".
{noformat}
gen-doc:
     [exec] python convert_yaml_to_rst.py ../conf/cassandra.yaml source/configuration/cassandra_config_file.rst
     [exec] python gen-nodetool-docs.py
     [exec] Makefile:64: recipe for target 'html' failed
     [exec] Traceback (most recent call last):
     [exec]   File ""gen-nodetool-docs.py"", line 75, in <module>
     [exec]     with open(helpfilename, ""rw+"") as helpfile:
     [exec] ValueError: must have exactly one of create/read/write/append mode
     [exec] make: *** [html] Error 1
     [exec] Result: 2
{noformat}
Fails on and patch [^0001-Fix-file-open-modes-for-python-3.patch] tested on the following platforms: Ubuntu 18.04.4 LTS with Python 3.6.9 and FreeBSD 12.1-RELEASE-p1 with Python 3.7.7.",,,,,"15/Jul/20 15:25;e.dimitrova;Hi [~polo-language],

As our beta is around the corner, I am back to testing. I triaged this ticket. Do you still have time for this ticket and to support running C* 4.0 on FreeBSD?

 ;;;","15/Jul/20 16:13;polo-language;I've already submitted a patch. What else can I do for this one?;;;","16/Jul/20 19:01;e.dimitrova;Thank you. I will review it tomorrow. 

If you hit any other issues on FreeBSD, feel free to attach sub-tickets to CASSANDRA-15586.;;;","23/Jul/20 22:02;e.dimitrova;Tested on my Mac with Python 3.7.7, LGTM +1. I have only one question, I am not familiar with sphinx. 

The following appears when I run ant with target ""gen-doc"" even if the build is successful: 

 
{code:java}
gen-doc:
     [exec] python convert_yaml_to_rst.py ../conf/cassandra.yaml source/configuration/cassandra_config_file.rst
     [exec] python gen-nodetool-docs.py
 
     [exec] sphinx-build -b html -d build/doctrees   source build/html
     [exec] make: sphinx-build: No such file or directory
     [exec] make: *** [html] Error 1
     [exec] Result: 2
 
BUILD SUCCESSFUL
Total time: 1 minute 31 seconds
{code}
 

[~lorina@datastax.com], [~brandon.williams]  any suggestions?

Missing file but the build is successful?;;;","23/Jul/20 22:14;e.dimitrova;Confirmed with [~lorina@datastax.com] offline, this is ready for commit. [~brandon.williams], please assist :);;;","23/Jul/20 22:17;e.dimitrova;Pushed a [branch|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15693] with updated CHANGES.txt;;;","23/Jul/20 22:20;brandon.williams;Committed before I saw your branch, but I elected not to add this to CHANGES.txt anyway.;;;","23/Jul/20 22:53;e.dimitrova;Thanks [~brandon.williams] :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ConnectionBurnTest,CASSANDRA-15692,13296174,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,mck,mck,04/Apr/20 09:22,21/Dec/20 08:08,13/Jul/23 08:39,04/Apr/20 18:51,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"https://ci-cassandra.apache.org/job/Cassandra-trunk-test-burn/30/testReport/org.apache.cassandra.net/ConnectionBurnTest/test/

{noformat}
java.lang.NullPointerException
	at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.getCurrentPosition(AbstractCommitLogSegmentManager.java:515)
	at org.apache.cassandra.db.commitlog.CommitLog.getCurrentPosition(CommitLog.java:223)
	at org.apache.cassandra.db.ColumnFamilyStore.<init>(ColumnFamilyStore.java:403)
	at org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(ColumnFamilyStore.java:602)
	at org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(ColumnFamilyStore.java:576)
	at org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(ColumnFamilyStore.java:567)
	at org.apache.cassandra.db.Keyspace.initCf(Keyspace.java:445)
	at org.apache.cassandra.db.Keyspace.<init>(Keyspace.java:340)
	at org.apache.cassandra.db.Keyspace.open(Keyspace.java:138)
	at org.apache.cassandra.db.Keyspace.open(Keyspace.java:115)
	at org.apache.cassandra.db.Keyspace.openAndGetStore(Keyspace.java:173)
	at org.apache.cassandra.index.IndexRegistry.obtain(IndexRegistry.java:251)
	at org.apache.cassandra.cql3.restrictions.StatementRestrictions.<init>(StatementRestrictions.java:154)
	at org.apache.cassandra.cql3.restrictions.StatementRestrictions.<init>(StatementRestrictions.java:134)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepareRestrictions(SelectStatement.java:1084)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:958)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:948)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:923)
	at org.apache.cassandra.cql3.QueryProcessor.getStatement(QueryProcessor.java:523)
	at org.apache.cassandra.cql3.QueryProcessor.parseStatement(QueryProcessor.java:252)
	at org.apache.cassandra.cql3.QueryProcessor.prepareInternal(QueryProcessor.java:297)
	at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:307)
	at org.apache.cassandra.db.SystemKeyspace.getPreferredIP(SystemKeyspace.java:857)
	at org.apache.cassandra.net.OutboundConnectionSettings.connectTo(OutboundConnectionSettings.java:448)
	at org.apache.cassandra.net.OutboundConnectionSettings.withDefaults(OutboundConnectionSettings.java:470)
	at org.apache.cassandra.net.OutboundConnection.<init>(OutboundConnection.java:291)
	at org.apache.cassandra.net.Connection.<init>(Connection.java:81)
	at org.apache.cassandra.net.ConnectionBurnTest$Test.<init>(ConnectionBurnTest.java:216)
	at org.apache.cassandra.net.ConnectionBurnTest$Test.<init>(ConnectionBurnTest.java:144)
	at org.apache.cassandra.net.ConnectionBurnTest$Test$Builder.build(ConnectionBurnTest.java:179)
	at org.apache.cassandra.net.ConnectionBurnTest.test(ConnectionBurnTest.java:640)
	at org.apache.cassandra.net.ConnectionBurnTest.test(ConnectionBurnTest.java:658)
{noformat}

Test History:
https://ci-cassandra.apache.org/job/Cassandra-trunk-test-burn/lastCompletedBuild/testReport/org.apache.cassandra.net/ConnectionBurnTest/test/history/",,jasonstack,mck,,,,,,,,,,"jasonstack commented on pull request #516: CASSANDRA-15692: Initialize commitlog for ConnectionBurnTest due to C…
URL: https://github.com/apache/cassandra/pull/516
 
 
   …ASSANDRA-15295
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Apr/20 16:55;githubbot;600","jasonstack commented on issue #516: CASSANDRA-15692: Initialize commitlog for ConnectionBurnTest due to C…
URL: https://github.com/apache/cassandra/pull/516#issuecomment-609417249
 
 
   merged
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Apr/20 13:31;githubbot;600","jasonstack commented on pull request #516: CASSANDRA-15692: Initialize commitlog for ConnectionBurnTest due to C…
URL: https://github.com/apache/cassandra/pull/516
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Apr/20 13:31;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,CASSANDRA-15295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sun Apr 05 07:52:02 UTC 2020,,,,,,,All,,,,,,"0|z0d9yo:",9223372036854775807,,,,mck,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/e2d2bfd9ccd5fc5875ea9eae571c42732e701193,,,,,,,,,fixed test locally..,,,,,"04/Apr/20 17:01;jasonstack;[patch|https://github.com/apache/cassandra/pull/516]
Since CASSANDRA-15295, {{""CommitLog""}} needs to be manually started.;;;","04/Apr/20 18:11;mck;||branch||circleci||jenkins||
|[trunk_15692|https://github.com/apache/cassandra/compare/trunk...jasonstack:CASSANDRA-15692-trunk]|[circleci|https://circleci.com/gh/jasonstack/cassandra/tree/CASSANDRA-15692-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch-test-burn/14//badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch-test-burn/14/]|
;;;","04/Apr/20 18:43;mck;tested locally.;;;","04/Apr/20 18:52;mck;Committed as e2d2bfd9ccd5fc5875ea9eae571c42732e701193;;;","05/Apr/20 07:52;jasonstack;thanks for the review;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Single partition queries can mistakenly omit partition deletions and resurrect data,CASSANDRA-15690,13296086,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,aleksey,aleksey,03/Apr/20 17:57,21/Oct/20 12:25,13/Jul/23 08:39,16/Apr/20 17:48,3.0.21,3.11.7,4.0,4.0-beta1,,Consistency/Coordination,,,,0,,,,"We have logic that allows us to exclude sstables with partition deletions that are older than the minimum collected timestamp in a local request. However, it’s possible that another node could have rows that aren’t known to the local node that are in turn older than the excluded partition deletion. In such a scenario, those will be mistakenly resurrected, which is a correctness issue.",,aleksey,e.dimitrova,jaid,jeromatron,jtgalbraith,samt,weisslj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 16 17:48:36 UTC 2020,,,,,,,All,,,,,,"0|z0d9f4:",9223372036854775807,,,,aleksey,,,,Critical,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/092915ad19d25c1ba93f7968210b88fb6e4b9180,,,,,,,,,"New in-jvm dtests added. For trunk, the proposed snapshot on mismatch feature has a descriptive comment in cassandra.yaml, but we should add full docs for repaired data tracking in general.",,,,,"03/Apr/20 17:59;aleksey;A simple in-JVM repro illustration provided by [~samt]:

{code}
    @Test
    public void skippedSSTableWithPartitionDeletionShadowingDataOnAnotherNode() throws Throwable
    {
        try (Cluster cluster = init(Cluster.create(2)))
        {
            cluster.schemaChange(""CREATE TABLE "" + KEYSPACE + "".tbl (pk int, ck int, v int, PRIMARY KEY(pk, ck))"");
            // insert a partition tombstone on node 1, the deletion timestamp should end up being the sstable's minTimestamp
            cluster.get(1).executeInternal(""DELETE FROM "" + KEYSPACE + "".tbl USING TIMESTAMP 1 WHERE pk = 0"");
            // and a row from a different partition, to provide the sstable's min/max clustering
            cluster.get(1).executeInternal(""INSERT INTO "" + KEYSPACE + "".tbl (pk, ck, v) VALUES (1, 1, 1) USING TIMESTAMP 1"");
            cluster.get(1).flush(KEYSPACE);
            // sstable 1 has minTimestamp == maxTimestamp == 1 and is skipped due to its min/max clusterings. Now we
            // insert a row which is not shadowed by the partition delete and flush to a second sstable. Importantly,
            // this sstable's minTimestamp is > than the maxTimestamp of the first sstable. This would cause the first
            // sstable not to be re-included in the merge input, but we can't really make that decision as we don't
            // know what data and/or tombstones are present on other nodes
            cluster.get(1).executeInternal(""INSERT INTO "" + KEYSPACE + "".tbl (pk, ck, v) VALUES (0, 6, 6) USING TIMESTAMP 2"");
            cluster.get(1).flush(KEYSPACE);
​
            // on node 2, add a row for the deleted partition with an older timestamp than the deletion so it should be shadowed
            cluster.get(2).executeInternal(""INSERT INTO "" + KEYSPACE + "".tbl (pk, ck, v) VALUES (0, 10, 10) USING TIMESTAMP 0"");
​
            Object[][] rows = cluster.coordinator(1)
                                     .execute(""SELECT * FROM "" + KEYSPACE + "".tbl WHERE pk=0 AND ck > 5"",
                                              ConsistencyLevel.ALL);
            // we expect that the row from node 2 (0, 10, 10) was shadowed by the partition delete, but the row from
            // node 1 (0, 6, 6) was not.
            assertRows(rows, new Object[] {0, 6 ,6});
        }
    }
{code};;;","08/Apr/20 11:57;samt;Pushed branches with fixes and additional tests for 3.0, 3.11 and trunk. The trunk branch includes a second commit which adds the ability to trigger a snapshot if a mismatch is detected between repaired data across replicas either at query time (using the tracking capability from CASSANDRA-14145) or during a preview repair. The snapshotting is controlled by a yaml setting and can also be enabled/disabled by jmx. To avoid filling the disks with snapshots, each replica will take at most 1 snapshot per-table per-day via this mechanism (manually triggered snapshots are not affected). These snapshots can be very useful in debugging temporary divergences between replicas which may be resolved by full or read repairs before investigation takes place.


||branch||utests||in-jvm dtests||dtests_with_vnodes||dtests_no_vnodes||
|[15690-3.0|https://github.com/beobal/cassandra/tree/15690-3.0]|[jdk8|https://circleci.com/gh/beobal/cassandra/1290]|[jdk8|https://circleci.com/gh/beobal/cassandra/1289]|[jdk8|https://circleci.com/gh/beobal/cassandra/1296]|[jdk8|https://circleci.com/gh/beobal/cassandra/1297]|
|[15690-3.11|https://github.com/beobal/cassandra/tree/15690-3.11]|[jdk8|https://circleci.com/gh/beobal/cassandra/1311]|[jdk8|https://circleci.com/gh/beobal/cassandra/1312]|[jdk8|https://circleci.com/gh/beobal/cassandra/1314]|[jdk8|https://circleci.com/gh/beobal/cassandra/1313]|
|[15690-trunk|https://github.com/beobal/cassandra/tree/15690-trunk]|[jdk8|https://circleci.com/gh/beobal/cassandra/1303], [jdk11|https://circleci.com/gh/beobal/cassandra/1307]|[jdk8|https://circleci.com/gh/beobal/cassandra/1304], [jdk11|https://circleci.com/gh/beobal/cassandra/1302]|[jdk8|https://circleci.com/gh/beobal/cassandra/1305], [jdk11|https://circleci.com/gh/beobal/cassandra/1309]|[jdk8|https://circleci.com/gh/beobal/cassandra/1306], [jdk11|https://circleci.com/gh/beobal/cassandra/1308]|
;;;","10/Apr/20 18:45;e.dimitrova;Hi [~aleksey],
I see you are assigned as a reviewer. Are you looking into this one? Need help if you are busy?;;;","16/Apr/20 13:17;aleksey;Changes LGTM (previously reviewed internally, re-reviewed again incl. 3.11 and trunk branches).;;;","16/Apr/20 17:48;samt;Thanks, committed to 3.0 in {{092915ad19d25c1ba93f7968210b88fb6e4b9180}} and merged to 3.11 and trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CASSANDRA-15650 broke CasWriteTest causing it to fail and hang,CASSANDRA-15689,13296084,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,03/Apr/20 17:55,21/Dec/20 08:08,13/Jul/23 08:39,06/Apr/20 12:54,4.0,4.0-alpha4,,,,Test/dtest/java,,,,0,pull-request-available,,,"CasWriteTest changed IsolatedExecutor to rethrow runtime exceptions rather than wrap, this test assumes they are wrapped which causes tests to fail and casWriteContentionTimeoutTest to timeout.

[Circle CI|https://circleci.com/gh/dcapwell/cassandra/tree/bug%2FCASSANDRA-15689]",,blerer,dcapwell,mck,,,,,,,,,"dcapwell commented on pull request #515: CASSANDRA-15689 refactor in IsolatedExecutor caused CasWriteTest tests to fail
URL: https://github.com/apache/cassandra/pull/515
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Apr/20 17:56;githubbot;600","dcapwell commented on pull request #515: CASSANDRA-15689 refactor in IsolatedExecutor caused CasWriteTest tests to fail
URL: https://github.com/apache/cassandra/pull/515
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:41;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15650,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Apr 06 12:54:31 UTC 2020,,,,,,,All,,,,,,"0|z0d9eo:",9223372036854775807,,,,mck,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/c133385986db9fb1333b37739528f66ad45de916,,,,,,,,,unit test pass,,,,,"03/Apr/20 17:58;dcapwell;[~blerer] [~e.dimitrova] can you review?;;;","04/Apr/20 08:04;mck;||branch||circleci||jenkins||
|[trunk_15689|https://github.com/apache/cassandra/compare/trunk...dcapwell:bug/CASSANDRA-15689]|[circleci|https://circleci.com/gh/dcapwell/cassandra/tree/bug%2FCASSANDRA-15689]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/18/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/18]|

;;;","06/Apr/20 12:54;blerer;Committed into trunk at c133385986db9fb1333b37739528f66ad45de916;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid cdc_raw_directory prevents server startup,CASSANDRA-15688,13295904,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,02/Apr/20 21:49,15/Jul/21 20:01,13/Jul/23 08:39,14/Apr/20 00:46,4.0,4.0-beta1,,,,Feature/Change Data Capture,,,,0,pull-request-available,,,"If {{cdc_raw_directory}} is set to an invalid directory it prevents startup of the server even when cdc_enabled is set false.

The directory can either be set directly by the {{cdc_raw_directory}} setting in configuration YAML or indirectly via the {{cassandra.storage_dir}} system property, which is how I encountered it.

Easy to reproduce by setting {{cdc_raw_directory}} to {{notadir/notasubdir}}

Additionally while investigating, discovered that {{DatabaseDescriptor.guessFileStore}} can cause a {{NullPointerException}} if it runs out of parent elements
 before it can get a FileStore. It should provide a more useful ConfigurationException providing details on the problematic path.
 {{guessFileStore}} is used for checks on {{commitlog_directory}}, {{cdc_raw_directory}} and {{data_file_directories}}.",,djoshi,jmeredithco,,,,,,,,,,"jonmeredith commented on pull request #514: CASSANDRA-15688 Invalid cdc_raw_directory prevents server startup
URL: https://github.com/apache/cassandra/pull/514
 
 
   If cdc_raw_directory is set to an invalid directory it prevents startup of the server even when `cdc_enabled` is set false.
   
   The directory can either be set directly by the cdc_raw_directory setting in configuration YAML or indirectly via the `cassandra.storage_dir` system property, which is how I encountered it.
   
   Easy to reproduce by setting cdc_raw_directory to notadir/notasubdir
   Additionally while investigating, discovered that `DatabaseDescriptor.guessFileStore` can cause a `NullPointerException` if it runs out of parent elements
   before it can get a `FileStore`. It should provide a more useful `ConfigurationException` providing details on the problematic path. `guessFileStore` is used for checks on `commitlog_directory`, `cdc_raw_directory` and `data_file_directories`.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 22:12;githubbot;600","jonmeredith closed pull request #514:
URL: https://github.com/apache/cassandra/pull/514


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/21 16:58;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14570,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 14 01:38:33 UTC 2020,,,,,,,All,,,,,,"0|z0d8ao:",9223372036854775807,,,,djoshi,,,,Normal,,4.0,,,https://github.com/apache/cassandra/commit/02c6d6540c6ab108b763a639146e74e9f8d0dd40,,,,,,,,,Added tests for the factored out functionality. DatabaseDescriptor.applySimpeConfig is too monolithic to easily add a test to.,,,,,"07/Apr/20 21:40;jmeredithco;Rebased since original submission and rerun due to lots of unrelated test issues.

Updated CircleCI [Java8|https://circleci.com/workflow-run/4648ff9c-fa8d-4506-8052-80a6d68037f4] [Java11|https://circleci.com/workflow-run/b8002437-eb82-4738-8b01-0f0351e28949]
;;;","08/Apr/20 16:05;jmeredithco;Many failures again - still believed to be unrelated. Rebased again (though nothing significant to tests landed) and reran

CircleCI [Java8|https://circleci.com/workflow-run/1d67e766-5c04-4c44-9fc1-a1c455a32e7a] [Java11|https://circleci.com/workflow-run/e8b46dc7-6b16-42fe-97bb-b85de93e362f];;;","08/Apr/20 16:22;jmeredithco;Time to eat humble pie. Reproduced locally, will investigate.
{code:java}
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] 	at java.util.Vector.forEach(Vector.java:1275)
[junit-timeout] 	at java.util.Vector.forEach(Vector.java:1275)
[junit-timeout] 	at java.lang.Thread.run(Thread.java:748) {code};;;","08/Apr/20 17:53;jmeredithco;And resolved - good to merge once you're happy with it.

CircleCI [Java8|https://circleci.com/workflow-run/406dfdde-7609-47c4-9083-abc06a452935] [Java11|https://circleci.com/workflow-run/b356b840-191d-44f7-90c7-63b898a3c11c] this time it really is a couple of flaky unrelated dtests.;;;","14/Apr/20 00:44;djoshi;+1;;;","14/Apr/20 01:38;djoshi;Committed, thanks for the patch!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression in traceOutgoingMessage printing message size in tracing,CASSANDRA-15687,13295901,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmeredithco,jmeredithco,jmeredithco,02/Apr/20 21:22,15/May/20 08:53,13/Jul/23 08:39,18/Apr/20 05:58,4.0,4.0-beta1,,,,Observability/Tracing,,,,0,pull-request-available,,,"The internode messaging refactor (CASSANDRA-15066) introduced a tiny regression to tracing. Previously CASSANDRA-13028 had changed the message emitted by traceOutgoingMessage to include the number of bytes.
{code}
""Sending %s message to %s""
{code}
to
{code}
""Sending %s message to %s message size %d bytes""
{code}

But the change was dropped during the refactor, it's easy to put it back.",,djoshi,jmeredithco,,,,,,,,,,"jonmeredith commented on pull request #512: CASSANDRA-15687 Do not check cdc_raw_directory filesystem space if CDC disabled
URL: https://github.com/apache/cassandra/pull/512
 
 
   On startup, applySimpleConfig checks disk space for cdc_raw_directory even if cdc_enabled=false.  The cdc_raw_directory could be computed automatically from the cassandra.storagedir property so if that has been deliberately set to an invalid directory (e.g. to force explicit configuration of storage paths) then the server will not start.
   
   Additionally this protects against an NPE while checking storage space if misconfigured.
   
   Patch by Jon Meredith; Reviewed by Dinesh Johsi for CASSANDRA-15687
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 21:39;githubbot;600","jonmeredith commented on issue #512: CASSANDRA-15687 Do not check cdc_raw_directory filesystem space if CDC disabled
URL: https://github.com/apache/cassandra/pull/512#issuecomment-608106458
 
 
   Got my wires crossed and opened against the wrong JIRA.  Closing and will start again.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 21:44;githubbot;600","jonmeredith commented on pull request #512: CASSANDRA-15687 Do not check cdc_raw_directory filesystem space if CDC disabled
URL: https://github.com/apache/cassandra/pull/512
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 21:44;githubbot;600","jonmeredith commented on pull request #513: CASSANDRA-15687 Fix regression with traceOutgoingMessage printing message size
URL: https://github.com/apache/cassandra/pull/513
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 22:05;githubbot;600","dineshjoshi commented on pull request #513: CASSANDRA-15687 Fix regression with traceOutgoingMessage printing message size
URL: https://github.com/apache/cassandra/pull/513
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/20 05:59;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jmeredithco,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Apr 18 05:58:53 UTC 2020,,,,,,,All,,,,,,"0|z0d8a0:",9223372036854775807,,,,djoshi,,,,Low,,4.0,,,https://github.com/apache/cassandra/commit/0a860b9b3e66be443b2236454c0f8c97c936a6dc,,,,,,,,,Added minor unit test - the monolith of DatabaseDescriptor make it hard to add more.,,,,,"02/Apr/20 22:06;jmeredithco;Pull request linked.
CircleCI Runs [Java8|https://circleci.com/workflow-run/b164695d-c423-4b29-83af-9dc43364c70f] [Java11|https://circleci.com/workflow-run/3d06dd3d-2eae-4d4e-9038-f9ab4df45e0c];;;","18/Apr/20 05:53;djoshi;+1;;;","18/Apr/20 05:58;djoshi;Committed. Thanks for the patch [~jmeredithco]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flaky testWithMismatchingPending - org.apache.cassandra.distributed.test.PreviewRepairTest,CASSANDRA-15685,13295880,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,newkek,newkek,02/Apr/20 19:08,16/Mar/22 13:17,13/Jul/23 08:39,09/Jul/20 14:38,4.0,4.0-beta1,,,,Test/dtest/java,,,,0,pull-request-available,,,"Observed in: 
https://app.circleci.com/pipelines/github/newkek/cassandra/34/workflows/1c6b157d-13c3-48a9-85fb-9fe8c153256b/jobs/191/tests

Failure:
{noformat}
testWithMismatchingPending - org.apache.cassandra.distributed.test.PreviewRepairTest
junit.framework.AssertionFailedError
	at org.apache.cassandra.distributed.test.PreviewRepairTest.testWithMismatchingPending(PreviewRepairTest.java:97)
{noformat}

[Circle CI|https://circleci.com/gh/dcapwell/cassandra/tree/bug%2FCASSANDRA-15685]",,colinkuo,dcapwell,e.dimitrova,gianluca,jasonstack,jmckenzie,marcuse,newkek,,,,"dcapwell commented on pull request #522: CASSANDRA-15685 Move away from notifications in favor of nodetool to detect failure, this is to better handle cases where notifications are lost
URL: https://github.com/apache/cassandra/pull/522
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 23:22;githubbot;600","smiklosovic closed pull request #522:
URL: https://github.com/apache/cassandra/pull/522


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:17;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15580,,,,,,,,,,,,,"12/May/20 14:40;e.dimitrova;log-CASSANDRA-15685.txt;https://issues.apache.org/jira/secure/attachment/13002741/log-CASSANDRA-15685.txt","14/May/20 17:49;e.dimitrova;output;https://issues.apache.org/jira/secure/attachment/13002968/output",,,,,,,,,,,,,2.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 09 16:41:30 UTC 2020,,,,,,,All,,,,,,"0|z0d85c:",9223372036854775807,,,,brandon.williams,dcapwell,e.dimitrova,,Low,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/7d4c2da7427392f506deaf832f2c66fc6a358688,,,,,,,,,"Failure observed - Circle CI / locally many runs with only 2 cores.
Test fixed [here |  CASSANDRA-15685] ",,,,,"02/Apr/20 19:44;dcapwell;Walking the workflow I see its this branch https://github.com/newkek/cassandra/commits/cci-test2. which is based off https://github.com/newkek/cassandra/commit/b9c7a90e8a928cb22cd2b7c4ecd9f8dbc711e10e.  This issue should be fixed with

{code}
commit dfc279a22a5563ac7a832a586914d5410426e9b7
Author: David Capwell <dcapwell@gmail.com>
Date:   Sat Mar 21 20:57:50 2020 -0700

    Fix flaky test o.a.c.d.test.*RepairCoordinatorFastTest

    patch by David Capwell; reviewed by Ekaterina Dimitrova and Benjamin Lerer
    for CASSANDRA-15650
{code}

That commit has its own issues (being fixed in CASSANDRA-15684 and CASSANDRA-15683), but should have fixed this test. The root cause that was that nodetool repair command had a bug where it doesn't handle the case error notification was not seen but complete was (notifications are lossy).  If you update to latest do you still see this test as flakey?;;;","02/Apr/20 20:39;newkek;Hey [~dcapwell] afaict I have only seen this test failing on this run, I have not seen it fail on other more recent builds happening after CASSANDRA-15650 indeed. Opened this ticket since I couldn't find a report of this failure. I'm ok closing it if it's been fixed in CASSANDRA-15650;;;","03/Apr/20 00:08;dcapwell;Let's close but if you see it after upgrade then should reopen;;;","03/Apr/20 15:16;newkek;Agreed;;;","07/Apr/20 16:20;dcapwell;Happened again on trunk.

{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.distributed.test.PreviewRepairTest.testWithMismatchingPending(PreviewRepairTest.java:97)
{code};;;","07/Apr/20 16:25;dcapwell;[~newkek] I was wrong, I had forgotten that test doesn't use the nodetool api and instead relies on notifications.  Notifications are lossy so its possible to not see the error notification but see the complete.  I fixed this issue with the *RepairCoordinator*Test but that fix was in nodetool, so this test is still impacted.;;;","07/Apr/20 23:38;dcapwell;I sent a patch switching from notification to nodetool.  I plan to run this in a loop tonight with lower resources.

One thing that this doesn't fix is that, if the NOTIFICATION notification gets dropped then this will still be flakey.  Unless we move the message to the success message (I am a fan of this), then not sure how to solve.;;;","07/Apr/20 23:41;dcapwell;because node tool doesn't expose the output, I am tempted to remain using notifications, but poll at the end to get the final result.;;;","14/Apr/20 23:44;dcapwell;moved out of PA since I don't think the patch I sent solves this completely.  The main issue is we need a notification which is lossy, so we need to move this to the completion message and poll for that in the tests (aka can't use nodetool).;;;","22/Apr/20 18:29;dcapwell;I am jumping between a few things so neglecting this right now.  I ""feel"" like we need to make the completion message contain the notification message so we can recover from a missed message; with that the test can always wait for complete then poll one last time for the status; that should make it no longer flakey.  This can't be done via nodetool, so the current logic is better off.;;;","06/May/20 12:33;e.dimitrova;Hi [~dcapwell],
Still working on this one? Let me know if you need a hand;;;","07/May/20 18:00;dcapwell;[~e.dimitrova] I stopped working on it as I lost my time =(.  If you want, feel free to pick it up! =D

The current state is that the test requires knowing the result of the previous repair which only happens as a JMX notification, which is lossy; if the notification is lost, the test fails.

I was planning to append the result to the completion message as we can get that via polling, for this reason the test could not use the nodetool API but would need to poll directly (which it does today).  I also had a patch a bit back to fix nodetool to detect failures in case of JMX loosing the error message, this polling would need to do similar (so should probably be a common function).

Now, the change to the completion message is better IMO since it also fixes this for operators (if the notification is lost you don't know if there was a conflict), since polling will also see the latest message and will report it correctly. 

For now I will unassigned myself.;;;","12/May/20 14:41;e.dimitrova;Managed to reproduce the failure after 189 runs on Mac, limiting the cores to 2. (Thanks for the hints [~dcapwell])

Attached the full log for completeness.

;;;","14/May/20 18:13;e.dimitrova;Test fixed [here | https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15685]
I ran successfully the whole class 500 times (as the fixed repair function is used by all test methods), log attached
Cassandra-wise the issue was already fixed in CASSANDRA-15650. The issue was in this test the StorageService#repair function is directly called so the additional polling from the RepairRunner was not happening for this test.

[~dcapwell], [~blerer], may I ask you for a review, please?
;;;","14/May/20 19:20;dcapwell;* https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:CASSANDRA-15685#diff-584fc321d5855ec6340e5477d8e7e469R373. if you make it this far it means await was already signaled, so this should be a noop 
* https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:CASSANDRA-15685#diff-584fc321d5855ec6340e5477d8e7e469R376 this fixes the failed case, but what about the preview repair notification getting lost?

The test has two issues
* not see the error, so believe the job was success; you handle this case
* not see the notification, so unable to update wasInconsistent; currently not handled.

To handle the second case, you would need to update the completion message then check for that in the test.  This is desirable since nodetool has the same issue, so moving it to complete would mean we always log it.;;;","14/May/20 20:12;e.dimitrova;Ok, as we talked, for completion in case of regression it is good to cover also the case of lost NOTIFICATION to ensure we never got issues in the future with the last assert in this test. 
Moving back to in progress to add that too, thanks

Is there a ticket for the lossy notifications in general?
;;;","15/May/20 16:59;dcapwell;For others, Ekaterina and I chatted offline.

The preview repair tests assert that previews did not report inconsistencies, but since it uses a AtomicBoolean to handle concurrent cases, and the default is false, it can lead to a false negative; if we don't see the notification then we wouldn't flip the boolean from false to true.  Every test asserts false, so it is not failing right now, but it also won't detect regressions.

The issue is also true in the nodetool case as it may not see the notification so isn't aware of the results.

Thanks Ekaterina for all the hard work! =D;;;","17/May/20 21:09;e.dimitrova;After a couple of hundred more runs of this test (my gut feeling told me that I miss something), it was confirmed that the lossy notifications are not the primary issue with this test.
In some cases even if we catch the notifications for success/error and the flags ""success"" and ""wasConsistent"" are properly set, still the PreviewRepair shows that the Incremental Repair is still running.

{code:java}
[junit-timeout] java.lang.RuntimeException: Repair session 82ff3420-9737-11ea-b32d-7fa12d874715 for range [(-1,9223372036854775805], (9223372036854775805,-1]] failed with error An incremental repair with session id 82eff1e0-9737-11ea-b32d-7fa12d874715 finished during this preview repair runtime
{code}

Turns out getting the notification doesn't always mean that the rest of the nodes are already informed about the completion. I can easily increase the time before preview repair starts.
But we were considering with [~dcapwell] to open a ticket as there might be other parts of the code or tools relying only on the notifications for completion. Worth to be checked.
Also, I am gonna check tomorrow in detail how we can improve this test not to rely on timing but probably some metadata. ;;;","30/May/20 16:16;jmckenzie;Any updates on this [~e.dimitrova] ?;;;","01/Jun/20 23:21;dcapwell;[~bdeggleston] [~marcuse] could we get your thoughts on this?  preview repair isn't allowed to be run concurrently with IR, but IR completes before the message is handled on the participant; the below is impacted by this race condition.

{code}
nodetool repair foo bar
# does not look to be running concurrently with the above IR, since it was notified of success
# but the commit message may not have been seen yet which cause this to be concurrent with the above
nodetool repair foo bar --validate
{code}

See here https://github.com/apache/cassandra/blob/ec1808a34f9aa5ae0b956c1527828566f4ba2be5/src/java/org/apache/cassandra/repair/consistent/CoordinatorSession.java#L234-L244.  We send the message but don't make sure its ack on.;;;","03/Jun/20 20:40;jmckenzie;What do we think about moving fixver to 4.0-beta on this?;;;","05/Jun/20 14:19;e.dimitrova;[~jmckenzie], personally, I think we can move it to 4.0-beta. My reasoning is that we might not be able to run preview repair(the participant is still not aware of the IR being completed already)  and have to start it again later but there is no data loss or something. [~dcapwell] are you ok with this reasoning? 
;;;","17/Jun/20 01:51;dcapwell;sorry for the delay.

I am fine with the test getting fixed without changing IR, though this adds an unexpected edge case for users; though it is expected to be rare in production.;;;","17/Jun/20 02:30;e.dimitrova;We might fix the IR but it is not a blocker now as there is no defect and it is rare case. It will be taken care in beta, it is not a blocker. That is what I meant;;;","07/Jul/20 00:07;e.dimitrova;Back to this work. [~blerer], [~bdeggleston], [~marcuse], may I ask for your expert advice? Is fixing the test enough here or [this behavior | https://issues.apache.org/jira/browse/CASSANDRA-15685?focusedCommentId=17121396&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17121396]   should also be considered? Thank you in advance :);;;","07/Jul/20 07:47;marcuse;lets fix the test and open a new jira for any other improvements?;;;","08/Jul/20 00:45;e.dimitrova;Thanks [~marcuse],  I raised CASSANDRA-15930 for handling of the mentioned edge case. ;;;","08/Jul/20 23:39;e.dimitrova;Considering CASSANDRA-15930 I added only sleep of 3 seconds before running repair preview in this test which should be enough to fix the issue. 

I ran it 300 times locally with the 2 cores successfully. 

[Patch |https://github.com/ekaterinadimitrova2/cassandra/commit/8aa799a38247475ce96a5421625ff4a7a88b44d9]

[~marcuse], [~dcapwell], anyone of you wants to do a quick review? Thanks in advance!;;;","08/Jul/20 23:58;dcapwell;your code shows 1 second, are you targeting 1 or 3 seconds?

I would prefer exec into each process to check the status but I can live with sleeps for now...;;;","09/Jul/20 00:19;e.dimitrova;My bad, it is 1. Patch with 1s, tested with 1s. 
Thanks!;;;","09/Jul/20 14:01;e.dimitrova;[~brandon.williams] do you mind to commit if you don't see any issue, please? The edge case will be fully handled in CASSANDRA-15930;;;","09/Jul/20 14:38;brandon.williams;Committed (with CHANGES entry removed since we don't list test fixes there);;;","09/Jul/20 16:41;dcapwell;I wasn't clear so being clear; +1;;;",,,,,,,,,,,,,,
CASSANDRA-15650 was merged after dtest refactor and modified classes no longer in the project,CASSANDRA-15684,13295854,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,02/Apr/20 17:54,21/Dec/20 08:08,13/Jul/23 08:39,06/Apr/20 17:09,4.0,4.0-alpha4,,,,Test/dtest/java,,,,0,pull-request-available,,,"CASSANDRA-15650 was based off commits before CASSANDRA-15539 which removed some of the files modified in CASSANDRA-15650.  The tests were passing pre-merge but off earlier commits.  On commit they started failing since the dtest API no longer match so produces the following exception

{code}
[junit-timeout] org.apache.cassandra.distributed.api.NodeToolResult$Asserts.errorContains([Ljava/lang/String;)Lorg/apache/cassandra/distributed/api/NodeToolResult$Asserts;
[junit-timeout] java.lang.NoSuchMethodError: org.apache.cassandra.distributed.api.NodeToolResult$Asserts.errorContains([Ljava/lang/String;)Lorg/apache/cassandra/distributed/api/NodeToolResult$Asserts;
[junit-timeout]         at org.apache.cassandra.distributed.test.RepairCoordinatorFast.lambda$unknownHost$5(RepairCoordinatorFast.java:216)
[junit-timeout]         at org.apache.cassandra.utils.AssertUtil.lambda$assertTimeoutPreemptively$0(AssertUtil.java:39)
[junit-timeout]         at org.apache.cassandra.utils.AssertUtil.lambda$assertTimeoutPreemptively$1(AssertUtil.java:67)
[junit-timeout]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout]         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]         at java.lang.Thread.run(Thread.java:748)
{code}

Root cause was 4 files exited which should have been deleted in CASSANDRA-15539.  Since they were not when CASSANDRA-15650 modified one it didn't cause a merge conflict, but when the test runs it conflicts and fails.


[Circle CI|https://circleci.com/gh/dcapwell/cassandra/tree/bug%2FCASSANDRA-15684]",,blerer,dcapwell,eduard.tudenhoefner,ifesdjeen,mck,,,,,,,"dcapwell commented on pull request #511: CASSANDRA-15684 RepairCoordinator tests fail after dtest refactor and modified classes no longer in the project
URL: https://github.com/apache/cassandra/pull/511
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 17:59;githubbot;600","dcapwell commented on pull request #5: CASSANDRA-15684 NodeToolResult was modified on trunk to produce better errors and to allow Any style message checks for errors, add them here
URL: https://github.com/apache/cassandra-in-jvm-dtest-api/pull/5
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 18:52;githubbot;600","dcapwell commented on pull request #511: CASSANDRA-15684 RepairCoordinator tests fail after dtest refactor and modified classes no longer in the project
URL: https://github.com/apache/cassandra/pull/511
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:40;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,CASSANDRA-15695,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15650,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Apr 06 16:28:25 UTC 2020,,,,,,,All,,,,,,"0|z0d7zk:",9223372036854775807,,,,blerer,dcapwell,ifesdjeen,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/a104b06d4aea2f2cd3d48bdbe38410284f236428,,,,,,,,,circle ci,,,,,"02/Apr/20 18:50;dcapwell;org.apache.cassandra.distributed.test.SimpleReadWriteTest failed, but is being worked on in CASSANDRA-15683
org.apache.cassandra.distributed.test.CasWriteTest timed out, which looks like CASSANDRA-15676);;;","02/Apr/20 18:53;dcapwell;[~ifesdjeen] can you review the dtest changes?
[~blerer] [~e.dimitrova] can you review the Cassandra changes?;;;","02/Apr/20 19:13;mck;FYI the patch for 15650 broke ~150 tests.
https://ci-cassandra.apache.org/job/Cassandra-trunk/30/ ;;;","03/Apr/20 08:52;blerer;The patches look fine to me.;;;","03/Apr/20 10:38;mck;for just the cassandra patch…
||branch||circleci||jenkins||
|[trunk_15684|https://github.com/apache/cassandra/compare/trunk...dcapwell:bug/CASSANDRA-15684]|[circleci|https://circleci.com/gh/dcapwell/cassandra/tree/bug%2FCASSANDRA-15684]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/14/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/14]|;;;","03/Apr/20 16:03;dcapwell;Thanks Michael, the direct link to the jvm-dtests [are here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-jvm-dtest/6/testReport/]

{code}
All Failed Tests

Test Name
Duration
Age
 org.apache.cassandra.distributed.test.CasWriteTest.casWriteContentionTimeoutTest (Failed 1 times in the last 6 runs. Flakiness: 20%, Stability: 83%)	0 ms	1
 org.apache.cassandra.distributed.test.SimpleReadWriteTest.readRepairTimeoutTest (Failed 1 times in the last 6 runs. Flakiness: 20%, Stability: 83%)	11 sec	1
 org.apache.cassandra.distributed.test.SimpleReadWriteTest.writeWithSchemaDisagreement (Failed 1 times in the last 6 runs. Flakiness: 20%, Stability: 83%)	9.8 sec	1
 org.apache.cassandra.distributed.test.SimpleReadWriteTest.readWithSchemaDisagreement (Failed 1 times in the last 6 runs. Flakiness: 20%, Stability: 83%)	9.7 sec	1
{code};;;","03/Apr/20 16:09;ifesdjeen;+1 for a Cassandra change. 

[~mck] if I understand the nature of the failure correctly, the main problem was merge. It was unintentional, and the patch itself was good, just based off earlier commit. 

I'll have to take a closer look at the dtest patch on Monday.;;;","06/Apr/20 16:28;mck;bq.  Michael Semb Wever if I understand the nature of the failure correctly, the main problem was merge.

That's my understanding too.

Since both you [~ifesdjeen] and [~blerer] have +1 on the main patch I've gone ahead and committed it.

Committed as [a104b06d4aea2f2cd3d48bdbe38410284f236428|https://github.com/apache/cassandra/commit/a104b06d4aea2f2cd3d48bdbe38410284f236428];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix NPE in SimpleReadWriteTest after test framework behavior change,CASSANDRA-15683,13295828,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,newkek,newkek,newkek,02/Apr/20 15:44,21/Dec/20 08:08,13/Jul/23 08:39,02/Apr/20 21:11,4.0,4.0-alpha4,,,,Test/dtest/java,,,,0,,,,"In JVM dtests, all exceptions thrown in a request execution used to be always wrapped in a RuntimeException.

After CASSANDRA-15650 changes, the behavior has been changed to: If the exception is a RuntimeException, just rethrow it, otherwise wrap in RuntimeException, as you can see in: [https://github.com/apache/cassandra/commit/dfc279a22a5563ac7a832a586914d5410426e9b7#diff-0b019281b7e97248577c82af0e663ef4R211]

This causes the tests that were always extracting the cause from the wrapping RuntimeException before, to check the root cause of the error, to throw a NPE when they call {{getCause()}}, tests such as {{SimpleReadWriteTest#readWithSchemaDisagreement}} and {{SimpleReadWriteTest#writeWithSchemaDisagreement}}.

Can be fixed by simply not unwrapping the cause in those tests, use the thrown exception directly, if the behavior of ""not always wrapping in RuntimeException"" is agreed to be correct.",,dcapwell,e.dimitrova,eduard.tudenhoefner,jasonstack,newkek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15539,CASSANDRA-15650,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,newkek,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 02 21:11:51 UTC 2020,,,,,,,All,,,,,,"0|z0d7ts:",9223372036854775807,,,,brandon.williams,dcapwell,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/6ae65967a5ed789164192104a3e220980f952e1c,,,,,,,,,no doc changes,,,,,"02/Apr/20 15:46;newkek;[~dcapwell] [~blerer] [~e.dimitrova] ping since you were author/reviewers on https://issues.apache.org/jira/browse/CASSANDRA-15650;;;","02/Apr/20 15:55;e.dimitrova;Noted, thanks. Benjamin actually pointed it at the pull request comments. Not sure what happened. Thanks for your help [~newkek]! Appreciate;;;","02/Apr/20 16:15;newkek;Changes available at: https://github.com/newkek/cassandra/pull/1;;;","02/Apr/20 18:07;dcapwell;Sorry about this, I must not have looked at the test results after making that change =(.;;;","02/Apr/20 18:48;dcapwell;Your circle results show the repair tests failing (attempting to fix in CASSANDRA-15684) and CasWrite test timeout, which failed for me in my build as well (looks like CASSANDRA-15676).;;;","02/Apr/20 19:35;dcapwell;Tests look good, results also show this fixes the issue.  +1;;;","02/Apr/20 21:11;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing commas between endpoints in nodetool describering,CASSANDRA-15682,13295774,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,stefan.miklosovic,Gerrrr,Gerrrr,02/Apr/20 11:55,21/Dec/20 08:08,13/Jul/23 08:39,07/Apr/20 08:35,4.0,4.0-alpha4,,,,Tool/nodetool,,,,0,,,,"*Setup*

3-node cluster created with ccm

{noformat}
cqlsh> create keyspace ks with replication = {'class': 'SimpleStrategy', 'replication_factor': 2};
{noformat}

*trunk*:

{noformat}
$ bin/nodetool describering ks --port 7100
Schema Version:295e8142-fc9f-3f76-b6db-24430ff572e5
TokenRange:
        TokenRange(start_token:-9223372036854775808, end_token:-3074457345618258603endpoints:[127.0.0.2, 127.0.0.3]rpc_endpoints:[127.0.0.2, 127.0.0.3]endpoint_details:[EndpointDetails(host:127.0.0.2, datacenter:d
atacenter1, rack:rack1), EndpointDetails(host:127.0.0.3, datacenter:datacenter1, rack:rack1)])
        TokenRange(start_token:-3074457345618258603, end_token:3074457345618258602endpoints:[127.0.0.3, 127.0.0.1]rpc_endpoints:[127.0.0.3, /127.0.0.1]endpoint_details:[EndpointDetails(host:127.0.0.3, datacenter:d
atacenter1, rack:rack1), EndpointDetails(host:127.0.0.1, datacenter:datacenter1, rack:rack1)])
        TokenRange(start_token:3074457345618258602, end_token:-9223372036854775808endpoints:[127.0.0.1, 127.0.0.2]rpc_endpoints:[/127.0.0.1, 127.0.0.2]endpoint_details:[EndpointDetails(host:127.0.0.1, datacenter:d
atacenter1, rack:rack1), EndpointDetails(host:127.0.0.2, datacenter:datacenter1, rack:rack1)])
{noformat}

*3.11* (correct output)

{noformat}
bin/nodetool describering ks --port 7100
Schema Version:c8fd35ea-6f49-3e77-85e7-a92e79df8696
TokenRange:
        TokenRange(start_token:-9223372036854775808, end_token:-3074457345618258603, endpoints:[127.0.0.2, 127.0.0.3], rpc_endpoints:[127.0.0.2, 127.0.0.3], endpoint_details:[EndpointDetails(host:127.0.0.2, datace
nter:datacenter1, rack:rack1), EndpointDetails(host:127.0.0.3, datacenter:datacenter1, rack:rack1)])
        TokenRange(start_token:-3074457345618258603, end_token:3074457345618258602, endpoints:[127.0.0.3, 127.0.0.1], rpc_endpoints:[127.0.0.3, 127.0.0.1], endpoint_details:[EndpointDetails(host:127.0.0.3, datacen
ter:datacenter1, rack:rack1), EndpointDetails(host:127.0.0.1, datacenter:datacenter1, rack:rack1)])
        TokenRange(start_token:3074457345618258602, end_token:-9223372036854775808, endpoints:[127.0.0.1, 127.0.0.2], rpc_endpoints:[127.0.0.1, 127.0.0.2], endpoint_details:[EndpointDetails(host:127.0.0.1, datacen
ter:datacenter1, rack:rack1), EndpointDetails(host:127.0.0.2, datacenter:datacenter1, rack:rack1)])
{noformat}",,blerer,Gerrrr,stefan.miklosovic,,,,,,,,,"smiklosovic closed pull request #517:
URL: https://github.com/apache/cassandra/pull/517


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Sep/20 09:36;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,stefan.miklosovic,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 07 08:36:22 UTC 2020,,,,,,,All,,,,,,"0|z0d7hs:",9223372036854775807,,,,blerer,jake,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/007a9357cff44bfb1493ce37fe8a74b6697934bb,,,,,,,,,Manual testing,,,,,"06/Apr/20 15:14;stefan.miklosovic;PR with the fix here [https://github.com/apache/cassandra/pull/517];;;","07/Apr/20 08:35;blerer;Committed into trunk at 007a9357cff44bfb1493ce37fe8a74b6697934bb;;;","07/Apr/20 08:36;blerer;Thanks for the patch [~stefan.miklosovic].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"cqlsh COPY FROM of map of blobs fails with parse error ""unhashable type: 'bytearray'""",CASSANDRA-15679,13295123,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,flightc,flightc,31/Mar/20 01:16,15/May/20 08:54,13/Jul/23 08:39,09/Apr/20 13:31,2.1.x,2.2.17,3.11.7,4.0,4.0-alpha4,Tool/cqlsh,,,,0,pull-request-available,,,"h2. Background
A user was having issues loading CSV data with the {{COPY FROM}} command into a {{map}} column with {{blob}} values.
h2. Replication steps
I can easily replicate the problem with this simple table:

{noformat}
CREATE TABLE community.blobmaptable (
    id text PRIMARY KEY,
    blobmapcol map<int, blob>
)
{noformat}

I have this CSV file that contains just 1 row:

{noformat}
$ cat blobmap.csv 
c3,{3: 0x74776f}
{noformat}

And here's the error when I try to load it:

{noformat}
cqlsh:community> COPY blobmaptable (id, blobmapcol) FROM '~/blobmap.csv' ;
Using 1 child processes
Starting copy of community.blobmaptable with columns [id, blobmapcol].
Failed to import 1 rows: ParseError - Failed to parse {3: 0x74776f} : unhashable type: 'bytearray',  given up without retries
Failed to process 1 rows; failed rows written to import_community_blobmaptable.err
Processed: 1 rows; Rate:       2 rows/s; Avg. rate:       3 rows/s
1 rows imported from 1 files in 0.389 seconds (0 skipped).
{noformat}

I've also logged [PYTHON-1234|https://datastax-oss.atlassian.net/browse/PYTHON-1234] because I wasn't sure if it was a Python driver issue. Cheers!",,aboudreault,adutra,flightc,Gerrrr,jasonstack,stefania,,,,,,"Gerrrr commented on pull request #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61
 
 
   https://issues.apache.org/jira/browse/CASSANDRA-15679
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 09:24;githubbot;600","Gerrrr commented on pull request #506: CASSANDRA-15679 Don't use bytearray for blobs in copyutil.py
URL: https://github.com/apache/cassandra/pull/506
 
 
   * Use str in Python 2
   * Use bytes in Python 3
   
   https://issues.apache.org/jira/browse/CASSANDRA-15679
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 09:25;githubbot;600","Gerrrr commented on pull request #507: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py
URL: https://github.com/apache/cassandra/pull/507
 
 
   https://issues.apache.org/jira/browse/CASSANDRA-15679
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 09:26;githubbot;600","Gerrrr commented on pull request #508: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 3.0
URL: https://github.com/apache/cassandra/pull/508
 
 
   https://issues.apache.org/jira/browse/CASSANDRA-15679
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 09:27;githubbot;600","Gerrrr commented on pull request #509: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 2.2
URL: https://github.com/apache/cassandra/pull/509
 
 
   https://issues.apache.org/jira/browse/CASSANDRA-15679
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 09:27;githubbot;600","Gerrrr commented on pull request #510: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 2.1
URL: https://github.com/apache/cassandra/pull/510
 
 
   https://issues.apache.org/jira/browse/CASSANDRA-15679
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 09:28;githubbot;600","stef1927 commented on pull request #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61#discussion_r402445998
 
 

 ##########
 File path: cqlsh_tests/test_cqlsh_copy.py
 ##########
 @@ -1788,9 +1794,15 @@ def test_all_datatypes_read(self):
             writer = csv.writer(csvfile)
             # serializing blob bytearray in friendly format
             data_set = list(self.data)
-            data_set[2] = '0x{}'.format(''.join('%02x' % c for c in self.data[2]))
+            data_set[2] = _format_blob(self.data[2])
+            data_set[25][3] =  _format_blob(self.data[25][3])
+            data_set[26] = [_format_blob(el) for el in self.data[26]]
+            data_set[27] = {_format_blob(el) for el in self.data[27]}
             writer.writerow(data_set)
 
+        def _format_blob(blob):
+            return '0x{}'.format(''.join('%02x' % c for c in self.data[2]))
+
 
 Review comment:
   I'm getting an error at line 1797 unless I move `format_blob` before it gets used. Also, `self.data[2]` should be `blob`? Once I fixed this, there was a problem with the indexes for `data_set`. Is this what you meant: https://github.com/stef1927/cassandra-dtest-1/commit/966e6db437cd0a6ecd731ffe9a6279a275065341?
   
   If that commit is correct, I still see problems in copyutil unfortunately.
   
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 16:27;githubbot;600","stef1927 commented on pull request #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61#discussion_r402463867
 
 

 ##########
 File path: cqlsh_tests/test_cqlsh_copy.py
 ##########
 @@ -237,7 +237,10 @@ def all_datatypes_prepare(self):
                 u frozen<list<list<address_type>>>,
                 v frozen<map<map<int,int>,set<text>>>,
                 w frozen<set<set<inet>>>,
-                x map<text, frozen<list<text>>>
+                x map<text, frozen<list<text>>>,
+                y map<int, blob>,
+                z list<blob>,
+                aa set<blob>
 
 Review comment:
   The columns need to be in alphabetical order, see 449e96b2a7aa8cc6dbbcf189e75b6f547e8e314f
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 16:54;githubbot;600","stef1927 commented on pull request #506: CASSANDRA-15679 Don't use bytearray for blobs in copyutil.py 4.0
URL: https://github.com/apache/cassandra/pull/506#discussion_r402537088
 
 

 ##########
 File path: pylib/cqlshlib/copyutil.py
 ##########
 @@ -1933,7 +1933,10 @@ def convert_mandatory(t, v):
             return converters.get(t.typename, convert_unknown)(v, ct=t)
 
         def convert_blob(v, **_):
-            return bytearray.fromhex(v[2:])
+            if sys.version_info.major >= 3:
+                return bytes.fromhex(v[:2])
 
 Review comment:
   `2:`
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 18:50;githubbot;600","stef1927 commented on issue #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61#issuecomment-608084370
 
 
   Final fixes for python 3 here: [efc29d3](https://github.com/stef1927/cassandra-dtest-1/commit/efc29d31fc71a1586e6d00ec0a671a732cd9f519). The branch is [here](https://github.com/stef1927/cassandra-dtest-1/commits/CASSANDRA-15679). 
   
   The 3 tests now pass locally for me, but I haven't been able to test with python 2 yet. 
   
   If you can do better that what I did [here](https://github.com/stef1927/cassandra-dtest-1/commit/efc29d31fc71a1586e6d00ec0a671a732cd9f519#diff-d9d0a60f4ae32bbc50dd7f4e74d407ceR1802), feel free to change the code. The problem is that the csv writer adds extra quotes around the blobs in the container structures but it does now when writing it at top level...
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 21:05;githubbot;600","stef1927 commented on issue #510: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 2.1
URL: https://github.com/apache/cassandra/pull/510#issuecomment-608089718
 
 
   Here is what I had to do to get it to work locally (manual test): https://github.com/stef1927/cassandra/commit/41a29e5bdb4d2efc8b80425cd16dcc3d0111e7d3
   
   I noticed it was hitting the exception at line 1733 because of the typo and so I got rid of the exceptional case.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 21:08;githubbot;600","stef1927 commented on issue #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61#issuecomment-611524093
 
 
   Committed manually as 88cc70b4d6b598c60d4b567cdceff49a76140312.
   
   @Gerrrr would you mind double checking and closing the PR if you can (I can't)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 13:20;githubbot;600","Gerrrr commented on issue #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61#issuecomment-611527001
 
 
   Thank you, @stef1927!
   
   I double checked https://github.com/apache/cassandra-dtest/commit/88cc70b4d6b598c60d4b567cdceff49a76140312 and it looks correct; closing this PR.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 13:26;githubbot;600","Gerrrr commented on pull request #61: CASSANDRA-15679 Test COPY on collections with blobs
URL: https://github.com/apache/cassandra-dtest/pull/61
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 13:26;githubbot;600","Gerrrr commented on pull request #510: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 2.1
URL: https://github.com/apache/cassandra/pull/510
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 14:02;githubbot;600","Gerrrr commented on pull request #509: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 2.2
URL: https://github.com/apache/cassandra/pull/509
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 14:02;githubbot;600","Gerrrr commented on pull request #508: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 3.0
URL: https://github.com/apache/cassandra/pull/508
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 14:02;githubbot;600","Gerrrr commented on pull request #507: CASSANDRA-15679 Use str instead of bytearray for blobs in copyutil.py 3.11
URL: https://github.com/apache/cassandra/pull/507
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 14:02;githubbot;600","Gerrrr commented on pull request #506: CASSANDRA-15679 Don't use bytearray for blobs in copyutil.py 4.0
URL: https://github.com/apache/cassandra/pull/506
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 14:03;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,11400,,,0,11400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Gerrrr,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 13:31:16 UTC 2020,,,,,,,All,,,,,,"0|z0d3hc:",9223372036854775807,,,,stefania,,,,Low,,2.1.21,,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=f3568c0d50ac7573b53f0043b2567bde3b39bee8",,,,,,,,,"This bug is triggered when we try to deserialize a blob inside a container, such as list, set, or map. copyutil stores blobs as bytearrays. Python bytearrays are mutable and not hashable data structures.

In Python 3 there is bytes type that is exactly what we need in this situation. On older versions that do not support Python 3 and in case we run cqlsh with Python 2 at 4.0, we should fall back to str.


https://github.com/apache/cassandra/pull/506
https://github.com/apache/cassandra/pull/507
https://github.com/apache/cassandra/pull/508
https://github.com/apache/cassandra/pull/509
https://github.com/apache/cassandra/pull/510",,,,,"02/Apr/20 09:37;Gerrrr;This bug is triggered when we try to deserialize a blob inside a container, such as list, set, or map. {{copyutil}}  stores blobs as {{bytearrays}}. Python {{bytearrays}} are mutable and not hashable data structures.

In Python 3 there is {{bytes}} type that is exactly what we need in this situation. On older versions that do not support Python 3 and in case we run {{cqlsh}} with Python 2 at 4.0, we should fall back to {{str}}.  ;;;","09/Apr/20 13:31;stefania;CI runs:

[28|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/28/]
 [30|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/30/]
 [31|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/31/]
 [34|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/34/]
 [35|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/35/]

 

Dtest changes:

[88cc70b4d6b598c60d4b567cdceff49a76140312|https://github.com/apache/cassandra-dtest/commit/88cc70b4d6b598c60d4b567cdceff49a76140312]

 

 

 

 

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Updates for 3.11.6 got overwritten for NEWS.txt, CHANGES.txt",CASSANDRA-15678,13295118,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,flightc,flightc,flightc,31/Mar/20 00:19,16/Mar/22 13:16,13/Jul/23 08:39,01/Apr/20 19:35,4.0,4.0-alpha4,,,,Documentation/NEWS.txt,,,,0,pull-request-available,,,"h2. Background
I discovered by accident that the C* 3.11.6 sections are missing from the {{trunk}} version of [NEWS.txt|[https://github.com/apache/cassandra/blob/trunk/NEWS.txt]] and [CHANGES.txt|https://github.com/apache/cassandra/blob/trunk/CHANGES.txt]. I've posted the missing text below.

h2. [NEWS.txt|https://github.com/apache/cassandra/blob/cassandra-3.11.6/NEWS.txt]

{noformat}
PLEASE READ: CVE-2017-5929 LOGBACK BEFORE 1.2.0 SERIALIZATION VULNERABILITY
------------------------------------------------------------------
QOS.ch Logback before 1.2.0 has a serialization vulnerability affecting the
SocketServer and ServerSocketReceiver components.Logback has not been upgraded to avoid breaking deployments and customizations
based on older versions. If you are using vulnerable components you will need
to upgrade to a newer version of Logback or stop using the vulnerable components. {noformat}

{noformat}
3.11.6
======

Upgrading
---------
    - Sstables for tables using with a frozen UDT written by C* 3.0 appear as corrupted.

      Background: The serialization-header in the -Statistics.db sstable component contains the type information
      of the table columns. C* 3.0 write incorrect type information for frozen UDTs by omitting the
      ""frozen"" information. Non-frozen UDTs were introduced by CASSANDRA-7423 in C* 3.6. Since then, the missing
      ""frozen"" information leads to deserialization issues that result in CorruptSSTableExceptions, potentially other
      exceptions as well.

      As a mitigation, the sstable serialization-headers are rewritten to contain the missing ""frozen"" information for
      UDTs once, when an upgrade from C* 3.0 is detected. This migration does not touch snapshots or backups.

      The sstablescrub tool now performs a check of the sstable serialization-header against the schema. A mismatch of
      the types in the serialization-header and the schema will cause sstablescrub to error out and stop by default.
      See the new `-e` option. `-e off` disables the new validation code. `-e fix` or `-e fix-only`, e.g.
      `sstablescrub -e fix keyspace table`, will validate the serialization-header, rewrite the non-frozen UDTs
      in the serialzation-header to frozen UDTs, if that matches the schema, and continue with scrub.
      See `sstablescrub -h`.
      (CASSANDRA-15035)
	- repair_session_max_tree_depth setting has been added to cassandra.yaml to allow operators to reduce
	  merkle tree size if repair is creating too much heap pressure. See CASSANDRA-14096 for details.
    - Nothing specific to this release, but please see previous upgrading sections,
      especially if you are upgrading from 3.0.
{noformat}

h2. [CHANGES.txt|https://github.com/apache/cassandra/blob/cassandra-3.11.6/CHANGES.txt]

{noformat}
3.11.6
 * Fix bad UDT sstable metadata serialization headers written by C* 3.0 on upgrade and in sstablescrub (CASSANDRA-15035)
 * Fix nodetool compactionstats showing extra pending task for TWCS - patch implemented (CASSANDRA-15409)
 * Fix SELECT JSON formatting for the ""duration"" type (CASSANDRA-15075)
 * Fix LegacyLayout to have same behavior as 2.x when handling unknown column names (CASSANDRA-15081)
 * Update nodetool help stop output (CASSANDRA-15401)
Merged from 3.0:
 * Run in-jvm upgrade dtests in circleci (CASSANDRA-15506)
 * Include updates to static column in mutation size calculations (CASSANDRA-15293)
 * Fix point-in-time recoevery ignoring timestamp of updates to static columns (CASSANDRA-15292)
 * GC logs are also put under $CASSANDRA_LOG_DIR (CASSANDRA-14306)
 * Fix sstabledump's position key value when partitions have multiple rows (CASSANDRA-14721)
 * Avoid over-scanning data directories in LogFile.verify() (CASSANDRA-15364)
 * Bump generations and document changes to system_distributed and system_traces in 3.0, 3.11
   (CASSANDRA-15441)
 * Fix system_traces creation timestamp; optimise system keyspace upgrades (CASSANDRA-15398)
 * Fix various data directory prefix matching issues (CASSANDRA-13974)
 * Minimize clustering values in metadata collector (CASSANDRA-15400)
 * Avoid over-trimming of results in mixed mode clusters (CASSANDRA-15405)
 * validate value sizes in LegacyLayout (CASSANDRA-15373)
 * Ensure that tracing doesn't break connections in 3.x/4.0 mixed mode by default (CASSANDRA-15385)
 * Make sure index summary redistribution does not start when compactions are paused (CASSANDRA-15265)
 * Ensure legacy rows have primary key livenessinfo when they contain illegal cells (CASSANDRA-15365)
 * Fix race condition when setting bootstrap flags (CASSANDRA-14878)
Merged from 2.2:
 * Fix SELECT JSON output for empty blobs (CASSANDRA-15435)
 * In-JVM DTest: Set correct internode message version for upgrade test (CASSANDRA-15371)
 * In-JVM DTest: Support NodeTool in dtest (CASSANDRA-15429)
 * Fix NativeLibrary.tryOpenDirectory callers for Windows (CASSANDRA-15426)
{noformat}
",,flightc,rustyrazorblade,,,,,,,,,,"flightc commented on pull request #501: CASSANDRA-15678 Republished 3.11.6 NEWS.txt, CHANGES.txt
URL: https://github.com/apache/cassandra/pull/501
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/20 07:10;githubbot;600","smiklosovic closed pull request #501:
URL: https://github.com/apache/cassandra/pull/501


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:16;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"31/Mar/20 07:20;flightc;15678-trunk.txt;https://issues.apache.org/jira/secure/attachment/12998296/15678-trunk.txt",,,,,,,,,,,,,,1.0,flightc,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Apr 01 19:35:38 UTC 2020,,,,,,,All,,,,,,"0|z0d3g8:",9223372036854775807,,,,rustyrazorblade,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/45911cba758fb42effcd52fe52bac91df9143548,,,,,,,,,"Republished overwritten entries for 3.11.6 in NEWS.txt, CHANGES.txt",,,,,"31/Mar/20 06:09;flightc;Noting here that a {{diff}} shows some lines unrelated to 3.11.6 that's also missing from {{trunk}}:

{noformat}
$ git diff cassandra-3.11.5..cassandra-3.11.6 -- NEWS.txt
{noformat}

{noformat}
@@ -580,6 +607,8 @@ Upgrading
    - The 'index_interval' option for 'CREATE TABLE' statements, which has been deprecated
      since 2.1 and replaced with the 'min_index_interval' and 'max_index_interval' options,
      has now been removed.
+   - The 'replicate_on_write' and 'populate_io_cache_on_flush' options for 'CREATE TABLE' statements,
+     which have been deprecated since 2.1, have also been removed.
    - Batchlog entries are now stored in a new table - system.batches.
      The old one has been deprecated.
    - JMX methods set/getCompactionStrategyClass have been removed, use
{noformat}

It will need to be dealt with separately which I'll discuss on Slack at a later stage.;;;","31/Mar/20 07:22;flightc;Patch available as follows:
* PR #501 - https://github.com/apache/cassandra/pull/501
* Attached -  [^15678-trunk.txt] 

Ready for review. (y);;;","01/Apr/20 19:35;rustyrazorblade;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Topology events are not sent to clients if the nodes use the same network interface,CASSANDRA-15677,13295063,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bryncooke,aboudreault,aboudreault,30/Mar/20 18:26,08/Jun/21 00:58,13/Jul/23 08:39,22/Jun/20 14:19,4.0,4.0-beta1,,,,Messaging/Client,,,,0,pull-request-available,,,"*This bug only happens when the cassandra nodes are configured to use a single network interface (ip) but different ports.  See CASSANDRA-7544.*

Issue: The topology events aren't sent to clients. The problem is that the port is not taken into account when determining if we send it or not:
https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/transport/Server.java#L624

To reproduce:
{code}
# I think the cassandra-test branch is required to get the -S option (USE_SINGLE_INTERFACE)
ccm create -n4 local40 -v 4.0-alpha2 -S
{code}
 
Then run this small python driver script:
{code}
import time
from cassandra.cluster import Cluster

cluster = Cluster()
session = cluster.connect()

while True:
    print(cluster.metadata.all_hosts())
    print([h.is_up for h in cluster.metadata.all_hosts()])
    time.sleep(5)
{code}

Then decommission a node:
{code}
ccm node2 nodetool disablebinary
ccm node2 nodetool decommission
{code}
 
You should see that the node is never removed from the client cluster metadata and the reconnector started.",,aboudreault,bereng,bryncooke,jasonstack,maedhroz,PuerTea,,,,,,"aboudreault commented on pull request #499: CASSANDRA-15677: Make sure topology events are sent to clients when using a single network interface
URL: https://github.com/apache/cassandra/pull/499
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Apr/20 18:53;githubbot;600","aboudreault commented on pull request #499: CASSANDRA-15677: Make sure topology events are sent to clients when using a single network interface
URL: https://github.com/apache/cassandra/pull/499
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Apr/20 14:58;githubbot;600","BrynCooke opened a new pull request #597:
URL: https://github.com/apache/cassandra/pull/597


   Building upon a fix by @aboudreault this PR fixes the situation where events are not sent due to
   incorrect logic for detecting if an event message was destined for a different node.
   
   To enable testing the dTest logic has been slightly enhanced to allow tests to specify how they want to run, either on a single network interface or multiple network interfaces.
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/May/20 15:29;githubbot;600","BrynCooke commented on pull request #597:
URL: https://github.com/apache/cassandra/pull/597#issuecomment-631580379


   Looks like things have changes significantly due to the dtest API being pulled out. I'm going to have to revisit this.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/May/20 16:21;githubbot;600","BrynCooke closed pull request #597:
URL: https://github.com/apache/cassandra/pull/597


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/May/20 16:22;githubbot;600","BrynCooke opened a new pull request #617:
URL: https://github.com/apache/cassandra/pull/617


   This PR fixes events that were not sent due to filtering on ip address rather than ip address and port.
   It also adds the ability for dTests to run on the same network interface.
   
   Finally it was noticed that when running tests locally there were frequent metaspace errors.
   Closing the JMX broadcaster thread pool when shutting down a node seems to greatly help with this.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jun/20 10:35;githubbot;600","BrynCooke closed pull request #617:
URL: https://github.com/apache/cassandra/pull/617


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jun/20 08:13;githubbot;600","BrynCooke opened a new pull request #617:
URL: https://github.com/apache/cassandra/pull/617


   This PR fixes events that were not sent due to filtering on ip address rather than ip address and port.
   It also adds the ability for dTests to run on the same network interface.
   
   Finally it was noticed that when running tests locally there were frequent metaspace errors.
   Closing the JMX broadcaster thread pool when shutting down a node seems to greatly help with this.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jun/20 08:15;githubbot;600","BrynCooke closed pull request #617:
URL: https://github.com/apache/cassandra/pull/617


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Jun/20 18:13;githubbot;600","BrynCooke opened a new pull request #647:
URL: https://github.com/apache/cassandra/pull/647


   Update driver version to prevent issues with extra events being received when a node is decommissioned.
   
   Added an extra test for restarting nodes.
   Added checks for client events.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Jun/20 18:15;githubbot;600","BrynCooke opened a new pull request #79:
URL: https://github.com/apache/cassandra-dtest/pull/79


   Clusters Pre 4.0 did not send topology events for nodes if they were on localhost due to the events having the incorrect port number.
   This has now been fixed, so the tests needed to be updated to check for the events and their port numbers.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jun/20 10:50;githubbot;600","michaelsembwever closed pull request #79:
URL: https://github.com/apache/cassandra-dtest/pull/79


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600","BrynCooke closed pull request #647:
URL: https://github.com/apache/cassandra/pull/647


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/May/21 19:42;githubbot;600","aboudreault closed pull request #499:
URL: https://github.com/apache/cassandra/pull/499


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jun/21 00:58;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,8400,,,0,8400,,,,,,,,,,,,,,CASSANDRA-15886,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16234,CASSANDRA-15912,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bryncooke,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jul 02 10:24:55 UTC 2020,,,,,,,All,,,,,,"0|z0d340:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/6317fefec80c4c35aa588a6b610c25630df656f6,,,,,,,,,"Added a new in-jvm-dtests

Updated existing python dTests

 ",,,,,"30/Mar/20 18:32;aboudreault;Here is my proposed patch: https://github.com/apache/cassandra/pull/499;;;","30/Mar/20 19:55;brandon.williams;Could you also add a test for this? Perhaps the dtests are the best/easiest place.;;;","30/Mar/20 20:02;aboudreault;Sure, will setup cassandra-dtests and add a test for this.;;;","11/May/20 20:56;aboudreault;I've unassigned myself in case someone else is looking for a task to pick since I haven't been able to get back to this yet. This ticket only affect a cluster that is using a single interface for all nodes (different ports). From my discussion with Ariel. CASSANDRA-7544 was tested by running manually all dtests with the single interface ccm option. There is actually no specific dtests  for that and it's not something that is run regularly. So to complete this ticket:
 * If there is no way yet to easily run the dtests with the single interface mode, it might be a good idea to add something for this.
 * Check if there is a test for those topology events (expected)
 * Run it and see why it is not failing with the single interface mode
 * Run the entire dtests suite with the single interface mode and ensure everything is OK;;;","19/May/20 14:01;bryncooke;I'm having a go at this.
The dtest code needs tweaking to allow tests on the same interface.;;;","21/May/20 10:20;bryncooke;[~dcapwell] I think that I'll need a bump to cassandra-in-jvm-dtest-api to make this happen. I need [https://github.com/apache/cassandra-in-jvm-dtest-api/commit/326045f699791686efa1ecf43b7353397c956494]

Is cassandra-in-jvm-dtest-api in a position to create a new release? If so I could create a PR to handle the changes on the C* side.;;;","08/Jun/20 15:01;bryncooke;Looks like dtest-api got bumped recently. I've created a new PR and will move to review after CI tests complete.;;;","09/Jun/20 17:24;brandon.williams;Do you have links to the CI runs?;;;","09/Jun/20 18:15;bryncooke;I've added links to the ticket.

I'm new to this so if I need to run more tests then I can do so.;;;","09/Jun/20 19:00;brandon.williams;I'm not sure how this decom test actually tests this, can you explain?;;;","09/Jun/20 19:34;bryncooke;Without Alan's change the decommissioned node is never reported to have left the cluster because the topology event is never sent. I verified that the test failed without his change.

That being said, if there is a more targeted way of testing this functionality then it would be better. I could take another look if you feel this is likely to be possible without large refactoring.

 ;;;","09/Jun/20 20:40;brandon.williams;I see now, thanks!  Committed.;;;","09/Jun/20 20:56;brandon.williams;I'm not sure how circle got around this, but it broke jenkins: https://ci-cassandra.apache.org/job/Cassandra-trunk-artifacts/164/console

Looks like maybe we don't have that test api commit you mentioned earlier in the ticket?

I've reverted this for now temporarily.;;;","10/Jun/20 08:32;bryncooke;It's 0.0.2 on trunk, which has the changes needed.

It looks like only 65de93d4fe2b48565955ae7e49adbadf510ed3c5 was taken from the PR?
 3fe0b77b985d76e1456241e56b4b92a965926d72 is needed as well at minimum.

TIL that github PRs do not display ordered by commit and instead in chronological order: [https://help.github.com/en/github/committing-changes-to-your-project/why-are-my-commits-in-the-wrong-order]

My local git log looks like this:
{noformat}
commit 5356c267de3bb1306f52c05a8afbb01dafddf28e (HEAD -> CASSANDRA-15677, origin/CASSANDRA-15677)
Author: bryn <bryncooke@gmail.com>
Date:   Mon Jun 8 11:02:42 2020 +0100    CASSANDRA-15677 Add shutdown to JMX thread pool to avoid metaspace errors associated with thread leaks.
    There are still other thread shutdown issues remaining, but this seems to be the most serious one.

commit 65de93d4fe2b48565955ae7e49adbadf510ed3c5
Author: Alan Boudreault <alan@kovaro.ca>
Date:   Mon Mar 30 14:27:55 2020 -0400    CASSANDRA-15677 Make sure topology events are sent to clients when using a single network interface

commit 3fe0b77b985d76e1456241e56b4b92a965926d72
Author: bryn <bryncooke@gmail.com>
Date:   Wed May 20 16:16:33 2020 +0100    CASSANDRA-15677 Add the ability to run dTests on the same interface.

commit 7bbc97e5835b64c49fd418581f5a45429c1806b1
Merge: 69ea5ffdbc 04b0049831
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Fri Jun 5 19:34:13 2020 +0200    Merge branch 'cassandra-3.11' into trunk
{noformat};;;","10/Jun/20 15:21;brandon.williams;You're right, somehow I grabbed the commit and not the PR, my mistake.  Fixed.;;;","16/Jun/20 20:35;brandon.williams;This broke two python dtests: test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications,
test_move_single_node_localhost - pushed_notifications_test.TestPushedNotifications.

This is because those tests expect no notifications, where now some exist: https://app.circleci.com/pipelines/github/driftx/cassandra/29/workflows/e2a641fa-8100-49e6-8c5a-da46d3fcee5f/jobs/241

These both assert this way due to CASSANDRA-10052.  Are we sure this new behavior is correct?;;;","18/Jun/20 09:32;bryncooke;-This comment seems to indicate that the existing behaviour was a workaround to the drivers not distinguishing nodes by address and socket: https://issues.apache.org/jira/browse/CASSANDRA-10052?focusedCommentId=14725534&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14725534-

-It looks like the Java driver no longer has this issue, at least I don't see any calls to Host#getListenAddress or Host#getBroadcastAddress. Everything seems to be using address and port.-

[~aboudreault] -how do things look like on the other drivers?-

 -Edit:-

-Just had a look at the python driver and Endpoint was added to the Python driver here: [https://github.com/datastax/python-driver/blob/c88255f202a21bbbae35f16e603b0f10f2f2cf36/cassandra/connection.py#L116]-

-Node.js has Host support here: [https://github.com/datastax/nodejs-driver/blob/master/lib/host.js#L41]-

-C# has [https://github.com/datastax/csharp-driver/blob/master/src/Cassandra/Host.cs#L78]- 

-CPP has [https://github.com/datastax/cpp-driver/blob/master/src/host.hpp#L92]- 

-So I think all of the drivers can now distinguish between nodes based on node and port. But it would probably be best for one of the driver devs to weigh in.-

 

Ignore this. I misread Tyler's comment.

 ;;;","19/Jun/20 16:43;bryncooke;Quick update.
It looks like the behaviour since https://issues.apache.org/jira/browse/CASSANDRA-10052 has changed.

Pre-11052 when the node was dropped the events received for test_restart_node_localhost had the wrong node listed.

On trunk the events received are for the correct node. So on the face of it is looks like something has been fixed since 10052 that means that is it now OK to receive events when running on the same interface.

However, when testing using the in-jvm dTests decommissioning a node still produces extra remove and add events for nodes that should not have been affected. This probably related to the original problem in 10052 in some way.

 ;;;","19/Jun/20 16:48;brandon.williams;Hmm, so the python dtests can be fixed, since they are just seeing UP/DOWN and MOVED events, but there is a secondary problem with extra ADD/REMOVE events with this patch?  Is that correct?;;;","19/Jun/20 18:44;bryncooke;It looks like the ADD/REMOVE events are actually a java driver bug that has been fixed.
[https://github.com/datastax/java-driver/blob/3.x/driver-core/src/main/java/com/datastax/driver/core/Cluster.java#L2738]

Updating the driver version makes them go away.

Here is another PR that adds more tests and bumps the driver: [https://github.com/apache/cassandra/pull/647] 

I think we are safe to modify the python dTests to bring them in line with current functionality, and I'll create a PR for them on Monday.;;;","19/Jun/20 19:06;brandon.williams;bq. I think we are safe to modify the python dTests to bring them in line with current functionality, and I'll create a PR for them on Monday.

Excellent.  I started CI on your 647 PR here:

https://ci-cassandra.apache.org/job/Cassandra-devbranch/162/;;;","22/Jun/20 10:51;bryncooke;I've created a PR for the dTests https://github.com/apache/cassandra-dtest/pull/79;;;","22/Jun/20 14:19;brandon.williams;Committed both, thanks!;;;","01/Jul/20 17:51;bryncooke;[~brandon.williams] It looks like we are getting occasional NEW_NODE events rather than NODE_UP with the modified dTest

[https://app.circleci.com/pipelines/github/jasonstack/cassandra/231/workflows/cdf55335-c876-450b-8bf9-1d778a2df806/jobs/2240]

This feels like a separate issue, but do we reopen this ticket?

 ;;;","01/Jul/20 17:58;brandon.williams;My gut says that's a separate issue as well, let's open a new ticket.  We can reference this one.;;;","02/Jul/20 10:24;bryncooke;Created CASSANDRA-15912;;;",,,,,,,,,,,,,,,,,,,,,
liveDiskSpaceUsed and totalDiskSpaceUsed get corrupted if IndexSummaryRedistribution gets interrupted,CASSANDRA-15674,13294576,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,27/Mar/20 23:50,15/May/20 08:54,13/Jul/23 08:39,07/May/20 10:28,4.0,4.0-beta1,,,,Local/Compaction,Observability/Metrics,,,0,,,,"IndexSummaryRedistribution is a compaction task and as such extends Holder and supports cancelation by throwing a CompactionInterruptedException.  The issue is that IndexSummaryRedistribution tries to use transactions, but mutates the sstable in-place; transaction is unable to roll back.

This would be fine (only updates summary) if it wasn’t for the fact the task attempts to also mutate the two metrics liveDiskSpaceUsed and totalDiskSpaceUsed, since these can’t be rolled back any cancelation could corrupt these metrics.",,benedict,dcapwell,e.dimitrova,jeromatron,jwest,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu May 07 10:28:14 UTC 2020,,,,,,,All,,,,,,"0|z0d048:",9223372036854775807,,,,jwest,marcuse,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/b105e919678240b5f448df9acaf6c93117f0c0cc,,,,,,,,,PR: https://github.com/apache/cassandra/pull/500,,,,,"28/Mar/20 01:10;dcapwell;Prototyping and I see that the reason for the transaction is to swap SSTableReaders into the view.  Summary is a local disk thing but we store it in-memory; the swap will replace in-memory with the new summary.

The issue remains that we mutate in-place so roll back doesn't happen.;;;","31/Mar/20 17:58;dcapwell;to handle this I added 2 hooks into the transaction: onCommit, onRollback.  Both the hooks apply the update, but apply different updates.  onCommit deletes the whole file since the transaction will add it back with the latest size, onRollback removes the diff (the disk mutation is done outside of the transaction, so still need to apply).;;;","10/Apr/20 18:47;e.dimitrova;Hi [~jrwest],
I see you are assigned as a reviewer, are you looking into this?
Do you need help?;;;","13/Apr/20 21:29;jwest;Thanks [~dcapwell]. The primary question I had is why you chose the hooks that were added vs using the existing onCommit/onAbort API with a delegate or sub-class implementation used only for IndexSummaryRedistribution. On the surface that would limit the scope of the change but may actually be more invasive? Anyways, wanted to get your input and maybe [~benedict]'s as well as the original API author. 

Otherwise, my other comments are all minor:
* Pending counter: can you say a bit more about how you would see an operator using this metric? 
* consider renaming Listener#onPreSample to Listener#beforeResample
* The 4-arity version of the IndexSummaryRedistribution constructor should be marked @VisibleForTest (and maybe the Listener too? — or at least some comment that for now it only exists for tests)
* DiskSpaceMetricsTest: Is the TODO on L125 still valid or can it be removed? Looks like the latter;;;","13/Apr/20 21:55;dcapwell;bq. why you chose the hooks that were added vs using the existing onCommit/onAbort API with a delegate or sub-class implementation used only for IndexSummaryRedistribution.

IndexSummaryRedistribution mutates disk in-place but relies on the metrics to be updated via transactions.  Right now the commit case works since IndexSummaryRedistribution will delete the current size (before the mutation) so the readd will update the size.  In the abort case we need to know the deltas (can only compute right after mutating), so would need a list of deltas to apply in onAbort.  This logic is very specific to IndexSummaryRedistribution and would rely on extending LifecycleTransaction to apply this list. I felt that commit/abort hooks were a generalization of this and could be used if other use cases needed.

bq. Pending counter: can you say a bit more about how you would see an operator using this metric?

PendingSSTableReleases was mostly added for tests to know when everything is fully released (couldn't find any other way).  Its also the reason liveDiskSpaceUsed !=totalDiskSpaceUsed, so it also exposes to operators that things line up (if they are not equal then pending should be > 0; else there is a bug).

bq. consider renaming Listener#onPreSample to Listener#beforeResample

Done.

bq. IndexSummaryRedistribution constructor should be marked @VisibleForTest

Done

bq. DiskSpaceMetricsTest: Is the TODO on L125 still valid or can it be removed? Looks like the latter

There is desire to extract the jvm dtest tests out so they can run against any version.  This TODO is mostly commenting that the test could not be written generic to versions since it depends on JMX values which are not implemented in jvm dtests.  

I can file a ticket and remove the TODO.
;;;","13/Apr/20 22:02;jwest;Thanks for the explanations. I'm +1 on the patch. Moving the TODO to a ticket where it can be tracked wfm. ;;;","13/Apr/20 23:53;dcapwell;Filed CASSANDRA-15723;;;","13/Apr/20 23:59;benedict;I haven't looked closely at the rationale, but I'm at least a bit surprised at the mixed terminology.  We should probably stick to consistent nomenclature, of commit/abort, rather than introduce commit/rollback?;;;","14/Apr/20 00:02;jwest;Ah yes. Good catch [~benedict] ;;;","14/Apr/20 16:59;dcapwell;bq. We should probably stick to consistent nomenclature, of commit/abort, rather than introduce commit/rollback?

Fixed.;;;","15/Apr/20 17:49;dcapwell;[~marcuse] I moved the test to use CQLTester based off your comment: see [here|https://github.com/apache/cassandra/pull/500/commits/902354e378429292b63c7127171856312102da22];;;","17/Apr/20 11:51;marcuse;The patch fixes the immediate bug, so +1, but we should really refactor how index summary redistribution uses transactions as it is quite broken (not really transactional at all), I'll create a new jira for that.

pushed a few updates [here|https://github.com/krummas/cassandra/commits/david/15674] - this cleans up the test a bit to avoid having to add the metric and the Listener interface to IndexSummaryRedistribution
;;;","20/Apr/20 19:09;dcapwell;[~marcuse] pushed based off your feedback [here|https://github.com/apache/cassandra/pull/500/commits/27e5cd7132515ab0bd114731417913c40e4d7789]. The only change from your branch is I still verify totalDiskSpaceUsed (was removed from your patch, not sure why).

[Circle CI|https://circleci.com/workflow-run/c5d5c7c5-9c75-4e7e-a122-9771663e5451]

The unit test failure looks to be CASSANDRA-15672, which isn't in my branch.;;;","29/Apr/20 01:40;dcapwell;Patches per version

||branch||link||CI|CI Results|
|trunk|[Git Hub PR|https://github.com/apache/cassandra/pull/500]|[Circle CI|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FnegativeDiskSpace]|YELLOW|
|3.11|[Git Hub|https://github.com/dcapwell/cassandra/tree/bug/negativeDiskSpace-3.11]|[Circle CI|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FnegativeDiskSpace-3.11]|GREEN|
|3.0|[Git Hub|https://github.com/dcapwell/cassandra/tree/bug/negativeDiskSpace-3.0]|[Circle CI|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=bug%2FnegativeDiskSpace-3.0]|GREEN|;;;","29/Apr/20 20:16;dcapwell;The trunk build Python dtests failed because of CASSANDRA-15776, sent out patch to fix those (unrelated to this one).;;;","06/May/20 12:35;e.dimitrova;Hi [~dcapwell] and [~marcuse],
Is there anything else required for this one?
;;;","07/May/20 10:28;marcuse;+1, committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
" Testsuite: org.apache.cassandra.repair.consistent.CoordinatorMessagingTest Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 7.878 sec",CASSANDRA-15672,13294523,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,e.dimitrova,e.dimitrova,27/Mar/20 17:52,21/Dec/20 08:08,13/Jul/23 08:39,06/Apr/20 12:36,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"The following failure was observed:

 Testsuite: org.apache.cassandra.repair.consistent.CoordinatorMessagingTest Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 7.878 sec
[junit-timeout] 
[junit-timeout] Testcase: testMockedMessagingPrepareFailureP1(org.apache.cassandra.repair.consistent.CoordinatorMessagingTest):	FAILED
[junit-timeout] null
[junit-timeout] junit.framework.AssertionFailedError
[junit-timeout] 	at org.apache.cassandra.repair.consistent.CoordinatorMessagingTest.testMockedMessagingPrepareFailure(CoordinatorMessagingTest.java:206)
[junit-timeout] 	at org.apache.cassandra.repair.consistent.CoordinatorMessagingTest.testMockedMessagingPrepareFailureP1(CoordinatorMessagingTest.java:154)
[junit-timeout] 
[junit-timeout] 

Seen on Java8",,e.dimitrova,Gerrrr,jasonstack,stefania,,,,,,,,"Gerrrr commented on pull request #504: CASSANDRA-15672
URL: https://github.com/apache/cassandra/pull/504
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/20 11:36;githubbot;600","Gerrrr commented on pull request #504: CASSANDRA-15672
URL: https://github.com/apache/cassandra/pull/504
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 10:56;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Gerrrr,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Apr 06 12:36:06 UTC 2020,,,,,,,All,,,,,,"0|z0czsg:",9223372036854775807,,,,stefania,,,,Normal,,4.0-alpha,4.0-alpha1,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=b4e640a96e76f8d4a45937b1312b64ddc1aeb8ac",,,,,,,,,"I ran {{CoordinatorMessagingTest}} several hundred times and it turned out that there is more than 1 flaky test. {{testMockedMessagingHappyPath}} and all tests that execute {{testMockedMessagingPrepareFailure}} fail from time to time.

In {{testMockedMessagingHappyPath}} we check whether {{sessionResult.isDone}} after each step of repair communication and assert that it will only be {{true}} after the final step. However, doing these assertions we cannot be sure that the final step hasn't been finished yet. Without [208a23|https://github.com/Gerrrr/cassandra/commit/208a23d1a742bb70e11200e8f5fb4e0eb9cc3fae] this test fails ~10 times during 500 executions.

There is a similar issue with {{testMockedMessagingPrepareFailure}}. We check that there are no failures yet right after starting coordinator execution. If we are unlucky and at least one of the participants that is meant to fail responds before we load {{proposeFailed}}, the assertion will fail. [b3c761|https://github.com/Gerrrr/cassandra/commit/b3c76196ff3e1bc9ae39255fe66987a5dbc4390d] removes the flaky assertion. 

Additionally I included small javadoc fixes in [a6e9d0|https://github.com/Gerrrr/cassandra/commit/a6e9d034846b6c438f28ef0da1e91ca64a9d724f].",,,,,"02/Apr/20 13:04;stefania;We can try to synchronize the test by using a latch when messages are intercepted. If this approach fails, we can fall back to relaxing the intermediate checks.;;;","06/Apr/20 12:36;stefania;CI link: https://jenkins-cm4.apache.org/view/patches/job/Cassandra-devbranch/16/

Committed as [b4e640a96e76f8d4a45937b1312b64ddc1aeb8ac|https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=b4e640a96e76f8d4a45937b1312b64ddc1aeb8ac];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Testcase: testSubrangeCompaction(org.apache.cassandra.db.compaction.CancelCompactionsTest):	FAILED,CASSANDRA-15671,13294520,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,fcofdezc,e.dimitrova,e.dimitrova,27/Mar/20 17:47,22/Sep/20 13:52,13/Jul/23 08:39,10/Apr/20 13:53,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"The following test failure was observed:
[junit-timeout] Testcase: testSubrangeCompaction(org.apache.cassandra.db.compaction.CancelCompactionsTest):	FAILED
[junit-timeout] expected:<4> but was:<5>
[junit-timeout] junit.framework.AssertionFailedError: expected:<4> but was:<5>
[junit-timeout] 	at org.apache.cassandra.db.compaction.CancelCompactionsTest.testSubrangeCompaction(CancelCompactionsTest.java:190)

Java 8",,e.dimitrova,fcofdezc,jasonstack,,,,,,,,,"fcofdez commented on pull request #503: CASSANDRA-15671: Use only test triggered compactions for test assertions on CancelCompactionsTest.
URL: https://github.com/apache/cassandra/pull/503
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/20 14:22;githubbot;600","fcofdez closed pull request #503:
URL: https://github.com/apache/cassandra/pull/503


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/May/20 08:13;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,CASSANDRA-15029,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,fcofdezc,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Apr 10 13:53:59 UTC 2020,,,,,,,All,,,,,,"0|z0czrs:",9223372036854775807,,,,brandon.williams,e.dimitrova,,,Normal,,4.0,,,https://github.com/apache/cassandra/commit/1ce3c1c039561c15892115af37e0c7abf260bc6b,,,,,,,,,This is just a flaky test fix,,,,,"31/Mar/20 14:23;fcofdezc;I've modified the tests to take into account only test triggered compactions for assertions.

[https://github.com/apache/cassandra/pull/503];;;","31/Mar/20 14:24;fcofdezc;[~e.dimitrova] you might want to review this when you have some free cycles? Thanks;;;","01/Apr/20 15:41;e.dimitrova;Sure, I will check it later today. Thanks for looking into this one!;;;","01/Apr/20 19:12;e.dimitrova;||branch||circleci||jenkins||
|[trunk_15671|https://github.com/apache/cassandra/compare/trunk...fcofdez:CASSANDRA-15671]|[circleci|https://circleci.com/gh/fcofdez/workflows/cassandra/tree/CCASSANDRA-15671]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/11/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/11]|;;;","02/Apr/20 13:35;e.dimitrova;I have to complete something before I look into this one. But in order to mark myself as a reviewer(and prevent some confusion), I had to press ""start review""
Will come back to this one probably later today;;;","03/Apr/20 07:47;e.dimitrova;LGTM but I wanna look at the CI tomorrow. ;;;","06/Apr/20 01:39;e.dimitrova;[~fcofdezc] unfortunately there is a bug preventing me from seeing your results in circleCI. It shows 0 jobs in the workflow run.
Can you, please, attach screenshots? 
;;;","06/Apr/20 10:52;fcofdezc;Can you see the results using this [link|https://app.circleci.com/pipelines/github/fcofdez/cassandra?branch=CASSANDRA-15671]?;;;","06/Apr/20 21:29;e.dimitrova;Hi, now it is fine, thank you!
The patch LGTM. Thanks!
Only thing is I am not a committer.
[~brandon.williams] can you, please, check and commit this one? Thanks in advance!;;;","10/Apr/20 13:53;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LeveledCompactionStrategy compact last level throw an ArrayIndexOutOfBoundsException,CASSANDRA-15669,13294473,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,azotcsit,sunhaihong,sunhaihong,27/Mar/20 13:58,12/Jun/21 10:17,13/Jul/23 08:39,31/May/21 18:24,3.11.11,4.0,4.0-rc2,,,Local/Compaction/LCS,,,,0,,,,"Cassandra will throw an ArrayIndexOutOfBoundsException when compact last level.

My test is as follows：
 # Create a table with LeveledCompactionStrategy and its params are 'enabled': 'true', 'fanout_size': '2', 'max_threshold': '32', 'min_threshold': '4', 'sstable_size_in_mb': '2'（fanout_size and sstable_size_in_mb are too small just to make it easier to reproduce the problem）;
 # Insert data into the table by stress;
 # Cassandra throw an ArrayIndexOutOfBoundsException when compact level9 sstables(this level score bigger than 1.001)

ERROR [CompactionExecutor:4] 2020-03-28 08:59:00,990 CassandraDaemon.java:442 - Exception in thread Thread[CompactionExecutor:4,1,main]
 java.lang.ArrayIndexOutOfBoundsException: 9
 at org.apache.cassandra.db.compaction.LeveledManifest.getLevel(LeveledManifest.java:814)
 at org.apache.cassandra.db.compaction.LeveledManifest.getCandidatesFor(LeveledManifest.java:746)
 at org.apache.cassandra.db.compaction.LeveledManifest.getCompactionCandidates(LeveledManifest.java:398)
 at org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getNextBackgroundTask(LeveledCompactionStrategy.java:131)
 at org.apache.cassandra.db.compaction.CompactionStrategyHolder.lambda$getBackgroundTaskSuppliers$0(CompactionStrategyHolder.java:109)
 at org.apache.cassandra.db.compaction.AbstractStrategyHolder$TaskSupplier.getTask(AbstractStrategyHolder.java:66)
 at org.apache.cassandra.db.compaction.CompactionStrategyManager.getNextBackgroundTask(CompactionStrategyManager.java:214)
 at org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:289)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
 at java.util.concurrent.FutureTask.run(FutureTask.java)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 at java.lang.Thread.run(Thread.java:748)

I tested it on cassandra version 3.11.3 & 4.0-alpha3. The exception all happened.

once it triggers, level1- leveln compaction no longer works, level0 is still valid
 ",,azotcsit,brandon.williams,marcuse,mck,sunhaihong,yifanc,,,,,,"alex-ninja opened a new pull request #971:
URL: https://github.com/apache/cassandra/pull/971


   References: https://issues.apache.org/jira/browse/CASSANDRA-15669
   
   ### Summary of the changes
   * Fixed the comment explaining data size estimates for 1-MB sstables
   * Added handling for a situation where there is more data on the highest level than it supports
   * Slightly updated tests and documentation
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/21 09:49;githubbot;600","alex-ninja commented on a change in pull request #971:
URL: https://github.com/apache/cassandra/pull/971#discussion_r615373294



##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledManifest.java
##########
@@ -242,11 +242,17 @@ public synchronized CompactionCandidate getCompactionCandidates()
             // we want to calculate score excluding compacting ones
             Set<SSTableReader> sstablesInLevel = Sets.newHashSet(sstables);
             Set<SSTableReader> remaining = Sets.difference(sstablesInLevel, cfs.getTracker().getCompacting());
-            double score = (double) SSTableReader.getTotalBytes(remaining) / (double)maxBytesForLevel(i, maxSSTableSizeInBytes);
+            long remainingBytesForLevel = SSTableReader.getTotalBytes(remaining);

Review comment:
       Here I rely on the remaining bytes rather than total bytes and I feel it is safe to do so because on the first compaction attempt total = remaining. Please, confirm the assumption is correct.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/21 09:51;githubbot;600","alex-ninja commented on a change in pull request #971:
URL: https://github.com/apache/cassandra/pull/971#discussion_r615373386



##########
File path: test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
##########
@@ -695,10 +695,10 @@ public void singleTokenSSTableTest()
     }
 
     @Test
-    public void randomMultiLevelAddTest()
+    public void testRandomMultiLevelAdd()
     {
         int iterations = 100;
-        int levelCount = 8;
+        int levelCount = 9;

Review comment:
       In fact there are 9 levels, and it is better to test all levels (including the highest one).




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/21 09:52;githubbot;600","alex-ninja commented on a change in pull request #971:
URL: https://github.com/apache/cassandra/pull/971#discussion_r615373445



##########
File path: test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
##########
@@ -695,10 +695,10 @@ public void singleTokenSSTableTest()
     }
 
     @Test
-    public void randomMultiLevelAddTest()
+    public void testRandomMultiLevelAdd()

Review comment:
       I renamed two tests to follow the naming convention used in other tests.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/21 09:53;githubbot;600","alex-ninja commented on a change in pull request #971:
URL: https://github.com/apache/cassandra/pull/971#discussion_r615373967



##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledGenerations.java
##########
@@ -74,7 +75,7 @@
 
     Set<SSTableReader> get(int level)
     {
-        if (level > levelCount() - 1 || level < 0)
+        if (level >= levelCount() || level < 0)

Review comment:
       This and below changes in this file are purely cosmetic. I can revert if needed, however, I feel they make code clearer.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/21 09:57;githubbot;600","yifan-c commented on a change in pull request #971:
URL: https://github.com/apache/cassandra/pull/971#discussion_r617769682



##########
File path: test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
##########
@@ -823,4 +823,21 @@ private static void assertLevelsEqual(Collection<SSTableReader> l1, Collection<S
         assertEquals(l1.size(), l2.size());
         assertEquals(new HashSet<>(l1), new HashSet<>(l2));
     }
+
+    @Test(expected = RuntimeException.class)

Review comment:
       Only excepting a `RuntimeException` is not sufficient. 
   
   `assertThatThrownBy` is a better alternative.
   e.g. https://github.com/apache/cassandra/blob/27cc2fc3e275f56f1fa1df7285c389d5491acc8c/test/unit/org/apache/cassandra/db/marshal/EmptyTypeTest.java#L95-L100

##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledGenerations.java
##########
@@ -49,9 +49,10 @@
 {
     private static final Logger logger = LoggerFactory.getLogger(LeveledGenerations.class);
     private final boolean strictLCSChecksTest = Boolean.getBoolean(Config.PROPERTY_PREFIX + ""test.strict_lcs_checks"");
-    // allocate enough generations for a PB of data, with a 1-MB sstable size.  (Note that if maxSSTableSize is
-    // updated, we will still have sstables of the older, potentially smaller size.  So don't make this
-    // dependent on maxSSTableSize.)
+    // Allocate enough generations to handle about 95 TB of data, with a 1-MB sstable size and default fanout size
+    // (10). (Note that if maxSSTableSize is updated, we will still have sstables of the older, potentially smaller
+    // size. So don't make this dependent on maxSSTableSize). Max level count actually includes L0 and finally, we
+    // support [L0 - L8] levels with the current implementation.

Review comment:
       How about just setting `MAX_LEVEL_COUNT` to 9, and getting rid of the ""promise"" of the max allowed data size? 
   The `Math.log` calculation is unnecessary. Changing it to 9 is clear to read. 
   The max data size depends on the unit size and fanout size, and it is likely not matching with the comment. 

##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledManifest.java
##########
@@ -242,11 +242,17 @@ public synchronized CompactionCandidate getCompactionCandidates()
             // we want to calculate score excluding compacting ones
             Set<SSTableReader> sstablesInLevel = Sets.newHashSet(sstables);
             Set<SSTableReader> remaining = Sets.difference(sstablesInLevel, cfs.getTracker().getCompacting());
-            double score = (double) SSTableReader.getTotalBytes(remaining) / (double)maxBytesForLevel(i, maxSSTableSizeInBytes);
+            long remainingBytesForLevel = SSTableReader.getTotalBytes(remaining);
+            long maxBytesForLevel = maxBytesForLevel(i, maxSSTableSizeInBytes);
+            double score = (double) remainingBytesForLevel / (double) maxBytesForLevel;
             logger.trace(""Compaction score for level {} is {}"", i, score);
 
             if (score > 1.001)
             {
+                // the highest level should not ever exceed its maximum size
+                if (i == generations.levelCount() - 1)
+                    throw new RuntimeException(""L"" + i + "" should not exceed its maximum size ("" + maxBytesForLevel + ""), but it has "" + remainingBytesForLevel + "" bytes"");

Review comment:
       nit:  add an annotation to indicate `""L"" + i` is the max supported level. It helps to reason that why that level cannot compact further.
   ```suggestion
                       throw new RuntimeException(""L"" + i + "" (maximum supported level) should not exceed its maximum size ("" + maxBytesForLevel + ""), but it has "" + remainingBytesForLevel + "" bytes"");
   Write
   ```




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Apr/21 18:23;githubbot;600","alex-ninja commented on a change in pull request #971:
URL: https://github.com/apache/cassandra/pull/971#discussion_r617856527



##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledManifest.java
##########
@@ -242,11 +242,17 @@ public synchronized CompactionCandidate getCompactionCandidates()
             // we want to calculate score excluding compacting ones
             Set<SSTableReader> sstablesInLevel = Sets.newHashSet(sstables);
             Set<SSTableReader> remaining = Sets.difference(sstablesInLevel, cfs.getTracker().getCompacting());
-            double score = (double) SSTableReader.getTotalBytes(remaining) / (double)maxBytesForLevel(i, maxSSTableSizeInBytes);
+            long remainingBytesForLevel = SSTableReader.getTotalBytes(remaining);
+            long maxBytesForLevel = maxBytesForLevel(i, maxSSTableSizeInBytes);
+            double score = (double) remainingBytesForLevel / (double) maxBytesForLevel;
             logger.trace(""Compaction score for level {} is {}"", i, score);
 
             if (score > 1.001)
             {
+                // the highest level should not ever exceed its maximum size
+                if (i == generations.levelCount() - 1)
+                    throw new RuntimeException(""L"" + i + "" should not exceed its maximum size ("" + maxBytesForLevel + ""), but it has "" + remainingBytesForLevel + "" bytes"");

Review comment:
       Done.

##########
File path: src/java/org/apache/cassandra/db/compaction/LeveledGenerations.java
##########
@@ -49,9 +49,10 @@
 {
     private static final Logger logger = LoggerFactory.getLogger(LeveledGenerations.class);
     private final boolean strictLCSChecksTest = Boolean.getBoolean(Config.PROPERTY_PREFIX + ""test.strict_lcs_checks"");
-    // allocate enough generations for a PB of data, with a 1-MB sstable size.  (Note that if maxSSTableSize is
-    // updated, we will still have sstables of the older, potentially smaller size.  So don't make this
-    // dependent on maxSSTableSize.)
+    // Allocate enough generations to handle about 95 TB of data, with a 1-MB sstable size and default fanout size
+    // (10). (Note that if maxSSTableSize is updated, we will still have sstables of the older, potentially smaller
+    // size. So don't make this dependent on maxSSTableSize). Max level count actually includes L0 and finally, we
+    // support [L0 - L8] levels with the current implementation.

Review comment:
       Actually the comment mentions that the size depends on the ""unit size and fanout size"":
   ```
   with a 1-MB sstable size and default fanout size (10)
   ```
   However, I really like your suggestion on hard-coding 9. I've traced the changes related to the formula, they are pretty old (https://issues.apache.org/jira/browse/CASSANDRA-5589). Moreover, the assumption of having 1-MB sstable size seems to be impractical (the current default size is 160MB). Long story short, I've changed the formula to the number. Though I've kept a small comment that the number includes L0.

##########
File path: test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java
##########
@@ -823,4 +823,21 @@ private static void assertLevelsEqual(Collection<SSTableReader> l1, Collection<S
         assertEquals(l1.size(), l2.size());
         assertEquals(new HashSet<>(l1), new HashSet<>(l2));
     }
+
+    @Test(expected = RuntimeException.class)

Review comment:
       Good catch. Fixed.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Apr/21 20:39;githubbot;600","alex-ninja commented on pull request #971:
URL: https://github.com/apache/cassandra/pull/971#issuecomment-824362880


   @yifan-c 
   First of all, thanks for the feedback!
   
   
   > An alternative idea is to limit the compaction candidates selection.
   
   Actually that's also a way to go. However, I'd keep throwing an error to make it more transparent to the end users. Here is the scenario (purely theoretical because I doubt somebody can really reach the data size limit) I'd like to prevent:
   - someone has tons of data
   - the data is being promoted from L7 to L8
   - eventually L8 exceeds its data size limit
   - neither compaction/promotion to higher level is started nor an error is thrown
   - L8 becomes inefficient (by any means: too heavy compactions because of many overlaps, too many sstables, etc) and no-one knows about it
   
   In practice, it should not ever happen unless the system is poorly configured (e.g. _fanout_size_ is too small). But if so, then I think we should not be silent and let the end users to be in trouble.
   
   These are just my thoughts, I'm open to any approach.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Apr/21 21:16;githubbot;600","yifan-c commented on pull request #971:
URL: https://github.com/apache/cassandra/pull/971#issuecomment-824392719


   > I'd keep throwing an error to make it more transparent to the end users.
   
   Make sense. 


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Apr/21 22:15;githubbot;600","krummas commented on pull request #971:
URL: https://github.com/apache/cassandra/pull/971#issuecomment-829184526


   I think the idea from @yifan-c makes sense - not trying to start compactions in the top level, just letting the top level grow. We should log warnings/errors to make sure operators know about the bad state of the cluster. 
   
   From a quick look it seems this patch would stop doing any compactions if the top level is full?


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Apr/21 12:07;githubbot;600","alex-ninja commented on pull request #971:
URL: https://github.com/apache/cassandra/pull/971#issuecomment-829617013


   @krummas 
   I gave it a bit more thoughts and I think you're right! We would be throwing the error every time when compaction is started while L8 is full. Effectively it would stop the compaction which is literally the same as the current behavior but with a proper error message. I think it makes much more sense to just log a warning and keep working. I've made the corresponding changes. Could you, please, have a look.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Apr/21 21:47;githubbot;600","alex-ninja closed pull request #971:
URL: https://github.com/apache/cassandra/pull/971


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/May/21 18:31;githubbot;600","alex-ninja commented on pull request #971:
URL: https://github.com/apache/cassandra/pull/971#issuecomment-851629260


   The change has been merged. Closing the PR.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/May/21 18:31;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,7800,,,0,7800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/May/21 19:48;azotcsit;15669-3.11.txt;https://issues.apache.org/jira/secure/attachment/13026149/15669-3.11.txt","30/May/21 19:48;azotcsit;15669-4.0.txt;https://issues.apache.org/jira/secure/attachment/13026150/15669-4.0.txt","30/May/21 19:48;azotcsit;15669-trunk.txt;https://issues.apache.org/jira/secure/attachment/13026151/15669-trunk.txt","27/Mar/20 13:50;sunhaihong;cfs_compaction_info.png;https://issues.apache.org/jira/secure/attachment/12998004/cfs_compaction_info.png","27/Mar/20 13:50;sunhaihong;error_info.png;https://issues.apache.org/jira/secure/attachment/12998003/error_info.png",,,,,,,,,,5.0,azotcsit,,,,,,,,,,,,,Availability,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon May 31 18:29:08 UTC 2021,,,,,,,All,,,,,,"0|z0czhc:",9223372036854775807,,,,marcuse,yifanc,,,Normal,,3.11.0,,,https://github.com/apache/cassandra/commit/803a23b2f1b24701c22e7fadaf98c2c9a9491d35,,,,,,,,,test added,,,,,"17/Apr/21 18:45;azotcsit;I have checked this issue. I feel I have a kind of clear understanding of what is going on.

[~sunhaihong]

Just a point of my curiosity - what values for {{sstable_size_in_mb}} and {{fanout_size}} params do you use in prod and how much data do you have? I'm just wondering how you were able to face this issue.

[~marcuse]

Looks like you are the best person to discuss this issue (as I can see, you actively participated in LCS development).

First of all, I was able to reproduce this issue. I explored the code and probably I found a couple of minor issues.
 # *Wrong estimates calculation*
 There is the following comment in the code:
{code:java}
// allocate enough generations for a PB of data, with a 1-MB sstable size.  (Note that if maxSSTableSize is
// updated, we will still have sstables of the older, potentially smaller size.  So don't make this
// dependent on maxSSTableSize.)
static final int MAX_LEVEL_COUNT = (int) Math.log10(1000 * 1000 * 1000);
{code}
It states about a PB of data for 1-MB sstable size configuration, but it does not seem to be correct. It would be correct if 10 levels were supported. However, 9 levels are currently supported. Here are my calculations (1-MB sstable size and 10 fanout size):
{code:java}
L0:    4 * 1 MB = 4 MB
L1: 10^1 * 1 MB = 10 MB
L2: 10^2 * 1 MB = 100 MB
L3: 10^3 * 1 MB = 1000 MB
L4: 10^4 * 1 MB = 10000 MB      = 9.76 GB
L5: 10^5 * 1 MB = 100000 MB     = 97.65 GB
L6: 10^6 * 1 MB = 1000000 MB    = 976.56 GB
L7: 10^7 * 1 MB = 10000000 MB   = 9765.62 GB   = 9.53 TB
L8: 10^8 * 1 MB = 100000000 MB  = 97656.25 GB  = 95.36 TB
L9: 10^9 * 1 MB = 1000000000 MB = 976562.50 GB = 953.67 TB  <-- this level is not supported {code}
Here is the place where it is clearly shown that 9 levels (including L0) are supported at the moment:
{code:java}
// note that since l0 is broken out, levels[0] represents L1:
private final TreeSet<SSTableReader> [] levels = new TreeSet[MAX_LEVEL_COUNT - 1];
{code}
Either the comment needs to be fixed or the number of levels needs to be increased. I believe fixing the comment would be easier and amount of data still would be enough for a regular C* setup.
 # *There is no proper handling of a situation when there is more data than supported*
 The issue happens when compaction for L8 is going to be started. Here is the flow: {{getCompactionCandidates}} --> {{getCandidatesFor\(i\)}} --> {{generations.get(level + 1)}}. So while checking the compaction candidates for L8, it tries to see what's going on L9 level and immediately fails. And that's fair because we target to support a certain amount of data only. 
 Currently the above flow is triggered when {{score > 1.001}} (there is more data than it should be on a level). In fact, we should not even try to check candidates for compaction on the highest level, we should just fail fast since it is an impossible situation for a properly configured C* cluster. I think a clear error should be thrown when there is an attempt to handle more data than expected on the highest level, smth like:
{code:java}
if (score > 1.001)
{
    // the highest level should not ever exceed its maximum size
    if (i == generations.levelCount() - 1)
throw new RuntimeException(""Highest level (L"" + i + "") should not exceed its maximum size ("" + maxBytesForLevel + ""), but it has "" + bytesForLevel + "" bytes"");

    // before proceeding with a higher level, let's see if L0 is far enough behind to warrant STCS
    if (l0Compaction != null)
        return l0Compaction;
    ...
}
{code}
 

I'd be glad to hear you feedback on the points above. If you find the suggestions reasonable, I'd like to come up with a patch (I have a draft, but before polishing it I'd like to validate my understanding). Probably I'd also update the documentation to clearly state number of levels supported and the ways to estimate data size.

 ;;;","18/Apr/21 10:00;azotcsit;Finally, it turned out that writing a test was quite fast and easy, so I raised a PR ([https://github.com/apache/cassandra/pull/971]) to illustrate my findings better. Please, review and let me know your thoughts.;;;","20/Apr/21 06:23;sunhaihong;Hi [~azotcsit]，Thank you for your reply. 

My problem is the second situation that you described ---- 2. *There is no proper handling of a situation when there is more data than supported.*

 ;;;","30/Apr/21 20:51;yifanc;The patch LGTM. 

Rebased and started the test at [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-15669-trunk-E4784D85-846B-4A8A-A286-C471B44CC10E]

-- EDIT --

The CI result looks good.;;;","05/May/21 04:20;azotcsit;Thanks [~yifanc]! Please, let me know if I need to make any other changes like squashing or updating {{CHANGES.txt}}.;;;","27/May/21 17:25;azotcsit;[~blerer] [~marcuse] could you please take a look to the PR and let me know whether it is good to merge or any other changes are required.;;;","28/May/21 06:36;marcuse;sorry for the delay

+1 on the patch, I'll get it committed today;;;","28/May/21 17:16;yifanc;I am working on committing. 
[~azotcsit], can you also provide a patch for the 3.11 branch? We merge from bottom up. So in this case, it is from 3.11 to trunk. But my preference is to have patches for each branch, which works better with my committing script :D;;;","30/May/21 19:48;azotcsit;[~yifanc] [~marcuse]

I'm attaching patches for 3.11, 4.0 and trunk branches. In order to make the unit test working in 3.11 branch, I've had to onboard these changes:
 * [https://github.com/apache/cassandra/commit/546331037ee8218208b61a26ecbc12ab8dd7eace#diff-d2993d01b021fb5e2ed23171c0bf5f1abb2f13d1d9ef67d089bb2cf8108ff64c]
 * [https://github.com/apache/cassandra/commit/54d297a192ca452dab5640f33fd6c22fd31e2f9c#diff-d2993d01b021fb5e2ed23171c0bf5f1abb2f13d1d9ef67d089bb2cf8108ff64c]

I run the {{LeveledCompactionStrategyTest}} on every branch and it worked fine for me locally. Please, let me know if you encounter any issues with that test on CI.

PS:
 Initially I misread the comment and tried to prepare a patch for 3.0 version :D It turned out that it is pretty to hard to migrate the unit test to that branch because _fanout_ parameter is not yet configurable. Consequently it requires to generate a bunch of sstables (to reach _max level size_ for L8) which make the test long and clumsy. It took some time to realize that it is better to go without having that test in 3.0. And finally I found out that the patch for 3.0 is not required.;;;","31/May/21 06:05;yifanc;Starting commit

CI Results:
||Branch||Source||Circle CI||Jenkins||
|cassandra-3.11|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-15669-cassandra-3.11-8248B4BC-5657-41EF-83A0-13827185AB7E]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-15669-cassandra-3.11-8248B4BC-5657-41EF-83A0-13827185AB7E]|[build|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/821/pipeline]|
|cassandra-4.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-15669-cassandra-4.0-8248B4BC-5657-41EF-83A0-13827185AB7E]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-15669-cassandra-4.0-8248B4BC-5657-41EF-83A0-13827185AB7E]|[build|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/818/pipeline]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-15669-trunk-8248B4BC-5657-41EF-83A0-13827185AB7E]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-15669-trunk-8248B4BC-5657-41EF-83A0-13827185AB7E]|[build|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/820/pipeline]|

-- edit 05/31 --

Results look green. 

3.11 CI results looks good. Failures do not look related. 

4.0 and trunk CI results mostly are good, except the test failure (""Got unexpected overlap in level X"") from {{stressTestCompactionStrategyManager – org.apache.cassandra.db.compaction.LongLeveledCompactionStrategyCQLTest}} that looks suspicious. There is a ticket for it already, CASSANDRA-16637. So it should not be caused by this patch. ;;;","31/May/21 18:24;yifanc;Committed to 3.11 as [803a23|https://github.com/apache/cassandra/commit/803a23b2f1b24701c22e7fadaf98c2c9a9491d35] and merged up to trunk;;;","31/May/21 18:29;azotcsit;Thanks [~yifanc]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StreamResultFuture check for completeness is inconsistent, leading to races",CASSANDRA-15667,13294435,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maxtomassi,sbtourist,sbtourist,27/Mar/20 11:23,21/Dec/20 08:03,13/Jul/23 08:39,25/May/20 14:54,3.0.21,3.11.7,4.0,4.0-beta1,,Legacy/Streaming and Messaging,,,,0,,,,"{{StreamResultFuture#maybeComplete()}} uses {{StreamCoordinator#hasActiveSessions()}} to determine if all sessions are completed, but then accesses each session state via {{StreamCoordinator#getAllSessionInfo()}}: this is inconsistent, as the former relies on the actual {{StreamSession}} state, while the latter on the {{SessionInfo}} state, and the two are concurrently updated with no coordination whatsoever.

This leads to races, i.e. apparent in some dtest spurious failures, such as {{TestBootstrap.resumable_bootstrap_test}} in CASSANDRA-15614 cc [~e.dimitrova].",,blerer,e.dimitrova,jasonstack,maxtomassi,sbtourist,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15952,,,,,,,,,"10/Apr/20 23:11;e.dimitrova;log_bootstrap_resumable;https://issues.apache.org/jira/secure/attachment/12999600/log_bootstrap_resumable",,,,,,,,,,,,,,1.0,maxtomassi,,,,,,,,,,,,,Correctness,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon May 25 14:54:16 UTC 2020,,,,,,,All,,,,,,"0|z0cz8w:",9223372036854775807,,,,jasonstack,sbtourist,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/a4b6deb906d846c2532174fcebfce0398b4b3c29,,,,,,,,,"[https://app.circleci.com/pipelines/github/maxtomassi/cassandra?branch=15667-4.0]

It seems like JVM dtests fail to run properly. Lots of logs like this:
{code:java}
[junit-timeout] Testcase: prepareRPCTimeout[PARALLEL/true](org.apache.cassandra.distributed.test.PreviewRepairCoordinatorTimeoutTest):	Caused an ERROR
[junit-timeout] org.apache.cassandra.distributed.api.NodeToolResult$Asserts.errorContains([Ljava/lang/String;)Lorg/apache/cassandra/distributed/api/NodeToolResult$Asserts;
[junit-timeout] java.lang.NoSuchMethodError: org.apache.cassandra.distributed.api.NodeToolResult$Asserts.errorContains([Ljava/lang/String;)Lorg/apache/cassandra/distributed/api/NodeToolResult$Asserts;
[junit-timeout] 	at org.apache.cassandra.distributed.test.RepairCoordinatorTimeout.lambda$prepareRPCTimeout$0(RepairCoordinatorTimeout.java:45)
[junit-timeout] 	at org.apache.cassandra.utils.AssertUtil.lambda$assertTimeoutPreemptively$0(AssertUtil.java:39)
[junit-timeout] 	at org.apache.cassandra.utils.AssertUtil.lambda$assertTimeoutPreemptively$1(AssertUtil.java:67)
[junit-timeout] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[junit-timeout] 	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout] 	at java.lang.Thread.run(Thread.java:748)
{code}",,,,,"06/Apr/20 11:07;maxtomassi; 
||Pull Request||CI Links||
|[PR 4.0|https://github.com/maxtomassi/cassandra/pull/1]|[Circle-CI|https://app.circleci.com/pipelines/github/maxtomassi/cassandra?branch=15667-4.0]|
|[PR 3.0|https://github.com/maxtomassi/cassandra/pull/2|https://github.com/maxtomassi/cassandra/pull/12]|[Circle-CI|https://app.circleci.com/pipelines/github/maxtomassi/cassandra?branch=15667-3.0]|
|[PR 3.11|https://github.com/maxtomassi/cassandra/pull/3]|[Circle-CI|https://app.circleci.com/pipelines/github/maxtomassi/cassandra?branch=15667-3.11]|;;;","07/Apr/20 18:10;sbtourist;+1

[~maxtomassi] (and [~e.dimitrova]), I think we should reintroduce {{TestBootstrap.resumable_bootstrap_test}} and check if it was actually failing due to this race: what do you think?;;;","07/Apr/20 19:27;e.dimitrova;Just to be sure you saw that - resumable bootstrap is tested in another test too, that's why this one was removed, not blindly removed because it was flakey or something. Fix was applied to the other one but it was pointed in the ticket that in extremely rare cases it might fail. Why? From what I recall the bootstrap was sometimes completing too fast before the streaming is really interrupted from the byteman code and we didn't really have an instrument to control that. So the only fix was to introduce bigger delay which solves the issue in most of the cases.  I think I haven't seen this test failing anymore but it might be really possible in very rare cases. 

There is in parallel additional ticket to try to implement the test in the in-jvm test suite as according to Jordan West who is the Shepard for testing 4.0,  there we might be able to control the flow deterministically. 

I will look In detail at this patch and the test again later today or tomorrow, thanks a lot for bringing it up!
;;;","09/Apr/20 12:08;sbtourist;Thanks [~e.dimitrova] for chiming in.
{quote}From what I recall the bootstrap was sometimes completing too fast before the streaming is really interrupted from the byteman code and we didn't really have an instrument to control that.
{quote}
I went through the ""resumable bootstrap"" test, and unfortunately I don't see how the bootstrap could ever complete before the byteman script is invoked: this is because such script [makes node 1 fail before it starts to stream files|[https://github.com/ekaterinadimitrova2/cassandra-dtest/blob/b56887d67c353d6d69cd60cfd74859405fa37685/byteman/4.0/stream_failure.btm#L10]], which means there's no way for node 3 to finish bootstrapping before it received all files from both nodes, which will never happen due to said script causing node 1 to fail.

So why did the test fail?

I believe that's because of this issue: in other words, node 3 was correctly seeing its streaming session completed (after node 1 finished streaming with an error) but *not* failed; this is because the ""completed"" state is read through the actual session state, while the ""failed"" state is read through the {{SessionInfo}} state, which is what we're fixing here.

That said, I would propose to still re-introduce the original {{resumable_bootstrap_test}}, because it's an important enough feature to deserve its own test, and it uses 3 nodes which increases the chances of detecting errors/races.

Thoughts?;;;","09/Apr/20 14:06;e.dimitrova;Hi Sergio,
Thanks for the patch and the broad explanation. 

I just returned the test [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-15667]

Unfortunately, I am not a committer so someone else should do it. Thanks again!;;;","10/Apr/20 06:52;jasonstack;[~maxtomassi] thanks for the patch.. should we also fix 3.0 and 3.11 ?;;;","10/Apr/20 13:11;e.dimitrova;I am looking now at the test as I triggered it to run again 100 times yesterday and it seems there is some error. I am gonna check it and update the ticket later
;;;","10/Apr/20 23:10;e.dimitrova;Attached a log of 100 successful runs.
(Turned out the issue was false alarm, my local config got messed up, nothing related to the test or the patch);;;","14/Apr/20 11:17;maxtomassi;[~jasonstack], sorry for the delay. I've updated my first comment with links to PRs against 3.0 and 3.11 too.;;;","14/Apr/20 12:07;sbtourist;[~maxtomassi], [~e.dimitrova], thanks for your PRs. I'm +1 to both.;;;","24/Apr/20 12:05;blerer;Jenkins CI runs:
|[4.0|https://ci-cassandra.apache.org/job/Cassandra-devbranch/129/]|[3.0|https://ci-cassandra.apache.org/job/Cassandra-devbranch/130/]|[3.11|https://ci-cassandra.apache.org/job/Cassandra-devbranch/124/]|;;;","25/May/20 14:54;blerer;Committed into 3.0 at a4b6deb906d846c2532174fcebfce0398b4b3c29 and merged into 3.11 and trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition when completing stream sessions,CASSANDRA-15666,13294242,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,sbtourist,sbtourist,26/Mar/20 16:31,21/Dec/20 08:08,13/Jul/23 08:39,24/Apr/20 09:49,4.0,4.0-beta1,,,,Legacy/Streaming and Messaging,,,,0,pull-request-available,,,"{{StreamSession#prepareAsync()}} executes, as the name implies, asynchronously from the IO thread: this opens up for race conditions between the sending of the {{PrepareSynAckMessage}} and the call to {{StreamSession#maybeCompleted()}}. I.e., the following could happen:
1) Node A sends {{PrepareSynAckMessage}} from the {{prepareAsync()}} thread.
2) Node B receives it and starts streaming.
3) Node A receives the streamed file and sends {{ReceivedMessage}}.
4) At this point, if this was the only file to stream, both nodes are ready to close the session via {{maybeCompleted()}}, but:
a) Node A will call it twice from both the IO thread and the thread at #1, closing the session and its channels.
b) Node B will attempt to send a {{CompleteMessage}}, but will fail because the session has been closed in the meantime.

There are other subtle variations of the pattern above, depending on the order of concurrently sent/received messages.

I believe the best fix would be to modify the message exchange so that:
1) Only the ""follower"" is allowed to send the {{CompleteMessage}}.
2) Only the ""initiator"" is allowed to close the session and its channels after receiving the {{CompleteMessage}}.

By doing so, the message exchange logic would be easier to reason about, which is overall a win anyway.",,blerer,jasonstack,sbtourist,,,,,,,,,"jasonstack commented on pull request #63: CASSANDRA-15666: Ignore EOF error log for repair_test.py::TestRepair:…
URL: https://github.com/apache/cassandra-dtest/pull/63
 
 
   …:test_dead_sync_participant
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Apr/20 16:49;githubbot;600","blerer commented on pull request #63:
URL: https://github.com/apache/cassandra-dtest/pull/63#issuecomment-618916323


   Committed into master at fdc800cc716b465a335b10230481866cf598110a


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Apr/20 09:51;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Apr 24 09:56:55 UTC 2020,,,,,,,All,,,,,,"0|z0cy20:",9223372036854775807,,,,blerer,sbtourist,,,Normal,,4.0-alpha,4.0-alpha1,,"[patch|https://github.com/apache/cassandra/commit/9f6fcc340d89eecc000765f6ab93e862f53a02d9], [dtest|https://github.com/apache/cassandra-dtest/commit/fdc800cc716b465a335b10230481866cf598110a]",,,,,,,,,"Added interceptor to verify stream messages and state transition.

 CI: [https://circleci.com/workflow-run/4d524604-99f8-4c74-b24a-b31e63bce063]

  dtest failure ""repair_test.py"" is fixed in [https://github.com/apache/cassandra-dtest/pull/63]
  
 ",,,,,"27/Mar/20 11:40;jasonstack;{quote}4) At this point, if this was the only file to stream, both nodes are ready to close the session via maybeCompleted(), but:
 a) Node A will call it twice from both the IO thread and the thread at #1, closing the session and its channels.
 b) Node B will attempt to send a CompleteMessage, but will fail because the session has been closed in the meantime.
{quote}

This can be reproduced by delaying {{maybeComplete}} in {{prepareAsync}} until requests/transfers are empty at follower side.

{quote}I believe the best fix would be to modify the message exchange so that:
 1) Only the ""follower"" is allowed to send the CompleteMessage.
 2) Only the ""initiator"" is allowed to close the session and its channels after receiving the CompleteMessage.
{quote}

Above points will definitely make streaming state easier to reason. But they may not be sufficient, it's still possible to send 2 CompleteMessage by follower when {{maybeComplete()}} in {{prepareAsync()}} is delayed and race with {{maybeComplete()}} in {{taskCompleted()}}.

1) Follower sends {{PrepareSynAckMessage}} from the {{prepareAsync()}} thread and {{maybeComplete()}} is delayed.
2) Initiator receives it and starts streaming.
3) Follower receives the streamed files and sends {{ReceivedMessage}}.
4) Follower receives all streamed files and triggers {{maybeComplete()}} in {{taskCompleted}}
5) Follower will send 2 {{CompleteMessage}} because of step 1) and step 4)
  
 I think we also need to enhance synchronization on state transition and sending CompleteMessage. WDYT?

 

 ;;;","27/Mar/20 12:57;sbtourist;bq. it's still possible to send 2 CompleteMessage by follower when maybeComplete() in prepareAsync() is delayed and race with maybeComplete() in taskCompleted().

Correct. I agree the overall thread safety of {{StreamSession}} should be fixed.;;;","30/Mar/20 13:42;jasonstack;{quote}1) Only the ""follower"" is allowed to send the CompleteMessage.
 2) Only the ""initiator"" is allowed to close the session and its channels after receiving the CompleteMessage.
{quote}
At the end, I reverted the above implementation, as I think it doesn't fix the racy cases here. Improving synchronization on ""maybeCompleted()"" should be sufficient to avoid the StreamSession racy cases and less invasive for 4.0..

[Patch|https://github.com/apache/cassandra/pull/497]:
 * Make sure {{maybeCompleted()}} is executed at most once as it may be triggered by different threads asynchronously.
 * Synchronize {{maybeCompleted()}} so that it won't race with itself or {{complete()}}.
 * Added {{MessageStateSink}} in {{StreamSession}} to capture received stream messages and state transitions to improve testing.
 * Unified terminologies to use {{Initiator}} and {{Follower}}.
 * Ported some simplifications from CASSANDRA-15754 here:
 ** Simplify StreamSession with State.isFinalState
 ** Remove unused StreamSession from StreamMessage.Serializer.deserialize
 ** Change QueryState to use ClientState instead of clientState

[~blerer] [~sbtourist] WDYT?;;;","01/Apr/20 18:05;mck;||branch||circleci||jenkins||
|[trunk_15666|https://github.com/apache/cassandra/compare/trunk...jasonstack:CASSANDRA-15666-trunk]|[circleci|https://circleci.com/gh/jasonstack/workflows/cassandra/tree/CASSANDRA-15666-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/9/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/9]|;;;","02/Apr/20 15:37;sbtourist;[~jasonstack] your fix looks good, just left a few minor comments on the PR. Regarding the changes to the {{CompleteMessage}} exchange, I still think that'd be a win regardless if the race is fixed in a different way, as the current implementation makes it harder to reason about its correctness (which means it could be prone to other races), but I also understand we want to limit the scope of changes to 4.0, so not pushing hard for it.;;;","03/Apr/20 08:32;jasonstack;bq. Regarding the changes to the CompleteMessage exchange, I still think that'd be a win regardless if the race is fixed in a different way

Let's see what [~blerer] has to say..;;;","07/Apr/20 18:02;sbtourist;{quote}Let's see what [~blerer] has to say
{quote}
Let's not delay this fix further, unless [~blerer] really wants to chime in?;;;","08/Apr/20 14:06;blerer;I put some comments on the PR.
It is always easier to fix some problems in major versions as there are less constraints during upgrades. So unless we believe that it will take a long time, it is probably better to fix it in the scope of that ticket.;;;","08/Apr/20 16:36;jasonstack;bq. 1) Only the ""follower"" is allowed to send the CompleteMessage.
bq. 2) Only the ""initiator"" is allowed to close the session and its channels after receiving the CompleteMessage.

[~sbtourist] [~blerer] I have addressed review feedback and include above modification. do you mind having a look?

can you also trigger on apache CI? thanks;;;","09/Apr/20 16:22;sbtourist;[~jasonstack] thanks for the followups, sent another round of comments.;;;","10/Apr/20 09:42;jasonstack;Found some bootstrap dtest failures.. looking into them;;;","12/Apr/20 17:06;jasonstack;|[patch|https://github.com/apache/cassandra/pull/497]|[dtest|https://github.com/apache/cassandra-dtest/pull/63]|

Previous changes:
 * Synchronization on ""StreamSession#maybeComplete()"" to avoid race condition on streaming completion.
 * Only the ""follower"" is allowed to send the CompleteMessage.
 * Only the ""initiator"" is allowed to close the session and its channels after receiving the CompleteMessage.

New changes to fix dtest failures:
 * NettyStreamingMessageSender:
 ** don't close channels in NettyStreamingMessageSender, as they will be closed by initator on ""closeSession()""
 ** handle fileTransferExecutor pool shutdown gracefully in case of ClosedByInterruptException
 ** only include inbound handler for initiator's control channel

 * ChannelProxy:
 ** Use new ""ChannelProxy"" instance instead of shared copy in stream writer to prevent interruped thread closing backing channel

 * StreamSession: close session if channel is closed due to EOF from ""StreamingInboundHandler""

 * OutboundConnection: fix OutboundConnection.id() to use proper remote/local address

 * Preview repair:
 ** Move follower's ""completePreview()"" from ""prepareAck()"" to ""prepareAsync()"" because initiator will close connection via ""completePreview()"" on ""prepareSynAck()"". Without this change, preview_repair_test.py will fail because initiator closes channels before follower moving to final state and follower ""StreamSession"" will log some error upon EOF.
 ** In case of preview, do not send ""PrepareAckMessage"" to follower, as follower has already closed stream session on ""prepareAsync()""

 * Dtest: include ""Socket closed before session completion"" into {{ignore_log_patterns in ""repair_test.py::TestRepair::test_dead_sync_participant""}}, it's logged when stream session was closed upon EOF due to node down.;;;","18/Apr/20 15:31;jasonstack;[CI|https://circleci.com/workflow-run/6c6a2866-def9-469e-a7b0-a9e0cb414db6] looks good, no related failures.;;;","20/Apr/20 17:46;sbtourist;Good to merge for me.;;;","23/Apr/20 12:35;blerer;It looks good to me.
Thanks for the patch and the reviews [~jasonstack] [~sbtourist];;;","24/Apr/20 09:49;blerer;Patch committed into trunk at 9f6fcc340d89eecc000765f6ab93e862f53a02d9
DTest committed into master at fdc800cc716b465a335b10230481866cf598110a;;;","24/Apr/20 09:56;jasonstack;thanks for the review and feedback~;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StreamManager should clearly differentiate between ""initiator"" and ""receiver"" sessions",CASSANDRA-15665,13294186,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,sbtourist,sbtourist,26/Mar/20 12:22,03/Jan/21 17:03,13/Jul/23 08:39,19/Jun/20 15:34,4.0,4.0-beta1,,,,Legacy/Streaming and Messaging,,,,0,,,,"{{StreamManager}} does currently a suboptimal job in differentiating between stream sessions (in form of {{StreamResultFuture}}) which have been either initiated or ""received"", for the following reasons:
1) Naming is IMO confusing: a ""receiver"" session could actually both send and receive files, so technically an initiator is also a receiver.
2) {{StreamManager#findSession()}}  assumes we should first looking into ""initiator"" sessions, then into ""receiver"" ones: this is a dangerous assumptions, in particular for test environments where the same process could work as both an initiator and a receiver.

I would recommend the following changes:
1) Rename ""receiver"" with ""follower"" everywhere the former is used.
2) Introduce a new flag into {{StreamMessageHeader}} to signal if the message comes from an initiator or follower session, in order to correctly differentiate and look for sessions in {{StreamManager}}.

While my arguments above might seem trivial, I believe they will improve clarity and save from potential bugs/headaches at testing time, and doing such changes now that we're revamping streaming for 4.0 seems the right time.",,blerer,jasonstack,maedhroz,sbtourist,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Code,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jul 24 16:57:48 UTC 2020,,,,,,,All,,,,,,"0|z0cxpk:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha1,,,https://github.com/apache/cassandra/commit/ebba613b0b34ea338eed508a3ba6cbb235986fd9,,,,,,,,,"PR: https://github.com/apache/cassandra/pull/586
CI: [https://circleci.com/workflow-run/947320b4-3c52-4113-91ab-36d622a45e23]
 ",,,,,"01/Apr/20 12:33;jasonstack;[Patch|https://github.com/jasonstack/cassandra/pull/10] on top of CASSANDRA-15666:

* Include {{isFollower}} flag into {{StreamMessageHeader}}. On the receiver side, it will use initiator session if message is sent by a follower or use follower session if message is sent by an initiator.
* Added a base method {{getOrCreateSession}} to {{StreamMessage}}:
** it throws unsupported operation by default
** {{StreamInitMessage}} will initialize a follower {{StreamResultFuture}}/{{StreamSession}}
** {{IncomingStreamMessage}} will just return the stream session taken from {{IncomingStreamMessage#serializer#deserialize}};;;","25/Apr/20 12:44;jasonstack;CI looks good, dtest failures are not related.;;;","28/May/20 19:21;jasonstack;Rebased with latest trunk, [CI|https://circleci.com/workflow-run/947320b4-3c52-4113-91ab-36d622a45e23] looks good, failed dtests are unrelated and passed locally:
* test_multi_partition_consistent_reads_after_write - materialized_views_test.TestMaterializedViewsConsistency
* test_13911_partitions_srp - consistency_test.TestConsistency
* test_13911_rows_srp - consistency_test.TestConsistency
;;;","10/Jun/20 11:31;jasonstack;[~sbtourist] [~blerer] do you mind having a look? ;;;","11/Jun/20 10:18;sbtourist;[~jasonstack], [~blerer], apologies for this late reply. I'm afraid I'll be busy until at least next week. Feel free to go ahead without my review.;;;","19/Jun/20 15:34;blerer;Committed into trunk at ebba613b0b34ea338eed508a3ba6cbb235986fd9;;;","23/Jul/20 21:58;maedhroz;[~jasonstack] Did we introduce a change [here|https://github.com/apache/cassandra/commit/ebba613b0b34ea338eed508a3ba6cbb235986fd9#diff-85ee7eed2fccf1f9220452e69fbf8ca8R131] that needs to be guarded by a {{VERSION_40}} check? (nit: I'd also call it {{sentByFollower}}.);;;","24/Jul/20 01:38;jasonstack;[~maedhroz] does it fail anything? I think we don't allow cross-version streaming between 3.x and 4.0..It's guarded by version when establishing connections.;;;","24/Jul/20 16:22;maedhroz;[~jasonstack] I'm having trouble finding where we prohibit that. Any pointers?;;;","24/Jul/20 16:57;jasonstack;the version barrier is defined in {{MessagingService.accept_streaming}}
 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle wrapping ranges in token range compaction,CASSANDRA-15664,13294132,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,26/Mar/20 08:20,21/Dec/20 08:08,13/Jul/23 08:39,03/Apr/20 10:56,4.0,4.0-alpha4,,,,Local/Compaction,,,,0,,,,We currently don't handle wrapping ranges in token range compaction,,blerer,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Apr 03 10:56:23 UTC 2020,,,,,,,All,,,,,,"0|z0cxdk:",9223372036854775807,,,,blerer,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/49abedc2c30c6274339bc203e0ddd10f128dae58,,,,,,,,,cci run + updated unit test,,,,,"26/Mar/20 08:23;marcuse;https://github.com/krummas/cassandra/commits/marcuse/15664
https://circleci.com/gh/krummas/workflows/cassandra/tree/marcuse%2F15664;;;","26/Mar/20 15:39;blerer;+1;;;","03/Apr/20 10:56;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DESCRIBE KEYSPACE does not properly quote table names,CASSANDRA-15663,13294090,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,Gerrrr,oskar3215,oskar3215,26/Mar/20 06:13,15/Jul/21 09:15,13/Jul/23 08:39,13/Jul/21 12:41,3.11.11,4.0,,,,CQL/Syntax,,,,0,pull-request-available,,,"How to reproduce (3.11.6) - cqlsh:

{code}
CREATE KEYSPACE test1 WITH replication = \{'class': 'SimpleStrategy', 'replication_factor': '1'} AND durable_writes = true;
CREATE TABLE test1.""default"" (id text PRIMARY KEY, data text, etag text);
DESCRIBE KEYSPACE test1;
{code}

Output will be:

{code}
CREATE TABLE test1.default (
 id text PRIMARY KEY,
 data text,
 etag text
) WITH [..]
{code}

Output should be:

{code}
CREATE TABLE test1.""default"" (
 id text PRIMARY KEY,
 data text,
 etag text
) WITH [..]
{code}

 If you try to run {{CREATE TABLE test1.default [..]}} you will get an error 

SyntaxException: line 1:19 no viable alternative at input 'default' (CREATE TABLE test1.[default]...)

Oskar Liljeblad

 ",,aboudreault,adelapena,aholmber,blerer,e.dimitrova,Gerrrr,jasonstack,jmckenzie,maedhroz,oskar3215,,"Gerrrr commented on pull request #532: CASSANDRA-15663 Update to Python driver 3.23 for cqlsh (4.0)
URL: https://github.com/apache/cassandra/pull/532
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 15:28;githubbot;600","Gerrrr closed pull request #532:
URL: https://github.com/apache/cassandra/pull/532


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 14:39;githubbot;600","Gerrrr opened a new pull request #654:
URL: https://github.com/apache/cassandra/pull/654


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 14:39;githubbot;600","Gerrrr opened a new pull request #81:
URL: https://github.com/apache/cassandra-dtest/pull/81


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jun/20 14:41;githubbot;600","michaelsembwever closed pull request #81:
URL: https://github.com/apache/cassandra-dtest/pull/81


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Oct/20 12:23;githubbot;600","Gerrrr opened a new pull request #148:
URL: https://github.com/apache/cassandra-dtest/pull/148


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jun/21 15:02;githubbot;600","Gerrrr closed pull request #148:
URL: https://github.com/apache/cassandra-dtest/pull/148


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Jul/21 21:30;githubbot;600","Gerrrr closed pull request #654:
URL: https://github.com/apache/cassandra/pull/654


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jul/21 09:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,CASSANDRA-14825,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15948,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,Gerrrr,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jul 13 20:10:44 UTC 2021,,,,,,,All,,,,,,"0|z0cx7k:",9223372036854775807,,,,adelapena,e.dimitrova,,,Normal,,3.11.2,,,https://github.com/apache/cassandra/commit/2a8e01858f3aa18e72806acfed5f9cfa9d6c6d03,,,,,,,,,"Thanks Alan!

Here are the patches:
 * PR to update python driver in Cassandra 3.11 - [https://github.com/apache/cassandra/pull/654]
 * PR to fix {{test_describe_functions}} broken by driver upgrade - [https://github.com/apache/cassandra-dtest/pull/81]

CI run  - [https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/154/tests/]

I checked the rest of the failing tests manually. Test failures either do not reproduce locally or fail as well on the base branch.

 ",,,,,"30/Mar/20 10:53;Gerrrr;I reproduced the bug in 3.11 and 4.0. It is not reproducible in 3.0:

{noformat}
cqlsh> CREATE KEYSPACE test1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'} AND durable_writes = true;
cqlsh> CREATE TABLE test1.default (id text PRIMARY KEY, data text, etag text);
cqlsh> describe table test1.default;

CREATE TABLE test1.default (
    id text PRIMARY KEY,
    data text,
    etag text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

cqlsh> DROP TABLE test1.default;
cqlsh> CREATE TABLE test1.default (
   ...     id text PRIMARY KEY,
   ...     data text,
   ...     etag text
   ... ) WITH bloom_filter_fp_chance = 0.01
   ...     AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
   ...     AND comment = ''
   ...     AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
   ...     AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
   ...     AND crc_check_chance = 1.0
   ...     AND dclocal_read_repair_chance = 0.1
   ...     AND default_time_to_live = 0
   ...     AND gc_grace_seconds = 864000
   ...     AND max_index_interval = 2048
   ...     AND memtable_flush_period_in_ms = 0
   ...     AND min_index_interval = 128
   ...     AND read_repair_chance = 0.0
   ...     AND speculative_retry = '99PERCENTILE';

Warnings :
dclocal_read_repair_chance table option has been deprecated and will be removed in version 4.0

dclocal_read_repair_chance table option has been deprecated and will be removed in version 4.0
{noformat};;;","30/Mar/20 11:13;Gerrrr;I opened a PR  to [datastax/python-driver|https://github.com/datastax/python-driver/pull/1075]. This patch adds {{default}} to a list of cql keywords and fixes the issue. Once it is merged, I will cherry-pick it to 3.11 and update the driver version for 4.0.;;;","07/Apr/20 15:01;aholmber;Python driver 3.23 went out last week, including this change.;;;","09/Apr/20 15:41;Gerrrr;Python driver 3.23 has a dependency on {{geomet}} that is not present in C* 3.11. [~aboudreault] and I considered the following options:
1. cherry-pick [607ff52|https://github.com/datastax/python-driver/commit/607ff52c7521f179fc944df4dfc9ddb075fbb30d] on top of the driver version used in 3.11.
2. update the driver version to 3.23 and add {{geomet}} zipfile to {{lib}}.
3. make {{geomet}} optional in the next driver release and update the driver for C* 3.11 then.

We agreed to proceed with the last option. I believe that this would not be an problem for 4.0 and 3.11 both as this is far from being a critical issue.;;;","17/Apr/20 13:36;blerer;[~Gerrrr] I am currently reviewing CASSANDRA-14825 that should fix that problem as the code will not use the python driver anymore for DESCRIBE.;;;","17/Apr/20 17:45;aholmber;I think it's still a good idea to get the Python driver updated for 4.0 _somewhere_. Driver 3.23 has some unrelated updates for 4.0 (parsing transient replica options, for example). Does it make sense to just finish this independent of CASSANDRA-14825?;;;","20/Apr/20 19:21;blerer;[~aholmber], [~Gerrrr] If you prefer to continue with this ticket. It is fine for me :-). I just wanted to raise the fact that the problem will be fixed by another ticket.;;;","30/May/20 16:16;jmckenzie;Do we want to close this out in favor of CASSANDRA-14825?;;;","02/Jun/20 07:35;Gerrrr;[~jmckenzie] CASSANDRA-14825 solves the issue for 4.0. The ticket is still valid for 3.11. To fix it in 3.11, we need to update python driver to the latest version that already has [607ff52|https://github.com/datastax/python-driver/commit/607ff52c7521f179fc944df4dfc9ddb075fbb30d]. A side effect of doing that right now is that the new driver depends on external library that we'll need to bring as well - {{geomet}}. We discussed this with [~aboudreault] and he suggested to make dependency on that library optional in the next release. 

I suggest to remove {{fix version 4.0-alpha}} as the issue there will be fixed without any changes in this ticket. As for 3.11, I'd keep the ticket opened until the next driver version. WDYT?;;;","02/Jun/20 17:02;aholmber;Sounds good. The next driver is only a couple weeks out. We'll ping here when it lands. (/cc [~aboudreault]).;;;","18/Jun/20 17:30;aboudreault;[~Gerrrr] We just released cassandra driver 3.24. geomet is not required anymore at runtime.;;;","26/Jun/20 14:47;Gerrrr;Thanks Alan!

Here are the patches:
 * PR to update python driver in Cassandra 3.11 - [https://github.com/apache/cassandra/pull/654]
 * PR to fix {{test_describe_functions}} broken by driver upgrade - [https://github.com/apache/cassandra-dtest/pull/81]

CI run  - [https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/154/tests/]

I checked the rest of the failing tests manually. Test failures either do not reproduce locally or fail as well on the base branch.

 ;;;","15/Jul/20 16:51;maedhroz;[~Gerrrr] I've just filed CASSANDRA-15948. It's not clear to me how much this overlaps.;;;","14/Sep/20 15:49;adelapena;[~Gerrrr] [~aboudreault] It seems that the Python driver fix still misses the reserved keywords {{mbean}} and {{mbeans}}, so using them as table names produces the same behaviour as {{default}} does without the fix. 

The keywords {{default}}, {{mbean}}, {{mbeans}} and {{unset}} where added to [{{ReservedKeywords}}|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/cql3/ReservedKeywords.java#L91-L92] by CASSANDRA-14205, and it seems they didn't make it into that driver set of keywords. However, {{unset}} is in the driver's set as a DSE specific, even though it really isn't so.;;;","27/Oct/20 17:53;aboudreault;[~adelapena] This will be fixed for the next release: https://datastax-oss.atlassian.net/browse/PYTHON-1269.;;;","28/Oct/20 11:16;adelapena;Great. Should we wait until 3.25.0 containing [PYTHON-1269|https://datastax-oss.atlassian.net/browse/PYTHON-1269] is ready, or commit this a it is and create another ticket for {{MBEAN}} and {{MBEANS}}?;;;","28/Oct/20 11:33;Gerrrr;+1 to waiting for 3.25.0. Regarding [PYTHON-1269|https://datastax-oss.atlassian.net/browse/PYTHON-1269], I plan to work on it next week if no-one takes it before that.;;;","24/Jun/21 15:03;Gerrrr;Python driver 3.25.0 with fixed [PYTHON-1269|https://datastax-oss.atlassian.net/browse/PYTHON-1269] was released a while ago. Unfortunately, with the new driver version Cassandra server logs the following errors in dtests:

{noformat}
Protocol exception with client networking: org.apache.cassandra.transport.ProtocolException: Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset
{noformat}

AFAIU this happens because 3.11 classifies V5 as beta while 3.25.0 considers it stable.

I don't think it is a good idea to introduce protocol-level warnings in the trivial bug fix, therefore I cherry-picked [PYTHON-1269|https://datastax-oss.atlassian.net/browse/PYTHON-1269] into 3.24.0. Patches:
* PR to update python driver in Cassandra 3.11 - https://github.com/apache/cassandra/pull/654
* PR to fix {{test_describe_functions}} broken by the driver upgrade - https://github.com/apache/cassandra-dtest/pull/148

[~adelapena] Can you please review?
;;;","30/Jun/21 11:53;adelapena;Sure, I'm taking a look;;;","30/Jun/21 14:10;adelapena;[~Gerrrr] CASSANDRA-16659 made changes in cqlsh to not pull the list of reserved keywords from the driver but to have it in a constant. Maybe we could backport this to 3.11?;;;","02/Jul/21 18:02;Gerrrr;Unfortunately, solving this issue by porting CASSANDRA-16659 will be even more invasive than upgrading and patching drivers.

The difficulty lies in pylib relying heavily on the drivers to escape and convert statements to strings. For example:
* {{cql3handling.py}}, {{copyutil.py}}, {{cqlsh.py}} use {{maybe_escape_name}}, {{protect_name}}, {{protect_names}} functions from the driver that in turn use driver's list of reserved keywords.
* Use of {{export_as_string}} in {{cqlsh.py}} which in turn calls the same method for parts of the statements - aggregates, functions, etc. 
 
The former is easy to fix, e.g., by copying these functions to {{cql3handling.py}}. However, to solve the latter, we'll have to copy over the vast majority of the driver's [metadata.py|https://github.com/datastax/python-driver/blob/master/cassandra/metadata.py]. 

WDYT?;;;","06/Jul/21 11:35;adelapena;[~Gerrrr] you are totally right, the solution in CASSANDRA-16659 is not enough since pylib indirectly depends on {{cql_keywords_reserved}} on multiple places. I think we should probably have a followup ticket on 4.0/4.x for either reverting that approach and go back to using the driver keywords, or completing the fix by removing the remaining dependencies. CC [~e.dimitrova]

As for this ticket, I agree that upgrading and patching the driver is the way to go. However, it seems that something is missed in the upgraded driver since it's not finding the dependency on both [CircleCI|https://app.circleci.com/pipelines/github/adelapena/cassandra/635/workflows/762f47f2-0419-4e06-a342-d5258f1bbf16] and [Jenkins|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/892/tests/].;;;","07/Jul/21 00:52;e.dimitrova;Thanks for the ping [~adelapena]. I spent some time today on this to remind myself of that issue.

Indeed, it seems autocomplete and maybe some other cases show quotes and the fix we worked on in CASSANDRA-16659 is not full.

First I thought, I should just update the reserved keywords in the driver but then I reminded myself of [https://datastax-oss.atlassian.net/browse/PYTHON-1270] which was discussed here and I confirmed that the reported non-keyword in CASSANDRA-16659 is actually a keyword for DSE. 

It seems CASSANDRA-16659 was not really a bug but improvement if I read correctly PYTHON-1270.

So I guess we have two options for this case - either we keep CASSANDRA-16659 patch as partial improvement or we revert it. As far as I know from Adam, no one planned to work on the driver improvement for now.

Probably we can document this detail in a way as a known behavior?

CC [~aboudreault] as I saw he was also updating the DSE cql keywords list so probably there were already similar discussions and output he might be able to share with us. ;;;","07/Jul/21 14:49;adelapena;[Last CI results|https://app.circleci.com/pipelines/github/adelapena/cassandra/638/workflows/9828c5f2-9207-44f7-bba7-d37e74842ac6] for the upgraded and patched driver look better.

It seems that the ideal solution would be having PYTHON-1270, but it seems that this isn't going to happen soon. I guess that if we are going to ship a patched version of the driver we should also remove the DSE-only keywords, to avoid problems like the one that can be seen with this example:
{code:java}
CREATE KEYSPACE node WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};
DESCRIBE KEYSPACES; # ""node"" is quoted
DESCRIBE KEYSPACE node; # Improper DESCRIBE command.
{code}
Alternatively, following the approach used in CASSANDRA-16659, we could try to modify {{cqlhandling.py}} to just override the sets of keywords in the driver's {{metadata}}. That way the driver's methods {{maybe_escape_name}}, {{protect_name}}, {{export_as_string}}, etc. would use the ""injected"" set of reserved keywords. I gave it a go [here|https://github.com/adelapena/cassandra/commit/9e94174e8a74cc11f6196e299eadf0d6565311b1], and I'm trying to run CI on it.

To add some more confusion, the lists of keywords, reserved keywords and unreserved keywords defined in the driver don't exactly match what is defined in {{Parser.g}}, {{Lexer.g}} and {{ReservedKeywords.java}}. The driver assumes that the reserved keywords are the difference between all the keywords and the unreserved keywords (see [here|https://github.com/Gerrrr/python-driver/blob/master/cassandra/metadata.py#L90-L93]). However, it seems that [{{Lexer.g}}|https://github.com/apache/cassandra/blob/cassandra-3.11/src/antlr/Lexer.g#L58-L204] contains some keywords that aren't included in neither the list of [unreserved keywords defined in {{Parser.g}}|https://github.com/apache/cassandra/blob/cassandra-3.11/src/antlr/Parser.g#L1640-L1687] nor in the [list of reserved keywords defined in {{ReservedKeywords.java}}|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/cql3/ReservedKeywords.java#L29-L92]. These keywords that aren't included in none of the reserved/unreserved sets are {{varint}}, {{int}}, {{text}}, {{float}}, {{boolean}}, {{ttl}}, {{duration}}, {{ascii}}, {{smallint}}, {{uuid}}, {{distinct}}, {{bigint}}, {{json}}, {{blob}}, {{inet}}, {{timeuuid}}, {{varchar}}, {{timestamp}}, {{key}}, {{date}}, {{count}}, {{double}}, {{decimal}}, {{counter}}, {{cast}}, {{tinyint}}, {{writetime}} and {{time}}. The sets of keywords matching the contents of those files would look [like this|https://github.com/adelapena/cassandra/blob/b15a8bbb25a35f17617966aa5d4e056d3496a6f7/pylib/cqlshlib/cqlhandling.py#L26-L71].;;;","07/Jul/21 15:12;e.dimitrova;Thank you [~adelapena] for working on a patch. This seems to me IMHO like the best idea at this moment which removes the confusion for the users why they see DSE reserved keywords and also removes the dependency on drivers releases. 

Let's see what the CI will show but I definitely like it at this point. ;;;","07/Jul/21 17:39;adelapena;[CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/640/workflows/d3b015ed-7969-4009-a42f-351137729a7a] for the {{cqlhandling}} patch looks good to me. If we were going to use that approach we should also port the test added by CASSANDRA-16659.;;;","08/Jul/21 02:17;e.dimitrova;Should we port this also to 4.0.0 before the release(with the updated list of words of course)? ;;;","08/Jul/21 11:17;Gerrrr;I love the idea to override the set of keywords in the driver! I created a branch that ports CASSANDRA-16659 on top of Andres's changes: [15663-3.11-take-2|https://github.com/apache/cassandra/compare/trunk...Gerrrr:15663-3.11-take-2] ([Circle CI|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/180/workflows/44e38774-1c16-40ef-9f87-d5a1d437d6ed]).

Here is a separate branch that ports this to 4.0.0: [15663-4.0|https://github.com/apache/cassandra/compare/trunk...Gerrrr:15663-4.0?expand=1] ([CircleCI|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/181/workflows/e686981d-d02d-48b9-a579-a46105ac3960]).;;;","08/Jul/21 11:18;adelapena;{quote}Should we port this also to 4.0.0 before the release(with the updated list of words of course)? 
{quote}
I'm a bit on the fence about porting to 4.0.0, since it's always scary to risk compromising the stability of the release with a bug that doesn't seem that bad. However it's clearly a bug, the solution seems quite straight forward and I like the idea of fixing the list of keywords since the start of a major, so we don't have changes in between minors. So I think I'd port this to 4.0.0. wdyt?

Also, I think that the patch only needs to override {{metadata.cql_keywords_reserved}}. IIUC {{metada.cql_keywords}} and {{metadata.cql_keywords_unreserved}} only exist to generate {{metadata.cql_keywords_reserved}}, and they aren't used anywhere else. I think that the reason why it's done that way in the driver is because in pre-3.0 releases there wasn't an explicit set of reserved keywords in the server. The Java class {{ReservedKeywords}} didn't exist back then, and all the grammar was in the [{{Cql.g}}|https://github.com/apache/cassandra/blob/cassandra-2.2/src/java/org/apache/cassandra/cql3/Cql.g] file. That file contained the sets of keywords and unreserved keywords that were used to calculate the set of reserved keywords. So, now that we have a clear list of reserved keywords on the server, we can just use it to override {{metadata.cql_keywords_reserved}} and ignore the other sets.;;;","08/Jul/21 14:28;adelapena;[~Gerrrr] thanks for putting everything together, I have created [a PR for 3.11|https://github.com/apache/cassandra/pull/1105] from your branch and left a few minor comments there.;;;","09/Jul/21 14:22;adelapena;The patch with the last changes looks good to me. Running CI with the last changes:

* 3.11: [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/650/workflows/f8548311-fbde-4a5c-b8a1-4c3caa3a4675]
* 4.0.0: [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/648/workflows/1587d081-bef0-4382-a38d-f3610f1c3b29] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/648/workflows/a7ba4f86-9bfd-4380-b771-e7ac9596fcc3]
* 4.0: [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/647/workflows/43ac879b-b90a-48aa-8c22-7cf85d7992df] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/647/workflows/b9f131c2-39a3-41d6-8fe6-b11079632fc4]
* trunk: [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/649/workflows/e1140c43-5cfc-4bef-b83a-a2dd32ac0db4] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/649/workflows/525320d2-bea6-43c1-aa3a-6bbd62e55041];;;","13/Jul/21 12:37;adelapena;Committed to 3.11 as [2a8e01858f3aa18e72806acfed5f9cfa9d6c6d03|https://github.com/apache/cassandra/commit/2a8e01858f3aa18e72806acfed5f9cfa9d6c6d03] and merged up to [4.0|https://github.com/apache/cassandra/commit/906781ecbb76bdd6f06e32ee52348e78d98025d1] and [trunk|https://github.com/apache/cassandra/commit/096777d6c637995a227baa46b1df5e3e57e76039].;;;","13/Jul/21 20:10;e.dimitrova;Thank you [~adelapena] and [~Gerrrr] . For the sake of completeness, posting also here - LGTM, thanks! (The patch was approved in Slack before);;;",,,,,,,,,,,,,,
cqlsh tests won't run on jdk1.8 (regression from CASSANDRA-10190) ,CASSANDRA-15662,13293744,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,25/Mar/20 07:55,21/Dec/20 08:08,13/Jul/23 08:39,06/Apr/20 15:46,4.0,4.0-alpha4,,,,Test/unit,,,,0,,,,"Running the cqlsh tests on jdk1.8 no longer work.

The commit {{bf9a1d487b}} for CASSANDRA-10190 broke this, by defaulting {{CASSANDRA_USE_JDK11}} to true. See https://github.com/apache/cassandra/commit/bf9a1d487b9ba469e8d740cf7d1cd419535a7e79#diff-90e40e02845884b66e9006b25250ea5cR36-R38

The following three work…
{code}
jenv shell 1.8
export CASSANDRA_USE_JDK11=false
./pylib/cassandra-cqlsh-tests.sh `pwd`
{code}
{code}
jenv shell 11.0
export CASSANDRA_USE_JDK11=true
./pylib/cassandra-cqlsh-tests.sh `pwd`
{code}
{code}
jenv shell 1.8
unset CASSANDRA_USE_JDK11
./pylib/cassandra-cqlsh-tests.sh `pwd`
{code}

The following does not…
{code}
jenv shell 1.8
./pylib/cassandra-cqlsh-tests.sh `pwd`
{code}
{noformat}
BUILD FAILED
/Users/mick/src/apache/casSANDRA/build.xml:292: -Duse.jdk11=true or $CASSANDRA_USE_JDK11=true cannot be set when building from java 8
{noformat}

JDK 1.8 is expected to be the default. With {{CASSANDRA_USE_JDK11}} being defined if/when JDK 11 is used.",,jasonstack,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-10190,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Apr 06 15:46:35 UTC 2020,,,,,,,All,,,,,,"0|z0cvn4:",9223372036854775807,,,,yukim,,,,Critical,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/bb8ec1fc1066e604b5695c0f8057e2b3adfa5cb2,,,,,,,,,fix broken test in ci-cassandra.apache.org,,,,,"05/Apr/20 08:53;mck;||branch||circleci||jenkins||
|[trunk_15662|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15662]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Ftrunk_15662]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/24/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/24]|;;;","05/Apr/20 09:01;mck;Looking for a reviewer.
Fixed CI can be seen [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-cqlsh-tests/14/].;;;","06/Apr/20 01:38;yukim;The scope of the ticket is to cqlsh tests, and confirmed it is running on CI.

+1.;;;","06/Apr/20 15:46;mck;Thanks [~yukim].

Committed as bb8ec1fc1066e604b5695c0f8057e2b3adfa5cb2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to specify -e/--execute flag in cqlsh,CASSANDRA-15660,13293617,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,stefan.miklosovic,stefan.miklosovic,24/Mar/20 19:07,15/May/20 08:53,13/Jul/23 08:39,16/Apr/20 16:54,4.0,4.0-beta1,,,,Tool/cqlsh,,,,0,pull-request-available,,,"From mailing list:

[https://lists.apache.org/thread.html/r377099b632c62b641e4feef5b738084fc5369b0c7157fae867853597%40%3Cdev.cassandra.apache.org%3E]

The bug looks like this:
{code:java}
$ /usr/bin/cqlsh -e 'describe keyspaces' -u cassandra -p cassandra 127.0.0.1

Usage: cqlsh.py [options] [host [port]]cqlsh.py: error: '127.0.0.1' is not a valid port number.
{code}
This is working in 3.x releases just fine but fails on 4.

The workaround for 4.x code as of today is to put these statements into file and use ""-f"" flag.

 ",,aboudreault,djoshi,e.dimitrova,jasonstack,stefan.miklosovic,,,,,,,"jasonstack commented on pull request #502: CASSANDRA-15660: fix cqlsh to avoid arguments being evaluated
URL: https://github.com/apache/cassandra/pull/502
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/20 11:38;githubbot;600","jasonstack commented on pull request #502: CASSANDRA-15660: fix cqlsh to avoid arguments being evaluated
URL: https://github.com/apache/cassandra/pull/502
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Apr/20 17:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,CASSANDRA-15697,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Apr 18 19:14:10 UTC 2020,,,,,,,All,,,,,,"0|z0cuv4:",9223372036854775807,,,,brandon.williams,djoshi,,,Normal,,4.0,,,https://github.com/apache/cassandra/commit/781e4862faab8dd10382ec296b122592edd0f6f0,,,,,,,,,"CI pending: [https://circleci.com/workflow-run/8e4b4739-cb7c-40ad-a24d-8d7c0027eb4b]

Added regression cqlsh dtest.
 ",,,,,"24/Mar/20 19:16;stefan.miklosovic;[~ptbannister] maybe something for you to look at? Thank you very much!;;;","30/Mar/20 21:45;brandon.williams;Just wanted to add a note about something weird going on here.

{code}
$ bin/cqlsh -e 'select * from foo;'
Usage: cqlsh.py [options] [host [port]]

cqlsh.py: error: '499.patch' is not a valid port number.
{code}

Note that I used single quotes, so the wildcard is not being interpreted by the shell, however '499.patch' is a file in my C* working directory.;;;","31/Mar/20 09:55;jasonstack;The issue is that arguments are being evaluated in shell script...

{{{$VAR}}} will be evaluated and causing \{{*}} to list all files, we should use {{""{$VAR}""}} instead.;;;","31/Mar/20 16:27;stefan.miklosovic;tested and works as expected;;;","31/Mar/20 16:35;jasonstack;[patch|https://github.com/apache/cassandra/pull/502/files]
 [dtest|https://github.com/apache/cassandra-dtest/pull/60/files]


 Marking it patch-available.. I have added a regression test and {{cqlsh_tests/test_cqlsh.py}} works fine locally, but I am not able to run circle-ci because queue is full..;;;","01/Apr/20 18:10;mck;||branch||circleci||jenkins||
|[trunk_15660|https://github.com/apache/cassandra/compare/trunk...jasonstack:CASSANDRA-15660-trunk]|[circleci|https://circleci.com/gh/jasonstack/workflows/cassandra/tree/CASSANDRA-15660-trunk]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/12/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/12]|;;;","06/Apr/20 23:32;djoshi;thank you for the patch. Could we please add a test to detect a future regression?;;;","07/Apr/20 01:29;jasonstack;[~djoshi] there is a regression dtest..;;;","07/Apr/20 23:29;djoshi;[~jasonstack] thanks, I was looking at only the patch that [~mck] posted! My bad.

shellcheck turned up a few issues. It may be worth addressing them:


{code:shell}
In ./bin/cqlsh line 28:
PARAMS=()
       ^-- SC2039: In POSIX sh, arrays are undefined.


In ./bin/cqlsh line 45:
            PARAMS+=(""$1"")
            ^----^ SC2039: In POSIX sh, += is undefined.
                    ^----^ SC2039: In POSIX sh, arrays are undefined.


In ./bin/cqlsh line 75:
            exec ""$interpreter"" ""$($interpreter -c ""import os; print(os.path.dirname(os.path.realpath('$0')))"")/cqlsh.py"" ""${@:2}""
                                                                                                                           ^----^ SC2039: In POSIX sh, string indexing is undefined.


In ./bin/cqlsh line 84:
    run_if_supported_version ""$USER_SPECIFIED_PYTHON"" ""${PARAMS[@]}""
                                                       ^----------^ SC2039: In POSIX sh, array references are undefined.


In ./bin/cqlsh line 88:
        run_if_supported_version ""$interpreter"" ""${PARAMS[@]}""
                                                 ^----------^ SC2039: In POSIX sh, array references are undefined.
{code}
;;;","08/Apr/20 09:07;jasonstack;[~djoshi] thanks for the feedback. Writing shell script for the first time..

Updated the patch to remove ""--python"" option and its value from users arguments {{$@}}. This seems to be a safer approach comparing to existing trunk - constructing users arguments as string..

Shellcheck passed and ""cqlsh_tests/test_cqlsh.py"" passed locally. Do you mind having another look? ;;;","11/Apr/20 05:19;jasonstack;[CI|https://circleci.com/workflow-run/8e4b4739-cb7c-40ad-a24d-8d7c0027eb4b] looks good;;;","16/Apr/20 16:00;jasonstack;[~brandon.williams]/[~djoshi] friendly ping..;;;","16/Apr/20 16:41;djoshi;+1;;;","16/Apr/20 16:54;djoshi;Thanks for the patch [~jasonstack]. Committed both cassandra and [cassandra-dtest|https://github.com/apache/cassandra-dtest/commit/2b6286b503e1223659ffb9e31b5f73200348e781].;;;","18/Apr/20 19:14;jasonstack;thanks for the review [~djoshi] [~brandon.williams];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest,CASSANDRA-15650,13293053,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,21/Mar/20 01:11,21/Dec/20 08:08,13/Jul/23 08:39,01/Apr/20 13:14,4.0,4.0-alpha4,,,,Test/dtest/java,,,,0,pull-request-available,,,"Test failure: https://app.circleci.com/pipelines/github/dcapwell/cassandra/177/workflows/3dff37a5-9bf4-40e2-8d5b-f127b416dc79/jobs/862

{code}
[junit-timeout] Testcase: onlyCoordinator[SEQUENTIAL/true](org.apache.cassandra.distributed.test.FullRepairCoordinatorFastTest):	FAILED
[junit-timeout] nodetool command repair was successful but not expected to be. Actual: 0
[junit-timeout] junit.framework.AssertionFailedError: nodetool command repair was successful but not expected to be. Actual: 0
[junit-timeout] 	at org.apache.cassandra.distributed.api.NodeToolResult$Asserts.failure(NodeToolResult.java:76)
[junit-timeout] 	at org.apache.cassandra.distributed.test.RepairCoordinatorFast.onlyCoordinator(RepairCoordinatorFast.java:255)
[junit-timeout] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[junit-timeout] 	at java.lang.Thread.run(Thread.java:748)
{code}


[Circle CI LOWER|https://circleci.com/gh/dcapwell/cassandra/tree/bug%2FrepairCoordinatorTestFlaky]",,blerer,dcapwell,e.dimitrova,jasonstack,,,,,,,,"dcapwell commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/20 15:43;githubbot;600","blerer commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r399160611
 
 

 ##########
 File path: src/java/org/apache/cassandra/repair/RepairRunnable.java
 ##########
 @@ -227,8 +227,14 @@ private void complete(String msg)
 
     public void run()
     {
+        String previousName = Thread.currentThread().getName();
         try
         {
+            Thread.currentThread().setName(NamedThreadFactory.globalPrefix()
+                                           + ""Repair Coordinator #"" + cmd
+                                           + "" id="" + parentSession
+                                           + "" ks="" + keyspace
+                                           + "" tables="" + options.getColumnFamilies());
 
 Review comment:
   Thread names should always stay the same. Nobody will assume that they might changes and everybody rely on them for debugging.
   If additional information is required, it should be logged. 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Mar/20 11:10;githubbot;600","blerer commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r399185294
 
 

 ##########
 File path: src/java/org/apache/cassandra/utils/Throwables.java
 ##########
 @@ -230,6 +230,24 @@ public static RuntimeException unchecked(Throwable t)
         return t instanceof RuntimeException ? (RuntimeException)t : new RuntimeException(t);
     }
 
+    /**
+     * throw the exception without wrapping as a runtime exception.  This relies on a trick to stop the compiler from
+     * forcing checking of checked exceptions so a exception can be rethrown unchecked
+     */
+    public static RuntimeException throwAsUncheckedException(Throwable t)
 
 Review comment:
   This is based on something that we cannot guaranty will work in the future and I am not truly convinced of its benefit over wrapping the Exception in a Runtime one.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Mar/20 11:10;githubbot;600","blerer commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r399164975
 
 

 ##########
 File path: src/java/org/apache/cassandra/tools/RepairRunner.java
 ##########
 @@ -59,19 +64,38 @@ public void run() throws Exception
         if (cmd <= 0)
         {
             // repairAsync can only return 0 for replication factor 1.
-            String message = String.format(""[%s] Replication factor is 1. No repair is needed for keyspace '%s'"", format.format(System.currentTimeMillis()), keyspace);
-            out.println(message);
+            String message = String.format(""Replication factor is 1. No repair is needed for keyspace '%s'"", keyspace);
+            printMessage(message);
         }
         else
         {
-            while (!condition.await(NodeProbe.JMX_NOTIFICATION_POLL_INTERVAL_SECONDS, TimeUnit.SECONDS))
+            String previousName = Thread.currentThread().getName();
+            try
             {
-                queryForCompletedRepair(String.format(""After waiting for poll interval of %s seconds"",
-                                                      NodeProbe.JMX_NOTIFICATION_POLL_INTERVAL_SECONDS));
+                Thread.currentThread().setName(""RepairRunner #"" + cmd
+                                               + "" ks="" + keyspace
+                                               + "" tables="" + options.get(RepairOption.COLUMNFAMILIES_KEY));
 
 Review comment:
   Same comment as before. Thread name should stay constant. Use logging instead.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Mar/20 11:10;githubbot;600","blerer commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r399163058
 
 

 ##########
 File path: src/java/org/apache/cassandra/tools/NodeProbe.java
 ##########
 @@ -1807,6 +1805,11 @@ public MessagingServiceMBean getMessagingServiceProxy()
     {
         return msProxy;
     }
+
+    public long getJmxNotificationPollIntervalSeconds()
+    {
+        return Long.getLong(""cassandra.nodetool.jmx_notification_poll_interval_seconds"", TimeUnit.SECONDS.convert(5, TimeUnit.MINUTES));
+    }
 
 Review comment:
   It is not clear to me what is the advantage of using a method over a constant.
   Usually all system variables within C* are read and stored within constants.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Mar/20 11:10;githubbot;600","dcapwell commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r399680186
 
 

 ##########
 File path: src/java/org/apache/cassandra/repair/RepairRunnable.java
 ##########
 @@ -227,8 +227,14 @@ private void complete(String msg)
 
     public void run()
     {
+        String previousName = Thread.currentThread().getName();
         try
         {
+            Thread.currentThread().setName(NamedThreadFactory.globalPrefix()
+                                           + ""Repair Coordinator #"" + cmd
+                                           + "" id="" + parentSession
+                                           + "" ks="" + keyspace
+                                           + "" tables="" + options.getColumnFamilies());
 
 Review comment:
   Why do you say that? This is a common practice to make thread dumps easier to reason about. 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/20 16:20;githubbot;600","dcapwell commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r399680281
 
 

 ##########
 File path: src/java/org/apache/cassandra/tools/NodeProbe.java
 ##########
 @@ -1807,6 +1805,11 @@ public MessagingServiceMBean getMessagingServiceProxy()
     {
         return msProxy;
     }
+
+    public long getJmxNotificationPollIntervalSeconds()
+    {
+        return Long.getLong(""cassandra.nodetool.jmx_notification_poll_interval_seconds"", TimeUnit.SECONDS.convert(5, TimeUnit.MINUTES));
+    }
 
 Review comment:
   I went down the path of trying to make different tests have different values but I got rid of that, can revert thus
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Mar/20 16:20;githubbot;600","blerer commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r400045766
 
 

 ##########
 File path: src/java/org/apache/cassandra/repair/RepairRunnable.java
 ##########
 @@ -227,8 +227,14 @@ private void complete(String msg)
 
     public void run()
     {
+        String previousName = Thread.currentThread().getName();
         try
         {
+            Thread.currentThread().setName(NamedThreadFactory.globalPrefix()
+                                           + ""Repair Coordinator #"" + cmd
+                                           + "" id="" + parentSession
+                                           + "" ks="" + keyspace
+                                           + "" tables="" + options.getColumnFamilies());
 
 Review comment:
   Thread dumps are only one of the tools that use thread names. Logs, JConsole, Profilers also use them. If the name of a thread keep on changing, it is pretty hard to understand what is truly going on and you cannot monitor what happen to a given thread over time.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Mar/20 09:22;githubbot;600","dcapwell commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482#discussion_r400528643
 
 

 ##########
 File path: src/java/org/apache/cassandra/repair/RepairRunnable.java
 ##########
 @@ -227,8 +227,14 @@ private void complete(String msg)
 
     public void run()
     {
+        String previousName = Thread.currentThread().getName();
         try
         {
+            Thread.currentThread().setName(NamedThreadFactory.globalPrefix()
+                                           + ""Repair Coordinator #"" + cmd
+                                           + "" id="" + parentSession
+                                           + "" ks="" + keyspace
+                                           + "" tables="" + options.getColumnFamilies());
 
 Review comment:
   I disagree that it makes it harder since it provides a lot more context that enhance logs/jconsole.  most profilers won't be tricked (at least the ones I use), so reports just have more context in the names; this change is not required for the patch, so I will revert both.  
   
   I do plan to add these back though when I start working on the repair observability tickets.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Mar/20 22:19;githubbot;600","dcapwell commented on pull request #482: CASSANDRA-15650 Fix flaky test org.apache.cassandra.distributed.test.*RepairCoordinatorFastTest
URL: https://github.com/apache/cassandra/pull/482
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:38;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15684,CASSANDRA-15689,CASSANDRA-15683,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 02 17:51:39 UTC 2020,,,,,,,All,,,,,,"0|z0crdc:",9223372036854775807,,,,blerer,e.dimitrova,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/dfc279a22a5563ac7a832a586914d5410426e9b7,,,,,,,,,circle ci,,,,,"21/Mar/20 02:03;dcapwell;This one is weird.  Only one code path skips and that only happens if you ask for a index table, the only other case this could happen is if there are two hosts defined and only one of them is the coordinator.  since I only define 1 I don't see how the second case happens, so this only makes sense if we skip, which would require org.apache.cassandra.service.StorageService#getValidColumnFamilies to return a empty list (may be some how possible that the keyspace list is empty some how, and then this defaults to repair all tables, even in this case we should still fail since the coordinator is the only host present);;;","21/Mar/20 21:40;dcapwell;Im seeing that its not one test but many, and seeing two patterns

* expected failure but was success
* polling happens before notification (such as with snapshotFailure where polling sees the failure before the notification so uses the other error message);;;","21/Mar/20 21:41;dcapwell;To help me replicate I am using the following scripts

{code}
$ cat ci-test-loop
#!/usr/bin/env bash

#set -o xtrace
set -o errexit
set -o pipefail
set -o nounset

class_name=""$1""
path=""$(echo ""$class_name"" | tr '.' '/' ).java""
prefix=""$( find test | grep ""$path"" | awk -F/ '{print $2}' )""

while ant testclasslist -Dtest.classlistfile=<(echo ""$path"") -Dtest.classlistprefix=$prefix ; do
  rm -rf build/test/logs || true
done;
{code}

{code}
$ cat mac-throttle.sh
#!/usr/bin/env bash

#set -o xtrace
set -o errexit
set -o pipefail
set -o nounset

bin=""$(cd ""$(dirname ""$0"")"" > /dev/null; pwd)""

_main() {
  local pid
  while true; do
    pid=""$(ps -ef | grep JUnitTestRunner | grep -v grep | awk '{print $2}' || true)""
    if [ ! -z ""${pid:-}"" ]; then
      renice +15 -p $pid || true
    fi
    sleep 1
  done
}

_main ""$@""
{code}

{code}
for core in $(sudo cpuctl list | awk -F: '{print $1}' | tr -d 'CPU' | tail -n +3); do sudo cpuctl offline $core; done;
{code};;;","23/Mar/20 22:05;e.dimitrova;[~dcapwell] Are you looking for a reviewer or already have someone? :-)
;;;","24/Mar/20 02:57;dcapwell;sorry for the late reply!

[~e.dimitrova] would be glad if you reviewed =);;;","24/Mar/20 13:24;e.dimitrova;Alright, I am gonna do it tonight. Have to finish something now;;;","25/Mar/20 16:52;dcapwell;To also help with the review, a few things changed but only a hand full solve the problem.

1) there is a bug in nodetool repair (client side) where the error notification isn't seen (expected behavior, notifications are lossy) but the complete is.  In this case the return code is 0 though the message will say there was a failure.  I changed it so we double check for errors.
2) the slow tests take 6m10s on my laptop with only 2 cores running; the dtest timeout is 6m.  I split the tests into 2 (which causes 3 new implementations: preview, IR, full) which now gets it to 4m30s under the same settings.

The other changes are
1) better assert messages, useful to see issue #1, but generally offer more detail than before
2) thread renaming, this is a operational improvement as it better allows us to see which threads are running which repair.  This ties in well with improvements to #2 as it will show which repair is timed out rather than ""there exists a repair"";;;","26/Mar/20 04:33;e.dimitrova;Apologize, started this only in the afternoon, got some troubles earlier.

Thanks for the additional explanation, that helped!

As we talked on slack, for some weird reason the shell script is failing to run.
But with the simple loop of the ant command, the test runs properly. (putting this here for the record in case someone else decides to play with this one and experience my issues)
Unfortunately, it never failed on my Mac, also on ubuntu vm.
But I checked the logic and in general it looks good to me. 

Based on the JUnit documentation I was tempted to say you are actually implementing assertTimeout for a supplier and not assertTimeoutPreemptively which is for executables.
But I saw you actually adjusted the original implementation and from that perspective it is accurate.

From the circle logs I saw the way the threads are logging as there is another test failing. It looks really lengthy. I wanna look at it better tomorrow morning with a refreshed mind and implement a couple of other tests before voting for the patch. Thanks!
 ;;;","27/Mar/20 03:32;e.dimitrova;LGTM
Thanks
I have only one question, why did you decide to do the throwAsUncheckedException? Not sure I understand correctly.

[~blerer] can you, please, check and commit if you don't have anything in addition? Thanks!;;;","27/Mar/20 03:41;dcapwell;Throw as unchecked means I don't need to wrap, that's basically it; take a checked exception and throw without needing to check;;;","31/Mar/20 16:54;dcapwell;[~blerer] fixed all feedback, can you review again?;;;","01/Apr/20 13:14;blerer;Committed into trunk at dfc279a22a5563ac7a832a586914d5410426e9b7;;;","01/Apr/20 13:14;blerer;Thanks for the patch [~dcapwell].
Thanks for the review [~e.dimitrova];;;","02/Apr/20 15:50;e.dimitrova;CASSANDRA-15683 was opened as [~blerer] was right that the exceptions shouldn't be touched. 
[~dcapwell];;;","02/Apr/20 16:50;blerer;[~dcapwell] actually changed the code as I asked. I just was not careful enough with the CI results.;;;","02/Apr/20 17:51;dcapwell;reading JIRA now, the function throws Error or RuntimeException, so only errors won't be thrown as a RuntimeException.

There was also another issue found CASSANDRA-15684, the testing was based before the jvm dtests got pulled out and the merge didn't conflict since 4 files which were supposed to be deleted were not.  I am working on a patch for this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test.distributed.timeout no longer respected in CircleCI,CASSANDRA-15649,13293019,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,20/Mar/20 20:51,15/May/20 08:53,13/Jul/23 08:39,27/Mar/20 11:31,2.2.17,3.0.21,3.11.7,4.0,4.0-alpha4,Build,CI,,,0,CI,pull-request-available,,"After switching jvm dtest over testclasslist (CASSANDRA-15508) we no longer respect the dtest timeout and instead use the unit test timeout (4m vs 6m).

This does not impact Jenkins as I made sure to check that before calling testclasslist; though this does impact 2.2, 3.0, and 3.11 as well.

||Config||Trunk||3.11||3.0||2.2||
|LOWER||[Circle CI|https://circleci.com/workflow-run/04f7fbe2-1919-4da0-bf72-ba41b41c3072]| [Circle CI|https://circleci.com/workflow-run/69c64062-80f5-4d08-8ab0-dbe88ce7b236] | [Circle CI|https://circleci.com/workflow-run/499d2fbe-a8c1-4a27-9430-a9ebb40aad53] | [Circle CI|https://circleci.com/workflow-run/fedbd5b8-683d-4c59-a9f6-3aad5a6ba41d] |
|HIGHER| [Circle CI|https://circleci.com/workflow-run/036bbad1-541a-49dc-a567-cef2300fa847] | TBD | TBD | TBD |

CI Failures were flaky tests, below are their links
* CASSANDRA-15630",,dcapwell,mck,,,,,,,,,,"dcapwell commented on pull request #479: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/479
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 20:53;githubbot;600","michaelsembwever commented on pull request #479: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/479#discussion_r395983272
 
 

 ##########
 File path: .circleci/config.yml
 ##########
 @@ -110,6 +114,7 @@ jobs:
           source ~/env/bin/activate
           export PATH=$JAVA_HOME/bin:$PATH
           pip3 install --upgrade -r ~/cassandra-dtest/requirements.txt
+          pip3 uninstall -y cqlsh
 
 Review comment:
   why?
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/20 11:02;githubbot;600","dcapwell commented on pull request #479: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/479#discussion_r396036584
 
 

 ##########
 File path: .circleci/config.yml
 ##########
 @@ -110,6 +114,7 @@ jobs:
           source ~/env/bin/activate
           export PATH=$JAVA_HOME/bin:$PATH
           pip3 install --upgrade -r ~/cassandra-dtest/requirements.txt
+          pip3 uninstall -y cqlsh
 
 Review comment:
   config.yml is supposed to be config.yml.LOWER but looks like it want done properly in py3 patch, since I registered the files this got updated
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/20 22:58;githubbot;600","dcapwell commented on pull request #483: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/483
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Mar/20 00:20;githubbot;600","dcapwell commented on pull request #484: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/484
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Mar/20 00:41;githubbot;600","dcapwell commented on pull request #485: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/485
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Mar/20 00:44;githubbot;600","dcapwell commented on pull request #483: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/483
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:37;githubbot;600","dcapwell commented on pull request #484: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/484
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:37;githubbot;600","dcapwell commented on pull request #485: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/485
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:37;githubbot;600","dcapwell commented on pull request #479: CASSANDRA-15649 test.distributed.timeout no longer respected in CircleCI
URL: https://github.com/apache/cassandra/pull/479
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:38;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15630,,,,,,,,,"26/Mar/20 20:29;dcapwell;Screen Shot 2020-03-26 at 1.21.34 PM.png;https://issues.apache.org/jira/secure/attachment/12997929/Screen+Shot+2020-03-26+at+1.21.34+PM.png","26/Mar/20 20:29;dcapwell;Screen Shot 2020-03-26 at 1.26.30 PM.png;https://issues.apache.org/jira/secure/attachment/12997928/Screen+Shot+2020-03-26+at+1.26.30+PM.png","26/Mar/20 20:29;dcapwell;Screen Shot 2020-03-26 at 1.27.02 PM.png;https://issues.apache.org/jira/secure/attachment/12997927/Screen+Shot+2020-03-26+at+1.27.02+PM.png","26/Mar/20 20:30;dcapwell;Screen Shot 2020-03-26 at 1.29.21 PM.png;https://issues.apache.org/jira/secure/attachment/12997930/Screen+Shot+2020-03-26+at+1.29.21+PM.png","26/Mar/20 20:30;dcapwell;Screen Shot 2020-03-26 at 1.29.35 PM.png;https://issues.apache.org/jira/secure/attachment/12997932/Screen+Shot+2020-03-26+at+1.29.35+PM.png","26/Mar/20 20:30;dcapwell;Screen Shot 2020-03-26 at 1.29.57 PM.png;https://issues.apache.org/jira/secure/attachment/12997931/Screen+Shot+2020-03-26+at+1.29.57+PM.png","26/Mar/20 20:32;dcapwell;Screen Shot 2020-03-26 at 1.31.22 PM.png;https://issues.apache.org/jira/secure/attachment/12997936/Screen+Shot+2020-03-26+at+1.31.22+PM.png","26/Mar/20 20:32;dcapwell;Screen Shot 2020-03-26 at 1.31.37 PM.png;https://issues.apache.org/jira/secure/attachment/12997935/Screen+Shot+2020-03-26+at+1.31.37+PM.png","26/Mar/20 20:32;dcapwell;Screen Shot 2020-03-26 at 1.31.56 PM.png;https://issues.apache.org/jira/secure/attachment/12997934/Screen+Shot+2020-03-26+at+1.31.56+PM.png","26/Mar/20 20:34;dcapwell;Screen Shot 2020-03-26 at 1.32.31 PM.png;https://issues.apache.org/jira/secure/attachment/12997940/Screen+Shot+2020-03-26+at+1.32.31+PM.png","26/Mar/20 20:34;dcapwell;Screen Shot 2020-03-26 at 1.33.20 PM.png;https://issues.apache.org/jira/secure/attachment/12997939/Screen+Shot+2020-03-26+at+1.33.20+PM.png","26/Mar/20 20:34;dcapwell;Screen Shot 2020-03-26 at 1.33.28 PM.png;https://issues.apache.org/jira/secure/attachment/12997938/Screen+Shot+2020-03-26+at+1.33.28+PM.png","26/Mar/20 20:34;dcapwell;Screen Shot 2020-03-26 at 1.33.44 PM.png;https://issues.apache.org/jira/secure/attachment/12997937/Screen+Shot+2020-03-26+at+1.33.44+PM.png",,13.0,dcapwell,,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Mar 27 11:31:52 UTC 2020,,,,,,,All,,,,,,"0|z0cr5s:",9223372036854775807,,,,mck,,,,Low,,2.2.16,,,https://github.com/apache/cassandra/commit/b49084733792d9a24b205008ed4da870acf0b670,,,,,,,,,"since this only impacts CircleCI, unit and jvm-dtests are the only tests run",,,,,"21/Mar/20 11:04;mck;LGTM.

Quick question on why the uninstall of cqlsh is happening in this patch?
(And I can't access the CircleCI links…?);;;","21/Mar/20 18:29;dcapwell;sorry, talked to [~djoshi] about that.  looks like when python3 was added LOWER and HIGHER were updated, but config.yml was not replaced with config.yml.LOWER (undocumented, something you have to do though).

Since I changed the build, I had to update config.yml to pick that up (cp config.yml.LOWER config.yml)

bq. (And I can't access the CircleCI links…?)

-_-  that isn't good... ill try to figure out why Monday.;;;","24/Mar/20 13:51;mck;[~dcapwell], could you provide the 2.2, 3.0, and 3.11 patches please. (as the trunk patch does not cleanly apply.);;;","25/Mar/20 00:46;dcapwell;[~mck] sent for all 4. ;;;","25/Mar/20 16:37;dcapwell;in case the CI runs are not visible (reached out to circle ci team about this), all LOWERs passed and confirmed the change took affect (2.2 had a test failure, I don't monitor 2.2 so not familiar with its flaky tests, but I did see the change was picked up).;;;","26/Mar/20 14:55;mck;bq. in case the CI runs are not visible (reached out to circle ci team about this), all LOWERs passed and confirmed the change took affect (2.2 had a test failure, I don't monitor 2.2 so not familiar with its flaky tests, but I did see the change was picked up).

Thanks. (The circleci links are still not visible);;;","26/Mar/20 19:28;dcapwell;since Circle CI is locking down workflows for some reason, ill take a screen shot of the DAG + the params and attach to JIRA.  There are test failures, for trunk I linked to the flaky test JIRA, for other builds I don't have history so don't know what's flaky.;;;","26/Mar/20 20:34;dcapwell;the 2.2 builds spam stdout so the UI doesn't show the ant command, so print out the script.;;;","27/Mar/20 11:31;mck;Committed as b49084733792d9a24b205008ed4da870acf0b670;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mismatching dependencies between cassandra dist and cassandra-all pom,CASSANDRA-15647,13292079,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,rssvihla,velobr,velobr,16/Mar/20 22:44,21/Dec/20 08:08,13/Jul/23 08:39,14/Apr/20 18:20,4.0,4.0-beta1,,,,Build,Dependencies,,,0,,,,"I noticed that the cassandra distribution (tar.gz) dependencies doesn't match the dependency list for the cassandra-all that is available at maven central.

Cassandra distribution only includes jna 4.2.2.
But, the maven dependency also include jna-platform 4.4.0

Breakdown of relevant maven dependencies:

```
[INFO] +- org.apache.cassandra:cassandra-all:jar:4.0-alpha3:provided
[INFO] |  +- net.java.dev.jna:jna:jar:4.2.2:provided
[INFO] |  +- net.openhft:chronicle-threads:jar:1.16.0:provided
[INFO] |  |  \- net.openhft:affinity:jar:3.1.7:provided
[INFO] |  |     \- net.java.dev.jna:jna-platform:jar:4.4.0:provided
```

As you can see, jna is a direct dependency and jna-platform is a transitive dependency from chronicle-threads.


I expected this issue to had been fixed by https://github.com/apache/cassandra/pull/240/, but this change seem to have being reverted, as no longer in trunk.

",,benedict,jmeredithco,mck,polo-language,rssvihla,velobr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,rssvihla,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 14 18:20:34 UTC 2020,,,,,,,All,,,,,,"0|z0cld4:",9223372036854775807,,,,mck,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/52a55d821a2c4352dcbca013386e3cb45e376eed,,,,,,,,," 

{{ant write-poms}}

{{ mvn dependency:tree -f build/apache-cassandra-*-SNAPSHOT.pom -Dverbose -Dincludes=net.java.dev.jna}}",,,,,"17/Mar/20 15:56;rssvihla;digging into the history I think this just happened as part of a force push from the 3.11 branch into trunk (but I could be misreading the github ui), [https://github.com/apache/cassandra/commit/7dc5b700b760382c15045e3301c7061f412da993 |https://github.com/apache/cassandra/commit/7dc5b700b760382c15045e3301c7061f412da993]It does not look intentional that the JNA exclusion was left off or related to the issue that wrote the build.xml.

 

 ;;;","18/Mar/20 14:47;rssvihla;Opening this up since it seems pretty simple matter of a force push eating a commit;;;","18/Mar/20 16:02;rssvihla;I've linked the equivalent [PR|https://github.com/apache/cassandra/pull/476] for the trunk version of the build file. Now output for jna is all 4.2.2



➜ cassandra git:(15647) ✗ mvn dependency:tree -f build/apache-cassandra-*-SNAPSHOT.pom -Dverbose -Dincludes=net.java.dev.jna
[INFO] Scanning for projects...
[INFO] 
[INFO] -----------------< org.apache.cassandra:cassandra-all >-----------------
[INFO] Building Apache Cassandra 4.0-alpha4-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[WARNING] The POM for org.perfkit.sjk.parsers:sjk-jfr5:jar:0.5 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
[WARNING] The POM for org.perfkit.sjk.parsers:sjk-jfr6:jar:0.7 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
[WARNING] The POM for org.perfkit.sjk.parsers:sjk-nps:jar:0.5 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
[INFO] 
[INFO] --- maven-dependency-plugin:3.1.1:tree (default-cli) @ cassandra-all ---
[INFO] Verbose not supported since maven-dependency-plugin 3.0
[INFO] org.apache.cassandra:cassandra-all:jar:4.0-alpha4-SNAPSHOT
[INFO] \- net.java.dev.jna:jna:jar:4.2.2:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.902 s
[INFO] Finished at: 2020-03-18T17:00:00+01:00
[INFO] ------------------------------------------------------------------------

 ;;;","20/Mar/20 12:47;rssvihla;[~benedict]

I think the build.xml file got force pushed over in this commit [https://github.com/apache/cassandra/commit/7dc5b700b760382c15045e3301c7061f412da993|https://github.com/apache/cassandra/blob/7dc5b700b760382c15045e3301c7061f412da993/build.xml] removing the exclusion. Can you confirm dropping the JNA exclusion wasn't intentional?;;;","20/Mar/20 12:51;benedict;According to the commit ""Disable native library loading until it can be reinstated (tracked in CASSANDRA-15170).""

This work was done by [~jmeredithco], and while I don't believe this was intentional it might have been.;;;","20/Mar/20 19:53;jmeredithco;You're correct, it was *not* intentional. The change was only supposed to prevent the native libraries being called under in-jvm dtests as they prevented Instances from being garbage collected. We should reapply the patch https://github.com/apache/cassandra/pull/240/commits/34d5719ac33826e90e952d92e5204247c611e08f

 ;;;","20/Mar/20 20:20;jmeredithco;Confirmed the dependencies change as expected with the commit. (Though I had to add {code}<relativePath>./apache-cassandra-4.0-alpha4-SNAPSHOT-parent.pom</relativePath>{code} to the parent element to get it to work - maybe a .m2  settings issue on my end).

Before
{code}
 $ mvn dependency:tree -f build/apache-cassandra*-SNAPSHOT.pom -Dverbose -Dincludes=net.java.dev.jna
 [INFO] Scanning for projects...
 [INFO] 
 [INFO] -----------------< org.apache.cassandra:cassandra-all >-----------------
 [INFO] Building Apache Cassandra 4.0-alpha4-SNAPSHOT
 [INFO] --------------------------------[ jar ]---------------------------------
 [WARNING] The POM for org.perfkit.sjk.parsers:sjk-jfr5:jar:0.5 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
 [WARNING] The POM for org.perfkit.sjk.parsers:sjk-jfr6:jar:0.7 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
 [WARNING] The POM for org.perfkit.sjk.parsers:sjk-nps:jar:0.5 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
 [INFO] 
 [INFO] — maven-dependency-plugin:3.1.1:tree (default-cli) @ cassandra-all —
 [INFO] Verbose not supported since maven-dependency-plugin 3.0
 [INFO] org.apache.cassandra:cassandra-all:jar:4.0-alpha4-SNAPSHOT
 [INFO] +- net.java.dev.jna:jna:jar:4.2.2:compile
 [INFO] - net.openhft:chronicle-threads:jar:1.16.0:compile
 [INFO] - net.openhft:affinity:jar:3.1.7:compile
 [INFO] - net.java.dev.jna:jna-platform:jar:4.4.0:compile
 [INFO] ------------------------------------------------------------------------
 [INFO] BUILD SUCCESS
 [INFO] ------------------------------------------------------------------------
 [INFO] Total time: 1.070 s
 [INFO] Finished at: 2020-03-20T14:15:14-06:00
 [INFO] ------------------------------------------------------------------------
{code}

After
 {code}
 $ mvn dependency:tree -f build/apache-cassandra*-SNAPSHOT.pom -Dverbose -Dincludes=net.java.dev.jna
 [INFO] Scanning for projects...
 [INFO] 
 [INFO] -----------------< org.apache.cassandra:cassandra-all >-----------------
 [INFO] Building Apache Cassandra 4.0-alpha4-SNAPSHOT
 [INFO] --------------------------------[ jar ]---------------------------------
 [WARNING] The POM for org.perfkit.sjk.parsers:sjk-jfr5:jar:0.5 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
 [WARNING] The POM for org.perfkit.sjk.parsers:sjk-jfr6:jar:0.7 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
 [WARNING] The POM for org.perfkit.sjk.parsers:sjk-nps:jar:0.5 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
 [INFO] 
 [INFO] — maven-dependency-plugin:3.1.1:tree (default-cli) @ cassandra-all —
 [INFO] Verbose not supported since maven-dependency-plugin 3.0
 [INFO] org.apache.cassandra:cassandra-all:jar:4.0-alpha4-SNAPSHOT
 [INFO] - net.java.dev.jna:jna:jar:4.2.2:compile
 [INFO] ------------------------------------------------------------------------
 [INFO] BUILD SUCCESS
 [INFO] ------------------------------------------------------------------------
 [INFO] Total time: 1.080 s
 [INFO] Finished at: 2020-03-20T14:16:26-06:00
 [INFO] ------------------------------------------------------------------------
 {code}

+1 from me (though I cannot merge).
  ;;;","08/Apr/20 11:09;mck;||branch||circleci||jenkins||
|[trunk_15647|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15647]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Ftrunk_15647]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/37/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/37]|;;;","14/Apr/20 18:20;mck;Committed as 52a55d821a2c4352dcbca013386e3cb45e376eed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add java.rmi.server.randomID and JAVA_HOME to system properties vtable (follow up on CASSANDRA-15616) ,CASSANDRA-15643,13291756,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,15/Mar/20 01:42,21/Dec/20 08:08,13/Jul/23 08:39,17/Mar/20 20:15,4.0,4.0-alpha4,,,,Feature/Virtual Tables,,,,0,,,,"Add {{java.rmi.server.randomID}} to the systems_table
System.getProperty(""java.home"") 
to be switched to
System.getenv(""JAVA_HOME"")
 
Oracle JVM might use the JRE which do not contain jmap. ",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15616,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Mar 17 20:15:22 UTC 2020,,,,,,,All,,,,,,"0|z0cjdc:",9223372036854775807,,,,mck,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/107dcc766fbb16037295995ef87053e53a675a79,,,,,,,,,"Nit, no need of CI or documentation for now",,,,,"16/Mar/20 13:58;e.dimitrova;[Pull request|https://github.com/apache/cassandra/pull/474]

[Branch|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15643]

[~mck], can you, please, review when you have some time?

Thanks;;;","17/Mar/20 20:15;mck;Committed as 107dcc766fbb16037295995ef87053e53a675a79;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jenkins build for jvm test should use testclasslist to support parameterized tests,CASSANDRA-15639,13291476,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,13/Mar/20 03:05,15/May/20 08:54,13/Jul/23 08:39,15/Mar/20 22:37,4.0,4.0-alpha4,,,,Build,CI,,,0,CI,pull-request-available,,"We switched Circle CI to use testclasslist in CASSANDRA-15508 this was to solve the following exception

{code}
ava.lang.Exception: No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@551aa95a
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
{code}

The core issue is that the test locating logic in org.apache.cassandra.distributed.test.TestLocator does not handle parameterized tests so fails to find any tests for those classes.

I think it is better to switch to testclasslist as it helps make way for running tests concurrently.",,dcapwell,mck,,,,,,,,,,"dcapwell commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 03:08;githubbot;600","michaelsembwever commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392488908
 
 

 ##########
 File path: jenkins-dsl/cassandra_job_dsl_seed.groovy
 ##########
 @@ -372,6 +377,24 @@ cassandraBranches.each {
         }
     }
 
+    /**
+     * Main branch test script target jobs
+     */
+    testScriptTargets.each {
+        def targetName = it
+
+         job(""${jobNamePrefix}-${targetName}"") {
 
 Review comment:
   can we, for now, remove the `testScriptTargets` array and the each-loop here? ie, just make this a one-off `job(…)` like ""*-artifacts"",  ""*-cqlsh-tests"", and the pipelines.
   (or did you have further jobs in mind to add to this array?)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 21:26;githubbot;600","dcapwell commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392496709
 
 

 ##########
 File path: jenkins-dsl/cassandra_job_dsl_seed.groovy
 ##########
 @@ -372,6 +377,24 @@ cassandraBranches.each {
         }
     }
 
+    /**
+     * Main branch test script target jobs
+     */
+    testScriptTargets.each {
+        def targetName = it
+
+         job(""${jobNamePrefix}-${targetName}"") {
 
 Review comment:
   done.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 21:40;githubbot;600","michaelsembwever commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392505748
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   changing the name is not so easy, because it also needs to be changed [here](https://github.com/apache/cassandra/blob/trunk/.jenkins/Jenkinsfile#L88)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 22:01;githubbot;600","michaelsembwever commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392505748
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   changing the name is not so easy, because it also needs to be changed [here](https://github.com/apache/cassandra/blob/trunk/.jenkins/Jenkinsfile#L88) (on all branches)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 22:02;githubbot;600","dcapwell commented on pull request #471: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra/pull/471
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 22:16;githubbot;600","dcapwell commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392510998
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   https://github.com/apache/cassandra/pull/471
   
   checked 2.2 and the cherry pick failed, so will add PR per branch which doesn't clean apply.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 22:19;githubbot;600","dcapwell commented on pull request #472: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra/pull/472
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 22:21;githubbot;600","dcapwell commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392512128
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   https://github.com/apache/cassandra/pull/472
   
   tested that 3.11's patch cherry picks into 3.0 and 2.2 cleanly; for some reason trunk -> 3.11 doesn't.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/20 22:23;githubbot;600","michaelsembwever commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392587322
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   Could we just keep the name suffix as `-test-jvm-dtest-forking` for now, and come back to changing it later on?
   
   (I suspect there will be other changes that involve updating both repositories, over multiple branches, later on. and would rather just avoid it for now :( apologises for the confusion)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/20 13:10;githubbot;600","michaelsembwever commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392587322
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   Could we just keep the name suffix as `-test-jvm-dtest-forking` for now, and come back to changing it later on?
   Adding a `todo` comment to do the rename would be useful.
   
   (I suspect there will be other changes that involve updating both repositories, over multiple branches, later on. and would rather just avoid it for now :( apologises for the confusion)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/20 13:11;githubbot;600","dcapwell commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#discussion_r392626954
 
 

 ##########
 File path: jenkins-dsl/cassandra_pipeline.groovy
 ##########
 @@ -40,7 +40,7 @@ pipeline {
             stage('JVM DTests') {
               steps {
                   warnError('Tests unstable') {
-                    build job: ""${env.JOB_NAME}-test-jvm-dtest-forking"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
+                    build job: ""${env.JOB_NAME}-jvm-dtest"", parameters: [string(name: 'REPO', value: params.REPO), string(name: 'BRANCH', value: params.BRANCH)]
 
 Review comment:
   sure, will do.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/20 23:16;githubbot;600","dcapwell commented on pull request #471: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra/pull/471
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/20 23:16;githubbot;600","dcapwell commented on pull request #472: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra/pull/472
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Mar/20 23:17;githubbot;600","michaelsembwever commented on issue #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14#issuecomment-599274188
 
 
   Committed as https://github.com/apache/cassandra-builds/commit/9781ca1b4e7489afa09a33b8943d599b47cfe233 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Mar/20 22:35;githubbot;600","michaelsembwever commented on pull request #14: CASSANDRA-15639 Jenkins build for jvm test should use testclasslist to support parameterized tests
URL: https://github.com/apache/cassandra-builds/pull/14
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Mar/20 22:35;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,9600,,,0,9600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15651,,,,,,,CASSANDRA-15508,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Mar 16 17:31:04 UTC 2020,,,,,,,All,,,,,,"0|z0chn4:",9223372036854775807,,,,mck,,,,Normal,,2.2.16,,,https://github.com/apache/cassandra-builds/commit/9781ca1b4e7489afa09a33b8943d599b47cfe233,,,,,,,,,tested bash command locally against trunk.  did not test Jenkins.,,,,,"13/Mar/20 19:54;mck;This needs a jenkins instance spun up and tested against… Will look into…;;;","13/Mar/20 22:24;dcapwell;[~mck] sent 2 PRs for in-tree jenkinsfile: trunk and 3.11.  I cherry picked 3.11 to 3.0 and 2.2 and see it cleanly applies (trunk to 3.11 does not so send PR).;;;","15/Mar/20 22:30;mck;Tested on separate jenkins install. Looks good.

The job name was left unchanged for now.
We can correct the name from -test-jvm-dtest-forking to -test-jvm-dtest at a later time (when changes across both repositories are required).;;;","15/Mar/20 22:37;mck;Committed as 9781ca1b4e7489afa09a33b8943d599b47cfe233

(Apologises about clobbering authorship on the commit when cherry-picking it over :(
;;;","16/Mar/20 17:31;dcapwell;teehee its all good =);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CqlInputFormat regression going from 2.1 to 3.x caused by semantic difference between thrift and the new system.size_estimates table when dealing with multiple dc deployments,CASSANDRA-15637,13291162,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,11/Mar/20 20:06,15/May/20 08:55,13/Jul/23 08:39,23/Apr/20 13:49,4.0,4.0-beta1,,,,Legacy/Tools,,,,0,pull-request-available,,,"In 3.0 CqlInputFormat switched away from thrift in favor of a new system.size_estimates table, but the semantics changed when dealing with multiple DCs or when Cassandra is not collocated with Hadoop.

The core issues are:

* system.size_estimates uses the primary range, in a multi-dc setup this could lead to uneven ranges
example:

{code}
DC1: [0, 10, 20, 30]
DC2: [1, 11, 21, 31]
DC3: [2, 12, 22, 32]
{code}

Using NetworkTopologyStrategy the primary ranges are: [0, 1), [1, 2), [2, 10), [10, 11), [11, 12), [12, 20), [20, 21), [21, 22), [22, 30), [30, 31), [31, 32), [32, 0).
Given this the only ranges that are more than one token are: [2, 10), [12, 20), [22, 30).

* system.size_estimates is not replicated so need to hit every node in the cluster to get estimates, if nodes are down in the DC with non-size-1 ranges there is no way to get a estimate.
* CqlInputFormat used to call describe_local_ring so all interactions were with a single DC, the java driver doesn't filter the DC so looks to allow cross DC traffic and includes nodes from other DCs in the replica set; in the example above, the amount of splits went from 4 to 12.
* CqlInputFormat used to call describe_splits_ex to dynamically calculate the estimates, this was on the ""local primary range"" and was able to hit replicas to create estimates if the primary was down. With system.size_estimates we no longer have backup and no longer expose the ""local primary range"" in multi-dc.
* CqlInputFormat had a config cassandra.input.keyRange which let you define your own range.  If the range doesn't perfectly match the local range then the intersectWith calls will produce ranges with no estimates.  Example: [0, 10, 20], cassandra.input.keyRange=5,15.  This won't find any estimates so will produce 2 splits with 128 estimate (default when not found).
* CqlInputFormat special cases Cassandra being collocated with Hadoop and assumes this when querying system.size_estimates as it doesn't filter to the specific host, this means that non-collocated deployments randomly select the nodes and create splits with ranges the hosts do not have locally.

The problems are deterministic to replicate, the following test will show it

1) deploy a 3 DC cluster with 3 nodes each
2) create DC2 tokens are +1 of DC1 and DC3 are +1 of DC2
3) CREATE KEYSPACE simpleuniform0 WITH replication = {‘class’: ‘NetworkTopologyStrategy’, ‘DC1’: 3, ‘DC2’: 3, ‘DC3’: 3};
4) CREATE TABLE simpletable0 (pk bigint, ck bigint, value blob, PRIMARY KEY (pk, ck))
5) insert 500k partitions uniformly: [0, 500,000)
6) wait until estimates catch up to writes
7) for all nodes, SELECT * FROM system.size_estimates

You will get the following

{code}
 keyspace_name  | table_name   | range_start          | range_end            | mean_partition_size | partitions_count
----------------+--------------+----------------------+----------------------+---------------------+------------------
 simpleuniform0 | simpletable0 | -9223372036854775808 | -6148914691236517206 |                  87 |           122240
 simpleuniform0 | simpletable0 |  6148914691236517207 | -9223372036854775808 |                  87 |           121472

(2 rows)

 keyspace_name  | table_name   | range_start | range_end           | mean_partition_size | partitions_count
----------------+--------------+-------------+---------------------+---------------------+------------------
 simpleuniform0 | simpletable0 |           2 | 6148914691236517205 |                  87 |           243072

(1 rows)

 keyspace_name  | table_name   | range_start          | range_end            | mean_partition_size | partitions_count
----------------+--------------+----------------------+----------------------+---------------------+------------------
 simpleuniform0 | simpletable0 | -6148914691236517206 | -6148914691236517205 |                  87 |                1

(1 rows)

 keyspace_name  | table_name   | range_start | range_end | mean_partition_size | partitions_count
----------------+--------------+-------------+-----------+---------------------+------------------
 simpleuniform0 | simpletable0 |           0 |         1 |                  87 |                1

(1 rows)

 keyspace_name  | table_name   | range_start         | range_end           | mean_partition_size | partitions_count
----------------+--------------+---------------------+---------------------+---------------------+------------------
 simpleuniform0 | simpletable0 | 6148914691236517205 | 6148914691236517206 |                  87 |                1

(1 rows)

 keyspace_name  | table_name   | range_start          | range_end            | mean_partition_size | partitions_count
----------------+--------------+----------------------+----------------------+---------------------+------------------
 simpleuniform0 | simpletable0 | -6148914691236517205 | -6148914691236517204 |                  87 |                1

(1 rows)

 keyspace_name  | table_name   | range_start | range_end | mean_partition_size | partitions_count
----------------+--------------+-------------+-----------+---------------------+------------------
 simpleuniform0 | simpletable0 |           1 |         2 |                  87 |                1

(1 rows)

 keyspace_name  | table_name   | range_start         | range_end           | mean_partition_size | partitions_count
----------------+--------------+---------------------+---------------------+---------------------+------------------
 simpleuniform0 | simpletable0 | 6148914691236517206 | 6148914691236517207 |                  87 |                1

(1 rows)
{code}

8) create a MR job against simpleuniform0. simpletable0, you will get 10 splits where as 2.1 was 4",,aleksey,dcapwell,djoshi,jasonstack,,,,,,,,"dcapwell commented on pull request #469: CASSANDRA-15637 CqlInputFormat regression going from 2.1 to 3.x caused by semantic difference between thrift and the new system.size_estimates table when dealing with multiple dc deployments
URL: https://github.com/apache/cassandra/pull/469
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Mar/20 17:30;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Challenging,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Apr 24 00:09:02 UTC 2020,,,,,,,All,,,,,,"0|z0cfpc:",9223372036854775807,,,,aleksey,brandon.williams,,,Critical,,3.0.0,,,"[a8327eb8868c8d9d03c253a88509ce64d2ac227b|https://github.com/apache/cassandra/commit/a8327eb8868c8d9d03c253a88509ce64d2ac227b]",,,,,,,,,tested cluster using MapReduce.  The test case targeted is in the description,,,,,"11/Mar/20 20:09;dcapwell;Marked this as ""challenging"" as getting this to work for people upgrading from 2.1 and those already integrated with 3.0 (presto came up) is the issue.;;;","11/Mar/20 20:11;dcapwell;I have a patch which switches the estimate to the ""local primary range"" and updated the client to work with this.  The patch passes my test above but there is concern that this may regress others, so not sure if the patch is appropriate or not.;;;","12/Mar/20 15:15;dcapwell;Tried a simple prototype to get the below expression working

{code}
SELECT size_estimate(""keyspace"", ""table"")
{code}

seems the frontend is too limited at the moment.  I got it working by faking a table to read from but to properly implement that would be very deep change to the frontend.

Given that I think local range is the only thing that makes sense.  We would have to drop user defined ranges as that doesn't work with pre-computed estimates (ignoring the fact you could get estimate for local primary range then trim off the estimate for the range removed).;;;","12/Mar/20 17:36;dcapwell;submitted a patch to update size_estimates to be local range and updated CqlInputFormat to expect this.

Open issues: job range (cassandra.input.keyRange) doesn't make a lot of sense in 3.0.  If the range alines with the ring then it will do what you expect, but if its offset at all then it becomes inaccurate and no longer able to split (no estimate);;;","12/Mar/20 21:32;dcapwell;One feedback I have gotten is that I could avoid breaking the size_estimates table by adding a new one

{code}
CREATE TABLE system.table_estimates (
    keyspace_name text,
    table_name text,
    range_type text,
    range_start text,
    range_end text,
    mean_partition_size bigint,
    partitions_count bigint,
    PRIMARY KEY (keyspace_name, table_name, range_type, range_start, range_end)
) WITH CLUSTERING ORDER BY (table_name ASC, range_type ASC, range_start ASC, range_end ASC)
    AND gc_grace_seconds = 0;
{code}

In this new table I added a new column to define the type of range, this would allow us to add to the table as we need too.  

Thoughts?;;;","12/Mar/20 22:07;dcapwell;marked this as 4.0-alpha but since this is a regression in 3.0 we may want to back port.;;;","13/Mar/20 16:00;brandon.williams;bq. One feedback I have gotten is that I could avoid breaking the size_estimates table by adding a new one

This sounds reasonable and is probably the safest thing to do for compatibility.;;;","13/Mar/20 19:40;dcapwell;tested on 3.0 with the table above, only publishing local primary for now (range_type is meant to allow other JIRAs to add other ranges over time...); tests pass (#splits, estimate within expected range, mapper sees all record).

Ill update this patch to reflect this later today hopefully.;;;","17/Mar/20 18:19;dcapwell;Sorry for the delay.  I pushed a change to have a new table_estimates table that stores local_primary and primary ranges.  I updated the client to use this and fall back to size_estimates if not found.;;;","25/Mar/20 17:51;brandon.williams;The new table is making the cql3 PagingTest and the metrics BatchMetricsTest fail.;;;","25/Mar/20 17:54;dcapwell;Can I get a review?  [~brandon.williams] and [~aleksey] would be great to get your feedback on this.

[~marcuse] and [~samt] you are also familiar with the patch.;;;","25/Mar/20 18:38;dcapwell;build is green now, latest java 8 run: https://circleci.com/workflow-run/fc2866cc-9bcd-4f5b-a32b-cf3706b37858;;;","30/Mar/20 20:34;dcapwell;build working;;;","30/Mar/20 20:36;dcapwell;Found another bug.  In 2.1 the address list was just a seed but in 3.0 we limit what nodes the client can talk to to only the addresses in the user defined list.  This means the logic only works IFF 100% of the nodes are in the list, but in 2.1 you only needed a subset.;;;","31/Mar/20 17:56;dcapwell;updated to fix the above.;;;","08/Apr/20 22:45;dcapwell;Anything I can do to help the review?;;;","22/Apr/20 15:39;aleksey;LGTM, +1;;;","23/Apr/20 13:49;aleksey;Cheers, committed as [a8327eb8868c8d9d03c253a88509ce64d2ac227b|https://github.com/apache/cassandra/commit/a8327eb8868c8d9d03c253a88509ce64d2ac227b] to trunk.;;;","23/Apr/20 22:47;dcapwell;Submitted a follow up patch, while porting this from 3.0 a line was missing which appended the splits to the list.  This was found after running the tests against trunk, the patch passes the tests.;;;","24/Apr/20 00:09;djoshi;Thanks, [~dcapwell] committed the fix [here|https://github.com/apache/cassandra/commit/57bb806d7941f8ae44611618bb6c16e940c3279c].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flakey testSerializeError - org.apache.cassandra.net.ConnectionTest,CASSANDRA-15630,13290860,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,10/Mar/20 16:40,21/Dec/20 08:08,13/Jul/23 08:39,31/Mar/20 10:26,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"The test fails sometimes with the following error message and trace. 
{code:java}
processed count values don't match expected:<90> but was:<89>

junit.framework.AssertionFailedError: processed count values don't match expected:<90> but was:<89>
at org.apache.cassandra.net.ConnectionUtils$InboundCountChecker.doCheck(ConnectionUtils.java:217)
at org.apache.cassandra.net.ConnectionUtils$InboundCountChecker.check(ConnectionUtils.java:200)
at org.apache.cassandra.net.ConnectionTest.lambda$testSerializeError$24(ConnectionTest.java:494)
at org.apache.cassandra.net.ConnectionTest.lambda$doTest$8(ConnectionTest.java:240)
at org.apache.cassandra.net.ConnectionTest.doTestManual(ConnectionTest.java:260)
at org.apache.cassandra.net.ConnectionTest.doTest(ConnectionTest.java:238)
at org.apache.cassandra.net.ConnectionTest.test(ConnectionTest.java:227)
at org.apache.cassandra.net.ConnectionTest.testSerializeError(ConnectionTest.java:435){code}",,blerer,dcapwell,e.dimitrova,jasonstack,yifanc,,,,,,,"dcapwell commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393923257
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -240,6 +247,27 @@ private void doCheck(FailCheck testAndFailCheck)
         }
     }
 
+    private static void longCheck(Runnable assertion, long timeout, TimeUnit timeUnit)
+    {
+        long start = System.currentTimeMillis();
 
 Review comment:
   `System.currentTimeMillis` is free to go backwards (its not monotonic, this is system time) so its normally best to use `.nanoTime()` (CPU time).
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 19:39;githubbot;600","dcapwell commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393923231
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -240,6 +247,27 @@ private void doCheck(FailCheck testAndFailCheck)
         }
     }
 
+    private static void longCheck(Runnable assertion, long timeout, TimeUnit timeUnit)
+    {
+        long start = System.currentTimeMillis();
+        for (;;)
+        {
+            try
+            {
+                assertion.run();
+                return;
+            }
+            catch (AssertionError e)
+            {
+                long elapsedMs = System.currentTimeMillis() - start;
+                if (elapsedMs > timeUnit.toMillis(timeout))
+                    throw e;
+                else
+                    Uninterruptibles.sleepUninterruptibly(5, TimeUnit.MILLISECONDS);
 
 Review comment:
   may want to take a look at the `org.apache.cassandra.utils.Retry` class.  I created it recently since I didn't find common utils for retries.
   
   ```
   long maxDurationNanos = timeUnit.toMillis(timeout);
   long startNanos = System.nanoTime();
   Retry.retryWithBackoffBlocking(Integer.MAX_VALUE, () -> assertion.run(), (cause) -> {
     if (!(cause instanceOf AssertionError)
       return false;
     return (System.nanoTime() - startNanos) <= maxDurationNanos;
   });
   ```
   
   the main differences are:
   1) retry doesn't block thread, only result (if you ask for blocking)
   2) default to exponential backoff
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 19:39;githubbot;600","dcapwell commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393925866
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionTest.java
 ##########
 @@ -487,13 +487,13 @@ public long serializedSize(Object o, int version)
                            .overload (  0,  0)
                            .expired  (  0,  0)
                            .error    ( 10, 10 * message.serializedSize(version))
-                           .check();
+                           .longCheck(  5, SECONDS);
 
 Review comment:
   would also be good to document why not check; you say it in the JIRA but a code comment is easier to future readers.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 19:45;githubbot;600","dcapwell commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393926560
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -96,6 +93,11 @@ public OutboundCountChecker error(long count, long bytes)
             return this;
         }
 
+        public void longCheck(long timeout, TimeUnit timeUnit)
 
 Review comment:
   why not just `check`?  you don't have a signature conflict so could have the same API but with the duration.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 19:45;githubbot;600","yifan-c commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393947441
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -240,6 +247,27 @@ private void doCheck(FailCheck testAndFailCheck)
         }
     }
 
+    private static void longCheck(Runnable assertion, long timeout, TimeUnit timeUnit)
+    {
+        long start = System.currentTimeMillis();
+        for (;;)
+        {
+            try
+            {
+                assertion.run();
+                return;
+            }
+            catch (AssertionError e)
+            {
+                long elapsedMs = System.currentTimeMillis() - start;
+                if (elapsedMs > timeUnit.toMillis(timeout))
+                    throw e;
+                else
+                    Uninterruptibles.sleepUninterruptibly(5, TimeUnit.MILLISECONDS);
 
 Review comment:
   Thanks for the suggestion. I took a close look at the `Retry` utility. 
   I think 1) scheduling the check in the other thread does not benefit in this case. Because it needs to block for the check result anyway. 
   2) the check operation is not resources intensive (read multiple values and compare). Exponential backoff does not help. In fact, the test can check frequently in order to exit quick. 
   
   There is no api in `Retry` allows adding a different backup off time yet. 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 20:24;githubbot;600","yifan-c commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393948198
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -96,6 +93,11 @@ public OutboundCountChecker error(long count, long bytes)
             return this;
         }
 
+        public void longCheck(long timeout, TimeUnit timeUnit)
 
 Review comment:
   Picking the name mainly for clarity that the check is a long operation that can run for the duration specified. 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 20:25;githubbot;600","dcapwell commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r393968395
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -240,6 +247,31 @@ private void doCheck(FailCheck testAndFailCheck)
         }
     }
 
+    /**
+     * Perform the {@param assertion} within the specified duration repeatly until a success.
+     * Otherwise, it times out and re-throws the {@link AssertionError} from the {@param assertion}.
+     */
+    private static void longCheck(Runnable assertion, long timeout, TimeUnit timeUnit)
+    {
+        long startNano = System.nanoTime();
+        for (;;)
+        {
+            try
+            {
+                assertion.run();
+                return;
+            }
+            catch (AssertionError e)
+            {
+                long elapsedNano = System.nanoTime() - startNano;
+                if (elapsedNano > timeUnit.toNanos(timeout))
 
 Review comment:
   sorry I didn't comment sooner, I left it in my example; it would be best to compute `timeUnit.toNanos(timeout)` once outside the loop
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 21:03;githubbot;600","blerer commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r398494290
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -197,45 +197,42 @@ public InboundCountChecker error(long count, long bytes)
 
         public void check()
         {
-            doCheck(Assert::assertEquals);
+            doCheck((message, expected, actual) -> spinAssertEquals(message, expected, actual, 5, TimeUnit.SECONDS));
         }
 
         public void check(FailCheck failCheck)
         {
-            doCheck((message, expect, actual) -> { if (expect != actual) failCheck.accept(message, expect, actual); });
+            doCheck((message, expect, actual) -> { if (!Objects.equals(expect, actual.get())) failCheck.accept(message, expect, actual); });
         }
 
         private void doCheck(FailCheck testAndFailCheck)
         {
             if (checkReceived)
             {
-                testAndFailCheck.accept(""received count values don't match"", received, connection.receivedCount());
-                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection.receivedBytes());
+                testAndFailCheck.accept(""received count values don't match"", received, connection::receivedCount);
+                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection::receivedBytes);
             }
             if (checkProcessed)
             {
-                testAndFailCheck.accept(""processed count values don't match"", processed, connection.processedCount());
-                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection.processedBytes());
+                testAndFailCheck.accept(""processed count values don't match"", processed, connection::processedCount);
+                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection::processedBytes);
             }
             if (checkExpired)
             {
-                testAndFailCheck.accept(""expired count values don't match"", expired, connection.expiredCount());
-                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection.expiredBytes());
+                testAndFailCheck.accept(""expired count values don't match"", expired, connection::expiredCount);
+                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection::expiredBytes);
             }
             if (checkError)
             {
-                testAndFailCheck.accept(""error count values don't match"", error, connection.errorCount());
-                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection.errorBytes());
+                testAndFailCheck.accept(""error count values don't match"", error, connection::errorCount);
+                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection::errorBytes);
             }
             if (checkScheduled)
             {
                 // scheduled cannot relied upon to not race with completion of the task,
-                // so if it is currently above the value we expect, sleep for a bit
-                if (scheduled < connection.scheduledCount())
-                    for (int i = 0; i < 10 && scheduled < connection.scheduledCount() ; ++i)
-                        Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.MILLISECONDS);
-                testAndFailCheck.accept(""scheduled count values don't match"", scheduled, connection.scheduledCount());
-                testAndFailCheck.accept(""scheduled bytes values don't match"", scheduledBytes, connection.scheduledBytes());
+                // so if it is currently above the value we expect, use the spinAssert explicitly.
+                spinAssertEquals(""scheduled count values don't match"", scheduled, connection::scheduledCount, 5, TimeUnit.SECONDS);
+                spinAssertEquals(""scheduled bytes values don't match"", scheduledBytes, connection::scheduledBytes, 5, TimeUnit.SECONDS);
 
 Review comment:
   NIT: I would have used `testAndFailCheck` for ensuring that the behavior is the one expected by the `FailCheck` argument.
   In practice, unless I missed something, this code is only called from `ConnectionTest` so there will be no change of behavior.
   
   I can change that on commit if you want to.  
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 11:18;githubbot;600","yifan-c commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r398665708
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -197,45 +197,42 @@ public InboundCountChecker error(long count, long bytes)
 
         public void check()
         {
-            doCheck(Assert::assertEquals);
+            doCheck((message, expected, actual) -> spinAssertEquals(message, expected, actual, 5, TimeUnit.SECONDS));
         }
 
         public void check(FailCheck failCheck)
         {
-            doCheck((message, expect, actual) -> { if (expect != actual) failCheck.accept(message, expect, actual); });
+            doCheck((message, expect, actual) -> { if (!Objects.equals(expect, actual.get())) failCheck.accept(message, expect, actual); });
         }
 
         private void doCheck(FailCheck testAndFailCheck)
         {
             if (checkReceived)
             {
-                testAndFailCheck.accept(""received count values don't match"", received, connection.receivedCount());
-                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection.receivedBytes());
+                testAndFailCheck.accept(""received count values don't match"", received, connection::receivedCount);
+                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection::receivedBytes);
             }
             if (checkProcessed)
             {
-                testAndFailCheck.accept(""processed count values don't match"", processed, connection.processedCount());
-                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection.processedBytes());
+                testAndFailCheck.accept(""processed count values don't match"", processed, connection::processedCount);
+                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection::processedBytes);
             }
             if (checkExpired)
             {
-                testAndFailCheck.accept(""expired count values don't match"", expired, connection.expiredCount());
-                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection.expiredBytes());
+                testAndFailCheck.accept(""expired count values don't match"", expired, connection::expiredCount);
+                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection::expiredBytes);
             }
             if (checkError)
             {
-                testAndFailCheck.accept(""error count values don't match"", error, connection.errorCount());
-                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection.errorBytes());
+                testAndFailCheck.accept(""error count values don't match"", error, connection::errorCount);
+                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection::errorBytes);
             }
             if (checkScheduled)
             {
                 // scheduled cannot relied upon to not race with completion of the task,
-                // so if it is currently above the value we expect, sleep for a bit
-                if (scheduled < connection.scheduledCount())
-                    for (int i = 0; i < 10 && scheduled < connection.scheduledCount() ; ++i)
-                        Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.MILLISECONDS);
-                testAndFailCheck.accept(""scheduled count values don't match"", scheduled, connection.scheduledCount());
-                testAndFailCheck.accept(""scheduled bytes values don't match"", scheduledBytes, connection.scheduledBytes());
+                // so if it is currently above the value we expect, use the spinAssert explicitly.
+                spinAssertEquals(""scheduled count values don't match"", scheduled, connection::scheduledCount, 5, TimeUnit.SECONDS);
+                spinAssertEquals(""scheduled bytes values don't match"", scheduledBytes, connection::scheduledBytes, 5, TimeUnit.SECONDS);
 
 Review comment:
   It is probably better to use `spinAssertEquals` explicitly. If you strongly prefer to use `testAndFailCheck`, I am cool with it.
   
   The spin equality assertion was used because 
   - the original code that Benedict wrote did it explicitly using a for loop. The assertion is likely to require multiple retries. 
   - the parameter type `FailCheck` for `doCheck()` suggests it can accept any `FailCheck` impl. We cannot assume the input check is always spin assertion based (, although it is only used in `ConnectionTest` as of now). If a custom non-spin assertion is passed, the check can fail.
   - the error message, i.e. ""scheduled count values don't match"", suggests the purpose is to assert values are equal. So `spinAssertEquals` does the job.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 15:30;githubbot;600","blerer commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r398683852
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -197,45 +197,42 @@ public InboundCountChecker error(long count, long bytes)
 
         public void check()
         {
-            doCheck(Assert::assertEquals);
+            doCheck((message, expected, actual) -> spinAssertEquals(message, expected, actual, 5, TimeUnit.SECONDS));
         }
 
         public void check(FailCheck failCheck)
         {
-            doCheck((message, expect, actual) -> { if (expect != actual) failCheck.accept(message, expect, actual); });
+            doCheck((message, expect, actual) -> { if (!Objects.equals(expect, actual.get())) failCheck.accept(message, expect, actual); });
         }
 
         private void doCheck(FailCheck testAndFailCheck)
         {
             if (checkReceived)
             {
-                testAndFailCheck.accept(""received count values don't match"", received, connection.receivedCount());
-                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection.receivedBytes());
+                testAndFailCheck.accept(""received count values don't match"", received, connection::receivedCount);
+                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection::receivedBytes);
             }
             if (checkProcessed)
             {
-                testAndFailCheck.accept(""processed count values don't match"", processed, connection.processedCount());
-                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection.processedBytes());
+                testAndFailCheck.accept(""processed count values don't match"", processed, connection::processedCount);
+                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection::processedBytes);
             }
             if (checkExpired)
             {
-                testAndFailCheck.accept(""expired count values don't match"", expired, connection.expiredCount());
-                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection.expiredBytes());
+                testAndFailCheck.accept(""expired count values don't match"", expired, connection::expiredCount);
+                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection::expiredBytes);
             }
             if (checkError)
             {
-                testAndFailCheck.accept(""error count values don't match"", error, connection.errorCount());
-                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection.errorBytes());
+                testAndFailCheck.accept(""error count values don't match"", error, connection::errorCount);
+                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection::errorBytes);
             }
             if (checkScheduled)
             {
                 // scheduled cannot relied upon to not race with completion of the task,
-                // so if it is currently above the value we expect, sleep for a bit
-                if (scheduled < connection.scheduledCount())
-                    for (int i = 0; i < 10 && scheduled < connection.scheduledCount() ; ++i)
-                        Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.MILLISECONDS);
-                testAndFailCheck.accept(""scheduled count values don't match"", scheduled, connection.scheduledCount());
-                testAndFailCheck.accept(""scheduled bytes values don't match"", scheduledBytes, connection.scheduledBytes());
+                // so if it is currently above the value we expect, use the spinAssert explicitly.
+                spinAssertEquals(""scheduled count values don't match"", scheduled, connection::scheduledCount, 5, TimeUnit.SECONDS);
+                spinAssertEquals(""scheduled bytes values don't match"", scheduledBytes, connection::scheduledBytes, 5, TimeUnit.SECONDS);
 
 Review comment:
   If all those failing tests have proven us somthing is that the spin would be needed everywhere. The `doCheck` method with the FailCheck parameter is used in the burn tests to allow the implementor to plug his own notification mechanism for failure. That would not work with the current implementation that use the spin assert.
   My approach would be to let the user of that method handle the spinning if needed but I agree it is not a perfect solution.
   Otherwise we need to implements a spining that will work for `doCheck()`and `doCheck(FailCheck)`.
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 15:53;githubbot;600","blerer commented on pull request #470: CASSANDRA-15630 fix testSerializeError
URL: https://github.com/apache/cassandra/pull/470#discussion_r398683852
 
 

 ##########
 File path: test/unit/org/apache/cassandra/net/ConnectionUtils.java
 ##########
 @@ -197,45 +197,42 @@ public InboundCountChecker error(long count, long bytes)
 
         public void check()
         {
-            doCheck(Assert::assertEquals);
+            doCheck((message, expected, actual) -> spinAssertEquals(message, expected, actual, 5, TimeUnit.SECONDS));
         }
 
         public void check(FailCheck failCheck)
         {
-            doCheck((message, expect, actual) -> { if (expect != actual) failCheck.accept(message, expect, actual); });
+            doCheck((message, expect, actual) -> { if (!Objects.equals(expect, actual.get())) failCheck.accept(message, expect, actual); });
         }
 
         private void doCheck(FailCheck testAndFailCheck)
         {
             if (checkReceived)
             {
-                testAndFailCheck.accept(""received count values don't match"", received, connection.receivedCount());
-                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection.receivedBytes());
+                testAndFailCheck.accept(""received count values don't match"", received, connection::receivedCount);
+                testAndFailCheck.accept(""received bytes values don't match"", receivedBytes, connection::receivedBytes);
             }
             if (checkProcessed)
             {
-                testAndFailCheck.accept(""processed count values don't match"", processed, connection.processedCount());
-                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection.processedBytes());
+                testAndFailCheck.accept(""processed count values don't match"", processed, connection::processedCount);
+                testAndFailCheck.accept(""processed bytes values don't match"", processedBytes, connection::processedBytes);
             }
             if (checkExpired)
             {
-                testAndFailCheck.accept(""expired count values don't match"", expired, connection.expiredCount());
-                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection.expiredBytes());
+                testAndFailCheck.accept(""expired count values don't match"", expired, connection::expiredCount);
+                testAndFailCheck.accept(""expired bytes values don't match"", expiredBytes, connection::expiredBytes);
             }
             if (checkError)
             {
-                testAndFailCheck.accept(""error count values don't match"", error, connection.errorCount());
-                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection.errorBytes());
+                testAndFailCheck.accept(""error count values don't match"", error, connection::errorCount);
+                testAndFailCheck.accept(""error bytes values don't match"", errorBytes, connection::errorBytes);
             }
             if (checkScheduled)
             {
                 // scheduled cannot relied upon to not race with completion of the task,
-                // so if it is currently above the value we expect, sleep for a bit
-                if (scheduled < connection.scheduledCount())
-                    for (int i = 0; i < 10 && scheduled < connection.scheduledCount() ; ++i)
-                        Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.MILLISECONDS);
-                testAndFailCheck.accept(""scheduled count values don't match"", scheduled, connection.scheduledCount());
-                testAndFailCheck.accept(""scheduled bytes values don't match"", scheduledBytes, connection.scheduledBytes());
+                // so if it is currently above the value we expect, use the spinAssert explicitly.
+                spinAssertEquals(""scheduled count values don't match"", scheduled, connection::scheduledCount, 5, TimeUnit.SECONDS);
+                spinAssertEquals(""scheduled bytes values don't match"", scheduledBytes, connection::scheduledBytes, 5, TimeUnit.SECONDS);
 
 Review comment:
   If all those failing tests have proven us somthing is that the spin would be needed everywhere. The `doCheck` method with the FailCheck parameter is used in the burn tests to allow the implementor to plug his own notification mechanism for failure. That would not work with the current implementation that use the spin assert.
   My approach would be to let the user of that method handle the spinning if needed but I agree it is not a perfect solution.
   Otherwise we need to implements a spining that will work for `doCheck()`and `doCheck(FailCheck)`.
   
   What do you think?
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 17:04;githubbot;600","yifan-c closed pull request #470:
URL: https://github.com/apache/cassandra/pull/470


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,6000,,,0,6000,,,,,,,,,,,,,,,CASSANDRA-15628,CASSANDRA-15629,,,,,,,,,,,,,,,,,,,,CASSANDRA-15649,,,,,,,,,,,,,"26/Mar/20 15:40;yifanc;CASS-15630-TEST-DOCKER.zip;https://issues.apache.org/jira/secure/attachment/12997912/CASS-15630-TEST-DOCKER.zip",,,,,,,,,,,,,,1.0,yifanc,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Mar 31 10:26:19 UTC 2020,,,,,,,All,,,,,,"0|z0cdu8:",9223372036854775807,,,,blerer,dcapwell,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/e08053b77cac4ec91fd398d7bad65bba1394f45f,,,,,,,,,unit test,,,,,"13/Mar/20 18:34;yifanc;After going through the source, the test failure looks only caused by improper barrier set in the test itself. Not an implementation bug. 

The countdown latch gets released in the verb handler. And the processed count increment happens _after_ it. Therefore, there is a chance that the test is signaled to proceed to assertions, meanwhile the processed count has not been updated yet. 

Since there is no easy way to register a callback after the processed count increment, I am proposing a patch that adds a {{longCheck()}} method, which repeatedly run checks within the specified timeout until passing. 

I have run the test locally in a docker container and the test failure cannot be reproduced.

PR: [https://github.com/apache/cassandra/pull/470]

I think the failures reported in the other 2 JIRAs, CASSANDRA-15628 and CASSANDRA-15629, are caused by the same reason. Changing the {{check()}} to {{longCheck()}}in those 2 tests should fix.;;;","17/Mar/20 19:47;dcapwell;Code mostly LGTM; left my comments in GitHub.

Most my comments are nits so you can choose to ignore if you want, the main feedback is to move away from system time to cpu time, details in GitHub.;;;","17/Mar/20 20:48;yifanc;Thanks [~dcapwell].

I have updated the PR to address most of your comments.;;;","17/Mar/20 21:04;dcapwell;only minor/nit comments remain; main one is resolved.

+1;;;","19/Mar/20 12:32;jasonstack;linked both CASSANDRA-15628 and CASSANDRA-15629..;;;","24/Mar/20 16:57;e.dimitrova;[~dcapwell] [~jasonstack] [~yifanc] are we ready to ask [~brandon.williams] or [~mck] maybe to commit?
Is there anything outstanding to be done?;;;","24/Mar/20 18:00;dcapwell;I believe we do require a committer to review (general statement); so I think we need a review from one?;;;","25/Mar/20 17:18;blerer;Based on what I can see, we have some race conditions on several tests and the check for {{scheduledCount}} in {{ConnectionUtils}} is also expecting some race conditions. I strongly suspect that we might not have not found yet all the race conditions.
Rather than having a {{checkLong}} method for tests that we found out are racy, I would prefer to assume that all the tests could be racy and fix the {{check}} method.

We already have an utility method to handle racy operation: {{Util.spinAssertEquals}}. Rather than developing a new solution I would add a new version that accept a message in its signature and use it in {{ConnectionUtils}} in place of {{Assert.assertEquals}}. There are a few refactoring to do along the way but I believe that it should be doable.;;;","25/Mar/20 18:59;yifanc;Hi [~blerer], I was not aware of the {{Util.spinAssertEquals}}. Thanks for pointing it out. I will use it instead. 


bq. I strongly suspect that we might not have not found yet all the race conditions.
Yup. This test is not the only one. Multiple tests in {{ConnectionTest}} have failed and JIRAs were created for each of them (i.e. CASSANDRA-15628 and CASSANDRA-15629). Later, I found out that they were likely failed for the same cause. Since multiple JIRAs were created already, I only applied the fix for this one. ;;;","25/Mar/20 22:26;yifanc;[~blerer], the PR was just updated. The {{longCheck()}} got removed and the {{check()}} now invokes the spin assertion. 
In consequence, it should fix the related PRs (i.e. CASSANDRA-15628 and CASSANDRA-15629) too. ;;;","26/Mar/20 13:40;blerer;[~yifanc] Nice work :-). Thanks a lot. I just added a minor comment that I can do on commit if you want to.

Do you have a link toward the CI run?

{quote}Since multiple JIRAs were created already, I only applied the fix for this one. {quote}

In such a case, you can simply clause them and mark them as duplicates. :-);;;","26/Mar/20 15:44;yifanc;CI passed. Link: https://app.circleci.com/pipelines/github/yifan-c/cassandra/59/workflows/9b1dee87-f930-4729-a577-71da5fc9660c/jobs/282

However, I do not think it is very representative. (There are other flaky tests in the code base, a green run is more because of luck).

In addition, I made a docker container that caps CPUs to 2 to run the {{ConnectionTest}} repeatedly until failure.  [^CASS-15630-TEST-DOCKER.zip] 
It applies another flaky test fixing patch that has not been merged yet before running the repeating test. On my local, the test passes for dozen times. 

Regarding the comment, it is probably better to use {{spinAssertEquals}} explicitly. If you strongly prefer to use testAndFailCheck, I am cool with it.

Thanks all for reviewing!;;;","30/Mar/20 16:16;yifanc;[~blerer], would you like to take another look and merge it if all good? ;;;","31/Mar/20 10:26;blerer;Committed into trunk at e08053b77cac4ec91fd398d7bad65bba1394f45f;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When running CQLSH with STDIN input, exit with error status code if script fails",CASSANDRA-15623,13289979,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,plastikat,plastikat,plastikat,06/Mar/20 07:46,16/Mar/22 13:13,13/Jul/23 08:39,18/Apr/20 05:30,3.0.21,3.11.7,4.0,4.0-beta1,,Legacy/Tools,,,,0,pull-request-available,,,"Assuming CASSANDRA-6344 is in place for years and considering that scripts submitted with the `-e` option behave in a similar fashion, it is very surprising that scripts submitted to STDIN (i.e. piped in) always exit with a zero code, regardless of errors. I believe this should be fixed.",,djoshi,jasonstack,jwest,mck,plastikat,,,,,,,"plastikat commented on pull request #468: CASSANDRA-15623: cqlsh return non-zero status when STDIN CQL fails
URL: https://github.com/apache/cassandra/pull/468
 
 
   I believe currently it can be safely assumed that
   any `Shell` instance without a TTY (i.e. `Shell.tty
   == False`) is in a ""batch mode"". With this in mind,
   the two following changes were applied.
   
   First, while we could just use the `Shell.tty`
   attribute directly, to be semantically clear and to
   provide room for future enhancement on what is
   considered a ""batch mode"", we will add a respective
   property instead.
   
   Second, with the new `Shell.batch_mode` property at
   hand, it makes no more sense to check any options
   implying a ""batch mode"", it is perfectly enough to
   just check this property.
   
   patch by Jacob Becker a.k.a. plastikat;
   reviewed by Jordan West for CASSANDRA-15623
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Mar/20 03:03;githubbot;600","plastikat commented on pull request #536: CASSANDRA-15623: cqlsh return non-zero status when STDIN CQL fails
URL: https://github.com/apache/cassandra/pull/536
 
 
   This is a backport of [CASSANDRA-15623](https://github.com/apache/cassandra/pull/468) to cassandra-3.0, please see the linked PR for more details.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Apr/20 03:11;githubbot;600","dineshjoshi commented on pull request #536: CASSANDRA-15623: cqlsh return non-zero status when STDIN CQL fails
URL: https://github.com/apache/cassandra/pull/536
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Apr/20 06:08;githubbot;600","smiklosovic closed pull request #468:
URL: https://github.com/apache/cassandra/pull/468


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:13;githubbot;600","smiklosovic closed pull request #467:
URL: https://github.com/apache/cassandra/pull/467


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:13;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15739,,,,,,,,,,,,,,,,,,,,,,,0.0,plastikat,,,,,,,,,,,,,Correctness -> API / Semantic Definition,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 21 04:24:24 UTC 2020,,,,,,,All,,,,,,"0|z0c8eg:",9223372036854775807,,,,djoshi,jwest,,,Normal,,3.0.21,,,https://github.com/apache/cassandra/commit/a738c580224e340f011ffa174a9f1259521120cd,,,,,,,,,Manual testing,,,,,"06/Mar/20 07:52;plastikat;Also, while this might not be a very proper place to ask this, but I do not really get *why* is the exit code for script errors is 2? Usually 2 is for incorrect arguments or other command syntax errors... To avoid surprises, it would be nice if this ""exit code"" subject would be documented.;;;","06/Mar/20 22:19;jwest;[~plastikat] thanks for the report. I was able to confirm the behavior you mentioned and agree for the stdin case this should be fixed. Do you have time to work on a patch? I'd be happy to review. 

Regarding the exit code being 1 or 2, perhaps we should look into that in a separate ticket. I see some potential for debate there since {{grep}} for example returns 1 when no results are found and 2 when there are syntax errors (see man output below).


Piping from STDIN:
{code}
Jordans-MacBook-Pro-2:cassandra jordanwest$ echo 'select * from foo;' | ./bin/cqlsh
<stdin>:2:InvalidRequest: Error from server: code=2200 [Invalid query] message=""No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename""
Jordans-MacBook-Pro-2:cassandra jordanwest$ echo $?
0
Jordans-MacBook-Pro-2:cassandra jordanwest$ echo 'select * from foo' | ./bin/cqlsh
<stdin>:2:Incomplete statement at end of file
Jordans-MacBook-Pro-2:cassandra jordanwest$ echo $?
0
{code}


Using {{-e}}:
{code}
Jordans-MacBook-Pro-2:cassandra jordanwest$ ./bin/cqlsh -e 'select * from foo;'
<stdin>:1:InvalidRequest: Error from server: code=2200 [Invalid query] message=""No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename""
Jordans-MacBook-Pro-2:cassandra jordanwest$ echo $?
2
Jordans-MacBook-Pro-2:cassandra jordanwest$ ./bin/cqlsh -e 'select * from;'
<stdin>:1:SyntaxException: line 1:13 no viable alternative at input ';' (select * from[;])
Jordans-MacBook-Pro-2:cassandra jordanwest$ echo $?
2
{code}

grep man pages:
{code}
     The grep utility exits with one of the following values:

     0     One or more lines were selected.
     1     No lines were selected.
     >1    An error occurred.
{code};;;","09/Mar/20 09:35;plastikat;[~jrwest], after taking a look at the code, I would say yes, I will provide a patch. I believe I can manage within a few days.

As for the exit code being 1 or 2, it is debatable indeed as, AFAIK, there is no (generic) specification in this regard. What is truly important is that it is not 0 (and it is not), so I wasn't sure if the subject is even worth a new ticket. I personally can live just fine with 2, I mentioned it only because, from my experience, anything above 1 usually has some underlying reason (ideally - explained in documentation); from what I can tell, there is no such reason in this case (especially considering the script *never* exits with 1) and no mention in the documentation.;;;","10/Mar/20 08:22;plastikat;[~jrwest], as discussed, here comes the patch:
https://github.com/apache/cassandra/pull/467

I assume you do not do any (direct) merges at GitHub, but at least to be clear on the target branch, I think an MR there is still useful. In case you are fine with the changes, I guess I could *port* the fix to other branches (simply merging will not do. files are too different, even for neighboring branches) and create the respective PRs, though in this case I would expect you to tell me a list of branches you would like to port to.;;;","10/Mar/20 08:53;plastikat;BTW, to make reviewing a bit easier for you, I can additionally tell that the original condition was quite redundant in the first place: at the [following line|https://github.com/apache/cassandra/blob/b7146676f68c0e0431faa825cc8b70c06fe31090/bin/cqlsh.py#L2283] of the `read_options` function we check certain options to disable a TTY, then the [original condition|https://github.com/apache/cassandra/blob/b7146676f68c0e0431faa825cc8b70c06fe31090/bin/cqlsh.py#L2433] was doing the inverse to see if we are in a ""batch mode"".;;;","10/Mar/20 14:44;jwest;Thanks [~plastikat]. I've marked this JIRA as patch submitted. I will review it this week. I'm not super familiar with the cqlsh code so it may take me a little longer to verify the assumptions are correct. [~djoshi] would you be interested in helping here as well? 

 

Also, [~plastikat], if you rewrite your commit message in your PR as ""CASSANDRA-15623: [message]"" then JIRA will automatically detect it. ;;;","10/Mar/20 15:16;plastikat;[~jrwest], thanks, renamed both PR and commit message. It would be nice if this information was initially available to contributors in item 6 of the [following list|http://cassandra.apache.org/doc/latest/development/patches.html#creating-a-patch], because I personally have a habit to prefix commit messages with a ticket number, but I initially tried to closely follow the recommendations.;;;","10/Mar/20 17:34;djoshi;[~plastikat] thanks for your patch. I can take a look at it this week. BTW, I see you've submitted a patch against 3.11. 3.11 is in bugfix only mode so your patch should be against trunk.;;;","11/Mar/20 03:26;plastikat;[~djoshi], [~jrwest], no problem submitting against trunk. Since my local (i.e. source) branches were named after the target branches, to avoid any possible confusion, I have created a *new* dedicated PR against trunk:
https://github.com/apache/cassandra/pull/468

Please do your review using the [new PR|https://github.com/apache/cassandra/pull/468]. In case changes are accepted, the [original PR|https://github.com/apache/cassandra/pull/467] can serve as a backport to 3.11.

To explain myself, I had initially submitted against 3.11 because:
* I have been testing against that version;
* I had assumed it was OK to submit against 3.11 since it was actually a bug fix;

I will keep the clarified workflow in mind, thanks.
;;;","06/Apr/20 20:15;jwest;[~plastikat] thanks for reworking the patch for trunk. The changes LGTM. I verified the new behavior works as expected and the old behavior remains unchanged: 

 

{code}
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ echo 'select * from foo;' | ./bin/cqlsh
<stdin>:2:InvalidRequest: Error from server: code=2200 [Invalid query] message=""No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename""
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ echo $?
2
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ echo 'select * from;' | ./bin/cqlsh
<stdin>:2:SyntaxException: line 1:13 no viable alternative at input ';' (select * from[;])
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ echo $?
2
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ ./bin/cqlsh -e 'select;'
<stdin>:1:SyntaxException: line 1:6 no viable alternative at input ';' (select[;])
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ echo $?
2
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ ./bin/cqlsh -f testcql
testcql:2:SyntaxException: line 1:6 no viable alternative at input ';' (select[;])
Jordans-MacBook-Pro-2:cassandra-15623-review jordanwest$ echo $?
2
{code}

 

I did however notice a new bug that also exists on trunk (unrelated to this change) while testing. More to come on that. ;;;","07/Apr/20 21:53;djoshi;[~plastikat] it would also be preferable to add a test that will spot this regression. Could you please add one?

[~jrwest] do we need to fix the other bug in this ticket or could I go ahead and commit this?;;;","07/Apr/20 21:55;jwest;[~djoshi] apologies for not following up. The other bug is https://issues.apache.org/jira/browse/CASSANDRA-15660 which is already patch available so no need to address here. ;;;","07/Apr/20 23:49;djoshi;I am ok with this going to trunk. Not so sure about backporting it to previous stable releases as this is a behavioral change nevertheless. [~plastikat] in this instance we would usually start a dev list thread to build a community consensus. Would you start one?;;;","09/Apr/20 06:10;plastikat;[~djoshi], as per your suggestion, I have started a [dev list thread|https://www.mail-archive.com/dev@cassandra.apache.org/msg14851.html] to get the consensus on backporting.

Regarding the regression test, I agree it is best to have one. However, due to being quite busy, I am not sure if I will be able to do it soon. Meanwhile, in case anyone else would be willing to do it, it is perfectly fine with me.;;;","14/Apr/20 00:42;djoshi;Since I've not heard anything on the dev list, I am inclined to back port your change with a warning in the {{NEWS.txt}}. Could you please produce two separate commits one for 3.0 and 3.11 respectively?;;;","14/Apr/20 03:24;plastikat;[~djoshi], sure, no problem, here are the respective PRs:

* [For cassandra-3.11|https://github.com/apache/cassandra/pull/467]
* [For cassandra-3.0|https://github.com/apache/cassandra/pull/536]

The first one is the original PR I have initially submitted (as it was based off cassandra-3.11), I just rebased off upstream to include the latest changes and changed the PR description. The second one is new.
;;;","18/Apr/20 05:29;djoshi;+1;;;","18/Apr/20 05:30;djoshi;Committed to 3.0, 3.11 and 4.0. Thanks for the patch [~plastikat]!;;;","19/Apr/20 13:25;mck;[~djoshi], [~jrwest], looks like this broke ~25 cqlsh tests. 

- 3.0: https://ci-cassandra.apache.org/view/branches/job/Cassandra-3.0/16/testReport/
- 3.11: https://ci-cassandra.apache.org/view/Cassandra%203.11/job/Cassandra-3.11/20/testReport/
- 4.0: https://ci-cassandra.apache.org/view/Cassandra%204.0/job/Cassandra-trunk/84/testReport/


Where were the CI runs before this was committed?;;;","19/Apr/20 23:15;djoshi;Hi [~mck], apologies for breaking the build and have the fixes over in CASSANDRA-15739. I ran the CircleCI but likely mixed up the results from different tickets. I'll be careful in the future.;;;","21/Apr/20 04:24;plastikat;[~djoshi], it was my pleasure.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Unit tests throw UnknownHostException trying to use `InetAddress.getLocalHost()` instead of `FBUtilities.getLocalAddress()`,CASSANDRA-15622,13289608,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,mck,mck,04/Mar/20 19:03,15/May/20 08:54,13/Jul/23 08:39,11/Mar/20 16:44,2.2.17,3.0.21,3.11.7,4.0,4.0-alpha4,Test/unit,,,,0,,,,"Many of the unit tests in Jenkins fail because of the use of {{`InetAddress.getLocalHost()`}} in the test classes.

The Jenkins agents need a public ipaddress (and a hostname associated to it) so the Jenkins master can connect to them (agents can be hosted externally, by donating third-parties).

The call to {{`InetAddress.getLocalHost()`}} can resolve to a hostname that can't be looked up.
Not only can it not be listed in {{`/etc/hosts`}}, but we don't want it to be either (in case of accidental external port opening if the hostname points to the public ipaddress). (Which is also ASF policy on this infrastructure.)

The unit test code needs to replace these code occurrences with the call to {{`FBUtilities.getLocalAddress()`}}",,blerer,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Mar 11 16:44:27 UTC 2020,,,,,,,All,,,,,,"0|z0c640:",9223372036854775807,,,,blerer,,,,Normal,,0.3,,,https://github.com/apache/cassandra/commit/a8ef9c9ad1495f3eb9dc1ef09c0995926561fd8c,,,,,,,,,Jenkins test pass rate (significantly) improving.,,,,,"04/Mar/20 22:09;mck;initial patch against [cassandra-2.2|https://github.com/apache/cassandra/compare/cassandra-2.2...thelastpickle:mck/cassandra-2.2_15622];;;","05/Mar/20 09:50;mck;Patches.


||branch||circleci||jenkins pipeline||
|[cassandra_2.2_15622|https://github.com/apache/cassandra/compare/cassandra-2.2...thelastpickle:mck/cassandra-2.2_15622]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-2.2_15622]|[!https://builds.apache.org/job/Cassandra-devbranch/34/badge/icon!|https://builds.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/34]|
|[cassandra_3.0_15622|https://github.com/apache/cassandra/compare/cassandra-3.0...thelastpickle:mck/cassandra-3.0_15622]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-3.0_15622]|[!https://builds.apache.org/job/Cassandra-devbranch/33/badge/icon!|https://builds.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/33]|
|[cassandra_3.11_15622|https://github.com/apache/cassandra/compare/cassandra-3.11...thelastpickle:mck/cassandra-3.11_15622]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Fcassandra-3.11_15622]|[!https://builds.apache.org/job/Cassandra-devbranch/39/badge/icon!|https://builds.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/39]|
|[trunk_15622|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_15622]|[circleci|https://circleci.com/gh/thelastpickle/workflows/cassandra/tree/mck%2Ftrunk_15622]|[!https://builds.apache.org/job/Cassandra-devbranch/31/badge/icon!|https://builds.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/31]|;;;","05/Mar/20 12:21;blerer;The patches look fine to me. After, I have lost a bit track with the failing tests so I trust you to judge if the CI results are good or not.;;;","05/Mar/20 17:25;mck;The change in {{CassandraXMLJUnitResultFormatter}} needs to be undone. It's just a test formatter class that shouldn't be using any C* code.;;;","05/Mar/20 18:14;mck;bq. The change in {{CassandraXMLJUnitResultFormatter}} needs to be undone. It's just a test formatter class that shouldn't be using any C* code.

Commits above updated accordingly.;;;","06/Mar/20 06:40;mck;More work on the 3.11  is required. A number of unit tests need DatabaseDescriptor initialised so that {{FBUtilities.getLocalAddress()}} doesn't fallback to calling {{InetAddress.getLocalHost()}}

Trunk is fine because the host+port addition (CASSANDRA-7544) basically cleaned up this testing issue.;;;","06/Mar/20 12:56;mck;[~blerer], appreciated if you could take a quick glance at the additional ""squash"" [commit|https://github.com/apache/cassandra/commit/cede207a90b5f7061d7d209d07e5c5f5add88d5b] that's added to the `cassandra_3.11_15622` branch.

It's still trivial changes (and only to the test classes) but it did go a bit further than what was needed on all the other branches… so the review formality would be appreciated.

Otherwise tests are looking much better now across all the branches (for both circleci and jenkins);;;","11/Mar/20 12:07;blerer;Sorry, for the delay. The patches look good.;;;","11/Mar/20 16:44;mck;Committed as a8ef9c9ad1495f3eb9dc1ef09c0995926561fd8c;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flakey test - TestBootstrap.test_resumable_bootstrap ,CASSANDRA-15614,13288962,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,02/Mar/20 17:56,15/May/20 08:53,13/Jul/23 08:39,10/Mar/20 23:52,4.0,4.0-alpha4,,,,Test/dtest/python,,,,0,,,,"Fails 2 out of 10 times on Mac/Java 8

{noformat}
================================================================================================================== FAILURES ==================================================================================================================

*___________________________________________________________________________________________________ TestBootstrap.test_resumable_bootstrap ___________________________________________________________________________________________________*

 

self = <bootstrap_test.TestBootstrap object at 0x10fd488d0>

 

    *@since('2.2')*

    *def test_resumable_bootstrap(self):*

        *""""""*

            *Test resuming bootstrap after data streaming failure*

            *""""""*

        *cluster = self.cluster*

        *cluster.populate(2)*

    **    

        *node1 = cluster.nodes['node1']*

        *# set up byteman*

        *node1.byteman_port = '8100'*

        *node1.import_config_files()*

    **    

        *cluster.start(wait_other_notice=True)*

        *# kill stream to node3 in the middle of streaming to let it fail*

        *if cluster.version() < '4.0':*

            *node1.byteman_submit([self.byteman_submit_path_pre_4_0])*

        *else:*

            *node1.byteman_submit([self.byteman_submit_path_4_0])*

        *node1.stress(['write', 'n=1K', 'no-warmup', 'cl=TWO', '-schema', 'replication(factor=2)', '-rate', 'threads=50'])*

        *cluster.flush()*

    **    

        *# start bootstrapping node3 and wait for streaming*

        *node3 = new_node(cluster)*

        *node3.start(wait_other_notice=False)*

    **    

        *# let streaming fail as we expect*

*>       node3.watch_log_for('Some data streaming failed')*

 

*bootstrap_test.py*:365: 

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

 

self = <ccmlib.node.Node object at 0x10fdf1810>, exprs = 'Some data streaming failed', from_mark = None, timeout = 600, process = None, verbose = False, filename = 'system.log'

 

    *def watch_log_for(self, exprs, from_mark=None, timeout=600, process=None, verbose=False, filename='system.log'):*

        *""""""*

            *Watch the log until one or more (regular) expression are found.*

            *This methods when all the expressions have been found or the method*

            *timeouts (a TimeoutError is then raised). On successful completion,*

            *a list of pair (line matched, match object) is returned.*

            *""""""*

        *start = time.time()*

        *tofind = [exprs] if isinstance(exprs, string_types) else exprs*

        *tofind = [re.compile(e) for e in tofind]*

        *matchings = []*

        *reads = """"*

        *if len(tofind) == 0:*

            *return None*

    **    

        *log_file = os.path.join(self.get_path(), 'logs', filename)*

        *output_read = False*

        *while not os.path.exists(log_file):*

            *time.sleep(.5)*

            *if start + timeout < time.time():*

                *raise TimeoutError(time.strftime(""%d %b %Y %H:%M:%S"", time.gmtime()) + "" ["" + self.name + ""] Timed out waiting for {} to be created."".format(log_file))*

            *if process and not output_read:*

                *process.poll()*

                *if process.returncode is not None:*

                    *self.print_process_output(self.name, process, verbose)*

                    *output_read = True*

                    *if process.returncode != 0:*

                        *raise RuntimeError()  # Shouldn't reuse RuntimeError but I'm lazy*

    **    

        *with open(log_file) as f:*

            *if from_mark:*

                *f.seek(from_mark)*

    **    

            *while True:*

                *# First, if we have a process to check, then check it.*

                *# Skip on Windows - stdout/stderr is cassandra.bat*

                *if not common.is_win() and not output_read:*

                    *if process:*

                        *process.poll()*

                        *if process.returncode is not None:*

                            *self.print_process_output(self.name, process, verbose)*

                            *output_read = True*

                            *if process.returncode != 0:*

                                *raise RuntimeError()  # Shouldn't reuse RuntimeError but I'm lazy*

    **    

                *line = f.readline()*

                *if line:*

                    *reads = reads + line*

                    *for e in tofind:*

                        *m = e.search(line)*

                        *if m:*

                            *matchings.append((line, m))*

                            *tofind.remove(e)*

                            *if len(tofind) == 0:*

                                *return matchings[0] if isinstance(exprs, string_types) else matchings*

                *else:*

                    *# yep, it's ugly*

                    *time.sleep(1)*

                    *if start + timeout < time.time():*

*>                       raise TimeoutError(time.strftime(""%d %b %Y %H:%M:%S"", time.gmtime()) + "" ["" + self.name + ""] Missing: "" + str([e.pattern for e in tofind]) + "":\n"" + reads[:50] + "".....\nSee {} for remainder"".format(filename))*

*E                       ccmlib.node.TimeoutError: 02 Mar 2020 17:16:34 [node3] Missing: ['Some data streaming failed']:*

*E                       INFO  [main] 2020-03-02 12:06:34,963 YamlConfigura.....*

*E                       See system.log for remainder*

 

*../../dtest-new2/src/ccm/ccmlib/node.py*:536: TimeoutError

----------------------------------------------------------------------------------------------------------- Captured stdout setup ------------------------------------------------------------------------------------------------------------

11:55:37,343 ccm DEBUG Log-watching thread starting.

------------------------------------------------------------------------------------------------------------- Captured log setup -------------------------------------------------------------------------------------------------------------

11:55:37,239 conftest INFO Starting execution of test_resumable_bootstrap at 2020-03-02 11:55:37.239467

11:55:37,240 dtest_setup INFO cluster ccm directory: /var/folders/ql/nvcz74bd67d3vhw7227mpjm40000gp/T/dtest-fzxwwt9c

------------------------------------------------------------------------------------------------------------ Captured stdout call ------------------------------------------------------------------------------------------------------------

install rule inject stream failure

 

---------------------------------------------------------------------------------------------------------- Captured stdout teardown ----------------------------------------------------------------------------------------------------------

12:06:04,870 ccm DEBUG Log-watching thread exiting.

----------------------------------------------------------------------------------------------------------- Captured stdout setup ------------------------------------------------------------------------------------------------------------

12:06:06,20 ccm DEBUG Log-watching thread starting.

------------------------------------------------------------------------------------------------------------- Captured log setup -------------------------------------------------------------------------------------------------------------

12:06:05,887 conftest INFO Starting execution of test_resumable_bootstrap at 2020-03-02 12:06:05.887592

12:06:05,888 dtest_setup INFO cluster ccm directory: /var/folders/ql/nvcz74bd67d3vhw7227mpjm40000gp/T/dtest-yntcltkx

------------------------------------------------------------------------------------------------------------ Captured stdout call ------------------------------------------------------------------------------------------------------------

install rule inject stream failure

 

---------------------------------------------------------------------------------------------------------- Captured stdout teardown ----------------------------------------------------------------------------------------------------------

12:06:04,870 ccm DEBUG Log-watching thread exiting.

---------------------------------------------------------------------------------------------------------- Captured stdout teardown ----------------------------------------------------------------------------------------------------------

12:06:04,870 ccm DEBUG Log-watching thread exiting.

---------------------------------------------------------------------------------------------------------- Captured stdout teardown ----------------------------------------------------------------------------------------------------------

12:16:34,818 ccm DEBUG Log-watching thread exiting.

===Flaky Test Report===

 

test_resumable_bootstrap failed (1 runs remaining out of 2).

<class 'ccmlib.node.TimeoutError'>

02 Mar 2020 17:06:04 [node3] Missing: ['Some data streaming failed']:

INFO  [main] 2020-03-02 11:56:05,081 YamlConfigura.....

See system.log for remainder

[<TracebackEntry /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/bootstrap_test.py:365>, <TracebackEntry /Users/ekaterina.dimitri/dtest-new2/src/ccm/ccmlib/node.py:536>]

test_resumable_bootstrap failed; it passed 0 out of the required 1 times.

<class 'ccmlib.node.TimeoutError'>

02 Mar 2020 17:16:34 [node3] Missing: ['Some data streaming failed']:

INFO  [main] 2020-03-02 12:06:34,963 YamlConfigura.....

See system.log for remainder

[<TracebackEntry /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/bootstrap_test.py:365>, <TracebackEntry /Users/ekaterina.dimitri/dtest-new2/src/ccm/ccmlib/node.py:536>]

 

===End Flaky Test Report===

*======================================================================================================== 1 failed in 1258.32 seconds =========================================================================================================*
{noformat}",,e.dimitrova,jasonstack,jwest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Mar/20 19:35;e.dimitrova;test_resumable_bootstrap-CASSANDRA-15614.txt;https://issues.apache.org/jira/secure/attachment/12995899/test_resumable_bootstrap-CASSANDRA-15614.txt",,,,,,,,,,,,,,1.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 14:38:05 UTC 2020,,,,,,,All,,,,,,"0|z0c34g:",9223372036854775807,,,,brandonwilliams,jwest,,,Normal,,2.2.0 beta 1,,,https://github.com/apache/cassandra-dtest/commit/2278fb50daaae262960811a636b3182e5d36d439,,,,,,,,,"[Pull request|https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/3]

[Branch for the patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-15614]",,,,,"05/Mar/20 14:28;e.dimitrova;The nature of the test itself is kind of non-deterministic. The issue is that sometimes the bootstrap can complete a bit before the stream fails and in the current setup is hard to make it 100% deterministic. It is a test issue. 

The best I managed to achieve for now is by starting node3 with ring_delay_ms=5000:
 - reduce the flakiness - once in 40-50 times compared to 2 out of 10 before.

 - decrease of the running time from 90 to 60 seconds

Wanna look more into the byteman code today, too.;;;","06/Mar/20 19:56;e.dimitrova;During the work on this ticket I observed we have also [test_bootstrap_binary_disabled|https://builds.apache.org/view/A-D/view/Cassandra%20trunk/job/Cassandra-trunk-dtest/lastBuild/testReport/bootstrap_test/TestBootstrap/test_bootstrap_binary_disabled] covering the same test and also being flakey.

I think we can remove this one as being redundant and just mark that the other one tests ALSO the resumable bootstrap. 

Unfortunately, the problem is still the same but at least we don't have it double damage. The test does not look deterministic to me. I don't see a 100% way to ensure the bootstrap won't complete at some point earlier. 

Now it completed successfully 100 times (log attached) but I think in very rare cases it might fail again.

As pointed in Jenkins - the test was 96% stable, now I guess it would be like 99%. 

[~jrwest] being the Shepard for testing, any advice? Can we leave this one with a comment on the flakiness? 

Or maybe I can add failure message, in case we see the stream failure happening when the bootstrap was already over? It will provide the reason and an advice for rerun. So people know not to investigate more? Please advise.

[Pull request|https://github.com/ekaterinadimitrova2/cassandra-dtest/pull/3]

[Branch for the patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/tree/CASSANDRA-15614]

 ;;;","10/Mar/20 21:14;jwest;Thanks for the diagnosis [~e.dimitrova]. Have you thought about converting the test to in-jvm dtest? Perhaps, we could have more control and get rid of the flakiness? It would also allow us to make better assertions about streaming failure than just ""is it in the logs"". Then we could safely delete the old/dtest versions. 

I'd have to look at this test closer to think about ways to make it 100% solid w/in dest. Unfortunately, from the dtest level I'm not sure we have the control we need.;;;","10/Mar/20 22:03;e.dimitrova;Thanks [~jrwest]

As we talked on slack, we will commit this one for now and keep the ticket open for the exploration of in-jvm better version later. Thanks!

[~brandon.williams], can you, please commit this patch? ;;;","10/Mar/20 23:52;brandon.williams;Committed, thanks!;;;","10/Mar/20 23:53;brandon.williams;bq. keep the ticket open for the exploration of in-jvm better version later.

Let's use a new ticket for that.;;;","11/Mar/20 15:57;e.dimitrova;As this was closed I created ticket for improvement CASSANDRA-15632;;;","09/Apr/20 14:38;e.dimitrova;CASSANDRA-15667 solves the issue, the test is deterministic already. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flakey test - TestBootstrap.test_local_quorum_bootstrap,CASSANDRA-15613,13288916,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,02/Mar/20 15:28,21/Dec/20 08:08,13/Jul/23 08:39,05/Mar/20 14:57,4.0,4.0-alpha4,,,,Test/dtest/python,,,,0,,,,"Flakey test on trunk, java 8.

I did a couple of loops and it sometimes fail at the 5th run, sometimes at the 50th.

 
{noformat}
*_________________________________________________________________________________________________ TestBootstrap.test_local_quorum_bootstrap __________________________________________________________________________________________________*

 

self = <bootstrap_test.TestBootstrap object at 0x1064f5bd0>

 

    *def test_local_quorum_bootstrap(self):*

        *""""""*

            *Test that CL local_quorum works while a node is bootstrapping.*

            *@jira_ticket CASSANDRA-8058*

            *""""""*

        *cluster = self.cluster*

        *cluster.populate([1, 1])*

        *cluster.start()*

    **    

        *node1 = cluster.nodes['node1']*

        *yaml_config = """"""*

            *# Create the keyspace and table*

            *keyspace: keyspace1*

            *keyspace_definition: |*

              *CREATE KEYSPACE keyspace1 WITH replication = \{'class': 'NetworkTopologyStrategy', 'dc1': 1, 'dc2': 1};*

            *table: users*

            *table_definition:*

              *CREATE TABLE users (*

                *username text,*

                *first_name text,*

                *last_name text,*

                *email text,*

                *PRIMARY KEY(username)*

              *) WITH compaction = \{'class':'SizeTieredCompactionStrategy'};*

            *insert:*

              *partitions: fixed(1)*

              *batchtype: UNLOGGED*

            *queries:*

              *read:*

                *cql: select * from users where username = ?*

                *fields: samerow*

            *""""""*

        *with tempfile.NamedTemporaryFile(mode='w+') as stress_config:*

            *stress_config.write(yaml_config)*

            *stress_config.flush()*

            *node1.stress(['user', 'profile=' + stress_config.name, 'n=200K', 'no-warmup',*

                          *'ops(insert=1)', '-rate', 'threads=10'])*

    **    

            *node3 = new_node(cluster, data_center='dc2')*

            *node3.start(no_wait=True)*

            *time.sleep(3)*

    **    

            *ntout = node1.nodetool('status').stdout*

*>           assert re.search(r'UJ\s+' + node3.ip_addr, ntout), ntout*

*E           AssertionError: Datacenter: dc1*

*E             ===============*

*E             Status=Up/Down*

*E             |/ State=Normal/Leaving/Joining/Moving*

*E             --  Address    Load       Owns (effective)  Host ID                               Token                 Rack*

*E             UN  127.0.0.1  76.82 KiB  ?                 3056e1d1-eac6-493a-b5bc-f8fe703d8d4b  -9223372036854775808  r1 * 

*E*             

*E             Datacenter: dc2*

*E             ===============*

*E             Status=Up/Down*

*E             |/ State=Normal/Leaving/Joining/Moving*

*E             --  Address    Load       Owns (effective)  Host ID                               Token                 Rack*

*E             UN  127.0.0.2  76.83 KiB  ?                 ae607eb3-5601-4b6f-9d01-cf9401da5a4c  -9223372036854775708  r1 * 

*E*             

*E*             

*E           assert None*

*E            +  where None = <function search at 0x10472f8c0>(('UJ\\s+' + '127.0.0.3'), 'Datacenter: dc1\n===============\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n--  Address    Load       O...Rack\nUN  127.0.0.2  76.83 KiB  ?                 ae607eb3-5601-4b6f-9d01-cf9401da5a4c  -9223372036854775708  r1  \n\n')*

*E            +    where <function search at 0x10472f8c0> = re.search*

*E            +    and   '127.0.0.3' = <ccmlib.node.Node object at 0x106530b10>.ip_addr*

 

*bootstrap_test.py*:488: AssertionError

----------------------------------------------------------------------------------------------------------- Captured stdout setup ------------------------------------------------------------------------------------------------------------

11:42:12,744 ccm DEBUG Log-watching thread starting.

------------------------------------------------------------------------------------------------------------- Captured log setup -------------------------------------------------------------------------------------------------------------

11:42:12,608 conftest INFO Starting execution of test_local_quorum_bootstrap at 2020-02-28 11:42:12.608760

11:42:12,609 dtest_setup INFO cluster ccm directory: /var/folders/ql/nvcz74bd67d3vhw7227mpjm40000gp/T/dtest-51gjecxa

---------------------------------------------------------------------------------------------------------- Captured stdout teardown ----------------------------------------------------------------------------------------------------------

11:43:03,366 ccm DEBUG Log-watching thread exiting.

===Flaky Test Report===

 

test_local_quorum_bootstrap failed and was not selected for rerun.

<class 'AssertionError'>

Datacenter: dc1

  ===============

  Status=Up/Down

  |/ State=Normal/Leaving/Joining/Moving

  --  Address    Load       Owns (effective)  Host ID                               Token                 Rack

  UN  127.0.0.1  76.82 KiB  ?                 3056e1d1-eac6-493a-b5bc-f8fe703d8d4b  -9223372036854775808  r1  

  

  Datacenter: dc2

  ===============

  Status=Up/Down

  |/ State=Normal/Leaving/Joining/Moving

  --  Address    Load       Owns (effective)  Host ID                               Token                 Rack

  UN  127.0.0.2  76.83 KiB  ?                 ae607eb3-5601-4b6f-9d01-cf9401da5a4c  -9223372036854775708  r1  

  

  

assert None

 +  where None = <function search at 0x10472f8c0>(('UJ\\s+' + '127.0.0.3'), 'Datacenter: dc1\n===============\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n--  Address    Load       O...Rack\nUN  127.0.0.2  76.83 KiB  ?                 ae607eb3-5601-4b6f-9d01-cf9401da5a4c  -9223372036854775708  r1  \n\n')

 +    where <function search at 0x10472f8c0> = re.search

 +    and   '127.0.0.3' = <ccmlib.node.Node object at 0x106530b10>.ip_addr

[<TracebackEntry /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/bootstrap_test.py:488>]

 

===End Flaky Test Report===

*========================================================================================================= 1 failed in 51.61 seconds ==========================================================================================================*
{noformat}",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Mar 05 14:57:52 UTC 2020,,,,,,,All,,,,,,"0|z0c2u8:",9223372036854775807,,,,e.dimitrova,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra-dtest/commit/1f567c5068b3c50fa8093947fa9e75d71606ecc5,,,,,,,,,none,,,,,"04/Mar/20 15:34;brandon.williams;There are two problem with this test.  First, 3 seconds may not be long enough to see the bootstrapping node.  Second, it assumes that after inserting 10k rows, the node will still be bootstrapping, and there's simply no logical guarantee that will be the case.  The simplest thing to do, since we don't actually care if the node ever finishes joining, is to put it into write survey mode so it will perpetually be joining. Patch to increase the initial sleep slightly and use survey mode here: https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-15613;;;","04/Mar/20 23:50;e.dimitrova;LGTM +1;;;","05/Mar/20 14:57;brandon.williams;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mutating sstable metadata during anticompaction fails silently on legacy sstables,CASSANDRA-15612,13288732,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,02/Mar/20 10:06,21/Dec/20 08:07,13/Jul/23 08:39,09/Apr/20 14:48,4.0,4.0-alpha4,,,,Consistency/Repair,,,,0,,,,If there is an sstable with a version without pending repair information included in an incremental repair we silently don't set the pending repair correctly. We should fail the IR instead.,,blerer,jasonstack,jeromatron,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 09 14:48:14 UTC 2020,,,,,,,All,,,,,,"0|z0c28o:",9223372036854775807,,,,blerer,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/579c9ab311e9efcbc3329599232a8f9992b2694e,,,,,,,,,new legacy sstable test and cci runs,,,,,"03/Mar/20 09:06;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/15612], [cci|https://circleci.com/workflow-run/900abd8c-78ad-4c09-befd-f9ce7b4501be];;;","07/Apr/20 15:34;blerer;The patch looks good to me but I cannot see the CI results.;;;","09/Apr/20 13:16;marcuse;[unit tests|https://circleci.com/gh/krummas/cassandra/3129]
[jvm dtests|https://circleci.com/gh/krummas/cassandra/3130]
[dtests vnodes|https://circleci.com/gh/krummas/cassandra/3133]
[dtests novnodes|https://circleci.com/gh/krummas/cassandra/3134];;;","09/Apr/20 14:43;blerer;Thanks [~marcuse]

+1;;;","09/Apr/20 14:48;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Outcome returned when acquiring capacity for incoming message,CASSANDRA-15607,13288262,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,aleksey,samt,samt,28/Feb/20 11:27,21/Dec/20 08:07,13/Jul/23 08:39,07/Apr/20 13:54,4.0,4.0-alpha4,,,,Messaging/Internode,,,,0,,,,"When acquiring capacity to process an inbound internode message, a failure to allocate from the endpoint-specific reserve returns the wrong {{Outcome}}. This means we only ever register with {{globalWaitQueue}}, although this probably doesn't actually ever get detected as the global and endpoint queues are always signalled together.",,aleksey,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aleksey,,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 07 13:54:15 UTC 2020,,,,,,,All,,,,,,"0|z0bzwo:",9223372036854775807,,,,samt,,,,Low,,4.0-alpha,4.0-alpha1,,"[aef3bec08743cde30ab1bf6029336997800e51a4|https://github.com/apache/cassandra/commit/aef3bec08743cde30ab1bf6029336997800e51a4]",,,,,,,,,N/A,,,,,"07/Apr/20 13:10;aleksey;Good catch. A one-line fix [here|https://github.com/iamaleksey/cassandra/commits/15607-4.0].;;;","07/Apr/20 13:13;samt;+1;;;","07/Apr/20 13:54;aleksey;Cheers, committed as [aef3bec08743cde30ab1bf6029336997800e51a4|https://github.com/apache/cassandra/commit/aef3bec08743cde30ab1bf6029336997800e51a4].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken dtest replication_test.py::TestSnitchConfigurationUpdate,CASSANDRA-15605,13288013,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,rssvihla,samt,samt,27/Feb/20 11:10,15/May/20 08:53,13/Jul/23 08:39,14/Mar/20 12:30,4.0,4.0-alpha4,,,,Test/dtest/python,,,,0,pull-request-available,,,"Noticed this failing on a couple of CI runs and repros when running trunk locally and on CircleCI

2 or 3 tests are consistently failing:
 * {{test_rf_expand_gossiping_property_file_snitch}}
 * {{test_rf_expand_property_file_snitch}}
 * {{test_move_forwards_between_and_cleanup}}

[https://circleci.com/workflow-run/f23f13a9-bbdc-4764-8336-109517e137f1]",,mck,rssvihla,samt,,,,,,,,,"rssvihla commented on pull request #58: fixed flakey tests in  replication_test.py CASSANDRA-15605
URL: https://github.com/apache/cassandra-dtest/pull/58
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 07:04;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,rssvihla,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Sat Mar 14 12:30:42 UTC 2020,,,,,,,All,,,,,,"0|z0bydc:",9223372036854775807,,,,mck,,,,Normal,,0.3,,,https://github.com/apache/cassandra-dtest/commit/981ac73a6174208adb3ec8de467e8558db9f0184,,,,,,,,,not needed,,,,,"04/Mar/20 15:48;brandon.williams;I'm unable to view the CI failure, and I looped this test for 48 hours without failure, so with nowhere to go, I give up.;;;","11/Mar/20 11:17;rssvihla;{{So I got them to finally fail, I had to get down to a 2 core VM before they would:}}


{{test_rf_collapse_gossiping_property_file_snitch passed 1 out of the required 1 times. Success!}}
{{test_rf_expand_gossiping_property_file_snitch failed and was not selected for rerun.}}
{{ <class 'RuntimeError'>}}
{{ Ran out of time waiting for topology to change on node 0}}
{{ [<TracebackEntry /home/debian/code/cassandra-dtest/replication_test.py:392>, <TracebackEntry /home/debian/code/cassandra-dtest/replication_tes}}
{{t.py:583>, <TracebackEntry /home/debian/code/cassandra-dtest/replication_test.py:360>] }}
{{test_rf_collapse_property_file_snitch passed 1 out of the required 1 times. Success!}}
{{test_rf_expand_property_file_snitch failed and was not selected for rerun.}}
{{ <class 'RuntimeError'>}}
{{ Ran out of time waiting for topology to change on node 0}}
{{ [<TracebackEntry /home/debian/code/cassandra-dtest/replication_test.py:458>, <TracebackEntry /home/debian/code/cassandra-dtest/replication_tes}}
{{t.py:583>, <TracebackEntry /home/debian/code/cassandra-dtest/replication_test.py:360>] }}
{{test_cannot_restart_with_different_rack passed 1 out of the required 1 times. Success!}}
{{test_failed_snitch_update_gossiping_property_file_snitch passed 1 out of the required 1 times. Success! }}
{{test_failed_snitch_update_property_file_snitch passed 1 out of the required 1 times. Success!}}
{{test_switch_data_center_startup_fails passed 1 out of the required 1 times. Success!}};;;","11/Mar/20 17:25;rssvihla;Looks like the racks were assumed to be in the same order, adding a sort gets the tests to pass. I'm not sure why the order is changing sometimes, but in all cases the topology had changed and the comparison was just missing that fact.

fails

 

{{Status=Up/Down}}
 {{|/ State=Normal/Leaving/Joining/Moving}}
 {{-- Address Load Tokens Owns (effective) Host ID Rack}}
 {{UN 127.0.0.3 105.28 KiB 1 ? 41df89ae-0631-447c-9def-ff1fbff3b8a7 rack2}}
 {{UN 127.0.0.2 164.25 KiB 1 ? 47a49e4e-6964-4b00-b353-d3ab345f4aba rack1}}
 {{UN 127.0.0.1 128.46 KiB 1 ? b63ad12d-1d12-4e51-95ba-88ff61b252ea rack0}}

works

 

{\{16:05:35,630 replication_test DEBUG Datacenter: dc1 }}
 {{===============}}
 {{Status=Up/Down}}
 {{|/ State=Normal/Leaving/Joining/Moving}}
 {{-- Address Load Tokens Owns (effective) Host ID Rack}}
 {{UN 127.0.0.1 132.51 KiB 1 100.0% 8b244cb0-135d-4745-b498-86f46187348f rack0}}
 {{UN 127.0.0.2 164.36 KiB 1 100.0% 36f42f34-fe8c-4543-b6c9-6db12b93b660 rack1}}
 {{UN 127.0.0.3 192.66 KiB 1 100.0% 1224e768-db1f-4d56-a1c8-db9b764a46d5 rack2}}

 

 [pr|https://github.com/apache/cassandra-dtest/pull/58];;;","12/Mar/20 08:57;rssvihla;After running for awhile I did get a failure on a different test (not one of the one's listed) so that maybe worth another jira..but no flakey failures on the listed tests above after an overnight run.;;;","13/Mar/20 11:57;mck;||branch||circleci||jenkins dtest||
|[dtest_15605|https://github.com/apache/cassandra-dtest/pull/58]|[circleci|https://circleci.com/workflow-run/f23f13a9-bbdc-4764-8336-109517e137f1]|[!https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/3/badge/icon?style=flat-square!|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/3/]|

Note: no one seems able to access that circleci link…

Otherwise, [here|https://builds.apache.org/view/A-D/view/Cassandra%20trunk/job/Cassandra-trunk-dtest/lastSuccessfulBuild/testReport/replication_test/] is it easy to verify the flakiness of these tests.;;;","13/Mar/20 12:24;samt;Sorry, I hadn't realised those CircleCI workflow links weren't accessible. For posterity here's a dtest run that failed in that workflow: [j8_dtests-with-vnodes|https://circleci.com/gh/beobal/cassandra/1239] ;;;","14/Mar/20 12:30;mck;Committed as 981ac73a6174208adb3ec8de467e8558db9f0184;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure repaired data tracking reads a consistent amount of data across replicas,CASSANDRA-15601,13287762,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,samt,samt,26/Feb/20 14:43,21/Dec/20 08:08,13/Jul/23 08:39,16/Apr/20 17:47,4.0,4.0-beta1,,,,Consistency/Repair,,,,0,,,,"When generating a digest for repaired data tracking, the amount of repaired data that needs to be read may depend on the unrepaired data on the replica. As this may vary between replicas, digest mismatches can be reported even though the repaired data may actually be in sync.

For example, two replicas, A & B and a table like
{code}
CREATE TABLE t  (pk int, ck int, PRIMARY KEY (pk, ck)) WITH CLUSTERING ORDER BY ck DESC; 

Unrepaired
===========
Instance A
(0, 5)

Instance B
(0, 6)
(0, 5)


Repaired (Both A & B)
=========
(0, 4)
(0, 3)
(0, 2)
(0, 1)
(0, 0)

SELECT * FROM tbl WHERE pk = 0 LIMIT 3;
{code}
Instance A would read (0, 5) from the unrepaired set and (0, 4) (0, 3) from the repaired set. 
 Instance B would read (0, 6) (0, 5) from its unrepaired set and just (0, 4) from repaired data.

Unrepaired row/range/partition tombstones shadowing repaired data and present on some replicas but not others will have the opposite effect, with more repaired data being read in comparison.


 To fix this, when repaired data tracking is in effect each replica needs to overread during a full data read. Replicas should read up to {{LIMIT}} (i.e. the {{DataLimit}} of the {{ReadCommand}}) from the repaired set, regardless of how much is read from the unrepaired data. At the point where that amount of repaired data has been read, replica should stop updating the digest. So if unrepaired tombstones cause more than {{LIMIT}} repaired data to be read, the digest is only calculated over the first {{LIMIT}}-worth of repaired data.",,aleksey,e.dimitrova,jasonstack,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 16 17:47:13 UTC 2020,,,,,,,All,,,,,,"0|z0bwtk:",9223372036854775807,,,,aleksey,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/a8e7cfbc0e146ea82154654ba43b613b058f99d1,,,,,,,,,Added new in-jvm-dtests and unit tests,,,,,"27/Feb/20 11:23;samt;A replica will attempt to read a fixed amount of repaired data, based on the query's DataLimit, while generating the repaired digest. If less than that amount is read in the course of satisfying the query limits, we overread. If more that the amount is read during the main read phase (because of unrepaired deletions shadowing repaired data), the digest calculation stops when its own limit is reached.

[branch|https://github.com/apache/cassandra/compare/trunk...beobal:15601-trunk], [tests|https://circleci.com/workflow-run/96751ea6-7d08-40dd-839c-e409ffebdb81];;;","10/Apr/20 18:45;e.dimitrova;Hi [~aleksey],
I see you are assigned as a reviewer, are you looking into this one? Need help if you are busy?
;;;","16/Apr/20 14:38;aleksey;LGTM (a variant previously returned internally, hence no new suggestions/nits);;;","16/Apr/20 17:47;samt;Thanks, committed to trunk in {{a8e7cfbc0e146ea82154654ba43b613b058f99d1}};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Algorithmic token allocation does not handle the racks = RF case well,CASSANDRA-15600,13287544,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,blambov,blambov,25/Feb/20 16:01,21/Dec/20 08:07,13/Jul/23 08:39,03/Mar/20 16:04,4.0,4.0-alpha4,,,,Feature/Virtual Nodes,,,,0,,,,"When the number of racks in a data centre is equal to the replication factor, the node allocation algorithm may calculate the target ownership incorrectly and allocate unsuitable tokens. This causes some inefficiency when the number of nodes in the DC is small, and significant problems if the number of nodes in each rack is different.

In this case (racks count equal to replication factor) the load within each rack is effectively distributed independently. The allocation algorithm should reflect that, restricting the allocation space to the rack (instead of the DC) and using the RF=1 solution.",,blambov,e.dimitrova,jeromatron,kornelpal,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Mar/20 23:54;e.dimitrova;CASSANDRA-15600 unit.txt;https://issues.apache.org/jira/secure/attachment/12995379/CASSANDRA-15600+unit.txt","02/Mar/20 23:54;e.dimitrova;CASSANDRA-15600-jvm.txt.zip;https://issues.apache.org/jira/secure/attachment/12995378/CASSANDRA-15600-jvm.txt.zip","02/Mar/20 23:56;e.dimitrova;Screen Shot 2020-03-02 at 6.55.41 PM.png;https://issues.apache.org/jira/secure/attachment/12995380/Screen+Shot+2020-03-02+at+6.55.41+PM.png",,,,,,,,,,,,3.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,Docs,,,Mon Jun 15 22:15:57 UTC 2020,,,,,,,All,,,,,,"0|z0bvh4:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/c9c022e07fd4fc6afc59cd1149fd18bc84d3fb39,,,,,,,,,"In the cases where the keyspace replication factor is ONE, or if the keyspace replication factor is equal to the number of racks in the datacenter, the workload variance drops from ~10 percent to ~6 percent due to algorithmic optimizations.

 ",,,,,"03/Mar/20 00:11;e.dimitrova;CI results attached. Two of the dtests turned out flakey on trunk, no new issue introduced by this patch. 

Respective issues were raised  -  CASSANDRA-15613 and CASSANDRA-15614

Patch:

[pull request|https://github.com/ekaterinadimitrova2/cassandra/pull/20]

[branch|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-15600];;;","03/Mar/20 00:18;e.dimitrova;[~lorina@datastax.com] we will need to document this improvement. Please let me know if you need any additional/ticket information. Thanks.;;;","03/Mar/20 00:19;e.dimitrova;[~brandon.williams] please review;;;","03/Mar/20 16:05;brandon.williams;Committed, thanks!;;;","01/Jun/20 16:11;kornelpal;[~e.dimitrova] you have added a generateSplits method to ReplicationAwareTokenAllocator, but it does not seem to be used. New comments suggest that splits are supposed to be used, but generateRandomTokens is used instead. Could you please double check whether some intended changes are missing from the commit. ;;;","11/Jun/20 15:00;e.dimitrova;Hi [~kornelpal], I am on it. Thanks!;;;","15/Jun/20 22:15;e.dimitrova;CASSANDRA-15877;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Many errors of ""java.lang.AssertionError: Illegal bounds""",CASSANDRA-15595,13287216,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jasonstack,yakir.g,yakir.g,24/Feb/20 13:58,15/May/20 08:54,13/Jul/23 08:39,27/Apr/20 16:24,3.0.21,3.11.7,4.0,4.0-beta1,,Local/Caching,,,,0,,,,"Hi, i'm running cassandra 3.11.6 and getting on all hosts many errors of:
{code}
ERROR [ReadStage-6] 2020-02-24 13:53:34,528 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[ReadStage-6,5,main]
java.lang.AssertionError: Illegal bounds [-2102982480..-2102982472); size: 2761628520
        at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:345) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.Memory.getLong(Memory.java:254) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(CompressionMetadata.java:234) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:114) ~[apache-cassandra-3.11.6.ja
r:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:158) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:39) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache.lambda$new$0(BoundedLocalCache.java:2949) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$15(BoundedLocalCache.java:1807) ~[caffeine-2.2.6.jar:na]
        at java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1853) ~[na:1.8.0-zing_19.12.102.0]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:1805) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:1788) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:97) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:66) ~[caffeine-2.2.6.jar:na]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:236) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:214) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:65) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:207) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:150) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.SSTableReader.getFileDataInput(SSTableReader.java:1807) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.columniterator.AbstractSSTableIterator.<init>(AbstractSSTableIterator.java:103) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.columniterator.SSTableIterator.<init>(SSTableIterator.java:49) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:72) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:65) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:100) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:982) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:693) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:670) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:504) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:423) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:48) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:66) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0-zing_19.12.102.0]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) [apache-cassandra-3.11.6.jar:3.11.6]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0-zing_19.12.102.0]
{code}

Someone familiar with that error?
",,brandon.williams,jasonstack,jeromatron,Piotr Rybicki,roy.b,yakir.g,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jasonstack,,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 28 06:52:41 UTC 2020,,,,,,,Linux,,,,,,"0|z0btog:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/4886968c4e973488df4f2da480785beff09b562b,,,,,,,,,"Added unit test to reproduce.

 

CI for trunk: [https://circleci.com/workflow-run/1d30e8e9-8f9e-4b34-be22-e94b7c508561]",,,,,"24/Feb/20 14:19;brandon.williams;Did this begin after you upgraded?  Also it looks like you're running Zing, can you confirm?;;;","24/Feb/20 14:22;yakir.g;The errors was also on 3.11.5, i tried to upgrade and errors exist also on 3.11.6.
Right, I'm running Zing.
{code}
[root@udb001 ~]# rpm -qa | grep zing
zing-jdk1.8.0-19.12.102.0-3.x86_64
zing-zst-8c.3.10.0-5.22.6.0.1.2.el7.x86_64
{code}
;;;","24/Feb/20 15:00;yakir.g;Also update caffeine to 2.8.1 didn't help.;;;","24/Feb/20 15:37;brandon.williams;Are you able to try a different JVM on one machine? ;;;","24/Feb/20 16:00;yakir.g;Yes, same issue, getting same errors with jdk 1.8.0_131:
{code:java}
ERROR [ReadStage-42] 2020-02-24 15:58:51,767 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[ReadStage-42,5,main]
java.lang.AssertionError: Illegal bounds [-2049972896..-2049972888); size: 2754497496
	at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:345) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.util.Memory.getLong(Memory.java:254) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(CompressionMetadata.java:234) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:114) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:158) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:39) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache.lambda$new$0(BoundedLocalCache.java:2949) ~[caffeine-2.2.6.jar:na]
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$15(BoundedLocalCache.java:1807) ~[caffeine-2.2.6.jar:na]
	at java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1853) ~[na:1.8.0_131]
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:1805) ~[caffeine-2.2.6.jar:na]
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:1788) ~[caffeine-2.2.6.jar:na]
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:97) ~[caffeine-2.2.6.jar:na]
	at com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:66) ~[caffeine-2.2.6.jar:na]
	at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:236) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:214) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:65) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:207) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:150) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.sstable.format.SSTableReader.getFileDataInput(SSTableReader.java:1807) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.columniterator.AbstractSSTableIterator.<init>(AbstractSSTableIterator.java:103) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.columniterator.SSTableIterator.<init>(SSTableIterator.java:49) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:72) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:65) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:100) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:982) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:693) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:670) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:504) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:423) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(ReadCommandVerbHandler.java:48) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:66) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_131]
	at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [apache-cassandra-3.11.5.jar:3.11.5]
	at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) [apache-cassandra-3.11.5.jar:3.11.5]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]
 {code};;;","24/Feb/20 16:31;yakir.g;Based on: [https://github.com/ben-manes/caffeine/issues/397#issuecomment-590406804]

""It looks like it’s trying to read offheap but has an incorrect address offset."";;;","25/Feb/20 12:56;yakir.g;Also change: ""memtable_allocation_type: heap_buffers"" didn't help.;;;","25/Feb/20 16:09;yakir.g;[~brandon.williams] do you have idea how to debug that error?;;;","25/Feb/20 16:13;brandon.williams;Since this is coming from a client query which must be receiving an error, is there any way you can tell which one and perhaps the schema for what it's querying?  If we can get a simple reproduction that would help a lot.;;;","25/Feb/20 16:55;yakir.g;Don't see errors from application side, only from C* side.

The command the out application running:
{code:java}
SELECT data FROM ud.i_s WHERE user_id=?;
SELECT data FROM ud.i_g WHERE user_id=?;
INSERT INTO ud.i_s (user_id,data) VALUES (?,?) USING TTL 7776000;
INSERT INTO ud.i_g (user_id,data) VALUES (?,?) USING TTL 7776000;' {code}
Our metadata:
{code:java}
CREATE TABLE ud.i_g (
    user_id blob PRIMARY KEY,
    data blob
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy', 'compaction_window_size': '15', 'compaction_window_unit': 'DAYS', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '4', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.0
    AND default_time_to_live = 0
    AND gc_grace_seconds = 0
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = 'NONE';


CREATE TABLE ud.i_s (
    user_id blob PRIMARY KEY,
    data blob
) WITH bloom_filter_fp_chance = 0.05
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy', 'compaction_window_size': '15', 'compaction_window_unit': 'DAYS', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '4', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.0
    AND default_time_to_live = 0
    AND gc_grace_seconds = 0
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = 'NONE'; {code}
 ;;;","25/Feb/20 20:32;yakir.g;Unable to see which specific query causing the error, don't see errors in client side.

I see the errors only in C* log.

I tried to change slow_query_log_timeout_in_ms to 1 in order to catch all queries and don't see any problematic query that trigger the error.

[~brandon.williams] do you have idea how to get more details on the query that cause the error or which debug option can show that? 

Thanks.;;;","25/Feb/20 22:10;brandon.williams;You could turn on probabilistic tracing instead of the slow query log to capture all queries.  I'm surprised no clients are seeing an error though.  Are you seeing this exception anywhere else not rooted in SEPWorker?;;;","26/Feb/20 17:27;yakir.g;I see the errors only in C* logs, example of logs with TRACE:

{code}
TRACE [Native-Transport-Requests-106] 2020-02-26 12:19:47,836 DigestResolver.java:96 - resolve: 0 ms.
TRACE [Native-Transport-Requests-207] 2020-02-26 12:19:47,836 Message.java:685 - Received: QUERY INSERT INTO ud.i_s (user_id,data) VALUES (?,?) USING TTL 7776000;[pageSize = 1000], v=4/v4
TRACE [Native-Transport-Requests-210] 2020-02-26 12:19:47,833 MessagingService.java:942 - /1.2.3.5 sending READ to -946659607@/1.2.3.15
TRACE [Native-Transport-Requests-44] 2020-02-26 12:19:47,834 StorageProxy.java:1352 - Adding FWD message to -946659552@/1.2.3.22
TRACE [Native-Transport-Requests-28] 2020-02-26 12:19:47,836 ReadCallback.java:101 - Blockfor is 2; setting up requests to /1.2.3.3,/1.2.3.14
TRACE [Native-Transport-Requests-118] 2020-02-26 12:19:47,833 ReadCallback.java:101 - Blockfor is 2; setting up requests to /1.2.3.24,/1.2.3.23
TRACE [Native-Transport-Requests-18] 2020-02-26 12:19:47,833 StorageProxy.java:1357 - Sending message to -946659650@/1.2.3.25
TRACE [Native-Transport-Requests-127] 2020-02-26 12:19:47,824 StorageProxy.java:1352 - Adding FWD message to -946659949@/1.2.3.26
TRACE [Native-Transport-Requests-44] 2020-02-26 12:19:47,836 StorageProxy.java:1352 - Adding FWD message to -946659505@/1.2.3.27
TRACE [Native-Transport-Requests-28] 2020-02-26 12:19:47,836 AbstractReadExecutor.java:108 - reading data from /1.2.3.3
TRACE [Native-Transport-Requests-29] 2020-02-26 12:19:47,833 Message.java:704 - Responding: EMPTY RESULT, v=4/v4
TRACE [Native-Transport-Requests-18] 2020-02-26 12:19:47,836 StorageProxy.java:1352 - Adding FWD message to -946659504@/1.2.3.37
TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,834 ReadCallback.java:101 - Blockfor is 2; setting up requests to /1.2.3.24,/1.2.3.12
TRACE [Native-Transport-Requests-44] 2020-02-26 12:19:47,836 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946659502@/1.2.3.28
TRACE [Native-Transport-Requests-62] 2020-02-26 12:19:47,833 StorageProxy.java:1357 - Sending message to -946659698@/1.2.3.37
TRACE [MutationStage-87] 2020-02-26 12:19:47,834 MessagingService.java:942 - /1.2.3.5 sending REQUEST_RESPONSE to -946659658@/1.2.3.5
TRACE [Native-Transport-Requests-118] 2020-02-26 12:19:47,836 AbstractReadExecutor.java:108 - reading data from /1.2.3.24
TRACE [Native-Transport-Requests-5] 2020-02-26 12:19:47,834 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946659548@/1.2.3.29
TRACE [Native-Transport-Requests-64] 2020-02-26 12:19:47,833 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946659602@/1.2.3.30
TRACE [Native-Transport-Requests-3] 2020-02-26 12:19:47,833 MessagingService.java:942 - /1.2.3.5 sending READ to -946659600@/1.2.3.17
ERROR [ReadStage-110] 2020-02-26 12:19:47,836 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[ReadStage-110,5,main]
java.lang.AssertionError: Illegal bounds [-1777439288..-1777439280); size: 2761628520
        at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:345) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.Memory.getLong(Memory.java:254) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(CompressionMetadata.java:234) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:114) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:158) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:39) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache.lambda$new$0(BoundedLocalCache.java:2949) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$15(BoundedLocalCache.java:1807) ~[caffeine-2.2.6.jar:na]
        at java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1853) ~[na:1.8.0-zing_19.12.102.0]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:1805) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:1788) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:97) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:66) ~[caffeine-2.2.6.jar:na]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:236) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:214) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:65) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:207) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:150) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.getPosition(BigTableReader.java:251) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(SSTableReader.java:1586) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:64) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:100) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:982) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:693) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:670) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:504) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:423) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1874) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2584) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0-zing_19.12.102.0]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) [apache-cassandra-3.11.6.jar:3.11.6]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0-zing_19.12.102.0]



TRACE [Native-Transport-Requests-118] 2020-02-26 12:19:47,804 DigestResolver.java:70 - resolving 2 responses
TRACE [Native-Transport-Requests-39] 2020-02-26 12:19:47,803 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946660789@/1.2.3.31
TRACE [Native-Transport-Requests-11] 2020-02-26 12:19:47,804 AbstractReadExecutor.java:108 - reading digest from /1.2.3.12
TRACE [Native-Transport-Requests-81] 2020-02-26 12:19:47,805 Message.java:685 - Received: QUERY SELECT data FROM ud.i_g WHERE user_id=?;[pageSize = 1000], v=4/v4
TRACE [Native-Transport-Requests-34] 2020-02-26 12:19:47,802 StorageProxy.java:1352 - Adding FWD message to -946660827@/1.2.3.8
TRACE [Native-Transport-Requests-53] 2020-02-26 12:19:47,805 AbstractReadExecutor.java:108 - reading data from /1.2.3.15
TRACE [Native-Transport-Requests-6] 2020-02-26 12:19:47,804 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946660724@/1.2.3.9
TRACE [Native-Transport-Requests-41] 2020-02-26 12:19:47,804 StorageProxy.java:1352 - Adding FWD message to -946660725@/1.2.3.10
TRACE [Native-Transport-Requests-39] 2020-02-26 12:19:47,806 StorageProxy.java:1357 - Sending message to -946660789@/1.2.3.31
TRACE [Native-Transport-Requests-20] 2020-02-26 12:19:47,805 StorageProxy.java:1357 - Sending message to -946660731@/1.2.3.32
TRACE [Native-Transport-Requests-118] 2020-02-26 12:19:47,805 DigestResolver.java:96 - resolve: 0 ms.
TRACE [Native-Transport-Requests-81] 2020-02-26 12:19:47,806 QueryProcessor.java:220 - Process org.apache.cassandra.cql3.statements.SelectStatement@4a8290b3 @CL.LOCAL_QUORUM
TRACE [Native-Transport-Requests-128] 2020-02-26 12:19:47,803 AbstractReadExecutor.java:108 - reading digest from /1.2.3.14
TRACE [Native-Transport-Requests-132] 2020-02-26 12:19:47,798 StorageProxy.java:1352 - Adding FWD message to -946660976@/11.2.3.33
TRACE [Native-Transport-Requests-11] 2020-02-26 12:19:47,806 MessagingService.java:942 - /1.2.3.5 sending READ to -946660674@/1.2.3.12
TRACE [Native-Transport-Requests-59] 2020-02-26 12:19:47,804 StorageProxy.java:1352 - Adding FWD message to -946660723@/1.2.3.34
ERROR [ReadStage-97] 2020-02-26 12:19:47,804 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[ReadStage-97,5,main]
java.lang.AssertionError: Illegal bounds [-1642545424..-1642545416); size: 2761628520
        at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:345) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.Memory.getLong(Memory.java:254) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(CompressionMetadata.java:234) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:114) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:158) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:39) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache.lambda$new$0(BoundedLocalCache.java:2949) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$15(BoundedLocalCache.java:1807) ~[caffeine-2.2.6.jar:na]
        at java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1853) ~[na:1.8.0-zing_19.12.102.0]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:1805) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:1788) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:97) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:66) ~[caffeine-2.2.6.jar:na]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:236) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:214) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:65) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:207) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:150) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.getPosition(BigTableReader.java:251) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(SSTableReader.java:1586) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:64) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:100) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:982) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:693) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:670) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:504) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:423) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1874) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2584) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0-zing_19.12.102.0]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) [apache-cassandra-3.11.6.jar:3.11.6]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0-zing_19.12.102.0]


TRACE [Native-Transport-Requests-31] 2020-02-26 12:19:47,800 Message.java:685 - Received: QUERY SELECT data FROM ud.i_s WHERE user_id=?;[pageSize = 1000], v=4/v4
TRACE [Native-Transport-Requests-33] 2020-02-26 12:19:47,800 AbstractReadExecutor.java:108 - reading digest from /1.2.3.12
TRACE [Native-Transport-Requests-126] 2020-02-26 12:19:47,799 StorageProxy.java:1352 - Adding FWD message to -946660922@/1.2.3.13
TRACE [Native-Transport-Requests-135] 2020-02-26 12:19:47,799 ReadCallback.java:101 - Blockfor is 2; setting up requests to /1.2.3.5,/1.2.3.14
TRACE [Native-Transport-Requests-44] 2020-02-26 12:19:47,800 DigestResolver.java:70 - resolving 2 responses
TRACE [Native-Transport-Requests-89] 2020-02-26 12:19:47,799 DigestResolver.java:96 - resolve: 0 ms.
TRACE [Native-Transport-Requests-82] 2020-02-26 12:19:47,800 Tracing.java:188 - request complete
TRACE [Native-Transport-Requests-126] 2020-02-26 12:19:47,801 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946660864@/1.2.3.10
TRACE [Native-Transport-Requests-76] 2020-02-26 12:19:47,800 Message.java:685 - Received: QUERY SELECT data FROM ud.i_s WHERE user_id=?;[pageSize = 1000], v=4/v4
TRACE [Native-Transport-Requests-80] 2020-02-26 12:19:47,799 QueryProcessor.java:220 - Process org.apache.cassandra.cql3.statements.UpdateStatement@75665751 @CL.LOCAL_QUORUM
TRACE [ReadStage-112] 2020-02-26 12:19:47,801 BufferPool.java:124 - Requested buffer size 8.000KiB has been allocated directly due to lack of capacity
TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,799 DigestResolver.java:70 - resolving 2 responses
TRACE [Native-Transport-Requests-109] 2020-02-26 12:19:47,798 StorageProxy.java:1352 - Adding FWD message to -946660966@/1.2.3.11
TRACE [Native-Transport-Requests-76] 2020-02-26 12:19:47,801 QueryProcessor.java:220 - Process org.apache.cassandra.cql3.statements.SelectStatement@23ab710e @CL.LOCAL_QUORUM
TRACE [Native-Transport-Requests-96] 2020-02-26 12:19:47,799 QueryProcessor.java:220 - Process org.apache.cassandra.cql3.statements.SelectStatement@2ee6e329 @CL.LOCAL_QUORUM
TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,801 DigestResolver.java:96 - resolve: 0 ms.
TRACE [Native-Transport-Requests-107] 2020-02-26 12:19:47,798 QueryProcessor.java:220 - Process org.apache.cassandra.cql3.statements.SelectStatement@1442c147 @CL.LOCAL_QUORUM
TRACE [Native-Transport-Requests-13] 2020-02-26 12:19:47,797 ReadCallback.java:101 - Blockfor is 2; setting up requests to /1.2.3.12,/1.2.3.17
TRACE [Native-Transport-Requests-16] 2020-02-26 12:19:47,798 Message.java:704 - Responding: ROWS [data(ud, i_g), org.apache.cassandra.db.marshal.BytesType]
 | 121083ed7470f3ede4e2703977c2fac20a7f
---, v=4/v4
ERROR [ReadStage-116] 2020-02-26 12:19:47,799 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[ReadStage-116,5,main]
java.lang.AssertionError: Illegal bounds [-1646501592..-1646501584); size: 2761628520
        at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:345) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.Memory.getLong(Memory.java:254) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(CompressionMetadata.java:234) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:114) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:158) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:39) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache.lambda$new$0(BoundedLocalCache.java:2949) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$15(BoundedLocalCache.java:1807) ~[caffeine-2.2.6.jar:na]
        at java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1853) ~[na:1.8.0-zing_19.12.102.0]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:1805) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:1788) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:97) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:66) ~[caffeine-2.2.6.jar:na]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:236) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:214) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:65) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:207) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:150) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.getPosition(BigTableReader.java:251) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(SSTableReader.java:1586) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:64) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:100) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:982) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:693) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:670) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:504) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:423) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1874) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2584) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0-zing_19.12.102.0]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) [apache-cassandra-3.11.6.jar:3.11.6]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0-zing_19.12.102.0]




TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,801 ReadCallback.java:147 - Read: 13 ms.
TRACE [Native-Transport-Requests-57] 2020-02-26 12:19:47,795 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946661060@/1.2.3.4
TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,801 Tracing.java:188 - request complete
TRACE [Native-Transport-Requests-96] 2020-02-26 12:19:47,801 ReadCallback.java:101 - Blockfor is 2; setting up requests to /1.2.3.3,/1.2.3.6
TRACE [Native-Transport-Requests-23] 2020-02-26 12:19:47,793 AbstractReadExecutor.java:108 - reading digest from /1.2.3.17
TRACE [Native-Transport-Requests-23] 2020-02-26 12:19:47,793 AbstractReadExecutor.java:108 - reading digest from /1.2.3.17
TRACE [Native-Transport-Requests-85] 2020-02-26 12:19:47,793 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946661140@/1.2.3.7
TRACE [Native-Transport-Requests-4] 2020-02-26 12:19:47,792 DigestResolver.java:70 - resolving 2 responses
TRACE [Native-Transport-Requests-52] 2020-02-26 12:19:47,793 MessagingService.java:942 - /1.2.3.5 sending READ to -946661138@/1.2.3.17
TRACE [PerDiskMemtableFlushWriter_0:1100] 2020-02-26 12:19:47,793 BigTableWriter.java:473 - wrote index entry: org.apache.cassandra.db.RowIndexEntry@18b05153 at 5162975
TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,790 AbstractReadExecutor.java:108 - reading data from /1.2.3.15
TRACE [Native-Transport-Requests-64] 2020-02-26 12:19:47,786 AbstractReadExecutor.java:108 - reading data from /1.2.3.14
TRACE [Native-Transport-Requests-58] 2020-02-26 12:19:47,792 AbstractReadExecutor.java:116 - reading data locally
TRACE [Native-Transport-Requests-85] 2020-02-26 12:19:47,793 StorageProxy.java:1357 - Sending message to -946661140@/1.2.3.7
TRACE [Native-Transport-Requests-45] 2020-02-26 12:19:47,792 MessagingService.java:942 - /1.2.3.5 sending READ to -946661199@/1.2.3.3
TRACE [Native-Transport-Requests-49] 2020-02-26 12:19:47,793 StorageProxy.java:1352 - Adding FWD message to -946661142@/1.2.3.8
TRACE [Native-Transport-Requests-44] 2020-02-26 12:19:47,793 Message.java:685 - Received: QUERY SELECT data FROM ud.i_g WHERE user_id=?;[pageSize = 1000], v=4/v4
TRACE [Native-Transport-Requests-73] 2020-02-26 12:19:47,793 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946661143@/1.2.3.16
TRACE [Native-Transport-Requests-105] 2020-02-26 12:19:47,787 StorageProxy.java:1352 - Adding FWD message to -946661340@/1.2.3.35
TRACE [Native-Transport-Requests-22] 2020-02-26 12:19:47,793 MessagingService.java:942 - /1.2.3.5 sending READ to -946661135@/1.2.3.15
TRACE [Native-Transport-Requests-92] 2020-02-26 12:19:47,792 AbstractReadExecutor.java:108 - reading digest from /1.2.3.17
TRACE [Native-Transport-Requests-69] 2020-02-26 12:19:47,793 AbstractReadExecutor.java:108 - reading digest from /1.2.3.4
TRACE [Native-Transport-Requests-58] 2020-02-26 12:19:47,793 AbstractReadExecutor.java:108 - reading digest from /1.2.3.6
TRACE [Native-Transport-Requests-64] 2020-02-26 12:19:47,793 MessagingService.java:942 - /1.2.3.5 sending READ to -946661134@/1.2.3.14
TRACE [Native-Transport-Requests-48] 2020-02-26 12:19:47,793 StorageProxy.java:1357 - Sending message to -946661250@/1.2.3.18
TRACE [Native-Transport-Requests-73] 2020-02-26 12:19:47,793 StorageProxy.java:1357 - Sending message to -946661143@/1.2.3.16
TRACE [Native-Transport-Requests-1] 2020-02-26 12:19:47,792 StorageProxy.java:1352 - Adding FWD message to -946661189@/1.2.3.36
TRACE [Native-Transport-Requests-132] 2020-02-26 12:19:47,787 MessagingService.java:942 - /1.2.3.5 sending MUTATION to -946661332@/1.2.3.19
TRACE [Native-Transport-Requests-103] 2020-02-26 12:19:47,792 AbstractReadExecutor.java:108 - reading digest from /1.2.3.6
TRACE [Native-Transport-Requests-48] 2020-02-26 12:19:47,793 Tracing.java:188 - request complete
TRACE [Native-Transport-Requests-114] 2020-02-26 12:19:47,789 StorageProxy.java:1352 - Adding FWD message to -946661292@/1.2.3.20
TRACE [ReadStage-9] 2020-02-26 12:19:47,784 BufferPool.java:124 - Requested buffer size 4.000KiB has been allocated directly due to lack of capacity
TRACE [Native-Transport-Requests-73] 2020-02-26 12:19:47,793 StorageProxy.java:1352 - Adding FWD message to -946661127@/1.2.3.21
ERROR [ReadStage-67] 2020-02-26 12:19:47,790 AbstractLocalAwareExecutorService.java:169 - Uncaught exception on thread Thread[ReadStage-67,10,main]
java.lang.AssertionError: Illegal bounds [-2109842656..-2109842648); size: 2761628520
        at org.apache.cassandra.io.util.Memory.checkBounds(Memory.java:345) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.Memory.getLong(Memory.java:254) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(CompressionMetadata.java:234) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.CompressedChunkReader$Standard.readChunk(CompressedChunkReader.java:114) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:158) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache.load(ChunkCache.java:39) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache.lambda$new$0(BoundedLocalCache.java:2949) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$15(BoundedLocalCache.java:1807) ~[caffeine-2.2.6.jar:na]
        at java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1853) ~[na:1.8.0-zing_19.12.102.0]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:1805) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:1788) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:97) ~[caffeine-2.2.6.jar:na]
        at com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:66) ~[caffeine-2.2.6.jar:na]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:236) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.cache.ChunkCache$CachingRebufferer.rebuffer(ChunkCache.java:214) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.reBufferAt(RandomAccessReader.java:65) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.RandomAccessReader.seek(RandomAccessReader.java:207) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.util.FileHandle.createReader(FileHandle.java:150) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.getPosition(BigTableReader.java:251) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(SSTableReader.java:1586) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(BigTableReader.java:64) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.StorageHook$1.makeRowIterator(StorageHook.java:100) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(SinglePartitionReadCommand.java:982) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(SinglePartitionReadCommand.java:693) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(SinglePartitionReadCommand.java:670) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(SinglePartitionReadCommand.java:504) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:423) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1874) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2584) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0-zing_19.12.102.0]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:165) ~[apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask.run(AbstractLocalAwareExecutorService.java:137) [apache-cassandra-3.11.6.jar:3.11.6]
        at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:113) [apache-cassandra-3.11.6.jar:3.11.6]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0-zing_19.12.102.0]
{code};;;","26/Feb/20 18:06;brandon.williams;I didn't mean TRACE, but probabilistic tracing, as in `nodetool settraceprobability` to capture the queries.;;;","09/Mar/20 13:09;roy.b;[~brandon.williams] - can you direct us what info you need in order to debug this issue ?;;;","09/Mar/20 13:09;roy.b;[~brandon.williams] - can you direct us what info you need in order to debug this issue ?;;;","11/Mar/20 00:35;brandon.williams;If you can provide a simple reproduction, that will go a long way.  Currently I'm not able to reproduce and none of the tests are encountering it.;;;","22/Apr/20 21:03;Piotr Rybicki;I can confirm this error is happening on given C* version.

In my case, it is happening only on 1 node, and looks not really conencted with queries that error-out

java.lang.AssertionError: Illegal bounds [-1898968624..-1898968616); size: 2951323200 (...)

Size is always the same. Bounds are always different and always negative. Difference is always 8

Isn't it about that those values are negative?
 [https://github.com/apache/cassandra/blob/cassandra-3.11.6/src/java/org/apache/cassandra/io/util/Memory.java#L345];;;","22/Apr/20 21:11;Piotr Rybicki;$ java -version
openjdk version ""1.8.0_242""
OpenJDK Runtime Environment (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)
OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)

^^^ on all C* nodes. Yet just 1 node started to spit those Illegal bounds assertions errors in log.;;;","26/Apr/20 17:57;jasonstack;patch: [trunk|https://github.com/jasonstack/cassandra/commits/CASSANDRA-15595-trunk] | [3.11|https://github.com/jasonstack/cassandra/commits/CASSANDRA-15595-3.11] | [3.0|https://github.com/jasonstack/cassandra/commits/CASSANDRA-15595-3.0]

 
Assuming primary index is not corrupted, the error should be caused by chunk index INT overflow on a large sstable with small compression chunk length (4kb as shown in the schema).

The patch changes chunk index ""idx""  from INT to LONG and added an unit test to reproduce the error.

Also added fix version ""4.0-beta"", because it's more likely to hit this error in 4.0 which reduces compression chunk length from 64k to 16k.

 ;;;","27/Apr/20 08:58;Piotr Rybicki;Thanks. Checking that.

That indeed has to be the reason.
I'm also on 4K compression chunk length. Also this problematic node has huge (5TB) data on just 1 storage there. Other nodes have many smaller disks, and does not produce those ""Illegal bounds"" errors.

Will let U know shortly, if that patch fixes problem for me.;;;","27/Apr/20 12:54;Piotr Rybicki;Ok, I confirm, that this patch solves my 'Illegal bounds' problem on C* 3.11.6

Thank You!;;;","27/Apr/20 14:18;jasonstack;[~brandon.williams] do you mind reviewing?;;;","27/Apr/20 16:24;brandon.williams;Committed, thanks!;;;","27/Apr/20 16:35;jasonstack;[~brandon.williams] thanks for the review;;;","28/Apr/20 06:52;yakir.g;Thank you [~jasonstack] and [~brandon.williams];;;",,,,,,,,,,,,,,,,,,,,,
IllegalStateException in gossip after removing node,CASSANDRA-15592,13286455,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,molsson,molsson,molsson,20/Feb/20 12:05,07/Jul/20 15:16,13/Jul/23 08:39,21/Feb/20 15:23,3.0.21,3.11.7,4.0,4.0-alpha4,,Cluster/Gossip,,,,0,,,,"In one of our test environments we encountered the following exception:
{noformat}
2020-02-02T10:50:13.276+0100 [GossipTasks:1] ERROR o.a.c.u.NoSpamLogger$NoSpamLogStatement:97 log java.lang.IllegalStateException: Attempting gossip state mutation from illegal thread: GossipTasks:1
 at org.apache.cassandra.gms.Gossiper.checkProperThreadForStateMutation(Gossiper.java:178)
 at org.apache.cassandra.gms.Gossiper.evictFromMembership(Gossiper.java:465)
 at org.apache.cassandra.gms.Gossiper.doStatusCheck(Gossiper.java:895)
 at org.apache.cassandra.gms.Gossiper.access$700(Gossiper.java:78)
 at org.apache.cassandra.gms.Gossiper$GossipTask.run(Gossiper.java:240)
 at org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable.run(DebuggableScheduledThreadPoolExecutor.java:118)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:84)
 at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
 at java.lang.Thread.run(Thread.java:748)
java.lang.IllegalStateException: Attempting gossip state mutation from illegal thread: GossipTasks:1
 at org.apache.cassandra.gms.Gossiper.checkProperThreadForStateMutation(Gossiper.java:178) [apache-cassandra-3.11.5.jar:3.11.5]
 at org.apache.cassandra.gms.Gossiper.evictFromMembership(Gossiper.java:465) [apache-cassandra-3.11.5.jar:3.11.5]
 at org.apache.cassandra.gms.Gossiper.doStatusCheck(Gossiper.java:895) [apache-cassandra-3.11.5.jar:3.11.5]
 at org.apache.cassandra.gms.Gossiper.access$700(Gossiper.java:78) [apache-cassandra-3.11.5.jar:3.11.5]
 at org.apache.cassandra.gms.Gossiper$GossipTask.run(Gossiper.java:240) [apache-cassandra-3.11.5.jar:3.11.5]
 at org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable.run(DebuggableScheduledThreadPoolExecutor.java:118) [apache-cassandra-3.11.5.jar:3.11.5]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_231]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_231]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_231]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_231]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
 at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:84) [apache-cassandra-3.11.5.jar:3.11.5]
 at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-all-4.1.42.Final.jar:4.1.42.Final]
 at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_231]
{noformat}
Since CASSANDRA-15059 we check that all state changes are performed in the GossipStage but it seems like it was still performed in the ""current"" thread [here|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/gms/Gossiper.java#L895]. It should be as simple as adding a
{code:java}
runInGossipStageBlocking(() ->)
{code}
for it.

I'll upload patches for 3.0, 3.11 and 4.0.
  ",,brandon.williams,jaid,molsson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,molsson,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Jul 07 15:16:07 UTC 2020,,,,,,,All,,,,,,"0|z0bozk:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.0.19,,,https://github.com/apache/cassandra/commit/c2bca69734253bea01bab59285df2b3ab0e571cb,,,,,,,,,test added,,,,,"20/Feb/20 12:55;molsson;|[3.0|https://github.com/emolsson/cassandra/tree/CASSANDRA-15592-3.0]|
|[3.11|https://github.com/emolsson/cassandra/tree/CASSANDRA-15592-3.11]|
|[4.0|https://github.com/emolsson/cassandra/tree/CASSANDRA-15592-4.0]|;;;","20/Feb/20 16:17;brandon.williams;Could you also add a test for this?;;;","21/Feb/20 12:16;molsson;Sure thing.

In order to get the test case small and to avoid starting up the full Gossiper I modified ""doStatusCheck()"" to package-private (with @VisibleForTesting).
The test case injects an application state for a ""remote"" node, marks it down, removes it and then adds an expiry time earlier than ""now"" before running ""doStatusCheck()"" so that it should be evicted.
I believe this should represent the state transition that has occurred but gossip state transitions are not my strong suite so please correct me if I'm wrong.

I'll update the branches shortly.;;;","21/Feb/20 12:50;molsson;The branches are updated. 3.11/4.0 contains an additional smaller patch with the difference in the test setup compared to 3.0.

Additionally I ran the test code on 3.0/3.11/4.0 without the patch and they all got the IllegalStateException mentioned in the ticket (example output from 3.11 below):
{noformat}
INFO  [GossipStage:1] 2020-02-21 13:48:47,395 Gossiper.java:1106 - InetAddress /127.0.0.2 is now DOWN
DEBUG [main] 2020-02-21 13:48:47,398 Gossiper.java:1746 - adding expire time for endpoint : /127.0.0.2 (1582289327272)
DEBUG [main] 2020-02-21 13:48:47,399 Gossiper.java:894 - time is expiring for endpoint : /127.0.0.2 (1582289327272)

java.lang.IllegalStateException: Attempting gossip state mutation from illegal thread: main

	at org.apache.cassandra.gms.Gossiper.checkProperThreadForStateMutation(Gossiper.java:178)
	at org.apache.cassandra.gms.Gossiper.evictFromMembership(Gossiper.java:465)
	at org.apache.cassandra.gms.Gossiper.doStatusCheck(Gossiper.java:896)
	at org.apache.cassandra.gms.ExpireEndpointTest.testExpireEndpoint(ExpireEndpointTest.java:59)
...
{noformat};;;","21/Feb/20 15:23;brandon.williams;Committed, thanks!;;;","07/Jul/20 00:30;jaid;Hello [~brandon.williams]

I ran into the similar Exception, is there any impact of this ERROR or this is just more of logging problem? in my tests I didn't see any impact to the cluster operations. so I would like to know the impact of this before even attempting to upgrade in production 

 ;;;","07/Jul/20 15:16;brandon.williams;The node would never get evicted.  In practice I don't think this is a huge problem, since it would just hang around in gossip uselessly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CQLSH missing virtual keyspaces on DESCRIBE call,CASSANDRA-15576,13285882,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,djoshi,djoshi,djoshi,18/Feb/20 03:29,21/Dec/20 08:07,13/Jul/23 08:39,18/Feb/20 19:33,4.0,4.0-alpha4,,,,Tool/cqlsh,,,,0,,,,"cqlsh is missing virtual keyspaces. This patch fixes it. It also adds a dtest to avoid future regressions. [Branch|https://github.com/dineshjoshi/cassandra/tree/fix-missing-keyspace-issue-cqlsh], [DTests|https://github.com/dineshjoshi/cassandra-dtest-1/tree/fix-missing-keyspace-issue-cqlsh]  and [CI|https://circleci.com/workflow-run/b978fe37-98a8-482b-89bf-f7b6c8c41a40].",,dcapwell,djoshi,rustyrazorblade,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-14872,,,,CASSANDRA-15578,,,,,,,,,,,,,,,,,,,,,,,0.0,djoshi,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Feb 18 19:33:17 UTC 2020,,,,,,,All,,,,,,"0|z0blg8:",9223372036854775807,,,,dcapwell,rustyrazorblade,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/4e0fccc3ed1fded5ad72dfdfcad37a5ccdfc9a24,,,,,,,,,DTest added to catch future issues.,,,,,"18/Feb/20 16:54;rustyrazorblade;Looks simple enough, very nice.  Could you add a test to prevent a future regression?;;;","18/Feb/20 17:28;djoshi;[~rustyrazorblade] thanks for the review. Forgot to link the dtest. Can you please take a look?;;;","18/Feb/20 17:38;dcapwell;Code LGTM, the test LGTM; will this prevent a regression if we add a third type?  No, but fixing that is a much larger change.

Going to start testing this now.;;;","18/Feb/20 17:47;dcapwell;In testing it looks like this isn't enough

{code}
 $ ./bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 4.0-alpha4-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]
Use HELP for help.
cqlsh> describe keyspace;
Not in any keyspace.
cqlsh> describe keyspaces;

system_traces  system_auth  system_distributed     system_views
system_schema  system       system_virtual_schema

cqlsh> use system_views;
cqlsh:system_views> describe keyspace;

'NoneType' object has no attribute 'export_for_schema'
{code}

This looks like the other jira CASSANDRA-14872.  Now, looking at that JIRA the TODO implies that upgrading would actually fix the issue.

[~djoshi] is the intent that this is to unblock trunk until CASSANDRA-14872 happens?  Kinda feel it would be best to have one JIRA which makes sure vtables work with cqlsh.;;;","18/Feb/20 17:58;djoshi;The driver fixes is a bigger issue which I will tackle as a follow on.

For this specific issue, the test ensures that the current set of system keyspaces exist in the cqlsh output. If someone adds a new table without updating the test, it will break the test and they would need to update it. If you don't have any other issues, I'll go ahead and close this and address the driver issue as a follow up to this.;;;","18/Feb/20 19:22;dcapwell;+1 to the test

I am ok closing this and having CASSANDRA-14872 fix this issue.;;;","18/Feb/20 19:33;djoshi;Thanks [~rustyrazorblade] and [~dcapwell]. Committed to both [cassandra|https://github.com/apache/cassandra/commit/4e0fccc3ed1fded5ad72dfdfcad37a5ccdfc9a24] and [cassandra-dtest|https://github.com/apache/cassandra-dtest/commit/467192eb1e5b350e8b89009884b7c1acf9501470].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.tools.StandaloneVerifierTest.testStandaloneVerifier_WithArgs,CASSANDRA-15575,13285863,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dcapwell,dcapwell,17/Feb/20 22:22,15/May/20 08:55,13/Jul/23 08:39,21/Feb/20 20:07,4.0,4.0-alpha4,,,,Test/unit,Tool/sstable,,,0,,,,"Failure was seen on java 8.
{code}
java.lang.NullPointerException
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
	at org.apache.cassandra.tools.ToolsTester.assertNoUnexpectedThreadsStarted(ToolsTester.java:86)
	at org.apache.cassandra.tools.StandaloneVerifierTest.testStandaloneVerifier_WithArgs(StandaloneVerifierTest.java:45)
{code}",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Feb 21 18:58:24 UTC 2020,,,,,,,All,,,,,,"0|z0blc0:",9223372036854775807,,,,dcapwell,,,,Normal,,3.10,,,https://github.com/apache/cassandra/commit/dc8f94a653a3cdb963bcc781562bb2fe63dbc575,,,,,,,,,no test needed,,,,,"21/Feb/20 15:59;brandon.williams;There can be a thread returned in getAllThreadIds that dies before getThreadInfo is called on it, resulting in the NPE.  The simplest thing to do is just filter out nulls here, and the good news is this condition very rarely occurs, so whatever thread it is that is dying before we get its info, is safe as far as the test is concerned.  Patch to filter nulls here: https://github.com/driftx/cassandra/tree/CASSANDRA-15575;;;","21/Feb/20 18:55;dcapwell;{code}
/**
     * Returns the thread info for each thread
     * whose ID is in the input array <tt>ids</tt> with no stack trace.
     * This method is equivalent to calling:
     * <blockquote><pre>
     *   {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0);
     * </pre></blockquote>
     *
     * <p>
     * This method returns an array of the <tt>ThreadInfo</tt> objects.
     * The stack trace, locked monitors, and locked synchronizers
     * in each <tt>ThreadInfo</tt> object will be empty.
     *
     * If a thread of a given ID is not alive or does not exist,
     * the corresponding element in the returned array will
     * contain <tt>null</tt>.  A thread is alive if
     * it has been started and has not yet died.
     *
     * <p>
     * <b>MBeanServer access</b>:<br>
     * The mapped type of <tt>ThreadInfo</tt> is
     * <tt>CompositeData</tt> with attributes as specified in the
     * {@link ThreadInfo#from ThreadInfo.from} method.
     *
     * @param ids an array of thread IDs.
     * @return an array of the {@link ThreadInfo} objects, each containing
     * information about a thread whose ID is in the corresponding
     * element of the input array of IDs
     * with no stack trace, no locked monitor and no synchronizer info.
     *
     * @throws IllegalArgumentException if any element in the input array
     *         <tt>ids</tt> is {@code <= 0}.
     * @throws java.lang.SecurityException if a security manager
     *         exists and the caller does not have
     *         ManagementPermission(""monitor"").
     */
    public ThreadInfo[] getThreadInfo(long[] ids);
{code}

The documented behavior is null means not found, so the filter LGTM

+1;;;","21/Feb/20 18:55;dcapwell;going to run the tests real quick;;;","21/Feb/20 18:58;dcapwell;{code}
testclasslist:
     [echo] Number of test runners: 1
    [mkdir] Created dir: /Users/davidcapwell/Downloads/cassandra-CASSANDRA-15575/build/test/cassandra
    [mkdir] Created dir: /Users/davidcapwell/Downloads/cassandra-CASSANDRA-15575/build/test/output
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.tools.StandaloneVerifierTest
[junit-timeout] Testsuite: org.apache.cassandra.tools.StandaloneVerifierTest Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.887 sec
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
`object of type 'NoneType' has no len()` error in cqlsh with python 3,CASSANDRA-15572,13285655,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yukim,yukim,yukim,16/Feb/20 22:51,15/May/20 08:41,13/Jul/23 08:39,07/Apr/20 23:26,4.0,4.0-alpha4,,,,Tool/cqlsh,,,,0,,,,"Looks like in Python 3, webbrowser._tryorder can be NoneType and throw error like below:

{code}
Traceback (most recent call last):
  File "".\bin\cqlsh.py"", line 99, in <module>
    if len(webbrowser._tryorder) == 0:
TypeError: object of type 'NoneType' has no len()
{code}",,djoshi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yukim,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Apr 07 23:26:40 UTC 2020,,,,,,,All,,,,,,"0|z0bk1s:",9223372036854775807,,,,djoshi,,,,Low,,4.0,,,https://github.com/apache/cassandra/commit/d069fd235f3553ef6e3267efc9cf3b9b2fe4e70e,,,,,,,,,Manual testing,,,,,"16/Feb/20 23:24;yukim;Pull request here: https://github.com/apache/cassandra/pull/448;;;","17/Feb/20 00:37;djoshi;Hi [~yukim] thanks for reporting this issue and the patch. I am guessing you're using Python 3.7. The webbrowser module on [Python 3.7|https://github.com/python/cpython/blob/3.7/Lib/webbrowser.py#L19] has changed its behavior since [Python 3.6|https://github.com/python/cpython/blob/3.6/Lib/webbrowser.py#L17]. I've not tried testing cqlsh on Python 3.7. The max version we've tested cqlsh is Python 3.6. There are some subtle 3.6 vs 3.7 issues that we might run into. If we do expect to support Python 3.7, we should also update running cqlsh tests on Python 3.7. Currently our test environments are on Python 3.6.;;;","19/Feb/20 00:16;djoshi;Yuki, there is a version check in the shell script. However, looks like that check doesn't exist on Windows. So folks with access to a bash shell will not see this issue. However you'll see it on Windows. Do you want to add the version check to {{cqlsh.bat}} as part of your patch? I am not uptodate with DOS batch file programming ;).;;;","06/Apr/20 05:41;yukim;I think we can just commit the patch and see if we can progress further to explore python 3.7+.

If we need to patch cqlsh.bat, I will create the separate ticket.;;;","07/Apr/20 23:25;djoshi;+1;;;","07/Apr/20 23:26;djoshi;Committed. Thanks for the patch [~yukim];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StorageProxy updateCoordinatorWriteLatencyTableMetric can produce misleading metrics,CASSANDRA-15569,13284913,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,12/Feb/20 19:54,21/Dec/20 08:07,13/Jul/23 08:39,14/Feb/20 21:49,4.0,4.0-alpha4,,,,Consistency/Coordination,Legacy/Local Write-Read Paths,Observability/Metrics,,0,pull-request-available,,,"If multiple mutations affect the same table, then metrics will get posted multiple times to the same table.

[Circle CI|https://circleci.com/gh/dcapwell/cassandra/tree/coordinatorWriterMetricDoubleCounts]",,bdeggleston,dcapwell,,,,,,,,,,"dcapwell commented on pull request #445: CASSANDRA-15569 StorageProxy updateCoordinatorWriteLatencyTableMetric can produce misleading metrics
URL: https://github.com/apache/cassandra/pull/445
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/20 19:56;githubbot;600","dcapwell commented on pull request #445: CASSANDRA-15569 StorageProxy updateCoordinatorWriteLatencyTableMetric can produce misleading metrics
URL: https://github.com/apache/cassandra/pull/445#discussion_r378543777
 
 

 ##########
 File path: test/unit/org/apache/cassandra/metrics/TableMetricsTest.java
 ##########
 @@ -87,31 +95,39 @@ private void executeBatch(boolean isLogged, int distinctPartitions, int statemen
 
         BatchStatement batch = new BatchStatement(batchType);
 
+        for (String table : tables)
+            populateBatch(batch, table, distinctPartitions, statementsPerPartition);
+
+        session.execute(batch);
+    }
+
+    private static void populateBatch(BatchStatement batch, String table, int distinctPartitions, int statementsPerPartition)
+    {
+        PreparedStatement ps = session.prepare(String.format(""INSERT INTO %s.%s (id, val1, val2) VALUES (?, ?, ?);"", KEYSPACE, table));
+
         for (int i=0; i<distinctPartitions; i++)
         {
             for (int j=0; j<statementsPerPartition; j++)
             {
                 batch.add(ps.bind(i, j + ""a"", ""b""));
             }
         }
-
-        session.execute(batch);
     }
 
     @Test
     public void testRegularStatementsExecuted()
     {
         ColumnFamilyStore cfs = recreateTable();
         assertEquals(0, cfs.metric.coordinatorWriteLatency.getCount());
-        assertTrue(cfs.metric.coordinatorWriteLatency.getMeanRate() == 0);
+        assertEquals(0.0, cfs.metric.coordinatorWriteLatency.getMeanRate(), 0.0);
 
 Review comment:
   the reason for this change is `assertTrue` has really bad error messages; with `assertEquals` we know what the mean rate will be
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Feb/20 22:13;githubbot;600","dcapwell commented on pull request #445: CASSANDRA-15569 StorageProxy updateCoordinatorWriteLatencyTableMetric can produce misleading metrics
URL: https://github.com/apache/cassandra/pull/445
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 16:39;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Feb 14 21:49:07 UTC 2020,,,,,,,All,,,,,,"0|z0bfgw:",9223372036854775807,,,,bdeggleston,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/247502c5d19c181bbe0a224da3ad6ebd0156f607,,,,,,,,,jvm dtests added which check JMX,,,,,"12/Feb/20 19:59;dcapwell;[~sumanth.pasupuleti] [~jay.zhuang] or [~jasobrown] could you take a look?  This is mostly trying to fix the TODO comment from CASSANDRA-14232;;;","12/Feb/20 20:05;dcapwell;The test needs to be refactored to clean up, but was hoping others knew how to write it as a unit test outside of jvm dtest; hence why I didn't bother yet =D;;;","12/Feb/20 21:39;dcapwell;Ok, looks like there is a test org.apache.cassandra.metrics.TableMetricsTest which tests to make sure we double count.  Ill try to remove my dtest test in favor of this, and will update the test to make sure we don't double count.;;;","12/Feb/20 22:10;dcapwell;Pushed a change to fix TableMetricsTest so we stop verifying that we double count and instead that it only happens one time per batch.  Also added tests for multiple tables in one batch; dropped dtest since its a duplicate.;;;","14/Feb/20 17:42;dcapwell;[~ifesdjeen] could you take a look?  [~djoshi]?;;;","14/Feb/20 21:49;bdeggleston;+1, this fixes the potential double counting issue. Committed to trunk as [247502c5d19c181bbe0a224da3ad6ebd0156f607 |https://github.com/apache/cassandra/commit/247502c5d19c181bbe0a224da3ad6ebd0156f607]

It wouldn’t be a bad idea to revisit whether we we want to update this metric on failed or speculated reads (or writes). We want to speculate if it looks like a read won’t be responded to quickly. Using the latency of reads that have been speculated on, needed read repair, or timed out to inform our decision seems like it would artificially inflate this number. It may turn out that this is intentional, but it would be nice to have a comment explaining this if that’s the case.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.index.internal.CassandraIndexTest indexCorrectlyMarkedAsBuildAndRemoved,CASSANDRA-15565,13284457,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jorgebg,dcapwell,dcapwell,11/Feb/20 01:06,15/May/20 08:55,13/Jul/23 08:39,11/Mar/20 10:40,3.0.21,3.11.7,4.0,4.0-alpha4,,Test/unit,,,,0,pull-request-available,,,"{code}
junit.framework.AssertionFailedError: Got more rows than expected. Expected 1 but got 4.
	at org.apache.cassandra.cql3.CQLTester.assertRows(CQLTester.java:1098)
	at org.apache.cassandra.index.internal.CassandraIndexTest.indexCorrectlyMarkedAsBuildAndRemoved(CassandraIndexTest.java:499)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

The failure was seen on java 11.",,dcapwell,jorgebg,jwest,samt,,,,,,,,"jorgebay commented on pull request #461: CASSANDRA-15565 Use result size for index built test
URL: https://github.com/apache/cassandra/pull/461
 
 
   Use a before and after size comparison to avoid failing as a result of another test failure.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Mar/20 10:40;githubbot;600","jorgebay commented on issue #461: CASSANDRA-15565 Use result size for index built test
URL: https://github.com/apache/cassandra/pull/461#issuecomment-597587952
 
 
   Landed in https://github.com/apache/cassandra/commit/c81d7dcc09fa1c35f190f0baad764fbe8a024679 .
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Mar/20 11:50;githubbot;600","jorgebay commented on pull request #461: CASSANDRA-15565 Use result size for index built test
URL: https://github.com/apache/cassandra/pull/461
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Mar/20 11:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-10601,,,,,,,,,,,,,,,,,,,,,,,0.0,jorgebg,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 30 01:47:25 UTC 2020,,,,,,,All,,,,,,"0|z0bcnk:",9223372036854775807,,,,samt,,,,Normal,,3.0.0,,,https://github.com/apache/cassandra/commit/c81d7dcc09fa1c35f190f0baad764fbe8a024679,,,,,,,,,The fix involves using a before/after size comparison to avoid failing as a result of another test failure.,,,,,"03/Mar/20 13:16;jorgebg;I've been trying to reproduce with no luck. I've run the test and the suite in loop in CircleCI:
 - [https://circleci.com/gh/jorgebay/cassandra/7]
 - [https://circleci.com/gh/jorgebay/cassandra/12]

I've also run it in loop in my local machine.

From the error message in the ticket, it's related to the initial condition of the test, it expects no other index present. The failure is mostly due to an issue with the cleanup of a prior test.
 I'll submit a patch -using {{KEYSPACE_PER_TEST}}-, that way it will less likely to fail in cascade after another test.;;;","04/Mar/20 10:49;jorgebg;[PR|https://github.com/apache/cassandra/pull/461] and [CI|https://app.circleci.com/pipelines/github/jorgebay/cassandra?branch=CASSANDRA-15565-fix].;;;","11/Mar/20 10:40;samt;Thanks, looks good to me. I've made a small addition to your patch to verify that when dropped, the index is removed from the built indexes table. From the name, it seemed like that should've been part of the test all along. I've committed to 3.0 and merged to 3.11 & trunk.;;;","30/Apr/20 01:47;jwest;While reviewing an unrelated patch today I came across a new but similar failure in this test: https://circleci.com/gh/jrwest/cassandra/429#tests/containers/56;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport removal of OpenJDK warning log,CASSANDRA-15563,13284421,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,blerer,tsteinmaurer,tsteinmaurer,10/Feb/20 22:13,11/Jan/21 17:12,13/Jul/23 08:39,11/Jan/21 17:12,2.2.20,3.0.24,,,,Local/Startup and Shutdown,,,,1,lhf,,,"As requested on ASF Slack, creating this ticket for a backport of CASSANDRA-13916 for 3.0.",,blerer,brandon.williams,kkierer,tsteinmaurer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-13916,,,,,,,,,,,,,,,,,,,,,,,0.0,blerer,,,,,,,,,,,,,,,,,,,,Operability,Low Hanging Fruit,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jan 11 17:12:22 UTC 2021,,,,,,,All,,,,,,"0|z0bcfk:",9223372036854775807,,,,blerer,brandon.williams,,,,,2.2.0,,,https://github.com/apache/cassandra/commit/b5f52bfd0e4d77c44aa94996ab4589ecec99dbec,,,,,,,,,Manual testing,,,,,"11/Jan/21 14:18;blerer;|| PR || CI ||
| [cassandra-3.0|https://github.com/apache/cassandra/pull/866] | [j8|https://app.circleci.com/pipelines/github/blerer/cassandra?branch=CASSANDRA-15563-3.0] | 
| [cassandra-2.2|https://github.com/apache/cassandra/pull/865/] | [j8|https://app.circleci.com/pipelines/github/blerer/cassandra?branch=CASSANDRA-15563-2.2] | ;;;","11/Jan/21 14:32;brandon.williams;+1;;;","11/Jan/21 16:36;blerer;[~brandon.williams] Thanks for the review.;;;","11/Jan/21 17:12;blerer;Committed into cassandra-2.2 and merged into cassandra-3.0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.db.ReadCommandTest purgeGCableTombstonesBeforeCalculatingDigest,CASSANDRA-15558,13284003,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,samt,dcapwell,dcapwell,07/Feb/20 20:36,21/Dec/20 08:07,13/Jul/23 08:39,11/Feb/20 09:23,4.0,4.0-alpha4,,,,Test/unit,,,,0,,,,"https://app.circleci.com/jobs/github/dcapwell/cassandra/502/tests

{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.db.ReadCommandTest.lambda$purgeGCableTombstonesBeforeCalculatingDigest$5(ReadCommandTest.java:812)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at org.apache.cassandra.db.ReadCommandTest.purgeGCableTombstonesBeforeCalculatingDigest(ReadCommandTest.java:805)
{code}",,brandon.williams,dcapwell,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,samt,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Feb 11 09:23:27 UTC 2020,,,,,,,All,,,,,,"0|z0b9ug:",9223372036854775807,,,,brandon.williams,dcapwell,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/9fecb6674adc0b9cbbfb4b284cc4ab371edeaa09,,,,,,,,,Unit test fix only,,,,,"10/Feb/20 11:44;samt;When creating the read commands _after_ setting {{gcgs}}, the {{nowInSeconds}} wasn't being bumped far enough. It was only adding 1 to the value used for the inserts. This could lead to a race where occasionally a tombstone was not yet purgable. Fixed by bumping it a full 60s as in the other similar tests. No failures seen running this 200 times locally.

||branch||CI||
|[15558-trunk|https://github.com/beobal/cassandra/tree/15558-trunk]|[circle|https://circleci.com/gh/beobal/workflows/cassandra/tree/15558-trunk]|
;;;","10/Feb/20 15:35;brandon.williams;+1;;;","10/Feb/20 17:15;dcapwell;+1

Do wish we could control time more though.;;;","11/Feb/20 09:23;samt;Thanks, committed in {{9fecb6674adc0b9cbbfb4b284cc4ab371edeaa09}};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.cql3.validation.operations.AlterTest testDropListAndAddListWithSameName,CASSANDRA-15557,13283837,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,rssvihla,dcapwell,dcapwell,07/Feb/20 05:47,21/Dec/20 08:08,13/Jul/23 08:39,16/Mar/20 17:02,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"https://app.circleci.com/jobs/github/dcapwell/cassandra/482/tests

{code}
junit.framework.AssertionFailedError: Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]>
	at org.apache.cassandra.cql3.CQLTester.assertRows(CQLTester.java:1070)
	at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:91)
{code}",,aleksey,blerer,brandon.williams,dcapwell,jasonstack,rssvihla,,,,,,"rssvihla commented on pull request #465: Fix CASSANDRA-15557 using client state timestamps
URL: https://github.com/apache/cassandra/pull/465
 
 
   This should also fix https://issues.apache.org/jira/browse/CASSANDRA-15303 and re-enables the behavior from https://issues.apache.org/jira/browse/CASSANDRA-12997 which was removed as part of https://issues.apache.org/jira/browse/CASSANDRA-13426
   
   Note this leaves a problem with precision where the extra microseconds added by ClientState.getTimestamp() will be dropped on save due to lack of precision see https://issues.apache.org/jira/browse/CASSANDRA-15626
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Mar/20 14:00;githubbot;600","rssvihla commented on pull request #465: Fix CASSANDRA-15557 using client state timestamps
URL: https://github.com/apache/cassandra/pull/465
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Mar/20 19:12;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,rssvihla,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Mar 20 09:33:05 UTC 2020,,,,,,,All,,,,,,"0|z0b8tk:",9223372036854775807,,,,aleksey,blerer,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/61b8a14a59e824854f87b54afc08289a3278942c,,,,,,,,,The patch is a fix for a flacky test.,,,,,"18/Feb/20 18:19;brandon.williams;So I started this test in a while loop, and forgot about it over the long (US) weekend.  The net effect is I ran this _many_ thousands of times without failure on java 8.  Is this still an issue?;;;","18/Feb/20 19:05;dcapwell;Don't have a lot of history on trunk in CI, but of the history I can look at I have not seen it fail normally; the only sample I see is that Circle CI run.

Here is the test in question

{code}
@Test
    public void testDropListAndAddListWithSameName() throws Throwable
    {
        createTable(""CREATE TABLE %s (id text PRIMARY KEY, content text, myCollection list<text>);"");
        execute(""INSERT INTO %s (id, content , myCollection) VALUES ('test', 'first test', ['first element']);"");
        execute(""ALTER TABLE %s DROP myCollection;"");
        execute(""ALTER TABLE %s ADD myCollection list<text>;"");

        assertRows(execute(""SELECT * FROM %s;""), row(""test"", ""first test"", null));
        execute(""UPDATE %s set myCollection = ['second element'] WHERE id = 'test';"");
        assertRows(execute(""SELECT * FROM %s;""), row(""test"", ""first test"", list(""second element"")));
    }
{code};;;","18/Feb/20 21:52;dcapwell;I am hesitant to say to close since the type of error is data correctness; if this was a time out I would be fine closing if stable so frequently.

The other annoying thing is nothing stands out in the logs https://482-209217594-gh.circle-artifacts.com/1/logs/TEST-org.apache.cassandra.cql3.validation.operations.AlterTest.log. We don't log the select so hard to say what happened before and after that block (even if we did timing isn't perfect).  Also when I search for cql_test_keyspace.table_11 I see that we didn't flush the table, so this should be local to memtable and not sstable.;;;","02/Mar/20 10:11;rssvihla;Seems real as I've been able to reproduce a failure in a few environments  just running the testsuite in a loop, it varies how frequently it happens. So far it seems the slower the env (fewer cores, less ram, etc) the more likely it happens.

Using _while ant test -Dtest.name=AlterTest; do :; done_

{{[junit-timeout] DEBUG [PerDiskMemtableFlushWriter_0:1] 2020-03-02 09:39:35,759 Memtable.java:483 - Completed flushing /home/debian/code/cassandra/build/test/cassandra/data:0/system_schema/keyspaces-abac5682dea631c5b535b3d6cffd0fb6/na-194-big-Data.db (0.035KiB) for commitlog position CommitLogPosition(segmentId=1583141964092, position=7807)}}
 {{[junit-timeout] DEBUG [MemtableFlushWriter:2] 2020-03-02 09:39:35,764 ColumnFamilyStore.java:1144 - Flushed to [BigTableReader(path='/home/debian/code/cassandra/build/test/cassandra/data:0/system_schema/keyspaces-abac5682dea631c5b535b3d6cffd0fb6/na-194-big-Data.db')] (1 sstables, 4.830KiB), biggest 4.830KiB, smallest 4.830KiB}}
 {{[junit-timeout] ------------- ---------------- ---------------}}
 {{[junit-timeout] Testcase: testDropListAndAddListWithSameName(org.apache.cassandra.cql3.validation.operations.AlterTest): FAILED}}
 {{[junit-timeout] Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]>}}
 {{[junit-timeout] junit.framework.AssertionFailedError: Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]>}}
 {{[junit-timeout] at org.apache.cassandra.cql3.CQLTester.assertRows(CQLTester.java:1070)}}
 {{[junit-timeout] at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:91)}}
 {{[junit-timeout] }}
 {{[junit-timeout] }}
 {{[junit-timeout] Test org.apache.cassandra.cql3.validation.operations.AlterTest FAILED}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/commitlog:0}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/data:0}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/saved_caches:0}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/hints:0}}
 {{[junitreport] Processing /home/debian/code/cassandra/build/test/TESTS-TestSuites.xml to /tmp/null291777528}}
 {{[junitreport] Loading stylesheet jar:[file:/usr/share/ant/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl|file:///usr/share/ant/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl]}}
 {{[junitreport] Transform time: 483ms}}
 {{[junitreport] Deleting: /tmp/null291777528}}{{BUILD FAILED}}
 {{/home/debian/code/cassandra/build.xml:1930: The following error occurred while executing this line:}}
 {{/home/debian/code/cassandra/build.xml:1831: Some test(s) failed.}};;;","02/Mar/20 13:59;rssvihla;It would fit if this was a timestamp issue like the previous failing of this test (see  https://issues.apache.org/jira/browse/CASSANDRA-12997) but I'd expect to see it more on the faster machines than on the slower ones that I've been able to repro this quickly with.;;;","02/Mar/20 17:33;dcapwell;bq. So far it seems the slower the env (fewer cores, less ram, etc) the more likely it happens.

Makes sense, CI tends to run with limited resources; by default ~4 cores and ~4gb memory;;;","04/Mar/20 08:50;rssvihla;[PR|[https://github.com/rssvihla/cassandra/pull/1]][Code|[https://github.com/rssvihla/cassandra/tree/failing-test-15557]]

Ran the tests all night on two different servers and had no issues (whereas before on the same hardware I had 30 or 40 failures usually within 5 to 10 minute).

The theory I have is this test got broken when the schema management changed in https://issues.apache.org/jira/browse/CASSANDRA-13426 and the test no longer was relying on client query state to set a timestamp as it was [here|[https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0R253]|https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0R253]and this logic appears to not have made it back in [here|[https://github.com/apache/cassandra/commit/207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6#diff-50a7bf78bc4f943f42ce60c8768484a6R400]] which meant an occasional tie, but maybe I'm misreading it all, lots of code to go through in that PR.

The fix I used was one of the two proposed in 12997 (ie just using manual time stamp).;;;","04/Mar/20 09:10;blerer;It seems that something is wrong on your github {{here}} github links. They bring me back to this page.;;;","04/Mar/20 09:15;rssvihla;Not sure what's going on there, maybe some Jira macro run amok. Take 2

Code as it was when the test was originally fixed

[https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0R253]

EDIT dunno why the highlight isn't being added to the links..[src/java/org/apache/cassandra/cql3/statements/AlterTableStatement.java|https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0] line 253

Change below that I think stripped out the client state timestamp

[https://github.com/apache/cassandra/commit/207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6#diff-50a7bf78bc4f943f42ce60c8768484a6R400]

EDIT ( [src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java|https://github.com/apache/cassandra/commit/207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6#diff-50a7bf78bc4f943f42ce60c8768484a6] line 400)

 

 

 

 ;;;","04/Mar/20 10:42;blerer;I believe that the test is fine and should not be changed. The {{DroppedColum}} should filter out every row with a timestamp less or equal to the {{DroppedColum.timestamp}}. So even if the row and the {{DroppedColum}} have the same timestamp, it should be ignored.
Now the interesting question is why if you fix the timestamps for the row and the dropped column, the test is not failing anymore? 
;;;","04/Mar/20 11:01;rssvihla;Yes silly me, easy enough to prove when setting the timestamps to the same value the tests still pass, and just to totally eliminate weird side effects, setting the timestamp in reverse breaks the test as expected so I don't think there is anything specific about setting the timestamp to any value that makes it pass. 

So I'm not sure I have a good theory as to why breaks in the first place. It does then act as if somehow the drop is happening ""before"" the insert. I'll keep digging thanks for the review.;;;","05/Mar/20 16:38;aleksey;In 4.0 we get the timestamp from {{FBUtilities.timestampMicros()}} unless it's been set explicitly by the user, so yes, the test can be racy as it used to be before CASSANDRA-12997. Sylvain's explanation why in the first comment is still the most likely one. We derive {{timestampMicros()}} from {{System.currentTimeMillis()}}, and that *can* walk back between the two statements' executions.

Now, it's tricker to reimplement the same logic in 4.0, so going for the second option of explicit timestamp would be my preferred way to resolve this issue.;;;","05/Mar/20 18:35;rssvihla;Yep makes sense. I'd feel better if I had some proof why it's happening now (logging more or copying out the dropped columns table makes it not happen on the boxes I've replicated it with), but either way it can definitely happen with System.currentTimeMillis() and clock skew, and we'd need to protect against that.

I reopened my PR and restored my branch with the client side timestamp, simple fix: https://github.com/rssvihla/cassandra/pull/1;;;","06/Mar/20 09:08;blerer;{quote}Now, it's tricker to reimplement the same logic in 4.0, so going for the second option of explicit timestamp would be my preferred way to resolve this issue.{quote}

It seems to me that we should be able to re-implement the same logic in {{AlterTableStatement.Raw.prepare}} no?;;;","09/Mar/20 11:56;rssvihla;So digging into the actual failure, this took a few tries as wrapping logging, or flushing sstables seemed to make it hard to reproduce, I've confirmed it's time based errors at least in this case:

row ts:             1583753957613001

dropped time: {{1583753957613000}}

{{[junit-timeout] Testcase: testDropListAndAddListWithSameName(org.apache.cassandra.cql3.validation.operations.AlterTest): FAILED }}
 {{[junit-timeout] Dropped column: {java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]=DroppedColumn{column=mycollection, droppedTime=1583753957613000}} Row timestamp: 1583753957613001 }}
 {{[junit-timeout] junit.framework.AssertionFailedError: Dropped column: {java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]=DroppedColumn{column=mycollection, droppedTime=1583753957613000}} Row timestamp: 1583753957613001}}
 {{[junit-timeout] at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:102) }}
 {{[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) }}
 {{[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) }}
 {{[junit-timeout] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) }}
 {{[junit-timeout] Caused by: java.lang.AssertionError: Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]> }}
 {{[junit-timeout] at org.apache.cassandra.cql3.CQLTester.assertRows(CQLTester.java:1070)}}
 {{[junit-timeout] at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:98) }}
 {{[junit-timeout]}}
 {{[junit-timeout]}}

 

 ;;;","09/Mar/20 12:24;rssvihla;So looking at the alter schema logic more:
[https://github.com/apache/cassandra/blob/08b2192da0eb6deddcd8f79cd180d069442223ae/src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java#L398]

and 
[https://github.com/apache/cassandra/blob/08b2192da0eb6deddcd8f79cd180d069442223ae/src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java#L411-L426]

it does seem (naively) reasonable to have it using the ClientState's getTimestamp() method in the AlterTableStatement since the ClientState is already there, but I'm sure I'm missing lots of background. 

Will wait for more experience people to weigh in.;;;","09/Mar/20 14:02;rssvihla;New [PR|https://github.com/apache/cassandra/pull/465] 

Note: I think this also happens to fix this behavior in CASSANDRA-15303 and made a new Jira for the issue this causes with dropped columns and precision https://issues.apache.org/jira/browse/CASSANDRA-15626;;;","09/Mar/20 15:53;blerer;The patch looks good to me.;;;","09/Mar/20 16:30;aleksey;LGTM as well.;;;","09/Mar/20 16:42;blerer;Sorry, there is an issue with the patch as pointed out by [~jasonstack] in  CASSANDRA-15303. The timestamp need to be set during the {{execution}} phase and not during the {{prepare}} one. Otherwise if the statement is prepared by the user it will reuse the same timestamp everytime it is executed. ;;;","10/Mar/20 08:15;rssvihla;I borrowed the code from 15303 and updated the PR. Some notes:
 * There is an additional fix in there which is related to comparison of relations. This doesn't appear to be related to either Jira, but it makes sense at a glance, either way [~jasonstack] added it and he can comment
 * Made ClientState.getTimestatmp() static and call it directly instead of FBUtilities.timestampMicros()

But I'm also ok with someone first merging in 15303, then I can do another PR based on that code base just with the changes that use ClientState.getTimetamp() instead of FBUtilities.timestampMicros(). ;;;","10/Mar/20 10:27;aleksey;Schema DDL statements aren't really meant to be prepared, as they don't even support bound variables, and there is no benefit to doing so, so I'm not sure how much of an issue this is. But I guess one still could do that, sure.;;;","16/Mar/20 17:02;blerer;Committed in trunk at 61b8a14a59e824854f87b54afc08289a3278942c;;;","20/Mar/20 07:51;jasonstack;Should we change {{QueryState#getTimestamp()}} to use class {{ClientState}} instead of object {{clientState}}?

I got some exception when running dtest locally...

{code}
ERROR [main] 2020-03-20 15:43:21,360 CassandraDaemon.java:789 - Exception encountered during startup
java.lang.IncompatibleClassChangeError: Expecting non-static method org.apache.cassandra.service.ClientState.getTimestamp()J
	at org.apache.cassandra.service.QueryState.getTimestamp(QueryState.java:71)
	at org.apache.cassandra.cql3.QueryOptions.getTimestamp(QueryOptions.java:199)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(ModificationStatement.java:630)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeLocally(ModificationStatement.java:624)
	at org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal(QueryProcessor.java:358)
	at org.apache.cassandra.db.SystemKeyspace.persistLocalMetadata(SystemKeyspace.java:457)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:228)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:650)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:767)

{code};;;","20/Mar/20 09:25;blerer;[~jasonstack] {{java.lang.IncompatibleClassChangeError}} is normally thrown when some client of a jar has not been recompiled while the jar has changed. Could you make sure that everything has been recompiled?;;;","20/Mar/20 09:33;jasonstack;[~blerer]  ""ant realclean && ant jar"" solves it.. thanks;;;",,,,,,,,,,,,,,,,,,,,,
Preview repair should include sstables from finalized incremental repair sessions,CASSANDRA-15553,13283638,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,06/Feb/20 07:12,21/Dec/20 08:08,13/Jul/23 08:39,02/Mar/20 08:30,4.0,4.0-alpha4,,,,Consistency/Repair,,,,0,,,,"When running a preview repair we currently grab all repaired sstables, problem is that we depend on compaction to move the sstables from pending to repaired so we might have different data marked repaired on different nodes. Including any sstables from finalized incremental repair sessions as repaired will solve this.

Another problem is that validations don't start at exactly the same time on different nodes, so if an incremental repair finishes while the preview repair is running we might also validate the wrong repaired set. We should fail the preview repair if an intersecting incremental repair finishes during the preview repair.",,bdeggleston,dcapwell,jeromatron,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Mar 02 08:30:42 UTC 2020,,,,,,,All,,,,,,"0|z0b7lc:",9223372036854775807,,,,bdeggleston,dcapwell,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/219d209651759cf702519a100c4f43595f7be8d7,,,,,,,,,new in-jvm dtests and cci runs,,,,,"06/Feb/20 07:19;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/previewrepairfix], [cci|https://circleci.com/workflow-run/9ee445fb-8ac7-44e3-b74e-345734b312c3]

Patch includes sstables from finalized sessions in the repaired set. Also adds a state change listener interface to `LocalSessions` which preview repair `RepairSession` listens to to fail any intersecting preview repairs. ;;;","19/Feb/20 21:23;bdeggleston;looks good, I just have a few minor things:

 
 * CassandraValidationIterator.java:61 - stray whitespace at top of class def
 * LocalSessions$Listener - it would be nice to have a more descriptive method name `onIncrementalStateChange` or something. We have at least a few listeners with generic `onStateChange` methods
 *  RepairSession#stateChange - we should return after forcingShutdown. Alternatively, we could use {{Iterables.any(ranges(), r -> r.intersects(session.ranges)}} instead of iterating over the ranges.
 * RepairSession#involvesTables - includesSSTables or containsSSTables might be a better name;;;","19/Feb/20 23:17;dcapwell;Took a look and had to look closer at IR messaging, what I see is the following

IR messaging is fire-and-forget pattern, so any ephemeral issues lead to messages not being seen (tests show this CASSANDRA-15564 and have been reported as issues with current repair CASSANDRA-15566).  This patch relies on the FINALIZE_COMMIT_MSG being seen on the coordinator of the IR preview repair in order to detect conflict, but the message is seen asynchronously so may see this on the participants while validation is running and seen on the coordinator after all validations have been seen on the coordinator (so session is already complete); in this case you have the same issue as reported by this JIRA.

This patch also affectively blocks preview and IR running for the same range as the preview will fail with conflict*, so IR should stop scheduling if preview is running, and preview should not be scheduled while IR is running (else we waste the resources on validation); effectively what ever is scheduling the repairs will have to be enhanced to handle this which adds more complexity to operators.

I actually wonder if we can remove this restriction.  What it looks like to me is that repairedAt is system time (aka, could have drift, could roll backwards, etc.), but we could keep track of largest one and make sure this counter is monotonic.  With a data structure of 

* largest contiguous commit (long)
* inFlight (array of long)
* committed but not contagious (array of longs, its to represent cases where inFlight commits out of order)

We could make sure that we (coordinator) always produce a repairedAt larger than any we know of, and this lets preview take a snapshot of the state at the start of coordination. With this snapshot, we filter for repaired and repairedAt <= largest contiguous commit snapshot; this should give preview repair effectively snapshot isolation (assuming compaction also maintains repairedAt).

* In CASSANDRA-15564 I show that preview doesn't properly check session failures, run [this test|https://github.com/apache/cassandra/pull/446/files#diff-af4a07a2b44695f510dddb0c102e1953R28] and [this one|https://github.com/apache/cassandra/pull/446/files#diff-ca9f3b43ad8ff955d6ddd2ef4d2b6904R28] without the change in the JIRA to see it.  The reason your tests are different is because you don't use nodetool and directly monitor notifications.;;;","20/Feb/20 01:17;bdeggleston;{quote}assuming compaction also maintains repairedAt
{quote}
not in a way that would make this possible. Once an sstable gets into the repaired bucket, it will be compacted with other repaired sstables, potentially with different repaired at timestamps (and keeping the min timestamp, I believe) .;;;","20/Feb/20 02:04;dcapwell;Yeah, that complicates things a little bit, would need to think about it more.;;;","20/Feb/20 02:12;dcapwell;If compaction only compacted <= ""largest contiguous"" then it would work, the big risk is if there are bugs in IR where we can't promote that because of gaps (caused by ephemeral issues such as message loss, so would require CASSANDRA-15566);;;","24/Feb/20 08:33;marcuse;bq. CassandraValidationIterator.java:61 - stray whitespace at top of class def

https://github.com/krummas/cassandra/commit/142d11c1539ed677dfd4e1f21fb09a6fd68b79fc

bq. LocalSessions$Listener - it would be nice to have a more descriptive method name `onIncrementalStateChange` or something. We have at least a few listeners with generic `onStateChange` methods

https://github.com/krummas/cassandra/commit/c4248ddce35a14549e617379fc2fabdd275ee3a1 (made it {{onIRStateChange}})

bq. RepairSession#stateChange - we should return after forcingShutdown. Alternatively, we could use Iterables.any(ranges(), r -> r.intersects(session.ranges) instead of iterating over the ranges.

https://github.com/krummas/cassandra/commit/dd8cafea5debfb9cf90794ed3f9cc4a258681717

bq. RepairSession#involvesTables - includesSSTables or containsSSTables might be a better name

https://github.com/krummas/cassandra/commit/8f212ad77e53c0823a56fbc0d7da04f085200f56 ({{includesTables}} - we are not dealing with sstables here);;;","25/Feb/20 10:11;marcuse;Pushed another [commit|https://github.com/krummas/cassandra/commit/b28d63aed8b09f49936b06b7ec436c53ca3e5ec9] which should handle the case where FINALIZE_COMMIT_MSG is lost or delayed - if we encounter any pending non-finalized intersecting sstables we fail the preview repair.;;;","25/Feb/20 22:55;dcapwell;Spoke to Marcus.  I am fine with this patch failing preview rather than producing a false positive match for mismatch, though we should also improve it so we can remove this restriction later (just not this JIRA).

Ill try to look at the update later today;;;","26/Feb/20 18:10;bdeggleston;+1, and thanks for addressing each point in it's own commit. Makes it way easier to review the changes;;;","26/Feb/20 21:42;dcapwell;I like the use of blocking filters, glad we don't transfer them =D

Some of the tests make assumptions about time using thread.sleep; this could make them flaky.  With CASSANDRA-15564 I setup utilities for querying repair state, so if that does end up happening we can always block waiting until the repair table is updating.

I made the comment that the tests only pass because we look at the notifications, but with CASSANDRA-15564 that will be fixed so can ignore that comment.

A test that would be good to add would be
1) run preview
2) delay the merle tree so the coordinator doesn't see it yet
3) run IR, wait for it to complete
4) unblock merle tree's

If I am reading this correctly, the preview will fail even though the validation wouldn't.

I am +1;;;","27/Feb/20 23:27;dcapwell;Blake and I both gave +1, so moving to ready to commit.;;;","02/Mar/20 08:30;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.db.repair.PendingAntiCompactionBytemanTest.testExceptionAnticompaction,CASSANDRA-15552,13283555,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,dcapwell,dcapwell,05/Feb/20 19:02,21/Dec/20 08:07,13/Jul/23 08:39,03/Mar/20 07:59,4.0,4.0-alpha4,,,,Test/unit,,,,0,,,,"{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.db.repair.PendingAntiCompactionBytemanTest.testExceptionAnticompaction(PendingAntiCompactionBytemanTest.java:80)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.jboss.byteman.contrib.bmunit.BMUnitRunner$9.evaluate(BMUnitRunner.java:364)
	at org.jboss.byteman.contrib.bmunit.BMUnitRunner$6.evaluate(BMUnitRunner.java:263)
	at org.jboss.byteman.contrib.bmunit.BMUnitRunner$1.evaluate(BMUnitRunner.java:97)
{code}

Failure was on java 11",,dcapwell,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Tue Mar 03 07:59:52 UTC 2020,,,,,,,All,,,,,,"0|z0b72w:",9223372036854775807,,,,dcapwell,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/1ce58ac2ea945baaaeece233f3d3735686a2ecb8,,,,,,,,,cci run,,,,,"07/Feb/20 21:08;dcapwell;Saw it again on java 11.;;;","12/Feb/20 18:12;brandon.williams;I changed the test to print what's compacting when it fails, and most of the time it fails with 4 sstables compacting, in either cfs or cfs2.  This at least makes some sense since both CFs contain 4 sstables.  However, sometimes it fails with only two:

{code}
[junit-timeout] Testcase: testExceptionAnticompaction(org.apache.cassandra.db.repair.PendingAntiCompactionBytemanTest): FAILED
[junit-timeout] Nothing should be compacting: [BigTableReader(path='/home/debian/cassandra/build/test/cassandra/data:0/ks_1581462173137/tbl2-a21085804d2211ea92ecf9c4ecc0407d/na-3-big-Data.db'), BigTableReader(pa
th='/home/debian/cassandra/build/test/cassandra/data:0/ks_1581462173137/tbl2-a21085804d2211ea92ecf9c4ecc0407d/na-4-big-Data.db')]
{code}

I also moved the getLiveSSTables assertions before the empty check, and those always pass.;;;","12/Feb/20 18:23;dcapwell;cc [~marcuse];;;","02/Mar/20 17:59;marcuse;We use {{Futures.allAsList}} [here|https://github.com/apache/cassandra/blob/219d209651759cf702519a100c4f43595f7be8d7/src/java/org/apache/cassandra/db/repair/PendingAntiCompaction.java#L307] which will fail immediately when any of the input futures fails, without waiting for the others, patch to just wait for the compactions to get cancelled: https://github.com/krummas/cassandra/commits/marcuse/15552

tests: https://circleci.com/workflow-run/c4eaae15-6f73-44f6-8b5f-dbade70c315d;;;","02/Mar/20 19:01;dcapwell;Patch LGTM, running the tests in a loop to help confirm.;;;","02/Mar/20 22:00;dcapwell;LGTM, tests pass constantly (though this was rare on trunk).

Nits:
[waitForCessation|org.apache.cassandra.db.compaction.CompactionManager#waitForCessation] waits for 1 minute and silently returns, so it is possible the assert following will fail; it would be nicer if that method would return success (replace break with true) or not (end of loop return false).;;;","03/Mar/20 07:59;marcuse;committed, thanks

I think it is ok to assume that the anticompactions will both fail within 1 minute, otherwise we should probably at least look in to why it took so long.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky tests org.apache.cassandra.service.MoveTest testStateJumpToNormal and testMoveWithPendingRangesNetworkStrategyRackAwareThirtyNodes,CASSANDRA-15551,13283554,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,gianluca,dcapwell,dcapwell,05/Feb/20 19:00,16/Mar/22 13:21,13/Jul/23 08:39,10/Apr/20 16:34,4.0,4.0-alpha4,,,,Test/unit,,,,0,pull-request-available,,,"testStateJumpToNormal failure was on java 11
{code}
java.lang.NullPointerException
	at org.apache.cassandra.gms.Gossiper.getHostId(Gossiper.java:1028)
	at org.apache.cassandra.gms.Gossiper.getHostId(Gossiper.java:1023)
	at org.apache.cassandra.service.StorageService.handleStateNormal(StorageService.java:2513)
	at org.apache.cassandra.service.StorageService.onChange(StorageService.java:2055)
	at org.apache.cassandra.Util.createInitialRing(Util.java:225)
	at org.apache.cassandra.service.MoveTest.testStateJumpToNormal(MoveTest.java:935)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

testMoveWithPendingRangesNetworkStrategyRackAwareThirtyNodes failure was on java 8
{code}
java.lang.NullPointerException
	at org.apache.cassandra.service.StorageService.updatePeerInfo(StorageService.java:2174)
	at org.apache.cassandra.service.StorageService.handleStateNormal(StorageService.java:2511)
	at org.apache.cassandra.service.StorageService.onChange(StorageService.java:2055)
	at org.apache.cassandra.Util.createInitialRing(Util.java:225)
	at org.apache.cassandra.service.MoveTest.testMoveWithPendingRangesNetworkStrategyRackAwareThirtyNodes(MoveTest.java:199)
{code}",,brandon.williams,dcapwell,eduard.tudenhoefner,gianluca,jasonstack,,,,,,,"grighetto commented on pull request #533: CASSANDRA-15551 Fixed race condition in MoveTest 
URL: https://github.com/apache/cassandra/pull/533
 
 
   Fixed race condition in MoveTest by waiting for stale endpoints to be evicted from membership before starting another test.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Apr/20 21:56;githubbot;600","smiklosovic closed pull request #533:
URL: https://github.com/apache/cassandra/pull/533


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:21;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,gianluca,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Apr 10 16:34:15 UTC 2020,,,,,,,All,,,,,,"0|z0b72o:",9223372036854775807,,,,brandon.williams,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/2344e77c026f1ecfed4f9ba84dab21ede2cf5b26,,,,,,,,,"For testing, check the reproduction steps in my comment below and verify that with the patch, the main thread waits while the endpoints are being evicted, before running another test method.
Unit tests results attached for both Java 11 and 8.
Since this is a change only in the test realm, no further documentation is required.",,,,,"07/Feb/20 14:58;brandon.williams;I was able to run both of these a few thousand times without failure on java 8. :(;;;","08/Apr/20 09:03;eduard.tudenhoefner;According to https://ci-cassandra.apache.org/view/branches/job/Cassandra-trunk/45/testReport/junit/org.apache.cassandra.service/MoveTest/history/ this hasn't been failing in a while. Can we close this ticket?;;;","08/Apr/20 14:18;gianluca;[~eduard.tudenhoefner] I can consistently reproduce this by using breakpoints, so the issue is still there. I'm about to submit a patch with a fix, but I think I found another potential race condition in this test yesterday, which I'm investigating now.;;;","10/Apr/20 16:05;gianluca;The issue here is that once the this line is executed in MoveTest's @Before method, {{StorageService.instance.getTokenMetadata().clearUnsafe()}}, the {{GossipStage}} thread kicks in and starts evicting the stale endpoints from membership, which may happen in parallel while another test method is already running.

To reproduce this in an IDE, you can set breakpoints at:

[https://github.com/apache/cassandra/blob/1ce3c1c039561c15892115af37e0c7abf260bc6b/test/unit/org/apache/cassandra/Util.java#L222]

and

[https://github.com/apache/cassandra/blob/1ce3c1c039561c15892115af37e0c7abf260bc6b/src/java/org/apache/cassandra/gms/Gossiper.java#L524]

If the main thread starts executing the second iteration of the loop in {{createInitialRing}} while the GossipStage thread is removing the endpoints in {{evictFromMembership}}, it will throw a NPE down the road.

The fix I submitted basically makes the main thread wait for all endpoints to be evicted in between tests, such that the next test starts in a clean state.

Pull request: [https://github.com/apache/cassandra/pull/533]
 Java 11 Unit Tests results: [https://circleci.com/gh/grighetto/cassandra/68]
 Java 8 Unit Tests results: [https://circleci.com/gh/grighetto/cassandra/65];;;","10/Apr/20 16:34;brandon.williams;Nice work, great analysis.  Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flaky test org.apache.cassandra.streaming.StreamTransferTaskTest testFailSessionDuringTransferShouldNotReleaseReferences,CASSANDRA-15550,13283552,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,dcapwell,dcapwell,05/Feb/20 18:59,15/May/20 08:54,13/Jul/23 08:39,11/Mar/20 15:51,4.0,4.0-alpha4,,,,Test/unit,,,,0,,,,"{code}
junit.framework.AssertionFailedError: expected:<0> but was:<1>
	at org.apache.cassandra.streaming.StreamTransferTaskTest.testFailSessionDuringTransferShouldNotReleaseReferences(StreamTransferTaskTest.java:181)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

Failure was on java 11",,dcapwell,djoshi,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Mar 11 15:52:13 UTC 2020,,,,,,,All,,,,,,"0|z0b728:",9223372036854775807,,,,djoshi,,,,Normal,,2.2.8,,,https://github.com/apache/cassandra/commit/95224b71e19e2b7f18596da070937291f040f695,,,,,,,,,test,,,,,"13/Feb/20 16:35;brandon.williams;This one has been around quite some time: ~4 years.  In defense of that, it did sometimes take nearly 300 runs to reproduce it.  The cause of this very tight race is that aborting the session is done asynchronously in nonPeriodicTasks, so we need to make sure that isn't pending when we call finishTasks since it checks the {code}completed{code} variable which won't be true until the task is aborted. Patch here: https://github.com/driftx/cassandra/tree/CASSANDRA-15550 to do this, but it does raise the question to me of should finishTasks actually _not_ finish if the abort hasn't set completed to true? Why would we need to call it in idempotent fashion? As evidenced by the test it seems like this is at least _potential_ for leaking a reference.

With the patch the test passed a couple thousand times.;;;","13/Feb/20 17:27;dcapwell;bq. should finishTasks actually not finish if the abort hasn't set completed to true? Why would we need to call it in idempotent fashion?

[~benedict] [~aleksey] [~djoshi] would love your input to those questions.  I can help review but not as familiar with streaming so harder for me to answer what the expected semantics *should* be;;;","13/Feb/20 22:21;djoshi;I don't have any immediate comments but I can get to reviewing this around Monday if you are ok waiting until then?;;;","24/Feb/20 22:56;brandon.williams;Which Monday were you referring to? ;)  Just kidding, but friendly reminder if you have time.;;;","25/Feb/20 02:14;dcapwell;Or better, what year?;;;","10/Mar/20 18:37;djoshi;ok, finally got around to reviewing this on a *Tuesday* ;). The only feedback is limit the number of retries to some finite value (like 3, 5 or 10) and abort the test if streaming doesn't complete (abort) within those retries. You can fix this on commit if you'd like.;;;","11/Mar/20 15:52;brandon.williams;Commited with retries limited to 10, since recently I've seen a trend where tests fail on weaker machines, and 10 retries is still only 100ms total.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flaky test org.apache.cassandra.distributed.test.SimpleReadWriteTest.readWithSchemaDisagreement,CASSANDRA-15543,13283295,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,newkek,dcapwell,dcapwell,04/Feb/20 17:37,21/Dec/20 08:08,13/Jul/23 08:39,26/Mar/20 14:16,4.0,4.0-alpha4,,,,Test/dtest/java,Test/dtest/python,,,0,,,,"This fails infrequently, last seen failure was on java 8

{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.distributed.test.DistributedReadWritePathTest.readWithSchemaDisagreement(DistributedReadWritePathTest.java:276)
{code}",,benedict,blerer,brandon.williams,cnlwsu,dcapwell,e.dimitrova,jasonstack,newkek,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,newkek,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Mar 26 15:34:48 UTC 2020,,,,,,,All,,,,,,"0|z0b5h4:",9223372036854775807,,,,blerer,,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/b6176906e71620b37920eaf84fa51516b046bdce,,,,,,,,,No doc change needed,,,,,"17/Feb/20 18:59;cnlwsu;renamed to SimpleReadWriteTest so :

{code}
junit.framework.AssertionFailedError
	at org.apache.cassandra.distributed.test.SimpleReadWriteTest.readWithSchemaDisagreement(SimpleReadWriteTest.java:274)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}

as seen in https://circleci.com/gh/clohfink/cassandra/674;;;","17/Feb/20 19:01;dcapwell;This was renamed in 0f22dab1a015cb84d9857f940de5a256bfbee083;;;","21/Feb/20 22:20;brandon.williams;This is relatively easy to reproduce. We can get three types of responses here.  The one the test wants:

{code}
org.apache.cassandra.exceptions.ReadFailureException: Operation failed - received 1 responses and 1 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012, INCOMPATIBLE_SCHEMA from 127.0.0.2:7012
{code}

but sometimes with two failures:
{code}
org.apache.cassandra.exceptions.ReadFailureException: Operation failed - received 1 responses and 2 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012, INCOMPATIBLE_SCHEMA from 127.0.0.2:7012
{code}

And sometimes either one of the nodes by itself:
{code}
org.apache.cassandra.exceptions.ReadFailureException: Operation failed - received 1 responses and 1 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012
{code}
 
At the least it seems we have a legit problem with terminology or counting here.;;;","03/Mar/20 17:31;e.dimitrova;Anyone working on this one?;;;","03/Mar/20 17:43;dcapwell;I don't know of anyone working on it.;;;","03/Mar/20 17:46;brandon.williams;Any guidance or suggestions [~ifesdjeen] since this is your test?;;;","06/Mar/20 16:32;newkek;I have been looking into this issue and trying to reproduce it locally. Did not have much luck, re-executed the test about 2500 times (let it run overnight) and only managed to reproduce something ~inconsistent in one case.

The test setup is: execute a schema alteration request on 1 node, don't let the node propagate the schema changes to other nodes, then execute a select at Consistency = ALL on that same node and expect a failure, because the 2 other nodes did not get the schema alteration request.

So the message we expect from the Select request would be the following:
{code:java}
Operation failed - received 1 responses and 2 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012, INCOMPATIBLE_SCHEMA from 127.0.0.2:7012{code}
Node1's response is successful (because it has the schema changes), but all the others fail because they have a stale schema.

The closest I got to reproducing something inconsistent to this was:
{code:java}
Operation failed - received 0 responses and 2 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012, INCOMPATIBLE_SCHEMA from 127.0.0.2:7012{code}
But also let's consider the ones Brandon had observed.

I have looked into some of the places where {{ReadFailureException}} are generated, and landed in the [{{ReadCallback}}|https://github.com/apache/cassandra/blob/aed15bfb01e753f9bac8b149b382c7a7c8d33183/src/java/org/apache/cassandra/service/reads/ReadCallback.java#L162] class.

The logic of the code is:
- call {{awaitResults()}}
- in {{awaitResults()}}:
-- block on {{await()}}
-- when {{await()}} exits, check what responses we got and whether errors came back

Also looked into {{onFailure()}} method, the logic is the following:
{code:java}
int n = waitingFor(from)
      ? failuresUpdater.incrementAndGet(this)
      : failures;

failureReasonByEndpoint.put(from, failureReason);

if (blockFor + n > replicaPlan().contacts().size()) {
    condition.signalAll(); // this signals as soon as 1 failure happens
}
{code}
{{waitingFor(from)}} is supposed to filter out errors coming from non local nodes it seems. In this test it always returns true, for simplicity we'll consider it is.
 Same for {{blockFor}}, and {{replicaPlan().contacts().size()}} these are both {{3}} for the test, I supposed these may differ in some use case.

As we can see above once 1 failure happens, the {{condition}} will be signaled to unblock waiting callers. When {{awaitResults()}} unblocks, it checks the value of {{failures}} to see how many errors happened and report it as a {{ReadFailureException}}.

The code is designed so that the {{condition}} is freed when either all responses are successful, or one failure happened.

Now my understanding of this is that, on certain circumstances, we end up returning an error message as soon as 1 error happens, and not wait for all responses to come back, and the values of {{failures}} and {{received}} are not guaranteed to be at a certain value, except we know in case of a failure that {{failures}} will be > 0.

I am unclear on what the expected behavior should be here. 
From my POV, I would think the most reasonable logic would be that {{await()}} only exits once all responses have come back, failed or successful, or it times out. Therefore I would replace the {{""SimpleCondition condition""}} with a {{CountDownLatch}} initialized to the value of the number of expected responses, and {{countDown()}} on {{onReceived()}} and {{onFailure()}} and have {{await()}} use that countDownLatch.

If the behavior of failing as soon as 1 failure happens is preferred, then the logic can stay that way, but the test needs to be modified to account for the possibility that only 1 error and No successful response may be returned in the {{ReadFailureException}}.

[~brandon.williams] [~e.dimitrova] got any insights?;;;","06/Mar/20 18:00;newkek;Also, I suggested we wait for all responses because this is what the test expects, the test waits for the {{ReadFailureException}} to contain *both* failures without accounting for possible race conditions of the {{ReadCallback}} returning before all responses have come back.

EDIT: I confused the number of received and the number of failures, I think what is below is incorrect.

-Also noticed that in the current context, the number of {{failure}} and the list of failures can be inconsistent with each other, because we create the exception with-
{code:java}
new ReadFailureException(replicaPlan().consistencyLevel(), received, blockFor, resolver.isDataPresent(), failureReasonByEndpoint){code}
-Concurrently, {{received}} can have been incremented but not the map of {{failureReasonByEndpoint}} and we could end up with:-
{code:java}
Operation failed - received 1 responses and 2 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012{code}
-""2"" failures but only 1 error message. (number of {{received}} is irrelevant)-

-Conversely, since the reference to the map is passed to {{ReadFailureException}} but {{received}} is passed by value, we can end up in the following scenario:-
 - -1 error triggers awaitResults() to unblock-
 - -call to {{new ReadFailureException(received, failureReasonByEndpoint)}}-
 - -value of 1 for {{received}} copied when calling {{ReadFailureException}} constructor but only reference to {{failureReasonByEndpoint}} given-
 - -concurrently second failure calls to {{onFailure()}} which updates {{failures}} and the map-
 - -{{ReadFailureException}} has the {{1}} value for {{failures}} but the map has been updated to have 2 failures and constructs the error message-

-We end up with the error message:-
{code:java}
Operation failed - received 1 responses and 1 failures: INCOMPATIBLE_SCHEMA from 127.0.0.3:7012, INCOMPATIBLE_SCHEMA from 127.0.0.2:7012{code}
-""1"" failure but 2 error messages. (number of {{received}} is irrelevant)-

-One way to solve these issues would be to pass a copy of the {{failureReasonByEndpoint}} to the constructor of {{ReadFailureException}}.-

-If {{await()}} waited until all messages came back or timeout the 2 issues wouldn't be problematic I think.-;;;","06/Mar/20 19:42;newkek;Actually I just realized that the value passed in the {{ReadFailureException}} constructor is {{received}}, I confused and thought it was the number of failures. Need to re-think about that comment above;;;","06/Mar/20 19:55;newkek;{{RequestFailureException}} uses the map's size to find out the number of entries in it:

{code}
protected RequestFailureException(ExceptionCode code, ConsistencyLevel consistency, int received, int blockFor, Map<InetAddressAndPort, RequestFailureReason> failureReasonByEndpoint)
    {
        super(code, String.format(""Operation failed - received %d responses and %d failures: %s"",
                                  received,
                                  failureReasonByEndpoint.size(),
                                  buildFailureString(failureReasonByEndpoint)));
{code}

It does a copy of the map later in the constructor but I suppose there is still a chance the content of the map may be different between the call to {{size()}} and the entries when iterated in {{buildFailureString()}}.;;;","07/Mar/20 00:49;e.dimitrova;Hi Kevin,

Thanks for the extensive explanation! I am gonna review everything on Monday. 

Have a nice weekend!;;;","09/Mar/20 14:04;newkek;Sounds good, thanks, hope you had a good weekend :)

As a summary, 

In any case, I believe passing an immutable copy of the {{failureReasonByEndpoint}} map to the constructor of Read/WriteFailureException would reduce the chances for the {{number of failures}} and the failure messages to be inconsistent.

In addition to that, there's the remaining question of the behavior of ReadCallback when failures happen (do we fail fast? or do we wait for all responses to come back/timeout?). Depending on the outcome of that, the test that is flaky at the moment would need to be adjusted to expect 1 *or* 2 failures in the response.;;;","10/Mar/20 18:46;e.dimitrova;Hi Kevin,

""In any case, I believe passing an immutable copy of the {{failureReasonByEndpoint}} map to the constructor of Read/WriteFailureException would reduce the chances for the {{number of failures}} and the failure messages to be inconsistent."" 

Agree with you. I would personally expect 1 response from node1 where the schema was altered and two failures with the two messages. 

""In addition to that, there's the remaining question of the behavior of ReadCallback when failures happen (do we fail fast? or do we wait for all responses to come back/timeout?). Depending on the outcome of that, the test that is flaky at the moment would need to be adjusted to expect 1 *or* 2 failures in the response.""

Or we can say ""as soon as it fails more than 0 times"" and be safe?

This is my personal interpretation.

I believe  [~ifesdjeen] would be the best person to confirm any details but for test fix this would be enough I think to make it deterministic. I don't see a bug but confusing responses to the user (same as you, as we discussed on Slack);;;","11/Mar/20 15:06;newkek;Thanks for the reply, Ekaterina, and for confirming the behavior described.

Got some more time to think about this, and it seems the best way to approach it, since what I suggest would be a larger behavioral change, would be to create a separate ticket for it. 

I think in this ticket I would rather: Fix the discrepancies between the failures number and the failure messages with the immutable map copy + fix the test that expects 2 failures to only expect 1 to match current behavior. 

Then, in the other ticket we can properly advocate/discuss pros and cons of returning cohesive error messages VS fail-fast & incohesive error message.

Does that make sense?;;;","11/Mar/20 15:36;e.dimitrova;Yes, I would also separate them. This is test fix. The other one would be to improve the failure reporting for the end users and try to mitigate any potential confusion. ;;;","11/Mar/20 15:37;e.dimitrova;Also, RequestFailureException is not used only here in the codebase...;;;","11/Mar/20 15:50;newkek;bq. Also, RequestFailureException is not used only here in the codebase...

Right, I was planning on making the immutable copy changes for calls to WriteFailureException too;;;","12/Mar/20 19:43;newkek;Changes available at https://github.com/newkek/cassandra/tree/15543-trunk/;;;","13/Mar/20 14:10;newkek;[~ifesdjeen] since you were the author of the test originally, would you have some to review the fixes above? Thank you;;;","17/Mar/20 20:06;newkek;Hi [~benedict], I've seen you have done quite a bit of work in {{ReadCallback}}, I was wondering if you had some cycles to take a look at the patch above (and optionally the discussion going on in this ticket)? Thanks;;;","17/Mar/20 22:00;benedict;Probably not anytime soon I'm afraid, [~newkek];;;","18/Mar/20 09:59;blerer;I should be able to have the review done by tomorrow evening.;;;","18/Mar/20 13:46;newkek;Great, thanks Benedict and Benjamin.;;;","18/Mar/20 15:12;newkek;I have launched builds of this branch, you can see the results [on CircleCI|https://app.circleci.com/pipelines/github/newkek/cassandra?branch=15543-trunk];;;","24/Mar/20 18:11;newkek;After review from [~blerer] I have made some changes and the latest CI run is [here|https://app.circleci.com/pipelines/github/newkek/cassandra?branch=15543-trunk] as #11. All the unit and JVM dtests ran successfully.;;;","24/Mar/20 19:00;newkek;Just pushed a small commit that removes some unused imports I forgot to clean up: [https://github.com/newkek/cassandra/commit/55e94d94168ec62b01bdb764e1ea74d3d217ec41] 

 

Feel free to squash;;;","26/Mar/20 14:16;blerer;Patch committed into trunk at b6176906e71620b37920eaf84fa51516b046bdce;;;","26/Mar/20 15:34;newkek;Thanks [~blerer]!;;;",,,,,,,,,,,,,,,,,,,
Fix flakey test - org.apache.cassandra.index.sasi.SASIIndexTest testInvalidate,CASSANDRA-15528,13281511,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,gianluca,dcapwell,dcapwell,24/Jan/20 23:40,22/Feb/21 15:24,13/Jul/23 08:39,19/Mar/20 19:52,4.0,4.0-alpha4,,,,Test/unit,,,,0,,,,"{code}
junit.framework.AssertionFailedError: [key0, key2918, key2919, key2920, key2921, key2922, key2924, key2926, key2927, key2928]
	at org.apache.cassandra.index.sasi.SASIIndexTest.testInvalidate(SASIIndexTest.java:874)
	at org.apache.cassandra.index.sasi.SASIIndexTest.testInvalidate(SASIIndexTest.java:852)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
",,dcapwell,e.dimitrova,gianluca,ifesdjeen,jasonstack,jeromatron,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15526,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16444,,,,CASSANDRA-15527,,,,,,,,,"06/Mar/20 07:20;gianluca;15528-4.0-alpha.txt;https://issues.apache.org/jira/secure/attachment/12995814/15528-4.0-alpha.txt","19/Mar/20 18:32;gianluca;15528-dtests-results.png;https://issues.apache.org/jira/secure/attachment/12997149/15528-dtests-results.png",,,,,,,,,,,,,2.0,gianluca,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Mar 20 16:47:34 UTC 2020,,,,,,,All,,,,,,"0|z0aurc:",9223372036854775807,,,,e.dimitrova,jasonstack,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/1a735f36b988157f1e7143852c4e3749649ee25d,,,,,,,,,"In order to reproduce this issue, induce an exception on line 1108 of o.a.c.i.s.SASIIndexTest.java and execute the unit tests. After applying the provided patch, the issue is not reproducible anymore.",,,,,"24/Jan/20 23:41;dcapwell;The failure was seen on java 11;;;","11/Feb/20 14:16;e.dimitrova;[~dcapwell] Same for this one, dependent on  CASSANDRA-15526

(You reproduce it in case the other one fails and for me only the other one fails, only on Ubuntu VM so ),

I am gonna put this one for now as blocked by the other one until we come up with solution there. Then we can check whether our assumption for dependency is valid. About CASSANDRA-15526, I didn't find any other issue than the one mentioned already by [~jrwest]

As per the Java doc:

""Beware that, unlike in most collections, the {{size}} method is _not_ a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal.""

Probably we will need to find a more reliable test. TBD

 ;;;","06/Mar/20 07:19;gianluca;I'm able to reproduce this by inducing a failure on line 1108 of o.a.c.i.s.SASIIndexTest.java

[https://github.com/apache/cassandra/blob/3f2a248da11448ed9fd38467e4b353ed4df4888f/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java#L1108]

What is happening here is that when an exception or assertion error is thrown at that point, JUnit moves on to the next test, but the ExecutorService (on line 1084) continues to process the insertions in the background (even after the keyspace is truncated in the @Before/cleanup step), which pollutes the results of this test.

CASSANDRA-15526 made this more apparent, but the fix for that doesn't necessarily fix this one. The proper fix here is to shutdown (and wait for) the ExecutorService before running another test method.

I'm submitting a patch that adds a try/finally block and shuts down the insertion threads.;;;","07/Mar/20 00:48;e.dimitrova;Thanks for the patch. As we agreed, review will be completed when you are done with CI, flakey test multiplication.

 ;;;","19/Mar/20 13:15;jasonstack;the patch LGTM, one minor nit: I think we don't need to update release note or CHANGES.txt for test fix, as it's not user visible..;;;","19/Mar/20 13:39;e.dimitrova;That's a good topic. I was looking into the CHANGES.txt and it looks like it's a practice changes to the unit tests to be added.
Not sure whether someone started that unnecessarily and the others followed him/her or this is how it was agreed at some point.;;;","19/Mar/20 18:33;gianluca;[~e.dimitrova] dtests results attached;;;","19/Mar/20 19:05;e.dimitrova;LGTM +1
[~brandon.williams] can you, please commit this one? Thanks!;;;","19/Mar/20 19:52;brandon.williams;Commited, thanks!;;;","20/Mar/20 16:47;ifesdjeen;This commit has broken eclipse-warnings check. I've ninja'd the fix for trunk [a01d05d9a73211fb91c068e133d78ef8ccf34b4e|https://github.com/apache/cassandra/commit/a01d05d9a73211fb91c068e133d78ef8ccf34b4e].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix flakey test - org.apache.cassandra.index.sasi.SASIIndexTest testCrossSSTableQueries,CASSANDRA-15527,13281510,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,dcapwell,dcapwell,24/Jan/20 23:39,22/Feb/21 15:24,13/Jul/23 08:39,19/Mar/20 20:04,4.0,4.0-alpha4,,,,Test/unit,,,,0,,,,"{code}
junit.framework.AssertionFailedError: [key13, key2977, key2978, key2979, key2980, key2982, key2983, key2984, key2985, key6]
  at org.apache.cassandra.index.sasi.SASIIndexTest.testCrossSSTableQueries(SASIIndexTest.java:340)
  at org.apache.cassandra.index.sasi.SASIIndexTest.testCrossSSTableQueries(SASIIndexTest.java:286)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}",,dcapwell,e.dimitrova,gianluca,jasonstack,jeromatron,jwest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15526,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16444,CASSANDRA-15528,CASSANDRA-15526,CASSANDRA-15544,,,,,,,,,,"05/Feb/20 20:41;e.dimitrova;CASSANDRA-15527.txt;https://issues.apache.org/jira/secure/attachment/12992719/CASSANDRA-15527.txt",,,,,,,,,,,,,,1.0,e.dimitrova,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Mar 19 20:04:33 UTC 2020,,,,,,,All,,,,,,"0|z0aur4:",9223372036854775807,,,,,,,,Normal,,,,,,,,,,,,,,Solved in 15526 and 15528,,,,,"24/Jan/20 23:41;dcapwell;The failure was seen on java 11;;;","04/Feb/20 20:18;e.dimitrova;Hi [~dcapwell],

Just to confirm, this was tested only with 11 or it is not an issue with 8?

My experience is primarily with v8 but I can give it a try. ;;;","04/Feb/20 20:51;dcapwell;The tests run against 8 and 11 and the first failure I saw was 11; ill double check to see if I can find it failing on java 8;;;","04/Feb/20 20:55;dcapwell;I have yet to see it fail on java 8; all failures were java 11.;;;","04/Feb/20 20:58;e.dimitrova;Alright, thanks for checking. I will work on this probably tomorrow morning.;;;","05/Feb/20 20:40;e.dimitrova;100 times it passed successfully so I am not really able to reproduce the issue easily and go through everything with the debugger... Attaching the log.;;;","05/Feb/20 20:56;dcapwell;do you run the single test or the whole class?  

Best way to simulate CI is as follows

{code}
CASSANDRA_USE_JDK11=true ant testclasslist -Dtest.classlistfile=<(echo org/apache/cassandra/index/sasi/SASIIndexTest.java) -Dtest.classlistprefix=unit
{code}

I ran the following and got a failure locally on my Mac (different test case, same class)

{code}
$ while true; do CASSANDRA_USE_JDK11=true ant testclasslist -Dtest.classlistfile=<(echo org/apache/cassandra/index/sasi/SASIIndexTest.java) -Dtest.classlistprefix=unit; done;
...
[junit-timeout] Testsuite: org.apache.cassandra.index.sasi.SASIIndexTest
[junit-timeout] Testsuite: org.apache.cassandra.index.sasi.SASIIndexTest Tests run: 32, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.27 sec
[junit-timeout]
[junit-timeout] Testcase: testConcurrentMemtableReadsAndWrites(org.apache.cassandra.index.sasi.SASIIndexTest):  FAILED
[junit-timeout] null
[junit-timeout] junit.framework.AssertionFailedError
[junit-timeout]         at org.apache.cassandra.index.sasi.utils.RangeIterator.<init>(RangeIterator.java:46)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.KeyRangeIterator.<init>(KeyRangeIterator.java:42)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie.search(TrieMemIndex.java:150)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.TrieMemIndex.search(TrieMemIndex.java:102)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.IndexMemtable.search(IndexMemtable.java:70)
[junit-timeout]         at org.apache.cassandra.index.sasi.conf.ColumnIndex.searchMemtable(ColumnIndex.java:138)
[junit-timeout]         at org.apache.cassandra.index.sasi.TermIterator.build(TermIterator.java:91)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.QueryController.getIndexes(QueryController.java:145)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.Operation$Builder.complete(Operation.java:434)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.QueryPlan.analyze(QueryPlan.java:57)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.QueryPlan.execute(QueryPlan.java:68)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndex.lambda$searcherFor$2(SASIIndex.java:301)
[junit-timeout]         at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:455)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndexTest.getIndexed(SASIIndexTest.java:2576)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndexTest.getPaged(SASIIndexTest.java:2537)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndexTest.testConcurrentMemtableReadsAndWrites(SASIIndexTest.java:1108)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.index.sasi.SASIIndexTest FAILED
{code}

May be possible that one test is flaky and corrupts the other tests;;;","05/Feb/20 21:01;dcapwell;Linked the 2 other JIRAs for this class.  Looking at the history all 3 fail together but out of a hand full of runs on my laptop only testConcurrentMemtableReadsAndWrites failed; it may be possible that testConcurrentMemtableReadsAndWrites is flaky and corrupts the other two some times?;;;","05/Feb/20 21:32;e.dimitrova;Good point, I was running just the single test locally on my Mac. 

Thanks;;;","05/Feb/20 22:32;e.dimitrova;Pretty weird, I run it already 40-50 minutes the same way as you 1:1 and there are still no failures.... 

One run takes around 20 seconds so this means around 150 successful runs of all the tests in the class;;;","06/Feb/20 00:36;e.dimitrova;I left it running in the background , just checked again..... still no failures after three hours running. ;;;","06/Feb/20 00:47;dcapwell;So you don't see any test fail I take it?  [~jrwest] is looking at the other ticket and just reported he was able to reproduce https://issues.apache.org/jira/browse/CASSANDRA-15526?focusedCommentId=17031111&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17031111

Fun...;;;","06/Feb/20 14:50;e.dimitrova;No, no failures, everything works like a charm!

I am gonna check what he said, this got me really curious what is going on here...

 

 ;;;","06/Feb/20 15:53;jwest;[~e.dimitrova] it took me 40-50 runs to reproduce -- running the command [~dcapwell] shared above. ;;;","06/Feb/20 16:10;e.dimitrova;Weird, I ran it for three hours, the same command he shared. This is around 180*3 runs, if we consider every run 20 seconds. No failures. ;;;","07/Feb/20 16:48;e.dimitrova;Last update: Running  testConcurrentMemtableReadsAndWrites on ubuntu VM reproduced the failure immediately...

 ;;;","07/Feb/20 18:00;dcapwell;YES! IM NOT CRAZY! =D;;;","07/Feb/20 19:19;e.dimitrova;No, definitely not, I heard such issues happen a lot, unfortunately. 

Now the thing is that only that one I can reproduce, the other two not. So I guess your theory might prove correct and it is good to first start from our main contributor of troubles - 
testConcurrentMemtableReadsAndWrites;;;","10/Feb/20 21:56;e.dimitrova;[~dcapwell] As it looks like this one is dependent on  CASSANDRA-15526

(You reproduce it in case the other one fails and for me only the other one fails, only on Ubuntu VM so ),

I am gonna put this one for now as blocked by the other one until we come up with solution there. Then we can check whether our assumption for dependency is valid. About CASSANDRA-15526, I didn't find any other issue than the one mentioned already by [~jrwest]

As per the Java doc:

""Beware that, unlike in most collections, the {{size}} method is _not_ a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal.""

Probably we will need to find a more reliable test. TBD

 

 ;;;","10/Feb/20 23:56;dcapwell;bq. I am gonna put this one for now as blocked by the other one until we come up with solution there.

+1;;;","06/Mar/20 07:29;gianluca;[~e.dimitrova] I believe this has the same root cause as CASSANDRA-15528. I just submitted a patch for that and added some reproduction steps, you may want to see if that applies here too.;;;","19/Mar/20 19:41;e.dimitrova;Thank you [~gianluca]
Indeed, it solves this one too. 
I will close the ticket as soon as the other two are committed.;;;","19/Mar/20 20:04;e.dimitrova;Fixed in 15526 and 15528;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix flakey test - org.apache.cassandra.index.sasi.SASIIndexTest testConcurrentMemtableReadsAndWrites,CASSANDRA-15526,13281509,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,gianluca,dcapwell,dcapwell,24/Jan/20 23:38,16/Mar/22 13:15,13/Jul/23 08:39,19/Mar/20 19:53,4.0,4.0-alpha4,,,,Feature/SASI,Test/unit,,,0,pull-request-available,,,"{code}
junit.framework.AssertionFailedError
  at org.apache.cassandra.index.sasi.utils.RangeIterator.<init>(RangeIterator.java:46)
  at org.apache.cassandra.index.sasi.memory.KeyRangeIterator.<init>(KeyRangeIterator.java:42)
  at org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie.search(TrieMemIndex.java:150)
  at org.apache.cassandra.index.sasi.memory.TrieMemIndex.search(TrieMemIndex.java:102)
  at org.apache.cassandra.index.sasi.memory.IndexMemtable.search(IndexMemtable.java:70)
  at org.apache.cassandra.index.sasi.conf.ColumnIndex.searchMemtable(ColumnIndex.java:138)
  at org.apache.cassandra.index.sasi.TermIterator.build(TermIterator.java:91)
  at org.apache.cassandra.index.sasi.plan.QueryController.getIndexes(QueryController.java:145)
  at org.apache.cassandra.index.sasi.plan.Operation$Builder.complete(Operation.java:434)
  at org.apache.cassandra.index.sasi.plan.QueryPlan.analyze(QueryPlan.java:57)
  at org.apache.cassandra.index.sasi.plan.QueryPlan.execute(QueryPlan.java:68)
  at org.apache.cassandra.index.sasi.SASIIndex.lambda$searcherFor$2(SASIIndex.java:301)
  at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:455)
  at org.apache.cassandra.index.sasi.SASIIndexTest.getIndexed(SASIIndexTest.java:2576)
  at org.apache.cassandra.index.sasi.SASIIndexTest.getPaged(SASIIndexTest.java:2537)
  at org.apache.cassandra.index.sasi.SASIIndexTest.testConcurrentMemtableReadsAndWrites(SASIIndexTest.java:1108)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}",,dcapwell,e.dimitrova,gianluca,jasonstack,jeromatron,jwest,,,,,,"grighetto commented on pull request #475: CASSANDRA-15526 Fix testConcurrentMemtableReadsAndWrites UT
URL: https://github.com/apache/cassandra/pull/475
 
 
   The implementation of ConcurrentSkipListMap changed significantly from Java v8 to v11. In v8, ConcurrentSkipListMap#size iterates over the elements in the map and counts them as it goes. But in v11, ConcurrentSkipListMap holds an internal LongAdder instance, which is incremented as new elements are added.
   In both versions, isEmpty will return false if it's able to find the head node.
   The issue is that in v11 there's a potential race condition in which the head node may have been initialized, but the LongAdder hasn't been incremented yet, which leaves it briefly in an inconsistent state.
   
   https://issues.apache.org/jira/browse/CASSANDRA-15526?focusedCommentId=17049522&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17049522
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Mar/20 06:09;githubbot;600","grighetto commented on pull request #475: CASSANDRA-15526 Fix testConcurrentMemtableReadsAndWrites UT
URL: https://github.com/apache/cassandra/pull/475
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Mar/20 18:27;githubbot;600","grighetto commented on pull request #478: CASSANDRA-15526 Fix testConcurrentMemtableReadsAndWrites UT
URL: https://github.com/apache/cassandra/pull/478
 
 
   The implementation of ConcurrentSkipListMap changed significantly from Java v8 to v11. In v8, ConcurrentSkipListMap#size iterates over the elements in the map and counts them as it goes. But in v11, ConcurrentSkipListMap holds an internal LongAdder instance, which is incremented as new elements are added.
   In both versions, isEmpty will return false if it's able to find the head node.
   The issue is that in v11 there's a potential race condition in which the head node may have been initialized, but the LongAdder hasn't been incremented yet, which leaves it briefly in an inconsistent state.
   
   https://issues.apache.org/jira/browse/CASSANDRA-15526?focusedCommentId=17049522&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17049522
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Mar/20 18:55;githubbot;600","smiklosovic closed pull request #478:
URL: https://github.com/apache/cassandra/pull/478


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 13:15;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,CASSANDRA-15527,CASSANDRA-15528,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16444,,,,CASSANDRA-15527,,,,,,,,,"18/Mar/20 18:53;gianluca;15526-20200318-trunk-4.0.txt;https://issues.apache.org/jira/secure/attachment/12997053/15526-20200318-trunk-4.0.txt","19/Mar/20 18:53;gianluca;15526-dtests-results.png;https://issues.apache.org/jira/secure/attachment/12997150/15526-dtests-results.png","02/Mar/20 18:20;gianluca;15526-trunk-4.0.txt;https://issues.apache.org/jira/secure/attachment/12995314/15526-trunk-4.0.txt","14/Mar/20 02:48;e.dimitrova;jvm_15526.zip;https://issues.apache.org/jira/secure/attachment/12996716/jvm_15526.zip","14/Mar/20 02:02;e.dimitrova;unit_tests_15526;https://issues.apache.org/jira/secure/attachment/12996713/unit_tests_15526",,,,,,,,,,5.0,gianluca,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Mar 19 19:53:36 UTC 2020,,,,,,,All,,,,,,"0|z0auqw:",9223372036854775807,,,,e.dimitrova,jasonstack,,,Normal,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/731dfda99249c9b64fca5fa258c6078bfbe040ac,,,,,,,,,Execute SASIIndexTest#testConcurrentMemtableReadsAndWrites in debug mode and set a breakpoint on line 1087 and step over it until the assertion error is thrown.,,,,,"24/Jan/20 23:41;dcapwell;The failure was seen on java 11;;;","05/Feb/20 23:09;jwest;I was able to reproduce locally and added a message to the assertion to get a bit more insight. When the {{TrieMemIndex}} is instantiated the map has a first and last key (it looks like a single key in this case) but size is returning 0. 

 
{code:java}
junit.framework.AssertionFailedError: min = -7787472368264638040, max = -7787472368264638040, count = 0 {code};;;","07/Feb/20 18:24;e.dimitrova;[~jrwest] , are you looking into this one? I see it unassigned so I wasn't sure. 

As I said in CASSANDRA-15527, on Ubuntu VM I am able to reproduce this one. Still no success with the other two reported by [~dcapwell] so I think his point that this one might be the main trouble maker is a valid assumption to start with.

Do you want me to look into it?;;;","07/Feb/20 18:36;jwest;[~e.dimitrova] any input here is appreciated. I hadn't assigned it to myself since I wasn't able to look at it immediately (likely early next week I can) but I have been thinking about it on and off. The challenge, at first glance, is that {{ConcurrentSkipListSet#size()}} doesn't seem to be reliable (and the javadoc hints that this is sort of the case -- although I can't explain what I am seeing in that assert above just yet). The problem is we rely on the count (which is what we use {{size()}} for) for one important thing in RangeIntersectionIterator, the heuristic to determine if we use bounce or lookup. ;;;","07/Feb/20 19:24;e.dimitrova;[~jrwest]  Alright, I will try to dig into this now until the rest of the day and try to come up with some feedback too. 

Thanks for sharing your findings, I was in the same direction yesterday but need to explore more the code.;;;","07/Feb/20 20:44;jwest;[~e.dimitrova] forgot to mention that you may find this minor change helpful: https://github.com/jrwest/cassandra/tree/sasi-concurrent-read-write-failure. Its the added assertion message above. ;;;","10/Feb/20 21:41;e.dimitrova;[~jrwest] thanks!

As mentioned on Slack, I spent my afternoon to understand the codebase. 

I don't see any other explanation for this flakiness than the one provided in the java doc for the size function (as you also pointed out). Why we only see it in java 11, that I am not sure about. Maybe we were just lucky before as there is the same note for the size method for Java 8.

So this makes me think the efforts here should be to figure out a more stable test which could assure the needed results with higher certainty. Let me know if you agree with me here or if you have a different vision. 

 ;;;","11/Feb/20 15:02;jwest;[~e.dimitrova] the use of {{size()}} in the code is definitely suspicious given the javadoc. Whats odd to me is {{isEmpty}}, {{first}}, {{size}} all rely on an internal method called {{findFirst}}. Unless we are deleting from the set, which right now I don't believe we are, it seems unexpected that the first two would return indicating elements are present but {{size}} does not -- even with the javadoc warning. With that in mind I'd like to better understand the root cause of the failure. I also explored if we could get rid of using {{size}} but I don't see a clear path to doing so at this time.;;;","02/Mar/20 18:19;gianluca;I'm able to consistently reproduce this test failure in my dev environment on OSX with JDK 11 using breakpoints. If I set a breakpoint at the following line and keep stepping over it in the IDE, it will eventually throw the assertion error in RangeIterator.

[https://gitbox.apache.org/repos/asf?p=cassandra.git;a=blob;f=test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java;h=0be05b901a3425adbb1bcd88d6d96a9f1efe5652;hb=HEAD#l1087]

Note, you'll have to increase the test.timeout and range_request_timeout_in_ms to be able to debug it properly.

The implementation of {{ConcurrentSkipListMap}} changed significantly from Java v8 to v11. In v8, {{ConcurrentSkipListMap#size}} iterates over the elements in the map and counts them as it goes. But in v11, {{ConcurrentSkipListMap}} holds an internal {{LongAdder}} instance, which is incremented as new elements are added.
 In both versions, {{isEmpty}} will return false if it's able to find the head node.
 The issue is that in v11 there's a potential race condition in which the head node may have been initialized, but the {{LongAdder}} hasn't been incremented yet, which leaves it briefly in an inconsistent state.
 I confirmed that's the case by logging the value of {{keys.size()}} in {{TrieMemIndex#search}} right before and after the {{keys.isEmpty()}} check. The size is 0 at runtime, but when the IDE debugger inspects the value, it has changed to 1 already.

I'm attaching a patch that fixes this issue by replacing the {{!keys.isEmpty()}} check by {{keys.size() > 0}} in {{TrieMemIndex}}.
 {{ConcurrentSkipListMap#size}} also checks the head node first, if it's unset, it returns 0 right away. Otherwise, it will compute the sum of the {{LongAdder}}, which also already happens in the constructor of {{KeyRangeIterator}} anyway, so it shouldn't be too big of a performance penalty, asymptotically speaking.;;;","02/Mar/20 18:26;e.dimitrova;I was looking at the same java11 implementation 10 minutes ago but didn't have a patch yet. I will make the review for you. At least what I observed was exactly what you are saying. Thanks!;;;","02/Mar/20 18:29;e.dimitrova;[~gianluca] can you, please, assign and move through the different phases this ticket?

 ;;;","14/Mar/20 02:50;e.dimitrova;In-JVM and Unit tests run results attached as per our agreement. One failed unit test - checkTTLIsCapped

Without checking it in detail I don't think it is related. But in all cases it would be good to figure out this failure related to this or not. (if it is not, it is good to open a new ticket for it if needed) Quick search didn't find any related tickets. 

I also looped this test 100 times and it definitely doesn't fail anymore. And I also didn't find a different issue here.

Please attach the dtests results 

 ;;;","17/Mar/20 19:38;e.dimitrova;Stop review until I get all the CI results in place, attached to the ticket. Thanks;;;","18/Mar/20 10:29;jasonstack;{quote}The issue is that in v11 there's a potential race condition in which the head node may have been initialized, but the LongAdder hasn't been incremented yet, which leaves it briefly in an inconsistent state.
{quote}
{quote}I confirmed that's the case by logging the value of keys.size() in TrieMemIndex#search right before and after the keys.isEmpty() check. The size is 0 at runtime, but when the IDE debugger inspects the value, it has changed to 1 already.
{quote}

Good catch! Should we fix {{SkipListMemIndex}} as well? we can also pass the size via {{KeyRangeIterator}} constructor, so that it's computed once.

In jdk 11 {{ConcurrentSkipListMap#size()}} javadoc:
{quote} * <p>Beware that, unlike in most collections, this method is
 * <em>NOT</em> a constant-time operation. Because of the
 * asynchronous nature of these sets, determining the current
 * number of elements requires traversing them all to count them.
 * Additionally, it is possible for the size to change during
 * execution of this method, in which case the returned result
 * will be inaccurate. Thus, this method is typically not very
 * useful in concurrent applications.{quote}
I think it's safe not to include keys when size()=0 but isEmpty()=false, as write is not considered successful from client POV.;;;","18/Mar/20 15:16;e.dimitrova;Thanks [~jasonstack] Indeed, SkipListMemIndex will need the same fix. 
Calculating the size once sounds reasonable to me.
;;;","18/Mar/20 19:00;gianluca;Thanks for the review and suggestions [~jasonstack].

I've just submitted a new patch and a clean [PR|https://github.com/apache/cassandra/pull/478] to address the requested changes in {{SkipListMemIndex}} and the {{KeyRangeIterator}} constructor.

[~e.dimitrova] The dtests are running in CI again, I'll upload them here when ready.;;;","19/Mar/20 04:21;jasonstack;+1 LGTM;;;","19/Mar/20 18:54;gianluca;[~e.dimitrova] I just attached the dtests [results|https://issues.apache.org/jira/secure/attachment/12997150/15526-dtests-results.png] for the open PR.;;;","19/Mar/20 19:06;e.dimitrova;LGTM +1
[~brandon.williams] can you, please commit this one? Thanks!;;;","19/Mar/20 19:10;e.dimitrova;[~gianluca] you might want actually to squash first your commits;;;","19/Mar/20 19:53;brandon.williams;Committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix potentially flaky ImportTest#testImportCorruptWithoutValidation,CASSANDRA-15517,13281033,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,22/Jan/20 18:11,21/Dec/20 08:08,13/Jul/23 08:39,23/Jan/20 08:16,4.0,4.0-alpha3,,,,Test/unit,,,,0,,,,The assert relies on the order of files in {{File.listFiles}},,dcapwell,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Jan 23 08:16:47 UTC 2020,,,,,,,All,,,,,,"0|z0art4:",9223372036854775807,,,,dcapwell,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/e61c09eaf5e0b3f5d374032a690ea4bf17b36e2f,,,,,,,,,cci run,,,,,"22/Jan/20 18:14;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/15517], [tests|https://circleci.com/workflow-run/c083532a-080a-4ab6-8dd2-959834fccfa4];;;","22/Jan/20 19:41;dcapwell;LGTM +1.;;;","23/Jan/20 08:16;marcuse;and committed, thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix in-jvm message serialization between versions,CASSANDRA-15515,13280934,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,22/Jan/20 10:32,21/Dec/20 08:08,13/Jul/23 08:39,22/Jan/20 12:11,4.0,4.0-alpha3,,,,Test/dtest/java,,,,0,,,,trunk in-jvm-dtests currently uses MessagingService.current_version to serialize messages to other nodes which is wrong in mixed mode,,ifesdjeen,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jan 22 12:11:51 UTC 2020,,,,,,,All,,,,,,"0|z0ar7c:",9223372036854775807,,,,ifesdjeen,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/3f749907f9f6845078aacb25c38a79e9a6fb8bed,,,,,,,,,cci,,,,,"22/Jan/20 10:34;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/15515];;;","22/Jan/20 11:25;ifesdjeen;+1, lgtm!;;;","22/Jan/20 12:11;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Properly clean up DefaultSessionProvider#sessionCache when closing QueryReplayer,CASSANDRA-15514,13280267,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,18/Jan/20 04:14,21/Dec/20 08:08,13/Jul/23 08:39,20/Jan/20 14:05,4.0,4.0-alpha3,,,,Tool/fql,,,,0,,,,"The {{DefaultSessionProvider}} used by the {{QueryReplayer}} caches the sessions by hostname. When closing, the sessions and their associated clusters are closed but they never get removed from the cache.

When connecting to the same host, the closed session is returned, which is unexpected. 

Besides the unexpected behavior, the session references remaining in the cache leaks resources. ",,marcuse,yifanc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15537,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jan 20 14:05:54 UTC 2020,,,,,,,All,,,,,,"0|z0an34:",9223372036854775807,,,,marcuse,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/1fbd3297a9c8303ca7aa2ff30d182e5ca568de4c,,,,,,,,,Unit test and CI,,,,,"18/Jan/20 06:21;yifanc;[PR|https://github.com/apache/cassandra/pull/427], [code|https://github.com/yifan-c/cassandra/tree/CASSANDRA-15514], [test|https://app.circleci.com/github/yifan-c/cassandra/pipelines/538442be-e3c6-4b1d-844a-5ff48a37fa55/workflows/658295e7-331a-4f6d-a014-f8fa189043a9]

Briefly, the patch includes 
 * Remove the session from cache when the {{DefaultSessionProvider}} is being closed as closing the query replayer.
 * Add in-jvm dtest to simulate replaying queries end-to-end. Replay and close twice to show the sessions are released.;;;","20/Jan/20 14:05;marcuse;+1, committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
In-jvm upgrade dtest version parsing does not support 4.0 alpha/beta/rc builds,CASSANDRA-15509,13279942,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,16/Jan/20 17:35,21/Dec/20 08:08,13/Jul/23 08:39,22/Jan/20 13:30,2.2.16,3.0.20,3.11.6,4.0,4.0-alpha3,Test/dtest/java,,,,0,,,,"for example:

https://circleci.com/gh/krummas/cassandra/2686",,dcapwell,marcuse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15490,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jan 22 13:30:36 UTC 2020,,,,,,,All,,,,,,"0|z0al2w:",9223372036854775807,,,,dcapwell,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/91f321e096714128b36732313e54975e466315f9,,,,,,,,,circle run,,,,,"16/Jan/20 17:43;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/15509], [circleci|https://circleci.com/workflow-run/015c297e-48bd-4a4a-a138-02e63b6c6e15];;;","16/Jan/20 21:17;dcapwell;the patch should work for alpha3, but it may be good to use the same regex that is used by client

see: com.datastax.driver.core.VersionNumber

{code}
""(\\d+)\\.(\\d+)(\\.\\d+)?(\\.\\d+)?([~\\-]\\w[.\\w]*(?:\\-\\w[.\\w]*)*)?(\\+[.\\w]+)?"";
{code}

This will allow the same versioning, so possible to have extra preRelease tags.;;;","20/Jan/20 14:19;marcuse;pushed a slightly modified version of that regexp to the [branch|https://github.com/krummas/cassandra/commits/marcuse/15509] and tests ran [here|https://circleci.com/workflow-run/30db14da-32bb-4786-ab69-0349ed869419];;;","21/Jan/20 18:16;dcapwell;LGTM +1

 

Testing done outside of circle:

 

{code}

$ jshell
Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
| Welcome to JShell -- Version 11.0.2
| For an introduction type: /help intro

jshell> import java.util.regex.Pattern

jshell> Pattern pattern = Pattern.compile(""dtest-(?<fullversion>(\\d+)\\.(\\d+)(\\.\\d+)?(\\.\\d+)?)([~\\-]\\w[.\\w]*(?:\\-\\w[.\\w]*)*)?(\\+[.\\w]+)?\\.jar"");
pattern ==> dtest-(?<fullversion>(\d+)\.(\d+)(\.\d+)?(\.\d+)? ... [.\w]*)*)?(\+[.\w]+)?\.jar

jshell> var m = pattern.matcher(""dtest-4.0-alpha3.jar"")
m ==> java.util.regex.Matcher[pattern=dtest-(?<fullvers ... ar region=0,20 lastmatch=]

jshell> m.matches()
$9 ==> true

jshell> m.group(""fullversion"")
$10 ==> ""4.0""

jshell> var m = pattern.matcher(""dtest-4.0.0.1-alpha3.jar"")
m ==> java.util.regex.Matcher[pattern=dtest-(?<fullvers ... ar region=0,24 lastmatch=]

jshell> m.matches()
$12 ==> true

jshell> m.group(""fullversion"")
$13 ==> ""4.0.0.1""

jshell> var m = pattern.matcher(""dtest-4.0-rc-4.jar"")
m ==> java.util.regex.Matcher[pattern=dtest-(?<fullvers ... ar region=0,18 lastmatch=]

jshell> m.matches()
$15 ==> true

jshell> m.group(""fullversion"")
$16 ==> ""4.0""

{code};;;","21/Jan/20 18:18;dcapwell;circle ci is passing and manual testing of changes works for expected versions with ""preRelease"" tags.;;;","22/Jan/20 13:30;marcuse;and committed, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failing jvm dtest: FailingRepairTest.testFailingMessage,CASSANDRA-15508,13279941,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,marcuse,marcuse,16/Jan/20 17:33,15/May/20 08:53,13/Jul/23 08:39,29/Jan/20 08:47,2.2.16,3.0.20,3.11.6,4.0,4.0-alpha3,Test/unit,,,,0,pull-request-available,,,"It seems we can't run parameterized unit tests with {{ant testsome}}:

{code}
$ ant testsome -Dtest.name=org.apache.cassandra.distributed.test.FailingRepairTest -Dtest.methods=testFailingMessage
....
[junit-timeout] Testcase: initializationError(org.junit.runner.manipulation.Filter):    Caused an ERROR
[junit-timeout] No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@4d95d2a2
[junit-timeout] java.lang.Exception: No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@4d95d2a2
[junit-timeout]         at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
{code}",,dcapwell,ifesdjeen,marcuse,,,,,,,,,"dcapwell commented on pull request #426: CASSANDRA-15508 - run jvm dtests in parallel
URL: https://github.com/apache/cassandra/pull/426
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jan/20 19:41;githubbot;600","dcapwell commented on issue #426: CASSANDRA-15508 - run jvm dtests in parallel
URL: https://github.com/apache/cassandra/pull/426#issuecomment-577793860
 
 
   test
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Jan/20 17:50;githubbot;600","dcapwell commented on pull request #426: CASSANDRA-15508 - run jvm dtests in parallel
URL: https://github.com/apache/cassandra/pull/426#discussion_r370265669
 
 

 ##########
 File path: .circleci/config-2_1.yml
 ##########
 @@ -22,6 +22,12 @@ j8_par_executor: &j8_par_executor
     #exec_resource_class: xlarge
   parallelism: 4
 
+j8_small_par_executor: &j8_small_par_executor
+  executor:
+    name: java8-executor
 
 Review comment:
   test commit
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Jan/20 17:51;githubbot;600","dcapwell commented on pull request #430: CASSANDRA-15508 - for 2.2 branch.
URL: https://github.com/apache/cassandra/pull/430
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jan/20 01:00;githubbot;600","dcapwell commented on pull request #431: CASSANDRA-15508 - run jvm dtests in parallel - 3.0
URL: https://github.com/apache/cassandra/pull/431
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jan/20 01:23;githubbot;600","dcapwell commented on pull request #426: CASSANDRA-15508 - run jvm dtests in parallel
URL: https://github.com/apache/cassandra/pull/426
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/20 17:49;githubbot;600","dcapwell commented on pull request #430: CASSANDRA-15508 - for 2.2 branch.
URL: https://github.com/apache/cassandra/pull/430
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/20 17:49;githubbot;600","dcapwell commented on pull request #431: CASSANDRA-15508 - run jvm dtests in parallel - 3.0
URL: https://github.com/apache/cassandra/pull/431
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/20 17:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-15014,CASSANDRA-15463,,,,,,,CASSANDRA-15639,,,,,"18/Jan/20 00:53;dcapwell;Screen Shot 2020-01-17 at 4.51.17 PM.png;https://issues.apache.org/jira/secure/attachment/12991272/Screen+Shot+2020-01-17+at+4.51.17+PM.png",,,,,,,,,,,,,,1.0,dcapwell,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jan 29 08:47:01 UTC 2020,,,,,,,All,,,,,,"0|z0al2o:",9223372036854775807,,,,ifesdjeen,marcuse,,,Low,,2.2.0,,,https://github.com/apache/cassandra/commit/6e3bf545793dd786138213d334599e533de4ec28,,,,,,,,,"[code|https://github.com/apache/cassandra/pull/426]

[tests|https://circleci.com/gh/dcapwell/workflows/cassandra/tree/jvmDtestParallelRun]",,,,,"16/Jan/20 18:11;dcapwell;This kinda makes sense since the test is parameterized. [~marcuse] do you have a link to a build which is failing because of this? Last I saw circle uses test-jvm-dtest and I use testclasslist when running it

{code}
$ ant testclasslist -Dtest.classlistfile=<(echo org/apache/cassandra/distributed/test/FailingRepairTest.java) -Dtest.classlistprefix=distributed
 ...
 testclasslist:
 [testparallelhelper] Warning: Nashorn engine is planned to be removed from a future JDK release
 [echo] Number of test runners: 1
 [junit-timeout] OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
 [junit-timeout] Testsuite: org.apache.cassandra.distributed.test.FailingRepairTest
 [junit-timeout] Testsuite: org.apache.cassandra.distributed.test.FailingRepairTest Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 17.205 sec
 [junit-timeout]
 [junitreport] Processing /Users/dcapwell/src/github/apache/cassandra/build/test/TESTS-TestSuites.xml to /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null108561510
 [junitreport] Loading stylesheet jar:[file:/usr/local/Cellar/ant/1.10.7/libexec/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl|file:///usr/local/Cellar/ant/1.10.7/libexec/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl]
 [junitreport] Transform time: 389ms
 [junitreport] Deleting: /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null108561510

BUILD SUCCESSFUL
 Total time: 22 seconds
{code};;;","16/Jan/20 18:17;marcuse;https://circleci.com/gh/krummas/cassandra/2684;;;","16/Jan/20 18:32;dcapwell;Thanks!  Replicated locally

{code}
$ ant test-jvm-dtest-forking
...
     [exec] testsome:
     [exec] [junit-timeout] OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
     [exec] [junit-timeout] Testsuite: org.apache.cassandra.distributed.test.FailingRepairTest
     [exec] [junit-timeout] Testsuite: org.apache.cassandra.distributed.test.FailingRepairTest Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.086 sec
     [exec] [junit-timeout]
     [exec] [junit-timeout] Testcase: initializationError(org.junit.runner.manipulation.Filter):        Caused an ERROR
     [exec] [junit-timeout] No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@481a996b
     [exec] [junit-timeout] java.lang.Exception: No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@481a996b
     [exec] [junit-timeout]     at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
     [exec] [junit-timeout]     at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
     [exec] [junit-timeout]     at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
     [exec] [junit-timeout]     at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
     [exec] [junit-timeout]
     [exec] [junit-timeout]
     [exec] [junit-timeout] Test org.apache.cassandra.distributed.test.FailingRepairTest FAILED
     [exec] [junitreport] Processing /Users/dcapwell/src/github/apache/cassandra/build/test/TESTS-TestSuites.xml to /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null1366232332
     [exec] [junitreport] Loading stylesheet jar:file:/usr/local/Cellar/ant/1.10.7/libexec/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl
     [exec]
     [exec] BUILD FAILED
     [exec] /Users/davidcapwell/src/github/apache/cassandra/build.xml:1517: The following error occurred while executing this line:
     [exec] /Users/davidcapwell/src/github/apache/cassandra/build.xml:1803: Some test(s) failed.
     [exec]
     [exec] Total time: 5 seconds
     [exec] [junitreport] Transform time: 943ms
     [exec] [junitreport] Deleting: /var/folders/cm/08cddl2s25j7fq3jdb76gh4r0000gn/T/null1366232332
     [exec] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
     [exec] Buildfile: /Users/davidcapwell/src/github/apache/cassandra/build.xml
     [exec]    [script] Warning: Nashorn engine is planned to be removed from a future JDK release
{code}

This looks caused by the fact test-jvm-dtest-forking is implemented on top of testsome.  The tests run faster with testclasslist and would let circle run multiple instance in parallel; is there any issue with changing circle to use that and let testsome keep breaking?;;;","16/Jan/20 19:09;dcapwell;I'll try changing j?_jvm_dtests to do testclasslist;;;","16/Jan/20 22:11;dcapwell;[~ifesdjeen] [~marcuse] could you two review?  This modifies CASSANDRA-15506 so we always run upgrade and upgrade and jvm dtest are not separated (same build).;;;","17/Jan/20 09:43;marcuse;the reason I separated them and had the dtest jar build as ""type: approval"" was to avoid rebuilding cassandra 5 extra times on every commit

what has changed since CASSANDRA-15014 to make {{ant testclasslist}} work now?;;;","17/Jan/20 15:27;dcapwell;That’s fair; my Main thoughts were that I hope it’s short term (there is a Jira to publish the jars), and it simplifies the build.  If it’s desired I can keep it the same way (two builds)

No idea what has changed, but testclasslist is how I run jvm dtests so know it works for 3.0 and trunk.;;;","17/Jan/20 18:06;dcapwell;spoke with [~marcuse] and one issue with this patch is that his patch he is working on (upgrade tests) fails.  Ill try to rework this so it works with his patch; ill also keep upgrade as separate and move to its own runner so it can use different resources than normal jvm dtest.;;;","18/Jan/20 00:24;dcapwell;Ok, after diving through ant implementation and looking at which processes get forked; here is a dump of what I see.

 

1) testclasslist creates a new JVM for each class.  

2) unless you override -Dtest.runner the default is 1; testclasslist runs with 1 runner so no concurrent tests (in the same container)

3) current model creates a JVM for each method, but does not support paramaiterized tests (same method has different names)

4) the test Marcus is working on had one test fail to gossip then the second test couldn't start since the port was still open; this looks like a resource leak within a single test class.

 

Given this, I do feel that its fair to say that in-jvm dtest tests are expected to run within a single JVM for all the tests in a single class; this is also how unit tests run.  By also having this requirement, we simplify the build since we don't need the in-jvm tasks, since you can just say -Dtest.classlistprefix=distributed; this means we don't fragment the build.

 

Without looking at the code, this is what I changed circle ci to do

 

{code}

ant testclasslist -Dtest.classlistfile=<( echo ""org/apache/cassandra/distributed/test/ReadRepairTest.java"" ) -Dtest.classlistprefix=distributed

{code}

 

this means that the split and run commands in circle ci can be shared by unit, distributed, long, and burn.;;;","18/Jan/20 00:52;dcapwell;Pushed the change so that upgrade tests are their own build and still require approval; I think the only real change here is that the approval button is now top level so I can trigger the dtest builds at the same time as building trunk.;;;","18/Jan/20 01:03;dcapwell;FYI [~mck]; trying to change circle ci build for in-jvm dtests.;;;","22/Jan/20 18:41;ifesdjeen;+1
;;;","22/Jan/20 18:49;marcuse;+1, I'll commit tomorrow;;;","23/Jan/20 08:19;marcuse;realised we want to commit this to all the branches (2.2, 3.0, 3.11, trunk) - could you provide patches for them as well [~dcapwell]?;;;","23/Jan/20 23:07;dcapwell;Sure, I'll provide a set of patches.  I have a feeling 3.0 will start to fail... lets see!;;;","24/Jan/20 00:09;dcapwell;Ok, working on 2.2 and noticed that generate.sh causes a lot of changes... looking at the history it seems that not everything was controlled by .circleci/config-2_1.yml

ill see about making this clear in the history.

smithed to 2.2 without my change, ran generate.sh and get the following
{code}
$ git diff | wc -l
    1072
{code}

this is 0 on trunk.;;;","24/Jan/20 01:01;dcapwell;2.2
src: https://github.com/apache/cassandra/pull/430 - 3 commits so its clear what changed what.
tests: https://circleci.com/gh/dcapwell/cassandra/tree/cleanHistory-2.2;;;","24/Jan/20 01:24;dcapwell;3.0
src: https://github.com/apache/cassandra/pull/431 - 2 commits, same reason
tests: https://circleci.com/gh/dcapwell/cassandra/tree/cleanHistory-3.0;;;","24/Jan/20 01:32;dcapwell;3.11 is missing things...

{code}
$ git diff trunk config-2_1.yml | wc -l
     396
{code}

Ill just rewrite for this branch since patch doesn't work =(;;;","24/Jan/20 03:28;dcapwell;ok, I have something which compiles for 3.11

3.11
src: https://github.com/dcapwell/cassandra/pull/new/cleanHistory-3.11
tests: https://circleci.com/gh/dcapwell/cassandra/tree/cleanHistory-3.11;;;","24/Jan/20 03:50;dcapwell;hold off, the builds (though green) look off.  ill say when done.;;;","24/Jan/20 04:05;dcapwell;ok, so for some reason circle ci put all my jobs in ""not running"" state even though the pipeline is running (and nothing else is running); given this can't validate in the UI.

Looking at the YAML, all the branches look ok.  [~marcuse] should be good.;;;","24/Jan/20 16:55;dcapwell;3.0 ran last night and verified it did the right thing for dtests.  trying to trigger a 3.11 to confirm.;;;","27/Jan/20 09:59;marcuse;looks like the 3.11 in-jvm upgrade dtests fail with: {{java.lang.RuntimeException: No v22 versions found}}

also the 3.0 and 3.11 workflows don't have {{start_jvm_upgrade_dtest}} in the top level like trunk does?;;;","27/Jan/20 18:27;dcapwell;ill look closer;;;","27/Jan/20 18:39;dcapwell;bq. also the 3.0 and 3.11 workflows don't have start_jvm_upgrade_dtest in the top level like trunk does?

3.0: https://circleci.com/workflow-run/1145e096-8b8b-4519-bd47-81655b6cedfe
3.0 w/ my patch: https://circleci.com/workflow-run/0d06171e-3056-4976-b9db-c3e950e686bc
3.11: https://circleci.com/workflow-run/8988cc5c-736d-4d1b-b811-c9df5544cb9c
3.11 w/ my patch: https://circleci.com/workflow-run/2da5d802-8a3c-42eb-9ab4-7e44fcf4a70b

the shape looks the same to me

What I saw when applying the patch was that I had to rewrite this for 2.2, 3.0, and 3.11 since the patch couldn't cleanly apply; this implies to me there are other differences but I have not looked into that.

Trying to look closer at the 3.11 failing test now.;;;","27/Jan/20 18:43;dcapwell;Sorry, I get the comment now.

The patch I wrote for trunk moved the approval command to the top, but that was lost when I rewrote for 3.0 and 3.11; ill add it back.;;;","27/Jan/20 18:59;dcapwell;pushed changes to 3.0 and 3.11 to also move the approval to top level;

3.0: https://circleci.com/workflow-run/79a284c3-3b71-4a8a-9f19-6a3ed6e0bebd
3.11: https://circleci.com/workflow-run/a0b6cb07-eef5-4758-b39f-bc605dfdad8c


Ill update once I start looking at the 3.11 failure;;;","27/Jan/20 19:08;dcapwell;3.11 had a test failure in jvm dtest https://app.circleci.com/jobs/github/dcapwell/cassandra/393/tests
The test didn't fail in 3.11, but had the same error in a different test, and had another error as well. https://app.circleci.com/jobs/github/dcapwell/cassandra/381/tests

This looks flaky so will attempt to rerun to get a green build.;;;","27/Jan/20 20:07;dcapwell;ok think I fixed 3.11.  I forgot to include the copy dtest jars bit into the parallel Junit runner so no jars were found.  Pushed a fix for this, waiting on circle now.

Latest 3.11: https://circleci.com/workflow-run/0440a3e8-bcc8-4a15-b99d-c06fe8aa078b;;;","27/Jan/20 21:21;dcapwell;3.11 is passing now.

[~marcuse] the dag layout match, and tests are all passing.  Can you look again?;;;","27/Jan/20 23:59;dcapwell;CASSANDRA-15463 adds jvm dtests running on java 11, so get a merge conflict with this.  If that goes in first, will need to rebase trunk.;;;","28/Jan/20 00:29;dcapwell;Rebased against master and rewrote the j11 changes to match the new model; here is the java 11 pipeline https://app.circleci.com/github/dcapwell/cassandra/pipelines/af287bdf-41b3-4231-b1bf-095dc91803fa/workflows/bffb62c8-997c-4461-af4c-66b9f725528c;;;","28/Jan/20 14:34;marcuse;||branch||circle || patch ||
|2.2 | [lowres|https://circleci.com/workflow-run/09f08975-1d84-49bb-88be-52612bdbf71e], [highres|https://circleci.com/workflow-run/d0bd3809-3acf-4b2f-b5df-7c6db8abbd6d] | [patch|https://github.com/krummas/cassandra/commits/david/15508-2.2] |
|3.0 | [lowres|https://circleci.com/workflow-run/1fd6b99d-844c-490b-b19d-1faff3e286d1], [highres|https://circleci.com/workflow-run/e10706d5-2e18-478a-8d0b-296b189e9f17] | [patch|https://github.com/krummas/cassandra/commits/david/15508-3.0] |
|3.11| [lowres|https://circleci.com/workflow-run/1fd6b99d-844c-490b-b19d-1faff3e286d1], [highres|https://circleci.com/workflow-run/0762d0d1-1ced-404f-bb10-a1f2ed181fad] | [patch|https://github.com/krummas/cassandra/commits/david/15508-3.11] |
|trunk | [j8 lowres|https://circleci.com/workflow-run/4031a9f8-cd7f-4e93-8811-4dca3bcf857a], [j11 lowres|https://circleci.com/workflow-run/b0582f3e-f7cf-4aef-8ca9-8f8cff89df9b], [j8 highres|https://circleci.com/workflow-run/8e2ed311-b74a-41d1-8025-36c6efe8d90f], [j11 highres|https://circleci.com/workflow-run/1225ff39-0666-40b9-8a4d-0f77c058d41f] | [patch|https://github.com/krummas/cassandra/commits/david/15508-trunk] |

trunk j8 highres in-jvm upgrade tests seem to fail with {{No timing found for ...}};;;","28/Jan/20 17:31;dcapwell;Link to the j8 higher jvm upgrade test https://app.circleci.com/jobs/github/krummas/cassandra/2847

{code}
No timing found for ""/home/cassandra/cassandra/test/distributed/org/apache/cassandra/io/sstable/format/ForwardingSSTableReader.java""
{code}

This is common given the flow of the finding (list all files, sort by timing, filter; since the filter is after the sort by timing we see this a lot, it shouldn't impact a normal run).

I believe that the failure is this line

{code}
set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed ""s;^/home/cassandra/cassandra/test/distributed/;;g"" | grep ""Test\.java$"" | grep upgrade > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt
{code}

The reason for this is that the next line is an echo which isn't in the logs and the line before it is what logs the no timing message.  This is weird to me since if I apply that line to the output in the logs I get 

{code}
org/apache/cassandra/distributed/upgrade/MixedModeReadRepairTest.java
org/apache/cassandra/distributed/upgrade/UpgradeTest.java
{code}

Ill try to dig into this.;;;","28/Jan/20 17:33;dcapwell;ohhhhhhhh I see the problem!  2 nodes pass, 2 fail.  We currently don't have enough tests to justify 4 nodes so it fails (only 2 tests, so 2/4 == 0 on 2 nodes).

Fixing the higher files now.;;;","28/Jan/20 17:43;dcapwell;Sorry for all the back and forth.  I will update all the branches and have a higher/lower test run linked here next time.;;;","28/Jan/20 19:01;dcapwell;|| Branch || j8 LOWER || j11 LOWER || j8 HIGHER || j11 HIGHER || Status |
| trunk  | [circle|https://circleci.com/workflow-run/7d7effd3-fb31-4492-809c-a728d9fa64b4] | [circle|https://circleci.com/workflow-run/357d79a9-388c-4179-b906-1c814eae5068] | [circle|https://circleci.com/workflow-run/0aac61bf-b796-4f2b-a1df-f816d6d25141] | [circle|https://circleci.com/workflow-run/3f6f8cc8-c76c-4da9-8ca7-0f6a717f57ca] | green (some unit tests failed but look flaky) |
| 3.11  | [circle|https://circleci.com/workflow-run/177bd574-d3d8-4383-a950-2370ae95434e] | NA | [circle|https://circleci.com/workflow-run/58236772-59af-45be-88f9-d7aaa26eca54] | NA | Some tests were flaky on HIGHER, [reran on circle|https://circleci.com/workflow-run/21f47971-de1a-4972-bb80-7b9f26924b72] and green |
| 3.0  | [circle|https://circleci.com/workflow-run/3d5df26f-d764-48e0-9a34-4de858760d01] | NA | [circle|https://circleci.com/workflow-run/75137ab1-7b22-4759-891b-243a7b92beb0] | NA | Green |
| 2.2  | [circle|https://circleci.com/workflow-run/245e115d-703f-44ce-a031-0803c346f50b] | NA | [circle|https://circleci.com/workflow-run/daa0495b-748f-4781-879c-3c9b404fb600] | NA | some unit tests failed but look flaky.  Higher didn't schedule anything so canceled and [submitted a new workflow|https://circleci.com/workflow-run/e486f41d-1119-42c6-b424-41625c0a30d4] unit tests failed as well, but jvm dtest is green|;;;","28/Jan/20 21:02;dcapwell;[~marcuse] sorry again for all the back and forth.

I made sure that each branch had for LOWER small=1 medium=1 and HIGHER small=2 medium=2.  
I made sure to run the builds for both LOWER and HIGHER in each branch (links above).

There are test failures, but they were unit.  If there were test failures for jvm dtest I linked the rerun.
3.11 and before do not run jvm dtests in java 11, so marked NA in the table.;;;","29/Jan/20 08:45;marcuse;lgtm, will commit with a small change to keep 2.2 utests_long running with xlarge resource class: https://github.com/krummas/cassandra/commit/37240814111fad75ce0785b55722056586737766;;;","29/Jan/20 08:47;marcuse;and committed, thanks;;;",,,,,,
Test org.apache.cassandra.distributed.test.DistributedReadWritePathTest#failingReadRepairTest does not test a failing read repair and should be updated to actually trigger a failed read repair,CASSANDRA-15507,13279680,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,15/Jan/20 21:52,15/May/20 08:39,13/Jul/23 08:39,17/Jan/20 13:50,4.0,4.0-alpha3,,,,Test/unit,,,,0,pull-request-available,,,"The test org.apache.cassandra.distributed.test.DistributedReadWritePathTest#failingReadRepairTest makes a few assumptions which are not valid at the moment.

1) the write to node 1 and 2 have the same digest (they don’t, this is caused by the timestamp being different)
2) node 3 will participate with the read; it won’t give the fact that org.apache.cassandra.locator.ReplicaPlans#contactForRead will speculate the first 2 nodes always, so node 3 won’t get involved with the repair
3) node 3 will attempt to get repaired (it won’t because its never looked at)",,benedict,dcapwell,ifesdjeen,,,,,,,,,"dcapwell commented on pull request #424: CASSANDRA-15507 failingReadRepairTest was not triggering a repair on the third node as expected, so fixed the test to make the expected semantics
URL: https://github.com/apache/cassandra/pull/424
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/20 23:05;githubbot;600","dcapwell commented on pull request #424: CASSANDRA-15507 failingReadRepairTest was not triggering a repair on the third node as expected, so fixed the test to make the expected semantics
URL: https://github.com/apache/cassandra/pull/424#discussion_r367155016
 
 

 ##########
 File path: test/distributed/org/apache/cassandra/distributed/test/DistributedTestBase.java
 ##########
 @@ -94,7 +94,7 @@ public static void assertRows(Object[][] actual, Object[]... expected)
         {
             Object[] expectedRow = expected[i];
             Object[] actualRow = actual[i];
-            Assert.assertTrue(rowsNotEqualErrorMessage(expected, actual),
+            Assert.assertTrue(rowsNotEqualErrorMessage(actual, expected),
 
 Review comment:
   this was flipped so caused confusing error messages.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/20 23:07;githubbot;600","dcapwell commented on pull request #424: CASSANDRA-15507 failingReadRepairTest was not triggering a repair on the third node as expected, so fixed the test to make the expected semantics
URL: https://github.com/apache/cassandra/pull/424
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Jan/20 00:49;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jan 17 13:49:29 UTC 2020,,,,,,,All,,,,,,"0|z0ajug:",9223372036854775807,,,,ifesdjeen,,,,Normal,,4.0,,,https://github.com/apache/cassandra/commit/815c397f4876aae9ed2ae5a9578c5ec7087643ab,,,,,,,,,"PR: https://github.com/apache/cassandra/pull/424

CircleCI: https://circleci.com/gh/dcapwell/cassandra/tree/fixDistributedReadWritePathTestTest",,,,,"15/Jan/20 23:14;benedict;Sure, wfm.  It would be nice to try to solve the general problem of nominating nodes to be contacted, i.e. specifying the contact preference order of nodes for a coordinator (since this is going to be needed in a lot of distributed tests), but this looks to solve the clear and present problem, so no huge harm punting on that.;;;","16/Jan/20 00:46;dcapwell;The only thing I have thought of to solve this is to make the selection pluggable (rather not mutate CQL for this) so dtest could just override the implementation.  The main reason I didn't go this route was in a attempt to try to make this less specific to a version; so the cost is a potentially failing test in the future...;;;","17/Jan/20 13:49;ifesdjeen;You're right;  the way it is implemented now is not quite right. 

Patch looks good to me, +1. 

Committed to trunk with [815c397f4876aae9ed2ae5a9578c5ec7087643ab|https://github.com/apache/cassandra/commit/815c397f4876aae9ed2ae5a9578c5ec7087643ab];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Slow query log indicates opposite LTE when GTE operator,CASSANDRA-15503,13279460,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,wally.baggaley@smartrg.com,wally.baggaley@smartrg.com,14/Jan/20 23:21,18/Jun/20 13:11,13/Jul/23 08:39,11/May/20 11:20,3.11.7,4.0,4.0-beta1,,,Observability/Logging,,,,0,,,,"Slow query log is indicating a '<=' when a "">="" operator was sent. This appears to be a logging only issue, but it threw off development for a day figuring this out. Please fix.

How to reproduce. Set slow query log timeout to 1 millisecond.

In cqlsh run

{noformat}
CREATE TABLE atable (
      .id text,
      timestamp timestamp,
      PRIMARY KEY ((id), timestamp)
 ) WITH CLUSTERING ORDER BY (timestamp DESC);
insert into atable (id, timestamp) VALUES ( '1',1);
insert into atable (id, timestamp) VALUES ( '2',2);
insert into atable (id, timestamp) VALUES ( '3',3);
insert into atable (id, timestamp) VALUES ( '4',4);
insert into atable (id, timestamp) VALUES ( '5',5);
insert into atable (id, timestamp) VALUES ( '6',6);
insert into atable (id, timestamp) VALUES ( '7',7);
insert into atable (id, timestamp) VALUES ( '8',8);
insert into atable (id, timestamp) VALUES ( '9',9);
insert into atable (id, timestamp) VALUES ( '10',10);
insert into atable (id, timestamp) VALUES ( '11',11);

select * from atable where timestamp >= '1970-01-01 00:00:00.006+0000' allow filtering;
{noformat}


In the logs it prints:

{noformat}
DEBUG 1 operations were slow in the last 5003 msecs:
<SELECT * FROM ks.atable WHERE timestamp <= 1970-01-01 00:00Z LIMIT 100>, time 7 msec - slow timeout 1 msec
{noformat}

But the query works appropriately and returns

{noformat}
 id | timestamp
----+---------------------------------
  6 | 1970-01-01 00:00:00.006000+0000
  7 | 1970-01-01 00:00:00.007000+0000
  9 | 1970-01-01 00:00:00.009000+0000
 10 | 1970-01-01 00:00:00.010000+0000
  8 | 1970-01-01 00:00:00.008000+0000
 11 | 1970-01-01 00:00:00.011000+0000

(6 rows)
{noformat}
",,adelapena,bereng,cscotta,Gerrrr,jeromatron,wally.baggaley@smartrg.com,,,,,,"adelapena opened a new pull request #568:
URL: https://github.com/apache/cassandra/pull/568


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Apr/20 12:08;githubbot;600","adelapena opened a new pull request #569:
URL: https://github.com/apache/cassandra/pull/569


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Apr/20 12:08;githubbot;600","adelapena opened a new pull request #67:
URL: https://github.com/apache/cassandra-dtest/pull/67


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Apr/20 12:09;githubbot;600","bereng commented on pull request #568:
URL: https://github.com/apache/cassandra/pull/568#issuecomment-623971523


   @adelapena, wondering if `DataRange#getOperator(boolean, boolean)` would need a similar treatment?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/May/20 10:17;githubbot;600","adelapena commented on pull request #568:
URL: https://github.com/apache/cassandra/pull/568#issuecomment-624114527


   @bereng you are right, there are some errors with how token inequalities are printed, I've fixed the arguments that are passed of `getOperator` when token ranges are used, and added a few additional dtests ([here](https://github.com/apache/cassandra-dtest/pull/67/commits/02b24c1851f9dc6912313dfae14a8aef24dab1a1)). Good catch.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/May/20 15:11;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,CASSANDRA-15500,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-12403,,,,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon May 11 11:18:46 UTC 2020,,,,,,,All,,,,,,"0|z0aihs:",9223372036854775807,,,,adelapena,bereng,,,Normal,,3.10,,,https://github.com/apache/cassandra/commit/406a8596eb7ad18079df20121521b1c659063ef4,,,,,,,,,https://github.com/apache/cassandra-dtest/pull/67,,,,,"18/Jan/20 01:41;cscotta;Confirmed this reproduces on 3.11.5, affecting strict equalities as well.

Strict equality expressions aren't printed at all:

{{cqlsh> select * from test.atable where timestamp = '1975-01-01 00:00:00.006+0000' allow filtering;}}
{{=> <SELECT * FROM test.atable WHERE  LIMIT 100>, time 11 msec - slow timeout 1 msec/cross-node}}

And as Wallace notes, inequalities are reversed:

{{cqlsh> select * from test.atable where timestamp > '1975-01-01 00:00:00.006+0000' allow filtering;}}
{{=> <SELECT * FROM test.atable WHERE timestamp < 1974-12-31 16:00-0800 LIMIT 100>, time 11 msec - slow timeout 1 msec/cross-node}};;;","28/Apr/20 12:37;adelapena;The reversed inequalities are caused by the {{DESC}} clustering order used by the table. [{{Slices.ArrayBackedSlices#toCQLString}}|https://github.com/apache/cassandra/blob/cassandra-3.10/src/java/org/apache/cassandra/db/Slices.java#L623] doesn't take into account that in case of reverse order the operators are internally reversed.

As for the strict equality, there seems to be a mistake at the beginning of  [{{ClusteringIndexNamesFilter#toCQLString}}|https://github.com/apache/cassandra/blob/cassandra-3.10/src/java/org/apache/cassandra/db/filter/ClusteringIndexNamesFilter.java#L192], where clustering restrictions with a single clustering or empty are not printed. This was introduced by CASSANDRA-7392, specifically in [this commit|https://github.com/stef1927/cassandra/commit/27962122243d41d0bc994eccb84970dcba14306d]. I think that they should not be printed only if there are no clusterings at all.

Here is a patch addressing both problems:
||branch||PR||utest||dtest||
|3.11|[568|https://github.com/apache/cassandra/pull/568]|[67|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/67/]|[88|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/88/]|
|trunk|[569|https://github.com/apache/cassandra/pull/569]|[68|https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/68/]|[89|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest/89/]|
|dtest|[67|https://github.com/apache/cassandra-dtest/pull/67]|
;;;","06/May/20 08:12;bereng;LGTM after addressing review comments +1;;;","11/May/20 11:18;adelapena;Thanks for the review. Committed to 3.11 branch as [406a8596eb7ad18079df20121521b1c659063ef4|https://github.com/apache/cassandra/commit/406a8596eb7ad18079df20121521b1c659063ef4] and merged up to [trunk|https://github.com/apache/cassandra/commit/5f61e94ea5d25aae1eb96e74512e55edef1cef14]. Dtest changes committed as [10ff82bf779289da913b40c1058fd85bd748c986|https://github.com/apache/cassandra-dtest/commit/10ff82bf779289da913b40c1058fd85bd748c986].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate results with DISTINCT queries in mixed mode 2.1/3.0,CASSANDRA-15501,13279003,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,marcuse,marcuse,13/Jan/20 08:03,15/May/20 08:53,13/Jul/23 08:39,16/Apr/20 11:02,2.2.17,3.0.21,3.11.7,4.0,4.0-beta1,Legacy/Core,,,,0,,,,When a client switches coordinator from a 2.1 node to a 3.0 node it sends a 2.1 paging state to the 3.0 node. The 2.1 {{PagingState}} does not have {{remainingInPartition}} so on the 3.0 side we default this to Integer.MAX_VALUE. This value is then used to decide if the lastKey should be included in the result.,,aleksey,ifesdjeen,jeromatron,marcuse,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Thu Apr 16 11:02:42 UTC 2020,,,,,,,All,,,,,,"0|z0afoo:",9223372036854775807,,,,aleksey,ifesdjeen,samt,,Normal,,3.0 alpha 1,,,https://github.com/apache/cassandra/commit/16f639af94f56cdc7145299730278e27a9113e2e,,,,,,,,,new upgrade test & cci runs,,,,,"13/Jan/20 08:08;marcuse;[patch|https://github.com/krummas/cassandra/commits/marcuse/distinct_duplicates] [tests|https://circleci.com/workflow-run/46f204cc-0a6c-4fa7-9e14-73b10e3afb20];;;","13/Jan/20 11:13;samt;LGTM +1;;;","07/Apr/20 14:28;aleksey;+1;;;","15/Apr/20 12:29;marcuse;had to fix in-jvm upgrade tests, [~ifesdjeen] could you have a quick look at the two last (non-circle-ci) commits in the trunk branch below?

branches: 
[2.2|https://github.com/krummas/cassandra/commits/marcuse/15501-2.2]
[3.0|https://github.com/krummas/cassandra/commits/marcuse/15501]
[3.11|https://github.com/krummas/cassandra/commits/marcuse/15501-3.11]
[trunk|https://github.com/krummas/cassandra/commits/marcuse/15501-trunk]

unit tests:
[2.2|https://circleci.com/gh/krummas/cassandra/3175]
[3.0|https://circleci.com/gh/krummas/cassandra/3169]
[3.11|https://circleci.com/gh/krummas/cassandra/3171]
[trunk|https://circleci.com/gh/krummas/cassandra/3192]

jvm dtests
[2.2|https://circleci.com/gh/krummas/cassandra/3176]
[3.0|https://circleci.com/gh/krummas/cassandra/3168]
[3.11|https://circleci.com/gh/krummas/cassandra/3170]
[trunk|https://circleci.com/gh/krummas/cassandra/3193]

jvm upgrade dtests
[3.0|https://circleci.com/gh/krummas/cassandra/3179]
[3.11|https://circleci.com/gh/krummas/cassandra/3180] (failure expected since we use 2.2 -> 3.0 for this upgrade test)
[trunk|https://circleci.com/gh/krummas/cassandra/3198]

dtests novnodes
[3.0|https://circleci.com/gh/krummas/cassandra/3182]
[3.11|https://circleci.com/gh/krummas/cassandra/3186]
[trunk|https://circleci.com/gh/krummas/cassandra/3196]

dtests vnodes
[3.0|https://circleci.com/gh/krummas/cassandra/3181]
[3.11|https://circleci.com/gh/krummas/cassandra/3185]
[trunk|https://circleci.com/gh/krummas/cassandra/3197];;;","16/Apr/20 09:28;ifesdjeen;+1 for in-jvm dtest part.;;;","16/Apr/20 11:02;marcuse;committed the duplicate-fix to 3.0 and 3.11 and the dtest + tests to 2.2 and trunk, thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Internode message builder does not add trace header,CASSANDRA-15499,13278947,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yifanc,yifanc,yifanc,12/Jan/20 19:04,21/Dec/20 08:08,13/Jul/23 08:39,22/Jan/20 18:19,4.0,4.0-alpha3,,,,Messaging/Internode,,,,0,pull-request-available,,,"The messages built with the {{Builder}} ({{org.apache.cassandra.net.Message.Builder}}) do not have the trace header when tracing is enabled. 
Consequently, no tracing session gets propagated to other nodes, and the tracing function is broken. 

The set of static {{out*}} methods provided (to create an out-bounding message) in Message do not have the issue. They can properly add the trace header when necessary. 
To be clear, only the {{Builder}} missed adding the tracing header and it should be fixed to be consistent with the {{out*}} methods.",,aleksey,dcapwell,yifanc,,,,,,,,,"yifan-c closed pull request #422:
URL: https://github.com/apache/cassandra/pull/422


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Aug/20 18:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-2848,,,,,,,,,,,,,,,,,,,,,,,0.0,yifanc,,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Jan 22 18:19:11 UTC 2020,,,,,,,All,,,,,,"0|z0afc8:",9223372036854775807,,,,dcapwell,,,,Low,,4.0-alpha,4.0-alpha1,,https://github.com/apache/cassandra/commit/0e3a90698a94772e57df39e7461efe6b7e09d678,,,,,,,,,Unit test and circleCI,,,,,"12/Jan/20 22:05;yifanc;The code change is minor. Trace headers are added when tracing is on and no trace headers are present. 

[PR|https://github.com/apache/cassandra/pull/422], [Code|https://github.com/yifan-c/cassandra/tree/CASSANDRA-15499] and [Test|https://app.circleci.com/github/yifan-c/cassandra/pipelines/3df93bc8-f10e-44bc-884f-767da032a862/workflows/6ee3bd5c-98a1-44f0-9889-21a1ec77bebd];;;","13/Jan/20 20:30;yifanc;cc [~aleksey] since the change is applied to {{Message}}, which is part of the patch of internode messaging refactor. ;;;","13/Jan/20 20:32;dcapwell;starting review now.  At first glance the code looks fine, so starting with testing it.;;;","13/Jan/20 21:15;yifanc;To add more context, I am working on the other [patch|https://issues.apache.org/jira/browse/CASSANDRA-2848] that makes more messages being created with the Builder and the {{org.apache.cassandra.distributed.test.MessageForwardingTest}} that checks the tracing history fails.;;;","13/Jan/20 21:15;dcapwell;Based off trunk, build() is only called in a special case (forwardTo with mixed ids) so not a common bug, but will be as more usages of build() pop up.

Looking at other call sites for new Message, I see the below are also missing tracing

org.apache.cassandra.net.Message.Serializer#toPre40FailureResponse and
org.apache.cassandra.net.Message.Serializer#toPost40FailureResponse

The patch looks to improve build, but I wonder if the failure response methods should also be updated (my instinct is yes, but would like [~aleksey] feedback)?;;;","15/Jan/20 16:50;yifanc;The message serializer should be good.

Tracing headers are placed in the {{params}}. Both {{toPre40FailureResponse}} and {{toPost40FailureResponse}} copy the {{params}} and any existing trace headers fields should been copied.;;;","15/Jan/20 18:14;aleksey;The code looks fine, but conceptually I would prefer it to be the responsibility of {{withParams()}} caller to build the correct map, and not have {{build()}} reach out to global state to set it implicitly if avoidable. Add a helper for other callers if needed?;;;","15/Jan/20 18:25;yifanc;Thanks [~aleksey]. 

Agree that {{withParams()}} is the intended way to add the trace headers and other fields, especially after seeing the unit test cases. However, I feel it is quite easy to forget adding the trace headers, and the logic of check and add is applicable to all outing messages. It, in certain degree, becomes an intrinsic step of building a message. Does it sound a valid argument?

Regarding helper, probably adding a method in the builder, say {{withTracingMaybe(tracing: Tracing)}}, if the above does not sound good. And call this method for building every message...;;;","16/Jan/20 13:42;aleksey;It would help if you showed the code from your other upcoming patch. The general idea is/was that for out messages you should be using a variant of {{Message#out*}} methods, which all add the header for you.

 

[~dcapwell] In that scenario (forwardTo with mixed ids), the original tracing headers are preserved when the builder copied params field from the original message which has them, so there is no bug currently.;;;","16/Jan/20 15:57;dcapwell;Thanks for the details;;;","16/Jan/20 16:06;yifanc;Hi [~aleksey]

The {{Message#out*}} methods are good and it was stated in the ticket description. However, those 2 message creation approaches are inconsistent. So this patch aims to close the gap. 

What is the desired usage of using the {{Message.Builder}}? I feel having 2 implementations of message creation can have problem in maintaining the code. To me, using {{Message.Builder}} gives more flexibility. 

bq. It would help if you showed the code from your other upcoming patch.
Attaching the link to the [patch|https://github.com/apache/cassandra/compare/trunk...yifan-c:CASSANDRA-2848-per-request-timeout] to see it helps to give more context. *Discussion about the attached patch does not fit the topic of this ticket.* The patch involves a lot of changes. Please search for ""Message.Builder"" to see the usage of it. In short, builder is used to adjust the message expiration time since the query is allowed accept custom timeout value. 
;;;","22/Jan/20 15:58;yifanc;The patch was updated to having a method to add tracing params explicitly. ;;;","22/Jan/20 16:26;aleksey;+1 from me. When and if David approves, I'll commit for you guys.;;;","22/Jan/20 17:59;dcapwell;Looking now.;;;","22/Jan/20 18:00;dcapwell;LGTM +1;;;","22/Jan/20 18:19;aleksey;Committed as [0e3a90698a94772e57df39e7461efe6b7e09d678|https://github.com/apache/cassandra/commit/0e3a90698a94772e57df39e7461efe6b7e09d678], cheers.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty clustering instead of Clustering.EMPTY,CASSANDRA-15498,13278767,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,10/Jan/20 17:40,15/May/20 08:54,13/Jul/23 08:39,10/Jan/20 18:08,4.0,4.0-alpha3,,,,Legacy/Local Write-Read Paths,,,,0,,,,"It seems that there are several ways to produce an empty clustering (with Kind.CLUSTERING) without using Clustering.EMPTY. They can be produced when copying another empty clustering (such as Clustering.EMPTY) , and also during deserialization when calling to Clustering.make",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Jan/20 18:04;e.dimitrova;Screen Shot 2020-01-10 at 1.03.19 PM.png;https://issues.apache.org/jira/secure/attachment/12990550/Screen+Shot+2020-01-10+at+1.03.19+PM.png","10/Jan/20 18:04;e.dimitrova;Screen Shot 2020-01-10 at 1.03.36 PM.png;https://issues.apache.org/jira/secure/attachment/12990551/Screen+Shot+2020-01-10+at+1.03.36+PM.png","10/Jan/20 18:04;e.dimitrova;Screen Shot 2020-01-10 at 1.03.53 PM.png;https://issues.apache.org/jira/secure/attachment/12990552/Screen+Shot+2020-01-10+at+1.03.53+PM.png",,,,,,,,,,,,3.0,e.dimitrova,,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Fri Jan 10 18:08:38 UTC 2020,,,,,,,,,,,,,"0|z0ae88:",9223372036854775807,,,,brandon.williams,,,,Normal,,3.11.0,,,https://github.com/apache/cassandra/commit/c6544fd200d1965b08ae2c40d2f9fd756a4367a9,,,,,,,,,Screenshots from the CI attached,,,,,"10/Jan/20 17:47;e.dimitrova;Patch for trunk added [here|https://github.com/ekaterinadimitrova2/cassandra/tree/13595-continue].
Pull request ready for review:
[here|https://github.com/ekaterinadimitrova2/cassandra/pull/12];;;","10/Jan/20 18:08;brandon.williams;Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential Overflow in DatabaseDescriptor Functions That Convert Between KB/MB & Bytes,CASSANDRA-15470,13277692,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mallika,jwest,jwest,06/Jan/20 12:10,07/Mar/23 11:52,13/Jul/23 08:39,05/Feb/20 19:59,4.0,4.0-alpha4,,,,Local/Config,,,,0,pull-request-available,,,"{{DatabaseDescriptor}} has several functions that convert between user supplied sizes in KB/MB and bytes. These are implemented without much consistency and, while unlikely, several have the potential to overflow since validation on the input is missing. Meanwhile, some widen the number to a long correctly. Options include: widening in all places or simply doing better validation on start up — currently only the lower bound of the valid range is checked for many of these fields.

List of Affected {{DatabaseDescriptor}} Methods:
 * {{getColumnIndexSize}}
 * {{getColumnIndexCacheSize}}
 * {{getBatchSizeWarnThreshold}}
 * {{getNativeTransportFrameBlockSize}}
 * {{getRepairSessionSpaceInMegabytes}}
 * {{getNativeTransportMaxFrameSize}}",,djoshi,jeromatron,jwest,mallika,,,,,,,,"mallikakulkarni commented on pull request #425: CASSANDRA-15470 Adding validations on several fields in DatabaseDescr…
URL: https://github.com/apache/cassandra/pull/425
 
 
   …iptor that have the potential to overflow
   
   DatabaseDescriptor has several functions that convert between user supplied sizes in KB/MB and bytes. Taking the validation path to avoid integer overflows.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Jan/20 07:40;githubbot;600","smiklosovic closed pull request #425:
URL: https://github.com/apache/cassandra/pull/425


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: pr-unsubscribe@cassandra.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Mar/22 12:59;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mallika,,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Wed Feb 05 19:59:41 UTC 2020,,,,,,,All,,,,,,"0|z0a7ww:",9223372036854775807,,,,djoshi,jwest,,,Low,,5.0,,,https://github.com/apache/cassandra/commit/7b637d5c2dbfcb387fc24d4d7145f6eb1e2f2052,,,,,,,,,Unit tests written for newly added validations,,,,,"07/Jan/20 06:46;mallika;Could I work on this JIRA?;;;","07/Jan/20 06:50;jwest;Absolutely! I’d be happy to review. For 4.0 I think the validation path is best. ;;;","07/Jan/20 06:59;djoshi;[~mallika] sure. Here's some [documentation to get started|http://cassandra.apache.org/doc/latest/development/how_to_review.html] and [code style|http://cassandra.apache.org/doc/latest/development/code_style.html] for contributing code. Please open a github PR and link it on this ticket and mark this ticket as Patch Available when you're ready.;;;","08/Jan/20 07:29;mallika;Thanks [~jrwest] and [~djoshi]. I looked through the code. It seems to me that for methods
 * {{getColumnIndexSize}}
 * {{getColumnIndexCacheSize}}
 * {{getBatchSizeWarnThreshold}}
 * {{getNativeTransportFrameBlockSize}}

0 < {{input}} < 2 * 1024 * 1024 is a good validation to have. 

I do see existing validation for {{getRepairSessionSpaceInMegabytes}} in {{DatabaseDescriptor::applyConfig}} and {{DatabaseDescriptor::setRepairSessionSpaceInMegabytes}}, and for {{getNativeTransportMaxFrameSize}} in {{DatabaseDescriptor::applyConfig}}.

However I do feel validations for all these inputs are necessary in their respective Getter and Setter methods both as all the fields in {{Config}} class are public, and {{DatabaseDescriptor::getRawConfig}} exposes a reference to the {{Config}} class, and its values.  ;;;","08/Jan/20 20:12;jwest;[~mallika] that seems like a reasonable range. When {{input}} is KiB thats 2Tib which is extremely large for any of those values. I agree the validation would be beneficial in the setters since some of them can be changed by operators at runtime (or may be made to do so in the future) or tests.

 

I would recommend *not* performing additional validation in the getters. The reasons for doing the getter validation you noted are correct but the getters may be used in a code hot path where minimal work is desired. Looking at the code {{getRawConfig()}} is only used for testing (and perhaps should be marked as {{@VisibleForTesting}};;;","10/Jan/20 07:54;mallika;Thanks for the feedback. I am working on the patch. Will post it soon.;;;","16/Jan/20 07:42;mallika;[https://github.com/apache/cassandra/pull/425];;;","16/Jan/20 17:47;jwest;Thanks [~mallika]. Comments below:

- Thank you for adding a test!
- For the {{_mb}} fields the error messages should read 2TiB instead of GiB. 
- Instead of having separate if/else if clauses for the min and max, consider combining conditions (e.g. {{conf.column_index_size_in_kb <= 0 ||  conf.column_index_size_in_kb >= 2 * 1024 * 1024}}) and making the log message read something like “[field] must be a positive value less than 2GiB, but was”
- Consider making {{2 * 1024 * 1024}} a constant. 
;;;","18/Jan/20 03:58;mallika;Thank you [~jrwest] . I added a new commit to the Pull Request.;;;","18/Jan/20 19:21;jwest;* Thank you for adding the validation in the {{set*}} functions. The condition in {{setColumnIndexSize}} is using bitwise OR instead of logical OR. 
 * The error message for {{conf.native_transport_max_frame_size_in_mb}} uses KiB as the unit. Also, is there a reason you picked 2 GiB as a frame size limit? On one hand it seems like a reasonable limit, on the other, within the scope of this ticket (preventing overflows when converting to bytes) I don’t know if we want to artificially limit it. ;;;","19/Jan/20 00:57;mallika;Jordan West, Thanks for catching it. I corrected the typo. I also corrected the units in the error messages.

 The {{DatabaseDescriptor::getNativeTransportMaxFrameSize}} returns the {{conf.native_transport_max_frame_size_in_mb}} field multiplied by (1024 * 1024).

2GiB == (2 * 1024 * 1024 * 1024) == ({{Integer.MAX_VALUE}} + 1) for a 4 byte unsigned integer in java

Therefore, an input for {{native_transport_max_frame_size_in_mb}} has to be less than (2 * 1024);;;","20/Jan/20 20:55;jwest;[~mallika] ah right thank you. and thanks for the corrections. The patch LGTM. I ran the new test locally and have started a circle run [here|https://circleci.com/gh/jrwest/cassandra/tree/CASSANDRA-15470]. [~djoshi] can you review as well? Thanks;;;","21/Jan/20 22:41;djoshi;Thanks [~jrwest] for the review and [~mallika] for the patch. I went over it and had some feedback. This [branch|https://github.com/dineshjoshi/cassandra/commits/CASSANDRA-15470-review] summarizes my proposed changes on top of your patch. If you think it is ok, I'll go ahead and commit it.;;;","22/Jan/20 21:32;mallika;Thanks [~djoshi]. please go ahead;;;","23/Jan/20 23:06;djoshi;+1;;;","27/Jan/20 18:36;jwest;I'm generally fine with either the original patch I reviewed or the newer version. I'm not sure it was necessary to do the renaming here (when other functions don't follow that convention yet) and I think {{ByteUnit}} could be a little more developed. ;;;","27/Jan/20 19:24;djoshi;[~jrwest], I had to rename the methods as this patch actually surfaced issues in unit tests that were introduced due to a naming issue. I think I'll open a follow up ticket to do a bigger refactor to flesh out {{ByteUnit}}. WDYT?;;;","27/Jan/20 22:18;jwest;[~djoshi] moving the {{ByteUnit}} changes out to a separate ticket SGTM. Can you say a bit more about what test failed and why? I missed that. Thanks. ;;;","27/Jan/20 23:02;djoshi;Hi [~jrwest], I have made changes per your feedback. {{testIndexedReaderRowDeletion}}, {{testIndexedReaderTombstone}} and {{testIndexedReaderRT}} get the {{column_index_size_in_kb}}. Unfortunately get getter, {{getColumnIndexSize}}, returns this in bytes while the setter {{setColumnIndexSize}} accepts it in KB. This leads to a situation that we cannot pass in the value returned from the getter into the setter. This issue surfaced when we added the overflow checks. I think in the longer term we need to fix this throughout the codebase but that is an exercise for another ticket.;;;","28/Jan/20 05:59;jwest;Thanks [~djoshi]. I like the improvements to {{ByteUnit}}. I agree that a more wholesale review of {{DatabaseDescriptor}} would be good but is best saved for a separate ticket and at a different time in the release cycle. 

+1;;;","05/Feb/20 19:59;djoshi;Committed. Thanks, [~mallika] and [~jrwest].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to start embedded cassandra on JDK 11,CASSANDRA-15468,13277595,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,gus,gus,gus,05/Jan/20 22:57,15/May/20 08:54,13/Jul/23 08:39,13/Jan/20 13:49,4.0,4.0-alpha3,,,,,,,,0,,,,"Cassandra fails to start without the following jvm options from jvm-11-server.options:
{code:java}
-Djdk.attach.allowAttachSelf=true
--add-exports java.base/jdk.internal.misc=ALL-UNNAMED
--add-exports java.base/jdk.internal.ref=ALL-UNNAMED
--add-exports java.base/sun.nio.ch=ALL-UNNAMED
--add-exports java.management.rmi/com.sun.jmx.remote.internal.rmi=ALL-UNNAMED
--add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED
--add-exports java.rmi/sun.rmi.server=ALL-UNNAMED
--add-exports java.sql/java.sql=ALL-UNNAMED

--add-opens java.base/java.lang.module=ALL-UNNAMED
--add-opens java.base/jdk.internal.loader=ALL-UNNAMED
--add-opens java.base/jdk.internal.ref=ALL-UNNAMED
--add-opens java.base/jdk.internal.reflect=ALL-UNNAMED
--add-opens java.base/jdk.internal.math=ALL-UNNAMED
--add-opens java.base/jdk.internal.module=ALL-UNNAMED
--add-opens java.base/jdk.internal.util.jar=ALL-UNNAMED
--add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED
{code}
Without these options the following stack trace appears and prevents startup
{code:java}
2020-01-05T17:42:15,009 ERROR main org.apache.cassandra.service.CassandraDaemon Exception encountered during startup java.lang.ExceptionInInitializerError
	at org.apache.cassandra.config.DatabaseDescriptor.guessFileStore(DatabaseDescriptor.java:1127)
	at org.apache.cassandra.config.DatabaseDescriptor.applySimpleConfig(DatabaseDescriptor.java:541)
	at org.apache.cassandra.config.DatabaseDescriptor.applyAll(DatabaseDescriptor.java:340)
	at org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:168)
	at org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:152)
	at org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:665)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:609)
	at org.jesterj.ingest.persistence.Cassandra.start(Cassandra.java:135)
	at org.jesterj.ingest.scanners.SimpleFileScannerImplFTITest.testScanWithMemory(SimpleFileScannerImplFTITest.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: java.lang.RuntimeException: java.lang.IllegalAccessException: access to public member failed: jdk.internal.ref.Cleaner.clean[Ljava.lang.Object;@779dfe55/invokeVirtual, from org.apache.cassandra.io.util.FileUtils (unnamed module @2eda0940)
	at org.apache.cassandra.io.util.FileUtils.<clinit>(FileUtils.java:95)
	... 33 more
Caused by: java.lang.IllegalAccessException: access to public member failed: jdk.internal.ref.Cleaner.clean[Ljava.lang.Object;@779dfe55/invokeVirtual, from org.apache.cassandra.io.util.FileUtils (unnamed module @2eda0940)
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:942)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:2206)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkMethod(MethodHandles.java:2146)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:2290)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:2283)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflect(MethodHandles.java:1747)
	at org.apache.cassandra.io.util.FileUtils.<clinit>(FileUtils.java:86)
	... 33 more
{code}
Use of --add-exports is described in the oracle documentation as
{quote}You may use the --add-exports option as a temporary workaround to compile source code with references to JDK internal classes.
{quote}
which implies that this will not work forever.  Also the code in FileUtils seems somewhat confused as it prints out a warning, as if it means to allow startup with a lower performance expectation, and then throws an exception that entirely prevents startup.",,gus,jeromatron,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Jan/20 20:31;gus;CASSANDRA-15468.patch;https://issues.apache.org/jira/secure/attachment/12990129/CASSANDRA-15468.patch",,,,,,,,,,,,,,1.0,gus,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,,Mon Jan 13 13:49:46 UTC 2020,,,,,,,All,,,,,,"0|z0a7bc:",9223372036854775807,,,,samt,,,,,,4.0,,,https://github.com/apache/cassandra/commit/b30ebb952c53a3dae078f6883b26feca685eb7cc,,,,,,,,,No additional testing required,,,,,"06/Jan/20 11:47;samt;As you've seen from CASSANDRA-9608, these options are required due to the use of internal jdk classes and compounded by the cross compilation requirement while we maintain support for java 8. I very much doubt that neither these requirements nor support for {{--add-exports}} in the jdk are going to be removed any time soon. So you're right that this is a somewhat temporary solution, but it will be addressed when it becomes necessary to do so.

Regarding the log message, I'm not sure I agree that the messaging is ambiguous here given that the message is logged at {{ERROR}} level and prefixed {{FATAL}}. To me, that indicates pretty clearly that a failure is imminent.
;;;","07/Jan/20 20:31;gus;I'd like to respectfully ask that this not be resolved yet. I don't agree that there are no problems here. What is the point of the latter half of the message? 

{quote}Some data, both in-memory and on-disk, may live longer due to garbage collection.{quote}

I would say that's quite incorrect since Cassandra won't even be starting up, and even if it did attempts to use FileUtils.clean() are going to throw NPE's which will probably do a bit worse than cause data to live longer. 
Additionally the message give here is cryptic and leaves the user unable to discern (without searching through your jira, and taking the time to fully debug cassandra's code, and read your startups scripts as I did) what the problem is or how to correct it. So before we close this I'd like to suggest one thing that I hope is non-controversial, and another that might require some consideration:

1. Revise the error message here for the case of an IllegalAccessException to advise the user how to move forward. Particularly tell them that they should either use the standard cassandra start up scripts, or (expert) supply the following --add-export and --add-open jvm args
2. Perhaps document the exports and opens requirements in a machine readable way by adding Add-Exports: and Add-Opens: attributes to the manifest for the jar file. 

Suggestion #2 will not change the need for the .options files unless a bigger change to invoke via java -jar happens (which I'm not suggesting here, but it could eliminate that portion of the options file)

At some point I'll likely add support to Uno-Jar  to dig through manifests of dependency jars looking for any jars with exports to collect them for the uber jar... obviously that can only be a best effort thing, since no spec requires such attributes but certainly it makes sense for jars to politely declare what exports they require. (except of course proprietary stuff that might seek to obfuscate and inhibit any usage not licensed...);;;","07/Jan/20 20:32;gus;Patch suggesting a possible improved error message (item 1) attached.;;;","09/Jan/20 00:00;gus;Worth noting that I've realized that ""Add-Opens"" does not exist in the world of jar Manifests AFAICT... I assumed it would if ""Add-Export"" did, but it didn't work and I find no references to it on the web. It might be possible for me to use that info in Uno-Jar anyway since I hope to add support for module layers such that dependencies on different versions can co-exist, and java.lang.Module has an addOpens() method, so while I'm there playing with modules anyway... :).;;;","13/Jan/20 13:49;samt;bq. I'd like to respectfully ask that this not be resolved yet.

Fair enough, I was a bit hasty in closing it. The patch looks good and absolutely improves the user experience so I've edited the title of this JIRA to reflect what it does. If you wouldn't mind opening follow up JIRAs for any work that needs to be done to support Uno-Jar or for making changes to the jar manifest, that'd be great.

 
||branch||CI||
|[15468-trunk|https://github.com/beobal/cassandra/tree/15468-trunk]|[circle|https://circleci.com/gh/beobal/workflows/cassandra/tree/15468-trunk]|

(the few test failures are unrelated)

Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
