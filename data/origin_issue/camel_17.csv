Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Blocker),Outward issue link (Child-Issue),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Container),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Inward issue link (Regression),Outward issue link (Regression),Outward issue link (Required),Inward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
StreamCache file is removed before wireTap ends in a splitter wireTap combination route,CAMEL-12108,13127589,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Bas Claessen,Bas Claessen,28/Dec/17 21:49,03/Jan/18 10:30,14/Jul/23 05:50,03/Jan/18 10:30,2.20.1,,,,,2.21.0,,,,camel-core,,,,0,,,"When combining the splitter and wireTap functionality an org.apache.camel.RuntimeCamelException (Cannot reset stream from file) will be thrown when:
1. a spooled StreamCache body is created in the wireTap route
2. the splitter route ends before the wireTap route

The splitter will create an Exchange.STREAM_CACHE_UNIT_OF_WORK property to hold the StreamCaches that will be created by the children of the splitter.
When doing a wireTap in the splitter route, the property will be copied to the wireTap route (when using the wireTap defaults).
StreamCaches created in the wireTap route will now be added to the property as well and will be closed when the splitter route ends.

A possible workaround can be to create the wireTap route without copying the original exchange.
However I think it is better to remove the Exchange.STREAM_CACHE_UNIT_OF_WORK property in the org.apache.camel.processor.WireTapProcessor configureExchange method.

I attached a maven project with a test to demonstrate the issue.",,Bas Claessen,githubbot,kramu.k7,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Jan/18 10:30;Bas Claessen;CAMEL-12108-WireTapProcessor.patch;https://issues.apache.org/jira/secure/attachment/12904195/CAMEL-12108-WireTapProcessor.patch","28/Dec/17 21:48;Bas Claessen;TestSplitWireTap.zip;https://issues.apache.org/jira/secure/attachment/12903943/TestSplitWireTap.zip",,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 03 10:09:25 UTC 2018,,,,,,,,,,,"0|i3ocrr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Jan/18 15:25;githubbot;onders86 opened a new pull request #2159: CAMEL-12108 - PR on behalf of Bas Claessen
URL: https://github.com/apache/camel/pull/2159
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Jan/18 15:25;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2159

    CAMEL-12108 - PR on behalf of Bas Claessen

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-12108

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2159.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2159
    
----
commit 2e1808198326ecd50820aecb8fc55dcde4b6d860
Author: onders86 <ondersezgin@...>
Date:   2018-01-02T15:20:04Z

    CAMEL-12108 - PR on behalf of Bas Claessen

----
;;;","02/Jan/18 15:27;onders;Thanks Bas Claessen, PR submitted on behalf of you. ;;;","03/Jan/18 10:09;githubbot;davsclaus closed pull request #2159: CAMEL-12108 - PR on behalf of Bas Claessen
URL: https://github.com/apache/camel/pull/2159
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java
index b95800a4191..5015d187223 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java
@@ -227,6 +227,9 @@ private Exchange configureCopyExchange(Exchange exchange) {
         Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, false);
         // set MEP to InOnly as this wire tap is a fire and forget
         copy.setPattern(ExchangePattern.InOnly);
+        // remove STREAM_CACHE_UNIT_OF_WORK property because this wire tap will
+        // close its own created stream cache(s)
+        copy.removeProperty(Exchange.STREAM_CACHE_UNIT_OF_WORK);
         return copy;
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jan/18 10:09;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2159
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unintuitive default cxf timeout behavior,CAMEL-12104,13127396,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,adamcampbell,adamcampbell,27/Dec/17 18:31,26/Mar/18 15:56,14/Jul/23 05:50,20/Mar/18 01:27,,,,,,2.22.0,,,,camel-cxf,camel-cxfrs,,,0,,,"There is very strange behavior in Camel cxf and cxfrs timeouts which could lead to sensitive data being released.

Below is a code sample which illustrates the unexpected behavior. I think any developer would expect the test API to return ""Valid Response"" or some kind exception, but in fact it returns ""SENSITIVE DATA"" due to the default continuationTimeout of 30 seconds.

This issue seems to have been introduced by https://issues.apache.org/jira/browse/CAMEL-7401

{code:java}
    public void configure() {

        from(""cxf:///test?dataFormat=MESSAGE"")
            .setBody(constant(""SENSITIVE DATA""))
            .to(""cxf://http://localhost:8003/slowApi?serviceClass=com.example.ExampleService&dataFormat=MESSAGE"")
            .transform(constant(""Valid Response""));

        from(""cxf:///slowApi?dataFormat=MESSAGE"")
            .process(new Processor(){
                @Override
                public void process(final Exchange exchange) throws Exception {
                    Thread.sleep(45000);
                }
            });
    }
{code}
",,adamcampbell,davsclaus,ffang,,,,,,,,,,,,,,,,,,CXF-7661,,,,,,,CAMEL-12409,,,,,,,,,,,,"28/Feb/18 14:21;davsclaus;Screen Shot 2018-02-28 at 15.20.31.png;https://issues.apache.org/jira/secure/attachment/12912443/Screen+Shot+2018-02-28+at+15.20.31.png",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 01 09:09:14 UTC 2018,,,,,,,,,,,"0|i3obkv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jan/18 14:28;davsclaus;Would you be able to build an unit test of this sample code so we can take that and add to the tests of camel-cxf and work on a fix.;;;","28/Feb/18 13:36;davsclaus;Also as a workaround you can try with synchronous=true on the CXF endpoint;;;","28/Feb/18 14:21;davsclaus;Okay so the issue is in Apache CXF where it will onTimeout that is called from Jetty or Servlet3 async API then just call resume(), see screenshot

 ;;;","28/Feb/18 14:22;davsclaus;The CXF Continuation API itself lacks the concept of timeout, so you cannot get that state to know there was a timeout and then fail accordingly.;;;","28/Feb/18 14:26;davsclaus;[~dkulp] or [~ffang] I wonder if you guys may have any comments on this.

I added an unit test to camel-cxf named: 

CxfConsumerContinuationTimeoutTest;;;","01/Mar/18 07:47;ffang;I think we can extend cxf Continuation interface a bit to add an isTimeout method so that we know the timeout happen and can handle this situation accordingly outside CXF;;;","01/Mar/18 09:09;davsclaus;Thanks Freeman;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel unable to shutdown gracefully because Netty4 consumer keep receiving and adding inflight exchanges,CAMEL-12103,13127355,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yihtserns,yihtserns,27/Dec/17 09:36,03/Jan/18 08:57,14/Jul/23 05:50,03/Jan/18 08:57,2.15.2,,,,,2.21.0,,,,camel-netty4,,,,0,,,"I'm using this URI: {{netty4:tcp://localhost:8888?sync=false&textline=true}}

And I have this issue when initiating Camel shutdown using {{DefaultShutdownStrategy}}:
# Camel suspends {{NettyConsumer}} ({{SingleTCPNettyServerBootstrapFactory}}), which only stops the ""main"" Netty channel, but _not_ the other Netty channels (i.e. socket connections)
# Camel waits for routes to be empty of inflight & pending exchanges
# (!) Those other Netty channels kept receiving data, which are turned into new exchanges
** As long as the TCP clients keep sending data into the channels + exchanges completing slower than send rate, routes will _never_ be empty of inflight & pending exchanges
# Forced shutdown after 5 minutes (timed out)

h2. To simulate the issue
# Run the attached [^tcp-server.camel] Groovy script: {{groovy tcp-server.camel}}
# After that has started, run the attached [^tcp-client.groovy]: {{groovy tcp-client.groovy}}
# After tcp-client starts sending data over, stop the tcp-server (CTRL+C in Windows)
# You should see something like this:
{panel:title=cmd}
INFO  - Apache Camel 2.15.2 (CamelContext: camel-1) started in 1.015 seconds
INFO  - Hey 0
INFO  - Hey 1
INFO  - Hey 2
INFO  - Hey 3
INFO  - Apache Camel 2.15.2 (CamelContext: camel-1) is shutting down
INFO  - Starting to graceful shutdown 1 routes (timeout 300 seconds)
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 300 seconds.
INFO  - Hey 4
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 299 seconds.
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 298 seconds.
INFO  - Hey 5
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 297 seconds.
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 296 seconds.
INFO  - Hey 6
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 295 seconds.
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete,
 timeout in 294 seconds.
...
{panel}
",,davsclaus,yihtserns,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Dec/17 09:32;yihtserns;tcp-client.groovy;https://issues.apache.org/jira/secure/attachment/12903780/tcp-client.groovy","27/Dec/17 09:32;yihtserns;tcp-server.camel;https://issues.apache.org/jira/secure/attachment/12903781/tcp-server.camel",,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 03 08:50:25 UTC 2018,,,,,,,,,,,"0|i3obbr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Dec/17 09:47;yihtserns;I just [read|http://camel.apache.org/support.html] that I'm not supposed to create a JIRA ticket directly.

Sorry for the faux pas. :/

;;;","03/Jan/18 08:50;davsclaus;Okay reproduced this with your sample code, thanks.

And have a fix

The client is sending:
{code}
davsclaus:/Users/davsclaus/Downloads/$ groovy tcp-client.groovy
Sent 0
Sent 1
Sent 2
Sent 3
Sent 4
Sent 5
Caught: java.net.SocketException: Broken pipe (Write failed)
java.net.SocketException: Broken pipe (Write failed)
	at tcp-client$_run_closure1_closure2.doCall(tcp-client.groovy:6)
	at tcp-client$_run_closure1.doCall(tcp-client.groovy:2)
	at tcp-client.run(tcp-client.groovy:1)
{code}

And the server is being stopped:
{code}
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) is starting
INFO  - JMX is enabled
INFO  - Type converters loaded (core: 193, classpath: 11)
INFO  - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
INFO  - ServerBootstrap binding to localhost:8888
INFO  - Netty consumer bound to: localhost:8888
INFO  - Route: route1 started and consuming from: tcp://localhost:8888
INFO  - Total 1 routes, of which 1 are started
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) started in 0.573 seconds
INFO  - Hey 0
INFO  - Hey 1
INFO  - Hey 2
^CINFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) is shutting down
INFO  - Starting to graceful shutdown 1 routes (timeout 300 seconds)
INFO  - ServerBootstrap unbinding from localhost:8888
INFO  - Netty consumer unbound from: localhost:8888
INFO  - Route: route1 shutdown complete, was consuming from: tcp://localhost:8888
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds. Inflights per route: [route1 = 1]
INFO  - There are 1 inflight exchanges:
	InflightExchange: [exchangeId=ID-davsclaus-pro-local-1514969347001-0-3, fromRouteId=route1, routeId=route1, nodeId=process1, elapsed=0, duration=345]
INFO  - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 299 seconds. Inflights per route: [route1 = 1]
INFO  - There are 1 inflight exchanges:
	InflightExchange: [exchangeId=ID-davsclaus-pro-local-1514969347001-0-3, fromRouteId=route1, routeId=route1, nodeId=process1, elapsed=0, duration=1351]
INFO  - Graceful shutdown of 1 routes completed in 2 seconds
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) uptime 11.935 seconds
INFO  - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-1) is shutdown in 2.058 seconds
{code}

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISyntaxException in OpenTracingTracer for endpoints with path parameters,CAMEL-12098,13126319,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,20/Dec/17 15:48,23/Feb/18 15:41,14/Jul/23 05:50,21/Dec/17 10:39,2.20.1,,,,,2.19.5,2.20.2,2.21.0,,camel-opentracing,camel-restlet,,,0,,,"We're using a lot of endpoints with path parameters, such as: {{restlet://https://localhost:58530//people/{personId\}?restletMethod=GET}} 

The endpoint URI contains curly brackets, which is invalid and doesn't pass validation in {{URI.create}}. Unfortunately, that is exactly what happens in OpenTracingTracer:
{code}
SpanDecorator sd = decorators.get(URI.create(endpoint.getEndpointUri()).getScheme());
{code}

Naturally, this results in OpenTracing not working and lots of warnings like this: {code}
WARN  o.a.c.opentracing.OpenTracingTracer - OpenTracing: Failed to capture tracing data
java.lang.IllegalArgumentException: Illegal character in path at index 42: restlet://https://localhost:58530//people/{personId}?restletMethod=GET
	at java.net.URI.create(URI.java:852)
	at org.apache.camel.opentracing.OpenTracingTracer.getSpanDecorator(OpenTracingTracer.java:192)
	at org.apache.camel.opentracing.OpenTracingTracer$OpenTracingEventNotifier.notify(OpenTracingTracer.java:218)
	at org.apache.camel.util.EventHelper.doNotifyEvent(EventHelper.java:1096)
	at org.apache.camel.util.EventHelper.notifyExchangeSending(EventHelper.java:833)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:137)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:197)
	at org.apache.camel.component.timer.TimerConsumer$2.run(TimerConsumer.java:110)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.URISyntaxException: Illegal character in path at index 42: restlet://https://localhost:58530//people/{personId}?restletMethod=GET
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3105)
	at java.net.URI$Parser.parse(URI.java:3053)
	at java.net.URI.<init>(URI.java:588)
	at java.net.URI.create(URI.java:850)
	... 40 common frames omitted
{code}

Previously Restlet endpoint URI used normal brackets instead of curly brackets, so this wasn't an issue.",,koscejev,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12289,,,,,CAMEL-11276,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-12-20 15:48:34.0,,,,,,,,,,,"0|i3o4y7:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Combination of path param and query param does not work,CAMEL-12097,13126285,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,cipous,cipous,20/Dec/17 13:14,03/Jan/18 13:41,14/Jul/23 05:50,03/Jan/18 13:36,2.20.1,,,,,2.20.2,2.21.0,,,camel-restlet,,,,0,,,"If in route are used both path parameter and query parameter:

{code:java}
restlet:{{data.access.url}}/v2/users/{userId}?projection=full
{code}

then because of commit :
https://github.com/apache/camel/commit/4da8d0ad4472e69a5728f67fa121b3b4150fdc33#diff-470ee30498bbf9ea5b6ea223650c0e1c

on lines 216-219 are escaped ""{"" ""}"" so userId in my example is never replaced.

Escaping is done in URISupport.appendParametersToURI on line:

{code:java}
URI uri = new URI(normalizeUri(originalURI));
{code}


There is workaround to use Exchange.HTTP_QUERY header for query parameter and path must not contain query parameters.",,abbasdgr8,cipous,davsclaus,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 03 13:41:03 UTC 2018,,,,,,,,,,,"0|i3o4qn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Dec/17 13:17;cipous;I guess that newly added lines 216-219 can be placed after path parameters are processed... ;;;","20/Dec/17 13:36;davsclaus;You are welcome to provide a patch file or as github PR
http://camel.apache.org/contributing;;;","28/Dec/17 11:29;abbasdgr8;I would like to take this up as and fix this via a Pull Request. Shall I assign this to myself?;;;","28/Dec/17 12:03;davsclaus;Abbas, its fine to comment first.

When users have contributed a number of work first, then we can admin in JIRA to make users self-assign tickets.;;;","02/Jan/18 15:14;githubbot;onders86 opened a new pull request #2158: CAMEL-12097- handle if both path and query params set and supress wit…
URL: https://github.com/apache/camel/pull/2158
 
 
   …h the value in the path

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Jan/18 15:14;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2158

    CAMEL-12097- handle if both path and query params set and supress wit…

    …h the value in the path

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-12097

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2158.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2158
    
----
commit 0464c5e640c75c9a3bb6abe023e3d907856fde89
Author: onders86 <ondersezgin@...>
Date:   2018-01-02T15:12:44Z

    CAMEL-12097- handle if both path and query params set and supress with the value in the path

----
;;;","03/Jan/18 11:40;githubbot;onders86 closed pull request #2158: CAMEL-12097- handle if both path and query params set and supress wit…
URL: https://github.com/apache/camel/pull/2158
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java b/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java
index 47c02936131..b4c3b2549bf 100644
--- a/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java
+++ b/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java
@@ -211,10 +211,6 @@ private static String buildUri(RestletEndpoint endpoint, Exchange exchange) thro
         if (uri == null) {
             uri = endpoint.getProtocol() + ""://"" + endpoint.getHost() + "":"" + endpoint.getPort() + endpoint.getUriPattern();
         }
-        // include any query parameters if needed
-        if (endpoint.getQueryParameters() != null) {
-            uri = URISupport.appendParametersToURI(uri, endpoint.getQueryParameters());
-        }
 
         // substitute { } placeholders in uri and use mandatory headers
         LOG.trace(""Substituting '{value}' placeholders in uri: {}"", uri);
@@ -235,6 +231,11 @@ private static String buildUri(RestletEndpoint endpoint, Exchange exchange) thro
             // we replaced uri so reset and go again
             matcher.reset(uri);
         }
+        
+        // include any query parameters if needed
+        if (endpoint.getQueryParameters() != null) {
+            uri = URISupport.appendParametersToURI(uri, endpoint.getQueryParameters());
+        }
 
         // rest producer may provide an override query string to be used which we should discard if using (hence the remove)
         String query = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_QUERY);
diff --git a/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java b/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java
index 34ccd059ad2..f2e68282831 100644
--- a/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java
+++ b/components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerTest.java
@@ -32,6 +32,12 @@ public void testRestletProducerGet() throws Exception {
         assertEquals(""123;Donald Duck"", out);
     }
     
+    @Test
+    public void testRestletProducerGetWithPathQueryParams() throws Exception {
+        String out = template.requestBodyAndHeader(""direct:startWithPathQueryParams"", null, ""id"", 123, String.class);
+        assertEquals(""1235;Donald Duck"", out);
+    }
+    
     @Test
     public void testRestletProducerDelete() throws Exception {
         String out = template.requestBodyAndHeader(""direct:delete"", null, ""id"", 123, String.class);
@@ -45,6 +51,8 @@ protected RouteBuilder createRouteBuilder() throws Exception {
             public void configure() throws Exception {
                 from(""direct:start"").to(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic"").to(""log:reply"");
                 
+                from(""direct:startWithPathQueryParams"").to(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic?id=1235"").to(""log:reply"");
+                
                 from(""direct:delete"").to(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic?restletMethod=DELETE"");
 
                 from(""restlet:http://localhost:"" + portNum + ""/users/{id}/basic?restletMethods=GET,DELETE"")


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jan/18 11:40;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/2158
;;;","03/Jan/18 13:41;onders;Thanks [~davsclaus]. I am bugged all day, could not log jira. Thanks for doing it.;;;",,,,,,,,,,,,,,,,,,,,,,,,
RestConfiguration hostNameResolver property naming mismatch,CAMEL-12096,13126256,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,koscejev,koscejev,20/Dec/17 11:48,20/Dec/17 16:16,14/Jul/23 05:50,20/Dec/17 14:19,2.20.1,,,,,2.20.2,2.21.0,,,rest,,,,0,,,"Field name {{RestConfigurationDefinitionProperties#hostNameResolver}} doesn't match {{RestConfiguration#restHostNameResolver}}, but the match is critical for {{configureRestConfigurationDefinition()}} to work. In fact some other fields (such as {{enableCors}}) also don't match, but they are set explicitly, not in bulk via {{CamelPropertiesHelper.setCamelProperties}}.",,davsclaus,koscejev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10976,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 20 16:16:47 UTC 2017,,,,,,,,,,,"0|i3o4k7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Dec/17 11:50;koscejev;Trying to set this field in Spring properties/yaml results in failure: 

{code}
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.context.ConfigurableApplicationContext]: Factory method 'service' threw exception; nested exception is org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
Caused by: java.lang.IllegalArgumentException: Cannot configure option [hostNameResolver] with value [localHostName] as the bean class [org.apache.camel.spi.RestConfiguration] has no suitable setter method, or not possible to lookup a bean with the id [localHostName] in Spring Boot registry
{code};;;","20/Dec/17 14:19;davsclaus;Thanks for reporting;;;","20/Dec/17 16:16;koscejev;Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Xstream doesn't work in Karaf,CAMEL-12095,13126244,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,20/Dec/17 10:27,20/Dec/17 10:39,14/Jul/23 05:50,20/Dec/17 10:39,,,,,,,,,,camel-xstream,karaf,,,0,,,"
Caused by: java.lang.ClassNotFoundException: com.thoughtworks.xstream.mapper.LambdaMapper not found by org.apache.servicemix.bundles.xstream [233]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639) ~[?:?]",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-12-20 10:27:44.0,,,,,,,,,,,"0|i3o4hj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fileExist=Move and tempFileName does not work together.,CAMEL-12094,13125969,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gaurang.parmar,gaurang.parmar,19/Dec/17 16:53,26/Dec/17 11:04,14/Jul/23 05:50,26/Dec/17 11:04,2.16.5,2.20.1,,,,2.19.5,2.20.2,2.21.0,,camel-core,camel-ftp,,,0,,,"We are using camel-ftp for SFTP operations in pure integration all camel application.

We had one scenario of putting large files on SFTP and another process will pick files from that location on periodic basis.

So need to rename existing file with same so it won't be picked and also during the process we does not want to be picked.

So we used both options together. 
1) fileExist=Move&moveExisting=${file:name.noext}-${date:now:ddMMyyyyHHmmss}.${file:ext}
2) tempFileName=${file:onlyname}.inprogress

But as per code Move operation is performed in XXXXOperations class and filename passed from GenericFileProducer is temporary file name to writeFile method.","SUSE Linux Enterprise Server 11 (x86_64)
VERSION = 11
PATCHLEVEL = 4",davsclaus,gaurang.parmar,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 26 10:25:44 UTC 2017,,,,,,,,,,,"0|i3o2t3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Dec/17 18:35;onders;2.16.x is EOL. please ask commercial support if you use commercialised camel or please first ask on user forums.;;;","19/Dec/17 18:37;onders;please try with newer version;;;","19/Dec/17 19:01;gaurang.parmar;Code is same in master and release branches as well.;;;","19/Dec/17 19:33;onders;{{fileExist=TryRename}} may help;;;","26/Dec/17 09:59;davsclaus;What is the problem? Can you be more specific.;;;","26/Dec/17 10:25;davsclaus;Okay I have reproduced the issue and are looking into a fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core: WARN No CamelContext defined yet so cannot inject into bean,CAMEL-12087,13125420,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,16/Dec/17 14:56,07/Oct/19 01:58,14/Jul/23 05:50,09/Oct/18 15:54,2.20.3,2.21.1,,,,2.21.3,2.22.2,2.23.0,,camel-spring-boot,,,,0,,,,,davsclaus,githubbot,lb,onders,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12975,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 07 01:58:51 UTC 2019,,,,,,,,,,,"0|i3nzfz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Dec/17 18:10;davsclaus;I think this commit broke camel-netty-http-starter as it fails now;;;","18/Dec/17 07:19;lb;Fixed now, thx for report it;;;","29/Jan/18 14:23;pascalschumacher;I still get this warning ({{WAR - DefaultCamelBeanPostProcessor - No CamelContext defined yet so cannot inject into bean: routesHealthCheckRepository)}} with camel 2.20.2 and spring-boot 1.5.9.

Is there information I can supply to help you getting this fixed?

 ;;;","29/Jan/18 14:54;lb;Do you have an example that triggers the warning ?;;;","10/May/18 12:58;lb;
There are some cases where a bean of type CamelContextAware needs to be initialized before the camel context is configured, in particular this can happen with spring boot auto-configuration ordering so i.e. you want to provide a bean that CamelAutoConfiguration loads upon context configuration (such as HealthCheckRepository). 

In this case the camel post processor is not able to inject a camel context instance so I'd propose to add an annotation like @LazyContextBinding which can be used to instruct the post processor that it is ok not to inject a camel context if it is not found.

[~davsclaus] make sense ?
;;;","15/May/18 13:38;davsclaus;Do we really see this problem still? I can understand the lifecycle circular issue you talk about, eg CamelContext is being created itself, and then some custom bean is inject that is supposely camel context aware that gets a null camel context as its not ready yet.

But that custom bean still need easy access to CamelContext. Passing in null would be bad. 

Maybe there is a way to register those beans on camelcontext in a temporary list that they should have camel context injected later. And then CamelContext will inject itself later in its doStart lifecycle.

 ;;;","15/May/18 13:49;lb;Yeah this is basically what @LazyContextBinding or @DeferredContextBinding is meant, once the camel context is starting up, it search for bean of type CamelContextAware and set itself as camel context if they are annotated with one of the two annotations. The post processor then knows that it is ok not to set the camel context if it is not yet available.;;;","15/May/18 13:51;davsclaus;Perfect

+1;;;","09/Oct/18 14:06;githubbot;GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/2558

    CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-12087

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2558.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2558
    
----
commit fda0ce6d16f812b4f1f60a87a4b417786250b69f
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-10-09T14:06:13Z

    CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean

----
;;;","09/Oct/18 14:09;githubbot;oscerd commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428206855
 
 
   @davsclaus, since this is a bug I'm thinking about backporting it on 2.21.x and 2.22.x. Does it work for you?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Oct/18 14:26;githubbot;davsclaus commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428213410
 
 
   +1
   
   Yeah sure although its a harmless WARN but would be nice to not show. 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Oct/18 14:30;githubbot;oscerd commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428214869
 
 
   Maybe it's better to change to debug?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Oct/18 15:04;githubbot;lburgazzoli commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428228640
 
 
   If there's no objection, I'm going to merge it. the log level can be changed later 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Oct/18 15:05;githubbot;oscerd commented on issue #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558#issuecomment-428229004
 
 
   Go for it

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Oct/18 15:12;githubbot;lburgazzoli closed pull request #2558: CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean
URL: https://github.com/apache/camel/pull/2558
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/DeferredContextBinding.java b/camel-core/src/main/java/org/apache/camel/DeferredContextBinding.java
new file mode 100644
index 00000000000..1bf79272a0c
--- /dev/null
+++ b/camel-core/src/main/java/org/apache/camel/DeferredContextBinding.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Used to indicate that if the target type is {@link CamelContextAware}, the
+ * context does not need to be mandatory injected during bean post processing but
+ * can be injected later on as example during Camel Context configuration.
+ *
+ * See <a href=""https://issues.apache.org/jira/browse/CAMEL-12087"">CAMEL-12087</a> for additional information.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Documented
+@Target({ElementType.TYPE})
+public @interface DeferredContextBinding {
+}
diff --git a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java
index 10966266521..63cf335b726 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java
@@ -22,6 +22,7 @@
 import org.apache.camel.BeanInject;
 import org.apache.camel.CamelContext;
 import org.apache.camel.CamelContextAware;
+import org.apache.camel.DeferredContextBinding;
 import org.apache.camel.EndpointInject;
 import org.apache.camel.Produce;
 import org.apache.camel.PropertyInject;
@@ -64,7 +65,7 @@ public DefaultCamelBeanPostProcessor(CamelContext camelContext) {
      * initialization callbacks (like <code>afterPropertiesSet</code>
      * or a custom init-method). The bean will already be populated with property values.
      * The returned bean instance may be a wrapper around the original.
-     * 
+     *
      * @param bean the new bean instance
      * @param beanName the name of the bean
      * @return the bean instance to use, either the original or a wrapped one; if
@@ -84,10 +85,12 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) thro
 
         if (bean instanceof CamelContextAware && canSetCamelContext(bean, beanName)) {
             CamelContextAware contextAware = (CamelContextAware)bean;
+            DeferredContextBinding deferredBinding = bean.getClass().getAnnotation(DeferredContextBinding.class);
             CamelContext context = getOrLookupCamelContext();
-            if (context == null) {
+
+            if (context == null && deferredBinding == null) {
                 LOG.warn(""No CamelContext defined yet so cannot inject into bean: {}"", beanName);
-            } else {
+            } else if (context != null) {
                 contextAware.setCamelContext(context);
             }
         }
@@ -100,7 +103,7 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) thro
      * initialization callbacks (like <code>afterPropertiesSet</code>
      * or a custom init-method). The bean will already be populated with property values.
      * The returned bean instance may be a wrapper around the original.
-     * 
+     *
      * @param bean the new bean instance
      * @param beanName the name of the bean
      * @return the bean instance to use, either the original or a wrapped one; if
@@ -193,7 +196,7 @@ public void injectField(Field field, String endpointUri, String endpointRef, Str
                                Object bean, String beanName) {
         injectField(field, endpointUri, endpointRef, endpointProperty, bean, beanName, true);
     }
-    
+
     public void injectField(Field field, String endpointUri, String endpointRef, String endpointProperty,
                                Object bean, String beanName, boolean binding) {
         ReflectionHelper.setField(field, bean,
diff --git a/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java b/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java
index 637a805f9d6..7727b800919 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/health/RoutesHealthCheckRepository.java
@@ -29,11 +29,13 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.CamelContextAware;
+import org.apache.camel.DeferredContextBinding;
 import org.apache.camel.Route;
 import org.apache.camel.api.management.mbean.ManagedRouteMBean;
 import org.apache.camel.health.HealthCheck;
 import org.apache.camel.health.HealthCheckRepository;
 
+@DeferredContextBinding
 public class RoutesHealthCheckRepository implements CamelContextAware, HealthCheckRepository {
     private final ConcurrentMap<Route, HealthCheck> checks;
     private Set<String> blacklist;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Oct/18 15:12;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2558
;;;","07/Oct/19 01:58;onders;i think i see similar issue in kubernetes component.

is there any workaround

 

[application-integration-messages] 07-Oct-2019 | 01:32:42.000866 | [main] | WARN | o.a.c.i.DefaultCamelBeanPostProcessor | | | No CamelContext defined yet so cannot inject into bean: kubernetes-cluster-service
[application-integration-messages] 07-Oct-2019 | 01:32:42.000867 | [main] | INFO | o.a.c.s.boot.CamelAutoConfiguration | | | Using CamelClusterService with id: null and implementation: org.apache.camel.component.kubernetes.cluster.KubernetesClusterService@5fcacc0
[application-integration-messages] 07-Oct-2019 | 01:32:43.000050 | [main] | DEBUG | o.a.c.i.c.AbstractCamelClusterService | | | Retain view lock2, old-refs=0
[application-integration-messages] 07-Oct-2019 | 01:32:43.000050 | [main] | DEBUG | o.a.c.i.c.AbstractCamelClusterService | | | Can't start view lock2 as cluster service is not running, view will be started on service start-up;;;",,,,,,,,,,,,,,,,
Service call definition - Simple language expresion in uri is not being evaluated ,CAMEL-12086,13125258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xcvljk,xcvljk,15/Dec/17 15:25,21/Dec/17 16:33,14/Jul/23 05:50,21/Dec/17 16:32,2.20.1,,,,,2.20.2,2.21.0,,,camel-core,,,,0,,,"I'm facing some problems with service call definition. 

A route is supposed to send some get requests to a specific endpoint. The endpoint requires a parameter in the url path - {noformat}GET <host>:<port>/api/.../<id>{noformat}

Route definition:

{noformat}
  routebuilder.from(""direct:getSomeEntity"")
	.setHeader(Exchange.HTTP_METHOD, constant(HttpMethod.GET))
	.serviceCall()
	.name(""test"")
	.uri(""test/api/.../${fid}"")
	.end()
        ...
{noformat}

This route did not work and the {noformat}${fid}{noformat} parameter was never resolved despite the javadoc states that the uri may contain simple language expressions 

See - {noformat}https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/cloud/ServiceCallDefinition.java#L187{noformat}

Route execution:

{noformat}
camelContext.createFluentProducerTemplate()
	.withHeader(""fid"", id)
	.to(""direct:getSomeEntity"")
        ...
{noformat}

Eventually i got it work with following workaround

{noformat}

.serviceCall()
	.name(""test"")
	.expression()		
	.simple(""http4://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/api/.../${fid}"")
	.end()

{noformat}


",Spring boot,davsclaus,kramu.k7,lb,xcvljk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 21 16:33:07 UTC 2017,,,,,,,,,,,"0|i3nygf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Dec/17 15:35;lb;Should't it be 

{code}
${header.fid}
{code}

instead of plain 

{code}
${fid}
{code}
;;;","18/Dec/17 08:24;xcvljk;[~lb] Tried that as well. ${in.header.fid} ${header.fid} ${headers.fid} ${fid}. According to documentation all expressions should work in the first example, but none of them actually worked.;;;","21/Dec/17 10:48;davsclaus;Yes its a bug, it used to be that when I created the initial service call eip, but it has been heavily refactored and then we have this bug now.;;;","21/Dec/17 16:33;davsclaus;So with this fix, you should be able to use 
{code}
${header.fid}
{code}

 in your first example;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't mandate header case for custom Salesforce HTTP haders,CAMEL-12085,13125252,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,15/Dec/17 14:52,10/Jan/18 14:45,14/Jul/23 05:50,10/Jan/18 14:45,2.21.0,,,,,2.21.0,,,,camel-salesforce,,,,0,,,We need to do case insensitive comparison on what headers we include to send to Salesforce.,,dickengeorge,zregvart,,,,,,,,,,,,,,,,,,,,CAMEL-12092,,,,,,,,,,,,,,,,,,"19/Dec/17 10:12;dickengeorge;camel.patch;https://issues.apache.org/jira/secure/attachment/12902822/camel.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 10 14:45:58 UTC 2018,,,,,,,,,,,"0|i3nyf3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Dec/17 12:48;dickengeorge;It seems the problem still persists.. there were two determineheaders methods as i just noticed now. And your fix is implemented in the Abstractclientbase class, determineheaders method. However, i noticed during runtime that the method determineheaders in the interface SalesforceProcessor is being called instead.

Therefore currently the problem still persists.;;;","10/Jan/18 14:45;zregvart;[~dickengeorge] thank you for the patch I've fixed this at the second location in {{SalesforceProcessor}} in the same manner it was done for CAMEL-12092 for {{AbstractClientBase}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel route commands should set the TCCL when working with local camel context,CAMEL-12082,13124901,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,14/Dec/17 09:27,14/Dec/17 09:40,14/Jul/23 05:50,14/Dec/17 09:39,2.20.1,,,,,2.20.2,2.21.0,,,,,,,0,,,"This causes class not found issues in Karaf when restarting routes for example:

{code}
13:33:50.734 WARN [pipe-camel:route-start websocket camel-context] unavailable
java.lang.RuntimeException: Unable to load org.eclipse.jetty.websocket.server.WebSocketServerFactory
	at org.eclipse.jetty.websocket.servlet.WebSocketServletFactory$Loader.load(WebSocketServletFactory.java:53) ~[?:?]
	at org.eclipse.jetty.websocket.servlet.WebSocketServlet.init(WebSocketServlet.java:138) ~[?:?]
	at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[34:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:640) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:419) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:892) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.updateMappings(ServletHandler.java:1596) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.setServletMappings(ServletHandler.java:1684) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletHandler.addServletWithMapping(ServletHandler.java:1027) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.eclipse.jetty.servlet.ServletContextHandler.addServlet(ServletContextHandler.java:437) [241:org.eclipse.jetty.servlet:9.3.15.v20161220]
	at org.apache.camel.component.websocket.WebsocketComponent.createServlet(WebsocketComponent.java:457) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketComponent.addServlet(WebsocketComponent.java:439) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketComponent.connect(WebsocketComponent.java:214) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketEndpoint.connect(WebsocketEndpoint.java:123) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.component.websocket.WebsocketProducer.doStart(WebsocketProducer.java:84) [226:org.apache.camel.camel-websocket:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.deferStartService(DefaultCamelContext.java:1558) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1475) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1445) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:576) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:168) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:248) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1472) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:160) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:62) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:1172) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:370) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3899) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:3753) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1176) [54:org.apache.camel.camel-core:2.21.0]
	at org.apache.camel.commands.AbstractLocalCamelController.startRoute(AbstractLocalCamelController.java:341) [53:org.apache.camel.camel-commands-core:2.21.0]
	at org.apache.camel.commands.RouteStartCommand.executeOnRoute(RouteStartCommand.java:32) [53:org.apache.camel.camel-commands-core:2.21.0]
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56) [53:org.apache.camel.camel-commands-core:2.21.0]
	at org.apache.camel.karaf.commands.RouteStart.execute(RouteStart.java:30) [67:org.apache.camel.karaf.camel-karaf-commands:2.21.0]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [144:org.apache.karaf.shell.core:4.2.0]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [144:org.apache.karaf.shell.core:4.2.0]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.websocket.server.WebSocketServerFactory
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[?:?]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:?]
	at java.lang.Class.forName0(Native Method) ~[?:?]
	at java.lang.Class.forName(Class.java:348) ~[?:?]
	at org.eclipse.jetty.websocket.servlet.WebSocketServletFactory$Loader.load(WebSocketServletFactory.java:47) ~[?:?]
	... 76 more
{code}

I'll push a PR",,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 14 09:40:11 UTC 2017,,,,,,,,,,,"0|i3nw9r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Dec/17 09:31;githubbot;johnpoth opened a new pull request #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146
 
 
   …ing local route commands
   
   https://issues.apache.org/jira/browse/CAMEL-12082
   
   This is similar to what's being done in [AbstractContexCommand](https://github.com/apache/camel/blob/792ce5c5cc0af486b39471cf68206a2e95d3a037/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractContextCommand.java#L63) and [DefaultCamelContext](https://github.com/apache/camel/blob/bb39dc44d9603c0e6fce2460ddf35a7b94ca30d4/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L3264)
   
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Dec/17 09:31;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/2146

    [CAMEL-12082] Set the TCCL to the application classloader when execut…

    …ing local route commands
    
    https://issues.apache.org/jira/browse/CAMEL-12082
    
    This is similar to what's being done in [AbstractContexCommand](https://github.com/apache/camel/blob/792ce5c5cc0af486b39471cf68206a2e95d3a037/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractContextCommand.java#L63) and [DefaultCamelContext](https://github.com/apache/camel/blob/bb39dc44d9603c0e6fce2460ddf35a7b94ca30d4/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L3264)
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-12082

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2146.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2146
    
----
commit 0572728f52a2d546cb7c0208c84108c8556643fe
Author: jpoth <poth.john@gmail.com>
Date:   2017-12-13T17:00:56Z

    [CAMEL-12082] Set the TCCL to the application classloader when executing local route commands

----
;;;","14/Dec/17 09:36;githubbot;oscerd closed pull request #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java
index 74611e8b703..d0da95c57bf 100644
--- a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java
+++ b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractRouteCommand.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.camel.CamelContext;
 import org.apache.camel.commands.internal.RegexUtil;
 
 /**
@@ -53,12 +54,36 @@ public Object execute(CamelController camelController, PrintStream out, PrintStr
         for (Map<String, String> row : camelRoutes) {
             String camelContextName = row.get(""camelContextName"");
             String routeId = row.get(""routeId"");
-            executeOnRoute(camelController, camelContextName, routeId, out, err);
+            if (camelController instanceof LocalCamelController) {
+                executeLocal((LocalCamelController) camelController, camelContextName, routeId, out, err);
+            } else {
+                executeOnRoute(camelController, camelContextName, routeId, out, err);
+            }
         }
 
         return null;
     }
 
+    private void executeLocal(LocalCamelController camelController, String camelContextName, String routeId, PrintStream out, PrintStream err) throws Exception {
+        CamelContext camelContext = camelController.getLocalCamelContext(context);
+        if (camelContext == null) {
+            err.println(""Camel context "" + context + "" not found."");
+            return;
+        }
+
+        // Setting thread context classloader to the bundle classloader to enable legacy code that relies on it
+        ClassLoader oldClassloader = Thread.currentThread().getContextClassLoader();
+        ClassLoader applicationContextClassLoader = camelContext.getApplicationContextClassLoader();
+        if (applicationContextClassLoader  != null) {
+            Thread.currentThread().setContextClassLoader(applicationContextClassLoader);
+        }
+        try {
+            executeOnRoute(camelController, camelContextName, routeId, out, err);
+        } finally {
+            Thread.currentThread().setContextClassLoader(oldClassloader);
+        }
+    }
+
     public abstract void executeOnRoute(CamelController camelController, String contextName, String routeId, PrintStream out, PrintStream err) throws Exception;
 
     /**


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Dec/17 09:36;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2146
;;;","14/Dec/17 09:36;githubbot;oscerd commented on issue #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146#issuecomment-351657908
 
 
   Thanks for the PR it has been merged into master. I'll backport on 2.20.x too
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Dec/17 09:40;githubbot;johnpoth commented on issue #2146: [CAMEL-12082] Set the TCCL to the application classloader when execut…
URL: https://github.com/apache/camel/pull/2146#issuecomment-351658775
 
 
   Thanks @oscerd !

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
MIME-Mutipart DataFormat reads attachment DataSource twice,CAMEL-12078,13124429,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdudgeon,tdudgeon,12/Dec/17 17:49,23/Mar/21 11:04,14/Jul/23 05:50,23/Mar/21 11:04,2.20.1,,,,,3.10.0,,,,camel-mail,,,,0,,,"As reported on mailing list if an attachment for MIME-Mutipart DataFormat is defined using a DataSource that can only be read once you get an exception.
http://mail-archives.apache.org/mod_mbox/camel-users/201712.mbox/%3C0e0d4b2e-dc32-c61e-3ccd-7ee14238c485%40gmail.com%3E

For instance, this happens if the DataSource is created using an InputStream that cannot be read multiple times
It should be possible to post the data only reading the input a single time.

I will add a test case shortly.",,aldettinger,davsclaus,githubbot,tdudgeon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 23 11:04:41 UTC 2021,,,,,,,,,,,"0|i3ntd3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Dec/17 17:53;tdudgeon;Here is a unit test that fails currently as the DataSoruce is read twice:
https://github.com/tdudgeon/camel/commit/721b9851f5537a22b5353a2f7c5da62d8bcfe766
It's on my fork. Do you want a PR (the test fails at present)?
;;;","12/Jan/18 08:41;davsclaus;Yes a PR with the test would be good, thanks;;;","18/Jan/18 20:27;aldettinger;Given a quick look at this test case and I can't reproduce any issue.
Indeed, {{DataSource.getInputStream()}} is called twice, but returns a {{SharedByteArrayInputStream}} instance which support multiple readers.
Changing the test to use {{FileDataSource/FileInputStream}} does not produce either exception.

Could one reproduce the exception ?;;;","19/Jan/18 13:31;davsclaus;I guess you may have some kind of input that is a stream that is only readable once, eg some http server stream or something. And they may not support reset / mark of input stream and all of that, hence you would need to use Camel's stream caching. Or in this case may try to avoid reading it 2 times. But a reproducer is best to have first.;;;","19/Jan/18 13:45;githubbot;tdudgeon opened a new pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185
 
 
   This PR provides a failing test for CAMEL-12078.
   It shows that the DataSource for an attachment  is read twice.
   The test to look at is MimeMultipartDataFormatTest.attachmentReadOnce()

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Jan/18 13:45;githubbot;GitHub user tdudgeon opened a pull request:

    https://github.com/apache/camel/pull/2185

    Failing test for CAMEL-12078

    This PR provides a failing test for CAMEL-12078.
    It shows that the DataSource for an attachment  is read twice.
    The test to look at is MimeMultipartDataFormatTest.attachmentReadOnce()

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdudgeon/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2185.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2185
    
----
commit 721b9851f5537a22b5353a2f7c5da62d8bcfe766
Author: Tim Dudgeon <tdudgeon@...>
Date:   2017-12-12T17:51:05Z

    failing test for CAMEL-12078

commit 0fcd0b28865e424871975f80073cfc3dd887f337
Author: Tim Dudgeon <tdudgeon@...>
Date:   2018-01-19T08:40:39Z

    Merge branch 'master' of https://github.com/apache/camel

commit 3350601da20d02d439b6d0cbbb639871988c66ce
Author: Tim Dudgeon <tdudgeon@...>
Date:   2018-01-19T13:38:48Z

    Merge branch 'master' of https://github.com/apache/camel

----
;;;","19/Jan/18 13:46;githubbot;oscerd commented on issue #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#issuecomment-358970234
 
 
   Can you please rebase?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Jan/18 13:47;githubbot;oscerd commented on issue #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#issuecomment-358970234
 
 
   Can you please rebase and squash commit? Otherwise I'll take care of this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Jan/18 13:49;tdudgeon;I created a PR with a test that illustrates this.;;;","19/Jan/18 13:58;githubbot;oscerd commented on issue #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#issuecomment-358973199
 
 
   Ok, this is an example test to show a failing scenario, so no need for rebase. Thanks @tdudgeon 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Jan/18 14:34;davsclaus;This is harder to avoid as its the java-mail mime multipart itself that does this. I cannot see an easy solution. 

From where do you have those attachments in your use-case that is only readable once?
You can try to re-attach them with some custom DataHandler / DataSource where the DataSource is re-readable via byte array input stream or stored as files.

Even if you remove that line 140 with the saveChanges then the java-mail multipart will auto do that later when you call the write call where it then will do a saveChanges first. ;;;","18/Jun/18 11:10;githubbot;onderson commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r196040361
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   @tdudgeon , do you have any input to @aldettinger 's question? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Jun/18 11:46;githubbot;tdudgeon commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r196048187
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   @aldettinger Yes, it can matter (and sorry for slow response). Some types of DataSource cannot be read repeatedly so you get an exception when it read a second time. 
   I'm sure this was discussed on the users mailing list, but I can't find the topic right now :-(

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Jun/18 13:42;githubbot;onderson commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r196081306
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   I think this is http://camel.465427.n5.nabble.com/MIME-Mutipart-DataFormat-streaming-td5789219.html

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Jul/18 06:05;githubbot;onderson commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r201573099
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   @tdudgeon , @aldettinger any update on this topic?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Jul/18 07:01;githubbot;tdudgeon commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r201582751
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   @onderson Not sure what update you want on this. The code does seem to read the InputStream twice, and that can cause problems when the stream can't be read multiple times.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Jul/18 07:46;githubbot;onderson commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r201593292
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   By just looking into your failing test case, it is hard to estimate your use case from my side. And as of an initial look, it seems like an issue/limitation about ByteArrayDataSource and maybe mail component needs another implementation of DataSource so user will be able to read attachments multiple times? Is this the solution you need and which requires such exploration on the component and mail API as well?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 18:57;githubbot;aldettinger commented on a change in pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#discussion_r204873667
 
 

 ##########
 File path: components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
 ##########
 @@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
 
 Review comment:
   @tdudgeon, IMHO the proposed test does not yet exhibit an issue as a valid DataSource.getInputStream() implementation would return [a new stream positioned at the beginning of the data each time it is called](https://docs.oracle.com/javase/8/docs/api/javax/activation/DataSource.html#getInputStream--).
   
   There I have 2 questions:
   Could it be that you faced an issue involving a wrong DataSource implementation ?
   Or, was your issue linked to a DataSource returning an input stream that don't support mark / reset ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Nov/18 12:25;githubbot;onderson commented on issue #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#issuecomment-439876214
 
 
   Since there is no activity on this feature. can we close this? There is already a request through JIRA.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Nov/18 12:27;githubbot;oscerd commented on issue #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#issuecomment-439876600
 
 
   Sure, go ahead @onderson 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Nov/18 12:31;githubbot;onderson commented on issue #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185#issuecomment-439877567
 
 
   Closing. to be followed upon https://issues.apache.org/jira/browse/CAMEL-12078

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","19/Nov/18 12:31;githubbot;onderson closed pull request #2185: Failing test for CAMEL-12078
URL: https://github.com/apache/camel/pull/2185
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java b/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
index ada79c017fc..a96072de28f 100644
--- a/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
+++ b/components/camel-mail/src/test/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormatTest.java
@@ -351,6 +351,41 @@ public void unmarshalInlineHeadersNonMimeBodyStream() throws UnsupportedEncoding
         assertEquals(""This is not a MIME-Multipart"", bodyStr);
     }
 
+    @Test
+    public void attachmentReadOnce() throws IOException {
+        String attContentType = ""text/plain"";
+        String attText = ""Attachment Text"";
+        InputStream attInputStream = new ByteArrayInputStream(attText.getBytes());
+        String attFileName = ""Attachment File Name"";
+        in.setBody(""Body text"");
+        in.setHeader(Exchange.CONTENT_TYPE, ""text/plain;charset=iso8859-1;other-parameter=true"");
+        in.setHeader(Exchange.CONTENT_ENCODING, ""UTF8"");
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(""Content-Description"", ""Sample Attachment Data"");
+        headers.put(""X-AdditionalData"", ""additional data"");
+        CountingByteArrayDataSource attachmentDs = new CountingByteArrayDataSource(attInputStream, attContentType);
+        addAttachment(attachmentDs, attFileName, headers);
+        Exchange result = template.send(""direct:roundtrip"", exchange);
+        Message out = result.getOut();
+        assertEquals(""Body text"", out.getBody(String.class));
+        assertThat(out.getHeader(Exchange.CONTENT_TYPE, String.class), startsWith(""text/plain""));
+        assertEquals(""UTF8"", out.getHeader(Exchange.CONTENT_ENCODING));
+        assertTrue(out.hasAttachments());
+        assertEquals(1, out.getAttachmentNames().size());
+        assertThat(out.getAttachmentNames(), hasItem(attFileName));
+        Attachment att = out.getAttachmentObject(attFileName);
+        DataHandler dh = att.getDataHandler();
+        assertNotNull(dh);
+        assertEquals(attContentType, dh.getContentType());
+        InputStream is = dh.getInputStream();
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        IOHelper.copyAndCloseInput(is, os);
+        assertEquals(attText, new String(os.toByteArray()));
+        assertEquals(""Sample Attachment Data"", att.getHeader(""content-description""));
+        assertEquals(""additional data"", att.getHeader(""X-AdditionalData""));
+        assertEquals(1, attachmentDs.readCounts); // Fails - input is read twice
+    }
+
     private Attachment unmarshalAndCheckAttachmentName(String matcher) throws IOException, UnsupportedEncodingException {
         Exchange intermediate = template.send(""direct:unmarshalonlyinlineheaders"", exchange);
         assertNotNull(intermediate.getOut());
@@ -384,6 +419,34 @@ private void addAttachment(String attContentType, String attText, String attFile
         in.addAttachmentObject(attFileName, attachment);
     }
 
+    private void addAttachment(DataSource ds, String attFileName, Map<String, String> headers) throws IOException {
+        DefaultAttachment attachment = new DefaultAttachment(ds);
+        if (headers != null) {
+            for (String headerName : headers.keySet()) {
+                attachment.addHeader(headerName, headers.get(headerName));
+            }
+        }
+        in.addAttachmentObject(attFileName, attachment);
+    }
+
+    class CountingByteArrayDataSource extends ByteArrayDataSource {
+
+        int readCounts = 0;
+
+        CountingByteArrayDataSource(InputStream is, String attContentType) throws IOException {
+            super(is, attContentType);
+        }
+
+        @Override
+        public InputStream getInputStream() throws IOException {
+            //Thread.dumpStack();
+            readCounts++;
+            return super.getInputStream();
+        }
+
+    }
+
+
     @Override
     protected RouteBuilder createRouteBuilder() throws Exception {
         return new RouteBuilder() {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Mar/21 11:04;davsclaus;Thanks, Tim for the test case.

This one was a bit more tricky to get to the bottom, as it is javax-mail that reads the stream to determine encoding for each part that build up the multipart message.
So we can fix this by setting explicit the Content-Transfer-Encoding header on every part so this does not happen.;;;",,,,,,,,,,
"Camel Kafka producer: Specified topic is ignored (""No topic key set"" error) when KafkaConfiguration is used",CAMEL-12076,13124120,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,pointless2006,pointless2006,11/Dec/17 12:28,14/Dec/17 10:13,14/Jul/23 05:50,14/Dec/17 10:13,2.20.1,,,,,2.21.0,,,,camel-kafka,,,,0,,,"Specified topic is ignored (""No topic key set"" error) when KafkaConfiguration is used. When topic is set inside KafkaConfiguration then no error occurs.

<spring-boot.version>1.5.8.RELEASE</spring-boot.version>
<camel.version>2.20.1</camel.version>

{code}
        from(""direct:sendToKafka"")
                .setBody(constant(""Message from Camel to Kafka""))
                .setHeader(KafkaConstants.KEY, constant(""Camel""))
                .to(""kafka:TESTTOPIC?configuration=#kafkaConfiguration"");
{code}

{code}
2017-12-11 14:16:35.466 ERROR 12048 --- [ad #1 - WireTap] CamelRouter                              : Exchange[ExchangePattern: InOnly, BodyType: String, Body: Message from Camel to Kafka, CaughtExceptionType: org.apache.camel.CamelExchangeException, CaughtExcept
ionMessage: No topic key set. Exchange[ID-5CG7383K6H00BA-1512994577303-0-3], StackTrace: org.apache.camel.CamelExchangeException: No topic key set. Exchange[ID-5CG7383K6H00BA-1512994577303-0-3]
        at org.apache.camel.component.kafka.KafkaProducer.createRecorder(KafkaProducer.java:149)
        at org.apache.camel.component.kafka.KafkaProducer.process(KafkaProducer.java:251)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
        at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:132)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:445)
        at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:127)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
        at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:158)
        at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:153)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
]
{code}",,githubbot,pointless2006,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 14 10:12:59 UTC 2017,,,,,,,,,,,"0|i3nrgn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Dec/17 09:50;githubbot;dmvolod opened a new pull request #2147: CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used
URL: https://github.com/apache/camel/pull/2147
 
 
   If topic property was not received from configuration or header parameters take it from the remaining URI. Also some minor code style fixes are applied.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Dec/17 09:50;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2147

    CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used

    If topic property was not received from configuration or header parameters take it from the remaining URI. Also some minor code style fixes are applied.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12076

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2147
    
----
commit ed9d4d6fe5f4ccc9975c62b89a145beebf079ef2
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-12-14T09:43:50Z

    CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used

----
;;;","14/Dec/17 10:10;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2147
;;;","14/Dec/17 10:12;githubbot;oscerd commented on issue #2147: CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used
URL: https://github.com/apache/camel/pull/2147#issuecomment-351666831
 
 
   Thanks the PR has been merged on master. There was a little error on tests compilation. Fixed now.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Dec/17 10:12;githubbot;oscerd commented on issue #2147: CAMEL-12076: Specified topic is ignored when KafkaConfiguration is used
URL: https://github.com/apache/camel/pull/2147#issuecomment-351667236
 
 
   Since we changed to DefaultComponent this fix can be only on 2.21.0, backporting to 2.20.x can be a breaking change for users.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Piling up of threads in iterating splitter in pararllel processing,CAMEL-12075,13124064,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,11/Dec/17 07:43,13/Dec/17 09:16,14/Jul/23 05:50,13/Dec/17 09:16,2.18.5,2.19.4,2.20.1,,,2.19.5,2.20.2,2.21.0,,camel-core,,,,0,,,"If you have a custom interating splitter which runs in parallel processing and which throws a RuntimeException either in the ""hasNext"" or ""next"" method after an aggregation thread was created then the aggregation thread will never finish.

Therefore if the error occurs mulitple times the aggregatgor threads pile up.",,forsthofer,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 13 09:15:56 UTC 2017,,,,,,,Patch Available,,,,"0|i3nr47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Dec/17 07:44;forsthofer;I will provide a GitHup pull request for the master branch.

If this request is accepted, I can make the patches for the older versions 2.20.2 and 2.19.5.;;;","11/Dec/17 08:10;githubbot;forsthofer opened a new pull request #2142: CAMEL-12075: aggregator thread does not finish in iterating splitter
URL: https://github.com/apache/camel/pull/2142
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/17 08:10;githubbot;GitHub user forsthofer opened a pull request:

    https://github.com/apache/camel/pull/2142

    CAMEL-12075: aggregator thread does not finish in iterating splitter

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/forsthofer/camel CAMEL-12075

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2142.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2142
    
----
commit 09fb208e22a61c3feaacec9022575080c4b1a9d7
Author: Franz Forsthofer <franz.forsthofer@sap.com>
Date:   2017-12-11T08:06:59Z

    CAMEL-12075: aggregator thread does not finish in iterating splitter

----
;;;","13/Dec/17 09:15;githubbot;davsclaus closed pull request #2142: CAMEL-12075: aggregator thread does not finish in iterating splitter
URL: https://github.com/apache/camel/pull/2142
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
index f924561a588..90a6f7b9013 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
@@ -301,56 +301,62 @@ protected void doProcessParallel(final Exchange original, final AtomicExchange r
             final AtomicBoolean aggregationTaskSubmitted = new AtomicBoolean();
 
             LOG.trace(""Starting to submit parallel tasks"");
-
-            while (it.hasNext()) {
-                final ProcessorExchangePair pair = it.next();
-                // in case the iterator returns null then continue to next
-                if (pair == null) {
-                    continue;
-                }
-
-                final Exchange subExchange = pair.getExchange();
-                updateNewExchange(subExchange, total.intValue(), pairs, it);
-
-                completion.submit(new Callable<Exchange>() {
-                    public Exchange call() throws Exception {
-                        // start the aggregation task at this stage only in order not to pile up too many threads
-                        if (aggregationTaskSubmitted.compareAndSet(false, true)) {
-                            // but only submit the aggregation task once
-                            aggregateExecutorService.submit(aggregateOnTheFlyTask);
-                        }
-
-                        if (!running.get()) {
-                            // do not start processing the task if we are not running
-                            return subExchange;
-                        }
-
-                        try {
-                            doProcessParallel(pair);
-                        } catch (Throwable e) {
-                            subExchange.setException(e);
-                        }
-
-                        // Decide whether to continue with the multicast or not; similar logic to the Pipeline
-                        Integer number = getExchangeIndex(subExchange);
-                        boolean continueProcessing = PipelineHelper.continueProcessing(subExchange, ""Parallel processing failed for number "" + number, LOG);
-                        if (stopOnException && !continueProcessing) {
-                            // signal to stop running
-                            running.set(false);
-                            // throw caused exception
-                            if (subExchange.getException() != null) {
-                                // wrap in exception to explain where it failed
-                                CamelExchangeException cause = new CamelExchangeException(""Parallel processing failed for number "" + number, subExchange, subExchange.getException());
-                                subExchange.setException(cause);
+            
+            try {
+                while (it.hasNext()) {
+                    final ProcessorExchangePair pair = it.next();
+                    // in case the iterator returns null then continue to next
+                    if (pair == null) {
+                        continue;
+                    }
+    
+                    final Exchange subExchange = pair.getExchange();
+                    updateNewExchange(subExchange, total.intValue(), pairs, it);
+    
+                    completion.submit(new Callable<Exchange>() {
+                        public Exchange call() throws Exception {
+                            // start the aggregation task at this stage only in order not to pile up too many threads
+                            if (aggregationTaskSubmitted.compareAndSet(false, true)) {
+                                // but only submit the aggregation task once
+                                aggregateExecutorService.submit(aggregateOnTheFlyTask);
+                            }
+    
+                            if (!running.get()) {
+                                // do not start processing the task if we are not running
+                                return subExchange;
+                            }
+    
+                            try {
+                                doProcessParallel(pair);
+                            } catch (Throwable e) {
+                                subExchange.setException(e);
+                            }
+    
+                            // Decide whether to continue with the multicast or not; similar logic to the Pipeline
+                            Integer number = getExchangeIndex(subExchange);
+                            boolean continueProcessing = PipelineHelper.continueProcessing(subExchange, ""Parallel processing failed for number "" + number, LOG);
+                            if (stopOnException && !continueProcessing) {
+                                // signal to stop running
+                                running.set(false);
+                                // throw caused exception
+                                if (subExchange.getException() != null) {
+                                    // wrap in exception to explain where it failed
+                                    CamelExchangeException cause = new CamelExchangeException(""Parallel processing failed for number "" + number, subExchange, subExchange.getException());
+                                    subExchange.setException(cause);
+                                }
                             }
+    
+                            LOG.trace(""Parallel processing complete for exchange: {}"", subExchange);
+                            return subExchange;
                         }
-
-                        LOG.trace(""Parallel processing complete for exchange: {}"", subExchange);
-                        return subExchange;
-                    }
-                });
-
-                total.incrementAndGet();
+                    });
+    
+                    total.incrementAndGet();
+                }
+            } catch (RuntimeException e) {
+                // The methods it.hasNext and it.next can throw RuntimeExceptions when custom iterators are implemented.
+                // We have to catch the exception here otherwise the aggregator threads would pile up.
+                executionException.set(e);
             }
 
             // signal all tasks has been submitted
diff --git a/camel-core/src/test/java/org/apache/camel/issues/SplitterParallelRuntimeExceptionInHasNextOrNext.java b/camel-core/src/test/java/org/apache/camel/issues/SplitterParallelRuntimeExceptionInHasNextOrNext.java
new file mode 100644
index 00000000000..948aada23e2
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/issues/SplitterParallelRuntimeExceptionInHasNextOrNext.java
@@ -0,0 +1,155 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.issues;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Test;
+
+public class SplitterParallelRuntimeExceptionInHasNextOrNext extends ContextTestSupport {
+
+    /**
+     * Tests that only one aggregator thread is created if a RuntimeException in
+     * the hasNext method of a custom iterator occurs.
+     */
+    @Test
+    public void testSplitErrorInHasNext() throws Exception {
+
+        execute(""direct:errorInHasNext"");
+    }
+
+    /**
+     * Tests that only one aggregator thread is created if a RuntimeException in
+     * the next method of a custom iterator occurs.
+     */
+    @Test
+    public void testSplitErrorInNext() throws Exception {
+
+        execute(""direct:errorInNext"");
+    }
+
+    private void execute(String from) throws InterruptedException {
+        for (int i = 0; i < 10; i++) {
+            try {
+                template.sendBody(from, ""some content"");
+            } catch (Exception e) {
+                // expected due to runtime exception in hasNext method
+                assertTrue(e.getMessage().startsWith(""Exception occurred""));
+            }
+            assertMockEndpointsSatisfied();
+        }
+        List<Thread> aggregatorThreads = getAggregatorThreads();
+        assertEquals(1, aggregatorThreads.size());
+    }
+
+    private List<Thread> getAggregatorThreads() {
+        List<Thread> result = new ArrayList<>();
+        for (Thread t : Thread.getAllStackTraces().keySet()) {
+            if (t.getName().endsWith(""Splitter-AggregateTask"")) {
+                result.add(t);
+            }
+        }
+        return result;
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+
+                from(""direct:errorInHasNext"").split().method(SplitterImpl.class, ""errorInHasNext"").streaming().parallelProcessing(true).to(""mock:split1"");
+
+                from(""direct:errorInNext"").split().method(SplitterImpl.class, ""errorInNext"").streaming().parallelProcessing(true).to(""mock:split2"");
+
+            }
+        };
+    }
+
+    public static class SplitterImpl {
+
+        public Iterator<String> errorInHasNext(InputStream request, Exchange exchange) {
+
+            return new CustomIterator(exchange, request, true);
+        }
+
+        public Iterator<String> errorInNext(InputStream request, Exchange exchange) {
+
+            return new CustomIterator(exchange, request, false);
+        }
+
+    }
+
+    static class CustomIterator implements Iterator<String>, Closeable {
+
+        private int index = 0;
+        private InputStream request;
+        private boolean errorInHasNext;
+
+        CustomIterator(Exchange exchange, InputStream request, boolean errorInHasNext) {
+
+            this.request = request;
+            this.errorInHasNext = errorInHasNext;
+
+        }
+
+        @Override
+        public boolean hasNext() {
+            if (index < 7) {
+                return true;
+            }
+            if (errorInHasNext) {
+                throw new RuntimeException(""Exception thrown"");
+            } else {
+                return false;
+            }
+        }
+
+        @Override
+        public String next() {
+            index++;
+
+            if (index < 7) {
+                return ""<a>"" + index + ""</a>"";
+            }
+            if (!errorInHasNext) {
+                throw new RuntimeException(""Exception thrown"");
+            } else {
+                return ""<a>"" + index + ""</a>"";
+            }
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public void close() throws IOException {
+            request.close();
+        }
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Dec/17 09:15;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2142
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty version in Camel 2.20.0+ not comptatable with Netty in camel-etcd component,CAMEL-12072,13123472,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,bobpaulin,bobpaulin,07/Dec/17 13:59,10/Dec/17 09:53,14/Jul/23 05:50,10/Dec/17 09:53,2.20.0,2.20.1,,,,2.20.2,2.21.0,,,camel-etcd,,,,0,,," I'm trying to use camel-etcd which uses etcd4j 2.13.0 in apache camel 2.20.1.  Unfortunately the netty versions are incompatible due to a breaking change in io.netty.resolver.dns.DnsAddressResolverGroup
exception is
Caused by: java.lang.NoSuchMethodError: io.netty.resolver.dns.DnsAddressResolverGroup.(Ljava/lang/Class;Lio/netty/resolver/dns/DnsServerAddresses;)V

It appears that the Netty version in the master branch of etcd4j would fix this issue once the maintainers cut a new release.  Requested here:
https://github.com/jurmous/etcd4j/pull/146

Once that's done will need to update camel-etcd with the new version.",,acosentino,bobpaulin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 08 15:05:08 UTC 2017,,,,,,,,,,,"0|i3nngv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Dec/17 14:04;acosentino;With [~lb] we are looking at releasing a new version. I'll take care of this once it's released. Thanks for spotting this [~bobpaulin];;;","08/Dec/17 15:05;bobpaulin;+1 Thank you so much for the quick work!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aws-sqs queue creation does not support FIFO queues,CAMEL-12071,13123424,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Pyves,Pyves,07/Dec/17 10:30,07/Dec/17 14:08,14/Jul/23 05:50,07/Dec/17 14:08,2.21.0,,,,,2.21.0,,,,camel-aws,,,,0,,,"CAMEL-11224 added support for new FIFO queues. 

Nevertheless the _createQueue_ method of the _SqsEndpoint_ class doesn't seem to support the creation of FIFO queues. The [AWS documentation|http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html] regarding the CreateQueue API states that the following attributes should be set:
- FifoQueue (needed otherwise AWS will fail the queue name validation, ""Can only include alphanumeric characters, hyphens, or underscores. 1 to 80 in length"")
- ContentBasedDeduplication (defaults to false if omitted)

We intend to submit a pull request to fix this with [~slukes].
",,githubbot,Pyves,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 14:08:27 UTC 2017,,,,,,,,,,,"0|i3nn67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Dec/17 14:02;githubbot;GitHub user PyvesB opened a pull request:

    https://github.com/apache/camel/pull/2140

    Camel 12071 aws-sqs queue creation does not support FIFO queues

    We have addressed the issues described in [Camel 12071](https://issues.apache.org/jira/browse/CAMEL-12071).
    
    Thanks to @slukes for pairing with me on this piece of work. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bbc/camel CAMEL-12071

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2140.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2140
    
----
commit 27ee0225b8914f26c73a76b5ea45b2526bd8d4da
Author: PyvesB <pierre-yves.bigourdan@bbc.co.uk>
Date:   2017-12-07T11:41:54Z

    CAMEL-12071 aws-sqs queue creation does not support FIFO queues

commit 3f8b9f87be82928af940831eb049f17d6ae4e9fd
Author: PyvesB <pierre-yves.bigourdan@bbc.co.uk>
Date:   2017-12-07T11:56:57Z

    CAMEL-12071 improved unit tests for createQueue

commit e96115a7239594b93038437f2a42631b25e038e0
Author: PyvesB <pierre-yves.bigourdan@bbc.co.uk>
Date:   2017-12-07T13:59:48Z

    CAMEL-12071 made unit tests fail in expected way

----
;;;","07/Dec/17 14:08;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2140
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ActiveMQ/JMS component: transferExchange option does not transfer exchange properties anymore,CAMEL-12069,13123226,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,06/Dec/17 16:07,06/Dec/17 22:26,14/Jul/23 05:50,06/Dec/17 22:26,2.19.0,2.20.1,,,,2.19.5,2.20.2,2.21.0,,camel-activemq,camel-jms,,,0,,,"The ActiveMQ/JMS component documenation generated from the _JMSComponent#setTransferExchange_ javadoc states:

{quote}
You can transfer the exchange over the wire instead of just the body and headers. 
The following fields are transferred: In body, Out body, Fault body, In headers, Out headers, Fault headers, exchange properties, exchange exception.
{quote}

But exchange properties are *not* transfered.

I debuged into this and noticed that _JMSBinding#createJmsMessage_ calls _DefaultExchangeHolder.marshal(exchange, false, endpoint.isAllowSerializedHeaders())_ when _transferExchange_ is _true_. The _false_ parameter is the reason that the exchange properties are not included in the JMS message.

This should either be fixed or the documentation should be updated.",,githubbot,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 06 22:19:54 UTC 2017,,,,,,,,,,,"0|i3nlyf:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"06/Dec/17 16:16;pascalschumacher;Looks like this was unintentionally broken by https://github.com/apache/camel/commit/5dd59162e4ac9335e497934b8d662f598cb779d1;;;","06/Dec/17 20:01;githubbot;PascalSchumacher opened a new pull request #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139
 
 
   … transfer exchange properties
   
   TransferExchange now includes exchange properties again. This restores the previous behavior accidentally broken by 5dd59162e4ac9335e497934b8d662f598cb779d1.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Dec/17 20:01;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/2139

    CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…

    … transfer exchange properties
    
    TransferExchange now includes exchange properties again. This restores the previous behavior accidentally broken by 5dd59162e4ac9335e497934b8d662f598cb779d1.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-12069-transferExchange-should-include-exchange-properties

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2139.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2139
    
----
commit 86b94fc4d937eff3d7e1031fc95477c3042579b2
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2017-12-06T19:58:02Z

    CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not transfer exchange properties
    
    TransferExchange now includes exchange properties again. This restores the previous behavior accidentally broken by 5dd59162e4ac9335e497934b8d662f598cb779d1.

----
;;;","06/Dec/17 20:24;githubbot;oscerd commented on issue #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139#issuecomment-349763311
 
 
   Go for it @PascalSchumacher :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Dec/17 22:19;githubbot;asfgit closed pull request #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java
index 9ebe7047f77..0de72fe4395 100644
--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java
+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java
@@ -518,7 +518,7 @@ protected Message createJmsMessage(Exchange exchange, Object body, Map<String, O
         // special for transferExchange
         if (endpoint != null && endpoint.isTransferExchange()) {
             LOG.trace(""Option transferExchange=true so we use JmsMessageType: Object"");
-            Serializable holder = DefaultExchangeHolder.marshal(exchange, false, endpoint.isAllowSerializedHeaders());
+            Serializable holder = DefaultExchangeHolder.marshal(exchange, true, endpoint.isAllowSerializedHeaders());
             Message answer = session.createObjectMessage(holder);
             // ensure default delivery mode is used by default
             answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);
diff --git a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java
index f7efd684f63..cc4721a0307 100644
--- a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java
+++ b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java
@@ -67,6 +67,8 @@ public void process(Exchange exchange) throws Exception {
                 map.put(""double"", new Double(1.23));
 
                 exchange.getIn().setHeaders(map);
+
+                exchange.setProperty(""PropertyName"", ""PropertyValue"");
             }
         });
 
@@ -88,6 +90,7 @@ public void process(Exchange exchange) throws Exception {
         assertEquals((Long) 123L, exchange.getIn().getHeader(""long"", Long.class));
         assertEquals((Double) 1.23, exchange.getIn().getHeader(""double"", Double.class));
         assertEquals(""hello"", exchange.getIn().getHeader(""string"", String.class));
+        assertEquals(""PropertyValue"", exchange.getProperty(""PropertyName""));
         
         Exchange resultExchange = result.getExchanges().get(0);
         assertTrue(resultExchange.getIn() instanceof JmsMessage);
@@ -103,6 +106,7 @@ public void process(Exchange exchange) throws Exception {
         assertEquals((Long) 123L, exchange.getIn().getHeader(""long"", Long.class));
         assertEquals((Double) 1.23, exchange.getIn().getHeader(""double"", Double.class));
         assertEquals(""hello"", exchange.getIn().getHeader(""string"", String.class));
+        assertEquals(""PropertyValue"", exchange.getProperty(""PropertyName""));
     }
 
     @Override
diff --git a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java
index 71d25e88341..1aa15721b35 100644
--- a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java
+++ b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExchangeTest.java
@@ -62,6 +62,7 @@ public void testSendExchange() throws Exception {
         MockEndpoint mock = getMockEndpoint(""mock:result"");
         mock.expectedBodiesReceived(""Hello World"");
         mock.expectedHeaderReceived(""foo"", ""cheese"");
+        mock.expectedPropertyReceived(""bar"", 123);
 
         template.send(""direct:start"", new Processor() {
             public void process(Exchange exchange) throws Exception {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Dec/17 22:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2139
;;;","06/Dec/17 22:19;githubbot;PascalSchumacher commented on issue #2139: CAMEL-12069: ActiveMQ/JMS component: transferExchange option does not…
URL: https://github.com/apache/camel/pull/2139#issuecomment-349793964
 
 
   @oscerd Thanks for the review! :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[Camel-consul] firstIndex cannot be set if it is out of Long range,CAMEL-12065,13122818,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,05/Dec/17 09:59,27/Mar/18 09:17,14/Jul/23 05:50,07/Dec/17 09:49,2.20.1,,,,,2.21.0,,,,camel-consul,,,,0,,,"[Documentation|http://camel.apache.org/consul-component.html] claims that _firstIndex_ option must be of Long Java type.
However WaitIndex (that is generated by Consul and should be set for _firstIndex_ to skip all events until one that has such WaitIndex) is actually of BigInteger type and can be out of Long type range - https://github.com/hashicorp/consul/blob/master/api/event.go#L90-L104

_org.apache.camel.component.consul.enpoint.ConsulEventConsumer_ has _index_ field of correct type AtomicReference<BigInteger> and is initialized as
{code}
this.index = new AtomicReference(BigInteger.valueOf(configuration.getFirstIndex()));
{code}
However BigInteger value that is out of Long range cannot be passed for _index_  from apiEnpoint option _firstIndex_ because _org.apache.camel.component.consul.ConsulConfiguration_ has _firstIndex_ field that is declared as _long_ type:
{code}
    @UriParam(
        label = ""consumer,watch"",
        defaultValue = ""0""
    )
    private long firstIndex;
{code}
Seems that it should be changed to be of BigInteger type.
",,acosentino,Viachaslau.Tsikhanovich,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12410,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 09:50:00 UTC 2017,,,,,,,,,,,"0|i3njgn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Dec/17 09:50;acosentino;Thanks, since this is a breaking change for the configuration of Camel-consul this is fixed only on 2.21.0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jaxb component does not communicate charset when explicitly set,CAMEL-12062,13122712,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,MadMod,MadMod,04/Dec/17 23:26,07/Dec/17 09:02,14/Jul/23 05:50,07/Dec/17 09:02,2.20.1,,,,,2.21.0,,,,camel-jaxb,,,,0,,,"This test will cause a UnmappableCharacterException, since jaxb does not communicate the encoding of the bytes it outputs causing the file endpoint to assume it is UTF-8.

This can be mitigated by adding an explicit reader in the route, but it would be nice if it worked OOTB.

{code:java}
/**
 * @version 
 */
public class ExplicitFileEncodingTest extends CamelTestSupport {

    @Override
    public void setUp() throws Exception {
        deleteDirectory(""target/charset"");
        super.setUp();
    }

    @Test
    public void testISOFileEncoding() throws Exception {
        PurchaseOrder order = new PurchaseOrder();
        //Data containing characters ÆØÅæøå that differ in utf-8 and iso
        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5"";
        order.setName(name);
        order.setAmount(123.45);
        order.setPrice(2.22);

        MockEndpoint result = getMockEndpoint(""mock:file"");
        result.expectedFileExists(""target/charset/output.txt"");

        template.sendBody(""direct:start"", order);
        assertMockEndpointsSatisfied();

        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        PurchaseOrder obj = (PurchaseOrder)unmarshaller.unmarshal(new File(""target/charset/output.txt""));
        assertEquals(obj.getName(), name);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
                jaxb.setEncoding(""iso-8859-1"");

                from(""direct:start"")
                        .marshal(jaxb)
                        .to(""file:target/charset/?fileName=output.txt&charset=iso-8859-1"");
            }
        };
    }

}
{code}",,davidkarlsen,githubbot,MadMod,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 07 09:02:28 UTC 2017,,,,,,,Patch Available,,,,"0|i3nitb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Dec/17 23:41;githubbot;IIlllII opened a new pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Dec/17 23:41;githubbot;GitHub user IIlllII opened a pull request:

    https://github.com/apache/camel/pull/2130

    CAMEL-12062:  Propagate encoding in charset property from jaxb component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/IIlllII/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2130.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2130
    
----
commit 64169aed7e0c8f07853565fac4e9822f26c83647
Author: Jonas Waage <jonas.h.waage@gmail.com>
Date:   2017-12-04T23:34:55Z

    CAMEL-12062 Propagate encoding in property

----
;;;","05/Dec/17 10:44;githubbot;oscerd commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154907417
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   This looks a bit ugly. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/17 10:44;githubbot;oscerd commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154907494
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   Maybe we can find a better way.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/17 13:59;githubbot;IIlllII commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154951751
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   Ok, what is the appropriate way to communicate the encoding?
   
   This is what is done by the file endpoint, and afaik how that is able to accomplish the same feature:
   `/**
        * Set up the exchange properties with the options of the file endpoint
        */
       public void configureExchange(Exchange exchange) {
           // Now we just set the charset property here
           if (getCharset() != null) {
               exchange.setProperty(Exchange.CHARSET_NAME, getCharset());
           }
       }`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/17 13:59;githubbot;IIlllII commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154951751
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   Ok, what is the appropriate way to communicate the encoding?
   
   This is what is done by the file endpoint, and afaik how that is able to accomplish the same feature:
   ```   
       /**
        * Set up the exchange properties with the options of the file endpoint
        */
       public void configureExchange(Exchange exchange) {
           // Now we just set the charset property here
           if (getCharset() != null) {
               exchange.setProperty(Exchange.CHARSET_NAME, getCharset());
           }
       }```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/17 14:32;githubbot;IIlllII commented on a change in pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#discussion_r154951751
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
 
 Review comment:
   @oscerd 
   Ok, what is the appropriate way to communicate the encoding?
   
   I based this on what is done by the file endpoint, and AFAIK how that is able to accomplish the same feature:
   ```   
       /**
        * Set up the exchange properties with the options of the file endpoint
        */
       public void configureExchange(Exchange exchange) {
           // Now we just set the charset property here
           if (getCharset() != null) {
               exchange.setProperty(Exchange.CHARSET_NAME, getCharset());
           }
       }```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Dec/17 09:02;githubbot;oscerd commented on issue #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130#issuecomment-349905071
 
 
   Thanks the PR has been merged. We'll see if we can do something better in future.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Dec/17 09:02;githubbot;oscerd closed pull request #2130: CAMEL-12062:  Propagate encoding in charset property from jaxb component
URL: https://github.com/apache/camel/pull/2130
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
index b78d5169c08..0782e2197c5 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
@@ -136,6 +136,10 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
             String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
             if (charset == null) {
                 charset = encoding;
+                //Propagate the encoding of the exchange
+                if (charset != null) {
+                    exchange.setProperty(Exchange.CHARSET_NAME, charset);
+                }
             }
             if (charset != null) {
                 marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitFileEncodingTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitFileEncodingTest.java
new file mode 100644
index 00000000000..b045821f005
--- /dev/null
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitFileEncodingTest.java
@@ -0,0 +1,77 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.File;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+/**
+ * @version 
+ */
+public class ExplicitFileEncodingTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testISOFileEncoding() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5"";
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.txt"");
+
+        template.sendBody(""direct:start"", order);
+        assertMockEndpointsSatisfied();
+
+        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
+        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
+        PurchaseOrder obj = (PurchaseOrder)unmarshaller.unmarshal(new File(""target/charset/output.txt""));
+        assertEquals(obj.getName(), name);
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
+                jaxb.setEncoding(""iso-8859-1"");
+
+                from(""direct:start"")
+                        .marshal(jaxb)
+                        .to(""file:target/charset/?fileName=output.txt&charset=iso-8859-1"");
+            }
+        };
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Dec/17 09:02;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2130
;;;",,,,,,,,,,,,,,,,,,,,,,,
SFTP exception-handling more problemtatic than documented,CAMEL-12061,13122631,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dvholten,dvholten,04/Dec/17 17:34,17/Jan/18 09:42,14/Jul/23 05:50,17/Jan/18 09:42,2.20.1,,,,,2.21.0,,,,camel-sftp,,,,0,ioexception,sftp,"my poll-sftp-server-for-files-to-download route crashes fom time to time. i happend to get a stacktrace which indicates an IoException when the SFTP component changes the folder to inspect on the remote site. Can happen - however, contrary to the documentation, which says an exception produces a warning and is otherwise ignored, the whole application goes down.

-------------------------------------------------------------------------
{{
Dez 04, 2017 3:45:34 PM org.apache.camel.component.file.remote.RemoteFilePolling
ConsumerPollStrategy rollback
WARNUNG: Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://XXXXXXXXXXXXXXXX
Dez 04, 2017 3:45:34 PM org.apache.camel.util.CamelLogger log
WARNUNG: Consumer Consumer[sftp://XXXXXXXXXXXXX/out/prod/?delay=30000&delete=true&localWorkDirectory=c%3A%2FMarta%2FHgmTkw14%2Femcs%2Ftemp%2F&password=
xxxxxx] failed polling endpoint: sftp://XXXXXXXXXXXXX/out/prod/?delay=30000&delete=true&localWorkDirectory=c%3A%2FMarta%2FHgmTkw14%2Femcs%2Ftemp%2F&pas
sword=xxxxxx. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: out]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: out
        at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:609)
        at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:597)
        at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:108)
        at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:80)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:124)
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: 4:
        at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:359)
        at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:607)
        ... 13 more
Caused by: java.io.IOException: inputstream is closed
        at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2911)
        at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2935)
        at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2355)
        at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:342)
        ... 14 more
}}","java 8, windows 2008 r2, ",davsclaus,dvholten,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 17 09:41:52 UTC 2018,,,,,,,,,,,"0|i3nibr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Dec/17 13:25;dvholten;i looked through the sources along the stacktrace - what happens during the attempted poll and the exception looks reasonable for me.
However, the restart/retry-things are a little bit unclear. One excepion claims 'will try to reconnect on next attempt..' but i have yet to find the things which enforce a reconnect after a failed poll....
;;;","17/Jan/18 09:07;davsclaus;Can you try with disconnect=true;;;","17/Jan/18 09:19;davsclaus;Can you try enabling DEBUG logging level on the ftp component, and do you see this line when Camel disconnects the FTP client

 

if (log.isDebugEnabled()) {
 log.debug(""Disconnecting from: {}"", remoteServer());
}

As Camel will attempt to disconnect if that poll failed, as the WARN message says.

And do you get this error all the time, eg can you reproduce it? We could try to improve camel-ftp to do a hard disconnect and ensure the ftp client is fully re-created.;;;","17/Jan/18 09:41;davsclaus;Okay we have improved this to do a hard/forced disconnect so the sftp client should be fresh on next poll (before some state may have been left). You can try the 2.21.0 release when its out, or build and try from master yourself.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong order in file idempotent store.,CAMEL-12058,13122350,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,zurkin,zurkin,02/Dec/17 11:26,16/Jan/18 20:30,14/Jul/23 05:50,16/Jan/18 17:44,2.20.1,2.20.2,2.21.0,,,2.21.0,,,,camel-core,,,,0,FileIdempotent,,"
I recently noticed that there is wrong entry order in file using 
FileIdempotentRepository implementation. 
The effect is that instead of having order like: 

file1.txt.20171123 
file2.txt.20171123 
file1.txt.20171124 
file3.txt.20171125 
file2.txt.20171126 

we have: 

file1.txt.20171123 
file1.txt.20171124 
file2.txt.20171123 
file2.txt.20171126 
file3.txt.20171125 

where date extension represents order in which particular file was consumed 
by the idempotent file consumer. 
As a consequence instead of initializing memory cache with newest values, 
it is initialized (probably) based on hash function from truncStore method 
and we consume same file more than once: 

    protected void trunkStore() { 
        LOG.info(""Trunking idempotent filestore: {}"", fileStore); 
        FileOutputStream fos = null; 
        try { 
            fos = new FileOutputStream(fileStore); 
            for (String key : cache.keySet()) { 
                fos.write(key.getBytes()); 
                fos.write(STORE_DELIMITER.getBytes()); 
            } 
        } catch (IOException e) { 
            throw ObjectHelper.wrapRuntimeCamelException(e); 
        } finally { 
            IOHelper.close(fos, ""Trunking file idempotent repository"", LOG); 
        } 
    } ",,davsclaus,githubbot,onders,sermojohn,zurkin,,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,CAMEL-12148,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Jan 16 20:30:34 UTC 2018,,,,,,,,,,,"0|i3ngmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Dec/17 10:44;githubbot;GitHub user zurkin opened a pull request:

    https://github.com/apache/camel/pull/2137

    File idempotent repository test.

    Test for CAMEL-12058

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zurkin/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2137.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2137
    
----
commit 2bb5d0cd347312aa78398f320ee7895bdc9ad9c1
Author: Krzysztof Holdanowicz <holdanowicz@gmail.com>
Date:   2017-12-06T10:23:07Z

    File idempotent repository test.

----
;;;","10/Dec/17 21:26;sermojohn;Hello!
It seems that the FileIdempotentRepository uses an LRU cache by default. So, I think that the behavior you expect is not default (intentionally or not). Additionally, you do not perform any cache get operation in your unit test, so the default  ordering of the LRUCache implementation is used when evicting items.
I suggest you to provide another cache implementation by using the appropriate constructor of the idempotent repository. As I can understand a FIFO cache would match your expectations, so that the oldest entry would be evicted first, when the cache max size is reached.;;;","18/Dec/17 08:18;onders;There is a discussion around FIFO based caching..
https://github.com/ben-manes/caffeine/issues/183
This may help considering [~sermojohn]'s comment.
Not sure if it is easy to replace LRUCache in FileIdempotentRepository with a new one and see the side effects.
and not sure if it would be good to introduce such caching in camel-core.
maybe it is good [~davsclaus] comment as well..

;;;","26/Dec/17 11:21;davsclaus;You cannot guarantee ordering with the LRUCache as its how the caffeine is implemented. 

You can implement your own FIFO cache and use that instead;;;","26/Dec/17 11:22;githubbot;davsclaus commented on issue #2137: CAMEL-12058 - File idempotent repository test.
URL: https://github.com/apache/camel/pull/2137#issuecomment-353957386
 
 
   Commented on JIRA

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Dec/17 11:22;githubbot;davsclaus closed pull request #2137: CAMEL-12058 - File idempotent repository test.
URL: https://github.com/apache/camel/pull/2137
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/test/java/org/apache/camel/processor/idempotent/FileIdempotentRepositoryTest.java b/camel-core/src/test/java/org/apache/camel/processor/idempotent/FileIdempotentRepositoryTest.java
new file mode 100644
index 00000000000..7dcc0f38a87
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/idempotent/FileIdempotentRepositoryTest.java
@@ -0,0 +1,84 @@
+package org.apache.camel.processor.idempotent;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.nio.file.Files;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+
+public class FileIdempotentRepositoryTest {
+
+	@Rule
+	public TemporaryFolder temporaryFolder = new TemporaryFolder();
+	
+	private FileIdempotentRepository fileIdempotentRepository = new FileIdempotentRepository();
+	private List<String> files;
+	
+	@Before
+	public void setup() throws IOException {
+		files = Arrays.asList(
+				""file1.txt.20171123"",
+				""file2.txt.20171123"",
+				""file1.txt.20171124"",
+				""file3.txt.20171125"",
+				""file2.txt.20171126"",
+				""fixed.income.lamr.out.20171126"",
+				""pricing.px.20171126"",
+				""test.out.20171126"",
+				""processing.source.lamr.out.20171126"");
+		this.fileIdempotentRepository = new FileIdempotentRepository();
+	}
+	
+	@Test
+	public void testTrunkStore() throws URISyntaxException, IOException {
+		//given
+		File fileStore = temporaryFolder.newFile();
+		fileIdempotentRepository.setFileStore(fileStore);
+		fileIdempotentRepository.setCacheSize(10);
+		files.forEach(e -> fileIdempotentRepository.add(e));
+
+		//when
+		fileIdempotentRepository.trunkStore();
+
+		//then
+		Stream<String> fileContent = Files.lines(fileStore.toPath());
+		List<String> fileEntries = fileContent.collect(Collectors.toList());
+		fileContent.close();
+		//expected order
+		assertThat(fileEntries, contains(
+				""file1.txt.20171123"", 
+				""file2.txt.20171123"",
+				""file1.txt.20171124"",
+				""file3.txt.20171125"",
+				""file2.txt.20171126"",
+				""fixed.income.lamr.out.20171126"",
+				""pricing.px.20171126"",
+				""test.out.20171126"",
+				""processing.source.lamr.out.20171126""));
+
+		//current order
+/*		assertThat(fileEntries, contains(
+				""processing.source.lamr.out.20171126"",
+				""test.out.20171126"",
+				""fixed.income.lamr.out.20171126"",
+				""pricing.px.20171126"",
+				""file1.txt.20171123"", 
+				""file2.txt.20171123"",
+				""file1.txt.20171124"",
+				""file3.txt.20171125"",
+				""file2.txt.20171126""));*/
+		
+	}
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Dec/17 11:22;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2137
;;;","03/Jan/18 19:53;zurkin;Hi, 

regarding CAMEL-12058 I don't know if you are aware of all consequences of 
wrong order in the idempotent file store. 
The wrong order in the file is not the problem itself as long as elemens 
are added and eviceted on runtime, because caffeine provides an api for 
ordering like: 

   - @Override public Map<K, V> coldest(int limit) 
   - @Override public Map<K, V> hottest(int limit) 
   - @Override public Map<K, V> oldest(int limit), 
   - @Override public Map<K, V> youngest(int limit) ) 

however the consequences of this appears after RESTART. The memory cache 
does not contain the proper entries (in case of reaching the max limit 
size) because it does not load elements from hottest to coldest but with 
the file entries order hence some of the files are consumed multiple times. 
It means that current implementation of file idempotent store is not usable 
at all anymore. Ignoring the issue (CAMEL-12058) means that Camel library 
does not provide any implementation of idempotent file store as the current 
behaviour is completely wrong and causes consuming multiple times the same 
file after reaching max size limit and after restarting application. ;;;","16/Jan/18 13:51;davsclaus;Logged a ticket CAMEL-12148 to overhaul the file store so its not limited by the LRUCache size and its ""random"" ordering.;;;","16/Jan/18 17:44;davsclaus;This is now resolved by reworked implementation in the upcoming 2.21 release.;;;","16/Jan/18 20:30;zurkin;Thank you! (y);;;",,,,,,,,,,,,,,,,,,,,,,
camel-olingo2 - Missing encoding for query params,CAMEL-12057,13122266,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,_przem,_przem,01/Dec/17 20:27,03/Jan/18 11:34,14/Jul/23 05:50,03/Jan/18 11:34,2.20.1,,,,,2.20.2,2.21.0,,,camel-olingo2,,,,0,,,"Hi guys,
i've a problem with making camel-olingo2 to work with $filter query parameter
Here is my RouteBuilder situation

{code:java}
rest(""/olingo2"")
                .get(""tickets"").to(""direct:olingo2/tickets"");

        from(""direct:olingo2/tickets"")
                .setHeader(""CamelOlingo2.$filter"", simple(""ReporterEmail eq 'user@company.com'""))
                .setHeader(""CamelOlingo2.$select"", simple(""ID,Name""))
                .to(""olingo2://read/ServiceRequestCollection"")
{code}


I get an exception while parsing endpoint URI (a space in uri)

{{URISyntaxException: Illegal character in query at index 107: https://myXXXXXX.crm.ondemand.com/sap/c4c/odata/v1/c4codata/ServiceRequestCollection/?$filter=ReporterEmail eq 'user@company.com'&$select=ID,Name
}}

It comes basically from Olingo2AppImpl:224
I tried with
{{ .setHeader(""CamelOlingo2.$filter"", simple(""ReporterEmail%20eq%20%27user@company.com%27""))
}}but then it fails in Olingo2AppImpl:222 while parsing filter expression.

As a conclusion, at Olingo2AppImpl:224 queryParams should be encoded.

here is my patch https://github.com/przem/camel/commit/e239645cadd7130b27cb85bd713cb71140872865",spring-boot,_przem,acosentino,dmvolod,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12084,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 26 08:35:34 UTC 2017,,,,,,,Patch Available,,,,"0|i3ng3z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Dec/17 20:33;githubbot;przem opened a new pull request #2126: CAMEL-12057 Fixed missing encoding for query params
URL: https://github.com/apache/camel/pull/2126
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Dec/17 20:33;githubbot;GitHub user przem opened a pull request:

    https://github.com/apache/camel/pull/2126

    CAMEL-12057 Fixed missing encoding for query params

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/przem/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2126.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2126
    
----
commit e239645cadd7130b27cb85bd713cb71140872865
Author: Przemek Kubicki <przemek.kubicki@gmail.com>
Date:   2017-12-01T20:14:35Z

    Fixed missing encoding for query params

----
;;;","03/Dec/17 21:06;dmvolod;Need to be fixed in camel-olingo4 also;;;","04/Dec/17 08:08;githubbot;oscerd commented on issue #2126: CAMEL-12057 Fixed missing encoding of query params
URL: https://github.com/apache/camel/pull/2126#issuecomment-348888455
 
 
   Thanks the PR has been merged. Can you do the same also on camel-olingo4 component? Thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Dec/17 08:09;githubbot;oscerd closed pull request #2126: CAMEL-12057 Fixed missing encoding of query params
URL: https://github.com/apache/camel/pull/2126
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java b/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java
index f4423b75f0a..f1198a0a26d 100644
--- a/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java
+++ b/components/camel-olingo2/camel-olingo2-api/src/main/java/org/apache/camel/component/olingo2/api/impl/Olingo2AppImpl.java
@@ -23,6 +23,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.net.URLEncoder;
 import java.nio.charset.Charset;
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.ArrayList;
@@ -221,7 +222,7 @@ public void close() {
 
         final UriInfoWithType uriInfo = parseUri(edm, resourcePath, queryParams);
 
-        execute(new HttpGet(createUri(resourcePath, queryParams)), getResourceContentType(uriInfo),
+        execute(new HttpGet(createUri(resourcePath, encodeQueryParams(queryParams))), getResourceContentType(uriInfo),
             endpointHttpHeaders, new AbstractFutureCallback<T>(responseHandler) {
 
                 @Override
@@ -242,7 +243,7 @@ public void uread(final Edm edm, final String resourcePath, final Map<String, St
 
         final UriInfoWithType uriInfo = parseUri(edm, resourcePath, queryParams);
 
-        execute(new HttpGet(createUri(resourcePath, queryParams)), getResourceContentType(uriInfo),
+        execute(new HttpGet(createUri(resourcePath, encodeQueryParams(queryParams))), getResourceContentType(uriInfo),
             endpointHttpHeaders, new AbstractFutureCallback<InputStream>(responseHandler) {
 
                 @Override
@@ -255,6 +256,17 @@ public void onCompleted(HttpResponse result) throws IOException {
             });
     }
 
+    private Map<String, String> encodeQueryParams(Map<String, String> queryParams) {
+        Map<String, String> encodedQueryParams = queryParams;
+        if (queryParams != null) {
+            encodedQueryParams = new HashMap<String, String>(queryParams.size());
+            for (Map.Entry<String, String> entry : queryParams.entrySet()) {
+                encodedQueryParams.put(entry.getKey(), URLEncoder.encode(entry.getValue()));
+            }
+        }
+        return encodedQueryParams;
+    }
+
     private ContentType getResourceContentType(UriInfoWithType uriInfo) {
         ContentType resourceContentType;
         switch (uriInfo.getUriType()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Dec/17 08:09;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2126
;;;","04/Dec/17 08:09;acosentino;Thanks the PR has been merged. Can you do the same also on camel-olingo4 component? Thanks.;;;","26/Dec/17 08:35;dmvolod;Sorry, camel-olingo4 doesn't requires this fix. I've added test case in  CAMEL-12084;;;",,,,,,,,,,,,,,,,,,,,,,,,,
File idempotent repository is always initialized with default 1000 cache size,CAMEL-12037,13120666,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,zurkin,zurkin,24/Nov/17 17:18,25/Nov/17 17:05,14/Jul/23 05:50,25/Nov/17 16:08,2.20.0,,,,,2.20.2,2.21.0,,,camel-core,,,,0,,,"http://camel.465427.n5.nabble.com/File-idempotent-repository-problem-since-2-20-td5815760.html

So far we've been using file idempotent repository which was defined like 
this: 

<bean id=""download repository"" 
class=""of.apache.camel.processor.idempotent.FileIdempotentRepository""> 
  <property name=""fileStore"" value=""work/.downloadStore.dat"" /> 
  <property name=""cacheSize"" value=""5000"" /> 
</bean> 

However since Camel version 2.20 I can see that in 
FileIdempotentRepository.java there is a cache initialization in method 
doStart(): 

protected void doStart() throws Exception { 
 ... 
 this.cache = LRUCacheFactory.newLRUCache(1000); 
 ... 

} 

which always overrides our cacheSize definition with default value, because 
doStart method is always invoked just after bean initialization (if the 
init-method=""start"" was specified in bean definition) or during camel 
context initialization. 

As a consequence our idempotent stores always have a default 1000 cache 
size limit. 

Shuldn't the doStart method check the cache instance first before 
initializing it with default cache size e.g. 

protected void doStart() throws Exception { 
... 
if (this.cache == null) { 
  this.cache = LRUCacheFactory.newLRUCache(1000); 
} 
... 

} 
",,davsclaus,githubbot,zurkin,,,,,,,,,,600,600,,0%,600,600,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 25 17:05:07 UTC 2017,,,,,,,Patch Available,,,,"0|i3n69b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Nov/17 08:36;davsclaus;Contributions is welcome with a patch to fix this;;;","25/Nov/17 11:15;zurkin;Yes I will patch it today. I need to set up environment.
Thanks.;;;","25/Nov/17 16:07;githubbot;zurkin opened a new pull request #2118: CAMEL-12037 Idempotent repository cache initialization fix.
URL: https://github.com/apache/camel/pull/2118
 
 
   Also consider moving this initalization block to a default constructor.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Nov/17 16:07;githubbot;GitHub user zurkin opened a pull request:

    https://github.com/apache/camel/pull/2118

    CAMEL-12037 Idempotent repository cache initialization fix.

    Also consider moving this initalization block to a default constructor.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zurkin/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2118.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2118
    
----
commit 9c002bf387d9687234aa41abe084763a4cbdf388
Author: Krzysztof Holdanowicz <holdanowicz@gmail.com>
Date:   2017-11-25T15:42:04Z

    CAMEL-12037 Idempotent repository cache initialization fix.

----
;;;","25/Nov/17 17:05;githubbot;davsclaus closed pull request #2118: CAMEL-12037 Idempotent repository cache initialization fix.
URL: https://github.com/apache/camel/pull/2118
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java b/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java
index f452346dc80..01796f2ba35 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java
@@ -334,8 +334,11 @@ protected void loadStore() throws IOException {
     protected void doStart() throws Exception {
         ObjectHelper.notNull(fileStore, ""fileStore"", this);
 
-        // default use a 1st level cache
-        this.cache = LRUCacheFactory.newLRUCache(1000);
+        //CAMEL-12037
+        if (this.cache == null) {
+        	// default use a 1st level cache
+        	this.cache = LRUCacheFactory.newLRUCache(1000);
+        }
 
         // init store if not loaded before
         if (init.compareAndSet(false, true)) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Nov/17 17:05;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2118
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
KafkaConsumer stops consuming messages when exception occurs during offset commit,CAMEL-12031,13120571,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rgala,rgala,24/Nov/17 06:09,05/Mar/19 10:00,14/Jul/23 05:50,18/Dec/17 14:05,2.20.0,,,,,2.19.5,2.20.2,2.21.0,,camel-kafka,,,,0,,,"When processing of messages takes longer than max session timeout, the consumer thread will end after receiving the *org.apache.kafka.clients.consumer.CommitFailedException*.

{code:java}
       @Override
        public void run() {
            boolean first = true;
            boolean reConnect = true;

            while (reConnect) {

                // create consumer
                ClassLoader threadClassLoader = Thread.currentThread().getContextClassLoader();
                try {
                    // Kafka uses reflection for loading authentication settings, use its classloader
                    Thread.currentThread().setContextClassLoader(org.apache.kafka.clients.consumer.KafkaConsumer.class.getClassLoader());
                    this.consumer = new org.apache.kafka.clients.consumer.KafkaConsumer(kafkaProps);
                } finally {
                    Thread.currentThread().setContextClassLoader(threadClassLoader);
                }

                if (!first) {
                    // skip one poll timeout before trying again
                    long delay = endpoint.getConfiguration().getPollTimeoutMs();
                    log.info(""Reconnecting {} to topic {} after {} ms"", threadId, topicName, delay);
                    try {
                        Thread.sleep(delay);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }

                first = false;

                // doRun keeps running until we either shutdown or is told to re-connect
                reConnect = doRun();
            }
        }
{code}

The *doRun()* method returns false and the loop ends. It should be possible to let the proces continue after failed offset commit.

I think the catch block inside *doRun* method should look like this:


{code:java}
           ...
            } catch (InterruptException e) {
                getExceptionHandler().handleException(""Interrupted while consuming "" + threadId + "" from kafka topic"", e);
                log.info(""Unsubscribing {} from topic {}"", threadId, topicName);
                consumer.unsubscribe();
                Thread.currentThread().interrupt();
            } catch (org.apache.kafka.clients.consumer.CommitFailedException e) { //or even org.apache.kafka.common.KafkaException
                getExceptionHandler().handleException(""Error consuming "" + threadId + "" from kafka topic"", e);
                reConnect = true;
            } catch (Exception e) {
                getExceptionHandler().handleException(""Error consuming "" + threadId + "" from kafka topic"", e);
            } finally {
                log.debug(""Closing {} "", threadId);
                IOHelper.close(consumer);
            }
            ...
{code}
",,davsclaus,eugenb,rgala,ricardozanini,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 05 10:00:30 UTC 2019,,,,,,,,,,,"0|i3n5o7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Nov/17 17:07;davsclaus;Thanks for reporting yeah we can do a re-connect if kafka throws one of its exception. You are welcome to work on a patch as github PR;;;","18/Dec/17 16:36;rgala;You were faster than me :)

I did almost the same, but was not able to create a reliable test for that so I did not issue a pull request. I tried to simulate a Kafka session timeout in the test to cause a CommitFailedException,  but could not reduce session timeout on embedded Kafka and the test had to run for at least five minutes before the timeout occured.

;;;","05/Mar/19 10:00;eugenb;It seams I can replicate this issue with camel-kafka 3.0.0.M1 release.

On some topics on kafka I get reconnect issue when either changing the offset manually (start from beginning, or when new message comes in).
{code:java}
2019-03-05 10:51:36.168 INFO 5400 --- [carbpandastest]] o.a.kafka.common.utils.AppInfoParser : Kafka version : 2.0.0
2019-03-05 10:51:36.168 INFO 5400 --- [carbpandastest]] o.a.kafka.common.utils.AppInfoParser : Kafka commitId : 3402a8361b734732
2019-03-05 10:51:36.168 INFO 5400 --- [carbpandastest]] o.a.camel.component.kafka.KafkaConsumer : Reconnecting carbpandastest-Thread 0 to topic carbpandastest after 5000 ms
2019-03-05 10:51:41.182 INFO 5400 --- [carbpandastest]] o.a.camel.component.kafka.KafkaConsumer : Subscribing carbpandastest-Thread 0 to topic carbpandastest
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] org.apache.kafka.clients.Metadata : Cluster ID: SV04zC4aSJuPFIuouM0CZA
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.AbstractCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Discovered group coordinator atgrzsl2929.avl01.avlcorp.lan:9092 (id: 2147483646 rack: null)
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.ConsumerCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Revoking previously assigned partitions []
2019-03-05 10:51:41.229 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.AbstractCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] (Re-)joining group
2019-03-05 10:51:41.307 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.AbstractCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Successfully joined group with generation 93
2019-03-05 10:51:41.307 INFO 5400 --- [carbpandastest]] o.a.k.c.c.internals.ConsumerCoordinator : [Consumer clientId=consumer-47, groupId=1a981fbb-60c4-41b9-9051-8696a2b84cfc] Setting newly assigned partitions [carbpandastest-0]
2019-03-05 10:51:41.354 WARN 5400 --- [carbpandastest]] o.a.camel.component.kafka.KafkaConsumer : KafkaException consuming carbpandastest-Thread 0 from topic carbpandastest. Will attempt to re-connect on next run
2019-03-05 10:51:41.385 INFO 5400 --- [carbpandastest]] o.a.k.clients.consumer.ConsumerConfig : ConsumerConfig values:
auto.commit.interval.ms = 5000
auto.offset.reset = latest
bootstrap.servers = [XXXXX:9092]
check.crcs = true
client.id =
connections.max.idle.ms = 540000
default.api.timeout.ms = 60000
enable.auto.commit = true
exclude.internal.topics = true
fetch.max.bytes = 52428800
fetch.max.wait.ms = 500
fetch.min.bytes = 1
group.id = 1a981fbb-60c4-41b9-9051-8696a2b84cfc
heartbeat.interval.ms = 3000
interceptor.classes = []
internal.leave.group.on.close = true
isolation.level = read_uncommitted
key.deserializer = class org.apache.kafka.common.serialization.IntegerDeserializer
max.partition.fetch.bytes = 1048576
max.poll.interval.ms = 300000
max.poll.records = 500
metadata.max.age.ms = 300000
metric.reporters = []
metrics.num.samples = 2
metrics.recording.level = INFO
metrics.sample.window.ms = 30000
partition.assignment.strategy = [org.apache.kafka.clients.consumer.RangeAssignor]
receive.buffer.bytes = 65536
reconnect.backoff.max.ms = 1000
reconnect.backoff.ms = 50
request.timeout.ms = 40000
retry.backoff.ms = 100
sasl.client.callback.handler.class = null
sasl.jaas.config = null
sasl.kerberos.kinit.cmd = /usr/bin/kinit
sasl.kerberos.min.time.before.relogin = 60000
sasl.kerberos.service.name = null
sasl.kerberos.ticket.renew.jitter = 0.05
sasl.kerberos.ticket.renew.window.factor = 0.8
sasl.login.callback.handler.class = null
sasl.login.class = null
sasl.login.refresh.buffer.seconds = 300
sasl.login.refresh.min.period.seconds = 60
sasl.login.refresh.window.factor = 0.8
sasl.login.refresh.window.jitter = 0.05
sasl.mechanism = GSSAPI
security.protocol = PLAINTEXT
send.buffer.bytes = 131072
session.timeout.ms = 10000
ssl.cipher.suites = null
ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
ssl.endpoint.identification.algorithm = https
ssl.key.password = null
ssl.keymanager.algorithm = SunX509
ssl.keystore.location = null
ssl.keystore.password = null
ssl.keystore.type = JKS
ssl.protocol = TLS
ssl.provider = null
ssl.secure.random.implementation = null
ssl.trustmanager.algorithm = PKIX
ssl.truststore.location = null
ssl.truststore.password = null
ssl.truststore.type = JKS
value.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer

2019-03-05 10:51:41.385 INFO 5400 --- [carbpandastest]] i.c.k.s.KafkaAvroDeserializerConfig : KafkaAvroDeserializerConfig values:
schema.registry.url = [http://XXXX:30002]
basic.auth.user.info = [hidden]
auto.register.schemas = true
max.schemas.per.subject = 1000
basic.auth.credentials.source = URL
schema.registry.basic.auth.user.info = [hidden]
specific.avro.reader = true
value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flink requires internals to be visible by TCCL,CAMEL-12028,13120480,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,23/Nov/17 13:39,23/Nov/17 14:52,14/Jul/23 05:50,23/Nov/17 14:52,,,,,,2.20.2,2.21.0,,,camel-flink,,,,0,,,CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2318,,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 23 14:52:12 UTC 2017,,,,,,,,,,,"0|i3n547:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Nov/17 13:57;githubbot;tdiesler opened a new pull request #2111: [CAMEL-12028] Flink requires internals to be visible by TCCL
URL: https://github.com/apache/camel/pull/2111
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Nov/17 13:57;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2111

    [CAMEL-12028] Flink requires internals to be visible by TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-12028

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2111.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2111
    
----
commit c17ad70055a33faaad512b517029299fd2e70fd3
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-11-23T13:51:18Z

    [CAMEL-12028] Flink requires internals to be visible by TCCL

----
;;;","23/Nov/17 14:52;githubbot;oscerd commented on issue #2111: [CAMEL-12028] Flink requires internals to be visible by TCCL
URL: https://github.com/apache/camel/pull/2111#issuecomment-346637884
 
 
   Thanks, merged on 2.20.x and master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Nov/17 14:52;githubbot;oscerd closed pull request #2111: [CAMEL-12028] Flink requires internals to be visible by TCCL
URL: https://github.com/apache/camel/pull/2111
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java b/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java
index 054180dd1d9..e3051579256 100644
--- a/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java
+++ b/components/camel-flink/src/main/java/org/apache/camel/component/flink/DataSetFlinkProducer.java
@@ -35,13 +35,21 @@ public void process(Exchange exchange) throws Exception {
         Object body = exchange.getIn().getBody();
 
         Object result;
-        if (body instanceof List) {
-            List list = (List) body;
-            Object[] array = list.toArray(new Object[list.size()]);
-            result = dataSetCallback.onDataSet(ds, array);
-        } else {
-            result = dataSetCallback.onDataSet(ds, body);
+        
+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+        try {
+            Thread.currentThread().setContextClassLoader(DataSet.class.getClassLoader());
+            if (body instanceof List) {
+                List list = (List) body;
+                Object[] array = list.toArray(new Object[list.size()]);
+                result = dataSetCallback.onDataSet(ds, array);
+            } else {
+                result = dataSetCallback.onDataSet(ds, body);
+            }
+        } finally {
+            Thread.currentThread().setContextClassLoader(tccl);
         }
+        
         collectResults(exchange, result);
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Nov/17 14:52;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2111
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible Intermittent failures in ReactorStreamsServiceTest,CAMEL-12025,13120404,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,23/Nov/17 07:47,24/Nov/17 11:59,14/Jul/23 05:50,23/Nov/17 12:46,,,,,,2.20.2,2.21.0,,,camel-reactor,,,,0,,,"The copy of the test we have in WildFly Camel fails intermittently - see https://github.com/wildfly-extras/wildfly-camel/issues/2320

The fix available in https://github.com/wildfly-extras/wildfly-camel/pull/2324 just needs to be ported back to Camel.",,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 24 11:59:32 UTC 2017,,,,,,,,,,,"0|i3n4nb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Nov/17 08:51;githubbot;ppalaga opened a new pull request #2110: CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest
URL: https://github.com/apache/camel/pull/2110
 
 
   @lburgazzoli this is the backport from https://github.com/wildfly-extras/wildfly-camel/pull/2324

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Nov/17 08:51;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2110

    CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest

    @lburgazzoli this is the backport from https://github.com/wildfly-extras/wildfly-camel/pull/2324

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12025

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2110.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2110
    
----
commit adc1cb0cdc45572bdad8eee838c2d24cc460aa1d
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-11-23T08:50:32Z

    CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest

----
;;;","24/Nov/17 09:38;githubbot;davsclaus commented on issue #2110: CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest
URL: https://github.com/apache/camel/pull/2110#issuecomment-346784838
 
 
   Thanks for the PR it has been merged. Do you mind closing this?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Nov/17 11:59;githubbot;ppalaga closed pull request #2110: CAMEL-12025: Possible Intermittent failures in ReactorStreamsServiceTest
URL: https://github.com/apache/camel/pull/2110
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java b/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java
index 19a1f5ce997..9b9df6b3a30 100644
--- a/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java
+++ b/components/camel-reactor/src/test/java/org/apache/camel/component/reactor/engine/ReactorStreamsServiceTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.camel.component.reactor.engine;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Set;
+import java.util.TreeSet;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -35,7 +39,7 @@
 import reactor.core.publisher.Flux;
 
 public class ReactorStreamsServiceTest extends ReactorStreamsServiceTestSupport {
-    
+
     // ************************************************
     // Setup
     // ************************************************
@@ -287,70 +291,74 @@ public void configure() {
     public void testTo() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
 
         Flux.just(1, 2, 3)
             .flatMap(e -> crs.to(""bean:hello"", e, String.class))
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     @Test
     public void testToWithExchange() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
 
         Flux.just(1, 2, 3)
             .flatMap(e -> crs.to(""bean:hello"", e))
             .map(e -> e.getOut())
             .map(e -> e.getBody(String.class))
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     @Test
     public void testToFunction() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
         Function<Object, Publisher<String>> fun = crs.to(""bean:hello"", String.class);
 
         Flux.just(1, 2, 3)
             .flatMap(fun)
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     @Test
     public void testToFunctionWithExchange() throws Exception {
         context.start();
 
-        AtomicInteger value = new AtomicInteger(0);
-        CountDownLatch latch = new CountDownLatch(1);
+        Set<String> values = Collections.synchronizedSet(new TreeSet<>());
+        CountDownLatch latch = new CountDownLatch(3);
         Function<Object, Publisher<Exchange>> fun = crs.to(""bean:hello"");
 
         Flux.just(1, 2, 3)
             .flatMap(fun)
             .map(e -> e.getOut())
             .map(e -> e.getBody(String.class))
-            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> values.add(res))
             .doOnNext(res -> latch.countDown())
             .subscribe();
 
         Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+        Assert.assertEquals(new TreeSet<>(Arrays.asList(""Hello 1"", ""Hello 2"", ""Hello 3"")), values);
     }
 
     // ************************************************


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Nov/17 11:59;githubbot;Github user ppalaga closed the pull request at:

    https://github.com/apache/camel/pull/2110
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerTemplate.requestBody with responseType throw a InvalidPayloadException instead of original exception (wrapped in a CamelExecutionException),CAMEL-12021,13119970,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thopap,thopap,21/Nov/17 15:11,23/Nov/17 07:56,14/Jul/23 05:50,22/Nov/17 18:18,2.20.1,,,,,2.20.2,2.21.0,,,camel-core,,,,0,,,"I try to upgrade from camel 2.19.3 to camel 2.20.1 and the behavior of {{org.apache.camel.ProducerTemplate.requestBody(String, Object, Class<T>)}} seems to be broken in case of exceptions.

From the API the exception behavior is documented as ""CamelExecutionException if the processing of the exchange failed""
--> in camel 2.19 it works without any issues
--> since camel 2.20.1 the underlying exception is lost and instead a InvalidPayloadException is thrown. 

A first analyze looks like the internal camel processing in 2.20 try to convert the exchange in body to the given response type. But i don't think this is make sense in case of a exception. Using the requestBody without the response type work correctly - here the unterlying exception is correctly propagated back as a wrapped CamelExecutionException.

I was not able to find the root cause, so I could not provide a patch here - but I have attached a junit test to reproduce the issue.",,davsclaus,thopap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Nov/17 15:11;thopap;camel-issue.patch;https://issues.apache.org/jira/secure/attachment/12898672/camel-issue.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 23 07:56:31 UTC 2017,,,,,,,,,,,"0|i3n1zb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Nov/17 15:12;thopap;Attaching a patch containing a Junit test for showing the issue (DefaultProducerTemplateTest.testExceptionOnRequestBodyWithResponseType);;;","22/Nov/17 18:18;davsclaus;Thanks for reporting and the unit test.;;;","23/Nov/17 07:56;thopap;Looks good, thank you for providing a fix. 

[~davsclaus]:
Just for my understanding: The ConvertBodyProcessor where you have done the fix, looks the same in Camel 2.19 and 2.20. Why is the behavior different in both releases? Which change or fix in 2.20 has broken the behavior?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Google PubSub and BigQuery components miss dependency declarations,CAMEL-12017,13119607,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,emin,emin,20/Nov/17 10:36,20/Nov/17 10:42,14/Jul/23 05:50,20/Nov/17 10:40,2.20.1,,,,,2.20.2,2.21.0,,,camel-google-pubsub,,,,0,,,"Google PubSub and Google Bigquery components require Apache HTTP client, which is NOT explicitly called out in dependencies.

As such they would work, if camel-http4 component is mentioned in the dependencies, but would fail on their own.

As a developer I would like to be able to define an absolute minimum of the dependencies, thus I need the component to import all components they rely on, themselves.",,emin,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 20 10:40:17 UTC 2017,,,,,,,,,,,"0|i3mzr3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/17 10:39;githubbot;evmin opened a new pull request #2102: CAMEL-12017: Added httpclient dependency
URL: https://github.com/apache/camel/pull/2102
 
 
   Adressed https://issues.apache.org/jira/browse/CAMEL-12017 - added the dependency explicitly.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/17 10:39;githubbot;GitHub user evmin opened a pull request:

    https://github.com/apache/camel/pull/2102

    CAMEL-12017: Added httpclient dependency

    Adressed https://issues.apache.org/jira/browse/CAMEL-12017 - added the dependency explicitly.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/evmin/camel CAMEL-12017

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2102.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2102
    
----
commit d27088443ae969ecfaf09f9b8ff0706f72650055
Author: Evgeny Minkevich <eminkevich@scentregroup.com>
Date:   2017-11-20T10:37:00Z

    CAMEL-12017: Added httpclient dependency

----
;;;","20/Nov/17 10:40;githubbot;oscerd closed pull request #2102: CAMEL-12017: Added httpclient dependency
URL: https://github.com/apache/camel/pull/2102
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-google-bigquery/pom.xml b/components/camel-google-bigquery/pom.xml
index ce9a1746dfc..812fea01b08 100644
--- a/components/camel-google-bigquery/pom.xml
+++ b/components/camel-google-bigquery/pom.xml
@@ -39,12 +39,14 @@
   </properties>
 
   <dependencies>
-
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-core</artifactId>
     </dependency>
-
+    <dependency>
+      <groupId>org.apache.httpcomponents</groupId>
+      <artifactId>httpclient</artifactId>
+    </dependency>
     <dependency>
       <groupId>com.google.apis</groupId>
       <artifactId>google-api-services-bigquery</artifactId>
diff --git a/components/camel-google-pubsub/pom.xml b/components/camel-google-pubsub/pom.xml
index 5ec43908711..69092777c73 100644
--- a/components/camel-google-pubsub/pom.xml
+++ b/components/camel-google-pubsub/pom.xml
@@ -48,6 +48,10 @@
             <groupId>org.apache.camel</groupId>
             <artifactId>camel-core</artifactId>
         </dependency>
+        <dependency>
+          <groupId>org.apache.httpcomponents</groupId>
+          <artifactId>httpclient</artifactId>
+        </dependency>
         <dependency>
             <groupId>com.google.apis</groupId>
             <artifactId>google-api-services-pubsub</artifactId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/17 10:40;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2102
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid Pool Exhausted error on camel-netty4,CAMEL-12016,13119605,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,dvor4x,dvor4x,20/Nov/17 10:12,20/Nov/17 12:07,14/Jul/23 05:50,20/Nov/17 12:06,2.17.4,2.18.0,2.19.0,2.20.0,2.20.1,2.18.6,2.19.5,2.20.2,2.21.0,camel-netty4,,,,0,,,"Hey guys,

Since camel 2.17.4, our application who made some ""ping request"" brings a ""Pool exhausted"" error after 100 trying.

After analysis, since 2.17.4, when camel-netty4 try to connect to a down host, the connection (ChannelFuture) stay in the pool.

Here is the code to show you :

{code:java}
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
 
import java.util.NoSuchElementException;
 
public class main {
    public static void main(String args[]) throws Exception {
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {
            public void configure() {
                onException(NoSuchElementException.class).process(exchange -> {
                    System.out.println(exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class));
                });
 
                from(""timer://myTimer?period=2000"").
                    setBody()
                        .simple(""Trying to connect to localhost:12345"")
                    .to(""stream:out"")
                    .to(""netty4:tcp://localhost:12345?producerPoolMaxActive=4"");
            }
        });
        context.start();
        Thread.sleep(8000000);
    }
}
{code}

The producerPoolMaxActive is set to 4 to bring the error faster.

*The output in 2.17.3 just bellow (all work perfectly)*

_Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
...._

*But in version > 2.17.3, we've got this : *

_Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
Trying to connect to localhost:12345
java.util.NoSuchElementException: Pool exhausted
_

I've made a pull request to fix it.

Thanks for your help !","Same behaviour on : Linux, Windows 7, AIX
Using Intelli-J",dvor4x,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,Mon Nov 20 12:07:16 UTC 2017,,,,,,,,,,,"0|i3mzqn:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"20/Nov/17 10:18;githubbot;dvor4x opened a new pull request #2101: CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error
URL: https://github.com/apache/camel/pull/2101
 
 
   * Since 2.17.4, ChannelFuture was never release when a connection error occurs.
   https://issues.apache.org/jira/browse/CAMEL-12016

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/17 10:18;githubbot;GitHub user dvor4x opened a pull request:

    https://github.com/apache/camel/pull/2101

    CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error

    * Since 2.17.4, ChannelFuture was never release when a connection error occurs.
    https://issues.apache.org/jira/browse/CAMEL-12016

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dvor4x/camel bugfix/camelNetty4ReleaseChannelFutureOnConnectionError

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2101.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2101
    
----
commit 436cd46724b94406b0c83a2678b06577eced1b50
Author: dvor4x <dvor4x@hackerzvoice.net>
Date:   2017-11-18T13:54:54Z

    * Since 2.16.3, ChannelFuture was never release when a connection error occurs. The fact is, pool.borrowObject(); (L224) didn't throw connection exception anymore.

----
;;;","20/Nov/17 11:57;githubbot;oscerd closed pull request #2101: CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error
URL: https://github.com/apache/camel/pull/2101
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java
index a3756818233..cd3d12afcb2 100644
--- a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java
+++ b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java
@@ -642,6 +642,7 @@ public void operationComplete(ChannelFuture future) {
                 }
                 exchange.setException(cause);
                 callback.done(false);
+                releaseChannel(future);
                 return;
             }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/17 11:57;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2101
;;;","20/Nov/17 12:07;githubbot;oscerd commented on issue #2101: CAMEL-12016 : ChannelFuture is not clearly erased from the pool on connection error
URL: https://github.com/apache/camel/pull/2101#issuecomment-345677314
 
 
   Thanks for the PR. It has been merged on master and backported to 2.20.x, 2.19.x and 2.18.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy - Missing Headers from OneToMany Field,CAMEL-12009,13118413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,khaledalturkestani,khaledalturkestani,15/Nov/17 00:34,15/Nov/17 10:28,14/Jul/23 05:50,15/Nov/17 10:28,,,,,,2.19.5,2.20.2,2.21.0,,camel-bindy,,,,0,,,"When generating a CSV header, the code doesn't follow the @OneToMany field and thus doesn't print its fields in the header. For example, when marshalling a list of Orders (List<Order>) where the classes are the ones below: 
{code}
@CsvRecord(separator = "","", generateHeaderColumns = true)
public class Order {

    @DataField(pos = 1)
    private int orderNumber;

    @DataField(pos = 2)
    private String customerName;

    @OneToMany
    private List<OrderItem> items;
}
{code}
{code}
@CsvRecord(separator = "","", generateHeaderColumns = true)
public class OrderItem {

    @DataField(pos = 3)
    private String sku;

    @DataField(pos = 4)
    private int quantity;

    @DataField(pos = 5)
    private int unitPrice;
}
{code}

we get the following header:
+orderNumber,customerName+

when, instead, we should be getting the following header:
+orderNumber,customerName,sku,quantity,unitPrice+",,davsclaus,githubbot,khaledalturkestani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 15 10:28:17 UTC 2017,,,,,,,,,,,"0|i3mse7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/17 01:16;githubbot;khaledalturkestani opened a new pull request #2092: CAMEL-12009: Generate headers when OneToMany tag
URL: https://github.com/apache/camel/pull/2092
 
 
   Includes unit test

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Nov/17 01:16;githubbot;GitHub user khaledalturkestani opened a pull request:

    https://github.com/apache/camel/pull/2092

    CAMEL-12009: Generate headers when OneToMany tag

    Includes unit test

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/khaledalturkestani/camel CAMEL-12009-onetomany-css-header

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2092.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2092
    
----
commit 3c0240c6d01d688490d0a9a807d337e3a11dbc68
Author: Khaled AlTurkestani <khaled@ooma.com>
Date:   2017-11-15T01:16:57Z

    CAMEL-12009: Generate headers when OneToMany tag
    
    Includes unit test

----
;;;","15/Nov/17 01:17;khaledalturkestani;Created PR: https://github.com/apache/camel/pull/2092;;;","15/Nov/17 10:27;githubbot;davsclaus closed pull request #2092: CAMEL-12009: Generate headers when OneToMany tag
URL: https://github.com/apache/camel/pull/2092
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
index e57acd5fa1d..f0bc611708c 100644
--- a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
+++ b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
@@ -17,6 +17,8 @@
 package org.apache.camel.dataformat.bindy;
 
 import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 import java.text.NumberFormat;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -27,6 +29,7 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.dataformat.bindy.annotation.Link;
+import org.apache.camel.dataformat.bindy.annotation.OneToMany;
 import org.apache.camel.util.ObjectHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -93,6 +96,24 @@ private void loadModels(Class<?> root) {
                 
                 loadModels(field.getType());
             }
+
+            OneToMany oneToManyField = field.getAnnotation(OneToMany.class);
+
+            if (oneToManyField != null) {
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug(""Class (OneToMany) linked: {}, Field: {}"", field.getType(), field);
+                }
+
+                Type listType = field.getGenericType();
+                Type type = ((ParameterizedType) listType).getActualTypeArguments()[0];
+                Class clazz = (Class<?>)type;
+
+                models.add(clazz);
+                modelClassNames.add(clazz.getName());
+
+                loadModels(clazz);
+            }
+
         }
     }
 
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest.java
new file mode 100644
index 00000000000..5e360a489d1
--- /dev/null
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest.java
@@ -0,0 +1,96 @@
+package org.apache.camel.dataformat.bindy.csv;
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.LoggingLevel;
+import org.apache.camel.Produce;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.dataformat.bindy.model.simple.linkonetomany.Order;
+import org.apache.camel.dataformat.bindy.model.simple.linkonetomany.OrderItem;
+import org.apache.camel.processor.interceptor.Tracer;
+import org.junit.Test;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;
+
+import java.util.Arrays;
+import java.util.List;
+
+@ContextConfiguration
+public class BindyMarshalOneToManyWithHeadersTest extends AbstractJUnit4SpringContextTests {
+
+    private static final String URI_MOCK_RESULT = ""mock:result"";
+    private static final String URI_MOCK_ERROR = ""mock:error"";
+    private static final String URI_DIRECT_START = ""direct:start"";
+
+    private Order order;
+    private String expected;
+
+    @Produce(uri = URI_DIRECT_START)
+    private ProducerTemplate template;
+
+    @EndpointInject(uri = URI_MOCK_RESULT)
+    private MockEndpoint result;
+
+    @Test
+    @DirtiesContext
+    public void testMarshallMessage() throws Exception {
+
+        expected = ""orderNumber,customerName,sku,quantity,unitPrice\r\n"" +
+                ""11111,Joe Blow,abc,1,3\r\n"" +
+                ""11111,Joe Blow,cde,3,2\r\n"";
+
+        result.expectedBodiesReceived(expected);
+
+        template.sendBody(generateModel());
+
+        result.assertIsSatisfied();
+    }
+
+    public Order generateModel() {
+
+        Order order = new Order();
+        order.setCustomerName(""Joe Blow"");
+        order.setOrderNumber(11111);
+
+        OrderItem oi1 = new OrderItem();
+        oi1.setSku(""abc"");
+        oi1.setQuantity(1);
+        oi1.setUnitPrice(3);
+
+        OrderItem oi2 = new OrderItem();
+        oi2.setSku(""cde"");
+        oi2.setQuantity(3);
+        oi2.setUnitPrice(2);
+
+        List<OrderItem> orderList = Arrays.asList(oi1, oi2);
+        order.setItems(orderList);
+
+        return order;
+    }
+
+    public static class ContextConfig extends RouteBuilder {
+
+        public void configure() {
+
+            Tracer tracer = new Tracer();
+            tracer.setLogLevel(LoggingLevel.ERROR);
+            tracer.setLogName(""org.apache.camel.bindy"");
+
+            getContext().addInterceptStrategy(tracer);
+
+            BindyCsvDataFormat camelDataFormat = new BindyCsvDataFormat(Order.class);
+            camelDataFormat.setLocale(""en"");
+
+            // default should errors go to mock:error
+            errorHandler(deadLetterChannel(URI_MOCK_ERROR).redeliveryDelay(0));
+
+            onException(Exception.class).maximumRedeliveries(0).handled(true);
+
+            from(URI_DIRECT_START).marshal(camelDataFormat).to(URI_MOCK_RESULT);
+        }
+
+    }
+
+}
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/Order.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/Order.java
new file mode 100644
index 00000000000..c08ea09f5c3
--- /dev/null
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/Order.java
@@ -0,0 +1,44 @@
+package org.apache.camel.dataformat.bindy.model.simple.linkonetomany;
+
+import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
+import org.apache.camel.dataformat.bindy.annotation.DataField;
+import org.apache.camel.dataformat.bindy.annotation.OneToMany;
+
+import java.util.List;
+
+@CsvRecord(separator = "","", generateHeaderColumns = true)
+public class Order {
+
+    @DataField(pos = 1)
+    private int orderNumber;
+
+    @DataField(pos = 2)
+    private String customerName;
+
+    @OneToMany
+    private List<OrderItem> items;
+
+    public int getOrderNumber() {
+        return orderNumber;
+    }
+
+    public void setOrderNumber(int orderNumber) {
+        this.orderNumber = orderNumber;
+    }
+
+    public String getCustomerName() {
+        return customerName;
+    }
+
+    public void setCustomerName(String customerName) {
+        this.customerName = customerName;
+    }
+
+    public List<OrderItem> getItems() {
+        return items;
+    }
+
+    public void setItems(List<OrderItem> items) {
+        this.items = items;
+    }
+}
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/OrderItem.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/OrderItem.java
new file mode 100644
index 00000000000..e6d0b75b86d
--- /dev/null
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/linkonetomany/OrderItem.java
@@ -0,0 +1,41 @@
+package org.apache.camel.dataformat.bindy.model.simple.linkonetomany;
+
+import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
+import org.apache.camel.dataformat.bindy.annotation.DataField;
+
+@CsvRecord(separator = "","", generateHeaderColumns = true)
+public class OrderItem {
+
+    @DataField(pos = 3)
+    private String sku;
+
+    @DataField(pos = 4)
+    private int quantity;
+
+    @DataField(pos = 5)
+    private int unitPrice;
+
+    public String getSku() {
+        return sku;
+    }
+
+    public void setSku(String sku) {
+        this.sku = sku;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
+
+    public int getUnitPrice() {
+        return unitPrice;
+    }
+
+    public void setUnitPrice(int unitPrice) {
+        this.unitPrice = unitPrice;
+    }
+}
diff --git a/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest-context.xml b/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest-context.xml
new file mode 100644
index 00000000000..44680817291
--- /dev/null
+++ b/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyMarshalOneToManyWithHeadersTest-context.xml
@@ -0,0 +1,34 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+     http://www.springframework.org/schema/beans
+     http://www.springframework.org/schema/beans/spring-beans.xsd
+     http://camel.apache.org/schema/spring
+     http://camel.apache.org/schema/spring/camel-spring.xsd"">
+
+    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+        <routeBuilder ref=""myBuilder"" />
+    </camelContext>
+
+    <bean id=""myBuilder"" class=""org.apache.camel.dataformat.bindy.csv.BindyMarshalOneToManyWithHeadersTest$ContextConfig""/>
+
+</beans>
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Nov/17 10:27;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2092
;;;","15/Nov/17 10:28;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot create a component based on the SqlComponent,CAMEL-12001,13117329,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,kstam,kstam,09/Nov/17 16:52,10/Nov/17 08:44,14/Jul/23 05:50,10/Nov/17 08:44,2.20.0,,,,,2.20.1,2.21.0,,,camel-sql,,,,0,,,"I created a the following component

https://github.com/KurtStam/connectors/blob/sql-connector/connectors/sql/sql-connector/src/main/java/io/syndesis/connector/sql/SqlConnectorComponent.java

and this route just never gets executed

https://github.com/KurtStam/connectors/blob/sql-connector/connectors/sql/sql-connector/src/test/java/io/syndesis/connector/sql/SqlConnectorComponentTest.java#L107

And not any of the getBefore/AfterProducer methods are called either, which I think had to do with the fact that the SqlComponent is not a DefaultComponent.

I tried with v2.20.0 as well as v2.21.0-SNAPSHOT",any,gzurowski,kstam,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 10 08:44:19 UTC 2017,,,,,,,,,,,"0|i3mlq7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Nov/17 05:52;lb;[~gzurowski] any chance to recut 2.20.1 so it includes this one ?;;;","10/Nov/17 08:30;gzurowski;@[~lb]: Sure, not a problem.  I will cut another RC for 2.20.1 after this issue is resolved.;;;","10/Nov/17 08:44;lb;[~gzurowski] thx, done;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot create queue/message for Azure,CAMEL-11999,13117192,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,09/Nov/17 06:41,13/Nov/17 14:10,14/Jul/23 05:50,10/Nov/17 08:11,2.20.0,,,,,2.20.1,2.21.0,,,camel-azure,,,,0,,,"The Azure Storage Queue API may have changed unnoticed since the component was incepted. 
Currently it is broken in multiple places.

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1819",,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 13 14:10:33 UTC 2017,,,,,,,,,,,"0|i3mkvr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Nov/17 08:40;githubbot;tdiesler opened a new pull request #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Nov/17 08:40;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2087

    [CAMEL-11999] Cannot create queue/message for Azure

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11999

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2087.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2087
    
----
commit 517be1c23e3b5a9c00182953357d921a34df6d2a
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-11-09T05:55:27Z

    [CAMEL-11999] Cannot create queue/message for Azure

----
;;;","10/Nov/17 07:09;githubbot;oscerd commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343392201
 
 
   @davsclaus can we pull this one in 2.20.x before the 2.20.1 cut or do we have to wait?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Nov/17 07:29;githubbot;davsclaus commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343395613
 
 
   @onders86 +1 to backport

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Nov/17 07:37;githubbot;davsclaus commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343396880
 
 
   Also seems like you need to fix checkstyle

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Nov/17 08:11;githubbot;oscerd commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343404194
 
 
   Thanks for the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Nov/17 08:11;githubbot;oscerd closed pull request #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-azure/pom.xml b/components/camel-azure/pom.xml
index d8e94daca95..1e7c7aacdb1 100644
--- a/components/camel-azure/pom.xml
+++ b/components/camel-azure/pom.xml
@@ -62,6 +62,11 @@
       <artifactId>camel-test-spring</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+        <groupId>org.slf4j</groupId>
+        <artifactId>slf4j-log4j12</artifactId>
+        <scope>test</scope>
+    </dependency>
   </dependencies>
 
 </project>
diff --git a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java
index 42bd47df930..572989c6333 100644
--- a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java
+++ b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceComponent.java
@@ -42,15 +42,20 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
         if (remaining != null) {
             parts = remaining.split(""/""); 
         }
-        if (parts == null || parts.length < 2) {
-            throw new IllegalArgumentException(""The account and queue names must be specified."");
-        }
-        if (parts.length > 2) {
+        if (parts == null || parts.length < 1) 
+            throw new IllegalArgumentException(""The account name must be specified."");
+
+        QueueServiceOperations operation = configuration.getOperation();
+        if (operation != null && operation != QueueServiceOperations.listQueues && parts.length < 2) 
+            throw new IllegalArgumentException(""The queue name must be specified."");
+
+        if (parts.length > 2) 
             throw new IllegalArgumentException(""Only the account and queue names must be specified."");
-        }
         
         configuration.setAccountName(parts[0]);
-        configuration.setQueueName(parts[1]);
+        
+        if (parts.length > 1)
+            configuration.setQueueName(parts[1]);
         
         checkCredentials(configuration);
         
diff --git a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java
index e85cd2c029f..699e013762c 100644
--- a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java
+++ b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceConfiguration.java
@@ -16,11 +16,12 @@
  */
 package org.apache.camel.component.azure.queue;
 
-import com.microsoft.azure.storage.queue.CloudQueue;
 import org.apache.camel.component.azure.common.AbstractConfiguration;
 import org.apache.camel.spi.UriParam;
 import org.apache.camel.spi.UriParams;
 
+import com.microsoft.azure.storage.queue.CloudQueue;
+
 @UriParams
 public class QueueServiceConfiguration extends AbstractConfiguration {
 
diff --git a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java
index 6f094184cfd..9669dbe762c 100644
--- a/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java
+++ b/components/camel-azure/src/main/java/org/apache/camel/component/azure/queue/QueueServiceUtil.java
@@ -31,19 +31,12 @@ private QueueServiceUtil() {
     }
     
     public static URI prepareStorageQueueUri(QueueServiceConfiguration cfg) {
-        return prepareStorageQueueUri(cfg, true);
-    }
-
-    public static URI prepareStorageQueueUri(QueueServiceConfiguration cfg, boolean isForMessages) {
         StringBuilder uriBuilder = new StringBuilder();
         uriBuilder.append(""https://"")
             .append(cfg.getAccountName())
             .append(QueueServiceConstants.SERVICE_URI_SEGMENT)
-            .append(""/"")
-            .append(cfg.getQueueName());
-        if (isForMessages) {
-            uriBuilder.append(""/messages"");
-        }
+            .append(""/"" + cfg.getQueueName());
+        
         return URI.create(uriBuilder.toString());
     }
     
@@ -73,7 +66,9 @@ public static StorageCredentials getAccountCredentials(QueueServiceConfiguration
     public static void retrieveMessage(Exchange exchange, QueueServiceConfiguration cfg) throws Exception {
         CloudQueue client = createQueueClient(cfg);
         QueueServiceRequestOptions opts = getRequestOptions(exchange);  
-        CloudQueueMessage message = client.retrieveMessage(cfg.getMessageVisibilityDelay(),
+        int visibilityTimeout = cfg.getMessageVisibilityDelay();
+        visibilityTimeout = visibilityTimeout != 0 ? visibilityTimeout : 30;
+        CloudQueueMessage message = client.retrieveMessage(visibilityTimeout,
                                opts.getRequestOpts(), opts.getOpContext());
         ExchangeUtil.getMessageForResponse(exchange).setBody(message);
     }
diff --git a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java
index ac3e3c165d5..111812d03d9 100644
--- a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java
+++ b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceComponentConfigurationTest.java
@@ -136,10 +136,10 @@ public void testTooManyPathSegments() throws Exception {
     public void testTooFewPathSegments() throws Exception {
         QueueServiceComponent component = new QueueServiceComponent(context);
         try {
-            component.createEndpoint(""azure-queue://camelazure"");
+            component.createEndpoint(""azure-queue://camelazure?operation=addMessage"");
             fail();
         } catch (IllegalArgumentException ex) {
-            assertEquals(""The account and queue names must be specified."", ex.getMessage());
+            assertEquals(""The queue name must be specified."", ex.getMessage());
         }
     }
     
diff --git a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceProducerTest.java b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceProducerTest.java
new file mode 100644
index 00000000000..bc3107f80a6
--- /dev/null
+++ b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceProducerTest.java
@@ -0,0 +1,116 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.azure.queue;
+
+import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.Properties;
+
+import javax.naming.Context;
+import javax.naming.InitialContext;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.impl.DefaultCamelContext;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Assert;
+import org.junit.Assume;
+import org.junit.Test;
+
+import com.microsoft.azure.storage.OperationContext;
+import com.microsoft.azure.storage.StorageCredentials;
+import com.microsoft.azure.storage.StorageCredentialsAccountAndKey;
+import com.microsoft.azure.storage.queue.CloudQueue;
+import com.microsoft.azure.storage.queue.CloudQueueMessage;
+
+public class QueueServiceProducerTest {
+
+    private static final String AZURE_STORAGE_QUEUE = ""AZURE_STORAGE_QUEUE"";
+
+    @Test
+    public void testAppendQueue() throws Exception {
+
+        StorageCredentials creds = getStorageCredentials(""camelqueue"", System.getenv(AZURE_STORAGE_QUEUE));
+        Assume.assumeNotNull(""Credentials not null"", creds);
+
+        OperationContext.setLoggingEnabledByDefault(true);
+        
+        CamelContext camelctx = createCamelContext(creds);
+        camelctx.addRoutes(new RouteBuilder() {
+            public void configure() throws Exception {
+                from(""direct:createQueue"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=createQueue"");
+
+                from(""direct:listQueues"")
+                .to(""azure-queue://camelqueue?credentials=#creds&operation=listQueues"");
+
+                from(""direct:deleteQueue"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=deleteQueue"");
+
+                from(""direct:addMessage"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=addMessage"");
+
+                from(""direct:retrieveMessage"")
+                .to(""azure-queue://camelqueue/queue1?credentials=#creds&operation=retrieveMessage"");
+            }
+        });
+
+        camelctx.start();
+        try {
+            ProducerTemplate producer = camelctx.createProducerTemplate();
+            
+            Iterator<?> it = producer.requestBody(""direct:listQueues"", null, Iterable.class).iterator();
+            Assert.assertFalse(""No more queues"", it.hasNext());
+
+            producer.sendBody(""direct:addMessage"", ""SomeMsg"");
+            
+            it = producer.requestBody(""direct:listQueues"", null, Iterable.class).iterator();
+            Assert.assertTrue(""Has queues"", it.hasNext());
+            CloudQueue queue = (CloudQueue) it.next();
+            Assert.assertEquals(""queue1"", queue.getName());
+            Assert.assertFalse(""No more queues"", it.hasNext());
+            
+            try {
+                CloudQueueMessage msg = producer.requestBody(""direct:retrieveMessage"", null, CloudQueueMessage.class);
+                Assert.assertNotNull(""Retrieve a message"", msg);
+                Assert.assertEquals(""SomeMsg"", msg.getMessageContentAsString());
+            } finally {
+                queue.delete();
+            }
+            
+        } finally {
+            camelctx.stop();
+        }
+    }
+
+    private StorageCredentials getStorageCredentials(String account, String key) {
+        return key != null ? new StorageCredentialsAccountAndKey(account, key) : null;
+    }
+
+    private CamelContext createCamelContext(StorageCredentials credentials) throws Exception {
+        JndiRegistry registry = new JndiRegistry(createJndiContext());
+        registry.bind(""creds"", credentials);
+        return new DefaultCamelContext(registry);
+    }
+
+    private Context createJndiContext() throws Exception {
+        Properties properties = new Properties();
+        properties.put(""java.naming.factory.initial"", ""org.apache.camel.util.jndi.CamelInitialContextFactory"");
+        return new InitialContext(new Hashtable<Object, Object>(properties));
+    }
+}
\ No newline at end of file
diff --git a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java
index 40bf2a4d0f2..85a7216433f 100644
--- a/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java
+++ b/components/camel-azure/src/test/java/org/apache/camel/component/azure/queue/QueueServiceUtilTest.java
@@ -32,42 +32,34 @@
     @Test
     public void testPrepareUri() throws Exception {
         registerCredentials();
-        
+
         QueueServiceComponent component = new QueueServiceComponent(context);
-        QueueServiceEndpoint endpoint = 
-            (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?credentials=#creds"");
-        URI uri = 
-            QueueServiceUtil.prepareStorageQueueUri(endpoint.getConfiguration());
-        assertEquals(""https://camelazure.queue.core.windows.net/testqueue/messages"", uri.toString());
+        QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?credentials=#creds"");
+        URI uri = QueueServiceUtil.prepareStorageQueueUri(endpoint.getConfiguration());
+        assertEquals(""https://camelazure.queue.core.windows.net/testqueue"", uri.toString());
     }
 
     @Test
     public void testGetConfiguredClient() throws Exception {
-        CloudQueue client = 
-            new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue/messages""),
-                           newAccountKeyCredentials());
-        
+        CloudQueue client = new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue""), newAccountKeyCredentials());
         JndiRegistry registry = (JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry();
         registry.bind(""azureQueueClient"", client);
-        
+
         QueueServiceComponent component = new QueueServiceComponent(context);
-        QueueServiceEndpoint endpoint = 
-            (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?azureQueueClient=#azureQueueClient"");
+        QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue?azureQueueClient=#azureQueueClient"");
         assertSame(client, QueueServiceUtil.getConfiguredClient(endpoint.getConfiguration()));
     }
+
     @Test
     public void testGetConfiguredClientUriMismatch() throws Exception {
-        CloudQueue client = 
-            new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue""),
-                           newAccountKeyCredentials());
-        
+        CloudQueue client = new CloudQueue(URI.create(""https://camelazure.queue.core.windows.net/testqueue""), newAccountKeyCredentials());
+
         JndiRegistry registry = (JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry();
         registry.bind(""azureQueueClient"", client);
-        
+
         QueueServiceComponent component = new QueueServiceComponent(context);
-        QueueServiceEndpoint endpoint = 
-            (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue2?azureQueueClient=#azureQueueClient"");
-        
+        QueueServiceEndpoint endpoint = (QueueServiceEndpoint) component.createEndpoint(""azure-queue://camelazure/testqueue2?azureQueueClient=#azureQueueClient"");
+
         try {
             QueueServiceUtil.getConfiguredClient(endpoint.getConfiguration());
             fail();
@@ -82,7 +74,6 @@ private void registerCredentials() {
     }
 
     private StorageCredentials newAccountKeyCredentials() {
-        return new StorageCredentialsAccountAndKey(""camelazure"", 
-                                                   Base64.encode(""key"".getBytes()));
+        return new StorageCredentialsAccountAndKey(""camelazure"", Base64.encode(""key"".getBytes()));
     }
 }
diff --git a/components/camel-azure/src/test/resources/log4j.properties b/components/camel-azure/src/test/resources/log4j.properties
new file mode 100644
index 00000000000..6b2698af632
--- /dev/null
+++ b/components/camel-azure/src/test/resources/log4j.properties
@@ -0,0 +1,36 @@
+###
+# #%L
+# Wildfly Camel :: Testsuite
+# %%
+# Copyright (C) 2013 - 2014 RedHat
+# %%
+# Licensed under the Apache License, Version 2.0 (the ""License"");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#      http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# #L%
+###
+
+# Root logger option
+log4j.rootLogger=DEBUG, file, console
+ 
+# Direct log messages to a log file
+log4j.appender.file=org.apache.log4j.FileAppender
+log4j.appender.file.file=target/test.log
+log4j.appender.file.layout=org.apache.log4j.PatternLayout
+log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] (%t) - %m%n
+log4j.appender.file.threshold=DEBUG
+ 
+# Direct log messages to console
+log4j.appender.console=org.apache.log4j.ConsoleAppender
+log4j.appender.console.target=System.out
+log4j.appender.console.layout=org.apache.log4j.PatternLayout
+log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] (%t) - %m%n
+log4j.appender.console.threshold=WARN


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Nov/17 08:11;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2087
;;;","13/Nov/17 13:40;githubbot;onders86 commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343921649
 
 
   @davsclaus i guess i missed your message. I will cherry-pick. Thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 14:10;githubbot;oscerd commented on issue #2087: [CAMEL-11999] Cannot create queue/message for Azure
URL: https://github.com/apache/camel/pull/2087#issuecomment-343929732
 
 
   I guess the message was for me. I already cherry picked and backported. Thanks @onders86 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
RabbitConsumer could hang when RabbitMQ connection is lost and autoAck=false.,CAMEL-11996,13116710,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmongard,jmongard,07/Nov/17 15:33,02/Feb/18 08:53,14/Jul/23 05:50,02/Feb/18 08:53,2.18.0,2.19.0,2.20.0,,,2.19.5,2.20.3,2.21.0,,camel-rabbitmq,,,,0,,,"When the connection is lost to a RabbitMQ server and later restored there is the possibility that the RabbitConsumer hangs. The only way around this that I found is to restart my application. 

I have experienced this problem in my testing environment running camel 2.18.3 where my RabbitMQ installation is not stable causing every consumer thread to hang on _lock.acquire()_ .

The problem has been introduced in version 2.18.0 commit 7ee0977c9f5c327a95122f5b80202dc5dd872e40
A possible fix could be to include the statement _if (!channel.isOpen()) return;_ in the try-finally block below it.



{code:title=JUnit test}
package org.apache.camel.component.rabbitmq;

import org.junit.Test;
import org.mockito.Mockito;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;

public class RabbitConsumerTest {
  private RabbitMQConsumer consumer = Mockito.mock(RabbitMQConsumer.class);
  private RabbitMQEndpoint endpoint = Mockito.mock(RabbitMQEndpoint.class);
  private Connection conn = Mockito.mock(Connection.class);
  private Channel channel = Mockito.mock(Channel.class);
     
  @Test(timeout=5000)
  public void testHandleDelivery_ShouldNotHangForeverIfChanelWasClosed() throws Exception {  
    Mockito.when(consumer.getEndpoint()).thenReturn(endpoint);  
    Mockito.when(consumer.getConnection()).thenReturn(conn);
    Mockito.when(conn.createChannel()).thenReturn(channel);
    Mockito.when(channel.isOpen()).thenReturn(false).thenReturn(true);
    
    RabbitConsumer rabbitConsumer = new RabbitConsumer(consumer);
    
    rabbitConsumer.handleDelivery(null, null, null, null);
    rabbitConsumer.handleDelivery(null, null, null, null);
    rabbitConsumer.stop();
  }
}
{code}",,davsclaus,jisikoff,jmongard,ricardozanini,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11480,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 02 08:46:50 UTC 2018,,,,,,,,,,,"0|i3mhx3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Nov/17 15:45;davsclaus;You are welcome to provide a fix as github PR if you want to try doing that
http://camel.apache.org/contributing;;;","12/Jan/18 08:43;davsclaus;Can you try with latest code from master or 2.20.1 release as we have had some fixes to this component;;;","02/Feb/18 08:46;davsclaus;Thanks I reproduced the issue with your unit test and have a fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
connectors : alias scheme is not used by the connector component,CAMEL-11992,13116020,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,lb,lb,lb,03/Nov/17 18:01,03/Nov/17 22:59,14/Jul/23 05:50,03/Nov/17 22:59,,,,,,2.20.1,2.21.0,,,camel-connector,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-11-03 18:01:57.0,,,,,,,,,,,"0|i3mdof:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Problem with latest Spring Boot 1.5.8,CAMEL-11988,13115870,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Nov/17 09:37,03/Nov/17 09:38,14/Jul/23 05:50,03/Nov/17 09:38,2.20.0,,,,,2.20.1,2.21.0,,,camel-jetty,,,,0,,,"See user forum
http://camel.465427.n5.nabble.com/camel-jetty-and-jetty-version-9-4-7-v20170914-td5814774.html

Also it causes camel-ribbon-starter tests to fail",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-11-03 09:37:27.0,,,,,,,,,,,"0|i3mcr3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-SalesForce DTO Issue while using camel-salesforce-maven,CAMEL-11987,13115814,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,zregvart,srinivasks22,srinivasks22,03/Nov/17 02:58,13/Nov/17 20:58,14/Jul/23 05:50,06/Nov/17 10:23,2.17.7,2.20.0,,,,2.21.0,,,,camel-salesforce,,,,0,,,"I'm trying to connect to our private salesforce cloud using camel and trying to generate DTO's using the camel-salesforce-maven. It connects well and it shows that there are about 627 objects found. Then while trying to generate the java classes it throws the exception as below. I'm using the below command and I've tried with the 2.18. 2.19 and 2.20 versions but I see this consistent error across all the versions. 

mvn camel-salesforce:generate -DcamelSalesforce.clientId=<clientId> -DcamelSalesforce.clientSecret=<scret>-DcamelSalesforce.userName=<username> -DcamelSalesforce.password=<password> -DcamelSalesforce.loginUrl=<loginUrl> -DcamelSalesforce.version=41.0
[INFO] Scanning for projects...
[WARNING] The POM for org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.eclipse.m2e:lifecycle-mapping:1.0.0: Plugin org.eclipse.m2e:lifecycle-mapping:1.0.0 or one of its dependencies could not be resolved: Failure to find org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[WARNING] The POM for org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version}: Plugin org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version} or one of its dependencies could not be resolved: Failure to find org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Salesforce :: Maven plugin 2.17.8-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[WARNING] The POM for org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.eclipse.m2e:lifecycle-mapping:1.0.0: Plugin org.eclipse.m2e:lifecycle-mapping:1.0.0 or one of its dependencies could not be resolved: Failure to find org.eclipse.m2e:lifecycle-mapping:jar:1.0.0 in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[WARNING] The POM for org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} is missing, no dependency information available
[WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version}: Plugin org.apache.maven.plugins:maven-surefire-plugin:{maven-surefire-plugin-version} or one of its dependencies could not be resolved: Failure to find org.apache.maven.plugins:maven-surefire-plugin:jar:{maven-surefire-plugin-version} in https://maven.repository.redhat.com/techpreview/all/ was cached in the local repository, resolution will not be reattempted until the update interval of redhat-techpreview-all-repository has elapsed or updates are forced
[INFO] 
[INFO] --- camel-salesforce-maven-plugin:2.18.1.redhat-000021:generate (default-cli) @ camel-salesforce-maven-plugin ---
ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'org.apache.logging.log4j.simplelog.StatusLogger.level' to TRACE to show Log4j2 internal initialization logging.
[INFO] Logging initialized @3646ms
[INFO] Available providers: SUN version 1.8.
[INFO] Salesforce login...
[INFO] Login user <ouruserid> at Salesforce loginUrl: https://<our-private-url>/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[WARNING] Generating Java classes for all 627 Objects, this may take a while...
[INFO] Retrieving Object descriptions...
[INFO] Generating Java Classes...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:34 min
[INFO] Finished at: 2017-11-02T22:22:41-04:00
[INFO] Final Memory: 42M/594M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.18.1.redhat-000021:generate (default-cli) on project camel-salesforce-maven-plugin: Error creating EntityParticle.java: Invocation of method 'getFieldType' in  class org.apache.camel.maven.CamelSalesforceMojo$GeneratorUtility threw exception org.apache.maven.plugin.MojoExecutionException: Unsupported type urn:RelationshipReferenceTo for field ReferenceTo at /sobject-pojo.vm[line 77, column 30] -> [Help 1]",,davsclaus,srinivasks22,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 13 20:58:57 UTC 2017,,,,,,,,,,,"0|i3mcen:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Nov/17 06:40;davsclaus;Ask for help first on the user mailing list, or glitter chat, or stack overflow etc;;;","05/Nov/17 23:09;srinivasks22;As per your suggestion, I've posted on various communities. I couldn't find any response or help yet.;;;","06/Nov/17 09:39;zregvart;The Camel Salesforce Maven plugin seems to be missing a type mapping for {{urn:RelationshipReferenceTo}} I think as a first step we can block this property from being considered for DTO generation similar to {{PicklistValues}} and {{ChildRelationships}} currently.

I'll make this modification, in the meantime [~srinvas] perhaps you could run the plugin excluding {{EntityParticle}} SObject from DTO generation, see {{excludePattern}} in the [documentation|https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/docs/salesforce-component.adoc#camel-salesforce-maven-plugin].;;;","06/Nov/17 09:39;zregvart;Let's add {{RelationshipReferenceTo}} to blocked properties.;;;","06/Nov/17 10:23;zregvart;When testing I found a number of other field types that could cause a similar error and decided that it would be better to warn about those properties instead of not generating the DTOs. Now the Salesforce Maven plugin will display warnings when an unknown type is encountered:

{code}
[WARNING] Unsupported field type urn:SearchLayoutFieldsDisplayed in field FieldsDisplayed of object SearchLayout
[WARNING] Unsupported field type urn:SearchLayoutButtonsDisplayed in field ButtonsDisplayed of object SearchLayout
[WARNING] Unsupported field type urn:JunctionIdListNames in field JunctionIdListNames of object RelationshipInfo
[WARNING] Unsupported field type urn:RecordTypesSupported in field RecordTypesSupported of object EntityDefinition
[WARNING] Unsupported field type urn:JunctionIdListNames in field JunctionIdListNames of object RelationshipDomain
{code}
;;;","06/Nov/17 12:02;srinivasks22;Thank you Zoran for your updates. Can I take the latest 2.21.0-SNAPSHOT and test this out since the release is not yet out?;;;","06/Nov/17 18:51;zregvart;Yes [~srinivasks22] it should be in the latest 2.21.0-SNAPSHOT, keep in mind that the DTOs generated with the latest Maven plugin might not work with an older version of Camel. IIRC in 2.19 we redesigned the class hierarchy of DTOs and older versions simply don't have the new base class.;;;","09/Nov/17 03:49;srinivasks22;Hi Xoran, I just tried again and I see the below error:

ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'log4j2.debug' to show Log4j2 internal initialization logging.
[INFO] Logging initialized @21808ms
[INFO] Available providers: SUN version 1.8.
[INFO] Salesforce login...
[INFO] Login at Salesforce loginUrl: https://<sampleurl>/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23.772 s
[INFO] Finished at: 2017-11-08T22:48:28-05:00
[INFO] Final Memory: 38M/407M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate (default-cli) on project camel-salesforce-maven-plugin: Error getting global Objects: {errors:[{""errorCode"":""NOT_FOUND"",""message"":""The requested resource does not exist""}],statusCode:404} -> [Help 1];;;","09/Nov/17 04:15;srinivasks22;Hi Zoran,

   Kindly ignore the above stack trace. Please find the latest stack trace as below:


[INFO] --- camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate (default-cli) @ camel-salesforce-maven-plugin ---
ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'log4j2.debug' to show Log4j2 internal initialization logging.
[INFO] Logging initialized @2421ms
[INFO] Available providers: SUN version 1.8.
[INFO] Salesforce login...
[INFO] Login at Salesforce loginUrl: https://<sampleURL>/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[WARNING] Generating Java classes for all 627 Objects, this may take a while...
[INFO] Retrieving Object descriptions...
[INFO] Generating Java Classes...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:22 min
[INFO] Finished at: 2017-11-08T23:15:10-05:00
[INFO] Final Memory: 40M/664M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate (default-cli) on project camel-salesforce-maven-plugin: Execution default-cli of goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.20.0.fuse-000120-redhat-1:generate failed: Invocation of method 'getFieldType' in  class org.apache.camel.maven.CamelSalesforceMojo$GeneratorUtility threw exception org.apache.maven.plugin.MojoExecutionException: Unsupported type urn:RelationshipReferenceTo for field ReferenceTo at /sobject-pojo.vm[line 80, column 30] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException

Thanks;;;","09/Nov/17 10:01;zregvart;[~srinivasks22] you seem to be using version {{2.20.0.fuse-000120-redhat-1}} this is not something we can support at the Apache, you need to contact RedHat support for that. This was fixed in version 2.21 that you can use by running {{mvn org.apache.camel.maven:camel-salesforce-maven-plugin:2.21.0-SNAPSHOT:generate ...}}.;;;","13/Nov/17 20:58;srinivasks22;Sorry I was on vacation and coul;dn't get to this until this point. I checked right now and it did generated all the classes. 

Thank you, I'll use these classes and will let you know if I run into any issues.;;;",,,,,,,,,,,,,,,,,,,,,,
HTTP4 Producer for TLS schemes transforms endpoint URI to `http4s`,CAMEL-11986,13115720,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,zregvart,zregvart,02/Nov/17 19:11,03/Nov/17 15:42,14/Jul/23 05:50,02/Nov/17 19:20,,,,,,2.19.5,2.20.1,2.21.0,,camel-http4,,,,0,,,"The {{createProducer}} method of HTTP4 component replaces {{""http""}} with {{""http4""}} to form endpoint URI that suits only non-TLS URLs, as {{""http4s""}} is since CAMEL-11575 no longer valid.",,davsclaus,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 03 15:42:12 UTC 2017,,,,,,,,,,,"0|i3mbtr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/17 19:20;zregvart;[~davsclaus], [~ancosen] do you think this needs to be backported to other branches?;;;","02/Nov/17 19:27;davsclaus;Yeah looks like 2.19.x and 2.20.x as well.;;;","02/Nov/17 19:53;zregvart;I've cherry-picked this into current 2.19.x and 2.20.x, I don't think it's a huge issue to stop the release of 2.19.4, if anyone needs this it should be easy to use 2.20.1 also.;;;","03/Nov/17 15:42;zregvart;And if anyone finds this issue and needs a workaround this should work:

{code:java}
camelContext.addComponent(""http4s"", camelContext.getComponent(""https4""));
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XsltAggregationStrategy thread safety during initialization,CAMEL-11983,13115634,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,salagator,salagator,02/Nov/17 14:08,02/Nov/17 18:13,14/Jul/23 05:50,02/Nov/17 18:13,2.20.0,,,,,2.19.5,2.20.1,2.21.0,,camel-xslt,,,,0,thread-safety,,"It seems that there is a race condition in the XsltAggregatorStrategy. The following code:

{code:java}

if (xslt == null) {
    initialize(oldExchange.getContext());
}
...
xslt.process(oldExchange);

{code}

means that potentially one thread might be still working on the initialize call while another thread passes through the gate of the if statement and executes the xslt.process() call. If the initialization is not quite complete, the XsltBuilder will throw an exception complaining that the template has not been set.

I have written a small Spring Boot project (which I am attaching to this Jira issue) that demonstrates this. I understand that this only happens when parallelization is present during the xslt member initialization above, and that it sorts itself out in subsequent calls, but I have managed to see this during testing, so it is not that impossible for it to happen.","Apache Camel 2.17 on EAP Fuse 6.4.0
Apache Camel 2.20 on Spring Boot standalone",davsclaus,salagator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11984,,,"02/Nov/17 14:11;salagator;reentrancy.zip;https://issues.apache.org/jira/secure/attachment/12895415/reentrancy.zip",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 15:46:47 UTC 2017,,,,,,,,,,,"0|i3mban:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/17 14:11;salagator;sample project to demonstrate the problem;;;","02/Nov/17 14:13;salagator;Stack trace thrown when the race condition occurs:
{{
2017-11-02 15:38:58.181 ERROR 2709 --- [TaskExecutor-14] .a.i.SimpleAsyncUncaughtExceptionHandler : Unexpected error occurred invoking async method 'public void com.example.demo.DoSomethingService.doSomething(int)'.

org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-Pafsaniass-MacBook-Pro-local-1509629927258-0-3]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1847) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:713) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:163) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:168) ~[camel-core-2.20.0.jar:2.20.0]
	at com.example.demo.DoSomethingService.doSomething(DoSomethingService.java:20) ~[classes/:na]
	at com.example.demo.DoSomethingService$$FastClassBySpringCGLIB$$42aeb0a0.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738) ~[spring-aop-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor$1.call(AsyncExecutionInterceptor.java:115) ~[spring-aop-4.3.12.RELEASE.jar:4.3.12.RELEASE]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_121]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]
Caused by: java.lang.IllegalArgumentException: template must be specified
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:323) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:100) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.util.toolbox.XsltAggregationStrategy.aggregate(XsltAggregationStrategy.java:107) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.Enricher.process(Enricher.java:266) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144) ~[camel-core-2.20.0.jar:2.20.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161) ~[camel-core-2.20.0.jar:2.20.0]
	... 9 common frames omitted}};;;","02/Nov/17 15:46;davsclaus;You can call the initialize(camelContext) method on the agg strategy yourself, for example from the route builder class, to avoid this issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PushTopic client doesn't clear refresh token after a long disconnected period,CAMEL-11980,13115590,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,mabroukb,mabroukb,02/Nov/17 11:00,02/Nov/17 15:19,14/Jul/23 05:50,02/Nov/17 15:19,2.19.0,,,,,2.19.5,2.20.1,2.21.0,,camel-salesforce,,,,0,reliability,,"The bayeux client implements a mechanism to reconnect to salesforce's pushtopic after a network failure.

In production, we experienced a lost of network connection. Bayeux client tried to reconnect and failed to.
when analyzing, we saw a bunch of logs  

o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 0 msecs 
[skipped...]
o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 5000 msecs 
[skipped...]
o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 24000 msecs 
[skipped...]
o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: Error during HANDSHAKE: 403::Handshake denied org.apache.camel.CamelException: Error during HANDSHAKE: 403::Handshake denied
o.a.c.c.s.i.s.SubscriptionHelper : Failed to restart after pausing for 30000 msecs 

o.a.c.c.s.SalesforceConsumer : Aborting restart attempt due to: Error during HANDSHAKE: 403::Handshake denied. Caused by: [org.apache.camel.component.salesforce.api.SalesforceException - Aborting restart attempt due to: Error during HANDSHAKE: 403::Handshake denied] org.apache.camel.component.salesforce.api.SalesforceException: Aborting restart attempt due to: Error during HANDSHAKE: 403::Handshake denied
then the stacktrace.


When going deeped in analyzing, we figure out that Salesforce, after such a loss of network, can answer by a 401 code (subscription to channel is not valid anymore)  and in some circumstances by a 403 code (authentication is not valid anymore - the refresh token has been invalidated by salesforce).

401 code implies that the client reissue a login with same refreshToken.
403 code implies that the client reissue a new login phase ( thus invalidating the previous refreshToken).


401 code is already handled by SubscriptionHelper, while 403 is not.
see the doStart() method after the handshakeError test
",Salesforce API version 41.0 (we don't know if this affect other API versions),davsclaus,githubbot,mabroukb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 15:10:54 UTC 2017,,,,,,,,,,,"0|i3mb0v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/17 12:24;davsclaus;Thanks for reporting. Would you be able to work on a github PR that fixes this and includes 403 as well.;;;","02/Nov/17 14:32;githubbot;GitHub user mabroukb opened a pull request:

    https://github.com/apache/camel/pull/2074

    clearing salesforce session when bayeux client receive 403 

    clearing salesforce session when bayeux client receive 403 
    https://issues.apache.org/jira/browse/CAMEL-11980

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mabroukb/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2074.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2074
    
----
commit e7bd3962f16fe5e68304118cc8d717435d26217c
Author: Mabrouk Belhout <mabrouk.belhout@capgemini.com>
Date:   2017-11-02T13:49:23Z

    clearing salesforce session when bayeux client receive 403 (https://issues.apache.org/jira/browse/CAMEL-11980)

----
;;;","02/Nov/17 14:42;mabroukb;I proposed a PR.
can you check ?;;;","02/Nov/17 15:10;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2074
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MongoDB Tailable cursor consumer fails to stop on shutdown,CAMEL-11977,13115382,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Igorko,Igorko,01/Nov/17 15:17,12/Feb/18 11:23,14/Jul/23 05:50,12/Feb/18 10:54,2.20.0,,,,,2.20.3,2.21.0,,,camel-mongodb,camel-mongodb3,,,0,,,"MongoDB Tailable cursor consumer fails to stop on shutdown(when using Ctrl+C) if collection is not empty. Routes are described in xml file.

[Camel (...) thread #8 - ShutdownTask] INFO  o.a.c.c.m.MongoDbTailingProcess - Stopping MongoDB Tailable Cursor consumer, bound to collection: db: ..., col: ... 
[Camel (...) thread #8 - ShutdownTask] INFO  o.a.c.c.m.MongoDbTailingProcess - Going to wait for stopping

When collection is empty, all is ok and I see next line
[Camel (...) thread #8 - ShutdownTask] INFO  o.a.c.c.m.MongoDbTailingProcess - Stopped MongoDB Tailable Cursor consumer, bound to collection: db: ..., col: ...
","Windows 10, Java 1.8",acosentino,davsclaus,githubbot,Igorko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 12 11:23:52 UTC 2018,,,,,,,,,,,"0|i3m9qv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/17 12:25;davsclaus;You are welcome to try to work on a fix for this.;;;","02/Nov/17 16:24;githubbot;igorko opened a new pull request #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075
 
 
   cursor.hasNaxt() locks thread and waits for new object. Camel mongodb component uses loop to get new cursor objects, so we can just try if next is present without waiting for new object. tryNext() is what we need in this casre.
   
   According to mongoBD documentation:
   [](http://api.mongodb.com/java/current/com/mongodb/client/MongoCursor.html)
   tryNext() A special next() case that returns the next element in the iteration if available or null.
   
   So after exit hook injection. when java will call MongoDbTailingProcess.stop(), there will be no lock at  MongoDbTailingProcess.run(). so MongoDbTailingProcess instance will be stopped.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Nov/17 16:24;githubbot;GitHub user igorko opened a pull request:

    https://github.com/apache/camel/pull/2075

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

    cursor.hasNaxt() locks thread and waits for new object. Camel mongodb component uses loop to get new cursor objects, so we can just try if next is present without waiting for new object. tryNext() is what we need in this casre.
    
    According to mongoBD documentation:
    [](http://api.mongodb.com/java/current/com/mongodb/client/MongoCursor.html)
    tryNext() A special next() case that returns the next element in the iteration if available or null.
    
    So after exit hook injection. when java will call MongoDbTailingProcess.stop(), there will be no lock at  MongoDbTailingProcess.run(). so MongoDbTailingProcess instance will be stopped.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igorko/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2075.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2075
    
----
commit ba667d7aece178bf9e0d1c0cd69b2d1afd96cecd
Author: Igor Paliychuk <mansonigor@gmail.com>
Date:   2017-11-02T16:16:39Z

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

----
;;;","02/Nov/17 18:14;githubbot;davsclaus commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341512401
 
 
   Thanks do you mind look in camel-mongodb3 if it has the same bug?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 07:26;githubbot;davsclaus commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341636112
 
 
   Isn't this a problem if the while loop now with `tryNext` keeps returning false because there is no data, but its not being stopped, then the while loop keeps running, and calling `tryNext` again and again endlessly which could eat up CPU cycles. In other words is this code change not causing CPU burden when there is no data to retrieve but the while loop keeps running.
   
   Ideally Mongodb should have had a next with timeout, so you can timeout every second or so and then check if you should shutdown or not.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 10:10;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341663355
 
 
   If tryNext() will return null, execution will leave while loop. Does this answer your question?
   
   Mongodb3 has the same issue, yes

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 10:27;githubbot;davsclaus commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341666846
 
 
   Even so it leaves the method it goes back to run method, that then close the curors, and re-create it, which is expensive operations. eg in normal situation where you do NOT shutdown. 
   
   In other words we cannot do this because normal operation will suffer from CPU burning and endless cursors closing/re-creation

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 10:41;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341669680
 
 
   Lets add some timeout then, it will be better then deadlock.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 10:41;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341669680
 
 
   Lets add some configurable timeout then, it will be better then deadlock.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 14:26;githubbot;igorko commented on issue #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075#issuecomment-341718238
 
 
   I see that this bug had been found earlier https://issues.apache.org/jira/browse/CAMEL-9826 and fix was committed. But it has not fixed the issue. I will look into mongodb driver cursor logic.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 16:00;Igorko;I have found some info about this topic. Some time ago mongodb java driver team reworked hasNext() to wait for tailable cursors. https://jira.mongodb.org/browse/JAVA-1091 And added tryNext() to allow old behavior https://jira.mongodb.org/browse/JAVA-1255. As you see in current driver code 


{code:java}
    public boolean hasNext() {
        if (closed) {
            throw new IllegalStateException(""Cursor has been closed"");
        }

        if (nextBatch != null) {
            return true;
        }

        if (limitReached()) {
            return false;
        }

        while (serverCursor != null) {
            getMore();
            if (nextBatch != null) {
                return true;
            }
        }

        return false;
    }
{code}

hasNext() has infinite loop, which also is bad for performance, as in case we would use tryNext() and open/close cursor each time on camel side. I propose to request another ""is closed"" check inside loop before getMore() to mongodb driver team. Thjis should allow to exit from hasNext() when we will close cursor from another thread. If this solution sounds ok, I will request change on driver side.;;;","03/Nov/17 16:44;githubbot;igorko closed pull request #2075: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2075
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
index 6192949c8ef..d7018a72ccc 100644
--- a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
+++ b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
@@ -158,8 +158,8 @@ private void doRun() {
         boolean persistRegularly = persistRecords > 0;
         // while the cursor has more values, keepRunning is true and the cursorId is not 0, which symbolizes that the cursor is dead
         try {
-            while (cursor.hasNext() && keepRunning) { //cursor.getCursorId() != 0 &&
-                DBObject dbObj = cursor.next();
+            DBObject dbObj = null;
+            while ((dbObj = cursor.tryNext()) != null && keepRunning) { //cursor.getCursorId() != 0 &&
                 Exchange exchange = endpoint.createMongoDbExchange(dbObj);
                 try {
                     if (LOG.isTraceEnabled()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 16:44;githubbot;Github user igorko closed the pull request at:

    https://github.com/apache/camel/pull/2075
;;;","04/Nov/17 09:48;davsclaus;Yes this sounds good solution to have that improved in the mongodb-driver.;;;","13/Nov/17 11:18;Igorko;mongodb driver team applied fix to driver so when cursor closing was requested, hasNext will throw exception(instead of returning) https://jira.mongodb.org/browse/JAVA-2651 maybe this is better then returning, but for camel it is bad because camel cursor still doesn't want to stop. This time I think there should be made some fix(maybe try/catch) on camel side.;;;","13/Nov/17 11:54;githubbot;igorko opened a new pull request #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090
 
 
   Is it still possible to include this fix into v2.20.1. It would be very good if so.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 11:54;githubbot;GitHub user igorko opened a pull request:

    https://github.com/apache/camel/pull/2090

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

    Is it still possible to include this fix into v2.20.1. It would be very good if so.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igorko/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2090.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2090
    
----
commit 2923c85347f8ae03185d12a4b5c23a8978f2f020
Author: Igor Paliychuk <mansonigor@gmail.com>
Date:   2017-11-13T11:53:58Z

    CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown

----
;;;","13/Nov/17 12:05;githubbot;oscerd commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343899533
 
 
   No, 2.20.1 is alreay under vote after cut, it will be in 2.20.2. Thanks :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 12:09;githubbot;oscerd closed pull request #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
index 6192949c8ef..3030c2d4231 100644
--- a/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
+++ b/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java
@@ -180,6 +180,8 @@ private void doRun() {
             if (keepRunning) {
                 LOG.debug(""Cursor not found exception from MongoDB, will regenerate cursor. This is normal behaviour with tailable cursors."", e);
             }
+        } catch (IllegalStateException e) {
+            // do nothing
         }
 
         // the loop finished, persist the lastValue just in case we are shutting down


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 12:09;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2090
;;;","13/Nov/17 12:13;githubbot;oscerd commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901229
 
 
   Thanks for the PR. It has been merged on master and 2.20.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 12:14;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901339
 
 
   SHould I create another pull request for branch or no?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 12:14;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901339
 
 
   SHould I create another pull request for branch or no?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Nov/17 12:16;githubbot;oscerd commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-343901740
 
 
   No need for a PR on the other branch. We usually ask for PR on master and we cherry-pick commit on old branches.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Dec/17 13:50;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-352430701
 
 
   @oscerd Could you merge changes to 2.20.x ? I see that they are not present in branch.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Feb/18 09:43;githubbot;igorko commented on issue #2090: CAMEL-11977: MongoDB Tailable cursor consumer fails to stop on shutdown
URL: https://github.com/apache/camel/pull/2090#issuecomment-352430701
 
 
   @oscerd Could you merge changes to 2.20.x ? I see that they are not present in branch.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Feb/18 09:49;acosentino;It has been reverted here 

 

[https://github.com/apache/camel/commit/793062481d37b0da4d9890f9bd897cec76e0e2c0]

 

[~davsclaus] was it reverted because we were under release vote?;;;","12/Feb/18 10:17;Igorko;Second pull request (final) was not applied to 2.20.2 but defect is marked as fixed... Also fix is not present in 2.20.x Can anyone look into that?;;;","12/Feb/18 10:30;Igorko;Forgot to notice: first pull request was reverted, because it was bad code change. But second one (correct) was never applied. So I guess someone should just apply second patch to 2.20.x branch;;;","12/Feb/18 10:54;acosentino;On 2.20.x done here:

https://github.com/apache/camel/commit/8a9f5338229289e2ec4fd86a81bf1203a4eb61ad;;;","12/Feb/18 11:10;Igorko;Strange. Why it's not in 2.20.2 release then? Isn't 2.20.2 supposed to be forked from 2.20.x ?;;;","12/Feb/18 11:16;acosentino;It will be in 2.20.3 as you may see from the commit. I backported it today.;;;","12/Feb/18 11:23;Igorko;Now I see, I have looked only at commit date, not at backport date. Thanks!;;;"
Align pdfbox versions to 2.0.6,CAMEL-11976,13115373,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,ppalaga,ppalaga,ppalaga,01/Nov/17 14:44,02/Nov/17 12:09,14/Jul/23 05:50,02/Nov/17 12:09,,,,,,2.21.0,,,,,,,,0,,,"{{org.apache.pdfbox}} is currently used by the following components

* {{camel-fop}} uses {{org.apache.pdfbox:pdfbox}} 1.8.13
* {{camel-pdf}} uses {{org.apache.pdfbox:pdfbox}} 1.8.13
* {{camel-tika}} transitively depends on 
** {{org.apache.pdfbox:pdfbox}} 2.0.6
** {{org.apache.pdfbox:fontbox}} 2.0.6
** {{org.apache.pdfbox:pdfbox-tools}} 2.0.6
** {{org.apache.pdfbox:pdfbox-debugger}} 2.0.6
** and {{org.apache.pdfbox:jempbox}} 1.8.13 (!)

Because pdfbox 2.0 is not backwards compatible with 1.8 we are not able to add Tika to WildFly Camel, where we already have {{camel-pdf}} and {{camel-fop}}.

I propose to align all the above artifacts to 2.0.6, except for {{jempbox}} that has to stay on 1.8.13, because there is no {{jempbox}} in {{pdfbox}} 2.0.
",,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 12:09:58 UTC 2017,,,,,,,,,,,"0|i3m9ov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Nov/17 14:55;githubbot;ppalaga opened a new pull request #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073
 
 
   https://issues.apache.org/jira/browse/CAMEL-11976

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Nov/17 14:55;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2073

    CAMEL-11976: Align pdfbox versions to 2.0.6

    https://issues.apache.org/jira/browse/CAMEL-11976

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-11976

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2073.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2073
    
----
commit c54e87312e23ca358392d9b0a3be42a9de8b25c5
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-11-01T14:53:00Z

    CAMEL-11976: Align pdfbox versions to 2.0.6

----
;;;","01/Nov/17 14:57;ppalaga;The linked patch shows that the proposed alignment is possible.

Esp. the changes in tests should be reviewed thoroughly to asses how much can this change break users' existing code.;;;","02/Nov/17 08:13;githubbot;ppalaga commented on issue #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073#issuecomment-341347048
 
 
   > Did you test the related Karaf features? Thanks.
   
   Trying to do that now.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Nov/17 12:00;githubbot;ppalaga commented on issue #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073#issuecomment-341400180
 
 
   48d5c9c was tested with all impacted components on Karaf - i.e. fop, pdf and tika.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Nov/17 12:09;githubbot;oscerd commented on issue #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073#issuecomment-341402001
 
 
   Thanks @ppalaga the PR has been merged. I'm closing this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Nov/17 12:09;githubbot;oscerd closed pull request #2073: CAMEL-11976: Align pdfbox versions to 2.0.6
URL: https://github.com/apache/camel/pull/2073
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-fop/pom.xml b/components/camel-fop/pom.xml
index b3289378141..e4635515057 100644
--- a/components/camel-fop/pom.xml
+++ b/components/camel-fop/pom.xml
@@ -72,7 +72,7 @@
             <artifactId>avalon-framework-impl</artifactId>
             <version>${avalon-version}</version>
         </dependency>
-        
+
         <!-- for testing -->
         <dependency>
             <groupId>org.apache.camel</groupId>
@@ -82,10 +82,21 @@
         <dependency>
             <groupId>org.apache.pdfbox</groupId>
             <artifactId>pdfbox</artifactId>
-            <version>${pdfbox-version}</version>
             <scope>test</scope>
         </dependency>
-        
+        <dependency>
+            <groupId>org.bouncycastle</groupId>
+            <artifactId>bcprov-jdk15on</artifactId>
+            <version>${bouncycastle-version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.bouncycastle</groupId>
+            <artifactId>bcmail-jdk15on</artifactId>
+            <version>${bouncycastle-version}</version>
+            <scope>test</scope>
+        </dependency>
+
         <!-- Xalan Serializer dependencies are not  -->
         <!-- correctly imported from batik for tests  -->
         <!-- and as such they will fail. Must add to  -->
@@ -96,7 +107,7 @@
             <version>${xalan-version}</version>
             <scope>test</scope>
         </dependency>
-           
+
         <dependency>
             <groupId>org.apache.logging.log4j</groupId>
             <artifactId>log4j-api</artifactId>
diff --git a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java
index 7111ac3637b..249e111d845 100644
--- a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java
+++ b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopComponentTest.java
@@ -16,6 +16,7 @@
  */
 package org.apache.camel.component.fop;
 
+import java.io.File;
 import java.io.FileInputStream;
 
 import org.apache.camel.EndpointInject;
@@ -36,7 +37,7 @@
 
     @Produce(uri = ""direct:start"")
     protected ProducerTemplate template;
-    
+
     @Override
     @Before
     public void setUp() throws Exception {
@@ -53,7 +54,7 @@ public void createPdfUsingXmlDataAndXsltTransformation() throws Exception {
         template.sendBody(inputStream);
         resultEndpoint.assertIsSatisfied();
 
-        PDDocument document = PDDocument.load(""target/data/result.pdf"");
+        PDDocument document = PDDocument.load(new File(""target/data/result.pdf""));
         String pdfText = FopHelper.extractTextFrom(document);
         assertTrue(pdfText.contains(""Project""));    //from xsl template
         assertTrue(pdfText.contains(""John Doe""));   //from data xml
@@ -62,7 +63,7 @@ public void createPdfUsingXmlDataAndXsltTransformation() throws Exception {
         Exchange exchange = resultEndpoint.getReceivedExchanges().get(0);
         assertEquals(""Header value is lost!"", ""bar"", exchange.getIn().getHeader(""foo""));
     }
-    
+
     @Override
     protected RouteBuilder createRouteBuilder() {
         return new RouteBuilder() {
diff --git a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java
index 884300ba98a..9805fccbebd 100644
--- a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java
+++ b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopEndpointTest.java
@@ -80,12 +80,15 @@ public void encryptPdfWithUserPassword() throws Exception {
         Endpoint endpoint = context().getEndpoint(""fop:pdf"");
         Producer producer = endpoint.createProducer();
         Exchange exchange = new DefaultExchange(context);
-        exchange.getIn().setHeader(""CamelFop.Encrypt.userPassword"", ""secret"");
+        final String password = ""secret"";
+        exchange.getIn().setHeader(""CamelFop.Encrypt.userPassword"", password);
         exchange.getIn().setBody(FopHelper.decorateTextWithXSLFO(""Test Content""));
 
         producer.process(exchange);
-        PDDocument document = getDocumentFrom(exchange);
-        assertTrue(document.isEncrypted());
+        try (InputStream inputStream = exchange.getOut().getBody(InputStream.class)) {
+            PDDocument document = PDDocument.load(inputStream, password);
+            assertTrue(document.isEncrypted());
+        }
     }
 
     @Test
diff --git a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java
index fee920c1eef..b016ec1530a 100644
--- a/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java
+++ b/components/camel-fop/src/test/java/org/apache/camel/component/fop/FopHelper.java
@@ -21,29 +21,14 @@
 import java.io.Writer;
 
 import org.apache.pdfbox.cos.COSName;
-import org.apache.pdfbox.exceptions.CryptographyException;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDDocumentInformation;
-import org.apache.pdfbox.pdmodel.encryption.BadSecurityHandlerException;
-import org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;
-import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 
 public final class FopHelper {
     private FopHelper() {
     }
 
-    //decryption requires additional libraries
-    public static void decryptPDFN(PDDocument document, String password) throws
-            IOException, CryptographyException, BadSecurityHandlerException {
-        if (document.isEncrypted()) {
-            DecryptionMaterial decryptionMaterial = new StandardDecryptionMaterial(password);
-            document.openProtection(decryptionMaterial);
-        } else {
-            throw new RuntimeException(""Document not encrypted"");
-        }
-    }
-
     public static String extractTextFrom(PDDocument document) throws IOException {
         Writer output = new StringWriter();
         PDFTextStripper stripper = new PDFTextStripper();
@@ -53,7 +38,7 @@ public static String extractTextFrom(PDDocument document) throws IOException {
 
     public static String getDocumentMetadataValue(PDDocument document, COSName name) {
         PDDocumentInformation info = document.getDocumentInformation();
-        return info.getDictionary().getString(name);
+        return info.getCOSObject().getString(name);
     }
 
     public static String decorateTextWithXSLFO(String text) {
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java
index 066d8012442..a836540d6b4 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfConfiguration.java
@@ -45,14 +45,14 @@
     private static final Map<String, PDRectangle> PAGE_MAP = new HashMap<String, PDRectangle>();
 
     static {
-        PAGE_MAP.put(PAGE_SIZE_A0, PDPage.PAGE_SIZE_A0);
-        PAGE_MAP.put(PAGE_SIZE_A1, PDPage.PAGE_SIZE_A1);
-        PAGE_MAP.put(PAGE_SIZE_A2, PDPage.PAGE_SIZE_A2);
-        PAGE_MAP.put(PAGE_SIZE_A3, PDPage.PAGE_SIZE_A3);
-        PAGE_MAP.put(PAGE_SIZE_A4, PDPage.PAGE_SIZE_A4);
-        PAGE_MAP.put(PAGE_SIZE_A5, PDPage.PAGE_SIZE_A5);
-        PAGE_MAP.put(PAGE_SIZE_A6, PDPage.PAGE_SIZE_A6);
-        PAGE_MAP.put(PAGE_SIZE_LETTER, PDPage.PAGE_SIZE_LETTER);
+        PAGE_MAP.put(PAGE_SIZE_A0, PDRectangle.A0);
+        PAGE_MAP.put(PAGE_SIZE_A1, PDRectangle.A1);
+        PAGE_MAP.put(PAGE_SIZE_A2, PDRectangle.A2);
+        PAGE_MAP.put(PAGE_SIZE_A3, PDRectangle.A3);
+        PAGE_MAP.put(PAGE_SIZE_A4, PDRectangle.A4);
+        PAGE_MAP.put(PAGE_SIZE_A5, PDRectangle.A5);
+        PAGE_MAP.put(PAGE_SIZE_A6, PDRectangle.A6);
+        PAGE_MAP.put(PAGE_SIZE_LETTER, PDRectangle.LETTER);
     }
 
     @UriPath(description = ""Operation type"")
@@ -69,7 +69,7 @@
     @UriParam(defaultValue = ""14"")
     private float fontSize = 14;
     @UriParam(defaultValue = ""PAGE_SIZE_A4"", enums = ""PAGE_SIZE_A0,PAGE_SIZE_A1,PAGE_SIZE_A2,PAGE_SIZE_A3,PAGE_SIZE_A4,PAGE_SIZE_A5,PAGE_SIZE_A6,PAGE_SIZE_LETTER"")
-    private PDRectangle pageSize = PDPage.PAGE_SIZE_A4;
+    private PDRectangle pageSize = PDRectangle.A4;
     @UriParam(defaultValue = ""Helvetica"")
     private PDFont font = PDType1Font.HELVETICA;
     @UriParam(defaultValue = ""lineTermination"")
@@ -169,7 +169,7 @@ public void setFont(PDFont font) {
     }
 
     public void setFont(String font) {
-        setFont(PDType1Font.getStandardFont(font));
+        setFont(Standard14Fonts.getByName(font));
     }
 
     public TextProcessingFactory getTextProcessingFactory() {
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java
index be60aff6750..11b73130908 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/PdfProducer.java
@@ -29,15 +29,11 @@
 import org.apache.camel.component.pdf.text.TextProcessingAbstractFactory;
 import org.apache.camel.component.pdf.text.WriteStrategy;
 import org.apache.camel.impl.DefaultProducer;
-import org.apache.pdfbox.exceptions.COSVisitorException;
-import org.apache.pdfbox.exceptions.CryptographyException;
-import org.apache.pdfbox.exceptions.InvalidPasswordException;
 import org.apache.pdfbox.pdmodel.PDDocument;
-import org.apache.pdfbox.pdmodel.encryption.BadSecurityHandlerException;
 import org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;
 import org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -83,7 +79,7 @@ public void process(Exchange exchange) throws Exception {
         exchange.getOut().setBody(result);
     }
 
-    private Object doAppend(Exchange exchange) throws IOException, BadSecurityHandlerException, CryptographyException, InvalidPasswordException, COSVisitorException {
+    private Object doAppend(Exchange exchange) throws IOException {
         LOG.debug(""Got {} operation, going to append text to provided pdf."", pdfConfiguration.getOperation());
         String body = exchange.getIn().getBody(String.class);
         PDDocument document = exchange.getIn().getHeader(PDF_DOCUMENT_HEADER_NAME, PDDocument.class);
@@ -93,16 +89,6 @@ private Object doAppend(Exchange exchange) throws IOException, BadSecurityHandle
         }
 
         if (document.isEncrypted()) {
-            DecryptionMaterial decryptionMaterial = exchange.getIn().getHeader(DECRYPTION_MATERIAL_HEADER_NAME,
-                    DecryptionMaterial.class);
-            if (decryptionMaterial == null) {
-                throw new IllegalArgumentException(String.format(""%s header is expected for %s operation ""
-                                + ""on encrypted document"",
-                        DECRYPTION_MATERIAL_HEADER_NAME,
-                        pdfConfiguration.getOperation()));
-            }
-
-            document.openProtection(decryptionMaterial);
             document.setAllSecurityToBeRemoved(true);
         }
 
@@ -115,27 +101,16 @@ private Object doAppend(Exchange exchange) throws IOException, BadSecurityHandle
         return byteArrayOutputStream;
     }
 
-    private String doExtractText(Exchange exchange) throws IOException, CryptographyException, InvalidPasswordException, BadSecurityHandlerException {
+    private String doExtractText(Exchange exchange) throws IOException {
         LOG.debug(""Got {} operation, going to extract text from provided pdf."", pdfConfiguration.getOperation());
         PDDocument document = exchange.getIn().getBody(PDDocument.class);
 
-        if (document.isEncrypted()) {
-            DecryptionMaterial decryptionMaterial = exchange.getIn().getHeader(DECRYPTION_MATERIAL_HEADER_NAME,
-                    DecryptionMaterial.class);
-            if (decryptionMaterial == null) {
-                throw new IllegalArgumentException(String.format(""%s header is expected for %s operation ""
-                                + ""on encrypted document"",
-                        DECRYPTION_MATERIAL_HEADER_NAME,
-                        pdfConfiguration.getOperation()));
-            }
-            document.openProtection(decryptionMaterial);
-        }
 
         PDFTextStripper pdfTextStripper = new PDFTextStripper();
         return pdfTextStripper.getText(document);
     }
 
-    private OutputStream doCreate(Exchange exchange) throws IOException, BadSecurityHandlerException, COSVisitorException {
+    private OutputStream doCreate(Exchange exchange) throws IOException {
         LOG.debug(""Got {} operation, going to create and write provided string to pdf document."",
                 pdfConfiguration.getOperation());
         String body = exchange.getIn().getBody(String.class);
@@ -148,7 +123,7 @@ private OutputStream doCreate(Exchange exchange) throws IOException, BadSecurity
         return byteArrayOutputStream;
     }
 
-    private void appendToPdfDocument(String text, PDDocument document, ProtectionPolicy protectionPolicy) throws IOException, BadSecurityHandlerException {
+    private void appendToPdfDocument(String text, PDDocument document, ProtectionPolicy protectionPolicy) throws IOException {
         Collection<String> words = splitStrategy.split(text);
         Collection<String> lines = lineBuilderStrategy.buildLines(words);
         writeStrategy.write(lines, document);
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/Standard14Fonts.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/Standard14Fonts.java
new file mode 100644
index 00000000000..06c2f37aa60
--- /dev/null
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/Standard14Fonts.java
@@ -0,0 +1,59 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.pdf;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.pdfbox.pdmodel.font.PDType1Font;
+
+/**
+ * The 14 standard fonts by name. Created here because there is no way to get a standard font by name in {@code pdfbox} 2.0
+ *
+ * @author <a href=""https://github.com/ppalaga"">Peter Palaga</a>
+ */
+public class Standard14Fonts {
+    private static final Map<String, PDType1Font> FONTS_BY_NAME = new HashMap<>();
+    static
+    {
+        FONTS_BY_NAME.put(PDType1Font.TIMES_ROMAN.getBaseFont(), PDType1Font.TIMES_ROMAN);
+        FONTS_BY_NAME.put(PDType1Font.TIMES_BOLD.getBaseFont(), PDType1Font.TIMES_BOLD);
+        FONTS_BY_NAME.put(PDType1Font.TIMES_ITALIC.getBaseFont(), PDType1Font.TIMES_ITALIC);
+        FONTS_BY_NAME.put(PDType1Font.TIMES_BOLD_ITALIC.getBaseFont(), PDType1Font.TIMES_BOLD_ITALIC);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA.getBaseFont(), PDType1Font.HELVETICA);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA_BOLD.getBaseFont(), PDType1Font.HELVETICA_BOLD);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA_OBLIQUE.getBaseFont(), PDType1Font.HELVETICA_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.HELVETICA_BOLD_OBLIQUE.getBaseFont(), PDType1Font.HELVETICA_BOLD_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.COURIER.getBaseFont(), PDType1Font.COURIER);
+        FONTS_BY_NAME.put(PDType1Font.COURIER_BOLD.getBaseFont(), PDType1Font.COURIER_BOLD);
+        FONTS_BY_NAME.put(PDType1Font.COURIER_OBLIQUE.getBaseFont(), PDType1Font.COURIER_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.COURIER_BOLD_OBLIQUE.getBaseFont(), PDType1Font.COURIER_BOLD_OBLIQUE);
+        FONTS_BY_NAME.put(PDType1Font.SYMBOL.getBaseFont(), PDType1Font.SYMBOL);
+        FONTS_BY_NAME.put(PDType1Font.ZAPF_DINGBATS.getBaseFont(), PDType1Font.ZAPF_DINGBATS);
+    }
+
+    /**
+     * Get one of the 14 standard fonts by base font name.
+     *
+     * @param fontName the base font name, such as {@code ""Helvetica""} or {@code ""Helvetica-Bold""}
+     * @return the {@link PDType1Font} or null, of the {@code fontName} is not mapped to any font
+     */
+    public static PDType1Font getByName(String fontName) {
+        return FONTS_BY_NAME.get(fontName);
+    }
+
+}
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java
index 188d846d3b2..e5f3f7b7c30 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/DefaultWriteStrategy.java
@@ -22,7 +22,7 @@
 import org.apache.camel.component.pdf.PdfConfiguration;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
-import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.PDPageContentStream;
 
 /**
  * Writes given lines to PDF document. If document already contains some text then new text will be appended
diff --git a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java
index cc910f47cb1..2574f5d751d 100644
--- a/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java
+++ b/components/camel-pdf/src/main/java/org/apache/camel/component/pdf/text/PdfUtils.java
@@ -26,11 +26,11 @@
     private PdfUtils() { }
 
     public static float getAverageFontHeight(PDFont font, float fontSize) throws IOException {
-        return font.getFontHeight(""A"".getBytes(), 0, 1) / PDF_PIXEL_SIZE * fontSize;
+        return font.getBoundingBox().getHeight() / PDF_PIXEL_SIZE * fontSize;
     }
 
     public static float getFontHeightForString(String str, PDFont font, float fontSize) throws IOException {
-        return font.getFontHeight(str.getBytes(), 0, 1) / PDF_PIXEL_SIZE * fontSize;
+        return font.getBoundingBox().getHeight() / PDF_PIXEL_SIZE * fontSize;
     }
 
     public static float getFontWidth(String str, PDFont font, float fontSize) throws IOException {
diff --git a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java
index 8269f9663e4..4ca5c0c6e5e 100644
--- a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java
+++ b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfAppendTest.java
@@ -30,12 +30,13 @@
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
-import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.common.PDRectangle;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
 import org.apache.pdfbox.pdmodel.font.PDType1Font;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -58,7 +59,7 @@ public void testAppend() throws Exception {
         final String originalText = ""Test"";
         final String textToAppend = ""Append"";
         PDDocument document = new PDDocument();
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -98,7 +99,7 @@ public void testAppendEncrypted() throws Exception {
         final String originalText = ""Test"";
         final String textToAppend = ""Append"";
         PDDocument document = new PDDocument();
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -121,7 +122,7 @@ public void testAppendEncrypted() throws Exception {
         document.save(output);
 
         // Encryption happens after saving.
-        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()));
+        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()), userPass);
 
         Map<String, Object> headers = new HashMap<String, Object>();
         headers.put(PdfHeaderConstants.PDF_DOCUMENT_HEADER_NAME, encryptedDocument);
@@ -136,7 +137,7 @@ public boolean matches(Exchange exchange) {
                 Object body = exchange.getIn().getBody();
                 assertThat(body, instanceOf(ByteArrayOutputStream.class));
                 try {
-                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()));
+                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()), userPass);
                     PDFTextStripper pdfTextStripper = new PDFTextStripper();
                     String text = pdfTextStripper.getText(doc);
                     assertEquals(2, doc.getNumberOfPages());
diff --git a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java
index c74e1fb5bf7..07093f55e86 100644
--- a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java
+++ b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfCreationTest.java
@@ -29,7 +29,7 @@
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
-import org.apache.pdfbox.util.PDFTextStripper;
+import org.apache.pdfbox.text.PDFTextStripper;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -93,9 +93,8 @@ public boolean matches(Exchange exchange) {
                 Object body = exchange.getIn().getBody();
                 assertThat(body, instanceOf(ByteArrayOutputStream.class));
                 try {
-                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()));
+                    PDDocument doc = PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream) body).toByteArray()), userPass);
                     assertTrue(""Expected encrypted document"", doc.isEncrypted());
-                    doc.decrypt(userPass);
                     assertFalse(""Printing should not be permitted"", doc.getCurrentAccessPermission().canPrint());
                     PDFTextStripper pdfTextStripper = new PDFTextStripper();
                     String text = pdfTextStripper.getText(doc);
diff --git a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java
index 6d93d8a4ab6..9cc701917ed 100644
--- a/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java
+++ b/components/camel-pdf/src/test/java/org/apache/camel/component/pdf/PdfTextExtractionTest.java
@@ -27,7 +27,8 @@
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDPage;
-import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.PDPageContentStream;
+import org.apache.pdfbox.pdmodel.common.PDRectangle;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
 import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
@@ -46,7 +47,7 @@
     public void testExtractText() throws Exception {
         final String expectedText = ""Test string"";
         PDDocument document = new PDDocument();
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -82,7 +83,7 @@ public void testExtractTextFromEncrypted() throws Exception {
         PDDocument document = new PDDocument();
 
         final String expectedText = ""Test string"";
-        PDPage page = new PDPage(PDPage.PAGE_SIZE_A4);
+        PDPage page = new PDPage(PDRectangle.A4);
         document.addPage(page);
         PDPageContentStream contentStream = new PDPageContentStream(document, page);
         contentStream.setFont(PDType1Font.HELVETICA, 12);
@@ -98,7 +99,7 @@ public void testExtractTextFromEncrypted() throws Exception {
         document.save(output);
 
         // Encryption happens after saving.
-        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()));
+        PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()), userPass);
 
         template.sendBodyAndHeader(""direct:start"",
                 encryptedDocument,
diff --git a/parent/pom.xml b/parent/pom.xml
index 7c5878bd70f..61b5de8ee48 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -558,7 +558,8 @@
     <pax-exam-version>4.9.2</pax-exam-version>
     <pax-tiny-bundle-version>1.3.2</pax-tiny-bundle-version>
     <pax-logging-version>1.8.6</pax-logging-version>
-    <pdfbox-version>1.8.13</pdfbox-version>
+    <pdfbox18-version>1.8.13</pdfbox18-version>
+    <pdfbox-version>2.0.6</pdfbox-version>
     <pgjdbc-ng-driver-version>0.7.1</pgjdbc-ng-driver-version>
     <protobuf-version>3.3.0</protobuf-version>
     <protobuf-guava-version>20.0</protobuf-guava-version>
@@ -4717,6 +4718,34 @@
         <version>${maven-archetype-packaging-version}</version>
       </dependency>
 
+
+      <!-- pdfbox -->
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>jempbox</artifactId>
+        <version>${pdfbox18-version}</version><!-- because of Tika -->
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>fontbox</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-tools</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-debugger</artifactId>
+        <version>${pdfbox-version}</version>
+      </dependency>
+
     </dependencies>
   </dependencyManagement>
 
diff --git a/platforms/karaf/features/src/main/resources/features.xml b/platforms/karaf/features/src/main/resources/features.xml
index 6cbdbba678a..b14d60e1b3c 100644
--- a/platforms/karaf/features/src/main/resources/features.xml
+++ b/platforms/karaf/features/src/main/resources/features.xml
@@ -351,7 +351,7 @@
     <bundle dependency='true'>mvn:net.openhft/chronicle-map/${chronicle-map-version}</bundle>
     <bundle dependency='true'>mvn:net.openhft/chronicle-queue/${chronicle-queue-version}</bundle>
     <bundle dependency='true'>mvn:net.openhft/chronicle-engine/${chronicle-engine-version}</bundle>
-    <bundle dependency='true'>mvn:net.openhft/compiler/${openhft-compiler-version}</bundle>    
+    <bundle dependency='true'>mvn:net.openhft/compiler/${openhft-compiler-version}</bundle>
     <bundle>mvn:org.apache.camel/camel-chronicle/${project.version}</bundle>
   </feature>
   <feature name='camel-chunk' version='${project.version}' resolver='(obr)' start-level='50'>
@@ -837,7 +837,7 @@
     <bundle dependency='true'>wrap:mvn:com.auth0/java-jwt/${grpc-java-jwt-version}</bundle>
     <bundle dependency='true'>wrap:mvn:com.google.auth/google-auth-library-oauth2-http/${grpc-google-auth-library-version}</bundle>
     <bundle dependency='true'>wrap:mvn:com.google.auth/google-auth-library-credentials/${grpc-google-auth-library-version}</bundle>
-    <bundle>mvn:org.apache.camel/camel-grpc/${project.version}</bundle>    
+    <bundle>mvn:org.apache.camel/camel-grpc/${project.version}</bundle>
   </feature>
   <feature name='camel-gson' version='${project.version}' resolver='(obr)' start-level='50'>
     <feature version='${project.version}'>camel-core</feature>
@@ -1707,7 +1707,6 @@
     <bundle dependency='true'>mvn:org.bouncycastle/bcpkix-jdk15on/${bouncycastle-version}</bundle>
     <bundle dependency='true'>mvn:org.apache.pdfbox/pdfbox/${pdfbox-version}</bundle>
     <bundle dependency='true'>mvn:org.apache.pdfbox/fontbox/${pdfbox-version}</bundle>
-    <bundle dependency='true'>mvn:org.apache.pdfbox/jempbox/${pdfbox-version}</bundle>
     <bundle>mvn:org.apache.camel/camel-pdf/${project.version}</bundle>
   </feature>
   <feature name='camel-pgevent' version='${project.version}' resolver='(obr)' start-level='50'>
diff --git a/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml b/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
index dca4625cfa3..8cac9afae17 100644
--- a/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
+++ b/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
@@ -3180,6 +3180,31 @@
         <version>2.4.2</version>
       </dependency>
       <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>fontbox</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>jempbox</artifactId>
+        <version>1.8.13</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-debugger</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.pdfbox</groupId>
+        <artifactId>pdfbox-tools</artifactId>
+        <version>2.0.6</version>
+      </dependency>
+      <dependency>
         <groupId>org.apache.ws.commons.axiom</groupId>
         <artifactId>axiom-api</artifactId>
         <version>1.2.14</version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Nov/17 12:09;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2073
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Restlet binding should not create jaxb marshaller when binding mode is set to json,CAMEL-11967,13113109,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,transamericamoon,transamericamoon,30/Oct/17 18:29,31/Oct/17 12:55,14/Jul/23 05:50,31/Oct/17 12:55,2.20.0,,,,,2.19.4,2.20.1,2.21.0,,camel-core,rest,,,0,,,"The following rest endpoint fails with jaxb exception:


{code:java}
.get(""/getAllEndpoints"").bindingMode(RestBindingMode.json).outType(Map.class)
        			.to(""bean:IRWebServiceRegistry?method=getAllProperties"");
{code}



{code:java}
Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
java.util.Map is an interface, and JAXB can't handle interfaces.
{code}


This is fine if i wanted to marshall to xml but i specifically set binding mode to json.

Fix:
Change this line:
https://github.com/apache/camel/blob/36039c0563dfe9e04527c5eca1058e66326054ee/camel-core/src/main/java/org/apache/camel/model/rest/RestBindingDefinition.java#L174

To: 
if (jaxb != null && (mode.contains(""xml"") || mode.equals(RestBindingMode.auto))) {

May want to consider doing the same for the json section at line 130
",,davsclaus,transamericamoon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 31 12:55:12 UTC 2017,,,,,,,Patch Available,,,,"0|i3lvpz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Oct/17 19:34;davsclaus;Thanks John, would you like to try to submit this patch as a github PR (pull request), then its easier for us to apply

There is a link from here with some points how to do that
http://camel.apache.org/contributing

And there is also plenty of other resources online about how to work with github and do PRs;;;","31/Oct/17 12:55;davsclaus;Thanks John.

We had to get this fixed today so we can cut the 2.19.4 release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Actuator endpoints for MVC should only trigger if web application,CAMEL-11963,13112826,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/17 15:50,28/Oct/17 15:56,14/Jul/23 05:50,28/Oct/17 15:56,2.20.0,,,,,2.20.1,2.21.0,,,camel-spring-boot,,,,0,,,"You can get errors like
{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthChecksMvcEndpoint' defined in class path resource [org/apache/camel/spring/boot/actuate/endpoint/CamelHealthCheckEndpointAutoConfiguration.class]: Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/http/ResponseEntity
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:526) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]
	at com.camelinaction.ClientApplication.main(ClientApplication.java:10) [classes!/:na]
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-28 15:50:41.0,,,,,,,,,,,"0|i3ltzj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AdviceWith weaveAddFirst using onCompletion issue,CAMEL-11962,13112785,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/17 09:09,16/Mar/18 20:16,14/Jul/23 05:50,28/Oct/17 10:18,2.20.0,,,,,2.19.4,2.20.1,2.21.0,,camel-test,,,,0,,,"See user forum
http://camel.465427.n5.nabble.com/Sprint-Unit-test-fails-when-OnCompletion-configured-tp5814939.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12359,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-28 09:09:01.0,,,,,,,,,,,"0|i3ltqn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException in HttpMessage,CAMEL-11961,13112780,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/17 08:34,28/Oct/17 08:55,14/Jul/23 05:50,28/Oct/17 08:55,2.20.0,,,,,2.19.4,2.20.1,2.21.0,,camel-http-common,,,,0,,,"Was reported on user forum
http://camel.465427.n5.nabble.com/ClassCastException-DirectVmEndpoint-cannot-be-cast-to-HttpCommonEndpoint-tp5814893.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-28 08:34:11.0,,,,,,,,,,,"0|i3ltpj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using @AdviceWith and testing camel-spring-boot startup CamelContext eager,CAMEL-11955,13112551,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Oct/17 09:36,27/Oct/17 10:58,14/Jul/23 05:50,27/Oct/17 10:58,2.20.0,,,,,2.20.1,2.21.0,,,camel-spring-boot,camel-test,,,0,,,"See
http://camel.465427.n5.nabble.com/CamelSpringBootRunner-and-AdviceWith-tp5814802.html
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-27 09:36:24.0,,,,,,,,,,,"0|i3lsav:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven connector plugin: connector only properties are ignored in spring boot code generation,CAMEL-11953,13112473,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,27/Oct/17 05:44,27/Oct/17 06:08,14/Jul/23 05:50,27/Oct/17 06:08,2.20.0,,,,,2.20.1,2.21.0,,,camel-connector,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-27 05:44:29.0,,,,,,,,,,,"0|i3lrtj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSLT options not set when resource URI is http,CAMEL-11952,13112369,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tflaherty,tflaherty,26/Oct/17 18:26,27/Oct/17 08:01,14/Jul/23 05:50,27/Oct/17 08:01,2.20.0,,,,,2.20.1,2.21.0,,,camel-core,,,,0,,,"Options included for an XSLT endpoint URI are not applied if the resource is referenced via HTTP. 

In XsltComponent.createEndpoint(), it checks if the resource URI is http (XsltComponent:179). If it is, ResourceHelper.appendParameters() is called (XsltComponent:180).

ResourceHelper.appendParameters() adds the parameters to the HTTP URI and then clears the parameters list (ResourceHelper:336). 

By the time setProperties() is called on line 207 of XsltComponent, the parameters map is empty and nothing gets set.",,tflaherty,,,,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-26 18:26:19.0,,,,,,,,,,,"0|i3lr6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Uri matching does not match request type,CAMEL-11951,13112351,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,robert.hillier,robert.hillier,26/Oct/17 17:44,31/Oct/17 19:00,14/Jul/23 05:50,31/Oct/17 10:24,2.20.0,,,,,2.19.4,2.20.1,2.21.0,,camel-http-common,,,,0,,,"I had previously described the problem here:
https://stackoverflow.com/questions/46936348/apache-camel-rest-dsl-405-method-not-allowed

It appears that the problem is down to a possible bug in the way URIs are matched (not to mention my rather obscure use-case)

I have a number of REST-DSL endpoints with the same URI but different request types (POST, PUT, GET, DELETE).  In my case, the URI is getting selected by
HttpServletResolveConsumerStrategy.resolve (in addition to these, I have some specific endpoints with wildcards in them)

This method matches the URI, but not the request type.  When I send a GET request, it returns the first consumer candidate it finds which, in my case, always seems to be PUT.  Later, when CamelContinuationServlet.doService checks that the request type and cadidate type match, they don't.  It then returns 405 Method Not Allowed.

I believe that the HttpServletResolveConsumerStrategy.resolve method IN camel-hhtp-common should check the request type as well as the URI.","camel-spring, camel-jetty
OS - RHEL",davsclaus,robert.hillier,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Oct/17 17:30;robert.hillier;camel-bug-demo.zip;https://issues.apache.org/jira/secure/attachment/12894799/camel-bug-demo.zip",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 31 19:00:36 UTC 2017,,,,,,,,,,,"0|i3lr2f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Oct/17 08:58;davsclaus;Its the rest based HttpRestServletResolveConsumerStrategy that should be in-use as it cater for HTTP methods as well;;;","28/Oct/17 09:00;davsclaus;Can you post a sample project to github or attach a .zip;;;","30/Oct/17 12:37;robert.hillier;As requested, Camel Bug Demo project attached.

To start the project, run:
mvn clean install camel:run

The project contains a number of routes which make http calls to a dummy server running on a Heroku instance.  There are two REST calls which demonstrate the problem:

http://{{serverAddr}}/integration/api/v1/customer/123456/devices

http://{{serverAddr}}/integration/api/v1/customer/123456/detail

The ""devices"" request is a specific uri, which performs some simple aggregation.  It contains a variable part in it's URI, used in subsequent calls.  This one is working fine

The ""detail"" request should be simply proxied through to the other server.  However, this call returns a 405 Method Not Allowed.

Furthermore, if you comment out the ""devices"" request and restart, the proxied ""detail"" call then works fine.;;;","30/Oct/17 15:43;vrlgohel;Hi Robert, 

Your attached reproducer is missing, mandatory 'location' attribute in <propertyPlaceholder> in your route file. Can you make the changes and upload the reproducer so that we can check ? Which is the property file you are referring in the reproducer ?

{code:java}
<propertyPlaceholder id=""properties"">
			<propertiesLocation resolver=""classpath""
				path=""mobile-gateway.properties"" optional=""true"" />
			<propertiesLocation resolver=""classpath"" path=""info""
				optional=""false"" />
		</propertyPlaceholder>
{code}
;;;","30/Oct/17 17:31;robert.hillier;Apologies, the properties aren't used in this demo, and can be removed.  I have updated the source and attached a zip file.

Many thanks,

Rob;;;","31/Oct/17 09:41;davsclaus;The attached sample code does NOT have the ""detail"" REST service, there is only devices.;;;","31/Oct/17 09:51;davsclaus;It works fine when I do

{code}
      <get uri=""/v1/customer/{custId}/devices"" consumes=""application/json"" produces=""application/json"">
        <description>Queries all devices for a single customer</description>
        <to uri=""direct:getCustomerDevices"" />
      </get>
      <get uri=""/v1/customer/{custId}/detail"" consumes=""application/json"" produces=""application/json"">
        <description>Customer detail</description>
        <to uri=""direct:getCustomer"" />
      </get>
{code}

And then just make those routes log
{code}
    <route id=""getCustomer"">
      <description>Queries the customer details from the heroku server</description>
      <from uri=""direct:getCustomer"" />
      <log message=""getCustomer detail ${header.custId}""/>
    </route>
    
    <route id=""getDevice"">
      <description>Queries the device details from heroku server</description>
      <from uri=""direct:getDevice"" />
      <log message=""getCustomer device ${header.custId}""/>
    </route>
{code}

And then I call Camel via these 2 curls
{code}
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/123456/devices
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/999999/detail
{code}

Then I can see it calls different rest-dsl operation

{code}
[INFO ] 2017-10-31 10:49:23.692 [qtp1739303520-24] getCustomerDevices:159 - getCustomer devices 123456
[INFO ] 2017-10-31 10:49:40.139 [qtp1739303520-19] getCustomer:159 - getCustomer detail 999999
{code}
;;;","31/Oct/17 09:52;robert.hillier;Claus,

That's correct.  The ""detail"" request gets proxied through to the backend service by one of the four proxy REST services.  These are the ones with the ""/v1?matchOnUriPrefix=true&amp;chunked=false"" uri.  But it is not selecting the correct service, as described above.

When I stepped through the code, I noticed that it is selecting the best matching URI, but it selects the first one it finds (which always seems to be ""put"").  When it later checks the restriction against the incoming request type, it rejects with 405.

Thanks,

Rob;;;","31/Oct/17 10:01;robert.hillier;Claus,

As described, the ""detail"" request needs to be handled by one of the proxy requests, and not a specific request.  The proxy works fine, until I add REST services that contain variable parameters.  If you comment out the ""detail"" request, you'll find that the requests are proxied successfully.  When they are enabled, proxied requests return 405.

Thanks,

Rob;;;","31/Oct/17 10:05;davsclaus;Ah good it, yeah reproduced the bug and working on a fix;;;","31/Oct/17 10:09;davsclaus;Got it fixed

Sending these requests
{code}
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/999999/detail
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/123456/devices
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl http://localhost:8078/integration/api/v1/customer/123456/detail
davsclaus:/Users/davsclaus/Downloads/camel-bug-demo/$ curl -XPUT http://localhost:8078/integration/api/v1/customer/123456/detail
{code}

And it logs now

{code}
[INFO ] 2017-10-31 11:08:09.257 [qtp810576909-21] proxyOutbound:159 - Proxied call GET - /customer/999999/detail
[INFO ] 2017-10-31 11:08:17.556 [qtp810576909-16] getCustomerDevices:159 - getCustomer devices 123456
[INFO ] 2017-10-31 11:08:24.964 [qtp810576909-18] proxyOutbound:159 - Proxied call GET - /customer/123456/detail
[INFO ] 2017-10-31 11:08:44.232 [qtp810576909-18] proxyOutbound:159 - Proxied call PUT - /customer/123456/detail
{code};;;","31/Oct/17 10:37;robert.hillier;Claus,

Many thanks for this, and very nicely done too.

What's the process for getting a fixed version?  Will I need to wait for 2.20.1?  Also, should I close the issue?

Regards,

Rob;;;","31/Oct/17 12:47;davsclaus;Yes wait for the release;;;","31/Oct/17 13:04;robert.hillier;Final question is of course, when will that be?
Thanks,
Rob;;;","31/Oct/17 16:09;davsclaus;Keep an eye on
http://camel.465427.n5.nabble.com/Next-round-of-patch-releases-Camel-2-19-4-and-2-20-1-td5814926.html;;;","31/Oct/17 19:00;robert.hillier;Will do.  Thanks once again for your help.;;;",,,,,,,,,,,,,,,,,
Inconsistent jar versions with apache curator,CAMEL-11950,13112345,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,26/Oct/17 16:57,27/Oct/17 06:50,14/Jul/23 05:50,27/Oct/17 06:50,,,,,,2.20.1,2.21.0,,,camel-zookeeper,,,,0,,,CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2243,,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 27 06:50:46 UTC 2017,,,,,,,,,,,"0|i3lr13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Oct/17 16:58;githubbot;tdiesler opened a new pull request #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Oct/17 16:58;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2063

    [CAMEL-11950] Inconsistent jar versions with apache curator

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11950

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2063.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2063
    
----
commit e5cf6131ea79b4ee5b9c17bbaa6ec6d1830334d5
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-10-26T16:58:10Z

    [CAMEL-11950] Inconsistent jar versions with apache curator

----
;;;","26/Oct/17 17:02;githubbot;oscerd commented on issue #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063#issuecomment-339732540
 
 
   I'll merge tomorrow

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 06:50;githubbot;oscerd commented on issue #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063#issuecomment-339888257
 
 
   Thanks @tdiesler the PR has been merged on 2.20.x and master. I'm closing this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 06:50;githubbot;oscerd closed pull request #2063: [CAMEL-11950] Inconsistent jar versions with apache curator
URL: https://github.com/apache/camel/pull/2063
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-zookeeper/pom.xml b/components/camel-zookeeper/pom.xml
index 7be8c696576..31cc161656e 100644
--- a/components/camel-zookeeper/pom.xml
+++ b/components/camel-zookeeper/pom.xml
@@ -71,10 +71,14 @@
 
     <dependency>
       <groupId>org.apache.curator</groupId>
+      <artifactId>curator-client</artifactId>
+      <version>${curator-version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.curator</groupId>
       <artifactId>curator-framework</artifactId>
       <version>${curator-version}</version>
     </dependency>
-
     <dependency>
       <groupId>org.apache.curator</groupId>
       <artifactId>curator-recipes</artifactId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 06:50;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2063
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in iec60870 producer,CAMEL-11947,13112202,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tdiesler,jamesnetherton,jamesnetherton,26/Oct/17 07:41,07/Feb/20 04:13,14/Jul/23 05:50,21/Jan/20 12:38,2.20.0,,,,,3.1.0,,,,camel-iec60870,,,,0,,,"I've been working on integrating the iec60870 component with WIldFly. I have an integration test [here|https://github.com/wildfly-extras/wildfly-camel/blob/master/itests/standalone/basic/src/test/java/org/wildfly/camel/test/iec60870/Iec60870IntegrationTest.java]. When it's executed on its own, everything works fine. When it runs with the entire test suite, I encounter a NullPointerException in the Neoscada [Client.writeCommand()|https://github.com/eclipse/neoscada/blob/master/protocols/org.eclipse.neoscada.protocol.iec60870.client/src/org/eclipse/neoscada/protocol/iec60870/client/Client.java#L259] method.

It seems that the Netty channel that it's trying to write to is null and that initialisation of the channel happens async in [Client.handleOperationComplete()|https://github.com/eclipse/neoscada/blob/master/protocols/org.eclipse.neoscada.protocol.iec60870.client/src/org/eclipse/neoscada/protocol/iec60870/client/Client.java#L138]. When I debug, I see the channel gets initialised after the call to writeCommand().

Not sure if there's any way to detect whether the client connection has been established before trying to use it in the [ClientProducer|https://github.com/apache/camel/blob/master/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientProducer.java#L49]. Or maybe this ticket would be better placed with the neoscada project?

 

CrossRef

[https://github.com/wildfly-extras/wildfly-camel/issues/2236]

[https://issues.redhat.com/browse/ENTESB-12557]

 

 ",,jamesnetherton,,,,,,"tdiesler commented on pull request #3502: [CAMEL-11947] Possible race condition in iec60870 producer
URL: https://github.com/apache/camel/pull/3502
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jan/20 12:39;githubbot;600","tdiesler commented on pull request #3503: [CAMEL-11947] Possible race condition in iec60870 producer
URL: https://github.com/apache/camel/pull/3503
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Jan/20 12:41;githubbot;600","davsclaus commented on pull request #3502: [CAMEL-11947] Possible race condition in iec60870 producer
URL: https://github.com/apache/camel/pull/3502
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Jan/20 12:31;githubbot;600","davsclaus commented on pull request #3503: [CAMEL-11947] Possible race condition in iec60870 producer
URL: https://github.com/apache/camel/pull/3503
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Jan/20 12:31;githubbot;600","tdiesler commented on pull request #3547: [CAMEL-11947] Race condition in iec60870 producer
URL: https://github.com/apache/camel/pull/3547
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Feb/20 11:27;githubbot;600","davsclaus commented on pull request #3547: [CAMEL-11947] Race condition in iec60870 producer
URL: https://github.com/apache/camel/pull/3547
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Feb/20 04:13;githubbot;600",,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-26 07:41:44.0,,,,,,,,,,,"0|i3lq5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - CamelContextConfiguration afterApplicationStart should trigger later,CAMEL-11945,13111923,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/17 09:59,25/Oct/17 10:03,14/Jul/23 05:50,25/Oct/17 10:03,2.20.0,,,,,2.20.1,2.21.0,,,camel-spring-boot,,,,0,,,"Due the change of startup behaviour in Camel 2.20 with regards to Spring then we should let afterApplicationStart be called later.

Also document this API to be more clear when its called.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 25 10:00:57 UTC 2017,,,,,,,,,,,"0|i3lofj:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"25/Oct/17 10:00;davsclaus;See SO
https://stackoverflow.com/questions/46906221/empty-routeservice-with-apache-camel-2-20-0/46929440#46929440;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for iec60870 component,CAMEL-11937,13111341,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,apupier,apupier,23/Oct/17 09:02,24/Oct/17 07:24,14/Jul/23 05:50,24/Oct/17 07:24,2.20.0,,,,,2.20.1,2.21.0,,,camel-iec60870,,,,0,,,"it seems that there is an issue withe several iec60870 component;
iec60870-client uriPath iec60870-client:endpointUri
iec60870-server uriPath iec60870-server:endpointUri",,apupier,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 24 07:24:38 UTC 2017,,,,,,,,,,,"0|i3lkvb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Oct/17 09:30;githubbot;apupier opened a new pull request #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054
 
 
   Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Oct/17 09:30;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/2054

    CAMEL-11937 - Fix syntax for IEC 608870 component

    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-11937-camel-2.20.x-FixSyntaxIEC

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2054.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2054
    
----

----
;;;","23/Oct/17 10:31;githubbot;oscerd commented on issue #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054#issuecomment-338617145
 
 
   Can you rebuild here too?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 07:24;githubbot;oscerd commented on issue #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054#issuecomment-338898841
 
 
   Thanks for the PR. It has been merged on 2.20.x and master. I'm closing it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 07:24;githubbot;oscerd closed pull request #2054: CAMEL-11937 - Fix syntax for IEC 608870 component
URL: https://github.com/apache/camel/pull/2054
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc b/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc
index b91c44a4351..68ba87d2836 100644
--- a/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc
+++ b/components/camel-iec60870/src/main/docs/iec60870-client-component.adoc
@@ -55,7 +55,7 @@ with zero.
 The IEC 60870 Client endpoint is configured using URI syntax:
 
 ----
-iec60870-client:endpointUri
+iec60870-client:uriPath
 ----
 
 with the following path and query parameters:
@@ -112,4 +112,4 @@ The final connection options will be evaluated in the following order:
 * Otherwise the +defaultConnectionOptions+ instance is copied and customized in the following steps
 * Apply +protocolOptions+ if present
 * Apply +dataModuleOptions+ if present
-* Apply all explicit connection parameters (e.g. +timeZone+)
\ No newline at end of file
+* Apply all explicit connection parameters (e.g. +timeZone+)
diff --git a/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc b/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc
index 5e6fa563bf2..9ac363c6f91 100644
--- a/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc
+++ b/components/camel-iec60870/src/main/docs/iec60870-server-component.adoc
@@ -58,7 +58,7 @@ with zero.
 The IEC 60870 Server endpoint is configured using URI syntax:
 
 ----
-iec60870-server:endpointUri
+iec60870-server:uriPath
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java
index bf440abc193..498d46b5f62 100644
--- a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java
+++ b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/client/ClientEndpoint.java
@@ -30,7 +30,7 @@
  * IEC 60870 component used for telecontrol (supervisory control and data acquisition)
  * such as controlling electric power transmission grids and other geographically widespread control systems.
  */
-@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-client"", syntax = ""iec60870-client:endpointUri"",
+@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-client"", syntax = ""iec60870-client:uriPath"",
     title = ""IEC 60870 Client"", consumerClass = ClientConsumer.class, label = ""iot"")
 public class ClientEndpoint extends AbstractIecEndpoint<ClientConnectionMultiplexor> {
 
diff --git a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java
index b3688ec8746..d7756309098 100644
--- a/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java
+++ b/components/camel-iec60870/src/main/java/org/apache/camel/component/iec60870/server/ServerEndpoint.java
@@ -31,7 +31,7 @@
  * IEC 60870 component used for telecontrol (supervisory control and data acquisition)
  * such as controlling electric power transmission grids and other geographically widespread control systems.
  */
-@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-server"", syntax = ""iec60870-server:endpointUri"",
+@UriEndpoint(firstVersion = ""2.20.0"", scheme = ""iec60870-server"", syntax = ""iec60870-server:uriPath"",
     title = ""IEC 60870 Server"", consumerClass = ServerConsumer.class, label = ""iot"")
 public class ServerEndpoint extends AbstractIecEndpoint<ServerConnectionMultiplexor> {
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 07:24;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2054
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for Atomix component,CAMEL-11936,13111340,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,apupier,apupier,23/Oct/17 09:01,23/Oct/17 10:37,14/Jul/23 05:50,23/Oct/17 10:37,2.20.0,,,,,2.20.1,2.21.0,,,camel-atomix,,,,0,,,"it seems that there is an isseu with several atomix component:
atomix-value resourceName atomix-value:valueName
atomix-queue resourceName atomix-queue:queueName
atomix-map resourceName atomix-map:mapName
atomix-multimap resourceName atomix-multimap:multiMapName
atomix-messaging resourceName atomix-messaging:group",,apupier,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 23 10:36:48 UTC 2017,,,,,,,,,,,"0|i3lkv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Oct/17 09:24;githubbot;apupier opened a new pull request #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053
 
 
   Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Oct/17 09:24;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/2053

    CAMEL-11936 - Fix syntax for Atomix component

    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-11936-camel-2.20.x-FixAtomixSyntax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2053.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2053
    
----
commit d19bd9d2ce767a64dd6d5ddf694d099fbaab3324
Author: Aurélien Pupier <apupier@redhat.com>
Date:   2017-10-23T09:21:39Z

    CAMEL-11936 - Fix syntax for Atomix component
    
    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----
;;;","23/Oct/17 09:35;githubbot;lburgazzoli commented on issue #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053#issuecomment-338602950
 
 
   you should rebuild the module so that the doc get updated

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Oct/17 10:02;githubbot;apupier commented on issue #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053#issuecomment-338610278
 
 
   > you should rebuild the module so that the doc get updated
   
   PR updated to include the regenerated doc

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Oct/17 10:35;githubbot;oscerd closed pull request #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-atomix/src/main/docs/atomix-map-component.adoc b/components/camel-atomix/src/main/docs/atomix-map-component.adoc
index 25e16cc1d0b..63707ba8c2a 100644
--- a/components/camel-atomix/src/main/docs/atomix-map-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-map-component.adoc
@@ -44,7 +44,7 @@ The Atomix Map component supports 5 options which are listed below.
 The Atomix Map endpoint is configured using URI syntax:
 
 ----
-atomix-map:mapName
+atomix-map:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc b/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc
index d267d069997..25603de38a9 100644
--- a/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-messaging-component.adoc
@@ -43,7 +43,7 @@ The Atomix Messaging component supports 5 options which are listed below.
 The Atomix Messaging endpoint is configured using URI syntax:
 
 ----
-atomix-messaging:group
+atomix-messaging:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc b/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc
index b1abaef929f..3ea98e5026d 100644
--- a/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-multimap-component.adoc
@@ -43,7 +43,7 @@ The Atomix MultiMap component supports 5 options which are listed below.
 The Atomix MultiMap endpoint is configured using URI syntax:
 
 ----
-atomix-multimap:multiMapName
+atomix-multimap:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-queue-component.adoc b/components/camel-atomix/src/main/docs/atomix-queue-component.adoc
index 956d8a32f2c..f6ce996547d 100644
--- a/components/camel-atomix/src/main/docs/atomix-queue-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-queue-component.adoc
@@ -43,7 +43,7 @@ The Atomix Queue component supports 5 options which are listed below.
 The Atomix Queue endpoint is configured using URI syntax:
 
 ----
-atomix-queue:queueName
+atomix-queue:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-set-component.adoc b/components/camel-atomix/src/main/docs/atomix-set-component.adoc
index e0051c5da2f..ae84e0dc8ca 100644
--- a/components/camel-atomix/src/main/docs/atomix-set-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-set-component.adoc
@@ -43,7 +43,7 @@ The Atomix Set component supports 5 options which are listed below.
 The Atomix Set endpoint is configured using URI syntax:
 
 ----
-atomix-set:setName
+atomix-set:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/docs/atomix-value-component.adoc b/components/camel-atomix/src/main/docs/atomix-value-component.adoc
index 325fe80659a..97dd2232dcf 100644
--- a/components/camel-atomix/src/main/docs/atomix-value-component.adoc
+++ b/components/camel-atomix/src/main/docs/atomix-value-component.adoc
@@ -43,7 +43,7 @@ The Atomix Value component supports 5 options which are listed below.
 The Atomix Value endpoint is configured using URI syntax:
 
 ----
-atomix-value:valueName
+atomix-value:resourceName
 ----
 
 with the following path and query parameters:
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java
index fd566cbf80e..7d8f198b522 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/map/AtomixMapEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-map"",
     title = ""Atomix Map"",
-    syntax = ""atomix-map:mapName"",
+    syntax = ""atomix-map:resourceName"",
     consumerClass = AtomixMapConsumer.class,
     label = ""clustering"")
 class AtomixMapEndpoint extends AbstractAtomixClientEndpoint<AtomixMapComponent, AtomixMapConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java
index 6f37c41664e..d218d90398c 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/messaging/AtomixMessagingEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-messaging"",
     title = ""Atomix Messaging"",
-    syntax = ""atomix-messaging:group"",
+    syntax = ""atomix-messaging:resourceName"",
     consumerClass = AtomixMessagingConsumer.class,
     label = ""clustering"")
 final class AtomixMessagingEndpoint extends AbstractAtomixClientEndpoint<AtomixMessagingComponent, AtomixMessagingConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java
index 0206fdc715d..9c800e48339 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/multimap/AtomixMultiMapEndpoint.java
@@ -29,7 +29,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-multimap"",
     title = ""Atomix MultiMap"",
-    syntax = ""atomix-multimap:multiMapName"",
+    syntax = ""atomix-multimap:resourceName"",
     consumerOnly = true,
     label = ""clustering"")
 final class AtomixMultiMapEndpoint extends AbstractAtomixClientEndpoint<AtomixMultiMapComponent, AtomixMultiMapConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java
index 3ac4a714f97..a3c053e58f7 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/queue/AtomixQueueEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-queue"",
     title = ""Atomix Queue"",
-    syntax = ""atomix-queue:queueName"",
+    syntax = ""atomix-queue:resourceName"",
     consumerClass = AtomixQueueConsumer.class,
     label = ""clustering"")
 final class AtomixQueueEndpoint extends AbstractAtomixClientEndpoint<AtomixQueueComponent, AtomixQueueConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java
index f0f91f2dccd..93d5372df19 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/set/AtomixSetEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-set"",
     title = ""Atomix Set"",
-    syntax = ""atomix-set:setName"",
+    syntax = ""atomix-set:resourceName"",
     consumerClass = AtomixSetConsumer.class,
     label = ""clustering"")
 final class AtomixSetEndpoint extends AbstractAtomixClientEndpoint<AtomixSetComponent, AtomixSetConfiguration> {
diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java
index 152dc92f85a..12e8758d0fd 100644
--- a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java
+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueEndpoint.java
@@ -31,7 +31,7 @@
     firstVersion = ""2.20.0"",
     scheme = ""atomix-value"",
     title = ""Atomix Value"",
-    syntax = ""atomix-value:valueName"",
+    syntax = ""atomix-value:resourceName"",
     consumerClass = AtomixValueConsumer.class,
     label = ""clustering"")
 final class AtomixValueEndpoint extends AbstractAtomixClientEndpoint<AtomixValueComponent, AtomixValueConfiguration> {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Oct/17 10:35;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2053
;;;","23/Oct/17 10:36;githubbot;oscerd commented on issue #2053: CAMEL-11936 - Fix syntax for Atomix component
URL: https://github.com/apache/camel/pull/2053#issuecomment-338618304
 
 
   Thanks for the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
close JMXConnector on shutdown of JMXConsumer in camel-jmx,CAMEL-11926,13110865,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,shiggs,shiggs,20/Oct/17 03:09,20/Oct/17 07:44,14/Jul/23 05:50,20/Oct/17 07:43,,,,,,2.19.4,2.20.1,2.21.0,,camel-jmx,,,,0,,,"Close the JMXConnector when shutting down the JMXConsumer to avoid the following in an OSGi environment (jboss-cli-client fragment bundle for jmx-remoting protocol):


{code}

Caused by: java.lang.ClassNotFoundException: Unable to load class 'org.jboss.remoting3.spi.AbstractHandleableCloseable$2' because the bundle wiring for com.example.mybundle is no longer valid.

{code}
",,githubbot,shiggs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 20 07:44:01 UTC 2017,,,,,,,Patch Available,,,,"0|i3lhxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/17 03:22;githubbot;GitHub user sjhiggs opened a pull request:

    https://github.com/apache/camel/pull/2052

    CAMEL-11926: close JMXConnector on shutdown of JMXConsumer in camel-jmx

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sjhiggs/camel camel-11926

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2052.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2052
    
----
commit 752b48bae25437429da5ec87e0663fc452320815
Author: Stephen Higgs <shiggs@redhat.com>
Date:   2017-10-20T02:43:28Z

    CAMEL-11926: close JMXConnector on shutdown of JMXConsumer in camel-jmx

----
;;;","20/Oct/17 07:44;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2052
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Atmos component fails to load atmos.properties in a modular class loading environment ,CAMEL-11925,13110661,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,19/Oct/17 12:51,24/Oct/17 08:50,14/Jul/23 05:50,24/Oct/17 08:49,2.20.0,,,,,2.20.1,2.21.0,,,camel-atmos,,,,0,,,"The atmos component has a AtmosPropertyManager class which attempts to do:

{code}
AtmosPropertyManager.class.getResource(""/atmos.properties"");
{code}

This assumes the resource is available to the ClassLoader of AtmosPropertyManager. This may not be the case in OSGi or JavaEE containers.

I see there's a [TODO comment|https://github.com/apache/camel/blob/master/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java#L26] at the top of this class. So maybe we remove this class and make it so we configure these properties on the component instead?",,davsclaus,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 24 08:50:10 UTC 2017,,,,,,,,,,,"0|i3lgo7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/17 09:32;davsclaus;Yeah sure you are welcome to work on a patch;;;","24/Oct/17 08:38;githubbot;jamesnetherton opened a new pull request #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056
 
 
   https://issues.apache.org/jira/browse/CAMEL-11925

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 08:38;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/2056

    CAMEL-11925: Migrate atmos properties file configuration to component properties

    https://issues.apache.org/jira/browse/CAMEL-11925

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11925

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2056.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2056
    
----
commit 1cdd53706431f4fdbfac6294f1e2a2373ba2cc37
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-10-24T07:37:32Z

    CAMEL-11925: Migrate atmos properties file configuration to component properties

----
;;;","24/Oct/17 08:39;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338917306
 
 
   LGTM

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 08:42;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338918118
 
 
   Thanks the PR has been merged. I'm closing this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 08:42;githubbot;oscerd closed pull request #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-atmos/src/main/docs/atmos-component.adoc b/components/camel-atmos/src/main/docs/atmos-component.adoc
index 9dcbd371756..1db769c8a43 100644
--- a/components/camel-atmos/src/main/docs/atmos-component.adoc
+++ b/components/camel-atmos/src/main/docs/atmos-component.adoc
@@ -15,7 +15,19 @@ from(""atmos:foo/get?remotePath=/path"").to(""mock:test"");
 
 
 // component options: START
-The Atmos component has no options.
+The Atmos component supports 5 options which are listed below.
+
+
+
+[width=""100%"",cols=""2,5,^1,2"",options=""header""]
+|===
+| Name | Description | Default | Type
+| *fullTokenId* (security) | The token id to pass to the Atmos client |  | String
+| *secretKey* (security) | The secret key to pass to the Atmos client |  | String
+| *uri* (advanced) | The URI of the server for the Atmos client to connect to |  | String
+| *sslValidation* (security) | Whether the Atmos client should perform SSL validation | false | boolean
+| *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
+|===
 // component options: END
 
 
diff --git a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java b/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java
index 19e8233c9ea..95125fb60c2 100644
--- a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java
+++ b/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosComponent.java
@@ -18,19 +18,32 @@
 
 import java.util.Map;
 
-import org.apache.camel.Endpoint;
+import org.apache.camel.CamelContext;
 import org.apache.camel.component.atmos.util.AtmosOperation;
-import org.apache.camel.component.atmos.util.AtmosPropertyManager;
 import org.apache.camel.component.atmos.validator.AtmosConfigurationValidator;
 import org.apache.camel.impl.UriEndpointComponent;
+import org.apache.camel.spi.Metadata;
 
 public class AtmosComponent extends UriEndpointComponent {
 
+    @Metadata(label = ""security"")
+    private String fullTokenId;
+    @Metadata(label = ""security"")
+    private String secretKey;
+    @Metadata(label = ""advanced"")
+    private String uri;
+    @Metadata(label = ""security"")
+    private boolean sslValidation;
+
     public AtmosComponent() {
         super(AtmosEndpoint.class);
     }
 
-    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
+    public AtmosComponent(CamelContext context) {
+        super(context, AtmosEndpoint.class);
+    }
+
+    protected AtmosEndpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
         AtmosConfiguration configuration = new AtmosConfiguration();
 
         String name = null;
@@ -46,19 +59,19 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
 
         // set options from component
         configuration.setUri(parameters.get(""uri"") == null
-                ? AtmosPropertyManager.getInstance().getProperty(""uri"")
+                ? this.uri
                 : (String) parameters.get(""uri""));
         configuration.setSecretKey(parameters.get(""secretKey"") == null
-                ? AtmosPropertyManager.getInstance().getProperty(""secretKey"")
+                ? this.secretKey
                 : (String) parameters.get(""secretKey""));
         configuration.setLocalPath((String) parameters.get(""localPath""));
         configuration.setRemotePath((String) parameters.get(""remotePath""));
         configuration.setNewRemotePath((String) parameters.get(""newRemotePath""));
         configuration.setQuery((String) parameters.get(""query""));
         configuration.setFullTokenId(parameters.get(""fullTokenId"") == null
-                ? AtmosPropertyManager.getInstance().getProperty(""fullTokenId"")
+                ? this.fullTokenId
                 : (String) parameters.get(""fullTokenId""));
-        configuration.setEnableSslValidation(Boolean.parseBoolean(AtmosPropertyManager.getInstance().getProperty(""sslValidation"")));
+        configuration.setEnableSslValidation(this.sslValidation);
 
         //pass validation test
         AtmosConfigurationValidator.validate(configuration);
@@ -66,8 +79,50 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
         // and then override from parameters
         setProperties(configuration, parameters);
 
-        Endpoint endpoint = new AtmosEndpoint(uri, this, configuration);
-        return endpoint;
+        return new AtmosEndpoint(uri, this, configuration);
+    }
+
+    public String getFullTokenId() {
+        return fullTokenId;
+    }
+
+    /**
+     * The token id to pass to the Atmos client
+     */
+    public void setFullTokenId(String fullTokenId) {
+        this.fullTokenId = fullTokenId;
+    }
+
+    public String getSecretKey() {
+        return secretKey;
     }
 
+    /**
+     * The secret key to pass to the Atmos client
+     */
+    public void setSecretKey(String secretKey) {
+        this.secretKey = secretKey;
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    /**
+     * The URI of the server for the Atmos client to connect to
+     */
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public boolean isSslValidation() {
+        return sslValidation;
+    }
+
+    /**
+     * Whether the Atmos client should perform SSL validation
+     */
+    public void setSslValidation(boolean sslValidation) {
+        this.sslValidation = sslValidation;
+    }
 }
diff --git a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java b/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java
deleted file mode 100644
index b510064861c..00000000000
--- a/components/camel-atmos/src/main/java/org/apache/camel/component/atmos/util/AtmosPropertyManager.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.camel.component.atmos.util;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.util.Properties;
-
-public final class AtmosPropertyManager {
-
-    // TODO: this is wrong, this should be configured on the component instead
-    // and no static code please!
-
-    private static Properties properties;
-    private static AtmosPropertyManager instance;
-
-    private AtmosPropertyManager() { }
-
-    public static synchronized AtmosPropertyManager getInstance() throws Exception {
-        if (instance == null) {
-            instance = new AtmosPropertyManager();
-            properties = loadProperties();
-        }
-        return instance;
-    }
-
-    public String getProperty(String key) {
-        return properties.getProperty(key);
-    }
-
-
-    private static Properties loadProperties() throws Exception {
-        URL url = AtmosPropertyManager.class.getResource(""/atmos.properties"");
-        InputStream inStream;
-        try {
-            inStream = url.openStream();
-        } catch (IOException e) {
-            throw new AtmosException(""atmos.properties could not be found"");
-        }
-        properties = new Properties();
-        try {
-            properties.load(inStream);
-        } catch (IOException e) {
-            throw new AtmosException(""atmos.properties can't be read"");
-        }
-        return properties;
-    }
-}
diff --git a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosComponentTest.java b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosComponentTest.java
new file mode 100644
index 00000000000..5d341d90ab9
--- /dev/null
+++ b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosComponentTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.atmos;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.util.URISupport;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+import static org.junit.Assert.assertEquals;
+
+@RunWith(MockitoJUnitRunner.class)
+public class AtmosComponentTest {
+
+    private static final String FAKE_REMOTE_PATH = ""/remote"";
+    private static final String FAKE_SECRET = ""fake-secret"";
+    private static final String FAKE_TOKEN = ""fake-token"";
+    private static final String FAKE_URI = ""http://fake/uri"";
+
+    @Mock
+    private CamelContext context;
+
+    @Test
+    public void testComponentOptions() throws Exception {
+        AtmosComponent component = new AtmosComponent(context);
+        component.setFullTokenId(FAKE_TOKEN);
+        component.setSecretKey(FAKE_SECRET);
+        component.setSslValidation(false);
+        component.setUri(FAKE_URI);
+
+        Map<String, Object> parameters = new HashMap<>();
+        parameters.put(""remotePath"", FAKE_REMOTE_PATH);
+
+        AtmosEndpoint endpoint = component.createEndpoint(""atmos://foo?remotePath=/remote"", ""foo/get"", parameters);
+        AtmosConfiguration configuration = endpoint.getConfiguration();
+
+        assertEquals(FAKE_TOKEN, configuration.getFullTokenId());
+        assertEquals(FAKE_SECRET, configuration.getSecretKey());
+        assertEquals(false, configuration.isEnableSslValidation());
+        assertEquals(FAKE_URI, configuration.getUri());
+    }
+
+    @Test
+    public void testUriParamsOverrideComponentOptions() throws Exception {
+        AtmosComponent component = new AtmosComponent(context);
+        component.setFullTokenId(""fakeTokenToBeOverridden"");
+        component.setSecretKey(""fakeSecretToBeOverridden"");
+        component.setSslValidation(true);
+        component.setUri(""http://fake/uri/to/be/overridden"");
+
+        Map<String, Object> parameters = new HashMap<>();
+        parameters.put(""remotePath"", FAKE_REMOTE_PATH);
+        parameters.put(""fullTokenId"", FAKE_TOKEN);
+        parameters.put(""secretKey"", FAKE_SECRET);
+        parameters.put(""enableSslValidation"", false);
+        parameters.put(""uri"", FAKE_URI);
+
+        String uri = URISupport.appendParametersToURI(""atmos://foo"", parameters);
+        AtmosEndpoint endpoint = component.createEndpoint(uri, ""foo/get"", parameters);
+        AtmosConfiguration configuration = endpoint.getConfiguration();
+
+        assertEquals(FAKE_TOKEN, configuration.getFullTokenId());
+        assertEquals(FAKE_SECRET, configuration.getSecretKey());
+        assertEquals(false, configuration.isEnableSslValidation());
+        assertEquals(FAKE_URI, configuration.getUri());
+    }
+}
diff --git a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java
index 3bf9b7c7b25..cb587a45a03 100644
--- a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java
+++ b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/AtmosConsumerTest.java
@@ -17,6 +17,7 @@
 package org.apache.camel.component.atmos;
 
 import org.apache.camel.Consumer;
+import org.apache.camel.EndpointInject;
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.component.atmos.integration.consumer.AtmosScheduledPollGetConsumer;
 import org.apache.camel.test.junit4.CamelTestSupport;
@@ -25,25 +26,23 @@
 
 public class AtmosConsumerTest extends CamelTestSupport {
 
+    @EndpointInject(uri = ""atmos:foo/get?remotePath=/path&fullTokenId=fakeToken&secretKey=fakeSecret&uri=https://fake/uri"")
+    private AtmosEndpoint atmosEndpoint;
+
     @Override
     protected RouteBuilder createRouteBuilder() throws Exception {
         return new RouteBuilder() {
             @Override
             public void configure() throws Exception {
-                from(""atmos:foo/get?remotePath=/path"").to(""mock:test"");
+                from(atmosEndpoint)
+                    .to(""mock:test"");
             }
         };
     }
 
     @Test
     public void shouldCreateGetConsumer() throws Exception {
-        // Given
-        AtmosEndpoint atmosEndpoint = context.getEndpoint(""atmos:foo/get?remotePath=/path"", AtmosEndpoint.class);
-
-        // When
         Consumer consumer = atmosEndpoint.createConsumer(null);
-
-        // Then
         Assert.assertTrue(consumer instanceof AtmosScheduledPollGetConsumer);
         assertEquals(""foo"", atmosEndpoint.getConfiguration().getName());
     }
diff --git a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java
index 8a9a1934a31..80dbdac3514 100644
--- a/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java
+++ b/components/camel-atmos/src/test/java/org/apache/camel/component/atmos/integration/AtmosTestSupport.java
@@ -16,40 +16,29 @@
  */
 package org.apache.camel.component.atmos.integration;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
 import java.util.Properties;
 
+import org.apache.camel.CamelContext;
+import org.apache.camel.component.atmos.AtmosComponent;
 import org.apache.camel.test.junit4.CamelTestSupport;
 
 
 public class AtmosTestSupport extends CamelTestSupport {
 
-    protected final Properties properties;
-
-    protected AtmosTestSupport() throws Exception {
-        URL url = getClass().getResource(""/test-options.properties"");
-
-        InputStream inStream;
-        try {
-            inStream = url.openStream();
-        } catch (IOException e) {
-            e.printStackTrace();
-            throw new IllegalAccessError(""test-options.properties could not be found"");
-        }
-
-        properties = new Properties();
-        try {
-            properties.load(inStream);
-        } catch (IOException e) {
-            e.printStackTrace();
-            throw new IllegalAccessError(""test-options.properties could not be found"");
-        }
-    }
+    @Override
+    protected CamelContext createCamelContext() throws Exception {
+        CamelContext camelContext = super.createCamelContext();
+
+        Properties properties = new Properties();
+        properties.load(getClass().getResourceAsStream(""/atmos.properties""));
+
+        AtmosComponent component = new AtmosComponent();
+        component.setFullTokenId(properties.getProperty(""fullTokenId""));
+        component.setSecretKey(properties.getProperty(""secretKey""));
+        component.setUri(properties.getProperty(""uri""));
+        component.setSslValidation(Boolean.parseBoolean(properties.getProperty(""sslValidation"")));
+        context.addComponent(""atmos"", component);
 
-    protected String getAuthParams() {
-        return ""accessToken="" + properties.get(""accessToken"")
-                + ""&clientIdentifier="" + properties.get(""clientIdentifier"");
+        return camelContext;
     }
 }
diff --git a/components/camel-atmos/src/test/resources/atmos.properties b/components/camel-atmos/src/test/resources/atmos.properties
index 24eafb84ecd..28a0eb34140 100644
--- a/components/camel-atmos/src/test/resources/atmos.properties
+++ b/components/camel-atmos/src/test/resources/atmos.properties
@@ -17,6 +17,5 @@
 
 fullTokenId=<Subtentant_ID/UID>
 secretKey=<UID_shared_secret>
-# The uri need to valide value
-uri=http://atmos_host
-sslValidation=<true|false>
+uri=https://atmos_host
+sslValidation=true
diff --git a/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java
index 6ccf0bb04a4..6683196bf59 100644
--- a/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentConfiguration.java
@@ -32,12 +32,60 @@
             ComponentConfigurationPropertiesCommon {
 
     /**
+     * The token id to pass to the Atmos client
+     */
+    private String fullTokenId;
+    /**
+     * The secret key to pass to the Atmos client
+     */
+    private String secretKey;
+    /**
+     * The URI of the server for the Atmos client to connect to
+     */
+    private String uri;
+    /**
+     * Whether the Atmos client should perform SSL validation
+     */
+    private Boolean sslValidation = false;
+    /**
      * Whether the component should resolve property placeholders on itself when
      * starting. Only properties which are of String type can use property
      * placeholders.
      */
     private Boolean resolvePropertyPlaceholders = true;
 
+    public String getFullTokenId() {
+        return fullTokenId;
+    }
+
+    public void setFullTokenId(String fullTokenId) {
+        this.fullTokenId = fullTokenId;
+    }
+
+    public String getSecretKey() {
+        return secretKey;
+    }
+
+    public void setSecretKey(String secretKey) {
+        this.secretKey = secretKey;
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public Boolean getSslValidation() {
+        return sslValidation;
+    }
+
+    public void setSslValidation(Boolean sslValidation) {
+        this.sslValidation = sslValidation;
+    }
+
     public Boolean getResolvePropertyPlaceholders() {
         return resolvePropertyPlaceholders;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 08:42;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2056
;;;","24/Oct/17 08:43;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338918377
 
 
   @davsclaus I guess it would be useful to backport to 2.20.x too. WDYT?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 08:44;githubbot;davsclaus commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338918692
 
 
   Yeah sure the old code is clunky

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Oct/17 08:50;githubbot;oscerd commented on issue #2056: CAMEL-11925: Migrate atmos properties file configuration to component properties
URL: https://github.com/apache/camel/pull/2056#issuecomment-338920242
 
 
   Backported to 2.20.x too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
Persistent tail tracking picks random tail tracker from mongoDB collection,CAMEL-11922,13110218,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Igorko,Igorko,18/Oct/17 08:13,20/Oct/17 11:15,14/Jul/23 05:50,20/Oct/17 11:06,2.20.0,,,,,2.19.4,2.20.1,2.21.0,,camel-mongodb,camel-mongodb3,,,0,,,"Hello. issue partially was fixed in https://issues.apache.org/jira/browse/CAMEL-8063

This was fixed in initialize() but still present in persistToStore() function
Bson updateObj = Updates.set(config.field, lastVal);
dbCol.updateOne(trackingObj, updateObj);
trackingObj = dbCol.find().first();
If more then one tracker is present in one collection, after storing lastVal, each trackingObj will replaced by first one from collection. Should be
trackingObj = dbCol.find(filter).first();
Issue present in version 2.20 in both mongodb and mongodb3 component.",,davsclaus,githubbot,Igorko,,,,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 20 11:15:10 UTC 2017,,,,,,,,,,,"0|i3lec7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Oct/17 08:54;davsclaus;You are welcome to provide a fix as github PR;;;","19/Oct/17 08:32;githubbot;GitHub user igorko opened a pull request:

    https://github.com/apache/camel/pull/2049

    CAMEL-11922: Persistent tail tracking picks random tail tracker from …

    …mongoDB collection

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igorko/camel camel-2.20.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2049.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2049
    
----
commit 34b671575461bca64013af5d8f4ab5ff88e4e1ec
Author: Igor Paliychuk <mansonigor@gmail.com>
Date:   2017-10-19T08:30:33Z

    CAMEL-11922: Persistent tail tracking picks random tail tracker from mongoDB collection

----
;;;","20/Oct/17 11:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2049
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs2 not working in osgi using documented HdfsOsgiHelper,CAMEL-11920,13110041,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,valdar,valdar,17/Oct/17 17:01,18/Oct/17 10:23,14/Jul/23 05:50,18/Oct/17 06:25,2.20.0,,,,,2.19.4,2.20.1,2.21.0,,camel-hdfs2,,,,0,,,"Step to reproduce (an osgi environment like karaf or fuse is needed):
#     Unzip hdfs2-issue.zip to folder HDFS2_ISSUE_ROOT
#     mvn clean package
#     Run osgi environment (bin/karaf)
#     feature:install camel-hdfs2 (adding a feature repo might be needed)
#     install -s file:HDFS2_ISSUE_ROOT/target/generic-issue-1.jar
#     See the exception in log: 
{code:java}
2017-08-01 16:38:04,367 | ERROR | nt Dispatcher: 1 | BlueprintCamelContext            | 49 - org.apache.camel.camel-blueprint - 2.20.0.fuse-000052 | Error occurred during starting Camel Context  hdfs2-test
java.io.IOException: No FileSystem for scheme: hdfs
	at org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2644) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2651) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:92) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2687) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2669) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:371) [238:org.apache.servicemix.bundles.hadoop-client:2.7.2.1]
	at org.apache.camel.component.hdfs2.HdfsInfo.<init>(HdfsInfo.java:36) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.component.hdfs2.HdfsOutputStream.createOutputStream(HdfsOutputStream.java:49) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.component.hdfs2.HdfsProducer.setupHdfs(HdfsProducer.java:143) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.component.hdfs2.HdfsProducer.doStart(HdfsProducer.java:104) [226:org.apache.camel.camel-hdfs2:2.20.0.fuse-000052]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DeferServiceStartupListener.onCamelContextStarted(DeferServiceStartupListener.java:49) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3723) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3502) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3357) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:204) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3116) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3112) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3135) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3112) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3050) [51:org.apache.camel.camel-core:2.20.0.fuse-000052]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:244) [49:org.apache.camel.camel-blueprint:2.20.0.fuse-000052]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:284) [49:org.apache.camel.camel-blueprint:2.20.0.fuse-000052]
	at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:177) [49:org.apache.camel.camel-blueprint:2.20.0.fuse-000052]
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$4.call(BlueprintEventDispatcher.java:201) [41:org.apache.aries.blueprint.core:1.8.2]
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$4.call(BlueprintEventDispatcher.java:199) [41:org.apache.aries.blueprint.core:1.8.2]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:?]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:748) [?:?]
{code}


",,githubbot,valdar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Oct/17 17:06;valdar;hdfs2-issue.zip;https://issues.apache.org/jira/secure/attachment/12892647/hdfs2-issue.zip",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 18 10:23:43 UTC 2017,,,,,,,,,,,"0|i3ld93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Oct/17 17:13;githubbot;GitHub user valdar opened a pull request:

    https://github.com/apache/camel/pull/2044

    CAMEL-11920: camel-hdfs2 not working in osgi using documented HdfsOsg…

    …iHelper

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/valdar/camel CAMEL-11920

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2044.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2044
    
----
commit d9b6db9ff9be33f9c99cbcdfd5fb653c7c70df1f
Author: Andrea Tarocchi <atarocch@redhat.com>
Date:   2017-10-17T17:11:40Z

    CAMEL-11920: camel-hdfs2 not working in osgi using documented HdfsOsgiHelper

----
;;;","18/Oct/17 10:23;githubbot;Github user valdar closed the pull request at:

    https://github.com/apache/camel/pull/2044
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jgroups-starter : JGroupsLockClusterService auto configuration lacks enable flag,CAMEL-11917,13109926,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,17/Oct/17 09:13,17/Oct/17 09:20,14/Jul/23 05:50,17/Oct/17 09:20,2.20.0,,,,,2.20.1,2.21.0,,,camel-spring-boot-starters,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-17 09:13:52.0,,,,,,,,,,,"0|i3lcjr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jgroups-starter : JGroupsLockClusterServiceConfiguration lacks getter/setters,CAMEL-11916,13109925,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,17/Oct/17 09:09,17/Oct/17 09:20,14/Jul/23 05:50,17/Oct/17 09:20,2.20.0,,,,,2.20.1,2.21.0,,,camel-spring-boot-starters,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-17 09:09:59.0,,,,,,,,,,,"0|i3lcjj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix incorrect elasticsearch5-rest documentation and OperationTypes,CAMEL-11915,13109895,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,flemming.harms@gmail.com,flemming.harms@gmail.com,flemming.harms@gmail.com,17/Oct/17 06:40,17/Oct/17 09:03,14/Jul/23 05:50,17/Oct/17 09:03,2.21.0,,,,,2.21.0,,,,camel-elasticsearch5,,,,0,,,"Minor mistake in the new elasticsearch5-rest dokumentation.

* The operation names is wrong and should reflect the names in the ElasticsearchOperation
* The maven pom.xml example pointing to the wrong artifact

A few of the operation type is returning a incorrect Type from body
- Update should return an Object from the body instead of Map and pas it into the ElasticsearchActionRequestConverter.toUpdateRequest
- Bulk should return an Object and pas it into the ElasticsearchActionRequestConverter.toBulkRequest",,flemming.harms@gmail.com,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 17 09:02:14 UTC 2017,,,,,,,,,,,"0|i3lccv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Oct/17 08:40;githubbot;GitHub user fharms opened a pull request:

    https://github.com/apache/camel/pull/2043

    CAMEL-11915: Updating the documentation to follow the new component o…

    …perations and types
    
    - Update operation pas the body object into the
    ElasticsearchActionRequestConverter.toUpdateRequest
    - Bulk operation pas the body object into the
    ElasticsearchActionRequestConverter.toBulkRequest
    - Add missing query parameter for enable SSL. This is useful
    if you want to point out a specific instance in the cluster for
    specific routes

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fharms/camel camel-11915-fix-incorrect-elk-documentation

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2043.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2043
    
----
commit ce882ae7cfd6f91a9ab0e18e0ef0a9e3a4d64a94
Author: fharms <flemming.harms@gmail.com>
Date:   2017-10-17T08:39:46Z

    CAMEL-11915: Updating the documentation to follow the new component operations and types
    - Update operation pas the body object into the
    ElasticsearchActionRequestConverter.toUpdateRequest
    - Bulk operation pas the body object into the
    ElasticsearchActionRequestConverter.toBulkRequest
    - Add missing query parameter for enable SSL. This is useful
    if you want to point out a specific instance in the cluster for
    specific routes

----
;;;","17/Oct/17 09:02;githubbot;Github user fharms closed the pull request at:

    https://github.com/apache/camel/pull/2043
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Dropbox validator regex is too restrictive and fails for common paths,CAMEL-11912,13109650,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thagg1975,thagg1975,16/Oct/17 08:43,20/Oct/17 10:44,14/Jul/23 05:50,20/Oct/17 10:44,2.20.0,,,,,2.20.1,2.21.0,,,camel-dropbox,,,,0,easyfix,,"Most operations on the new Dropbox component (compliant to v2 API of Dropbox) has a dropbox path validator. It uses this regex (see below). 

{noformat}
/*?(\S+)/*?
{noformat} 

This regex fails in the following paths:

* ""/path with spaces/file"" - part of the test suite
* ""/Web Projects/caesars entertainment - us/#ops/one/campaigns/archive/20170919/REN_BIG_PULL_WEEKEND_20170907.csv"" - a real path that in the previous camel version (2.18.2) - v1 API was working.


It seems that modifying the regex to this one below,  (again regex form, not java) makes both paths above get a match.

{noformat}
/*?(\S+)*.+/*?
{noformat}

Please check (http://fiddle.re/f1c4fd) and let me know, patch can be provided if needed.
",all,davsclaus,thagg1975,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,Fri Oct 20 10:44:33 UTC 2017,,,,,,,,,,,"0|i3lauf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Oct/17 09:17;davsclaus;Just wonder why we have a regular exp validator in the first place?;;;","16/Oct/17 09:20;davsclaus;If its to report problems if you use a windows path style, why not just normalize the path in unix style with slashes.;;;","20/Oct/17 10:44;davsclaus;Remove the reg exp and made a simpler check for windows path separators;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-maven-plugin - validate should not include route ids as consumer urls,CAMEL-11910,13109436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Oct/17 12:44,14/Oct/17 12:49,14/Jul/23 05:50,14/Oct/17 12:49,2.20.0,,,,,2.20.1,2.21.0,,,tooling,,,,0,,,"The logic to detect duplicate route ids, causes the route ids to be included as consumer urls which the validate goal will regard as unknown component.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-14 12:44:43.0,,,,,,,,,,,"0|i3l9v3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog-maven - Cannot load out of the box components,CAMEL-11909,13109435,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Oct/17 12:23,16/Oct/17 09:14,14/Jul/23 05:50,16/Oct/17 09:14,2.20.0,,,,,2.20.1,2.21.0,,,camel-catalog,,,,0,,,If you add camel-catalog-maven as the version manager then it cannot load the OOTB components.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-14 12:23:33.0,,,,,,,,,,,"0|i3l9uv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing compile scope dependencies in camel-pgevent ,CAMEL-11906,13109257,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tdiesler,tdiesler,tdiesler,13/Oct/17 13:07,18/Oct/17 09:01,14/Jul/23 05:50,18/Oct/17 09:01,,,,,,2.20.1,2.21.0,,,,,,,0,,,,,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 18 09:01:53 UTC 2017,,,,,,,,,,,"0|i3l8rr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Oct/17 09:01;davsclaus;Thanks I fixed this;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cluster-service : FileLockClusterView should not always return local member as leader,CAMEL-11902,13108975,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,12/Oct/17 16:50,12/Oct/17 17:04,14/Jul/23 05:50,12/Oct/17 17:04,2.20.0,,,,,2.20.1,2.21.0,,,camel-core,,,,0,clustering,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-12 16:50:59.0,,,,,,,,,,,"0|i3l76n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cluster-service : only the first event listener is notified about cluster events,CAMEL-11900,13108901,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,12/Oct/17 12:24,11/Nov/17 11:42,14/Jul/23 05:50,12/Oct/17 13:13,2.20.0,,,,,2.20.1,2.21.0,,,camel-core,,,,0,clustering,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11897,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-12 12:24:50.0,,,,,,,,,,,"0|i3l6q7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-ws - Attachments are lost,CAMEL-11898,13108850,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,r.groote@beinformed.com,r.groote@beinformed.com,12/Oct/17 09:22,12/Oct/17 14:00,14/Jul/23 05:50,12/Oct/17 14:00,2.19.3,,,,,2.19.4,2.20.1,2.21.0,,camel-spring-ws,,,,0,,,"The below scenario is failing in 2.19.3 and was working 2.14.0.
May be we're doing something wrong but i cannot find out where the problem is originated.
Any help would be appreciated 

*Some debug information*
* I've debugged the code in 2.14.0 and 2.19.3 in the 'old' ConvertBodyProcessor the out was put back on the DefaultMessage
* In the SpringWebserviceConsumer (2.19.3) there is no out message after the processor. The in message is present including the attachments.
* In the BasicMessageFilter#filterConsumer(2.19.3) the out is read without checking hasOut(). I think the solution is to look if there is out available, when not available using the in message


*Scenario*
* Sending a request to a soap service in this case the spring-ws component
* A bean is responsible for retrieving some information and attachments
* The soap response no longer contains the attachment
 

*Below is part of spring configuration*
<camel:from uri=""spring-ws:uri:/contextPath/soapServices?endpointMapping=#endpointMapping""/>
<camel:to uri=""bean:someBean?method=onMessage('myMethod')"" />
<camel:convertBodyTo type=""java.lang.String""/>

*Snippet of the bean*

{code:java}
exchange.getOut().copyFrom(exchange.getIn());
exchange.getOut().setHeader(Exchange.CHARSET_NAME, CamelConstants.DEFAULT_CHARACTER_SET);
exchange.getOut().setBody(response.getResponse());
exchange.getOut().addAttachment(id, attachment.getAttachment());

{code}
",,davsclaus,githubbot,r.groote@beinformed.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 14:00:53 UTC 2017,,,,,,,,,,,"0|i3l6ev:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Oct/17 09:25;davsclaus;Yeah you are welcome to provide a github PR with a fix in that BasicMessageFilter to check for hasOut;;;","12/Oct/17 09:33;githubbot;GitHub user richardgroote opened a pull request:

    https://github.com/apache/camel/pull/2030

    CAMEL-11898: Attachment are not in the response

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/richardgroote/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2030.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2030
    
----
commit 808168a6f89d5f3fddca97e45b1671b98bbf5f80
Author: richardgroote <32516488+richardgroote@users.noreply.github.com>
Date:   2017-10-12T09:33:35Z

    CAMEL-11898: Attachment are not in the response

----
;;;","12/Oct/17 14:00;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2030
;;;","12/Oct/17 14:00;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes: cannot use the same cluster view to start a master route and a custom service,CAMEL-11897,13108830,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,12/Oct/17 08:22,11/Nov/17 11:42,14/Jul/23 05:50,11/Nov/17 11:42,,,,,,2.20.1,,,,,,,,0,,,"Using the camel-master on a route like:

{code}
from(""master:mylock:timer:clock"")
  .log(""Hello World!"");
{code}

And a custom service like:
{code}
clusterService.getView(""mylock"").addEventListener((CamelClusterEventListener.Leadership) (view, leader) -> {
  LOG.info(""The leader is {}"", leader);
});
{code}

produces an incorrect result as the route is not started, while the log is printed on the pod that becomes leader.

If I use a master route like ""master:lock1:timer:clock"" and use the view ""lock2"" in the custom service, everything works as expected.

Example here: https://github.com/nicolaferraro/camel-leader-election",,lb,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11900,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 12:38:13 UTC 2017,,,,,,,,,,,"0|i3l6af:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Oct/17 10:35;lb;This may be related to CAMEL-11899;;;","12/Oct/17 12:38;nferraro;Probably CAMEL-11900 is the original cause. Will make some tests when it's fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - set CamelLogDebugBodyMaxChars when 0 or negative,CAMEL-11896,13108785,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sam.ma,sam.ma,12/Oct/17 03:57,16/Oct/17 07:29,14/Jul/23 05:50,16/Oct/17 07:29,2.19.3,,,,,2.19.4,2.20.1,2.21.0,,camel-spring-boot,,,,0,,,"According to the [camel doc|http://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.html], the value of _CamelLogDebugBodyMaxChars_ could be 0 or negative which allows entire body to be shown in the debug log.

I noticed the following code in [CamelAutoConfiguration.java|https://github.com/apache/camel/blob/55b0124379ce4e58890c71917fb6e12b30396780/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java#L143] which only set _CamelLogDebugBodyMaxChars_ when the configuration item is positive.
{code:java}
if (config.getLogDebugMaxChars() > 0) {
    camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, """" + config.getLogDebugMaxChars());
}
{code}

To solve the issue, simply remove the if condition.
diff for the patch:
{code:none}
--- CamelAutoConfiguration.java.old	2017-10-12 14:32:42.000000000 +1100
+++ CamelAutoConfiguration.java	2017-10-12 14:32:57.000000000 +1100
@@ -140,9 +140,7 @@
         camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder());
         camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout());
 
-        if (config.getLogDebugMaxChars() > 0) {
-            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, """" + config.getLogDebugMaxChars());
-        }
+        camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, """" + config.getLogDebugMaxChars());
 
         // stream caching
         camelContext.setStreamCaching(config.isStreamCachingEnabled());
{code}
",,davsclaus,githubbot,sam.ma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Oct/17 04:00;sam.ma;CAMEL-11896.diff;https://issues.apache.org/jira/secure/attachment/12891620/CAMEL-11896.diff",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Oct 16 07:29:40 UTC 2017,,,,,,,Patch Available,,,,"0|i3l60f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Oct/17 08:56;davsclaus;Thanks, would you like to try to submit the fix as a github PR

Link from here how to do that
http://camel.apache.org/contributing;;;","15/Oct/17 23:39;githubbot;GitHub user sam-ma opened a pull request:

    https://github.com/apache/camel/pull/2040

    CAMEL-11896: set CamelLogDebugBodyMaxChars when 0 or negative

    [CAMEL-11896](https://issues.apache.org/jira/browse/CAMEL-11896): set CamelLogDebugBodyMaxChars when 0 or negative

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sam-ma/camel CAMEL-11896

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2040.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2040
    
----
commit 4cd45a26b43bc82709149c1d18e9922ffc789c2e
Author: Sam Ma <samuel.ma@vocus.com.au>
Date:   2017-10-15T23:34:07Z

    CAMEL-11896: set CamelLogDebugBodyMaxChars when 0 or negative

----
;;;","16/Oct/17 07:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2040
;;;","16/Oct/17 07:29;davsclaus;Thanks for the PR. I had to do a little adjustment and only use -1 for unlimited as spring boot assigns the value to 0 by default and we dont want to set the global option if so.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-karaf-commands deployment failed on karaf 4.0,CAMEL-11894,13108530,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,frouleau,frouleau,11/Oct/17 08:38,01/Nov/17 13:22,14/Jul/23 05:50,12/Oct/17 08:32,2.19.3,,,,,2.19.4,2.20.1,2.21.0,,camel-core,,,,0,,,"When deploying on karaf 4.0, there ar an unresolved dependencies on the following packages preventing camel-karaf-commands to be deployed:
 - org.apache.karaf.shell.api.action.lifecycle [4.1,5)
 - org.apache.karaf.shell.api.console [4.1,5)",Karaf 4.0.x,frouleau,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11974,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 09:18:38 UTC 2017,,,,,,,,,,,"0|i3l4fz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Oct/17 08:43;githubbot;GitHub user frouleau opened a pull request:

    https://github.com/apache/camel/pull/2022

    CAMEL-11894: camel-karaf-commands deployment failed on karaf 4.0

    Fix OSGi's version range for the missing package

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/frouleau/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2022.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2022
    
----
commit 0caa69cb030646210ff71cfa030a314a9b9b5621
Author: Frédérik Rouleau <frouleau@prosodie.com>
Date:   2017-10-11T08:39:53Z

    CAMEL-11894: camel-karaf-commands deployment failed on karaf 4.0

----
;;;","12/Oct/17 09:18;githubbot;Github user frouleau closed the pull request at:

    https://github.com/apache/camel/pull/2022
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpringWebserviceConsumer and class cast exception,CAMEL-11892,13108510,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,r.groote@beinformed.com,r.groote@beinformed.com,11/Oct/17 06:59,12/Oct/17 14:35,14/Jul/23 05:50,12/Oct/17 13:47,2.19.0,2.20.0,,,,2.19.4,2.20.1,,,camel-spring-ws,,,,0,,,"The org.apache.camel.component.spring.ws.SpringWebserviceConsumer.populateExchangeWithBreadcrumbFromMessageContext(MessageContext, Exchange) does a cast to SaajSoapMessage. But there are more implementation of the org.springframework.ws.WebServiceMessage. In our case it's a AxiomSoapMessage",Camel version 2.19.3 (but due to CAMEL-8351 i think it will also fail on 2.19.0),davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 14:35:07 UTC 2017,,,,,,,,,,,"0|i3l4br:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Oct/17 07:16;davsclaus;Thanks for reporting, you are welcome to work on a github PR with a fix
http://camel.apache.org/contributing;;;","11/Oct/17 13:50;githubbot;GitHub user richardgroote opened a pull request:

    https://github.com/apache/camel/pull/2026

    Update because of class cast

    See CAMEL-11892

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/richardgroote/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2026.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2026
    
----
commit 5aefbf8072d161dedfea647b53aede0c57b3d278
Author: richardgroote <32516488+richardgroote@users.noreply.github.com>
Date:   2017-10-11T13:49:58Z

    Update because of class cast
    
    See CAMEL-11892

----
;;;","12/Oct/17 07:20;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2028

    CAMEL-11892 - breadcrumbId class cast failure if other than SAAJ used…

    … as WebServiceMessage impl

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11892

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2028.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2028
    
----
commit 9da7b627f56a5cbbc10bcfe3f50fc0187ec78f8e
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2017-10-12T07:19:33Z

    CAMEL-11892 - breadcrumbId class cast failure if other than SAAJ used as WebServiceMessage impl

----
;;;","12/Oct/17 13:50;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/2028
;;;","12/Oct/17 14:35;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2026
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kie assumes that the TCCL can load its services,CAMEL-11889,13107968,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,09/Oct/17 12:59,16/Oct/17 09:16,14/Jul/23 05:50,16/Oct/17 09:16,,,,,,2.20.1,2.21.0,,,camel-optaplanner,,,,0,,,"The recent update of optaplanner comes with kit-7.3.0.final, which relies on the TCCL

https://github.com/kiegroup/droolsjbpm-knowledge/blob/7.3.0.Final/kie-api/src/main/java/org/kie/api/internal/utils/ServiceDiscoveryImpl.java#L163

Perhaps, this can be fixed at the camel-optaplanner  component level. 
",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 13 11:19:42 UTC 2017,,,,,,,,,,,"0|i3l10n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/17 15:23;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2014

    [CAMEL-11889] Kie assumes that the TCCL can load its services

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11889

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2014.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2014
    
----
commit 20eadbe7572e660fb04d7dd7fc7a52790ccce08f
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-10-09T15:22:56Z

    [CAMEL-11889] Kie assumes that the TCCL can load its services

----
;;;","10/Oct/17 04:17;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/2014
;;;","11/Oct/17 07:19;davsclaus;Thomas, you closed the PR so is there another PR coming or did the PR not work etc?;;;","11/Oct/17 07:29;tdiesler;The PR is working, but I haven't decided yet whether the correct classloader to use should be that of the Optaplaner component, the Kie API or even that of the user deployment. 

Kie caches classloaders that are associated with an arbitrary thread. This is of course highly problematic in a modular environment, where the same instance of Kie may be used by multiple modules and even multiple deployments.

Only if that what is cached is part of some static configuration (i.e. independent of deployment content) it can (reluctantly) be done at all. 
I'll revisit this at my leisure and for now agree with you, that it is not critical.;;;","13/Oct/17 08:15;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/2034

    [CAMEL-11889] Kie assumes that the TCCL can load its services

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11889

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2034.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2034
    
----
commit a790d2535e13aec3896e97cd86645bb4336450ed
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-10-09T15:22:56Z

    [CAMEL-11889] Kie assumes that the TCCL can load its services

----
;;;","13/Oct/17 11:19;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/2034
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when stopping Salesforce component that failed to start,CAMEL-11884,13107202,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,05/Oct/17 11:23,05/Oct/17 11:26,14/Jul/23 05:50,05/Oct/17 11:26,2.20.0,,,,,2.20.0,,,,camel-salesforce,,,,0,,,In {{SalesforceComponent::doStop}} we reference {{config}} that could be {{null}} if the component was configured without it and {{SalesforceComponent::createEndpoint}} was never invoked.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-10-05 11:23:25.0,,,,,,,,,,,"0|i3kwtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceDefinition.metadata not passed to RibbonServiceLoadBalancer,CAMEL-11882,13107154,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,05/Oct/17 07:59,05/Oct/17 14:30,14/Jul/23 05:50,05/Oct/17 14:30,,,,,,2.20.0,,,,camel-ribbon,,,,0,,,"I tried to write a Ribbon Load Balancer test that would send requests to two application paths on the same server and port. Because {{org.apache.camel.cloud.ServiceDefinition}} has no notion of context path, I used the {{ServiceDefinition.metadata}} to define it and in the {{serviceCall}} I used an expression {{.expression().simple(""jetty:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/${header.CamelServiceCallServiceMeta[contextPath]}"")}} to use it.
However, the test is not passing because {{RibbonServiceLoadBalancer.RibbonServerList.asRibbonServerList(List<ServiceDefinition>)}} is not passing the medata map to {{RibbonServiceDefinition}}. The test passes as expected when {{RibbonServerList.asRibbonServerList()}} is fixed.

Here is the test:

{code}

package org.apache.camel.component.ribbon.cloud;

import java.util.Collections;

import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.ribbon.RibbonConfiguration;
import org.apache.camel.impl.cloud.StaticServiceDiscovery;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class RibbonServiceCallRouteMetadataTest extends CamelTestSupport {
    @Test
    public void testServiceCall() throws Exception {
        getMockEndpoint(""mock:app1"").expectedMessageCount(1);
        getMockEndpoint(""mock:app2"").expectedMessageCount(1);
        getMockEndpoint(""mock:result"").expectedMessageCount(2);

        String out = template.requestBody(""direct:start"", null, String.class);
        String out2 = template.requestBody(""direct:start"", null, String.class);
        assertEquals(""app2"", out);
        assertEquals(""app1"", out2);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                // setup a static ribbon server list with these 2 servers to start with
                StaticServiceDiscovery servers = new StaticServiceDiscovery();
                servers.addServer(""myService"", ""localhost"", 9090, Collections.singletonMap(""contextPath"", ""app1""));
                servers.addServer(""myService"", ""localhost"", 9090, Collections.singletonMap(""contextPath"", ""app2""));

                RibbonConfiguration configuration = new RibbonConfiguration();
                RibbonServiceLoadBalancer loadBalancer = new RibbonServiceLoadBalancer(configuration);

                from(""direct:start"")
                    .serviceCall()
                        .name(""myService"")
                        .expression().simple(""jetty:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/${header.CamelServiceCallServiceMeta[contextPath]}"")
                        .loadBalancer(loadBalancer)
                        .serviceDiscovery(servers)
                        .end()
                    .to(""mock:result"");
                from(""jetty:http://localhost:9090/app1"")
                    .to(""mock:app1"")
                    .transform().constant(""app1"");
                from(""jetty:http://localhost:9090/app2"")
                    .to(""mock:app2"")
                    .transform().constant(""app2"");
            }
        };
    }
}

{code}",,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 05 08:13:53 UTC 2017,,,,,,,,,,,"0|i3kwiv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Oct/17 08:01;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2005

    CAMEL-11882: ServiceDefinition.metadata not passed to

    RibbonServiceLoadBalancer
    
    https://issues.apache.org/jira/browse/CAMEL-11882

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-11882

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2005.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2005
    
----
commit f6f16086d52b21a8a623efc44511fb836135fe6a
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-10-05T08:00:09Z

    CAMEL-11882: ServiceDefinition.metadata not passed to
    RibbonServiceLoadBalancer

----
;;;","05/Oct/17 08:13;githubbot;Github user ppalaga closed the pull request at:

    https://github.com/apache/camel/pull/2005
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Queue/Exchange parameters need to be numeric when declaring in RabbitMQ,CAMEL-11881,13107030,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hveiga,hveiga,04/Oct/17 18:55,06/Oct/17 08:32,14/Jul/23 05:50,06/Oct/17 08:32,2.19.3,,,,,2.19.4,2.20.0,,,camel-rabbitmq,,,,0,,," I am having a small issue with camel-rabbitmq component. I am trying to add a ttl to the declaration of my queue by adding the option arg.queue.x-message-ttl=5000 to the URI. That seems fine, however it seems camel parses 5000 as a String instead of an Integer and therefore I am getting an error when doing the declaration: 

reply-code=406, reply-text=PRECONDITION_FAILED - invalid arg 'x-message-ttl' for queue 'XXXX' in vhost '/': {unacceptable_type,longstr}, class-id=50, method-id=10)

We should add some special code to turn those values from String to Long before declaring. I will compile the list, add it here and work on a patch.",,davsclaus,githubbot,hveiga,thomaslehoux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 06 08:32:09 UTC 2017,,,,,,,,,,,"0|i3kvrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Oct/17 23:38;hveiga;I have found three of them and they only apply to queues:
* x-max-length
* x-message-ttl
* x-expires

I think we should do the check in this line: https://github.com/apache/camel/blob/a558f54ec070e400167af366d3e973f806634760/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQDeclareSupport.java#L63

[~davsclaus] what do you think?;;;","05/Oct/17 07:08;davsclaus;Thanks for checking. 

Yeah we can add that special logic there, where we grab those three keys from that map, and convert their value to a long type, and then leave the rest as-is.

You are very welcome to work on a PR
http://camel.apache.org/contributing;;;","06/Oct/17 00:27;githubbot;GitHub user hveiga opened a pull request:

    https://github.com/apache/camel/pull/2010

    CAMEL-11881: Handling special arguments when declaring queues

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hveiga/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2010.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2010
    
----
commit b57737e236dabf0ebf620ee9de6af9831cfe043e
Author: Veiga Ortiz, Héctor <hector.veiga-ortiz@here.com>
Date:   2017-10-06T00:16:32Z

    CAMEL-11881: Handling special arguments when declaring queues

----
;;;","06/Oct/17 00:34;hveiga;[~davsclaus] let me know if this is sufficient or I should add more checks, thanks;;;","06/Oct/17 08:30;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2010
;;;","06/Oct/17 08:32;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiCamelContextPublisher might leak Service-References,CAMEL-11876,13106659,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,laeubi,laeubi,03/Oct/17 09:48,01/Feb/18 14:46,14/Jul/23 05:50,01/Feb/18 14:46,,,,,,2.21.0,,,,osgi,,,,0,,,"OsgiCamelContextPublisher holds a Map of Service-References in its doShutdown method this map is cleared.

This could lead to problem when there are still items in the map.

Instead of clearing the map, it should be iterate+remove

{code:java}
Iterator<ServiceRegistration<?>> it = registrations.values().iterator();
    	while (it.hasNext()) {
			it.next().unregister();
			it.remove();
		}
{code}
",,davsclaus,laeubi,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 15 09:58:03 UTC 2018,,,,,,,,,,,"0|i3kthj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Oct/17 10:05;vrlgohel;Hi, 

Thanks for reporting this. Do you have an application reproducer to test this ? or how are you observing this?  Can you attach a snapshot of the memory leak suspects you have identified and attached it to the ticket ? ;;;","03/Oct/17 10:18;laeubi;No I just found this in the code while debugging another problem an found it serious enough to report. In fact there are two cases:

# The map is already empty at this point (I can't found a proof for this) then the clear is pointless
# The map is NOT empty at this point and you will have CamelContext registrations hanging around that get cleared only when the bundle stops at all

The Class also does some fancy checks to see if a CamelContext is already registered under the given name so maybe this was added to adress a problem with dangling service references? I'm just not familiar enough with camel life-cycle to guess if there are cases where a CamelCOntext is started without beeing stopped be for, so this code looks suspicious to me :-);;;","03/Oct/17 10:20;laeubi;So to reproduce this something like this must happen:

# A CamelContextService is registered by a bundle
# The doShutdown Method is called (no sure when this would happen)
# Shutdown the CamelContext
# The Service should still be there;;;","12/Jan/18 08:47;davsclaus;In the notify method it unregisters the CamelContext ;;;","12/Jan/18 08:47;davsclaus;OSGi is complex, lets leave the code as-is to avoid causing unforsen problems for others;;;","12/Jan/18 08:57;laeubi;This is nothing specific to OSGi, if you clear a Map of e.g. open Sockets instead of closing them explicitly you will leak open file descriptor.

Same here: You clear a map with ServiceRefernece so you will not be sure the serivce is unregistered until the bundle itself is stopped.

If unregistering stale reference causes problem somewhere else it should be fixed there and not hiding bugs by simply ignore the problem.

In fact OSGi is not that complex at all, but its crucial to cleanup if your done with something or you will get doomed soon or later...;;;","15/Jan/18 09:58;davsclaus;Can you submit a github PR with the changes you think is needed, then we can take a look at that;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Stomp component should not modify the destination name,CAMEL-11871,13106366,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,02/Oct/17 09:30,04/Oct/17 08:08,14/Jul/23 05:50,04/Oct/17 07:59,,,,,,2.20.0,,,,camel-stomp,,,,0,,,"Stomp Camel Component modifies the destination name passed via endpoint URI by prepending a slash to it and by replacing ':' with '/' [1]. This turns out to be problematic when targeting an ActiveMQ Artemis instance embedded in WildFly. For whatever reason, it expects queue names to start with ""jms.queue."" without the initial slash.

There is a WildFly Camel integration test demonstrating the issue: [2]

StompComponent should not assume anything about the naming scheme, because it has no control over the decisions made on the broker side.


[1] https://github.com/apache/camel/blob/98b3d7eae9959645c4bc023bf4896d036ce75642/components/camel-stomp/src/main/java/org/apache/camel/component/stomp/StompComponent.java#L57

[2] https://github.com/ppalaga/wildfly-camel/commit/15e3e6098b3976cb057f4208565296ea6bd54017#diff-bf122ce705f9ef0b3920d968d1f13f2a

",,davsclaus,dejanb,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 04 08:08:31 UTC 2017,,,,,,,,,,,"0|i3krpj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Oct/17 09:36;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/1989

    CAMEL-11871: Stomp component should not modify the destination name

    https://issues.apache.org/jira/browse/CAMEL-11871

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-11871

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1989.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1989
    
----
commit c7c5ba04dc4a3b22de6ae2c9b4ce9cc9808a731d
Author: Peter Palaga <ppalaga@redhat.com>
Date:   2017-10-02T09:33:32Z

    CAMEL-11871: Stomp component should not modify the destination name

----
;;;","02/Oct/17 10:59;dejanb;The proposed change breaks unit tests written against ActiveMQ 5.x, which expects destinations names with /topic/ or /queue/ prefixes. 
We can see how to provide more flexibility to destination name mapping. BTW. Which version of Artemis are you using? I'm guessing 1.x, as in 2.x there is a flexible address model which should eliminate this problem.;;;","03/Oct/17 09:11;ppalaga;bq. The proposed change breaks unit tests written against ActiveMQ 5.x, which expects destinations names with /topic/ or /queue/ prefixes. 

Good to know, but I still wonder whether the initial slash cannot be passed via route URI? 

bq. Which version of Artemis are you using? I'm guessing 1.x, as in 2.x there is a flexible address model which should eliminate this problem.

Yes, both WildFly 10 and 11 embed Artemis 1.x.

;;;","03/Oct/17 09:35;dejanb;I think at this point the best thing would be to introduce another configuration parameter that can turn this off, so we can keep backward compatibility and support other addressing schemes.;;;","03/Oct/17 11:49;davsclaus;Yeah good idea Dejan. However coming up with a good name for such an option can be tricky. 
And can we get this tested with Artemis 2.x. to see if that works OOTB as-is.

Then we would know the option is only needed for Artemis 1.x support;;;","03/Oct/17 13:22;ppalaga;bq. proposed change breaks unit tests written against ActiveMQ 5.x

In b81e09d [1] I checked that the stomp unit tests can be fixed to work with the proposed fix.

Backwards compatibility is a valid concern as long as the old behavior can be called correct. The old behavior is rather incorrect because it does not properly cover the whole range of the applicability of the stomp protocol. Keeping the incorrect behavior a default and making the correct behavior optional is doable but sounds strange.

[1] https://github.com/apache/camel/pull/1989/commits/b81e09da51eff29d4b17a392a9d4a4ca564d6d88;;;","04/Oct/17 07:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1989
;;;","04/Oct/17 08:08;ppalaga;For the record, why this was actually accepted:

The STOMP spec [1] says 

bq. The STOMP protocol treats destinations as opaque string and their syntax is server implementation specific.

The user knows with which STOMP broker is he speaking, hence the user should know the proper naming scheme. To the very opposite, the stomp Camel component has no info which specific stomp implementation is on the other side. Stomp Camel component can thus make no assumptions about the naming scheme.

[1] https://stomp.github.io/stomp-specification-1.2.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-bom needs <distributionManagement/>,CAMEL-11867,13106099,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,tcunning,tcunning,29/Sep/17 17:53,03/Oct/17 09:52,14/Jul/23 05:50,03/Oct/17 09:52,2.20.0,,,,,2.20.0,,,,build system,,,,0,,,"camel-bom needs a <distributionManagement/> section - getting an error trying to deploy camel :

[ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy (default-cli) on project camel-bom: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy (default-cli) on project camel-bom: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter
	at org.sonatype.nexus.maven.staging.deploy.strategy.AbstractDeployStrategy.getDeploymentRepository(AbstractDeployStrategy.java:257)
	at org.sonatype.nexus.maven.staging.deploy.strategy.DeferredDeployStrategy.deployPerModule(DeferredDeployStrategy.java:52)
	at org.sonatype.nexus.maven.staging.deploy.DeployMojo.execute(DeployMojo.java:192)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	... 20 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-bom
[Pipeline] }",,davsclaus,nferraro,tcunning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 03 09:47:49 UTC 2017,,,,,,,,,,,"0|i3kq27:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Oct/17 08:13;davsclaus;Nicola, can you take a look at this;;;","03/Oct/17 08:13;davsclaus;Tom, can you tell a bit more about what you do, what deployment are you doing and how do you get this error?;;;","03/Oct/17 09:41;nferraro;Yeah, I've talked with Tom in chat few days ago. We built a parentless BOM but it needs some distribution management from the org.apache:apache parent or from the org.apache.camel:camel project.
Tom is probably using a custom pipeline, but we need this also to publish the artifact to maven central in the 2.20 release.;;;","03/Oct/17 09:47;nferraro;I think we can let the BOM inherit from org.apache.camel:camel, because it doesn't contain dependency/dependencyManagement sections and it just declares build/release plugins other than common info about the project.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Expression Language bean doesn't throw exception when bean not found,CAMEL-11866,13106080,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,abccbaandy,abccbaandy,29/Sep/17 16:16,03/Oct/17 10:21,14/Jul/23 05:50,03/Oct/17 10:21,2.19.3,,,,,2.19.4,2.20.0,,,camel-core,,,,0,,,"
{code:java}
from(""file://input?fileName=${bean:notexist?method=notImportant}"");
{code}

this bean doesn't exist, but code run well without any exception.",,abccbaandy,onders,sarai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 03 08:32:45 UTC 2017,,,,,,,,,,,"0|i3kpxz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Sep/17 23:25;onders;Not sure if i understand your notation..;;;","30/Sep/17 02:07;abccbaandy;sry for bad description :(

I mean this router start/run without any exception, and consume all files in input folder.

But shouldn't it throw ""bean not found"" exception when start/run?;;;","03/Oct/17 08:32;sarai;If you enable trace logging in camel context you will see the exception _ClassNotFoundException_. 

First the bean is looked up in the contet and if the bean is not resolved _BlueprintContainerImpl_ will try to instante the bean by it's name. The _OsgiClassResolver_ will try to load the the class which it will not find and hence this exeption. 

The loading of a class sometimes is done as optional. So the log level is kept as _TRACE_.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using MongoDB Tailable Cursor Consumer on non-capped collection results in NullPointerException (instead of proper error message),CAMEL-11848,13105318,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fwein,fwein,27/Sep/17 06:23,27/Sep/17 13:43,14/Jul/23 05:50,27/Sep/17 13:43,2.19.3,,,,,2.19.4,2.20.0,,,camel-mongodb,camel-mongodb3,,,0,,,"When using the Camel MongoDB component with a tailable cursor consumer on a non-capped collection, you get a NullPointerException (also see http://camel.apache.org/mongodb.html#MongoDB-TailableCursorConsumer on this). While using this feature on a non-capped collection is not supported, the error message should be better (at the moment it only throws a NullPointerException because the code tries to unbox a null in a Boolean object). The code actually already has a better error message, but there is a small logic flaw that prevents the error message from showing up. See https://github.com/apache/camel/blob/camel-2.19.3/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java#L78 for the code.",,davsclaus,fwein,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 27 13:43:01 UTC 2017,,,,,,,,,,,"0|i3klaf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/17 07:08;davsclaus;You are welcome to provide a fix as a github PR
http://camel.apache.org/contributing;;;","27/Sep/17 07:08;davsclaus;Mind there is 2 mongodb components with Camel so if they both has this problem you are welcome to fix them both.;;;","27/Sep/17 12:38;fwein;Actually I forgot one part in my explanation: I think this might only affect old MongoDB versions, I tested it with 2.6. But a fix for this problem in Camel should be easy anyway.;;;","27/Sep/17 13:20;githubbot;GitHub user Frankst2 opened a pull request:

    https://github.com/apache/camel/pull/1969

    CAMEL-11848: Check for null value when getting key ""capped"" of collec…

    …tion stats (key/value might not exist in MongoDB 2.6 when it is a non-capped collection)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Frankst2/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1969.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1969
    
----
commit 62a8ce1d953cda0c1594ef556726d7d9f6aa3658
Author: Frank Wein <frank.wein@fau.de>
Date:   2017-09-27T13:17:09Z

    CAMEL-11848: Check for null value when getting key ""capped"" of collection stats (key/value might not exist in MongoDB 2.6)

----
;;;","27/Sep/17 13:23;fwein;BTW: I checked with mongodb 3.2 and 3.4, there it's fine.;;;","27/Sep/17 13:42;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1969
;;;","27/Sep/17 13:43;davsclaus;Thanks for the PR and testing;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
xtokenize and apply xslt to a string does not work  with UTF-16BE,CAMEL-11846,13105112,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,antidote2,antidote2,26/Sep/17 14:49,23/Mar/21 09:01,14/Jul/23 05:50,23/Mar/21 09:01,2.17.5,,,,,3.10.0,,,,camel-core,,,,0,,,"In XML, encoding is often provided inside <?xml ..?> tag. In general, you cannot read the tag, if you don't know the encoding, but XML Parsers support the detection of several encodings which allows them to read the tag. With that information they can read the whole file without knowing the ""charset"" in first place.

xtokenize and xslt use XmlInputFactory#createXmlStreamReader(Reader). But by providing a reader Camel tells, that it knows the encoding, so it won't be detected by the XML parser.
Also Camel sets the charset to UTF-8 if it is not provided inside a header. This makes the underlying reader fail reading UTF-16.

Using XmlInputFactory#createXmlStreamReader(InputStream) inside XMLTokenExpressionIterator works (tried in a patch). But the next xslt steps fails again because it again uses a Reader.

See Stackoverflow Question for reference:
[https://stackoverflow.com/questions/46322376/apache-camel-to-handle-encoding-declared-in-xml-file]",,antidote2,davsclaus,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13374,,,,,,,,,"09/Nov/17 12:27;antidote2;UTF-16BE (with BOM).png;https://issues.apache.org/jira/secure/attachment/12896856/UTF-16BE+%28with+BOM%29.png","09/Nov/17 12:37;antidote2;my  example looks like this (and  it's really UTF-16BE).png;https://issues.apache.org/jira/secure/attachment/12896857/my++example+looks+like+this+%28and++it%27s+really+UTF-16BE%29.png",,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 23 09:01:36 UTC 2021,,,,,,,,,,,"0|i3kk0v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Oct/17 11:11;vrlgohel;Hi Robert, 

Do you have any example or a reproducer application test case, by which you test this ? Since the changes would not involve a single file fix, it would be more helpful if you can attach a reproducer on how you are seeing the results. ;;;","09/Nov/17 12:22;antidote2;Hi Viral,

I have a workaround first: I use BufferedInputStream wrapper, so I am able to reset it later (don't need to open the file twice). I give the InputStream  to XmlStreamReader, which gives me the encoding after reading XML file prolog. Then I set it for camel on the Exchange.CHARSET_NAME header:


{code:java}
EncodingUtil.DetectedEncodingStream detectedEncodingStream = EncodingUtil.detectEncoding(inputStream, new StaxConverter().getInputFactory());
            inputStream = detectedEncodingStream.inputStream;
            exchange.getIn().setHeader(Exchange.CHARSET_NAME, detectedEncodingStream.encoding);
{code}


{code:java}
public class EncodingUtil {

    public static class DetectedEncodingStream {
        public InputStream inputStream;
        public String encoding;

        public DetectedEncodingStream(InputStream inputStream, String encoding) {
            this.inputStream = inputStream;
            this.encoding = encoding;
        }
    }

    private static final int MAX_REWINDABLE_STREAM_BUFFER = 2*4196;

    public static final Logger LOGGER = LoggerFactory.getLogger(EncodingUtil.class);

    public static DetectedEncodingStream detectEncoding(InputStream inputStream, XMLInputFactory xmlInputFactory) {
        final BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream, MAX_REWINDABLE_STREAM_BUFFER);
        bufferedInputStream.mark(MAX_REWINDABLE_STREAM_BUFFER);
        String encoding;
        XMLStreamReader xmlStreamReader = null;
        try {
            xmlStreamReader = xmlInputFactory.createXMLStreamReader(bufferedInputStream);
        } catch (XMLStreamException e) {
            throw new RuntimeException(e);
        } finally {
            try {
                bufferedInputStream.reset();
            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                try {
                    xmlStreamReader.close();
                } catch (XMLStreamException e) {
                    throw new RuntimeException(""Failed to close XmlStreamRader"", e);
                }
            }
        }

        encoding = xmlStreamReader.getCharacterEncodingScheme();
        if (encoding == null) {
            encoding = StandardCharsets.UTF_8.name();
        }
        return new DetectedEncodingStream(bufferedInputStream, encoding);
    }
}
{code}
;;;","09/Nov/17 12:32;antidote2;!UTF-16BE (with BOM).png!

Hmmm I am not able  to attach xml file here...

I think you can easily create a  test file by converting any UTF-8 XML to UTF-16BE with notepad++ for example.
;;;","09/Nov/17 12:37;antidote2;!my  example looks like this (and  it's really UTF-16BE).png!

it cannot be parsed by Camel out of the box, because it would tell XmlStreamReader, it needs to use UTF-8 as encoding, so it will fail at first bytes, which are BOM;;;","23/Mar/21 09:01;davsclaus;CAMEL-13374 fixes this as we use a xml reader that understands the encoding in the <xml> declaration;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-azure - Should work with Camel file component OOTB,CAMEL-11844,13105087,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Sep/17 13:40,26/Sep/17 13:48,14/Jul/23 05:50,26/Sep/17 13:48,2.19.0,,,,,2.19.4,2.20.0,,,camel-azure,,,,0,,,"See SO
https://stackoverflow.com/questions/46425049/camel-azure-blobserviceproducer-illegalargumentexception-unsupported-blob-type",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-09-26 13:40:48.0,,,,,,,,,,,"0|i3kjvb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to configure some URI options on DockerEndpoint ,CAMEL-11843,13105086,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,26/Sep/17 13:40,27/Sep/17 10:10,14/Jul/23 05:50,27/Sep/17 10:10,2.19.3,,,,,2.19.4,2.20.0,,,camel-docker,,,,0,,,"The docker component triggers some [custom logic|https://github.com/apache/camel/blob/master/components/camel-docker/src/main/java/org/apache/camel/component/docker/DockerComponent.java#L65] to validate URI options. 

It does not handle all of the valid set of URI options. E.g setting exchangePattern, maxTotalConnections and others, results in:

{code}
Caused by: com.github.dockerjava.api.exception.DockerClientException: bridgeErrorHandler is not a valid URI parameter
	at org.apache.camel.component.docker.DockerHelper.validateParameters(DockerHelper.java:56)
	at org.apache.camel.component.docker.DockerComponent.createEndpoint(DockerComponent.java:65)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:126)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:703)
	... 51 more
{code}",,davsclaus,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 27 10:03:13 UTC 2017,,,,,,,,,,,"0|i3kjv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/17 07:11;davsclaus;You are welcome to work on a fix. I wonder if this validation is needed at all? Or if so it should only do very specific validation of a limited set of known docker only options.

The default component will do generic validation afterwards.;;;","27/Sep/17 07:22;jamesnetherton;I'll take a look. I'll try to remove the power mock stuff from this component too.

It's my last day before holiday so I may not get back to this for a couple of weeks.
;;;","27/Sep/17 07:23;davsclaus;Thanks, do you mind fixing the validation first, as its most important. We plan to cut 2.20.0 end of this month and would like this fix to be included.;;;","27/Sep/17 08:50;jamesnetherton;Turns out this component is a little odd. The endpoint is isLenientProperties = true. 

It allows users to configure different URI options depending on the docker operation. Hence there is no fixed set of URI params.

We could change it to  isLenientProperties = false so that the generic validation kicks in. But this would throw an error on a URI like {{docker:stats?host=foo&port=bar&containerId=abc123}}, because containerId is not an @UriOption in the DockerConfiguration class.

All of the extra docker operation specific URI params can already be configured as headers. So is it ok to force users to configure these extra options only via headers instead of URI params?

;;;","27/Sep/17 09:03;davsclaus;Then its probably better to go the other way of not doing this magic validation, so its similar to other lenient properties components. Its a bit of hazzle to configure via headers. So I would remove that special validation check, and then Camel users should configure it properly;;;","27/Sep/17 09:49;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1967

    CAMEL-11843: Fix issues configuring some URI options on DockerEndpoint

    https://issues.apache.org/jira/browse/CAMEL-11843

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11843

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1967.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1967
    
----
commit 35c6e0a27cd8adfca6c0aab42b4a36f0f3cfc46f
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-09-27T09:36:04Z

    CAMEL-11843: Fix issues configuring some URI options on DockerEndpoint

----
;;;","27/Sep/17 10:03;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1967
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException when configuring camel-docker SSL options,CAMEL-11842,13105071,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,26/Sep/17 12:43,27/Sep/17 07:06,14/Jul/23 05:50,27/Sep/17 07:06,2.20.0,,,,,2.20.0,,,,camel-docker,,,,0,,,"We had the idea in CAMEL-11256 to switch to using Netty as the docker-java CmdExecFactory. As part of this work the transitive Jersey libraries from the docker-java library were excluded.

Unfortunately, it seems docker-java still depends on Jersey stuff, even when configured to use Netty. If I try to configure SSL options, I get:

{code}
Caused by: java.lang.NoClassDefFoundError: org/glassfish/jersey/SslConfigurator
	at com.github.dockerjava.core.LocalDirectorySSLConfig.getSSLContext(LocalDirectorySSLConfig.java:56)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory$InetSocketInitializer.initSsl(NettyDockerCmdExecFactory.java:340)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory$InetSocketInitializer.connect(NettyDockerCmdExecFactory.java:322)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory.connect(NettyDockerCmdExecFactory.java:220)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory.connect(NettyDockerCmdExecFactory.java:213)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory.access$000(NettyDockerCmdExecFactory.java:157)
	at com.github.dockerjava.netty.NettyDockerCmdExecFactory$1.getChannel(NettyDockerCmdExecFactory.java:183)
	at com.github.dockerjava.netty.InvocationBuilder.getChannel(InvocationBuilder.java:213)
	at com.github.dockerjava.netty.InvocationBuilder.get(InvocationBuilder.java:196)
	at com.github.dockerjava.netty.InvocationBuilder.get(InvocationBuilder.java:187)
	at com.github.dockerjava.netty.exec.ListImagesCmdExec.execute(ListImagesCmdExec.java:41)
	at com.github.dockerjava.netty.exec.ListImagesCmdExec.execute(ListImagesCmdExec.java:16)
	at com.github.dockerjava.netty.exec.AbstrSyncDockerCmdExec.exec(AbstrSyncDockerCmdExec.java:21)
	at com.github.dockerjava.core.command.AbstrDockerCmd.exec(AbstrDockerCmd.java:35)
	at org.apache.camel.component.docker.producer.DockerProducer.process(DockerProducer.java:115)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	... 46 more
Caused by: java.lang.ClassNotFoundException: org.glassfish.jersey.SslConfigurator
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 62 more 
{code}",,davsclaus,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 27 07:06:37 UTC 2017,,,,,,,,,,,"0|i3kjrr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Sep/17 12:46;davsclaus;Can you try to report this to the docker-java library;;;","26/Sep/17 12:49;jamesnetherton;As a short-term fix for standalone camel / Spring Boot, maybe we remove the Jersey exclusions from the camel-docker POM. 

The camel-docker OSGi feature should continue still work OK for non SSL usage and we could perhaps fix the SSL functionality in a future release.
;;;","26/Sep/17 13:02;jamesnetherton;I raised: https://github.com/docker-java/docker-java/issues/922;;;","26/Sep/17 13:04;davsclaus;Yeah that sounds like a plan, you are welcome to provide a PR;;;","26/Sep/17 14:46;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1963

    CAMEL-11842: CNFE when configuring camel-docker TLS options

    https://issues.apache.org/jira/browse/CAMEL-11842

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11842

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1963.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1963
    
----
commit 89e2ba937934bfd10eb1064f3efd393d14c888d0
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-09-26T13:47:44Z

    CAMEL-11842: CNFE when configuring camel-docker TLS options

----
;;;","26/Sep/17 15:07;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1963
;;;","27/Sep/17 07:06;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-websocket - Static resource returns empty body,CAMEL-11838,13104790,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Sep/17 13:57,25/Sep/17 13:59,14/Jul/23 05:50,25/Sep/17 13:59,,,,,,2.19.4,2.20.0,,,camel-websocket,,,,0,,,See CAMEL-11831,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11831,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-09-25 13:57:11.0,,,,,,,,,,,"0|i3ki1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Recent change in startup behaviour can cause camel-test-spring problems,CAMEL-11814,13104499,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,davsclaus,davsclaus,23/Sep/17 10:51,26/Sep/17 12:55,14/Jul/23 05:50,26/Sep/17 12:55,2.20.0,,,,,2.20.0,,,,camel-spring,camel-spring-boot,,,0,,,"Creating this ticket up front as I was testing CiA2 source code with 2.20.0-SNAPSHOT and have issues with a camel spring boot app, that caused the test method to be executed without CamelContext been started prior - this works fine on 2.19.x and older versions.

Its very likely the new startup/shutdown change in camel-spring / camel-spring-boot that is causing a regression problem. A bit weird our own set of unit tests at Apache Camel hasn't triggered this.

Doing some more testing on CiA2 before posting more information here.",,davsclaus,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 12:55:20 UTC 2017,,,,,,,,,,,"0|i3kg93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Sep/17 08:41;davsclaus;There are 2 examples that fails with 2.20.0 upgrade

https://github.com/camelinaction/camelinaction2/tree/master/chapter10/camel-cxf-rest-spring-boot
https://github.com/camelinaction/camelinaction2/tree/master/chapter12/xa;;;","25/Sep/17 09:02;davsclaus;Found an issue with ActiveMQ and I logged a ticket
https://issues.apache.org/jira/browse/AMQ-6822;;;","25/Sep/17 09:10;davsclaus;Okay got the XA problem fixed, now its only the spring boot testing problem.;;;","25/Sep/17 11:03;zregvart;I have found that if the {{NO_START}} flag in {{SpringCamelContext}} is not thread-local, but global the tests pass, I'll run all tests to see if this breaks anything but it seems to be a solution.;;;","26/Sep/17 06:21;davsclaus;[~zregvart] how goes?;;;","26/Sep/17 08:40;zregvart;I've changed the {{NO_START}} flag to be a global (static) {{AtomicBoolean}} this will help with race conditions between {{CamelMainRunController}} and {{SpringCamelContext/CamelContextFactoryBean}} on different threads.

This fix conditions itself upon different {{(Spring)CamelContexts}} being in different classloaders to work. As far as I'm aware this is true for {{wildfly-camel}}; and integration tests support makes sure to manage the flag in single thread.;;;","26/Sep/17 08:51;zregvart;I've discussed this change with the {{wildfly-camel}} team, a single classloader is used for SpringCamelContext, we need to use {{ThreadLocal}} and we need to control {{CamelMainRunController}} based on that.
;;;","26/Sep/17 10:04;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1961

    CAMEL-11814: makes NO_START a ThreadLocal, and ...

    ...changes the way CamelMainRunController is started
    
    We need to change NO_START flag back to ThreadLocal as there is a use
    case when it's used from a single classloader outside of the tests in
    wildfly-camel.
    
    CamelMainRunController would atempt to start CamelContext from a thread
    that does not have the NO_START flag defined (it's a ThreadLocal), so
    it can only run when CamelContext is started. It's main purpose is to
    prevent the SpringBoot application JVM from terminating so having it
    run when the CamelContext is started doesn't prevent that.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11814

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1961.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1961
    
----
commit b53773853e8fff5cad3854ed096812b844086080
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-09-26T10:03:12Z

    CAMEL-11814: makes NO_START a ThreadLocal, and ...
    
    ...changes the way CamelMainRunController is started
    
    We need to change NO_START flag back to ThreadLocal as there is a use
    case when it's used from a single classloader outside of the tests in
    wildfly-camel.
    
    CamelMainRunController would atempt to start CamelContext from a thread
    that does not have the NO_START flag defined (it's a ThreadLocal), so
    it can only run when CamelContext is started. It's main purpose is to
    prevent the SpringBoot application JVM from terminating so having it
    run when the CamelContext is started doesn't prevent that.

----
;;;","26/Sep/17 12:53;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1961
;;;","26/Sep/17 12:55;zregvart;I've merged from [PR#1961|https://github.com/apache/camel/pull/1961] into {{master}}, this way the ThreadLocal NO_START flag is preserved, and the issue with CamelMainRunController trying to start CamelContext in parallel was diverted by having the CamelMainRunController thread start after CamelContext is started (from a StartupListener).;;;",,,,,,,,,,,,,,,,,,,,,,,
Wrong check in ConnectorCatalogNexusRepository,CAMEL-11813,13104488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,zregvart,zregvart,23/Sep/17 09:03,23/Sep/17 09:13,14/Jul/23 05:50,23/Sep/17 09:13,,,,,,2.20.0,,,,,,,,0,,,"{{ConnectorCatalogNexusRepository}} at 109 checks if the return of {{loadConnectorJSonSchema}} is {{null}} but it never can be null, it could hold three null values instead.
",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 23 09:13:06 UTC 2017,,,,,,,,,,,"0|i3kg6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Sep/17 09:13;zregvart;Fixed via [PR#1953|https://github.com/apache/camel/pull/1953];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP fails to create intermediate directory,CAMEL-11811,13104411,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,chikim79,chikim79,22/Sep/17 21:18,05/Oct/17 06:36,14/Jul/23 05:50,05/Oct/17 06:36,2.18.2,,,,,2.19.4,2.20.0,,,camel-ftp,,,,0,,,"Camel Ftp fails to create intermediate directory if more than the immediate parent directory is missing.

in FtpOperations.buildDirectoryChunks,
the mkdir command for intermediate directories are being made with trailing slash.

Some ftp does not like the trailing slash with mkdir command.

",,chikim79,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 05 04:38:27 UTC 2017,,,,,,,,,,,"0|i3kfpj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Sep/17 08:27;davsclaus;Can you post some logs or something that shows this problem for you?;;;","03/Oct/17 23:12;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1999

    CAMEL-11811 - add a new simple option in case some FTP servers fails …

    …creating dir with trailing slash

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11811

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1999.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1999
    
----
commit 8fc3bd5439d0dcf625117375e5e73b86bae03487
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2017-10-03T23:08:13Z

    CAMEL-11811 - add a new simple option in case some FTP servers fails creating dir with trailing slash

----
;;;","04/Oct/17 01:06;chikim79;Sorry, the ftp server is not ours, so I do not have the logs on the server side.
Locally, the command just failed with Reply 550 (File does not exist.);;;","05/Oct/17 04:38;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1999
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Connector API assumes flat classpath,CAMEL-11798,13103826,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,21/Sep/17 06:21,22/Sep/17 09:32,14/Jul/23 05:50,21/Sep/17 07:24,2.19.3,,,,,2.19.4,2.20.0,,,camel-connector,,,,0,,,"The ConnectorModel assumes that it can load the user's ConnectorComponent from its own class loader.

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1874",,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 22 09:32:40 UTC 2017,,,,,,,,,,,"0|i3kc47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Sep/17 06:29;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1945

    [CAMEL-11798] Connector API assumes flat classpath

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11798

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1945.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1945
    
----
commit 414eb298f21ce3cf5e643a57854e7c8735b4b240
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-09-21T06:22:36Z

    [CAMEL-11798] Connector API assumes flat classpath

----
;;;","21/Sep/17 07:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1945
;;;","21/Sep/17 12:31;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1947

    [CAMEL-11798] Connector API assumes flat classpath (fix typo)

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11798m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1947.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1947
    
----
commit 201ff4185bc9aa92afd9ed55b009837d456327dd
Author: Thomas Diesler <tdiesler@redhat.com>
Date:   2017-09-21T12:31:03Z

    [CAMEL-11798] Connector API assumes flat classpath (fix typo)

----
;;;","22/Sep/17 09:32;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1947
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelMessageHistoryOutputFormat global option ignored for message history,CAMEL-11797,13103812,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,strelok1,strelok1,21/Sep/17 04:55,21/Sep/17 07:30,14/Jul/23 05:50,21/Sep/17 07:29,2.19.2,,,,,2.19.4,2.20.0,,,camel-core,,,,0,,,"CamelMessageHistoryOutputFormat global option is used in org.apache.camel.util.MessageHelper#doDumpMessageHistoryStacktrace to print a pretty message history of an exchange. However the format is ignored for all but the first line of the history. This is due to line 585 not using the ""resolved"" format from the option but the default. I will attach a patch for this.",,davsclaus,githubbot,strelok1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Sep/17 05:32;strelok1;CAMEL11797.patch;https://issues.apache.org/jira/secure/attachment/12888214/CAMEL11797.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 21 07:30:58 UTC 2017,,,,,,,Patch Available,,,,"0|i3kc13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Sep/17 05:10;strelok1;Attached patch.Thanks Tests passed.

{code}
[WARNING] Tests run: 6037, Failures: 0, Errors: 0, Skipped: 15
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11:59 min
[INFO] Finished at: 2017-09-21T15:31:43+10:00
[INFO] Final Memory: 961M/3297M
[INFO] ------------------------------------------------------------------------
{code};;;","21/Sep/17 07:08;davsclaus;Thanks for the patch.

We prefer patches as github PRs, so you are welcome to contribute using standard github way
https://github.com/apache/camel/

And there is details in the contributor guide
https://github.com/apache/camel/blob/master/CONTRIBUTING.md;;;","21/Sep/17 07:23;githubbot;GitHub user strelok1 opened a pull request:

    https://github.com/apache/camel/pull/1946

    CAMEL-11797: Change MessageHelper to use the custom message history format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/strelok1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1946.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1946
    
----
commit 42e70f6cf79967d120412d8b702e1c6c18f98ebd
Author: Roman Rodov <roman.rodov@iag.com.au>
Date:   2017-09-21T07:22:56Z

    CAMEL-11797: Change MessageHelper to actually use the custom message history format for lines > 1

----
;;;","21/Sep/17 07:24;strelok1;Thanks [~davsclaus]. Opened https://github.com/apache/camel/pull/1946;;;","21/Sep/17 07:29;davsclaus;Thanks for reporting and the PR;;;","21/Sep/17 07:30;githubbot;Github user strelok1 closed the pull request at:

    https://github.com/apache/camel/pull/1946
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-box component occasionally hangs,CAMEL-11793,13103530,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fjollberg,fjollberg,20/Sep/17 08:12,20/Sep/17 10:31,14/Jul/23 05:50,20/Sep/17 08:55,2.19.2,,,,,2.20.0,,,,camel-box,,,,0,,,"I'd like to update the Box Java SDK on which the camel-box component is built to the newly released version 2.8.1. Bug/Improvement borderline case.

This is due to the fix to https://github.com/box/box-java-sdk/issues/466 included in this version which allows a user to set timeouts to avoid blocking threads due to network issues. This is an issue which does occur in our production environment.

Pull request will follow shortly.

NOTE: I do not have access to a proper Box test site against which I can run all integration tests. I've contacted Box.com to see if that is possible, but thus far I've only done semi-manual testing of the user manager parts of the component which I am using.

This seems fine so far, but I obviously needed to change a call in the file manager part to get the code to compile. A minor change, but a change I've thus not tested properly, as I've not been able to regression test any of the other functionality yet.

I hope someone else have access to such an integration test environment and can run the tests properly.",,davsclaus,fjollberg,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 20 10:31:40 UTC 2017,,,,,,,,,,,"0|i3kaa7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Sep/17 08:17;githubbot;GitHub user fjollberg opened a pull request:

    https://github.com/apache/camel/pull/1943

    CAMEL-11793: Update Box Java SDK to version 2.8.1

    This is in order to be able to set timeouts properly for the Box client to avoid hanging threads due to network issues.
    
    See https://github.com/box/box-java-sdk/issues/466

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fjollberg/camel box-com-sdk-281

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1943.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1943
    
----
commit cb80dc1512c59e9258a2f1a34beeba29dba477d2
Author: Fredrik Jönsson <fjo@kth.se>
Date:   2017-09-20T08:13:29Z

    CAMEL-11793: Update Box Java SDK to version 2.8.1

----
;;;","20/Sep/17 08:55;davsclaus;Thanks for the PR;;;","20/Sep/17 10:31;githubbot;Github user fjollberg closed the pull request at:

    https://github.com/apache/camel/pull/1943
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New ftp connection for each file transfer with tempFileName option in URI,CAMEL-11792,13103508,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,himanshu,himanshu,20/Sep/17 06:06,18/Dec/17 13:37,14/Jul/23 05:50,18/Dec/17 13:37,2.14.0,2.19.2,,,,2.20.2,2.21.0,,,camel-ftp,,,,1,,,"When we have {{tempFilename}} in camel uri and we use producer template to write file to remote ftp location , camel opens new connection for every file transfer. Though disconnect option is set to false in uri.
If we take out tempFilename from uri connections are reused

We can verify it by running attached sample. 
Check the connections made from camel server to ftp server . Fire {{netstat -an|grep 10.80.14.56|wc -l]] 
- When we have tempFileName in uri it will show 1 connection per file transfer
- Without tempFileName it will show only 1 connection for all files transfer.",,davsclaus,ggrzybek,himanshu,sermojohn,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8860,,,,,,,,,"20/Sep/17 06:10;himanshu;TestFTPConnection.java;https://issues.apache.org/jira/secure/attachment/12888020/TestFTPConnection.java",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 18 13:37:56 UTC 2017,,,,,,,,,,,"0|i3ka5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Sep/17 06:10;himanshu;Sample program to reproduce the issue
;;;","20/Sep/17 06:10;ggrzybek;In relation to CAMEL-8860 - thanks for verifying.;;;","27/Nov/17 00:46;sermojohn;Hello! I spent some time on this issue. 

I searched a bit how Camel creates new endpoints and when running the example code, it does not create multiple endpoints. So IMHO a single endpoint instance that uses a single FTP client instance is used for all ftp calls.

So I ended up checking the Apache FTP client on which the camel-ftp component depends. The library seems to intentionally open two (control & data) connections for each FTP command, while a Camel endpoint might require one or more FTP command to complete. So, to me, it is clear that this is a limitation of the library.

Maybe this could be made possible by implementing a wrapper SocketFactory and ServerSocketFactory that would reuse the connections instead of closing them. But this seems more like a work-around. Maybe other FTP client implementations do not have this limitation.

On the other side, I am wondering if such an approach of unifying all the FTP connections into one connection, is a good idea. This will probably affect the throughput because all the socket reads and writes will need to be serialized (socket not thread-safe). Or maybe this is a limitation of the FTP protocol itself.

What do you think? I would volunteer to work on an agreed solution/fix/work-around.
;;;","04/Dec/17 05:34;himanshu;I debugged this camel-ftp code further and figured out the root cause. 
In {{org.apache.camel.component.file.GenericFileProducer}} 's {{processExchange}} method.
During temp file creation there is a check to delete pre existing temp file. 
operation.existFile(tempTarget)  will invoke client.listNames(name) from commons.net. And it creates a connection internally 
{code}
 // delete any pre existing temp file
                if (operations.existsFile(tempTarget)) {
                    log.trace(""Deleting existing temp file: {}"", tempTarget);
                    if (!operations.deleteFile(tempTarget)) {
                        throw new GenericFileOperationFailedException(""Cannot delete file: "" + tempTarget);
                    }
                }
{code}
 Now if this check is conditional based on {{fileExist}} check in endpoint. We can avoid additional connection and socket in TIME_WAIT;;;","18/Dec/17 12:58;davsclaus;Thanks for digging into this;;;","18/Dec/17 13:02;davsclaus;Yeah it looks like we should skip that part of code if the fileExists=TryRename as this is what the option was intended for, just to try without any exists check. ;;;","18/Dec/17 13:37;davsclaus;Use fileExists=TryRename and the new connection should not happen;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Producer/Consumer does not recover if exchange/queue is deleted manually,CAMEL-11791,13103393,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hveiga,hveiga,19/Sep/17 21:48,26/Sep/17 06:35,14/Jul/23 05:50,26/Sep/17 06:35,2.19.2,,,,,2.19.4,2.20.0,,,camel-rabbitmq,,,,0,,,"While trying different recovering scenarios with camel-rabbitmq we tried to delete the exchange where the producer was sending RabbitMQ messages to.

We observed that the exchange was never recreated again as well as no new channel were created in the channel pool. Every time a channel was used to send a non-existent exchange, the channel was closed and we got a log saying ""Got a closed channel from the pool"". Once it ran out of channels in the pool, we keep getting the same exception when a new message tries to be sent to the exchange:

{noformat}
Caused by: java.util.NoSuchElementException: Timeout waiting for idle object
at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1174) ~[commons-pool-1.6.jar:1.6]
{noformat}

We are using a InOnly producer and the options we are using are: 
{noformat}
rabbitmq://somehose:someport/some_exchange?username=SomeApp&password=SomeApp&skipQueueDeclare=true&exchangeType=headers&automaticRecoveryEnabled=true&topologyRecoveryEnabled=true
{noformat}

It seems the code never catches a Exception thrown by channel.basicPublish(...) in RabbitMQMessagePublisher. Maybe we could catch if the issue is that the exchange got deleted and run the exchange declaration again?",,davsclaus,githubbot,hveiga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 06:35:00 UTC 2017,,,,,,,,,,,"0|i3k9fr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Sep/17 09:21;davsclaus;Yeah sure we love contributions, so you are welcome to dive into the source code and try to improve this
http://camel.apache.org/contributing;;;","21/Sep/17 21:29;hveiga;Thanks [~davsclaus] . I am working on the enhancement and see if I can provide a pull request in github in the coming days.;;;","25/Sep/17 18:51;githubbot;GitHub user hveiga opened a pull request:

    https://github.com/apache/camel/pull/1957

    CAMEL-11791: Enhanced reconnection for rabbitmq consumer and producer…

    … (including queue/exchange deletion)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hveiga/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1957.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1957
    
----
commit 79dadaa8ec98c3ab23dbb5b17bae3ade816bbf52
Author: Veiga Ortiz, Héctor <hector.veiga-ortiz@here.com>
Date:   2017-09-25T18:47:18Z

    CAMEL-11791: Enhanced reconnection for rabbitmq consumer and producer (including queue/exchange deletion)

----
;;;","25/Sep/17 20:24;hveiga;I would appreciate if this could become part of release 2.19.4. Please let me know if I missed anything.;;;","26/Sep/17 06:34;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1957
;;;","26/Sep/17 06:35;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CompositeApiClient cannot handle null ResponseStream,CAMEL-11785,13103162,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dickengeorge,dickengeorge,19/Sep/17 07:36,19/Sep/17 15:29,14/Jul/23 05:50,19/Sep/17 11:37,2.19.3,,,,,2.19.4,2.20.0,,,camel-salesforce,,,,0,,,"The class DefaultCompositeApiClient cannot handle null responsestream send out during an update process.

Need to handle null as a valid response format other than Json and XML",,davsclaus,dickengeorge,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 19 15:29:18 UTC 2017,,,,,,,,,,,"0|i3k813:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Sep/17 07:50;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1939

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    CompositeApiClient doesnt treat null as a valid response for a composite batch call. It currently handles only Json and XML format. However, null is a valid response for an update composite batch query. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1939.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1939
    
----
commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

commit e7bddc8cdec93cf7a194bb80da2324875344709a
Author: Guy Veraghtert <guy.veraghtert@aca-it.be>
Date:   2017-05-15T13:22:19Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 5ab2c8d830af4842d331c08b79c67d5ba731171c
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T08:39:11Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 785d2b32d13e2807b50df081708f523c1ef9b2dc
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:09:18Z

    Camel-hystrix test, which checks if the Hystrix in the route is
    short-circuited after some errors.

commit 398f14bf41a346b8be1728b1fff477b48d0df97b
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:51:21Z

    Fixing source stile

commit 51da163c6b2834858952f2f1d2fe833ffcce6f93
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T13:21:43Z

    Fixing Camel hystrix issue:
    https://issues.apache.org/jira/browse/CAMEL-11279

commit 31eb7d688b8a0a6b77df61f4b2948003b18af1e8
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:00:47Z

    CAMEL-11279: Polished

commit 750d7aa71131c4c222e60029a7ffeb988a380c6d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:35:49Z

    CAMEL-11283: camel-hystrix-starter - The circuitBreakerForceClose option is default true which should be false

commit e92502113f0a10e90a2bee4051027847bedf3ee2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:26:51Z

    CAMEL-11279: Updated hystrix example

commit a3060338952095f8793ddb3efaa10cd8b329ff6e
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:45:42Z

    CAMEL-11279: Fixed test

commit 921fa67da22406de8687c98112c9fa5075382d51
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:42:43Z

    CAMEL-11279: Fixed CS

commit 4d7d173059c2209f7943a40d574803122d4e1062
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-16T11:37:09Z

    CAMEL-11265: Fix maven warning about fork option

commit 1572b3de455d51bbf31dc6613f1b80432b8fbccb
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:48:33Z

    CAMEL-11272: ReloadStrategySupport wrongly logs

commit ccdfa1a02c60f77be93dafd21488f16da4899baa
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:52:15Z

    CAMEL-11273: Allow to load routeContext with live reload routes from xml files support. Thanks to Ronny Aerts for the patch. This closes #1693

commit 445ef3d835e4e21a68a84638451b4e8810f8fc81
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:46:36Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit 221e0f25fa912ef5192dd4d7f6ea634f8af90b8d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:52:05Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit bc186de0910315abdc50a8c5c80b022911461520
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-16T16:05:19Z

    CAMEL-11289: camel-ehcache: allow to configure cache manager on component

commit 18ac6527911b65c54be4e72db14025c120dd30a6
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-05-16T16:09:09Z

    CAMEL-11288: camel-grpc producer incorrectly called async services

commit 6d820defcb8752566b501ceec8e74bb01143fff5
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-18T19:29:26Z

    Add schema references for release 2.17.7
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 04c4de84687579b1f26fb536c21b0ad90d1fbeb1
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T10:18:57Z

    CAMEL-11235: Resolved an issue where a method inherited from a superclass overrides a superinterface method

commit aef52c315e5fcd8a9bb2d538606ac32a1372e2fc
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T11:13:15Z

    CAMEL-11235: Used the new override from getMethodInfo(...)

commit 5f40bbb4b8a03ea588d70135cf93154c928964af
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:23:51Z

    CAMEL-11235: Added unit test. This closes #1703

commit 68ba27f2c507a5f3890fa682aa3eb3b0f286e2cd
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:42:57Z

    Upgrade artemis

commit f96c5823254b8a2caf5ba716961b5d658f32de9b
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:53:24Z

    Fixed test on osx

commit 6e7b709334c56365b8526cacf5975c3829d508f3
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-21T16:56:48Z

    CAMEL-11305: camel-test - Using dump route coverage with custom processor may cause NPE

----
;;;","19/Sep/17 09:25;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1939
;;;","19/Sep/17 09:55;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1939

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    CompositeApiClient doesnt treat null as a valid response for a composite batch call. It currently handles only Json and XML format. However, null is a valid response for an update composite batch query. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1939.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1939
    
----
commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

commit e7bddc8cdec93cf7a194bb80da2324875344709a
Author: Guy Veraghtert <guy.veraghtert@aca-it.be>
Date:   2017-05-15T13:22:19Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 5ab2c8d830af4842d331c08b79c67d5ba731171c
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T08:39:11Z

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES to Import-Package osgi header

commit 785d2b32d13e2807b50df081708f523c1ef9b2dc
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:09:18Z

    Camel-hystrix test, which checks if the Hystrix in the route is
    short-circuited after some errors.

commit 398f14bf41a346b8be1728b1fff477b48d0df97b
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:51:21Z

    Fixing source stile

commit 51da163c6b2834858952f2f1d2fe833ffcce6f93
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T13:21:43Z

    Fixing Camel hystrix issue:
    https://issues.apache.org/jira/browse/CAMEL-11279

commit 31eb7d688b8a0a6b77df61f4b2948003b18af1e8
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:00:47Z

    CAMEL-11279: Polished

commit 750d7aa71131c4c222e60029a7ffeb988a380c6d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T09:35:49Z

    CAMEL-11283: camel-hystrix-starter - The circuitBreakerForceClose option is default true which should be false

commit e92502113f0a10e90a2bee4051027847bedf3ee2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:26:51Z

    CAMEL-11279: Updated hystrix example

commit a3060338952095f8793ddb3efaa10cd8b329ff6e
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:45:42Z

    CAMEL-11279: Fixed test

commit 921fa67da22406de8687c98112c9fa5075382d51
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T10:42:43Z

    CAMEL-11279: Fixed CS

commit 4d7d173059c2209f7943a40d574803122d4e1062
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-16T11:37:09Z

    CAMEL-11265: Fix maven warning about fork option

commit 1572b3de455d51bbf31dc6613f1b80432b8fbccb
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:48:33Z

    CAMEL-11272: ReloadStrategySupport wrongly logs

commit ccdfa1a02c60f77be93dafd21488f16da4899baa
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T12:52:15Z

    CAMEL-11273: Allow to load routeContext with live reload routes from xml files support. Thanks to Ronny Aerts for the patch. This closes #1693

commit 445ef3d835e4e21a68a84638451b4e8810f8fc81
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:46:36Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit 221e0f25fa912ef5192dd4d7f6ea634f8af90b8d
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-16T14:52:05Z

    CAMEL-11287: MDC routeId value is lost after calling a direct route from a transacted route

commit bc186de0910315abdc50a8c5c80b022911461520
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-16T16:05:19Z

    CAMEL-11289: camel-ehcache: allow to configure cache manager on component

commit 18ac6527911b65c54be4e72db14025c120dd30a6
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-05-16T16:09:09Z

    CAMEL-11288: camel-grpc producer incorrectly called async services

commit 6d820defcb8752566b501ceec8e74bb01143fff5
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-18T19:29:26Z

    Add schema references for release 2.17.7
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 04c4de84687579b1f26fb536c21b0ad90d1fbeb1
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T10:18:57Z

    CAMEL-11235: Resolved an issue where a method inherited from a superclass overrides a superinterface method

commit aef52c315e5fcd8a9bb2d538606ac32a1372e2fc
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T11:13:15Z

    CAMEL-11235: Used the new override from getMethodInfo(...)

commit 5f40bbb4b8a03ea588d70135cf93154c928964af
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:23:51Z

    CAMEL-11235: Added unit test. This closes #1703

commit 68ba27f2c507a5f3890fa682aa3eb3b0f286e2cd
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:42:57Z

    Upgrade artemis

commit f96c5823254b8a2caf5ba716961b5d658f32de9b
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-20T13:53:24Z

    Fixed test on osx

commit 6e7b709334c56365b8526cacf5975c3829d508f3
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-21T16:56:48Z

    CAMEL-11305: camel-test - Using dump route coverage with custom processor may cause NPE

----
;;;","19/Sep/17 09:56;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1939
;;;","19/Sep/17 09:58;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1940

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    The DefaultCompositeApiClient class didnt consider null as a valid response stream and was only considering Json and XML format. But it has to also handle null responses, incase we have an update query.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DG007/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1940.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1940
    
----
commit 3f49257f0e37b0fcff009820795e6bf68ed6249d
Author: GeorgeD <georged@hgdeclfr002861.grp.haufemg.com>
Date:   2017-09-19T09:54:50Z

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

----
;;;","19/Sep/17 11:37;davsclaus;Thanks for the PR;;;","19/Sep/17 11:38;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1940
;;;","19/Sep/17 11:40;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1940

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

    The DefaultCompositeApiClient class didnt consider null as a valid response stream and was only considering Json and XML format. But it has to also handle null responses, incase we have an update query.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DG007/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1940.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1940
    
----
commit 3f49257f0e37b0fcff009820795e6bf68ed6249d
Author: GeorgeD <georged@hgdeclfr002861.grp.haufemg.com>
Date:   2017-09-19T09:54:50Z

    CAMEL-11785: CompositeApiClient cannot handle null resposnestream

----
;;;","19/Sep/17 15:28;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1940
;;;","19/Sep/17 15:29;dickengeorge;Problem is now fixed and merged with versions 2.20.0 and 2.19.4;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-facebook should not transitively depend on spi-annotations,CAMEL-11779,13102764,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,ceefour,ceefour,16/Sep/17 12:09,18/Sep/17 13:28,14/Jul/23 05:50,18/Sep/17 13:28,2.19.3,,,,,2.20.0,,,,camel-facebook,,,,0,,,"{noformat}
[WARNING] spi-annotations-2.19.3.jar, camel-core-2.19.3.jar define 7 overlapping classes: 
[WARNING]   - org.apache.camel.spi.UriParam
[WARNING]   - org.apache.camel.spi.UriEndpoint
[WARNING]   - org.apache.camel.spi.UriParams
[WARNING]   - org.apache.camel.spi.UriPath
[WARNING]   - org.apache.camel.spi.AsPredicate
[WARNING]   - org.apache.camel.spi.AsEndpointUri
[WARNING]   - org.apache.camel.spi.Metadata
[WARNING] maven-shade-plugin has detected that some class files are
[WARNING] present in two or more JARs. When this happens, only one
[WARNING] single version of the class is copied to the uber jar.
{noformat}

While harmless, it'd be appreciated if there's no duplication, so there's no warning and saves space (in unshaded builds).",,ceefour,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 18 13:28:43 UTC 2017,,,,,,,,,,,"0|i3k5lr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Sep/17 09:40;davsclaus;This is by design where those spi annotations are built first before camel-core;;;","18/Sep/17 09:45;ceefour;But wait, if that is true then the classes should not be in camel-core, right? Since it depends on spi-annotations anyway.;;;","18/Sep/17 09:49;davsclaus;No we shade/copy them in;;;","18/Sep/17 09:58;ceefour;But if that's also true, why end applications need to depend on spi-annotations ?

You should mark it, say, optional=true. So that camel-core can still depend on it but does not make it transitive to the users (apps) of camel.;;;","18/Sep/17 10:06;davsclaus;They are not transitive, look at the pom on maven central
https://repo1.maven.org/maven2/org/apache/camel/camel-core/2.19.3/camel-core-2.19.3.pom

And the maven tree of an example is

{code}
davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-console (master)/$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Console 2.20.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.10:tree (default-cli) @ camel-example-console ---
[INFO] org.apache.camel.example:camel-example-console:jar:2.20.0-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.20.0-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.7.22:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.20.0-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-core:jar:4.3.11.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  +- org.springframework:spring-aop:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-context:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-beans:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-expression:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-tx:jar:4.3.11.RELEASE:compile
[INFO] +- org.apache.camel:camel-stream:jar:2.20.0-SNAPSHOT:compile
[INFO] +- org.apache.logging.log4j:log4j-api:jar:2.8.2:runtime
[INFO] +- org.apache.logging.log4j:log4j-core:jar:2.8.2:runtime
[INFO] +- org.apache.logging.log4j:log4j-slf4j-impl:jar:2.8.2:runtime
[INFO] +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
{code}
;;;","18/Sep/17 12:26;ceefour;Aha, I think I found it :

{noformat}
[INFO] +- org.apache.camel:camel-core:jar:2.19.3:compile
[INFO] |  +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] |  \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
[INFO] +- org.apache.camel:camel-spring-javaconfig:jar:2.19.3:compile
[INFO] |  +- org.apache.camel:camel-spring:jar:2.19.3:compile
[INFO] |  |  +- org.springframework:spring-aop:jar:4.3.11.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-context:jar:4.3.11.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-beans:jar:4.3.11.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-expression:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.apache.servicemix.bundles:org.apache.servicemix.bundles.cglib:jar:3.2.4_1:compile
[INFO] +- org.apache.camel:camel-rss:jar:2.19.3:compile
[INFO] |  +- org.apache.camel:camel-atom:jar:2.19.3:compile
[INFO] |  |  +- commons-codec:commons-codec:jar:1.10:compile
[INFO] |  |  +- org.apache.abdera:abdera-core:jar:1.1.3:compile
[INFO] |  |  |  +- org.apache.abdera:abdera-i18n:jar:1.1.3:compile
[INFO] |  |  |  \- org.apache.geronimo.specs:geronimo-activation_1.1_spec:jar:1.1:compile
[INFO] |  |  +- org.apache.abdera:abdera-parser:jar:1.1.3:compile
[INFO] |  |  |  +- org.apache.geronimo.specs:geronimo-stax-api_1.0_spec:jar:1.0.1:compile
[INFO] |  |  |  \- jaxen:jaxen:jar:1.1.6:compile
[INFO] |  |  +- org.apache.ws.commons.axiom:axiom-api:jar:1.2.14:compile
[INFO] |  |  |  \- org.apache.james:apache-mime4j-core:jar:0.7.2:compile
[INFO] |  |  \- org.apache.ws.commons.axiom:axiom-impl:jar:1.2.14:compile
[INFO] |  |     \- org.codehaus.woodstox:woodstox-core-asl:jar:4.1.4:compile
[INFO] |  |        \- org.codehaus.woodstox:stax2-api:jar:3.1.1:compile
[INFO] |  \- rome:rome:jar:1.0:compile
[INFO] |     \- jdom:jdom:jar:1.0:compile
[INFO] +- org.apache.camel:camel-facebook:jar:2.19.3:compile
[INFO] |  +- org.apache.camel:spi-annotations:jar:2.19.3:compile
[INFO] |  \- org.facebook4j:facebook4j-core:jar:2.4.8:compile
[INFO] +- org.apache.camel:camel-spring-boot-starter:jar:2.19.3:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.5.7.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.5.7.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:1.5.7.RELEASE:compile
[INFO] |  |  \- org.springframework.boot:spring-boot-starter-logging:jar:1.5.7.RELEASE:compile
[INFO] |  |     \- org.slf4j:log4j-over-slf4j:jar:1.7.25:compile
[INFO] |  +- org.apache.camel:camel-spring-boot:jar:2.19.3:compile
[INFO] |  \- org.apache.camel:camel-core-starter:jar:2.19.3:compile
[INFO] |     \- com.github.ben-manes.caffeine:caffeine:jar:2.3.5:compile
[INFO] +- org.apache.camel:camel-test-spring:jar:2.19.3:test
[INFO] |  +- org.apache.camel:camel-test:jar:2.19.3:test
[INFO] |  \- org.springframework:spring-test:jar:4.3.11.RELEASE:test
{noformat}

I think the bug is in camel-facebook's pom. I don't see spi-annotations depended by other camel artifacts.;;;","18/Sep/17 13:28;davsclaus;Thanks yeah that is a mistake, just fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Sjms with Artemis causes NullPointerException due to a ClassCastException,CAMEL-11772,13101661,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wilhelmd,wilhelmd,12/Sep/17 14:12,15/Sep/17 14:12,14/Jul/23 05:50,13/Sep/17 07:47,2.19.0,2.19.1,2.19.2,,,2.18.5,2.19.4,2.20.0,,camel-sjms,,,,0,,,"When using a camel-sjms endpoint with an Apache Artemis broker, the sjms endpoint will throw a NullPointerException in the org.apache.camel.component.sjms.consumer.AbstractMessageHandler.onMessage method.  However, this exception is actually masking the real exception within sjms.  In SjmsMessage.java the method getDestinationAsString gets called with a javax.jms.Destination object.  In this case, it is a org.apache.activemq.artemis.jms.client.ActiveMQDestination.  The ActiveMQDestination is neither a javax.jms.Topic nor a javax.jms.Queue.  In the getDestinationAsString method in SjmsMessage.java, it first checks to see if the destination is a Topic and then if it is not it blindly casts to a javax.jms.Queue and in this case causes a ClassCastException.",,davsclaus,githubbot,wilhelmd,,,,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 15 14:02:42 UTC 2017,,,,,,,,,,,"0|i3jywf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Sep/17 14:21;githubbot;GitHub user derekwilhelm opened a pull request:

    https://github.com/apache/camel/pull/1932

    CAMEL-11772 - Fix potential ClassCastException in SjmsMessage.java

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/derekwilhelm/camel CAMEL-11772

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1932.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1932
    
----
commit b9baeba2128d9ef6d67c4651033e982e6e945665
Author: derekwilhelm <derek.wilhelm@connexta.com>
Date:   2017-09-12T14:19:06Z

    CAMEL-11772 - Fix potential ClassCastException in SjmsMessage.java

----
;;;","12/Sep/17 14:24;davsclaus;Thanks for reporting. Yeah it looks like Artemis is just a javax.jms.Destination that is neither a queue or a topic, so its a bit hard to delude what it is, via regular javax jms apis - :(

https://github.com/apache/activemq-artemis/blob/master/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQDestination.java

;;;","12/Sep/17 14:28;davsclaus;Its the same problem with Artemis in camel-jms
https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java#L256;;;","12/Sep/17 14:30;davsclaus;We need to do

1) that class cast fix from the PR
2) if the returned id is null, then call return super.createMessageId() in the createMessageId method

This fix needs in camel-jms, camel-sjms and camel-sjms2


;;;","12/Sep/17 15:17;wilhelmd;I updated the PR to include a check if the getDestinationAsString method returns null in both camel-sjms and camel-jms.  camel-sjms2 looks like it uses camel-sjms for this piece so it should be covered by the fix to camel-sjms.;;;","13/Sep/17 07:47;davsclaus;Thanks for reporting and the PR;;;","15/Sep/17 14:02;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1932
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hazelcast-starter : hazelcast customizer have been deleted,CAMEL-11769,13101224,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,11/Sep/17 10:41,11/Sep/17 11:22,14/Jul/23 05:50,11/Sep/17 11:22,,,,,,2.20.0,,,,camel-spring-boot-starters,,,,0,,,"This commit has removed all the *Customizers associated to the camel-hazelcast-starter:

    https://github.com/apache/camel/commit/c51fe42eb5e407aa7473abee71ce941e0553f233

Such classes are manually added to the starter.",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-09-11 10:41:14.0,,,,,,,,,,,"0|i3jw7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - CamelDockerTest fails,CAMEL-11768,13101132,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,11/Sep/17 03:08,11/Sep/17 07:52,14/Jul/23 05:50,11/Sep/17 07:52,2.20.0,,,,,2.20.0,,,,camel-docker,karaf,tests,,0,,,"{code}
$ ./run-tests.sh CamelDockerTest
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.596 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelDockerTest
test(org.apache.camel.itest.karaf.CamelDockerTest)  Time elapsed: 10.445 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelDockerTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-docker; type=karaf.feature; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-docker)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))"" [caused by: Unable to resolve camel-docker/2.20.0.SNAPSHOT: missing requirement [camel-docker/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-docker; type=osgi.bundle; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-docker/2.20.0.SNAPSHOT: missing requirement [org.apache.camel.camel-docker/2.20.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.github.dockerjava.api.async)(version>=3.0.0)(!(version>=4.0.0)))"" [caused by: Unable to resolve org.apache.servicemix.bundles.docker-java/3.0.13.1: missing requirement [org.apache.servicemix.bundles.docker-java/3.0.13.1] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.annotation)(version>=1.2.0)(!(version>=2.0.0)))""]]]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:389)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:375)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:347)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:218)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:291)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1233)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1132)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)


Results :

Tests in error: 
  CamelDockerTest.test » WrappedTestContainer [test(org.apache.camel.itest.karaf...

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 15.983 s
[INFO] Finished at: 2017-09-11T11:15:12+09:00
[INFO] Final Memory: 41M/2875M
[INFO] ------------------------------------------------------------------------
{code}
",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 11 06:53:48 UTC 2017,,,,,,,,,,,"0|i3jvnj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/17 03:24;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1931

    CAMEL-11768: camel-itest-karaf - CamelDockerTest fails

    https://issues.apache.org/jira/browse/CAMEL-11768

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11768

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1931.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1931
    
----
commit df02468efac34bb05a7e75e73892d2578fbce262
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-09-11T03:23:13Z

    CAMEL-11768: camel-itest-karaf - CamelDockerTest fails

----
;;;","11/Sep/17 06:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1931
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow - Consumer adds duplicate headers,CAMEL-11765,13100806,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Sep/17 13:10,08/Sep/17 13:37,14/Jul/23 05:50,08/Sep/17 13:37,,,,,,2.18.5,2.19.3,2.20.0,,camel-undertow,,,,0,,,"You get HTTP_METHOD with [GET, GET] or its duplicate",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-09-08 13:10:29.0,,,,,,,,,,,"0|i3jtlr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - CamelServicenowTest fails,CAMEL-11760,13100354,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,07/Sep/17 03:25,07/Sep/17 07:26,14/Jul/23 05:50,07/Sep/17 06:45,2.20.0,,,,,2.20.0,,,,camel-servicenow,karaf,tests,,0,,,"{code}
$ ./run-tests.sh CamelServicenowTest
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 8.451 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelServicenowTest
test(org.apache.camel.itest.karaf.CamelServicenowTest)  Time elapsed: 8.357 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelServicenowTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-servicenow; type=karaf.feature; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-servicenow)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))"" [caused by: Unable to resolve camel-servicenow/2.20.0.SNAPSHOT: missing requirement [camel-servicenow/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-servicenow; type=osgi.bundle; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-servicenow/2.20.0.SNAPSHOT: missing requirement [org.apache.camel.camel-servicenow/2.20.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.datatype.jdk8)(version>=2.8.0)(!(version>=3.0.0)))""]]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:389)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:375)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:347)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:218)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)


Results :

Tests in error: 
  CamelServicenowTest.test » WrappedTestContainer [test(org.apache.camel.itest.k...

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.999 s
[INFO] Finished at: 2017-09-07T12:24:28+09:00
[INFO] Final Memory: 41M/2875M
[INFO] ------------------------------------------------------------------------
{code}",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 07:26:21 UTC 2017,,,,,,,,,,,"0|i3jqtj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Sep/17 04:07;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1921

    CAMEL-11760: camel-itest-karaf - CamelServicenowTest fails

    https://issues.apache.org/jira/browse/CAMEL-11760

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11760

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1921.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1921
    
----
commit b151b44c5f4af3b6044b23a3d5acd2dd71a885d1
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-09-07T04:06:17Z

    CAMEL-11760: camel-itest-karaf - CamelServicenowTest fails

----
;;;","07/Sep/17 07:26;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1921
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - CamelNagiosTest fails,CAMEL-11759,13100349,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,07/Sep/17 02:34,07/Sep/17 07:26,14/Jul/23 05:50,07/Sep/17 06:45,2.20.0,,,,,2.20.0,,,,camel-nagios,karaf,tests,,0,,,"{code}
$ ./run-tests.sh CamelNagiosTest
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 7.425 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelNagiosTest
test(org.apache.camel.itest.karaf.CamelNagiosTest)  Time elapsed: 7.33 sec  <<< ERROR!
java.lang.ClassNotFoundException: org.bouncycastle.crypto.BlockCipher not found by wrap_file__Users_tasato_.m2_repository_com_github_jsendnsca_jsendnsca_2.1.1_jsendnsca-2.1.1.jar [82]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1550)
	at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:79)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1958)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.googlecode.jsendnsca.encryption.Encryption.<clinit>(Encryption.java:42)
	at org.apache.camel.component.nagios.NagiosConfiguration.<init>(NagiosConfiguration.java:52)
	at org.apache.camel.component.nagios.NagiosComponent.<init>(NagiosComponent.java:36)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at org.apache.camel.util.ObjectHelper.newInstance(ObjectHelper.java:1736)
	at org.apache.camel.util.ReflectionInjector.newInstance(ReflectionInjector.java:32)
	at org.apache.camel.impl.DefaultInjector.newInstance(DefaultInjector.java:45)
	at org.apache.camel.impl.osgi.Activator$BaseResolver.createInstance(Activator.java:544)
	at org.apache.camel.impl.osgi.Activator$BaseResolver.createInstance(Activator.java:514)
	at org.apache.camel.impl.osgi.Activator$BundleComponentResolver.resolveComponent(Activator.java:292)
	at org.apache.camel.core.osgi.OsgiComponentResolver.getComponent(OsgiComponentResolver.java:58)
	at org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:66)
	at org.apache.camel.impl.DefaultCamelContext.initComponent(DefaultCamelContext.java:517)
	at org.apache.camel.impl.DefaultCamelContext.lambda$getComponent$0(DefaultCamelContext.java:468)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:468)
	at org.apache.camel.test.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:201)
	at org.apache.camel.test.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:188)
	at org.apache.camel.itest.karaf.CamelNagiosTest.test(CamelNagiosTest.java:30)


Results :

Tests in error: 
  CamelNagiosTest.test:30->AbstractFeatureTest.testComponent:188->AbstractFeatureTest.testComponent:201 » ClassNotFound

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11.545 s
[INFO] Finished at: 2017-09-07T11:33:10+09:00
[INFO] Final Memory: 41M/2875M
[INFO] ------------------------------------------------------------------------
{code}",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11653,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 07:26:41 UTC 2017,,,,,,,,,,,"0|i3jqsf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Sep/17 02:57;tadayosi;Probably it's related to CAMEL-11653.;;;","07/Sep/17 03:10;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1920

    CAMEL-11759: camel-itest-karaf - CamelNagiosTest fails

    https://issues.apache.org/jira/browse/CAMEL-11759

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11759

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1920.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1920
    
----
commit 689d72a9aa8391be686713853c2c63f499413458
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-09-07T03:10:00Z

    CAMEL-11759: camel-itest-karaf - CamelNagiosTest fails

----
;;;","07/Sep/17 07:26;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1920
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel route with multicast (parallel) generate huge CPU load,CAMEL-11750,13100094,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,Nazar Vishka,Nazar Vishka,06/Sep/17 10:14,29/Mar/21 11:48,14/Jul/23 05:50,11/Sep/17 09:54,2.18.4,2.19.2,,,,2.18.5,2.19.3,2.20.0,,camel-core,,,,0,,,"I've created simple Spring Camel Route application that can be used for issue reproducing. Here we have very simple route:
{code}
    public void configure() throws Exception {
        from(""direct:start"").routeId(""start"")
                .multicast().parallelProcessing()
                .to(""direct:very-long-task"", ""direct:long-task"")
                .end();

        from(""direct:long-task"").routeId(""long-task"")
                .log(""Started long-task"")
                .process(exchange -> Thread.sleep(5000))
                .log(""Finished long-task"")
                .end();
        from(""direct:very-long-task"").routeId(""very-long-task"")
                .log(""Started very-long-task"")
                .process(exchange -> Thread.sleep(35000))
                .log(""Finished very-long-task"")
                .end();
    }{code}
From our main route 'start' we are starting in parallel two sub-routes: 'long-task' and 'very-long-task'. They are just doing something for some period of time and do not generate any load to the system.
But I found that when one task finished earlier than other one, route start to make a huge CPU load. Here you can see a CPU usage during executiong of Camel route that was mentioned earlier (after finishing of 'long-task' usage of CPU uncreased from 0 to 12.5%):
!https://content.screencast.com/users/NazarV/folders/Jing/media/830268f0-d184-4c57-adb1-b782ea63fa6d/2017-09-06_1241.png!
Screenshot was made when I was running route on my Windows PC with 4 physical CPU cores + 4 HT. On Unix systems we found that after end of 'long-task' it used 100% of one core till the end of work.
One more interesting thing that i've found is that the main load on the system was generated by the thread MulticastProcessor-AggregateTask that was spending a lot of time in the method java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject#awaitNanos that was called from java.util.concurrent.DelayQueue#poll(long, java.util.concurrent.TimeUnit):
{code}""Camel (camel-1) thread #2 - MulticastProcessor-AggregateTask"" #29 daemon prio=5 os_prio=0 tid=0x00000000215e3000 nid=0x7a0 runnable [0x0000000022eaf000]
   java.lang.Thread.State: RUNNABLE
	at java.lang.Thread.isInterrupted(Native Method)
	at java.lang.Thread.interrupted(Thread.java:944)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting(AbstractQueuedSynchronizer.java:2002)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2079)
	at java.util.concurrent.DelayQueue.poll(DelayQueue.java:273)
	at org.apache.camel.util.concurrent.SubmitOrderedCompletionService.poll(SubmitOrderedCompletionService.java:127)
	at org.apache.camel.processor.MulticastProcessor$AggregateOnTheFlyTask.aggregateOnTheFly(MulticastProcessor.java:463)
	at org.apache.camel.processor.MulticastProcessor$AggregateOnTheFlyTask.run(MulticastProcessor.java:418)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745){code}
In DelayQueue#poll(long, java.util.concurrent.TimeUnit) we have a piece of code:
{code}E first = q.peek();
if (first == null) {
 ...
} else {
  long delay = first.getDelay(NANOSECONDS);
    ...
  long timeLeft =  available.awaitNanos(delay) {code}
During debugging I found that E first is object of class [org.apache.camel.util.concurrent.SubmitOrderedCompletionService.SubmitOrderFutureTask|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java] and it's very interesting [getDelay(TimeUnit) method|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java#L64] always return 1. I thing that is a source of current issue:
{code} public long getDelay(TimeUnit unit) {
            // if the answer is 0 then this task is ready to be taken
            return id - index.get();
        }{code}
So when delay is 1, AggregateTask thread is not sleeping at all and generates a huge CPU load all the time when it is waiting for the end of the last task.
I think that [getDelay(TimeUnit) method|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java#L64] should be somehow re-implemented.",,davsclaus,githubbot,Nazar Vishka,onders,vzinkevich,,"Viachaslau-Zinkevich commented on pull request #3241: CAMEL-11750: Fix delay alignment for java 11
URL: https://github.com/apache/camel/pull/3241
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Oct/19 13:15;githubbot;600","davsclaus commented on pull request #3241: CAMEL-11750: Fix delay alignment for java 11
URL: https://github.com/apache/camel/pull/3241
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Oct/19 03:12;githubbot;600","Magua commented on pull request #3576: CAMEL-11750 Cherry picked into 2.16 -branch.
URL: https://github.com/apache/camel/pull/3576
 
 
   This is cherry picked from fix for CAMEL-11750 as [shown](https://github.com/leofromgroza/camel-long-term-route) to be a bug in 2.18 branch and later.
   
   I found this also exists in 2.16 branch when running with jre 8 or later.
   
   I recreated the bug [here](https://github.com/Magua/camel/tree/recreate-CAMEL-11750-java8/examples/camel-example-spring-boot). Tests show that on jre 8 or later this maxes out one thread (core) while waiting for aggregation to finish.
   
   I'm happy to provide pr for 2.17 branch as well if this gets approved.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Feb/20 22:30;githubbot;600","Magua commented on pull request #3576: CAMEL-11750 Cherry picked into 2.16 -branch.
URL: https://github.com/apache/camel/pull/3576
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Feb/20 22:46;githubbot;600",,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 10 11:07:32 UTC 2019,,,,,,,,,,,"0|i3jp7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Sep/17 08:16;githubbot;GitHub user leofromgroza opened a pull request:

    https://github.com/apache/camel/pull/1922

    CAMEL-11750: Camel route with multicast (parallel) generate huge CPU …

    …load
    
    Fixed issue with huge CPU load: added 1 second delay for a task that is 2nd in the queue order, 2sec for 3rd task, 3sec for 4th taks, etc. That helps to decrease CPU load and does not broke previous logic.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/leofromgroza/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1922.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1922
    
----
commit 089b64ae85d76230d647eb646d806400e1df4b21
Author: leofromgroza <vishka.nazar@gmail.com>
Date:   2017-09-07T08:15:02Z

    CAMEL-11750: Camel route with multicast (parallel) generate huge CPU load
    
    Fixed issue with huge CPU load: added 1 second delay for a task that is 2nd in the queue order, 2sec for 3rd task, 3sec for 4th taks, etc. That helps to decrease CPU load and does not broke previous logic.

----
;;;","07/Sep/17 08:22;Nazar Vishka;I propose minor fix:
{code}public long getDelay(TimeUnit unit) {
          return unit.convert(id - index.get(), TimeUnit.MILLISECONDS);
}{code}
It does not broke other logic but adds 1ms delay for a task that is 2nd in the queue, 2ms for 3rd task, 3ms for 4th task, etc. On my test project it helps to decrease CPU load:
!https://content.screencast.com/users/NazarV/folders/Jing/media/c86ed62c-be49-4ab9-b03a-35028d95bf29/2017-09-07_1119.png!;;;","07/Sep/17 08:41;onders;well, i would say if you have got long running tasks and and you push many tasks to your direct endpoint which will cause oveflooding your processor chain / route, i think this is a design issue.
i am not convinced that you can put delay to each task you send to direct enpoint. this may resolve your issue because you have got long running tasks. 
what if you don't have long running tasks and you want to multicast and parallelize your route? I think putting delay will break such scenario as i mentioned as ""what if"".

i think you need to use throttler EIP if you have long running tasks and overflooding your direct endpoint to reduce the number of messages to your direct enpoint because you have got long running tasks. ;;;","07/Sep/17 10:30;Nazar Vishka;In my example application we have not many tasks, but just two. That does not cause overflooding of processor chain/route. Definitely problem is not in route's design.
For now, when last task is running, method [getDelay(TimeUnit)|https://github.com/apache/camel/blob/camel-2.19.2/camel-core/src/main/java/org/apache/camel/util/concurrent/SubmitOrderedCompletionService.java#L64] always returns 1. That results to situation that is alike while(true) loop and ""eats"" one CPU core. Throttler EIP cannot resolve this issue. Please take a look at example application.;;;","07/Sep/17 10:54;onders;hmm, i see what you mean but i still think that putting 1 second delay to each item in the queue incrementally did not seem right to me.
there must be better solution. because such change may break short running tasks as my initial look to your PR. [~davsclaus] can better comment on this.;;;","07/Sep/17 11:11;Nazar Vishka;I thought a little bit and I found we can decrease delay to 1 μs. Even that will decrease load to CPU in ~1000 times for such cases. Also I think that will not seriously affect performance for a bunch of short tasks.;;;","08/Sep/17 08:21;davsclaus;Thanks for reporting and diving int the JDK code and showing CPU graphs. Yeah it does smell like the JDK with the no-delay would keep looping in that logic;;;","08/Sep/17 08:41;davsclaus;Thanks for the PR. I ammended and pushed to master branch. Do you mind giving that a test on your system?

I set the minimal delay to 1 micro-second. That is very low, but some may think that even 1 milli second is too high. But lets see if 1 micro-second is too fast and also takes up too much CPU. I am open to changing it to 1 milli-second or do 100 micro-seconds (1/10th of micro second).;;;","08/Sep/17 08:42;githubbot;Github user leofromgroza closed the pull request at:

    https://github.com/apache/camel/pull/1922
;;;","11/Sep/17 07:52;Nazar Vishka;[~davsclaus] thank you for fast reaction. I've made tests with 1 microsecond delay and it helps - CPU usage is <=0.1% that is a great result. I think that we can dwell on 1 microsecond delay.  ;;;","11/Sep/17 09:54;davsclaus;Thanks for testing.;;;","10/Oct/19 09:59;vzinkevich;[~davsclaus] hi, this appeared to be an issue with java 11 due to minor, but affecting changes to java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject#awaitNanos. 

In java 8 the condition to wait was

`

{color:#000080}if {color}(nanosTimeout >= {color:#660e7a}SPIN_FOR_TIMEOUT_THRESHOLD{color})

`

but got changed to

`

{color:#000080}if {color}(nanosTimeout > {color:#660e7a}SPIN_FOR_TIMEOUT_THRESHOLD{color})

`

And this is breaking change for Camel, because {color:#660e7a}SPIN_FOR_TIMEOUT_THRESHOLD{color} = 1000L and org.apache.camel.util.concurrent.SubmitOrderedCompletionService.SubmitOrderFutureTask#getDelay returns 1000 as well, when called with NANOSECONDS.

If the values is 1001 for example, it works fine, otherwise the CPU is highly loaded.;;;","10/Oct/19 10:11;davsclaus;Thanks [~vzinkevich] are you able to submit a fix as a github PR ?;;;","10/Oct/19 10:13;vzinkevich;[~davsclaus] will do! I'm planning to do a quick fix to avoid those 1000L value to just be as 1001L. Looks like a hack, but it will suffice I guess...;;;","10/Oct/19 11:07;davsclaus;Yeah its fine to 1001 and then maybe just add a little code comment above why we do this;;;",,,,,,,,,,,,,,,,,,
Camel-Undertow: transferException option doesn't work,CAMEL-11748,13099841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,05/Sep/17 13:41,07/Sep/17 06:58,14/Jul/23 05:50,07/Sep/17 06:57,2.19.2,,,,,2.18.5,2.19.3,2.20.0,,camel-undertow,,,,0,,,,,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 06:58:24 UTC 2017,,,,,,,,,,,"0|i3jnnr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Sep/17 06:57;davsclaus;Andrea, I think you have fixed this, so resolving this ticket;;;","07/Sep/17 06:58;acosentino;Yeah, sure. Sorry :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Delete orphan lock files on startup may not match a lock file when using include/antInclude filtering,CAMEL-11742,13099452,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,03/Sep/17 13:30,03/Sep/17 14:27,14/Jul/23 05:50,03/Sep/17 14:27,,,,,,2.19.3,2.20.0,,,camel-core,,,,0,,,See CAMEL-8970 and reported on mailing list,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-09-03 13:30:26.0,,,,,,,,,,,"0|i3jl9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Chunk Karaf feature doesn't work,CAMEL-11735,13099158,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,01/Sep/17 07:13,01/Sep/17 07:20,14/Jul/23 05:50,01/Sep/17 07:20,,,,,,2.20.0,,,,camel-chunk,karaf,,,0,,,Currently it is using a wrong version of json-smart-action.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-09-01 07:13:43.0,,,,,,,,,,,"0|i3jjg7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-google-bigquery : Incorrectly set partition name,CAMEL-11733,13099146,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,emin,emin,01/Sep/17 06:04,05/Sep/17 09:21,14/Jul/23 05:50,04/Sep/17 13:35,,,,,,2.20.0,,,,,,,,0,,,"When Partition Decorator is set as:

{code:java}
.setHeader(GoogleBigQueryConstants.PARTITION_DECORATOR,simple(""20170901""))
{code}

The exception is thrown:
{code}
Invalid table ID \\\""table_name?20170901
{code}",,emin,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 05 09:21:32 UTC 2017,,,,,,,,,,,"0|i3jjdj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Sep/17 11:50;githubbot;GitHub user evmin opened a pull request:

    https://github.com/apache/camel/pull/1914

    CAMEL-11733: Fixed partition character

    Resolved the issue where the partition taken from the Header is not correctly defined.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ScentreGroup/camel CAMEL-11733

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1914.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1914
    
----
commit 79a9868b5a78b9b80198e9e75fd0e29cc45dfbf0
Author: Sarel Lugtenburg <sarel.lugtenburg@scentregroup.com>
Date:   2017-09-03T21:31:07Z

    CAMEL-11733: Fixed partition character

----
;;;","05/Sep/17 09:21;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1914
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Atmosphere framework has changed initialisation API,CAMEL-11725,13098258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,pkletsko,pkletsko,29/Aug/17 12:59,31/Aug/17 06:41,14/Jul/23 05:50,31/Aug/17 06:41,2.19.1,,,,,2.20.0,,,,camel-atmosphere-websocket,,,,0,,,"Atmosphere framework has changed initialisation API.

In Atmosphere version 2.4.9 new class for initialisation AtmosphereFrameworkInitializer should be used. 

Thus component should be modified according to a new init procedure. 

More information about problems with current implementation of the component :
https://github.com/pkletsko/spring-boot-camel-atmosphere-websocket/issues/1",,acosentino,githubbot,pkletsko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 31 06:41:32 UTC 2017,,,,,,,,,,,"0|i3jefj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Aug/17 13:04;acosentino;Please stop changing priority to blocker.;;;","29/Aug/17 13:19;pkletsko;I have a solution already, just need to fix tests;;;","30/Aug/17 13:46;githubbot;GitHub user pkletsko opened a pull request:

    https://github.com/apache/camel/pull/1908

    CAMEL-11725 applied a new way of Atmosphere Framework initialization

    This commit will fix the problem with initialisation of Atmosphere framework and gives ability to use this component with combination of spring boot. It is important for now to keep version of atmosphere 2.4.10

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pkletsko/camel CAMEL-11725-new-atmosphere-ws-init

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1908.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1908
    
----
commit 181c741d09d22b1b6e8e4598cc509bd979532d0d
Author: Pavlo Kletsko <pavlo.kletsko@greenbird.com>
Date:   2017-08-30T13:44:08Z

    CAMEL-11725 applied a new way of Atmosphere Framework initialization

----
;;;","31/Aug/17 06:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1908
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Hdfs2: No need for initialDelay and delay as configuration properties since they are already parameters of ScheduledPollConsumer,CAMEL-11724,13098214,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,29/Aug/17 09:49,29/Aug/17 10:09,14/Jul/23 05:50,29/Aug/17 10:09,2.18.4,2.19.1,,,,2.18.5,2.19.3,2.20.0,,camel-hdfs2,,,,0,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-08-29 09:49:39.0,,,,,,,,,,,"0|i3je5r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedCamelContext.dumpRestsAsXml can fail if default charset is not utf-8,CAMEL-11723,13098204,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,niels@harremoes.dk,niels@harremoes.dk,29/Aug/17 09:09,09/Sep/17 07:53,14/Jul/23 05:50,07/Sep/17 15:02,2.18.4,,,,,2.18.5,2.19.3,2.20.0,,camel-core,jmx,,,0,easyfix,windows,"I am trying to access the rest definitions using the swagger servlet. 
My operation description is in Danish and includes the character ""æ"".

Thus, the xml string generated in line 371 of  org.apache.camel.management.mbean.ManagedCamelContext.dumpRestsAsXml
contains the character ""æ"".

In line 376-377, wh have
{code}
       InputStream is = new ByteArrayInputStream(xml.getBytes());
        Document dom = XmlLineNumberParser.parseXml(is, new ...)
{code}
The call to xml.getBytes() uses the default encoding (CP-1252 in my case), which will encode æ as a single byte. The xml parser expects UTF-8 (since the xml starts with an xml declaration specifying encoding=""UTF-8""). 
Therefore, it fails with ""Invalid byte 2 of 3-byte UTF-8 sequence"".

The fix is simple - change xml.getBytes() to xml.getBytes(""UTF-8"");
","Windows, default charset is not UTF-8",davsclaus,githubbot,niels@harremoes.dk,,,,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 09 07:53:32 UTC 2017,,,,,,,,,,,"0|i3je3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Aug/17 10:23;githubbot;GitHub user pchhabra11 opened a pull request:

    https://github.com/apache/camel/pull/1906

    Fix for CAMEL-11723

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pchhabra11/camel CAMEL-11723

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1906.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1906
    
----
commit 21e2821f46d610be27d26c198a9bda45e75c3e5a
Author: Pulkit <pchhabra@redhat.com>
Date:   2017-08-30T10:10:41Z

    Fix for CAMEL-11723

----
;;;","07/Sep/17 14:41;davsclaus;I had a look and I think we should hardcode the encoding as utf-8 and make the dump module to xml use utf-8. ;;;","09/Sep/17 07:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1906
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
error in handling return parameters in db functions,CAMEL-11716,13098003,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,valdar,valdar,28/Aug/17 15:41,29/Aug/17 12:17,14/Jul/23 05:50,29/Aug/17 08:37,2.19.1,,,,,2.18.5,2.19.3,2.20.0,,camel-sql,,,,0,,,"Let's consider for instance the following db function:
{code}
create or replace function sum_two_numbers_function

  (a in number, b in number)

return number deterministic is

begin

 return a + b;

end;
{code}

One might think to run this camel route in order to call the mentioned db function:
{code}
sql-store:sum_two_numbers_function(INTEGER ${body[0]}, INTEGER ${body[1]})?function=true
{code}
but SqlCall build incorect query:
{code}
? = call sum_two_numbers_function(?)
{code}
which fail on wrong number of arguments. After an investigation is found out that first parameter was skipped for function calls.
https://github.com/spring-projects/spring-framework/blob/v4.3.3.RELEASE/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlCall.java#L135
So one might try to add one parameter which should be used as output for return statement. But the only valid format of parameter (for db functions) seems to be {{InputParameter}} which is not possible to use as output for result.
{code}
sql-store:sum_two_numbers_function(INTEGER ${body[2]}, INTEGER ${body[0]}, INTEGER ${body[1]})?function=true
{code}
If {{OutputParameter}} are used than this https://github.com/apache/camel/blob/master/components/camel-sql/src/main/java/org/apache/camel/component/sql/stored/TemplateStoredProcedure.java#L77 will force to create SQL procedure call (instead of a function one), for instance this:
{code}
sql-store:sum_two_numbers_function(OUT INTEGER result, INTEGER ${body[0]}, INTEGER ${body[1]})?function=true
{code}
results in this query call:
{code}
call sum_two_numbers_function(?, ?, ?)
{code}",,githubbot,valdar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 29 12:17:08 UTC 2017,,,,,,,,,,,"0|i3jcvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Aug/17 15:54;valdar;Created a PR for this: https://github.com/apache/camel/pull/1902;;;","29/Aug/17 12:17;githubbot;Github user valdar closed the pull request at:

    https://github.com/apache/camel/pull/1902
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Spring : unable to mix xml and java routes,CAMEL-11715,13097984,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,lb,lb,28/Aug/17 14:55,06/Sep/17 10:16,14/Jul/23 05:50,06/Sep/17 10:16,,,,,,2.20.0,,,,camel-spring,camel-spring-boot,,,0,,,"I camel 2.19 it was possible to mix routes from Spring XML and Spring boot but that does not work anymore with camel 2.20.x.

A sample project can be found here: https://github.com/lburgazzoli/camel-spring-xml so if you switch camel version, you'd see that the java route is not more loaded.",,davsclaus,lb,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11261,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 06 10:15:55 UTC 2017,,,,,,,,,,,"0|i3jcrz:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"03/Sep/17 08:06;davsclaus;I wonder if we can build an unit test in camel-spring-boot that can reproduce this?;;;","03/Sep/17 19:58;zregvart;I have a test/fix but I want to run the full tests to see if anything has been broken by the fix, I'll update in a bit.;;;","05/Sep/17 07:28;zregvart;The fix I have causes deadlock (probably route not started) in {{camel-spring-cloud}} (_org.apache.camel.spring.cloud.CamelSpringCloudServiceCallRibbonTest_) test. I need to investigate that case. It's quite common to make a change in one part of our Spring support and cause an issue in another :(;;;","05/Sep/17 07:48;zregvart;I think I found the issue, again, it's simple ordering of RoutesCollector, CamelContextFactoryBean and SpringCamelContext. Running all tests to confirm.;;;","05/Sep/17 13:53;zregvart;I've pushed a fix for this [~lb] would you mind verifying it works with your example? Thanks (y);;;","06/Sep/17 10:15;lb;seems to work, will close the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-example-spring-cloud-servicecall doesn't work out of the box,CAMEL-11711,13097935,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,acosentino,acosentino,28/Aug/17 11:27,20/Sep/17 12:11,14/Jul/23 05:50,20/Sep/17 12:11,,,,,,2.20.0,,,,examples,,,,0,,,"Currently when you try to use the serviceCall (following the provided steps) it fails with

{code}
org.apache.camel.http.common.HttpOperationFailedException: HTTP operation failed invoking http://localhost:9021/ with statusCode: 404
at org.apache.camel.component.undertow.UndertowClientCallback.lambda$setupResponseListener$2(UndertowClientCallback.java:232)
at org.apache.camel.component.undertow.UndertowClientCallback$ErrorHandlingClientCallback.completed(UndertowClientCallback.java:86)
 at io.undertow.client.http.HttpClientExchange.setResponse(HttpClientExchange.java:125)
at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:642)
at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:511)
at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92)
at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66)
at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88)
at org.xnio.nio.WorkerThread.run(WorkerThread.java:561)
{code}",,acosentino,davsclaus,kramu.k7,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 13:51:33 UTC 2017,,,,,,,,,,,"0|i3jch3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Sep/17 13:44;davsclaus;Yeah I reproduced it as well

However if you call the services directly via
{code}
curl http://localhost:9011/
curl http://localhost:9021/
{code}
you get a response
;;;","12/Sep/17 13:44;davsclaus;I remember trying this example in the past where it worked;;;","12/Sep/17 13:51;lb;Will have a look as son as possible;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Milo component cannot write to newer server versions,CAMEL-11709,13097631,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,dennis.pries,dennis.pries,25/Aug/17 15:00,27/Aug/17 14:57,14/Jul/23 05:50,27/Aug/17 10:00,2.19.2,,,,,2.19.3,2.20.0,,,camel-milo,,,,0,newbie,patch,Newer OPC UA Server implementations (for example: opcuaserver.com:48010) forbit setting sourceTime and serverTime in DataValue.,,acosentino,dennis.pries,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Aug/17 15:00;dennis.pries;camel-milo.patch;https://issues.apache.org/jira/secure/attachment/12883751/camel-milo.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Aug 27 14:57:54 UTC 2017,,,,,,,Patch Available,,,,"0|i3jalr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Aug/17 10:00;acosentino;Thanks for the patch.;;;","27/Aug/17 14:57;dennis.pries;You're welcome;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Caffeine: ExpireAfterAccess set two times instead of ExpireAfterWrite,CAMEL-11705,13097523,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,25/Aug/17 08:30,25/Aug/17 08:47,14/Jul/23 05:50,25/Aug/17 08:47,,,,,,2.20.0,,,,camel-caffeine,,,,0,,,"In both CaffeineCache and CaffeineLoadCache we have

{code}
builder.expireAfterAccess(configuration.getExpireAfterAccessTime(), TimeUnit.SECONDS);
builder.expireAfterAccess(configuration.getExpireAfterWriteTime(), TimeUnit.SECONDS);
{code}",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-08-25 08:30:06.0,,,,,,,,,,,"0|i3j9xz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
S3 Consumer does not close S3 Object Input Streams and this causes HTTP connection leaks,CAMEL-11698,13096968,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mvlakh,mvlakh,23/Aug/17 09:12,12/Sep/17 07:52,14/Jul/23 05:50,12/Sep/17 07:52,2.14.3,2.19.2,,,,2.18.5,2.19.4,2.20.0,,camel-aws,,,,0,,,"It looks like S3Consumer does nothing to prevent HTTP Connection leaks that can easily happen if some exception is thrown while it is generates a batch of exchanges and sends them for processing. Also we can lose HTTP Connections if our route does not close S3 Object Input Streams which can easily happen.

Due to this issue s3 consumer may works some time and then start failing with the following exceptions:
{code}
com.amazonaws.AmazonClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:544)
	at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:273)
	at com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:3660)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1133)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.access$201(AmazonS3EncryptionClient.java:65)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient$S3DirectImpl.getObject(AmazonS3EncryptionClient.java:524)
	at com.amazonaws.services.s3.internal.crypto.S3CryptoModuleAE.getObjectSecurely(S3CryptoModuleAE.java:106)
	at com.amazonaws.services.s3.internal.crypto.CryptoModuleDispatcher.getObjectSecurely(CryptoModuleDispatcher.java:114)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.getObject(AmazonS3EncryptionClient.java:427)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1005)
	at org.apache.camel.component.aws.s3.S3Consumer.createExchanges(S3Consumer.java:112)
	at org.apache.camel.component.aws.s3.S3Consumer.poll(S3Consumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

I found 3 week points in the way S3Consumer is implemented:
1. It does not handle exceptions in the poll() method where it reads a single s3 object which means that s3 object stream can be left opened forever in case of some fault;
2. It also does not handle exceptions in the createExchanges method where it populates a list of exchanges based on the list of s3 objects available in the bucket. If for example we want to consumer 10 files in a pool and getObject call for the file 10 failed due to whatever reason steams for 9 objects that are already opened will be lost;
3. In order to make sure that we always close all the streams and to not force user to do this all the time the implementation of the processBatch method should be also improved to close all the opened streams in the finally block.

In order to resolve issues 2 and 3 in my current project (the issue 1 is not affecting me because I do not use that feature) I implemented a custom extension of the native S3Consumer that I want to share with you. It will give you the idea of the required changes that need to be applied to fix these issues. I hope it will be useful.",,acosentino,davsclaus,mvlakh,stevel@apache.org,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Aug/17 09:14;mvlakh;CustomS3Consumer.java;https://issues.apache.org/jira/secure/attachment/12883296/CustomS3Consumer.java",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 07:52:00 UTC 2017,,,,,,,,,,,"0|i3j6jr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Aug/17 12:15;acosentino;We add this in the past 

https://issues.apache.org/jira/browse/CAMEL-11697

With the autocloseBody option true we close the s3Object when the exchange is complete:

{code}
    public Exchange createExchange(ExchangePattern pattern, S3Object s3Object) {
        LOG.trace(""Getting object with key [{}] from bucket [{}]..."", s3Object.getKey(), s3Object.getBucketName());

        ObjectMetadata objectMetadata = s3Object.getObjectMetadata();

        LOG.trace(""Got object [{}]"", s3Object);

        Exchange exchange = super.createExchange(pattern);
        Message message = exchange.getIn();

        if (configuration.isIncludeBody()) {
            message.setBody(s3Object.getObjectContent());
        } else {
            message.setBody(null);
        }

        message.setHeader(S3Constants.KEY, s3Object.getKey());
        message.setHeader(S3Constants.BUCKET_NAME, s3Object.getBucketName());
        message.setHeader(S3Constants.E_TAG, objectMetadata.getETag());
        message.setHeader(S3Constants.LAST_MODIFIED, objectMetadata.getLastModified());
        message.setHeader(S3Constants.VERSION_ID, objectMetadata.getVersionId());
        message.setHeader(S3Constants.CONTENT_TYPE, objectMetadata.getContentType());
        message.setHeader(S3Constants.CONTENT_MD5, objectMetadata.getContentMD5());
        message.setHeader(S3Constants.CONTENT_LENGTH, objectMetadata.getContentLength());
        message.setHeader(S3Constants.CONTENT_ENCODING, objectMetadata.getContentEncoding());
        message.setHeader(S3Constants.CONTENT_DISPOSITION, objectMetadata.getContentDisposition());
        message.setHeader(S3Constants.CACHE_CONTROL, objectMetadata.getCacheControl());
        message.setHeader(S3Constants.S3_HEADERS, objectMetadata.getRawMetadata());
        message.setHeader(S3Constants.SERVER_SIDE_ENCRYPTION, objectMetadata.getSSEAlgorithm());

        /**
         * If includeBody != true, it is safe to close the object here.  If includeBody == true,
         * the caller is responsible for closing the stream and object once the body has been fully consumed.
         * As of 2.17, the consumer does not close the stream or object on commit.
         */
        if (!configuration.isIncludeBody()) {
            try {
                s3Object.close();
            } catch (IOException e) {
            }
        } else {
            if (configuration.isAutocloseBody()) {
                exchange.addOnCompletion(new SynchronizationAdapter() {
                    @Override
                    public void onDone(Exchange exchange) {
                        try {
                            s3Object.close();
                        } catch (IOException e) {
                        }
                    }
                });
            }
        }

        return exchange;
{code}

We need to improve error handling somewhere by the way;;;","23/Aug/17 12:17;acosentino;By the way you're welcome to work on a PR or a patch for improving this.
http://camel.apache.org/contributing.html;;;","24/Aug/17 11:18;stevel@apache.org;Don't know if its relevant here, but in Hadoop s3a we decide whether to abort or close the connection based on the amount of remaining data. In close() then AWS s3 client will read() to the end of the data, to recycle the HTTP1.1 connection. This is OK for small files, but not multi-GB files where you are closing things to jump around in seek;;;","12/Sep/17 07:52;davsclaus;Thanks. I added the suggestion of closing the s3 objects in that create exchanges method. The autoClose option that Andreas talk about is default enabled and will ensure the s3 object is closed for each exchange being routed by Camel.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
S3 Consumer: If maxMessagesPerPoll is greater than 50 consumer fails to poll objects from bucket,CAMEL-11697,13096962,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mvlakh,mvlakh,23/Aug/17 08:54,24/Aug/17 06:39,14/Jul/23 05:50,23/Aug/17 13:25,2.14.3,2.19.2,,,,2.20.0,,,,camel-aws,,,,0,,,"It is possible to configure S3 consumer to process several s3 objects in a single poll using the maxMessagesPerPoll property. 

If this property contains a small number, less than 50, everything works fine but if user tries to consume more files then s3 consumer simply fails all the time. It cannot poll files because there are not enough HTTP connections to open streams for all the requested files at once. The exception looks like this:
{code}
com.amazonaws.AmazonClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:544)
	at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:273)
	at com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:3660)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1133)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.access$201(AmazonS3EncryptionClient.java:65)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient$S3DirectImpl.getObject(AmazonS3EncryptionClient.java:524)
	at com.amazonaws.services.s3.internal.crypto.S3CryptoModuleAE.getObjectSecurely(S3CryptoModuleAE.java:106)
	at com.amazonaws.services.s3.internal.crypto.CryptoModuleDispatcher.getObjectSecurely(CryptoModuleDispatcher.java:114)
	at com.amazonaws.services.s3.AmazonS3EncryptionClient.getObject(AmazonS3EncryptionClient.java:427)
	at com.amazonaws.services.s3.AmazonS3Client.getObject(AmazonS3Client.java:1005)
	at org.apache.camel.component.aws.s3.S3Consumer.createExchanges(S3Consumer.java:112)
	at org.apache.camel.component.aws.s3.S3Consumer.poll(S3Consumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

The issue happens because by default AmazonS3Client uses HTTP client with limited number of connections in the pool - 50. 

Since S3 consumer provides a possibility to consume any number of s3 objects in a single pool and because it is quite common case that someone needs to process 50 or more files in a single pool I think s3 consumer should handle this case properly. It should automatically change HTTP connections pool size to be able to handle requested number of objects. This can be done like this:
{code}
ClientConfiguration s3Config = new ClientConfiguration();
/*
+20 we need to allocate a bit more to be sure that we always can do additional API calls when we already hold maxMessagesPerPoll s3 object streams opened
*/
s3Config.setMaxConnections(maxMessagesPerPoll + 20); 

AmazonS3Client client = new AeAmazonS3Client(awsCreds, s3Config );
{code}
",,acosentino,mvlakh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 24 06:39:12 UTC 2017,,,,,,,,,,,"0|i3j6if:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Aug/17 12:53;acosentino;We'll need to add a new options to the S3 configuration.;;;","23/Aug/17 13:28;acosentino;Now you have a maxConnections options in the S3Configuration and you can tune it as you want, by default is 50.

https://github.com/apache/camel/blob/master/components/camel-aws/src/main/docs/aws-s3-component.adoc

Since this is a new option it will be available in Camel 2.20.0;;;","23/Aug/17 13:43;mvlakh;Hello [~ancosen], thank you for a quick response. 
I am not sure if this is the best way to fix this issue since user of the s3 consumer in this case should know how many connections the consumer needs. And since it is not obvious that all s3 objects will be opened simultaneously user will most likely ignore that setting until he/she gets a fault in run time.
I think the consumer should calculate a default value for this setting based on the value of the maxMessagesPerPoll  property to make sure that it always has enough connections unless user decided to use custom value. Do you agree?

Also I am looking at the s3 consumer code and I do not understand why the consumer opens all the objects right away. Why cannot it open one object at a time when it actually initiates an exchange for it? This seems more efficient and requires only 1 connection at a time. What do you think?;;;","23/Aug/17 13:49;acosentino;We can add an information on the documentation about having at least maxConnections >= maxMessagePerPoll. In my opinion forcing the maxConnection to be related to maxMessagePerPoll value (something like maxMessagePerPoll + 20) is not a good choice. Another solution is setting the maxConnections value equals to maxMessagePerPoll to be sure the connection pool is big enough.

For the second question I need to take a more deeper look to the code, by the way as I say on the other issue opened by you, we love contributions, so feel free to open a PR or submit a patch.;;;","23/Aug/17 13:59;mvlakh;[~ancosen] I suggested to add a little bit more connections to the pool to make sure that S3 consumer is able to perform some other S3 API calls when it already holds all the maxMessagePerPoll s3 objects opened. Otherwise all additional API call will fail since the pool will be empty at that point. If no additional API calls are expected then it is perfectly fine to have exacrt maxMessagePerPoll connections in the pool.

Yes, I saw your proposition to contribute. If I find some free time I will take a look at the code once again and try to prepare a fix suggestion as a patch. But it would be nice to understand if there is any real reason to open all the objects before sending exchanges for processing. Because if this was intentional then there is no point to try change this code without knowing about that. 

Thank you!;;;","24/Aug/17 06:39;acosentino;Ok, now the pool is equals to 50 (the default) + maxMessagesPerPoll.

I'll take a look at the code to answer the other questions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Done() called two times in RoutingSlip processor,CAMEL-11690,13096717,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,stefanbo72,stefanbo72,22/Aug/17 12:31,07/Sep/17 12:57,14/Jul/23 05:50,07/Sep/17 12:57,2.17.7,2.18.4,2.19.1,,,2.18.5,2.19.3,2.20.0,,camel-core,,,,0,,,"Hi,

I found the following issue, if I use the RoutingSlip with an InterceptStrategy. The done()-method of the interceptor, which intercepts the RoutingSlip, is called twice instead of only once. The attached test case reproduces this behavior.

Best regards

STefan  ",,davsclaus,STefanBo,stefanbo72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Aug/17 12:32;stefanbo72;RoutingSlipWithInterceptorTest.java;https://issues.apache.org/jira/secure/attachment/12883109/RoutingSlipWithInterceptorTest.java",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 07 10:16:05 UTC 2017,,,,,,,,,,,"0|i3j50n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Aug/17 07:28;STefanBo;Any comments on this?;;;","03/Sep/17 08:10;davsclaus;Dont use InterceptStrategy its being deprecated;;;","04/Sep/17 07:01;STefanBo;What should I use instead?

And isn't calling the done()-method twice a wrong behavior of the RoutingSlip independent of the InterceptStrategy?;;;","06/Sep/17 10:41;stefanbo72;Can you answer my question, please?;;;","07/Sep/17 07:40;davsclaus;Its being deprecated onwards and intended as internal API from Camel 3.0 onwards. The API is a bit too low-level and complex for end users.

What is your use-case?;;;","07/Sep/17 07:48;stefanbo72;We use it for monitoring the message processing in the camel routes.

But independent of the InterceptStrategy: Shouldn't the done()-method be called only once by an asynchronous processor?;;;","07/Sep/17 08:25;davsclaus;Yeah its being called for the routing slip itself, and each slip endpoint that was sent to, eg in your example there is 1 slip, so its 1 + 1 = 2.

However yes ideally it should only be called when the routing slip itself is done, and be 1. This is how some of the other EIPs do it like recipient list, splitter etc.

But routing slip is implemented on a different foundation than those, and hence why it was different.

;;;","07/Sep/17 10:16;davsclaus;I am currently testing a fix to only call the done once for the interceptor strategy.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ensure transport endpoint configuration will be take into account when create JettyRestHttpBinding from REST DSL,CAMEL-11688,13096650,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,22/Aug/17 06:38,22/Aug/17 08:07,14/Jul/23 05:50,22/Aug/17 08:07,,,,,,2.18.5,2.19.3,2.20.0,,camel-jetty,,,,0,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-08-22 06:38:06.0,,,,,,,,,,,"0|i3j4lz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - getting TypeConversionException when schema-validation-enabled=true for unwrapped response,CAMEL-11681,13096245,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chiochuan,chiochuan,19/Aug/17 21:25,21/Mar/19 16:30,14/Jul/23 05:50,12/Sep/17 09:07,2.17.1,,,,,2.18.5,2.19.4,2.20.0,,camel-cxf,,,,0,newbie,test,"When ""schema-validation-enabled"" is set to true for unwrapped web service, TypeConversionException is return

org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of org.apache.camel.StreamCache] due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state",Windows 7,chiochuan,davsclaus,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8663,CAMEL-13357,,,,,"22/Aug/17 08:08;chiochuan;empty-cxf-body.zip;https://issues.apache.org/jira/secure/attachment/12883076/empty-cxf-body.zip",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 09:07:12 UTC 2017,,,,,,,,,,,"0|i3j25b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Aug/17 00:07;davsclaus;Can you provide any kind of sample project or unit test that reproduces this. Otherwise its likely that this issue is not getting attention as SOAP-WS is not fun to work with;;;","22/Aug/17 02:19;chiochuan;sorry for my bad, i was doing the testing with 2.17.0.redhat-630xxx build which i have encounter this issue, when i try with camel-cxf 2.17.0, it was working fine, but not 2.17.1
;;;","23/Aug/17 09:36;chiochuan;on further check, this issue seem cause by CachedCxfPayload when changing the converter to StaxUtils (CAMEL-9774). ;;;jira-users","25/Aug/17 10:34;chiochuan;The different that i can the changes that might be impacting this would be in CachedCxfPayload, the converter is change from XmlConverter to StaxUtils. 

this is only impacting non-wrapped as it tend to use StaxSource but not for Wrapped as it using DOMSource. 

from 2.17.0: 
 if (reader != null) {
                Map<String, String> nsmap = getNsMap();
                if (nsmap != null && !(reader instanceof DelegatingXMLStreamReader)) {
                    source = new StAXSource(new DelegatingXMLStreamReader(reader, nsmap));
                }
                CachedOutputStream cos = new CachedOutputStream(exchange);
                StreamResult sr = new StreamResult(cos);
                try {
                    xml.toResult(source, sr);
                    li.set(new StreamSourceCache(cos.newStreamCache()));
                } catch (TransformerException e) {
                    LOG.error(""Transformation failed "", e);
                } catch (IOException e) {
                    LOG.error(""Cannot Create StreamSourceCache "", e);
                }
            } 

and 2.17.1

if (reader != null) {
                Map<String, String> nsmap = getNsMap();
                if (nsmap != null && !(reader instanceof DelegatingXMLStreamReader)) {
                    reader = new DelegatingXMLStreamReader(reader, nsmap);
                }
                CachedOutputStream cos = new CachedOutputStream(exchange);
                try {
                    StaxUtils.copy(reader, cos);
                    li.set(new StreamSourceCache(cos.newStreamCache()));
                } catch (XMLStreamException e) {
                    LOG.error(""Transformation failed "", e);
                } catch (IOException e) {
                    LOG.error(""Cannot Create StreamSourceCache "", e);
                }

            } ;;;jira-users","04/Sep/17 07:28;davsclaus;Can you provide a sample project or an unit test that reproduces this problem?;;;","04/Sep/17 07:45;chiochuan;Hi Claus, 

The test case attach in this case, just need to run $mvn test to produce it
https://issues.apache.org/jira/secure/attachment/12883076/empty-cxf-body.zip ;;;jira-users","12/Sep/17 08:41;davsclaus;Thanks the test case also fails with latest code.

I think its due that xml reader is being re-used and there is no way to reset it. eg when you turn on schema-validation the source is read one more time due the validation.;;;","12/Sep/17 09:07;davsclaus;Your sample project now passes the test;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Couchbase client is never shut down,CAMEL-11674,13095105,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jamesnetherton,jamesnetherton,16/Aug/17 19:11,21/Aug/17 08:38,14/Jul/23 05:50,21/Aug/17 08:37,2.20.0,,,,,2.20.0,,,,,,,,0,,,"I'm testing couchbase while it's running within a container (WildFly). If my camel-couchbase application is terminated, I still see client connections being attempted. I guess there's a background thread that's still operational.

The client has a {{shutdown()}} method, so we should probably make use of that somewhere.

Server logs are full of errors like:
{code}
2017-08-16 19:59:56.074 WARN com.couchbase.client.vbucket.ConfigurationProviderHTTP:  Connection problems with URI http://localhost:8091/pools ...skipping
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
    at java.net.Socket.connect(Socket.java:589)
    at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
    at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
    at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
    at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
    at sun.net.www.http.HttpClient.New(HttpClient.java:339)
    at sun.net.www.http.HttpClient.New(HttpClient.java:357)
    at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1202)
    at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1138)
    at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1032)
    at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:966)
    at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1546)
    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)
    at com.couchbase.client.vbucket.ConfigurationProviderHTTP.readToString(ConfigurationProviderHTTP.java:420)
    at com.couchbase.client.vbucket.ConfigurationProviderHTTP.readPools(ConfigurationProviderHTTP.java:206)
    at com.couchbase.client.vbucket.ConfigurationProviderHTTP.getBucketConfiguration(ConfigurationProviderHTTP.java:143)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.bootstrapHttp(BucketConfigurationProvider.java:352)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.bootstrap(BucketConfigurationProvider.java:128)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.signalOutdated(BucketConfigurationProvider.java:521)
    at com.couchbase.client.vbucket.provider.BucketConfigurationProvider.reloadConfig(BucketConfigurationProvider.java:545)
    at com.couchbase.client.CouchbaseConnection.queueReconnect(CouchbaseConnection.java:369)
    at net.spy.memcached.MemcachedConnection.lostConnection(MemcachedConnection.java:634)
    at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:703)
    at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:436)
    at com.couchbase.client.CouchbaseConnection.run(CouchbaseConnection.java:325)
{code}",,acosentino,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 21 08:38:04 UTC 2017,,,,,,,,,,,"0|i3iv67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Aug/17 08:38;acosentino;I added a shutdown invocation in both Consumer/Producer doStop methods. Can you give it a try with your use case?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Input stream infinitive loop,CAMEL-11672,13094786,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,zeljkov,zeljkov,15/Aug/17 15:42,12/Sep/17 09:56,14/Jul/23 05:50,12/Sep/17 09:56,2.12.4,,,,,2.20.0,,,,camel-http,,,,0,,,"Dear Camel team,
While working on one integration we found issue related to camel-http component when solution is deployed on IBM Liberty core.
Same issue is not reproducible on Jetty and Tomcat.

Issue is connected to the code in IOHelper and CachedOutputStream$WrappedInputStream
We are using version 2.12.4 but I can see that same code is used also in latest versions.

https://github.com/apache/camel/blob/camel-2.12.4/camel-core/src/main/java/org/apache/camel/util/IOHelper.java

Problematic part are lines 196, 198 and 204.
Basically stream reader which is used org.apache.camel.converter.stream.CachedOutputStream$WrappedInputStream is not returning -1 like response of read method if empty string is provided on input.
This is wrong by specification of InputReader interface.

       // in the case there is input which is empty string
       while ( -1 != n) {
         …
         int n = input.read(buffer);  ---> this is never -1 if string is empty """" already 0 and we have infinitive loop !!!
        }
 
For our use case we have applied change in IOHelper to check and directly cover if stream reader produce same (non-valid) response to not produce infinitive loop.

If any questions around reproducing issue please let me know

Best regards,
Zeljko","IBM Websphere Liberty Core 17.0.0.1
IBM Websphere Liberty Core 17.0.0.2
Reproducible using both IBM JDK 8 and Oracle JDK 8",davsclaus,zeljkov,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 09:56:09 UTC 2017,,,,,,,,,,,"0|i3it7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Aug/17 23:51;davsclaus;camel-http is deprecated;;;","22/Aug/17 09:38;zeljkov;Hi [~davsclaus],
Actually IOHelper is in camel-core but in our case call was made from DefaultHttpBinding in camel-http that is the reason why I have specified camel-http as component.

Thanks,
Zeljko;;;","03/Sep/17 08:21;davsclaus;Try with newer Camel version even so as 2.12.x is EOL.;;;","12/Sep/17 09:21;davsclaus;Okay working on adding a workaround where we regard it as EOL if the first read byte is a zero value;;;","12/Sep/17 09:56;davsclaus;Copying streams in IOHelper from came-core now regard EOL of data if the first read byte is zero to work around issues on some application servers like IBM WebSphere. This can be turned off by setting JVM system property ""camel.zeroByteEOLEnabled=false"".;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ahc - No way to disable url encoding,CAMEL-11671,13094727,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,convoi,convoi,15/Aug/17 10:20,24/Aug/17 11:05,14/Jul/23 05:50,21/Aug/17 08:17,2.19.1,,,,,2.19.3,2.20.0,,,camel-ahc,,,,0,,,"There currently seems to be now way to really disable url encoding for ahc urls with query parameters.

I even tried to use my own ahc binding.
The problem seems to be, that the AhcProducer uses this section:

{code}
 public boolean process(Exchange exchange, AsyncCallback callback) {
        try {
            // AHC supports async processing
            Request request = getEndpoint().getBinding().prepareRequest(getEndpoint(), exchange);
            log.debug(""Executing request {} "", request);
            client.prepareRequest(request).execute(new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize()));
            return false;
        } catch (Exception e) {
            exchange.setException(e);
            callback.done(true);
            return true;
        }
    }
{code}

By calling {{client.prepareRequest(request)}} the already created request will be turned again into a request builder with enabled url encoding.
From my perspective this makes no sense:

# we could already return a request builder from the AhcBinding, which would save us some processing time
# the settings on this request builder would then not be overriden 

But I can see this would be a breaking change in the API of the AhcBinding.
",,convoi,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 24 09:36:43 UTC 2017,,,,,,,,,,,"0|i3isun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Aug/17 11:21;convoi;actually there might be an even simpler way:
instead of 
{{client.prepareRequest(request).execute(new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize()));}}

why dont we do
{{client.executeRequest(request, new AhcAsyncHandler(exchange, callback, request.getUrl(), getEndpoint().getBufferSize()));}};;;","15/Aug/17 11:40;githubbot;GitHub user convoi opened a pull request:

    https://github.com/apache/camel/pull/1892

    CAMEL-11671 dont rebuild the request and respect url encoding of the original request

    imho it makes no sense to rebuild the request. the prepare methods are mostly used for a) prototyped requests or b) simplified requests in form of simple urls.
    we however already have a prepared request (not a prototype).


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/convoi/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1892.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1892
    
----
commit 03b3a4dcd8f211a50bb28f5073bcab20f492c83a
Author: Justin Heesemann <jheesemann@gmail.com>
Date:   2017-08-15T11:30:00Z

    CAMEL-11671 dont rebuild the request and respect url encoding of the original request

----
;;;","24/Aug/17 09:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1892
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompositeApiClient class in the camel-salesforces component cannot close a null InputStream,CAMEL-11668,13094424,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,zregvart,dickengeorge,dickengeorge,14/Aug/17 09:53,15/Aug/17 10:47,14/Jul/23 05:50,14/Aug/17 18:45,2.19.3,,,,,2.20.0,,,,camel-salesforce,,,,0,easyfix,,"In the class DefaultCompositeApiClient.java the method
<T> Optional<T> tryToReadResponse(final Class<T> expectedType, final InputStream responseStream) 
cannot handle a null InputStream. ","Windows 10, Eclipse Oxygen IDE with Java J2SE",dickengeorge,githubbot,zregvart,,,,,,,,,,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,,,"14/Aug/17 11:10;dickengeorge;camel-salesforce.patch;https://issues.apache.org/jira/secure/attachment/12881718/camel-salesforce.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Aug 15 10:47:00 UTC 2017,,,,,,,Patch Available,,,,"0|i3iqzz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Aug/17 11:11;dickengeorge;The problem can be resolved by checking if the responseStream is null or not before closing the Stream.;;;","14/Aug/17 11:15;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1886

    Camel 2.19.x

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1886.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1886
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

commit 63dc5f7fa8e4d75bbdabdc993c2ba6f47534ef57
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T11:02:08Z

    CAMEL-11267 Add SpanDecorator for the 'rest' component

commit a2487f5ee533495dc81fd6adad9d67d8367cd8ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T16:17:38Z

    CAMEL-11267 Updated to obtain parameters from original endpoint URI and use curly braces

commit 926f9def75b32a5861d3dfe5028222efe0b7307b
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-13T16:51:04Z

    Change error to debug

commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
;;;","14/Aug/17 12:55;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1886
;;;","14/Aug/17 13:01;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1886

    Camel 2.19.x

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1886.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1886
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

commit 63dc5f7fa8e4d75bbdabdc993c2ba6f47534ef57
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T11:02:08Z

    CAMEL-11267 Add SpanDecorator for the 'rest' component

commit a2487f5ee533495dc81fd6adad9d67d8367cd8ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T16:17:38Z

    CAMEL-11267 Updated to obtain parameters from original endpoint URI and use curly braces

commit 926f9def75b32a5861d3dfe5028222efe0b7307b
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-13T16:51:04Z

    Change error to debug

commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
;;;","14/Aug/17 13:03;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1886
;;;","14/Aug/17 13:04;githubbot;GitHub user DG007 reopened a pull request:

    https://github.com/apache/camel/pull/1886

    Camel 2.19.x

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1886.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1886
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

commit 63dc5f7fa8e4d75bbdabdc993c2ba6f47534ef57
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T11:02:08Z

    CAMEL-11267 Add SpanDecorator for the 'rest' component

commit a2487f5ee533495dc81fd6adad9d67d8367cd8ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-12T16:17:38Z

    CAMEL-11267 Updated to obtain parameters from original endpoint URI and use curly braces

commit 926f9def75b32a5861d3dfe5028222efe0b7307b
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-13T16:51:04Z

    Change error to debug

commit 6abc8a7767cee9b4981834474e8e2fb71cffcd5a
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2017-05-08T11:14:51Z

    Upgrade Async Http Client to version 2.0.32

commit b66112346ee29f6c12447d40d5b1eaa763924a82
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 20cda49afe2af4c4846c26d1d149d6901b455cfa
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T08:57:16Z

    Upgrade CDI 2 API to version 2.0

commit 1bd593b705d7f10d8927c32d5e19ba061f6a7ba8
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2017-05-15T09:01:24Z

    Upgrade Weld 3.x to version 3.0.0.Final

commit 7b23f11896edeab1fcd6c12bf0d1036a5f8eeabd
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-15T09:31:13Z

    CAMEL-11280: camel-twitter : hard-coded component scheme

commit e313e6dba38c282369b3601212620d63b44dc14f
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T12:55:51Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
;;;","14/Aug/17 13:27;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1886
;;;","14/Aug/17 16:04;githubbot;GitHub user DG007 opened a pull request:

    https://github.com/apache/camel/pull/1889

    CAMEL-11668

    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DG007/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1889.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1889
    
----
commit 466c34431980323c801b0100a9f80bda0682074e
Author: dg007 <dicken.george@haufe-lexware.com>
Date:   2017-08-14T16:03:24Z

    CAMEL-11668
    
    CAMEL-11668: CompositeApiClient class in the camel-salesforces component cannot close a null InputStream

----
;;;","14/Aug/17 18:45;zregvart;Thanks for the PR!;;;","15/Aug/17 07:48;githubbot;Github user DG007 closed the pull request at:

    https://github.com/apache/camel/pull/1889
;;;","15/Aug/17 10:47;dickengeorge;The problem has been resolved with an implementation of IOHelper utility and now merged with the master branch;;;",,,,,,,,,,,,,,,,,,,,,,
Camel Hazelcast Queue Cosumer implementation,CAMEL-11666,13094109,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Batter,Batter,11/Aug/17 14:28,23/Aug/17 11:45,14/Jul/23 05:50,23/Aug/17 11:45,,,,,,2.20.0,,,,camel-hazelcast,,,,0,documentation,features,"Guys, 
i have following concern / question about Hazelcast Queue Consumer:

# I do understand why Topic is build based on CamelItemListener as ItemListener in HazelcastTopicConsumer. But the same behavior in HazelcastQueueConsumer doesn't look meaningful:
## Unlike Topic, Queue has state and someone subscribed to Queue and didn't process it (any reason here) no one will take it from queue (Event Already happened and will not happen again). Message will be stuck there. Until you explicitly poll it, which Camel-Hazelcast doesn't support (as consumer). I had to do Polling via Camel-Timer as workaround.
## Another problem is that ItemListener doesn't actually drain the Queue. It just listens to events. As for me it doesn't make any sense to receive message from Queue and don't have it removed from Queue. In current implementation you'll have to inject queue in Processor to actually Poll the message after ADD Event. 

If you won't change the code just please warn user here (http://camel.apache.org/hazelcast-component.html#HazelcastComponent-queue) that Queue consumer doesn't drain the queue. And Processor should actually drain it.
If node has failed to process message it should be explicitly polled to drain the queue via for example Timer.
",,acosentino,Batter,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 23 07:19:43 UTC 2017,,,,,,,,,,,"0|i3ip2v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Aug/17 14:53;acosentino;If this is a discussion about the design maybe it's better to start a thread on users/dev mailing list;;;","11/Aug/17 15:13;Batter;I think it's a design bug IMHO. 

But if you consider not as a bug (but rather a feature) that messages are not drained from Queue - it can be moved/closed with 'Works As Designed' Resolution.;;;","21/Aug/17 11:49;acosentino;I'm not sure I'm completely following the problem. The Hazelcast Queue Consumer is designed to consume events on a specific queue. So for example if you add an entry, the consumer will create an ADD event message to consume and if you remove an entry you'll have a REMOVE event message to consume.

If you want to perform operation on your queue you need to use the Hazelcast Queue Producer. Using it you'll be able to do what you want:
https://github.com/apache/camel/blob/master/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/queue/HazelcastQueueProducer.java;;;","21/Aug/17 14:12;Batter;Ok, let me give you scenario:

# We have *one* of boxes which will be receiving some messages
# Once it has received it should publish message to queue 
# Once messages in Queue now work will be distributed among all hosts participating in Hazelcast cluster.
# Each message is processed* only once* (by single host)

Now how it would look like if i would choose any JMS provider (Active MQ for example):
# First host is picking up messages and puts into the queue.
# Any hosts which are listening to the queue will pick up message and process it (Just One host processing One message)

In case of current Camel Hazelcast implementation:
# First host is picking up messages and puts into the queue.
# *All* hosts which are subscribed to the queue will pick up message event:
# Now you have to:
## Lock object in memory to avoid duplicated processing on all hosts (*One message All hosts*)
## *Poll message* from queue (because message listener doesn't remove item from queue)
# If for some reason host didn't perform ""Poll message from queue"" (any reason: restart, failure). Message will be stuck in queue until whole cluster rebooted and message will be lost.

But in case above how it differs from Topic? Absolutely the same implementation. No need to have queue.
Topic and Queue can't have the same implementation.
Topic = Subscription
Queue = Polling;;;","21/Aug/17 14:18;acosentino;This is more clear now. I'll take a look tomorrow. It waan't clear you were talking from the cluster perspective. Btw now it's clear;;;","22/Aug/17 09:01;lb;Maybe a solution would be to have a way to configure how the queue is ""consumed"" :

# *ConsumerMode.SNIFF* the consumer uses a listener to receive events, no remove is performed (_default to preserve behavior_)
# *ConsumerMode.POLL* the consumer polls the queue so elements are removed

Thoughts ?;;;","22/Aug/17 09:03;acosentino;Fine to me.;;;","22/Aug/17 14:10;Batter;Just please add to documentation:
# SNIFF = Subscribe which doesn't remove item from Queue and only listens for events. Object received by consumer will be com.hazelcast.core.ItemEvent.<Object>.
# POLL = Poll. Not sure if there will be any parameters (didn't find any here: http://camel.apache.org/activemq.html) like polling delay/period, Object received by consumer will be original object (or some wrapper).
Thanks;;;","22/Aug/17 14:17;lb;POLL will have a timeout as IQueue#poll(timeout, timeUnit);;;","22/Aug/17 22:28;davsclaus;Is SNIFF a term used by hazeclast? Otherwise Isn't PEAK a more common term?;;;","23/Aug/17 07:19;lb;No it is not an hazelcast term, it's the first thing that I had in mind to describe the functionality.

The current implementation listens for events on the queue so it gets notified about elements being added or removed so maybe LISTEN is a better name. PEEK would be confusing as it is not supposed to handle removal of elements.;;;",,,,,,,,,,,,,,,,,,,,,,
Camel-spring-security: The Karaf feature need spring-security-config to be installed,CAMEL-11657,13093688,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,10/Aug/17 07:07,10/Aug/17 07:11,14/Jul/23 05:50,10/Aug/17 07:11,,,,,,2.20.0,,,,camel-spring-security,karaf,,,0,,,Otherwise we won't have the information about XML handlers.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-08-10 07:07:17.0,,,,,,,,,,,"0|i3imnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade dozer to 6.1,CAMEL-11652,13093249,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,garethahealy,garethahealy,08/Aug/17 17:32,09/Aug/17 07:16,14/Jul/23 05:50,09/Aug/17 05:58,2.20.0,,,,,2.20.0,,,,camel-dozer,,,,0,,,"Dozer 6.1 has been released. The following doc explains the changes required:
- https://github.com/DozerMapper/dozer/blob/master/docs/asciidoc/migration/v6-to-v61.adoc",,garethahealy,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 09 07:16:01 UTC 2017,,,,,,,,,,,"0|i3ijz3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Aug/17 17:32;githubbot;GitHub user garethahealy opened a pull request:

    https://github.com/apache/camel/pull/1878

    Upgraded dozer to 6.1

    https://issues.apache.org/jira/browse/CAMEL-11652

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/garethahealy/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1878.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1878
    
----
commit 5fae1d7ffd4fdf0c72dccb944a3547ac4fc85ecf
Author: Gareth Healy <garethahealy@gmail.com>
Date:   2017-08-08T17:29:33Z

    Upgraded dozer to 6.1

----
;;;","09/Aug/17 07:16;githubbot;Github user garethahealy closed the pull request at:

    https://github.com/apache/camel/pull/1878
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cookie Handling only works for one cookie,CAMEL-11649,13093116,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,08/Aug/17 10:39,08/Aug/17 13:41,14/Jul/23 05:50,08/Aug/17 13:41,2.19.1,,,,,2.19.3,2.20.0,,,camel-ahc,,,,0,,,The cookie handling as implemented with CAMEL-10392 only works for a single cookie sent from the server as the handling of multi-valued headers is wrong,,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 08 10:49:48 UTC 2017,,,,,,,,,,,"0|i3ij5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Aug/17 10:49;siano;I have pushed the change to master, I will cherry-pick it to camel-2.19.x once the 2.19.2 release is done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mongodb-gridfs - Created document cannot be read by the new MongoDB GridFS API,CAMEL-11648,13092998,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mgyongyosi,mgyongyosi,07/Aug/17 19:56,08/Aug/17 02:29,14/Jul/23 05:50,08/Aug/17 02:29,2.19.1,,,,,2.19.3,2.20.0,,,camel-mongodb,,,,0,,,"The new MongoDB GridFS API (http://mongodb.github.io/mongo-java-driver/3.5/driver/tutorials/gridfs/) throws an exception when my application (not Camel based) iterates over the GridFS documents created by Camel's {{camel-mongodb-gridfs}} component.

The problem: the current GridFSProducer adds the ""metadata"" field regardless it is null. Referring to https://jira.mongodb.org/browse/JAVA-2577 the document should not contain a metadata field if the field is null.",,davsclaus,githubbot,mgyongyosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 08 02:29:45 UTC 2017,,,,,,,,,,,"0|i3iifb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Aug/17 20:14;githubbot;GitHub user mgyongyosi opened a pull request:

    https://github.com/apache/camel/pull/1876

    CAMEL-11648: gridfs skip metadata field if it is null

    PR for https://issues.apache.org/jira/browse/CAMEL-11648

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mgyongyosi/camel camel-mongodb-gridfs-skip-metadata-if-null

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1876.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1876
    
----
commit 71cc69d73af2ddcd87d48dbf31b85b119afee1af
Author: mgyongyosi <gymisi@gmail.com>
Date:   2017-08-07T20:02:49Z

    CAMEL-11648: skip metadata when it is null

----
;;;","08/Aug/17 02:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1876
;;;","08/Aug/17 02:29;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extensions: registerExtension method has to avoid final in his declaration to work in CDI,CAMEL-11643,13092820,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,acosentino,acosentino,07/Aug/17 08:52,07/Aug/17 09:37,14/Jul/23 05:50,07/Aug/17 09:37,,,,,,2.20.0,,,,camel-core,examples,,,0,,,"For example in the examples camel-example-cdi-properties we are currently getting an error:

{code}
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.example.cdi.properties.CdiPropertiesTest
2017-08-07 10:40:08,567 [main           ] INFO  Version                        - WELD-000900: 2.4.4 (Final)
2017-08-07 10:40:08,726 [main           ] INFO  Bootstrap                      - WELD-000101: Transactional services not available. Injection of @Inject UserTransaction not available. Transactional observers will be invoked synchronously.
2017-08-07 10:40:08,824 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] private org.apache.camel.cdi.CdiCamelExtension.processAnnotatedType(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,828 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] private org.apache.camel.cdi.CdiCamelExtension.processAnnotatedType(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,831 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] protected org.apache.deltaspike.core.impl.interceptor.GlobalInterceptorExtension.promoteInterceptors(@Observes ProcessAnnotatedType, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,839 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] public org.apache.deltaspike.core.impl.config.ConfigurationExtension.findDynamicConfigurationBeans(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,841 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] protected org.apache.deltaspike.core.impl.message.MessageBundleExtension.detectInterfaces(@Observes ProcessAnnotatedType) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:08,846 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] protected org.apache.deltaspike.core.impl.exclude.extension.ExcludeExtension.vetoBeans(@Observes ProcessAnnotatedType, BeanManager) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2017-08-07 10:40:09,090 [main           ] WARN  Validator                      - WELD-001478: Interceptor class org.apache.deltaspike.core.impl.throttling.ThrottledInterceptor is enabled for the application and for the bean archive /home/oscerd/.m2/repository/org/apache/deltaspike/core/deltaspike-core-impl/1.8.0/deltaspike-core-impl-1.8.0.jar. It will only be invoked in the @Priority part of the chain.
2017-08-07 10:40:09,091 [main           ] WARN  Validator                      - WELD-001478: Interceptor class org.apache.deltaspike.core.impl.lock.LockedInterceptor is enabled for the application and for the bean archive /home/oscerd/.m2/repository/org/apache/deltaspike/core/deltaspike-core-impl/1.8.0/deltaspike-core-impl-1.8.0.jar. It will only be invoked in the @Priority part of the chain.
2017-08-07 10:40:09,091 [main           ] WARN  Validator                      - WELD-001478: Interceptor class org.apache.deltaspike.core.impl.future.FutureableInterceptor is enabled for the application and for the bean archive /home/oscerd/.m2/repository/org/apache/deltaspike/core/deltaspike-core-impl/1.8.0/deltaspike-core-impl-1.8.0.jar. It will only be invoked in the @Priority part of the chain.
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.14 s <<< FAILURE! - in org.apache.camel.example.cdi.properties.CdiPropertiesTest
[ERROR] org.apache.camel.example.cdi.properties.CdiPropertiesTest  Time elapsed: 1.14 s  <<< ERROR!
org.jboss.weld.exceptions.DeploymentException: 
Exception List with 1 exceptions:
Exception 0 :
javax.enterprise.inject.InjectionException: Error adding routes of type [org.apache.camel.example.cdi.properties.Application$HelloRoute] to Camel context [hello]
	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:456)
	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:399)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:88)
	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:144)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:299)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:124)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:277)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:255)
	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:269)
	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:258)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:154)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:148)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)
	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)
	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)
	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:487)
	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:90)
	at org.jboss.weld.environment.se.Weld.initialize(Weld.java:787)
	at org.apache.camel.test.cdi.CamelCdiDeployment$1.evaluate(CamelCdiDeployment.java:71)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
Caused by: org.apache.camel.RuntimeCamelException: org.jboss.weld.exceptions.UnproxyableResolutionException: WELD-001480: Bean type class org.apache.camel.component.properties.PropertiesComponent is not proxyable because it contains a final method protected final void org.apache.camel.impl.DefaultComponent.registerExtension(org.apache.camel.component.extension.ComponentExtension) - <unknown javax.enterprise.inject.spi.Bean instance>.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1828)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:683)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2532)
	at org.apache.camel.model.ProcessorDefinitionHelper.resolvePropertyPlaceholders(ProcessorDefinitionHelper.java:735)
	at org.apache.camel.model.RouteDefinitionHelper.initRouteInputs(RouteDefinitionHelper.java:378)
	at org.apache.camel.model.RouteDefinitionHelper.prepareRouteImp(RouteDefinitionHelper.java:298)
	at org.apache.camel.model.RouteDefinitionHelper.prepareRoute(RouteDefinitionHelper.java:270)
	at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:205)
	at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:158)
	at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:169)
	at org.apache.camel.example.cdi.properties.Application$HelloRoute.configure(Application.java:45)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:462)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:402)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:383)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:1014)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:1011)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3235)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:1011)
	at org.apache.camel.impl.DefaultCamelContext$Proxy$_$$_WeldClientProxy.addRoutes(Unknown Source)
	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:443)
	... 31 more
Caused by: org.jboss.weld.exceptions.UnproxyableResolutionException: WELD-001480: Bean type class org.apache.camel.component.properties.PropertiesComponent is not proxyable because it contains a final method protected final void org.apache.camel.impl.DefaultComponent.registerExtension(org.apache.camel.component.extension.ComponentExtension) - <unknown javax.enterprise.inject.spi.Bean instance>.
	at org.jboss.weld.util.Proxies.getUnproxyableClassException(Proxies.java:222)
	at org.jboss.weld.util.Proxies.getUnproxyableTypeException(Proxies.java:179)
	at org.jboss.weld.util.Proxies.getUnproxyableTypeException(Proxies.java:141)
	at org.jboss.weld.bean.proxy.ClientProxyProvider.getClientProxy(ClientProxyProvider.java:239)
	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:779)
	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:808)
	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:61)
	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:85)
	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)
	at org.apache.camel.cdi.CdiCamelRegistry.lambda$findByTypeWithName$63(CdiCamelRegistry.java:78)
	at java.util.stream.Collectors.lambda$toMap$214(Collectors.java:1321)
	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.apache.camel.cdi.CdiCamelRegistry.findByTypeWithName(CdiCamelRegistry.java:78)
	at org.apache.camel.cdi.CdiCamelRegistry.lookupByName(CdiCamelRegistry.java:58)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
	... 50 more


[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Errors: 
[ERROR]   CdiPropertiesTest.org.apache.camel.example.cdi.properties.CdiPropertiesTest » Deployment
[INFO] 
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0
[INFO] 
{code}",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-08-07 08:52:28.0,,,,,,,,,,,"0|i3ihbj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
property placeholder is not replaced in REST DSL in blueprint context,CAMEL-11636,13092545,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,clauds2x,clauds2x,04/Aug/17 17:51,07/Aug/17 08:22,14/Jul/23 05:50,07/Aug/17 08:22,2.19.1,,,,,2.19.3,2.20.0,,,camel-blueprint,rest,,,0,,,"I'm trying to update from Camel 2.16.3 to 2.19.1 and experience issues using properties in the REST DSL in blueprint context.

I have the following config:

{code}
        <rest path=""patient/{patient_id}/events?cutoff_timestamp={cutoff_timestamp}&amp;limit={limit}"" produces=""application/json"" consumes=""application/json"">
            <get bindingMode=""off"">
                <param name=""patient_id"" type=""path"" dataType=""string"" required=""true"" />
                <param name=""cutoff_timestamp"" type=""query"" dataType=""long"" required=""false"" />
                <param name=""limit"" type=""query"" dataType=""integer"" required=""false"" defaultValue=""{{vel.rest.default.rowlimit}}"" />
{code}               
For the param ""limit"" the property {{{{vel.rest.default.rowlimit}}}} used in attribute defaultValue seems not to get replaced as I receive the following exception:
{code}
    java.lang.NumberFormatException: For input string: ""{{vel.rest.default.rowlimit}}""
{code}

----
Originally asked on the mailing list: http://camel.465427.n5.nabble.com/issue-with-property-in-REST-DSL-in-blueprint-context-Camel-2-19-1-td5809573.html
",Apache Karaf 4.0.9 running on OSX 10.12.5,clauds2x,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 07 08:22:39 UTC 2017,,,,,,,,,,,"0|i3ifo7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Aug/17 07:09;davsclaus;This requires to be pre resolved as the swagger javadoc need to include the resolved value as well.;;;","07/Aug/17 08:22;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QuartzScheduledPollConsumerScheduler causes trigger misfires on each application start,CAMEL-11632,13092458,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oceansize,oceansize,04/Aug/17 11:55,12/Sep/17 12:44,14/Jul/23 05:50,12/Sep/17 12:44,2.19.0,,,,,2.18.5,2.19.4,2.20.0,,camel-quartz2,,,,0,,,"Recently I noticed that on application start Quartz founds and triggers misfired triggers:
{code:java}
INFO o.s.s.q.LocalDataSourceJobStore - Handling 1 trigger(s) that missed their scheduled fire-time.
{code}
That wasn't not the realistic case in my scenario - since I could see in a database that NEXT_FIRE_TIME is much ahead of the current time.

After digging a little I found the issue in the *QuartzScheduledPollConsumerScheduler*:
{code:java}
 // Ensure the cron schedule is updated
CronTrigger newTrigger = existingTrigger.getTriggerBuilder().withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())).build();

quartzScheduler.rescheduleJob(triggerKey, newTrigger);
{code}

There 2 issues here:
1. Job is rescheduled even if nothing has been changed (i.e. cron expression, cron timezone)
2.  *existingTrigger.getTriggerBuilder()* returns trigger builder with START_TIME of existing trigger which, surely, is the past. This is causing the described bug - NEXT_FIRE_TIME is calculated based on the old START_TIME and is in the past also. So rescheduled trigger becomes misfired trigger immediately.

Proposal:
1. Do not reschedule job if nothing has been changed.
2. If job needs to be rescheduled - make sure to set START_TIME to a current date.",,davsclaus,oceansize,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 12 10:59:07 UTC 2017,,,,,,,,,,,"0|i3if5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Aug/17 06:18;davsclaus;You are welcome to work on a contribution;;;","12/Sep/17 10:59;davsclaus;The existing quartz consumer already does that by checking of the cron/tz was changed and then only does a reschedule if needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Paho Missiong reconnect logic,CAMEL-11631,13092441,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,fabryprog,fabryprog,fabryprog,04/Aug/17 10:52,04/Aug/17 13:18,14/Jul/23 05:50,04/Aug/17 12:32,2.19.2,,,,,2.20.0,,,,camel-paho,,,,0,,,"When it loses the connection, it is not restored.

You have to write the reconnection logic

{noformat}
[thread #2 - seda://sendToMqtt2] SedaConsumer                   WARN  Error processing exchange. Exchange[]. Caused by: [org.eclipse.paho.client.mqttv3.MqttException - Client is not connected]
Client is not connected (32104)
	at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:31)
	at org.eclipse.paho.client.mqttv3.internal.ClientComms.sendNoWait(ClientComms.java:166)
	at org.eclipse.paho.client.mqttv3.MqttAsyncClient.publish(MqttAsyncClient.java:1027)
	at org.eclipse.paho.client.mqttv3.MqttClient.publish(MqttClient.java:399)
	at org.apache.camel.component.paho.PahoProducer.process(PahoProducer.java:43)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
{noformat}",,fabryprog,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 04 13:18:39 UTC 2017,,,,,,,,,,,"0|i3if1z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Aug/17 12:32;githubbot;GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1870

    CAMEL-11631, Camel-Paho Missiong reconnect logic

    https://issues.apache.org/jira/browse/CAMEL-11631

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-11631

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1870.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1870
    
----
commit f3472922a694473115377e676bd84e39d5e9ba0f
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2017-08-04T12:30:10Z

    CAMEL-11631, Camel-Paho Missiong reconnect logic

----
;;;","04/Aug/17 13:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1870
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JPAMessageIdRepository Not Releasing Connections,CAMEL-11630,13092229,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mary.mistretta@gmail.com,mary.mistretta@gmail.com,03/Aug/17 15:50,21/Mar/20 11:40,14/Jul/23 05:50,12/Aug/17 23:55,2.19.1,,,,,2.18.5,2.19.3,2.20.0,,camel-jpa,,,,0,,,When using the JpaMessageIdRepository for an idempotent repo for file processing it holds onto connections and does not release them unless you manually flush the connection pool.,,davsclaus,mary.mistretta@gmail.com,,,,,,,,,,,,,,,,,,,,,CAMEL-14761,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Aug 12 23:55:58 UTC 2017,,,,,,,,,,,"0|i3idqv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Aug/17 15:51;mary.mistretta@gmail.com;I'm not sure i see a way to assign this to myself, but i plan on completing it. See this issue https://issues.jboss.org/browse/ENTESB-7169;;;","10/Aug/17 19:59;mary.mistretta@gmail.com;PR up https://github.com/apache/camel/pull/1883;;;","12/Aug/17 23:55;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT Connection loop,CAMEL-11628,13092122,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fabryprog,fabryprog,03/Aug/17 08:34,04/Nov/17 13:20,14/Jul/23 05:50,04/Nov/17 09:45,2.17.0,,,,,2.19.5,2.20.1,2.21.0,,camel-mqtt,,,,1,,,"Hello everyone, i found an particular bug situation

I have same mqtt producer with high volume traffic. When my application losts tcp connection to mqtt server i have follow connection loop error. This bug is sometime verified because it depend by multiple factors (load machine, load mqtt server, payload, etc)

I am reading source code and i suppose that the bug is introduced by volatile variable connected (it isn't thread-safe)

To resolve this bug you must refactoring all MQTTEndpoint connection code.


[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
[        hawtdispatch-DEFAULT-3] MQTTEndpoint                   INFO  MQTT Connection connected to tcp://mqtt:1883
",,bapowell,davsclaus,fabryprog,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11989,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 04 13:20:22 UTC 2017,,,,,,,,,,,"0|i3id3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Aug/17 01:54;davsclaus;Was there some code changes contributed as PR that fixes this?;;;","11/Aug/17 08:22;fabryprog;No.

I tried to fix it but the bug is on the fuse library!!!!;;;","12/Sep/17 12:54;davsclaus;Have you been able to re-produce this? Also there is camel-paho as MQTT component which possible is a better library to use than camel-mqtt.;;;","09/Oct/17 19:22;bapowell;I, too, could really use a fix for this bug.

By the way, camel-paho isn't always an option, due to things like the lack of ability to dynamically specify the topic for a producer endpoint. With the mqtt component this is possible via the CamelMQTTPublishTopic header.

As for reproducing this bug:

1. Use the route listed below.
2. Start an MQTT broker.
    2.a. I've tried Mosquitto 1.4.14 under RHEL 7.2 as well as Mosquitto 1.4.11 under Windows 7.
3. Start the route.
4. After a few seconds, kill the MQTT broker.
5. Wait roughly 30 seconds, at which point you'll start gettting ""Failed delivery..."" errors (and ""camel:route-list"" will start showing failed exchanges).
6. Start the MQTT broker back up.
7. Bug shows up:

Camel log starts outputting tons of the following messages:
    INFO  | spatch-DEFAULT-1 | MQTTEndpoint                     | 153 - org.apache.camel.camel-mqtt - 2.17.0 | MQTT Connection connected to tcp://localhost:1883

Mosquitto repeatedly outputs the following set of message:
    New client connected from 127.0.0.1 as tmr2mqttClient (c1, k30).
    Sending CONNACK to tmr2mqttClient (0, 0)
    New connection from 127.0.0.1 on port 1883.
    Client tmr2mqttClient already connected, closing old connection.
    Client tmr2mqttClient disconnected.

Mosquitto's behavior is indicative of an MQTT client process (Camel in this case) using the same clientID to establish a new connection, when a connection using that same clientID already exists. Per MQTT spec, Mosquitto will disconnect the current connection with that clientID, and then accept the new connection.

+Route to use+

{code:xml}
  <camelContext id=""blueprint-ctx-for-mqtt"" xmlns=""http://camel.apache.org/schema/blueprint"">
    <route id=""timerToMqtt"">
      <from uri=""timer:toMqtt?period=1000""/>
      <setHeader headerName=""CamelMQTTPublishTopic"">
          <simple>camelTopic-${date:now:ss}</simple>
      </setHeader>
      <setBody>
          <simple>${date:now:yyyyMMdd-HH:mm:ss.SSS}</simple>
      </setBody>
      <log message=""The message contains ${body}""/>
      <to uri=""mqtt://tmr2mqttPublisher?host=tcp://localhost:1883&amp;clientId=tmr2mqttClient&amp;cleanSession=true&amp;qualityOfService=AtMostOnce&amp;connectWaitInSeconds=5&amp;reconnectAttemptsMax=5&amp;reconnectDelay=500&amp;reconnectDelayMax=5000""/>
    </route>
  </camelContext>
{code}
;;;","03/Nov/17 10:24;davsclaus;In Camel 2.21 you can now use a header to override the topic in camel-paho;;;","03/Nov/17 15:37;bapowell;That's good to know, Claus. Thanks for the inform.

The Fusesource MQTT client still seems to be a bit more ""robust"" than paho, after rudimentary testing on my part, but I suspect the paho component is the one we should focus on using going forward, as it has the full Eclipse IoT effort behind it.;;;","03/Nov/17 15:42;bapowell;I investigated this bug, found what I believe is the culprit, fixed it, and tested successfully.

I'll submit a PR with the fix.

But in a nutshell, the fix was to add this at the top of the MQTTEndpoint createConnection() method:


{code:java}
    protected void createConnection() {
        if (connection != null) {
            // In connect(), in the connection.connect() callback, onFailure() doesn't seem to ever be called, so forcing the disconnect here.
            // Without this, the fusesource MQTT client seems to be holding the old connection object, and connection contention can ensue.
            connection.disconnect(null);
        }
{code}
    	
;;;","03/Nov/17 16:42;githubbot;bapowell opened a new pull request #2077: CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.
URL: https://github.com/apache/camel/pull/2077
 
 
   https://issues.apache.org/jira/browse/CAMEL-11628

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Nov/17 16:42;githubbot;GitHub user bapowell opened a pull request:

    https://github.com/apache/camel/pull/2077

    CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.

    https://issues.apache.org/jira/browse/CAMEL-11628

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bapowell/camel camel-2.17.x-mqtt-fix-11628

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2077.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2077
    
----
commit f88506c28585ede9eec6ed5eccc82f1eb977597f
Author: Brad Powell <bapowell@sbcglobal.net>
Date:   2017-11-03T16:36:56Z

    CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.

----
;;;","04/Nov/17 09:45;davsclaus;Thanks for the PR;;;","04/Nov/17 09:46;githubbot;davsclaus commented on issue #2077: CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.
URL: https://github.com/apache/camel/pull/2077#issuecomment-341884407
 
 
   Thanks for the PR it has been merged. Do you mind closing this?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Nov/17 13:20;githubbot;bapowell closed pull request #2077: CAMEL-11628: camel-mqtt - Fix in MQTTEndpoint for connection loop bug.
URL: https://github.com/apache/camel/pull/2077
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
index d0797782997..c9b38701041 100644
--- a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
+++ b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
@@ -230,6 +230,12 @@ protected void doStart() throws Exception {
     }
 
     protected void createConnection() {
+        if (connection != null) {
+            // In connect(), in the connection.connect() callback, onFailure() doesn't seem to ever be called, so forcing the disconnect here.
+            // Without this, the fusesource MQTT client seems to be holding the old connection object, and connection contention can ensue.
+            connection.disconnect(null);
+        }
+    	
         connection = configuration.callbackConnection();
 
         connection.listener(new Listener() {
@@ -328,7 +334,7 @@ public void onFailure(Throwable value) {
 
             }
 
-            public void onFailure(Throwable value) {
+            public void onFailure(Throwable value) {  // this doesn't appear to ever be called
                 LOG.warn(""Failed to connect to "" + configuration.getHost() + "" due "" + value.getMessage());
                 promise.onFailure(value);
                 connection.disconnect(null);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Nov/17 13:20;githubbot;Github user bapowell closed the pull request at:

    https://github.com/apache/camel/pull/2077
;;;",,,,,,,,,,,,,,,,,,,,
Camel-Undertow doesn't work in OSGi,CAMEL-11627,13092096,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,03/Aug/17 07:20,03/Aug/17 07:31,14/Jul/23 05:50,03/Aug/17 07:31,,,,,,2.20.0,,,,camel-undertow,,,,0,,,"Actually camel-undertow doesn't work in OSGi.

{code}
java.lang.IllegalArgumentException: UT001031: Unknown scheme in URI http://localhost:8010/test
	at io.undertow.client.UndertowClient.getClientProvider(UndertowClient.java:163) [26:io.undertow.core:1.4.18.Final]
{code}

Because it is using

{code}
UndertowClient.getInstance(getCamelContext().getApplicationContextClassLoader())
{code}

and it cannot find its providers. We should use 

{code}
UndertowClient.getInstance()
{code}

",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-08-03 07:20:26.0,,,,,,,,,,,"0|i3icxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ServiceNowException is printing ""%d"" (not replacing value)",CAMEL-11626,13092085,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,apupier,apupier,03/Aug/17 06:36,03/Aug/17 06:59,14/Jul/23 05:50,03/Aug/17 06:59,2.19.0,,,,,2.19.3,2.20.0,,,camel-servicenow,,,,0,,,,,apupier,githubbot,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 06:58:04 UTC 2017,,,,,,,,,,,"0|i3icvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Aug/17 06:41;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1865

    CAMEL-11626 - Provide a value for the %d in String format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-11626-FixExceptionName

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1865.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1865
    
----
commit d00a20e066e562441342cd02f1ae6f14fb5d15f8
Author: Aurélien Pupier <apupier@redhat.com>
Date:   2017-08-03T06:39:23Z

    CAMEL-11626 - Provide a value for the %d in String format

----
;;;","03/Aug/17 06:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1865
;;;","03/Aug/17 06:58;lb;Not relevant for camel 2.18.x;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST DSL/component method Uppercase,CAMEL-11624,13091886,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,poloche,poloche,02/Aug/17 13:32,08/Sep/17 13:38,14/Jul/23 05:50,08/Sep/17 13:38,2.19.1,,,,,2.19.4,2.20.0,,,rest,,,,0,,,"when we are using rest component we need to set the method in uppercase otherwise this will return error 405

bad example : String requestResponse = testProducer.requestBody(""rest:get:health?host=$activityHost:$activityPort"", null, String.class)

working example
String requestResponse = testProducer.requestBody(""rest:GET:health?host=$activityHost:$activityPort"", null, String.class)",,aldettinger,davsclaus,poloche,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,"String requestResponse = testProducer.requestBody(""rest:GET:health?host=$activityHost:$activityPort"", null, String.class)",false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 05 17:17:26 UTC 2017,,,,,,,,,,,"0|i3ibnb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Aug/17 06:10;davsclaus;What rest component are you using? As it may depend on which component that does the actual rest call about the upper case thing. 

But yeah we should make it work with regardless how you type it;;;","05/Sep/17 17:17;davsclaus;Can you tell us what component you are using?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LevelDB Java implementation wont be tried on Errors,CAMEL-11623,13091852,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,kartasevm,kartasevm,02/Aug/17 10:38,03/Aug/17 10:13,14/Jul/23 05:50,03/Aug/17 10:13,2.19.2,,,,,2.18.5,2.19.3,2.20.0,,camel-leveldb,,,,0,,,"For a bit of background, we have been running into a problem with the LevelDB JNI drivers for AggregationRepositories, which prevents startup when using routes for which we require persistent aggregation. This, however, is not the main topic of this issue.

In the latest version (2.19.2) the following issue has implemented a Java specific leveldb factory:

 https://issues.apache.org/jira/browse/CAMEL-11427

The relevant part of the Error on startup is as follows: 

java.lang.UnsatisfiedLinkError: Could not load library. Reasons: [no leveldbjni64-1.8 in java.library.path, no leveldbjni-1.8 in java.library.path, no leveldbjni in java.library.path, C:\Users\atos\AppData\Local\Temp\leveldbjni-64-1-794362262645531032.8: Can't find dependent libraries] 
at org.fusesource.hawtjni.runtime.Library.doLoad(Library.java:182) 
at org.fusesource.hawtjni.runtime.Library.load(Library.java:140) 
at org.fusesource.leveldbjni.JniDBFactory.(JniDBFactory.java:48) 
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 
at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 
at java.lang.Class.newInstance(Class.java:442) 
at org.apache.camel.component.leveldb.LevelDBFile.getFactory(LevelDBFile.java:189) 
at org.apache.camel.component.leveldb.LevelDBFile.start(LevelDBFile.java:174) 


The way that I understand the code added in issue 11427, is that the LevelDBFile class getFactory() method (line 181) will first try to initiate with the JNI drivers and if that fails, will turn to the pure Java implementation. This is done by catching an Exception which is then ignored incase the JNI driver fails.

However, when we look at the code we see that UnstatisfiedLinkError does not extend Exception, it extends Error.

This Error is therefore not caught by the application and thus the Java implementation for LevelDB is never even attempted to be initialized as the method execution ends exceptionally at that point.

So the main two questions are: 
1) Was the code intended to catch this UnsatisfiedLinkageError (I know Errors are often considered a bad thing to catch) as a means to substitute the JNI driver, incase it fails?
2) If it is not supposed to catch this error, how can I use the pure Java implementation in this case? I expect that trying to exclude relevant packages also wont work as it will directly try to initiate the the JNI implementation by its name, which would fail also with an Error.


So, in summary:
Is line 194 in class LevelDBFile in the camel-leveldb component supposed to catch an Error or more generally a Throwable instead of Exception?

",,acosentino,davidkarlsen,davsclaus,githubbot,kartasevm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11427,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 10:06:51 UTC 2017,,,,,,,,,,,"0|i3ibfr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Aug/17 10:43;kartasevm;I assume this problem would be present in the 2.17.x, 2.18.x and 2.20.x branches as well, but they have not actually been released yet, so I am not sure how to mark the affects versions (see 11427 in regards to wrong version in Jira);;;","02/Aug/17 10:43;davsclaus;Yes catch Throwable. You are welcome to work on a patch or better yet a github PR
http://camel.apache.org/contributing;;;","02/Aug/17 11:22;kartasevm;I will start working on a PR.

It looks as If I can't assign the task to myself on my own. Should it be assigned to me?;;;","02/Aug/17 11:33;davsclaus;Mart, yeah its fine with a comment.

We can grant rights to self assign tickets, but we tend to do this with users whom have worked on Camel a little bit more and shown interrest on helping out with many different things. 
;;;","02/Aug/17 11:33;davsclaus;You can just do the github PR against master branch, then we backport to the older branches.;;;","03/Aug/17 08:18;davidkarlsen;Handling Throwable is usually not a good practice (would catch OutOfMemoryError for instance) - maybe better and clearer to narrow to multicatch of UnsatisfiedLinkageError | Exception ?;;;","03/Aug/17 08:49;kartasevm;I agree that in most cases it would be a bad practice and you might be correct that it is here as well. I would like to discuss a little first, though.

I think that there are multiple types of Errors that might be relevant to catch here. For example NoClassDefFoundError, might be relevant as the fusesource JNI implementation is an optional include according to the POM, as is the iq80 java implementation. So technically we could exclude either of them and expecting to end up with an IllegalStateException instead.

Say for example that we manually exclude fusesource packages entirely. Would we want it to fail with NoClassDefFoundError or have it catched and try the iq80 implementation?

So my point is, are we trying to make sure that we try the Java implementation always, or only during the UnsatisfiedLinkageError?

The point about the OutOfMemoryError is inarguably a sound one however... and catching throwable might hide some other odd problems, especially without logging.
;;;","03/Aug/17 08:53;kartasevm;LinkageError is a superclass of both NoClassDefFoundError and UnsatisfiedLinkageError..

I am thinking that maybe specifying LinkageError as a more specific subset of Error might be relevant to this case?;;;","03/Aug/17 08:55;kartasevm;I am not sure if ClassCircularity is something we want to catch here but many other subclasses of Linkage Error seem relevant though.
;;;","03/Aug/17 08:57;davidkarlsen;It's probably close enough. I am nitpicking a bit anyways - catching LinkageError will narrow it quite a bit to what was originally thought.;;;","03/Aug/17 08:58;davsclaus;We catch throwable in many other places - this is fine as this is about loading the implementation on startup, and not while runtime routing. So I am +1 for the throwable.;;;","03/Aug/17 09:27;kartasevm;Well I had already submitted the PR as catching a Throwable before David's comment. I could change it though.

What would be preferable?;;;","03/Aug/17 09:29;acosentino;Since we do the same in other places I guess it's ok to catch Throwable. Can you add the issue number to commit message?;;;","03/Aug/17 09:31;kartasevm;I just saw your comment in GitHub. I am already doing so, no problem.;;;","03/Aug/17 10:06;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1866
;;;",,,,,,,,,,,,,,,,,,
Requiredement for date string to be longer than pattern is invalid.,CAMEL-11620,13091446,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,peter.carpenter,peter.carpenter,01/Aug/17 04:36,03/Aug/17 09:19,14/Jul/23 05:50,02/Aug/17 06:37,2.18.3,2.19.1,,,,2.18.5,2.19.3,2.20.0,,camel-bindy,,,,0,,,"Came across a bug attempting to parse date fields into a LocalDate using bindy.

LocalDateTimeFormatFactory.parse(String string) calls ""doesStringFitLengthOfPattern(string) which does a string length comparison between the date and the pattern.
This fails if the pattern includes ""X"" for timezone and the date string includes ""+10:00"".  Obviously 5 characters is more than 1 character and therefore this date is rejected incorrectly.
This check should be removed.",,githubbot,pchhabra11,peter.carpenter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 03 09:19:27 UTC 2017,,,,,,,,,,,"0|i3i8xz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Aug/17 12:12;pchhabra11;Working on it. ;;;","01/Aug/17 13:53;githubbot;GitHub user pchhabra11 opened a pull request:

    https://github.com/apache/camel/pull/1860

    ""CAMEL-11620:Requiredement for date string to be longer than pattern …

    Fix For CAMEL-11620


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pchhabra11/camel CAMEL-11620

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1860.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1860
    
----
commit 4b731b921022ff354065bdceb0308354a73bd4d0
Author: Pulkit <pchhabra@redhat.com>
Date:   2017-08-01T13:49:44Z

    ""CAMEL-11620:Requiredement for date string to be longer than pattern is invalid

----
;;;","03/Aug/17 09:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1860
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WorkerPool is null in DefaultCamelReactiveStreamsService,CAMEL-11615,13091046,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,qabbasi,qabbasi,30/Jul/17 14:47,04/Sep/17 12:04,14/Jul/23 05:50,04/Sep/17 11:53,2.19.1,,,,,2.19.3,2.20.0,,,camel-reactive-streams,,,,0,,,"In https://github.com/qabbasi/reactive-camel-demo I'm using the camel-reactive-streams-starter project to create a application based on RxJava2. Currently I'm getting a NPE during runtime.

I also tried to test the sample route inside https://github.com/apache/camel/tree/master/examples/camel-example-reactive-streams, but unfortunately this also results in the same exception:

java.lang.NullPointerException: null
        at org.apache.camel.component.reactive.streams.engine.CamelSubscription.checkAndFlush(CamelSubscription.java:123) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.engine.CamelSubscription.publish(CamelSubscription.java:247) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.engine.CamelPublisher.publish(CamelPublisher.java:100) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsService.sendCamelExchange(DefaultCamelReactiveStreamsService.java:123) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.component.reactive.streams.ReactiveStreamsProducer.process(ReactiveStreamsProducer.java:44) ~[camel-reactive-streams-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:120) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) ~[camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:197) [camel-core-2.19.1.jar:2.19.1]
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:79) [camel-core-2.19.1.jar:2.19.1]
        at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_141]
        at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_141]
","OS: OSX 10.11.6
JDK: Oracle 1.8.0_141
MVN: 3.5.0",davsclaus,qabbasi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 04 12:04:46 UTC 2017,,,,,,,,,,,"0|i3i6hb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Jul/17 08:36;qabbasi;[~davsclaus] I tested it just out on 2.20.0-SNAPSHOT: still getting a NPE.;;;","01/Aug/17 20:11;davsclaus;Yeah thanks for testing. Its because the reactive stream component is not started before the @PostConstruct code is run, where you call the subscribe method, which then runs the flow - where the thread pool is null because its not started yet.

I guess it may be nicer to let the subscribe method ""remember"" it should start only after the component has been started, so it startup after all the other stuff such as Camel has been started.

This is more safter as you can have a race condition where the stream flow will trigger some stream events you then route into camel which then happens to be starting up at the same time.
;;;","05/Aug/17 13:40;qabbasi;Thanks for the nice writeup of the underlying issue. If there's no one already working on this issue I'd would willingly try to help here. Likewise it would be helpful if you could roughly point to interesting parts of the processing which I could then examine.

Food for thought:
Idk if it's a misuse or overkill: maybe we could notify the final processing component (i.e. code where the subscribe method is defined) via Spring application events that everything is ""hooked up""?;;;","06/Aug/17 07:30;davsclaus;Yeah I thought a bit on the same line to look at CamelSubscription so its subscribe method would only start after camel context has been started. There is ways to hook into this. 

Take a look at
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/StartupListener.java

And then see how its used in other Camel components and see if you can find out how to hook that into this component/subscriber.;;;","09/Aug/17 18:40;qabbasi;After digging through the codebase I've a proposal which I wanted to discuss with you before I go out for the actual implementation and testing of it.

Currently there's no way to stop clients calling the CamelReactiveStreamsService#fromStream static factory method right after instantiating the CamelReactiveStreamsService, i.e. not waiting for the actual bootstrapping of the service. (One could also provide a kind of callback method, which would be executed when the bootstrapping is done. But that would look rather unusual in my POV) TBH I think the client shouldn't be bothered with the internals of the service. Long story short: I'd propose that we enqueue all fromStream()-calls inside the service and would execute them right after when CamelReactiveStreamsService#doStart is called. Otherwise – as you already pointed out – we would never have a backed ThreadPool inside the created publisher & subscribers.

Regarding the StartupListener: this would not work for services but rather for components, as you may know. I think, CamelReactiveStreamsService#doStart provides the same mimic/mechanism for this synchronisation-logic. What do you say?;;;","18/Aug/17 09:23;qabbasi;[~davsclaus] What do you say? Any alternative suggestion?;;;","22/Aug/17 00:12;davsclaus;I am traveling and dont have time to look into this, I will be back start of next month;;;","04/Sep/17 11:53;davsclaus;Yeah the component has been improved from 2.20 onwards so it works better there. 

The best solution is to create the thread pool in the constructor which is now what we do.;;;","04/Sep/17 12:04;qabbasi;Creating the TP directly inside the ctor is of course a lot easier then I originally thought :);;;",,,,,,,,,,,,,,,,,,,,,,,,
UnsatisfiedDependencyException: Error creating bean with name 'openTracingEventNotifier',CAMEL-11610,13090473,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,objectiser,objectiser,27/Jul/17 09:33,27/Jul/17 14:17,14/Jul/23 05:50,27/Jul/17 14:17,2.19.2,2.20.0,,,,2.19.2,2.20.0,,,,,,,0,,,"When testing the 2nd 2.19.2 release candidate, got the following when starting up 'service1' in the camel-example-opentracing example. This service started with no problems in the first release candidate, so not sure what has changed - but from the initial messages it appears that something is still being started up, i.e. ""BeanCurrentlyInCreationException: Error creating bean with name 'camelContext': Requested bean is currently in creation: Is there an unresolvable circular reference?""

{noformat}
2017-07-27 10:24:18.314  INFO 3829 --- [           main] sample.camel.Service1Application         : Starting Service1Application on localhost.localdomain with PID 3829 (/home/gbrown/testing/apache/apache-camel-2.19.2/examples/camel-example-opentracing/service1/target/classes started by gbrown in /home/gbrown/testing/apache/apache-camel-2.19.2/examples/camel-example-opentracing/service1)
2017-07-27 10:24:18.316  INFO 3829 --- [           main] sample.camel.Service1Application         : No active profile set, falling back to default profiles: default
2017-07-27 10:24:18.347  INFO 3829 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@311592f: startup date [Thu Jul 27 10:24:18 BST 2017]; root of context hierarchy
2017-07-27 10:24:19.098  WARN 3829 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cacheAutoConfigurationValidatorPostProcessor' defined in class path resource [org/apache/camel/component/http/springboot/HttpComponentSSLAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheAutoConfigurationValidatorPostProcessor' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
Related cause: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'openTracingEventNotifier' defined in org.apache.camel.opentracing.starter.OpenTracingAutoConfiguration: Unsatisfied dependency expressed through method 'openTracingEventNotifier' parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'camelContext': Requested bean is currently in creation: Is there an unresolvable circular reference?
2017-07-27 10:24:19.102 ERROR 3829 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception

java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.context.annotation.AnnotationConfigApplicationContext@311592f: startup date [Thu Jul 27 10:24:18 BST 2017]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.destroySingletons(FactoryBeanRegistrySupport.java:230) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at sample.camel.Service1Application.main(Service1Application.java:37) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]

2017-07-27 10:24:19.107  INFO 3829 --- [           main] utoConfigurationReportLoggingInitializer : 

Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled.
2017-07-27 10:24:19.110 ERROR 3829 --- [           main] o.s.boot.SpringApplication               : Application startup failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cacheAutoConfigurationValidatorPostProcessor' defined in class path resource [org/apache/camel/component/http/springboot/HttpComponentSSLAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheAutoConfigurationValidatorPostProcessor' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:174) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at sample.camel.Service1Application.main(Service1Application.java:37) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 24 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rest-configuration' defined in class path resource [org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:519) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:508) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1186) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.apache.camel.spring.boot.CamelAutoConfiguration.getSingleBeanOfType(CamelAutoConfiguration.java:449) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration.afterPropertiesSet(CamelAutoConfiguration.java:414) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration.camelContext(CamelAutoConfiguration.java:199) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$b01df009.CGLIB$camelContext$8(<generated>) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$b01df009$$FastClassBySpringCGLIB$$64f95473.invoke(<generated>) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$b01df009.camelContext(<generated>) ~[camel-spring-boot-2.19.2.jar:2.19.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 38 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.spi.RestConfiguration]: Factory method 'configureRestConfigurationDefinition' threw exception; nested exception is java.lang.IllegalArgumentException: target must be specified
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 62 common frames omitted
Caused by: java.lang.IllegalArgumentException: target must be specified
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:313) ~[camel-core-2.19.2.jar:2.19.2]
	at org.apache.camel.util.IntrospectionSupport.getProperties(IntrospectionSupport.java:252) ~[camel-core-2.19.2.jar:2.19.2]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration.configureRestConfigurationDefinition(RestConfigurationDefinitionAutoConfiguration.java:60) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration$$EnhancerBySpringCGLIB$$4827afa9.CGLIB$configureRestConfigurationDefinition$0(<generated>) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration$$EnhancerBySpringCGLIB$$4827afa9$$FastClassBySpringCGLIB$$53cce885.invoke(<generated>) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	at org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration$$EnhancerBySpringCGLIB$$4827afa9.configureRestConfigurationDefinition(<generated>) ~[camel-core-starter-2.19.2.jar:2.19.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE]
	... 63 common frames omitted
{noformat}
",,objectiser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-07-27 09:33:04.0,,,,,,,,,,,"0|i3i2z3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-univocity-parsers: marshaller not thread safe,CAMEL-11609,13090448,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,derdb,derdb,27/Jul/17 08:15,01/Aug/17 13:02,14/Jul/23 05:50,01/Aug/17 11:33,2.19.1,,,,,2.20.0,,,,camel-csv,,,,0,,,"org.apache.camel.dataformat.univocity.Marshaller.java is not thread safe.

When this.adaptheaders is true, this.headers is modified in the wirteRow() method. This can lead to ConcurrentModificationExceptions (see below) and jumbled headers, occasionally.

I use a {{UnivocityCsvDataFormat}} for marshalling CSV in a route which is called in parallel. The DataFormat creates a Marshaller with adaptheaders == true when headers are not specified in the format.

{code}java.util.ConcurrentModificationException: null
            at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719)
            at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:742)
            at org.apache.camel.dataformat.univocity.Marshaller.writeRow(Marshaller.java:95)
            at org.apache.camel.dataformat.univocity.Marshaller.marshal(Marshaller.java:67)
            at org.apache.camel.dataformat.univocity.AbstractUniVocityDataFormat.marshal(AbstractUniVocityDataFormat.java:94)
            at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:69)
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
            at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
            at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
            at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
            at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:124)
            at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
            at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:119)
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
            at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
            at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:137)
            at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:133)
            at java.util.concurrent.FutureTask.run(FutureTask.java:266)
            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
            at java.lang.Thread.run(Thread.java:748)
{code}",,acosentino,derdb,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 01 13:02:51 UTC 2017,,,,,,,,,,,"0|i3i2tj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jul/17 08:27;onders;Failing unit test would be helpful

by the stacktrace i see you have such a route where you wireTapped to a direct endpoint. Hard to imagine beyond.

;;;","27/Jul/17 08:32;derdb;Providing a unit test is difficult; we have one integration test which fails in about 1 in 100 cases due to this issue.

Given that the Marshaller holds and modifies a state in this.headers, it is obvious that it is not thread safe, though.;;;","27/Jul/17 08:42;onders;I did not mean to argue it is obvious or not.

As you can see;

https://github.com/apache/camel/blob/master/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/Marshaller.java#L38

LinkedHashMap is not thread-safe.

What i wanted to understand your routing structure, maybe to help you suggest a workaround.

PR is much welcome with maybe with just {{Collections.synchronizedMap(this.headers);}}.
Camel loves contribution.


;;;","27/Jul/17 08:54;derdb;We have a workaround because in this case, we can specify fixed headers (which leads to this.adaptheaders == false, i.e. headers are not modified, so no issue).

Our routing structure is roughly as follows.  There is a ""direct:persistCSV"" route which uses marshal(univocityCsvDataFormat). This route may be called in parallel by multiple other routes (via to(""direct:persistCSV"")), these use split() and streaming(). Unfortunately I don't know much about camel and its threading model as I'm new to this project, so it is entirely possible that we are doing something wrong. So the question remains if this Marshaller is supposed to work in a multi-threaded environment at all - if it is, then this is an issue.

Simply using a synchronizedMap would rule out ConcurrentModificationException as far as I can tell, but in order to not get jumbled headers, they should not be kept and updated in the Marshaller instance at all I think - either always read the headers from this.headers and never change it, or read headers from the map into a local variable in the adaptheaders == true case. I don't know why changing headers would need to be kept as Marshaller state.;;;","27/Jul/17 20:56;onders;As far as i can understand field matching is through the reconstruction of {{this.headers}}. so it is important part.
so my view currently, if you don't have frequently changing headers, it should not be problem. If it is to match the fields it seems lock on the resource getting updated seems to be a price to pay. in such sence providing a simple PR.;;;","27/Jul/17 21:01;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1855

    CAMEL-11609:thread-safety if headers get modified on the fly

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11609

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1855.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1855
    
----
commit d6ae2bfd0ba2bb7826e7b342094406a3daf4a85b
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-27T20:54:18Z

    CAMEL-11609:thread-safety if headers get modified on the fly

----
;;;","28/Jul/17 08:34;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1855
;;;","28/Jul/17 08:46;acosentino;I guess the fix must be reverted, the headers should stay immutable. We were discussing with [~zregvart] too.;;;","28/Jul/17 08:46;derdb;This is not going to fix the problem. You're only syncing on the write access. You need to synchronize both read and write. But this is not even necessary - why keep the headers as marshaller state if they are adapted on every writeRow in the first place. There is no sync needed here. I'm at work now, maybe i can provide a PR when I'm free this weekend;;;","28/Jul/17 08:47;derdb;See my comment above;;;","28/Jul/17 08:56;onders;if headers are immutable, is not this already existing UT is wrong?

Reverted already..

{code}

    /**
     * Tests that the marshalling adds new columns on the fly and keep its order
     */
    @Test
    public void shouldMarshalAndAddNewColumns() throws Exception {
        template.sendBody(""direct:default"", Arrays.asList(
                asMap(""A"", ""1"", ""B"", ""2""),
                asMap(""C"", ""three"", ""A"", ""one"", ""B"", ""two"")
        ));

        result.expectedMessageCount(1);
        result.assertIsSatisfied();

        String body = assertIsInstanceOf(String.class, result.getExchanges().get(0).getIn().getBody());
        assertEquals(join(""1,2"", ""one,two,three""), body);
    }

{code};;;","28/Jul/17 08:59;onders;if you sync read access, i guess there is potential performance issue and your threading will possibly degrade.
maybe there is CopyOnWriteXXX collection or such specific implementation may be needed..;;;","01/Aug/17 09:30;githubbot;GitHub user dbaldes opened a pull request:

    https://github.com/apache/camel/pull/1859

    CAMEL-11609:thread-safety if headers get modified on the fly

    This synchronized write and read on the headers when an adaption is needed. Unit tests are successful.
    
    Potential performance drawback due to synchronization.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dbaldes/camel CAMEL-11609

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1859.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1859
    
----
commit c213d80977cb49c7467d80a378ee50a7fe8a5db8
Author: Daniel Baldes <daniel@baldes.name>
Date:   2017-08-01T09:24:46Z

    CAMEL-11609:thread-safety if headers get modified on the fly

----
;;;","01/Aug/17 13:02;githubbot;Github user dbaldes closed the pull request at:

    https://github.com/apache/camel/pull/1859
;;;",,,,,,,,,,,,,,,,,,,
Camel-AWS: Camel-Kinesis needs Jackson Dataformat CBOR to work in OSGi,CAMEL-11608,13090427,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,27/Jul/17 06:29,27/Jul/17 07:02,14/Jul/23 05:50,27/Jul/17 07:02,,,,,,2.18.5,2.19.3,2.20.0,,camel-aws,,,,0,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-07-27 06:29:51.0,,,,,,,,,,,"0|i3i2ov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in MBeanInfoAssembler when debug is enabled,CAMEL-11607,13090418,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,sarel,sarel,27/Jul/17 05:02,27/Jul/17 13:59,14/Jul/23 05:50,27/Jul/17 09:45,2.20.0,,,,,2.18.5,2.19.3,2.20.0,,camel-core,,,,0,,,"Commit f8e68bac676d9a1a43f1f2744aa467cba77ec169 caused a regression.

An npe is thrown in MBeanInfoAssembler if debug logging is enabled and cache is not initialised when component is stopped.
",,githubbot,sarel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 27 12:39:37 UTC 2017,,,,,,,,,,,"0|i3i2mv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jul/17 05:11;githubbot;GitHub user sarelp opened a pull request:

    https://github.com/apache/camel/pull/1853

    CAMEL-11607: Fix npe in MBeanInfoAssembler when debug is enabled.

    If debug is enabled and cache is not initialised an npe is thrown
    when stopping the component.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarelp/camel bugfix/CAMEL-11607-fix-npe-in-MBeanInfoAssembler

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1853.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1853
    
----
commit a5a925a3fdb3285dda41c89ff02be5a5f7d33c36
Author: sarelp <sarel@yannitech.com>
Date:   2017-07-27T05:06:36Z

    CAMEL-11607: Fix npe in MBeanInfoAssembler when debug is enabled.
    
    If debug is enabled and cache is not initialised an npe is thrown
    when stopping the component.

----
;;;","27/Jul/17 12:39;githubbot;Github user sarelp closed the pull request at:

    https://github.com/apache/camel/pull/1853
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid accept header,CAMEL-11605,13090299,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,giger,giger,26/Jul/17 18:58,27/Jul/17 11:10,14/Jul/23 05:50,27/Jul/17 09:42,2.20.0,,,,,2.20.0,,,,camel-olingo4,,,,0,,,"Commit 958f7f33fa40868dec6a878f1c97f6d7339a9b3b introduced a regression
to olingo4 (maybe olingo2 is also affected, not tested).
The ACCEPT header doesn't include the subtype anymore: 
ACCEPT: application

Should be ACCEPT: application/json for example.

Patch for olingo4 attached.",,dmvolod,giger,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11423,,,,,,,,,,,"26/Jul/17 19:03;giger;accept-header.diff;https://issues.apache.org/jira/secure/attachment/12879027/accept-header.diff",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 27 11:10:33 UTC 2017,,,,,,,Patch Available,,,,"0|i3i1wn:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"27/Jul/17 07:51;dmvolod;[~giger], thanks for patch, PR submitted!;;;","27/Jul/17 07:52;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1854

    CAMEL-11605: Invalid accept header

    This is regression introduced in CAMEL-11423

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11605

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1854.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1854
    
----
commit 87fef368ebf8cf93401bd4b594313bfd4ed31cd8
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-07-27T07:43:03Z

    CAMEL-11605: Invalid accept header

----
;;;","27/Jul/17 11:10;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1854
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-univocity-parsers - A number of stream closed exception in tests,CAMEL-11595,13089984,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,davsclaus,davsclaus,25/Jul/17 18:25,11/Jun/18 19:57,14/Jul/23 05:50,10/Jun/18 16:01,2.21.1,2.22.0,,,,2.21.2,2.22.0,,,tests,,,,0,,,"I wonder if we can look into these exceptions during these tests. It may be just that we need a nicer stop/cleanup of the test or something else.

{code}
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.553 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.822 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.346 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.669 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.84 s - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.638 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.826 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.344 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.715 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.837 s - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.609 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.829 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.344 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.658 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
[INFO] Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest
Exception in thread ""Character reading thread"" java.lang.IllegalStateException: Error processing input
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:92)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: Stream closed
	at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at com.univocity.parsers.common.input.concurrent.CharBucket.fill(CharBucket.java:70)
	at com.univocity.parsers.common.input.concurrent.ConcurrentCharLoader.run(ConcurrentCharLoader.java:81)
	... 1 more
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.838 s - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest
[INFO]
{code}",,aldettinger,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 11 19:57:13 UTC 2018,,,,,,,,,,,"0|i3hzyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jun/18 11:35;githubbot;aldettinger opened a new pull request #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 11:35;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2367

    CAMEL-11595: Fixed stream closed exception in tests

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2367.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2367
    
----
commit e0378a6b767b1af3ed6bb055b888e9d00a2eebe8
Author: aldettinger <aldettinger@...>
Date:   2018-06-10T11:33:21Z

    CAMEL-11595: Fixed stream closed exception in tests

----
;;;","10/Jun/18 11:37;githubbot;aldettinger commented on issue #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367#issuecomment-396042201
 
 
   Please, see [CAMEL-11595](https://issues.apache.org/jira/browse/CAMEL-11595) for more details.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 11:39;aldettinger;It's actually a bug in camel-univocity-parsers. The responsibility of closing the reader lies with univocity-parsers on its own.

Camel tests were not able to detect this issue because of another bug in univocity-parsers.;;;","10/Jun/18 11:47;githubbot;aldettinger commented on issue #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367#issuecomment-396042690
 
 
   It would actually introduce a regression as demonstrated by those 2 ignored tests. Will rework with respect to this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 11:47;githubbot;aldettinger closed pull request #2367: CAMEL-11595: Fixed stream closed exception in tests
URL: https://github.com/apache/camel/pull/2367
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
index b4c8deec47f..8a7c4fa95f4 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
@@ -116,15 +116,13 @@ protected CPS initialValue() {
             }
         }
 
+        HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
+        CPS settings = parserSettings.get();
+        settings.setProcessor(headerRowProcessor);
+        P parser = createParser(settings);
+        // univocity-parsers is responsible for closing the reader, even in case of error
         Reader reader = new InputStreamReader(stream, getCharsetName(exchange));
-        try {
-            HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
-            CPS settings = parserSettings.get();
-            settings.setRowProcessor(headerRowProcessor);
-            return unmarshaller.unmarshal(reader, createParser(settings), headerRowProcessor);
-        } finally {
-            reader.close();
-        }
+        return unmarshaller.unmarshal(reader, parser, headerRowProcessor);
     }
 
     /**
diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
index e3a3d05d170..1f4a02837df 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
@@ -19,7 +19,7 @@
 import java.io.Writer;
 import java.util.LinkedHashMap;
 
-import com.univocity.parsers.fixed.FixedWidthFieldLengths;
+import com.univocity.parsers.fixed.FixedWidthFields;
 import com.univocity.parsers.fixed.FixedWidthFormat;
 import com.univocity.parsers.fixed.FixedWidthParser;
 import com.univocity.parsers.fixed.FixedWidthParserSettings;
@@ -188,7 +188,7 @@ protected void configureFormat(FixedWidthFormat format) {
      *
      * @return new {@code FixedWidthFieldLengths} based on the header and field lengthsl
      */
-    private FixedWidthFieldLengths createFixedWidthFieldLengths() {
+    private FixedWidthFields createFixedWidthFieldLengths() {
         // Ensure that the field lengths have been defined.
         if (fieldLengths == null) {
             throw new IllegalArgumentException(""The fieldLengths must have been defined in order to use the fixed-width format."");
@@ -196,7 +196,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
 
         // If there's no header then we only use their length
         if (headers == null) {
-            return new FixedWidthFieldLengths(fieldLengths);
+            return new FixedWidthFields(fieldLengths);
         }
 
         // Use both headers and field lengths (same size and no duplicate headers)
@@ -210,7 +210,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
         if (fields.size() != headers.length) {
             throw new IllegalArgumentException(""The headers cannot have duplicates in order to use the fixed-width format."");
         }
-        return new FixedWidthFieldLengths(fields);
+        return new FixedWidthFields(fields);
     }
 
     @Override
diff --git a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java
index 7b07e212638..775501c20dc 100644
--- a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java
+++ b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java
@@ -21,6 +21,7 @@
 import org.apache.camel.EndpointInject;
 import org.apache.camel.component.mock.MockEndpoint;
 import org.apache.camel.test.spring.CamelSpringTestSupport;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.context.support.AbstractApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
@@ -105,6 +106,7 @@ public void shouldMarshalWithSpecificHeaders() throws Exception {
      * Tests that we can marshal fixed-width using and advanced configuration
      */
     @Test
+    @Ignore(""TODO: Should be fixed from univocity-parsers 2.6.4 onward. https://github.com/uniVocity/univocity-parsers/issues/238"")
     public void shouldMarshalUsingAdvancedConfiguration() throws Exception {
         template.sendBody(""direct:advanced"", Arrays.asList(
                 asMap(""A"", null, ""B"", """"),
diff --git a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java
index 6789da152db..b025f2e625a 100644
--- a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java
+++ b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java
@@ -25,6 +25,7 @@
 import org.apache.camel.component.mock.MockEndpoint;
 import org.apache.camel.spi.DataFormat;
 import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.apache.camel.dataformat.univocity.UniVocityTestHelper.asMap;
@@ -106,6 +107,7 @@ public void shouldMarshalWithSpecificHeaders() throws Exception {
      * Tests that we can marshal fixed-width using and advanced configuration
      */
     @Test
+    @Ignore(""TODO: Should be fixed from univocity-parsers 2.6.4 onward. https://github.com/uniVocity/univocity-parsers/issues/238"")
     public void shouldMarshalUsingAdvancedConfiguration() throws Exception {
         template.sendBody(""direct:advanced"", Arrays.asList(
                 asMap(""A"", null, ""B"", """"),
diff --git a/parent/pom.xml b/parent/pom.xml
index 2342640e359..4e18f68e585 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -694,7 +694,7 @@
     <twitter4j-version>4.0.6</twitter4j-version>
     <uberfire-maven-support-version>1.3.0.Final</uberfire-maven-support-version>
     <undertow-version>1.4.25.Final</undertow-version>
-    <univocity-parsers-version>2.3.1</univocity-parsers-version>
+    <univocity-parsers-version>2.6.3</univocity-parsers-version>
     <unix-socket-factory-version>2015-01-27T15-02-14</unix-socket-factory-version>
     <unix-socket-factory-bundle-version>1.0.0</unix-socket-factory-bundle-version>
     <urlrewritefilter-version>4.0.4</urlrewritefilter-version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 11:47;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2367
;;;","10/Jun/18 12:01;githubbot;aldettinger opened a new pull request #2368: CAMEL-11595: Fixed the reader premature closure by competing threads
URL: https://github.com/apache/camel/pull/2368
 
 
   See [CAMEL-11595](https://issues.apache.org/jira/browse/CAMEL-11595) for context.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 12:01;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2368

    CAMEL-11595: Fixed the reader premature closure by competing threads

    See [CAMEL-11595](https://issues.apache.org/jira/browse/CAMEL-11595) for context.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2368.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2368
    
----
commit 80fe56f69396c49559e01d32e25cfd9ea05c5390
Author: aldettinger <aldettinger@...>
Date:   2018-06-10T11:59:28Z

    CAMEL-11595: Fixed the reader premature closure by competing threads

----
;;;","10/Jun/18 16:02;githubbot;aldettinger commented on issue #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368#issuecomment-396060339
 
 
   Thanks guys, merged on master and camel-2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 16:02;githubbot;aldettinger closed pull request #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
index b4c8deec47f..8a7c4fa95f4 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat.java
@@ -116,15 +116,13 @@ protected CPS initialValue() {
             }
         }
 
+        HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
+        CPS settings = parserSettings.get();
+        settings.setProcessor(headerRowProcessor);
+        P parser = createParser(settings);
+        // univocity-parsers is responsible for closing the reader, even in case of error
         Reader reader = new InputStreamReader(stream, getCharsetName(exchange));
-        try {
-            HeaderRowProcessor headerRowProcessor = new HeaderRowProcessor();
-            CPS settings = parserSettings.get();
-            settings.setRowProcessor(headerRowProcessor);
-            return unmarshaller.unmarshal(reader, createParser(settings), headerRowProcessor);
-        } finally {
-            reader.close();
-        }
+        return unmarshaller.unmarshal(reader, parser, headerRowProcessor);
     }
 
     /**
diff --git a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
index e3a3d05d170..1f4a02837df 100644
--- a/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
+++ b/components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
@@ -19,7 +19,7 @@
 import java.io.Writer;
 import java.util.LinkedHashMap;
 
-import com.univocity.parsers.fixed.FixedWidthFieldLengths;
+import com.univocity.parsers.fixed.FixedWidthFields;
 import com.univocity.parsers.fixed.FixedWidthFormat;
 import com.univocity.parsers.fixed.FixedWidthParser;
 import com.univocity.parsers.fixed.FixedWidthParserSettings;
@@ -188,7 +188,7 @@ protected void configureFormat(FixedWidthFormat format) {
      *
      * @return new {@code FixedWidthFieldLengths} based on the header and field lengthsl
      */
-    private FixedWidthFieldLengths createFixedWidthFieldLengths() {
+    private FixedWidthFields createFixedWidthFieldLengths() {
         // Ensure that the field lengths have been defined.
         if (fieldLengths == null) {
             throw new IllegalArgumentException(""The fieldLengths must have been defined in order to use the fixed-width format."");
@@ -196,7 +196,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
 
         // If there's no header then we only use their length
         if (headers == null) {
-            return new FixedWidthFieldLengths(fieldLengths);
+            return new FixedWidthFields(fieldLengths);
         }
 
         // Use both headers and field lengths (same size and no duplicate headers)
@@ -210,7 +210,7 @@ private FixedWidthFieldLengths createFixedWidthFieldLengths() {
         if (fields.size() != headers.length) {
             throw new IllegalArgumentException(""The headers cannot have duplicates in order to use the fixed-width format."");
         }
-        return new FixedWidthFieldLengths(fields);
+        return new FixedWidthFields(fields);
     }
 
     @Override


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Jun/18 16:02;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2368
;;;","11/Jun/18 00:42;githubbot;WillemJiang commented on a change in pull request #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368#discussion_r194275835
 
 

 ##########
 File path: components/camel-univocity-parsers/src/main/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormat.java
 ##########
 @@ -188,15 +188,15 @@ protected void configureFormat(FixedWidthFormat format) {
      *
      * @return new {@code FixedWidthFieldLengths} based on the header and field lengthsl
 
 Review comment:
   This Java doc need to be updated.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Jun/18 19:57;githubbot;aldettinger commented on issue #2368: CAMEL-11595: Fixed the reader premature closure by competing thread
URL: https://github.com/apache/camel/pull/2368#issuecomment-396366820
 
 
   Thanks for spotting this @WillemJiang. I will fix in a dedicated commit.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,
Global rest configuration gets overridden by default,CAMEL-11593,13089879,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jul/17 13:41,25/Jul/17 18:53,14/Jul/23 05:50,25/Jul/17 18:53,2.19.1,,,,,2.19.3,2.20.0,,,camel-core,rest,,,0,,,If you use for example spring-boot and configure rest-dsl globally there then its configuration gets overridden by default empty configuration in the RestComponent when it does merges.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-07-25 13:41:18.0,,,,,,,,,,,"0|i3hzbj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFound: javax.servlet.ServletOutputStream in opentracing example client,CAMEL-11591,13089815,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,objectiser,objectiser,25/Jul/17 09:36,25/Jul/17 11:56,14/Jul/23 05:50,25/Jul/17 11:56,2.19.2,,,,,2.19.3,2.20.0,,,camel-opentracing,,,,0,,,"When testing 2.19.2 release candidate, I tried the examples/camel-example-opentracing - started up the service1 and service2, but when running the client I had a number of exceptions:

{noformat}
Caused by: java.lang.ClassNotFoundException: javax.servlet.ServletOutputStream
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[?:1.8.0_131]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[?:1.8.0_131]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:1.8.0_131]
	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:397) ~[camel-http-2.19.2.jar:2.19.2]
	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:98) ~[camel-http-2.19.2.jar:2.19.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.19.
{noformat}

On inspection of the dependencies from 2.19.1:

{noformat}
[INFO] +- org.apache.camel:camel-http:jar:2.19.1:compile
[INFO] |  +- org.apache.camel:camel-http-common:jar:2.19.1:compile
[INFO] |  |  \- javax.servlet:javax.servlet-api:jar:3.1.0:compile
[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  \- commons-codec:commons-codec:jar:1.10:compile
{noformat}

but for 2.19.2:

{noformat}
[INFO] +- org.apache.camel:camel-http:jar:2.19.2:compile
[INFO] |  +- org.apache.camel:camel-http-common:jar:2.19.2:compile
[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  \- commons-codec:commons-codec:jar:1.10:compile
{noformat}
",,davsclaus,objectiser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 25 10:41:02 UTC 2017,,,,,,,,,,,"0|i3hyxb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jul/17 10:41;davsclaus;Its all of these that should have the servlet-api added
{code}
camel-ahc/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-cxf/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-http-common/pom.xml:  <artifactId>camel-http-common</artifactId>
camel-http-common/src/test/resources/log4j2.properties:appender.file.fileName = target/camel-http-common-test.log
camel-http/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-http4/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-http4/src/main/java/org/apache/camel/component/http4/HttpMethodsConverter.java: * To convert between camel-http4 and camel-http-common for the http methods enums
camel-netty4-http/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-restlet/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-swagger/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-undertow/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-urlrewrite/pom.xml:      <artifactId>camel-http-common</artifactId>
{code}

And then keep it as provided for camel-servlet, and camel-jetty may likely come with servlet-api as well
{code}
camel-jetty-common/pom.xml:            <artifactId>camel-http-common</artifactId>
camel-jetty9/pom.xml:      <artifactId>camel-http-common</artifactId>
camel-servlet/pom.xml:      <artifactId>camel-http-common</artifactId>
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockEndpoint.expectedPropertyReceived needs improvement,CAMEL-11589,13089416,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,saravanakumar,saravanakumar,24/Jul/17 07:41,31/Jul/17 04:46,14/Jul/23 05:50,25/Jul/17 12:18,2.19.1,,,,,2.20.0,,,,camel-core,,,,0,,,"In MockEndpoint.expectedPropertyReceived, it is not possible to set expectation that the property is absent, or its value is null.",,davsclaus,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 25 12:18:32 UTC 2017,,,,,,,,,,,"0|i3hwun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jul/17 07:44;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1842

    CAMEL-11589: Fixing issue with MockEndpoint.expectedPropertyReceived

    Please review the PR for https://issues.apache.org/jira/browse/CAMEL-11589
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1842.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1842
    
----
commit 4efc7af82cbb9e34149c8ecb18f527c7e89936ab
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-07-24T07:41:15Z

    CAMEL-11589: Fixing issue with MockEndpoint.expectedPropertyReceived

----
;;;","25/Jul/17 12:18;davsclaus;Thanks for the PR;;;","25/Jul/17 12:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1842
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SupervisingRouteController - Routes may be started in wrong order,CAMEL-11588,13089301,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,davsclaus,davsclaus,23/Jul/17 08:44,08/Aug/17 11:33,14/Jul/23 05:50,08/Aug/17 11:33,,,,,,2.20.0,,,,camel-core,,,,0,route-controller,,"If you run the example and turn off the supervising

Then the routes are started correct order
{code}
2017-07-23 10:40:37.825  INFO 33034 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: bar started and consuming from: timer://bar?period=5s
2017-07-23 10:40:37.825  INFO 33034 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: foo started and consuming from: timer://foo?period=5s
2017-07-23 10:40:37.830  INFO 33034 --- [           main] o.a.c.c.undertow.DefaultUndertowHost     : Starting Undertow server on http://localhost:9011
2017-07-23 10:40:37.877  INFO 33034 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: undertow started and consuming from: http://localhost:9011
{code}

eg with lowest startup order first, 1,2, (no number).

But if you turn on supervising, then they are started: (no number), 1, 2
{code}
2017-07-23 10:37:39.266  INFO 32985 --- [           main] o.a.c.c.undertow.DefaultUndertowHost     : Starting Undertow server on http://localhost:9011
2017-07-23 10:37:39.311  INFO 32985 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: undertow started and consuming from: http://localhost:9011
2017-07-23 10:37:39.313  INFO 32985 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: bar started and consuming from: timer://bar?period=5s
2017-07-23 10:37:39.314  INFO 32985 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: foo started and consuming from: timer://foo?period=5s
{code}

eg the undertow route is the (no number) and should therefore be started last (it will have auto assigned number 1001).

eg we need to use the RouteStartupOrder that can tell the correct order.",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 04 14:24:41 UTC 2017,,,,,,,,,,,"0|i3hw53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jul/17 18:29;davsclaus;I looked briefly at this and its a bit harder to do. So its okay for this to be a known issue, but down the road we should ideally have this new way of starting up routes support all existing ways, so it in the future can be the new default way.;;;","04/Aug/17 14:24;lb;As workaround I've added an additional counter to keep track of the order of which routes are initialized so the rule is now:

- compare startup order
- if not defined compare using the initialization order

So assuming we have:

{code:java}
from(""undertow:http://localhost:9013"")
    .id(""undertow-9013"")
    .log(""From undertow ..."");

from(""timer:foo?period=5s"")
    .id(""foo"")
    .startupOrder(2)
    .log(""From timer (foo) ..."");

from(""timer:bar?period=5s"")
    .id(""bar"")
    .startupOrder(1)
    .log(""From timer (bar) ..."");

from(""undertow:http://localhost:9011"")
    .id(""undertow-9011"")
    .log(""From undertow ..."");

from(""undertow:http://localhost:9010"")
    .id(""undertow-9010"")
    .log(""From undertow ..."");
{code}

The startup order will be:

- bar
- foo
- undertow-9013
- undertow-9011
- undertow-9010
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog is not generating camel-stream URI properly,CAMEL-11576,13089067,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,21/Jul/17 14:47,21/Jul/17 16:38,14/Jul/23 05:50,21/Jul/17 16:32,,,,,,2.19.2,2.20.0,,,camel-catalog,,,,0,,,"The endpoint URI generation in {{camel-catalog}} doesn't work for the {{camel-stream}} component. Here is an extract of the {{camel-stream.json}} file with only relevant information for this bug
{code}
{
 ""component"": {
    ""syntax"": ""stream:kind"",
  },
  ""properties"": {
    ""kind"": { ""kind"": ""path"", ""enum"": [ ""in"", ""out"", ""err"", ""header"", ""file"", ""url"" ] },
    ""url"": { ""kind"": ""parameter"" },
  }
}
{code}

The key point is that one of the value for the {{kind}} property that is in the path is {{url}} which is also query parameter.

For instance the following code
{code}
Map<String, String> map = new LinkedHashMap<>();
map.put(""kind"", ""url"");
map.put(""url"", ""http://camel.apache.org"");
String uri = catalog.asEndpointUri(""stream"", map, false);
{code}
will return
{code}
stream:http://camel.apache.org
{code}
instead of
{code}
stream:url?url=http://camel.apache.org
{code}",,antoine.dessaigne,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 21 16:38:09 UTC 2017,,,,,,,Patch Available,,,,"0|i3hupb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jul/17 14:50;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1840

    CAMEL-11576 - Refactor endpoint syntax handling in order to support camel-stream component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-11576

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1840.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1840
    
----
commit 3bc2ef81352a925fdbf38365f6e889cc7deafd14
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-07-21T14:48:30Z

    CAMEL-11576 - Refactor endpoint syntax handling in order to support camel-stream component

----
;;;","21/Jul/17 16:32;davsclaus;Thanks for the PR;;;","21/Jul/17 16:38;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1840
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component name mismatch: https4 or http4s,CAMEL-11575,13089043,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,21/Jul/17 13:29,22/Jul/17 07:47,14/Jul/23 05:50,22/Jul/17 07:46,,,,,,2.19.2,2.20.0,,,camel-http4,,,,0,,,"I noticed a mismatch for the https protocol handling of {{camel-http4}}.

Sometimes it's named {{https4}} like in:
* {{org.apache.camel.component.http4.HttpComponent}}
* {{components\camel-http4\src\main\resources\META-INF\services\org\apache\camel\component\https4}}

Sometimes it's named {{http4s}} like in:
* {{components\camel-http4\src\main\resources\META-INF\services\org\apache\camel\cloud\http4s-service-expression}}
* {{org.apache.camel.component.http4.HttpEndpoint}} for {{@UriEndpoint}} annotatation
* {{org.apache.camel.impl.cloud.DefaultServiceCallExpression}}

I noticed that it breaks the {{camel-catalog}} as the definition is incorrect.

I think that it should be named {{https4}} but I wanted to be sure before providing a pull request that update all erroneous call to {{http4s}}.

What do you think ?",,antoine.dessaigne,davsclaus,githubbot,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jul 22 07:47:46 UTC 2017,,,,,,,,,,,"0|i3hujz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jul/17 16:33;davsclaus;Yes it should be named like the file in the META-INF/services folder. So it should be named: https4

A PR is much welcome;;;","21/Jul/17 16:36;davsclaus;Also there is a name problem in that new cloud stuff (that is not a component) but we should ideally have it the same name as the component with https4-service-expression;;;","21/Jul/17 16:42;antoine.dessaigne;I'll try to update the new cloud stuff but I don't know how to test it. Do you have info or docs to give me ? Thanks.;;;","21/Jul/17 17:00;lb;The cloud stuff simple search for :

{code}
${scheme-of-the-component}-service-expression.
{code}

I do not think there is a test for such variations so please raise a jira to add them.;;;","21/Jul/17 20:05;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1841

    CAMEL-11575 - Rename http4s into https4 which is the real component name

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-11575

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1841.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1841
    
----
commit 62476324ac4a1be12a4a44c7df5cd980dd3e719c
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-07-21T20:04:54Z

    CAMEL-11575 - Rename http4s into https4 which is the real component name

----
;;;","22/Jul/17 07:46;davsclaus;Thanks for the PR;;;","22/Jul/17 07:47;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1841
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-lumberjack component doesn't restart,CAMEL-11572,13089033,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,21/Jul/17 12:34,21/Jul/17 16:25,14/Jul/23 05:50,21/Jul/17 16:25,,,,,,2.18.5,2.19.2,2.20.0,,,,,,0,,,"Hello.
There's an issue in the {{camel-lumberjack}} component lifecycle preventing it from restarting.",,antoine.dessaigne,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 21 16:25:51 UTC 2017,,,,,,,Patch Available,,,,"0|i3huhr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jul/17 12:37;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1838

    CAMEL-11572 - Fix camel-lumberjack component lifecycle

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-11572

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1838.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1838
    
----
commit 6492e714c92189d75f48af9d5f1988e086524ca4
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-07-21T12:35:56Z

    CAMEL-11572 - Fix camel-lumberjack component lifecycle

----
;;;","21/Jul/17 16:25;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1838
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
avoid ClassCastException when the gzip is enabled for the cxf endpoint with camel destination,CAMEL-11564,13088630,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,20/Jul/17 03:30,20/Jul/17 03:36,14/Jul/23 05:50,20/Jul/17 03:36,,,,,,2.18.5,2.19.2,2.20.0,,,,,,0,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-07-20 03:30:10.0,,,,,,,,,,,"0|i3hs0f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when not setting a sampling interval on client subscriptions,CAMEL-11559,13088322,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ctron,ctron,19/Jul/17 08:19,19/Jul/17 15:15,14/Jul/23 05:50,19/Jul/17 12:20,2.19.1,,,,,2.19.2,2.20.0,,,,,,,0,easyfix,,"Due to an internal unintended auto-unboxing from {{Double}} to {{double}} milo may run into an NPE when the sampling interval is unset in the camel-milo component.

I will provide a fix for this.",,ctron,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,126,https://github.com/eclipse/milo/pull/126,,,,,,,,,,,9223372036854775807,,,Wed Jul 19 15:15:16 UTC 2017,,,,,,,,,,,"0|i3hq3z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jul/17 08:32;githubbot;GitHub user ctron opened a pull request:

    https://github.com/apache/camel/pull/1833

    CAMEL-11559: Work around a NPE in milo 0.1.3

    When the sampling interval is unset in the Camel component, then it is passed to milo as `null`. Which is acceptable to the milo API, however internally milo automatically unboxes the value from `Double` to `double` and may run into a NPE by doing so.
    
    This patch assures that, although theoretically acceptable, `null` is never passed in to the Milo API.
    
    Signed-off-by: Jens Reimann <jreimann@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ctron/camel feature/fix_issue_11559

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1833.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1833
    
----
commit 1a692127f54990e72dcbf1d56f83b0e3cb9df20e
Author: Jens Reimann <jreimann@redhat.com>
Date:   2017-07-19T08:21:33Z

    CAMEL-11559: Work around a NPE in milo 0.1.3
    
    When the sampling interval is unset in the Camel component, then it is
    passed to milo as 'null'. Which is acceptable to the milo API, however
    internally milo automatically unboxes the value from 'Double' to
    'double' and may run into a NPE by doing so.
    
    This patch assures that, although theoretically acceptable,
    'null' is never passed in to the Milo API.
    
    Signed-off-by: Jens Reimann <jreimann@redhat.com>

----
;;;","19/Jul/17 08:34;ctron;The provided fix should also be applied to the most recent camel branch.;;;","19/Jul/17 12:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1833
;;;","19/Jul/17 15:15;ctron;PR was merged;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cant run camel zipkin example with latest zipkin-server,CAMEL-11549,13087608,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,kearls,cipous,cipous,17/Jul/17 14:55,18/Jul/17 13:19,14/Jul/23 05:50,18/Jul/17 13:19,2.18.2,,,,,2.20.0,,,,camel-zipkin,,,,0,,,"Follow steps in example: https://github.com/apache/camel/tree/camel-2.18.x/examples/camel-example-zipkin

This will download zipkin version 1.28.1 : zipkin-server-1.28.1

Unfortunately  both services wont start with `Connection refused: connect` exception.

When using zipkin-server-1.19.3 it works somehow.

I have tried latest camel 2.20 and 2.18 versions and it wont help. Also tried to change default port, no luck.

It could be because Scribe collector is disabled by default: https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#scribe-collector",both windows and linux,cipous,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 15:29:48 UTC 2017,,,,,,,,,,,"0|i3hlpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Jul/17 15:29;cipous;This is the start command which works

{code:java}
java -DSCRIBE_ENABLED=true -jar zipkin-server-1.28.1-exec.jar
{code}

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow consumer shall use InOut ExchangePattern,CAMEL-11548,13087456,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,saravanakumar,saravanakumar,16/Jul/17 21:47,17/Jul/17 11:34,14/Jul/23 05:50,17/Jul/17 08:54,2.19.1,,,,,2.20.0,,,,camel-undertow,,,,0,,,"Camel-undertow is the odd one among camel-jetty, camel-restlet and netty4-http. It's consumer does not use InOut ExchangePattern and hence Request Reply EIP is not possible on asynchronous endpoints.

For example, below consumer returns ""No response available"" instead of ""Camel rocks!!""
{code}
from(""undertow:http://localhost:8081/api"").to(""seda:foo"");

from(""seda:foo"").process(exchange -> {
	exchange.getIn().setBody(""Camel rocks!!"");
});
{code}

So it also becomes impossible to change to undertow from netty4-http,restlet or camel-jetty while using Rest DSL",,githubbot,saravanakumar,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 10:04:35 UTC 2017,,,,,,,,,,,"0|i3hkrj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jul/17 21:53;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1829

    CAMEL-11548: Making camel-undertow consumer InOut

    I am not really sure if it is intentional that camel-undertow consumer is InOnly. But its the odd one among camel-jetty, camel-restlet and netty4-http. 
    
    Please review the PR for : https://issues.apache.org/jira/browse/CAMEL-11548
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1829.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1829
    
----
commit 6c1c3a53eaf3525ee53d4ef272810003ca09e653
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-07-16T21:47:22Z

    CAMEL-11548: Making camel-undertow consumer InOut

----
;;;","17/Jul/17 08:54;zregvart;Merged from [PR#1829|https://github.com/apache/camel/pull/1829] to {{master}}.

Thanks [~saravanakumar] for the PR!;;;","17/Jul/17 10:04;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1829
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Unable to disable ProducerCache by setting cacheSize=""-1""",CAMEL-11540,13086682,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,saravanakumar,saravanakumar,12/Jul/17 19:37,13/Jul/17 06:38,14/Jul/23 05:50,13/Jul/17 06:32,2.19.1,,,,,2.18.5,2.19.2,2.20.0,,camel-core,,,,0,,,"It is not possible to disable ProducerCache for camel-rabbitmq, camel-netty4, camel-netty and camel-jms producers.

For example, while trying to turn off activemq ProducerCache like:

{code}<wireTap uri=""activemq:foo"" cacheSize=""-1"" />{code}

results in error :

{code}java.util.concurrent.RejectedExecutionException
    at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:144){code}",,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 13 06:38:25 UTC 2017,,,,,,,,,,,"0|i3hg0v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Jul/17 19:41;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1821

    CAMEL-11540: Fixed issue with turning off ProducerCache

    ConcurrentLinkedHashMap attempts to evict entries when the max capacity is zero, eventually the service is stopped. This results in camel-netty, camel-netty4, activemq and rabitmwq producers unable to disable ProducerCache.
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1821.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1821
    
----
commit 34e416802f3e9b3707d0efacae558a55bf1f7b27
Author: Saravanakumar Selvaraj <ssaravan@ssaravan.pnq.csb>
Date:   2017-07-12T19:34:53Z

    CAMEL-11540: Fixed issue with turning off ProducerCache

----
;;;","13/Jul/17 06:38;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1821
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
undertown consumer : consumer silently fails to start if manually started after a failure,CAMEL-11537,13086590,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,12/Jul/17 14:04,13/Jul/17 05:12,14/Jul/23 05:50,13/Jul/17 05:12,,,,,,2.19.2,2.20.0,,,camel-undertow,,,,0,,,If camel-undertown consumer fails to start (i.e. because of address is already in use) a subsequent manual start of the route seems to succeed but it doesn't as the consumer does not handle the unchecked exception Undertown.start() may throw (!),,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 13 05:12:01 UTC 2017,,,,,,,,,,,"0|i3hfgf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Jul/17 17:29;davsclaus;Can you backport this to 2.19.x and 2.18.x branches;;;","12/Jul/17 17:51;lb;I will;;;","13/Jul/17 05:12;lb;Not applicable to 2.18.x;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language - comparison againist negative value fails with unknown token,CAMEL-11533,13086257,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,onders,onders,11/Jul/17 13:31,13/Jul/17 12:12,14/Jul/23 05:50,13/Jul/17 12:12,,,,,,2.18.5,2.19.2,2.20.0,,camel-core,,,,0,,,"{code}
from(""seda:test"")
     .choice()
        .when()
           .simple(""${in.body.someval} == -1}"").to(""mock:mock1"")
        .otherwise()
           .to(""mock:mock2"")
        .endChoice();
{code}

ends with 

org.apache.camel.language.simple.types.SimpleIllegalSyntaxException: Binary operator == does not support token - 

this can be improved to note - sign",,davsclaus,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 13 12:12:45 UTC 2017,,,,,,,,,,,"0|i3hdf3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Jul/17 07:42;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1820

    CAMEL-11533 - note ""-"" sign doing binary comparison against negative …

    …value

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11533

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1820.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1820
    
----
commit 7f6a913f8a21300a7ffbadc7c3203749e11b13bf
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-12T04:40:16Z

    CAMEL-11533 - note ""-"" sign doing binary comparison against negative value

----
;;;","12/Jul/17 17:38;davsclaus;Nice catch. I think we should backport this to the two other branches. ;;;","13/Jul/17 12:12;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1820
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong syntax definitions in camel catalog,CAMEL-11529,13086047,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lhein,lhein,10/Jul/17 18:31,10/Jul/17 20:27,14/Jul/23 05:50,10/Jul/17 20:27,2.19.1,,,,,2.19.2,2.20.0,,,camel-catalog,,,,0,,,"The following syntax strings in the catalog are not correct:

|| Component || Current Syntax || Supposed correct Syntax ||
| couchbase | couchbase:url | couchbase:protocol:hostname |
| ignite-events | ignite-events:[endpointId] | ignite-events:endpointId |
| ignite-messaging | ignite-messaging:[topic] | ignite-messaging:topic |
| ignite-queue | ignite-queue:[name] | ignite-queue:name |
| ignite-compute | ignite-compute:[endpointId] | ignite-compute:endpointId |
| ignite-idgen | ignite-idgen:[name] | ignite-idgen:name |
| ignite-cache | ignite-cache:[cacheName] |  ignite-cache:cacheName |
| ignite-set | ignite-set:[name] | ignite-set:name |

",,davsclaus,lhein,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 10 20:27:38 UTC 2017,,,,,,,,,,,"0|i3hc4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jul/17 20:27;davsclaus;Thanks Lars for spotting.

The couchbase was missing the port as well so its

couchbase:protocol:hostname:port

where port is optional and has a default value.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel File Consumer fails when doneFileName contains '$',CAMEL-11524,13085756,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,saycat,saycat,09/Jul/17 08:02,17/Jul/17 05:39,14/Jul/23 05:50,17/Jul/17 05:37,2.18.2,,,,,2.18.5,2.19.2,2.20.0,,camel-core,,,,0,,,"I have running a blueprint file with a camel context that has the following:


{code:xml}
         <from uri=""file:///{{backupFolder}}?doneFileName=${file:name}.4camel&amp;recursive=true&amp;delete=true""/>
{code}

This causes Camel to throw the following exception when I receive files with names of the following form: *YY049608$SQLEXPRESS_TEST1_FULL_20170709_160016.bak*

Most likely the '$' in the name is the problem. Is there any way to escape it?

{noformat}
2017-07-09 15:33:03,496 | WARN  | %5Cbackup-folder | FileConsumer                     | 46 - org.apache.camel.camel-core - 2.18.2 | Consumer Consumer[file:///C:%5CUsers%5C300227639%5CDesktop%5Colivia-demo%5Cassembly%5Cdeployables%5C..%5Cdata%5Cbackup-folder?delete=true&doneFileName=%24%7Bfile%3Aname%7D.done&recursive=true] failed polling endpoint: file:///C:%5CUsers%5C300227639%5CDesktop%5Colivia-demo%5Cassembly%5Cdeployables%5C..%5Cdata%5Cbackup-folder?delete=true&doneFileName=%24%7Bfile%3Aname%7D.done&recursive=true. Will try again at next poll. Caused by: [java.lang.IllegalArgumentException - Illegal group reference]
java.lang.IllegalArgumentException: Illegal group reference
        at java.util.regex.Matcher.appendReplacement(Matcher.java:857)[:1.8.0_101]
        at java.util.regex.Matcher.replaceFirst(Matcher.java:1004)[:1.8.0_101]
        at java.lang.String.replaceFirst(String.java:2178)[:1.8.0_101]
        at org.apache.camel.component.file.GenericFileEndpoint.createDoneFileName(GenericFileEndpoint.java:1301)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.GenericFileConsumer.isMatched(GenericFileConsumer.java:670)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.GenericFileConsumer.isValidFile(GenericFileConsumer.java:545)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:114)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:107)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:107)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:107)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:132)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)[46:org.apache.camel.camel-core:2.18.2]
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)[46:org.apache.camel.camel-core:2.18.2]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_101]
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)[:1.8.0_101]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)[:1.8.0_101]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)[:1.8.0_101]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_101]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_101]
        at java.lang.Thread.run(Thread.java:745)[:1.8.0_101]
{noformat}

Thanks, Saycat","* Java8
* Camel 2.18.2
* Karaf 4.0.9
",davsclaus,githubbot,saycat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 05:39:44 UTC 2017,,,,,,,,,,,"0|i3habz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jul/17 08:11;davsclaus;No there is not, your workaround is to not use $ in the file name, which also is a bad habit to do so.

The source code needs to be patched where you need to quote the file name in the GenericFileEndpoint method via java.util.regex.Matcher#quoteReplacement. You are welcome to work on a github PR to fix this;;;","09/Jul/17 08:22;saycat;Hi Claus
Thanks for the response. The source of the '$' is Ola Hallengren's SQL maintenance script and that in turn is escaping a '\' in a database engine name. 
It seems like a better idea to fix the Camel code and make it more robust. 

I will look into providing a patch for this.

Regards, Saycat;;;","15/Jul/17 05:35;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1823

    CAMEL-11524-Add quoteReplacement

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11524

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1823.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1823
    
----
commit f8cb4c3a2ff3cc5b15346c3d78f7f9bb1c22520b
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-15T05:33:59Z

    CAMEL-11524-Add quoteReplacement

----
;;;","17/Jul/17 05:39;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1823
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JasyptPropertiesParser fails on properties references with default value,CAMEL-11523,13085488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ronny.aerts.intris,ronny.aerts.intris,07/Jul/17 11:18,06/Sep/17 07:42,14/Jul/23 05:50,06/Sep/17 07:42,2.17.7,2.19.1,,,,2.18.5,2.19.3,2.20.0,,camel-jasypt,,,,0,,,"I'm using the JasyptPropertiesParser in combination with the BridgePropertyPlaceholderConfigurer to able to encrypt properties by adding the parser property.
             <beans:property name=""parser"">
                    <!-- define the jasypt properties parser with the given password to be used -->
                    <beans:bean class=""org.apache.camel.component.jasypt.JasyptPropertiesParser"" depends-on=""InitializeProperties"">
                           <beans:property name=""password"" value=""#{IP.getPassword()}""/>
                           <beans:property name=""algorithm"" value=""PBEWITHSHA1ANDRC4_128""/>
                    </beans:bean>
             </beans:property>
This works fine but when I have a ""tris.dlq.folder.process.history:c:/temp/TrisESB"" property with a default value in my xml route, the route creating fails with error:
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [tris.dlq.folder.process.history:c:/temp/TrisESB] not found in properties from text: file://{{tris.dlq.folder.process.history:c:/temp/TrisESB}}?fileName=$simple{header.breadcrumbId}-prochist.htm

My log also mentions the parsing of the property.
[TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'tris.dlq.folder.process.history:c:/temp/TrisESB=null'

It seems that the JasyptPropertiesParser can't handle default properties.
",,davsclaus,ronny.aerts.intris,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Aug/17 08:53;ronny.aerts.intris;jasypt.rar;https://issues.apache.org/jira/secure/attachment/12879792/jasypt.rar",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 06 07:23:28 UTC 2017,,,,,,,,,,,"0|i3h8ov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jul/17 08:47;davsclaus;I wonder if you are able to build an unit test / sample project that reproduces this issue? That would make it easier for us to use and track down the bug/issue.;;;","13/Jul/17 06:30;ronny.aerts.intris;I'm on holiday for the moment. I'll created a test when I'm back over a few weeks.

vriendelijke groeten,
Ronny Aerts

verstuurd via mijn slimme foon

;;;","01/Aug/17 08:55;ronny.aerts.intris;I attached a test case project.
It will give following output when it runs:
{code}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.intris.TrisESB.route.test.TrisESBTest
2017-08-01 10:54:03.749 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
2017-08-01 10:54:03.750 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] Testing: TestJasypt(com.intris.TrisESB.route.test.TrisESBTest)
2017-08-01 10:54:03.750 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
2017-08-01 10:54:03.790 [INFO ] [org.springframework.context.support.ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@685cb137: startup date [Tue Aug 01 10:54:03 CEST 2017]; root of context hierarchy
2017-08-01 10:54:03.827 [INFO ] [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [test-camel-context.xml]
2017-08-01 10:54:05.233 [INFO ] [org.apache.camel.spring.CamelContextFactoryBean] Bridging Camel and Spring property placeholder configurer with id: properties
2017-08-01 10:54:05.257 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) is starting
2017-08-01 10:54:05.258 [INFO ] [org.apache.camel.management.DefaultManagementStrategy] JMX is disabled
2017-08-01 10:54:05.298 [INFO ] [org.apache.camel.impl.converter.DefaultTypeConverter] Loaded 196 type converters
2017-08-01 10:54:05.356 [DEBUG] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Found property: rrts.pw.plain with value: this is the password to be used.
2017-08-01 10:54:05.356 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'rrts.pw.plain=this is the password'
2017-08-01 10:54:05.364 [DEBUG] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Initialized encryptor using PBEWITHSHA1ANDRC4_128 algorithm and provided password
2017-08-01 10:54:05.368 [DEBUG] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Found property: rrts.pw.encrypted with value: ENC(vNEH1/wOEbwgZ28+1jLzpFlUHTqZm8Zwirq5Ww==) to be used.
2017-08-01 10:54:05.368 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'rrts.pw.encrypted=ENC(vNEH1/wOEbwgZ28+1jLzpFlUHTqZm8Zwirq5Ww==)'
2017-08-01 10:54:05.368 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Decrypting part 'ENC(vNEH1/wOEbwgZ28+1jLzpFlUHTqZm8Zwirq5Ww==)'
2017-08-01 10:54:05.768 [TRACE] [org.apache.camel.component.jasypt.JasyptPropertiesParser] Parsing property 'dummy.property:this is the default value=null'
2017-08-01 10:54:05.769 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) is shutting down
2017-08-01 10:54:05.786 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) uptime 0.528 seconds
2017-08-01 10:54:05.786 [INFO ] [org.apache.camel.spring.SpringCamelContext] Apache Camel 2.19.2 (CamelContext: tester) is shutdown in 0.016 seconds
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] Testing done: TestJasypt(com.intris.TrisESB.route.test.TrisESBTest)
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] Took: 2.042 seconds (2042 millis)
2017-08-01 10:54:05.788 [INFO ] [com.intris.TrisESB.route.test.TrisESBTest] ********************************************************************************
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.168 sec <<< FAILURE!
TestJasypt(com.intris.TrisESB.route.test.TrisESBTest)  Time elapsed: 2.047 sec  <<< ERROR!
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route test.jasypt.route at: >>> Log[dummy properties with default value={{dummy.property:this is the default value}}] <<< in route: Route(test.jasypt.route)[[From[direct://test.jasypt.entry]] ... because of PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [dummy.property:this is the default value] not found in properties from text: dummy properties with default value={{dummy.property:this is the default value}}
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:138)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:361)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at com.intris.TrisESB.route.test.TrisESBTest.createCamelContext(TrisESBTest.java:34)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:294)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route test.jasypt.route at: >>> Log[dummy properties with default value={{dummy.property:this is the default value}}] <<< in route: Route(test.jasypt.route)[[From[direct://test.jasypt.entry]] ... because of PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [dummy.property:this is the default value] not found in properties from text: dummy properties with default value={{dummy.property:this is the default value}}
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1298)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:204)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1087)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3540)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3271)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:202)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3089)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3085)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3108)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3085)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3022)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:275)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:136)
	... 46 more
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [dummy.property:this is the default value] not found in properties from text: dummy properties with default value={{dummy.property:this is the default value}}
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:271)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:157)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParse(DefaultPropertiesParser.java:116)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:100)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:63)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:55)
	at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer$BridgePropertiesParser.parseUri(BridgePropertyPlaceholderConfigurer.java:262)
	at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer.parseUri(BridgePropertyPlaceholderConfigurer.java:167)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:230)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:173)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2411)
	at org.apache.camel.model.ProcessorDefinitionHelper.resolvePropertyPlaceholders(ProcessorDefinitionHelper.java:735)
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:524)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:510)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:226)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1295)
	... 59 more
{code};;;","05/Sep/17 17:18;davsclaus;Seems like Jasypt is a dying project;;;","06/Sep/17 07:23;davsclaus;Thanks for the sample project. I reproduced and found the bug, its in the bridge that did not support default values.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hipchat: Unable to send to room name containing spaces,CAMEL-11520,13085341,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,andyrbell,andyrbell,06/Jul/17 22:24,07/Jul/17 07:42,14/Jul/23 05:50,07/Jul/17 07:42,2.19.1,,,,,2.18.5,2.19.2,2.20.0,,camel-hipcat,,,,0,,,The room name needs to be URL encoded.,,andyrbell,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 07 07:42:35 UTC 2017,,,,,,,,,,,"0|i3h7sn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Jul/17 22:39;githubbot;GitHub user andyrbell opened a pull request:

    https://github.com/apache/camel/pull/1807

    CAMEL-11520 URL-encode hipchat room names

    This allows messages to be sent to room names containing spaces or other URL-unsafe characters.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/andyrbell/camel CAMEL-11520

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1807.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1807
    
----
commit 175635f4adf4d3b1521bd7c6ea2add4b04b89f1c
Author: Andy Bell <andyrbell@gmail.com>
Date:   2017-07-06T22:37:38Z

    CAMEL-11520 URL-encode hipchat room names
    
    This allows messages to be sent to room names containing spaces or other URL-unsafe characters.

----
;;;","07/Jul/17 07:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1807
;;;","07/Jul/17 07:42;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an Mvc Actuator endpoint for exposing Camel routes,CAMEL-11518,13085191,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,06/Jul/17 11:06,06/Jul/17 12:16,14/Jul/23 05:50,06/Jul/17 12:16,,,,,,2.20.0,,,,camel-spring-boot,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-07-06 11:06:49.0,,,,,,,,,,,"0|i3h6vj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel bean binding issues,CAMEL-11511,13084632,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,aldettinger,aldettinger,04/Jul/17 21:41,05/Jul/17 10:59,14/Jul/23 05:50,05/Jul/17 08:35,,,,,,2.20.0,,,,camel-core,,,,0,,,"Tests below show 2 issues in the bean binding:

{code:java}
public class PrivatePackageClassBeanInfoTest extends CamelTestSupport {

    @EndpointInject(uri = ""mock:result"")
    protected MockEndpoint mockResult;

    public static interface IA {
        public String method();
    }

    public static interface IB extends IA {
        public String method1();
    }

    class C implements IB {
        @Override
        public String method() {
            return ""C.method() has been called"";
        }

        @Override
        public String method1() {
            return ""C.method1() has been called"";
        }
    }

    public static interface IBC {
        public String method();
    }

    class D {
        public String method() {
            return ""D.method() has been called"";
        }
    }

    public class E extends D implements IBC {
    }

    @Test
    public void getInterfaceMethodsMessUpWithMultipleLevelOfInterface() throws InterruptedException {
        mockResult.expectedBodiesReceived(""C.method() has been called"");
        template.sendBodyAndProperty(""direct:test"", """", ""myObject"", new C());
        mockResult.assertIsSatisfied();
    }

    @Test
    public void interfaceMethodImplementedByPackagePrivateUpperClassFails() throws InterruptedException {

        System.out.println(Modifier.isPublic(E.class.getModifiers()));

        mockResult.expectedBodiesReceived(""D.method() has been called"");
        template.sendBodyAndProperty(""direct:test"", """", ""myObject"", new E());
        mockResult.assertIsSatisfied();
    }

    @Override
    public RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:test"").setBody(simple(""${exchangeProperty.myObject.method}"")).to(mockResult);
            }
        };
    }
}
{code}

Below messages are logged:
{noformat}
logged:org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: method on null due to: org.apache.camel.RuntimeExchangeException: IllegalAccessException occurred invoking method: public java.lang.String PrivatePackageClassBeanInfoTest$D.method() using arguments: [] on the exchange: Exchange[]
{noformat}

{noformat}
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: method on null due to: org.apache.camel.RuntimeExchangeException: IllegalAccessException occurred invoking method: public java.lang.String PrivatePackageClassBeanInfoTest$C.method() using arguments: [] on the exchange: Exchange[]
{noformat}
",,aldettinger,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 05 10:59:42 UTC 2017,,,,,,,,,,,"0|i3h3fz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Jul/17 21:53;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1804

    CAMEL-11511: Proposal to enhance the `BeanInfo` introspection in 2 cases

    Proposal to enhance the `BeanInfo` introspection in 2 cases:
    - A package private class implementing a 2 hop interface method
    - A public class implementing an interface method by an override from a package private class
    
    More info in [CAMEL-11511](https://issues.apache.org/jira/browse/CAMEL-11511).


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1804.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1804
    
----
commit 723a375e3a7f9c96659c30b5ae9504a4e1eabdbe
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-07-04T20:14:35Z

    Corrected issues in BeanInfo introspection

commit 491f011f89dc7feccc282cfb5009956bbaf8d290
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-06-29T16:26:48Z

    Implemented 2 tests showing issues in BeanInfo

----
;;;","05/Jul/17 08:35;davsclaus;Thanks;;;","05/Jul/17 10:59;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1804
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The consumer endpoint for Twitter component timeline/user doesn't poll the tweets even if the type is set to polling and delay attribute doesn't work,CAMEL-11510,13084529,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chirag0103,chirag0103,04/Jul/17 12:09,05/Jul/17 09:27,14/Jul/23 05:50,05/Jul/17 09:27,2.16.2,,,,,2.18.5,2.19.2,2.20.0,,camel-twitter,,,,0,,,When we try to get the tweets from timeline of a user using the consumer endpoint timeline/user of the Twitter component. It only gets first set of Tweets 20 tweets at max and later doesn't poll for the rest of them even though the type is given as polling.,Any machine,chirag0103,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 05 09:21:34 UTC 2017,,,,,,,,,,,"0|i3h2t3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Jul/17 12:11;davsclaus;Try with newer version of Camel as 2.16.x is EOL;;;","04/Jul/17 12:15;chirag0103;I did try with 2.18.1 too. It doesn't work either.;;;","04/Jul/17 12:39;chirag0103;Also tried using the version 2.19.0, didn't work. Can you help me out here?;;;","05/Jul/17 09:21;davsclaus;There was an issue in the paging now using the count and page options

But when its fixed you can then retrieve more data, such as 50 etc.
{code}
from(""twitter-timeline:user?type=polling&user=cameltweet&sinceId=1&count=50"")
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot set content type with parameters without specifying charset,CAMEL-11509,13084528,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,sflor,sflor,04/Jul/17 12:04,14/Jul/17 23:40,14/Jul/23 05:50,14/Jul/17 23:40,2.19.0,2.19.1,,,,2.19.2,2.20.0,,,camel-http4,,,,0,,,"When setting a content type that does not contain a charset parameter, for example this:

{noformat}
.setHeader(""Content-Type"", constant(""application/json;odata=verbose""))
{noformat}

the route will fail with the following exception:

{noformat}
java.lang.IllegalArgumentException: MIME type may not contain reserved characters
	at org.apache.http.util.Args.check(Args.java:36)
	at org.apache.http.entity.ContentType.create(ContentType.java:206)
	at org.apache.http.entity.ContentType.create(ContentType.java:218)
	at org.apache.camel.component.http4.HttpProducer.createRequestEntity(HttpProducer.java:511)
{noformat}

although this is clearly a valid content type according to the RFC: https://tools.ietf.org/html/rfc2045#section-5.1

This only affects version 2.19+, because in version 4.4.6 of the httpcomponents-core library, they changed the behavior of {{create}} to check the mime type for semicolons, which it previously didn't. If we, however, also use a charset parameter, you will call the {{parse}} method instead:

{noformat}
if (contentTypeString != null) {
    if (contentTypeString.indexOf(""charset"") > 0) {
        contentType = ContentType.parse(contentTypeString);
    } else {
        contentType = ContentType.create(contentTypeString);
    }
}
{noformat}

There can be all kind of different parameters, though. Instead of checking for charset, it should rather check for the existence of a semicolon. ",,davsclaus,githubbot,onders,sflor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,https://issues.apache.org/jira/browse/HTTPCORE-476,https://issues.apache.org/jira/browse/HTTPCORE-476,,,,,,,,,,,9223372036854775807,,,Fri Jul 14 23:40:55 UTC 2017,,,,,,,Patch Available,,,,"0|i3h2sv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Jul/17 12:12;davsclaus;You are welcome to provide a patch or better as a github PR with a fix
http://camel.apache.org/contributing;;;","04/Jul/17 12:58;sflor;No idea what to do really, because there seems to be a workaround for something (according to the comments):

{noformat}
//Check the contentType is valid or not, If not it throws an exception.
//When ContentType.parse parse method parse ""multipart/form-data;boundary=---------------------------j2radvtrk"",
//it removes ""boundary"" from Content-Type; I have to use contentType.create method.
if (contentTypeString != null) {
    // using ContentType.parser for charset
    if (contentTypeString.indexOf(""charset"") > 0) {
        contentType = ContentType.parse(contentTypeString);
    } else {
        contentType = ContentType.create(contentTypeString);
    }
}
{noformat}

which, then again, shouldn't work anymore, because {{ContentType.create}} will now throw an exception for any content type containing a semicolon.;;;","04/Jul/17 13:03;sflor;See also https://issues.apache.org/jira/browse/CAMEL-7886

Maybe we can now use only use {{parse}} instead without any checks. ;;;","05/Jul/17 13:09;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1805

    CAMEL-11509 - check for semicolon added to call ContentType.create

    As mentioned in the issue when ContentType.create is called for such cases, it breaks HttpProducerContentTypeTest.java.
    if not, the issue is up.
    
    As a workaround issue, simple check is added.
    We may need to check why ContentType.create fails whereas ContentType.parse not as @WillemJiang commented on https://issues.apache.org/jira/browse/CAMEL-7886
    and fixed in the issue like 
    
    `
    //Check the contentType is valid or not, If not it throws an exception.
    //When ContentType.parse parse method parse ""multipart/form-data;boundary=---------------------------j2radvtrk"",
    //it removes ""boundary"" from Content-Type; I have to use contentType.create method.
    if (contentTypeString != null) {
        // using ContentType.parser for charset
        if (contentTypeString.indexOf(""charset"") > 0) {
            contentType = ContentType.parse(contentTypeString);
        } else {
            contentType = ContentType.create(contentTypeString);
        }
    }
    `
    
    I will also try to catch up with httpcomponents and revisit the issue.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11509

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1805.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1805
    
----
commit 3a5551a4188c53bb3b9cce06f64078fb647a7aa5
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-05T12:33:27Z

    CAMEL-11509 - httpcomponents-core 4.4.6 ContentType.create changed. so use ContentType.parse instead

----
;;;","05/Jul/17 13:15;onders;even if you pass like this,

{noformat}
.setHeader(""Content-Type"", constant(""application/json;odata=verbose""))
{noformat}

the endpoint sees the content-type like ""application/json; odata=verbose"".

please notice the space after ;

that's why there is a trick in this line;

https://github.com/apache/camel/pull/1805#discussion-diff-125638439R92;;;","13/Jul/17 13:27;onders;[~sflor] please see Oleg's comment's in the issue https://issues.apache.org/jira/browse/HTTPCORE-476

{code}
.setHeader(""Content-Type"", constant(""application/json;odata=verbose""))
{code}

seems to be wrong.
Apart from that the fix in the PR will help for other cases where {{ContentType#create}} fails with the header you may provide like 
{code}
multipart/form-data;boundary=---------------------------j2radvtrk
{code}

and if containing ';' char, parse will be called.

I will check-in PR to master and backport to camel-2.19.x soon.

Cheers;;;","14/Jul/17 23:40;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1805
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Declaring AWS endpoint with accessKey and secretKey, and without amazonS3Client should be possible.",CAMEL-11489,13083995,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdemande,tdemande,01/Jul/17 13:11,02/Jul/17 13:05,14/Jul/23 05:50,01/Jul/17 18:00,2.19.0,2.19.1,,,,2.19.2,2.20.0,,,camel-aws,,,,0,,,"CAMEL-9210 introduced  a regression about the ability to specify AWS credentials, and no amazonS3Client reference.

PR will be provided soon to remove the unnecessary mandatory nature of amazonS3Client.",,davsclaus,githubbot,tdemande,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9210,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jul 01 18:51:29 UTC 2017,,,,,,,,,,,"0|i3gzin:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"01/Jul/17 13:24;githubbot;GitHub user tdemande opened a pull request:

    https://github.com/apache/camel/pull/1801

    CAMEL-11489: Remove mandatory nature of amazonS3Client when accessKey…

    … and secretKey are provided

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdemande/camel CAMEL-11489

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1801.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1801
    
----
commit 819f8f4eb61d6b548dbf93a434fc69a7506c24ff
Author: Thomas Demande <tdemande@gmail.com>
Date:   2017-07-01T13:19:14Z

    CAMEL-11489: Remove mandatory nature of amazonS3Client when accessKey and secretKey are provided

----
;;;","01/Jul/17 17:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1801
;;;","01/Jul/17 18:00;davsclaus;Thanks for the PR.

I wonder if you would mind checking the other aws components in camel-aws if they have a similar problem, or was it only about this s3?;;;","01/Jul/17 18:51;tdemande;I do not have ready-to-test code about the other components, by I seeing the code, all are probably impacted too if they did permit omitting the amazonS3Client when accessKey and secretKey were provided.

Will check this later and provide an additional PR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException for invalid payload with session handling enabled,CAMEL-11486,13083741,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,30/Jun/17 10:49,30/Jun/17 11:03,14/Jul/23 05:50,30/Jun/17 11:03,2.19.1,,,,,2.19.2,2.20.0,,,camel-cxf,,,,0,,,"If HTTP session handling is enabled for a CXF producer endpoint and an invalid payload is provided to the endpoint a NullPointerException is thrown instead of an Illegal state exception.

This fix is just to add a null check to the inMessage of the CXF exchange. This will only affect the thrown exception not actual message processing.",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-30 10:49:51.0,,,,,,,Patch Available,,,,"0|i3gxyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSLContextParameters settings are not properly copied to SslContextFactory,CAMEL-11482,13083446,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Rovo,Rovo,29/Jun/17 12:10,26/Sep/17 12:54,14/Jul/23 05:50,26/Sep/17 12:54,2.19.0,2.19.1,,,,2.19.4,2.20.0,,,camel-jetty,,,,0,,,"Jetty 9.3+ excludes unsecure ciphers which end on either MD5, SHA or SHA1 by default now. This will however remove all ciphers that are used by either TLSv1 or TLSv1.1 and thus no ciphers remain in order to agree on a cipher for TLSv1 or TLSv1.1 connection attempts. (Further reading: https://github.com/eclipse/jetty.project/issues/860)

The Jetty 9 SSL configuration documentation (https://www.eclipse.org/jetty/documentation/9.3.x/configuring-ssl.html) states that this exclusion cipher suites can be customized by providing an own exclusion list. On specifying SSLContextParameters like below however will not correctly propagate this exclution cipher suites to the SslContextFactory of Jetty and thus use the default setting which prevents TLSv1 and TLSv1.1 connections.

{code:title=SSLContextParameters Spring Config|borderStyle=solid}
  @Bean(name = ""sslContextParameters"")
  public SSLContextParameters sslContextParameters() {
    String keyStore = env.getProperty(""ssl.keyStore.resource"");
    URL keyStoreUrl = this.getClass().getResource(keyStore);

    // http://camel.apache.org/jetty.html
    KeyStoreParameters ksp = new KeyStoreParameters();
    ksp.setResource(keyStoreUrl.getPath());
    ksp.setPassword(env.getProperty(""ssl.keyStore.password""));

    KeyManagersParameters kmp = new KeyManagersParameters();
    kmp.setKeyStore(ksp);
    kmp.setKeyPassword(env.getProperty(""ssl.key.password""));

    SSLContextParameters scp = new SSLContextParameters();
    scp.setKeyManagers(kmp);

    // Jetty 9.3+ support only TLSv1.2 by default hence clients not supporting this protocol will fail
    List<String> supportedSslProtocols = Arrays.asList(""TLSv1"", ""TLSv1.1"", ""TLSv1.2"");
    SecureSocketProtocolsParameters protocolsParameters = new SecureSocketProtocolsParameters();
    protocolsParameters.setSecureSocketProtocol(supportedSslProtocols);
    scp.setSecureSocketProtocols(protocolsParameters);

    // TLS 1.0 / 1.1 have been disabled by jetty 9.3
    // this is a first attempt to re-enable them
    // see
    // - https://www.eclipse.org/jetty/documentation/9.3.x/configuring-ssl.html
    // - https://github.com/eclipse/jetty.project/issues/860
    // - http://camel.apache.org/camel-configuration-utilities.html
    FilterParameters cipherParameters = new FilterParameters();
    cipherParameters.getInclude().add("".*"");
    cipherParameters.getExclude().add(""^.*_(MD5|SHA1)$"");
    scp.setCipherSuitesFilter(cipherParameters);

    return scp;
  }
{code}

A workaround is to use a custom JettyHttpComponent9 implementation that sets the excludedCipherSuites manually like depicted below:

{code:title=Workaround|borderStyle=solid}
  /**
   * A custom jetty http component which explicitly sets the excludedCipherSuites during creation of
   * the jetty connector.
   *
   * Why? It seems camel does not push included/excluded cipherSuites from {@link
   * SSLContextParameters} to the {@link SslContextFactory} nor does push explicitly listed cipher
   * suites (i.e. like <em>TLS_RSA_WITH_AES_256_CBC_SHA</em>) to the Jetty SSL context factory.
   */
  public static class HackedJettyHttpComponent extends JettyHttpComponent9 {

    @Override
    protected AbstractConnector createConnectorJettyInternal(Server server,
                                                             JettyHttpEndpoint endpoint,
                                                             SslContextFactory sslcf) {

      sslcf.setExcludeCipherSuites(""^.*_(MD5|SHA1)$"");
      return super.createConnectorJettyInternal(server, endpoint, sslcf);
    }
  }
{code}","Max OS X, Java 8 Update 131
Ubuntu 14.04 LTS, Java 8 Update 111
Camel 2.19.0
Jetty9 9.4.5v20170502 and 9.3.14.v20161028",davsclaus,onders,Rovo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 26 12:54:47 UTC 2017,,,,,,,,,,,"0|i3gw5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Jul/17 07:24;davsclaus;Are you working on a patch / github PR?;;;","03/Jul/17 09:12;Rovo;Have to see if I am able to find some time, but our upcoming release has higher priorities.;;;","04/Jul/17 17:49;Rovo;Just a quick headsup on this issue. I've started to work on a fix (https://github.com/RovoMe/camel/commit/952175559110babf0ee7224f8045c1270dad5aa7) though I'm not sure if the code has to support Java 7 (or even 6). Also, there are probably a couple other settings that aren't copied to the SslContextFactory which I have not yet included either. What should be the strategy on these? Continue work on that issue and copy over all settings or leave them to those who need them and ask them to provide a fix/PR?

Will also check how to setup unit-tests therefore, though as the method is private I guess I have to test it within createConnector(Server, JettyHttpEndpoint) and/or createHttpClient(JettyHttpEndpoint, Integer, SSLContextParameters) which use the updated method.;;;","05/Jul/17 07:21;onders;2.16.X is EOL. 2.17.X is EOL.

I guess Java 6 and 7 support is not needed. 

for the setting to copy, IMHO i would suppose the nicer way would be to have full default copying all configurations to SSLContextFactory and also have configurable base strategy(which may be pluggable via SPI) and where you can choose which settings to copy and put to SSLContextFactory.;;;","25/Jul/17 13:06;davsclaus;How is it going?;;;","08/Sep/17 12:43;davsclaus;Roman, are you working on this?;;;","26/Sep/17 11:07;davsclaus;I am working on this, and we now set those ciphers and protocols filters from the ssl context configuration. 

Camel will log at INFO level the configuration, such as the default ones as shown
{code}
Connector on por:t 23003 is using excludeChiperSuites: [[^.*_(MD5|SHA|SHA1)$]] excludeProtocols: [[SSL, SSLv2, SSLv2Hello, SSLv3]]
{code};;;","26/Sep/17 11:17;Rovo;Thanks for taking over as I'm currently not having enough time lately. I've some (WIP) tests for the changes I had in my branch if you are interested. They basically test that TLSv1 or TLSv1.1 connections work as they should via Java's HttpUrlConnection. The only thing that bugs me, is, that I am not able to retrieve the server certificate but I'm not sure if this is related to self-signed certificates.;;;","26/Sep/17 11:32;davsclaus;Yeah you are welcome to contribute your unit tests that would help surely.;;;","26/Sep/17 12:14;Rovo;Test for exclusion pattern. Both tests are green though you might notice a stacktrace on executing testHelloEndpoint as no server certificate is obtainable:

https://github.com/RovoMe/camel/blob/fix/CAMEL-11482_SSLContextParameters_settings_are_not_properly_copied_to_SslContextFactory/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/HttpsRouteSslContextParametersInUriTest_TLSv1SupportWithExclusionPattern.java

Test for defining explicite ciphers to support. Though as it turns out Jettys exclusion patterns seem to kick in before and hence remove all of the TLSv1/1.1 ciphers:

https://github.com/RovoMe/camel/blob/fix/CAMEL-11482_SSLContextParameters_settings_are_not_properly_copied_to_SslContextFactory/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/HttpsRouteSslContextParametersInUriTest_TLSv1SupportWithInclusionPattern.java

HTH;;;","26/Sep/17 12:54;davsclaus;Thanks those SSL tests are extreme and they are hard to test as different platforms and JDKs and whatnot have different ciphers supported etc.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-rabbitmq - autorecovery creates additional channels,CAMEL-11480,13083427,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,macdln,macdln,29/Jun/17 10:44,07/Nov/17 15:33,14/Jul/23 05:50,02/Nov/17 07:24,2.19.1,,,,,2.20.0,,,,camel-rabbitmq,,,,0,,,"While testing the automatic recovery for rabbitmq for network failure scenario, I noticed that after recovery, the consumer/channel count is always increasing.

Consider the following codes:
<camel:route id=""in_route"">
			<camel:from uri=""rabbitmq://rabbitmq/myexchange?connectionFactory=#rabbitMqCustomConnectionFactory&amp;addresses={{rabbitmq.nodes}}&amp;queue=myqueue"" />
			<camel:to uri=""log:message received?showBody=true"" />
		</camel:route>

// Custom connection factory
<bean id=""rabbitMqCustomConnectionFactory"" class=""com.rabbitmq.client.ConnectionFactory"">
	<property name=""username"" value=""${rabbitmq.username}"" />
	<property name=""password"" value=""${rabbitmq.password}"" />
</bean>

When the application runs, I see 2 threads running:
* RabbitMQConsumer [camel-rabbitmq library]
* AMQConnection (RecoveryAwareAMQConnection) [amqp-client]

Killing the active rabbitmq server node triggers the auto recovery in the client.
* RabbitConsumer.handleShutdownSignal() successfully reconnects to the other rabbitmq node. 
* At the same time, AutorecoveringConnection.beginAutomaticRecovery is triggered but with some networkRecoveryInterval delay - recovers successfully any existing channels.

As a result, 2 channels/consumers are created - both are active. When there should only be 1 channel to be recovered.

Would it be possible to add a priority whether which recovery mechanism to use? Was thinking of having the AMQConnection recovery execute first before the RabbitConsumer recovery since the latter checks if an existing channel is open before creating a new connection.","rabbitmq server 3.6.2 running on cluster+HA mode (2 nodes), Spring client application using DSL camel configuration",davsclaus,dmvolod,hveiga,macdln,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11996,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 02 14:25:35 UTC 2017,,,,,,,,,,,"0|i3gw13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Sep/17 13:56;davsclaus;Sounds good, you are welcome to work on a patch / PR
https://github.com/apache/camel/blob/master/CONTRIBUTING.md;;;","31/Oct/17 14:54;hveiga;Hi [~macdln] I added some logic in 2.20.0 that might have fixed this, can you give it a try?;;;","02/Nov/17 07:24;macdln;Hi [~hveiga], I tried testing using the latest version and now it is working! Cheers! :);;;","02/Nov/17 14:25;hveiga;Good to know! Cheers!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can not override isUseAdviceWith in CamelBlueprintTestSupport,CAMEL-11477,13083368,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,saravanakumar,saravanakumar,29/Jun/17 05:57,29/Jun/17 11:43,14/Jul/23 05:50,29/Jun/17 11:37,2.18.4,2.19.1,,,,2.18.5,2.19.2,2.20.0,,camel-blueprint,,,,0,,,"There is an issue while using use advice with in unit tests that extends CamelBlueprintTestSupport..

It is impossible to override isUseAdviceWith method while working with CamelBlueprintTestSupport.",,davsclaus,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 11:43:50 UTC 2017,,,,,,,,,,,"0|i3gvnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jun/17 06:03;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1796

    CAMEL-11477: Can not override isUseAdviceWith in CamelBlueprintTestSu…

    …pport
    
    PR for https://issues.apache.org/jira/browse/CAMEL-11477
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1796.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1796
    
----
commit 3785332ea4d9f8fc7fba2b5792f174ee4880b6e0
Author: Saravanakumar Selvaraj <ssaravan@ssaravan.pnq.csb>
Date:   2017-06-29T05:03:43Z

    CAMEL-11477: Can not override isUseAdviceWith in CamelBlueprintTestSupport

----
;;;","29/Jun/17 11:37;davsclaus;Thanks for the PR;;;","29/Jun/17 11:43;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1796
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
spring-boot - routes not loaded when setting a management.port,CAMEL-11476,13083151,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,nferraro,nferraro,28/Jun/17 14:17,29/Jun/17 12:34,14/Jul/23 05:50,29/Jun/17 12:34,2.20.0,,,,,2.20.0,,,,camel-spring-boot,,,,0,,,"This is a really weird bug. If you set:

{code}
management.port=8081
{code}

On the application.properties file of any spring-boot application using actuator, then camel routes created through RouteBuilders are not loaded (""Total 0 routes, of which 0 are started.""). 

I've found it in (all) the fabric8 basic quickstarts, but it happens also in the ""camel-example-spring-boot"" bundled with Apache Camel. Everything works in 2.19.x.

Setting a different management port is a best practice. 

[~zregvart], [~cibsen@e-ma.net], [~lb] any idea?",,davsclaus,githubbot,nferraro,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8460,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 12:34:03 UTC 2017,,,,,,,,,,,"0|i3gubz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jun/17 15:00;zregvart;I wonder if the change I did in CAMEL-11261 had any influence on this.;;;","28/Jun/17 16:41;davsclaus;Just to be sure this is only a problem on the master branch of Camel ?;;;","28/Jun/17 18:21;zregvart;[~davsclaus] yes, and I think [~nferraro] alluded to that in the description, but I verified, with 2.19.1 {{camel-example-spring-boot}} and {{management.port=8081}} finds the {{RouteBuilder}} route, with 2.20.0-SNAPSHOT it does not.;;;","28/Jun/17 19:14;zregvart;I've found the issue and a possible solution, I'm running tests to see if the solution caused any other issues.

The problem is that the equality check in [RoutesCollector.java#L81|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L81] does not pass when {{management.port=8081}} is set. And this in turn is because [EndpointWebMvcAutoConfiguration.java#L144|https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java#L144] instantiates a new {{ApplicationContext}} instance if the management port is customized.

So previously {{RoutesCollector} would start {{CamelContext}} but now {{CamelContext}} is started by {{ContextRefreshedEvent}}, and it is started on the first {{ContextRefreshedEvent}} for the first {{ApplicationContext}}, and as {{RoutesCollector}} checks if its a part of that {{AppplicationContext}} it won't add {{RouteBuilders}}, and the second {{ContextRefreshedEvent}} from the second {{ApplicationContext}} does not load any {{RouteBuilders}} as at that point {{CamelContext}} is already started and the second check in  [RoutesCollector.java#L86|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L86] will not pass.
;;;","29/Jun/17 08:48;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1797

    CAMEL-11476: spring-boot - routes not loaded when setting a management.port

    @nicolaferraro would you mind taking a look, thanks 👍 
    
    Fixes `RouteBuilder` (Java DSL) based routes not loading when setting `management.port` Spring Boot property by removing the 'same application context' check.
    
    Also removes `maybeStart` method to start the Camel context from `RoutesCollector`, startup is now handled in `SpringCamelContext`.
    
    When customizing the `management.port` configuration option Spring Boot creates a new `ApplicationContext` instance which when started emits a `ContextRefreshedEvent` that is different from the `ApplicationContext` the `RoutesCollector` is initialized with.
    
    Due to change in CAMEL-11261, `SpringCamelContext` is started via the same `ContextRefreshedEvent`, at the point the second `ContextRefreshedEvent` emited from the `ApplicationContext`, that `RoutesCollector` is initialized with, `SpringCamelContext` is already started and no Java DSL routes are added to Camel context.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11476

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1797.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1797
    
----
commit 3ab5ce9c61daf2d50f2f33ac78dfa189aa2cd1a8
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-06-29T08:42:07Z

    CAMEL-11476: spring-boot - routes not loaded wh...
    
    ...en setting a management.port
    
    Fixes `RouteBuilder` (Java DSL) based routes not loading when setting
    `management.port` Spring Boot property by removing the 'same application
    context' check.
    
    Also removes `maybeStart` method to start the Camel context from
    `RoutesCollector`, startup is now handled in `SpringCamelContext`.
    
    When customizing the `management.port` configuration option Spring Boot
    creates a new `ApplicationContext` instance which when started emits a
    `ContextRefreshedEvent` that is different from the `ApplicationContext`
    the `RoutesCollector` is initialized with.
    
    Due to change in CAMEL-11261, `SpringCamelContext` is started via the
    same `ContextRefreshedEvent`, at the point the second
    `ContextRefreshedEvent` emited from the `ApplicationContext`, that
    `RoutesCollector` is initialized with, `SpringCamelContext` is already
    started and no Java DSL routes are added to Camel context.

----
;;;","29/Jun/17 12:32;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1797
;;;","29/Jun/17 12:34;zregvart;Merged to {{master}} from [PR#1797|https://github.com/apache/camel/pull/1797];;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[camel-box] missing Karaf feature dependency,CAMEL-11472,13083083,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,amarkevich,amarkevich,28/Jun/17 09:58,26/Sep/17 01:00,14/Jul/23 05:50,28/Jun/17 11:19,2.18.4,,,,,2.18.5,,,,camel-box,,,,0,,,"{noformat}
karaf@root()> repo-add mvn:org.apache.camel.karaf/apache-camel/2.18.4/xml/features
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.18.4/xml/features
karaf@root()> feature:install camel-box
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-box; type
=karaf.feature; version=""[2.18.4,2.18.4]""; filter:=""(&(osgi.identity=camel-box)(type=karaf.feature)(version>=2.18.4)(ver
sion<=2.18.4))"" [caused by: Unable to resolve camel-box/2.18.4: missing requirement [camel-box/2.18.4] osgi.identity; os
gi.identity=org.apache.camel.camel-box; type=osgi.bundle; version=""[2.18.4,2.18.4]""; resolution:=mandatory [caused by: U
nable to resolve org.apache.camel.camel-box/2.18.4: missing requirement [org.apache.camel.camel-box/2.18.4] osgi.wiring.
package; filter:=""(osgi.wiring.package=com.gargoylesoftware.htmlunit)"" [caused by: Unable to resolve org.apache.servicem
ix.bundles.htmlunit/2.22.0.1: missing requirement [org.apache.servicemix.bundles.htmlunit/2.22.0.1] osgi.wiring.package;
 filter:=""(&(osgi.wiring.package=org.eclipse.jetty.websocket.api)(version>=9.2.0)(!(version>=10.0.0)))"" [caused by: Unab
le to resolve org.eclipse.jetty.websocket.api/9.3.14.v20161028: missing requirement [org.eclipse.jetty.websocket.api/9.3
.14.v20161028] osgi.identity; osgi.identity=pax-jetty-condition-pax_http_whiteboard; type=karaf.feature; version=""[9.3.1
4.v20161028,9.3.14.v20161028]""; resolution:=mandatory [caused by: Unable to resolve pax-jetty-condition-pax_http_whitebo
ard/9.3.14.v20161028: missing requirement [pax-jetty-condition-pax_http_whiteboard/9.3.14.v20161028] osgi.identity; osgi
.identity=pax-http-whiteboard; type=karaf.feature; condition:=true]]]]]{noformat}

workaround:
{noformat}
karaf@root()> feature:install pax-http-whiteboard
karaf@root()> feature:install camel-box
{noformat}
",Karaf 4.1.1,acosentino,amarkevich,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11839,,,,,,,,,,,"28/Jun/17 11:17;amarkevich;camel-box.patch;https://issues.apache.org/jira/secure/attachment/12874852/camel-box.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 11:19:21 UTC 2017,,,,,,,Patch Available,,,,"0|i3gtwv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jun/17 10:00;acosentino;We don't release 2.17.x camel anymore. The last one was 2.17.7;;;","28/Jun/17 10:59;amarkevich;Reported version is same as used in local project; 2.18 also affected;;;","28/Jun/17 11:17;amarkevich;Patch update to reffer to standard Karaf feature;;;","28/Jun/17 11:19;acosentino;Thanks for the patch. Applied.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to update the cron details from Quartz scheduler MBean,CAMEL-11471,13083074,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,28/Jun/17 09:08,29/Jun/17 00:25,14/Jul/23 05:50,28/Jun/17 15:52,2.19.1,,,,,2.20.0,,,,camel-quartz2,,,,0,,,"On Karaf container, if you try to change the cron expression in a camel-quartz2 endpoint (like below) from a JMX console such as hawtio, update fails to persist.
{code:xml}
    <route>
      <from uri=""quartz2://myGroup/myTimer?cron=0/1 * * * * ?"" />
      [...]
    </route>
{code}

It's because Quartz2 requires runtime dependency back to {{org.apache.camel.component.quartz2}} but the default quartz bundle (of course) doesn't have it in {{Import-Package}}.",,davsclaus,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 00:25:27 UTC 2017,,,,,,,,,,,"0|i3gtuv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jun/17 09:14;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1794

    CAMEL-11471: Unable to update the cron details from Quartz scheduler MBean

    https://issues.apache.org/jira/browse/CAMEL-11471

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-11471

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1794.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1794
    
----
commit eaced59ff64322f4e5eb8d979fc205a24f54f42b
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-06-28T09:12:56Z

    CAMEL-11471: Unable to update the cron details from Quartz scheduler MBean

----
;;;","28/Jun/17 15:52;davsclaus;Thanks for the PR;;;","29/Jun/17 00:25;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1794
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-Core: DefaultShutdownStrategy, pass the logInflightExchangesOnTimeout to the ShutdownTask",CAMEL-11470,13083043,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,28/Jun/17 07:24,28/Jun/17 07:52,14/Jul/23 05:50,28/Jun/17 07:52,,,,,,2.20.0,,,,camel-core,,,,0,,,"Actually we have the logInflightExchangesOnTimeout set to true as default:

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java#L126

in the ShutdownTask the parameter is forced to false and then if you do not enable debug logging it won't log the inflight exchanges details.

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java#L631",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-28 07:24:05.0,,,,,,,,,,,"0|i3gtnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Hipchat - Configure via xml is broken,CAMEL-11469,13082958,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,w4tson,w4tson,27/Jun/17 21:38,28/Jun/17 19:37,14/Jul/23 05:50,28/Jun/17 16:32,2.19.1,,,,,2.18.5,2.19.2,2.20.0,,camel-hipcat,,,,0,,,"Declaring a hipchat endpoint in XML misconfigures the same component in the DSL. This seems to be because at some point via XML the component URI get's normalized and '//' is introduced.

This means a component of 

{{<to uri=""hipchat:https:myhipchatserver.com:443?authToken?=abc"" />}}

Is actually configured to the default api.hipchat.com.",,davsclaus,githubbot,w4tson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 19:37:01 UTC 2017,,,,,,,,,,,"0|i3gt53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jun/17 21:59;githubbot;GitHub user w4tson opened a pull request:

    https://github.com/apache/camel/pull/1793

    CAMEL-11469 Use remainder of uri to parse config

    The configuration now uses the remainder of the uri to parse out the properties. This can now cope with a '//' or not and stops further string manipulation where it isn't needed.
    
    CAMEL-9495 was fixing parsing logic and seemed to knock it out. I'm not super familiar with camel core but it looks like the 'remaining' URI is already being passed in so it seems silly to attempt this again?
    
    Also I had to work hard a bit not to introduce a dependency on spring in order to reproduce this. My work around is to manually load in the route from XML. It's quite clunky the way I've done it. If there's a smoother way, please advise.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/w4tson/camel CAMEL-11469-hipchat-endpoint-uri-problem

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1793.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1793
    
----
commit 202daa5f8145669880c0d7f61e01ae9a3308c249
Author: Paul Watson <paul.watson@pdwtech.com>
Date:   2017-06-27T21:51:15Z

    CAMEL-11469 Use remainder of uri to parse config
    
    The configuration now uses the remainder of the uri to parse out the properties. This can now cope with a '//' or not and stops further string manipulation where it isn't needed

----
;;;","28/Jun/17 16:32;davsclaus;Thanks for the PR;;;","28/Jun/17 19:37;githubbot;Github user w4tson closed the pull request at:

    https://github.com/apache/camel/pull/1793
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-bindy tests fail depending on the locale,CAMEL-11467,13082926,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnodet,gnodet,gnodet,27/Jun/17 19:41,27/Jun/17 22:40,14/Jul/23 05:50,27/Jun/17 22:40,,,,,,2.20.0,,,,,,,,0,,,"I end up with the following:
{code}
[ERROR] Failures: 
[ERROR] org.apache.camel.dataformat.bindy.fixed.BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage(org.apache.camel.dataformat.bindy.fixed.BindyMarshallUnmarshallWithDefaultValueTest)
[ERROR]   Run 1: BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage:56 mock://resultMarshal Body of message: 0. Expected: <10A9     JohnDoe  ISINXD12345678BUYShare000002500.45USD01-08-2009          
> but was: <10A9     JohnDoe  ISINXD12345678BUYShare000002500,45USD01-08-2009          
>
[ERROR]   Run 2: BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage:56 mock://resultMarshal Body of message: 0. Expected: <10A9     JohnDoe  ISINXD12345678BUYShare000002500.45USD01-08-2009          
> but was: <10A9     JohnDoe  ISINXD12345678BUYShare000002500,45USD01-08-2009          
>
[ERROR]   Run 3: BindyMarshallUnmarshallWithDefaultValueTest.testMarshallMessage:56 mock://resultMarshal Body of message: 0. Expected: <10A9     JohnDoe  ISINXD12345678BUYShare000002500.45USD01-08-2009          
> but was: <10A9     JohnDoe  ISINXD12345678BUYShare000002500,45USD01-08-2009          
>
{code}

My system decimal separator is set to ',' instead of '.' which causes the failures.",,gnodet,onders,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11468,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 27 21:26:11 UTC 2017,,,,,,,,,,,"0|i3gsxz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jun/17 21:15;onders;I suppose there is a workaround to set either system locale or jvm args to set.

eg:
https://stackoverflow.com/questions/8809098/how-do-i-set-the-default-locale-for-my-jvm;;;","27/Jun/17 21:26;gnodet;Yes, and no.  I have a fix to set the system properties, as they need to be set for surefire VM.  I'm just running the full build before committing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE caused by IrcMessage,CAMEL-11465,13082862,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamesnetherton,jamesnetherton,27/Jun/17 15:58,28/Jun/17 16:40,14/Jul/23 05:50,28/Jun/17 16:40,2.20.0,,,,,2.20.0,,,,camel-irc,,,,0,,,"The {{IrcEndpoint}} has a number of methods like {{createOnPrivmsgExchange}}, {{createOnNickExchange}} etc, where an instance of {{IrcMessage}} is created. When the constructor is called, it results in:

{code}
16:49:55,426 ERROR [stderr] (Thread-97) Exception in thread ""Thread-97"" java.lang.NullPointerException
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.impl.MessageSupport.setBody(MessageSupport.java:122)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.component.irc.IrcMessage.<init>(IrcMessage.java:50)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.component.irc.IrcEndpoint.createOnPrivmsgExchange(IrcEndpoint.java:71)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.apache.camel.component.irc.IrcConsumer$FilteredIRCEventAdapter.onPrivmsg(IrcConsumer.java:203)
16:49:55,427 ERROR [stderr] (Thread-97) 	at org.schwering.irc.lib.IRCConnection.get(IRCConnection.java:430)
16:49:55,428 ERROR [stderr] (Thread-97) 	at org.schwering.irc.lib.IRCConnection.run(IRCConnection.java:373)
{code}

Seems there's now a dependency on the CamelContext in [MessageSupport.setBody|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java#L122] and the {{IrcMessage}} constructor calls {{setBody}} before the CamelContext has been provided to it (it's currently set after the constructor is called).",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-27 15:58:10.0,,,,,,,,,,,"0|i3gsjr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nashorn javascript library can not be found  in OSGi,CAMEL-11462,13082801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,27/Jun/17 12:39,27/Jun/17 15:19,14/Jul/23 05:50,27/Jun/17 15:19,,,,,,2.20.0,,,,camel-script,osgi,,,0,,,,,acosentino,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11458,,,,,,,,,,FELIX-5659,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 27 15:19:07 UTC 2017,,,,,,,,,,,"0|i3gs67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jun/17 12:48;acosentino;Maybe this one too is related:

https://issues.apache.org/jira/browse/KARAF-4603;;;","27/Jun/17 12:57;gnodet;Well, that would be related, but different issue.;;;","27/Jun/17 15:19;gnodet;https://github.com/apache/camel/commit/a60fc014015cc8fbbc446660adf917e4774ce7ff;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Infinispan: If a Default Configuration is not provided then a DefaultCacheName must be provided,CAMEL-11460,13082770,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,27/Jun/17 09:57,27/Jun/17 10:04,14/Jul/23 05:50,27/Jun/17 10:04,,,,,,2.20.0,,,,camel-infinispan,,,,0,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-27 09:57:19.0,,,,,,,,,,,"0|i3grzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automatic transform String to DBObject after previous conversion error,CAMEL-11455,13082478,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fabryprog,fabryprog,26/Jun/17 11:03,23/Jul/17 11:39,14/Jul/23 05:50,23/Jul/17 11:39,2.19.1,,,,,2.19.3,2.20.0,,,camel-mongodb,camel-mongodb3,,,0,,,"Hello,

i found a bug. To reproduce it you can execute the code (see attachment file).

The bug is simple:

After an invalid conversion, the automatic String -> JSON transformation used to put a document into MongoDB collection, fail!

Application flow:
# First document can be convert to JSON, Mongodb create a document (correct)
# Second document has an error, Mongodb cannot create a document (correct)
# Third document can be convert to JSON but Mongodb cannot create a document into collection because automatic conversion is broken!!!  (BUG)

Kings regards",,davsclaus,fabryprog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Jun/17 11:03;fabryprog;jsonFormatterDisappear.zip;https://issues.apache.org/jira/secure/attachment/12874479/jsonFormatterDisappear.zip",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 23 09:45:57 UTC 2017,,,,,,,,,,,"0|i3gq6v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jun/17 11:04;fabryprog;The source code;;;","27/Jun/17 08:25;davsclaus;Can you try to modify the type converters in camel-mongodb3 / camel-mongodb to not use try .. catch but throw an exception if conversion fails. They should not really do this.

;;;","28/Jun/17 13:09;fabryprog;[~davsclaus] now it is work fine.

I am fixing test files and i am going to send the github PR.

Thanks;;;","29/Jun/17 11:39;davsclaus;Thanks Fabrizio, looking forward to the PR;;;","20/Jul/17 08:01;davsclaus;Did you get a chance to send a PR, as we will work on a Camel 2.19.2 release early next month then we need to get this fixed fairly soon;;;","21/Jul/17 12:05;davsclaus;This is a little bit bigger problem due how bad those type converters was written from the beginning. So some of the tests was just passing even if there was type conversion errors that was just ignored and WARN logged.;;;","23/Jul/17 09:45;fabryprog;sorry guys but i cannot fix it before 1st August!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zipfile dataformat cannot remove successfully processed files,CAMEL-11454,13082466,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,apailhes,apailhes,26/Jun/17 10:23,28/Jun/17 16:53,14/Jul/23 05:50,28/Jun/17 15:49,2.18.3,,,,,2.19.2,2.20.0,,,camel-zipfile,,,,0,,,"When creating a route as follows:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xmlns:context=""http://www.springframework.org/schema/context"" xmlns:util=""http://www.springframework.org/schema/util""
  xsi:schemaLocation=""
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
          http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd"">

  <bean id=""zipFileDataFormat"" class=""org.apache.camel.dataformat.zipfile.ZipFileDataFormat"">
    <property name=""usingIterator"" value=""true"" />
  </bean>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"" streamCache=""true"">
    <route>
      <from uri=""file:C:/camelTest/in"" />
      <unmarshal ref=""zipFileDataFormat"" />
      <split streaming=""true"">
        <simple>${body}</simple>
        <log loggingLevel=""INFO"" message=""$simple{header.zipFileName}"" />
        <to uri=""file:C:/camelTest/xml"" />
      </split>
      <log loggingLevel=""INFO"" message=""$simple{file:name} Succesful processed"" />
    </route>
  </camelContext>
</beans>
{code}

the renaming of the file fails with 
{code}
Renaming file from 'C:\camelTest\in\20161201T0030Z_1D_BE00_EQ.zip' to 'C:\camelTest\in\.camel\20161201T0030Z_1D_BE00_EQ.zip' failed: Cannot delete file 'C:\camelTest\in\20161201T0030Z_1D_BE00_EQ.zip' after copy succeeded
{code}
The file stays in input folder and gets processed over and over again.

h2. Investigation
Problem only occurs if:
* you try to move the file at the end of the exchange (not with noop but with delete, for example)
* if ZipFile dataformat is used (not with ZipSplitter)
* if usingIterator is true (not if false and Zip file with 1 entry)

It's because in org.apache.camel.dataformat.zipfile.ZipIterator constructor:
{code}
        InputStream inputStream = inputMessage.getBody(InputStream.class);
{code}
will create a new input stream instead of using the one already opened: inputStream parameter when using org.apache.camel.dataformat.zipfile.ZipFileDataFormat#unmarshal.
This one won't be closed and you won't be able to release the resource unless you kill the process.

So, two solutions:
* close the inputStream parameter in org.apache.camel.dataformat.zipfile.ZipFileDataFormat#unmarshal before using ZipIterator constructor
* use inputStream parameter instead of creating a new one when using dataformat (that's the implementation provided in the pull request)",Windows 7 x64,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,CAMEL-11120,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 16:53:05 UTC 2017,,,,,,,,,,,"0|i3gq47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jun/17 10:44;githubbot;GitHub user adioss opened a pull request:

    https://github.com/apache/camel/pull/1785

    CAMEL-11454 use provided input stream when unmarshalling instead of creating a new one

    see JIRA ticket for more information (investigation part)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adioss/camel CAMEL-11454

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1785.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1785
    
----
commit e1e07cf886c4bea71b94a3f6c7170e7ad7ddb3b3
Author: Adrien PAILHES <apailhes@axway.com>
Date:   2017-06-26T10:43:12Z

    CAMEL-11454 use provided input stream when unmarshalling instead of creating a new one

----
;;;","28/Jun/17 15:49;davsclaus;Thanks for the PR;;;","28/Jun/17 16:53;githubbot;Github user adioss closed the pull request at:

    https://github.com/apache/camel/pull/1785
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix camel-box feature,CAMEL-11453,13082449,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jpoth,jpoth,26/Jun/17 08:54,26/Jun/17 09:02,14/Jul/23 05:50,26/Jun/17 09:02,2.19.1,,,,,2.19.2,2.20.0,,,camel-box,,,,0,,,"Some dependencies from mvn:com.box/box-java-sdk are missing in the camel-box feature. This happens when using the default authentication type (APP_USER_AUTHENTICATION). Below are some stack traces. I cam provide a PR:

{code}
Caused by: java.lang.NoClassDefFoundError: org/bouncycastle/openssl/PEMParser
	at com.box.sdk.BoxDeveloperEditionAPIConnection.decryptPrivateKey(BoxDeveloperEditionAPIConnection.java:366) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.constructJWTAssertion(BoxDeveloperEditionAPIConnection.java:327) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.authenticate(BoxDeveloperEditionAPIConnection.java:237) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.tryRestoreUsingAccessTokenCache(BoxDeveloperEditionAPIConnection.java:305) ~[?:?]
	at com.box.sdk.BoxDeveloperEditionAPIConnection.getAppUserConnection(BoxDeveloperEditionAPIConnection.java:212) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createAppUserAuthenticatedConnection(BoxConnectionHelper.java:238) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:89) ~[?:?]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3561) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3295) ~[?:?]
{code}

{code}
Caused by: java.lang.NoClassDefFoundError: org/jose4j/lang/JoseException
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createAppUserAuthenticatedConnection(BoxConnectionHelper.java:238) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:89) ~[?:?]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) ~[?:?]
{code}

{code}
Caused by: java.lang.ClassNotFoundException: com.eclipsesource.json.JsonObject not found by wrap_file__home_jpoth_.m2_repository_com_box_box-java-sdk_2.1.1_box-java-sdk-2.1.1.jar [413]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1550) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:79) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1958) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:?]
	at com.box.sdk.BoxAPIConnection.authenticate(BoxAPIConnection.java:149) ~[?:?]
	at com.box.sdk.BoxAPIConnection.<init>(BoxAPIConnection.java:98) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:202) ~[?:?]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:91) ~[?:?]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3561) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3295) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:203) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3106) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3102) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3125) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3102) ~[?:?]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3040) ~[?:?]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:244) ~[?:?]
{code}",Karaf 4.1.1 (latest at time of writing),githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 26 08:58:01 UTC 2017,,,,,,,,,,,"0|i3gq0f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jun/17 08:55;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1784

    CAMEL-11453 fix camel-box feature

    https://issues.apache.org/jira/browse/CAMEL-11453
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11453

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1784.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1784
    
----
commit b612a50bcb3afa15da3b2b3da212fb038b0dbb7b
Author: jpoth <poth.john@gmail.com>
Date:   2017-06-26T08:54:37Z

    CAMEL-11453 fix camel-box feature

----
;;;","26/Jun/17 08:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1784
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Main - setPropertyPlaceholderLocations should be public,CAMEL-11441,13082131,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/17 13:58,23/Jun/17 14:02,14/Jul/23 05:50,23/Jun/17 14:02,2.19.1,,,,,2.18.5,2.19.2,2.20.0,,camel-core,,,,0,,,"See
http://camel.465427.n5.nabble.com/setPropertyPlaceholderLocations-for-apache-camel-main-tp5805013.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-23 13:58:24.0,,,,,,,,,,,"0|i3go1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some attributes in spring camel xml can't be replaced by property placeholder when used in spring boot,CAMEL-11440,13082108,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,valdar,valdar,23/Jun/17 12:32,28/Jun/17 14:34,14/Jul/23 05:50,28/Jun/17 14:16,2.18.1,,,,,2.19.1,,,,camel-spring,camel-spring-boot,,,0,,,"Everything initialized in {{*org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext()*}} using a spring camel xml with spring boot, can not contain a property otherwise this is the exception thrown:

{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is java.lang.IllegalStateException: org.springframework.context.annotation.AnnotationConfigApplicationContext@1b99b9f8 has not been refreshed yet
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
        at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:228)
        at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:185)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336)
        at org.springframework.boot.context.event.EventPublishingRunListener.finished(EventPublishingRunListener.java:93)
        at org.springframework.boot.SpringApplicationRunListeners.callFinishedListener(SpringApplicationRunListeners.java:79)
        at org.springframework.boot.SpringApplicationRunListeners.finished(SpringApplicationRunListeners.java:72)
        at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:813)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:326)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175)
        at com.mycompany.Application.main(Application.java:34)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: org.springframework.context.annotation.AnnotationConfigApplicationContext@1b99b9f8 has not been refreshed yet
        at org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive(AbstractApplicationContext.java:1063)
        at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:1177)
        at org.apache.camel.spring.CamelContextFactoryBean.getBeanForType(CamelContextFactoryBean.java:220)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:159)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:275)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
        ... 25 common frames omitted
14:12:57.942 [main] DEBUG o.s.b.d.LoggingFailureAnalysisReporter - Application failed to start due to an exception
org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1466)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1097)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1059)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1022)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
        at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
        at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
        at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:575)
        at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2343)
        at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:354)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:769)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:322)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:275)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
        at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:66)
        at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
        at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:131)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:735)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175)
        at com.mycompany.Application.main(Application.java:34)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
        at java.lang.Thread.run(Thread.java:748)
14:12:57.943 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of method properties in org.apache.camel.spring.boot.CamelAutoConfiguration required a bean of type 'org.apache.camel.CamelContext' that could not be found.
        - Bean method 'camelContext' in 'CamelAutoConfiguration' not loaded because @ConditionalOnMissingBean (types: org.apache.camel.CamelContext; SearchStrategy: all) found bean 'camelMain'


Action:

Consider revisiting the conditions above or defining a bean of type 'org.apache.camel.CamelContext' in your configuration.

[WARNING] 
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:735)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175)
        at com.mycompany.Application.main(Application.java:34)
        ... 6 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
        at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:66)
        at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
        at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:131)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
        ... 20 more
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1763)
        at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
        at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:575)
        at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2343)
        at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:354)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:769)
        at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:322)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:275)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
        ... 33 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1022)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
        at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
        at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
        ... 41 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.apache.camel.CamelContext' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1466)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1097)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1059)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
        ... 53 more
{code}

basically spring while instantiating CamelContext for whatever is in initCamelContext() and need a property resolution will try to find a bean named ""properties"" and not finding it will try to instantiate it from *{{org.apache.camel.spring.boot.CamelAutoConfiguration.properties(CamelContext camelContext, PropertiesParser parser)}}* failing with the mentioned exception.

If an explicit property placeholder is defined like:
{code:xml}
<propertyPlaceholder id=""properties"" location=""application.properties""/>
{code}
then all works fine.

There is a simple reproducer attached.",,davsclaus,lb,valdar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jun/17 12:34;valdar;reproducer.zip;https://issues.apache.org/jira/secure/attachment/12874254/reproducer.zip","27/Jun/17 10:50;valdar;reproducer2.zip;https://issues.apache.org/jira/secure/attachment/12874665/reproducer2.zip",,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 28 14:34:03 UTC 2017,,,,,,,,,,,"0|i3gnwf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jun/17 12:34;valdar;Reproducer attached.;;;","23/Jun/17 12:36;valdar;[~lb] what are your thoughts about this?;;;","27/Jun/17 08:51;davsclaus;Hi

It works with Camel 2.19.1 etc.

Remember to set run controller to true if you want the JVM to keep running
camel.springboot.main-run-controller=true;;;","27/Jun/17 10:50;valdar;Hi Claus,

running the reproducer bumping camel version to 2.19.1 seems to solve the issue;
but if I add a {{<restConfiguration>}} component (which was part of my original issue, but  I stripped down the reproducer to the bear minimum), it seems there is another problem:

{code:java}
12:24:55.542 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Invoking afterPropertiesSet() on bean with name 'camelMain'
12:24:55.551 [main] ERROR o.s.boot.SpringApplication - Error handling failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is java.lang.IllegalStateException: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bd655b8 has not been refreshed yet
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:228)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:185)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336)
	at org.springframework.boot.context.event.EventPublishingRunListener.finished(EventPublishingRunListener.java:100)
	at org.springframework.boot.SpringApplicationRunListeners.callFinishedListener(SpringApplicationRunListeners.java:79)
	at org.springframework.boot.SpringApplicationRunListeners.finished(SpringApplicationRunListeners.java:72)
	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:325)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bd655b8 has not been refreshed yet
	at org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive(AbstractApplicationContext.java:1063)
	at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:1177)
	at org.apache.camel.spring.CamelContextFactoryBean.getBeanForType(CamelContextFactoryBean.java:234)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:166)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
	... 25 common frames omitted
12:24:55.586 [main] DEBUG o.s.b.diagnostics.FailureAnalyzers - FailureAnalyzer org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer@4e1e0f66 failed
java.lang.NoSuchMethodError: org.springframework.beans.factory.NoSuchBeanDefinitionException.getResolvableType()Lorg/springframework/core/ResolvableType;
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer$BeanMethods.isMatch(NoSuchBeanDefinitionFailureAnalyzer.java:220)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer$BeanMethods.findBeanMethods(NoSuchBeanDefinitionFailureAnalyzer.java:202)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer$BeanMethods.<init>(NoSuchBeanDefinitionFailureAnalyzer.java:190)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.collectReportedConditionOutcomes(NoSuchBeanDefinitionFailureAnalyzer.java:132)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.getAutoConfigurationResults(NoSuchBeanDefinitionFailureAnalyzer.java:120)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.analyze(NoSuchBeanDefinitionFailureAnalyzer.java:79)
	at org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer.analyze(NoSuchBeanDefinitionFailureAnalyzer.java:53)
	at org.springframework.boot.diagnostics.analyzer.AbstractInjectionFailureAnalyzer.analyze(AbstractInjectionFailureAnalyzer.java:41)
	at org.springframework.boot.diagnostics.AbstractFailureAnalyzer.analyze(AbstractFailureAnalyzer.java:36)
	at org.springframework.boot.diagnostics.FailureAnalyzers.analyze(FailureAnalyzers.java:119)
	at org.springframework.boot.diagnostics.FailureAnalyzers.analyzeAndReport(FailureAnalyzers.java:112)
	at org.springframework.boot.SpringApplication.reportFailure(SpringApplication.java:806)
	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:792)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:325)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
12:24:55.590 [main] ERROR o.s.boot.SpringApplication - Application startup failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:732)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:71)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:153)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	... 21 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:651)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2406)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:430)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:819)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:336)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
	... 34 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1023)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
	... 42 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1463)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1094)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
	... 54 common frames omitted
[WARNING] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:732)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)
	at com.mycompany.Application.main(Application.java:35)
	... 6 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelMain': Invocation of init method failed; nested exception is org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1082)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:71)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:87)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:153)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	... 21 more
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:52)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:651)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2406)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:430)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:819)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:336)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579)
	... 34 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through method 'properties' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1023)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByName(ApplicationContextRegistry.java:71)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByName(PropertyPlaceholderDelegateRegistry.java:50)
	... 42 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean found for dependency [org.apache.camel.CamelContext]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1463)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1094)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)
	... 54 more

{code}

I've added a second version of the reproducer.;;;","28/Jun/17 14:16;davsclaus;Make sure to upgrade spring boot to 1.5.x as that is required by Camel 2.19.x;;;","28/Jun/17 14:33;valdar;Hi Claus, tnx for help here; 
I can confirm the issue is fixed using spring boot 1.5.1 + camel 2.19.1 .
;;;","28/Jun/17 14:34;valdar;I can confirm the issue is fixed using spring boot 1.5.1 + camel 2.19.1 .;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Bug using file endpoint probeContentType and preMove attributes together causes Exchange.FILE_CONTENT_TYPE to get dropped. (2.19.0) ,CAMEL-11437,13081997,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,dr_hoffman,dr_hoffman,23/Jun/17 04:48,27/Jun/17 06:09,14/Jul/23 05:50,24/Jun/17 21:04,2.19.0,,,,,2.19.2,2.20.0,,,camel-core,,,,0,,,"We have a route:

{quote}
from(""file:inbox?probeContentType=true&preMove=inprogress/$\{file:name}&renameUsingCopy=true"")
        .transacted()
        .bean(MimeTypeParser.class, ""populateFileTypeHeaderFields"")
        .to(""seda:somewhere"")
{quote} 
     
The probeContentType executes before preMove & renameUsingCopy and correctly sets the Exchange.FILE_CONTENT_TYPE header.

The problem happens during the preMove & renameUsingCopy part where GenericFileExpressionRenamer calls the GenericFile method GenericFile<T> copyFrom(GenericFile<T> source).

This ""copy constructor"" method does not copy the header Exchange.FILE_CONTENT_TYPE, nor does it preserve the value of the GenericFile probeContentType field.

The class GenericFileRenameProcessStrategy calls GenericFileExpressionRenamer from the method begin() which in turn calls GenericFile.bindToExchange(Exchange exchange).

GenericFile.bindToExchange() clears all ""CamelFile*"" headers and then calls GenericFile.populateHeaders(GenericFileMessage<T> message) which would call Files.probeContentType(Path path) if the GenericFile probeContentType field weren't now false.

When our route gets to the MimeTypeParser bean the ""CamelFileContentType"" header is lost, and that is what we are looking for.

One work-around is to put something like this between .transacted() and the .bean():
{quote}
.process(exchange ->  \{
     Path path = exchange.getIn().getBody(File.class).toPath();
     exchange.getIn().setHeader(Exchange.FILE_CONTENT_TYPE, Files.probeContentType(path));
})
{quote}",,davsclaus,dr_hoffman,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,http://camel.465427.n5.nabble.com/Bug-using-File-endpoint-probeContentType-and-preMove-attributes-together-causes-Exchange-FILE-CONTEN-td5805088.html,,,,,,,,,,,9223372036854775807,,,Tue Jun 27 06:09:27 UTC 2017,,,,,,,,,,,"0|i3gn7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jun/17 09:26;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1781

    CAMEL-11437 - probeContentType and preMove attributes causes Exchange…

    ….FILE_CONTENT_TYPE to get dropped
    
    This is a very specific fix for the issue.
    
    Better solution would be passing endpoint where bindToExchange method call done on GenericFile. I guess the design may need such a change on GenericFile. because in populateHeaders method there are specific conditions tied to FileEndpoint properties which are not set when concrete instances of GenericFileProcessStrategy are created without the settings bound to endpoint like GenericFileRenameProcessStrategy, GenericDeleteProcessStrategy etc. (where probeContentType is lost)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11437

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1781.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1781
    
----
commit 351c6d01585b25967e5a0100a87de4b6d20a5a2e
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-06-23T09:17:22Z

    CAMEL-11437 - probeContentType and preMove attributes causes Exchange.FILE_CONTENT_TYPE to get dropped

----
;;;","24/Jun/17 20:53;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1781
;;;","25/Jun/17 14:28;davsclaus;Onder can you cherry-pick this fix to the 2.19.x branch so the fix is also there. ;;;","25/Jun/17 16:40;onders;[~davsclaus] i think i am at first messed up with cherry pick and then corrected. sorry for commits noise :/;;;","26/Jun/17 21:50;dr_hoffman;[~onders]; [~davsclaus] - It seems to me that while this will fix the issue it will also cause probeContentType to get called multiple times.  It would appear from the new code that it would get called anytime GenericFileRenameProcessStrategy.begin() gets called, but also anytime GenericFile.bindToExchange(Exchange exchange) gets called and GenericFile.probeConentType == true.  If the route attributes have &probeContentType, &preMove and &move with this solution wouldn't probeContentType get called three times per file on the FileEndpoint.  Probing a file's content time could be fairly costly from a computational point of view, so I'd think you wouldn't want to do it more than absolutely necessarily - imho.;;;","27/Jun/17 06:09;onders;well yes that s for sure that unnecessary multiple probing for the file content is not what we would want, imho, too. however, what you secondly describe is another issue and requires a bit more investigation,imho. initially and what you reported was correct because probeXontentType is not passed right to renameprocess strategy. and that s what we fixed. feel free to lg another jira. we can look into it;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to use camel-box in OSGI environment ,CAMEL-11433,13081357,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jpoth,jpoth,21/Jun/17 08:51,21/Jun/17 10:43,14/Jul/23 05:50,21/Jun/17 10:28,2.19.0,,,,,2.19.2,2.20.0,,,camel-box,,,,0,,,"Using Karaf 4.1.1:

{code}
 Unresolved requirements: osgi.wiring.package; (osgi.wiring.package=org.apache.camel.component.box)]
	at org.apache.karaf.shell.support.MultiException.throwIf(MultiException.java:61) ~[143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.karaf.bundle.command.Install.execute(Install.java:131) [23:org.apache.karaf.bundle.core:4.1.1]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [143:org.apache.karaf.shell.core:4.1.1]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:560) [143:org.apache.karaf.shell.core:4.1.1]
{code}",,davsclaus,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 21 10:43:42 UTC 2017,,,,,,,,,,,"0|i3gja7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jun/17 08:54;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1777

    CAMEL-11433 Add OSGI export package and service headers to camel-box

    https://issues.apache.org/jira/browse/CAMEL-11433
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11433

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1777.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1777
    
----
commit c0cca9bf83a2fc271409e5c0d323656d367534e9
Author: jpoth <poth.john@gmail.com>
Date:   2017-06-21T08:53:20Z

    CAMEL-11433 Add OSGI export package and service headers to camel-box

----
;;;","21/Jun/17 10:28;davsclaus;Thanks for the PR;;;","21/Jun/17 10:43;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1777
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-box is not assigning default configuration values,CAMEL-11429,13081041,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jpoth,jpoth,20/Jun/17 08:22,20/Jun/17 08:36,14/Jul/23 05:50,20/Jun/17 08:32,2.19.0,,,,,2.19.2,2.20.0,,,camel-box,,,,0,,,"camel-box is not assigning default configuration values:

{code}
org.apache.camel.RuntimeCamelException: Box API connection failed: Authentication type not specified in configuration
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:82) [259:org.apache.camel.camel-box:2.20.0.SNAPSHOT]
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85) [259:org.apache.camel.camel-box:2.20.0.SNAPSHOT]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3555) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3561) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3295) [69:org.apache.camel.camel-core:2.20.0.SNAPSHOT]
{code}",,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 20 08:36:03 UTC 2017,,,,,,,,,,,"0|i3ghbz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jun/17 08:24;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1774

    CAMEL-11429 Assign default values to BoxConfiguration

    https://issues.apache.org/jira/browse/CAMEL-11429
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11429

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1774.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1774
    
----
commit 4a07a665941db5949c5d3999a9021343ff53901d
Author: jpoth <poth.john@gmail.com>
Date:   2017-06-20T08:23:42Z

    CAMEL-11429 Assign default values to BoxConfiguration

----
;;;","20/Jun/17 08:36;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1774
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-leveldb does not work on Solaris -- no native code library and no Java fallback,CAMEL-11427,13081028,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,20/Jun/17 07:23,02/Aug/17 10:45,14/Jul/23 05:50,20/Jun/17 07:53,2.17.7,2.18.4,2.19.0,,,2.18.5,2.19.2,2.20.0,,camel-leveldb,,,,0,,,,,acosentino,davsclaus,ggrzybek,kartasevm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11623,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 02 10:45:43 UTC 2017,,,,,,,,,,,"0|i3gh93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jun/17 07:52;ggrzybek;Fixed [here|https://github.com/apache/camel/commit/75498ab1ef70bb3694b84647f2e9d23d43268f9b] in master
Fixed [here|https://github.com/apache/camel/commit/5e679431094627981d8df55beb54b9f8998e0d1e] in camel-2.19.x
Fixed [here|https://github.com/apache/camel/commit/2ba4c00ca93a81930e8354f97379fac91f99ba39] in camel-2.18.x;;;","27/Jun/17 06:12;ggrzybek;Improved logging [here|https://github.com/apache/camel/commit/2feec9d29308272dfe9f6c31331763f51ac0b892] in master
Improved logging [here|https://github.com/apache/camel/commit/fc3647c210bceb9ca51e750cc7ccee06136b9c94] in camel-2.19.x
Improved logging [here|https://github.com/apache/camel/commit/c25149322dd8db1a7d8c1f333ac4a7c80a1868ce] in camel-2.18.x;;;","02/Aug/17 10:39;kartasevm;I would like to note that this issue is marked as 2.19.1. But It is not a part of 2.19.1. It was released in 2.19.2, but as I suspect it was incorrectly versioned here, it was not a part of 2.19.2 documentation. Should this be updated?;;;","02/Aug/17 10:44;davsclaus;Yeah moved it to 2.19.2;;;","02/Aug/17 10:45;acosentino;Yeah,

{code}
> git tag --contains=""5e679431094627981d8df55beb54b9f8998e0d1e""
camel-2.19.2
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endless wait when unhandled exception occurs in camel-olingo,CAMEL-11424,13080798,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sarhaynes,sarhaynes,19/Jun/17 11:48,11/Jul/17 15:36,14/Jul/23 05:50,10/Jul/17 20:12,2.17.7,2.19.0,,,,2.18.5,2.19.2,2.20.0,,camel-olingo2,camel-olingo4,,,0,,,In Olingo2AppImpl.readContent()/writeContent() if a RuntimeError or any other unhandled exception/error occurs the wait for response will never get triggered and the component ends up in an endless wait state.  These functions should be modified to capture any type of throwable/exception/error.,,davsclaus,dmvolod,githubbot,sarhaynes,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,,"10/Jul/17 17:06;sarhaynes;camel-11424-olingo2.patch;https://issues.apache.org/jira/secure/attachment/12876447/camel-11424-olingo2.patch","10/Jul/17 17:06;sarhaynes;camel-11424-olingo4.patch;https://issues.apache.org/jira/secure/attachment/12876446/camel-11424-olingo4.patch",,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Jul 11 15:36:56 UTC 2017,,,,,,,Patch Available,,,,"0|i3gftz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jun/17 20:42;davsclaus;Are you able to work on a patch?;;;","23/Jun/17 00:01;sarhaynes;I'm working on it.  Hopefully next week.
Sean


-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
;;;","10/Jul/17 15:09;sarhaynes;I have attached a patch showing my recommended solution.  This will make sure the async waits are notified if any type of error occurs during runtime and avoid infinite waits.;;;","10/Jul/17 16:21;dmvolod;[~sarhaynes], please pay attention, that camel-olingo4 looks like has the same problem and need to by fixed also.;;;","10/Jul/17 16:25;sarhaynes;I have written and attached patch files in JIRA for 11424 and 11423.  The
patch for 11425 will be a little more complex.  Please inspect the changes
and apply them if you feel they are worthy of inclusion.  I did not look at
the Olingo4 component to see if similar issues exist in that branch.
Sean


-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
;;;","10/Jul/17 16:30;dmvolod;Sean,

it would be nice to use GitHub pull request (PR) rather than patch.
Please submit them each one per issue.
Thank you.;;;","10/Jul/17 17:06;sarhaynes;Updated patches for Olingo2 and Olingo4;;;","10/Jul/17 17:19;sarhaynes;Unfortunately I have not as yet had time to submit the paperwork for direct submitting to Apache, so I am limited to attaching patches.  If someone wants to take the patch and create the pull request, I have no problem with that.  I will submit the apache paperwork when I return to the office tomorrow.;;;","10/Jul/17 17:46;davsclaus;You do not need to fill any paperwork for submitting github PRs. Just do it the standard github way.;;;","10/Jul/17 19:22;sarhaynes;How am able to create a pull request if I am unable to push to the repo??
You have me completely lost now.  According to the contributing
instructions I have fill out and send in the Apache agreement paperwork
before I'm given access to write to the repo.  I can't push my changes to
the repo if I don't have access and I can't create a PR unless I push my
changes.
Am I missing something?
Sean


-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
;;;","10/Jul/17 19:42;dmvolod;Sean, please perform following steps for creating PR
1. fork an Apache Camel repo on GitHub
2. on your OS host perform
git clone https://github.com/<github username>/camel.git
git remote add origin https://github.com/<github username>/camel.git
git remote add upstream https://github.com/apache/camel.git
3. Fill your user name and email
git config --global user.name ""John Doe""
git config --global user.email johndoe@example.com
4. git checkout -b CAMEL-11424
5. Change the code
6. git push origin CAMEL-11424
7. Create PR on GitHub from submitted branch;;;","10/Jul/17 19:59;githubbot;GitHub user sarhaynes opened a pull request:

    https://github.com/apache/camel/pull/1814

    CAMEL-11424 Fix potential endless wait in camel-olingo2 and camel-olingo4

    This fixes and issue where unhandled exceptions and runtime errors would cause responseHandler to never be triggered causing the routes to hang forever.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarhaynes/camel CAMEL-11424

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1814.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1814
    
----
commit e62376640c1c1efce6fd708a8e12ea2b41afd908
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-10T19:07:45Z

    CAMEL-11424 Fix potential endless wait in camel-olingo2 and
    camel-olingo4

----
;;;","10/Jul/17 20:06;sarhaynes;Thank you.  This is very helpful.

On Mon, Jul 10, 2017 at 3:58 PM Dmitry Volodin (JIRA) <jira@apache.org>

-- 

--
Sean A. R. Haynes, CISSP, PSEM
IEEE Region 3 Conference Committee Chair
IEEE Region 3 Sections Congress Coordinator
2407 Hillwood Place
Charlottesville, VA 22901
s.a.haynes@ieee.org
+1 (434) 933-2611
;;;","10/Jul/17 20:12;davsclaus;Thanks for the PR;;;","11/Jul/17 15:36;githubbot;Github user sarhaynes closed the pull request at:

    https://github.com/apache/camel/pull/1814
;;;",,,,,,,,,,,,,,,,,,
Accept header is not compliant with IETF RFC-7231,CAMEL-11423,13080796,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sarhaynes,sarhaynes,19/Jun/17 11:45,27/Jul/17 07:53,14/Jul/23 05:50,11/Jul/17 18:53,2.17.7,2.19.0,,,,2.18.5,2.19.2,2.20.0,,camel-olingo2,camel-olingo4,,,0,,,"When the ""Accept"" http header is sent to remote system it can contain a ""charset=<charset>"" statement.  According to RFC 7231 this should be in an ""accept-charset"" header.  See https://tools.ietf.org/html/rfc7231#section-5.3.2  https://tools.ietf.org/html/rfc7231#section-5.3.3
This format is acceptable in a ""content-type"" response header.",,davsclaus,githubbot,sarhaynes,,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,CAMEL-11527,CAMEL-11605,,,,,,,,"10/Jul/17 16:08;sarhaynes;camel-11423.patch;https://issues.apache.org/jira/secure/attachment/12876440/camel-11423.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Jul 11 18:53:17 UTC 2017,,,,,,,Patch Available,,,,"0|i3gftj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jul/17 16:08;sarhaynes;Patch to fix issue in camel 2.19.x is attached.;;;","11/Jul/17 13:16;githubbot;GitHub user sarhaynes opened a pull request:

    https://github.com/apache/camel/pull/1816

    CAMEL-11423 Make camel-olingo2/4 ACCEPT headers RFC-7231 compliant.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarhaynes/camel CAMEL-11423

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1816.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1816
    
----
commit 2998deee8f32d035b4dbdc1b3c9dae15b982464d
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T13:13:43Z

    CAMEL-11423 Make camel-olingo2/4 ACCEPT headers RFC-7231 compliant.

----
;;;","11/Jul/17 15:04;davsclaus;Thanks for the PR;;;","11/Jul/17 15:31;sarhaynes;Minor copy and paste error upon further review.  Corrected version will be checked in.;;;","11/Jul/17 18:11;githubbot;Github user sarhaynes closed the pull request at:

    https://github.com/apache/camel/pull/1816
;;;","11/Jul/17 18:13;githubbot;GitHub user sarhaynes opened a pull request:

    https://github.com/apache/camel/pull/1819

    CAMEL-11423 Make camel-olingo2 ACCEPT header IETF compliant

    Fixes a minor copy/paste issue missed in initial pull request.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sarhaynes/camel CAMEL-11423

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1819.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1819
    
----
commit 2998deee8f32d035b4dbdc1b3c9dae15b982464d
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T13:13:43Z

    CAMEL-11423 Make camel-olingo2/4 ACCEPT headers RFC-7231 compliant.

commit df6d6e3ac66bde965ddf28ed81c9aeb5833181e1
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T15:55:00Z

    Merge branch 'CAMEL-11423' of https://github.com/sarhaynes/camel.git into CAMEL-11423

commit f2c8348a8fbc7fcd7a57dad1bbf787b5869eb459
Author: Sean Haynes <s.a.haynes@ieee.org>
Date:   2017-07-11T16:08:02Z

    CAMEL-11423 Fix minor copy/paste issue.

----
;;;","11/Jul/17 18:53;githubbot;Github user sarhaynes closed the pull request at:

    https://github.com/apache/camel/pull/1819
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
route-reset-stats completion issue,CAMEL-11417,13080313,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,saravanakumar,saravanakumar,16/Jun/17 05:42,16/Jun/17 08:01,14/Jul/23 05:50,16/Jun/17 08:01,2.18.4,,,,,2.18.5,,,,karaf,,,,0,,,"It seem to be a small issue in tab completion of Karaf command *route-reset-stats*.
The allowed argument for this command is context but currently it auto completes the routes.",,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 16 08:00:02 UTC 2017,,,,,,,,,,,"0|i3gcun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jun/17 05:48;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1768

    CAMEL-11417: Fixed tab completion for route-reset-stats command

    https://issues.apache.org/jira/browse/CAMEL-11417
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1768.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1768
    
----
commit 4b8fb04d8dbcd7829013ed6b6f6e3e6d8ec9df74
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-06-16T05:41:43Z

    CAMEL-11417 : Fixed tab completion for route-reset-stats command

----
;;;","16/Jun/17 06:02;githubbot;Github user saravanakumar1987 closed the pull request at:

    https://github.com/apache/camel/pull/1768
;;;","16/Jun/17 06:30;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/1769

    CAMEL-11417: Fixed tab completion for route-reset-stats command

    https://issues.apache.org/jira/browse/CAMEL-11417
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1769.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1769
    
----
commit 653c8262fbefe366ea0ef34f437712a1ac21eb2d
Author: Saravanakumar Selvaraj <saravanakumar.java@gmail.com>
Date:   2017-06-16T06:28:22Z

    CAMEL-11417: Fixed tab completion for route-reset-stats command

----
;;;","16/Jun/17 08:00;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1769
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo - Potential NPE in getting content-type header,CAMEL-11413,13080037,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Jun/17 09:44,15/Jun/17 11:16,14/Jul/23 05:50,15/Jun/17 11:16,2.19.0,,,,,2.19.2,2.20.0,,,camel-olingo2,camel-olingo4,,,0,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-camel-olingo2-api-tp5801396.html",,davsclaus,sarhaynes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-15 09:44:18.0,,,,,,,,,,,"0|i3gb5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-opentracing loggingtracer needs to build before client,CAMEL-11407,13079640,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,tcunning,tcunning,14/Jun/17 04:08,15/Jun/17 13:31,14/Jul/23 05:50,14/Jun/17 07:44,2.20.0,,,,,2.20.0,,,,camel-opentracing,,,,0,,,[ERROR] Failed to execute goal on project camel-example-opentracing-client: Could not resolve dependencies for project org.apache.camel.example:camel-example-opentracing-client:jar:2.20.0.fuse-000038: Could not find artifact org.apache.camel:camel-example-opentracing-loggingtracer:jar:2.20.0.fuse-000038 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/) -> [Help 1],,githubbot,tcunning,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 15 13:31:55 UTC 2017,,,,,,,,,,,"0|i3g8pb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jun/17 04:13;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1757

    CAMEL-11407 camel-opentracing loggingtracer needs to build before client

    https://issues.apache.org/jira/browse/CAMEL-11407

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-11407

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1757.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1757
    
----
commit a68e868902af860059591d4fc43476863ce39a91
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-06-14T04:11:58Z

    CAMEL-11407 camel-opentracing loggingtracer needs to build before client

----
;;;","14/Jun/17 04:14;tcunning;PR : https://github.com/apache/camel/pull/1757;;;","14/Jun/17 07:44;zregvart;Merged to {{master}} from [PR#1757|https://github.com/apache/camel/pull/1757].;;;","15/Jun/17 13:31;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1757
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logic error in authentication type determination,CAMEL-11402,13079443,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,13/Jun/17 10:32,13/Jun/17 10:38,14/Jul/23 05:50,13/Jun/17 10:38,2.19.0,2.20.0,,,,2.20.0,,,,camel-salesforce,,,,0,,,With CAMEL-10938 a logic error has been introduced that prevents JWT authentication type from being detected -- it mandates either {{authenticationType}} to be set explicitly to {{JWT}} or {{refreshToken}} to be set (not needed for JWT).,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-13 10:32:34.0,,,,,,,,,,,"0|i3g7hj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Undertow endpoint option REUSE_ADDRESS is configured using the value for TCP_NO_DELAY,CAMEL-11394,13078838,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bhkho,bhkho,10/Jun/17 06:48,10/Jun/17 07:12,14/Jul/23 05:50,10/Jun/17 07:12,2.18.4,,,,,2.18.5,2.19.1,2.20.0,,camel-undertow,,,,0,,,"The undertow endpoint configuration for the REUSE_ADDRESS option is set using the option value for TCP_NO_DELAY instead of the value for REUSE_ADDRESS.



",,bhkho,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Sat Jun 10 07:12:55 UTC 2017,,,,,,,Patch Available,,,,"0|i3g4lz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jun/17 06:53;githubbot;GitHub user abracadabrasimsalabimhocuspocus opened a pull request:

    https://github.com/apache/camel/pull/1750

    CAMEL-11394: REUSE_ADDRESSES options is set using the value for TCP_NO_DELAY intea…

    The undertow endpoint configuration for the REUSE_ADDRESS option is set using the option value for TCP_NO_DELAY instead of the value for REUSE_ADDRESS.
    
    This makes it impossible to configure it separately from value for the tcpNoDelay.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/abracadabrasimsalabimhocuspocus/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1750.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1750
    
----
commit 30428dd7837f4adaacad3114a0bc08730a28113d
Author: Bhun Kho <bhun.kho@ictu.nl>
Date:   2017-06-10T06:42:51Z

    REUSE_ADDRESSES options is set using the value for TCP_NO_DELAY intead of REUSE_ADDRESSES

----
;;;","10/Jun/17 07:12;davsclaus;Thanks for the PR;;;","10/Jun/17 07:12;githubbot;Github user abracadabrasimsalabimhocuspocus closed the pull request at:

    https://github.com/apache/camel/pull/1750
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
String to ByteBuffer conversion causes overflow due to multibyte chars,CAMEL-11392,13078662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bhkho,bhkho,09/Jun/17 16:29,09/Jun/17 17:13,14/Jul/23 05:50,09/Jun/17 17:13,2.18.4,,,,,2.18.5,2.19.1,2.20.0,,camel-undertow,,,,0,,,The NIOConverter uses String.length() to allocate a ByteBuffer which may not match the actual encoded byte length if the String contains multibyte chars.,,bhkho,davsclaus,githubbot,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Important,Patch,,,,,,,,9223372036854775807,,,Fri Jun 09 17:13:42 UTC 2017,,,,,,,Patch Available,,,,"0|i3g3iv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/17 16:30;githubbot;GitHub user abracadabrasimsalabimhocuspocus opened a pull request:

    https://github.com/apache/camel/pull/1748

    CAMEL-11392: String to ByteBuffer conversion causes overflow due to multibyte chars

    The NIOConverter uses String.length() to allocate a ByteBuffer which may not match the actual encoded byte length if the String contains multibyte chars.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/abracadabrasimsalabimhocuspocus/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1748.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1748
    
----
commit 36f7de9fa42cbbb14d7aa490251c39e9902cc19d
Author: Bhun Kho <bhun.kho@ictu.nl>
Date:   2017-06-09T16:22:45Z

    Actual number of bytes can be greater than the string length due to multibyte chars

----
;;;","09/Jun/17 17:13;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1748
;;;","09/Jun/17 17:13;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel maven plugin (2.19.0) downloading catalog when configuration disabled it,CAMEL-11390,13078530,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mcmoulis,mcmoulis,09/Jun/17 07:54,09/Jun/17 09:01,14/Jul/23 05:50,09/Jun/17 08:07,,,,,,2.19.1,2.20.0,,,tooling,,,,1,camel-maven-plugin,,"While using below setup still camel catalog attempted to download:

<plugin>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-maven-plugin</artifactId>
	<version>2.19.0</version>
	<executions>
		<execution>
			<phase>process-classes</phase>
			<goals>
				<goal>validate</goal>
			</goals>
			<configuration>
				<downloadVersion>false</downloadVersion>
				<download>false</download>
				<showAll>true</showAll>
				<logUnparseable>true</logUnparseable>
				<failOnError>true</failOnError>
			</configuration>
		</execution>
	</executions>
</plugin>

Log:
10:51:37 [WARNING] Cannot load version 2.19.0 due Error grabbing Grapes -- [unresolved dependency: org.apache.camel#camel-catalog;2.19.0: not found]
10:51:37 [INFO] Using Camel version: 2.19.0",,davidkarlsen,davsclaus,mcmoulis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 09 09:01:35 UTC 2017,,,,,,,,,,,"0|i3g2pj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/17 08:07;davsclaus;Thanks for reporting;;;","09/Jun/17 09:01;mcmoulis;Thanks for quick resolution.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-infinispan - InfinispanRoutePolicy issue with locking from remote server,CAMEL-11388,13078515,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,davsclaus,davsclaus,09/Jun/17 06:10,22/Jun/17 20:39,14/Jul/23 05:50,22/Jun/17 17:09,2.19.0,,,,,2.19.2,2.20.0,,,camel-infinispan,,,,0,,,"It seems there is a problem that the route policy seems to grant locks to both or keep changing between them, so we have competing consumers being active at the same time.

The issue can be reproduced by following the readme file from
https://github.com/camelinaction/camelinaction2/tree/master/chapter17/cluster-file-infinispan

You can see errors like
{code}
Caused by: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /Users/davsclaus/workspace/camelinaction2/chapter17/cluster-file-infinispan/target/inbox/WebSpherePackageScanClassResolver.java (No such file or directory)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1756)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1355)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:60)
	at org.apache.camel.component.file.GenericFileConverter.convertTo(GenericFileConverter.java:97)
	at sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1351)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:62)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:346)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)
	... 41 more
Caused by: java.io.FileNotFoundException: /Users/davsclaus/workspace/camelinaction2/chapter17/cluster-file-infinispan/target/inbox/WebSpherePackageScanClassResolver.java (No such file or directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at org.apache.camel.converter.IOConverter.toInputStream(IOConverter.java:78)
	at org.apache.camel.converter.IOConverter.toByteArray(IOConverter.java:266)
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1351)
	... 50 more
2017-06-09 08:04:41,396 [://target/inbox] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategy@160cecbb for file: GenericFile[WebSpherePackageScanClassResolver.java]
2017-06-09 08:04:42,126 [spanRoutePolicy] INFO  InfinispanRoutePolicy          - Leadership lost (map=myLock, key=myLockKey val=myLockValue)
2017-06-09 08:04:42,127 [spanRoutePolicy] INFO  InfinispanRoutePolicy          - Leadership taken (map=myLock, key=myLockKey, val=myLockValue)
2017-06-09 08:05:07,710 [29c8fac7da04e40] INFO  InfinispanRoutePolicy          - Leadership lost (map=myLock, key=myLockKey val=myLockValue)
2017-06-09 08:05:07,715 [29c8fac7da04e40] INFO  InfinispanRoutePolicy          - Leadership taken (map=myLock, key=myLockKey, val=myLockValue)
{code}

Where as the hazelcast example which is similar works fine.",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 22 20:39:15 UTC 2017,,,,,,,,,,,"0|i3g2m7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/17 06:10;davsclaus;Luca, I wonder if you mind taking a look and see what could be the problem?;;;","09/Jun/17 06:12;davsclaus;Also I wonder if we can make this easier to configure from client point of view for remote. Maybe if you can have a hotrod-client.properties file which you can then easily specify and load automatic, so you dont have to add that bunch of java code to setup a remote infinispan connection.

See for example how the JCache example does it (yeah I know its using JCache API but notice its only 2 lines of code)
https://github.com/camelinaction/camelinaction2/blob/master/chapter17/cluster-jcache/src/main/java/camelinaction/ServerBar.java

;;;","22/Jun/17 17:12;lb;[~davsclaus] 

sent a PR against CIA2 (https://github.com/camelinaction/camelinaction2/pull/73) to fix the example. 
will work on make it easier to configure the policy in a separate JIRA;;;","22/Jun/17 20:33;lb; [~davsclaus] forgot to mention that CIA2 examples need camel 2.19.2 in addition to my PR;;;","22/Jun/17 20:39;davsclaus;Thanks Luka, I added a TODO in the pom of the CiA source code;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SFTP is delivered into incorrect location, without exception (file in subfolder + temp file is created + Camel running on Window & SFTP server running on LINUX)",CAMEL-11387,13078475,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,cherryn,cherryn,09/Jun/17 00:16,28/Oct/17 11:47,14/Jul/23 05:50,27/Oct/17 15:59,2.19.0,,,,,2.19.4,2.20.1,2.21.0,,camel-sftp,,,,0,,,"The bug only happens when:
i) file in subfolder
ii) temp file is created 
iii) Camel running on Window & SFTP server running on LINUX

Route Configuration:
{code}
 from(""file://sourceFolder?recursive=true&delay=60000"").
 to(""sftp://username@linuxServer?tempFileName=${file:onlyname}.part"");
{code}

NOTES: added separator=UNIX or AUTO, I got the same issue.

Window Local File: sourceFolder/myfolder1/myfolder2/test.txt
FTPS Remote File Delivered: $linuxServer/myfolder1myfolder2test.txt

NOTES: 
* There is no exception throw in 2.19.0, even though the file delivered into incorrect location.  
* In 2.17.3, exception throw at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:431)[camel-ftp-2.17.3.jar:2.17.3]
* Without tempFileName, it works perfectly.  Issue is around the rename area.
","camel is running on Window, and SFTP server is LINUX",cherryn,davsclaus,githubbot,onders,,,,,,,,,604800,604800,,0%,604800,604800,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 28 11:46:52 UTC 2017,,,,,,,,,,,"0|i3g2db:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jul/17 08:03;davsclaus;Can you be more specific what is the wrong location, maybe write down an file example and say step by step what is happening.;;;","28/Aug/17 19:27;cherryn;[~davsclaus], the file is delivered to ""$linuxServer/myfolder1myfolder2test.txt"".   It is expected to be delivered $linuxServer/myfolder1/myfolder2/test.txt.  


Camel route with v2.19.0: 
{code}
 from(""file://sourceFolder?recursive=true&delay=60000"").
 to(""sftp://username@linuxServer?tempFileName=${file:onlyname}.part"");
{code}

Step 1: Camel is running on Window server
Step 2: File is placed in $windowServer/sourceFolder/myfolder1/myfolder2/test.txt, and expecting to delivery to $linuxServer/myfolder1/myfolder2/test.txt.  
Step 3: $linuxServer/myfolder1/myfolder2/test.txt.part is created
Step 4: File is renamed to $linuxServer/myfolder1myfolder2test.txt, and there is no exception.


Debug message:
{code}
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Connected to sftp://username@linuxServer:22
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Connected and logged in to: sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Trying to build remote directory: myfolder1/myfolder2
[hread #6 - file://sourceFolder] GenericFileConverter           DEBUG Read file sourceFolder\myfolder1\myfolder2\test.txt (no charset)
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG About to store file: test.txt.part using stream: java.io.BufferedInputStream@75c2d4bc
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Took 0.015 seconds (15 millis) to store file: test.txt.part and FTP client returned: true
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Wrote [myfolder1/myfolder2/test.txt.part] to [sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Renaming file: myfolder1/myfolder2/test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] Tracer                         INFO  ID-WINDOWSERVER-55268-1503948136624-0-2 >>> (route2) sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part --> log[file ${file:absolute.path} is processed] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-WINDOWSERVER-55268-1503948136624-0-1, CamelFileAbsolute=false, CamelFileAbsolutePath=E:\relay\sourceFolder\myfolder1\myfolder2\test.txt, CamelFileLastModified=1503948089127, CamelFileLength=4, CamelFileName=myfolder1\myfolder2\test.txt, CamelFileNameConsumed=myfolder1\myfolder2\test.txt, CamelFileNameOnly=test.txt, CamelFileNameProduced=myfolder1\myfolder2\test.txt, CamelFileParent=sourceFolder\myfolder1\myfolder2, CamelFilePath=sourceFolder\myfolder1\myfolder2\test.txt, CamelFileRelativePath=myfolder1\myfolder2\test.txt}, BodyType:org.apache.camel.component.file.GenericFile, Body:[Body is file based: GenericFile[myfolder1\myfolder2\test.txt]]
[hread #6 - file://sourceFolder] route2                         INFO  file E:\relay\sourceFolder\myfolder1\myfolder2\test.txt is processed
[hread #6 - file://sourceFolder] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[myfolder1\myfolder2\test.txt] using exchange: Exchange[ID-WINDOWSERVER-55268-1503948136624-0-2]
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Retrying attempt 0 to delete file: sourceFolder\myfolder1\myfolder2\.camel\test.txt
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to delete file: sourceFolder\myfolder1\myfolder2\.camel\test.txt with result: true
[hread #6 - file://sourceFolder] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[myfolder1\myfolder2\test.txt] to: GenericFile[myfolder1\myfolder2\.camel\test.txt]
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to rename file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt to: sourceFolder\myfolder1\myfolder2\.camel\test.txt with result: true
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Retrying attempt 0 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock with result: true
{code}



;;;","28/Aug/17 19:40;cherryn;[~davsclaus], 

Same code with camel v2.17.3.  The temp file is created ($linuxServer/myfolder1/myfolder2/test.txt.part), but exception when renaming.

Step 1: Camel v2.17.3 is running on Window server
Step 2: File is placed in $windowServer/sourceFolder/myfolder1/myfolder2/test.txt, and expecting to delivery to $linuxServer/myfolder1/myfolder2/test.txt. 
Step 3: $linuxServer/myfolder1/myfolder2/test.txt.part is created
Step 4: exception to rename to the file $linuxServer/myfolder1/myfolder2/test.txt.part to $linuxServer/myfolder1/myfolder2/test.txt.

Debug message:
{code}
[hread #6 - file://sourceFolder] SftpOperations                 INFO  Connected to sftp://username@linuxServer:22
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Connected and logged in to: Endpoint[sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Trying to build remote directory: myfolder1/myfolder2
[hread #6 - file://sourceFolder] GenericFileConverter           DEBUG Read file sourceFolder\myfolder1\myfolder2\test.txt (no charset)
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG About to store file: test.txt.part using stream: java.io.BufferedInputStream@755bc403
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Took 0.031 seconds (31 millis) to store file: test.txt.part and FTP client returned: true
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Wrote [myfolder1\myfolder2\test.txt.part] to [Endpoint[sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
[hread #6 - file://sourceFolder] SftpOperations                 DEBUG Renaming file: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] RemoteFileProducer             WARN  Writing file failed with: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] RemoteFileProducer             DEBUG Disconnecting from: Endpoint[sftp://username@linuxServer?tempFileName=%24%7Bfile%3Aonlyname%7D.part]
[hread #6 - file://sourceFolder] DefaultErrorHandler            DEBUG Failed delivery for (MessageId: ID-WINDOWSERVER-55343-1503948693519-0-1 on ExchangeId: ID-WINDOWSERVER-55343-1503948693519-0-2). On delivery attempt: 0 caught: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] DefaultErrorHandler            ERROR Failed delivery for (MessageId: ID-WINDOWSERVER-55343-1503948693519-0-1 on ExchangeId: ID-WINDOWSERVER-55343-1503948693519-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route2            ] [route2            ] [file://sourceFolder?delay=60000&recursive=true                                ] [     22188]
[route2            ] [log3              ] [log                                                                           ] [        35]
[route2            ] [to5               ] [sftp://username@linuxServer?tempFileName=${file:onlyname}.part                ] [     21660]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
	at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:431)[camel-ftp-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:198)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)[camel-ftp-2.17.3.jar:2.17.3]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:454)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:226)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:190)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)[camel-core-2.17.3.jar:2.17.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)[camel-core-2.17.3.jar:2.17.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_131]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)[:1.8.0_131]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)[:1.8.0_131]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)[:1.8.0_131]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_131]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_131]
	at java.lang.Thread.run(Thread.java:748)[:1.8.0_131]
[hread #6 - file://sourceFolder] Pipeline                       DEBUG Message exchange has failed: so breaking out of pipeline for exchange: Exchange[ID-VACSWVNGAI02-55343-1503948693519-0-2] Exception: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: myfolder1\myfolder2\test.txt.part to: myfolder1\myfolder2\test.txt
[hread #6 - file://sourceFolder] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[myfolder1\myfolder2\test.txt] using exchange: Exchange[ID-VACSWVNGAI02-55343-1503948693519-0-2]
[hread #6 - file://sourceFolder] GenericFileOnCompletion        WARN  Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@4dbe767f for file: GenericFile[myfolder1\myfolder2\test.txt]
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Retrying attempt 0 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock
[hread #6 - file://sourceFolder] FileUtil                       DEBUG Tried 1 to delete file: E:\relay\sourceFolder\myfolder1\myfolder2\test.txt.camelLock with result: true
{code};;;","21/Sep/17 11:02;davsclaus;Can you try with stepwise=false option configured on the ftp endpoints;;;","27/Oct/17 11:34;onders;today, i had a chance to test the case from windows client against unix ftp.
{{stepwise=false}} does not seem to help. The problem is because the folder structure seems to get created on unix Server with Windows separators and jcraft's rename method needs '/' even if it is on windows. Sending PR soon.;;;","27/Oct/17 11:52;githubbot;onders86 opened a new pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066
 
 
   …to make it compact as jcraft seems to need it

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 11:52;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/2066

    CAMEL-11387 - adjust destination filename by calling existing method …

    …to make it compact as jcraft seems to need it

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11387

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2066.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2066
    
----
commit 9bb3b342516ac6362de72da0e5a220d0018edcf7
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-10-27T11:46:08Z

    CAMEL-11387 - adjust destination filename by calling existing method to make it compact as jcraft seems to need it

----
;;;","27/Oct/17 12:19;githubbot;davsclaus commented on a change in pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066#discussion_r147395660
 
 

 ##########
 File path: components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
 ##########
 @@ -269,6 +269,9 @@ public boolean deleteFile(String name) throws GenericFileOperationFailedExceptio
     public boolean renameFile(String from, String to) throws GenericFileOperationFailedException {
         log.debug(""Renaming file: {} to: {}"", from, to);
         try {
+            //make use of the '/' separator because JSch expects this 
 
 Review comment:
   JSch is only used for SftpOperations. So this comment is a bit mis-leading. ftp is using commons-net

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 12:22;githubbot;onders86 commented on a change in pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066#discussion_r147396213
 
 

 ##########
 File path: components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
 ##########
 @@ -269,6 +269,9 @@ public boolean deleteFile(String name) throws GenericFileOperationFailedExceptio
     public boolean renameFile(String from, String to) throws GenericFileOperationFailedException {
         log.debug(""Renaming file: {} to: {}"", from, to);
         try {
+            //make use of the '/' separator because JSch expects this 
 
 Review comment:
   good catch. i will update soon.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 12:48;githubbot;davsclaus commented on issue #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066#issuecomment-339962015
 
 
   The ticket was reporting SFTP only (eg JCraft). Can this PR only change that one - as the other FTP client has not been reported issues like this, and its better not to change it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 15:57;githubbot;onders86 closed pull request #2066: CAMEL-11387 - adjust destination filename by calling existing method …
URL: https://github.com/apache/camel/pull/2066
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 1721c40da12..84d427f875c 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -447,6 +447,9 @@ public synchronized boolean renameFile(String from, String to) throws GenericFil
         LOG.debug(""Renaming file: {} to: {}"", from, to);
         try {
             reconnectIfNecessary();
+            //make use of the '/' separator because JSch expects this 
+            // as the file separator even on Windows
+            to = FileUtil.compactPath(to, '/');
             channel.rename(from, to);
             return true;
         } catch (SftpException e) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Oct/17 15:57;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/2066
;;;","27/Oct/17 17:08;onders;Backport needed?;;;","28/Oct/17 07:15;davsclaus;Great work Onder.

Yeah I think its a good idea to backport to 2.20.x and 2.19.x as well.;;;","28/Oct/17 11:46;onders;backported 2.19.x and 2.20.x.
thanks;;;",,,,,,,,,,,,,,,,,,
Potential NullPointerException if HTTP client not started and stop was performed,CAMEL-11386,13078311,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,08/Jun/17 13:01,08/Jun/17 21:43,14/Jul/23 05:50,08/Jun/17 13:04,2.19.0,,,,,2.19.1,2.20.0,,,camel-salesforce,,,,0,,,With the code in CAMEL-11212 a small issue was introduced that when a HTTP client was not successfully started and attempt was made to stop it would result in NullPointerException.,,jharby1@icloud.com,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11212,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 08 21:43:26 UTC 2017,,,,,,,,,,,"0|i3g1cv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Jun/17 21:43;jharby1@icloud.com;THIS PROJECT HAS FOUND IT'S WAY INTO OUR CLASSIFIED DOMAIN 

BE VERY WARY HERE

FBI WARNING - UNITED CYBER CALIPHATE PUTTING AMERICANS ON KILL LISTS;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-metrics Karaf feature can't be installed,CAMEL-11385,13077964,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,07/Jun/17 11:09,07/Jun/17 11:22,14/Jul/23 05:50,07/Jun/17 11:22,,,,,,2.20.0,,,,camel-metrics,,,,0,,,"Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 19.465 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelMetricsTest
test(org.apache.camel.itest.karaf.CamelMetricsTest)  Time elapsed: 19.347 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelMetricsTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-metrics; type=karaf.feature; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-metrics)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))"" [caused by: Unable to resolve camel-metrics/2.20.0.SNAPSHOT: missing requirement [camel-metrics/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-metrics; type=osgi.bundle; version=""[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-metrics/2.20.0.SNAPSHOT: missing requirement [org.apache.camel.camel-metrics/2.20.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.core)(version>=2.8.0)(!(version>=3.0.0)))""]]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:389)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:375)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:347)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:218)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-06-07 11:09:46.0,,,,,,,,,,,"0|i3fz7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating IgniteComponent from Ignite Instance throws IllegalStateException,CAMEL-11382,13077807,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,g.hodgson,g.hodgson,06/Jun/17 21:39,07/Jun/17 09:11,14/Jul/23 05:50,07/Jun/17 09:11,2.19.0,,,,,2.19.1,2.20.0,,,camel-ignite,,,,0,,,"Creating an IgniteComponent from configuration works fine, but when I try and create one from an existing Ignite instance it throws an IllegalStateException when starting the component: ""No configuration resource or IgniteConfiguration was provided to the Ignite component."" 

Looking at the code [here|https://github.com/apache/camel/blob/master/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java#L77] it appears the lifecycleMode is ignored as it is only set to COMPONENT_MANAGED and cannot be altered outside of the class.  

The following patch sets the lifecycleMode USER_MANAGED when an ignite instance is set, which appears to resolve the problem.
{code}
  diff --git a/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java b/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java
  index eaf6583..e9efc79 100644
  --- a/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java
  +++ b/components/camel-ignite/src/main/java/org/apache/camel/component/ignite/AbstractIgniteComponent.java
  @@ -121,6 +108,7 @@
        */
       public void setIgnite(Ignite ignite) {
           this.ignite = ignite;
  +        lifecycleMode = IgniteLifecycleMode.USER_MANAGED;
       }
   
       /**
{code}

(github pull request to follow)",,davsclaus,g.hodgson,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 07 09:11:06 UTC 2017,,,,,,,,,,,"0|i3fy8v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Jun/17 21:46;githubbot;GitHub user garyhodgson opened a pull request:

    https://github.com/apache/camel/pull/1742

    CAMEL-11382 - Creating IgniteComponent from Ignite Instance throws IllegalStateException

    Creating an IgniteComponent from configuration works fine, but when I try and create one from an existing Ignite instance it throws an IllegalStateException when starting the component: ""No configuration resource or IgniteConfiguration was provided to the Ignite component.""
    
    Looking at the code it appears the lifecycleMode is ignored as it is only set to COMPONENT_MANAGED and cannot be altered outside of the class.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/garyhodgson/camel CAMEL-11382

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1742.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1742
    
----
commit b99df4512b5403ff17f2250927b69f87a9b6619b
Author: Gary Hodgson <contact@garyhodgson.com>
Date:   2017-06-06T21:43:47Z

    CAMEL-11382 - Creating IgniteComponent from Ignite Instance throws IllegalStateException

----
;;;","07/Jun/17 09:02;githubbot;Github user garyhodgson closed the pull request at:

    https://github.com/apache/camel/pull/1742
;;;","07/Jun/17 09:11;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot-starter generator paste incorrect default value,CAMEL-11369,13075872,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,30/May/17 16:02,02/Jun/17 11:03,14/Jul/23 05:50,02/Jun/17 11:03,2.20.0,,,,,2.20.0,,,,camel-spring-boot-starters,tooling,,,0,,,"I've created a new data component and submit it via PR
https://github.com/apache/camel/pull/1729
The spring-bootstarter *DataFormatConfiguration class contains incorrectly defined default value:
private String contentTypeFormat = String.binary;",,davsclaus,dmvolod,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 02 11:01:55 UTC 2017,,,,,,,,,,,"0|i3fn3b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/May/17 08:06;davsclaus;Ah thanks, yeah for string, and possible int types, we should generate this a bit different. 

Its down here we need to improve the code to check the type and deal with a bit different when its a String, int/long type and then use another initializer code
https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java#L332

Mind that the code is repeated in several other places as well so do the same code changes there also. Maybe refactor into a reusable method as the enum generation code is more complicated than the simpler types.

I wonder if you want to take a stab at fixing this?;;;","02/Jun/17 07:49;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1734

    CAMEL-11369: camel-spring-boot-starter generator paste incorrect default value

    @davsclaus, the problem was in type comparison, not in enum processing at all
    Other code looks like working fine, but need to be reviewed for better understanding, join reusable methods, common type comparison and using constants (classes) instead of string values 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11369

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1734.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1734
    
----
commit 838676fe6a92756a666d2907ae08cfaa75abd6df
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-06-02T07:42:40Z

    CAMEL-11369: camel-spring-boot-starter generator paste incorrect default
    value

----
;;;","02/Jun/17 11:01;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1734
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
duplicated/missing logs when camel-paxlogging work with pax-logging-log4j2,CAMEL-11352,13075473,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xldai,xldai,28/May/17 14:02,01/Jun/17 07:13,14/Jul/23 05:50,30/May/17 07:08,2.17.6,2.19.0,,,,2.19.1,2.20.0,,,,,,,0,,,"This problem is found after switch to the karaf 4.1.x, which using pax-logging-log4j2 insteadof pax-logging-service.

I created a small test case project for reproduce this issue. https://github.com/xldai/test/tree/master/test-paxlogging-camel

The findings from me is that, when PaxLoggingConsumer class [1] work together with pax-logging-service (karaf 4.0.x), it creates new threads to process the incoming PaxLoggingEvent and using MDC to filter the possible duplicated logs from PaxAppenderProxy class [2].

but when PaxLoggingConsumer class work together with pax-logging-log4j2, the multi thread mechanism for processing the PaxLoggingEvent will lead to duplicated/missing logs output to the camel Exchange.

Since the L63 from [3] fixed the possible duplicated logs come from PaxAppenderProxy class, I found that the multi thread mechanism and MDC checking can be removed from PaxLoggingConsumer class, then it works again as expected from my test result.

[1] https://github.com/apache/camel/blob/master/components/camel-paxlogging/src/main/java/org/apache/camel/component/paxlogging/PaxLoggingConsumer.java#L58
[2] https://github.com/ops4j/org.ops4j.pax.logging/blob/logging-1.9.1/pax-logging-service/src/main/java/org/ops4j/pax/logging/service/internal/PaxAppenderProxy.java#L63
[3] https://github.com/ops4j/org.ops4j.pax.logging/blob/logging-1.9.1/pax-logging-log4j2/src/main/java/org/ops4j/pax/logging/log4j2/internal/PaxAppenderProxy.java#L63",,davsclaus,githubbot,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 01 07:13:33 UTC 2017,,,,,,,,,,,"0|i3fkmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/May/17 14:45;davsclaus;So are you saying its a issue that is fixed in pax-logging. ;;;","29/May/17 12:11;xldai;Claus, from my test result, the pax-logging-service bundle (support log4j 1.x) sent duplicated log entries sometimes, so I think that's why the doAppend() of PaxLoggingConsumer made multi thread/add MDC checking to avoid these situation from camel side. but with pax-logging-log4j2 bundle installed, I don't see duplicated log entries any longer from it, but the new problem is, we got a lot duplicated logs from camel-paxlogging side.

For example the logs from my test case above:
{code}
Apache Camel 2.19.0 (CamelContext: camel-1) started in 0.234 seconds
Apache Camel 2.19.0 (CamelContext: camel-1) started in 0.234 seconds
Apache Camel 2.19.0 (CamelContext: camel-1) started in 0.234 seconds
Started bundle: file:/G:/download/apache-karaf-4.1.1/deploy/test-paxlogging-camel-1.0.0.jar
{code}

the original logs from pax-logging-log4j2 are (as expected):
{code}
Route: route1 started and consuming from: Endpoint[paxlogging://mylog]
Total 1 routes, of which 1 are started.
Apache Camel 2.17.6 (CamelContext: camel-1) started in 0.234 seconds
Started bundle: file:/G:/download/apache-karaf-4.1.1/deploy/test-paxlogging-camel-1.0.0.jar
{code};;;","29/May/17 12:18;davsclaus;Well you are welcome to provide a github PR to fix this in camel-paxlogging;;;","30/May/17 06:58;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/1727

    fix CAMEL-11352

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1727.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1727
    
----
commit 2689846973276af9d9105924e8299bba10fc7b73
Author: xldai <xldai@talend.com>
Date:   2017-05-30T06:56:47Z

    fix CAMEL-11352

----
;;;","30/May/17 07:08;davsclaus;Thanks for the PR;;;","01/Jun/17 07:13;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1727
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger Rest DSL Generator needs to build before its maven plugin,CAMEL-11322,13074602,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,tcunning,tcunning,24/May/17 18:33,27/May/17 07:34,14/Jul/23 05:50,24/May/17 19:21,,,,,,2.20.0,,,,tooling,,,,0,,,"When building master, the Swagger REST DSL Generator seems to need to build before the Swagger REST DSL Generator maven plugin :

[INFO] Camel :: Maven Plugins :: Swagger REST DSL Generator Maven plugin FAILURE [ 17.124 s]
[INFO] Camel :: Tooling :: Swagger REST DSL Generator ..... SKIPPED

[ERROR] Failed to execute goal on project camel-restdsl-swagger-plugin: Could not resolve dependencies for project org.apache.camel:camel-restdsl-swagger-plugin:maven-plugin:2.20.0.fuse-000018: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/) -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project camel-restdsl-swagger-plugin: Could not resolve dependencies for project org.apache.camel:camel-restdsl-swagger-plugin:maven-plugin:2.20.0.fuse-000018: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:221)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:127)
	at org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:245)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:199)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.project.DependencyResolutionException: Could not resolve dependencies for project org.apache.camel:camel-restdsl-swagger-plugin:maven-plugin:2.20.0.fuse-000018: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:211)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:195)
	... 23 more
Caused by: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:384)
	at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:205)
	... 24 more
Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:444)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:246)
	at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:367)
	... 25 more
Caused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not find artifact org.apache.camel:swagger-rest-dsl-generator:jar:2.20.0.fuse-000018 in missingironjacamar (http://download-node-02.eng.bos.redhat.com/brewroot/packages/org.jboss.ironjacamar-ironjacamar-project/1.4.4.Final_redhat_1/1/maven/)
	at org.eclipse.aether.connector.basic.ArtifactTransportListener.transferFailed(ArtifactTransportListener.java:39)
	at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:355)
	at org.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:67)
	at org.eclipse.aether.connector.basic.BasicRepositoryConnector$DirectExecutor.execute(BasicRepositoryConnector.java:581)
	at org.eclipse.aether.connector.basic.BasicRepositoryConnector.get(BasicRepositoryConnector.java:249)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.performDownloads(DefaultArtifactResolver.java:520)
	at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:421)
	... 27 more",,githubbot,tcunning,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat May 27 07:34:19 UTC 2017,,,,,,,,,,,"0|i3ff93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/May/17 18:35;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1715

    CAMEL-11322 Swagger Rest DSL Generator needs to build before its maven plugin

    https://issues.apache.org/jira/browse/CAMEL-11322

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-11322

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1715.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1715
    
----
commit 1ebfd3569219cbb05a291372b10c78b352df03b5
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-05-24T18:34:15Z

    CAMEL-11322 Swagger Rest DSL Generator needs to build before its maven plugin

----
;;;","24/May/17 18:36;tcunning;https://github.com/apache/camel/pull/1715;;;","24/May/17 19:21;zregvart;One would hope that Maven would take care of this, but apparently not.

Merged into {{master}} from [PR#1715|https://github.com/apache/camel/pull/1715].

Thanks [~cunningt]!;;;","27/May/17 07:34;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1715
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[OSGi, camel-jpa] Problems with mapping idempotent.jpa.MessageProcessed with Aries + Hibernate",CAMEL-11317,13074475,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,24/May/17 11:13,24/May/17 11:50,14/Jul/23 05:50,24/May/17 11:22,2.17.7,2.18.3,2.19.0,,,2.18.5,2.19.1,2.20.0,,camel-jpa,osgi,,,0,,,"When JPA idempotent JpaMessageIdRepository is used in blueprint, with Hibernate JPA Provider we may end up with:
{noformat}
2017-05-16 13:23:38,739 | ERROR | {pool-28-thread-1} [org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer] (JavassistLazyInitializer.java:166) | 236 - org.hibernate.core - 4.2.22.Final | HHH000142: Javassist Enhancement failed: org.apache.camel.processor.idempotent.jpa.MessageProcessed
java.lang.RuntimeException: by java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy
    at javassist.util.proxy.ProxyFactory.createClass3(ProxyFactory.java:515)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass2(ProxyFactory.java:492)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass1(ProxyFactory.java:428)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass(ProxyFactory.java:400)[157:javassist:3.19.0.GA]
    at org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.getProxyFactory(JavassistLazyInitializer.java:163)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.proxy.pojo.javassist.JavassistProxyFactory.postInstantiate(JavassistProxyFactory.java:66)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.PojoEntityTuplizer.buildProxyFactory(PojoEntityTuplizer.java:229)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.AbstractEntityTuplizer.<init>(AbstractEntityTuplizer.java:212)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.PojoEntityTuplizer.<init>(PojoEntityTuplizer.java:82)[236:org.hibernate.core:4.2.22.Final]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_131]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_131]
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_131]
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)[:1.8.0_131]
    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructTuplizer(EntityTuplizerFactory.java:135)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.EntityTuplizerFactory.constructDefaultTuplizer(EntityTuplizerFactory.java:188)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:341)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:506)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:146)[236:org.hibernate.core:4.2.22.Final]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_131]
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_131]
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_131]
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)[:1.8.0_131]
    at org.hibernate.persister.internal.PersisterFactoryImpl.create(PersisterFactoryImpl.java:163)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:135)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:398)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1854)[236:org.hibernate.core:4.2.22.Final]
    at org.hibernate.ejb.EntityManagerFactoryImpl.<init>(EntityManagerFactoryImpl.java:96)[237:org.hibernate.entitymanager:4.2.22.Final]
    at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:915)[237:org.hibernate.entitymanager:4.2.22.Final]
    at org.hibernate.osgi.OsgiPersistenceProvider.createContainerEntityManagerFactory(OsgiPersistenceProvider.java:99)[238:org.hibernate.osgi:4.2.22.Final]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.createEntityManagerFactories(EntityManagerFactoryManager.java:432)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.registerEntityManagerFactories(EntityManagerFactoryManager.java:292)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.access$000(EntityManagerFactoryManager.java:74)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager$1.call(EntityManagerFactoryManager.java:203)[166:org.apache.aries.jpa.container:1.0.4]
    at org.apache.aries.jpa.container.impl.EntityManagerFactoryManager$1.call(EntityManagerFactoryManager.java:199)[166:org.apache.aries.jpa.container:1.0.4]
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_131]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_131]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_131]
    at java.lang.Thread.run(Thread.java:748)[:1.8.0_131]
Caused by: javassist.CannotCompileException: by java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy
    at javassist.util.proxy.FactoryHelper.toClass(FactoryHelper.java:170)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.ProxyFactory.createClass3(ProxyFactory.java:507)[157:javassist:3.19.0.GA]
    ... 37 more
Caused by: java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy
    at java.lang.ClassLoader.defineClass1(Native Method)[:1.8.0_131]
    at java.lang.ClassLoader.defineClass(ClassLoader.java:763)[:1.8.0_131]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_131]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_131]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_131]
    at java.lang.reflect.Method.invoke(Method.java:498)[:1.8.0_131]
    at javassist.util.proxy.FactoryHelper.toClass2(FactoryHelper.java:182)[157:javassist:3.19.0.GA]
    at javassist.util.proxy.FactoryHelper.toClass(FactoryHelper.java:164)[157:javassist:3.19.0.GA]
    ... 38 more
Caused by: java.lang.ClassNotFoundException: org.hibernate.proxy.HibernateProxy not found by org.apache.camel.camel-jpa [180]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1556)
    at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)
    at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_131]
    ... 46 more
{noformat}
",,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 24 11:43:08 UTC 2017,,,,,,,,,,,"0|i3fegv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/May/17 11:22;ggrzybek;Fixed in master branch [here|https://github.com/apache/camel/commit/12d4f2d108b5d771e286135827e70bd5f0471f90]
Fixed in camel-2.19.x branch [here|https://github.com/apache/camel/commit/894a54f255528e32ce75572288bfdcfa3a558d07];;;","24/May/17 11:39;davsclaus;Should we backport to 2.18.x branch also?;;;","24/May/17 11:40;ggrzybek;No problem;;;","24/May/17 11:42;ggrzybek;Fixed in camel-2.18.x [here|https://github.com/apache/camel/commit/7471bacec53927a35c6197ef371ecac1f2679e7a];;;","24/May/17 11:43;davsclaus;Thanks its 2.18.5, as .4 is in VOTE now to be released soon;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test - Using dump route coverage with custom processor may cause NPE,CAMEL-11305,13073718,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/May/17 16:29,21/May/17 16:58,14/Jul/23 05:50,21/May/17 16:58,2.19.0,,,,,2.19.1,2.20.0,,,camel-test,,,,0,,,"See nabble
http://camel.465427.n5.nabble.com/NPE-in-org-apache-camel-test-junit4-CamelTestSupport-logCoverageSummary-tp5799968.html

Also the issue is in CamelContext.getManagedProcessor method that should deal with those custom processors",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-21 16:29:50.0,,,,,,,,,,,"0|i3f9sn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Rest DSL Does Not Creating OPTIONS routes for defined routes,CAMEL-11299,13073231,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,leoloko,leoloko,18/May/17 19:40,22/May/17 14:03,14/Jul/23 05:50,22/May/17 14:03,2.19.0,,,,,2.19.1,2.20.0,,,camel-jetty,camel-servlet,,,0,,,"Camel does not generating the options answer for all routes defined using component servlet, ex:
{code}
restConfiguration().component(""servlet"").bindingMode(RestBindingMode.json)

rest(""/v1/customers"")
   .get()
      .produces(""application/json"")
      .to(""direct:listAll"")
   .get(""/{id}"")
      .produces(""application/json"")
      .to(""direct:findOne"")
{code}
For /v1/customers the request OPTIONS return 200 OK but for /v1/customers/1 the request OPTIONS return 404 not found.",Windows 7 JDK 8 Spring Boot 1.5.3,davsclaus,leoloko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11312,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 22 12:16:31 UTC 2017,,,,,,,,,,,"0|i3f6sf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/May/17 12:16;davsclaus;This is also a problem with camel-jetty;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using chmodDirectory with full paths makes file producer to created directories relative to source,CAMEL-11298,13073126,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Stabbz,Stabbz,18/May/17 12:48,23/May/17 10:55,14/Jul/23 05:50,23/May/17 09:48,2.18.2,2.19.0,,,,2.18.5,2.19.1,2.20.0,,camel-core,,,,0,,,"Tried using the chmodDirectory property on a file producer that writes to full system paths and noticed that with the chmodDirectory property the directories get created relative to the source/project.

Without using the property the files get properly created using the full path that is given to them.

I ran a debugger and found the source of the problem:

Code is from org.apache.camel.component.file.FileOperations 
in buildDirectory method
at lines 97 - 118

{code}
if (permissions == null || permissions.isEmpty()) {
            return dir.mkdirs();
        }

        // create directory one part of a time and set permissions
        try {
            String[] parts = dir.getPath().split(""\\"" + File.separatorChar);
            File base = new File(""."");
            for (String part : parts) {
                File subDir = new File(base, part);
                if (!subDir.exists()) {
                    if (subDir.mkdir()) {
                        if (LOG.isTraceEnabled()) {
                            LOG.trace(""Setting chmod: {} on directory: {} "", PosixFilePermissions.toString(permissions), subDir);
                        }
                        Files.setPosixFilePermissions(subDir.toPath(), permissions);
                    } else {
                        return false;
                    }
                }
                base = new File(base, subDir.getName());
            }
        }
{code}

Base File used to create all the folders and set their permissions is initialized with new File("".""), effectively this always creates the directories given to it, relative to the source, and will not handle full system paths.

Is there a reason I'm unaware of that this is implemented this way?

I tested running folder creation code with new File("""") as a base and it worked fine, would that be enough to handle the issue if it indeed is an issue?

I can do this my self by issuing a pull request, let me know.

Thanks.
",Arch Linux,davsclaus,githubbot,Stabbz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 23 10:55:13 UTC 2017,,,,,,,,,,,"0|i3f653:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/May/17 17:15;davsclaus;Can you provide an example with the uri configuration to better explain this;;;","19/May/17 19:15;Stabbz;Sure, this route below will produce an exception that illustrates the problem, the chmodDirectory property will create the directory relative to the source but the file producer will look for that directory in its system path resulting in a FileNotFoundException.

{code}
@Component
public class TestRouter extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        String outputFileDir = ""/home/damyan/Desktop/test/test2/"";

        from(""timer://foo?fixedRate=true&period=10000"")
                .setBody(simple (""Hello World""))
                .to(""file://"" + outputFileDir + ""?chmodDirectory=777"");
    }
}
{code};;;","21/May/17 07:19;davsclaus;Yeah a PR is welcome we love contributions;;;","22/May/17 07:39;Stabbz;I'm not sure which branch to use for such a PR, can you give me some direction? Thanks.;;;","22/May/17 07:40;davsclaus;Always master, then the Camel team cherry-pick to older branches if necessary.;;;","22/May/17 14:48;githubbot;GitHub user Stabbz opened a pull request:

    https://github.com/apache/camel/pull/1707

    CAMEL-11298: Fix, allowing usage of absolute and relative paths with chmodDirectory option

    Reused the absolute boolean flag to handle absolute paths when using chmodDirectory option. Previously using absolute paths produced an exception.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Stabbz/camel chmod-dir-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1707.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1707
    
----
commit 995ff7e1640fe285eb66c948d8f487c918991c26
Author: Damyan Damyanov <damyan.damyanov@scalefocus.com>
Date:   2017-05-22T11:41:34Z

    CAMEL-11298: Minor change to file constructor used in chmodDirectory. Should fix the issue.

commit b91e1d21e3e0b50e95e12b793610c956ce1e7950
Author: Damyan Damyanov <damyan.damyanov@scalefocus.com>
Date:   2017-05-22T14:43:49Z

    CAMEL-11298: Added additional logic to handle absolute and relative paths when using chmodDirectory.

----
;;;","23/May/17 10:55;githubbot;Github user Stabbz closed the pull request at:

    https://github.com/apache/camel/pull/1707
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Rest DSL Producer HTTP ignores http verb from uri,CAMEL-11293,13072858,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,owain,owain,17/May/17 16:20,23/May/17 12:13,14/Jul/23 05:50,23/May/17 12:13,2.19.0,,,,,2.19.1,2.20.0,,,camel-http4,rest,,,0,,,"As per http://camel.465427.n5.nabble.com/2-19-0-Rest-Producer-DSL-http4-support-for-PUT-workaround-td5799706.html

https://github.com/apache/camel/blob/camel-2.19.x/components/camel-http4/src/main/java/org/apache/camel/component/http4/helper/HttpMethodHelper.java#L64

The createMethod function does not take the http verb from the URI, PUT is transformed to a POST since there is a payload.  Resulting in an incorrect http request being formed.  The verb from the URI should take precedence.  

There is a workaround of setting Exchange.HTTP_METHOD header as per:

      .setHeader(Exchange.HTTP_METHOD, constant(HttpMethods.PUT))
      .to(""rest:put:api/resource/{{resource.id}}"")

HttpHelperTest is lacking coverage of http verbs other than GET and POST
",,owain,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-17 16:20:44.0,,,,,,,,,,,"0|i3f4hj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-Infinispan: Continuous Query, add support for recordUpdated event",CAMEL-11290,13072730,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,17/May/17 08:38,17/May/17 08:40,14/Jul/23 05:50,17/May/17 08:40,,,,,,2.20.0,,,,camel-infinispan,,,,0,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-17 08:38:47.0,,,,,,,,,,,"0|i3f3pb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-grpc producer incorrectly called async services,CAMEL-11288,13072502,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,dmvolod,dmvolod,16/May/17 15:53,17/May/17 07:38,14/Jul/23 05:50,17/May/17 07:30,2.19.0,,,,,2.19.1,2.20.0,,,camel-grpc,,,,0,,,Error occurs when calling procedures with async (stream incoming and outgoing parameters). This is not handled as expected.   ,,dmvolod,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 17 07:38:05 UTC 2017,,,,,,,,,,,"0|i3f2br:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/May/17 16:24;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1699

    CAMEL-11288: camel-grpc producer incorrectly called async services

    The unit-tests are also completely rewritten

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11288

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1699.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1699
    
----
commit 98ed3f8460fcaf70b5f843fdb019b35b2c123e56
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-05-16T16:09:09Z

    CAMEL-11288: camel-grpc producer incorrectly called async services

----
;;;","16/May/17 16:28;dmvolod;It would be nice to backport this issue to the 2.19.1 after merge;;;","17/May/17 07:38;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1699
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MDC routeId value is lost after calling a direct route from a transacted route,CAMEL-11287,13072475,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/May/17 14:44,16/May/17 14:53,14/Jul/23 05:50,16/May/17 14:53,2.18.3,,,,,2.18.4,2.19.1,2.20.0,,camel-core,,,,0,,,There is a little bug in MDCUnitOfWork that causes this problem,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-16 14:44:05.0,,,,,,,,,,,"0|i3f25r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Imported Xquery modules will not resolve using classpath - Regression,CAMEL-11286,13072452,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Jeremy Gosling,Jeremy Gosling,16/May/17 13:56,01/Nov/17 10:31,14/Jul/23 05:50,01/Nov/17 10:31,2.15.0,2.19.0,,,,2.19.4,2.20.1,2.21.0,,camel-saxon,,,,0,,,"In Camel 2.15.0 the camel-saxon component was refactored to include an XQueryEndpoint class which now instanciates the XQueryBuilder object in the doStart() method.  It then sets the values of various properties on this object, but misses out the moduleURIResolver.  This is therefore null when the query is evaluated and not used by the net.sf.saxon.query.XQueryExpression to resolve xquery module imports as original described in CAMEL-4285. ",,acosentino,davsclaus,Jeremy Gosling,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 15 09:43:18 UTC 2017,,,,,,,,,,,"0|i3f20n:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"16/May/17 13:58;acosentino;Is this something present in 2.18, 2.19 and master? Can you eventually provide a PR?;;;","17/May/17 11:05;Jeremy Gosling;Looks like it was introduced in 2.15.0, and has been in all subsequent versions, including master.  I'm a currently putting together a minimal unit test which will exhibit the currently observed behaviour before testing the fix which I will provide.;;;","23/May/17 12:22;davsclaus;Hi Jeremy,

Any update on a fix you are working on?;;;","25/May/17 14:49;Jeremy Gosling;I have a unit test and a one line fix which works on the 2.15.x, 2.16.x and 2.17.x branches, but fails on 2.18.x and master with a null point exception deep within Saxon.  This appears to be related to the updated version of the Saxon HE library used.  The fix for the original enhancement ([CAMEL-4285]) works with any version 9.5.x (9.5.1-5 is specified for Camel 2.15, 2.16 and 2.17) but not 9.6.0-1 onwards.  From Camel 2.18.x onwards various iterations of 9.7 are used, which I'm assuming requires some change to the implementation of the net.sf.saxon.lib.ModuleURIResolver interface. I'm currently looking into this.;;;","25/May/17 14:56;davsclaus;Camel 2.17.x and older are EOL. We only support 2.18 onwards now.;;;","15/Jun/17 09:43;onders;[~Jeremy Gosling] could you share your unit test ? Let's see what we can do.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hystrix-starter - The circuitBreakerForceClose option is default true which should be false,CAMEL-11283,13072374,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/May/17 09:33,16/May/17 10:50,14/Jul/23 05:50,16/May/17 10:50,2.19.0,,,,,2.19.1,2.20.0,,,camel-hystrix,camel-spring-boot-starters,,,0,,,It was a wrong default value,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 09:34:27 UTC 2017,,,,,,,,,,,"0|i3f1jb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/May/17 09:34;davsclaus;This is the spring boot starter that has the wrong default which it reads from the model and is generated as part of its starter source code;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring is not usable in an osgi-context,CAMEL-11281,13071950,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,guyv,guyv,15/May/17 11:20,16/May/17 09:46,14/Jul/23 05:50,16/May/17 08:42,2.18.0,2.18.1,2.18.2,2.18.3,2.19.0,2.18.4,2.19.1,2.20.0,,camel-spring,,,,0,,,"When using camel-spring in an osgi-context with xml-based spring config, following exception occurs: 

org.springframework.beans.factory.BeanDefinitionStoreException: Failed to create the JAXB binder; nested exception is javax.xml.bind.JAXBException: Provider com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
 - with linked exception:
[javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:380) ~[?:?]
	at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:61) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:74) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1411) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1401) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:168) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:138) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:94) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:508) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:392) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188) ~[43:org.apache.servicemix.bundles.spring-beans:4.2.6.RELEASE_1]
	at org.eclipse.gemini.blueprint.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:170) ~[?:?]
	at org.eclipse.gemini.blueprint.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:140) ~[?:?]
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129) ~[64:org.apache.servicemix.bundles.spring-context:4.2.6.RELEASE_1]
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:609) ~[64:org.apache.servicemix.bundles.spring-context:4.2.6.RELEASE_1]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:60) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:242) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:220) ~[58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:224) [49:org.eclipse.gemini.blueprint.extender:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:177) [49:org.eclipse.gemini.blueprint.extender:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:157) [58:org.eclipse.gemini.blueprint.core:2.0.0.RELEASE]
	at org.eclipse.gemini.blueprint.extender.internal.activator.LifecycleManager$1.run(LifecycleManager.java:207) [49:org.eclipse.gemini.blueprint.extender:2.0.0.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: javax.xml.bind.JAXBException: Provider com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:146) ~[?:?]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:356) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:?]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:217) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378) ~[?:?]
	... 30 more
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.internal.bind.v2.ContextFactory.createContext(ContextFactory.java:266) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:171) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:131) ~[?:?]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:356) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:?]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:217) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378) ~[?:?]
	... 30 moresun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:171) ~[?:?]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:131) ~[?:?]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:356) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:?]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:?]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:217) ~[?:?]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378) ~[?:?]
	... 30 more


The reason is the fact that not all packages defined in:

org.apache.camel.model.Constants.JAXB_CONTEXT_PACKAGES

are listed as Import-Package in the MANIFEST.MF",osgi,davsclaus,githubbot,guyv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 09:46:42 UTC 2017,,,,,,,,,,,"0|i3eyxb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/May/17 11:33;davsclaus;spring-dm is dead and should not be used.;;;","15/May/17 11:45;guyv;We are not using spring-dm at all, but blueprint with additional spring-config;;;","15/May/17 11:57;davsclaus;Okay then try to create a PR where you add all the model packages as imports to the pom.xml
https://github.com/apache/camel/blob/master/components/camel-spring/pom.xml#L36;;;","15/May/17 13:24;githubbot;GitHub user guyv opened a pull request:

    https://github.com/apache/camel/pull/1698

    CAMEL-11281: added org.apache.camel.model.Constants.JAXB_CONTEXT_PACK…

    …AGES to Import-Package osgi header

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/guyv/camel CAMEL-11281

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1698.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1698
    
----

----
;;;","15/May/17 13:26;guyv;Thanks! Done: https://github.com/apache/camel/pull/1698;;;","16/May/17 08:34;davsclaus;Thanks they are imported now
{code}
org.apache.camel.model.config                │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.dataformat            │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.language              │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.loadbalancer          │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.remote                │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model.rest                  │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
org.apache.camel.model                       │ [2.18.4,2.18.5) │          │ 52 │ org.apache.camel.camel-spring
{code};;;","16/May/17 08:38;davsclaus;And for 2.19.x there are more packages
{code}
org.apache.camel.model.cloud                 │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.config                │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.dataformat            │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.language              │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.loadbalancer          │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.rest                  │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.transformer           │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model.validator             │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
org.apache.camel.model                       │ [2.19.1,2.19.2) │          │ 53 │ org.apache.camel.camel-spring
{code};;;","16/May/17 09:46;githubbot;Github user guyv closed the pull request at:

    https://github.com/apache/camel/pull/1698
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-twitter : hard-coded component scheme,CAMEL-11280,13071928,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,15/May/17 09:08,15/May/17 11:42,14/Jul/23 05:50,15/May/17 09:33,,,,,,2.19.1,2.20.0,,,camel-twitter,,,,0,,,"The camel twitter component parses the uri assuming the component has twitter as as scheme which is correct in most of the cases but could fail if one would pre-configure a number of twitter components:

{code:xml}
<bean id=""tw-account-1"" class=""rg.apache.camel.component.twitter.TwitterComponent"">
  <property name=""accessToken"" value=""tokenForAccount1""/>
</bean>

<bean id=""tw-account-2"" class=""rg.apache.camel.component.twitter.TwitterComponent"">
  <property name=""accessToken"" value=""tokenForAccount2""/>
</bean>

<camelContext>
  <route>
    <from uri=""tw-account-1:search""/>  
    ...
  </rute>
  <route>
    <from uri=""tw-account-2:timeline/mentions""/>  
    ...
  </rute>
<camelContext/>
{code}

Relevant code:
- https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterHelper.java#L43-L44
- https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterHelper.java#L156-L161
",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-15 09:08:55.0,,,,,,,,,,,"0|i3eysf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel hystrix does not handle exceptions properly,CAMEL-11279,13071809,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,anton_k11,anton_k11,14/May/17 13:15,21/Dec/17 16:44,14/Jul/23 05:50,16/May/17 10:50,2.18.2,2.18.3,2.19.0,,,2.18.4,2.19.1,2.20.0,,camel-hystrix,,,,0,,,"Exceptions in the route executed by Hystrix are not propagated to Hystrix itself and main features such as ""circuit open"" are not available, when errors pack up. The scenario was working with fallbackEnabled=""true"" in 2.18.1. 
I have prepared a JUnit test: https://github.com/anton-k11/camel/blob/cffa13cb8106731ba94aaff85a9dd81715315306/components/camel-hystrix/src/test/java/org/apache/camel/component/hystrix/processor/HystrixCircutExceptionTest.java
The test works fine if the IOException on line 110 is comment out and instead a Thread.sleep is used to simulate timeout.",spring boot 1.4.2,anton_k11,davsclaus,githubbot,HuminiO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Thu Dec 21 15:00:29 UTC 2017,,,,,,,Patch Available,,,,"0|i3ey1z:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"14/May/17 13:24;githubbot;GitHub user anton-k11 opened a pull request:

    https://github.com/apache/camel/pull/1694

    CAMEL-11279 test and fix

    Fix and JUnit test for https://issues.apache.org/jira/browse/CAMEL-11279

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anton-k11/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1694.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1694
    
----
commit 758c5a0e5a0b070f0ade5dd1716fc50301e0751d
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:09:18Z

    Camel-hystrix test, which checks if the Hystrix in the route is
    short-circuited after some errors.

commit cffa13cb8106731ba94aaff85a9dd81715315306
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T12:51:21Z

    Fixing source stile

commit c15a0cf0f538ef774c877764b3081d98cb9be8db
Author: Anton Krosnev <anton.krosnev@ocado.com>
Date:   2017-05-14T13:21:43Z

    Fixing Camel hystrix issue:
    https://issues.apache.org/jira/browse/CAMEL-11279

----
;;;","14/May/17 13:29;anton_k11;Hi, 

I have created PR #1694 containing a fix and a test.

Regards, Anton;;;","16/May/17 10:50;davsclaus;Thanks for the PR;;;","19/May/17 16:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1694
;;;","21/Dec/17 15:00;HuminiO;I believe that exceptions are still not handled correctly (at least in 2.19.4)
Circuit breaker should be transparent when `closed` - so until it is `open` all exceptions should be passed through not wrapped as it happening now (when fallback is disabled)

Current implementation always wraps original exception in `HystrixRuntimeException` - this way it is neither transparent nor compatible with Java use with annotations.

For clarification: hystrix library always wraps cause with `HystrixRuntimeException` but Java aspect is implementation unwraps it and in result annotation based hystrix in Java is transparent.
And it should behave same way in Camel.

I actually raised story CAMEL-12100;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReloadStrategySupport does take changed routeContext files into account,CAMEL-11273,13071749,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ronny.aerts.intris,ronny.aerts.intris,13/May/17 11:24,16/May/17 12:54,14/Jul/23 05:50,16/May/17 12:54,2.19.0,,,,,2.19.1,2.20.0,,,camel-core,,,,0,easyfix,,"I saw in the camel 2.19.0 release notes that xml routes could be reloaded automatically which woke my interest (since we only use xml routes and no java at all). I tried it by specifying the fileWatcherDirectory in my pom.xml (in the camel-maven-plugin configuration) and it worked fine for me. I ran it from within eclipse.
The point is that our camelcontext only holds routeContextRef entries and no real routes. I tried again by specifying the location src/main/resources (where the routecontext files are) but this does not seem to work, no updates are seen. 

Claus point me to look in the source code and I saw that ReloadStrategySupport.java holds line 76:
{code}
dom = XmlLineNumberParser.parseXml(new ByteArrayInputStream(xml.getBytes()), null, ""camelContext,routes"", ""http://camel.apache.org/schema/spring"");
{code}
which means that routes from a routeContext are NOT reloaded. 

This could be solved by changing the line to:
{code}
dom = XmlLineNumberParser.parseXml(new ByteArrayInputStream(xml.getBytes()), null, ""camelContext,routes,routeContext"", ""http://camel.apache.org/schema/spring"");
{code}
",,davsclaus,githubbot,ronny.aerts.intris,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11274,CAMEL-11275,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 12:54:29 UTC 2017,,,,,,,,,,,"0|i3exon:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/May/17 11:54;davsclaus;Can you provide a github PR with a fix for this?;;;","13/May/17 14:17;githubbot;GitHub user ronnyaerts opened a pull request:

    https://github.com/apache/camel/pull/1693

    CAMEL-11273: also process routeContext routes in auto ReloadStrategy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.19.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1693.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1693
    
----
commit 6cb00233e8e94dc9028f9ec02b5580d04de24c66
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:44:54Z

    [maven-release-plugin] prepare release camel-2.19.0

commit 3c909c8ab81109dfb4164427c53770ddf17d2430
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-04-29T20:45:42Z

    [maven-release-plugin] prepare for next development iteration

commit a7144f3b0e3d05165ab783dd02a0c816b0f64b8c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:27:07Z

    Add schema references for release 2.18.3
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 11c66e6756adc546955204666bdaa5ba32eb5f2f
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2017-05-05T07:34:50Z

    Add schema references for release 2.19.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit c4d99ac146d5c3a6f9b18ba533c32800de410f91
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-05-02T17:39:01Z

    https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component Added colon to Simple and parameter grammar

commit 0aeba63ac67fe9a5d6843df28f4ab060676bcf56
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T12:11:43Z

    Regen

commit 118b37ef4b2a477e7529cd0770a3a4a4135aca89
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- 409(which was a wrong default value) should have been 4096

commit a713e3e65a16046ca573f13181e4ae95e18f8946
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-08T16:09:33Z

    CAMEL-11239: camel-catalog-maven - Remove sl4j logger as it causes tooling classloading pain

commit 93c72f42f3a76a1e9c2c8fee2fa868cf36808461
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T13:44:48Z

    CAMEL-11225: Deadlock in component creation

commit 90e2c6a8ba162d358f12fe97c8d244f5fb701485
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-08T13:06:53Z

    CAMEL-11225: fix tests

commit 103b09d1dda7c76b4509b07e10b7b71aeac361ae
Author: Gary Brown <gary@brownuk.com>
Date:   2017-05-10T15:48:57Z

    CAMEL-11258 Use TracerResolver to locate Tracer without modifying code/config

commit f070c4f003341af97e0bdb991cfa15a9faed71b2
Author: Christian Schneider <chris@die-schneider.net>
Date:   2017-05-05T14:32:27Z

    [CAMEL-11229] Avoid recursion in onException

commit 9d65602039ca597e77dbe88a6069a14ab43c6046
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-08T09:54:59Z

    CAMEL-11229 Infinite recursion if exception hap...
    
    ...pens inside exception handler
    
    A bit simpler unit test and reformatted source code.

commit 3190a38f916c19e37cd5015359fc3399e3b8eb07
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-10T11:10:57Z

    CAMEL-11229: Add fail-safe in fatal error handler to detect circular looping

commit 133ad76d597661afb30a7e5def068e14e792c899
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:08:37Z

    CAMEL-11229: Add TODO for that weird test which fails run manually but not with mvn clean install

commit b69dd8259187d5ebaea9d0fdf1179c9e676bd971
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:12:28Z

    CAMEL-11229: Polished

commit 7fda1675bf971c2bda5af724a67a1cea3c33aa27
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T09:55:56Z

    CAMEL-11229: Rename due typo

commit bddcd40ab14ad5d8c8fe124674c1d9ff827d3e95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2017-05-11T11:17:14Z

    CAMEL-11229: Mark exchange as circulr detected for error handler.

commit 3d82d1711d94c3e631ead12cfdcf3467248b07ab
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-11T13:25:59Z

    CAMEL-11263 - set component options on the endpoint first, and then let endpoint parameters override

commit f8a05797db9ff83f255c9232cfa48380e470b246
Author: Ramu <kkakarla@redhat.com>
Date:   2017-05-12T05:51:45Z

    camel-spring-dm is deprecated :CAMEL-11059

commit 9b2d5aacaf0a73759e075434bfd9151fcd36fa12
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

----
;;;","13/May/17 14:56;ronny.aerts.intris;I'm not familiar yet with pull requests. 

I re-cloned https://github.com/apache/camel.git to my local machine.
I created a pull request on the github website with number 1693. 
I locally executed a ""git pull https://github.com/apache/camel camel-2.19.x"" (as the mail suggest) but this went wrong because of ""Automatic merge failed; fix conflicts and then commit the result."" message. 

I don't know how to continue and my local folder is messed up. ;;;","16/May/17 12:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1693
;;;","16/May/17 12:54;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ReloadStrategySupport wrongly logs ""Routes with no id's detected""",CAMEL-11272,13071744,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ronny.aerts.intris,ronny.aerts.intris,13/May/17 10:37,16/May/17 12:49,14/Jul/23 05:50,16/May/17 12:49,2.19.0,,,,,2.19.1,2.20.0,,,camel-core,,,,0,easyfix,,"I tested the ""Auto reload XML files"" which is new in camel 2.19.0. 

All my xml routes in the camel context have an id and still I keep getting a ""Routes with no id's detected. Its recommended to assign id's to your routes so Camel can reload the routes correctly."" warning message in my logs when I update the camel context file. 

The ReloadStrategySupport.java says in line 138:
{code}
unassignedRouteIds |= route.hasCustomIdAssigned();
{code}
while this should be (mark the negation):
{code}
unassignedRouteIds |= !route.hasCustomIdAssigned();
{code}

This is a minor issues because this is only a warning message in the logs with no further impact. 
",,davsclaus,ronny.aerts.intris,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat May 13 11:55:07 UTC 2017,,,,,,,,,,,"0|i3exnj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/May/17 11:55;davsclaus;Can you provide a github PR with a fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISupport sanitizeUri partial support for RAW(),CAMEL-11269,13071545,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,paolo.antinori,paolo.antinori,paolo.antinori,12/May/17 14:07,13/May/17 08:26,14/Jul/23 05:50,13/May/17 08:10,2.19.0,,,,,2.17.7,2.18.4,2.19.1,2.20.0,camel-core,,,,0,,,"The usage of {{&}} symbol in a password wrapped by {{RAW()}} function breaks the masking of the password.

The result of this is a partial leak of the clear text password.

See this example:

{{password=RAW(abc&SUFFIX)}} is translated into {{password=xxxxxx&SUFFIX}}

",,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.jboss.org/browse/ENTESB-6796,,,,,,,,,,,9223372036854775807,,,Sat May 13 08:26:07 UTC 2017,,,,,,,Patch Available,,,,"0|i3ewfb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/May/17 14:12;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1690

    CAMEL-11269 - fix for URISupport and masking secrets

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-11269

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1690.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1690
    
----
commit 84ed271308af0d4d624a3636d85071f70c62c762
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-05-12T14:09:52Z

    CAMEL-11269 - fix for URISupport and masking secrets

----
;;;","13/May/17 08:26;githubbot;Github user paoloantinori closed the pull request at:

    https://github.com/apache/camel/pull/1690
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The ehcache component creates a separate CacheManager per producer route,CAMEL-11266,13071392,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,santa.85@gmail.com,santa.85@gmail.com,12/May/17 00:01,24/May/17 10:14,14/Jul/23 05:50,24/May/17 10:14,2.19.0,,,,,2.20.0,,,,camel-ehcache,,,,0,,,"The issue becomes clear if the developers declares more than one producer route with the attached ehcache config: multiple cache managers start contention of file lock and the startup fails.

{code:xml}
 <?xml version=""1.0"" encoding=""UTF-8""?>
<ehcache:config xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
                xmlns:ehcache=""http://www.ehcache.org/v3""
                xsi:schemaLocation=""http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.3.xsd"">

    <ehcache:persistence directory=""${java.io.tmpdir}/ehcache""></ehcache:persistence>

    <ehcache:cache alias=""cache1"" uses-template=""default-template"">
    </ehcache:cache>

    <ehcache:cache alias=""cache2"" uses-template=""default-template"">
        <ehcache:expiry>
            <ehcache:ttl unit=""minutes"">60</ehcache:ttl>
        </ehcache:expiry>
    </ehcache:cache>

    <ehcache:cache alias=""cache3"" uses-template=""default-template"">
        <ehcache:expiry>
            <ehcache:ttl unit=""minutes"">1</ehcache:ttl>
        </ehcache:expiry>
    </ehcache:cache>

    <ehcache:cache-template name=""default-template"">
        <ehcache:key-type>java.lang.String</ehcache:key-type>
        <ehcache:value-type>java.io.Serializable</ehcache:value-type>

        <ehcache:expiry>
            <ehcache:none/>
        </ehcache:expiry>

        <ehcache:resources>
            <ehcache:heap unit=""entries"">1000</ehcache:heap>
            <ehcache:disk persistent=""true"" unit=""MB"">10</ehcache:disk>
        </ehcache:resources>
    </ehcache:cache-template>
</ehcache:config>
{code}

resulting in:

{code}
Caused by: org.ehcache.StateTransitionException: Couldn't lock rootDir: /var/folders/gf/6psxkr_n7vl_qbhw8mktqqww0000gn/T/ehcache
	at org.ehcache.core.StatusTransitioner$Transition.failed(StatusTransitioner.java:235) ~[ehcache-3.2.2.jar:3.2.2 892e5c56c2a7100866de90dc7c2099a62fb6198b]
	at org.ehcache.core.EhcacheManager.init(EhcacheManager.java:588) ~[ehcache-3.2.2.jar:3.2.2 892e5c56c2a7100866de90dc7c2099a62fb6198b]
	at org.apache.camel.component.ehcache.EhcacheManager.start(EhcacheManager.java:66) ~[camel-ehcache-2.19.0.jar:2.19.0]
	at org.apache.camel.component.ehcache.EhcacheEndpoint.doStart(EhcacheEndpoint.java:65) ~[camel-ehcache-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:236) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1447) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:156) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:364) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) ~[camel-core-2.19.0.jar:2.19.0]
	... 28 common frames omitted
{code}

",,davsclaus,lb,santa.85@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 18 07:05:57 UTC 2017,,,,,,,,,,,"0|i3evhb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/May/17 07:55;davsclaus;Can you investigate with EHCache how this is intended to work? Not sure what we can do at Apache Camel to help with this.

And can you provide a sample project or unit test that reproduces this. We often dont have time to re-create your use-cases on our own;;;","13/May/17 15:01;santa.85@gmail.com;[~cibsen@e-ma.net] as described here (http://www.ehcache.org/documentation/3.3/tiering.html#disk, 2nd information bullet) a disk-tier enabled CacheManager cannot share the same configuration, a persistence directory must be dedicated to a single cache manager. Perhaps it is my lack of understanding of how to use this new component, but having a separate CacheManager and configuration per route seems like a bad design choice, this was not the case with camel-cache (also based on ehcache). I will provide a reduced sample test project that exemplifies the problematic.;;;","15/May/17 09:10;davsclaus;Yeah its better with a sample project to reproduce. And yeah sounds like it should be shared on component level,  like some of the other cache components do. ;;;","16/May/17 12:18;davsclaus;[~lb] wonder if you could take a look as you recently worked on this component;;;","16/May/17 12:26;lb;Will have a look.
As today you can achieve the same result by setting a custom cache manager via the  ""cacheManager"" option so that every endpoint will use the provided one.;;;","16/May/17 15:11;lb;I digged a little into the code and if we configure the cache manager on component level we'll lose the option to have different endpoint targeting different ehcache instances so the way to go in camel 2.19.x is to tell the endpoints to use a pre-configured cache manager using the cacheManager (I've updated the doc so it should appears soon on the website).

Example:

{code:java}
    from(""direct:cache"")
        .to(""ehcache:my-cache?cacheManager=#myCacheManager&keyType=java.lang.String&valueType=java.lang.String"");
{code}

From camel 2.20 the camel component will expose some methods to set defaults like:

{code:java}
    EhcacheComponent ehcache = new EhcacheComponent();
    ehcache.getConfiguration().setCacheManager(myCacheManager);
{code}

So if you put an object like that in the camel context/registry, you'll be able to write your route as:

{code:java}
    from(""direct:cache"")
        .to(""ehcache:my-cache?keyType=java.lang.String&valueType=java.lang.String"");
{code};;;","17/May/17 12:12;santa.85@gmail.com;Ok, thanks luca for this clarification and your example! I still think that if we use an autogenerated cacheManager based on XML configuration, we should reuse it for producer routes. The limitation of eh-cache file tier comes from building 2 cacheManagers with the same configuration on the same VM. Perhaps the component should hold a map of configuration url -> cacheManager instance, allowing the users to still leverage customizable cacheManagers per route, but having a less verbose configuration in case of simple applications.;;;","17/May/17 12:22;lb;Yeah that is something I've started working on :)

So I'm adding a CacheManager ""cache"" whose key is the configuration source (i.e. the uri or a Configuration instance, etc) but it requires a little bit of time to make it working properly as there is a change in the life-cycle of the cache manager and because of this behavioural change, it will be available in 2.20.

Note that 2.19.1 will have a way to set the CacheManager on component level like 

{code:java}
    EhcacheComponent ehcache = new EhcacheComponent();
    ehcache.setCacheManager(myCacheManager);

   from(""direct:cache"")
        .to(""ehcache:my-cache?keyType=java.lang.String&valueType=java.lang.String"");
{code}
;;;","18/May/17 07:05;santa.85@gmail.com;Awesome!;;;",,,,,,,,,,,,,,,,,,,,,,,,
Potential NPE in DefaultUndertowHttpBinding,CAMEL-11264,13071213,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,jamesnetherton,jamesnetherton,11/May/17 15:32,15/May/17 08:18,14/Jul/23 05:50,15/May/17 06:38,2.18.0,2.18.1,2.18.2,2.18.3,2.19.0,2.18.4,2.19.1,2.20.0,,camel-undertow,,,,0,,,"There's a potential NPE lurking in {{DefaultUndertowHttpBinding}}. We have this logic:

{code:java}
// we failed due to an exception so print it as plain text
StringWriter sw = new StringWriter();
PrintWriter pw = new PrintWriter(sw);
exception.getCause().printStackTrace(pw);
{code}

Unfortuantely, {{exception.getCause()}} is not always guaranteed to be present and may be {{null}}.",,githubbot,jamesnetherton,prashant2402,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 15 08:18:19 UTC 2017,,,,,,,,,,,"0|i3eudj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/May/17 16:20;prashant2402;I would like to work on this please.

Thanks
Prash;;;","12/May/17 16:48;githubbot;GitHub user prashant2402 opened a pull request:

    https://github.com/apache/camel/pull/1691

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

    Please review the fix.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/prashant2402/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1691.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1691
    
----
commit 087dc6490766d6676dd1ee58f265a1d19cbe1dd7
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

----
;;;","15/May/17 08:18;githubbot;Github user prashant2402 closed the pull request at:

    https://github.com/apache/camel/pull/1691
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Curcular dependency from buildtools to buildtools via license-plugin,CAMEL-11251,13070434,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/May/17 14:27,09/May/17 22:32,14/Jul/23 05:50,09/May/17 22:32,,,,,,,,,,build system,,,,0,,,"With CAMEL-11194 a circular dependency from buildtools to buildtools via license-plugin has been introduced.

Can be observed when running {{mvn -X compile}} in {{buildingtools}}:

{code}
[DEBUG] Populating class realm plugin>com.mycila:license-maven-plugin:3.0
[DEBUG]   Included: com.mycila:license-maven-plugin:jar:3.0
[DEBUG]   Included: org.apache.camel:camel-buildtools:jar:2.20.0-SNAPSHOT
{code}",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 09 22:32:24 UTC 2017,,,,,,,,,,,"0|i3eplb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/May/17 22:32;zregvart;Mycila Maven license plugin moved to separate profile to remove the circular dependency.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Language: MethodNotFoundException when calling interface method implemented by super class,CAMEL-11240,13070151,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,08/May/17 20:37,20/May/17 13:55,14/Jul/23 05:50,20/May/17 13:55,2.19.0,,,,,2.19.1,2.20.0,,,camel-core,,,,0,,,"After updating from 2.18.3 to 2.19.0 this test fails:

{code:java}
package test;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class MethodNotFoundExceptionTestSimplified extends CamelTestSupport {

    public static interface InterfaceEmpty {
        boolean isEmpty();
    }

    public static class SuperClazz {
        public boolean isEmpty() {
            return true;
        }
    }

    public static class Clazz extends SuperClazz implements InterfaceEmpty {
    }

    public static class MethodNotFoundExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.bean.isEmpty()}"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MethodNotFoundExceptionRoute();
    }

    @Test
    public void methodNotFoundExceptionException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""bean"", new Clazz());
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}{code}

with:

{noformat}
22:35:38.069 [Camel (camel-1) thread #0 - seda://in] ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-Redhawk-THINK-50332-1494275736472-0-3 on ExchangeId: ID-Redhawk-THINK-50332-1494275736472-0-4). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [seda://in                                                                     ] [      1025]
[route1            ] [choice1           ] [when[simple{Simple: ${headers.bean.isEmpty()}}]choice[]                       ] [        33]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:35)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 20 common frames omitted
22:35:38.070 [Camel (camel-1) thread #0 - seda://in] WARN org.apache.camel.component.seda.SedaConsumer - Error processing exchange. Exchange[]. Caused by: [org.apache.camel.language.bean.RuntimeBeanExpressionException - Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]]
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:35)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: test.MethodNotFoundExceptionTestSimplified$Clazz@61a86839 of type: test.MethodNotFoundExceptionTestSimplified$Clazz. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 20 common frames omitted
{noformat}

This is a simplified example, a real example are java.util.LinkedHashSet#isEmpty and isEmpty methods of guava collection classes.",,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11235,,,,,CAMEL-10396,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-08 20:37:44.0,,,,,,,,,,,"0|i3enuf:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Language: AmbiguousMethodCallException when calling method implemented by super class when method is defined by interface and abstract class,CAMEL-11235,13069892,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,08/May/17 07:23,21/May/17 17:00,14/Jul/23 05:50,20/May/17 13:55,2.19.0,,,,,2.19.1,2.20.0,,,camel-core,,,,0,,,"After updating from 2.18.3 to 2.19.0 the following simple expression:

{code}${headers.materialnumbers.size} != 0{code}

(materialnumbers is a LinkedHashSet) fails with:

{noformat}
2017-05-08 09:10:17,143 ERR [main] org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-RDDE102Y-57877-1494227416153-0-1 on ExchangeId: ID-RDDE102Y-57877-1494227416153-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int java.util.Set.size(), public abstract int java.util.AbstractCollection.size()]. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId    ProcessorId          Processor                                                                        Elapsed (ms)
[Read TB ] [Read TB           ] [                                                                              ] [        67]
[Read TB ] [choice1           ] [when[simple{Simple: ${headers.materialnumbers.size} != 0}]choice[]            ] [        62]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int java.util.Set.size(), public abstract int java.util.AbstractCollection.size()]. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:374) [camel-core-2.19.0.jar:2.19.0]
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int java.util.Set.size(), public abstract int java.util.AbstractCollection.size()]. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323) ~[camel-core-2.19.0.jar:2.19.0]
{noformat}",,davsclaus,githubbot,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11240,,,CAMEL-10396,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 21 17:00:57 UTC 2017,,,,,,,,,,,"0|i3em8v:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"08/May/17 07:41;pascalschumacher;As a workaround I tried to use this simple expression:

{code}${headers.materialnumbers.isEmpty()} != true{code}

This fails with:

{noformat}2017-05-08 09:32:07,322 ERR [main] org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-RDDE102Y-62492-1494228726331-0-1 on ExchangeId: ID-RDDE102Y-62492-1494228726331-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: [89784409, 89784410] of type: com.google.common.collect.RegularImmutableSet. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[Read Textbaustein ] [Read Textbaustein ] [                                                                              ] [        67]
[Read Textbaustein ] [choice1           ] [when[simple{Simple: ${headers.Materialnummern.isEmpty()} != true}]choice[]    ] [        62]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: isEmpty() on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: [89784409, 89784410] of type: com.google.common.collect.RegularImmutableSet. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:374) [camel-core-2.19.0.jar:2.19.0]
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: isEmpty() (with no parameters) not found on bean: [89784409, 89784410] of type: com.google.common.collect.RegularImmutableSet. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212) ~[camel-core-2.19.0.jar:2.19.0]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323) ~[camel-core-2.19.0.jar:2.19.0]
{noformat}

but com.google.common.collect.RegularImmutableSet has an isEmpty method (inherited from java.util.AbstractCollection).
;;;","08/May/17 07:54;davsclaus;Thanks for reporting. 

We had 2 RCs of 2.19.0. I suggest next time you spend time testing those ahead of time.
;;;","08/May/17 07:55;davsclaus;And can you build a unit test / sample project that reproduce this, as it seems you use some special map classes.;;;","08/May/17 08:25;pascalschumacher;Sorry, I missed that the problem does not seem to occur with java.util collections. But it occurs for guava collections (which are pretty popular imho).

To reproduce use:

{code:xml}
<dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>21.0</version>
</dependency>
{code}

{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import com.google.common.collect.ImmutableSet;

public class AmbiguousMethodCallExceptionTest extends CamelTestSupport {

    public static class AmbiguousMethodCallExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.set.size} != 0"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new AmbiguousMethodCallExceptionRoute();
    }

    @Test
    public void ambiguousMethodCallException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", ImmutableSet.of(""a""));
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}
{code}

{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import com.google.common.collect.ImmutableSet;

public class MethodNotFoundExceptionTest extends CamelTestSupport {

    public static class MethodNotFoundExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.set.isEmpty()} != true"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MethodNotFoundExceptionRoute();
    }

    @Test
    public void methodNotFoundExceptionException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", ImmutableSet.of(""a""));
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}{code}
;;;","08/May/17 17:44;pascalschumacher;This issue can also be replicated with java.util classes, e.g. using LinkedHashSet:

{code}
package test;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class AmbiguousMethodCallExceptionTest extends CamelTestSupport {

  public static class AmbiguousMethodCallExceptionRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
      from(""seda:in"").choice().when(simple(""${headers.set.size} != 0"")).to(""mock:out"");
    }
  }

  @Produce(uri = ""seda:in"")
  private ProducerTemplate in;

  @EndpointInject(uri = ""mock:out"")
  private MockEndpoint out;

  @Override
  protected RouteBuilder createRouteBuilder() {
    return new AmbiguousMethodCallExceptionRoute();
  }

  @Test
  public void ambiguousMethodCallException() throws Exception {
    out.expectedMessageCount(1);

    Set<String> set = new LinkedHashSet<>();
    set.add(""a"");
    ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", set);
    in.send(exchangeBuilder.build());

    out.assertIsSatisfied();
  }
}
{code}

{code}
package test;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class MethodNotFoundExceptionTest extends CamelTestSupport {

    public static class MethodNotFoundExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.set.isEmpty()} != true"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MethodNotFoundExceptionRoute();
    }

    @Test
    public void methodNotFoundExceptionException() throws Exception {
        out.expectedMessageCount(1);

        Set<String> set = new LinkedHashSet<>();
        set.add(""a"");
        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""set"", set);
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}
{code};;;","08/May/17 19:06;pascalschumacher;Seems like this was caused by https://github.com/apache/camel/commit/8889b827193d6c5b08c801a4dbb457a43af2f958 / [CAMEL-10396]. When I revert this commit it works again.;;;","08/May/17 20:39;pascalschumacher;I created a new issue for the MethodNotFoundException: https://issues.apache.org/jira/browse/CAMEL-11240;;;","08/May/17 21:06;pascalschumacher;Simplified example:

{code:java}
package test;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class AmbiguousMethodCallExceptionTestSimplified extends CamelTestSupport {

    public static interface InterfaceSize {
        int size();
    }

    public static abstract class AbstractClassSize {
        public abstract int size();
    }

    public static class SuperClazz extends AbstractClassSize implements InterfaceSize {
        public int size() {
            return 1;
        }
    }

    public static class Clazz extends SuperClazz {
    }

    public static class AmbiguousMethodCallExceptionRoute extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""seda:in"").choice().when(simple(""${headers.bean.size} != 0"")).to(""mock:out"");
        }
    }

    @Produce(uri = ""seda:in"")
    private ProducerTemplate in;

    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new AmbiguousMethodCallExceptionRoute();
    }

    @Test
    public void ambiguousMethodCallException() throws Exception {
        out.expectedMessageCount(1);

        ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader(""bean"", new Clazz());
        in.send(exchangeBuilder.build());

        out.assertIsSatisfied();
    }
}
{code}

fails with:

{noformat}
23:05:37.056 [Camel (camel-1) thread #0 - seda://in] ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-Redhawk-THINK-50474-1494277535444-0-3 on ExchangeId: ID-Redhawk-THINK-50474-1494277535444-0-4). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [seda://in                                                                     ] [      1027]
[route1            ] [choice1           ] [when[simple{Simple: ${headers.bean.size} != 0}]choice[]                       ] [        35]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60)
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50)
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 22 common frames omitted
23:05:37.057 [Camel (camel-1) thread #0 - seda://in] WARN org.apache.camel.component.seda.SedaConsumer - Error processing exchange. Exchange[]. Caused by: [org.apache.camel.language.bean.RuntimeBeanExpressionException - Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]]
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: size on null due to: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:327)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:115)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:139)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126)
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118)
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:2490)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:60)
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:50)
	at org.apache.camel.language.simple.ast.BinaryExpression$5.evaluate(BinaryExpression.java:233)
	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:37)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:85)
	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public abstract int test.AmbiguousMethodCallExceptionTestSimplified$InterfaceSize.size(), public abstract int test.AmbiguousMethodCallExceptionTestSimplified$AbstractClassSize.size()]. Exchange[]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:189)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:160)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:69)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:212)
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:323)
	... 22 common frames omitted
{noformat};;;","20/May/17 11:28;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1703

    CAMEL-11235: Proposal to fix an issue where a method inherited from a superclass overrides a superinterface method

    This PR proposes a fix for [CAMEL-11235](https://issues.apache.org/jira/browse/CAMEL-11235).
    
    Basically, the `BeanInfo` introspection mechanism traverses the single rooted class hierarchy collecting overrides first, and then proceed with interfaces.
    I've also created a new overload of `ObjectHelper.isOverridingMethod(...)` to deal with the case where a method inherited from a class [overrides a superinterface method](https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.8.1).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1703.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1703
    
----
commit 0ddb6a7baf2e092304ec7644b655371bdac28cd5
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T10:18:57Z

    CAMEL-11235: Resolved an issue where a method inherited from a superclass overrides a superinterface method

commit 3ec1b9e7e302031212794138ea7d977d90e40594
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-05-20T11:13:15Z

    CAMEL-11235: Used the new override from getMethodInfo(...)

----
;;;","20/May/17 13:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1703
;;;","20/May/17 14:22;pascalschumacher;Thank you very much for fixing this!;;;","21/May/17 17:00;davsclaus;Yeah thanks to contribution by
https://github.com/aldettinger;;;",,,,,,,,,,,,,,,,,,,,,
NullPointerException while trying to get the Route Status on startup,CAMEL-11234,13069564,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,onimurasame,onimurasame,05/May/17 20:03,16/May/17 10:16,14/Jul/23 05:50,16/May/17 08:26,2.18.2,,,,,2.18.4,2.19.1,2.20.0,,camel-core,,,,0,,,"Using a class that extends EventNotifierSupport, we advise a route by adding a processor in between two outputs.

It looks like this

from().processor().bean().processor().processor(advised),to().

To add the adviceWith processor we listen to the routeAdded event and advice the route.

While Camel is starting up there is a line (line number 2966) in the DefaultCamelContext that loops through the available routes for later logging the amount of routes started in the context. This calls for a method ( if(this.getRouteStatus(route.getId()).isStarted()) { ) that may return null if there are no routes running while this is being done, so IT WILL throw a NullPointerException.

Since I'm advising routes while the context is being started, the route gets stopped and restarted, meanwhile the aforementioned method gets called and BUM.... NullPointerException.

Here's the stacktrace:

org.apache.camel.spring.boot.CamelSpringBootInitializationException: java.lang.NullPointerException
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:124) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:41) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.springframework.boot.SpringApplication$run.call(Unknown Source) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48) [groovy-all-2.4.7.jar:2.4.7]
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113) [groovy-all-2.4.7.jar:2.4.7]
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125) [groovy-all-2.4.7.jar:2.4.7]
	at com.my.app.ApplicationMain.main(ApplicationMain.groovy:12) [main/:?]
Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2943) ~[camel-core-2.18.2.jar:2.18.2]
	at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:141) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:116) ~[camel-spring-boot-2.18.2.jar:2.18.2]
	... 17 more
",Spring Boot 1.5.1,davsclaus,githubbot,onimurasame,prashant2402,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 16 10:16:10 UTC 2017,,,,,,,,,,,"0|i3ek7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/May/17 07:55;davsclaus;Contributions as a github PR is welcome to attempt to fix this
http://camel.apache.org/contributing;;;","15/May/17 08:26;prashant2402;I've started to look at fixing this.;;;","15/May/17 11:44;githubbot;GitHub user prashant2402 opened a pull request:

    https://github.com/apache/camel/pull/1696

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

    Please review the fix.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/prashant2402/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1696.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1696
    
----
commit 087dc6490766d6676dd1ee58f265a1d19cbe1dd7
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T16:35:24Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 44cf72c2e2d0d7bc32fdfb3961e491385e65ec2a
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-12T17:07:30Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit 95db007a8a502e5e695e556641ebbc8fd0bfab08
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-13T16:20:35Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit eeb70213ce8aaffbf893d77968fdbc27a00f9c7e
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-14T20:49:34Z

    CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding

commit c6261fedc94a6156df0d04091ba5c4ce3d0b5dd2
Author: Prasanth Pagolu <ppagolu@redhat.com>
Date:   2017-05-15T11:37:29Z

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

----
;;;","15/May/17 12:11;githubbot;Github user prashant2402 closed the pull request at:

    https://github.com/apache/camel/pull/1696
;;;","15/May/17 12:58;githubbot;GitHub user prashant2402 opened a pull request:

    https://github.com/apache/camel/pull/1697

    CAMEL-11234: NullPointerException while trying to get the Route Status on startup

    Please review the fix.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/prashant2402/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1697.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1697
    
----

----
;;;","16/May/17 08:26;davsclaus;Thanks for the PR;;;","16/May/17 10:16;githubbot;Github user prashant2402 closed the pull request at:

    https://github.com/apache/camel/pull/1697
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix camel-example-spring-boot-rest-jpa example,CAMEL-11232,13069413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,zregvart,zregvart,05/May/17 10:58,05/May/17 11:09,14/Jul/23 05:50,05/May/17 11:09,,,,,,2.20.0,,,,,,,,0,,,The tests present in {{camel-example-spring-boot-rest-jpa}} example are failing.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-05 10:58:41.0,,,,,,,,,,,"0|i3ejaf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite recursion if exception happens inside exception handler,CAMEL-11229,13069149,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cschneider,cschneider,04/May/17 14:00,11/May/17 20:30,14/Jul/23 05:50,11/May/17 20:30,2.18.3,,,,,2.18.4,2.19.1,2.20.0,,camel-core,,,,0,,,"Use an onException handler like this:

onException(Throwable.class).to(""direct:handle_er"");
from(""direct:handle_er"")..throwException(new RuntimeException());

If the main route throws an exception then this will create an infinite recursion of exceptions.

I would expect that camel handles the exception inside an onException handler differently. So the onException is not called again.

",,cschneider,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11255,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 11 11:22:12 UTC 2017,,,,,,,,,,,"0|i3ehnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/May/17 11:22;davsclaus;Thanks Christian for the initial work and reporting.

It was a bit of rare issue since it has been working list this in Camel for many many years, so its a combo when you did as you did.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple expression colon in sql-stored component,CAMEL-11227,13068789,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,snurmine,snurmine,03/May/17 14:36,08/May/17 14:26,14/Jul/23 05:50,08/May/17 12:35,,,,,,2.18.4,2.19.1,2.20.0,,camel-sql,,,,0,,,"Simple expression in sql-stored does not support colon
See for details 
https://stackoverflow.com/questions/43607569/simple-expression-in-sql-stored-component",,davsclaus,githubbot,snurmine,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 08 14:26:48 UTC 2017,,,,,,,,,,,"0|i3effz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/May/17 15:01;snurmine;https://github.com/apache/camel/pull/1673;;;","08/May/17 12:35;davsclaus;Thanks for the PR;;;","08/May/17 14:26;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/1673
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in component creation ,CAMEL-11225,13068672,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,03/May/17 07:45,09/May/17 11:14,14/Jul/23 05:50,09/May/17 11:14,,,,,,2.18.4,2.19.1,2.20.0,,camel-core,camel-spring,,,0,,,"There are circumstances in which the component creation could enter in a deadlock, let's have a look at the following spring example:  

{code:xml}
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
 
  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
    <route id=""twitter-route"">
      <from id=""twitter"" uri=""twitter://timeline/home?type=polling""/>
      <log id=""route-log"" message=""Got ${body}""/>
    </route>
  </camelContext>
 
</beans>
{code}

The critical part is:

{code:xml}
  <from id=""twitter"" uri=""twitter://timeline/home?type=polling""/>
{code}

What happens is that:
- because there is an id, camel registers a CamelEndpointFactoryBean to the spring application contex
- the endpoint is then resolved which involve the  instantiation of the component (twitter in this case) which invoke CamelContext.getComponent
- when the component is being created it then uses the component resolver which goes down to the registry to find out if the requested component is already there
- as in the registry there is a bean factory with the same name as the component we want to create, spring invokes the factory which then goes down to CamelContext.getComponent
- then deadlock ",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-05-03 07:45:05.0,,,,,,,,,,,"0|i3eepz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-netty4-http cannot have a URL larger than 409 bytes by default, rather than the assumed 4096 byte limit",CAMEL-11221,13068083,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,wayne.gilbert,wayne.gilbert,01/May/17 06:44,08/May/17 13:04,14/Jul/23 05:50,08/May/17 12:47,2.18.3,,,,,2.18.4,2.19.1,2.20.0,,camel-netty4-http,,,,0,,,"https://github.com/apache/camel/blob/camel-2.19.x/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/HttpServerSharedInitializerFactory.java

In function ""initChannel"" the call to new request decoder

pipeline.addLast(""decoder"", new HttpRequestDecoder(409, configuration.getMaxHeaderSize(), 8192));

409, should probably be 4096,

This is set when using the init-method start on the bean below:

	<spring:bean id=""httpServer"" class=""org.apache.camel.component.netty4.http.DefaultNettySharedHttpServer""
          init-method=""start"" destroy-method=""stop"">
		<spring:property name=""nettyServerBootstrapConfiguration"" ref=""configuration""/>
	</spring:bean>",,davsclaus,githubbot,wayne.gilbert,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 08 13:04:25 UTC 2017,,,,,,,,,,,"0|i3eb33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/May/17 06:56;wayne.gilbert;Just to add more detail to this, basically when the URL is large, then it attempts to match the URL, it ends up matching on a URL of /bad-request vs the routes in the context, so never matches and returns a 404.;;;","04/May/17 13:47;davsclaus;Yes it should be 4096. You are welcome to provide a fix as a github PR
https://github.com/apache/camel/;;;","08/May/17 08:39;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1677

    CAMEL-11221- fix typo

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11221

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1677.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1677
    
----
commit 57247f888158fb39d29c569f161d6674cce997a6
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-08T08:38:18Z

    CAMEL-11221- fix typo

----
;;;","08/May/17 12:47;davsclaus;Thanks for reporting and the PR;;;","08/May/17 13:04;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1677
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Kafka component commits offsets in case of exceptions,CAMEL-11215,13067537,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rogerhill01234,rogerhill01234,27/Apr/17 21:57,25/May/17 12:38,14/Jul/23 05:50,25/May/17 12:38,2.18.3,,,,,2.19.1,2.20.0,,,camel-kafka,,,,0,,,"My processor in the router throws an exception but the Kafka component still commits the offsets. 

My route: (heavily redacted and modified)
{code:title=Route|borderStyle=solid}
from( ""kafka://blah-blah"" ).routeId(""MyRoute"")
                .convertBodyTo( MyData.class )
                .process( ""MyProcessor"" )
                .to( ""DestinationProcessor"" );
{code}
The exception I get: 
{code:title=Exception|borderStyle=solid}
        at com.mycompany.MyProcessor.process(MyProcessor.java:152)
        at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103)
        at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
        at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.run(KafkaConsumer.java:140)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.sql.SQLException: Exception occurred while getting connection: oracle.ucp.UniversalConnectionPoolException: Cannot get Connection from Datasource: java.sql.SQLException: Listener refused the connection with the following error:
ORA-12514, TNS:listener does not currently know of service requested in connect descriptor
{code}
Here is the corresponding Kafka component code:(KafkaConsumer.java) -This part of the code does not seem to handle the exception. The exception handler simply eats up the exception and the fall through code happily commits the offsets. Is this a bug? or am I missing something?

{code:title=KafkaConsumer.java|borderStyle=solid}
while (isRunAllowed() && !isStoppingOrStopped() && !isSuspendingOrSuspended()) {
                    ConsumerRecords<Object, Object> allRecords = consumer.poll(pollTimeoutMs);
                    for (TopicPartition partition : allRecords.partitions()) {
                        List<ConsumerRecord<Object, Object>> partitionRecords = allRecords
                            .records(partition);
                        for (ConsumerRecord<Object, Object> record : partitionRecords) {
                            if (LOG.isTraceEnabled()) {
                                LOG.trace(""partition = {}, offset = {}, key = {}, value = {}"", record.partition(), record.offset(), record.key(), record.value());
                            }
                            Exchange exchange = endpoint.createKafkaExchange(record);
                            try {
                                processor.process(exchange);
                            } catch (Exception e) {
                                getExceptionHandler().handleException(""Error during processing"", exchange, e);
                            }
                        }
                        // if autocommit is false
                        if (endpoint.getConfiguration().isAutoCommitEnable() != null
                            && !endpoint.getConfiguration().isAutoCommitEnable()) {
                            long partitionLastoffset = partitionRecords.get(partitionRecords.size() - 1).offset();
                            consumer.commitSync(Collections.singletonMap(
                                partition, new OffsetAndMetadata(partitionLastoffset + 1)));
                        }
                    }
                }
{code}

Any insights are appreciated.
",,davsclaus,rogerhill01234,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 23 13:07:29 UTC 2017,,,,,,,,,,,"0|i3e7pr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/May/17 10:09;davsclaus;We should introduce an option to break out on first exception, then users can turn this on | off.

Just mind about poison message problem if the same message keeps failing, then the offset wont advance. So you need some way of dealing with that.;;;","15/May/17 11:02;davsclaus;And btw you can use Camel's error handler to try to handle such errors with retries, then you can possible resolve intermediate errors.;;;","16/May/17 07:23;davsclaus;I created a branch with a potential fix
https://github.com/apache/camel/tree/CAMEL-11215

You are welcome to checkout and build JARs from this branch and test on your system. You need to set the option breakOnFirstError=true on your Camel kafka endpoint uris to turn this functionality on. ;;;","16/May/17 07:25;davsclaus;When an unhandled exception is thrown the consumer will now now re-connect with one poll timeout as delay in between (default 5 sec). This allows a bit of backoff between retries. Also the last good offset is synced beforehand so the consumer should start with the failed message again;;;","16/May/17 20:20;rogerhill01234;Thanks Claus!
We will checkout that branch and test it.
When will this be available on the release? 
;;;","23/May/17 12:16;davsclaus;Roger, did you get a chance to test this?

It will only be in a new release if it has been tested and we get some feedback on this.;;;","23/May/17 13:07;rogerhill01234;Claus,
No. We have not got a chance to test it yet. We had changed our architecture to bypass this problem. We will get to this sometime in the future. Thanks for providing the fix quickly.
Roger;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-grpc doesn't terminate channel when producer stops ,CAMEL-11213,13067397,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dmvolod,dmvolod,27/Apr/17 14:22,28/Apr/17 06:11,14/Jul/23 05:50,28/Apr/17 06:11,,,,,,2.19.0,,,,camel-grpc,,,,0,,,,,davsclaus,dmvolod,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 28 06:11:51 UTC 2017,,,,,,,,,,,"0|i3e6un:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Apr/17 14:28;dmvolod;This can cause memory leaks;;;","27/Apr/17 14:31;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1667

    CAMEL-11213: camel-grpc doesn't terminate channel when producer stops

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-11213

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1667.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1667
    
----

----
;;;","27/Apr/17 14:39;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/1667
;;;","28/Apr/17 06:11;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't allow Salesforce HTTP client to stop with outstanding requests,CAMEL-11212,13067352,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,27/Apr/17 12:34,08/Jun/17 13:04,14/Jul/23 05:50,28/Apr/17 16:01,,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"The Salesforce component uses Jetty asynchronous client throughout. There is a race condition that might occur if the component's HTTP client is stopped while one or more requests are still in progress. The result of which could be inconsistencies in execution.
This was seen in the implementation of the connectivity validation in the ping check which creates the {{SalesforceHttpClient}} and {{DefaultRestClient}} and starts/stops then in a small time frame.
",,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11386,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 28 15:56:28 UTC 2017,,,,,,,,,,,"0|i3e6kn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Apr/17 12:42;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1666

    CAMEL-11212 Don't allow Salesforce HTTP client to stop with outstanding requests

    Submitted for review, it seems trivial but could have repercussions if I missed the locking semantics.
    Thank you for taking a look 🥇  
    
    This introduces a `Phaser` to await for any in-flight requests to complete before the client is allowed to stop.
    
    This should not block as long as the `BufferingResponseListener::onComplete` is invoked at the end of every request. And that is guaranteed by the `CompleteListener::onComplete` contract.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11212

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1666.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1666
    
----
commit e5b137d4b2ec9371a6f8a0a7fca3849730127302
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-04-27T12:40:18Z

    CAMEL-11212 Don't allow Salesforce HTTP client ...
    
    ...to stop with outstanding requests
    
    This introduces a `Phaser` to await for any in-flight requests to
    complete before the client is allowed to stop.
    
    This should not block as long as the
    `BufferingResponseListener::onComplete` is invoked at the end of every
    request. And that is guaranteed by the `CompleteListener::onComplete`
    contract.

----
;;;","28/Apr/17 15:56;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1666
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't return null for getErrors in SalesforceException,CAMEL-11210,13067314,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,27/Apr/17 10:02,28/Apr/17 16:14,14/Jul/23 05:50,28/Apr/17 16:14,,,,,,2.19.0,,,,camel-salesforce,,,,0,,,The {{SalesforceException::getErrors}} should not be returning {{null}} {{List<RestError>}} but an empty {{List}} if there {{errors}} field is {{null}}.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-04-27 10:02:07.0,,,,,,,,,,,"0|i3e6c7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce verifier should not throw exceptions,CAMEL-11202,13067014,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,26/Apr/17 10:35,27/Apr/17 12:28,14/Jul/23 05:50,26/Apr/17 10:45,2.19.0,,,,,2.20.0,,,,camel-salesforce,,,,0,,,"`SalesforceComponentVerifier::verifyConnectivity` throws `RuntimeException` on `Exception`s caught. This makes for a bad contract.
",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 26 10:45:58 UTC 2017,,,,,,,,,,,"0|i3e4hj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Apr/17 10:45;zregvart;Throwing of the exception is simply removed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-reactive-streams - Cannot create service in spring-boot,CAMEL-11201,13067013,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,26/Apr/17 10:34,04/May/17 14:05,14/Jul/23 05:50,04/May/17 14:05,2.19.0,,,,,2.19.0,,,,camel-reactive-streams,,,,0,,,"I've tried to run a reactive streams application on the preview of v. 2.19.0 and found a deadlock while instantiating the reactive-streams service (the starter code and the CamelReactiveStreams class wait one for the other).

It's strange, since the reactive streams examples are based on spring-boot. I'm investigating. This may require a new release of camel 2.19.0.",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 04 14:05:12 UTC 2017,,,,,,,,,,,"0|i3e4hb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Apr/17 13:04;nferraro;The problem happens whenever the user decide not to use the CamelReactiveStreamService, i.e. not injecting it in any managed bean. The examples worked because it was Autowired somewhere in the code. Even if it's injected in the code, sometimes (depending on the creation order of beans in the registry) it is not created in the expected order and prevents the application startup.  

This has been fixed in the master branch, but I think it's important to have it in 2.19.0.;;;","04/May/17 14:05;nferraro;The fix is present in the 2.19.0 CR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenTracing trace context should cope with Hystrix using separate thread,CAMEL-11198,13066713,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,garybrown,garybrown,25/Apr/17 14:50,23/May/17 12:23,14/Jul/23 05:50,23/May/17 12:23,2.19.0,,,,,2.19.0,2.20.0,,,camel-hystrix,,,,0,,,"When using OpenTracing with Hystrix, the default Hystrix configuration uses a separate thread for the outbound request.

Currently the trace context from the route is not carried across to this new thread, causing the outbound request to be recorded in a separate trace instance.

Need to ensure that the trace context is carried to the new thread/exchange.

As a workaround, the Hystrix configuration property {{executionIsolationStrategy}} should be set to ""SEMAPHORE"".",,davsclaus,garybrown,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 23 12:23:32 UTC 2017,,,,,,,,,,,"0|i3e2mn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Apr/17 16:58;githubbot;GitHub user objectiser opened a pull request:

    https://github.com/apache/camel/pull/1662

    CAMEL-11198 Fix issue with propagating the trace context when using h…

    …ystrix

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/objectiser/camel CAMEL-11198

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1662.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1662
    
----
commit 667c38992dad2475866bfdd9d492f4df382c5a9e
Author: Gary Brown <gary@brownuk.com>
Date:   2017-04-26T16:37:52Z

    CAMEL-11198 Fix issue with propagating the trace context when using hystrix

----
;;;","26/Apr/17 17:03;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1662
;;;","26/Apr/17 17:03;davsclaus;Fixed on master, need to merge to 2.19.x branch after the release;;;","23/May/17 12:23;davsclaus;We re-cut the release;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa consumer fails to poll after database connection is lost,CAMEL-11197,13066658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamestr,jamestr,25/Apr/17 11:45,13/May/17 09:02,14/Jul/23 05:50,13/May/17 09:02,2.17.1,,,,,2.17.7,2.18.4,2.19.0,,camel-jpa,,,,0,,,"Under a Hibernate JPA implementation with a Tomcat Connection pool set to test connections ""on borrow"", the camel-jpa consumer would poll normally until the underlying database connection was lost and then continue to report a PersistenceException at each poll.

The entityManager instance in camel-jpa needs to be closed and rebuilt in order to force a new connection to be obtained from the connection pool.

",Hibernate JPA with Tomcat Connection Pool data source,davsclaus,githubbot,jamestr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Sat May 13 09:02:06 UTC 2017,,,,,,,Patch Available,,,,"0|i3e2af:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Apr/17 11:45;jamestr;Patch available:  https://github.com/apache/camel/pull/1658;;;","25/Apr/17 11:53;jamestr;Discussion and stack trace at http://camel.465427.n5.nabble.com/camel-jpa-and-PersistenceException-tp5795205.html;;;","26/Apr/17 17:09;davsclaus;Need to merge to 2.19.x branch after the release;;;","26/Apr/17 17:13;davsclaus;Thanks for the PR;;;","26/Apr/17 18:00;githubbot;Github user jamesET closed the pull request at:

    https://github.com/apache/camel/pull/1658
;;;","13/May/17 09:02;davsclaus;We re-cut 2.19.0 so its included.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CoAP component starts redundant server instance,CAMEL-11177,13065525,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jamesnetherton,jamesnetherton,20/Apr/17 12:57,21/Apr/17 07:20,14/Jul/23 05:50,21/Apr/17 07:20,2.18.3,2.19.0,,,,2.19.0,,,,camel-coap,,,,0,,,"If I configure a simple camel-coap consumer endpoint like:

{code}
from(""coap://localhost:8080/foo"")
{code}

Logging reveals that two server instances were started:

{code}
[org.eclipse.californium.core.network.CoapEndpoint] (pool-3-thread-1) Stopping endpoint at address 0.0.0.0/0.0.0.0:52697
[org.eclipse.californium.core.network.CoapEndpoint] (pool-3-thread-1) Stopping endpoint at address 0.0.0.0/0.0.0.0:8080 
{code}

[This|https://github.com/apache/camel/blob/master/components/camel-coap/src/main/java/org/apache/camel/coap/CoAPComponent.java#L148-L153] appears to be the logic that causes the behaviour. 

Do we need it? It seems to be a duplicate of what already happens in {{createConsumer()}}. Also, the creation of a default server can easily be done in the {{createServer()}} method, I don't think we need it in {{doStart()}}.",,davsclaus,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 21 07:19:07 UTC 2017,,,,,,,,,,,"0|i3dvb3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Apr/17 13:46;davsclaus;Yeah that code seems odd, you are welcome to provide a PR;;;","20/Apr/17 15:55;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1647

    CAMEL-11177: CoAP component starts redundant server instance

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11177

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1647.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1647
    
----
commit 0ff5785a9e6034d8452cb1021b054211955ccebb
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-04-20T15:31:54Z

    CAMEL-11177: CoAP component starts redundant server instance

----
;;;","21/Apr/17 07:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1647
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Integration tests for camel-restdsl-swagger-plugin fail on JDK 9,CAMEL-11173,13065437,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Apr/17 08:31,20/Apr/17 18:03,14/Jul/23 05:50,20/Apr/17 18:03,2.19.0,,,,,2.19.0,,,,tooling,,,,0,,,"The integration tests when run on JDK 9 fail with:
{code}
[INFO] --- maven-invoker-plugin:2.0.0:verify (integration-test) @ camel-restdsl-swagger-plugin ---
[INFO] -------------------------------------------------
[INFO] Build Summary:
[INFO]   Passed: 0, Failed: 2, Errors: 0, Skipped: 0
[INFO] -------------------------------------------------
[ERROR] The following builds failed:
[ERROR] *  simple/pom.xml
[ERROR] *  customized/pom.xml
{code}

See [build 185|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/185/org.apache.camel$camel-restdsl-swagger-plugin/console]",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 20 18:03:40 UTC 2017,,,,,,,,,,,"0|i3durj:",9223372036854775807,Unit Test Broken,,,,,,,,,,,,,,,,,,,"20/Apr/17 08:44;zregvart;This is OK on in my environment, I run:
{code}
$ docker run -it -v $HOME/.m2:/tmp/.m2:z -v `pwd`:/w:z -u $(id -u):$(id -u):$(id -g) -e HOME=/tmp -e USER=$(whoami) -e MAVEN_OPTS=""-Xms3072m -Xmx3072m -Dmaven.artifact.threads=5 -Duser.home=/tmp"" docker.io/maven:3.5.0-jdk-9 bash
I have no name!@...:/$ cd /w/tooling/maven/camel-restdsl-swagger-plugin
I have no name!@...:/w/tooling/maven/camel-restdsl-swagger-plugin$ mvn clean verify
{code}

Let's wait for the CI to pass to resolve this.;;;","20/Apr/17 18:03;zregvart;Fixed and verified in CI (see [build 189|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/189/org.apache.camel$camel-restdsl-swagger-plugin/console]);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zookeeper-master - RAW() and child endpoint issue,CAMEL-11171,13065139,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,paolo.antinori,paolo.antinori,19/Apr/17 15:55,20/Apr/17 08:02,14/Jul/23 05:50,20/Apr/17 07:49,2.19.0,,,,,2.19.0,,,,,,,,0,,,"{{camel-zookeeper-master}} component has an issue with the usage of {{RAW()}} function in child endpoint configuration.

{{zookeeper-master://name:sftp://myhost/inbox?password=RAW(_BEFORE_AMPERSAND_&_AFTER_AMPERSAND_)&username=jdoe}} will mishandle the the content of {{RAW()}} , when at some point the escaped ampersand symbol is unescaped, and a wrong set of parameters is used.

The attached PR fixed the issues and adds a unit test to verify the behavior before and after the fix.
",,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.jboss.org/browse/ENTESB-6731,,Patch,,,,,,,,,9223372036854775807,,,Thu Apr 20 08:02:09 UTC 2017,,,,,,,,,,,"0|i3dti7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Apr/17 15:58;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1642

    CAMEL-11171 - camel-zookeeper-master, fix to support RAW() function

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-11171

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1642.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1642
    
----
commit 2cd3287e07c6e25976f5d87b8c6c5356ca8dc7a1
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-04-19T15:56:40Z

    CAMEL-11171 - camel-zookeeper-master, fix to support RAW() function

----
;;;","20/Apr/17 08:02;githubbot;Github user paoloantinori closed the pull request at:

    https://github.com/apache/camel/pull/1642
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException may silently be ignored in InProducer,CAMEL-11139,13063455,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,12/Apr/17 12:18,13/Apr/17 08:46,14/Jul/23 05:50,12/Apr/17 19:02,2.18.3,,,,,2.17.7,2.18.4,2.19.0,,camel-core,,,,0,,,"[ProducerCache.doInProducer()|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java#L348] may be called with null exchange. 

The javadoc says

{code}
    /**
     * Sends an exchange to an endpoint using a supplied callback, using the synchronous processing.
     * <p/>
     * If an exception was thrown during processing, it would be set on the given Exchange
     *
     * @param endpoint  the endpoint to send the exchange to
     * @param exchange  the exchange, can be <tt>null</tt> if so then create a new exchange from the producer
     * @param pattern   the exchange pattern, can be <tt>null</tt>
     * @param callback  the callback
     * @return the response from the callback
     * @see #doInAsyncProducer(org.apache.camel.Endpoint, org.apache.camel.Exchange, org.apache.camel.ExchangePattern, org.apache.camel.AsyncCallback, org.apache.camel.AsyncProducerCallback)
     */
    public <T> T doInProducer(Endpoint endpoint, Exchange exchange, ExchangePattern pattern, ProducerCallback<T> callback) {
{code}

The exchange is however never created, which may result in a null return from ProducerTemplate and a possible exception silently being ignored.",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 13 08:46:05 UTC 2017,,,,,,,,,,,"0|i3dj4v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Apr/17 13:13;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1618

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InPro…

    …ducer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11139

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1618.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1618
    
----
commit e321440dd1b68c93293958343cbcce722c6b0943
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-04-12T12:43:39Z

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InProducer

----
;;;","12/Apr/17 13:14;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1619

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InPro…

    …ducer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11139m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1619.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1619
    
----
commit a8ff1af635ef982facdba7863c22a0d113153edb
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-04-12T12:43:39Z

    [CAMEL-11139] ClassNotFoundException may silently be ignored in InProducer

----
;;;","12/Apr/17 19:02;davsclaus;Thanks for the PR;;;","13/Apr/17 08:45;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1619
;;;","13/Apr/17 08:46;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1618
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumerTemplate - If cache is full then polling consumer should be stopped to not leak resources,CAMEL-11138,13063438,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/17 10:25,12/Apr/17 11:00,14/Jul/23 05:50,12/Apr/17 11:00,2.17.6,2.18.3,,,,2.17.7,2.18.4,2.19.0,,camel-core,,,,0,,,"When using consumer template with polling consumer and when you are done using it, its put back into the cache, but if the cache is full, then we should stop the consumer so it does not dangle and its resources are not released, such as threads etc.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-04-12 10:25:23.0,,,,,,,,,,,"0|i3dj13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - Unable to configure https4 properties in spring-boot,CAMEL-11134,13063208,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,11/Apr/17 14:15,11/Apr/17 16:17,14/Jul/23 05:50,11/Apr/17 16:17,,,,,,2.19.0,,,,camel-http4,,,,0,,,"The https4 component is not published in the registry, so the configuration added through application.properties does not change the component behavior.

There are two tests in camel-jetty9-starter and camel-netty4-http-starter currently @Ignored because of this issue.",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 11 16:17:58 UTC 2017,,,,,,,,,,,"0|i3dhlz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Apr/17 16:17;nferraro;There was a issue in the mojo and also the metadata were reporting the schema being ""http4s"". The correct schema is ""https4"".;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer consumer - Should call start/stop of the processor,CAMEL-11131,13062884,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/17 12:49,10/Apr/17 13:53,14/Jul/23 05:50,10/Apr/17 13:53,2.17.6,2.18.3,,,,2.17.7,2.18.4,2.19.0,,camel-core,,,,0,,,Because it does some special logic as part of start/stop it forgets to do a super call so the processor lifecycle is called as well.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-04-10 12:49:24.0,,,,,,,,,,,"0|i3dfmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The searchTerm subjectOrBody breaks the searchTerm unseen,CAMEL-11117,13061873,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,lionel.palacin@gmail.com,lionel.palacin@gmail.com,05/Apr/17 21:35,06/Apr/17 07:52,14/Jul/23 05:50,06/Apr/17 07:52,2.18.3,,,,,2.18.4,2.19.0,,,camel-mail,,,,0,,,"When the two options searchTerm.unseen and searchTerm.subjectOrBody are together, the searchTerm generated looks like that:

(Unseen AND Subject) OR Body. Which is incorrect, the right searchTerm should be: Unseen AND (Subject OR Body). 

",,githubbot,lionel.palacin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 06 07:48:20 UTC 2017,,,,,,,,,,,"0|i3d9e7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Apr/17 21:38;githubbot;GitHub user lio-p opened a pull request:

    https://github.com/apache/camel/pull/1599

    CAMEL-11117: Fix searchTerm error with unseen and subjectOrBody

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lio-p/camel CAMEL-11117-FIX

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1599.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1599
    
----

----
;;;","06/Apr/17 07:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1599
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel catalog's asEndpointUri mangles endpoint URIs for unequal number of tokens,CAMEL-11113,13061732,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,05/Apr/17 13:17,06/Apr/17 11:08,14/Jul/23 05:50,06/Apr/17 11:01,,,,,,2.19.0,,,,camel-catalog,camel-core,,,0,,,"When used with unequal number of tokens vs parameters the CamelCatalog {{asEndpointUri}} can drop extra of the tokens.

For instance if used with {{rest}} component and {{uriTemplate}} containing template placeholders, expected endpoint URI should be:

{code:java}
""rest:GET:/path:/template/{param}""
{code}

but it ends up being:
{code:java}
""rest:GET:/path:/template/{param""
{code}

as the number of tokens ({{:}}, {{:/}}, {{:/}}, {{&#123;}}, {{&#125;}}) is 5, and the number of properties specified ({{rest}}, {{GET}}, {{/path}}, {{/template/&#123;param&#125;}}) is 4
",,davsclaus,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 06 11:08:30 UTC 2017,,,,,,,,,,,"0|i3d8iv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Apr/17 14:03;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1598

    CAMEL-11113 Camel catalog's asEndpointUri mangles endpoint URIs for unequal number of tokens

    **Work in progress, please don't merge**
    
    This illustrates a number of issues when constructing the endpoint URI from Camel catalog.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11113

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1598.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1598
    
----
commit 9780195a4da306373d874552e92f9b0c80e8e3c5
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-04-05T14:01:33Z

    CAMEL-11113 added unit tests

----
;;;","06/Apr/17 09:51;davsclaus;Thanks for the test case I am working on a fix;;;","06/Apr/17 11:01;davsclaus;There is a fix now, and I added a TODO to revisit the logic in the future;;;","06/Apr/17 11:08;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1598
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Undertow: throwExceptionOnFailure doesn't work as expected,CAMEL-11111,13061696,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,scranton,scranton,scranton,05/Apr/17 11:10,10/Apr/17 10:29,14/Jul/23 05:50,10/Apr/17 10:29,2.18.3,,,,,2.19.0,,,,camel-undertow,,,,0,,,"When using camel-undertow as a producer and HTTP_RESPONSE_CODE is 404, the producer does NOT throw an exception as expected. Setting throwExceptionOnFailure appears to have no effect.",,davsclaus,githubbot,scranton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 09 16:01:53 UTC 2017,,,,,,,,,,,"0|i3d8av:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Apr/17 11:49;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1597

    CAMEL-11111: added unit test for throwExceptionOnFailure

    Test case for camel-undertow showing issue, and same test case working in camel-netty4-http

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-11111

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1597.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1597
    
----
commit e493cf03964571497a0a946bad2016ff35f89397
Author: Scott Cranton <scott@cranton.com>
Date:   2017-04-05T11:49:04Z

    CAMEL-11111: added unit test for throwExceptionOnFailure

----
;;;","05/Apr/17 14:02;scranton;Looking at UndertowProducer and UndertowClientCallback, I don't see any code to handle HTTP_RESPONSE_CODE indicating an error. Not clear where or what exception should be thrown. Feels like a response code check when throwExceptionOnFailure=true should happen here - https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L167-L167;;;","05/Apr/17 14:06;scranton;camel-netty4-http appears to check in a similar place - https://github.com/apache/camel/blob/master/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpProducer.java#L135-L135 - Guessing an UndertowHttpOperationsException would have to be created... Is there a standard base interface for that given all of the camel HTTP producer components?;;;","07/Apr/17 11:13;davsclaus;There is a ticket about making undertow align with the other http components and base it of camel-http-common. But that is more work;;;","07/Apr/17 11:24;davsclaus;This requires the binding code to support this as its not in that callback, but when parsing the http response and check the HTTP status code;;;","07/Apr/17 11:47;scranton;So my PR just includes a test case showing the issue with camel-undertow, and how camel-netty4-http works doing similar settings of throwExceptionOnFailure. I could probably hack in the code from camel-netty4-http and create a similar NettyHttpOperationsFailureException for camel-undertow to band-aid this. It would only be an issue if many use ProducerTemplates to get the response body back cast as a String or such, and expect any HTTP Response Code > 300 to be thrown as an exception OR if they are using undertow as a producer within a camel route, and again expect an exception to be thrown. I do the Producer Template approach a lot in test cases...

Since we're deprecating camel-http, and encouraging people to use camel-undertow as a producer, that's where I think the expectation that it behaves similar will bite us...

Let me know your thoughts. Like I said, I believe I could quickly hack in something similar to netty4-http that gets my test case to pass...;;;","07/Apr/17 13:35;davsclaus;Yeah we need an UndertowHttpOperationFailureException that does something like the others do with having http status code etc.;;;","07/Apr/17 13:45;scranton;Ok, will try to get this done this weekend...;;;","08/Apr/17 10:17;githubbot;Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/1597
;;;","08/Apr/17 22:43;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1608

    CAMEL-11111: implemented throwExceptionOnFailure Producer attribute

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-11111

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1608.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1608
    
----
commit eb4a236e36c4665e6234d72db40d8c7ef4e5d6fb
Author: Scott Cranton <scott@cranton.com>
Date:   2017-04-08T22:42:46Z

    CAMEL-11111: implemented throwExceptionOnFailure attribute for Producer usage

----
;;;","09/Apr/17 15:23;githubbot;Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/1608
;;;","09/Apr/17 15:27;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1609

    CAMEL-11111: correctly copy response’s headers and body to exception

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-11111

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1609.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1609
    
----
commit 9e09dd4223491215e7b389d1741539b71605a833
Author: Scott Cranton <scott@cranton.com>
Date:   2017-04-09T15:26:32Z

    CAMEL-11111: correctly copy response’s headers and body to exception

----
;;;","09/Apr/17 15:28;scranton;Error response's headers and body were not being copied correctly to HttpOperationsFailedException. Corrected with provided PR;;;","09/Apr/17 16:01;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1609
;;;",,,,,,,,,,,,,,,,,,,
REST component host parameter handling,CAMEL-11110,13061677,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,05/Apr/17 09:33,05/Apr/17 09:38,14/Jul/23 05:50,05/Apr/17 09:38,2.19.0,,,,,2.19.0,,,,camel-core,,,,0,,,"The REST component tries to resolve the {{host}} parameter as a reference even if it's not in reference syntax, i.e. concrete value. So if set to {{http://...}} the component tries to resolve a bean reference with name {{http://...}}..",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 05 09:38:28 UTC 2017,,,,,,,,,,,"0|i3d86n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Apr/17 09:38;zregvart;Using {{getAndRemoveOrResolveReferenceParameter}} instead of {{resolveAndRemoveReferenceParameter}} fixes this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - allow using the $simple{} syntax for query arguments,CAMEL-11106,13061422,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,04/Apr/17 12:46,05/Apr/17 14:21,14/Jul/23 05:50,05/Apr/17 14:21,2.18.3,,,,,2.18.4,,,,camel-sql,,,,0,,,"The $simple{} syntax is useful to avoid clash with spring property placeholders. The camel-sql component does not recognize it, so when users create endpoints like:

{code}
<to id=""_to1"" uri=""sql:select * from accounts where customerid = :#${header.xxx}?dataSource=dataSource""/>
{code}

I.e. use the id field and the ""${header.xxx}"" syntax, spring tries to find a property named ""header.xxx"" and crashes.

We should allow writing:
{code}
<to id=""_to1"" uri=""sql:select * from accounts where customerid = :#$simple{header.xxx}?dataSource=dataSource""/>
{code}
",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-04-04 12:46:53.0,,,,,,,,,,,"0|i3d6lz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unhandled ClassCastException if fault detail is not JaxbElement,CAMEL-11099,13061008,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,dfullarton,dfullarton,02/Apr/17 23:59,05/Apr/17 01:37,14/Jul/23 05:50,04/Apr/17 13:33,,,,,,2.19.0,,,,camel-soap,,,,0,,,"Hi,

I've been having some issues with handling some SOAP faults that come in with a detail message that is undefined in their WSDL, the result is that they end up as xerces dom elements rather than JAXBElements.

I end up with a pretty ugly message that looks like this : 
{noformat}
java.lang.ClassCastException: com.sun.org.apache.xerces.internal.dom.ElementNSImpl cannot be cast to javax.xml.bind.JAXBElement
	at org.apache.camel.dataformat.soap.Soap11DataFormatAdapter.createExceptionFromFault(Soap11DataFormatAdapter.java:195)
	at org.apache.camel.dataformat.soap.Soap11DataFormatAdapter.doUnmarshal(Soap11DataFormatAdapter.java:170)
	at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.unmarshal(SoapJaxbDataFormat.java:287)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:69)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
{noformat}

It's pretty had to intercept this in the pipeline, so at the moment I've handled parsing the response myself rather than the soap dataformat, but I would like to avoid this in the future as it does require a bit of custom code.

I'll create a PR that demonstrates what I believe is a reasonable workaround.

Cheers,
Daniel
",,dfullarton,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 05 01:37:51 UTC 2017,,,,,,,,,,,"0|i3d41z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Apr/17 00:00;githubbot;GitHub user linead opened a pull request:

    https://github.com/apache/camel/pull/1589

    CAMEL-11099: Resolve issue caused by unresolve elements hanging off t…

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/linead/camel soap-fault-error-handling

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1589.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1589
    
----
commit 34edd2cd3edc83b10c4c9bae0518fcf8ca144735
Author: Daniel Fullarton <daniel.fullarton@nab.com.au>
Date:   2017-04-02T23:32:13Z

    CAMEL-11099: Resolve issue caused by unresolve elements hanging off the faul detail

----
;;;","04/Apr/17 13:33;zregvart;Merged to master from [PR#1589|https://github.com/apache/camel/pull/1589];;;","05/Apr/17 01:37;githubbot;Github user linead closed the pull request at:

    https://github.com/apache/camel/pull/1589
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FacebookEndpointConfiguration bean not taken into account as a UriParam,CAMEL-11098,13060715,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,jpoth,jpoth,31/Mar/17 15:42,05/Apr/17 11:39,14/Jul/23 05:50,31/Mar/17 19:31,,,,,,2.19.0,,,,camel-facebook,,,,0,,,"[FacebookEndpointConfiguration|https://github.com/apache/camel/blob/e3ec108c871058c840f99a7fcfd06d8807b6da85/components/camel-facebook/src/main/java/org/apache/camel/component/facebook/FacebookEndpoint.java#L67] is not taken into account when specified as a UriParam. I can provide a PR.",,githubbot,jpoth,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 05 11:39:22 UTC 2017,,,,,,,,,,,"0|i3d28v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Mar/17 15:46;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1588

    CAMEL-11098: lets make FacebookEndpointConfiguration UriParam work by…

    … adding a setter for the field
    
    https://issues.apache.org/jira/browse/CAMEL-11098

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-11098

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1588.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1588
    
----
commit 13ca9ba293572502d0e0462c5110673076a85bca
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-31T15:44:09Z

    CAMEL-11098: lets make FacebookEndpointConfiguration UriParam work by adding a setter for the field

----
;;;","31/Mar/17 19:31;zregvart;Merged into {{master}} from https://github.com/apache/camel/pull/1588.;;;","05/Apr/17 11:39;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1588
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when defaultValueProvider not given,CAMEL-11093,13060323,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,30/Mar/17 10:29,31/Mar/17 08:00,14/Jul/23 05:50,31/Mar/17 08:00,,,,,,2.19.0,,,,camel-core,camel-rabbitmq,,,0,,,"{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.DefaultMessage.getHeader(DefaultMessage.java:71)
	at org.apache.camel.impl.DefaultMessage.getHeader(DefaultMessage.java:126)
	at org.apache.camel.component.rabbitmq.RabbitMQProducer.processInOnly(RabbitMQProducer.java:248)
	at org.apache.camel.component.rabbitmq.RabbitMQProducer.process(RabbitMQProducer.java:190)
{code}",,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 31 08:00:40 UTC 2017,,,,,,,,,,,"0|i3cztr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Mar/17 11:00;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1584

    [CAMEL-11093] NPE when defaultValueProvider not given

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-11093

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1584.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1584
    
----
commit b5b3cbd1d539749c6823dfab91b166151ec154e5
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-03-30T10:58:46Z

    [CAMEL-11093] NPE when defaultValueProvider not given

----
;;;","31/Mar/17 08:00;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1584
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST Swagger handling of empty specificationUri,CAMEL-11091,13059998,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,29/Mar/17 11:19,29/Mar/17 12:42,14/Jul/23 05:50,29/Mar/17 12:42,,,,,,2.19.0,,,,,,,,0,,,"The REST Swagger component sets the specificationUri to {{""""}} for endpoint uris that in the remaining part start with {{#}}, for instance: {{""petstore:#getPetById""}}. It should not allow empty specificationUris and in this case should use the default {{swagger.json}}.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-29 11:19:14.0,,,,,,,,,,,"0|i3cxtj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-swagger-java: schema objects in definitions could not be referenced ,CAMEL-11088,13059979,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yangli,yangli,29/Mar/17 09:44,12/Apr/17 11:04,14/Jul/23 05:50,12/Apr/17 11:04,2.17.6,,,,,2.17.7,,,,camel-swagger,,,,0,,,"Reproduct steps:
1. we have a type A, and it has a field b with type B.
2. there are two camel rest endpoint a and b, type attribute of endpoint a is A, and type attribute of endpoint of b is B.
3. when RestSwaggerReader.java parse the endpoint a at first, and parse the endpoint b later.
4. in the generated swagger document, the ""schema"" of parameter object of endpoint b could not $ref to the definition object B in definitions module.

Maybe this issue is caused by the code ""oldExt = oldModel.getVendorExtensions().get(""x-className"") == null;"" of appendModels method of RestSwaggerReader.java of camel 2.17.x.

This code has been changed to ""oldExt = oldModel.getVendorExtensions().get(""x-className"") != null;"" of camel 2.18.x.

So I file jira ticket to request to fix this issue in camel 2.17.x too.",,davsclaus,yangli,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 12 11:04:05 UTC 2017,,,,,,,,,,,"0|i3cxpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Mar/17 12:39;davsclaus;You are welcome to provide a github PR with a backport of this to the 2.17.x branch
http://camel.apache.org/contributing

As the next 2.17.x release is going to be the last so this may otherwise slip this release and you wont have a fix in it.;;;","12/Apr/17 11:04;davsclaus;I was working on the 2.17.x branch and copied over the fix from 2.18.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnExceptionDefinition validation ignores redeliveryPolicy field,CAMEL-11080,13059585,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,richaosu,richaosu,28/Mar/17 00:16,28/Mar/17 09:06,14/Jul/23 05:50,28/Mar/17 09:06,2.16.5,,,,,2.19.0,,,,camel-core,,,,0,features,,"The OnExceptionDefinition provides DSL methods redeliveryPolicy(...) and redeliveryPolicyRef(...) to configure a reusable RedeliveryPolicy instance. However, the validateConfiguration() method does not include redeliveryPolicy as one of the possible options. Thus, the following trows a IllegalArgumentException:

.onException(IOException.class)
    .redeliveryPolicy(myRedeliveryPolicy)
.end()

Note: The getOrCreateRedeliveryPolicy() creates a new RedeliveryPolicyDefinition() and should get its initial properties from redeliveryPolicy, when the latter is set, methinks.

Note: The getRedeliveryPolicy() and setRedeliveryPolicy(...) act on a RedeliveryPolicyDefinition instead of a RedeliveryPolicy. Bug?

","Linux, Java 1.7",davsclaus,richaosu,,,,,,,,,,,10800,10800,,0%,10800,10800,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 28 09:06:41 UTC 2017,,,,,,,,,,,"0|i3cv9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Mar/17 09:06;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to load Schematron XSLT templates on windows,CAMEL-11074,13059418,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,27/Mar/17 14:48,27/Mar/17 16:05,14/Jul/23 05:50,27/Mar/17 15:56,2.18.3,2.19.0,,,,2.17.7,2.18.4,2.19.0,,camel-schematron,,,,0,,,"Similar to CAMEL-8504. {{ClassPathURIResolver}} does:

{code}
InputStream stream = ClassPathURIResolver.class.getClassLoader()      
    .getResourceAsStream(rulesDir.concat(File.separator).concat(href));
{code}

Depending on the ClassLoader implementation, platform dependent paths for resource lookups are not guaranteed to work (which arguably could be considered a bug in the ClassLoader impl).

Looking at the git history, it seems this code has swapped between using {{File.separator}} and {{""/""}} a few times now. However, I see no clear reason why we need to use {{File.separator}} in the resource lookup. {{""/""}} should work perfectly fine in all cases. ",,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 27 16:05:23 UTC 2017,,,,,,,,,,,"0|i3cu93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Mar/17 15:45;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1578

    CAMEL-11074: Unable to load Schematron XSLT templates on windows

    https://issues.apache.org/jira/browse/CAMEL-11074

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-11074

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1578.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1578
    
----
commit 6bd6eec5a6d12174d745bd7ddefbf4abb83cab69
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-03-27T15:19:07Z

    CAMEL-11074: Unable to load Schematron XSLT templates on windows

----
;;;","27/Mar/17 16:05;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1578
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot parse CSV record starting with separator character,CAMEL-11065,13058945,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,livthomas,livthomas,24/Mar/17 16:36,09/Apr/17 08:27,14/Jul/23 05:50,09/Apr/17 08:27,2.18.3,,,,,2.18.4,2.19.0,,,camel-bindy,,,,0,,,"Camel Bindy is not able to parse a CSV file where one value starts with a separator character. Example of such a record:

{code}
'text1',',text2',3
{code}

And the Java class used:

{code:title=Bar.java|borderStyle=solid}
@CsvRecord(separator = "","", quote = ""'"")
public class Record {

    @DataField(pos = 1)
    private String text1;

    @DataField(pos = 2)
    private String text2;

    @DataField(pos = 3, pattern = ""########.##"")
    private BigDecimal number;

}
{code}

You will get an exception like this:
{code}
java.lang.IllegalArgumentException: Parsing error detected for field defined at the position: 3, line: 1
	at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:213)
	at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.unmarshal(BindyCsvDataFormat.java:173)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:69)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:609)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)
	at org.apache.camel.processor.Splitter.process(Splitter.java:108)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:460)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:227)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:191)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NumberFormatException: null
	at java.math.BigDecimal.<init>(BigDecimal.java:494)
	at java.math.BigDecimal.<init>(BigDecimal.java:383)
	at java.math.BigDecimal.<init>(BigDecimal.java:806)
	at org.apache.camel.dataformat.bindy.format.factories.BigDecimalPatternFormatFactory$BigDecimalPatternFormat.parse(BigDecimalPatternFormatFactory.java:66)
	at org.apache.camel.dataformat.bindy.format.factories.BigDecimalPatternFormatFactory$BigDecimalPatternFormat.parse(BigDecimalPatternFormatFactory.java:49)
	at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:209)
	... 37 common frames omitted
{code}",,davsclaus,githubbot,livthomas,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 09 08:27:35 UTC 2017,,,,,,,,,,,"0|i3crbz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Mar/17 08:34;davsclaus;Contributions is welcome to try to fix this;;;","06/Apr/17 19:02;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/1605

    CAMEL-11065 Cannot parse CSV record starting with separator character

    Changed Camel Bindy BindyCsvDataFormat#unquoteTokens function.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-11065

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1605.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1605
    
----
commit 6fd52ca300ec041e481773d675828521ce3d21a0
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-04-06T18:57:57Z

    CAMEL-11065 Cannot parse CSV record starting with separator character
    Changed Camel Bindy BindyCsvDataFormat#unquoteTokens function.

----
;;;","09/Apr/17 07:58;davsclaus;Thanks for reporting and the PR;;;","09/Apr/17 07:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1605
;;;","09/Apr/17 08:27;davsclaus;Thanks the PR has been merged;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PGP Decryptor does not make Integrity check,CAMEL-11063,13058884,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,forsthofer,forsthofer,forsthofer,24/Mar/17 13:12,24/Mar/17 13:32,14/Jul/23 05:50,24/Mar/17 13:32,,,,,,2.17.7,2.18.4,2.19.0,, camel-crypto,,,,0,,,A PGP Message can contain a Modification Code Detection Packet (MDC) which contains a hash value of the clear text data. This hash value can be used to check the integrity of the clear text data. Currently this check is not executed in the unmarshall method of the PGP Data Formater.,,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-24 13:12:37.0,,,,,,,,,,,"0|i3cqyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Undertow Producer : NPE if tryConvertTo fails to convert exchange body to ByteBuffer,CAMEL-11057,13058582,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,23/Mar/17 13:03,23/Mar/17 13:10,14/Jul/23 05:50,23/Mar/17 13:10,,,,,,2.19.0,,,,camel-undertow,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-23 13:03:20.0,,,,,,,,,,,"0|i3cp3b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Soap11DataFormatAdapter throwing exception when using JAXB/JAX-WS generated code,CAMEL-11052,13058413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,kierans777,kierans777,22/Mar/17 22:48,30/Mar/17 11:26,14/Jul/23 05:50,30/Mar/17 08:27,2.18.3,,,,,2.19.0,,,,camel-soap,,,,0,soap11,,"When using WsImport, the structure of the generated Exception class for SOAP Faults have only a two arg constructor generated ie:

{code:java}public MyException(String message, <Type> faultInfo) {}{code}

However in {{Soap11DataFormatAdapter::createExceptionFromFault}} the code is trying to get a reference to the single argument constructor, before it tries to find/use the two argument constructor, which would cause a {{NoSuchMethodException}} to be thrown as no such constructor exits on the class.

The solution is to move the {{messageConstructor}} variable inside the catch block.  So we try to get/use the two arg constructor and if that fails then we try to get/use the single argument constructor, which is the real logic of that try/catch block anyway.",,davsclaus,githubbot,kierans777,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 30 11:26:38 UTC 2017,,,,,,,,,,,"0|i3co1r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Mar/17 09:02;davsclaus;You are welcome to work on a github PR
http://camel.apache.org/contributing;;;","24/Mar/17 10:30;kierans777;Thanks [~davsclaus]. I've started working on a patch.  Can this issue be assigned to me?;;;","28/Mar/17 08:35;davsclaus;Kieran sounds good.

You cannot assign ticket as that is for committers and users whom have contribured more patches. Its fine with a comment here that you work on this.

Lets us know how it goes;;;","29/Mar/17 20:11;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1582

    CAMEL-11052-wsimport compatibility

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-11052

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1582.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1582
    
----
commit 4650d7a0373f9bd2957df04e1f037a9f5fd0aba3
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-29T20:10:23Z

    CAMEL-11052-wsimport compatibility

----
;;;","30/Mar/17 08:27;zregvart;Merged to master from [PR#1582|https://github.com/apache/camel/pull/1582];;;","30/Mar/17 11:26;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1582
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Jetty Producer always uses ""Transfer-Encoding: chunked"" header",CAMEL-11048,13058221,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mluckam,mluckam,22/Mar/17 13:22,23/Mar/17 14:36,14/Jul/23 05:50,23/Mar/17 09:20,2.17.6,2.18.3,,,,2.18.4,2.19.0,,,camel-jetty,,,,0,camel-jetty,,"The JettyHttpProducer is always sending requests with the header ""Transfer-Encoding: chunked"" even if the request received by the producer contains a Content-Length header.  This is due to the JettyHttpProducer setting the request content as an InputStreamContentProvider which is hardcoded to always return -1 as its length.  With the content set as an InputStreamContentProvider, when the content.getLength() is called in org.eclipse.jetty.client.HttpConnection ln 120, it is returned as -1.  This causes the ""Transfer-Encoding: chunked"" header to be added at ln 129.  Again in the org.eclipse.jetty.http.HttpGenerator class getLength() is called on the InputStreamContentProvider and since it is -1, the Content-Length header is not added to the request to be sent out. ",,acosentino,davsclaus,githubbot,mluckam,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 14:36:23 UTC 2017,,,,,,,Patch Available,,,,"0|i3cmv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Mar/17 13:31;githubbot;GitHub user mluckam opened a pull request:

    https://github.com/apache/camel/pull/1557

    CAMEL-11048 Jetty Producer always uses ""Transfer-Encoding: chunked"" header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mluckam/camel jettyProducerChunking

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1557.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1557
    
----

----
;;;","22/Mar/17 13:36;githubbot;Github user mluckam closed the pull request at:

    https://github.com/apache/camel/pull/1557
;;;","22/Mar/17 13:39;githubbot;GitHub user mluckam opened a pull request:

    https://github.com/apache/camel/pull/1558

    CAMEL-11048 Jetty Producer always uses ""Transfer-Encoding: chunked"" header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mluckam/camel CAMEL-11048

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1558.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1558
    
----
commit 58abf94b8da0feb5eb187f94caa24d040dc32b1f
Author: Matthew Luckam <matthew.luckam@solers.com>
Date:   2016-02-19T19:43:19Z

    CAMEL-11048 Jetty Producer always uses ""Transfer-Encoding: chunked"" header
    
    Change-Id: Icc12a11b9b2886affb0f6b6d4a874de11c0338bd

----
;;;","23/Mar/17 09:48;davsclaus;Andrea there is build error on 2.17.x
https://builds.apache.org/job/Camel.2.17.x.notest/195/consoleText

Can you revert the commit on this branch. That branch is becoming EOL and we should avoid jetty changes as Jetty is always ""causing trouble"".;;;","23/Mar/17 09:49;acosentino;I was pushing the revert. I forget about camel-jetty8 on 2.17.x.

Done! :-);;;","23/Mar/17 14:36;githubbot;Github user mluckam closed the pull request at:

    https://github.com/apache/camel/pull/1558
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
STARTTLS broken with camel-mail,CAMEL-11047,13058188,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,siano,siano,siano,22/Mar/17 11:12,22/Mar/17 13:14,14/Jul/23 05:50,22/Mar/17 13:14,2.17.6,2.18.3,,,,2.17.7,2.18.4,2.19.0,,camel-mail,,,,0,,,"A to URI like
{noformat}
smtp://xxx:25?mail.smtp.starttls.enable=true&sslContextParameters=#sslContextParameters
{noformat}

will create an exception when trying to connect to the SMTP server. The error message is

{noformat}
javax.mail.MessagingException: Could not connect to SMTP host: xxx, port: 25;
  nested exception is:
      javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
      at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:2102)
      at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:699)
      at javax.mail.Service.connect(Service.java:366)
      at org.apache.camel.component.mail.DefaultJavaMailSender.send(DefaultJavaMailSender.java:112)
      at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:63)
      at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
      at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
      at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)
      at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
      at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)
      at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
      at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
      at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
      at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
      at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
      at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
      at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412)
      at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
      at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270)
      at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380)
      at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:221)
      at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
      at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110)
      at com.sap.esb.camel.mail.endpoint.configurator.mail.impl.MailRouteSendingTest.testSendMail(MailRouteSendingTest.java:36)
      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.lang.reflect.Method.invoke(Method.java:606)
      at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
      at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
      at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
      at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
      at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
      at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
      at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
      at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
      at org.junit.rules.RunRules.evaluate(RunRules.java:20)
      at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
      at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
      at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
      at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
      at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
      at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
      at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
      at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
      at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
      at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
      at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
      at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
      at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
      at sun.security.ssl.InputRecord.handleUnknownRecord(InputRecord.java:671)
      at sun.security.ssl.InputRecord.read(InputRecord.java:504)
      at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:934)
      at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332)
      at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)
      at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)
      at com.sun.mail.util.SocketFetcher.configureSSLSocket(SocketFetcher.java:598)
      at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:372)
      at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:217)
      at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:2066)
      ... 52 more
{noformat}

The problem is that the fix introduced with CAMEL-8163 makes matters worse. The SSLSocketConnectionFactory is used for the connection to the SMTP server, not for the socket upgrade to TLS.

The fix would be to set the properties mail.[protocol].ssl.socketFactory instead of mail.[protocol].socketFactory.",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 22 13:13:29 UTC 2017,,,,,,,,,,,"0|i3cmnr:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"22/Mar/17 13:13;siano;unfortunately we cannot unit-test this issue. The mock-javamail implementation we use for unit tests does not use any transport, so SSL options will have no effect on the tests. The existing unit tests only test that a specific socket factory is defined, not that it works.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
onCompletion does not trigger on failure if split is in route,CAMEL-11045,13058140,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dermoritz,dermoritz,22/Mar/17 08:20,01/Nov/17 12:44,14/Jul/23 05:50,01/Nov/17 12:44,,,,,,2.19.4,2.20.1,2.21.0,,camel-core,,,,1,,,"I created a test to reproduce the problem:

{code}
import org.apache.camel.CamelExecutionException;
import org.apache.camel.Endpoint;
import org.apache.camel.EndpointInject;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import java.util.Arrays;

public class OnCompletionTest extends CamelTestSupport{

    @EndpointInject(uri = ""direct:in"")
    private Endpoint in;
    @EndpointInject(uri = ""mock:completion"")
    private MockEndpoint mockComp;
    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint mockOut;

    @Test
    public void good() throws InterruptedException {
        mockComp.setExpectedMessageCount(1);
        mockOut.setExpectedMessageCount(2);
        //
        context.createProducerTemplate().sendBody(in, Arrays.asList(""1"",""2""));
        //
        assertMockEndpointsSatisfied();
    }

    @Test
    public void exception() throws InterruptedException {
        mockComp.setExpectedMessageCount(1);
        mockOut.setExpectedMessageCount(2);

        //
        mockOut.whenAnyExchangeReceived(exchange -> {throw new IllegalArgumentException("""");});
        try {
            context.createProducerTemplate().sendBody(in, Arrays.asList(""1"",""2""));
            fail();
        } catch (CamelExecutionException e){

        }
        //
        mockOut.assertIsSatisfied();
        mockComp.assertIsSatisfied();
    }


    @Override
    public boolean isUseRouteBuilder() {
        return true;
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                // @formatter:off
                from(in)
                        .onCompletion().to(mockComp).end()
                        .split().body()
                            //.stopOnException()
                            //.shareUnitOfWork()
                .to(mockOut)
                ;
                // @formatter:on
            }
        };
    }
}
{code}

I would expect that both tests pass. In case of exception the onCompletion is not triggered. Documentation says it should trigger in all cases. ""onFailureOnly()"" doesn't help either. I also tried ""stopOnException()"" and ""shareUnitOfWork()"" in some combinations with no avail.

If this works as intended there should be at least a hint in the documentation.
For the sake of completeness i also asked here for a solution/ workaround: http://stackoverflow.com/questions/42928208/camel-oncompletion-not-working-on-exception-after-a-split-bug",,davsclaus,dermoritz,Matthi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 01 12:44:53 UTC 2017,,,,,,,,,,,"0|i3cmd3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Nov/17 12:44;davsclaus;Thanks for reporting, and sorry for the delay at looking into this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Authentication : provide a way to use refresh_token mode in addition to password method,CAMEL-11040,13057535,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ajaira,ajaira,20/Mar/17 13:55,20/Mar/17 15:44,14/Jul/23 05:50,20/Mar/17 14:34,2.19.0,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"The validate() method in SalesforceLoginConfig class, there is a buggy test at the line 181: 
 Type of authentication should be refreshToken only when the refreshToken is present.
line 181 should read
if ( *! hasRefreshToken* && keystore == null)",,ajaira,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 20 15:44:02 UTC 2017,,,,,,,,,,,"0|i3cimv:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"20/Mar/17 14:34;davsclaus;Yeah I fixed this today;;;","20/Mar/17 14:50;ajaira;Buh has fixed by commit commit 1735a5b7d0adc18e68d50839dfa24a8dfc13c6b0 (davsclaus)
;;;","20/Mar/17 15:44;ajaira;Thanks for you.
Is what it is already on the 2.19.0-snapshot ?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Use default ("""") exchange for reply-to messages",CAMEL-11031,13056938,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hauler,hauler,17/Mar/17 09:16,23/Mar/17 06:08,14/Jul/23 05:50,22/Mar/17 20:35,2.18.3,,,,,2.18.4,2.19.0,,,camel-rabbitmq,,,,0,,,"I'm sending request-reply with:

{noformat}
Object reply = rabbitTemplate.convertSendAndReceive(""testexch"", ""test"", ""Ping!"");
{noformat}

And consuming with:
{noformat}
from(""rabbitmq://localhost:5672/testexch?routingKey=test"")
        .transform(body().append("" Pong!""));
{noformat}

And I'm not getting any reply because camel-rabbitmq publishes replies to specified ""testexch"" exchange instead of default one ("""") as stated in [https://www.rabbitmq.com/direct-reply-to.html]:

bq. The RPC server will then see a reply-to property with a generated name. *It should publish to the default exchange ("""")* with the routing key set to this value.",,githubbot,hauler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 06:08:55 UTC 2017,,,,,,,,,,,"0|i3cexz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Mar/17 09:19;hauler;Proposed changes to fix the issue https://github.com/apache/camel/pull/1545;;;","23/Mar/17 06:08;githubbot;Github user hauler closed the pull request at:

    https://github.com/apache/camel/pull/1545
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spark-rest - Adds duplicate content-type,CAMEL-11028,13056715,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,adamdougal,adamdougal,16/Mar/17 16:19,08/Jan/22 09:23,14/Jul/23 05:50,26/Mar/17 08:08,2.18.3,,,,,2.18.4,2.19.0,,,rest,,,,0,,,"This is essentially the same as https://issues.apache.org/jira/browse/CAMEL-9613 . When I send a request containing a 'content-type' header it will get sent with duplicate values. E.g. Content-Type: \[application/json, application/json\].

My RouteBuilder is very simple at the moment:
{code}
restConfiguration().component(""spark-rest"").port(8585);

rest(""/"").post(""/charges"").to(""direct:charges"");

from(""direct:charges"").to(""http://localhost:8080/charges?bridgeEndpoint=true&throwExceptionOnFailure=false"");
{code}

Having looked at the code I can see it being added in two places:
https://github.com/apache/camel/blob/master/components/camel-spark-rest/src/main/java/org/apache/camel/component/sparkrest/DefaultSparkBinding.java#L73

https://github.com/apache/camel/blob/master/components/camel-spark-rest/src/main/java/org/apache/camel/component/sparkrest/DefaultSparkBinding.java#L109

Is this intended behaviour? If so, how would I disable it? Thanks",,adamdougal,barmybuckle,davsclaus,githubbot,JPMoresmau,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-17454,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 08 09:11:46 UTC 2022,,,,,,,,,,,"0|i3cdkf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Mar/17 18:43;davsclaus;Ah yeah the 2nd does an append.

We could add those standard headers from the top at the end, and maybe only put if not already exists an header with that key.

You are welcome to work on a github PR
http://camel.apache.org/contributing;;;","24/Mar/17 10:48;githubbot;GitHub user jbridger opened a pull request:

    https://github.com/apache/camel/pull/1568

    CAMEL-11028: Avoid duplicating content-type headers for camel-spark-rest

    Fix for: https://issues.apache.org/jira/browse/CAMEL-11028
    
    Fix is as suggested in the Jira issue. Additionally, we changed the `DefaultSparkBindingTest.java` to exclude the `Content-Type` header when adding request headers to the camel headers map.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sky-uk/camel CAMEL-11028

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1568.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1568
    
----
commit ca175b9344113fef2bc3960611cf24513ae26afa
Author: Charlie McNeill, Karthikeyan Gurunathan and Jonathan Bridger <jonathan.bridger@sky.uk>
Date:   2017-03-23T14:35:35Z

    CAMEL-11028: Avoid duplicating content-type headers for camel-spark-rest

----
;;;","26/Mar/17 08:08;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1568
;;;","27/Mar/17 08:23;barmybuckle;Hi, Thanks for looking at this and getting this merged back in so quickly. Do you know when version 2.18.4 will be released? Thanks;;;","27/Mar/17 13:03;davsclaus;That would take some time as 2.18.3 was just recently released. Keep an eye on the @dev mailing list for updates;;;","07/Jan/22 13:40;JPMoresmau;I get the same issue in 3.14. Using rest with a JSON RESTBindingMode causes a duplicate content-type to be set.;;;","08/Jan/22 09:11;davsclaus;Camel 3.x does not have camel-spark-rest component anymore - so you must be using some other component;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
RestletProducer should allow multiple values in HTTP Accept header,CAMEL-11026,13056635,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,16/Mar/17 12:06,16/Mar/17 12:19,14/Jul/23 05:50,16/Mar/17 12:19,2.19.0,,,,,2.19.0,,,,camel-restlet,,,,0,,,If there are multiple values to the HTTP {{Accept}} header RestletProducer sets the {{Accept}} header value to {{**/**}}. RestletProducer should honour the set {{Accept}} header and set the HTTP header accordingly.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-16 12:06:40.0,,,,,,,,,,,"0|i3cd2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Kubernetes consumers do not close watchers,CAMEL-11020,13056356,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jamesnetherton,jamesnetherton,15/Mar/17 17:04,16/Mar/17 12:21,14/Jul/23 05:50,16/Mar/17 12:21,2.18.3,2.19.0,,,,2.18.4,2.19.0,,,camel-kubernetes,,,,0,,,"I've been experimenting with camel-kubernetes and noticed some odd behaviour after my camel context is shut down. It seems that not everything is cleaned up and there are still some background threads running.

I wrote a [unit test|https://github.com/jamesnetherton/wildfly-camel/blob/camel-kube/itests/camel/src/test/java/org/wildfly/camel/test/camel/kubernetes/KubernetesConsumerTest.java] that can help to replicate the problem. 

Run the test, then wait for the camel context to shut down. Afterwards, the thread will sleep for 5 minutes. During this time, stop the Kubernetes cluster and you'll see the following exception thrown (or something like it):

{code}
java.io.IOException: closed
	at okhttp3.internal.ws.WebSocketWriter.writeControlFrameSynchronized(WebSocketWriter.java:119)
	at okhttp3.internal.ws.WebSocketWriter.writeClose(WebSocketWriter.java:111)
	at okhttp3.internal.ws.RealWebSocket.close(RealWebSocket.java:168)
	at io.fabric8.kubernetes.client.dsl.internal.WatchConnectionManager$1.onClose(WatchConnectionManager.java:256)
	at okhttp3.internal.ws.RealWebSocket.peerClose(RealWebSocket.java:197)
	at okhttp3.internal.ws.RealWebSocket.access$200(RealWebSocket.java:38)
	at okhttp3.internal.ws.RealWebSocket$1$2.execute(RealWebSocket.java:84)
	at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

Which indicates that the pod watcher was still active and connected to the k8s cluster, despite camel having been shutdown. This is not ideal when Camel is run within an OSGI or JavaEE container.
",,acosentino,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 15 17:08:19 UTC 2017,,,,,,,,,,,"0|i3cbcn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Mar/17 17:08;acosentino;I'll tale a look. Thanks for the heads up about this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Encoding issues in camel-salesforce-maven-plugin,CAMEL-11015,13056209,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,15/Mar/17 08:09,15/Mar/17 10:14,14/Jul/23 05:50,15/Mar/17 10:14,2.19.0,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"Test failure on [builds.apache.org#1196|https://builds.apache.org/job/Camel.trunk.fulltest.java8/org.apache.camel.maven$camel-salesforce-maven-plugin/1196/testReport/] show that there could be an encoding issue in {{camel-salesforce-maven-plugin}}.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11014,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-15 08:09:49.0,,,,,,,,,,,"0|i3cafz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bindy csv doesn't populate with defaultValue on marshal,CAMEL-11012,13055915,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,igarashitm,igarashitm,igarashitm,14/Mar/17 12:02,14/Mar/17 13:34,14/Jul/23 05:50,14/Mar/17 13:02,,,,,,2.17.7,2.18.4,2.19.0,,camel-bindy,,,,0,,,http://camel.465427.n5.nabble.com/Bindy-DefaultValue-is-not-working-Need-help-td5795402.html,,githubbot,igarashitm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 14 13:34:00 UTC 2017,,,,,,,,,,,"0|i3c8mn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Mar/17 12:42;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1539

    CAMEL-11012 bindy csv doesn't populate with defaultValue on marshal

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-11012

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1539.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1539
    
----
commit 13dc096fe88f713b22a198405f4fb29f798714e6
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-03-14T12:40:55Z

    CAMEL-11012 bindy csv doesn't populate with defaultValue on marshal

----
;;;","14/Mar/17 13:34;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1539
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel spring - spring.schemas file contains unexpaned maven properties in release artefact,CAMEL-11009,13055820,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,niels.bertram,niels.bertram,14/Mar/17 04:43,19/Mar/17 15:32,14/Jul/23 05:50,18/Mar/17 08:57,2.18.0,2.18.1,2.18.2,,,2.18.4,2.19.0,,,camel-spring,,,,0,,,"Looking at http://search.maven.org/remotecontent?filepath=org/apache/camel/camel-spring/2.18.2/camel-spring-2.18.2.jar

I can see that file /META-INF/spring.schemas shows non-expanded maven property {{v$&#123;camel.schema.version&#125;}} in the file. This causes loading a route in Karaf fail.

{code}
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
...
http\://camel.apache.org/schema/spring=camel-spring.xsd
http\://camel.apache.org/schema/spring/v${camel.schema.version}=camel-spring-v${camel.schema.version}.xsd
{code}

Ok in 2.17.x and 2.16.x  but broken in 2.18.x releases.

Stack trace from running a camel route in Karaf with camel-spring-2.18.2 installed:

{code}
2017-03-12 23:00:39,527 | WARN  | pool-32-thread-2 | NamespaceHandlerRegistryImpl     | 12 - org.apache.aries.blueprint.core - 1.7.1 | Error registering NamespaceHandler
java.lang.IllegalArgumentException: Illegal character in path at index 40: http://camel.apache.org/schema/spring/v${camel.schema.version}
        at java.net.URI.create(URI.java:852) [?:?]
        at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.getNamespaces(NamespaceHandlerRegistryImpl.java:203) [12:org.apache.aries.blueprint.core:1.7.1]
        at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.registerHandler(NamespaceHandlerRegistryImpl.java:157) [12:org.apache.aries.blueprint.core:1.7.1]
        at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.addingService(NamespaceHandlerRegistryImpl.java:121) [12:org.apache.aries.blueprint.core:1.7.1]
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941) [?:?]
        at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870) [?:?]
        at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256) [?:?]
        at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229) [?:?]
        at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:901) [?:?]
        at org.apache.felix.framework.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:990) [?:?]
        at org.apache.felix.framework.EventDispatcher.fireEventImmediately(EventDispatcher.java:838) [?:?]
        at org.apache.felix.framework.EventDispatcher.fireServiceEvent(EventDispatcher.java:545) [?:?]
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557) [?:?]
        at org.apache.felix.framework.Felix.registerService(Felix.java:3549) [?:?]
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348) [?:?]
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355) [?:?]
        at org.apache.aries.blueprint.spring.SpringExtension.start(SpringExtension.java:78) [202:org.apache.aries.blueprint.spring:0.2.0]
        at org.apache.felix.utils.extender.AbstractExtender$1.run(AbstractExtender.java:265) [202:org.apache.aries.blueprint.spring:0.2.0]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:?]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:?]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:?]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
        at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.net.URISyntaxException: Illegal character in path at index 40: http://camel.apache.org/schema/spring/v${camel.schema.version}
        at java.net.URI$Parser.fail(URI.java:2848) ~[?:?]
        at java.net.URI$Parser.checkChars(URI.java:3021) ~[?:?]
        at java.net.URI$Parser.parseHierarchical(URI.java:3105) ~[?:?]
        at java.net.URI$Parser.parse(URI.java:3053) ~[?:?]
        at java.net.URI.<init>(URI.java:588) ~[?:?]
        at java.net.URI.create(URI.java:850) ~[?:?]
        ... 24 more
{code}",any,davsclaus,githubbot,niels.bertram,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 19 15:32:39 UTC 2017,,,,,,,,,,,"0|i3c81j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Mar/17 08:59;davsclaus;Can you check the blueprint schema files as well;;;","14/Mar/17 09:00;davsclaus;We can just remove those vX.Y as nobody uses them anyway.;;;","14/Mar/17 12:36;niels.bertram;Just looking through the pom files to find out where the problem lies and can see that same issue also exists in camel-spring-dm.;;;","15/Mar/17 08:11;davsclaus;Can you check camel-blueprint as well;;;","17/Mar/17 18:35;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1548

    CAMEL-11009: Corrected the generation of the 'spring.schemas' file in camel-blueprint

    This PR proposes a possible fix for [CAMEL-11009](https://issues.apache.org/jira/browse/CAMEL-11009).
    
    Actually, the file `/META-INF/spring.schemas` is filtered during the process-resources phase.
    However, the `camel.schema.version` property is defined too late (during the process-classes phase).
    
    I re-sequenced those steps, and now the file `/META-INF/spring.schemas` is generated as below:
    `http\://camel.apache.org/schema/spring=camel-spring.xsd`
    `http\://camel.apache.org/schema/spring/v2.19=camel-spring-v2.19.xsd`
    
    The fix needs at least maven 3.0.3, but I'm sure build servers are more recent ;)
    If you are ok with the fix, I would then check this issue in camel-blueprint and camel-spring-dm (unless deprecated).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1548.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1548
    
----
commit 23545491c228997f52cfc482af17c5f48fa83348
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-13T20:36:49Z

    CAMEL-11000: Issued a simple warning rather than throwing an Exception

commit 649e9cbbed41a6970bc9b5881b53f446531af4ff
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-17T16:15:01Z

    Merge remote-tracking branch 'upstream/master'
    
    Merging from upstream/master

commit 1e7763d120e38322db17f9a5fbc4d3ff6b3ac183
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-17T18:22:30Z

    CAMEL-11009: Set the camel.schema.version property earlier

----
;;;","18/Mar/17 08:57;davsclaus;Thanks for reporting.

And also thanks for the PR;;;","19/Mar/17 15:32;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1548
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Consumer/Producer templates are not stopped when auto-configured in Spring Boot,CAMEL-11008,13055752,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,13/Mar/17 22:20,14/Mar/17 12:19,14/Jul/23 05:50,14/Mar/17 11:47,2.16.5,2.17.5,2.18.2,2.19.0,,2.17.7,2.18.4,2.19.0,,camel-spring-boot,,,,0,,,"Consumer/Producer templates created in {{CamelAutoConfiguration}} as Spring beans are, contrary to the comment on the {{@Bean}} methods, not managed by Camel, the {{DefaultCamelContext}} in {{createProducerTemplate}} and {{createConsumerTemplate}} methods starts the returned templates but does not hold references to them and thus cannot stop them on shutdown.",,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9431,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 14 12:19:03 UTC 2017,,,,,,,,,,,"0|i3c7mf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Mar/17 22:43;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1534

    CAMEL-11008: Consumer/Producer templates are not stopped when auto-configured in Spring Boot

    In [CAMEL-9431|https://issues.apache.org/jira/browse/CAMEL-9431] producer/consumer templates did not receive their own `destroyMethod` methods. I've changed those to use `stop` for `destroyMethod`, a proper solution might be that `DefaultCamelContext` tracks all templates and stops them on shutdown, or make them `CamelContextAware` and `addService` them to CamelContext, or `addService` them in `createProducerTemplate` `createConsumerTemplate`.
    I've decided to do a simple fix here and provide a unit test that can be used to validate the best solution to the problem.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11008

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1534.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1534
    
----
commit 2f265af02637864da93ec4c531cc5b95b5b41948
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-03-13T22:42:12Z

    CAMEL-11008: Consumer/Producer templates are no...
    
    ...t stopped when auto-configured in Spring Boot
    
    In CAMEL-9431 producer/consumer templates did not receive their own
    `destroyMethod` methods. I've changed those to use `stop` for
    `destroyMethod`, a proper solution might be that `DefaultCamelContext`
    tracks all templates and stops them on shutdown, or make them
    `CamelContextAware` and `addService` them to CamelContext, or
    `addService` them in `createProducerTemplate` `createConsumerTemplate`.
    I've decided to do a simple fix here and provide a unit test that can be
    used to validate the best solution to the problem.

----
;;;","14/Mar/17 12:19;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1534
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Default values which was negative may have become positive,CAMEL-11007,13050608,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Mar/17 16:50,13/Mar/17 16:52,14/Jul/23 05:50,13/Mar/17 16:52,2.19.0,,,,,2.19.0,,,,camel-spring-boot,,,,0,,,We wrongly detected -1 as 1 as a default value,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-13 16:50:14.0,,,,,,,,,,,"0|i3bbvb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Blueprint - failed container fails to remove JMX object,CAMEL-11002,13050546,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,paolo.antinori,paolo.antinori,13/Mar/17 12:20,13/Mar/17 12:51,14/Jul/23 05:50,13/Mar/17 12:51,2.18.2,,,,,2.18.4,2.19.0,,,camel-blueprint,,,,0,,,"There is an issue with {{camel-blueprint}} lifecycle, similar to issue CAMEL-10411.

In case of an issue with an endpoint configuration, like for instance a non existing http endpoint {{uri=""http://localhost:6000/""}}, the JMX object of the CamelContext, remains registered, even if it shouldn't.

Camel current code actually already unregisters it, in {{org.apache.camel.management.DefaultManagementLifecycleStrategy#onContextStop}}, triggered by {{org.apache.camel.support.ServiceSupport#start}} exception handling section.

The reason why the MBean object stays registered, is because of {{BlueprintCamelContext}} is still registered as an OSGi service listener, and {{org.apache.camel.blueprint.BlueprintCamelContext#serviceChanged}}  is invoked, re-registering a new instance.
",,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,https://issues.jboss.org/browse/ENTESB-6431,,,,,,,,,,,,9223372036854775807,,,Mon Mar 13 12:49:04 UTC 2017,,,,,,,Patch Available,,,,"0|i3bbhj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Mar/17 12:45;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1531

    CAMEL-11002 - Camel-Blueprint, prevent JMX re-registration in case of…

    … failed Context

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-11002

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1531.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1531
    
----
commit 274ae6827f5776de555add1ba3afd546e7c29a3e
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2017-03-13T12:44:50Z

    CAMEL-11002 - Camel-Blueprint, prevent JMX re-registration in case of failed Context

----
;;;","13/Mar/17 12:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1531
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Property 'accessExternalDTD' is not recognized by (all) Xerces,CAMEL-11000,13050532,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,bligny,bligny,13/Mar/17 11:43,18/Apr/17 08:59,14/Jul/23 05:50,14/Mar/17 09:05,2.17.5,2.18.3,,,,2.17.7,2.18.4,2.19.0,,camel-validator,,,,0,,,"When upgrading from v2.18.1 to 2.18.3, we encounter a (blocking) regression, preventing routes involving validator component to successfully start.

Indeed, one of the recent validation-related changes is not fully compatible with all versions of Xerces. Especially when deployed on JBoss Wildlfy 10.1.0.Final :-(

*Stack trace*:
{code:java}
Caused by: java.lang.IllegalStateException: org.xml.sax.SAXNotRecognizedException: Property 'http://javax.xml.XMLConstants/property/accessExternalDTD' is not recognized.
	at org.apache.camel.processor.validation.SchemaReader.createSchemaFactory(SchemaReader.java:181)
	at org.apache.camel.processor.validation.SchemaReader.getSchemaFactory(SchemaReader.java:152)
	at org.apache.camel.processor.validation.SchemaReader.createSchema(SchemaReader.java:192)
	at org.apache.camel.processor.validation.SchemaReader.loadSchema(SchemaReader.java:84)
	at org.apache.camel.component.validator.ValidatorEndpoint.createProducer(ValidatorEndpoint.java:119)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:574)
	... 78 more
Caused by: org.xml.sax.SAXNotRecognizedException: Property 'http://javax.xml.XMLConstants/property/accessExternalDTD' is not recognized.
	at org.apache.xerces.jaxp.validation.XMLSchemaFactory.setProperty(XMLSchemaFactory.java:436)
	at __redirected.__SchemaFactory.setProperty(__SchemaFactory.java:143)
	at org.apache.camel.processor.validation.SchemaReader.createSchemaFactory(SchemaReader.java:178)
	... 83 more
{code}


In particular, in the following code:

{code:java}
protected SchemaFactory createSchemaFactory() {
   ...
	try {
		factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, """");
	} catch (SAXException e) {
		LOG.error(e.getMessage(), e);
		throw new IllegalStateException(e);
	} 
 
}   
{code} 
   
Would it be possible to issue a simple warning, rather then raising an exception ?
(>see Oracle recommandations: https://docs.oracle.com/javase/tutorial/jaxp/properties/error.html)",,acosentino,bjorn.hilstad,bligny,davsclaus,githubbot,j_ri,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 18 08:59:54 UTC 2017,,,,,,,,,,,"0|i3bbef:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"13/Mar/17 11:46;davsclaus;Yeah I think a WARN log would be fine. And then allow to work on.

You are welcome to provide a github PR;;;","13/Mar/17 20:46;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1533

    CAMEL-11000: Issued a simple warning rather than throwing an Exception

    [CAMEL-11000](https://issues.apache.org/jira/browse/CAMEL-11000) has more about this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1533.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1533
    
----
commit 23545491c228997f52cfc482af17c5f48fa83348
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-03-13T20:36:49Z

    CAMEL-11000: Issued a simple warning rather than throwing an Exception

----
;;;","14/Mar/17 09:05;acosentino;Thanks [~aldettinger] for the PR.;;;","14/Mar/17 10:22;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1533
;;;","18/Apr/17 08:56;bjorn.hilstad;This change does not actually seem to be in the 2.17.6 version. Something has gone wrong.;;;","18/Apr/17 08:59;acosentino;It will be in 2.17.7 is we will release it. Thanks for spotting this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test-karaf - Change breaks other tests,CAMEL-10987,13050150,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,davsclaus,davsclaus,10/Mar/17 21:37,10/Apr/17 11:53,14/Jul/23 05:50,13/Mar/17 13:40,2.19.0,,,,,2.19.0,,,,karaf,osgi,,,0,,,"So a recent change in camel-test-karaf broke tests run in

tests/camel-itest-karaf

{code}
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.476 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelZookeeperMasterTest
test(org.apache.camel.itest.karaf.CamelZookeeperMasterTest)  Time elapsed: 18.147 sec  <<< ERROR!
java.lang.ClassNotFoundException: org.ops4j.pax.tinybundles.core.TinyBundle not found by camel-test-karaf [9]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1574)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018)
{code}

",,davsclaus,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10999,CAMEL-11130,CAMEL-10947,CAMEL-10872,CAMEL-10363,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 14 09:08:51 UTC 2017,,,,,,,,,,,"0|i3b9gn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Mar/17 08:33;davsclaus;Tada, I wonder if the recent change in camel-test-karaf could have caused all the tests to fail in tests/camel-itest-karaf ?;;;","11/Mar/17 11:10;tadayosi;[~davsclaus] I'm not sure if my recent changes to camel-test-karaf caused all these as my changes were relatively conservative which don't change any existing behaviours, but yeah I can take a look at it as I have a little knowledge about testing on karaf/osgi now :-);;;","11/Mar/17 12:19;davsclaus;Yeah not totally sure either, but the CI server has a last success on Mar 7th which is 4 days ago
https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.itest.karaf/;;;","13/Mar/17 09:02;tadayosi;Sorry, it was mostly my fault :-(  I added a lambda {{(TinyBundle) -> \{\}}} to {{AbstractFeatureTest}} API that accidentally introduced a dependency to {{pax-tinybundle}} for {{camel-itest-karaf}} test bundles.

I'm working on a fix but it seems to uncover other potential itest issues such as CAMEL-10947.;;;","13/Mar/17 12:20;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1530

    CAMEL-10987: Remove TinyBundle from AbstractFeatureTest API to fix ClassNotFoundException in camel-itest-karaf

    This fixes the direct issue at https://issues.apache.org/jira/browse/CAMEL-10987.
    
    However, apparently camel-itest-karaf has been having much more potential issues. I'd like to address as much of them as possible here in pull reqs that follow.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10987

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1530.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1530
    
----
commit bfb6131ee11ab1a40b5e2b29ccadf8e7fd4808a3
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-13T12:12:51Z

    CAMEL-10987: Remove TinyBundle from AbstractFeatureTest API to fix ClassNotFoundException in camel-itest-karaf

----
;;;","13/Mar/17 12:28;tadayosi;Please don't close this JIRA yet, as there seems to be many more potential issues in {{camel-itest-karaf}}. I'd like to explore them a little more here before closing it.

See the last apparent success CI tests:
https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.itest.karaf/org.apache.camel$camel-itest-karaf/1293/testReport/org.apache.camel.itest.karaf/
In fact it only ran 15 tests; this test suite should have more than 200 tests, so I suspect most of them ran timeout just silently, invisible to CI test success/failure. We may need to investigate what's really happening in this itest suite.;;;","13/Mar/17 13:44;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1530
;;;","14/Mar/17 01:55;tadayosi;[~davsclaus], [~ancosen], I forgot to say one thing. The Jenkins build still activates a long gone profile {{-Pkaraf4}}:
{code}
Executing Maven:  -B -f /home/jenkins/jenkins-slave/workspace/Camel.trunk.itest.karaf/tests/camel-itest-karaf/pom.xml -Dmaven.repo.local=/home/jenkins/jenkins-slave/maven-repositories/1 -U clean test -Pkaraf4
...
[WARNING] The requested profile ""karaf4"" could not be activated because it does not exist.
{code}
Can anyone of you drop it from the settings?;;;","14/Mar/17 07:04;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1535

    CAMEL-10987: All camel-itest-karaf tests can run successfully now

    Except a few: CAMEL-10947, CAMEL-10363
    
    Now `./run-tests.sh` in `camel-itest-karaf` runs all the tests.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10987_2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1535.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1535
    
----
commit 44dd6a48dbe8d0c29131c44f14208d2beb0fea63
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-14T05:33:00Z

    CAMEL-10987: Move DuplicateNamespacePrefixIssueTest from camel-itest-karaf to camel-itest-osgi

commit 50fee1790b13e9f011822ad5e137e987742a3b36
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-14T05:57:25Z

    CAMEL-10987: Downgrade JGroups version that Infinispan depends on to fix CamelInfinispanTest

commit 360a129c76e3499b07ad3c9e482dd361dfb929ba
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-14T06:22:05Z

    CAMEL-10987: Fix CamelMongodbGridfsTest

commit c6e376b4247fc05e912630ac562f40b6f8bf029d
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-14T06:59:48Z

    CAMEL-10987: Ignore CamelSpringRedisTest due to CAMEL-10363

----
;;;","14/Mar/17 09:08;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1535
;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-coap fails to return results when enableCORS(true) is set,CAMEL-10985,13050071,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,scranton,scranton,10/Mar/17 15:32,27/Apr/17 12:57,14/Jul/23 05:50,27/Apr/17 12:56,2.19.0,,,,,2.19.0,,,,camel-coap,,,,0,,,"In the CoAPRestVerbTest, if you add to the restConfiguration() .enableCORS(true), then all of the unit tests that return a result fail as no response is returned

https://github.com/apache/camel/blob/master/components/camel-coap/src/test/java/org/apache/camel/coap/CoAPRestVerbTest.java#L106",,davsclaus,githubbot,jamesnetherton,scranton,zregvart,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10980,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 27 12:57:47 UTC 2017,,,,,,,,,,,"0|i3b8z3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Apr/17 08:29;davsclaus;Wonder if the recent fix in camel-coap may have improved this? We can test on master.;;;","21/Apr/17 08:29;davsclaus;[~jamesnetherton] in case you want to have more fun with camel-coap then we have this ticket;;;","21/Apr/17 08:57;jamesnetherton;Ok, I'll take a peek at it early next week.;;;","24/Apr/17 16:25;jamesnetherton;I'm no expert on CoAP, but, does CORS even make sense in this context? See method codes listed in this document (OPTIONS is not mentioned):

https://github.com/markushx/coap-cheatsheet/blob/master/coap-cheatsheet.pdf

The reason things are not working, is because when CORS is enabled, camel is [automatically adding|https://github.com/apache/camel/blob/master/components/camel-coap/src/main/java/org/apache/camel/coap/CoAPComponent.java#L119-L121] {{OPTIONS}} to the list of allowed method verbs configured on the endpoint. This screws up the logic to retrieve the correct consumer to handle the request, since it's expecting to match against individual verb names like {{GET}} or {{POST}} etc. Not {{GET,OPTIONS}} or {{POST,OPTIONS}} etc.

;;;","25/Apr/17 08:20;davsclaus;[~jamesnetherton] ah yeah CORS does not make sense for coap. I guess we would need to change some logic in camel-coap to avoid CORS.

Contributions is welcome;;;","27/Apr/17 12:11;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1665

    CAMEL-10985: Ignore CORS configuraion in CoAP component

    https://issues.apache.org/jira/browse/CAMEL-10985

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10985

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1665.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1665
    
----
commit ff417180291e2ece3e9d3dc4c918498805b6278c
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-04-27T09:48:33Z

    CAMEL-10985: Ignore CORS configuraion in CoAP component

----
;;;","27/Apr/17 12:52;zregvart;I concur with [~jamesnetherton] the [RFC7252 section 5.8|https://tools.ietf.org/html/rfc7252#section-5.8] does not mention {{OPTIONS}} method, this can safely be removed from CoAP.;;;","27/Apr/17 12:56;zregvart;Merged from [PR#1665|https://github.com/apache/camel/pull/1665] to {{master}};;;","27/Apr/17 12:57;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1665
;;;",,,,,,,,,,,,,,,,,,,,,,,,
error with enableCORS(true) with camel-undertow,CAMEL-10980,13049851,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,scranton,scranton,scranton,10/Mar/17 02:49,10/Mar/17 20:45,14/Jul/23 05:50,10/Mar/17 20:45,2.19.0,,,,,2.19.0,,,,camel-undertow,,,,0,,,"enableCORS(true) is causing an java.lang.IllegalArgumentException: Duplicate handler for a method 'OPTIONS': 'io.undertow.server.handlers.HttpContinueReadHandler@79c97cb', 'io.undertow.server.handlers.HttpContinueReadHandler@2d9caaeb'",,scranton,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10913,,CAMEL-10985,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 10 17:10:56 UTC 2017,,,,,,,,,,,"0|i3b7xb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/17 02:58;scranton;So if you enableCORS(true) *without* setting the ApiContextPath it throws the duplicate OPTIONS handler exception.

If you set both enableCORS(true) and setApiContextPath(""api-doc""), it does not throw an exception and seems to work.

If both settings are required, at a minimum the error should be friendlier... Need to debug more...;;;","10/Mar/17 15:14;scranton;dug a little deeper, and it looks like camel-undertow is throwing the duplicate handler exception because my rest dsl has 2 verbs on same path, and enableCORS(true) has it try to add an OPTIONS handler for each of those paths as well, so the 2nd add fails...

restConfiguration()...enableCORS(true);
rest()
  . get(""/users"").to(...)
  .post(""/users"".to(...) // fails here trying to add a duplicate OPTIONS, ""/users"" handler

I don't yet know why adding a setApiContextPath() changes things such that this works...

To be clear, I am NOT testing that CORS is working from the client side. I'm only testing that setting enableCORS(true) is breaking working code (I tripped over this case somehow in setting up other code).

I tested the same example with the other REST implementations (jetty, netty-http, netty4-http, restlet, servlet, spark-rest), and adding enableCORS(true) does not rest existing unit tests, e.g. https://github.com/apache/camel/blob/master/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/rest/RestNettyHttpVerbTest.java#L78 and adding .enableCORS(true) does not break existing unit tests.

camel-coap DOES break, but that feels like how should it handle enabling HTTP headers in an non-HTTP protocol. Feels like a different issue...;;;","10/Mar/17 15:39;scranton;disregard my comment about setApiContextPath changing things with enableCORS(true) - it does NOT. enableCORS(true) seems to consistently cause a duplicate handler error...;;;","10/Mar/17 17:10;scranton;OK, looks like camel-undertow is strict about checking for and preventing registration of duplication verb and path pairs, like OPTIONS, /users. In my test code both get(""/users"") and post(""/users"") with enableCORS(true) will cause an attempt to register 2 handlers for the same pair OPTIONS, /users.

The duplicate check happens here

https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/handlers/CamelMethodHandler.java#L55-L55

If I comment out this strict duplicate check, all the camel-undertow unit tests pass, including my previously failing enableCORS(true) variant, and CORS seems to work at least with a check test of running swagger-ui against my test code

https://github.com/CamelCookbook/camel-cookbook-examples/blob/3271a2cff02784062694536792f3b8d4f6e6f214/camel-cookbook-rest/src/main/java/org/camelcookbook/rest/api/CafeApiRouteBuilder.java#L77-L77

Also doing a quick look at camel-netty4-http, it appears that it allows duplicate verb, path pairs as well, which is probably why it ""works"". It feels like first handler found is used, and since enableCORS(true) seems to cause the same OPTIONS handler to be registered its OK... This doesn't feel great however, as its only because we're registering the same handler that it is working - if we needed to handle OPTIONS,/users different for each REST DSL path we'd get unpredictable behavior as first handler found is used...

Not sure how to process from here...

Removing the camel-undertow duplicate handler check seems to make it work the same as the other implementations. However it feels like a more through review should happen to figure out what is the right way to handle multiple VERB,PATH duplicates and how to handle CORS specifically...

https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/handlers/CamelMethodHandler.java#L55-L55

Please guide on do you want me to submit a PR for removal of the camel-undertow duplicate handler check OR pursue a different line of investigation (I'm not a CORS or HTTP framework expert so may exceed my current expertise, though I seem to be learning them quickly ;-)
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce Maven Plugin doesn't escape strings when doing the camel-salesforce:generate phase.,CAMEL-10966,13049296,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,nickcis,nickcis,08/Mar/17 15:47,13/Mar/17 16:06,14/Jul/23 05:50,13/Mar/17 12:04,2.19.0,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"Salesforce Maven Plugin doesn't escape strings when doing the camel-salesforce:generate phase.

Enums objects (`sobject-picklist.vm`) are created without escaping characters, this results in creating invalid clases that don't compile. ",,githubbot,nickcis,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 13 16:06:19 UTC 2017,,,,,,,Patch Available,,,,"0|i3b4hz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Mar/17 18:21;nickcis;This is the PR: https://github.com/apache/camel/pull/1511 related with this issue;;;","08/Mar/17 18:26;zregvart;Thank you for your contribution :);;;","08/Mar/17 18:44;githubbot;Github user NickCis closed the pull request at:

    https://github.com/apache/camel/pull/1511
;;;","09/Mar/17 18:36;zregvart;[~nickcis] found further issues with string escaping, see [this GitHub comment|https://github.com/apache/camel/pull/1511#issuecomment-285435852].;;;","10/Mar/17 15:48;githubbot;GitHub user NickCis opened a pull request:

    https://github.com/apache/camel/pull/1526

    CAMEL-10966 Salesforce Maven Plugin doesn't escape strings when doing the camel-salesforce:generate phase

    [Jira Ticket](https://issues.apache.org/jira/browse/CAMEL-10966)
    
    Continuing with the previous [PR](https://github.com/apache/camel/pull/1511). 
    
    This PR fixes escaping in `sobject-pojo` file.
    
    In addition, it directly uses _apache lang3 EscapeUtils_ instead of relying in _Velocity Escape Tools_. This last change is done due to a bug in slash (`/`) escaping of the library.
    
    Some tests were included, i think i coded them in an ugly way, please help me improve them.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NickCis/camel salesforce-maven-plugin-escaping

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1526.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1526
    
----
commit 512f5372c8c5736f3b56d9f908aea3c05812f21d
Author: Nicolas Cisco <nicolas.cisco@semperti.com>
Date:   2017-03-09T18:53:58Z

    Escaping strings in SObject Pojo

commit 265d774ab93e02def6f25d1e43fb468e35018136
Author: Nicolas Cisco <nicolas.cisco@semperti.com>
Date:   2017-03-09T18:59:07Z

    Removed used use of Velocity Escape Utils, using apache commons lang3 StringEscapeUtils in order to prevent slash escaping

commit fec2c93c4c046750d6d5f0eebf8d5f60ca3f79bb
Author: Nicolas Cisco <nicolas.cisco@semperti.com>
Date:   2017-03-10T15:40:31Z

    Adding test cases for template generation

----
;;;","13/Mar/17 12:04;zregvart;[PR#1526|https://github.com/apache/camel/pull/1526] has been merged, thanks to [~nickcis] for the contribution.;;;","13/Mar/17 16:06;githubbot;Github user NickCis closed the pull request at:

    https://github.com/apache/camel/pull/1526
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CXF http-jetty transport reverse proxy configuration will not work when using @BeanInject in RouteBuilder bean,CAMEL-10964,13049257,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,08/Mar/17 12:38,09/Mar/17 15:16,14/Jul/23 05:50,09/Mar/17 13:55,2.18.2,,,,,2.19.0,,,,camel-blueprint,camel-cxf,,,0,,,"Inside a {{RouteBuilder}} another bean is injected from registry using {{@BeanInject}}:
{code:java}
public class GreeterBuilder extends RouteBuilder {

    @BeanInject
    Configuration configuration;

    @Override
    public void configure() throws Exception {
        from(""cxf:bean:routerEndpoint"")
            ...
    }
...
{code}

CXF http-jetty transport is configured with reverse proxy inside blueprint context like this:
{code}
<blueprint ...>
  <httpj:engine-factory bus=""cxf"">
    <httpj:engine port=""7771"">
      <httpj:connector>
        <bean id=""connector"" class=""org.eclipse.jetty.server.ServerConnector"">
          <argument ref=""server"" />
          <argument>
            <array>
              <ref component-id=""httpConnectionFactory"" />
            </array>
          </argument>
          <property name=""port"" value=""7771"" />
        </bean>
      </httpj:connector>
    </httpj:engine>
  </httpj:engine-factory>

  <bean id=""server"" class=""org.eclipse.jetty.server.Server"" />

  <bean id=""httpConfiguration"" class=""org.eclipse.jetty.server.HttpConfiguration"">
    <property name=""customizers"">
      <list>
        <bean class=""org.eclipse.jetty.server.ForwardedRequestCustomizer"" />
      </list>
    </property>
  </bean>

  <bean id=""httpConnectionFactory"" class=""org.eclipse.jetty.server.HttpConnectionFactory"">
    <argument ref=""httpConfiguration"" />
  </bean>
  ...
{code}

However, the reverse proxy won't work as long as {{@BeanInject}} is present in the {{RouteBuilder}} bean.

The root cause is that the {{camel-blueprint}}'s {{CamelInjector}} triggers earlier startup of the blueprint Camel context before the route is fully up, so the http-jetty transport configuration is not correctly connected to the CXF endpoint.",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,https://issues.jboss.org/browse/ENTESB-6613,,,,,,,,,,,,9223372036854775807,,,Thu Mar 09 15:16:06 UTC 2017,,,,,,,,,,,"0|i3b49b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Mar/17 12:42;tadayosi;Actually I confirmed that this issue is already fixed by CAMEL-10513, but I'd like to write an itest for the issue so that it won't regress in the future.;;;","09/Mar/17 06:45;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1517

    CAMEL-10964: Add an itest for Jetty reverse proxy config with @BeanInject in RouteBuilder

    Actual fix for the issue is provided by CAMEL-10513.
    
    https://issues.apache.org/jira/browse/CAMEL-10964

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10964

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1517.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1517
    
----
commit 99124d83d19e849c066d7ba919562be5af1ef05e
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-09T06:07:03Z

    CAMEL-10964: Add an itest for Jetty reverse proxy config with @BeanInject in RouteBuilder
    
    Actual fix for the issue is provided by CAMEL-10513.

----
;;;","09/Mar/17 15:16;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1517
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
KinesisFirehoseProducer sets the deliverStreamName using getEndpointKey() instead of getStreamName(),CAMEL-10963,13049234,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,shanekelly_92,shanekelly_92,08/Mar/17 11:23,09/Mar/17 09:55,14/Jul/23 05:50,08/Mar/17 19:30,,,,,,2.19.0,,,,camel-aws,,,,0,easyfix,,"In the KinesisFirehoseProducer.createRequest() method, you have this line:

~~~~
putRecordRequest.setDeliveryStreamName(getEndpoint().getEndpointKey());
~~~~

but the deliverStreamName should be set using getEndpoint().getStreamName()",,davsclaus,githubbot,shanekelly_92,,,,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 09 09:55:51 UTC 2017,,,,,,,,,,,"0|i3b447:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Mar/17 13:01;davsclaus;Shane, you are welcome to provide a github PR with a fix;;;","08/Mar/17 16:24;githubbot;GitHub user tigertoes opened a pull request:

    https://github.com/apache/camel/pull/1515

    CAMEL-10963 Correcting getEndpointKey call

    This should fix the underlying issue (sorry about that!).
    
    I do want to put an integration test much like the others, but I think that's best followed up with another PR? Or if you can wait a little bit I can produce it as part of this one.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tigertoes/camel CAMEL-10963

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1515.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1515
    
----
commit 737544a428abed2ad9501755efcd64e3ae60c7ee
Author: Tony Tiger <thatrascaltiger@gmail.com>
Date:   2017-03-08T16:15:00Z

    CAMEL-10963 Correcting getEndpointKey call

----
;;;","08/Mar/17 19:30;davsclaus;Thanks for the PR;;;","09/Mar/17 09:55;githubbot;Github user tigertoes closed the pull request at:

    https://github.com/apache/camel/pull/1515
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZookeeperRoutingPolicy - Error setting up election node,CAMEL-10961,13049203,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alaendle,alaendle,08/Mar/17 08:58,13/Jun/17 08:18,14/Jul/23 05:50,10/Mar/17 20:53,2.18.2,,,,,2.18.4,2.19.0,,,camel-zookeeper,,,,0,,,"{code}
2017-03-08T07:28:43,282 | INFO  | Camel (jms-context) thread #0 - JmsConsumer[QUEPOSTDATA] | ZooKeeperElection                | 84 - org.apache.camel.camel-zookeeper - 2.18.2 | Initializing ZookeeperElection with uri 'zookeeper:localhost:2181,localhost:2182,localhost:2183/aq-um-bridge/master'
2017-03-08T07:28:43,329 | WARN  | Camel (jms-context) thread #0 - JmsConsumer[QUEPOSTDATA] | ZooKeeperElection                | 84 - org.apache.camel.camel-zookeeper - 2.18.2 | Error setting up election node /aq-um-bridge/master/BH5PMD2H-4a1cc867-94ec-409c-8bbf-a36e4fc8966e
java.lang.NullPointerException
	at org.apache.camel.component.zookeeper.operations.SetDataOperation.getResult(SetDataOperation.java:42) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.operations.ZooKeeperOperation.get(ZooKeeperOperation.java:70) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.ZooKeeperProducer.synchronouslySetData(ZooKeeperProducer.java:234) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.ZooKeeperProducer.process(ZooKeeperProducer.java:88) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.createCandidateNode(ZooKeeperElection.java:146) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.testAndCreateCandidateNode(ZooKeeperElection.java:116) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.isMaster(ZooKeeperElection.java:92) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperRoutePolicy.onExchangeBegin(ZooKeeperRoutePolicy.java:79) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor$RoutePolicyAdvice.before(CamelInternalProcessor.java:490) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:145) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:112) [61:org.apache.camel.camel-jms:2.18.2]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:721) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:681) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:651) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:317) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1166) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1158) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:?]
	at java.lang.Thread.run(Unknown Source) [?:?]
{code}

Please let me know what other information I should contribute. My guess is that this is just a timing problem; because the zookeeper instances were up and running (on the same server).
Also I noticed that there was no election-rote created after this error - so my guess is that routes in this state would never run, effectivly leading to a dead-node (failover to this node would never happen). ","Windows; Java 1.8",acosentino,alaendle,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 10 12:36:11 UTC 2017,,,,,,,,,,,"0|i3b3xb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/17 09:47;alaendle;My guess is that this was already handled with the change of ZooKeeperProducer in https://github.com/apache/camel/pull/1229/files.
Maybe this change could/should be merged to the v2.18.x-Branch so that this problem is at least fixed with the next v2.18.x release?;;;","10/Mar/17 10:23;davsclaus;Its a too big change for a patch.;;;","10/Mar/17 10:58;alaendle;Sorry, I fear this was a misunderstanding. I didn't want to have all the new features regarding curator included. I just wanted to ask to include the three lines into the process-Method of ZooKeeperProducer.java to avoid the NPE:

{code}
       if (connection == null) {
            connection = this.zkm.getConnection();
        }
{code}

Not more not less. Maybe you want to consider this.;;;","10/Mar/17 11:18;acosentino;I guess it should be fine to add only that check;;;","10/Mar/17 11:42;davsclaus;You are welcome to provide a github PR with such a fix
http://camel.apache.org/contributing;;;","10/Mar/17 12:18;githubbot;GitHub user alaendle opened a pull request:

    https://github.com/apache/camel/pull/1522

    CAMEL-10961: Backported parts of CAMEL-10292 in order to fix possible…

    … NPE in ZooKeeperProducer.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alaendle/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1522.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1522
    
----
commit dc46e915da034a0a07ff7348f19b711e0c6e4387
Author: Andreas Ländle <andreas.laendle@de.bosch.com>
Date:   2017-03-10T12:17:12Z

    CAMEL-10961: Backported parts of CAMEL-10292 in order to fix possible NPE in ZooKeeperProducer.

----
;;;","10/Mar/17 12:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1522
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Can't find dependency org.apache.camel:camel-box2,CAMEL-10954,13048651,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,tcunning,tcunning,06/Mar/17 21:02,06/Mar/17 22:37,14/Jul/23 05:50,06/Mar/17 22:37,2.19.0,,,,,2.19.0,,,,camel-box,,,,0,,,"Trying to build master, getting an error on a missing org.apache.camel:camel-box2, which I can't find in camel :

lilguylaptop:camel cunningt$ grep -r camel-box2 * | grep pom.xml
platforms/spring-boot/components-starter/camel-box2-starter/pom.xml:  <artifactId>camel-box2-starter</artifactId>
platforms/spring-boot/components-starter/pom.xml:    <module>camel-box2-starter</module>
lilguylaptop:camel cunningt$ 


",,tcunning,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 06 22:37:26 UTC 2017,,,,,,,,,,,"0|i3b0nz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/17 21:22;zregvart;I think `camel-box2-starter` should be removed, see CAMEL-9047.;;;","06/Mar/17 22:37;zregvart;Removed {{camel-box2-starter}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid default field values in Spring Boot ComponentConfiguration classes,CAMEL-10951,13048548,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,jamesnetherton,jamesnetherton,06/Mar/17 15:13,07/Mar/17 15:27,14/Jul/23 05:50,07/Mar/17 15:27,2.18.2,,,,,2.18.3,,,,build system,,,,0,,,"Some components default their endpoint configuration using constant fields. For example, the camel-mail {{MailConfiguration}} class has:

{code}
private String from = MailConstants.MAIL_DEFAULT_FROM;
{code}

When the MailComponentConfiguration is generated, it has a field defaulted as follows:

{code}
private String from = ""MailConstants.MAIL_DEFAULT_FROM"";
{code}

Not sure exactly how many components are impacted by this but there's a few listed if you do:

{code}
grep ""DEFAULT"" $(find . -name ""*ComponentConfiguration.java"")
{code}",,davsclaus,jamesnetherton,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 07 15:27:24 UTC 2017,,,,,,,,,,,"0|i3b01b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/17 15:33;davsclaus;Ah yeah then we need to grab the field value it represent. We do have some code that does this in the camel-route-parser;;;","06/Mar/17 15:36;davsclaus;The code is something a like
{code}
            FieldSource field = getField(clazz, block, (SimpleName) arg);

                    // the field may be initialized using variables, so we need to evaluate those expressions
                    Object fi = field.getInternal();
                    if (fi instanceof VariableDeclaration) {
                        Expression exp = ((VariableDeclaration) fi).getInitializer();
                        String uri = CamelJavaParserHelper.getLiteralValue(clazz, block, exp);
                        if (!Strings.isBlank(uri)) {
                            // we want the position of the field, and not in the route
                            int position = ((VariableDeclaration) fi).getStartPosition();
                            uris.add(new ParserResult(node, position, uri));
                        }
                    }
                }
{code}

See the CamelJavaParserHelper

Its that initialize stuff that is another expression you can then grab and then find its value is a string, integer or something
;;;","07/Mar/17 09:09;davsclaus;Just to be sure this is only a problem on master branch? 2.18.x are fine right?;;;","07/Mar/17 09:27;jamesnetherton;Problem seems to be present on the 2.18.x branch too:

https://github.com/apache/camel/blob/camel-2.18.x/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java#L119;;;","07/Mar/17 12:05;nferraro;[~davsclaus] I'm trying your approach, but cannot get useful info. There's something I'm missing...

Even if manage to evaluate the initializer expression (the field initializer returns null), are you sure we can get its value? I mean, the maven plugin does not use the application classpath, so it should not be able to evaluate an expression like ""MailConstants.XXX"" because it doesn't know what ""MailConstants"" is.. unless we so some hacks with the classloader...

I'm trying a naive approach in the meantime.;;;","07/Mar/17 12:17;davsclaus;Ah yeah that may be correct. We could at first skip those fields to not generate a default value. Then maybe later we can find a way;;;","07/Mar/17 12:18;davsclaus;We could maybe log some kind of WARN or something and then see how many there are. We can always change  the source code to set the default value as a String directly instead of the constant reference.;;;","07/Mar/17 12:24;nferraro;Let me check if the (simpler) approach I've found works for other components..;;;","07/Mar/17 14:01;nferraro;Committed upstream. The affected components are:
- box
- ganglia
- mail
- netty
- netty4
- ssh
- xmlsecurity

Claus, the patch may not win the code award for 2017, but it makes what we need :). Should we apply it also for 2.18.3?;;;","07/Mar/17 14:04;davsclaus;Yeah backport please, you may need to regen the starters on 2.18.x so the code are fully aligned - yeah it takes some time but its important to have good spring boot support for camel;;;","07/Mar/17 15:27;nferraro;Backported to branch 2.18.x.;;;",,,,,,,,,,,,,,,,,,,,,,
Websocket clients get message from all resources on one port ,CAMEL-10949,13048524,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,godbolerr@gmail.com,godbolerr@gmail.com,06/Mar/17 13:41,04/Apr/17 15:42,14/Jul/23 05:50,04/Apr/17 14:38,,,,,,2.18.4,2.19.0,,,camel-websocket,,,,0,,,"Routebuider configuration in which only resource URI is different while port is same.
1. newsTopic
2. stockQuoteTopic

 Ideally other clients connecting to newsTopic should get messages published
 on this topic only but they are also getting messages published on stockQuoteTopic.

 On further investigation I found out that memory store used to by sendAll
 is shared by all resource uri for a given port in the server.

 from(""activemq:topic:newsTopic"").to(""websocket://
 0.0.0.0:9090/newsTopic?sendToAll=true"");
        from(""activemq:topic:stockQuoteTopic"").to(""websocket://
 0.0.0.0:9090/stockQuoteTopic?sendToAll=true"");


 Sample Ouput received from client 

 2017-03-06 15:35:15.789:INFO::main: Logging initialized @313ms
 Connected to server

 Message received from server:MSFT        [ published on stockQuoteTopic. Expected ..]
 Message received from server:CNBC News   [ published on newsTopic. should not have received ]
 Message received from server:BBC News    [ published on newsTopic. should not have received ]",,davsclaus,githubbot,godbolerr@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 04 15:42:27 UTC 2017,,,,,,,,,,,"0|i3azvz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Mar/17 12:51;davsclaus;Contributions is welcome;;;","03/Apr/17 13:51;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1590

    CAMEL-10949 - websocket clients will get messages on which uri they a…

    …re subscribed to if sendToAll set to true

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10949

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1590.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1590
    
----
commit b4c9ec2db90e4dc4d8e9e20dbe85be748976237e
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-04-03T13:49:31Z

    CAMEL-10949 - websocket clients will get messages on which uri they are subscribed toif sendToAll set to true

----
;;;","04/Apr/17 14:38;davsclaus;Thanks for the PR;;;","04/Apr/17 15:42;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1590
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-hdfs2: initialDelay option is overwritten with default value,CAMEL-10948,13048508,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,06/Mar/17 12:16,19/Apr/17 08:09,14/Jul/23 05:50,06/Mar/17 12:23,,,,,,2.17.7,2.18.4,2.19.0,,camel-hdfs2,,,,0,,,We need to use the same trick as the mail component in the consumer side.,,acosentino,lmilev,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 19 08:09:44 UTC 2017,,,,,,,,,,,"0|i3azsf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Apr/17 21:13;lmilev;Hello, we had an issue running hdfs test.
Reportedly it also fails in CI, although sure-fire doesn't treat it as error.

This is an irc log:

zregvart> OneOneOneOne: I think this line should be removed
           https://github.com/apache/camel/blob/master/components/camel-hdfs2/s
           rc/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java#L44;;;","18/Apr/17 21:15;zregvart;[~ancosen] This seems to overwrite the URI parameter value given with default value, I think this [HdfsEndpoint.java#L44|https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java#L44] line needs to be removed as the {{initialDelay}} is already set to {{HdfsConsumer.DEFAULT_CONSUMER_INITIAL_DELAY}} in field initialization at [HdfsConfiguration.java#L74|https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsConfiguration.java#L74].
The tests actually fail on CI (see [Build #1288 Console output|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.java8/1288/org.apache.camel$camel-hdfs2/console]) but are not reported as failed, which is strange.
It fails with:  {{\[ERROR\] There was a timeout or other error in the fork}};;;","18/Apr/17 21:18;acosentino;Thanks for spotting this. I will fix it tomorrow :-);;;","19/Apr/17 08:09;acosentino;Fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet contract for RestConsumerFactory does not start the Endpoint,CAMEL-10939,13048289,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,04/Mar/17 13:11,04/Mar/17 13:17,14/Jul/23 05:50,04/Mar/17 13:17,2.19.0,,,,,,,,,camel-restlet,,,,0,,,"As uncovered in CAMEL-10935 the change introduced in CAMEL-10928 failed two tests.

The root cause for the test failure was that the {{Endpoint}} created at {{RestletComponent::createConsumer}} is not started, which leads to {{NullPointerException}} at {{RestletConsumer:65}} as the {{restletBinding}} of the {{RestletEndpoint}} is created on {{Endpoint}} start.

The reason tests originally passed is because both {{RestletConsumer}} and {{RestletProducer}} used the same {{Endpoint}} originally created and _started_ by the {{RestletProducer}}.

CAMEL-10928 changed the Endpoint parameter {{restletMethods}} to {{restletMethod}} for the {{RestletProducer}} whilst the {{RestletConsumer}} is using {{restletMethods}}, this results in differing {{Endpoint}} URIs which results in not getting the same {{Endpoint}} in the {{RestletConsumer}} as in {{RestletProduicer}}.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10935,CAMEL-10928,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-04 13:11:49.0,,,,,,,,,,,"0|i3ayhj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce Login exception: the error code is not reported properly,CAMEL-10936,13048268,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,lb,lb,04/Mar/17 09:28,23/Mar/17 12:10,14/Jul/23 05:50,23/Mar/17 12:10,,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"As per SalesforceSession's login exception handling [1] a message is computed to report both the error code and its description but then, when an object of type RestError is created, the computed message is used to set the RestError's code. 

IMHO, the error code provided by SalesForce should be reported as it is, then the computed message can be set for  RestError's message so instead of:

{code:java}
errors.add(new RestError(msg, error.getErrorDescription()));
{code}

It should be:

{code:java}
errors.add(new RestError(error.getError(), msg));
{code}

This helps to easily handle different error codes as one do not need to parse the error message. 

[1] https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/SalesforceSession.java#L199",,lb,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 12:10:48 UTC 2017,,,,,,,,,,,"0|i3aycv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Mar/17 12:10;zregvart;Fixed as suggested thanks [~lb]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing REST outTypeList attribute in Spring XML,CAMEL-10931,13047992,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,scranton,scranton,scranton,03/Mar/17 10:56,10/Mar/17 15:17,14/Jul/23 05:50,10/Mar/17 15:17,2.18.2,,,,,2.19.0,,,,camel-core,camel-spring,,,0,,,,,davsclaus,githubbot,scranton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 10 15:16:10 UTC 2017,,,,,,,,,,,"0|i3awnj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Mar/17 11:00;davsclaus;AFAIR you set the outType=""foo[]"" with the [] to indicate array/list type. Same as inType etc.;;;","03/Mar/17 11:03;davsclaus;However the javadoc on these model/verbs could be improved. You are welcome to add some text that tells about how to specify a list with the [] style.;;;","03/Mar/17 11:25;scranton;Should I open a separate issue around updating doc, or submit PR against this issue number?;;;","03/Mar/17 12:04;davsclaus;A PR with this number is fine and thanks for helping;;;","03/Mar/17 12:24;davsclaus;Scott I granted your user karma to self assign tickets;;;","09/Mar/17 13:56;davsclaus;Scott, just a gentle reminder.

I suppose you get a little time this weekend or so to provide a PR?

Its the setter of
org.apache.camel.model.rest.VerbDefinition#setOutType

And also for in type you can do the same with [] as list.
org.apache.camel.model.rest.VerbDefinition#setType
;;;","09/Mar/17 13:58;davsclaus;And also on RestBindingDefinition there is setters for them as well, so they should be changed too;;;","09/Mar/17 14:04;scranton;will do... distracted with my Cookbook updates... :-);;;","09/Mar/17 20:39;scranton;Looking at the code, shouldn't RestDefinition typeList and outTypeList be deprecated, and all of the documentation updated to say to use type(myClass[]) and outType(myClass[]) everywhere instead? That's all typeList and outTypeList are doing anyways, i.e. appending ""[]"" to the class name...

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java#L423
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java#L446

Recommending / documenting that you just use type(class[]) and outType(class[]) everyone would make Java and XML DSLs consistent...

Thoughts?;;;","09/Mar/17 21:10;davsclaus;Yeah that makes sese. However it requires some code change to make the code that takes a class type and gets the canonical name support arrays as it may not represent that correctly - to ensure when using Java it works as well.

;;;","10/Mar/17 13:18;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1524

    CAMEL-10931: deprecated typeList and outTypeList, and removed references from rest-api doc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-10931

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1524.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1524
    
----
commit 4f9d81b7b3afa14b57c0893c81f954d0d100ee84
Author: Scott Cranton <scott@cranton.com>
Date:   2017-03-10T13:17:00Z

    CAMEL-10931: deprecated typeList and outTypeList, and removed references from rest-api doc

----
;;;","10/Mar/17 13:20;scranton;I deprecated typeList and outTypeList, and removed references from rest-api.adoc.

I could not find where the rest-dsl doc is maintained in source to update that. Is that only on confluence? ;;;","10/Mar/17 15:16;githubbot;Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/1524
;;;",,,,,,,,,,,,,,,,,,,,
Undertow producer wrongly configures HTTP request path,CAMEL-10929,13047806,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,02/Mar/17 21:15,02/Mar/17 21:17,14/Jul/23 05:50,02/Mar/17 21:17,,,,,,2.19.0,,,,,,,,0,,,"When creating the HTTP request the Undertow producer creates it with path that includes the whole URL for the request, not only the path and query part of the request.
In the end this results in HTTP request like:
{code}
POST http://api.example.com/path?query
...
{code}
",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-02 21:15:39.0,,,,,,,,,,,"0|i3avi7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet contract for RestProducerFactory wrongly configures request method,CAMEL-10928,13047792,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,02/Mar/17 20:27,04/Mar/17 13:17,14/Jul/23 05:50,02/Mar/17 20:30,2.19.0,,,,,2.19.0,,,,camel-restlet,,,,0,,,"The {{RestProducerFactory::createProducer}} contract uses endpoint property {{restletMethods}} which is used solely by the Restlet consumer, the proper property should be {{restletMethod}}.
This makes all requests issue a {{GET}} rather than the one passed in the {{verb}} parameter.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10935,CAMEL-10939,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-03-02 20:27:26.0,,,,,,,,,,,"0|i3avf3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfConsumer doesn't clean up the CXF endpoint MBean upon stop,CAMEL-10914,13047279,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,01/Mar/17 11:15,20/Apr/21 06:25,14/Jul/23 05:50,02/Mar/17 08:12,2.18.2,,,,,2.17.6,2.18.3,2.19.0,,camel-cxf,,,,0,,,"{{CxfConsumer}}'s {{doStop()}} method just does {{server.stop()}} and not {{server.destroy()}}:
{code:java}
    protected void doStop() throws Exception {
        server.stop();
        super.doStop();
    }
{code}
This leads to a growing number of dangling endpoint MBeans on CXF side which are never used.

To reproduce the issue, extract the attached reproducer {{camel-cxf-hawtio.zip}} and do the following steps:

# Run the following command:
{code}
$ mvn hawtio:camel
{code}
# Access hawtio Camel tab [http://localhost:8080/hawtio/]. Start and stop the route {{cxf-greeting}} several times.
# Go to hawtio JMX tab and check CXF endpoint MBeans are growing.",,davsclaus,githubbot,mash-sap,njiang,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9502,,,,,,,,,"01/Mar/17 11:19;tadayosi;camel-cxf-hawtio.zip;https://issues.apache.org/jira/secure/attachment/12855349/camel-cxf-hawtio.zip",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.jboss.org/browse/ENTESB-6605,,,,,,,,,,,9223372036854775807,,,Tue Apr 20 06:25:00 UTC 2021,,,,,,,,,,,"0|i3as9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/17 11:23;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1498

    CAMEL-10914: CxfConsumer doesn't clean up the CXF endpoint MBean upon stop

    https://issues.apache.org/jira/browse/CAMEL-10914

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10914

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1498.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1498
    
----
commit 6d31d169dc17138ed02ad1164a4b2209729677fc
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-01T11:20:21Z

    CAMEL-10914: CxfConsumer doesn't clean up the CXF endpoint MBean upon stop

----
;;;","01/Mar/17 11:50;davsclaus;Thanks Tada, I granted your user karma to self assign tickets in JIRA;;;","02/Mar/17 00:36;tadayosi;Great! Thanks [~davsclaus] and [~ancosen].;;;","02/Mar/17 00:36;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1498
;;;","02/Mar/17 00:56;njiang;cxfRsConsumer[1] has the same problem, it's better to fix that part of code too.

[1]https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsConsumer.java;;;","02/Mar/17 01:22;tadayosi;Thanks [~njiang] for the good catch. I'll send another pull req soon.;;;","02/Mar/17 01:53;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1500

    CAMEL-10914: Apply the same fix as CxfConsumer to CxfRsConsumer

    Follow-up fix to: https://issues.apache.org/jira/browse/CAMEL-10914
    
    @WillemJiang @oscerd @davsclaus Can anyone merge this too, please?

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10914_2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1500.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1500
    
----
commit d6330e34f702ee619f5a6ac579f54314e278a440
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-02T01:31:57Z

    CAMEL-10914: Apply the same fix as CxfConsumer to CxfRsConsumer

----
;;;","02/Mar/17 08:08;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1500
;;;","19/Apr/21 09:25;mash-sap;Even this change is quite old, we just experience some problems with it. So I hope this is the right place to ask a question related to this change.

Setup:
 Route1 - CXFConsumer with endpoint address /test is already running
 Route2 - Gets started with CXFConsumer with same endpoint /test

The expected behavior: Route2 startup fails (endpoint already registered on address). Route1 keeps running.

Expected error on Route2 (endpoint already registered on address):
 [https://github.com/apache/cxf/blob/master/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java#L918]

Due to the change in this ticket, server.destroy() will be called after failed startup:
 [https://github.com/tadayosi/camel/commit/6d31d169dc17138ed02ad1164a4b2209729677fc#diff-174b6ca7cb178d3dc464aa9355d148d95fc0a3ad3f7edb60f0293fac988d3e05R100]

And it will eventually unregister the route:
 [https://github.com/apache/cxf/blob/master/core/src/main/java/org/apache/cxf/endpoint/ServerImpl.java#L191]

Observed behavior:
 After failed startup of Route2, Route1 is not registered anymore (HTTP 404 when trying to call /test). I could not reproduce this with embedded Jetty, but we experience this with tomcat on production.

Do you have any suggestion how this could be reproduced in a test using tomcat? Is there a simple way to replace jetty with tomcat?;;;","20/Apr/21 06:04;tadayosi;[~mash-sap] Hmm, my first impression is that you should just not try to register the same endpoint twice. Having duplicate consumers with exact same endpoint URI sounds application configuration issue rather than a bug with Camel.

That said, I'd file another JIRA with link to this one as 'is caused by' and discuss your issue further there.;;;","20/Apr/21 06:25;mash-sap;Thanks [~tadayosi]. I created a new ticket: https://issues.apache.org/jira/browse/CAMEL-16532;;;",,,,,,,,,,,,,,,,,,,,,,
CORS header Access-Control-Allow-Credentials not managed correctly,CAMEL-10913,13047276,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,01/Mar/17 10:48,19/Sep/17 07:03,14/Jul/23 05:50,14/Mar/17 12:01,,,,,,2.19.0,,,,camel-http-common,,,,0,,,"When a browser uses the ""withCredentials"" flag (not visible in HTTP request headers), it accepts the response only if the ""Access-Control-Allow-Credentials"" header returned by the server is set to ""true"".

That header is not part of Camel standard cors headers, but it can be set in the route. The problem is that when ""Access-Control-Allow-Credentials"" is set to ""true"", the ""Access-Control-Allow-Origin"" header cannot be set to ""*"", which is our default (https://www.w3.org/TR/cors/ - section 6.1, point 3).

Setting a value for the ""Access-Control-Allow-Origin"" header equals to the ""Origin"" header of the request makes the trick, but this must be set per-route, and *CORS must be disabled*.

Eg. 
{code}
// do not enable cors
rest().get(""/hello"")
  .route()
  .to(""direct:handle"")
  .setHeader(""Access-Control-Allow-Credentials"", constant(""true""))
  .setHeader(""Access-Control-Allow-Origin"", header(""Origin""));
{code}

Otherwise the only option is setting a fixed allowed origin if you know it in advance.

I wonder if we should add e.g. a "".corsAllowCredentials(boolean)"" configuration to handle this situation correctly, or another flag to reflect the origin instead of returning ""*"".",,davsclaus,lichtin,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10980,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 19 07:03:25 UTC 2017,,,,,,,,,,,"0|i3as8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/17 10:20;davsclaus;Yeah sounds good Nicola, you are welcome to work on this;;;","10/Mar/17 10:22;davsclaus;Yeah so if that corsAllowCredentials = true then we set the origin to be Origin instead of * (if its a *);;;","14/Mar/17 12:01;nferraro;Added the 'corsAllowCredentials' DSL method as a shortcut for setting the related flag.
Added also ""Access-Control-Allow-Credentials"" to the set of CORS headers (empty by default).;;;","18/Sep/17 19:29;lichtin;Hi Nicola, would it be possible to make this change available for 2.18.x?
I seem to also run into this issue and unfortunately cannot upgrade to 2.19.;;;","19/Sep/17 07:03;davsclaus;No 2.18.5 will be the last 2.18.x release and its currently being built.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms - Session object created from connection that gets closed,CAMEL-10912,13047011,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ryeats,ryeats,28/Feb/17 16:14,14/Aug/18 15:03,14/Jul/23 05:50,07/Mar/17 13:43,2.18.2,,,,,2.19.0,,,,camel-sjms,,,,0,,,"This is not easy to reproduce I haven't been able to simplify it down from our code to recreate it but I can reliably cause it to happen.  Basically if you hit a camel-sjms route with a spike of load from nothing and have a bunch of .toD(""dynamic-${route}"") it can create more connections than the pool allows then when a connection is returned it is closed and one of the routes will be using a session with a closed connection and will not work until it is restarted.
The code in question:
https://github.com/apache/camel/blob/camel-2.18.x/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOnlyProducer.java#L51-L67",,davsclaus,dmvolod,ryeats,sgalla,sumeetvaidya,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 15:03:09 UTC 2018,,,,,,,,,,,"0|i3aqlz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/17 08:37;davsclaus;Sounds like maybe the pool code needs some code that does a ""valid"" check to check if that connection is alive and ready to be used. Not sure if that is the case but I havent dived into the code. You are welcome to take a look.
;;;","07/Mar/17 13:12;davsclaus;I had a look and are enabling testOnBorrow by default in the ConnectionFactoryResource which is used OOTB. 

Then it makes a simple check before using a connection. When using ActiveMQ it checks if the connection and transport is okay. 
What JMS broker are you using?;;;","07/Mar/17 13:43;davsclaus;I added support for test on borrow so a closed connection should not happen.
;;;","07/Mar/17 15:21;ryeats;Thanks! we are using artemis as our broker, ill make some time to try the new changes out.;;;","14/Aug/18 14:45;sumeetvaidya;As per the above comments, this should have been fixed in Apache Camel 2.19.x.

But, I am experiencing the exact same issue with Camel 2.20.2 and ActiveMQ Artemis 2.4.0. 

Any pointers on how to resolve it are appreciated.;;;","14/Aug/18 15:03;dmvolod;[~sumeetvaidya], could you please to create a simple reproducer for this issue?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
http components: not all the options supported by component/endpoints are shown in the documentation,CAMEL-10906,13046971,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,28/Feb/17 13:44,01/Mar/17 16:53,14/Jul/23 05:50,01/Mar/17 16:53,,,,,,2.19.0,,,,camel-http,camel-http-common,camel-http4,,0,,,"The http components documentation does not expose all the options an endpoint/component supports and sometimes it reports them wrongly.

i.e. camel-http4 uses proxyAuthHost/proxyAuthPort [1] to configure the proxy but in the documentationreports proxyHost/proxyPort as endpoint options which is not true.

[1] https://github.com/apache/camel/blame/master/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java#L141-L164",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 01 09:54:03 UTC 2017,,,,,,,,,,,"0|i3aqd3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/17 08:38;davsclaus;Luca are you working on this? If no I can help with this;;;","01/Mar/17 09:54;lb;Not yet so you're welcome :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PDU is lost when SnmpMessage is copied,CAMEL-10893,13045976,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sverker,sverker,24/Feb/17 10:21,24/Feb/17 12:40,14/Jul/23 05:50,24/Feb/17 12:40,2.18.2,,,,,2.18.3,2.19.0,,,camel-snmp,,,,0,,,"SnmpMessage currently keeps the underlying PDU as an instance variable, but that is lost when the message is copied as then only body and headers are carried over to the new instance.",,davsclaus,sverker,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 24 12:40:06 UTC 2017,,,,,,,Patch Available,,,,"0|i3akmf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Feb/17 11:55;sverker;See pull request https://github.com/apache/camel/pull/1490;;;","24/Feb/17 12:40;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-ws - Has problem with returning proper response due invalid IN vs OUT code,CAMEL-10888,13045701,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,davsclaus,davsclaus,23/Feb/17 18:18,25/Feb/17 19:01,14/Jul/23 05:50,25/Feb/17 18:54,,,,,,2.17.6,2.18.3,2.19.0,,camel-spring-ws,,,,0,,,"See SO
http://stackoverflow.com/questions/42385355/apache-camel-spring-webservices-springwebserviceconsumer-does-not-read-answer-fr",,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Feb 25 19:01:25 UTC 2017,,,,,,,,,,,"0|i3aixb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Feb/17 11:43;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1489

    CAMEL-10888 - Has problem with returning proper response due invalid IN vs OUT code

    handling in exchange pattern

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10888

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1489.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1489
    
----
commit f0bb2f7f861deaa2cb20e1786d7daca0ed4164c2
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-02-24T11:38:04Z

    CAMEL-10888 - handling in exchange pattern

----
;;;","25/Feb/17 19:01;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1489
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JettyHttpComponent sets selector threads to 0 when running on 1 CPU,CAMEL-10874,13045083,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,nhoughto,nhoughto,22/Feb/17 05:57,22/Feb/17 09:43,14/Jul/23 05:50,22/Feb/17 09:42,2.18.2,,,,,2.18.3,2.19.0,,,camel-jetty,,,,0,,,"In JettyHttpComponent, ""createHttpClientTransport"" method the number of selectors is derived by:
{noformat}
int selectors = Runtime.getRuntime().availableProcessors() / 2;
{noformat}
If the number of available processors is 1, divided by 2, cast to int is 0 which causes an IllegalArgumentException.

The safe way to do this is via Math.max, like the Jetty code does:

{noformat}
int selector = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);
{noformat}

As per the code this is only exercised when maxThreads is not null, otherwise the default constructor is called and selectors are created properly.",,acosentino,davsclaus,githubbot,nhoughto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 22 09:43:38 UTC 2017,,,,,,,,,,,"0|i3af53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Feb/17 07:50;davsclaus;Thanks Nick, I wonder if you want to try to provide a fix as a github PR
http://camel.apache.org/contributing

https://github.com/apache/camel/;;;","22/Feb/17 07:51;acosentino;I'll wait for your PR some days then :-);;;","22/Feb/17 09:08;githubbot;GitHub user nhoughto opened a pull request:

    https://github.com/apache/camel/pull/1483

    CAMEL-10874: Ensure Jetty client selector count is a minimum of 1.

    As per https://issues.apache.org/jira/browse/CAMEL-10874

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nhoughto/camel defect-CAMEL-10874

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1483.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1483
    
----
commit 7586bfe23b202e1a85ab1e04ec3bae206b595472
Author: Nick Houghton <nhoughto@gmail.com>
Date:   2017-02-22T08:59:00Z

    CAMEL-10874 - Ensure Jetty client selector count is a minimum of 1.

----
;;;","22/Feb/17 09:42;acosentino;In 2.17.x I don't see selectors computed in that way.;;;","22/Feb/17 09:43;githubbot;Github user nhoughto closed the pull request at:

    https://github.com/apache/camel/pull/1483
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms transacted routes dead-lock when exceptions are thrown by asynchronous processors,CAMEL-10873,13044880,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fogninid,fogninid,21/Feb/17 16:17,24/Feb/17 13:20,14/Jul/23 05:50,24/Feb/17 13:20,2.18.2,2.19.0,,,,2.18.3,2.19.0,,,camel-sjms,,,,0,,,"SJMS Consumers attempt rollback of the JMS Session if an exception is thrown along the Camel route. The rollback is attempted where the exception occurs and not on the original synchronous pipeline.

For example with ActiveMQ and the thread component (see attached unit test)
{code:java}
AtomicInteger counter = new AtomicInteger();

from(destination + ""?acknowledgementMode=SESSION_TRANSACTED&transacted=true"")
   .threads()
   .process(exchange -> {
      if (counter.incrementAndGet() < TRANSACTION_REDELIVERY_COUNT) {
          throw new IllegalArgumentException();
      }
    })
    .to(""mock:async.exception"")
{code}

`Session.rollback()` must be called by the ActiveMQ Thread, but is attempted by the asynchronous Camel thread, resulting in a dead-lock:

{noformat}
""Camel (camel-1) thread #0 - Threads"" Id=26 BLOCKED on java.lang.Object@4b9df8a owned by ""ActiveMQ Session Task-1"" Id=22
    org.apache.activemq.ActiveMQMessageConsumer.rollback(ActiveMQMessageConsumer.java:1212)
    org.apache.activemq.ActiveMQMessageConsumer$5.afterRollback(ActiveMQMessageConsumer.java:1091)
    org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:162)
    org.apache.activemq.TransactionContext.rollback(TransactionContext.java:287)
    org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:603)
    org.apache.camel.component.sjms.tx.SessionTransactionSynchronization.onFailure(SessionTransactionSynchronization.java:54)
    org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:101)
    org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:234)
    org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
    org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:675)
    org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:630)
    org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:247)
    org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:258)
    org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:553)
    org.apache.camel.processor.Pipeline$1.done(Pipeline.java:147)
    org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:87)
    java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    java.util.concurrent.FutureTask.run(FutureTask.java:266)
    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    java.lang.Thread.run(Thread.java:745)

""ActiveMQ Session Task-1"" Id=22 WAITING on java.util.concurrent.CountDownLatch$Sync@6955cb39
    sun.misc.Unsafe.park(Native Method)
    java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
    java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
    java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)
    java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)
    java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)
    org.apache.camel.impl.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:75)
    org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:105)
    org.apache.camel.component.sjms.consumer.InOnlyMessageHandler.handleMessage(InOnlyMessageHandler.java:65)
    org.apache.camel.component.sjms.consumer.AbstractMessageHandler.onMessage(AbstractMessageHandler.java:89)
    org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1401)
    org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
    org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
    org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)
    org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)
    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    java.lang.Thread.run(Thread.java:745)
{noformat}",,davsclaus,fogninid,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Feb/17 16:19;fogninid;TransactedAsyncExceptionTest.java;https://issues.apache.org/jira/secure/attachment/12853773/TransactedAsyncExceptionTest.java",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 24 13:20:19 UTC 2017,,,,,,,,,,,"0|i3advz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Feb/17 13:20;davsclaus;Thanks for the unit test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZipkinTracer does not trigger doStart() when used in XML DSL,CAMEL-10856,13043955,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,objectiser,objectiser,17/Feb/17 10:51,20/Feb/17 09:31,14/Jul/23 05:50,20/Feb/17 09:31,2.18.2,,,,,2.18.3,2.19.0,,,camel-zipkin,,,,0,,,"When the ZipkinTracer is used from XML, the tracer's doStart() method is not called - resulting in the EventNotiifer not being registered and therefore not detecting when the exchange sends a message.

The same issue affects the opentracing component that is currently in development.",,objectiser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 17 10:52:12 UTC 2017,,,,,,,,,,,"0|i3a8e7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Feb/17 10:52;objectiser;This test can reproduce the problem by adding a second route (with e.g. direct call).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel adviceWith behaves differently when changing the order of weave statements,CAMEL-10855,13043946,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Feb/17 10:10,17/Feb/17 10:53,14/Jul/23 05:50,17/Feb/17 10:53,,,,,,2.18.3,2.19.0,,,camel-core,,,,0,,,"See SO
http://stackoverflow.com/questions/42000191/camel-advicewith-behaves-differently-when-changing-the-order-of-weave-statements/42288144#42288144",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-02-17 10:10:08.0,,,,,,,,,,,"0|i3a8c7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce: subscription channel created per component,CAMEL-10849,13043655,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,lb,lb,16/Feb/17 14:27,08/Jan/19 19:03,14/Jul/23 05:50,24/Feb/17 13:21,,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"If I creates two salesforce consumers, I can't set different options per channel as the client is configured on component level so i.e. you can't set a per channel replay id as only the first one is taken into account:

{code:java}
    from('salesforce:comments-1?updateTopic=true&sObjectQuery=SELECT Id, CommentId__c FROM Comment_Event__c')
        .to(""log:salesforce-comments?level=INFO&showHeaders=false&multiline=false"")
    from('salesforce:comments-2?updateTopic=true&sObjectQuery=SELECT Id FROM Case')
        .to(""log:salesforce-cases?level=INFO&showHeaders=false&multiline=false"")
{code}
",,dhirajsb,hnguyen15,lb,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10495,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 08 19:03:52 UTC 2019,,,,,,,,,,,"0|i3a6jj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Feb/17 10:46;zregvart;Its not all that well documented, but you can set per channel replay ids via the {{initialReplayIdMap}} property, it accepts a map keyed by channel name for which replay id is the value. It is somewhat odd that the CometD listeners are on per-component level not per-endpoint level, the original reasoning behind this could be optimization -- so to have only one connection to Salesforce (per component), and multiple subscribers (per consumer endpoint).

Perhaps having a endpoint property {{replayId}} that would override any values for the channel in {{initialReplayIdMap}} or value in {{defaultReplayId}} would be the solution?

Wonder if [~sirlatrom] or [~dhirajsb] could chime in?
;;;","17/Feb/17 10:59;lb;I did set the replay id per channel using the map but it is not taken into account as once the SubscriptionHelper get initialized, the initialReplayIdMap is not more taken into account;;;","20/Feb/17 18:29;sirlatrom;I believe it has to do with the session being bound to the component through its configuration, and the CometD listeners getting their messages over an authenticated session.;;;","22/Feb/17 12:17;zregvart;[~lb] I've committed a fix for this. The CometD client is still tied to the component, I think this makes sense as the number of clients connected to Salesforce is limited (per edition you run). I've change the way the replay support is configured and those properties (`defaultReplayId` and `initialReplayIdMap`) set on endpoint configuration should be taken into account, and preferred over the configuration on the component.

With the CometD client tied to component, this means that you cannot configure per-endpoint HTTP client, I don't see it as a great disadvantage, but it could be addressed by creating a new CometD client if the HTTP client on the component and on the endpoint differ.

Can you give it a spin and close this if it's now OK for you?;;;","23/Feb/17 09:19;lb;A few notes:
- it would be nice to keep logging the replay id used for a channel
- on endpoint level, it could make more sense to have also replayId instead of defaultReplayId/defaultReplayIdMap as most of the time you'll end up writing {{from(""salesforce:comments-1?defaultReplayId=-1&..."")}} and defaultReplayId is a little misleading, {{from(""salesforce:comments-1?replayId=-1&..."")}} is much clean IMHO.;;;","23/Feb/17 12:50;sirlatrom;[~lb] I agree about logging; though it is possible to see already it if you enable debug logging level for the CometD client, as it is part of the subscribe message payload, and you could log it in your consuming route by reading the corresponding exchange header.

As per the current naming, it is to signify that unless you specify initial {{replayId}} values per channel using the {{initialReplayIdMap}}, the default specified by {{defaultReplayId}} should be used.

Use case:
Keep 3 instances of a service running that subscribe to the same topic. They use Idempotent Consumer (http://camel.apache.org/idempotent-consumer.html) to only process each message once, but at the end of each route, the replayId from the message is stored, e.g. in Redis with a 24h TTL (since replayIds older than that are invalid anyway). When the application starts up, the initial replayIds are read from Redis and populated into the {{initialReplayIdMap}}. Topics for which no replayId is stored (or it expired per TTL) will then have {{defaultReplayId}} instead.

Does that make sense?;;;","23/Feb/17 15:59;lb;Yes it make sense but what I meant was that when you want to set a replyId on the uri string, thus bound to a specific channel, having something named initialReplayIdMap or defaultReplayId does not make much sense whereas they are perfectly meaningful on component level.;;;","23/Feb/17 17:49;sirlatrom;[~lb] I agree completely. So at the endpoint level, there would only be a single replayId URI parameter, {{replayId}}, which would override any default or initial replay IDs. This would only be useful if you're not actually using the replay functionality, or if you always want to play back the past 24 hours by setting the value to {{-2}}. Am I missing any other obvious use cases?;;;","23/Feb/17 19:36;dhirajsb;IIRC, the way that field was set was at the client level, which is wrong, it should really be just added to a map that the SF extension should then use. Or it could be an endpoint property, which I think you are making it now. That should be the only change required, since the SF extension does use a map from what I recall. ;;;","24/Feb/17 09:45;zregvart;[~lb] [~sirlatrom] [~dhirajsb] Thank you for the feedback, I've added two additional (small) changes:
 - logging at INFO level on subscription noting the replay ID sent (if sent)
 - {{replayId}} Endpoint URI option that has preference over all other {{*replayId}} options

Do you think we can resolve this now?;;;","24/Feb/17 13:21;lb;[~zregvart] thx so much;;;","08/Jan/19 19:03;hnguyen15;[~zregvart] [~lb] In version 2.23.0 when I set initialReplayIdMap to a value when the route starts everything behave like normal and I am fine with the replays. I'm getting an issue every time the route re-subscribes it tries to replay from the map again. The initialReplayIdMap needs to zero out (don't see any code that modifies the initialReplayIdMap) so we can default to -1 so we can wait for new replay ids. Eventually if i leave the route on for over 24 hours it eventually breaks because the replay id 24h time to live.

 

My app keeps track of the last replay id that happens so if the app is down at startup it will replay from the last replay id and listens for new ones.

 

Thanks for any help. ;;;",,,,,,,,,,,,,,,,,,,,,
Move operation will create a warning log message,CAMEL-10841,13043531,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,16/Feb/17 07:54,16/Feb/17 10:04,14/Jul/23 05:50,16/Feb/17 10:04,2.17.5,2.18.2,,,,2.17.6,2.18.3,2.19.0,,camel-ftp,,,,0,,,"I'm using an enpoint like this one : 
 - sftp://myserver/folder1/folder2?idempotent=true&stepwise=false&...&move=../archive 

With 2.18.2, I have logs like this : 
{noformat}
  2017-02-15T13:23:47.314 [Camel (camel-1) thread #10 - sftp://myserver/folder1/folder2] WARN  o.a.c.c.file.remote.SftpOperations - Cannot delete file: folder1/folder2/../archive/myfile.txt
com.jcraft.jsch.SftpException: No such file
	at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2873)
	at com.jcraft.jsch.ChannelSftp.rm(ChannelSftp.java:1985)
	at org.apache.camel.component.file.remote.SftpOperations.deleteFile(SftpOperations.java:435)
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:100)
{noformat}

the issue was introduced with CAMEL-10712

Thanks to Guillaume Lundy for pointing that out",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 16 09:44:47 UTC 2017,,,,,,,,,,,"0|i3a5rz:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"16/Feb/17 09:44;siano;unfortunately the deleteFile calls are spread all over the camel-file and the camel-ftp components, so changing the way exceptions are thrown for this issue is not reasonable.

I will just reduce the log level for the log to debug. This will normally not fill up the log with confusing entries, but will make it possible to analyze issues if they occur. Other similar issues (e.g. when creating directories) are also logged with debug in the file component.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition when reading principal for one-way web services,CAMEL-10830,13043182,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,15/Feb/17 07:47,15/Feb/17 08:55,14/Jul/23 05:50,15/Feb/17 08:55,2.16.2,,,,,2.19.0,,,,camel-cxf,,,,0,,,"This is an issue of the more esoteric kind.

If camel-cxf is running on Tomcat 7 and the provided web service is a one-way webservice and if the robust feature is not set in very rare cases the following exception can occur:
{noformat}
nowjava.lang.SecurityException: attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set
        at javax.security.auth.Subject$SecureSet.add(Subject.java:1106)
        at java.util.Collections$SynchronizedCollection.add(Collections.java:1636)
        at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest(DefaultCxfBinding.java:275)
        at org.apache.camel.component.cxf.CxfConsumer$1.prepareCamelExchange(CxfConsumer.java:187)
        at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:132)
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:78)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask.run(FutureTask.java:262)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
        at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:278)
        at org.apache.cxf.interceptor.OneWayProcessorInterceptor$1.run(OneWayProcessorInterceptor.java:137)
        at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:428)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:353)
        at java.lang.Thread.run(Thread.java:807)
{noformat}

The reason for that is in the combination of this code
{code:title=DefaultCxfBinding.java}
        if (securityContext instanceof LoginSecurityContext
            && ((LoginSecurityContext)securityContext).getSubject() != null) {
            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, 
                                                   ((LoginSecurityContext)securityContext).getSubject());
        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {
            Subject subject = new Subject();
            subject.getPrincipals().add(securityContext.getUserPrincipal());
            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject);
        }
{code}
with the implementation of the CXF securtyContext, the way Tomcat implements the login context, and the thread context change created by CXF for the one-way web services. As a result the behaviour of securityContext.getUserPrincipal() may change asynchonously at any time (so it may return a principal when the null check happens and may return null on the second call). Trying to add null to the principals will create above exception.

The fix for this is to call getUserPrincipal() only once and perform the null check and the add() operation with the result.

Obviously the issue is not testable (because even in the environment where this may happen it is very improbable that it can be reproduced).",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-02-15 07:47:13.0,,,,,,,,,,,"0|i3a3mf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Jasypt component throws NPE,CAMEL-10822,13042598,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,joeluo,joeluo,13/Feb/17 15:56,14/Feb/17 10:30,14/Jul/23 05:50,14/Feb/17 09:15,2.17.0,,,,,2.17.6,2.18.3,2.19.0,,camel-jasypt,,,,0,,,"Camel Jasypt component throws NPE if the jasypt master password is configured to use environment variable but not set to any value.

For instance, I had a bean configured for JasyptPropertiesParser:
{code}
<bean id=""jasypt"" class=""org.apache.camel.component.jasypt.JasyptPropertiesParser"">
        <property name=""password"" value=""sysenv:JASYPT_ENCRYPTION_PASSWORD""/>
    </bean>
{code}
But I did not set value for the environment variable ""JASYPT_ENCRYPTION_PASSWORD"", then my camel-jasypt route would fail with a NPE:
{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.jasypt.JasyptPropertiesParser.setPassword(JasyptPropertiesParser.java:95)
...
{code}

The reason is the org.apache.camel.component.jasypt.JasyptPropertiesParser.java code setPassword method here:
{code}
public void setPassword(String password) {
    // lookup password as either environment or JVM system property
    if (password.startsWith(""sysenv:"")) {
        password = System.getenv(ObjectHelper.after(password, ""sysenv:""));
    }
    if (password.startsWith(""sys:"")) {
        password = System.getProperty(ObjectHelper.after(password, ""sys:""));
    }
    this.password = password;
}
{code}
The first ""if"" statement returns a NULL and the second ""if"" statement throws a NPE due to lack of NPE check.",,acosentino,davsclaus,joeluo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Feb/17 15:56;joeluo;patch.txt;https://issues.apache.org/jira/secure/attachment/12852371/patch.txt",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 14 10:30:17 UTC 2017,,,,,,,Patch Available,,,,"0|i3a00v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Feb/17 07:57;davsclaus;Thanks Joe for the patch. I wonder if you in the future want to provide the patches as github PR?

Then the patches are easier to merge and also keep tracks on whom have contributed and can keep track of how much you have done etc.;;;","14/Feb/17 09:22;acosentino;Merged. I changed only the null checking by using ObjectHelper#isNotEmpty method.;;;","14/Feb/17 10:30;joeluo;Hi Claus, sure, will provide patches as github PR in future. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultFluentProducerTemplate mixes up data when sending asynchronously,CAMEL-10820,13042555,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,jub,jub,13/Feb/17 12:03,07/Mar/17 14:04,14/Jul/23 05:50,07/Mar/17 14:04,2.18.2,,,,,2.18.4,2.19.0,,,camel-core,,,,0,,,"DefaultFluentProducerTemplate

code:

producer = context.createFluentProducerTemplate();

future1 = producer.withHeader(""action"", ""register"").withBody(body1).asyncSend();
future2 = producer.withHeader(""action"", ""register"").withBody(body2).asyncSend();

These two subsequent calls produces with the default creation two calls with the same body - body2.
The cause is that it uses default processor supplier () -> this::populateExchange which is call lazily at the time of send and at that time the body property of DefaultFluentProducerTemplate is body2.","eclipse, win7, gradle",davsclaus,jub,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Mar/17 13:39;jub;default_fluent_producer_template.diff;https://issues.apache.org/jira/secure/attachment/12856173/default_fluent_producer_template.diff",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 07 12:51:21 UTC 2017,,,,,,,,,,,"0|i39zrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/17 08:49;davsclaus;Ah well spotted.

I wonder if you fancy taking a stab at trying to implement a fix for this? Not sure on top of my head how to do this, but maybe somehow with async send the state of the template must be computed and send asap. Or you need some kind of Stack to push/pop when doing multiple sends or something.

;;;","05/Mar/17 13:39;jub;default processor always create copy of headers and actual reference of body;;;","05/Mar/17 13:41;jub;The easiest solution would be to always create copy of headers and keep actual reference to body. It is not the most efficient way, because the copy of headers is also done for synchronuous calls.;;;","06/Mar/17 08:50;lb;We may also delay the creation of default exchangeSupplier/processorSupplier so that for async* operation we can make a copy of the values only if needed;;;","06/Mar/17 10:41;lb;I changed a little bit producer template so that it copies the body and headers when doing async stuffs, the changes are there: https://github.com/lburgazzoli/apache-camel/commit/e329eabfe98f5ecab7fe50737567a0a921442325


[~jub] do you mind having a look ?;;;","07/Mar/17 12:51;davsclaus;Luca this looks fine;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
dumpModelAsXml can return invalid XML namespace xmlns:xmlns,CAMEL-10817,13042119,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,10/Feb/17 16:49,13/Feb/17 09:13,14/Jul/23 05:50,13/Feb/17 09:06,2.18.0,,,,,2.18.3,2.19.0,,,camel-core,,,,0,,,"Seems I introduced a [bug|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/ModelHelper.java#L99] when implementing CAMEL-10509.

If we're processing a namespace prefix of 'xmlns' then obviously we should not prefix it with the same value. But currently this is allowed and a namespace prefix of 'xmlns:xmlns' is added to the {{<routes>}} element. This can mean that the output from {{ModelHelper.dumpModelAsXml}} is invalid.

However, I can only reproduce the problem on Karaf where the routes use xpath expressions. Some how with other platforms & scenarios the 'xmlns:xmlns' value is being ignored and never makes it into the {{dumpModelAsXml}} output.",,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 13 09:13:24 UTC 2017,,,,,,,,,,,"0|i39x2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Feb/17 08:59;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1459

    CAMEL-10817: Prevent duplicated xmlns namespace prefix

    https://issues.apache.org/jira/browse/CAMEL-10817

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10817

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1459.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1459
    
----
commit f41bc2ec16b9963b52646dd487b9d07e8c38a556
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-02-13T08:43:58Z

    CAMEL-10817: Prevent duplicated xmlns namespace prefix when dumping model XML

----
;;;","13/Feb/17 09:13;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1459
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.ClassCastException when using FlexibleAggregationStrategy with Spring Boot,CAMEL-10802,13041035,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gcotgi,gcotgi,07/Feb/17 17:12,23/Feb/17 18:20,14/Jul/23 05:50,23/Feb/17 18:20,2.18.2,,,,,2.18.3,2.19.0,,,camel-core,camel-spring-boot,,,0,,,"We are having a strange issue while using the FlexibleAggregationStrategy
with spring boot. Below is a sample and trivial route I just made up
to demonstrate the issue:

{code:java}
from(""direct:should-work"")
                .id(""should-work"")
                .log(LoggingLevel.INFO, ""Before the first split the
body is ${body} and has class ${body.getClass()}"")
                .split(body(),
AggregationStrategies.flexible().pick(body()).accumulateInCollection(LinkedList.class))
                .log(LoggingLevel.INFO, ""During the first split the
body is ${body} and has class ${body.getClass()}"")
                .end()
                .log(LoggingLevel.INFO, ""Before the second split the
body is ${body} and has class ${body.getClass()}"")
                .split(body(),
AggregationStrategies.flexible().pick(body()).accumulateInCollection(LinkedList.class))
                .log(LoggingLevel.INFO, ""During the second split the
body is ${body} and has class ${body.getClass()}"")
                .end()
                .log(LoggingLevel.INFO, ""After the second split the
body is ${body} and has class ${body.getClass()}"")

{code}

Along with the relevant unit test:

{code:java}
   @Test
    public void shouldProduceMessages() throws InterruptedException {
        // we expect that a number of messages is automatic done by the Camel
        // route as it uses a timer to trigger
        NotifyBuilder notify = new
NotifyBuilder(camelContext).whenDone(1).and().whenExactlyFailed(0).create();

        producerTemplateShouldWork.sendBody(Arrays.asList(""FIRST"", ""SECOND""));

        assertTrue(notify.matches(10, TimeUnit.SECONDS));
    }
{code}

The test fails with the following unexpected exception:

{code}
java.lang.ClassCastException: Cannot cast java.util.LinkedHashSet to
java.util.LinkedList
at java.lang.Class.cast(Class.java:3369) ~[na:1.8.0_111]
at org.apache.camel.util.toolbox.FlexibleAggregationStrategy.safeInsertIntoCollection(FlexibleAggregationStrategy.java:281)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.util.toolbox.FlexibleAggregationStrategy.injectAsCollection(FlexibleAggregationStrategy.java:264)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.util.toolbox.FlexibleAggregationStrategy.aggregate(FlexibleAggregationStrategy.java:235)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.doAggregateInternal(MulticastProcessor.java:942)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.doAggregate(MulticastProcessor.java:924)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:644)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.Splitter.process(Splitter.java:108)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:225)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:370)
[camel-core-2.18.2.jar:2.18.2]
at broken.MySpringBootRouterTest.shouldProduceMessages(MySpringBootRouterTest.java:41)
[test-classes/:na]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~[na:1.8.0_111]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~[na:1.8.0_111]
at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
[junit-4.12.jar:4.12]
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[junit-4.12.jar:4.12]
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
[junit-4.12.jar:4.12]
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [junit-4.12.jar:4.12]
at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
[junit-rt.jar:na]
at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
[junit-rt.jar:na]
at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)
[junit-rt.jar:na]
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
[junit-rt.jar:na]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~[na:1.8.0_111]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~[na:1.8.0_111]
at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
[idea_rt.jar:na]
{code}

And from the log we can see that it has failed at the second aggregate
step of the route.
Just for fun, I've also tried changing the second aggregation to
produce HashSet, and here's the resulting exchange:

{code}
[Message[ID-CAMERA-GIO-51647-1486214369840-0-21], SECOND, FIRST]
{code}


So it looks like either spring or camel are trying to aggregate back
into an HashSet of messages instead of an empty one

If anyone wants to have a deeper look, I've put online a small test
project here:

https://gitlab.com/g.condello/camel-split-join-issue
","Windows 10
Camel 2.18.2
Spring 4.3.6
Spring Boot 1.5.1",davsclaus,gcotgi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 23 18:20:42 UTC 2017,,,,,,,,,,,"0|i39qdr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Feb/17 07:53;davsclaus;Can you try without spring boot. I would assume it wouldn't matter. And maybe just create a plain junit test that can run standalone.;;;","08/Feb/17 09:44;gcotgi;Hi, 

I've updated my repository with a plain java main and a spring-only version that uses XML configuration.

Unless I've configured the Spring Camel Context wrong, it seems that this issue affects only the spring boot version.

You can find the updated code at the old address.;;;","23/Feb/17 18:20;davsclaus;Thanks for the test project;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Indexing with simple expression broken in Apache Camel 2.18,CAMEL-10789,13040408,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surjitsen,surjitsen,04/Feb/17 22:52,01/Mar/17 09:13,14/Jul/23 05:50,01/Mar/17 09:13,2.18.0,2.18.1,2.18.2,,,2.18.3,,,,camel-core,,,,0,,,"The following sample code works fine with version 2.17.4 (JDK 1.7), but fails on Camel 2.18.0, 2.18.1 and 2.18.2 (JDK 1.8)
{code}
from(""direct:process"")
        .process(new Processor() {
            public void process(Exchange exchange) {
                List<String> alist = new ArrayList<String>();
                alist.add(""1"");
                alist.add(""99"");
                exchange.getIn().setHeader(""ITEMS"", alist);
                exchange.getIn().setHeader(""TOTAL_LOOPS"", alist.size());
            }
        })
        .loop(simple(""${header.TOTAL_LOOPS}"", Integer.class))
          .setHeader(""item"", simple(""${header.ITEMS[${property.CamelLoopIndex}]}"", String.class))
          .log(LoggingLevel.INFO, LOG_CLASS_NAME, simple(""item = ${header.item} and TOTAL_MAPS = ${header.TOTAL_LOOPS}"").getText())
        .end()
        .end();
{code}

With 2.18.x, the following exception gets thrown:

{code}
2017-02-03 21:13:31 ERROR DefaultErrorHandler:204 - Failed delivery for (MessageId: ID-CATL0W10D4DG4R1-55822-1486174410756-0-1 on ExchangeId: ID-CATL0W10D4DG4R1-55822-1486174410756-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: [${property.CamelLoopIndex}] on java.util.ArrayList due to: java.lang.IndexOutOfBoundsException: Key: ${property.CamelLoopIndex} not found in bean: [1, 99] of type: java.util.ArrayList using OGNL path [[${property.CamelLoopIndex}]]
{code}",Camel 2.18.0/2.18.1/2.18.2 with JDK 1.8.0_112,surjitsen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,http://stackoverflow.com/questions/42035770/indexing-with-simple-expression-broken-in-apache-camel-2-18,,,,,,,,,,,9223372036854775807,,,2017-02-04 22:52:29.0,,,,,,,,,,,"0|i39ml3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple handlers with multiple endpoints on same port causes a handler loop,CAMEL-10788,13040391,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tonswieb,tonswieb,04/Feb/17 18:55,06/Feb/17 14:02,14/Jul/23 05:50,05/Feb/17 11:16,,,,,,2.17.6,2.18.3,2.19.0,,camel-jetty,,,,0,,,"When more then one handler is added to two different endpoints that run on the same port a handler loop occurs.

See unit test in pull request for the example.",,davsclaus,githubbot,tonswieb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7520,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 06 14:02:16 UTC 2017,,,,,,,,,,,"0|i39mhb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Feb/17 18:59;githubbot;GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/1447

    CAMEL-10788 : Fixed handler loop when multiple endpoints on the same …

    …port have more then one handler

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel CAMEL-10788

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1447.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1447
    
----
commit 98c0d2dfc498f691e5b017bd8c8061f5ba9d843e
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2017-02-04T18:58:24Z

    CAMEL-10788 : Fixed handler loop when multiple endpoints on the same port have more then one handler

----
;;;","05/Feb/17 11:16;davsclaus;Thanks for the PR;;;","06/Feb/17 14:02;githubbot;Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/1447
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSLT transform cannot use default DTM,CAMEL-10783,13040096,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,03/Feb/17 10:34,03/Feb/17 14:03,14/Jul/23 05:50,03/Feb/17 13:14,2.18.2,,,,,2.18.3,2.19.0,,,camel-core,,,,0,,,"{code}
Caused by: java.lang.IllegalStateException: OneTimeXMLReader.parse() can only be used once!
	at org.apache.camel.converter.jaxp.XMLReaderPool$OneTimeXMLReader.checkValid(XMLReaderPool.java:132)
	at org.apache.camel.converter.jaxp.XMLReaderPool$OneTimeXMLReader.setContentHandler(XMLReaderPool.java:178)
	at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:461)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:701)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1275)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1253)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:141)
{code}

CrossRef: https://issues.jboss.org/browse/ENTESB-6531",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 03 14:03:36 UTC 2017,,,,,,,,,,,"0|i39knr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Feb/17 10:36;tdiesler;The XMLReaderPool currently uses a OneTimeXMLReader, which prevents setter access after the parse method has been called.

The JDK's DTMManagerDefault however attempts to reset handlers in a finally clause

{code}
        } finally {
          // Reset the ContentHandler, DTDHandler, ErrorHandler to the DefaultHandler
          // after creating the DTM.
          if (reader != null && !(m_incremental && incremental)) {
            reader.setContentHandler(m_defaultHandler);
            reader.setDTDHandler(m_defaultHandler);
            reader.setErrorHandler(m_defaultHandler);
            
            // Reset the LexicalHandler to null after creating the DTM.
            try {
              reader.setProperty(""http://xml.org/sax/properties/lexical-handler"", null);
            }
            catch (Exception e) {}
          }
          releaseXMLReader(reader);
        }
{code};;;","03/Feb/17 12:09;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1441

    [CAMEL-10783] XSLT transform cannot use default DTM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10783

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1441.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1441
    
----
commit b265e3cfa475ca1752cc354612704a1305206af9
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-02-03T11:02:38Z

    [CAMEL-10783] XSLT transform cannot use default DTM

----
;;;","03/Feb/17 12:43;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1442

    [CAMEL-10783] XSLT transform cannot use default DTM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10783m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1442.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1442
    
----
commit 5c52ec0b54d2989fbbf361d2768feed0f82e8fbb
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-02-03T11:02:38Z

    [CAMEL-10783] XSLT transform cannot use default DTM

----
;;;","03/Feb/17 12:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1441
;;;","03/Feb/17 13:14;davsclaus;Thanks for the PR;;;","03/Feb/17 14:03;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1442
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP: cannot get files from users home with readlock changed,CAMEL-10782,13040087,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,StefanR,StefanR,03/Feb/17 09:56,28/Feb/17 10:01,14/Jul/23 05:50,28/Feb/17 10:01,2.16.4,2.18.2,,,,2.17.6,2.18.3,2.19.0,,camel-ftp,,,,0,,,"Camel cannot fetch files from users home directory when using readlock=changed. 

Route from URI is defined like this:

<from uri=""sftp://testi@server:22?password=password&amp;include=PSOP_123-.*\.(xml|pdf)&amp;delete=true&amp;readLock=changed&amp;readLockTimeout=360000&amp;readLockCheckInterval=180000&amp;readLockMinAge=10s&amp;maxMessagesPerPoll=100""/>

And from TRACE logs I can see stuff like this:

2017-02-03 10:59:45,146 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Using full directory listing to update file information for RemoteFile[PSOP_123-sdfsd.xml]. Consider enabling fastExistsCheck option.
2017-02-03 10:59:45,146 | TRACE | //testi@infra:22 | SftpOperations                   | 225 - org.apache.camel.camel-ftp - 2.16.4 | listFiles(/)
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | List files PSOP_123-sdfsd.xml found 23 files
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Previous last modified: 0, new last modified: 0
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Previous length: 0, new length: 0
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | New older than threshold: 1486112375150
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Exclusive read lock not granted. Sleeping for 20000 millis.


User home directory contains only 1 file, which does match to include parameter. It does seem, that camel-ftp is trying to check file readlock from the server root. 

When placing the files to a subdirectory in users home, this does not happen. 

","servicemix 7.0.0, Linux SFTP server",davsclaus,StefanR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Feb/17 08:00;StefanR;camel_2.18.2_sftp_problem_with_homedir;https://issues.apache.org/jira/secure/attachment/12851327/camel_2.18.2_sftp_problem_with_homedir",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 28 09:36:27 UTC 2017,,,,,,,,,,,"0|i39klr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Feb/17 09:59;davsclaus;Can rely on the FTP client to provide the timstampe / file size. And if the client returns 0 all the time, then there is nothing Camel can do.

Can you do TRACE logging from the sub folders where it shows those values.

Then try to reach out to the FTP client project and see if they can find an issue/bug in their library.;;;","03/Feb/17 12:14;StefanR;What was apparrently happening was that, when file was created it was zero in length. So camel-ftp went sleeping for short time, because it could not get readlock (minsize 1). After that it tried to reCheck the file, but for some reason from the server root, / , and not from users home, /home/testi/. File count which was reported by camel-ftp, matches the count from that servers root (home dir count would be less than 10 files/dirs).

I found a way around this by setting source directory to ""./"" like this:
<from uri=""sftp://testi@infra:22/./?password=passu&amp;.....

With that kind of from URI it does seem to work normally.
;;;","03/Feb/17 12:19;davsclaus;Can you try test with latest 2.18.2 release;;;","07/Feb/17 07:08;StefanR;Yes its the same thing with Camel 2.18.2.

I created and started following route:

        from(""sftp://testi@infra:22/""
        		+""?password=passu""
        		+""&include=.*xml""
        		+""&delete=true""
        		+""&readLock=changed""
        		+""&readLockTimeout=30000""
        		+""&readLockCheckInterval=10000""
        		+""&readLockMinAge=5s""
        		+""&maxMessagesPerPoll=100""
        		).routeId(""SFTP-TEST-ROUTE"")
        .log(""got file ${in.header.camelFileName}"")
        .to(""file:sftp-files"");

And then created a file with ""cat > test.xml"", now camel firts sees it as empty, so it will sleep.
Then when trying to check it again:
[                          main] DefaultCamelContext            INFO  Apache Camel 2.18.2 (CamelContext: camel-1) started in 1.159 seconds

[ad #0 - sftp://testi@infra:22/] angedExclusiveReadLockStrategy WARN  Cannot acquire read lock within 30000 millis. Will skip the file: RemoteFile[test.xml]
[ad #0 - sftp://testi@infra:22/] angedExclusiveReadLockStrategy WARN  Cannot acquire read lock within 30000 millis. Will skip the file: RemoteFile[test.xml]


And after modifying the route by changing the directory from ""/"" to ""/./"":
        from(""sftp://testi@infra:22/./""

And starting it:

[                          main] DefaultCamelContext            INFO  Apache Camel 2.18.2 (CamelContext: camel-1) started in 1.060 seconds
[ #0 - sftp://testi@infra:22/./] SFTP-TEST-ROUTE                INFO  got file test.xml



 
;;;","07/Feb/17 08:00;StefanR;Added full trace log from camel 2.18.2 session with similar incident. Notice how list file count changes after camel goes to sleeping (from 10 files to 23).;;;","17/Feb/17 10:42;StefanR;Actually camel is not able to retrieve the files ever from the root of the users home directory, when readLock=changed.
This is because parent dir is resolved to ""/"" in SftpChangedExclusiveReadLockStrategy:

line 81:
                files = operations.listFiles(file.getParent());

File absolute path is ""test.xml"" because leading slash is stripped away from the path,
so in getParent the parent is resolved to ""//"", which will the be normalized in the methods last line to ""/"".
So getParent method returns server root as an argument to listFiles method.

I don't know what would be the best way to fix this, but I will continue to investigate it if I have the time...

;;;","28/Feb/17 09:36;davsclaus;Can you try with fastExistsCheck=true;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CxfEndpoint shows WARNING altough endpoint-/port name is configured,CAMEL-10771,13039149,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,j_ri,j_ri,31/Jan/17 10:27,31/Jan/17 15:31,14/Jul/23 05:50,31/Jan/17 12:36,2.17.0,2.18.1,,,,2.17.6,2.18.2,2.19.0,,camel-cxf,,,,0,,,"Although I have configured the endpoint-/port name I get this WARNING in my logs:

2017-01-31 09:27:10.662 | WARN | org.apache.camel.component.cxf.CxfEndpoint | http-0.0.0.0:8443-1 | The endpoint/port name of cxf://https://someURL?cxfEndpointConfigurer=%23myWSCxfEndpointConfigurer&dataFormat=PAYLOAD&defaultOperationName=defaultOperation&portName=%7Bhttp%3A%2F%2Fexample.com%2Fx%2y%2FGz%7DMyBinding_soap12&wrapped=true&wrappedStyle=true&wsdlURL=wsdl-reference%2Fmywsdl.wsdl is empty, cxf will try to load the first one in wsdl for you. | org.apache.camel.component.cxf.CxfEndpoint.checkName(CxfEndpoint.java:646)

The cause for this is that the ""checkName"" method checks the instance variable ""portName"" and not ""portNameString"" (see attached screenshot).
Therefore I think it's better if the lines

checkName(portName, ""endpoint/port name"");
checkName(serviceName, ""service name"");

get replaced by

checkName(getPortName(), ""endpoint/port name"");
checkName(getServiceName(), ""service name"");

I'll send a Pull Request soon....",,githubbot,j_ri,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"31/Jan/17 10:46;j_ri;CxfEndpoint_in_Debugger.png;https://issues.apache.org/jira/secure/attachment/12850179/CxfEndpoint_in_Debugger.png",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 31 15:31:50 UTC 2017,,,,,,,,,,,"0|i39euf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Jan/17 10:43;githubbot;GitHub user jochenr opened a pull request:

    https://github.com/apache/camel/pull/1433

    CAMEL-10771: check endpoint/port and service names via getter instead of

    instance variables

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jochenr/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1433.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1433
    
----
commit aa129b077801fc8ae13a7e784095b9151b169153
Author: jochenr <jochenr@users.noreply.github.com>
Date:   2017-01-31T10:41:30Z

    CAMEL-10771: check endpoint/port and service names via getter instead of
    instance variables

----
;;;","31/Jan/17 10:44;j_ri;https://github.com/apache/camel/pull/1433
;;;","31/Jan/17 15:31;githubbot;Github user jochenr closed the pull request at:

    https://github.com/apache/camel/pull/1433
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Versions of swagger-models and swagger-parser in conflict,CAMEL-10767,13038955,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,30/Jan/17 18:12,30/Jan/17 20:04,14/Jul/23 05:50,30/Jan/17 20:01,2.19.0,,,,,2.18.3,2.19.0,,,camel-swagger,,,,0,,,"A change was made to {{swagger-modules}} in [swagger-core#208335a08cae610d3b5eaea75f5552efaf15477b|https://github.com/swagger-api/swagger-core/commit/208335a08cae610d3b5eaea75f5552efaf15477b] (version 1.5.12) that changed {{java.lang.Double}} type with {{java.math.BigDecimal}} which in turn made {{swager-parser}} incompatible in the version used (1.0.22).

This was later fixed in {{swagger-parser}} [swagger-parser#d7ac638f4355cc043a14dfcd244264aa1440c627|https://github.com/swagger-api/swagger-parser/commit/d7ac638f4355cc043a14dfcd244264aa1440c627] and released as version 1.0.25.

Version of {{swagger-parser}} needs to be updated to 1.0.25.",,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Jan 30 19:59:44 UTC 2017,,,,,,,Patch Available,,,,"0|i39dnb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Jan/17 18:15;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1431

    CAMEL-10767 Versions of swagger-models and swag...

    ...ger-parser in conflict
    
    A change was made to `swagger-modules` in `swagger-core`[1] (version
    1.5.12) that changed `java.lang.Double` type with `java.math.BigDecimal`
    which in turn made `swager-parser` incompatible in the version used
    (1.0.22).
    
    This was later fixed in `swagger-parser`[2] and released as version
    1.0.25.
    
    Version of `swagger-parser` updated to 1.0.25, added a test to parse the
    petstore example to catch any further version mismatches.
    
    [1] https://github.com/swagger-api/swagger-core/commit/208335a08cae610d3b5eaea75f5552efaf15477b
    [2] https://github.com/swagger-api/swagger-parser/commit/d7ac638f4355cc043a14dfcd244264aa1440c627

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10767

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1431.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1431
    
----
commit 8fc774293dfa7a957829f35a27cba6943ab914b5
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-30T17:48:16Z

    CAMEL-10767 Versions of swagger-models and swag...
    
    ...ger-parser in conflict
    
    A change was made to `swagger-modules` in `swagger-core`[1] (version
    1.5.12) that changed `java.lang.Double` type with `java.math.BigDecimal`
    which in turn made `swager-parser` incompatible in the version used
    (1.0.22).
    
    This was later fixed in `swagger-parser`[2] and released as version
    1.0.25.
    
    Version of `swagger-parser` updated to 1.0.25, added a test to parse the
    petstore example to catch any further version mismatches.
    
    [1] https://github.com/swagger-api/swagger-core/commit/208335a08cae610d3b5eaea75f5552efaf15477b
    [2] https://github.com/swagger-api/swagger-parser/commit/d7ac638f4355cc043a14dfcd244264aa1440c627

----
;;;","30/Jan/17 19:59;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1431
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Mina2 Producer ""hang"" until timeout if the response message could not be decoded",CAMEL-10756,13038453,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thopap,thopap,27/Jan/17 14:44,07/Feb/17 17:45,14/Jul/23 05:50,07/Feb/17 17:45,2.18.1,,,,,2.17.6,2.18.3,2.19.0,,camel-mina2,,,,0,,,"I have tried to upgrade from camel 2.16 to 2.18 and run into an issue with camel-mina2. It looks like CAMEL-10024 has maybe introduced this issue.

*The scenario which fail:*
A Mina2 producer send a request to a server, the server provide a response which could not be interpreted/decoded by a custom codec on the producer side (e.g. due to invalid encoding).

*Expected behavior:*
* The Exception from the decoder on the producer side will be directly propogated to the caller. The mina2 session will be closed.

*Current behavior:*
* Instead of the exception from the decoder, the producer wait until the timeout is reached and the caller get a timeout exception after the timeout is reached.

*First analysis:*
I have attached a patch for the camel-mina2 module which contain a test {{org.apache.camel.component.mina2.Mina2CustomCodecTest.testProducerFailInDecodingResponse()}} to reproduce this issue. 

*If i revert the changes done within CAMEL-10024, the test run correct.* If I debug into the new code, i see that the producer ""hang"" in {{Mina2Producer.closeSessionIfNeededAndAwaitCloseInHandler(IoSession)}} -- {{closeLatch.await(timeout, TimeUnit.MILLISECONDS);}} which was introduced with CAML-10024.

I could not yet provide a fix as well, since I don't really understand the details of CAMEL-10024. But hopefully my testcase helps to fix this issue.",,anoordover,davsclaus,githubbot,thopap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10024,,,,,,"27/Jan/17 14:45;thopap;camel_mina2.patch;https://issues.apache.org/jira/secure/attachment/12849700/camel_mina2.patch",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 07 17:45:50 UTC 2017,,,,,,,,,,,"0|i39avz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Feb/17 10:41;anoordover;CAMEL-10024 was introduced to take care of the fact that producers were returned to the pool with an active CloseFuture.
When you reusing this producer the CloseFuture closed the session that was being used.
The Producer should wait for the handler to close the session.
I think the ""exceptionCaught"" method should not use the same closeSessionIfNeededAndAwaitCloseInHandler (because this method is already inside the handler).
awaiting the CloseFuture should be sufficient (I think/hope).
B.t.w. maybe the session should only be closed based on the ""disconnect"" setting.;;;","06/Feb/17 13:47;anoordover;[~cibsen@e-ma.net] or [~ancosen]: What do you think, should the session be closed on https://github.com/apache/camel/blob/master/components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java#L510? My feeling is that the Producer itself should ask for the closing of the session based on the ""disconnect"" setting.;;;","06/Feb/17 15:03;thopap;Just my two cents on this: I think closing the session in an mina internal error would make sense. E.g. If Mina receive UDP packages and of them is causing an session exception, further processing might make no sense. From my understandning the ""disconnect"" flag is intended in case i want to stop the session after valid processing the request.

I have prepared a proposal which fix the test and switch back to a basic close connection behavior as suggested by Arno:
https://github.com/Thopap/camel/commit/16d1f57640752d8c5a8fcace1299decc50176c46;;;","06/Feb/17 15:48;anoordover;I'm doubting about what the developers of mina would advise.
According to https://mina.apache.org/mina-project/apidocs/org/apache/mina/core/service/IoHandler.html#exceptionCaught-org.apache.mina.core.session.IoSession-java.lang.Throwable- the connection is closed if the cause is an instance of IoException.
I think the ""producer"" should be in control of the closing of the session not the ""handler"".
But still.. I think this solution will work given that exceptions should be exceptional.;;;","06/Feb/17 15:58;githubbot;GitHub user Thopap opened a pull request:

    https://github.com/apache/camel/pull/1449

    CAMEL-10756: Mina2 Producer ""hang"" until timeout if the response message could not be decoded

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Thopap/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1449.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1449
    
----
commit f37c5576fa32d499359d0aaeb4be5f8e3e8782fb
Author: Thomas Papke <thomas.papke@icw.de>
Date:   2017-01-30T15:49:07Z

    CAMEL-10765: Remove unused oauth dependency from camel-cxf pom

commit 16d1f57640752d8c5a8fcace1299decc50176c46
Author: Thomas Papke <thomas.papke@icw.de>
Date:   2017-02-06T12:32:47Z

    CAMEL-10756 Mina2 Producer ""hang"" until timeout if the response message
    could not be decoded
    * Adapt exception caught

commit 833468d4ddd886ecc66b5ce0950e60f2806fc252
Author: Thopap <thomas.papke@icw.de>
Date:   2017-02-06T15:50:54Z

    Merge remote-tracking branch 'origin/master'

----
;;;","07/Feb/17 17:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1449
;;;","07/Feb/17 17:45;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext is not been set in VMConsumer when used with POJO @Consume,CAMEL-10747,13037702,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chrisjheap,chrisjheap,25/Jan/17 13:54,29/Jan/17 12:21,14/Jul/23 05:50,29/Jan/17 12:21,2.17.4,2.17.5,2.18.1,,,2.17.6,2.18.3,2.19.0,,camel-core,,,,1,,,"In Spring environment, [DefaultCamelBeanPostProcessor relies on CamelPostProcessorHelper to inject consumer|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelBeanPostProcessor.java#L214] , when [CamelPostProcessorHelper creates a VMConsumer|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java#L108] from the endpoint based on the use of @Consume annotation, it then tries to start the consumer as a service. 

Because the consumer endpoint of @Consume was created using the camel context from CamelPostProcessorHelper, it puts the VMConsumer  service in to [deferred start|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java#L123] until the camel context is finished starting. The service is ultimately been [added to the DeferServiceStartupListener|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L1333]. Then the DeferServiceStartupListener tries to start the VMConsumer at a later stage. 2.17.3 and 2.18.0 does not suffer this problem.

The problem is non of the process above has considered the fact that the VMConsumer is an instance of CamelContextAware and injects the correct camel context to it. This then leads to the VMConsumer tries to prepare the exchange with a null pointer reference as its camel context.

Because the exchange now has null as camel context, a NPE is thrown at https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java#L519 when it tries to create the exchange id.

This problem only happened after issue [CAMEL-10406|https://issues.apache.org/jira/browse/CAMEL-10406] is merged in","Ubuntu 16.04, OpenJDK 1.7, OpenJDK 1.8, Spring 4.2.6.RELEASE",chrisjheap,davsclaus,jackygurui,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10406,,,,,,,,,"27/Jan/17 15:09;chrisjheap;CamelBeanPostProcessor_patchfile.diff;https://issues.apache.org/jira/secure/attachment/12849703/CamelBeanPostProcessor_patchfile.diff",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 27 15:10:26 UTC 2017,,,,,,,,,,,"0|i396rz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jan/17 15:58;jackygurui;I have also had a look at this problem, and here is my finding:

In 2.17.x camel-spring component, The CamelBeanPostProcessor creates and extends the DefaultCamelBeanPostProcessor as an anonymous class. It supposed to [override the startService method|https://github.com/apache/camel/blob/camel-2.17.5/components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java#L124] and add the service to the current camel context, the addService method would inject in the camel context [there and then|https://github.com/apache/camel/blob/camel-2.17.5/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java]. However due to [this commit|https://github.com/apache/camel/commit/9600bc4fec55a4ed02f2404dfd33b3584491ec80], the startService signature has been changed but failed to refactor the CamelBeanPostProcessor to have the same signature, which rendered the code not been used. This is then been removed completely by [this commit|https://github.com/apache/camel/commit/1233ea02ae4414a07b76d16b709beefbb0b1e448] and release in 2.18.x 

If this method was to reinstated and modified to override the startService method properly, it would fix this issue.;;;","27/Jan/17 13:31;davsclaus;Thanks for reporting and Rui for diving into the code.

You are welcome to work on a patch / github PR that adds the code back and fixes this.
http://camel.apache.org/contributing;;;","27/Jan/17 15:09;chrisjheap;Patch file to reinstate startService in the CamelBeanPostProcessor.;;;","27/Jan/17 15:10;chrisjheap;Claus, i have attached a patch file to reinstate the startService that overrides correctly as suggested by Rui.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogEndpoint error constructing LogProducer,CAMEL-10741,13037334,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,indysilver,indysilver,24/Jan/17 11:08,27/Jan/17 13:27,14/Jul/23 05:50,27/Jan/17 13:27,2.18.0,2.18.1,,,,2.17.6,2.18.3,2.19.0,,camel-core,,,,0,log,logendpoint,"Using Spring XML. With a log: uri in the route, LogEndpoint.createProducer() was being called before doStart(), causing a null logger param to be passed to the LogProducer constructor. This resulted in a npe when the route was executed. Rolled back to 2.17.4 to resolve.
","Ubuntu 16.04, Open JDK 1.8.0",davsclaus,indysilver,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 27 13:25:53 UTC 2017,,,,,,,,,,,"0|i394if:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jan/17 12:48;davsclaus;Can you past the stacktrace;;;","25/Jan/17 15:42;davsclaus;How do you run Camel and what is your route with the log problem?;;;","26/Jan/17 10:18;indysilver;java.lang.NullPointerException: null
	at org.apache.camel.component.log.LogProducer.process(LogProducer.java:39)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:164)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:164)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:112)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:721)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:681)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:651)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:317)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:255)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1166)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1158)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

;;;","26/Jan/17 13:15;indysilver;Reproduced this now as a simple test. Checked into https://bitbucket.org/indysilver/camelbugdemo

It seems to be related to having the log: uri defined in a properties file.


;;;","27/Jan/17 13:25;davsclaus;Use {{ }} in the endpoint and use property placeholders then it ought to work;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
direct-vm component behavior broken in 2.18.1 vs 2.17.4,CAMEL-10738,13036945,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sbailliez,sbailliez,23/Jan/17 03:53,23/Jan/17 07:07,14/Jul/23 05:50,23/Jan/17 07:07,2.18.1,,,,,2.18.3,2.19.0,,,camel-core,,,,0,,,The following code works in 2.17.4 and fail in 2.18.1,,davsclaus,sbailliez,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jan/17 03:53;sbailliez;DirectVmContextTest.java;https://issues.apache.org/jira/secure/attachment/12848823/DirectVmContextTest.java",,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 23 07:07:47 UTC 2017,,,,,,,,,,,"0|i3923z:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"23/Jan/17 07:02;davsclaus;Yeah seems like CAMEL-9765 may have caused this;;;","23/Jan/17 07:07;davsclaus;Thanks for reporting and the unit test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Box component configuration problem ,CAMEL-10736,13036909,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdudgeon,tdudgeon,22/Jan/17 17:21,23/Jan/17 06:33,14/Jul/23 05:50,23/Jan/17 06:33,2.18.1,,,,,2.17.6,2.18.3,2.19.0,,camel-box,,,,0,,,"Box component does not allow configuration using just endpoint url parameters like this:
from(""box://poll-events/poll?userName={{box_username}}&userPassword={{box_userpassword}}&clientId={{box_client_id}}&clientSecret={{box_client_secret}}&streamPosition=-1&streamType=all&limit=100"")

Claus says this is a bug.
See here for more details:
http://camel.465427.n5.nabble.com/Using-Box-component-td5792922.html",,tdudgeon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-22 17:21:13.0,,,,,,,,,,,"0|i391vz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove from all caches when Groovy script is removed from Camel script cache,CAMEL-10732,13036662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Jan/17 19:32,20/Jan/17 21:30,14/Jul/23 05:50,20/Jan/17 21:30,2.17.4,2.18.1,,,,2.17.6,2.18.2,2.19.0,,camel-groovy,,,,0,,,"Camel's GroovyLanguage maintains a cache of Groovy class scripts up to maximum of 1000 entries. When the limit of 1000 entries is reached the LRU cache removes the least used ones.
The LRU cache removes only the Script classes it does not remove all the references that still remain to that class and this causes a memory leak.
The remaining references are in Groovy metaclass registry, Groovy ClassInfo reflection support cache and Java Beans Introspector cache.
All of these can be easily removed on removal from the Camel LRU script cache by invoking {{org.codehaus.groovy.runtime.InvokerHelper.removeClass}}.

See [Groovy and Camel PermGen troubles with Java 1.7|http://mail-archives.apache.org/mod_mbox/camel-users/201701.mbox/%3C1484927208612-5792865.post%40n5.nabble.com%3E] on the camel-users mailing list.",,davsclaus,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Fri Jan 20 21:30:25 UTC 2017,,,,,,,Patch Available,,,,"0|i390d3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jan/17 19:36;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1414

    CAMEL-10732 Remove from all caches when Groovy ...

    ...script is removed from Camel script cache
    
    This commit wraps the `Class<Script>` in a `org.apache.camel.Service`
    before placing it in the cache so that on removal from the cache `stop`
    method would be invoked in which Groovy's `InvokerHelper` is used to
    cleanup three other caches that still hold references to the Script
    Class in question.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10732

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1414.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1414
    
----
commit f05f319a29c4d3f8077e13877bb9b542ddd99b20
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-20T19:34:51Z

    CAMEL-10732 Remove from all caches when Groovy ...
    
    ...script is removed from Camel script cache
    
    This commit wraps the `Class<Script>` in a `org.apache.camel.Service`
    before placing it in the cache so that on removal from the cache `stop`
    method would be invoked in which Groovy's `InvokerHelper` is used to
    cleanup three other caches that still hold references to the Script
    Class in question.

----
;;;","20/Jan/17 21:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1414
;;;","20/Jan/17 21:30;davsclaus;Nice work;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel MongoDB Multiple Insert issue,CAMEL-10728,13036438,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,itsavvy.ankur,itsavvy.ankur,20/Jan/17 05:48,24/May/17 08:30,14/Jul/23 05:50,24/May/17 08:17,2.18.1,,,,,2.19.1,2.20.0,,,camel-mongodb,,,,0,,,"I think there is a problem with multi-insert on MongoDB component as it fails to gracefully handle a BasicDBList. The logic below always sets the SingleInsert flag to true if the type converter is able to convert the exchange to a DBObject interface. This is implemented by BasicDBList and BasicDBObject.

Further details below :

I am trying to do a multiple insert using the camel mongo db component.

My Pojo representation is :
{code:java}
 Person {
 String firstName;
 String lastName;
 }
{code}
I have a processor which constructs a valid List of Person pojo and is a valid json structure. When this list of Person is sent to the mongodb producer , on invocation of createDoInsert the type conversion to BasicDBObject fails. This piece of code below looks to be the problem. Should it have more fall backs / checks in place to attempt the list conversion down further below as it fails on the very first cast itself. Debugging the MongoDbProducer the exchange object being received is a BasicDBList which implements DBObject. This causes the singleInsert flag to remain set at true which fails the insertion below as we get a BasicDBList instead of a BasicDBObject :
{code:java}
   if(singleInsert) {
        BasicDBObject insertObjects = (BasicDBObject)insert;
        dbCol.insertOne(insertObjects);
        exchange1.getIn().setHeader(""CamelMongoOid"", insertObjects.get(""_id""));
    }
{code}
The Camel MongoDbProducer code fragment
{code:java}
private Function<Exchange, Object> createDoInsert() {
    return (exchange1) -> {
        MongoCollection dbCol = this.calculateCollection(exchange1);
        boolean singleInsert = true;
        Object insert = exchange1.getIn().getBody(DBObject.class);
        if(insert == null) {
            insert = exchange1.getIn().getBody(List.class);
            if(insert == null) {
                throw new CamelMongoDbException(""MongoDB operation = insert, Body is not conversible to type DBObject nor List<DBObject>"");
            }

            singleInsert = false;
            insert = this.attemptConvertToList((List)insert, exchange1);
        }

        if(singleInsert) {
            BasicDBObject insertObjects = (BasicDBObject)insert;
            dbCol.insertOne(insertObjects);
            exchange1.getIn().setHeader(""CamelMongoOid"", insertObjects.get(""_id""));
        } else {
            List insertObjects1 = (List)insert;
            dbCol.insertMany(insertObjects1);
            ArrayList objectIdentification = new ArrayList(insertObjects1.size());
            objectIdentification.addAll((Collection)insertObjects1.stream().map((insertObject) -> {
                return insertObject.get(""_id"");
            }).collect(Collectors.toList()));
            exchange1.getIn().setHeader(""CamelMongoOid"", objectIdentification);
        }

        return insert;
    };
}

{code}

My route is as below :
{code:xml}
    <route id=""uploadFile"">
    <from uri=""jetty://http://0.0.0.0:9886/test""/>
    <process ref=""fileProcessor""/>
    <unmarshal>
        <csv>

            <header>fname</header>
            <header>lname</header>

        </csv>

    </unmarshal>

    <process ref=""mongodbProcessor"" />
    <to uri=""mongodb:mongoBean?database=axs175&amp;collection=insurance&amp;operation=insert"" />
{code}
and the MongoDBProcessor constructing the List of Person Pojo
{code:java}
@Component
public class MongodbProcessor implements Processor {
@Override
public void process(Exchange exchange) throws Exception {

    ArrayList<List<String>> personlist = (ArrayList) exchange.getIn().getBody();
    ArrayList<Person> persons = new ArrayList<>();
    for(List<String> records : personlist){
        Person person = new Person();
        person.setFname(records.get(0));
        person.setLname(records.get(1));
        persons.add(person);
    }
exchange.getIn().setBody(persons);

}
} 

{code}",,damien_b,davsclaus,githubbot,itsavvy.ankur,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,http://stackoverflow.com/questions/41733727/camel-mongodb-mongodbproducer-multiple-inserts,,,,,,,,,,,9223372036854775807,,,Wed May 24 08:30:58 UTC 2017,,,,,,,,,,,"0|i38yzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jan/17 21:37;davsclaus;You are welcome to work on a github PR / patch file with a fix / improvement;;;","24/Jan/17 05:31;itsavvy.ankur;Hi [~davsclaus] , I tried to replicate this in  MongoDbConversionsTest like below :
A pojo list 
{code}
 @SuppressWarnings(""unused"")
    private class MyPojoTest {
        public int number = 123;
        public String text = ""hello"";
        public String[] array = {""daVinci"", ""copernico"", ""einstein""};
        // CHECKSTYLE:OFF
        public String _id = ""testInsertPojo"";
        // CHECKSTYLE:ON

        MyPojoTest(){

        }
        MyPojoTest(String id){
            this._id=id;
        }
    }


    private class MyPojoTestList{

        MyPojoTest myPojoTest1 = new MyPojoTest(""testInsertPojo1"");
        MyPojoTest myPojoTest2 = new MyPojoTest(""testInsertPojo2"");

        ArrayList<MyPojoTest> myPojoTestArrayList = new ArrayList<MyPojoTest>();

        public ArrayList<MyPojoTest> getMyPojoTestArrayList() {
            myPojoTestArrayList.add(myPojoTest1);
            myPojoTestArrayList.add(myPojoTest2);
            return myPojoTestArrayList;
        }
    }
    
{code}

The test method :
{code}
 @Test
    public void testInsertListOfPojo() {
        assertEquals(0, testCollection.count());
        Object result = template.requestBody(""direct:insertPojo"", new MyPojoTestList().getMyPojoTestArrayList());
        DBObject b = testCollection.find(new BasicDBObject(""_id"", ""testInsertPojo1"")).first();
        assertNotNull(""No record with 'testInsertPojo1' _id"", b);
    }
    
{code}


The above test worked fine, this makes me wonder why I get an exception during typeconversion. I have debugged my route and code which also contains a list of Pojo on the exchange.
An exception is thrown instead of returning null when I send the list of pojo above, where as returns null in the unit tests.

{code}
@Converter
    public static DBObject fromAnyObjectToDBObject(Object value) {
        BasicDBObject answer;
        try {
            Map<?, ?> m = OBJECT_MAPPER.convertValue(value, Map.class);
            answer = new BasicDBObject(m);
        } catch (Exception e) {
            LOG.warn(""Conversion has fallen back to generic Object -> DBObject, but unable to convert type {}. Returning null. {}"",
                    value.getClass().getCanonicalName(), e.getClass().getCanonicalName() + "": "" + e.getMessage());
            return null;
        }
        return answer;
    }
{code}

Having checked the route configurations, not quite sure what is the deviation when I set the list of pojo on the exchange and when being sent via unit tests.;;;","17/May/17 15:45;githubbot;GitHub user NKame opened a pull request:

    https://github.com/apache/camel/pull/1701

    CAMEL-10728 fix handling of BasicDBList and allow better use of multi insert

    Context: camel-mongodb, multi insert. Handle the case where the input is a BasicDBList. Adds a configuration header to tell the component to avoid trying to convert the body to a DBObject when the user knows a multi insert is needed (""CamelMongoDbMultiInsert"").
    
    See
    https://issues.apache.org/jira/browse/CAMEL-10504
    https://issues.apache.org/jira/browse/CAMEL-10728

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NKame/camel master2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1701.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1701
    
----
commit 579a149fc1ce6cdee7331e89622ddfee74dcbf82
Author: Damien Bonvillain <d.bonvillain@groupeonepoint.com>
Date:   2017-05-17T15:44:16Z

    CAMEL-10728 fix handling of BasicDBList and allow better use of multi insert.
    
    Context: camel-mongodb, multi insert. Handle the case where the input is a BasicDBList. Adds a configuration header to tell the component to avoid trying to convert the body to a DBObject when the user knows a multi insert is needed (""CamelMongoDbMultiInsert"").
    
    See
    https://issues.apache.org/jira/browse/CAMEL-10504
    https://issues.apache.org/jira/browse/CAMEL-10728

----
;;;","17/May/17 15:46;damien_b;PR posted https://github.com/apache/camel/pull/1701;;;","24/May/17 08:17;davsclaus;Damien, do you mind create a PR for camel-mondodb3 as well?;;;","24/May/17 08:30;githubbot;Github user NKame closed the pull request at:

    https://github.com/apache/camel/pull/1701
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp: knownHostsUri configuration with camel 2.18.1,CAMEL-10727,13036241,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,johanvandeweerd,johanvandeweerd,19/Jan/17 15:40,06/Mar/17 10:51,14/Jul/23 05:50,20/Jan/17 10:05,2.18.1,,,,,2.18.2,2.19.0,,,camel-ftp,,,,0,,,"I have a known_hosts file on my classpath and I want the ftp-component to use this known_hosts file when connecting to an sftp server (and not be dependent on the ~/.ssh/known_hosts file). 
The documentation (http://camel.apache.org/ftp2.html) mentions that u can use the option knownHostsUri to configure the (classpath) location of a known_hosts file. 
When using this option (in combination with the option useUserKnownHostsFile=false), camel fails to connect to the server because of a NullPointerException (see below). 
When debugging, it seems that the list of known_hosts from the classpath are first loaded succesfully (SftpOperations:268) but afterwards the known_hosts are ALWAYS overridden (SftpOperations:284). When setting the option useUserKnownHostsFile to false, there is no file to load (no fallback to the known_hosts file from the home directory) and the exception is thrown. 
I made a small github project (https://github.com/johanvandeweerd/camel-sftp) that can be cloned and run to reproduce the error. You can play with the options in SftpRouteBuilder. 

Stacktrace:
{code}
2017-01-17 18:19:33.397  WARN 2652 --- [           main] o.a.c.c.file.remote.SftpConsumer         : Error auto creating directory: pub/example due Cannot connect to sftp://demo@test.rebex.net:22. This exception is ignored. 

org.apache.camel.component.file.GenericFileOperationFailedException: Cannot connect to sftp://demo@test.rebex.net:22 
        at org.apache.camel.component.file.remote.SftpOperations.connect(SftpOperations.java:146) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.component.file.remote.RemoteFileConsumer.connectIfNecessary(RemoteFileConsumer.java:203) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.component.file.remote.SftpConsumer.doStart(SftpConsumer.java:53) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3371) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3688) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3624) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3544) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3308) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3162) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:182) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2957) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2953) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2976) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2953) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2920) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:141) [camel-spring-boot-2.18.1.jar:2.18.1] 
        at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:116) [camel-spring-boot-2.18.1.jar:2.18.1] 
        at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:41) [camel-spring-boot-2.18.1.jar:2.18.1] 
        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at be.engine31.camel.Application.main(Application.java:10) [classes/:na] 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91] 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91] 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91] 
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91] 
        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) [idea_rt.jar:na] 
Caused by: java.lang.NullPointerException: null 
        at com.jcraft.jsch.Util.checkTilde(Util.java:489) ~[jsch-0.1.54.jar:na] 
        at com.jcraft.jsch.KnownHosts.setKnownHosts(KnownHosts.java:54) ~[jsch-0.1.54.jar:na] 
        at com.jcraft.jsch.JSch.setKnownHosts(JSch.java:317) ~[jsch-0.1.54.jar:na] 
        at org.apache.camel.component.file.remote.SftpOperations.createSession(SftpOperations.java:284) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.component.file.remote.SftpOperations.connect(SftpOperations.java:115) ~[camel-ftp-2.18.1.jar:2.18.1] 
        ... 38 common frames omitted
{code}",,davsclaus,johanvandeweerd,,,,,,,,,,,,,,,,,,,,,CAMEL-10946,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 01 16:25:40 UTC 2017,,,,,,,,,,,"0|i38xrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jan/17 10:05;davsclaus;Thanks for reporting. I added a NPE fix. You can give the 2.18.2-SNAPSHOT a test try when the CI server build a new one later over the weekend.

Or build from source yourself and try.;;;","20/Jan/17 10:15;johanvandeweerd;Nice! I'll test it when the snapshot version is available and will give feedback.;;;","01/Feb/17 16:25;johanvandeweerd;Bit later than expected but I tested the 2.18.2 and it's ok now. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix relativePath in camel/platforms/spring-boot/components-starter/pom.xml,CAMEL-10717,13035559,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,tcunning,tcunning,17/Jan/17 14:57,17/Jan/17 18:04,14/Jul/23 05:50,17/Jan/17 18:04,2.19.0,,,,,2.19.0,,,,build system,,,,0,,,"Getting an error trying to do a versions:set and trying to set a new version :

[INFO] Scanning for projects...
[ERROR] [ERROR] Some problems were encountered while processing the POMs:
[FATAL] Non-resolvable parent POM for org.apache.camel:components-starter:[unknown-version]: Could not find artifact org.apache.camel:camel-starter-parent:pom:2.19.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 20, column 11

Need to fix the relativePath.",,githubbot,tcunning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 17 18:03:16 UTC 2017,,,,,,,,,,,"0|i38tjz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Jan/17 15:29;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1403

    CAMEL-10717 Fix relativePath in camel/platforms/spring-boot/components-starter/pom.xml

    https://issues.apache.org/jira/browse/CAMEL-10717

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-10717

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1403.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1403
    
----
commit f5e3b484837dd485b79df513cdee4ab0ff8fbf33
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-01-17T15:28:03Z

    CAMEL-10717 Fix relativePath in camel/platforms/spring-boot/components-starter/pom.xml

----
;;;","17/Jan/17 18:03;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1403
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce Composite API wrongly checks for minimum supported version,CAMEL-10716,13035461,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,zregvart,zregvart,17/Jan/17 10:31,17/Jan/17 13:02,14/Jul/23 05:50,17/Jan/17 13:02,2.19.0,,,,,2.19.0,,,,camel-salesforce,,,,0,,,"There is a check in the DefaultCompositeApiClient that checks if the configured version is at least 34.0, this check wrongly reports an error if the version is configured exactly at 34.0.",,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 17 12:21:51 UTC 2017,,,,,,,Patch Available,,,,"0|i38sy7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Jan/17 10:43;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1402

    CAMEL-10716 Salesforce Composite API wrongly checks for minimum supported version

    Fixes an issue when the Batch request and the configured componentversion is version 34.0.
    
    Added unit test and refactored the check into separate method to make the unit test easier to write.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10716

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1402.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1402
    
----
commit e0d2dfa55fb42f8da4d631328b1c3f196a8ed283
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-17T10:33:42Z

    CAMEL-10716 Salesforce Composite API wrongly ch...
    
    ...ecks for minimum supported version
    
    Fixes an issue when the Batch request and the configured component
    version is version 34.0.

----
;;;","17/Jan/17 12:21;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1402
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SCP not handling errors for failed transfers correctly,CAMEL-10713,13035428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,patrickmcgloin,patrickmcgloin,17/Jan/17 08:45,18/Jan/17 09:31,14/Jul/23 05:50,18/Jan/17 08:43,,,,,,2.17.6,2.18.2,2.19.0,,camel-jsch,,,,0,,,"If I try to transfer a file to a directory that does not exist using Camel SCP I see a warning like this in the log:

[scp] WARN scp: /home/user/scp/1234: No such file or directory
It looks like the code says that Camel will just log a warning when such an error occurs. There is no exception in the code, so it looks like the file was transferred when it was not.

https://github.com/apache/camel/blob/52a739feb9da8acd29067304c7c8356bbc5ef4dd/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java#L347

The error codes for SCP are:

1 General error in file copy 
2 Destination is not directory, but it should be 

http://support.attachmate.com/techdocs/2116.html

The fix should have the SCP Endpoint raise an error if the return code is not 0.  

See the following discussion.  

http://camel.465427.n5.nabble.com/Camel-SCP-Warnings-td5792552.html",,davsclaus,githubbot,patrickmcgloin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 18 09:31:03 UTC 2017,,,,,,,,,,,"0|i38sqv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Jan/17 09:12;davsclaus;Are you working on a github PR or patch file?
https://github.com/apache/camel/;;;","17/Jan/17 09:34;patrickmcgloin;Yes, I will give it a go.;;;","18/Jan/17 07:19;githubbot;GitHub user patrickmcgloin opened a pull request:

    https://github.com/apache/camel/pull/1405

    CAMEL-10713 SCP not handling errors for failed transfers correctly

    This fix works for all existing Unit Tests and I can see the error in the logs when I use the new jar file to do an SCP transfer:
    
    Throwable exception.getCause [java.io.IOException: [scp] Return Code [1] scp: /scpDemo/: Is a directory].
    
    I tried to add a new Unit Test for this case but was unable to do so, the test past when it should have failed.  This is what I tried:
    
        @Test
        public void testScpProduceWithFolderCausesError() throws Exception {
            Assume.assumeTrue(this.isSetupComplete());
    
            getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"");
    
            String uri = getScpUri() + ""?username=admin&password=admin&knownHostsFile="" + getKnownHostsFile();
            Map<String, Object> headers = new HashMap<String, Object>();
            headers.put(Exchange.FILE_PATH, ""folder/"");
            headers.put(Exchange.FILE_NAME, “folder2/hello.txt"");
    
            template.sendBodyAndHeaders(uri, ""Hello World"", headers);
    
            assertMockEndpointsSatisfied();
        }  

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/patrickmcgloin/camel scp-error-handling

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1405.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1405
    
----
commit 87f5913aa0cb9fc51d264762177db3214df802cb
Author: Patrick McGloin <patrickmcgloin@patricks-macbook-air.local>
Date:   2017-01-17T21:24:48Z

    CAMEL-10713 SCP not handling errors for failed transfers correctly

commit b3b4ed1bf0bcae5c5c2d89ed64f4d9b3464a381e
Author: Patrick McGloin <patrickmcgloin@patricks-macbook-air.local>
Date:   2017-01-18T07:12:14Z

    Indentation fix

commit d36d0deb5dcf6f479b041a77eca1f5e76d53851f
Author: Patrick McGloin <patrickmcgloin@patricks-macbook-air.local>
Date:   2017-01-18T07:14:32Z

    Newline at end of file

----
;;;","18/Jan/17 09:31;githubbot;Github user patrickmcgloin closed the pull request at:

    https://github.com/apache/camel/pull/1405
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-SFTP endpoints will silently not delete file on disconnect,CAMEL-10712,13035413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,17/Jan/17 07:11,17/Jan/17 08:41,14/Jul/23 05:50,17/Jan/17 08:41,2.17.4,,,,,2.17.5,2.18.2,2.19.0,,camel-ftp,,,,0,,,"If an SFTP endpoint is configured to delete files after successful processing, the processing takes a long time, and the SFTP server closes the connection while the (successful) processing takes place the file will not be deleted. There is no log about that (not even on debug level).",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-17 07:11:11.0,,,,,,,,,,,"0|i38snj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-etcd: etcd stats endpoint fails because of a class cast exception,CAMEL-10709,13035156,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,16/Jan/17 08:58,16/Jan/17 09:37,14/Jul/23 05:50,16/Jan/17 09:37,,,,,,2.18.2,2.19.0,,,camel-etcd,,,,0,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-16 08:58:44.0,,,,,,,,,,,"0|i38r2v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.cxf.CxfEndpoint -- Lines 554 -558 should be Nullsafe,CAMEL-10708,13035121,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,j_ri,j_ri,16/Jan/17 07:07,17/Jan/17 09:07,14/Jul/23 05:50,17/Jan/17 09:07,2.18.1,,,,,2.17.5,2.18.2,2.19.0,,camel-cxf,,,,0,,,"trying to set username and passsword on a CxfEndpoint (in a Java-DSL camel route) I experience a NullPointerException, because the properties map is not initialized.

here you can see my code example:
[https://github.com/jochenr/wildfly-camel-examples/blob/master/camel-cxf-jaxws-cdi/src/main/java/org/wildfly/camel/examples/cxf/jaxws/JavaDSLRouteBuilder.java#L54-L67]",,davsclaus,j_ri,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 16 08:40:31 UTC 2017,,,,,,,,,,,"0|i38qv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jan/17 08:40;davsclaus;You are welcome to work on a github PR or patch file;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throttling policy is broken because service suspension/resume is not symmetric,CAMEL-10707,13034958,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,14/Jan/17 18:03,17/Jan/17 10:53,14/Jul/23 05:50,17/Jan/17 10:53,,,,,,2.19.0,,,,camel-core,,,,0,,,"Camel ServiceHelper suspends and resumes services in a wrong way:
- Resume: https://github.com/apache/camel/blob/camel-2.18.1/camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java#L313
- Suspend: https://github.com/apache/camel/blob/camel-2.18.1/camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java#L384

When suspending a service, Camel checks if the service is implementing the Suspendable (marker) interface, while that interface is ignored when resuming it.

If you take a non Suspendable service like the TimerConsumer (it is not Suspendable but it is a SuspendableService, like many others...), the ServiceHelper will call the ""stop()"" method when suspending it, and the ""resume()"" method when resuming it. Practically it'll remain stopped (""resume()"" is not implemented in > 90% of the components), since ""start()"" should be called after a stop operation.

So the ThrottlingInflightRoutePolicy, that suspends a route when there are too many exchanges and resumes it when they get lower than a threshold, is broken for many components (the route is stopped, but it's never restarted correctly).",,mbarlotta,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-14 18:03:47.0,,,,,,,,,,,"0|i38puv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSLT will fail if the XML document contains a default namespace,CAMEL-10704,13034625,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,siano,siano,siano,13/Jan/17 12:30,13/Jan/17 13:39,14/Jul/23 05:50,13/Jan/17 13:39,2.17.4,2.18.1,,,,2.17.5,2.18.2,2.19.0,,camel-saxon,,,,0,,,"Any XSLT transformation will fail if the XML document that needs to be transformed contains a default namespace and camel-saxon is present.

The same transformation will just work fine without camel-saxon (e.g. if the test is executed in camel-core).

Example: If you try to transform the following XML document with XSLT and have camel-saxon in the classpath, an exception will be thrown:

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<Message xmlns=""http://www.camel.apache.org/envelope"">
    <Version>2.0</Version>
</Message>
{code}

{noformat}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-WDFN34057358A-51410-1484310448314-0-2]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1710)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:677)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:163)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:168)
	at org.apache.camel.component.xslt.PayloadWithDefaultNamespaceTest.test_map_only(PayloadWithDefaultNamespaceTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.NullPointerException
	at net.sf.saxon.event.ReceivingContentHandler.startPrefixMapping(ReceivingContentHandler.java:269)
	at org.apache.camel.converter.jaxp.StAX2SAXSource.parse(StAX2SAXSource.java:140)
	at org.apache.camel.converter.jaxp.StAX2SAXSource.parse(StAX2SAXSource.java:343)
	at net.sf.saxon.event.Sender.sendSAXSource(Sender.java:451)
	at net.sf.saxon.event.Sender.send(Sender.java:153)
	at net.sf.saxon.Controller.makeSourceTree(Controller.java:1927)
	at net.sf.saxon.s9api.XsltTransformer.transform(XsltTransformer.java:573)
	at net.sf.saxon.jaxp.TransformerImpl.transform(TransformerImpl.java:185)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:141)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103)
	at org.apache.camel.component.xslt.XsltEndpoint.onExchange(XsltEndpoint.java:131)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:225)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)
	... 31 more
{noformat}",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-13 12:30:06.0,,,,,,,,,,,"0|i38nt3:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader issue prevents from loading kafka authentication in OSGi environments,CAMEL-10701,13034555,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,antoine.dessaigne,antoine.dessaigne,13/Jan/17 09:32,13/Jan/17 11:02,14/Jul/23 05:50,13/Jan/17 10:07,,,,,,2.18.2,2.19.0,,,camel-kafka,,,,0,,,"Previously, KAFKA-3218 prevented from loading properly Kafka in an OSGi environment. There is a workaround to this bug in camel-kafka.

Unfortunatly, now that they have fixed the bug, this workaround prevents from loading SASL authentication settings in OSGi environments. The bug was fixed in Kafka 0.10.1.0 and camel uses this version in the 2.18.x branch.

{noformat}
Caused by: javax.security.auth.login.LoginException: classe LoginModule introuvable : org.apache.kafka.common.security.plain.PlainLoginModule
    at javax.security.auth.login.LoginContext.invoke(LoginContext.java:794)
    at javax.security.auth.login.LoginContext.access$000(LoginContext.java:195)
    at javax.security.auth.login.LoginContext$4.run(LoginContext.java:682)
    at javax.security.auth.login.LoginContext$4.run(LoginContext.java:680)
    at java.security.AccessController.doPrivileged(Native Method)
    at javax.security.auth.login.LoginContext.invokePriv(LoginContext.java:680)
    at javax.security.auth.login.LoginContext.login(LoginContext.java:587)
    at org.apache.kafka.common.security.authenticator.AbstractLogin.login(AbstractLogin.java:69)
    at org.apache.kafka.common.security.authenticator.LoginManager.<init>(LoginManager.java:46)
    at org.apache.kafka.common.security.authenticator.LoginManager.acquireLoginManager(LoginManager.java:68)
    at org.apache.kafka.common.network.SaslChannelBuilder.configure(SaslChannelBuilder.java:78)
    ... 29 more
{noformat}
",,antoine.dessaigne,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 13 11:02:42 UTC 2017,,,,,,,Patch Available,,,,"0|i38ndj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jan/17 09:34;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1396

    CAMEL-10701 - Use proper classloader for loading authentication settings in Kafka

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-10701

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1396.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1396
    
----
commit ef805ef5b1ac45a0cb0f9c9b9f3f4274774937c8
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-01-13T09:33:25Z

    CAMEL-10701 - Use proper classloader for loading authentication settings in Kafka

----
;;;","13/Jan/17 11:02;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1396
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mqtt: TimeoutException thrown on MQTTEndpoint stop,CAMEL-10695,13033726,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,11/Jan/17 13:52,11/Jan/17 15:45,14/Jul/23 05:50,11/Jan/17 15:45,,,,,,2.18.2,2.19.0,,,camel-mqtt,,,,0,,,"If MQTTEndpoint's doStop method is execuded but a the MQTT connection is not established, the endpoint throws a TimeoutException like:

{code}
Caused by: java.util.concurrent.TimeoutException
at org.fusesource.mqtt.client.Promise.await(Promise.java:83)
at org.apache.camel.component.mqtt.MQTTEndpoint.doStop(MQTTEndpoint.java:300)
at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:142)
at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:3361)
at org.apache.camel.impl.DefaultCamelContext.addEndpoint(DefaultCamelContext.java:522)
at org.apache.camel.component.ref.RefEndpoint.doStart(RefEndpoint.java:81)
{code}
 ",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-11 13:52:26.0,,,,,,,,,,,"0|i38k1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OptaPlanner cannot load config from deployment ,CAMEL-10692,13033409,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,10/Jan/17 15:07,10/Jan/17 15:39,14/Jul/23 05:50,10/Jan/17 15:30,,,,,,2.18.2,2.19.0,,,camel-optaplanner,,,,0,,,,,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 10 15:39:08 UTC 2017,,,,,,,,,,,"0|i38i33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jan/17 15:09;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1391

    [CAMEL-10692] OptaPlanner cannot load config from deployment

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10692

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1391.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1391
    
----
commit fe4b3f9ca39133fe85bd298c72e65c8b66aa62cc
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-01-10T15:08:24Z

    [CAMEL-10692] OptaPlanner cannot load config from deployment

----
;;;","10/Jan/17 15:10;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1392

    [CAMEL-10692] OptaPlanner cannot load config from deployment

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10692m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1392.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1392
    
----
commit f2d6586f936369c8e325d631830c82f2fed3df10
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-01-10T15:08:24Z

    [CAMEL-10692] OptaPlanner cannot load config from deployment

----
;;;","10/Jan/17 15:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1391
;;;","10/Jan/17 15:39;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1392
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NoFactoryAvailableException when invoking component-list ssh command,CAMEL-10689,13033388,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,10/Jan/17 13:54,10/Jan/17 15:43,14/Jul/23 05:50,10/Jan/17 15:43,,,,,,2.18.2,2.19.0,,,camel-spring-boot,,,,0,,,"When invoking component-list on a spring-boot shell, the command component-list throws the following error:

{code}
2017-01-10 14:51:48.857 ERROR 16924 --- [pool-1-thread-4] o.crsh.shell.impl.command.CRaSHSession   : Error while evaluating request 'camel component-list camel-1' camel component-list camel-1: exception: Could not find factory class for resource: META-INF/services/org/apache/camel/component/bean-component

org.apache.camel.NoFactoryAvailableException: Could not find factory class for resource: META-INF/services/org/apache/camel/component/bean-component
	at org.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:140) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:78) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:70) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.getComponentParameterJsonSchema(DefaultCamelContext.java:1435) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.AbstractLocalCamelController.listComponents(AbstractLocalCamelController.java:580) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.ComponentListCommand.performContextCommand(ComponentListCommand.java:53) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.AbstractContextCommand.executeLocal(AbstractContextCommand.java:74) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.AbstractContextCommand.execute(AbstractContextCommand.java:42) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.springboot.commands.crsh.CamelCommandsFacade.runCommand(CamelCommandsFacade.java:95) ~[camel-commands-spring-boot-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
{code}",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-10 13:54:29.0,,,,,,,,,,,"0|i38hyn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-influxdb - The component should not store state,CAMEL-10688,13033385,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,10/Jan/17 13:43,10/Jan/17 13:53,14/Jul/23 05:50,10/Jan/17 13:53,2.18.1,,,,,2.19.0,,,,camel-influxdb,,,,0,,,Similar to CAMEL-10635 and the other mongodb components.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2017-01-10 13:43:33.0,,,,,,,,,,,"0|i38hxz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SJMSBatchConsumer does not respect the consumerCount parameter,CAMEL-10677,13032359,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sa_james,sa_james,05/Jan/17 19:36,09/Jan/17 13:01,14/Jul/23 05:50,09/Jan/17 13:01,2.19.0,,,,,2.18.2,2.19.0,,,camel-sjms,,,,0,,,"The following route does not create 20 consumers in my queue.
{code:title=Route|borderStyle=solid}
// #myStrategy is an instance of GroupedExchangeAggregationStrategy
    from(""sjms-batch:TEST.FOO?aggregationStrategy=#myStrategy&consumerCount=20"")
     .to(""stream:out"").routeId(""myrouteid"")
{code}
When I start the application, I get a couple of NullPointerException.
usually, the resulting consumerCount that I see in my queue can be computed as:
{code:title=consumerCount|borderStyle=solid}
resulting consumerCount = (configured consumerCount - number of NPE at startup)
{code}

Here the exception:
{code:title=Stacktrace|borderStyle=solid}
[error] java.lang.NullPointerException
[error]         at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:302)
[error]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
[error]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
[error]         at java.lang.Thread.run(Thread.java:745)
{code}
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 09 13:01:04 UTC 2017,,,,,,,,,,,"0|i38blz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Jan/17 19:37;sa_james;Tested on WebSphereMQ and ActiveMQ.;;;","05/Jan/17 19:45;sa_james;Resources are apparently not being released correctly. When I Ctrl + C, and stop the application, I can see on my Queue-Monitoring that some consumers are still connected.;;;","09/Jan/17 13:01;davsclaus;Thanks for reporting. You can try testing with latest code again;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger is not generating schema ref for body parameter,CAMEL-10675,13032281,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,stepienj,stepienj,05/Jan/17 15:09,11/Jan/17 16:53,14/Jul/23 05:50,06/Jan/17 08:43,2.18.1,,,,,2.18.2,2.19.0,,,camel-swagger,,,,0,,,"{code}
            // favor keeping any existing model that has the vendor extension in the model
            boolean oldExt = false;
            if (swagger.getDefinitions() != null && swagger.getDefinitions().get(entry.getKey()) != null) {
                Model oldModel = swagger.getDefinitions().get(entry.getKey());
                if (oldModel.getVendorExtensions() != null && !oldModel.getVendorExtensions().isEmpty()) {
                    oldExt = oldModel.getVendorExtensions().get(""x-className"") == null;
                }
            }

            if (!oldExt) {
                swagger.model(entry.getKey(), entry.getValue());
            }
{code}

The logic is invalid. Should not update model when oldModel.getVendorExtensions().get(""x-className"") != null
",,githubbot,stepienj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 11 16:53:26 UTC 2017,,,,,,,,,,,"0|i38b4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Jan/17 15:11;githubbot;GitHub user stepienj opened a pull request:

    https://github.com/apache/camel/pull/1378

    CAMEL-10675 - camel swagger java models were not updated to models with vendor extension

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/stepienj/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1378.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1378
    
----
commit 2583ee5f387083ac5f5f9146c975d9b37238a51b
Author: Jacek Stępień <jacek.stepien@fortrus.com>
Date:   2017-01-05T14:49:33Z

    Fix for invalid logic in swagger java component - models were not updated to models with vendor extension

----
;;;","11/Jan/17 16:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1378
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failing in camel-itest-osgi,CAMEL-10672,13031985,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,04/Jan/17 14:55,06/Jan/17 08:27,14/Jul/23 05:50,06/Jan/17 08:27,,,,,,2.19.0,,,,tests,,,,0,,,"Run mvn clean install -Dtest=CamelCoreTest for example (in dir tests/camel-itest-osgi):

{code}
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.ops4j.pax.exam.spi.reactors.ReactorManager.addConfigurationsToReactor(ReactorManager.java:239)
	at org.ops4j.pax.exam.spi.reactors.ReactorManager.prepareReactor(ReactorManager.java:184)
	... 22 more
Caused by: java.lang.IllegalArgumentException: Could not resolve version. Do you have a dependency for org.apache.camel.karaf/apache-camel in your maven project?
	at org.ops4j.pax.exam.MavenUtils.getArtifactVersion(MavenUtils.java:75)
	at org.ops4j.pax.exam.MavenUtils$1.getVersion(MavenUtils.java:109)
	at org.ops4j.pax.exam.options.MavenArtifactUrlReference.version(MavenArtifactUrlReference.java:86)
	at org.ops4j.pax.exam.options.MavenArtifactUrlReference.versionAsInProject(MavenArtifactUrlReference.java:90)
	at org.ops4j.pax.exam.options.MavenArtifactUrlReference.versionAsInProject(MavenArtifactUrlReference.java:31)
	at org.ops4j.pax.exam.options.MavenArtifactProvisionOption.versionAsInProject(MavenArtifactProvisionOption.java:91)
	at org.apache.camel.test.karaf.AbstractFeatureTest.getCamelKarafFeatureUrl(AbstractFeatureTest.java:222)
	at org.apache.camel.test.karaf.AbstractFeatureTest.configure(AbstractFeatureTest.java:305)
	at org.apache.camel.test.karaf.CamelKarafTestSupport.configure(CamelKarafTestSupport.java:88)
	at org.apache.camel.itest.CamelCoreTest.configure(CamelCoreTest.java:55)
	... 28 more
{code}",,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 05 15:37:48 UTC 2017,,,,,,,,,,,"0|i389av:",9223372036854775807,Unit Test Broken,,,,,,,,,,,,,,,,,,,"04/Jan/17 15:00;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1371

    This reverts commit 8b63e4b89e9544018f9e61e996b23ec0f6673531.

    https://issues.apache.org/jira/browse/CAMEL-10672

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10672

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1371.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1371
    
----
commit 937a4240cf74a33804ffaee056e14a6d6f7cfa66
Author: jpoth <poth.john@gmail.com>
Date:   2017-01-04T14:57:20Z

    Revert ""CAMEL-10647: camel-test-karaf - Cause wrong build order""
    This will cause camel-itest-osgi to fail
    This reverts commit 8b63e4b89e9544018f9e61e996b23ec0f6673531.

----
;;;","05/Jan/17 15:37;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1371
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
