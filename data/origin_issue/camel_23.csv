Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Blocker),Inward issue link (Cloners),Outward issue link (Cloners),Outward issue link (Completes),Outward issue link (Completes),Inward issue link (Problem/Incident),Outward issue link (Problem/Incident),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Language),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
camel-spring-boot - Register properly auto-configurations,CAMEL-19511,13541600,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,nfilotto,nfilotto,nfilotto,27/Jun/23 15:58,28/Jun/23 12:30,13/Jul/23 08:30,28/Jun/23 12:30,4.0-M3,,,,,4.0-RC2,,,,,,camel-spring-boot-starters,,,0,,,"While trying to figure out why no routes could even start in the reactive-streams example, I realized that it was due to the fact that the way [to register auto-configurations has changed|https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#auto-configuration-files], the code must be changed consequently",,davsclaus,nfilotto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jun 28 07:29:53 UTC 2023,,,,,,,,,,,"0|z1itdc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"27/Jun/23 16:00;nfilotto;This can be seen as a blocker for the release of RC1. I can fix it tomorrow but If you need a fix sooner feel free to affect it to whoever can fix it sooner;;;","27/Jun/23 16:39;davsclaus;Are you really sure, the spring boot examples like examples/spring-boot and many others work fine.;;;","27/Jun/23 16:41;davsclaus;Its the reactive-example that is wrong. Its a bit bad example with complex custom auto-configuration that users wont normally do.
But the example just need to be migrated to SB3;;;","28/Jun/23 07:29;nfilotto;I confirm that the code is correct only some remaining things to fix related to this migration https://github.com/apache/camel-spring-boot/pull/877;;;",,,,,,,,,,,,,,,,,
"java.lang.NullPointerException: Cannot invoke ""org.apache.camel.model.FromDefinition.getLabel()"" because ""this.input"" is null",CAMEL-19509,13541586,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apupier,apupier,27/Jun/23 14:40,27/Jun/23 15:25,13/Jul/23 08:30,27/Jun/23 15:25,3.20.6,,,,,3.20.7,3.21.1,3.22.0,4.0.0,,,camel-yaml-dsl,,,0,,,"Running a file with content (tried with Camel JBang 3.20.6):

{noformat}
apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: ''
spec:
  source:
    ref:
      apiVersion: camel.apache.org/v1alpha1
      name: timer-source
      kind: Kamelet
  steps:
  - ref:
      apiVersion: camel.apache.org/v1alpha1
      name: log-action
      kind: Kamelet
{noformat}


leads to a NPE:
{noformat}
java.lang.NullPointerException: Cannot invoke ""org.apache.camel.model.FromDefinition.getLabel()"" because ""this.input"" is null
        at org.apache.camel.model.RouteDefinition.getLabel(RouteDefinition.java:171)
        at org.apache.camel.impl.PreconditionHelper.included(PreconditionHelper.java:51)
        at org.apache.camel.impl.DefaultCamelContext.includedRoute(DefaultCamelContext.java:1062)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:927)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:800)
        at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:3017)
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
        at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2688)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
        at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2707)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
        at org.apache.camel.main.KameletMain.doStart(KameletMain.java:280)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
        at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:784)
        at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:592)
        at org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:232)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:73)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
        at main.CamelJBang.main(CamelJBang.java:36)
 {noformat}",,apupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jun 27 15:25:05 UTC 2023,,,,,,,,,,,"0|z1ita8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"27/Jun/23 14:41;apupier;I guess it is because Camel JBang does nto support KamelBinding Custom Resource Definitions?;;;","27/Jun/23 15:11;davsclaus;Its because you do not have a sink;;;","27/Jun/23 15:25;davsclaus;Added support for sink not present;;;",,,,,,,,,,,,,,,,,,
The $repos placeholder used by Camel JBang is not resolved,CAMEL-19486,13540997,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,djelinek,djelinek,22/Jun/23 08:39,05/Jul/23 10:44,13/Jul/23 08:30,22/Jun/23 09:17,3.20.5,3.20.6,,,,3.20.7,3.21.0,4.0.0,4.0-RC1,,,camel-jbang,,,0,,,"in the attached picture you can see I tried to set one repository as global and then run command with another repository which should mean to have both used

 

the global config list
{code:java}
» camel config list                                                                                                                                                                                                                                                                                                       
repos = https://packages.atlassian.com/maven-external {code}
 

when I execute eg camel jbang run, in the log there is
{code:java}
--repos=,https//....{code}
which indicates that ""$repos"" placeholder is empty probably...",,apupier,davsclaus,djelinek,,,,,,,,,,,,,,,,,,CAMEL-19313,,,,,"22/Jun/23 08:38;djelinek;246371094-462f078a-2587-4beb-8856-b79e19dcddcd.png;https://issues.apache.org/jira/secure/attachment/13060803/246371094-462f078a-2587-4beb-8856-b79e19dcddcd.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jul 05 10:44:19 UTC 2023,,,,,,,,,,,"0|z1ipo8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"22/Jun/23 09:17;davsclaus;You need to use #name syntax in newer versions

{code}
~/workspace/deleteme ❯ camel run foo.java  --repos=#repos,http://maven.repository.redhat.com/ga                                                            ✘ INT 6s
Running integration with the following configuration:
    --repos=https://packages.atlassian.com/maven-external,http://maven.repository.redhat.com/ga
2023-06-22 11:16:54.713  INFO 17802 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 4.0.0-SNAPSHOT is starting
{code};;;","30/Jun/23 13:15;djelinek;Hi [~davsclaus] , thank you for such a quick handle of this issue.

 

I have tested with released 3.21.0 and in general it is working as expected. But I tried also more customised command and I do not understand why the error below is happening, could you help me to investigate more please?

 

This error happens when I set different Camel version by usage of ""––camel-version"". I thought that ""-Dcamel.jbang.version"" specify the Camel JBang API which will be used and the ""-camel-version"" will just allow me to run the integration with specific version which can differ from the CLI one, am I wrong?

 
{code:java}
testing-commands » jbang -Dcamel.jbang.version=3.21.0 camel@apache/camel run test.camel.yaml --camel-version=3.20.6 --repos=#repos,https://maven.repository.redhat.com/ga/
 
Running integration with the following configuration:
    --repos=https://packages.atlassian.com/maven-external,https://maven.repository.redhat.com/ga/
Running integration with the following configuration:
    --repos=#repos,https://maven.repository.redhat.com/ga/
2023-06-30 15:08:20.309  INFO 48834 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 3.20.6 is starting
2023-06-30 15:08:20.480  WARN 48834 --- [           main] .download.MavenDependencyDownloader : Can't use #repos URL: no protocol: #repos. Skipping.
java.net.MalformedURLException: no protocol: #repos
        at java.net.URL.<init>(URL.java:674) ~[?:?]
        at java.net.URL.<init>(URL.java:569) ~[?:?]
        at java.net.URL.<init>(URL.java:516) ~[?:?]
        at org.apache.camel.main.download.MavenDependencyDownloader.configureRemoteRepositories(MavenDependencyDownloader.java:1198) ~[camel-kamelet-main-3.20.6.jar:3.20.6]
        at org.apache.camel.main.download.MavenDependencyDownloader.doBuild(MavenDependencyDownloader.java:617) ~[camel-kamelet-main-3.20.6.jar:3.20.6]
        at org.apache.camel.support.service.BaseService.build(BaseService.java:63) ~[camel-api-3.20.6.jar:3.20.6]
        at org.apache.camel.support.service.BaseService.init(BaseService.java:79) ~[camel-api-3.20.6.jar:3.20.6]
        at org.apache.camel.support.service.ServiceHelper.initService(ServiceHelper.java:84) ~[camel-api-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1603) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.AbstractCamelContext.addService(AbstractCamelContext.java:1544) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.AbstractCamelContext.addService(AbstractCamelContext.java:1539) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.AbstractCamelContext.addService(AbstractCamelContext.java:1534) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.main.KameletMain.createCamelContext(KameletMain.java:335) ~[camel-kamelet-main-3.20.6.jar:3.20.6]
        at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:400) ~[camel-main-3.20.6.jar:3.20.6]
        at org.apache.camel.main.KameletMain.doInit(KameletMain.java:271) ~[camel-kamelet-main-3.20.6.jar:3.20.6]
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.20.6.jar:3.20.6]
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.20.6.jar:3.20.6]
        at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:784) ~[camel-jbang-core-3.20.6.jar:3.20.6]
        at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:592) ~[camel-jbang-core-3.20.6.jar:3.20.6]
        at org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:232) ~[camel-jbang-core-3.20.6.jar:3.20.6]
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:73) ~[camel-jbang-core-3.20.6.jar:3.20.6]
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36) ~[camel-jbang-core-3.20.6.jar:3.20.6]
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine.access$1500(CommandLine.java:148) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417) ~[picocli-4.7.3.jar:4.7.3]
        at picocli.CommandLine.execute(CommandLine.java:2170) ~[picocli-4.7.3.jar:4.7.3]
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154) ~[camel-jbang-core-3.20.6.jar:3.20.6]
        at main.CamelJBang.main(CamelJBang.java:36) ~[CamelJBang.jar:?]
2023-06-30 15:08:20.536  INFO 48834 --- [           main] org.apache.camel.main.MainSupport   : Using Java 17.0.1 with PID 48834. Started by djelinek in /Users/djelinek/development/tmp/testing-lsp/testing-commands
2023-06-30 15:08:20.550  INFO 48834 --- [           main] mel.cli.connector.LocalCliConnector : Camel CLI enabled (local)
2023-06-30 15:08:21.344  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 3.20.6 (test) is starting
2023-06-30 15:08:21.488  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext : Routes startup (started:1)
2023-06-30 15:08:21.488  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext :     Started route1 (timer://yaml)
2023-06-30 15:08:21.489  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 3.20.6 (test) started in 400ms (build:106ms init:150ms start:144ms JVM-uptime:2s)
2023-06-30 15:08:22.485  INFO 48834 --- [ - timer://yaml] test.camel.yaml:11                  : Hello Camel from route1
2023-06-30 15:08:23.475  INFO 48834 --- [ - timer://yaml] test.camel.yaml:11                  : Hello Camel from route1
2023-06-30 15:08:24.479  INFO 48834 --- [ - timer://yaml] test.camel.yaml:11                  : Hello Camel from route1
^C2023-06-30 15:08:25.072  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 3.20.6 (test) is shutting down (timeout:10s)
2023-06-30 15:08:25.087  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext : Routes stopped (stopped:1)
2023-06-30 15:08:25.088  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext :     Stopped route1 (timer://yaml)
2023-06-30 15:08:25.095  INFO 48834 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 3.20.6 (test) shutdown in 22ms (uptime:3s JVM-uptime:5s)
2023-06-30 15:08:25.095  INFO 48834 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 3.20.6 shutdown {code};;;","05/Jul/23 10:44;davsclaus;No if the CLI and the run version are different, then run version must have the #repo fix as well, which is 3.20.7/3.21 onwards.;;;",,,,,,,,,,,,,,,,,,
rest-dsl - ClientRequestValidation accepted content-type may not validate correctly,CAMEL-19476,13540741,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Jun/23 11:20,20/Jun/23 12:35,13/Jul/23 08:30,20/Jun/23 12:35,,,,,,3.14.10,3.20.7,3.21.0,4.0.0,4.0-RC1,,camel-core,rest,,0,,,https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/rest.20endpoint.20properties.20to.20servlet.20component.20consumer,,davsclaus,dmitriiantonov,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-06-20 11:20:33.0,,,,,,,,,,,"0|z1io3c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exchange body is null when using Mongodb changeStreams with update operation,CAMEL-19470,13540603,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,kgarrido,kgarrido,19/Jun/23 10:31,21/Jun/23 11:37,13/Jul/23 08:30,21/Jun/23 11:37,3.x,,,,,3.21.0,4.0.0,4.0-RC1,,,,camel-mongodb,,,0,camel,mongodb,"When using the mongodb component as a ChangeStreams consumer, the fullDocument is null for update operations. It's normal if we refer to [mongodb documentation|https://www.mongodb.com/docs/manual/reference/operator/aggregation/changeStream/].

 

As a temporary fix, you can use the object id to get the modified document with a route like this: 
{code:java}
from(""mongodb:mongo?consumerType=changeStreams...."")
.to(""mongodb:mongo?operation=findById""){code}
 

 

The MongoDbChangeStreamsThread.initializeCursor() method should be changed to use the fullDocument option when creating the iterable.",,acosentino,kgarrido,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,java,Mon Jun 19 11:12:37 UTC 2023,,,,,,,,,,,"0|z1in8o:",9223372036854775807,,,,,,,,,,,,,,,,,,,"19/Jun/23 11:12;acosentino;You're welcome to provide a PR. Thanks.;;;",,,,,,,,,,,,,,,,,,,,
camel-report-maven-plugin fails to run due to missing class,CAMEL-19459,13540158,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alex-nt,alex-nt,15/Jun/23 07:56,17/Jun/23 11:34,13/Jul/23 08:30,17/Jun/23 11:29,4.0-M3,,,,,4.0.0,4.0-RC1,,,,,tooling,,,0,,,*camel-report-maven-plugin* fails to run due to missing class: *org.eclipse.aether.spi.synccontext.SyncContextFactory*. Last working version: *4.0.0-M2*,,alex-nt,davsclaus,,,,,,,,,,,,,,,,,,,,IVY-1644,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Jun 17 11:29:38 UTC 2023,,,,,,,,,,,"0|z1ikiw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"15/Jun/23 08:03;davsclaus;camel-examples/examples/main main ❯ mvn camel-report:validate;;;","15/Jun/23 08:34;davsclaus;This is a bit weird why this JAR is not included;;;","15/Jun/23 11:36;davsclaus;What maven version do you use ?;;;","15/Jun/23 11:39;alex-nt;This was also my first assumption, I tried with bot +3.8.6+ and +3.9.2.+ The issue was present on both. ;;;","15/Jun/23 11:52;davsclaus;Maven 3.8.8 comes with maven-resolver-spi-1.6.3 which does not have that class. This requires a newer version.
;;;","15/Jun/23 11:54;alex-nt;Hmmm, so +3.9.2+ should have worked, right? I will try again.;;;","15/Jun/23 12:25;davsclaus;Okay so its the new camel-tooling-maven that we use for downloading JARs that uses this class that requires a -spi 1.7.0 or newer. And somehow when using maven plugins then maven itself will use its existing old 1.6.3 release. We cannot ""override"" this;;;","15/Jun/23 12:30;davsclaus;maven 3.8.8 uses resolver 1.6.3
maven 3.9.2 uses resolver 1.9.10;;;","15/Jun/23 12:32;alex-nt;Clearly I did something *very* wrong when testing with +3.9.2+. I will double check my setup as soon as I can. Thanks!;;;","15/Jun/23 13:05;davsclaus;Okay this gets a bit complex as camel-catalog-maven is for downloading JARs but it works standalone. When you run it indirectly via mvn then all hell is loose.
We can create the old way and have camel-catalog-maven-legacy and use it with the report plugin;;;","15/Jun/23 13:18;alex-nt;Validated, it works with +3.9.2+ and I fucked up the first test, I do apologise for that. The problem gets gnarly as I think the default version everywhere is +3.8.x+. I'm looking at how to update things around my company (and nixpkgs https://search.nixos.org/packages?channel=23.05&show=maven&from=0&size=50&sort=relevance&type=packages&query=maven).;;;","15/Jun/23 13:28;alex-nt;More bad news, in azure the default is +3.8.8+ https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md;;;","15/Jun/23 13:58;alex-nt;And it was recently downgraded due to incompatibilities with other projects: https://github.com/actions/runner-images/issues/7230;;;","15/Jun/23 14:10;davsclaus;Okay it can run again, but there is a little ugly WARN afterwards

{code}
[INFO] --- camel-report:4.0.0-SNAPSHOT:validate (default-cli) @ camel-example-main ---
[INFO] Detected Camel version used in project: 4.0.0-SNAPSHOT
[INFO] Validating using Camel version: 4.0.0-SNAPSHOT
[INFO] Endpoint validation success: (1 = passed, 0 = invalid, 0 = incapable, 0 = unknown components, 0 = deprecated options)
[INFO] Simple validation success: (0 = passed, 0 = invalid)
[INFO] Endpoint pair (seda/direct) validation success: (0 = pairs)
[INFO] Duplicate route id validation success: (1 = ids)
[INFO] Configuration validation success: (2 = passed, 0 = invalid, 0 = incapable, 0 = unknown components, 0 = deprecated options)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.870 s
[INFO] Finished at: 2023-06-15T16:08:00+02:00
[INFO] ------------------------------------------------------------------------
[WARNING]
[WARNING] Plugin validation issues were detected in 3 plugin(s)
[WARNING]
[WARNING]  * org.apache.camel:camel-package-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.apache.camel:camel-report-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.apache.maven.plugins:maven-site-plugin:3.11.0
[WARNING]
[WARNING] For more or less details, use 'maven.plugin.validation' property with one of the values (case insensitive): [BRIEF, DEFAULT, VERBOSE]
[WARNING]
Exception in thread ""ivy-httpclient-shutdown-handler"" java.lang.NoClassDefFoundError: org/apache/http/impl/conn/PoolingHttpClientConnectionManager$2
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.shutdown(PoolingHttpClientConnectionManager.java:413)
	at org.apache.http.impl.client.HttpClientBuilder$2.close(HttpClientBuilder.java:1248)
	at org.apache.http.impl.client.InternalHttpClient.close(InternalHttpClient.java:201)
	at org.apache.ivy.util.url.HttpClientHandler.close(HttpClientHandler.java:357)
	at org.apache.ivy.util.url.HttpClientHandler$1.run(HttpClientHandler.java:84)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassNotFoundException: org.apache.http.impl.conn.PoolingHttpClientConnectionManager$2
	at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)
	... 6 more
{code};;;","17/Jun/23 10:27;davsclaus;Not sure if we can get rid of this WARN as its Apache Ivy. We can maybe configure somehow logging to turn of logging of that class;;;","17/Jun/23 10:32;alex-nt;Not a big problem. I looked a bit more at our CI builds and camel is not the biggest offender with regards to that warning. Thanks a lot for the fix!;;;","17/Jun/23 11:29;davsclaus;Okay I had to make it use same version as apache ivy 4.5.1 release.

            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.10</version>

Then the WARN is gone;;;",,,,
camel-dynamic-router - InflightRepository size can be negative,CAMEL-19457,13540127,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ggboy,ggboy,15/Jun/23 02:53,18/Jun/23 19:48,13/Jul/23 08:30,15/Jun/23 08:02,3.20.5,,,,,3.20.7,3.21.0,4.0.0,4.0-RC1,,,,,,0,,,"InflightRepository size can be negative，I think size should be a non negative integer。

!image-2023-06-15-10-51-29-124.png!",here is the demo project just run it！,davsclaus,ggboy,Steve973,,,,,,,,,,,,,,,,,,CAMEL-19154,,,,,"15/Jun/23 02:53;ggboy;demo615.zip;https://issues.apache.org/jira/secure/attachment/13059078/demo615.zip","15/Jun/23 02:51;ggboy;image-2023-06-15-10-51-29-124.png;https://issues.apache.org/jira/secure/attachment/13059079/image-2023-06-15-10-51-29-124.png","15/Jun/23 07:53;ggboy;image-2023-06-15-15-53-16-945.png;https://issues.apache.org/jira/secure/attachment/13059087/image-2023-06-15-15-53-16-945.png",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jun 18 14:26:48 UTC 2023,,,,,,,,,,,"0|z1ikc0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"15/Jun/23 07:48;davsclaus;Its the dynamic router component and not camel-core;;;","15/Jun/23 07:53;ggboy;i dont find dynamic-route component in module !image-2023-06-15-15-53-16-945.png!;;;","15/Jun/23 08:02;davsclaus;Thanks for reporting and the sample project;;;","18/Jun/23 11:59;Steve973;HI [~davsclaus] I saw that you pushed this fix, and you removed the test for async mode, rather than fixing that test.  Is there a reason why you preferred to remove the test?;;;","18/Jun/23 12:22;Steve973;[~davsclaus] here is the fixed test:
{code:java}
@Test
void testProcessAsynchronous() {
    when(endpoint.getConfiguration().isSynchronous()).thenReturn(false);
    when(component.getRoutingProcessor(anyString())).thenReturn(processor);
    boolean result = producer.process(exchange, asyncCallback);
    Assertions.assertFalse(result);
} {code};;;","18/Jun/23 14:26;davsclaus;You are welcome to send a PR;;;",,,,,,,,,,,,,,,
camel-jbang - Run with --open-api does not show log in console,CAMEL-19452,13539969,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Jun/23 05:42,14/Jun/23 05:49,13/Jul/23 08:30,14/Jun/23 05:49,3.20.5,,,,,3.20.6,3.21.0,4.0.0,4.0-RC1,,,camel-jbang,,,0,,,this example does not show anything in the console: camel-kamelets-examples/jbang/open-api,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-06-14 05:42:49.0,,,,,,,,,,,"0|z1ijcw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kamelet - Route templates should use route configured error handler,CAMEL-19443,13539854,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Jun/23 12:58,13/Jun/23 15:33,13/Jul/23 08:30,13/Jun/23 15:33,3.20.4,,,,,3.20.6,3.21.0,4.0.0,4.0-RC1,,,camel-core,camel-kamelet,,0,,,"See CAMEL-19411

There was also an underlying bug where the kamelet route template would be set a default error handler eager, instead from route configuration.",,davsclaus,,,,,,,,,,,,,,,,,,,,CAMEL-19411,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-06-13 12:58:01.0,,,,,,,,,,,"0|z1iinc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-azure-eventhubs: Providing a custom EventHubProducerAsyncClient has no effect,CAMEL-19432,13539433,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,09/Jun/23 12:49,13/Jun/23 16:44,13/Jul/23 08:30,13/Jun/23 16:44,,,,,,3.20.6,3.21.0,4.0.0,4.0-RC1,,,camel-azure-eventhubs,,,0,,,"The azure-eventhubs component has a {{producerAsyncClient}} option where you can pass a custom {{EventHubProducerAsyncClient}} instance to the component configuration.

Looking at the producer code, it seems that it gets ignored and a new {{EventHubProducerAsyncClient}} is created in {{doStart}}.

https://github.com/apache/camel/blob/main/components/camel-azure/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java#L41

This was originally reported in the Camel Quarkus project:

https://github.com/apache/camel-quarkus/issues/4975 
",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-06-09 12:49:33.0,,,,,,,,,,,"0|z1ig1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring-WS syntaxt and path properties inconsistency ,CAMEL-19426,13539157,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,07/Jun/23 22:51,09/Jun/23 09:39,13/Jul/23 08:30,09/Jun/23 09:39,3.20.5,3.21.0,4.0-M3,,,3.18.8,3.20.6,3.21.0,4.0.0,4.0-RC1,,camel-spring-ws,,,0,,,"In component catalog [https://github.com/apache/camel/blob/main/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/components/spring-ws.json]

Component syntax is `spring-ws:type:lookupKey:webServiceEndpointUri`

But there are 4 path properties: type, lookupKey, webServiceEndpointUri and *expression*

Looks like we have missed something",,davsclaus,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jun 09 09:39:36 UTC 2023,,,,,,,,,,,"0|z1iecg:",9223372036854775807,,,,,,,,,,,,,,,,,,,"09/Jun/23 09:39;davsclaus;expression should be a query parameter, fixed that;;;",,,,,,,,,,,,,,,,,,,,
Camel-Jira: Use Files.createTempFile in FileConverter instead of creating File directly,CAMEL-19421,13538928,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,06/Jun/23 13:29,07/Jun/23 07:59,13/Jul/23 08:30,06/Jun/23 15:58,,,,,,3.14.9,3.18.8,3.20.6,3.21.0,4.0-RC1,,camel-jira,,,0,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,CAMEL-19423,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-06-06 13:29:07.0,,,,,,,,,,,"0|z1icxk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stax: using xtokenize might be NPE on xml default namespace,CAMEL-19415,13538771,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vincenttang,vincenttang,05/Jun/23 13:14,12/Jun/23 01:45,13/Jul/23 08:30,09/Jun/23 10:41,2.25.4,,,,,3.14.9,3.18.8,3.20.6,3.21.0,4.0.0,4.0-RC1,camel-stax,,,0,,,"Background:

camel-core use Woodstox to xtokenize the xml.

Woodstox has a property on WstxInputProperties.P_RETURN_NULL_FOR_DEFAULT_NAMESPACE

which has different value in different woodstox-core version.

---

Issue:

When using camel core to xtokenize xml, it will get the XML namespace prefix through javax.xml.stream.XMLStreamReader#getNamespacePrefix, which will use woodstox-core lib.

In org.apache.camel.support.XMLTokenExpressionIterator.XMLTokenIterator#createContextualToken with i mode,

It will then construct a namespace map and loop it .

In org.apache.camel.support.XMLTokenExpressionIterator line 404
sb.append(e.getKey().length() == 0 ? "" xmlns"" : "" xmlns:"")
As the e.getKey() has no null check, it might be null and resulting in NPE because of null.length()
---
Suggested Solution:
Add a null check at org.apache.camel.support.XMLTokenExpressionIterator line 404 e.getKey() to avoid NPE
i.e. sb.append((e.getKey() == null || e.getKey().length() == 0) ? "" xmlns"" : "" xmlns:"")","java 8

camel-core 2.25.4

woodstox-core-asl 4

woodstox-core 5/6",davsclaus,nfilotto,vincenttang,,,,,,,,,,,,,,,,,,,,,,,"05/Jun/23 13:09;vincenttang;error_3_hide.PNG;https://issues.apache.org/jira/secure/attachment/13058784/error_3_hide.PNG",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,JAVA,Mon Jun 12 01:45:57 UTC 2023,,,,,,,,,,,"0|z1ibyo:",9223372036854775807,,,,,,,,,,,,,,,,,,,"05/Jun/23 13:36;nfilotto;Hi, thank you for your feedback. Camel 2 is no more supported, have you tried with the most recent versions (3.20.5 or 4.0.0-M3)?;;;","06/Jun/23 08:24;vincenttang;Thanks Nicolas,

Our project is still using Java 8, which cannot upgrade to most recent versions (3.20.5 or 4.0.0-M3).

Checked that most latest version for JAVA 8 (3.14) is EOL also....

Our project is ancient (more than 20 years). Every upgrade is an ordeal. 

I understand 2.25.4 is EOL, is there any temporary solution on it, e.g. fix the woodstox property from camel core, to avoid this potential NPE?

I've also asked in SO [https://stackoverflow.com/q/76380521/21201981], but sadly there is no res. :(;;;","09/Jun/23 10:41;davsclaus;Thanks for reporting. We have added a NPE check;;;","09/Jun/23 10:42;davsclaus;Camel 3.14 is not EOL yet (by end of 2023), and we plan to do a 3.14.9 release;;;","12/Jun/23 01:45;vincenttang;Thanks Claus for the quick response (y)

I was misled by [https://endoflife.date/apache-camel]  about the EOL of camel 3.14. ;;;",,,,,,,,,,,,,,,,
camel-jbang - camel get circuitbreaker may not work,CAMEL-19405,13538260,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,31/May/23 12:04,31/May/23 17:09,13/Jul/23 08:30,31/May/23 17:09,,,,,,4.0.0,4.0-RC1,,,,,camel-jbang,,,0,,,"The cirucit breaker example does not output data when you do camel get cb
https://github.com/apache/camel-kamelets-examples/tree/main/jbang/circuit-breaker


",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 31 16:59:44 UTC 2023,,,,,,,,,,,"0|z1i8ts:",9223372036854775807,,,,,,,,,,,,,,,,,,,"31/May/23 16:59;davsclaus;Okay found a fix

~/workspace ❯ camel get circuit-breaker                                                                                                                                               ✘ INT
  PID   NAME  COMPONENT     ROUTE   ID               STATE  PENDING  SUCCESS   FAIL    REJECT
 15866  mycb  resilience4j  route1  circuitBreaker1  OPEN        10        4  6 (60%)       2;;;",,,,,,,,,,,,,,,,,,,,
Typo in kafka image name in ContainerLocalKafkaService,CAMEL-19401,13538016,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nfilotto,Yullia.buzlukova,Yullia.buzlukova,29/May/23 17:16,29/May/23 19:29,13/Jul/23 08:30,29/May/23 19:29,3.20.5,,,,,3.20.6,,,,,,camel-kafka,tests,,0,,,"Typo in kafka image name in [ContainerLocalKafkaService.java|https://github.com/apache/camel/blob/camel-3.20.x/test-infra/camel-test-infra-kafka/src/test/java/org/apache/camel/test/infra/kafka/services/ContainerLocalKafkaService.java#L28] in 3.20.5 (not in main branch though).


{code:java}
public static final String KAFKA3_IMAGE_NAME = ""confluentinc/cp-kafkai:7.3.2"";
{code}

should be 

{code:java}
public static final String KAFKA3_IMAGE_NAME = ""confluentinc/cp-kafka:7.3.2"";
{code}",,nfilotto,Yullia.buzlukova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon May 29 17:35:15 UTC 2023,,,,,,,,,,,"0|z1i7bs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"29/May/23 17:29;nfilotto;Good catch, thank you for reporting it;;;","29/May/23 17:35;nfilotto;The corresponding PR https://github.com/apache/camel/pull/10235;;;",,,,,,,,,,,,,,,,,,,
camel-cxf - Prevent storing invalid entry in Converter cache on error,CAMEL-19399,13538003,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nfilotto,nfilotto,nfilotto,29/May/23 14:17,30/May/23 12:26,13/Jul/23 08:30,30/May/23 12:26,3.18.7,3.20.4,4.0-M3,,,3.18.8,3.20.6,3.21.0,4.0-RC1,,,came-cxf,,,0,,,"If an error occurs while converting a value thanks to the {{CxfPayloadConverter}}, the value {{null}} is returned to let other fallback converters to try but if there are no such fallback converters, the cache of converters will keep the information that no converter exists which is not incorrect.

The behavior described above occurs when the unit test {{CxfPayloadConverterTest#testInvalidByteArrayToCxfPayload}} is called before {{CxfPayloadConverterTest#testByteArrayToCxfPayload}}, in that case, Camel believes that there is no converter for a byte array so it returns {{null}}. 

The corresponding failing test report https://ci-builds.apache.org/job/Camel/job/Camel%20JDK17/job/main/876/testReport/org.apache.camel.component.cxf.converter/CxfPayloadConverterTest/testByteArrayToCxfPayload/",,nfilotto,,,,,,,,,,,,,,,,,,CAMEL-19160,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon May 29 14:35:42 UTC 2023,,,,,,,,,,,"0|z1i78w:",9223372036854775807,,,,,,,,,,,,,,,,,,,"29/May/23 14:35;nfilotto;The corresponding PRs:

* 4.0: https://github.com/apache/camel/pull/10227
* 3.21: https://github.com/apache/camel/pull/10231
* 3.20: https://github.com/apache/camel/pull/10230
* 3.18: https://github.com/apache/camel/pull/10232;;;",,,,,,,,,,,,,,,,,,,,
camel-kafka - Configuring kafka option should no longer all be string types,CAMEL-19393,13537797,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/May/23 12:23,26/May/23 13:17,13/Jul/23 08:30,26/May/23 13:17,,,,,,3.20.6,3.21.0,4.0.0,4.0-RC1,,,camel-kafka,,,0,,,"Kafka Clients are now able to automatic convert to their expected type (int, boolean) and we should relax this in camel-kafka to allow configurations to be the type as-is.

Otherwise we can have problems like reported at
https://github.com/apache/camel-kamelets/issues/1492",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-05-26 12:23:34.0,,,,,,,,,,,"0|z1i5zc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka - Cannot set custom azure credential provider,CAMEL-19387,13537614,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/May/23 08:18,25/May/23 08:22,13/Jul/23 08:30,25/May/23 08:22,,,,,,3.18.8,3.20.6,3.21.0,4.0.0,4.0-RC1,,camel-kafka,,,0,,,"https://github.com/apache/camel-kamelets-examples/issues/21

Setting this in yaml dsl / xml-dsl with additionalProperties.xxx should resolve custom #bean references",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-05-25 08:18:10.0,,,,,,,,,,,"0|z1i4uo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jslt: allowTemplateFromHeader ignores header on subsequent exchanges,CAMEL-19383,13537361,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jsz,jsz,23/May/23 15:32,24/May/23 04:27,13/Jul/23 08:30,24/May/23 04:27,3.20.4,4.0-M3,,,,3.20.6,3.21.0,4.0.0,4.0-RC1,,,,,,0,,,"When allowTemplateFromHeader is set, the endpoint will remember the first header expression that is set and use it for any subsequent exchange, even if it brings a different expression in its header.

That is:

{{template.sendBodyAndHeader(""direct:start"", TEST_BODY,}}
{{JsltConstants.HEADER_JSLT_STRING, "".foo"");}}

{{template.sendBodyAndHeader(""direct:start"", TEST_BODY,}}
{{JsltConstants.HEADER_JSLT_STRING, "".bar"");}}

will both use the expression .foo and the expression .bar will be ignored.

 

Also, if resource is set on the URI, it will ignore any expressions from header despite allowTemplateFromHeader, unless it was set on the first exchange, in which case it will be used for all exchanges, even those without the header set.",,jsz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-05-23 15:32:56.0,,,,,,,,,,,"0|z1i3ao:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop creating processes with Camel JBang,CAMEL-19381,13537304,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apupier,apupier,23/May/23 09:44,09/Jun/23 13:57,13/Jul/23 08:30,09/Jun/23 13:57,3.20.4,3.20.5,,,,3.20.6,3.21.0,4.0.0,4.0-RC1,,,camel-jbang,,,0,,,"I used the command:
{noformat}
jbang camel@apache/camel run 'src/main/java/org/acme/timer/log/TimerRoute.java'
{noformat}

the file is coming from https://github.com/apache/camel-quarkus-examples/blob/ed3523e9c8d3343922eba3a34f6b248d90493782/timer-log/src/main/java/org/acme/timer/log/TimerRoute.java

there is this log repeating indefinitely:
{noformat}
Running integration with the following configuration:
    --camel-version=3.20.4
{noformat}

it creates a new CamelJBang on each time it writes the previous log block:
{noformat}
jps | grep CamelJBang
532586 CamelJBang
532743 CamelJBang
532666 CamelJBang
{noformat}

The main thread dump on them is:
{noformat}
Name: main
State: WAITING on java.lang.ProcessImpl@e90900f
Total blocked: 0  Total waited: 1

Stack trace: 
java.base@17.0.3/java.lang.Object.wait(Native Method)
java.base@17.0.3/java.lang.Object.wait(Object.java:338)
java.base@17.0.3/java.lang.ProcessImpl.waitFor(ProcessImpl.java:434)
app//org.apache.camel.dsl.jbang.core.commands.Run.runCamelVersion(Run.java:637)
app//org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:566)
app//org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:227)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:70)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:35)
app//picocli.CommandLine.executeUserObject(CommandLine.java:2041)
app//picocli.CommandLine.access$1500(CommandLine.java:148)
app//picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
app//picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
app//picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
app//picocli.CommandLine.execute(CommandLine.java:2170)
app//org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
app//main.CamelJBang.main(CamelJBang.java:36)
{noformat}
",,apupier,davsclaus,lhein,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jun 09 13:36:42 UTC 2023,,,,,,,,,,,"0|z1i2y0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"23/May/23 09:52;apupier;if I unset the Camel version:

{noformat}
jbang camel@apache/camel config unset camel-version
{noformat}

there is no more the loop.

When I set the version to 3.20.4 or 3.20.3, I reproduce it;;;","23/May/23 09:55;davsclaus;try with 3.20.5 when its released;;;","23/May/23 10:00;apupier;Attempt to use 3.20.5-SNAPSHOT is nto working (but unrelated to this issue):

{noformat}
(base) [apupier@localhost timer-log]$ jbang camel@apache/camel config set camel-version=3.20.5-SNAPSHOT
(base) [apupier@localhost timer-log]$ jbang camel@apache/camel config set camel.jbang.repos=https://repository.apache.org/snapshots/
(base) [apupier@localhost timer-log]$ jbang camel@apache/camel run 'src/main/java/org/acme/timer/log/TimerRoute.java'
Running integration with the following configuration:
    --camel-version=3.20.5-SNAPSHOT
[jbang] Resolving dependencies...
[jbang]    org.apache.camel:camel-bom:3.20.5-SNAPSHOT@pom
[jbang]    org.apache.camel:camel-core:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-core-engine:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-main:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-java-joor-dsl:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-kamelet:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-jbang-core:3.20
[jbang]    org.apache.camel:camel-kamelet-main:3.20
[jbang]    org.apache.camel:camel-resourceresolver-github:3.20
[jbang]    org.apache.camel:camel-cli-connector:3.20
[jbang]    org.apache.camel.kamelets:camel-kamelets:3.20.3
[jbang] [ERROR] Could not resolve dependencies: The following artifacts could not be resolved: org.apache.camel:camel-jbang-core:jar:3.20, org.apache.camel:camel-kamelet-main:jar:3.20, org.apache.camel:camel-resourceresolver-github:jar:3.20, org.apache.camel:camel-cli-connector:jar:3.20: Could not find artifact org.apache.camel:camel-jbang-core:jar:3.20 in mavencentral (https://repo1.maven.org/maven2/)
[jbang] Run with --verbose for more details
{noformat};;;","23/May/23 11:19;apupier;Camel 3.20.5 should be available in few days as the vote for the release has been started today: https://lists.apache.org/thread/d2bk9dgm1bb5ffcl266rd567b0b5s67w;;;","30/May/23 07:50;apupier;I reproduce with Camel 3.20.5:

{noformat}
jbang camel@apache/camel init test.xml
jbang camel@apache/camel config set camel-version=3.20.5
jbang camel@apache/camel run test.xml
{noformat}
;;;","30/May/23 13:47;apupier;updated stack with 3.20.5:

{noformat}
Name: main
State: WAITING on java.lang.ProcessImpl@2e0efc98
Total blocked: 0  Total waited: 1

Stack trace: 
java.base@17.0.3/java.lang.Object.wait(Native Method)
java.base@17.0.3/java.lang.Object.wait(Object.java:338)
java.base@17.0.3/java.lang.ProcessImpl.waitFor(ProcessImpl.java:434)
app//org.apache.camel.dsl.jbang.core.commands.Run.runCamelVersion(Run.java:679)
app//org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:574)
app//org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:231)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:73)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
app//picocli.CommandLine.executeUserObject(CommandLine.java:2041)
app//picocli.CommandLine.access$1500(CommandLine.java:148)
app//picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
app//picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
app//picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
app//picocli.CommandLine.execute(CommandLine.java:2170)
app//org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
app//main.CamelJBang.main(CamelJBang.java:36)

{noformat};;;","31/May/23 13:40;apupier;it also affects camel version specified in a profile:
* {noformat}
jbang camel@apache/camel init test.xml
{noformat}
* create application.properties files with content:
{noformat}
camel.jbang.camel-version=3.20.5
{noformat}
* {noformat}
jbang camel@apache/camel run test.xml
{noformat};;;","31/May/23 13:42;apupier;if I understand well, it iw orking when specifyin gthe version from command-line with --camel-version because it is explcitely removed at this place [https://github.com/apache/camel/blob/f00a7a8e7b534e3b0f67091bb46e7604a642e825/dsl/camel-jbang/camel-jbang-core/src/main/java/org/apache/camel/dsl/jbang/core/commands/Run.java#L671]

For other cases, there is a camelVersion specified and so it tried to spin a new process all the time: https://github.com/apache/camel/blob/f00a7a8e7b534e3b0f67091bb46e7604a642e825/dsl/camel-jbang/camel-jbang-core/src/main/java/org/apache/camel/dsl/jbang/core/commands/Run.java#L583;;;","09/Jun/23 13:36;davsclaus;This will only work on never Camel version forward, 3.20.6, 3.21 etc. For older version you need to use the command line args.;;;",,,,,,,,,,,,
spring-rabbitmq - Component does not Respect replyTimeout for InOut Exchanges,CAMEL-19373,13536845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,adam.lukaszewski,adam.lukaszewski,19/May/23 09:10,18/Jun/23 08:13,13/Jul/23 08:30,18/Jun/23 08:12,3.20.4,,,,,3.20.7,3.21.0,4.0.0,4.0-RC1,,,camel-spring-rabbitmq,,,0,,,"Hi folks,

I think I found a bug in the spring-rabbitmq component. It seems that the *replyTimeout* settings (neither path nor spring properties) will be accepted by the component. I have create a [sample project|https://github.com/adamlukaszewski/spring-camel-rabbit-reply-timeout] for you to show the issue. The route is very simple:

{code}
public void configure() throws Exception {
        from(""timer:hello?repeatCount=1"")
            .transform(simple(""Random number ${random(0,100)}""))
            .log(LoggingLevel.ERROR,
                    "">>>>>>> Timeout of replay should happen after 10 secs (application.properties) or 15 secs as "" +
                            ""here configured"")
            .to(ExchangePattern.InOut, ""spring-rabbitmq:foo?routingKey=mykey&replyTimeout=15000"");
    }
{code}

I expect that the listener will throw a ""Reply timed out"" AmqpReplyTimeoutException after 15 seconds (or 10 seconds as defined in the [application.properties|http://application.properties/]). What is happening:

 !image.png!

You see that after 30 secs the exception occurred. It seems that we are hitting here the default configurations of Spring AMQ instead the setup configurations.

 !imageaa.png!",,adam.lukaszewski,davsclaus,steven.durrenmath,,,,,,,,,,,,,,,,,,,,,,,"19/May/23 08:59;adam.lukaszewski;image.png;https://issues.apache.org/jira/secure/attachment/13058352/image.png","19/May/23 08:59;adam.lukaszewski;imageaa.png;https://issues.apache.org/jira/secure/attachment/13058351/imageaa.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jun 18 08:13:07 UTC 2023,,,,,,,,,,,"0|z1i040:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/Jun/23 08:13;davsclaus;Thanks I changed the default value to 30 seconds as that is what spring uses;;;",,,,,,,,,,,,,,,,,,,,
RedeliveryErrorHandler's suppressed exceptions cause memory leak and logging issue,CAMEL-19371,13536750,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Meszaros,Meszaros,18/May/23 13:24,19/May/23 16:35,13/Jul/23 08:30,19/May/23 16:35,3.14.1,,,,,3.14.8,3.18.7,3.20.5,3.21.0,4.0.0,4.0-RC1,camel-core-processor,,,0,,,"Hi There,


I am a bit dubious about the behavior of RedeliveryErrorHandler's handleException() method in camel-core-processor bundle.

Chaining all exceptions in suppressedExceptions of Throwable during the redelivery process may not be the original intention, at least the comment below is suggesting that the goal was something else here.
{quote}
if (previous != null && previous != e) {
// a 2nd exception was thrown while handling a previous exception
// so we need to add the previous as suppressed by the new exception
// see also FatalFallbackErrorHandler
{quote}

The consequence of adding the previous exception to the suppressedExceptions list of the current one is building up an infinite chain of objects, besides a single log entry can be huge after a couple of retry attempts, see attached log.
I think the best would be to turn this feature on/off by a configuration parameter.

Thank you.",,davsclaus,Meszaros,,,,,,,,,,,,,,,,,,,,,,,,"18/May/23 13:21;Meszaros;suppressed.log;https://issues.apache.org/jira/secure/attachment/13058324/suppressed.log",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri May 19 13:16:13 UTC 2023,,,,,,,,,,,"0|z1hzj4:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/May/23 20:03;davsclaus;Yeah that is a good point about we should likely just keep the last error so the depth does not grow soo big;;;","18/May/23 20:04;davsclaus;its not a memory leak as the memory can be reclaimed, its just a long stacktrace if retry is many times. And you should not have forever retries then you have another problem on your hand;;;","19/May/23 07:47;Meszaros;I am afraid it is, since all exceptions thrown during the redelivery mechanism chained together and attached to the exchange via CamelExceptionCaught property (previous exception:

{{{color:#000000}Throwable previous {color}= {color:#871094}exchange{color}.getProperty({color:#000000}ExchangePropertyKey{color}.{color:#871094}EXCEPTION_CAUGHT{color}, {color:#000000}Throwable{color}.{color:#0033b3}class{color});}}

On the other hand redeliveryPolicy maximumRedeliveries -1 is a valid option, this way the suppressedExceptions chain can definitely cause a memory leak. {color:#067d17}
{color};;;","19/May/23 08:17;davsclaus;a leak is memory that cannot be reclaimed
what you describe is memory usage can become high if you have forever error handling, and using -1 is a bad practice;;;","19/May/23 13:16;davsclaus;Okay have a pending fix, as this manifest in camel-jms and only when doing error handling that causes a 2nd error.

However we may consider removing adding suppressed, but then end users may not see this from a result exception as they can only see the last, and not the original.;;;",,,,,,,,,,,,,,,,
Rest-openapi: lookup mechanism does not work after changes from Camel-18963,CAMEL-19364,13536560,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jondruse,jondruse,jondruse,17/May/23 12:58,21/May/23 07:47,13/Jul/23 08:30,21/May/23 07:47,4.0.0,,,,,4.0.0,4.0-RC1,,,,,camel-rest-openapi,,,0,,,"I was trying to synchronize camel-quarkus with current Camel from `main` branch.

I noticed failures related to fix [https://github.com/apache/camel/commit/e2ad230d86fcbbc1e3c4ad5a9daf01aa3127eb42] in the Camel-rest-openapi component.

According to the doc, the url in component can be specified i.g. ""classpath:..."", ""bean:..."". At least these 2 options does not work.

It can be verified by a simple test:
{code:java}
    @Test
    public void testClasspath() throws Exception{
        Producer p =   context().getEndpoint(""rest-openapi:addPet?specificationUri=classpath:openapi.json"").createProducer();
        Assertions.assertNotNull(p);
    }
{code}",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 17 12:58:51 UTC 2023,,,,,,,,,,,"0|z1hycw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/May/23 12:58;jondruse;[~klease78] ^ FYI;;;",,,,,,,,,,,,,,,,,,,,
"camel-spring-boot - When camel start graceful shutdown, it still receive new request during graceful shutdown.",CAMEL-19359,13536367,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chen19980,chen19980,16/May/23 07:07,23/May/23 04:53,13/Jul/23 08:30,23/May/23 04:53,3.20.4,,,,,3.21.0,4.0.0,4.0-RC1,,,,,,,0,,,"< camel graceful shutdown time = 20s, the service thread.sleep = 10s >
In my test case, at first I started the application, send the first request and then stop the JVM to run the camel graceful shutdown, in the console show that there have 2 infilght messages pending to complete, after about 4 sec, I send the second request, in theroy, camel shouldn't accept the second request, unfortunately, it still receive new request.

[TestCode|https://github.com/chen19980/GracefulShutdown-test]","I use the DefaultShutdownStrategy.

< the module is camel-base-engine 3.20.4 >",chen19980,davsclaus,,,,432000,432000,,0%,432000,432000,,,,,,,,,,,CAMEL-19377,,,,"16/May/23 07:07;chen19980;2023-05-16 10 24 30.jpg;https://issues.apache.org/jira/secure/attachment/13058238/2023-05-16+10+24+30.jpg","16/May/23 07:07;chen19980;2023-05-16 10 26 23.jpg;https://issues.apache.org/jira/secure/attachment/13058239/2023-05-16+10+26+23.jpg","16/May/23 07:07;chen19980;2023-05-16 10 27 58.jpg;https://issues.apache.org/jira/secure/attachment/13058240/2023-05-16+10+27+58.jpg","16/May/23 07:15;chen19980;2023-05-16 15 13 59.jpg;https://issues.apache.org/jira/secure/attachment/13058241/2023-05-16+15+13+59.jpg","22/May/23 12:26;chen19980;截圖 2023-05-22 20.23.23.png;https://issues.apache.org/jira/secure/attachment/13058407/%E6%88%AA%E5%9C%96+2023-05-22+20.23.23.png",,,,,5.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,Important,,,,,,,,9223372036854775807,,,Java,Mon May 22 12:28:27 UTC 2023,,,,,,,,,,,"0|z1hx60:",9223372036854775807,,,,,,,,,,,,,,,,,,,"16/May/23 07:21;davsclaus;Are you talking about this in the chat room, if so add a link to that conversation.;;;","16/May/23 07:22;davsclaus;You need to put together a sample project that reproduces what you try to do, you can attach this this JIRA as .zip or put the code in github etc.;;;","16/May/23 07:22;chen19980;[~davsclaus] Yesss, I already add the link in the conversation.;;;","21/May/23 04:34;chen19980;Is there have any solutions to solve this issue ?;;;","21/May/23 07:43;davsclaus;This is a big example, can it run database and whatnot. We don't have a lot of time to investigate end user applications if they can't easily be run standalone and demonstrate what your problem is.;;;","21/May/23 12:15;chen19980;[~davsclaus] OK, I will offer another simple example.;;;","21/May/23 14:16;chen19980;[~davsclaus] Here is a simple code for test graceful shutdown. [Simple code|https://github.com/chen19980/GracefulShutdown-test];;;","21/May/23 15:43;davsclaus;Thank you for the smaller example;;;","21/May/23 15:46;davsclaus;Okay if I run this with 

mvn spring-boot:run

And I can call the service via that curl command.

And then if I stop the spring boot application (ctrl + c) then it stops nicely. So we need to find a way to simulate a shutdown that is taking time, and let Spring Boot still send messages into Camel.;;;","21/May/23 15:52;chen19980;[~davsclaus] Yes. I have set a thread.sleep() method in the service to simulate a shutdown in taking time.

If I stop the SB application and send the second request, the camel still receive request.;;;","21/May/23 16:11;davsclaus;Okay I can simulate this by just doing a kill -sigint <pid> and then have breakpoints in shutdown code in SB and Camel.

;;;","21/May/23 16:22;chen19980;[~davsclaus]  Ok. If you fix this problem, let me know what to do. Thanks;;;","22/May/23 11:11;davsclaus;so spring boot graceful shutdown is only its own http server.

In camel you always have graceful shutdown, and Camel takes care of processing inflight in graceful manner.
So if you turn of spring boot graceful shutdown, then SB will stop HTTP server quickly, and Camel will let inflight messages complete and shutdown gracefully.

So it only makes sense to use SB graceful if you use other non Camel HTTP services with SB and want those to graceful shutdown.

;;;","22/May/23 11:18;davsclaus;Okay I have changed the shutdown order in camel-spring so its done a bit later, this allows SB tomcat http server to shutdown first

{code}
2023-05-22T13:17:16.168+02:00  INFO 39155 --- [ionShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2023-05-22T13:17:16.960+02:00  INFO 39155 --- [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2023-05-22T13:17:17.954+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.c.s.CamelHttpTransportServlet      : Destroyed CamelHttpTransportServlet[CamelServlet]
2023-05-22T13:17:18.446+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.0.0-SNAPSHOT (TestCamelSaga) is shutting down (timeout:20s)
2023-05-22T13:17:21.295+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.i.engine.DefaultShutdownStrategy   : Starting to graceful shutdown 13 routes (timeout 20 seconds)
...
2023-05-22T13:17:21.318+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   :     Stopped route1 (rest-api:///api-doc)
2023-05-22T13:17:21.318+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   :     Stopped route2 (direct://databases)
2023-05-22T13:17:21.321+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.0.0-SNAPSHOT (TestCamelSaga) shutdown in 2s874ms (uptime:33s)
{code};;;","22/May/23 11:25;chen19980;[~davsclaus] Amazing!!! Thanks for you help. In my past test, when SB start graceful shutdown, it can't receive new request during shutdownning. But in SB with camel, I found that SB will start graceful shutdown after camel executing so it always not block the new request. And what time does the fix version will release ? Thanks.;;;","22/May/23 11:28;davsclaus;You can try NOT to use SB graceful shutdown with your example, and only use Camel shutdown.

A fix is pending for Camel v4, and potentially backported to Camel 3.21
https://github.com/apache/camel/pull/10184;;;","22/May/23 11:32;davsclaus;I created CAMEL-19377 as Camel should ideally also handled graceful shutdown by not accepting incoming http traffic. We do this in the older servlet based, but not the newer platform-http;;;","22/May/23 11:49;davsclaus;Okay so in your example, then camel-servlet is in use, and it will suspend when Camel does graceful shutdown, and calling it will return 503

~/workspace ❯ curl --location --request GET 'http://localhost:9090/camel/databases'                                                                                          4s
{""timestamp"":""2023-05-22T11:48:05.078+00:00"",""status"":503,""error"":""Service Unavailable"",""path"":""/camel/databases""}%;;;","22/May/23 12:05;chen19980;[~davsclaus] So in my TestCode, use camel-servlet is a right desicion? It can block the second request when camel during graceful shutdownning. Right?;;;","22/May/23 12:10;davsclaus;yes camel-servlet will block 2nd request as shown above with the 503 response code (that is from camel, without spring boot graceful shutdown);;;","22/May/23 12:28;chen19980;!截圖 2023-05-22 20.23.23.png!

[~davsclaus] In my another test code, which dependency effect <the camel still receive 2nd request during shutdownning> this behavior.;;;"
KameletDiscoveryTest fails to find routeTemplate,CAMEL-19345,13536023,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,klease78,klease78,12/May/23 21:35,16/May/23 18:12,13/Jul/23 08:30,16/May/23 18:12,4.0-M3,,,,,3.20.5,3.21.0,4.0.0,4.0-RC1,,,camel-kamelet,tests,,0,,,"This test binds a local RoutesBuilderLoaderSupport implementation to the kamelet.yaml extension as part of the test. This defines the routeTemplate.
The actual route is added directly to the context.
Due to the change in DefaultRoutesLoader.findRoutesBuilders() in commit [https://github.com/apache/camel/commit/5d868bdfd37e585582e5d7e3ac809f970e1dae28] related to CAMEL-19309, the custom RoutesBuilderLoader isn't invoked because the resource ""classpath:/kamelets/mySetBody.kamelet.yaml"" is checked for existence before checking for a matching loader.
Therefore the template is not defined.",,davsclaus,klease78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue May 16 18:12:19 UTC 2023,,,,,,,,,,,"0|z1hv80:",9223372036854775807,,,,,,,,,,,,,,,,,,,"16/May/23 18:05;davsclaus;Thanks for reporting;;;","16/May/23 18:12;davsclaus;okay the test was cheating a bit as the resource would say false to exists.;;;",,,,,,,,,,,,,,,,,,,
Rest Inline Routes mixed with direct routes.,CAMEL-19342,13535925,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,coelhro,coelhro,12/May/23 07:11,13/May/23 07:21,13/Jul/23 08:30,13/May/23 07:21,3.20.4,4.0-M3,,,,3.20.5,3.21.0,4.0.0,4.0-RC1,,,came-core,,,0,,,"Hello, 

For more information please follow Zulip thread:

[https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/Inline.20Routes.20.28Default.20Model.29]

Here is my code:

[https://github.com/rodrigoserracoelho/rest-demo]

Do let me know if you need more info.

Thanks.

BR,

Rodrigo",,coelhro,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat May 13 07:21:26 UTC 2023,,,,,,,,,,,"0|z1hum8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"12/May/23 08:30;coelhro;What i see so far is:
h3. Iteration 1

The method *DefaultModel.addRouteDefinitions* is called with the 2 route definitions:
{code:java}
Route(demo-test-0)[From[direct:demo-test-0] -> [OnException[[java.lang.Exception] -> []], LoadBalanceType[FailoverLoadBalancer, [To[http://localhost:8081/test?bridgeEndpoint=true&throwExceptionOnFailure=false]]]]]

Route(rd-demo-test-0)[From[rest:get:/demo0?matchOnUriPrefix=true] -> [To[direct:demo-test-0]]]{code}
The class attribute: *routeDefinitions* is _empty_
h3. Iteration 2

The method *DefaultModel.addRouteDefinitions* is called with the 2 route definitions:
{code:java}
Route(demo-test-1)[From[direct:demo-test-1] -> [OnException[[java.lang.Exception] -> []], LoadBalanceType[FailoverLoadBalancer, [To[http://localhost:8081/test?bridgeEndpoint=true&throwExceptionOnFailure=false]]]]]

Route(rd-demo-test-1)[From[rest:get:/demo1?matchOnUriPrefix=true] -> [To[direct:demo-test-1]]] {code}
The class attribute: *routeDefinitions* is *NOT* empty:
{code:java}
Route(rd-demo-test-0)[From[rest://get:/demo0?matchOnUriPrefix=true&routeId=rd-demo-test-0] -> [OnException[[java.lang.Exception] -> []], LoadBalanceType[FailoverLoadBalancer, [To[http://localhost:8081/test?bridgeEndpoint=true&throwExceptionOnFailure=false]]]]] {code}
I think the problem shoud be around here, because we see a REST route with 3 elements:
1 - OnException

2- Load Balancer

3 - ToDefinition (where it fails)

*This is the ""inlined"" route added from the first iteration (rd-demo-test-0), so i think it fails to be removed by the end of first iteration.*

I think that after this code: (DefaultModel:248)
{code:java}
if (shouldStartRoutes()) {
       getCamelContext().adapt(ModelCamelContext.class).startRouteDefinitions(list);
} {code}
The class attribute *routeDefinitions* needs to be cleared. 

If i clear the class attribute: *routeDefinitions* after each iteration, i don't the same issue anymore and the routes are deployed inlined. 
{code:java}
2023-05-12 11:03:31.208  INFO 289566 --- [           main] io.surisoft.demo.DemoRouteBuilder        : Route 0 deployed!
2023-05-12 11:03:47.948  INFO 289566 --- [           main] io.surisoft.demo.DemoRouteBuilder        : Route 1 deployed!{code}
If i stop the server:
{code:java}
2023-05-12 11:05:30.852  INFO 289566 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.20.4 (camel-1) is shutting down (timeout:45s)
2023-05-12 11:05:30.861  INFO 289566 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   : Routes stopped (stopped:2)
2023-05-12 11:05:30.861  INFO 289566 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   :     Stopped rd-demo-test-1 (rest://get:/demo1)
2023-05-12 11:05:30.861  INFO 289566 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   :     Stopped rd-demo-test-0 (rest://get:/demo0) {code};;;","12/May/23 12:07;coelhro;Update:

I've changed the *DefaultModel.addRouteDefinitions(*
Collection<RouteDefinition> routeDefinitions
*)* method to clear the routeDefinitions list after completion.
{code:java}
if (shouldStartRoutes()) {
   ((ModelCamelContext) getCamelContext()).startRouteDefinitions(list);
}
//New line
this.routeDefinitions.clear(); {code}
Compiled the 4.0.0-SNAPSHOT (both camel-core and camel-springboot), and i don't see the issue anymore.

Since i don't know if this change can produce side effects, can you please help?

Thanks.

 ;;;","13/May/23 07:21;davsclaus;Thanks for reporting and the reproducer sample project.

The fix was a little bit different than yours as you should not clear, but the check for what output should handle that previous routes may have been inlined and prepared with error handling that affects the route model.;;;",,,,,,,,,,,,,,,,,,
karaf - ConnectionFactory not found when use camel-activemq,CAMEL-19339,13535823,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vladk,vladk,11/May/23 14:48,19/May/23 06:01,13/Jul/23 08:30,18/May/23 21:09,3.20.4,,,,,3.20.5,3.21.0,,,,,karaf,,,0,,,"Hello.

I use Apache Karaf 4.4.3 as an osgi container. When I try to use camel-activemq 3.20.4 I get an error while deploy bundle:

Caused by: java.lang.NoClassDefFoundError: javax/jms/ConnectionFactory
    at org.apache.camel.component.activemq.ActiveMQComponent.createConfiguration(ActiveMQComponent.java:260) ~[?:?]
    at org.apache.camel.component.jms.JmsComponent.<init>(JmsComponent.java:76) ~[?:?]
    at org.apache.camel.component.activemq.ActiveMQComponent.<init>(ActiveMQComponent.java:48) ~[?:?]
    at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:?]
    at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:?]
    at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:?]
    at java.lang.reflect.Constructor.newInstance(Constructor.java:490) ~[?:?]
    at org.apache.aries.blueprint.utils.ReflectionUtils.newInstance(ReflectionUtils.java:369) ~[?:?]
    at org.apache.aries.blueprint.container.BeanRecipe.newInstance(BeanRecipe.java:839) ~[?:?]
    at org.apache.aries.blueprint.container.BeanRecipe.getInstanceFromType(BeanRecipe.java:350) ~[?:?]
    ... 28 more
Caused by: java.lang.ClassNotFoundException: javax.jms.ConnectionFactory not found by org.apache.camel.camel-activemq [121]
    at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1591) ~[?:?]
    at org.apache.felix.framework.BundleWiringImpl.access$300(BundleWiringImpl.java:79) ~[?:?]

In Karaf I use commands:
repo-add camel 3.20.4
feature:install camel
feature:install camel-activemq

My code and full log is in an attachment

On version 3.18.6 this code works","Java 11

Karaf 4.3.3

Camel 3.20.4",davsclaus,vladk,,,,,,,,,,,,,,,,,,,,,,,,"11/May/23 14:47;vladk;TestCamel.zip;https://issues.apache.org/jira/secure/attachment/13058008/TestCamel.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri May 19 06:01:50 UTC 2023,,,,,,,,,,,"0|z1htzk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/May/23 20:11;davsclaus;You may need to install JMS 1.x specs as it may be that karaf only comes with v2

karaf@root()> exports | grep -i javax.jms
javax.jms                                                 │ 2.0.0       │ 125 │ org.apache.geronimo.specs.geronimo-jms_2.0_spec;;;","18/May/23 20:21;davsclaus;Yeah so in camel-activemq 3.20.4
	javax.jms;resolution:=optional;version=""[1.1,2)"",

And in 3.18.6
	javax.jms;version=""[1.1,2)"",;;;","18/May/23 20:22;davsclaus;It could be activemq itself and those darn maven plugins that generate that osgi manifest that does this wrong now;;;","18/May/23 20:53;davsclaus;Okay I got a bit further, you now need to install a connection pool

Caused by: java.lang.ClassNotFoundException: org.apache.activemq.pool.PooledConnectionFactory not found by org.apache.camel.camel-activemq [121];;;","18/May/23 21:07;davsclaus;Okay this was more work due to bad osgi 

23:07:13.536 INFO [pipe-start 141] Blueprint bundle org.example.TestCamel/1.0.0.SNAPSHOT has been started
23:07:13.536 INFO [Blueprint Event Dispatcher: 1] Attempting to start CamelContext: TestNewCamel
23:07:13.615 INFO [Blueprint Event Dispatcher: 1] Apache Camel 3.20.5-SNAPSHOT (TestNewCamel) is starting
23:07:13.811 INFO [Blueprint Event Dispatcher: 1] Routes startup (started:1)
23:07:13.811 INFO [Blueprint Event Dispatcher: 1]     Started route1 (activemq://queue:TEST)
23:07:13.811 INFO [Blueprint Event Dispatcher: 1] Apache Camel 3.20.5-SNAPSHOT (TestNewCamel) started in 284ms (build:11ms init:78ms start:195ms);;;","19/May/23 06:01;vladk;Thank you for your response. Waiting for 3.20.5;;;",,,,,,,,,,,,,,,
Snmp: version 3 is not supported for several actions for the component,CAMEL-19298,13534322,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,27/Apr/23 12:51,16/May/23 14:56,13/Jul/23 08:30,16/May/23 14:56,3.18.6,4.0-M3,,,,3.18.7,3.20.5,3.21.0,4.0.0,4.0-RC1,,camel-snmp,,,0,,,"In snmp component, users can use versions 0.1 and 2 (using values from the [documentation|https://camel.apache.org/components/3.20.x/snmp-component.html#_endpoint_query_option_snmpVersion]).

Version 3 is not supported for several actions (like provide PDU or get next)
To support this version on component, different PDU class has to be used. (for example here https://github.com/apache/camel/blob/main/components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpProducer.java#L85)

There is a test coverage (creation in progress) in camel-quarkus, which could be used as a reproducer simulating missing scenarios - https://github.com/apache/camel-quarkus/issues/4843",,jondruse,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-27 12:51:27.0,,,,,,,,,,,"0|z1hkrc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to init camel file with JBang for multi dot file name suffix - eg 'foo.camel.xml',CAMEL-19296,13534014,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,djelinek,djelinek,25/Apr/23 14:51,26/May/23 08:22,13/Jul/23 08:30,26/Apr/23 09:02,3.20.3,4.0-M2,,,,3.20.5,3.21.0,4.0.0,4.0-M3,,,camel-jbang,,,0,,,"{code:java}
jbang run -Dcamel.jbang.version=3.20.3 camel@apache/camel init foo.camel.xml

> Error: Unsupported file type: camel.xml{code}
Tried also with latest camel version -Dcamel.jbang.version=4.0.0-M2",,apupier,davsclaus,djelinek,,,,,,,,,,,,,CAMEL-19112,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Apr 26 09:01:55 UTC 2023,,,,,,,,,,,"0|z1hiuw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"25/Apr/23 14:55;djelinek;[~davsclaus] I am sorry I did clone of previous reported same bug and it was cloned also with assignee which I cannot modify :(;;;","25/Apr/23 17:56;davsclaus;This is only for yaml files where you have xxx.camel.yaml - for any other the files are single extension only.;;;","26/Apr/23 07:49;apupier;Allowing xxx.camel.xml is helping integrations in VS Code. VS Code is allowing to base file type only on the filename, not on the content. For instance, it will allow to provide a specific icon in explorer, automatically open with a specific editor, filter commands in contextual menus, command palette and actions.

In a more general way, it would be even better to provide whatever xxx.yyy.xml as this is a valid pattern for xml filenames.;;;","26/Apr/23 09:01;davsclaus;Okay that is better in this light to make it consistent for markup languages so xml and yaml can do the same file naming wise.
;;;",,,,,,,,,,,,,,,,,
Concurrency issues with dynamicMap in AbstractDynamicRegistry,CAMEL-19295,13533883,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rhuanrocha,adavila,adavila,24/Apr/23 17:48,28/May/23 10:23,13/Jul/23 08:30,26/May/23 09:58,3.14.2,,,,,3.21.0,4.0.0,4.0-RC1,,,,camel-core,,,0,,,"Hello everyone,

We have detected concurrency issues related to the dynamicMap attribute of the AbstractDynamicRegistry class. By default, dynamicMap is an object of the SimpleLRUCache class, which inherits from LinkedHashMap.

We have resolved the issue by creating our own LRUCacheFactory which returns a thread-safe synchronized map backed by the specified map.

Could you please review it?",,adavila,davsclaus,nfilotto,rhuanrocha,,,,,,,,,,,,,CAMEL-19311,CAMEL-19397,,,,,,,,"25/Apr/23 10:44;adavila;OOMECamelEndpointRegistry.java;https://issues.apache.org/jira/secure/attachment/13057558/OOMECamelEndpointRegistry.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu May 25 17:59:15 UTC 2023,,,,,,,,,,,"0|z1hi1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,"24/Apr/23 18:57;rhuanrocha;Hi, I'm not sure if the issue is related to https://issues.apache.org/jira/browse/CAMEL-19014 which is already resolved. Is it happening just to 3.14.2? Have you tested with newer versions?;;;","25/Apr/23 10:46;adavila;Hi, yes, I have also tried it in version 3.14.7 and the same error occurs. I have attached a code snippet to force the error.;;;","25/Apr/23 23:27;rhuanrocha;Yes, but have you tried it in version 3.21.x or 4? The issue I sent solves the problem to 2.21.x and 4. I will try to test it with the reproducer you attached. ;;;","26/Apr/23 08:24;adavila;Hi, yes, I have tried with version 3.20.3 and 4.0.0-M2 and the same error occurs. Creating LRUCacheFactory instance from this class serves as a stopgap solution for the tested versions.

 
{code:java}
public class SynchronizedLRUCacheFactory extends DefaultLRUCacheFactory {  
   
    ...

    @Override
    public <K, V> Map<K, V> createLRUCache(int maximumCacheSize) {
        return Collections.synchronizedMap(super.createLRUCache(maximumCacheSize));
    }

    ...

}{code}
 

 

 ;;;","19/May/23 08:55;davsclaus;You can just add camel-caffeine-lrucache to your classpath and Camel should automatic use this cache instead of SimpleLRUCache;;;","25/May/23 17:59;nfilotto;The backport for 3.21 https://github.com/apache/camel/pull/10213;;;",,,,,,,,,,,,,,,
camel-spring-ldap - base is set twice when using SB AutoConfiguration,CAMEL-19293,13533803,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,Federico Mariani,Federico Mariani,Federico Mariani,24/Apr/23 08:48,24/Apr/23 14:27,13/Jul/23 08:30,24/Apr/23 14:27,4.0-M2,,,,,3.18.7,3.20.5,3.21.0,4.0.0,4.0-M3,,,,,0,,,"When using SB AutoConfiguration and the base is set by SB on the ldapTemplate, camel set the base twice.",,Federico Mariani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-24 08:48:36.0,,,,,,,,,,,"0|z1hhk0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kafka consumer can flood brokers if TLS handshake fails and pollOnError is set to RECONNECT,CAMEL-19285,13533436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,dylan.piergies,dylan.piergies,20/Apr/23 16:36,01/Jul/23 12:55,13/Jul/23 08:30,29/Jun/23 14:01,3.20.2,3.20.3,,,,3.20.7,3.21.1,4.0.0,,,,camel-kafka,,,0,help-wanted,,"The Kafka consumer does not respect reconnect backoff options when a TLS handshake fails if the consumer's {{pollOnError}} option is set to {{{}RECONNECT{}}}, resulting in reconnection attempts being made in a tight loop without delays, meaning that Camel applications consuming from Kafka topics can effectively mount a DDoS attack on the Kafka broker. This effect is amplified if concurrent consumers are in use, since each consumer thread is making its own connection attempts.

Naturally, we found this out the hard way, in production, when another team put in place a firewall rule to allow connections from our consumers. The amount of TLS handshake traffic generated was sufficient to overwhelm the broker, resulting in an outage.

I have created a small project to demonstrate the issue against a containerised Kafka broker here: [https://github.com/dylanpiergies/kafka-camel-flood-issue]

This issue does not occur when a connection fails for other reasons (e.g. connection refused, connection timeout); in these cases the reconnect backoff behaves as expected.",,davsclaus,dlp,dylan.piergies,msharma,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Jul 01 12:55:47 UTC 2023,,,,,,,,,,,"0|z1hfbk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"25/Apr/23 22:14;msharma;I can work on this issue.;;;","26/Apr/23 04:44;davsclaus;Thanks help is welcome and send a PR if you have some code fixes;;;","27/Apr/23 19:24;dylan.piergies;[~msharma] Many thanks. I was hoping to get around to a fix, but I haven't had time. Let me know if you need any help reproducing.;;;","28/Apr/23 02:35;msharma;I am able to reproduce the issue and set up the debug environment. I hope to have a fix soon.;;;","28/Apr/23 16:54;msharma;[~dylan.piergies]  I am able to run the code and see that reconnection is not happening in a tight loop. the sample you have provided has 
{code:java}
reconnect-backoff-ms=1000
reconnect-backoff-max-ms: 10000{code}
The backoff logic is as per [ExponentialBackoff |https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java].

Based on this logic you should see that from the fourth retry onward, retries should happen approximately every 10sec. I am able to verify this from the sample you have provided.;;;","28/Apr/23 22:13;dlp;It doesn't sound like the reproduction is completely reliable. What you're
describing is the correct behaviour. There's definitely a scenario that
leads to the reconnect occurring in a tight loop. Are you seeing SSL
handshake errors in the application and Kafka logs?


;;;","28/Apr/23 22:14;dlp;It doesn't sound like the issue has been reproduced. I've seen some intermittency myself, but there's definitely a scenario where the reconnection attempts occur in a tight loop. It might take some more investigation on my part to pin down the exact scenario. Are you seeing SSL handshake errors in the application and Kafka logs?;;;","29/Apr/23 00:40;msharma;Yes I see TLS error, the error is like this
{code:java}
2023-04-28 16:11:27.399  INFO 24501 --- [mer[test-topic]] org.apache.kafka.clients.NetworkClient   : [Consumer clientId=consumer-00187c38-02c6-4914-82d7-53621ed2f645-1, groupId=00187c38-02c6-4914-82d7-53621ed2f645] Node -1 disconnected.
2023-04-28 16:11:27.400  WARN 24501 --- [mer[test-topic]] org.apache.kafka.clients.NetworkClient   : [Consumer clientId=consumer-00187c38-02c6-4914-82d7-53621ed2f645-1, groupId=00187c38-02c6-4914-82d7-53621ed2f645] Connection to node -1 (localhost/127.0.0.1:9092) terminated during authentication. This may happen due to any of the following reasons: (1) Authentication failed due to invalid credentials with brokers older than 1.0.0, (2) Firewall blocking Kafka TLS traffic (eg it may only allow HTTPS traffic), (3) Transient network issue. {code}
these errors can overload the broker depending on the number of consumers, they all will try to connect every 10 seconds with 20% jitter.;;;","02/May/23 08:49;dylan.piergies;Yes, multiple consumers do amplify the problem, but I can still get much faster reconnects that configured with just a single consumer. I'll try to find some time to extract logs this afternoon and perhaps get to reproducing the problem more reliably.;;;","04/May/23 19:17;dlp;Have reproduced again on a different system (though I did experience an odd issue with my docker-compose setup, which is now fixed). Here's a snippet of the log output from the Kafka broker:

kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,170] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41098-61) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,192] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41110-62) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,210] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41114-62) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,227] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41126-62) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,245] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41136-63) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,258] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41138-63) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,273] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41140-63) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,290] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41150-64) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,304] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41162-64) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,319] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41166-64) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,333] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41176-65) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,345] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41190-65) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,360] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41192-65) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,372] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41204-66) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,387] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41218-66) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,400] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41220-66) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,413] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41224-67) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,426] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41234-67) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,441] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41238-67) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,458] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41254-68) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,477] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41258-68) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,490] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41262-68) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,502] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41270-69) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,515] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41284-69) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,529] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41292-69) (SSL handshake failed) (org.apache.kafka.common.network.Selector)
kafka-camel-flood-issue-kafka-1      | [2023-05-04 19:12:09,541] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1001] Failed authentication with /172.25.0.1 (channelId=172.25.0.3:9093-172.25.0.1:41302-70) (SSL handshake failed) (org.apache.kafka.common.network.Selector)

It is visible from the timestamps that the backoff period is not being respected.;;;","04/May/23 19:20;dlp;Additionally:

{{$ java -version}}
{{openjdk version ""17.0.7"" 2023-04-18}}
{{OpenJDK Runtime Environment (build 17.0.7+7)}}
{{OpenJDK 64-Bit Server VM (build 17.0.7+7, mixed mode)}}

The container we saw this issue with in production was using an Eclipse Temurin base image atthe same Java version.;;;","04/May/23 20:53;msharma;Can you share the command you used  to run the Kafka container. ;;;","04/May/23 22:05;dlp;I'm using the reproduction scenario I put up on GitHub; repository linked in the description: https://github.com/dylanpiergies/kafka-camel-flood-issue. The README contains a step-by-step to reproduce. The parameters used to start the Kafka broker (and ZooKeeper) are in the Docker Compose file.;;;","29/Jun/23 08:08;orpiske;Looking into it ...;;;","29/Jun/23 11:46;orpiske;Fixed with the linked PRs.

 

[~dylan.piergies] you are welcome to review the patch and try it on our environment. Thanks (and thanks for reporting the issue) !;;;","29/Jun/23 14:01;orpiske;Fixed with the linked PRs. If the issue persists, please let us know.;;;","01/Jul/23 12:55;dlp;[~orpiske] Have tested on build from {{camel-3.x}}. Flood issue has been resolved.;;;",,,,
Aws2- healthchecks not closing resources for awsClient,CAMEL-19281,13533264,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rhuanrocha,artemtraier,artemtraier,19/Apr/23 15:50,23/Jun/23 10:00,13/Jul/23 08:30,16/May/23 05:32,3.19.0,4.0-M2,,,,3.20.5,3.21.0,4.0.0,4.0-RC1,,,camel-aws,,,0,,,"As AWS2S3ConsumerHealthCheck and  Sqs2ConsumerHealthCheck working with 

SqsClient and S3Client, which extends AutoCloseble , meaning those have to be properly handled in terms of closing resources, we noticed that in our services invoking aws health checks leads to connection memory leak of *org.apache.http.impl.conn.PoolingHttpClientConnectionManager* , pls take a look",,artemtraier,davsclaus,rhuanrocha,,,,,,,,,,,,,,,,,CAMEL-19314,,CAMEL-19491,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon May 15 21:46:16 UTC 2023,,,,,,,,,,,"0|z1he9c:",9223372036854775807,,,,,,,,,,,,,,,,,,,"19/Apr/23 15:59;rhuanrocha;Hi [~artemtraier], thank you for reporting this issue. I will solve the issue.;;;","19/Apr/23 19:27;davsclaus;Thanks for reporting;;;","15/May/23 21:46;rhuanrocha;[~artemtraier], I'm not sure the health checker is generating the issue you have described. Could you attach a reproducer? Could you tell us the components used in your application?;;;",,,,,,,,,,,,,,,,,,
camel-jbang - trace with --latest should show last completed if no current inflight,CAMEL-19271,13532796,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Apr/23 15:18,17/Apr/23 08:50,13/Jul/23 08:30,17/Apr/23 08:50,,,,,,4.0.0,4.0-M3,,,,,camel-jbang,,,0,,,Check if it works as expected as it appears that --latest waits for new incoming message instead of taking last complete,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-16 15:18:55.0,,,,,,,,,,,"0|z1hbe0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jbang - Export to Quarkus with custom java processor may export to wrong folder,CAMEL-19267,13532541,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/23 16:48,16/Apr/23 11:19,13/Jul/23 08:30,16/Apr/23 11:19,3.20.3,,,,,3.20.4,,,,,,camel-jbang,,,0,,,"Just a placeholder that to look into if this is a problem, where a custom java processor ends up in src/main/resources/camel instead of src/main/java",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Apr 16 11:19:22 UTC 2023,,,,,,,,,,,"0|z1h9ts:",9223372036854775807,,,,,,,,,,,,,,,,,,,"16/Apr/23 08:56;davsclaus;Cannot reproduce this on v4 and 3.21 branch but it fails with 3.20.3;;;","16/Apr/23 11:19;davsclaus;Okay we had already fixed this since the 3.20.3 release;;;",,,,,,,,,,,,,,,,,,,
oracle-database-source.kamelet doesn't create the correct JDBC connection String ,CAMEL-19263,13532352,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,msharma,msharma,12/Apr/23 13:52,12/Apr/23 14:16,13/Jul/23 08:30,12/Apr/23 14:16,3.20.3,,,,,,,,,,,camel-kamelet,,,0,,,"Current value is 
{code:java}
value: 'jdbc:oracle:thin://{{serverName}}:{{serverPort}}/{{databaseName}}' {code}

Expected value is

{code:java}
value: 'jdbc:oracle:thin:@{{serverName}}:{{serverPort}}/{{databaseName}}'
{code}

 ",,davsclaus,msharma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Apr 12 14:16:20 UTC 2023,,,,,,,,,,,"0|z1h8ns:",9223372036854775807,,,,,,,,,,,,,,,,,,,"12/Apr/23 14:00;davsclaus;If its related to one of the kamelets, then you should create a ticket in that github issue tracker
https://github.com/apache/camel-kamelets

This JIRA is for the general Apache Camel project (core);;;","12/Apr/23 14:13;msharma;Thanks for the clarification. Closing this ticket.;;;","12/Apr/23 14:16;msharma;Refer to https://github.com/apache/camel-kamelets/issues/1443;;;",,,,,,,,,,,,,,,,,,
camel-maven-plugin - Use configured main-class instead of KameletMain,CAMEL-19259,13532174,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/23 11:27,11/Apr/23 11:30,13/Jul/23 08:30,11/Apr/23 11:30,3.20.3,,,,,3.20.4,3.21.0,4.0.0,4.0-M3,,,tooling,,,0,,,"[INFO] --- camel-maven-plugin:3.20.3:run (default-cli) @ acme ---
[INFO] You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true
[INFO] Kamelets YAML files detected in directory /Users/davsclaus/workspace/deleteme/java-jar/code/src/main/resources/kamelets
[INFO] Using org.apache.camel.main.KameletMain to initiate a CamelContext
[INFO] Starting Camel ...
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.main.KameletMain
[ERROR]
java.lang.ClassNotFoundException: org.apache.camel.main.KameletMain",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-11 11:27:59.0,,,,,,,,,,,"0|z1h7ko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jslt: Exception when using camel-jslt in Tomcat Servlet,CAMEL-19257,13531823,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jsz,jsz,07/Apr/23 06:19,09/Apr/23 07:53,13/Jul/23 08:30,09/Apr/23 07:53,3.20.3,4.0-M2,,,,3.20.4,3.21.0,4.0.0,4.0-M3,,,,,,0,,,"When a JSLT transformation is used in a route which is called from a Tomcat Servlet in Spring Boot, an exception is thrown after the Exchange is completely processed and the response is being returned to the client:

{{java.lang.IllegalStateException: getWriter() has already been called for this response}}
{{at org.apache.catalina.connector.Response.getOutputStream(Response.java:552) ~[tomcat-embed-core-9.0.70.jar:9.0.70]}}
{{at org.apache.catalina.connector.ResponseFacade.getOutputStream(ResponseFacade.java:210) ~[tomcat-embed-core-9.0.70.jar:9.0.70]}}
{{at org.apache.camel.http.common.DefaultHttpBinding.doWriteDirectResponse(DefaultHttpBinding.java:537) ~[camel-http-common-3.20.3.jar:3.20.3]}}
{{at org.apache.camel.http.common.DefaultHttpBinding.doWriteResponse(DefaultHttpBinding.java:439) ~[camel-http-common-3.20.3.jar:3.20.3]}}
{{at org.apache.camel.http.common.DefaultHttpBinding.writeResponse(DefaultHttpBinding.java:362) ~[camel-http-common-3.20.3.jar:3.20.3]}}
{{at org.apache.camel.http.common.CamelServlet.afterProcess(CamelServlet.java:349) ~[camel-http-common-3.20.3.jar:3.20.3]}}

This happens because the Response object is held in a header and getWriter() gets prematurely called when the headers are serialized in JsltEndpoint.extractVariables().",,jsz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Apr 07 07:46:33 UTC 2023,,,,,,,,,,,"0|z1h5eo:",9223372036854775807,,,,,,,,,,,,,,,,,,,"07/Apr/23 07:46;jsz;I'll post a PR to fix it.;;;",,,,,,,,,,,,,,,,,,,,
camel-jdbc: leaks the statement in doCreateAndExecuteSqlStatement,CAMEL-19256,13531808,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,07/Apr/23 02:18,14/Apr/23 12:13,13/Jul/23 08:30,14/Apr/23 12:13,,,,,,3.18.7,3.20.4,3.21.0,4.0.0,4.0-M3,,camel-jdbc,,,0,,,It comes cross [https://github.com/apache/camel-quarkus/issues/4752] and I think it should close the statment in the finnal block if shouldCloseResources is true.,,davsclaus,zhfeng,,,,,,,,,,,,,,,,,,,CAMEL-17032,CAMEL-17599,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Apr 13 12:45:15 UTC 2023,,,,,,,,,,,"0|z1h5bc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"11/Apr/23 12:57;davsclaus;I think it would be good to backport to camel-3.x branch also, and maybe even 3.18.x / 3.20.x branches;;;","13/Apr/23 12:45;zhfeng;Yeah, I'm working on backport.;;;",,,,,,,,,,,,,,,,,,,
Jbang: jbang is not copying custom kamelets  to /kametets,CAMEL-19255,13531770,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,msharma,msharma,06/Apr/23 18:19,09/Apr/23 05:49,13/Jul/23 08:30,09/Apr/23 05:49,3.20.3,,,,,3.20.4,3.21.0,4.0.0,4.0-M3,,,camel-jbang,,,0,,,"[Kamelet Component|https://camel.apache.org/components/3.20.x/kamelet-component.html] is expecting the default kamelet location to be classpath:/kamelets.

 
{code:java}
`jbang --debug -Dcamel.jbang.version=3.20.3 camel@apache/camel export --local-kamelet-dir=../kamelets` {code}
Jbang export copies kamelet files to src\main\resources\camel folder, so when running 'mvn quarkus:dev` gives an error that kamelet is not found.

 
{code:java}
java.io.FileNotFoundException: Resource not found: classpath:/kamelets/example.kamelet.yaml
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoaderSupport.doLoadRouteBuilder(YamlRoutesBuilderLoaderSupport.java:76)
        at org.apache.camel.dsl.support.RouteBuilderLoaderSupport.loadRoutesBuilder(RouteBuilderLoaderSupport.java:102)
        at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:125)
        at org.apache.camel.spi.RoutesLoader.findRoutesBuilders(RoutesLoader.java:120)
        at org.apache.camel.spi.RoutesLoader.loadRoutes(RoutesLoader.java:75)
        at org.apache.camel.support.RouteTemplateHelper.loadRouteTemplateFromLocation(RouteTemplateHelper.java:106)
        at org.apache.camel.component.kamelet.KameletComponent$LifecycleHandler.createRouteForEndpoint(KameletComponent.java:403)
        at org.apache.camel.component.kamelet.KameletComponent$LifecycleHandler.onContextInitialized(KameletComponent.java:430)
        at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:3017)
        at org.apache.camel.quarkus.core.FastCamelContext.doInit(FastCamelContext.java:174)
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
        at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2679)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
        at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2698)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
        at org.apache.camel.quarkus.main.CamelMain.doStart(CamelMain.java:94)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:119) {code}
 ",,msharma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-06 18:19:29.0,,,,,,,,,,,"0|z1h52w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classes generated by camel-restdsl-openapi-plugin are not added to jar ,CAMEL-19250,13531477,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ldemasi,ldemasi,ldemasi,04/Apr/23 15:56,05/Apr/23 09:48,13/Jul/23 08:30,05/Apr/23 09:48,3.20.3,4.0.0,,,,3.20.4,3.21.0,4.0.0,4.0-M3,,,tooling,,,0,,,"{{swagger-codegen-maven-plugin}} executed by {{camel-restdsl-openapi-plugin}} during the model generation,  modifies the source list directory so the maven compiler plugin ignores the other classes generated by {{{}camel-restdsl-openapi-plugin{}}}.",,ldemasi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-04 15:56:29.0,,,,,,,,,,,"0|z1h3a0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: Creating blob data is broken,CAMEL-19249,13531459,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jeremyross,jeremyross,jeremyross,04/Apr/23 14:49,04/Apr/23 18:32,13/Jul/23 08:30,04/Apr/23 17:39,3.18.6,3.20.3,4.0-M2,,,3.18.7,3.20.4,3.21.0,4.0.0,4.0-M3,,camel-salesforce,,,0,,,"This prevents creating Documents, Files (ContentVersion), etc.

Typical error message:

Cannot locate field VersionData on class org.apache.camel.component.salesforce.dto.generated.ContentVersion (through reference chain: org.apache.camel.component.salesforce.dto.generated.ContentVersion[""VersionData""]",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Apr 04 17:39:07 UTC 2023,,,,,,,,,,,"0|z1h360:",9223372036854775807,,,,,,,,,,,,,,,,,,,"04/Apr/23 17:39;jeremyross;Also backported to 3.18.7.;;;",,,,,,,,,,,,,,,,,,,,
camel-zeebe - Set Default Host and Port for Zeebe connection,CAMEL-19247,13531430,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,karstenreuter,karstenreuter,04/Apr/23 11:01,05/Apr/23 04:31,13/Jul/23 08:30,04/Apr/23 16:26,4.0-M2,,,,,3.21.0,4.0.0,4.0-M3,,,,,,,0,,,The defaults for host and port of the zeebe service are not set.,,davsclaus,karstenreuter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Apr 04 12:57:13 UTC 2023,,,,,,,,,,,"0|z1h2zk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"04/Apr/23 11:29;davsclaus;Are you working on a PR;;;","04/Apr/23 11:31;karstenreuter;Yes I am, should be ready the next few days.;;;","04/Apr/23 12:04;karstenreuter;[~davsclaus] should I include generated files in the PR or leave them out. E.g. ""

catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/schemas/camel-spring.xsd""?;;;","04/Apr/23 12:57;davsclaus;No that is not needed. The CI servers will generate PRs for such files;;;",,,,,,,,,,,,,,,,,
camel-jbang - camel doc may not work on main,CAMEL-19242,13531287,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,davsclaus,davsclaus,03/Apr/23 13:51,05/Apr/23 07:48,13/Jul/23 08:30,05/Apr/23 07:48,,,,,,3.21.0,4.0.0,4.0-M3,,,,camel-jbang,,,0,,,"~/workspace ❯ camel doc jms
java.lang.ClassNotFoundException: org.apache.camel.kamelets.catalog.KameletsCatalog
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:587)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.apache.camel.main.download.DependencyDownloaderClassLoader.loadClass(DependencyDownloaderClassLoader.java:45)
	at org.apache.camel.dsl.jbang.core.commands.catalog.KameletCatalogHelper.loadKamelets(KameletCatalogHelper.java:151)
	at org.apache.camel.dsl.jbang.core.commands.catalog.KameletCatalogHelper.loadKameletModel(KameletCatalogHelper.java:168)
	at org.apache.camel.dsl.jbang.core.commands.catalog.CatalogDoc.doCall(CatalogDoc.java:130)",,davsclaus,,,,,,,,,,,,,,,,,,,,,CAMEL-18983,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-04-03 13:51:45.0,,,,,,,,,,,"0|z1h240:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-azure - BlobConsumer does not use prefix,CAMEL-19224,13530799,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ipaulbogdan,ipaulbogdan,30/Mar/23 13:19,03/Apr/23 13:44,13/Jul/23 08:30,03/Apr/23 13:44,3.20.3,,,,,3.20.4,3.21.0,4.0.0,4.0-M3,,,camel-azure,,,0,,,"When using prefix on azure endpoints the correct returned results should be all blobs starting with provided prefix, instead all blobs are retrieved. The issue is described in [Zulip chat thread|https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/CamelAzureBlob.20endpoint.20prefix ]",,davsclaus,ipaulbogdan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Apr 03 13:44:07 UTC 2023,,,,,,,,,,,"0|z1gz3s:",9223372036854775807,,,,,,,,,,,,,,,,,,,"31/Mar/23 07:33;davsclaus;Are you working on a PR;;;","31/Mar/23 09:12;ipaulbogdan;Yes, on it.;;;","03/Apr/23 08:32;ipaulbogdan;https://github.com/apache/camel/pull/9773;;;","03/Apr/23 13:44;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,
camel-groovy - Avoid setting variables to initialize the binding,CAMEL-19220,13530630,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,nfilotto,nfilotto,nfilotto,29/Mar/23 14:00,29/Mar/23 16:15,13/Jul/23 08:30,29/Mar/23 16:15,,,,,,4.0.0,4.0-M3,,,,,camel-groovy,,,0,,,"The changes made for CAMEL-19212 cause runtime errors in native mode https://github.com/apache/camel-quarkus/issues/4712 of the following type: 


{noformat}
2023-03-29T09:15:06.5898355Z Caused by: org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'null' with class 'null' to class 'int'. Try 'java.lang.Integer' instead
2023-03-29T09:15:06.5901668Z 	at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.castToNumber(DefaultTypeTransformation.java:186)
2023-03-29T09:15:06.5902449Z 	at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.intUnbox(DefaultTypeTransformation.java:92)
2023-03-29T09:15:06.5903768Z 	at org.apache.camel.quarkus.component.groovy.generated.Expression668axhkmpOfBwe2iixBEtT194721N7sqMJrOlgVZAJVxs61.run(org.apache.camel.quarkus.component.groovy.generated.Expression668axhkmpOfBwe2iixBEtT194721N7sqMJrOlgVZAJVxs61:5)
2023-03-29T09:15:06.5907252Z 	at org.apache.camel.language.groovy.GroovyExpression.evaluate(GroovyExpression.java:53)
2023-03-29T09:15:06.5907829Z 	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:36)
2023-03-29T09:15:06.5913250Z 	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:89)
2023-03-29T09:15:06.5913967Z 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:71)
2023-03-29T09:15:06.5914600Z 	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:474)
2023-03-29T09:15:06.5916861Z 	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
2023-03-29T09:15:06.5917520Z 	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
2023-03-29T09:15:06.5922296Z 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:164)
2023-03-29T09:15:06.5922898Z 	at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:378)
2023-03-29T09:15:06.5926160Z 	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:96)
2023-03-29T09:15:06.5927374Z 	at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:213)
2023-03-29T09:15:06.5932016Z 	at org.apache.camel.impl.engine.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:110)
2023-03-29T09:15:06.5934733Z 	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:81)
2023-03-29T09:15:06.5940964Z 	at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:107)
2023-03-29T09:15:06.5944226Z 	at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:164)
2023-03-29T09:15:06.5944848Z 	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176)
2023-03-29T09:15:06.5950089Z 	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172)
2023-03-29T09:15:06.5950820Z 	at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:413)
{noformat}
",,nfilotto,,,,,,,,,,,,,,,,,,,,CAMEL-19212,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 29 14:07:21 UTC 2023,,,,,,,,,,,"0|z1gy2o:",9223372036854775807,,,,,,,,,,,,,,,,,,,"29/Mar/23 14:07;nfilotto;Fix for https://github.com/apache/camel/pull/9692;;;",,,,,,,,,,,,,,,,,,,,
Unable to start PLC4X route in camel-plc4x,CAMEL-19199,13530096,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mdanish98,mdanish98,26/Mar/23 09:13,06/Jun/23 10:20,13/Jul/23 08:30,27/Mar/23 08:49,3.20.2,,,,,3.20.4,3.21.0,4.0.0,4.0-M3,,,,,,0,,,"I am using [ModbusPal|https://plc4x.apache.org/users/getting-started/virtual-modbus.html] to create the Virtual modbus.

I am using the endpoint URI as:

 
{code:java}
plc4x:modbus-tcp://localhost:502?unitId=1&dataType=holding-register&addresses=1{code}
Following is the screenshot of Modbus holding registers:

!https://user-images.githubusercontent.com/62088117/227714761-e6486993-f44a-4482-a7be-e76e5a94b49c.png|width=354,height=350!

But when starting camel context it throws NullPointerException.

 
{code:java}
java.lang.NullPointerException
    at org.apache.camel.component.plc4x.Plc4XConsumer.startUnTriggered(Plc4XConsumer.java:89)
    at org.apache.camel.component.plc4x.Plc4XConsumer.doStart(Plc4XConsumer.java:81)
    at org.apache.camel.support.service.BaseService.start(BaseService.java:119) {code}
I debugged it and found the problem is with this line in PLC4XConsumer line 89:

 
{code:java}
for (Map.Entry<String, Object> tag : tags.entrySet()) {{code}
 

Here *tags* are null, so it might be that I am not configuring the endpoint correctly.

So, I tried by configuring the endpoint by creating an instance of Plc4XEndpoint and then configuring the tags there, it works like:
{code:java}
Map<String, Object> map = new HashMap<>();
            map.put(""value-1"", ""holding-register:1"");
            
            Plc4XEndpoint plc4xEndpoint = new Plc4XEndpoint(""plc4x:modbus-tcp://localhost:502"",
                    getContext().getComponent(""plc4x""));
            plc4xEndpoint.setTags(map);
            from(plc4xEndpoint).log(""value : ${body}""); {code}
But why it is not working if I configure the endpoint as just String?

Note:

I tried with below endpoint and it is also not working:
{code:java}
plc4x:modbus-tcp://localhost:502?tags={unitId=1&dataType=holding-register&addresses=1} {code}
 ","Camel core version : 3.20.2 Camel-PLC4X version : 3.20.2

IDE - Eclipse, OS - Windows 10, Java 11",davsclaus,mdanish98,,,,,,,,,,,,,,,,,,,,CAMEL-19205,,,,"27/Mar/23 09:14;mdanish98;image-2023-03-27-11-14-56-624.png;https://issues.apache.org/jira/secure/attachment/13056827/image-2023-03-27-11-14-56-624.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Mar 28 12:59:18 UTC 2023,,,,,,,,,,,"0|z1gus8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"27/Mar/23 08:42;davsclaus;Yes for tags you need to refer to a Map bean. However ideally the option should have been multivalued, so you could do

tag=foo=123&tag=bar&456&tag=aaa=222
;;;","27/Mar/23 09:13;mdanish98;Just for clarification, so this would work in the next release i.e. 3.20.4?
Or this should work in 3.20.2 as well?

I tried this as below but still not working:
{code:java}
from(""plc4x:modbus-tcp://localhost:502?tag=value-1=holding-register:1""){code}
The tags attribute is still null.
!image-2023-03-27-11-14-56-624.png!

 

*There is a requirement in my project that the endpoint should be String i.e. all the configurations should be in URI only and not as of type Endpoint.*;;;","28/Mar/23 12:59;davsclaus;Yes in 3.21 release you can specify tags more easier, see  CAMEL-19205 ;;;",,,,,,,,,,,,,,,,,,
Dynamic Router EIP component does not evaluate filters by order of priority attribute,CAMEL-19198,13530068,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,Steve973,Steve973,Steve973,25/Mar/23 15:22,26/Mar/23 12:22,13/Jul/23 08:30,26/Mar/23 06:11,3.18.3,3.20.0,,,,3.18.6,3.20.4,3.21.0,4.0.0,4.0-M3,,,,,0,dynamic-router-eip,,"After switching the list of filters from a list to a map, the component no longer evaluates filter by order of their priority attribute.  Filter evaluation needs to ensure sorting by priority.",,davsclaus,Steve973,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Mar 26 12:22:07 UTC 2023,,,,,,,,,,,"0|z1gum0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"25/Mar/23 15:44;Steve973;[~davsclaus] which branches should also get a pull request for this?  My update to change the list of filters into a map was in 3.20.0 and 3.18.3.  My current pull request is for v4.;;;","25/Mar/23 16:44;davsclaus;camel-3.x branch. Then we can cherry-pick to older branches.;;;","25/Mar/23 16:50;Steve973;[~davsclaus] Thank you!  I just submitted a pull request for that, too.

I have been using this component at work, and we just found this bug this week.  By the way, thank you (and everyone working on it) for all of the work you are all doing for v4.;;;","26/Mar/23 11:21;Steve973;Hi, [~davsclaus].  Do you need me to do the cherry-picking and submit pull requests?  Or is that something that you have done?  I haven't done a back-port here on Camel before.;;;","26/Mar/23 12:22;davsclaus;I have done that, its easy when the cherry pick can be applied without problems. So all is good.;;;",,,,,,,,,,,,,,,,
camel-vertx-websocket: sendToAll option may not discover connected host peers correctly,CAMEL-19190,13529964,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,24/Mar/23 12:01,27/Mar/23 06:39,13/Jul/23 08:30,27/Mar/23 06:39,,,,,,3.21.0,4.0.0,4.0-M3,,,,camel-vertx-websocket,,,0,,,"While adding some more test coverage for vertx-websocket in Camel Quarkus, I noticed the logic to find connected peers on the local server when using the sendToAll option or the CamelVertxWebsocket.connectionKey header is a bit flawed. It can fail to find the correct peer, or incorrectly find matches for the wrong peers.

There's some more background in this Camel Quarkus issue:

https://github.com/apache/camel-quarkus/issues/4628
",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 24 15:53:50 UTC 2023,,,,,,,,,,,"0|z1gtyw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"24/Mar/23 15:53;jamesnetherton;Fixed this for 4.x. Before resolving the ticket I'll check if it's feasible to backport the changes to other branches.;;;",,,,,,,,,,,,,,,,,,,,
camel-springboot - mapstruct component is not autoconfigured automatically,CAMEL-19181,13529475,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ldemasi,Federico Mariani,Federico Mariani,21/Mar/23 16:09,23/Mar/23 13:45,13/Jul/23 08:30,23/Mar/23 13:45,3.20.2,,,,,3.20.3,3.21.0,4.0.0,4.0-M3,,,camel-spring-boot-starters,,,0,,,"In a Camel Spring Boot application MapStruct component is not autoconfigured automatically, as you can see from the reproducer, even if application.properties contains _camel.component.mapstruct.mapper-package-name_ the component is not registered into the camel context, therefore the converter is not found and the following exception is raised:
_NoTypeConversionAvailableException: No type converter available to convert from type: org.jboss.fuse.tnb.universal.component.mapstruct.Car to the required type: org.jboss.fuse.tnb.universal.component.mapstruct.CarDto_

By uncommenting lines MyRouteBuilder:18 and MyRouteBuilder:19, the reproducer works, but I think that Camel Spring Boot should configure the component automatically.
",,davsclaus,Federico Mariani,ldemasi,,,,,,,,,,,,,,,,,,,,,,,"21/Mar/23 16:09;Federico Mariani;mapstruct-test.zip;https://issues.apache.org/jira/secure/attachment/13056550/mapstruct-test.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Mar 23 10:39:06 UTC 2023,,,,,,,,,,,"0|z1gqy8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"23/Mar/23 09:35;ldemasi;As [~Federico Mariani] wrote in the description, the problem is that if the mapstruct component is not registered in the context, via spring bean declaration or creating a mapstruct endpoint in a route, the starter does not find it and so it can't configure it, despite there is a property.

As a workaround, we can create, register and configure the component in case a mapstruct component is not present and a mapstruct property is configured. The problem is that the starter is generated and overwrite all changes on every build, we have to modify the starter generator mojo to exclude some starter.

IMHO mapstruct should not be a regular component, it should be a transformer, WDYT [~davsclaus], [~acosentino] ?;;;","23/Mar/23 10:23;davsclaus;You can try to turn off the auto generator in the pom.xml and adjust the generated code;;;","23/Mar/23 10:38;davsclaus;It is not so easy but I found a workaround and send a PR (main branch for Camel v4)
https://github.com/apache/camel-spring-boot/pull/797

This works with your example. And it can also be turned off
camel.component.mapstruct.enabled = false


;;;","23/Mar/23 10:39;davsclaus;This avoids any hacking in the mojo generator.;;;",,,,,,,,,,,,,,,,,
Jira component: duplicate messages with the new issues consumer,CAMEL-19174,13529318,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,christophd,christophd,christophd,20/Mar/23 21:24,24/Mar/23 05:23,13/Jul/23 08:30,22/Mar/23 05:27,3.20.2,4.0-M3,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M3,,camel-jira,,,0,,,"When more than one JIRA issue fulfills the JQL and is available on a poll, it will result in  duplicates handled multiple times in the next poll. It depends on how many issues were created within the poll delay. Issues will be handled N times (N is the number of issues that were created at the same time).

How to reproduce:
- Make sure to return multiple issues for a JQL query
- Wait multiple polls and review the resulting issues being handled by the Camel route",Also seen in Camel K environment with Jira source Kamelet,christophd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-03-20 21:24:57.0,,,,,,,,,,,"0|z1gpzc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - Prevent duplicating slashes in generated URI,CAMEL-19171,13529226,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,nfilotto,nfilotto,nfilotto,20/Mar/23 09:28,20/Mar/23 11:03,13/Jul/23 08:30,20/Mar/23 11:03,,,,,,4.0-M3,,,,,,camel-http,,,0,,,"After upgrading to HttpComponents v5, [Jenkins raised 2 regressions|https://ci-builds.apache.org/job/Camel/job/Camel%20JDK17/job/main/688/testReport/] which are {{VertxPlatformHttpProxyTest.testProxy}} and {{PlatformHttpProxyTest.testProxy}}. 

After a deeper investigation, it seems to be due to the fact that when the endpoint URI has a trailing slash and the path starts with a slash, the generated URI contains 2 slashes instead of only one which was accepted by HttpComponents v4 but it is rejected by HttpComponents v5.",,nfilotto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Mar 20 09:43:52 UTC 2023,,,,,,,,,,,"0|z1gpew:",9223372036854775807,,,,,,,,,,,,,,,,,,,"20/Mar/23 09:43;nfilotto;The corresponding PR https://github.com/apache/camel/pull/9580;;;",,,,,,,,,,,,,,,,,,,,
camel-olingo2: queryParams option of read method does not work,CAMEL-19169,13529078,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,18/Mar/23 13:15,20/Mar/23 12:20,13/Jul/23 08:30,20/Mar/23 12:20,3.18.5,3.20.2,4.0-M2,,,3.14.8,3.18.6,3.x,4.0-M3,,,,,,0,,,There is a similar problem with olingo2. The origin report for olingo4 is CAMEL-19150,,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-03-18 13:15:06.0,,,,,,,,,,,"0|z1goi8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ehcache - llegalStateException: Close not supported from UNINITIALIZED. When context.addRouteDefinition() called multiple times in route with Ehcache consumer,CAMEL-19162,13528932,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lukymiv,lukymiv,17/Mar/23 09:35,24/Mar/23 21:49,13/Jul/23 08:30,24/Mar/23 21:49,3.14.6,3.20.2,,,,3.14.8,3.18.6,3.20.4,3.21.0,4.0.0,4.0-M3,camel-ehcache,,,0,,,"In production, when starting the route, we also call _context.addRouteDefinition()_  so that context changes are picked up. Exception occurs on second stop/start of route with call  _context.addRouteDefinition()_ with  cache consumer definition added

Project with reproduction [^cache-camel-error.zip]

Test !image-2023-03-17-12-32-34-499.png!

Config 

!image-2023-03-17-12-33-14-402.png!

Exception StackTrace

 

 
{code:java}
org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: Close not supported from UNINITIALIZED
    at org.apache.camel.RuntimeCamelException.wrapRuntimeCamelException(RuntimeCamelException.java:51)
    at org.apache.camel.support.ChildServiceSupport.shutdown(ChildServiceSupport.java:120)
    at org.apache.camel.impl.engine.AbstractCamelContext.shutdownRouteService(AbstractCamelContext.java:3717)
    at org.apache.camel.impl.engine.AbstractCamelContext.removeRoute(AbstractCamelContext.java:1388)
    at org.apache.camel.impl.DefaultCamelContext.removeRoute(DefaultCamelContext.java:957)
    at org.apache.camel.impl.engine.AbstractCamelContext.removeRoute(AbstractCamelContext.java:1369)
    at org.apache.camel.impl.DefaultModel.removeRouteDefinition(DefaultModel.java:208)
    at org.apache.camel.impl.DefaultModel.removeRouteDefinitions(DefaultModel.java:197)
    at org.apache.camel.impl.DefaultModel.addRouteDefinitions(DefaultModel.java:175)
    at org.apache.camel.impl.DefaultModel.addRouteDefinition(DefaultModel.java:191)
    at org.apache.camel.impl.DefaultCamelContext.addRouteDefinition(DefaultCamelContext.java:350)
    at ru.factorts.cache.SpringFirstTest.testCache(SpringFirstTest.java:22)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
    at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
    at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
    at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    at java.util.ArrayList.forEach(ArrayList.java:1249)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    at java.util.ArrayList.forEach(ArrayList.java:1249)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
    at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
    at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
    at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
    at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
    at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
    at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
    at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
    at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: java.lang.IllegalStateException: Close not supported from UNINITIALIZED
    at org.ehcache.core.InternalStatus.close(InternalStatus.java:74)
    at org.ehcache.core.StatusTransitioner.close(StatusTransitioner.java:86)
    at org.ehcache.core.EhcacheBase.close(EhcacheBase.java:577)
    at java.util.concurrent.ConcurrentHashMap$ValuesView.forEach(ConcurrentHashMap.java:4707)
    at org.apache.camel.component.ehcache.EhcacheManager.stop(EhcacheManager.java:63)
    at org.apache.camel.component.ehcache.EhcacheEndpoint.doStop(EhcacheEndpoint.java:84)
    at org.apache.camel.support.service.BaseService.stop(BaseService.java:160)
    at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:162)
    at org.apache.camel.support.service.ServiceHelper.stopAndShutdownServices(ServiceHelper.java:257)
    at org.apache.camel.support.service.ServiceHelper.stopAndShutdownServices(ServiceHelper.java:215)
    at org.apache.camel.impl.engine.RouteService.doShutdown(RouteService.java:302)
    at org.apache.camel.support.ChildServiceSupport.shutdown(ChildServiceSupport.java:113)
    ... 78 more
 
{code}
 ",,davsclaus,lukymiv,,,,,,,,,,,,,,,,,,,,,,,,"17/Mar/23 09:31;lukymiv;cache-camel-error.zip;https://issues.apache.org/jira/secure/attachment/13056449/cache-camel-error.zip","17/Mar/23 09:32;lukymiv;image-2023-03-17-12-32-34-499.png;https://issues.apache.org/jira/secure/attachment/13056448/image-2023-03-17-12-32-34-499.png","17/Mar/23 09:33;lukymiv;image-2023-03-17-12-33-14-402.png;https://issues.apache.org/jira/secure/attachment/13056447/image-2023-03-17-12-33-14-402.png",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 24 21:49:18 UTC 2023,,,,,,,,,,,"0|z1gnls:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Mar/23 10:26;davsclaus;Not all components are able to shutdown and start again from the same JVM. ;;;","24/Mar/23 21:49;davsclaus;Thanks for the sample project - the test now passes;;;",,,,,,,,,,,,,,,,,,,
camel-core: ThrowExceptionProcessor may silently ignore exceptions in constructing the exception object,CAMEL-19158,13528769,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,16/Mar/23 09:57,16/Mar/23 13:26,13/Jul/23 08:30,16/Mar/23 13:26,3.18.5,3.20.2,4.0-M2,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M3,,came-core,,,0,,,"Back in Camel 3.12, a change was made to ThrowExceptionProcessor: 

https://github.com/apache/camel/blob/fb0528706d7e8a7d0d6ba22dfb649cb31cf06bc8/core/camel-core-processor/src/main/java/org/apache/camel/processor/ThrowExceptionProcessor.java#L77-L82

If you happen to drop into the else clause, then no exception is set on the exchange and it's confusing to users as to why no exception was thrown in their route. This is potentially a common thing on Camel Quarkus native mode if the specific exception type was not registered for reflection.",,jamesnetherton,llowinge,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-03-16 09:57:48.0,,,,,,,,,,,"0|z1gmlk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML route configurations ignored without both XML IO and JAXB XML loaded,CAMEL-19156,13528643,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jsz,jsz,15/Mar/23 14:15,24/Mar/23 09:38,13/Jul/23 08:30,24/Mar/23 09:38,3.20.0,3.20.2,4.0-M2,,,3.21.0,4.0.0,4.0-M3,,,,camel-spring-boot,,,0,,,"XML route configurations are ignored unless both camel-xml-io-dsl-starter and camel-xml-jaxb-dsl-starter are loaded; XML routes are started without configurations.

To reproduce:
 * check out camel-spring-boot-examples, either main branch or camel-spring-boot-examples-3.20.0 tag
 * navigate to routes-configuration subdir
 * remove dependency on either DSL from pom.xml
 * run mvn spring-boot:run

Result:

{{2023-03-15 15:10:37.665 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : Routes startup (started:3)}}
{{2023-03-15 15:10:37.665 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : Started route1 (timer://java) (source: java:29)}}
{{2023-03-15 15:10:37.665 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : Started route2 (timer://xml)}}
{{2023-03-15 15:10:37.665 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : Started route3 (timer://yaml) (source: my-yaml-route.yaml:22)}}
{{2023-03-15 15:10:37.665 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : Routes configuration:}}
{{2023-03-15 15:10:37.665 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : route1 (javaError)}}
{{2023-03-15 15:10:37.666 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : route3 (yamlError)}}
{{2023-03-15 15:10:37.666 INFO 24848 — [ main] o.a.c.impl.engine.AbstractCamelContext : Apache Camel 3.20.0 (MyCamel) started in 1s43ms (build:80ms init:329ms start:634ms)}}



XML route is loaded and started, but without the configurations. No error or warning is logged about missing configuration.",,jsz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-03-15 14:15:55.0,,,,,,,,,,,"0|z1gltk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Azure Service Bus component completes messages instead of abandoning on error,CAMEL-19155,13528637,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,dylan.piergies,dylan.piergies,15/Mar/23 13:35,23/Mar/23 08:55,13/Jul/23 08:30,22/Mar/23 11:08,3.20.2,,,,,3.20.3,3.21.0,4.0.0,4.0-M3,,,camel-azure,,,0,,,"The Azure Service Bus component currently invokes the \{{ServiceBusReceiverAsyncClient#complete}} method even if an error occurs during route processing, which can result in message loss. It should invoke 
{\{ServiceBusReceiverAsyncClient#abandon}} method on error to enable Service Bus to attempt redelivery and/or dead-letter the message as per its configuration.
 
We are currently using a dead letter error channel to work around this issue, but this solution is still not ideal, since the message could still be marked as completed if the publication to the dead letter channel fails.",,davsclaus,dylan.piergies,,,,,,,,,,,,,,,,,,,,CAMEL-17803,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 22 11:08:10 UTC 2023,,,,,,,,,,,"0|z1gls8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"15/Mar/23 14:00;davsclaus;Thanks can you send a PR ;;;","15/Mar/23 15:57;dylan.piergies;If I can figure out how the error is failing to propagate back to the client. Reactive code is hard to debug.;;;","21/Mar/23 15:25;dylan.piergies;Created https://github.com/apache/camel/pull/9592.;;;","22/Mar/23 11:08;davsclaus;Thanks for reporting and providing the PRs;;;",,,,,,,,,,,,,,,,,
The 'ignoreInvalidEndpoint' option isn't relevant for a static URI for WireTap component,CAMEL-19151,13528590,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Gomoliako,Gomoliako,15/Mar/23 09:16,15/Mar/23 15:04,13/Jul/23 08:30,15/Mar/23 09:58,3.20.2,,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M3,,camel-core-processor,,,0,,,"The 'ignoreInvalidEndpoint' option for the WireTap component has no effect on the non-dynamic endpoints.

The worst thing is that there is no warning that the set option is going to be ignored.

I'm not sure about the design decision here, but from the user point of view it's confusing and not what one can expect.

 

My use case:

I defined a route configuration that by default does some processing of the intercepted messages and also sends them to a preconfigured endpoint. In my design this endpoint is optional and a route for it could be defined only if the default processing isn't enough. 

But because the endpoint URI is static and the 'ignoreInvalidEndpoint' has no effect, I get the messages stuck in-flight.",,davsclaus,Gomoliako,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,"The relevant doc describing the 'ignoreInvalidEndpoint' option says: Ignore the invalidate endpoint exception when try to create a producer with that endpoint.

It doesn't mention that this applicable only for the dynamic endpoint URIs.",false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 15 15:04:20 UTC 2023,,,,,,,,,,,"0|z1glhs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"15/Mar/23 09:32;davsclaus;Invalid endpoints is supposed for dynamic uris only.
If you have static urls then they are intended to be correct and valid.;;;","15/Mar/23 09:36;davsclaus;I am updating the documentation on that option to better say that its only for dynamic urls;;;","15/Mar/23 09:50;davsclaus;Ah its actually better to make wiretap use the ignore invalid option even for static urls, then its consistent, and there is little harm as the option is default false.;;;","15/Mar/23 13:15;Gomoliako;Yes, I find it better this way as well. I'd suggest also considering the other similar places to have the same behavior, so it's consistent throughout the whole system.

Let me know if you'd need a hand with that, I can prepare the relevant pull requests.;;;","15/Mar/23 13:59;davsclaus;Okay have you found other places where the option is not in use for static uris?;;;","15/Mar/23 15:04;Gomoliako;I checked the places where such a setting is used throughout the Camel codebase, and it seems that the WireTap was the only one with such a condition.

 

Hence, I guess fixing just it will make it all consistent.;;;",,,,,,,,,,,,,,,
camel-olingo4: queryParams option of read method does not work,CAMEL-19150,13528577,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zhfeng,jamesnetherton,jamesnetherton,15/Mar/23 07:36,22/Mar/23 10:59,13/Jul/23 08:30,18/Mar/23 13:55,3.18.5,3.20.2,4.0-M2,,,3.14.8,3.18.6,3.20.3,3.21.0,4.0-M3,,camel-olingo4,,,0,,,"When using olingo4://read and providing the queryParams option, it seems the value is not handled correctly. The toString() value of the provided map is used as query parameters to the odata service.

There's some more detail in the original Camel Quarkus issue here:

https://github.com/apache/camel-quarkus/issues/4654",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-03-15 07:36:17.0,,,,,,,,,,,"0|z1glew:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-micrometer - Too many tags created by micrometer WebMvcTagsProvider,CAMEL-19136,13528136,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Mustermann,Mustermann,12/Mar/23 19:41,19/Mar/23 11:06,13/Jul/23 08:30,18/Mar/23 11:08,3.20.0,3.20.1,3.20.2,,,3.20.3,3.21.0,4.0.0,4.0-M3,,,camel-micrometer,,,0,,,"From discussion  in zulip [https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/springboot.20micrometer.20http.20metrics.20issue/near/340948367]

in https://issues.apache.org/jira/browse/CAMEL-18754 https://github.com/apache/camel-spring-boot/commit/ac318f0418e55c56d0fb426607c67a5ceb1f6742 new configuration has been introduced {{MicrometerTagsAutoConfiguration}}.

Request {{uri}} with placeholders in the metrics tag is replaced with actual value e.g.
{code}
 @RequestMapping(value = ""/users/{id}"" method = RequestMethod.GET)
{code}
instead of 
{code}
http_server_requests_seconds_bucket{application=""my-app"",exception=""None"",method=""GET"",outcome=""SUCCESS"",status=""200"",uri=""/users/{id}"",le=""0.894784851"",} 9999.0
{code}

is reported as 

{code}
http_server_requests_seconds_bucket{application=""my-app"",exception=""None"",method=""GET"",outcome=""SUCCESS"",status=""200"",uri=""/users/1"",le=""0.894784851"",} 1.0
http_server_requests_seconds_bucket{application=""my-app"",exception=""None"",method=""GET"",outcome=""SUCCESS"",status=""200"",uri=""/users/2"",le=""0.894784851"",} 1.0
http_server_requests_seconds_bucket{application=""my-app"",exception=""None"",method=""GET"",outcome=""SUCCESS"",status=""200"",uri=""/users/3"",le=""0.894784851"",} 1.0
http_server_requests_seconds_bucket{application=""my-app"",exception=""None"",method=""GET"",outcome=""SUCCESS"",status=""200"",uri=""/users/999999"",le=""0.894784851"",} 1.0
{code}
and of course will end up a lot of tags which is bad for prometheus.

and spring reports warning
{code}
logger_name     org.springframework.boot.actuate.autoconfigure.metrics.OnlyOnceLoggingDenyMeterFilter
message     Reached the maximum number of URI tags for 'http.server.requests'.
How can we preserve original uri tag? We combine camel with spring boot, so rest api layer is provided by spring boot but integration layer (messaging, http client etc.. ) is done by camel, so would love to keep camel route stats but keep spring boot reported metrics
{code}

basically
{code}
@Bean
    WebMvcTagsProvider webMvcTagsProvider() {
....
return Tags.concat(
                        super.getTags(request, response, handler, exception),
                        Tags.of(Tag.of(""uri"", uri))
                );
{code}
makes out of {{/users/\{id\}}} -> {{/users/1}}
by excluding 
{code}
@SpringBootApplication(exclude = {MicrometerTagsAutoConfiguration.class}) 
{code}

we get the original behavior. But the risk is that if future versions add more beans into MicrometerTagsAutoConfiguration they will be ignored

How can we preserve original uri tag or make it configurable?
may be regex/whitelist/blacklist on which it should apply? 




 ",,davsclaus,Mustermann,,,,,,,,,,,,,,,,,,,CAMEL-18754,CAMEL-19168,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Mar 18 11:08:24 UTC 2023,,,,,,,,,,,"0|z1giow:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/Mar/23 11:08;davsclaus;Okay its turned off and you can enable it

camel.metrics.uriTagEnabled=true;;;",,,,,,,,,,,,,,,,,,,,
camel-zookeeper - Zookeeper's service registration and discovery is not working with serialized,CAMEL-19133,13528050,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ggboy,ggboy,11/Mar/23 01:28,11/Mar/23 07:12,13/Jul/23 08:30,11/Mar/23 07:12,3.20.2,,,,,3.20.3,3.21.0,4.0.0,4.0-M3,,,camel-zookeeper,,,0,,,"{{{*}my code{*}:}}

{{@Component}}
{{public class MyRouter extends RouteBuilder {}}
{{@Value(""${server.port}"")}}
{{String port;}}

{{@Override}}
{{public void configure() throws Exception {}}
{{getCamelContext().addRoutePolicyFactory(new ServiceRegistrationRoutePolicyFactory());}}
{{from(""direct:1"")}}
{{.routeProperty(ServiceDefinition.SERVICE_META_NAME, ""addHello"")}}
{{.routeProperty(ServiceDefinition.SERVICE_META_ID, ""my-id"" + port)}}
{{.routeProperty(ServiceDefinition.SERVICE_META_PORT, port)}}
{{.process(new Processor() {}}
{{@Override}}
{{public void process(Exchange exchange) throws Exception {}}
{{exchange.getMessage().setBody(exchange.getMessage().getBody() + ""hello"");}}
{{}}}
{{})}}
{{.log(""${body}"");}}
{{from(""timer://foo?fixedRate=true&period=1000"")}}
{{.serviceCall()}}
{{.name(""addHello"")}}
{{.zookeeperServiceDiscovery()}}
{{.nodes(""127.0.0.1"")}}
{{.basePath(""/config"")}}
{{.end()}}
{{.log(""${body}"");}}
{{}}}
{{}}}

{{issue:}}

{{The service registration function of zookeeper will carry type information during serialization}}
{{!image-2023-03-11-09-09-06-741.png! }}
{{and an error will be reported due to different MetaData during deserialization}}
{{!image-2023-03-11-09-11-24-022.png! }}
{{solution:}}
{{The internal class MetaData in the ZooKeeperServiceDiscovery and ZooKeeperServiceRegistry needs to be extracted}}
{{This is my modified patch in the camel-3.20.2 revision of the camel-zookeeper project}}",jdk17+springboot2.7.9+camel3.20.2,davsclaus,ggboy,,,,,,,,,,,,,,,,,,,,,,,,"11/Mar/23 01:28;ggboy;changeMetaData.patch;https://issues.apache.org/jira/secure/attachment/13056243/changeMetaData.patch","11/Mar/23 01:09;ggboy;image-2023-03-11-09-09-06-741.png;https://issues.apache.org/jira/secure/attachment/13056245/image-2023-03-11-09-09-06-741.png","11/Mar/23 01:11;ggboy;image-2023-03-11-09-11-24-022.png;https://issues.apache.org/jira/secure/attachment/13056244/image-2023-03-11-09-11-24-022.png",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Mar 11 07:12:08 UTC 2023,,,,,,,,,,,"0|z1gi5s:",9223372036854775807,,,,,,,,,,,,,,,,,,,"11/Mar/23 07:12;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,
Tracer doesn't continue spans for AbstractInternalSpanDecorator,CAMEL-19124,13527476,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,marcingrzejszczak,marcingrzejszczak,07/Mar/23 15:50,27/Mar/23 10:03,13/Jul/23 08:30,27/Mar/23 10:03,3.20.2,3.x,4.0.0,,,3.21.0,4.0.0,4.0-M3,,,,camel-tracing,,,0,,,"As discussed in the [PR|https://github.com/apache/camel/pull/9389] it seems that the `Tracer`component from `camel-tracing` is not continuing spans if a `AbstractInternalSpanDecorator` is being created. So for the following route

{code:java}
from(""direct://foo"")
				.log(""hello"")
				.to(""direct://bar"")
				.to(""http://example.org"");
		from(""direct://bar"")
				.log(""hello"")
				.to(""direct://micrometer"")
				.to(""http://example.org"");
		from(""direct://micrometer"")
				.setHeader(MicrometerConstants.HEADER_METRIC_NAME, constant(""new.name""))
				.setHeader(MicrometerConstants.HEADER_METRIC_TAGS, constant(Tags.of(""dynamic-key"", ""dynamic-value"")))
				.to(""micrometer:counter:name.not.used?tags=key=value"")
				.to(""direct://baz"");
		from(""direct://baz"")
				.log(""hello"")
				.to(""bean:com.example.cameldemo.MyBean"")
				.to(""exec:wc?args=--words /usr/share/dict/words"")
				.process(exchange -> {
					// Use the Camel Exec String type converter to convert the ExecResult to String
					// In this case, the stdout is considered as output
					String wordCountOutput = exchange.getIn().getBody(String.class);
					// do something with the word count
					System.out.println(wordCountOutput);
				})
				.to(""file:///tmp/camel-outputdir?flatten=true"")
				.to(""http://example.org"");
{code}

you will get multiple traces since the `direct` components are not linked together (they are treated as a start of a new trace).

 !trace_view_without_fix.png! 

I think we agreed that for this route example, multiple routes are linked together but all in all they form a single trace. So if `org.apache.camel.tracing.Tracer.TracingEventNotifier#shouldExclude` would be changed from 

{code:java}
private boolean shouldExclude(SpanDecorator sd, Exchange exchange, Endpoint endpoint) {
            return sd instanceof AbstractInternalSpanDecorator || !sd.newSpan()
                    || isExcluded(exchange, endpoint);
        }
{code}

to

{code:java}
private boolean shouldExclude(SpanDecorator sd, Exchange exchange, Endpoint endpoint) {
            return !sd.newSpan()
                    || isExcluded(exchange, endpoint);
        }
{code}

then the span parent-child relationship gets maintained the way it should

 !trace_view_with_fix.png! 











",,davsclaus,marcingrzejszczak,,,,,,,,,,,,,,,,,,,CAMEL-19023,,,,,"07/Mar/23 15:47;marcingrzejszczak;trace_view_with_fix.png;https://issues.apache.org/jira/secure/attachment/13056114/trace_view_with_fix.png","07/Mar/23 15:47;marcingrzejszczak;trace_view_without_fix.png;https://issues.apache.org/jira/secure/attachment/13056115/trace_view_without_fix.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Mar 27 10:03:46 UTC 2023,,,,,,,,,,,"0|z1gem8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"27/Mar/23 10:03;davsclaus;Thanks for all the hard work on this;;;",,,,,,,,,,,,,,,,,,,,
Platform-http-vertx: consume with comma separated does not work,CAMEL-19113,13526991,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,03/Mar/23 13:52,07/Mar/23 12:52,13/Jul/23 08:30,07/Mar/23 12:52,3.18.5,3.20.2,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M3,,camel-platform-http-vertx,,,0,,,"When rest DSL defines following endpoint
{code:java}
rest().get(""/test"")
        .consumes(""application/json,application/xml"")
        .produces(""application/json,application/xml"") {code}

requests with `content-type` header `application/json` or `application/xml` should be accepted. (works on camel-platform-htpp)",,davsclaus,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Mar 07 09:59:35 UTC 2023,,,,,,,,,,,"0|z1gbmo:",9223372036854775807,,,,,,,,,,,,,,,,,,,"07/Mar/23 09:59;davsclaus;We need to backport this;;;",,,,,,,,,,,,,,,,,,,,
Unable to init camel file with JBang for multi dot file name suffix - eg 'foo.camel.yaml',CAMEL-19112,13526965,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,djelinek,djelinek,03/Mar/23 09:58,25/Apr/23 14:51,13/Jul/23 08:30,03/Mar/23 13:54,3.20.2,4.0-M1,,,,3.20.3,3.21.0,4.0.0,4.0-M2,,,camel-jbang,,,0,,,"{code:java}
jbang run -Dcamel.jbang.version=3.20.2 camel@apache/camel init foo.camel.yaml

> Error: Unsupported file type: camel.yaml{code}
Tried also with latest camel version -Dcamel.jbang.version=4.0.0-M1",,djelinek,,,,,,,,,,,,,,CAMEL-19296,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-03-03 09:58:27.0,,,,,,,,,,,"0|z1gbgw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Yaml DSL does not seem to work with split/xtokenize,CAMEL-19111,13526879,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chirag884,chirag884,02/Mar/23 15:27,03/Mar/23 07:28,13/Jul/23 08:30,03/Mar/23 07:28,3.20.2,,,,,3.20.3,3.21.0,4.0.0,4.0-M2,,,camel-yaml-dsl,,,0,,,"This scenario works with XML DSL

Here is XML DSL
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<!-- camel-k: language=xml --><routes xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xmlns=""http://camel.apache.org/schema/spring""
        xsi:schemaLocation=""
            http://camel.apache.org/schema/spring
            https://camel.apache.org/schema/spring/camel-spring.xsd"">    <!-- Write your routes here, for example: -->
    
    <route>
        <from uri=""file:///c://work//batchsplit//in""/>
        <split streaming=""true"">
            <xtokenize mode=""w"">//BatchMaster</xtokenize>
            <to uri=""file:///c://work//batchsplit//out?fileName=${exchangeId}.xml""/>
        </split>
    </route></routes>
 {code}
Here is Yaml version that I tried:
{code:yaml}
- route:
    id: route-a6b4
    from:
      uri: file:/work/batchsplit/in
      id: from-d1ca
      steps:
        - split:
            id: split-6d45
            expression: //Batchmaster
            xtokenize:
                id: xtokenize-460a
                mode: w
            streaming: true
            steps:
              - to:
                  uri: file:/work/batchsplit/out?fileName=${exchangeId}.xml
                  id: to-1a10
{code}

I have tried to run this thru camel-jbang.",,chirag884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Mar 02 19:27:52 UTC 2023,,,,,,,,,,,"0|z1gay0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"02/Mar/23 19:27;chirag884;Error received with YAML is:
{code:title=Exception Received|borderStyle=solid}

C:\work\batchsplit>camel run batchsplitversion1.camel.yaml
2023-03-02 14:24:07.387  INFO 8680 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 3.20.2 is starting
2023-03-02 14:24:07.653  INFO 8680 --- [           main] org.apache.camel.main.MainSupport   : Using Java 19.0.1 with PID 8680. Started by csanghavi in C:\work\batchsplit
2023-03-02 14:24:07.678  INFO 8680 --- [           main] mel.cli.connector.LocalCliConnector : Camel CLI enabled (local)
org.apache.camel.RuntimeCamelException: Error pre-parsing resource: file:batchsplitversion1.camel.yaml      
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:766)
        at org.apache.camel.impl.engine.DefaultRoutesLoader.preParseRoute(DefaultRoutesLoader.java:138)     
        at org.apache.camel.main.RoutesConfigurer.configureModeline(RoutesConfigurer.java:283)
        at org.apache.camel.main.BaseMainSupport.modelineRoutes(BaseMainSupport.java:629)
        at org.apache.camel.main.BaseMainSupport.autoconfigure(BaseMainSupport.java:485)
        at org.apache.camel.main.MainSupport.autoconfigure(MainSupport.java:74)
        at org.apache.camel.main.KameletMain.autoconfigure(KameletMain.java:466)
        at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:693)
        at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:404)
        at org.apache.camel.main.KameletMain.doInit(KameletMain.java:265)
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
        at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:732)
        at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:564)
        at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:218)
        at org.apache.camel.dsl.jbang.core.commands.Run.call(Run.java:77)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:134)
        at main.CamelJBang.main(CamelJBang.java:36)
Caused by: mapping values are not allowed here
 in file:batchsplitversion1.camel.yaml, line 10, column 24:
                  xtokenize:
                           ^

        at org.snakeyaml.engine.v2.scanner.ScannerImpl.fetchValue(ScannerImpl.java:822)
        at org.snakeyaml.engine.v2.scanner.ScannerImpl.fetchMoreTokens(ScannerImpl.java:333)
        at org.snakeyaml.engine.v2.scanner.ScannerImpl.checkToken(ScannerImpl.java:192)
        at org.snakeyaml.engine.v2.parser.ParserImpl$ParseBlockMappingKey.produce(ParserImpl.java:616)
        at org.snakeyaml.engine.v2.parser.ParserImpl.lambda$produce$0(ParserImpl.java:181)
        at java.base/java.util.Optional.ifPresent(Optional.java:178)
        at org.snakeyaml.engine.v2.parser.ParserImpl.produce(ParserImpl.java:181)
        at org.snakeyaml.engine.v2.parser.ParserImpl.peekEvent(ParserImpl.java:189)
        at org.snakeyaml.engine.v2.comments.CommentEventsCollector$1.peek(CommentEventsCollector.java:58)
        at org.snakeyaml.engine.v2.comments.CommentEventsCollector$1.peek(CommentEventsCollector.java:44)
        at org.snakeyaml.engine.v2.comments.CommentEventsCollector.collectEvents(CommentEventsCollector.java:134)
        at org.snakeyaml.engine.v2.comments.CommentEventsCollector.collectEvents(CommentEventsCollector.java:114)
        at org.snakeyaml.engine.v2.composer.Composer.composeScalarNode(Composer.java:230)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:200)
        at org.snakeyaml.engine.v2.composer.Composer.composeValueNode(Composer.java:311)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingChildren(Composer.java:302)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingNode(Composer.java:289)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:204)
        at org.snakeyaml.engine.v2.composer.Composer.composeValueNode(Composer.java:311)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingChildren(Composer.java:302)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingNode(Composer.java:289)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:204)
        at org.snakeyaml.engine.v2.composer.Composer.composeSequenceNode(Composer.java:256)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:202)
        at org.snakeyaml.engine.v2.composer.Composer.composeValueNode(Composer.java:311)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingChildren(Composer.java:302)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingNode(Composer.java:289)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:204)
        at org.snakeyaml.engine.v2.composer.Composer.composeValueNode(Composer.java:311)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingChildren(Composer.java:302)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingNode(Composer.java:289)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:204)
        at org.snakeyaml.engine.v2.composer.Composer.composeValueNode(Composer.java:311)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingChildren(Composer.java:302)
        at org.snakeyaml.engine.v2.composer.Composer.composeMappingNode(Composer.java:289)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:204)
        at org.snakeyaml.engine.v2.composer.Composer.composeSequenceNode(Composer.java:256)
        at org.snakeyaml.engine.v2.composer.Composer.composeNode(Composer.java:202)
        at org.snakeyaml.engine.v2.composer.Composer.next(Composer.java:161)
        at org.snakeyaml.engine.v2.composer.Composer.getSingleNode(Composer.java:123)
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:763)
        ... 25 more

{code}
;;;",,,,,,,,,,,,,,,,,,,,
camel-jbang - can't run in background due to No Camel integration files to run,CAMEL-19103,13526672,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,Federico Mariani,Federico Mariani,Federico Mariani,01/Mar/23 10:58,14/Mar/23 11:12,13/Jul/23 08:30,14/Mar/23 11:12,3.20.1,,,,,3.20.3,3.21.0,4.0.0,4.0-M3,,,camel-jbang,,,0,,,"Integration test like https://github.com/Croway/camel/blob/jbang-test/dsl/camel-jbang/camel-jbang-core/src/test/java/org/apache/camel/dsl/jbang/BackgroundTest.java fails when a command that uses _ProcessHandle.current().info().commandLine().orElse(null);_ is executed.

In my e2e camel-jbang test suite I'm using a docker image with camel-jbang installed, but when _ProcessHandle.current().info().commandLine().orElse(null);_ I get the same behavior as the integration tests.",,Federico Mariani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Mar 14 11:12:25 UTC 2023,,,,,,,,,,,"0|z1g9o0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"14/Mar/23 11:12;Federico Mariani;Solved with https://github.com/apache/camel/commit/5aedf26b2cc6227638dbb08f581b8ef5cc097a5d;;;",,,,,,,,,,,,,,,,,,,,
Milo component does not use dataChangeFilterTrigger value from route,CAMEL-19100,13526523,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,rangoy,rangoy,28/Feb/23 12:50,01/Mar/23 10:35,13/Jul/23 08:30,01/Mar/23 10:35,3.20.2,3.x,,,,3.20.3,3.21.0,,,,,camel-milo,,,0,,,"The dataChangeFilterTrigger configured is not applied when the monitoring is set up.

 
 
{code:java}
return new DataChangeFilter(
   DataChangeTrigger.StatusValueTimestamp,
   this.getDataChangeFilterDeadbandType(),
   this.getDataChangeFilterDeadbandValue());
}{code}

I think the code above has to be changed to something like this:


  
{code:java}
return new DataChangeFilter(
this.dataChangeFilterTrigger != null ? this.dataChangeFilterTrigger : DataChangeTrigger.StatusValueTimestamp,
this.getDataChangeFilterDeadbandType(),
this.getDataChangeFilterDeadbandValue());
}{code}",,davsclaus,nfilotto,rangoy,,,,,,,,,,,,,,,,,,,,,,,"28/Feb/23 12:50;rangoy;filter.patch;https://issues.apache.org/jira/secure/attachment/13055906/filter.patch",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,,Wed Mar 01 10:11:53 UTC 2023,,,,,,,Patch Available,,,,"0|z1g8qw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"28/Feb/23 12:59;davsclaus;Thanks for reporting and the patch.;;;","28/Feb/23 13:02;rangoy;Thank you for the feedback. 
Do you want me to make a pull request also?;;;","28/Feb/23 13:48;rangoy;I've crated a pull request; [https://github.com/apache/camel/pull/9451] ;;;","01/Mar/23 07:59;nfilotto;Removing 4.0 from the fix versions since the milo component has been removed likely due to an incompatibility with the Jakarta migration.;;;","01/Mar/23 10:11;rangoy;It's merged into 3.20.x, and has a pending pullrequest for 3.0 branch;
https://github.com/apache/camel/pull/9455;;;",,,,,,,,,,,,,,,,
Possible performance issue invoking a bean method with a string parameter,CAMEL-19098,13526405,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,elishamoshe,elishamoshe,27/Feb/23 22:18,01/Mar/23 14:05,13/Jul/23 08:30,01/Mar/23 11:53,3.20.2,,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,,camel-bean,,,0,,,"Hi,

 

As discussed in the Camel users email thread - [https://lists.apache.org/thread/3whp1726zttcckh20tdn0j9wj9vt6tgd]

 

I have noticed that when invoking a bean method with a string parameter, it works but a very special handling is needed to avoid a performance hit. Example code below.

When the parameter is not single quoted or double quoted - Camel tries to resolve the value and in the process tries to load a class by that name which is a very expensive process. This behavior is expected IMO.
When the parameter is single quoted or double quoted - Camel still tries to resolve the value as a class name. IMO this is not behaving properly.

This issue happens because ""StringQuoteHelper.splitSafeQuote(methodParameters, ',', true);"" invoked in ""MethodInfo.ParameterExpression#evaluate"" removes the single/double quotes.
Inside ""MethodInfo.evaluateParameterValue"" the ""BeanHelper.isValidParameterValue(exp)"" is invoked and returns false and therefor ""BeanHelper.isAssignableToExpectedType"" > ... > ""DefaultClassResolver.loadClass(String name, ClassLoader loader)"" is invoked every time the bean method is invoked.

The current workaround I found is to add both types of quotes. With this workaround, ""MethodInfo.ParameterExpression#evaluate"" removes the outer set of quotes but keeps the inner one and ""BeanHelper.isValidParameterValue(exp)"" returns true.

 

{{public class MyRouteBuilder extends RouteBuilder {}}
{{    @Override}}
{{    public void configure() throws Exception {}}
{{        from(""timer:foo?period=2000"")}}
{{            .to(""bean:myBean?method=myMethod(slow)"")}}
{{            .to(""bean:myBean?method=myMethod('alsoSlow1')"")}}
{{            .to(""bean:myBean?method=myMethod(\""alsoSlow2\"")"")}}
{{            .to(""bean:myBean?method=myMethod(\""'fast'\"")"");}}
{{    }}}
{{}}}



{{public class MyBean {}}
{{    public void myMethod(String str) {}}
{{        System.out.println(""str = "" + str);}}
{{    }}}
{{}}}

 ",,davsclaus,elishamoshe,,,,,,,,,,,,,,,,,,,,CAMEL-19104,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 01 14:05:05 UTC 2023,,,,,,,,,,,"0|z1g80w:",9223372036854775807,,,,,,,,,,,,,,,,,,,"01/Mar/23 10:59;davsclaus;Thanks for reporting, I am working on a fix. 

So for string literals then you need to pass them in as quotes to have it fast. If you use merhod=myMethod(slow) then Camel uses its parameter type matching (this was implemented first) and therefore assume slow is a java class name, such as String, int, boolean etc.

But with the fix, then only 1 is slow, and all the 3 others are fast;;;","01/Mar/23 14:05;elishamoshe;Great! Thanks a lot, [~davsclaus]  !;;;",,,,,,,,,,,,,,,,,,,
Camel Karaf using buggy Saxon bundle with wrong imports,CAMEL-19095,13526360,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nannou9,nannou9,27/Feb/23 16:11,02/Jun/23 06:22,13/Jul/23 08:30,20/May/23 15:44,3.20.2,,,,,3.20.5,3.21.0,,,,,karaf,,,1,,,"Will provide PR soon as I finish testing fix.

Current problems is with:
{code:java}
<bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5</bundle>
<bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/11.4_1</bundle> {code}
Saxon 11.4 requires to import org.xmlresolver (v4.4.3) and not org.apache.xml.resolver (v1.2).

Temporary workaround is to define bundle replacements like below:
{code:java}
<bundle mode=""maven"" originalUri=""mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5"" replacement=""wrap:mvn:org.xmlresolver/xmlresolver/4.4.3""/>
<bundle mode=""maven"" originalUri=""mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/11.4_1"" replacement=""wrap:mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/11.4_2$overwrite=merge&amp;Import-Package=javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.stream,javax.xml.stream.events,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stream,javax.xml.transform.stax,javax.xml.xpath,org.xmlresolver,org.w3c.dom,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.xml,javax.xml.xquery;resolution:=optional,com.saxonica.functions.map;resolution:=optional,com.saxonica.stream;resolution:=optional""/> {code}",,davsclaus,nannou9,robin.vishwakarma,skrrytch,,,,,,,,,,SM-5478,,,,,,,CAMEL-19082,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jun 02 06:22:09 UTC 2023,,,,,,,,,,,"0|z1g7qw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"28/Feb/23 08:03;nannou9;Latest SMX bundles seems to have bugs. Will need to fix them 1st and wait for release before this can be fixed.;;;","28/Feb/23 08:33;nannou9;[~davsclaus]  not sure if this is minor issue TBH as this breaks camel-saxon.;;;","15/Mar/23 12:31;davsclaus;Is there a new release that works now?;;;","15/Mar/23 18:24;nannou9;Hi [~davsclaus], yes Jean-Baptiste kindly patched them. Still need to test them and then will update it.
We will be internally creating new release somewhere next week as there are some other updates too. So we should confirm then that new libs are ok and will create patch.;;;","17/Apr/23 08:16;davsclaus;Any update;;;","03/May/23 06:21;robin.vishwakarma;Not sure if this is the correct ticket to comment on, Camel 3.20.4 has upgraded Saxon HE dependency to 11.5, but Camel Karaf feature is still using SMX Saxon HE 11.4_1, SMX does not have Saxon HE 11.5 bundle yet, I have created the ticket  SM-5536, hoping someone would create that bundle and we have fix for Saxon HE in Karaf runtime.;;;","20/May/23 14:49;davsclaus;There is no 11.5 bundle release yet
https://repo.maven.apache.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.saxon/

The latest production release of Saxon-HE is 11.5.
Saxon 11 is currently considered the most stable and reliable release.
https://github.com/Saxonica/Saxon-HE;;;","20/May/23 15:44;davsclaus;Ah we have upgraded xmlresolver;;;","02/Jun/23 06:22;robin.vishwakarma;Apache Servicemix Saxon 11.5 and XmlResolver 4.6.4 are now available in Maven Repo. SM-5536 and SM-5537

I'll create a PR in CAMEL-19323 with Saxon 11.5 dependencies.;;;",,,,,,,,,,,,
Start a route with aggregation fails due to NPE in AggregateProcessor,CAMEL-19081,13525625,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rnetuka,shenrard,shenrard,21/Feb/23 18:01,17/Mar/23 15:57,13/Jul/23 08:30,17/Mar/23 15:57,3.20.1,,,,,3.14.8,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M3,camel-core,,,0,,,"In my application I have a route with an aggregation using an aggregation repository ClusteredJdbcAggregationRepository and completionTimeout. This route is part of a micro service that can be scaled. From time to time, the micro service does not start due to a NPE:
{code:java}
Caused by: java.lang.NullPointerException: Cannot invoke ""org.apache.camel.Exchange.getProperty(org.apache.camel.ExchangePropertyKey, Object, java.lang.Class)"" because ""exchange"" is null         at org.apache.camel.processor.aggregate.AggregateProcessor.restoreTimeoutMapFromAggregationRepository(AggregateProcessor.java:920) ~[camel-core-processor-3.20.1.jar:3.20.1]  {code}
In my case the exchange is null because it has already been processed by one of the micro service instance.
 The relevant code is in [https://github.com/apache/camel/blob/camel-3.20.1/core/camel-core-processor/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java#L920]
{code:java}
for (String key : keys) {     
    Exchange exchange = aggregationRepository.get(camelContext, key);     // grab the timeout value     
    long timeout = exchange.getProperty(ExchangePropertyKey.AGGREGATED_TIMEOUT, 0L, long.class);{code}
 
The null check is missing. It's not a problem when aggregation repository is not shared among instance like LevelDB, but it is when it's shared like JDBC.",,rnetuka,shenrard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 17 13:17:25 UTC 2023,,,,,,,,,,,"0|z1g380:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Mar/23 13:17;rnetuka;PR: https://github.com/apache/camel/pull/9569;;;",,,,,,,,,,,,,,,,,,,,
NullPointerException thrown when using the language:xquery endpoint,CAMEL-19079,13525536,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,djcoleman,djcoleman,21/Feb/23 10:10,25/Feb/23 17:27,13/Jul/23 08:30,25/Feb/23 17:27,3.20.1,,,,,3.21.0,4.0.0,4.0-M2,,,,camel-language,camel-saxon,,0,,,"I get a {{NullPointerException}} when running a basic route that sends data to the {{language:xquery}} endpoint. It looks like the exception is caused the the Saxon Configuration object not being initialized. 

Here is an example that reproduces the error:
{code:java}
public class CamelXQueryLanguageTest {
    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();
        context.start();
        
        ProducerTemplate producer = context.createProducerTemplate();
        String result = producer.requestBody(
            ""language:xquery:upper-case(/message/text())"", 
            ""<message>Hello from XQuery</message>"", 
            String.class);
        System.out.println(""Result: "" + result);
        
        context.stop();
    }
}
{code}
Here is the stack trace from this code:
{code:java}
Exception in thread ""main"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[]
	at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:45)
	at org.apache.camel.support.ExchangeHelper.extractResultBody(ExchangeHelper.java:660)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:591)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:587)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:414)
	at org.acme.CamelXQueryLanguageTest.main(CamelXQueryLanguageTest.java:14)
Caused by: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException: Cannot invoke ""net.sf.saxon.Configuration.makeErrorReporter()"" because ""config"" is null
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:202)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:167)
	at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:110)
	at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66)
	at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:214)
	at org.apache.camel.impl.engine.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:111)
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
	at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:108)
	at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:199)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:413)
	... 1 more
Caused by: java.lang.NullPointerException: Cannot invoke ""net.sf.saxon.Configuration.makeErrorReporter()"" because ""config"" is null
	at net.sf.saxon.query.DynamicQueryContext.<init>(DynamicQueryContext.java:58)
	at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:569)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:230)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:192)
	... 12 more
{code}
If I create an instance of the Configuration object explicitly and set it in the XQueryLanguage, that NPE disappears only for another one to be thrown when evaluating the expression.

For example, if I add the following 2 lines before starting the context:
{code:java}
XQueryLanguage language = (XQueryLanguage) context.resolveLanguage(""xquery"");
language.setConfiguration(new Configuration());
					
context.start();
{code}
An exception now appears via:
{code}
Caused by: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException: Cannot invoke ""net.sf.saxon.query.XQueryExpression.run(net.sf.saxon.query.DynamicQueryContext, javax.xml.transform.Result, java.util.Properties)"" because ""expression"" is null
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:202)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:167)
	at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:110)
	at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66)
	at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:214)
	at org.apache.camel.impl.engine.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:111)
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
	at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:108)
	at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:199)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:413)
	... 1 more
Caused by: java.lang.NullPointerException: Cannot invoke ""net.sf.saxon.query.XQueryExpression.run(net.sf.saxon.query.DynamicQueryContext, javax.xml.transform.Result, java.util.Properties)"" because ""expression"" is null
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:232)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:192)
	... 12 more
{code}

 ",,djcoleman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-21 10:10:47.0,,,,,,,,,,,"0|z1g2o8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-bean - Incorrect choice of overloaded method with several arguments, if one of them has brackets.",CAMEL-19075,13525283,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ArtemSt,ArtemSt,18/Feb/23 11:30,23/Feb/23 17:18,13/Jul/23 08:30,23/Feb/23 17:18,3.14.7,3.20.2,4.0-M1,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,,camel-bean,,,0,,,"camel-bean incorectly choice method if class has overloaded methods and one of the paramets has bracket close symbol "")"".

 

Here is a test case:

 
{code:java}
@ExtendWith(MockitoExtension.class)
public class BeanProcessorOverloadedMethodsWithBracketsTest extends CamelTestSupport {

    private final String strArgWithBrackets = "")(string_with_brackets()))())"";

    @Test
    public void testOverloadedMethodWithBracketsParams() throws InterruptedException {
        template.sendBody(""direct:start"", null);
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        String receivedExchangeBody = mock.getExchanges().get(0).getMessage().getBody(String.class);
        assertEquals(new MyOverloadedClass().myMethod(strArgWithBrackets, strArgWithBrackets), receivedExchangeBody);
    }

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""direct:start"")
                        .bean(MyOverloadedClass.class, ""myMethod('"" + strArgWithBrackets + ""', '"" + strArgWithBrackets + ""')"")
                        .to(""mock:result"");
            }
        };
    }

    public static class MyOverloadedClass {
        public String myMethod() {
            return """";
        }

        public String myMethod(String str) {
            return str;
        }

        public String myMethod(String str1, String str2) {
            return str1 + str2;
        }
    }
} {code}
In test example above I am trying to call myMethod with two arguments, but instead of it camel-bean chooses method with one argument.

Test returns the assertion error:
{code:java}
org.opentest4j.AssertionFailedError: 
Expected :)(string_with_brackets()))()))(string_with_brackets()))())
Actual   :)(string_with_brackets()))()){code}
 ",,ArtemSt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-18 11:30:33.0,,,,,,,,,,,"0|z1g148:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-JBang | camel init creates file but errors out on Windows",CAMEL-19067,13525089,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chirag884,chirag884,16/Feb/23 21:28,17/Feb/23 08:36,13/Jul/23 08:30,17/Feb/23 08:36,3.20.2,,,,,3.20.3,3.21.0,4.0.0,4.0-M2,,,camel-jbang,,,0,,,"Error while running camel init
 I am noticing that file is getting created - but then it  is erroring out

C:\work\jb>jbang --version
0.101.0
C:\work\jb>camel -V
3.20.2

It seems to not resolve sys:pid variable?

Here is complete stacktrace:
{code:java}
C:\work\jb>camel init b.xml

2023-02-16 12:53:30,548 main ERROR FileManager
(C:\Users\myuser/.camel/${sys:pid}.log) java.io.IOException: The
filename, directory name, or volume label syntax is incorrect
java.io.IOException: The filename, directory name, or volume label
syntax is incorrect
        at java.base/java.io.WinNTFileSystem.canonicalize0(Native Method)
        at java.base/java.io.WinNTFileSystem.canonicalize(WinNTFileSystem.java:465)
        at java.base/java.io.File.getCanonicalPath(File.java:626)
        at java.base/java.io.File.getCanonicalFile(File.java:651)
        at org.apache.logging.log4j.core.util.FileUtils.makeParentDirs(FileUtils.java:139)
        at org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory.createManager(FileManager.java:436)
        at org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory.createManager(FileManager.java:423)
        at org.apache.logging.log4j.core.appender.AbstractManager.getManager(AbstractManager.java:144)
        at org.apache.logging.log4j.core.appender.OutputStreamManager.getManager(OutputStreamManager.java:100)
        at org.apache.logging.log4j.core.appender.FileManager.getFileManager(FileManager.java:183)
        at org.apache.logging.log4j.core.appender.FileAppender$Builder.build(FileAppender.java:99)
        at org.apache.logging.log4j.core.appender.FileAppender$Builder.build(FileAppender.java:52)
        at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:124)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:1133)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:1058)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:1050)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:659)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:257)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:303)
        at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:621)
        at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:694)
        at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:711)
        at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:253)
        at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:155)
        at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:47)
        at org.apache.logging.log4j.LogManager.getContext(LogManager.java:196)
        at org.apache.logging.log4j.spi.AbstractLoggerAdapter.getContext(AbstractLoggerAdapter.java:137)
        at org.apache.logging.slf4j.Log4jLoggerFactory.getContext(Log4jLoggerFactory.java:55)
        at org.apache.logging.log4j.spi.AbstractLoggerAdapter.getLogger(AbstractLoggerAdapter.java:47)
        at org.apache.logging.slf4j.Log4jLoggerFactory.getLogger(Log4jLoggerFactory.java:33)
        at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:363)
        at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:388)
        at org.apache.camel.util.FileUtil.<clinit>(FileUtil.java:39)
        at org.apache.camel.dsl.jbang.core.commands.Init.call(Init.java:85)
        at org.apache.camel.dsl.jbang.core.commands.Init.call(Init.java:44)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:134)
        at main.CamelJBang.main(CamelJBang.java:36)

2023-02-16 12:53:30,556 main ERROR Could not create plugin of type
class org.apache.logging.log4j.core.appender.FileAppender for element
File: java.lang.IllegalStateException: ManagerFactory
[org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory@f99f5e0]
unable to create manager for [C:\Users\myuser/.camel/${sys:pid}.log]
with data [org.apache.logging.log4j.core.appender.FileManager$FactoryData@6aa61224]
java.lang.IllegalStateException: ManagerFactory
[org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory@f99f5e0]
unable to create manager for [C:\Users\myuser/.camel/${sys:pid}.log]
with data [org.apache.logging.log4j.core.appender.FileManager$FactoryData@6aa61224]
        at org.apache.logging.log4j.core.appender.AbstractManager.getManager(AbstractManager.java:146)
        at org.apache.logging.log4j.core.appender.OutputStreamManager.getManager(OutputStreamManager.java:100)
        at org.apache.logging.log4j.core.appender.FileManager.getFileManager(FileManager.java:183)
        at org.apache.logging.log4j.core.appender.FileAppender$Builder.build(FileAppender.java:99)
        at org.apache.logging.log4j.core.appender.FileAppender$Builder.build(FileAppender.java:52)
        at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:124)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:1133)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:1058)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:1050)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:659)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:257)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:303)
        at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:621)
        at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:694)
        at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:711)
        at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:253)
        at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:155)
        at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:47)
        at org.apache.logging.log4j.LogManager.getContext(LogManager.java:196)
        at org.apache.logging.log4j.spi.AbstractLoggerAdapter.getContext(AbstractLoggerAdapter.java:137)
        at org.apache.logging.slf4j.Log4jLoggerFactory.getContext(Log4jLoggerFactory.java:55)
        at org.apache.logging.log4j.spi.AbstractLoggerAdapter.getLogger(AbstractLoggerAdapter.java:47)
        at org.apache.logging.slf4j.Log4jLoggerFactory.getLogger(Log4jLoggerFactory.java:33)
        at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:363)
        at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:388)
        at org.apache.camel.util.FileUtil.<clinit>(FileUtil.java:39)
        at org.apache.camel.dsl.jbang.core.commands.Init.call(Init.java:85)
        at org.apache.camel.dsl.jbang.core.commands.Init.call(Init.java:44)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:134)
        at main.CamelJBang.main(CamelJBang.java:36)

2023-02-16 12:53:30,564 main ERROR Unable to invoke factory method in
class org.apache.logging.log4j.core.appender.FileAppender for element
File: java.lang.IllegalStateException: No factory method found for
class org.apache.logging.log4j.core.appender.FileAppender
java.lang.IllegalStateException: No factory method found for class
org.apache.logging.log4j.core.appender.FileAppender
        at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.findFactoryMethod(PluginBuilder.java:260)
        at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:136)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:1133)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:1058)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:1050)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:659)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:257)
        at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:303)
        at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:621)
        at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:694)
        at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:711)
        at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:253)
        at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:155)
        at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:47)
        at org.apache.logging.log4j.LogManager.getContext(LogManager.java:196)
        at org.apache.logging.log4j.spi.AbstractLoggerAdapter.getContext(AbstractLoggerAdapter.java:137)
        at org.apache.logging.slf4j.Log4jLoggerFactory.getContext(Log4jLoggerFactory.java:55)
        at org.apache.logging.log4j.spi.AbstractLoggerAdapter.getLogger(AbstractLoggerAdapter.java:47)
        at org.apache.logging.slf4j.Log4jLoggerFactory.getLogger(Log4jLoggerFactory.java:33)
        at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:363)
        at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:388)
        at org.apache.camel.util.FileUtil.<clinit>(FileUtil.java:39)
        at org.apache.camel.dsl.jbang.core.commands.Init.call(Init.java:85)
        at org.apache.camel.dsl.jbang.core.commands.Init.call(Init.java:44)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:134)
        at main.CamelJBang.main(CamelJBang.java:36)

2023-02-16 12:53:30,574 main ERROR Null object returned for File in Appenders.
2023-02-16 12:53:30,575 main ERROR Unable to locate appender ""file""
for logger config ""root""
{code}
","Windows 10
JDK 19

{code:java}
jbang --version
0.101.0
{code}

{code:java}
C:\work\jb>camel -V
3.20.2
{code}
",chirag884,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Feb 17 08:19:09 UTC 2023,,,,,,,,,,,"0|z1fzx4:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Feb/23 01:28;chirag884;sys:pid was introduced as part of CAMEL-18538, it may need refactoring. 

Reading a similar issue:

[https://github.com/spring-projects/spring-boot/pull/16174] - it may require changing to %pid?;;;","17/Feb/23 08:01;davsclaus;Hmm so its log4j that is told to use logger file
appender.file.fileName = ${sys:user.home}/.camel/${sys:pid}.log

And it uses StrSubstitutor to parse that line above, and on my system it detects sys which invokes SystemPropertiesLookup and then grabs the correct pid, set via 

            long pid = ProcessHandle.current().pid();
            System.setProperty(""pid"", """" + pid);
;;;","17/Feb/23 08:19;davsclaus;Okay I think I can see now that due to camel init uses FileUtil from camel-core that uses log4j logger then it setup logging but the log with pid file is not pre-configured for the init command. This is done for run command. So we need to setup the logging for all commands just in case.

So on linux a null pid did not cause log4j to blow up like on windows;;;",,,,,,,,,,,,,,,,,,
Multicast EIP sets correlationId on original Exchange,CAMEL-19066,13525085,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hgarus,hgarus,16/Feb/23 20:37,22/Feb/23 12:43,13/Jul/23 08:30,22/Feb/23 12:43,3.18.5,3.20.2,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,,came-core,,,0,,,"When copying the result onto the original Exchange the Multicast EIP and related EIPs like Split and RecipientList copy the result back to the original Exchange, this copy includes the correlationId of the subexchange.

This can be somewhat confusing, especially with FlexibleAggregationStrategy which aggregates the result in an Exchange which is correlated to a different Exchange than the original Exchange.

Example:
{code:java}
from(""direct:foo"")
    .log(""Before split: exchangeId:'${exchangeId}' CorrelationId:'${exchangeProperty.CamelCorrelationId}'"")
    .split(body(), AggregationStrategies.flexible().pick(body()).accumulateInCollection(ArrayList.class))
    .log(""In split: exchangeId:'${exchangeId}' CorrelationId:'${exchangeProperty.CamelCorrelationId}'"")
    .end()
    .log(""After split: exchangeId:'${exchangeId}' CorrelationId:'${exchangeProperty.CamelCorrelationId}'""); {code}
Which produces the following Logging output for a two-Element List:
{code:java}
Before split: exchangeId:'742F0530A58A761-0000000000000000' CorrelationId:''
In split: exchangeId:'742F0530A58A761-0000000000000001' CorrelationId:'742F0530A58A761-0000000000000000'
In split: exchangeId:'742F0530A58A761-0000000000000002' CorrelationId:'742F0530A58A761-0000000000000000'
In split: exchangeId:'742F0530A58A761-0000000000000003' CorrelationId:'742F0530A58A761-0000000000000000'
After split: exchangeId:'742F0530A58A761-0000000000000000' CorrelationId:'742F0530A58A761-0000000000000001' {code}",,davsclaus,hgarus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Java,Mon Feb 20 20:48:47 UTC 2023,,,,,,,,,,,"0|z1fzw8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Feb/23 18:32;davsclaus;[~hgarus] would you add an unit test for enrich EIP also, and look at fixing org.apache.camel.processor.Enrich is a similar way.
BTW you should only restore the correlation id if its != null.;;;","20/Feb/23 20:48;hgarus;[~davsclaus] done, I just opened [https://github.com/apache/camel/pull/9392] .;;;",,,,,,,,,,,,,,,,,,,
Camel-opentelemetry: Avoid using the GlobalOpenTelemetry.get() and allow for injection of ContextPropagators,CAMEL-19051,13524796,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,acosentino,acosentino,15/Feb/23 08:47,15/Feb/23 10:53,13/Jul/23 08:30,15/Feb/23 10:53,4.0-M1,,,,,4.0.0,4.0-M2,,,,,,,,0,,,"A problem occures when using opentelemetry 4.0.0-M1 with spring-boot auto configuration.

The autoconfiguration works as expected and the resulting openTelemetry bean is as expected.
But when the first request comes in, the autoconfigured bean is not used and another openTelemetry configured with OpenTelemetry.noop() is used.

org.apache.camel.opentelemetry.OpenTelemetryTracer#startExchangeBeginSpan uses GlobalOpenTelemetry.get(), which in turn looks into it's io.opentelemetry.api.GlobalOpenTelemetry#globalOpenTelemetry which was not set and so it creates the noop implementation.

First step to fix without side effects is to allow the explicit setting of the ContextPropagators which then can be used by org.apache.camel.opentelemetry.starter.OpenTelemetryAutoConfiguration#openTelemetryEventNotifier to use the proper autoconfigured instances.

https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/opentelemetry/near/327478493",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-15 08:47:02.0,,,,,,,,,,,"0|z1fy40:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelTestSupport (junit5) - quarkus and springboot checks are not executed with ContextPerClass,CAMEL-19047,13524634,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,14/Feb/23 09:09,15/Feb/23 08:47,13/Jul/23 08:30,15/Feb/23 08:47,4.0-M1,,,,,4.0.0,4.0-M2,,,,,camel-test,,,0,,,"There is a code in `CamelTestSupport` which verifies whether the right test parent is used in Quarkus or Spring-boot ([code|https://github.com/apache/camel/blob/main/components/camel-test/camel-test-junit5/src/main/java/org/apache/camel/test/junit5/CamelTestSupport.java#L373-L374]). 
These checks should be move above the `if` condition, to be called even if `Lifecycle.PER_CLASS` is used.",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-14 09:09:38.0,,,,,,,,,,,"0|z1fx48:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS2-S3: GetObject should preserve the metadata ,CAMEL-19034,13524213,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,10/Feb/23 11:41,10/Feb/23 13:25,13/Jul/23 08:30,10/Feb/23 13:25,,,,,,3.14.8,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,camel-aws2,,,0,,,"See 

https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/aws2-s3.20getObject.20no.20metadata

GetObject doens't copy the metadata after setting the body.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-10 11:41:50.0,,,,,,,,,,,"0|z1fuio:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When camel saga do compensated, the saga route don't stop it still run the next task.",CAMEL-19031,13524136,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,chen19980,chen19980,10/Feb/23 02:38,17/Feb/23 07:56,13/Jul/23 08:30,16/Feb/23 12:38,3.19.0,,,,,3.14.8,3.18.6,3.20.3,3.x,4.0-M2,,,,,0,saga,,"The problem is : I find that when actionA is timeout and it executed compensated, In theory the saga route should be stopped, not continue to call the next actionB.  In my test show that when {color:#ff0000}the first task can't complete before its timeout, it will run compensation but the saga route don't stop, it still run second task and third task{color}. In my opinion, I think when the first task can't complete and run compensation, the second and third task shouldn't run.  [Test Code|[https://github.com/chen19980/SAGA_timeout_test]]",,chen19980,nfilotto,zhfeng,,,432000,432000,,0%,432000,432000,,,,,,,,,,CAMEL-19068,,,,,"13/Feb/23 09:19;chen19980;2023-02-13 17 03 13-1.jpg;https://issues.apache.org/jira/secure/attachment/13055384/2023-02-13+17+03+13-1.jpg","13/Feb/23 09:20;chen19980;2023-02-13 17 03 13-2.jpg;https://issues.apache.org/jira/secure/attachment/13055385/2023-02-13+17+03+13-2.jpg","13/Feb/23 09:18;chen19980;2023-02-13 17 03 13.jpg;https://issues.apache.org/jira/secure/attachment/13055383/2023-02-13+17+03+13.jpg","13/Feb/23 09:20;chen19980;2023-02-13 17 04 02-1.jpg;https://issues.apache.org/jira/secure/attachment/13055386/2023-02-13+17+04+02-1.jpg","13/Feb/23 09:18;chen19980;2023-02-13 17 04 02.jpg;https://issues.apache.org/jira/secure/attachment/13055382/2023-02-13+17+04+02.jpg","13/Feb/23 07:44;zhfeng;InMemorySagaCoordinator.patch;https://issues.apache.org/jira/secure/attachment/13055372/InMemorySagaCoordinator.patch","10/Feb/23 02:28;chen19980;RouteCode.jpg;https://issues.apache.org/jira/secure/attachment/13055319/RouteCode.jpg","10/Feb/23 02:44;chen19980;SagaTest.jpg;https://issues.apache.org/jira/secure/attachment/13055322/SagaTest.jpg",,8.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,Important,,,,,,,,9223372036854775807,,,JAVA,Thu Feb 16 11:41:44 UTC 2023,,,,,,,Patch Available,,,,"0|z1fu1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,"13/Feb/23 07:44;zhfeng;It seems that InMemorySagaCoordinator::beginStep does not check the current status. So even the status is not *RUNNING*, it still add the step. Then a potential fix could be to add a status checking. I create a patch as an attachement, [~chen19980] can you verify it? [^InMemorySagaCoordinator.patch] ;;;","13/Feb/23 09:20;chen19980;[~zhfeng]  This is my test result.

!2023-02-13 17 03 13.jpg|width=559,height=264!!2023-02-13 17 04 02.jpg|width=561,height=227!

I think that the test result is right. And the result also throw exception, is it a normal condition ? How do you think about this test result?;;;","16/Feb/23 09:14;nfilotto;I reopen it as the PR has not been merged yet;;;","16/Feb/23 10:13;chen19980;[~nfilotto]  ok! Thanks~;;;","16/Feb/23 11:41;zhfeng;yeah, we aslo need to bakcport to 3.20.x;;;",,,,,,,,,,,,,,,,
camel-jbang - camel.main.backlogTracing=true,CAMEL-19026,13523828,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Feb/23 19:49,07/Jul/23 08:55,13/Jul/23 08:30,09/Feb/23 08:11,3.20.2,,,,,3.20.3,3.21.0,4.0.0,4.0-M2,,,,,,1,,,The backlog is in context but is disabled. It should be enabled when set this option.,,davsclaus,,,,,,,,,,,,,,,,,,,,,CAMEL-19512,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Feb 09 06:00:18 UTC 2023,,,,,,,,,,,"0|z1fs5c:",9223372036854775807,,,,,,,,,,,,,,,,,,,"08/Feb/23 20:13;davsclaus;Ah yeah you need to enable it explicit - it sits there in the background waiting - eg hawtio enables it when you start using it.;;;","09/Feb/23 06:00;davsclaus;We should add
camel.main.backlogTracingStandby

Then it works similar to regular tracing (logging only)


;;;",,,,,,,,,,,,,,,,,,,
camel-vertx-http: Headers may get erroneously duplicated ,CAMEL-19018,13523475,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,07/Feb/23 10:33,07/Feb/23 13:27,13/Jul/23 08:30,07/Feb/23 13:25,3.18.5,3.20.2,4.0-M1,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,,camel-vertx-http,,,0,,,"Given routes configured like this:

{code}
rest()
        .post(""/greeting"")
        .to(""direct:greet"")

        .post(""/hello"")
        .to(""direct:hello"");

from(""direct:greet"")
        .removeHeaders(""CamelHttp*"")
        .to(""vertx-http:http://localhost:8080/hello?httpMethod=POST"");

from(""direct:hello"")
        .setBody().simple(""Hello ${body}"");
{code}

When using cURL to POST to /greeting, the response reveals some of the headers get duplicated:

{code}
< HTTP/1.1 200 OK
< Accept: */*
< Accept: */*
< User-Agent: curl/7.81.0
< User-Agent: Vert.x-WebClient/4.3.7
< User-Agent: curl/7.81.0
< Content-Length: 17
< Content-Type: [application/json, application/json]
{code}
",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-07 10:33:24.0,,,,,,,,,,,"0|z1fpyw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SimpleLanguage cache issue,CAMEL-19014,13523266,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rhuanrocha,andrea81,andrea81,06/Feb/23 16:26,22/Mar/23 11:03,13/Jul/23 08:30,22/Mar/23 11:03,3.19.0,3.20.1,3.20.2,4.0-M1,,3.21.0,4.0.0,4.0-M3,,,,camel-core,,,1,,,"Hi guys, I'm attaching a test class that will reproduce the issue that I'm experiencing.
As summary: The cache inside the SimpleLanguage class looks like it's going to be affected by the evaluation of the simple expression, producing unexpected results.
When the method *resolveTemplate* is used the result is not the expected one.
To make it work I have to simulate a new entry in the cache making use of the method *resolveTemplateNoCache.*
Thanks in advance
{code:java}
public class SimpleLanguageTest extends CamelTestSupport {
    @EndpointInject(""mock:result"")
    private MockEndpoint mockResult;

    @EndpointInject(""mock:fail"")
    private MockEndpoint mockWithFailure;

    @Test
    public void whenSimpleLanguageNotUseCachedEntriesItWillNotFail() throws Exception {

        mockResult.await(20, TimeUnit.SECONDS);
        mockResult.expectedMessageCount(102);
        assertMockEndpointsSatisfied();
        List<Exchange> exchanges = mockResult.getExchanges();
        exchanges.stream()
                .forEach(exchange -> assertTrue(exchange.getMessage().getHeader(""#CustomHeader"", String.class).equals(""This is a test a with startLabel: `Document` endLabel: `Document` and label: `ALabel`"")));


    }

    @Test
    public void whenSimpleLanguageUseCachedEntriesItWillFail() throws Exception {
        mockWithFailure.expectedMessageCount(102);
        assertMockEndpointsSatisfied();
        List<Exchange> exchanges = mockWithFailure.getExchanges();
        exchanges.stream()
                .forEach(exchange -> assertTrue(exchange.getMessage().getHeader(""#CustomHeader"", String.class).equals(""This is a test a with startLabel: `Document` endLabel: `Document` and label: `ALabel`"")));


    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {

        return new RouteBuilder() {
            Map body = new HashMap() {{
                put(""label"", ""ALabel"");
                put(""startLabel"", ""Document"");
                put(""endLabel"", ""Document"");
            }};


            String simpleTemplate = ""This is a test a with startLabel: `${body.get('startLabel')}` endLabel: `${body.get('endLabel')}` and label: `${body.get('label')}`"";


            @Override
            public void configure() throws Exception {
                from(""timer://test-timer?fixedRate=true&period=10&delay=1"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                exchange.getMessage().setBody(body);
                                exchange.getMessage().setHeader(""#CustomHeader"", resolveTemplateNoCache(simpleTemplate, exchange));
                            }
                        })
                        .to(""mock:result"");

                from(""timer://test-timer1?fixedRate=true&period=10&delay=1"")

                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                exchange.getMessage().setBody(body);
                                exchange.getMessage().setHeader(""#CustomHeader"", resolveTemplateNoCache(simpleTemplate, exchange));
                            }
                        })
                        .to(""mock:result"");

                from(""timer://test-timer2?fixedRate=true&period=10&delay=1"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                exchange.getMessage().setBody(body);
                                exchange.getMessage().setHeader(""#CustomHeader"", resolveTemplateNoCache(simpleTemplate, exchange));
                            }
                        })
                        .to(""mock:result"");

                from(""timer://test-timer3?fixedRate=true&period=10&delay=1"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                exchange.getMessage().setBody(body);
                                exchange.getMessage().setHeader(""#CustomHeader"", resolveTemplate(simpleTemplate, exchange));
                            }
                        })
                        .to(""mock:fail"");

                from(""timer://test-timer4?fixedRate=true&period=10&delay=1"")

                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                exchange.getMessage().setBody(body);
                                exchange.getMessage().setHeader(""#CustomHeader"", resolveTemplate(simpleTemplate, exchange));
                            }
                        })
                        .to(""mock:fail"");

                from(""timer://test-timer5?fixedRate=true&period=10&delay=1"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                exchange.getMessage().setBody(body);
                                exchange.getMessage().setHeader(""#CustomHeader"", resolveTemplate(simpleTemplate, exchange));
                            }
                        })
                        .to(""mock:fail"");
            }

        };
    }

    public String resolveTemplate(String template, Exchange exchange) {
        var simpleExpression = new SimpleExpression();
        simpleExpression.setExpression(template);
        return simpleExpression.evaluate(exchange, String.class);

    }

    public String resolveTemplateNoCache(String template, Exchange exchange) {
        var simpleExpression = new SimpleExpression();
        //This will force to create a new entry in the cache in the SimpleLanguage class
        String nocache = String.join(""-"", ""-nocache"", UUID.randomUUID().toString());
        simpleExpression.setExpression(""%s%s"".formatted(template, nocache));
        return simpleExpression.evaluate(exchange, String.class).replace(nocache, """");

    }
}
 {code}",,andrea81,rhuanrocha,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Feb 11 06:53:20 UTC 2023,,,,,,,,,,,"0|z1foog:",9223372036854775807,,,,,,,,,,,,,,,,,,,"07/Feb/23 12:54;andrea81;Just an update if in the previous method
{code:java}
 public String resolveTemplate(String template, Exchange exchange) {       
  var simpleExpression = new SimpleExpression();
  simpleExpression.setExpression(template);        
  return simpleExpression.evaluate(exchange, String.class);

    }
{code}
I introduce a synchronization over the SimpleLanguage class it works as expected:
{code:java}
 public String resolveTemplate(String template, Exchange exchange) \{
    synchronized (SimpleLanguage.class){
        var simpleExpression = new SimpleExpression();
        simpleExpression.setExpression(template);
        return simpleExpression.evaluate(exchange, String.class);
    }
{code}
So maybe it's due a concurrency issue somewhere in the code.
I hope this can help as well too.
Thanks in advance;;;","10/Feb/23 21:04;rhuanrocha;Hi [~andrea81] ,

 I reproduced it here in my local environment and locks like you are correct. The issue is about Concurrence. I have seen the following log here

 
{code:java}
 
[Camel (camel-1) thread #6 - timer://test-timer5] WARN org.apache.camel.component.timer.TimerConsumer - Error processing exchange. Exchange[4693970F0659A59-000000000000005C]. Caused by: [java.util.ConcurrentModificationException - null]
java.util.ConcurrentModificationException
    at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)
    at java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)
    at org.apache.camel.support.builder.ExpressionBuilder$52.evaluate(ExpressionBuilder.java:1605)
    at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:45)
    at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:239)
    at net.rhuanrocha.SampleLanguageTest.resolveTemplate(SampleLanguageTest.java:145)
    at net.rhuanrocha.SampleLanguageTest$1$7.process(SampleLanguageTest.java:133)
    at org.apache.camel.support.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:65)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:477)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:165)
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392)
    at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:210)
    at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76)
    at java.base/java.util.TimerThread.mainLoop(Timer.java:566)
    at java.base/java.util.TimerThread.run(Timer.java:516)
{code}
 

 

I'm working on it and I'll be back soon with news.;;;","10/Feb/23 23:07;rhuanrocha;Hi,

I sent a PR to resolve this issue. It is awaiting review and will likely be released in version 3.20.3

https://github.com/apache/camel/pull/9332;;;","11/Feb/23 04:57;rhuanrocha;This issue happens to version 4.0.0-M1 as well. Thus, I'm sending the PR fixing it to version 4.0.0-M1.

https://github.com/apache/camel/pull/9333;;;","11/Feb/23 05:59;andrea81;Hi [~rhuanrocha] ,
Thanks a lot for your time, yep it's the same for 4.0.0-M1.

Let me share with you a quick summary after a conversation here:
[https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Simple.20language]

This is going to happen due the fact that I'm going to create and invoke the evaluation of the expression inside a processor, and it looks like it's not the standard way to it.
The standard way to it's to use the simple expression by the dsl, with something like that:
{code:java}
 from(""timer://test-timer5?fixedRate=true&period=10&delay=1"")
                    .setBody(constant(body))
                    .setHeader(""#CustomHeader"",simple(simpleTemplate,String.class))
                    .to(""mock:fail""); {code}
and not in this way (directly inside a processor):
{code:java}
 public String resolveTemplate(String template, Exchange exchange) {
        var simpleExpression = new SimpleExpression();
        simpleExpression.setExpression(template);
        return simpleExpression.evaluate(exchange, String.class);

    } {code}
due the fact that's not thread safe.

We will see what will be decided for this ticket.
To me, by the user point of view, with your fix the user will have more advantages like avoid to write multiple time something like
{code:java}
....
.process(MyProcessor)
.xxxxx(.....,simple(xxxxxx))
.process
.(.....,simple(xxxxxx)){code}
I mean multiple evaluation that at the end could be done in the processor itself directly.
So we will see what will be decided around this.
Thanks again and have a greet weekend.;;;","11/Feb/23 06:43;rhuanrocha;Hi,

Thank you for the clarification. 

I understood. As the Expression is supposed to be cached, and it has one method that applies an operation to an internal collection and another method that iterates this collection, I think it's good to develop it as thread-safe, to avoid problems in the future as well. I agree the way you used is not a standard way, but I think this PR can avoid problems in the future.;;;","11/Feb/23 06:53;andrea81;I agree with you;;;",,,,,,,,,,,,,,
XML IO DSL do not load templatedRoutes without XML namespace,CAMEL-19006,13522949,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,tturek,tturek,03/Feb/23 12:47,22/Feb/23 12:35,13/Jul/23 08:30,03/Feb/23 15:11,3.18.3,,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,,,,,0,,,"XML IO DSL do not load templatedRoutes without XML namespace like this:
{code}
<templatedRoutes>
    <templatedRoute routeTemplateRef=""myTemplate"" routeId=""my-route"">
        <parameter name=""foo"" value=""fooVal""/>
        <parameter name=""bar"" value=""barVal""/>
    </templatedRoute>
</templatedRoutes>
{code}

A possible workaround is to explicitly set the namespace, for instance like below:
{code}
<templatedRoutes xmlns=""http://camel.apache.org/schema/spring"">
{code}",,tturek,,,,,,,,,,,,,,,,,,,,,CAMEL-19004,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-03 12:47:04.0,,,,,,,,,,,"0|z1fmq0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML IO DSL do not parse route configuration with XML namespace,CAMEL-19004,13522937,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,tturek,tturek,03/Feb/23 11:01,22/Feb/23 12:35,13/Jul/23 08:30,03/Feb/23 14:10,3.18.3,,,,,3.18.6,3.20.3,3.21.0,4.0.0,4.0-M2,,,,,0,,,"XML IO DSL do not load {{routeConfiguration}} if it uses XML namespace like this:

{code}
<routeConfiguration xmlns=""http://camel.apache.org/schema/spring"">
  <onException>
  <exception>java.lang.Exception</exception>
  <handled><constant>true</constant></handled>
  <log message=""XML WARN: ${exception.message}""/>
  </onException>
</routeConfiguration>
{code}

A possible workaround is to explicitly remove the namespace, for instance like below:
{code}
<routeConfiguration>
...
</routeConfiguration>
{code}",,davsclaus,tturek,,,,,,,,,,,,,,,,,,,CAMEL-19006,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Feb 03 11:22:24 UTC 2023,,,,,,,,,,,"0|z1fmnc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"03/Feb/23 11:05;davsclaus;What camel version do you use;;;","03/Feb/23 11:10;tturek;Hi I am using 3.18.3 version.;;;","03/Feb/23 11:13;davsclaus;Can you try with 3.20.1;;;","03/Feb/23 11:21;tturek;I tried it agains main branch too.;;;","03/Feb/23 11:22;tturek;https://github.com/apache/camel/pull/9293 should fix it;;;",,,,,,,,,,,,,,,,
camel-jbang - Log command should detect lines without timestamp,CAMEL-19002,13522801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Feb/23 15:12,03/Feb/23 08:25,13/Jul/23 08:30,03/Feb/23 08:25,3.21.0,,,,,3.20.3,3.21.0,4.0.0,4.0-M2,,,camel-jbang,,,0,,,"If you log data that uses new-line, then the camel log command may cause NPE",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-02-02 15:12:10.0,,,,,,,,,,,"0|z1fltc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-kafka: messages are getting lost with ""breakOnFirstError""",CAMEL-18985,13521955,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,opershai,opershai,30/Jan/23 01:59,26/Apr/23 15:31,13/Jul/23 08:30,26/Apr/23 15:02,3.18.5,3.19.0,3.20.0,3.20.1,4.0-M2,3.18.7,3.20.5,3.21.0,4.0-M3,,,camel-kafka,,,0,,,"*Description:*

Messages are getting lost with ""breakOnFirstError=true"" when processing of a particular message failed several times in a raw.

 

*Configuration:*
 * autoCommitEnable=false
 * allowManualCommit=true
 * breakOnFirstError=true
 * autoOffsetReset=earliest
 * maxPollRecords is greater than one (e.g. 5 in this test)

 

*Test Scenario:*
 # inbound-topic contains 10 messages: 0,1,2,3,4,5,6,7,8,9
 # camel-route polls 5 messages: 0,1,2,3,4
 # camel-route successfully processes message=0 and manually commits offset
 # camel-route successfully processes message=1 and manually commits offset
 # camel-route fails with processing message=2 first time
 # breakOnFirstError=true causes camel-route to reconnect and poll from the committed offset
 # camel-route polls 5 messages: 2,3,4,5,6
 # camel-route fails with processing message=2 second time
 # *ACTUAL:* camel-route reconnects and polls messages 7,8,9 - as result messages 3,4,5,6 are never processed

*EXPECTED:* camel-route should do the following on the step 9:
 * reconnect and poll the same 5 messages again: 2,3,4,5,6
 * process message=2 third time (the test is configured to succeed on the 3rd attempt)
 * continue with processing messages 3,4,5,6...

 

*GitHub project reproducing the issue:*

[https://github.com/opershai/camel-kafka-lost-messages-demo] 

Test-runs:
 * 3.18.5 (failing): [https://github.com/opershai/camel-kafka-lost-messages-demo/actions/runs/4039702564] 
 * 3.19.0 (failing): [https://github.com/opershai/camel-kafka-lost-messages-demo/actions/runs/4039815226] 
 * 3.20.0 (failing): [https://github.com/opershai/camel-kafka-lost-messages-demo/actions/runs/4039709753] 
 * 3.20.1 (failing): [https://github.com/opershai/camel-kafka-lost-messages-demo/actions/runs/4039673222] 
 * 2.25.4 (passing): [https://github.com/opershai/camel-kafka-lost-messages-demo/actions/runs/4057277373] 

 

*Impact:*

It seems ""breakOnFirstError"" is not fully reliable in LTS versions of Camel Kafka component at the moment:
 * 3.20.x - due to this bug
 * 3.18.x - due to this bug
 * 3.14.x - due to another bug https://issues.apache.org/jira/browse/CAMEL-17925 as fix was not back-ported to the 3.14.x",,opershai,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Apr 26 15:02:23 UTC 2023,,,,,,,,,,,"0|z1fgns:",9223372036854775807,,,,,,,,,,,,,,,,,,,"30/Jan/23 09:03;orpiske;I am assigning this one to me, so I can keep it my radar. But I don't have an ETC yet about when I'll be able to fix it, as I have a lot on the queue right now. 

Obs.: anyone with time/interest on working this, just drop a note here and feel free to work on it.;;;","31/Jan/23 18:48;opershai;Just a quick note that old Camel Kafka Component v2.25.4 works as expected: [https://github.com/opershai/camel-kafka-lost-messages-demo/actions/runs/4057277373] ;;;","25/Apr/23 21:49;opershai;Hi [~orpiske] 

I've created [pull request|https://github.com/apache/camel/pull/9932]. Could you please take a look whether the suggested fix makes sense for you?

Thank you;;;","26/Apr/23 15:02;orpiske;Fixed on main and back-ported to multiple branches.;;;",,,,,,,,,,,,,,,,,
camel snmp - SNMP Ver1 trap does not work,CAMEL-18980,13521695,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,Federico Mariani,hfuruichi,hfuruichi,27/Jan/23 07:19,27/Mar/23 13:32,13/Jul/23 08:30,06/Feb/23 09:51,3.20.1,,,,,3.18.6,3.20.2,3.21.0,4.0.0,4.0-M2,,camel-snmp,,,0,,,"Although camel-snmp supports SNMP v1, v2, and v3 trap, v1 trap does not work as expected.

By checking the test code for camel-snmp, v2 trap is only tested.
https://github.com/apache/camel/blob/camel-3.x/components/camel-snmp/src/test/java/org/apache/camel/component/snmp/TrapTest.java

Based on the TrapTest.java, I implemented a TrapTestSnmpv1.java. Please use the test code for this issue.",,davsclaus,Federico Mariani,hfuruichi,,,,,,,,,,,,,,,,,,,,,,,"27/Jan/23 07:19;hfuruichi;Snmpv1TrapTest.java;https://issues.apache.org/jira/secure/attachment/13054836/Snmpv1TrapTest.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Feb 06 10:53:21 UTC 2023,,,,,,,,,,,"0|z1ff34:",9223372036854775807,,,,,,,,,,,,,,,,,,,"31/Jan/23 17:21;Federico Mariani;Hello, [https://github.com/apache/camel/pull/9276] fixes and add the V1 test, [~hfuruichi] do you think this is enough? in case, should I backport it to camel-3.x branch too?;;;","01/Feb/23 04:17;hfuruichi;Hello [~Federico Mariani] , thank you so much for the quick response.

I tried the fix on my laptop, but the test failed with the following messages.
{code:java}
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.032 s <<< FAILURE! - in org.apache.camel.component.snmp.Snmpv1TrapTest
[ERROR] org.apache.camel.component.snmp.Snmpv1TrapTest.testSendReceiveTraps  Time elapsed: 11.028 s  <<< FAILURE!
java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <0>
    at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1860)
    at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1817)
    at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:449)
    at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:427)
    at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:417) {code}
Is this work on your environment?

About the backport, yes please backport it to camel-3.x branch too.;;;","01/Feb/23 08:55;Federico Mariani;I had this issue too, in order to overcome this I've added [https://github.com/apache/camel/pull/9276/files#diff-ab8dac15f4541b82865994814a811bf193ab93178e18c159b6a642d97bd14c88R43] the PDUv1 toString is different compared to the PDU one, probably this is why the test was failing.;;;","03/Feb/23 03:52;hfuruichi;Hmm.. I double checked the extra line you [mentioned|https://github.com/apache/camel/pull/9276/files#diff-ab8dac15f4541b82865994814a811bf193ab93178e18c159b6a642d97bd14c88R43], but still no luck yet.
{code:java}
[hfuruich@hfuruich camel-snmp]$ oo17
openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-86)
OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)
[hfuruich@hfuruich camel-snmp]$ cat ./src/test/java/org/apache/camel/component/snmp/Snmpv1TrapTest.java | grep ""trap.setEnterprise""
        trap.setEnterprise(oid);
[hfuruich@hfuruich camel-snmp]$ mvn test -Dtest=org.apache.camel.component.snmp.Snmpv1TrapTest
[INFO] Scanning for projects...
~~skip~~
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.component.snmp.Snmpv1TrapTest
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.7 s <<< FAILURE! - in org.apache.camel.component.snmp.Snmpv1TrapTest
[ERROR] org.apache.camel.component.snmp.Snmpv1TrapTest.testSendReceiveTraps  Time elapsed: 11.364 s  <<< FAILURE!
java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <0>
    at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1860)
    at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1817)
    at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:449)
    at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:427)
    at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:417)
    at org.apache.camel.component.snmp.AbstractTrapTest.testSendReceiveTraps(AbstractTrapTest.java:59)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base/java.lang.reflect.Method.invoke(Method.java:568)
    at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
 ~~skip~~
{code}
Probably I don't understand correctly about your last comment. So due to the difference of toString methods, we need to modify the test code again to pass? Or the current test code works on your end now?;;;","05/Feb/23 23:50;hfuruichi;Hello. My bad. there is some difference in SnmpTrapProducer.java. It works fine now :)
{code:java}
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.component.snmp.Snmpv1TrapTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.679 s - in org.apache.camel.component.snmp.Snmpv1TrapTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:26 min
[INFO] Finished at: 2023-02-06T08:47:08+09:00
[INFO] ------------------------------------------------------------------------
 {code};;;","06/Feb/23 09:51;Federico Mariani;Great, I've backported the fix to camel-3.x and camel-3.20.x branch, the next release will contain it.;;;","06/Feb/23 10:53;davsclaus;Remember to update the fix-versions in JIRA;;;",,,,,,,,,,,,,,
Camel-aws2-sqs - Queue url might stay empty for the delayed queue.,CAMEL-18968,13520983,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,23/Jan/23 12:28,30/Jan/23 08:59,13/Jul/23 08:30,25/Jan/23 06:39,3.20.1,,,,,3.18.5,3.20.2,3.21.0,4.0.0,4.0-M1,,camel-aws2,,,0,,,"During investigation of [https://github.com/apache/camel-quarkus/issues/4389] I found that aws2-sqs producer is not able to send messages to the queueu which was created as delayed.

 

Queue url should be initialized during the endpoint initialization phase.  If queue does not exist in that time, the url stays empty for the whole life of the endpoint. Therefore majority of actions would fail.",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-23 12:28:18.0,,,,,,,,,,,"0|z1faps:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-CXF: OnCompletion not working anymore,CAMEL-18965,13520963,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,mash-sap,mash-sap,23/Jan/23 09:36,07/Jun/23 21:27,13/Jul/23 08:30,07/Jun/23 21:25,3.11.1,,,,,3.18.8,3.20.6,4.0-RC1,,,,camel-cxf,,,0,,,"Since following change, the onCompletionHandler is not called anymore in error case (soap fault)

https://issues.apache.org/jira/browse/CAMEL-16796
[https://github.com/apache/camel/commit/45e64cce8ad2e1d22a5f55be13a6dfcaa504f58f]

{*}Reproducer{*}: [https://github.com/mash-sap/CAMEL-16532/tree/Camel-18965]",,acosentino,davsclaus,ffang,mash-sap,,,,,,,,,,,,,,,,,,,,,CAMEL-16796,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jun 07 21:27:58 UTC 2023,,,,,,,,,,,"0|z1falc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"23/Jan/23 10:39;acosentino;Did you try with 3.18.x and 3.20.x?;;;","23/Jan/23 11:05;mash-sap;Hi [~acosentino],

I can update the reproducer only to 3.17 due to missing dependency to camel-cxf-starter 3.18 and above.

3.17 has the same problem and the code-change mentioned above is also part of 3.20. So I think it's also a problem in 3.20.

CXFConsumer in 3.20 (no close of Camel UOW): [https://github.com/apache/camel/blob/camel-3.20.x/components/camel-cxf/camel-cxf-soap/src/main/java/org/apache/camel/component/cxf/jaxws/CxfConsumer.java#L87]

Best regards,
Manuel;;;","26/Jan/23 17:33;davsclaus;See the upgrade guides on CXF from 3.18 onwards
https://camel.apache.org/manual/camel-3x-upgrade-guide-3_18.html;;;","03/Feb/23 08:06;mash-sap;Hi [~ffang] , is there any update on this issue?

Thanks in advance &
Best regards,
Manuel;;;","25/Mar/23 10:46;davsclaus;Is the onCompletion called if the SOAP request is valid (200 OK) instead of 500 fault;;;","25/Mar/23 16:33;davsclaus;Okay camel-cxf is a bit old code, and at first glance it looks like its wrong in the consumer class, where it creates UoW but does not call done after processing - there is only some code doing this in case of exception thrown.;;;","25/Mar/23 16:43;davsclaus;There is an UnitOfWorkCloserInterceptor that is supposed to done the UoW. But its not triggered when there is this soap fault. 

There are 2 closers below. 1st is for one-way. And a SOAP is request/response, so its not done. The 2nd below is not called when there is a SOAP fault error inside CXF.

        ret.getEndpoint().getInInterceptors().add(new UnitOfWorkCloserInterceptor(""post-invoke"", true));
        ret.getEndpoint().getOutInterceptors().add(new UnitOfWorkCloserInterceptor());

;;;","07/Jun/23 21:27;ffang;Thanks [~davsclaus] for the analysis. You are absolutely correct!;;;",,,,,,,,,,,,,
camel-salesforce: deserialization failure for streaming query response gets swallowed,CAMEL-18959,13520209,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jeremyross,jeremyross,jeremyross,19/Jan/23 14:45,30/Jan/23 08:59,13/Jul/23 08:30,21/Jan/23 16:36,3.20.1,,,,,4.0.0,4.0-M1,,,,,camel-salesforce,,,0,,,,,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-19 14:45:57.0,,,,,,,,,,,"0|z1f5yg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Jcache: It's using a bundle of javax-cache-api,CAMEL-18956,13520169,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,19/Jan/23 09:55,30/Jan/23 08:59,13/Jul/23 08:30,23/Jan/23 10:05,,,,,,4.0.0,4.0-M1,,,,,,,,0,,,"It's not part of Jakarta move, but I guess we should use the normal dependency and not the bundle.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-19 09:55:39.0,,,,,,,,,,,"0|z1f5pk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-micrometer - NPE on spring boot,CAMEL-18954,13520148,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andreas.klug2@de.bosch.com,andreas.klug2@de.bosch.com,19/Jan/23 07:14,30/Jan/23 12:42,13/Jul/23 08:30,30/Jan/23 12:24,3.20.1,,,,,3.20.2,3.21.0,4.0.0,4.0-M2,,,camel-micrometer,,,0,,,"Hello everyone,

Unfortunately when I’m testing a route containing a micrometer endpoint on Camel 3.20.1 using Spring Boot, then I’m getting a
{code:java}
java.lang.NullPointerException: null
        at org.apache.camel.component.micrometer.eventnotifier.MicrometerExchangeEventNotifierNamingStrategy.getTags(MicrometerExchangeEventNotifierNamingStrategy.java:53)
        at org.apache.camel.component.micrometer.eventnotifier.MicrometerExchangeEventNotifier.handleDoneEvent(MicrometerExchangeEventNotifier.java:105)
       at org.apache.camel.component.micrometer.eventnotifier.MicrometerExchangeEventNotifier.notify(MicrometerExchangeEventNotifier.java:75)
        […]
{code}
 

The exception only occurs in case I’m using:
{code:java}
producer.send(ExchangeBuilder.anExchange(context).withBody(""hello"").build());{code}
It’s working fine in case of
{code:java}
producer.sendBody(“hello”);{code}
For both statements, in 3.18.3 it’s working fine – in any case, meaning in 3.18.3 and 3.20.1, the ExchangeBuilder.anExchange(context).withBody(""hello"").build().getEndpointFrom() is null, however, only in 3.20.1 it looks like that getEndpointFrom() indirectly causes the NPE in [line 53|https://github.com/apache/camel/blob/1d7da244fadca57b4054cc0defb70a70923c06f4/components/camel-micrometer/src/main/java/org/apache/camel/component/micrometer/eventnotifier/MicrometerExchangeEventNotifierNamingStrategy.java#L53].

Pls. find a repo case attached.[^repro.zip]",,andreas.klug2@de.bosch.com,davsclaus,,,,,,,,,,,,,,,,,,,,CAMEL-18986,,,,"19/Jan/23 07:14;andreas.klug2@de.bosch.com;repro.zip;https://issues.apache.org/jira/secure/attachment/13054668/repro.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jan 30 12:42:54 UTC 2023,,,,,,,,,,,"0|z1f5kw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"30/Jan/23 12:02;davsclaus;Okay so how do I repdroduce this with your attached .zip file?

mvn test = pass
mvn spring-boot:run    runs;;;","30/Jan/23 12:04;davsclaus;Ah okay so the test only does a WARN log and does not fail - I can see it now;;;","30/Jan/23 12:42;davsclaus;Instead of using ExchangeBuilder then favour using FluentProducerTemplate instead;;;",,,,,,,,,,,,,,,,,,
camel-jetty - Should throw 504 error if continuation timeout was hit,CAMEL-18953,13520112,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Jan/23 21:25,30/Jan/23 08:59,13/Jul/23 08:30,18/Jan/23 21:35,4.0.0,,,,,4.0.0,4.0-M1,,,,,camel-jetty,,,0,,,Jetty returns 500 instead of 504 which was expected by some unit tests,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-18 21:25:57.0,,,,,,,,,,,"0|z1f5dk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST YAML does not work in Spring Boot,CAMEL-18944,13519967,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat.gubaidullin@gmail.com,marat.gubaidullin@gmail.com,18/Jan/23 02:39,22/Mar/23 07:56,13/Jul/23 08:30,22/Mar/23 07:56,3.20.1,,,,,3.21.0,4.0.0,4.0-M3,,,,camel-spring-boot,,,0,,,"The following YAML fails when run with Spring Boot
{code:java}
- rest:
    id: rest-dc6e
    post:
      - id: post-248c
        consumes: application/json
        produces: application/json
        to: direct:demo
- route:
    id: demo
    from:
      uri: direct:demo
      id: from-e15c
      steps:
        - log:
            message: ${body}
            id: log-a55d
{code}

command to call service
{code:java}
curl -X POST -H ""Content-Type: application/json"" --data '{""id"":""666"",""address"":""666 Sin Street, Holy City""}' http://0.0.0.0:8080
{code}

REST Configuration component does not change anything
",,davsclaus,marat.gubaidullin@gmail.com,,,,,,,,,,,,,,,,,,,,CAMEL-18952,CAMEL-19176,CAMEL-19177,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Mar 19 11:09:07 UTC 2023,,,,,,,,,,,"0|z1f4hk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/Jan/23 13:33;davsclaus;We also seem to have 2 endpoints logged with / or no-slash

2023-01-18 14:32:23.277  INFO 57255 --- [           main] che.camel.main.http.VertxHttpServer : HTTP endpoints summary
2023-01-18 14:32:23.277  INFO 57255 --- [           main] che.camel.main.http.VertxHttpServer :     http://0.0.0.0:8080 (POST)
2023-01-18 14:32:23.278  INFO 57255 --- [           main] che.camel.main.http.VertxHttpServer :     http://0.0.0.0:8080/ (POST);;;","18/Jan/23 14:41;davsclaus;btw its a bit unusual to use root path as the REST path, can you try with

post:
      - id: post-248c
        consumes: application/json
        produces: application/json
        to: direct:demo
        path: foo

And then invoke 8080/foo

;;;","18/Jan/23 14:49;marat.gubaidullin@gmail.com;with the path
{code:java}
{""timestamp"":""2023-01-18T14:49:16.681+00:00"",""status"":404,""error"":""Not Found"",""path"":""/foo""}
{code}
;;;","18/Jan/23 14:55;davsclaus;Yeah it looks like camel-servlet overrides platform-http and therefore are not setup correctly on SB;;;","18/Jan/23 15:00;davsclaus;We use servlet so we have that mapping pain where we need some kind of /* mapping in SB to make this working;;;","18/Jan/23 15:12;marat.gubaidullin@gmail.com;When I add
{code:java}
- restConfiguration:
    component: servlet
{code}

thrown

{code:java}
Caused by: java.lang.IllegalArgumentException: Component servlet is not a RestConsumerFactory
        at org.apache.camel.component.rest.RestEndpoint.createConsumer(RestEndpoint.java:482)
        at org.apache.camel.impl.engine.DefaultRoute.gatherRootServices(DefaultRoute.java:636)
        at org.apache.camel.impl.engine.DefaultRoute.gatherServices(DefaultRoute.java:620)
        at org.apache.camel.impl.engine.DefaultRoute.initializeServices(DefaultRoute.java:205)
        at org.apache.camel.impl.engine.RouteService.doSetup(RouteService.java:151)
        at org.apache.camel.impl.engine.RouteService.setUp(RouteService.java:130)
{code}
;;;","18/Jan/23 16:52;davsclaus;Ah yeah so it uses servlet in SB and its mapped to camel/* by default, so you need to use

http://0.0.0.0:8080/camel

You can change the mapping in application.properties

camel.servlet.mapping.context-path=/*

A problem with using /* is that then this will capture spring boot actuator for health check and whatnot, so ideally you need a starting context-path and not to use root.
;;;","18/Jan/23 17:06;marat.gubaidullin@gmail.com;1. If I understand correctly: 

1.1. the default http-platform for spring-boot is servlet, and `context-path` is `camel`

1.2. we can change context-path using `camel.servlet.mapping.context-path=/*`

2. Can we use 'restConfiguration` with spring-boot ?

 ;;;","18/Jan/23 17:14;davsclaus;1.1 yes
1.2 yes
2 yes

I run with
{code}
- rest-configuration:
    component: ""platform-http""
- rest:
    id: rest-dc6e
    post:
      - id: post-248c
        consumes: application/json
        produces: application/json
        to: direct:demo
#        path: foo
- route:
    id: demo
    from:
      uri: direct:demo
      id: from-e15c
      steps:
        - log:
            message: ${body}
            id: log-a55d
{code}

;;;","18/Jan/23 17:16;davsclaus;We need to let camel-rest prefer using platform-http over servlet due to camel-servlet-starter is activated by spring boot, and SB will then use that instead of platform-http. However the reason you cannot hit the endpoint is due to / vs /camel/* in the servlet mapping.

So we can also make camel jbang export and change the servlet mapping but then it clashes with spring boot acutuator for health-check. And to make both work together we need some ""magic"" pass through in camel servlet to SB for urls that are intended for SB and not Camel.;;;","18/Jan/23 17:34;marat.gubaidullin@gmail.com;we can set default contex-path, ex. `camel' explicitly for spring-boot and quarkus in application.properties and referred it in Rest DSL description message to inform users through UI

However we need to find a way to set it in camel-jbang as well to have similar UX

 ;;;","18/Jan/23 19:27;davsclaus;The same example works in Quarkus right, and you can also have health-check working still if you invoke /q/health

The problem is that SB uses servlet and not vertx http server directly like quarkus that can better handle url mapping so /q/health and / (root) works.

But it may be a better UX to make rest-dsl via platform-http require to set a base path, such as /api or /myapp or something;;;","19/Mar/23 11:09;davsclaus;platform-http in spring-boot may uses request mapping (something) to map from SB http server to Camel instead of using a http servlet (CamelServlet). Then this could lead to making this work out of the box.;;;",,,,,,,,
TemplatedRoute fails to load with XML RouteLoader,CAMEL-18922,13519151,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skin27,skin27,14/Jan/23 14:18,30/Jan/23 08:59,13/Jul/23 08:30,15/Jan/23 15:35,3.20.1,,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,came-core,,,0,,,"I created the following ticket yesterday:

https://issues.apache.org/jira/browse/CAMEL-18914

This issue was not a bug as it was a problem with the namespace.

I am creating a new ticket as the route template still doesn't load in 3.20.0 (In 3.19.0 it loads successfully).

Here is the code I am using:
{code:java}
// 1. Start Camel
context = new DefaultCamelContext();
context.start();

//2. Load route template
context.addRoutes((RouteBuilder) new MyTemplate());

//3. Create resource from string
String content = ""<templatedRoutes id=\""camel\"" xmlns=\""http://camel.apache.org/schema/spring\"">\n"" +
        ""    <!-- create two routes from the template -->\n"" +
        ""    <templatedRoute routeTemplateRef=\""myTemplate\"">\n"" +
        ""        <parameter name=\""name\"" value=\""Manually Loaded Tempate\""/>\n"" +
        ""        <parameter name=\""greeting\"" value=\""Hello\""/>\n"" +
        ""    </templatedRoute>\n"" +
        ""</templatedRoutes>"";

Resource resource = ResourceHelper.fromString(""in-memory.xml"", content);

//4. Load resource
ExtendedCamelContext extendedCamelContext = context.adapt(ExtendedCamelContext.class);
RoutesLoader loader = extendedCamelContext.getRoutesLoader();
loader.loadRoutes(resource);

//5. check the size of all routes
LOG.info(""RoutesSize = "" + context.getRoutesSize()); {code}
I added an example to reproduce this issue. When Camel version 3.19.0 is used the example works. When version 3.20.0 is used it fails. The example is configured with 3.19.0 (as the bom version).",,davsclaus,skin27,,,,,,,,,,,,,,,,,,,,,,,,"14/Jan/23 14:18;skin27;routeloader-with-routetemplate.7z;https://issues.apache.org/jira/secure/attachment/13054592/routeloader-with-routetemplate.7z","14/Jan/23 18:27;skin27;routeloader-with-routetemplate.zip;https://issues.apache.org/jira/secure/attachment/13054595/routeloader-with-routetemplate.zip",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jan 15 16:43:48 UTC 2023,,,,,,,,,,,"0|z1ezgo:",9223372036854775807,,,,,,,,,,,,,,,,,,,"15/Jan/23 15:14;davsclaus;Okay I think I can see the bug.

You can use this to make it work

loader.loadRoutes(List.of(resource));;;;","15/Jan/23 15:24;skin27;OK, thanks for the workaround. I want to demo 3.20.x next week, and it's nice to include route templates.;;;","15/Jan/23 16:43;skin27;Just a question, when I use the snapshot version, can I then test it by using it this way:
{code:java}
loader.loadRoutes(resource);{code};;;",,,,,,,,,,,,,,,,,,
Autowiring on endpoint works even if is disabled on component,CAMEL-18878,13517556,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,11/Jan/23 07:45,30/Jan/23 08:59,13/Jul/23 08:30,11/Jan/23 14:36,3.20.1,,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,camel-core,,,0,,,"Simi9lar to  https://issues.apache.org/jira/browse/CAMEL-16527

If autowireEnabled=false is set into the component, the DefaultEndpoint in method ""doInit"" ignores the fact, that autowiring might be disabled on component/",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-11 07:45:08.0,,,,,,,,,,,"0|z1epns:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core-model - Rest DSL param example not available in XML and YAML DSL,CAMEL-18872,13517415,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Jan/23 08:13,30/Jan/23 08:59,13/Jul/23 08:30,10/Jan/23 08:14,3.20.1,,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,camel-core,,,0,,,A model change in 3.20.1 mistakenly removed examples from rest-dsl for param. Adding this back.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-10 08:13:17.0,,,,,,,,,,,"0|z1eoso:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - Application does not recover (threads are WAITING) when NettyProducer pool is exhausted,CAMEL-18871,13517256,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,vincenzo.galluccio,vincenzo.galluccio,09/Jan/23 15:35,30/Jan/23 08:59,13/Jul/23 08:30,12/Jan/23 10:23,3.14.7,,,,,3.14.8,3.18.5,3.20.2,3.21.0,4.0.0,4.0-M1,camel-netty,,,0,,,"When the Camel Application sends a LOT of requests to a TCP/IP Server (which is not available/down) using Netty component, after a bit, it hangs because the Producer Pool is exhausted (when *producerPoolMaxTotal* is not -1).

 
{code:java}
from(""direct:start"")
.to(""netty://tcp://localhost:18667?connectTimeout=500&decoders=#myDecoders&encoders=#myEncoders&producerPoolMaxTotal=10&producerPoolMinEvictableIdle=-1&requestTimeout=250&sync=true"");
{code}
 

 

In previous version 3.14.1 the behavior was to fail when Pool was exhausted ({*}GenericObjectPool.{*}{*}WHEN_EXHAUSTED_FAIL{*}), however since version 3.14.2 and the migration to `{*}org.apache.commons:commons-pool2{*}` (https://issues.apache.org/jira/browse/CAMEL-17461) the default has become to block.

 

The proposal is to adjust `[https://github.com/apache/camel/blob/camel-3.14.7/components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java] ` , method `doStart()` to add optionally set the *BlockWhenExhausted* flag (BaseGenericObjectPool.setBlockWhenExhausted) and the *{{borrowMaxWaitMillis}}* parameters.

 
{code:java}
""Camel Thread #74 - NettyClientTCPWorker"" #1166 prio=5 os_prio=0 tid=0x00007fd661a1d800 nid=0x18599 waiting on condition [0x00007fd5ffb12000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000005ce0e8338> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)
        at org.apache.commons.pool2.impl.LinkedBlockingDeque.takeFirst(LinkedBlockingDeque.java:1323)
        at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:306)
        at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:223)
        at org.apache.camel.component.netty.NettyProducer.processWithBody(NettyProducer.java:259)
        at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:228)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:172)
        at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:398){code}
 ",,davsclaus,vincenzo.galluccio,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Java,Wed Jan 25 09:43:59 UTC 2023,,,,,,,,,,,"0|z1envs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"09/Jan/23 15:38;vincenzo.galluccio;Hello [~davsclaus] , I see you were the assignee for https://issues.apache.org/jira/browse/CAMEL-17461 which introduced the new Pool type.
What do you think about this issue and my proposal to add those 2 extra params when configuring the Producer Pool ?;;;","09/Jan/23 15:53;davsclaus;Yes you are welcome to send a PR or patch file;;;","11/Jan/23 18:38;vincenzo.galluccio;Hello [~davsclaus] . I have created the following PR: [https://github.com/apache/camel/pull/9047]

PS: The PR to add the two new options/params to [https://github.com/apache/camel-spring-boot/tree/main/components-starter/camel-netty-starter] will follow..;;;","12/Jan/23 06:27;davsclaus;Are you able to work on a special PR for 3.14.x as the other cannot cleanly be backported;;;","12/Jan/23 08:00;vincenzo.galluccio;Yes, I can make a new PR to target branch 3.14.x;;;","12/Jan/23 10:23;davsclaus;Thanks for the PRs;;;","12/Jan/23 10:26;vincenzo.galluccio;Thank you. I'll work on the camel-netty-starter soon;;;","13/Jan/23 14:39;vincenzo.galluccio;Hey Claus, here the PR for the starter: https://github.com/apache/camel-spring-boot/pull/697;;;","25/Jan/23 09:43;vincenzo.galluccio;Hey [~davsclaus] , any idea when 3.14.8 will be released ?;;;",,,,,,,,,,,,
Aws2-s3: CreateDownloadLink does not work with useDefaultCredentialsProvider,CAMEL-18868,13517250,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jondruse,jondruse,jondruse,09/Jan/23 14:25,30/Jan/23 08:59,13/Jul/23 08:30,09/Jan/23 15:52,3.20.1,,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,camel-aws2,,,0,,,"If component uses default credential provider (`useDefaultCredentialsProvider`), operation `createDownloadLink` fails with:

{quote}Caused by: java.lang.NullPointerException: Access key ID cannot be blank.
	at software.amazon.awssdk.utils.Validate.notNull(Validate.java:119)
	at software.amazon.awssdk.auth.credentials.AwsBasicCredentials.<init>(AwsBasicCredentials.java:66)
	at software.amazon.awssdk.auth.credentials.AwsBasicCredentials.<init>(AwsBasicCredentials.java:58)
	at software.amazon.awssdk.auth.credentials.AwsBasicCredentials.create(AwsBasicCredentials.java:78)
	at org.apache.camel.component.aws2.s3.AWS2S3Producer.createDownloadLink(AWS2S3Producer.java:590)
	at org.apache.camel.component.aws2.s3.AWS2S3Producer.process(AWS2S3Producer.java:122){quote}
",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,2023-01-09 14:25:00.0,,,,,,,,,,,"0|z1enug:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-main - Setters not invoked on bean that implements Map,CAMEL-18865,13517020,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chrissh,chrissh,06/Jan/23 09:42,30/Jan/23 08:59,13/Jul/23 08:30,06/Jan/23 11:54,3.20.0,,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,camel-main,,,0,,,"We are having trouble configuring camel-jms with IBM-MQ as runtime implementation, using camel-main.

Doing so requires the declaration of a connection factory, which, in our case, is [com.ibm.mq.jms.MQConnectionFactory|https://www.ibm.com/docs/api/v1/content/SSFKSJ_9.2.0/com.ibm.mq.javadoc.doc/WMQJMSClasses/com/ibm/mq/jms/MQConnectionFactory.html]. Unfortunately, this class implements both {{javax.jms.ConnectionFactory}} and {{{}java.util.Map<java.lang.String,java.lang.Object>{}}}. Also, the setters of that class have side effects, that are non-trivial to reproduce.

What was really troubling us was that, contrary to intuition, defining a bean like this:
{code:java}
camel.beans.mqConnectionFactory = #class:com.ibm.mq.jms.MQConnectionFactory
camel.beans.mqConnectionFactory.hostName = mqhost
{code}
does not actually invoke the setHostName method on the factory. Instead, value ""mqhost"" is put under key ""hostName"" into the map.

Reproduction can be achieved with a quick custom class, like this:
{code:java}
package org.apache.camel.main;

import java.util.HashMap;

public class MyFooFactory extends HashMap<String, Object> {
    private String hostName;

    public String getHostName() {
        return hostName;
    }

    public void setHostName(String hostName) {
        this.hostName = hostName;
    }
}
{code}
and a unit test, which checks for the hostName:
{code:java}
    @Test
    public void testBindBeansDottedHybridMap() {
        Main main = new Main();
        main.configure().addRoutesBuilder(new MyRouteBuilder());

        // defining a factory bean
        main.addProperty(""camel.beans.myfactory"", ""#class:org.apache.camel.main.MyFooFactory"");
        main.addProperty(""camel.beans.myfactory.hostName"", ""localhost"");
        main.start();

        CamelContext camelContext = main.getCamelContext();
        assertNotNull(camelContext);

        Object bean = camelContext.getRegistry().lookupByName(""myfactory"");
        assertNotNull(bean);
        assertInstanceOf(MyFooFactory.class, bean);

        MyFooFactory factory = (MyFooFactory) bean;
        assertEquals(""localhost"", factory.getHostName());

        main.stop();
    }
{code}
For a custom bean that is under our own control, I would consider implementing java.util.Map and having additional custom getters and setters with side-effects to be invalid, but the IBM-MQ JMS client is out of our control - and required for our use case.

If the dotted annotation is used, it may be preferable to check for a suitable setter first, and only if that is missing, to check if the bean implements java.util.Map.","jdk11, camel-main, camel-jms, IBM-MQ 9.2 (https://mvnrepository.com/artifact/com.ibm.mq/com.ibm.mq.allclient)",chrissh,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Jan 09 16:06:04 UTC 2023,,,,,,,,,,,"0|z1emfk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"06/Jan/23 09:46;davsclaus;Sorry but Map/List will be used as a collection and not something else. 
We will not add workarounds for all really weird corner cases.;;;","06/Jan/23 10:08;chrissh;I understand that. Yet, it took us hours of debugging and deep-diving into the implementations of camel-main and the ibm-mq client to figure out what was happening. Documenting it here may save other users some time in the future.;;;","06/Jan/23 10:27;davsclaus;https://camel.apache.org/community/contributing/;;;","06/Jan/23 10:39;chrissh;As additional information, of course we are not implemtenting something new, but migrating from an XML blueprint that ran in camel2/karaf, where that same connection factory was declared like this:
{code:xml}
<bean id=""mqConnectionFactory"" class=""com.ibm.mq.jms.MQConnectionFactory"">
  <property name=""hostName"" value=""${mqHostname}"" />
  <!-- more properties, here -->
</bean>
{code}
which suggested that we could use the hostName property in camel-main as well. I cannot tell at the moment whether or not the version of MQConnectionFactory that was used to do so, did implement Map as well.;;;","06/Jan/23 10:56;davsclaus;The old <bean> in blueprint is all reflection based and not optimized. camel-main is that and avoids reflection when possible.

However looking at this again I can see the point about [xxx] vs .xxx that can make it possible to favour map first/last - because then the end user have declared the style of choice.
However its really bad that IBM make their CF extend a Map class - that is just crazy

;;;","06/Jan/23 11:54;davsclaus;Okay so DOT vs [] style is now taking into account.;;;","09/Jan/23 16:06;chrissh;Thanks for reconsidering the issue and the quick fix!;;;",,,,,,,,,,,,,,
camel-main - Unable to declare java.util.List bean,CAMEL-18856,13516323,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chrissh,chrissh,03/Jan/23 13:04,30/Jan/23 08:59,13/Jul/23 08:30,04/Jan/23 08:05,3.18.1,3.20.0,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,camel-main,,,0,,,"I have been unsuccessful in declaring a java.util.List bean. According to camel-main documentation, a List bean should be declared using numeric keys in square brackets:
{noformat}
camel.beans.myprojects[0] = Camel
camel.beans.myprojects[1] = Kafka
camel.beans.myprojects[2] = Quarkus
{noformat}
This does, however, not actually declare a java.util.List, but a java.util.LinkedHashMap, instead.

Again, reproduction is easy:
{code:java}
@Test
public void testBindBeansList() {
    Main main = new Main();
    main.configure().addRoutesBuilder(new MyRouteBuilder());

    // defining a list bean
    main.addProperty(""camel.beans.myprojects[0]"", ""Camel"");
    main.addProperty(""camel.beans.myprojects[1]"", ""Kafka"");
    main.addProperty(""camel.beans.myprojects[2]"", ""Quarkus"");

    main.start();

    CamelContext camelContext = main.getCamelContext();
    assertNotNull(camelContext);

    Object bean = camelContext.getRegistry().lookupByName(""myprojects"");
    assertNotNull(bean);
    assertInstanceOf(java.util.List.class, bean);

    java.util.List<?> list = (java.util.List<?>) bean;
    assertEquals(3, list.size());
    assertEquals(""Camel"", list.get(0));
    assertEquals(""Kafka"", list.get(1));
    assertEquals(""Quarkus"", list.get(2));

    main.stop();
} {code}
There is a workaround, which is to use java.util.List#of, which is also more concise, but only possible if using Java 9 or above:
{noformat}
camel.beans.myprojects = #class:java.util.List#of(""Camel"", ""Kafka"", ""Quarkus""){noformat}
 ",jdk11,chrissh,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jan 04 08:05:15 UTC 2023,,,,,,,,,,,"0|z1ei4o:",9223372036854775807,,,,,,,,,,,,,,,,,,,"04/Jan/23 08:05;davsclaus;Thanks for reporting and the test case;;;",,,,,,,,,,,,,,,,,,,,
camel-rabbitmq x-queue-type no longer working,CAMEL-18854,13516292,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,hdumont34,hdumont34,03/Jan/23 09:49,30/Jan/23 08:59,13/Jul/23 08:30,03/Jan/23 12:01,3.20.0,,,,,3.20.2,3.21.0,4.0.0,4.0-M1,,,camel-rabbitmq,,,0,,,"Using rabbitMQ consumer  with arg.queue.x-queue-type=quorum is no longer working with 

3.20 , it was working with 3.18.

Whatever value is set to x-queue-type, connection is done with x-queue-type set to null.

Regression has been introduced by 
[Added support for rabbitmq x-queue-type by eduanb · Pull Request #8725 · apache/camel (github.com)|https://github.com/apache/camel/pull/8725]",,davsclaus,hdumont34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 03 10:50:56 UTC 2023,,,,,,,,,,,"0|z1ehxs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"03/Jan/23 09:58;davsclaus;Can you paste some more code to use as reproducer, or send a PR with a suggested fix etc.;;;","03/Jan/23 09:59;davsclaus;Also mind there is camel-rabbitmq (deprecated) and camel-spring-rabbitmq. Which component do you use?;;;","03/Jan/23 10:01;hdumont34;I've found the issue with camel-rabbitmq , and I'm preparing a PR. 

 ;;;","03/Jan/23 10:07;hdumont34;I checked code for camel-spring-rabbitmq..

Issue is not present. x-queue-type is correctly set, even if pull request #8725 above is adding unnecessary code (no need to convert a String to a String) ;;;","03/Jan/23 10:36;davsclaus;Thanks you are welcome to send a PR for that too;;;","03/Jan/23 10:50;hdumont34;yes I'll send a chores PR, once first one is merged. ;;;",,,,,,,,,,,,,,,
